[
  {
    "owner": "tmux-python",
    "repo": "tmuxp",
    "content": "TITLE: Installing Tmuxp via Pip\nDESCRIPTION: Basic installation command for tmuxp using pip package manager with user-level installation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user tmuxp\n```\n\n----------------------------------------\n\nTITLE: Sample tmuxp YAML configuration\nDESCRIPTION: A YAML configuration example for tmuxp that defines a session with a 4-pane window layout, including commands to run in each pane.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: 4-pane-split\nwindows:\n  - window_name: dev window\n    layout: tiled\n    shell_command_before:\n      - cd ~/ # run as a first command in all panes\n    panes:\n      - shell_command: # pane no. 1\n          - cd /var/log # run multiple commands in this pane\n          - ls -al | grep \\.log\n      - echo second pane # pane no. 2\n      - echo third pane # pane no. 3\n      - echo fourth pane # pane no. 4\n```\n\n----------------------------------------\n\nTITLE: Installing tmuxp with pip\nDESCRIPTION: Installs tmuxp package for the current user using pip package manager.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user tmuxp\n```\n\n----------------------------------------\n\nTITLE: Loading Tmuxp Configuration\nDESCRIPTION: Command to load a tmuxp workspace configuration file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load example.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic tmuxp Workspace Configuration\nDESCRIPTION: Basic YAML configuration showing session structure with windows and panes\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: My session\nwindows:\n- window_name: Window 1\n  panes:\n  - shell_command:\n    - cmd: echo \"pane 1\"\n  - shell_command:\n    - cmd: echo \"pane 2\"\n```\n\n----------------------------------------\n\nTITLE: Installing tmuxp with Homebrew\nDESCRIPTION: Installs tmuxp using macOS Homebrew package manager.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ brew install tmuxp\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp session from project directory\nDESCRIPTION: Loads a tmux session from a project directory containing a .tmuxp.yaml or .tmuxp.json file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ntmuxp load path/to/my/project/\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp session from file\nDESCRIPTION: Commands to load a tmux session from a tmuxp configuration file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ntmuxp load ./mysession.yaml\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Tmuxp Sessions\nDESCRIPTION: Command to load multiple tmuxp workspace configurations simultaneously.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load example.yaml anothersession.yaml\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Current Directory in Console\nDESCRIPTION: Demonstrates how to load a tmuxp configuration file from the current directory using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load .\n```\n\n----------------------------------------\n\nTITLE: Loading multiple tmuxp sessions\nDESCRIPTION: Loads multiple tmux sessions at once, running them in the background and offering to attach to the last one.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ntmuxp load mysession ./another/project/\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration with Direct Filename in Console\nDESCRIPTION: Illustrates loading a tmuxp configuration file directly by filename using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load [filename]\n```\n\n----------------------------------------\n\nTITLE: Loading Project-specific Workspace\nDESCRIPTION: Console commands showing how to load project-specific workspace files\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ./\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load /opt/myapp\n```\n\n----------------------------------------\n\nTITLE: Installing Developmental Release via Pipx\nDESCRIPTION: Command to install pre-release version using pipx with a next suffix for isolation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pipx install --suffix=@next 'tmuxp' --pip-args '\\--pre' --force\n```\n\n----------------------------------------\n\nTITLE: Loading a tmuxp Session in Detached Mode\nDESCRIPTION: Command to load a tmuxp configuration file in detached mode using the -d flag. This creates the tmux session in the background without attaching to it immediately.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/top-level.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ./apple.yaml -d\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment with shell_command_before\nDESCRIPTION: Extends the pipenv auto-bootstrapping example by adding a shell command that activates the virtual environment before starting the session. This enables running commands directly without prefixing with 'pipenv run'.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# assuming your .tmuxp.yaml is in your project root directory\nsession_name: my pipenv project\nstart_directory: ./\nbefore_script: pipenv install --dev --skip-lock # ensure dev deps install\nshell_command_before:\n- '[ -d `pipenv --venv` ] && source `pipenv --venv`/bin/activate && reset'\nwindows:\n- window_name: django project\n  focus: true\n  panes:\n  - blank\n  - ./manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration and Attaching Session in Console\nDESCRIPTION: Demonstrates loading a tmuxp configuration and automatically attaching to the session using the 'tmuxp load' command with the -y option.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load -y config\n```\n\n----------------------------------------\n\nTITLE: Installing Tmuxp via Homebrew\nDESCRIPTION: Installation command for macOS users using Homebrew package manager.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ brew install tmuxp\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipenv Auto-bootstrapping in tmuxp\nDESCRIPTION: Sets up a tmuxp configuration that automatically installs dependencies using pipenv before launching the session. This ensures all project dependencies are available when the session starts.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# assuming your .tmuxp.yaml is in your project root directory\nsession_name: my pipenv project\nstart_directory: ./\nbefore_script: pipenv install --dev --skip-lock # ensure dev deps install\nwindows:\n- window_name: django project\n  focus: true\n  panes:\n  - blank\n  - pipenv run ./manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Windows Configuration\nDESCRIPTION: YAML snippet showing how to configure multiple windows in tmuxp\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwindows:\n  - window_name: Window 1\n    panes: ...\n    # window settings\n  - window_name: Window 2\n    panes: ...\n    # window settings\n```\n\n----------------------------------------\n\nTITLE: Installing tmuxp on Debian/Ubuntu\nDESCRIPTION: Installs tmuxp using the apt package manager on Debian-based Linux distributions.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install tmuxp\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-line Commands in tmuxp YAML\nDESCRIPTION: Uses YAML's multiline syntax to split multiple commands into a single shell command. This example shows a tmuxp configuration with shell commands before session start and multiple panes with different commands.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: my project\nshell_command_before:\n- >\n  [ -d `.venv/bin/activate` ] &&\n  source .venv/bin/activate &&\n  reset\n- sleep 1\nwindows:\n- window_name: first window\n  layout: main-horizontal\n  focus: true\n  panes:\n  - focus: True\n  - blank\n  - >\n    uv run ./manage.py migrate &&\n    npm -C js run start\n  - uv run ./manage.py runserver\n  options:\n    main-pane-height: 35\n```\n\n----------------------------------------\n\nTITLE: Loading Workspace Files - Direct Method\nDESCRIPTION: Console commands showing how to load workspace files directly\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ./favorites.yaml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load /opt/myapp/favorites.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing tmuxp with Nix\nDESCRIPTION: Installs tmuxp using the Nix package manager, checking first if tmux is installed and installing it if needed.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ [[ -z $(which tmux) ]] && (nix-env -i tmux && nix-env -i tmuxp) || nix-env -i tmuxp\n```\n\n----------------------------------------\n\nTITLE: Freezing tmux session with tmuxp\nDESCRIPTION: Command to snapshot the current tmux layout, pane paths, and window/session names to a configuration file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp freeze session-name\n```\n\n----------------------------------------\n\nTITLE: Commands Configuration\nDESCRIPTION: YAML snippet showing how to configure commands for panes\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwindows:\n  panes:\n    - shell_command:\n        - cmd: echo \"pane 1 - cmd 1\"\n          # command options\n        - cmd: echo \"pane 1 - cmd 2\"\n          # command options\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Home Directory YAML File in Console\nDESCRIPTION: Shows how to load a tmuxp configuration from a YAML file in the user's home directory using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ~/myfile.yaml\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tmuxp via Pip\nDESCRIPTION: Command to upgrade existing tmuxp installation to the latest release.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user --upgrade tmuxp\n```\n\n----------------------------------------\n\nTITLE: Loading User-based Workspace\nDESCRIPTION: Console command for loading a workspace from the XDG config directory\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load apple\n```\n\n----------------------------------------\n\nTITLE: Panes Configuration\nDESCRIPTION: YAML snippet showing panes configuration structure\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwindows:\n  panes:\n    -  # pane settings\n    -  # pane settings\n```\n\n----------------------------------------\n\nTITLE: Defining Glossary Terms in Markdown\nDESCRIPTION: This code snippet defines a glossary using Markdown syntax. It includes definitions for tmuxp, tmux, ConfigReader, Server, Client, Session, Window, Pane, and Target. Each term is explained in detail, providing context and relationships between different components.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/glossary.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{glossary}\n\ntmuxp\n    A tool to manage workspaces with tmux. A pythonic abstraction of\n    tmux.\n\ntmux\ntmux(1)\n    The tmux binary. Used internally to distinguish tmuxp is only a\n    layer on top of tmux.\n\nConfigReader\n    configuration management class, for parsing YAML / JSON / etc. files\n    to and from python data (dictionaries, in the future, potentially\n    dataclasses)\n\nServer\n    Tmux runs in the background of your system as a process.\n\n    The server holds multiple {term}`Session`. By default, tmux\n    automatically starts the server the first time ``$ tmux`` is ran.\n\n    A server contains {term}`session`'s.\n\n    tmux starts the server automatically if it's not running.\n\n    Advanced cases: multiple can be run by specifying\n    ``[-L socket-name]`` and ``[-S socket-path]``.\n\nClient\n    Attaches to a tmux {term}`server`.  When you use tmux through CLI,\n    you are using tmux as a client.\n\nSession\n    Inside a tmux {term}`server`.\n\n    The session has 1 or more {term}`Window`. The bottom bar in tmux\n    show a list of windows. Normally they can be navigated with\n    ``Ctrl-a [0-9]``, ``Ctrl-a n`` and ``Ctrl-a p``.\n\n    Sessions can have a ``session_name``.\n\n    Uniquely identified by ``session_id``.\n\nWindow\n    Entity of a {term}`session`.\n\n    Can have 1 or more {term}`pane`.\n\n    Panes can be organized with a layouts.\n\n    Windows can have names.\n\nPane\n    Linked to a {term}`Window`.\n\n    a pseudoterminal.\n\nTarget\n    A target, cited in the manual as ``[-t target]`` can be a session,\n    window or pane.\n```\n```\n\n----------------------------------------\n\nTITLE: Using tmuxp shell interactive console\nDESCRIPTION: Demonstrates the tmuxp shell feature that provides an interactive Python console with preloaded tmux server, session, and window objects.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp shell\n\n(Pdb) server\n<libtmux.server.Server object at 0x7f7dc8e69d10>\n(Pdb) server.sessions\n[Session($1 your_project)]\n(Pdb) session\nSession($1 your_project)\n(Pdb) session.name\n'your_project'\n(Pdb) window\nWindow(@3 1:your_window, Session($1 your_project))\n(Pdb) window.name\n'your_window'\n(Pdb) window.panes\n[Pane(%6 Window(@3 1:your_window, Session($1 your_project)))]\n(Pdb) pane\nPane(%6 Window(@3 1:your_window, Session($1 your_project))\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp session with custom session name\nDESCRIPTION: Loads a tmux session with a custom session name specified with the -s flag.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ntmuxp load -s session_name ./mysession.yaml\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple tmuxp Configurations in Console\nDESCRIPTION: Demonstrates loading multiple tmuxp configuration files in a single command using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load [filename1] [filename2] ...\n```\n\n----------------------------------------\n\nTITLE: Running commands in tmuxp shell\nDESCRIPTION: Examples of running direct Python commands in tmuxp shell using the -c flag.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp shell -c 'print(window.name)'\nmy_window\n\n$ tmuxp shell -c 'print(window.name.upper())'\nMY_WINDOW\n```\n\n----------------------------------------\n\nTITLE: Running Bootstrap Script Before tmuxp Session in YAML\nDESCRIPTION: Configures a before_script to run a Python script before the tmuxp session starts building. The script path is relative to the .tmuxp.yaml file's root directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: my session\nbefore_script: ./bootstrap.py\n# ... the rest of your workspace\n```\n\n----------------------------------------\n\nTITLE: Defining a tmux Session Name in YAML Configuration\nDESCRIPTION: A YAML configuration example that sets a custom session name 'banana' which differs from the filename 'apple.yaml'. This demonstrates how the session_name property determines the tmux session identifier regardless of the configuration filename.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/top-level.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: banana\nwindows:\n  - panes:\n      -\n```\n\n----------------------------------------\n\nTITLE: Basic tmuxp freeze Command Usage\nDESCRIPTION: Freezes the currently attached tmux session and saves its state to a configuration file in either JSON or YAML format.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/freeze.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp freeze\n```\n\n----------------------------------------\n\nTITLE: Loading User-Based tmuxp Configuration in Console\nDESCRIPTION: Shows how to load a tmuxp configuration file from the user's .tmuxp directory using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load myconfig\n```\n\n----------------------------------------\n\nTITLE: Setting TMUXP_CONFIGDIR for Custom Configuration Directory in Console\nDESCRIPTION: This command demonstrates how to set a custom configuration directory for tmuxp using the TMUXP_CONFIGDIR environmental variable before loading a session named 'cpython'.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/environmental-variables.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nTMUXP_CONFIGDIR=$HOME/.mytmuxpconfigdir tmuxp load cpython\n```\n\n----------------------------------------\n\nTITLE: Basic tmuxp Shell Command\nDESCRIPTION: Shows how to execute Python code directly through tmuxp shell using the -c flag\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/shell.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp shell -c 'python code'\n```\n\n----------------------------------------\n\nTITLE: Freezing a Specific tmux Session\nDESCRIPTION: Freezes a specific tmux session identified by session_name and saves its state to a configuration file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/freeze.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp freeze [session_name]\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp session from user config directory\nDESCRIPTION: Loads a tmux session by name, looking for the configuration file in the user's tmuxp configuration directories.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load mysession\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Parent Directory in Console\nDESCRIPTION: Shows how to load a tmuxp configuration file from the parent directory using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ../\n```\n\n----------------------------------------\n\nTITLE: Python Debug Console Interaction\nDESCRIPTION: Demonstrates accessing tmux objects like server, sessions, windows and panes in the Python debugger console\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/shell.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n(Pdb) server\n<libtmux.server.Server object at 0x7f7dc8e69d10>\n(Pdb) server.sessions\n[Session($1 your_project)]\n(Pdb) session\nSession($1 your_project)\n(Pdb) session.name\n'your_project'\n(Pdb) window\nWindow(@3 1:your_window, Session($1 your_project))\n(Pdb) window.name\n'your_window'\n(Pdb) window.panes\n[Pane(%6 Window(@3 1:your_window, Session($1 your_project)))]\n(Pdb) pane\nPane(%6 Window(@3 1:your_window, Session($1 your_project)))\n```\n\n----------------------------------------\n\nTITLE: Force Overwriting Existing Configuration\nDESCRIPTION: Freezes a tmux session and forces overwriting any existing workspace file with the same name.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/freeze.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp freeze --force [session_name]\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration with Custom Session Name in Console\nDESCRIPTION: Shows how to load a tmuxp configuration with a custom session name using the 'tmuxp load' command with the -s option.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load -s [new_session_name] [filename1] ...\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Specific Path in Console\nDESCRIPTION: Illustrates loading a tmuxp configuration file from a specific path using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load path/to/folder/\n```\n\n----------------------------------------\n\nTITLE: Appending Windows to Existing Session with tmuxp in Console\nDESCRIPTION: Illustrates how to append windows to an existing tmux session using the 'tmuxp load' command with the -a option.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load -a config\n```\n\n----------------------------------------\n\nTITLE: Creating Named tmux Session\nDESCRIPTION: Command to create a new tmux session with a specific name using the -s flag.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ tmux new-session [-s session-name]\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp session with logging\nDESCRIPTION: Command to load a tmux session while logging output to a file for debugging purposes.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load --log-file <log-file-name> .\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Absolute Path in Console\nDESCRIPTION: Demonstrates loading a tmuxp configuration file using an absolute path with the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load /path/to/folder/\n```\n\n----------------------------------------\n\nTITLE: Splitting Tmux Windows into Panes via Console Commands\nDESCRIPTION: Console command for splitting a tmux window into panes, optionally specifying a start directory and shell command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ tmux split-window [-c start-directory] <shell-command>\n```\n\n----------------------------------------\n\nTITLE: Session Name Configuration\nDESCRIPTION: YAML snippet showing how to define a session name in tmuxp\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: My session\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Current Directory YAML File in Console\nDESCRIPTION: Illustrates loading a tmuxp configuration from a YAML file in the current directory using the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ./myfile.yaml\n```\n\n----------------------------------------\n\nTITLE: Moving Tmux Windows via Console Commands\nDESCRIPTION: Console commands for moving and swapping windows in tmux.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ tmux move-window [-t dst-window]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmux swap-window [-t dst-window]\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration with Logging in Console\nDESCRIPTION: Illustrates loading a tmuxp configuration with logging enabled using the 'tmuxp load' command with the --log-file option.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load [filename] --log-file [log_filename]\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration from Absolute Path YAML File in Console\nDESCRIPTION: Demonstrates loading a tmuxp configuration from a YAML file using an absolute path with the 'tmuxp load' command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load /abs/path/to/myfile.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Path to Bootstrap Script in YAML\nDESCRIPTION: Shows how to specify an absolute path to a shell script that should run before starting a tmuxp session. This is useful when the script is not in the project directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: another example\nbefore_script: /absolute/path/this.sh # abs path to shell script\n# ... the rest of your workspace\n```\n\n----------------------------------------\n\nTITLE: Renaming Window\nDESCRIPTION: Command to rename an existing tmux window after creation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ tmux rename-window <new-name>\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration in Detached Mode in Console\nDESCRIPTION: Shows how to load a tmuxp configuration in detached mode (background) using the 'tmuxp load' command with the -d option.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load -d config\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Workspace from File\nDESCRIPTION: Demonstrates how to load a tmuxp workspace configuration from an absolute file path using the tmuxp command line interface.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ~/workspaces/myproject.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Path to Bootstrap Script in JSON\nDESCRIPTION: JSON format for specifying an absolute path to a shell script to run before the tmuxp session starts. Demonstrates the same functionality as the YAML version.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"session_name\": \"my session\",\n    \"before_script\": \"/absolute/path/this.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to YAML using tmuxp convert\nDESCRIPTION: Command-line example for converting a JSON configuration file to YAML format using the tmuxp convert command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/convert.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp convert /path/to/file.json\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Configuration with Custom Log Level in Console\nDESCRIPTION: Demonstrates loading a tmuxp configuration with a custom log level using the 'tmuxp load' command with the --log-level option.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/load.md#2025-04-20_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp --log-level [LEVEL] load [filename] --log-file [log_filename]\n```\n\n----------------------------------------\n\nTITLE: Importing Teamocil YAML Configuration\nDESCRIPTION: Command to import a teamocil configuration file in YAML format into tmuxp.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/import.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp import teamocil /path/to/file.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Pane Information\nDESCRIPTION: Shows how to access pane and window information from within a tmux session\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/shell.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp shell -c 'print(pane.id); print(pane.window.name)'\n%2\nmy_window\n```\n\n----------------------------------------\n\nTITLE: Importing Tmuxinator YAML Configuration\nDESCRIPTION: Command to import a tmuxinator configuration file in YAML format into tmuxp.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/import.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp import tmuxinator /path/to/file.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Configuration in YAML\nDESCRIPTION: Sample tmuxp workspace configuration file showing plugin integration in YAML format.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/plugins/index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - my_plugin_module.plugin.MyTmuxpPlugin\n# ... the rest of your config\n```\n\n----------------------------------------\n\nTITLE: Importing Teamocil JSON Configuration\nDESCRIPTION: Command to import a teamocil configuration file in JSON format into tmuxp.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/import.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp import teamocil /path/to/file.json\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config Directory\nDESCRIPTION: Command demonstrating how to use a custom configuration directory for tmuxp.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ TMUXP_CONFIGDIR=$HOME/.tmuxpmoo tmuxp load cpython\n```\n\n----------------------------------------\n\nTITLE: Using ipdb with tmuxp Shell\nDESCRIPTION: Demonstrates how to launch tmuxp shell with ipdb as the debugger using PYTHONBREAKPOINT\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/shell.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTHONBREAKPOINT=ipdb.set_trace tmuxp shell\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Config Directory in Shell\nDESCRIPTION: Shell configuration line for setting a permanent custom config directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nexport TMUXP_CONFIGDIR=$HOME/.yourconfigdir/tmuxp\n```\n\n----------------------------------------\n\nTITLE: Converting tmuxp session file format\nDESCRIPTION: Commands to convert a tmuxp session file between YAML and JSON formats, with an option to auto-confirm the conversion.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp convert filename\n$ tmuxp convert -y filename\n$ tmuxp convert --yes filename\n```\n\n----------------------------------------\n\nTITLE: Installing shtab for tmuxp 1.17+ Completions\nDESCRIPTION: Command to install the shtab library required for shell completions in tmuxp 1.17+. Must be installed separately as it's not bundled with tmuxp.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/completion.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install shtab --user\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Completion with shtab\nDESCRIPTION: Command to generate and install zsh completion script using shtab for tmuxp 1.17+. Saves completion file to the zsh site-functions directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/completion.md#2025-04-20_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nshtab --shell=zsh -u tmuxp.cli.create_parser \\\n  | sudo tee /usr/local/share/zsh/site-functions/_TMUXP\n```\n\n----------------------------------------\n\nTITLE: Overriding LIBTMUX_TMUX_FORMAT_SEPARATOR in Console\nDESCRIPTION: This command shows how to override the LIBTMUX_TMUX_FORMAT_SEPARATOR environmental variable when loading a tmuxp session. This is useful in rare cases where the default separator causes issues in building sessions.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/environmental-variables.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ env LIBTMUX_TMUX_FORMAT_SEPARATOR='__SEP__' tmuxp load [session]\n```\n\n----------------------------------------\n\nTITLE: Converting YAML to JSON using tmuxp convert\nDESCRIPTION: Command-line example for converting a YAML configuration file to JSON format using the tmuxp convert command.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/convert.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp convert /path/to/file.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Tcsh Completion with shtab\nDESCRIPTION: Command to generate and install tcsh completion script using shtab for tmuxp 1.17+. Saves completion file to the system profile directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/completion.md#2025-04-20_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nshtab --shell=tcsh -u tmuxp.cli.create_parser \\\n  | sudo tee /etc/profile.d/TMUXP.completion.csh\n```\n\n----------------------------------------\n\nTITLE: Getting tmuxp debug information\nDESCRIPTION: Command to collect system information for debugging or submitting with GitHub issues.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp debug-info\n------------------\nenvironment:\n    system: Linux\n    arch: x86_64\n\n# ... so on\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completion for tmuxp 1.1-1.16\nDESCRIPTION: Configuration for bash completion using click's completion system for tmuxp versions 1.1 to 1.16. Added to .bashrc file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/completion.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(_TMUXP_COMPLETE=bash_source tmuxp)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completion with shtab\nDESCRIPTION: Command to generate and install bash completion script using shtab for tmuxp 1.17+. Saves completion file to the bash completion directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/completion.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshtab --shell=bash -u tmuxp.cli.create_parser \\\n  | sudo tee \"$BASH_COMPLETION_COMPAT_DIR\"/TMUXP\n```\n\n----------------------------------------\n\nTITLE: tmuxp Developer Configuration\nDESCRIPTION: YAML configuration for the tmuxp development environment, defining windows and panes for various tasks.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsession_name: tmuxp\nstart_directory: ./\nshell_command_before:\n  - '[ -f .venv/bin/activate ] && source .venv/bin/activate'\nwindows:\n  - window_name: tmuxp\n    layout: main-horizontal\n    options:\n      main-pane-height: 35\n    panes:\n      - shell_command:\n          - git status\n      - shell_command:\n          - command -v uv && { uv pip list; } || { pip list; }\n      - make watch_test\n      - shell_command:\n        - cd doc\n        - make start\n  - window_name: docs\n    layout: main-horizontal\n    options:\n      main-pane-height: 35\n    start_directory: doc/\n    panes:\n      - shell_command:\n          - make html\n          - command -v open && open _build/html/index.html\n      - make start\n      - shell_command:\n          - make watch\n  - window_name: ipython\n    panes:\n      - ipython\n        --ext=tmuxp.ipython --InteractiveShellApp.exec_lines=\"['import tmuxp']\"\n  - focus: true\n\n```\n\n----------------------------------------\n\nTITLE: Cloning tmuxp Repository\nDESCRIPTION: Commands to clone the tmuxp repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:tmux-python/tmuxp.git\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd tmuxp\n```\n\n----------------------------------------\n\nTITLE: Importing Tmuxinator JSON Configuration\nDESCRIPTION: Command to import a tmuxinator configuration file in JSON format into tmuxp.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/import.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp import tmuxinator /path/to/file.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Completion for tmuxp 1.1-1.16\nDESCRIPTION: Configuration for zsh completion using click's completion system for tmuxp versions 1.1 to 1.16. Added to .zshrc file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/completion.md#2025-04-20_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\neval \"$(_TMUXP_COMPLETE=zsh_source tmuxp)\"\n```\n\n----------------------------------------\n\nTITLE: Syncing Development Environment with uv\nDESCRIPTION: Commands to set up the development environment using uv, installing all required packages including extras and dev dependencies.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync --all-extras --dev\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync --all-extras --dev --upgrade\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run [command]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tmux for HJKL Pane Traversal\nDESCRIPTION: Tmux configuration for using HJKL keys to traverse panes, to be added to ~/.tmux.conf.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_9\n\nLANGUAGE: tmux\nCODE:\n```\n# hjkl pane traversal\nbind h select-pane -L\nbind j select-pane -D\nbind k select-pane -U\nbind l select-pane -R\n```\n\n----------------------------------------\n\nTITLE: Starting New tmux Session\nDESCRIPTION: Basic command to start a new tmux session. This launches you into a new tmux environment.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmux\n```\n\n----------------------------------------\n\nTITLE: Setting Up Manual Virtualenv\nDESCRIPTION: Steps to create and activate a virtual environment manually, and install the package in editable mode.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ virtualenv .venv\n```\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Vi-style Copy and Paste in Tmux\nDESCRIPTION: Tmux configuration for enabling Vi-style copy and paste mode.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_13\n\nLANGUAGE: tmux\nCODE:\n```\n# Vi copypaste mode\nset-window-option -g mode-keys vi\nbind-key -t vi-copy 'v' begin-selection\nbind-key -t vi-copy 'y' copy-selection\n```\n\n----------------------------------------\n\nTITLE: Traversing Tmux Windows via Console Commands\nDESCRIPTION: Console commands for selecting, moving to next/previous, and last windows in tmux.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tmux select-window\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmux next-window\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmux previous-window\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmux last-window\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Developer Config\nDESCRIPTION: Command to load the tmuxp developer configuration from the project root.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load .\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest\nDESCRIPTION: Commands to run tests using pytest, including options for verbose output, specific file testing, and debugging.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv run py.test\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make test\n```\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTEST_ADDOPTS=\"-verbose\" make start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTEST_ADDOPTS=\"tests/workspace/test_builder.py\" uv run make start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTEST_ADDOPTS=\"-s -x -vv tests/workspace/test_builder.py\" uv run make start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTEST_ADDOPTS=\"-s -x -vv tests/workspace/test_builder.py::test_automatic_rename_option\" uv run make start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTEST_ADDOPTS=\"-x -s --pdb\" make start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ env PYTEST_ADDOPTS=\"--pdbcls=IPython.terminal.debugger:TerminalPdb\" make start\n```\n\n----------------------------------------\n\nTITLE: Enabling Aggressive Resizing for Tmux Clients\nDESCRIPTION: Tmux configuration for enabling aggressive resizing for clients.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_14\n\nLANGUAGE: tmux\nCODE:\n```\nsetw -g aggressive-resize on\n```\n\n----------------------------------------\n\nTITLE: Killing Tmux Windows via Console Commands\nDESCRIPTION: Console command for killing a specific window in tmux.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ tmux kill-window [-t target-window]\n```\n\n----------------------------------------\n\nTITLE: Running ruff for Linting and Formatting\nDESCRIPTION: Commands to run ruff for linting, formatting, and fixing code style issues.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ uv run ruff\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ruff check .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make ruff\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make watch_ruff\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run ruff check . --fix\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ruff check . --fix\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests\nDESCRIPTION: Commands to run specific test files or individual test functions.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ py.test tests/test_config.py\n```\n\nLANGUAGE: console\nCODE:\n```\n$ py.test tests/test_config.py::test_export_json\n```\n\nLANGUAGE: console\nCODE:\n```\n$ py.test tests/test_{window,pane}.py tests/test_config.py::test_export_json\n```\n\n----------------------------------------\n\nTITLE: Configuring Tmux Status Line Update Interval\nDESCRIPTION: Tmux configuration for setting the update interval of the status line.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_16\n\nLANGUAGE: tmux\nCODE:\n```\nset -g status-interval 1\n```\n\n----------------------------------------\n\nTITLE: Killing Tmux Panes via Console Commands\nDESCRIPTION: Console command for killing a specific pane in tmux.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ tmux kill-pane [-t target-pane]\n```\n\n----------------------------------------\n\nTITLE: Github Actions Workflow for Tests\nDESCRIPTION: YAML configuration for Github Actions workflow to run tests on multiple Python and tmux versions.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nname: tests\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    - cron: '0 8 * * *'  # Daily at 08:00 UTC\n\njobs:\n  build:\n    name: Python ${{ matrix.python-version }}, tmux ${{ matrix.tmux }}\n    runs-on: ubuntu-latest\n    env:\n      PYTHONUNBUFFERED: 1\n\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']\n        tmux: ['3.3a']\n        include:\n          - python-version: '3.11'\n            tmux: '2.6'\n          - python-version: '3.12'\n            tmux: '2.7'\n          - python-version: '3.12'\n            tmux: '2.8'\n          - python-version: '3.12'\n            tmux: '2.9'\n          - python-version: '3.12'\n            tmux: '3.0'\n          - python-version: '3.12'\n            tmux: '3.1'\n          - python-version: '3.12'\n            tmux: '3.2'\n          - python-version: '3.12'\n            tmux: '3.3'\n          - python-version: '3.12'\n            tmux: '3.4'\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install system dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y build-essential\n\n      - name: Install tmux\n        uses: tpope/tmux-manager@v3\n        with:\n          version: ${{ matrix.tmux }}\n\n      - name: Install uv\n        run: pip install uv\n\n      - uses: actions/cache@v4\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n          python -m uv pip install -e .\n          python -m uv pip install coveralls pytest-cov\n\n      - name: Test with pytest\n        run: python -m pytest --cov=./ --cov-report=xml\n\n      - name: Upload coverage\n        uses: coverallsapp/github-action@v2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          file: coverage.xml\n          format: cobertura\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n\n      - name: Install uv\n        run: pip install uv\n\n      - name: Install dependencies\n        run: |\n          python -m uv pip install -e .[cli,docs,test]\n          python -m uv pip install ruff mypy\n\n      - name: Run ruff\n        run: ruff check .\n\n      - name: Run ruff format\n        run: ruff format --check .\n\n      - name: Run mypy\n        run: mypy .\n\n      - name: Check docs\n        run: |\n          cd docs\n          make html\n          make linkcheck\n\n```\n\n----------------------------------------\n\nTITLE: Visual Testing Setup\nDESCRIPTION: Instructions for setting up visual testing with tmux in separate terminals.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tmux -L test_case\n```\n\nLANGUAGE: console\nCODE:\n```\n$ py.test tests/workspace/test_builder.py\n```\n\n----------------------------------------\n\nTITLE: Using tmuxp debug-info Command\nDESCRIPTION: Example output of running the tmuxp debug-info command which displays system environment information including OS type and architecture.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/debug-info.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp debug-info\n--------------------------\nenvironment:\n    system: Linux\n    arch: x86_64\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Tmux Config Reload Shortcut\nDESCRIPTION: Tmux configuration for adding a shortcut to reload the tmux configuration file.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_15\n\nLANGUAGE: tmux\nCODE:\n```\nbind r source-file ~/.tmux.conf \\; display-message \"Config reloaded.\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Test Running on File Change\nDESCRIPTION: Commands to automatically re-run tests when files are modified, using make and entr.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ make watch_test\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make watch_test test=tests/test_config.py\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make watch_test test='-x tests/test_config.py tests/test_util.py'\n```\n\n----------------------------------------\n\nTITLE: Renaming tmux Session\nDESCRIPTION: Command to rename an existing tmux session after creation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tmux rename-session <session-name>\n```\n\n----------------------------------------\n\nTITLE: Running Bootstrap Script Before tmuxp Session in JSON\nDESCRIPTION: JSON equivalent configuration for running a bootstrap script before tmuxp session initialization. Demonstrates the same functionality as the YAML version.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/examples.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"session_name\": \"my session\",\n    \"before_script\": \"./bootstrap.py\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Documentation on Save\nDESCRIPTION: Commands to rebuild documentation automatically when Markdown files are edited.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cd doc\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make watch\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make SPHINXBUILD='uv run sphinx-build' watch\n```\n\n----------------------------------------\n\nTITLE: Creating Named Window\nDESCRIPTION: Command to create a new tmux window with a specific name using the -n flag.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ tmux new-window [-n window-name]\n```\n\n----------------------------------------\n\nTITLE: Custom Tmuxp Plugin Implementation\nDESCRIPTION: Example implementation of a custom tmuxp plugin class with session renaming functionality.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/plugins/index.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom tmuxp.plugin import TmuxpPlugin\nimport datetime\n\nclass MyTmuxpPlugin(TmuxpPlugin):\n    def __init__(self):\n        \"\"\"\n        Initialize my custom plugin.\n        \"\"\"\n        # Optional version dependency configuration. See Plugin API docs\n        # for all supported config parameters\n        config = {\n            'tmuxp_min_version' = '1.6.2'\n        }\n\n        TmuxpPlugin.__init__(\n            self,\n            plugin_name='tmuxp-plugin-my-tmuxp-plugin',\n            **config\n        )\n\n    def before_workspace_builder(self, session):\n        session.rename_session('my-new-session-name')\n\n    def reattach(self, session):\n        now = datetime.datetime.now().strftime('%Y-%m-%d')\n        session.rename_session('session_{}'.format(now))\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for tmuxp.cli.shell\nDESCRIPTION: A Sphinx directive that automatically generates documentation for the tmuxp.cli.shell module. It includes all members, inheritance information, and any undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/shell.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.cli.shell\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Plugin Package Configuration\nDESCRIPTION: Example pyproject.toml configuration for a tmuxp plugin package using uv build system.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/plugins/index.md#2025-04-20_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"tmuxp-plugin-my-tmuxp-plugin\"\nversion = \"0.0.2\"\ndescription = \"An example tmuxp plugin.\"\nauthors = [\"Author Name <author.name@<domain>.com>\"]\nrequires-python = \">=3.8,<4.0\"\ndependencies = [\n  \"tmuxp^=1.7.0\"\n]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n\n----------------------------------------\n\nTITLE: Moving Tmux Panes via Console Commands\nDESCRIPTION: Console command for moving panes in tmux.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ tmux move-pane [-t dst-pane]\n```\n\n----------------------------------------\n\nTITLE: Direct Python Code Execution Examples\nDESCRIPTION: Various examples of executing Python code directly through tmuxp shell with different session and window combinations\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/shell.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp shell -c 'print(session.name); print(window.name)'\nmy_server\nmy_window\n\n$ tmuxp shell my_server -c 'print(session.name); print(window.name)'\nmy_server\nmy_window\n\n$ tmuxp shell my_server my_window -c 'print(session.name); print(window.name)'\nmy_server\nmy_window\n\n$ tmuxp shell my_server my_window -c 'print(window.name.upper())'\nMY_WINDOW\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for tmuxp.cli.convert Module\nDESCRIPTION: Sphinx documentation directive that auto-generates API documentation for the tmuxp.cli.convert module, including all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/convert.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.cli.convert\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing development version with pipx\nDESCRIPTION: Installs the pre-release version of tmuxp using pipx with a suffix to differentiate it from stable installations.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npipx install --suffix=@next 'tmuxp' --pip-args '\\--pre' --force\n```\n\n----------------------------------------\n\nTITLE: Traversing Tmux Panes via Console Commands\nDESCRIPTION: Console commands for moving between panes in tmux.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ tmux last-window\n```\n\nLANGUAGE: console\nCODE:\n```\n$ tmux next-window\n```\n\n----------------------------------------\n\nTITLE: Installing development version with pip\nDESCRIPTION: Installs the pre-release (development) version of tmuxp using pip package manager.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npip install --user --upgrade --pre tmuxp\n```\n\n----------------------------------------\n\nTITLE: Importing tmuxp CLI Module in Python\nDESCRIPTION: This snippet shows the import statement for the tmuxp CLI module. It includes an autodoc directive for generating documentation from the module's docstrings.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/index.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: tmuxp.cli\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Developmental Release via Pip\nDESCRIPTION: Command to install pre-release versions of tmuxp including alpha, beta, or release candidates.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user --upgrade --pre tmuxp\n```\n\n----------------------------------------\n\nTITLE: Installing from Git trunk via Pip\nDESCRIPTION: Command to install the latest development version directly from GitHub repository.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user -e git+https://github.com/tmux-python/tmuxp.git#egg=tmuxp\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for tmuxp.cli.load Module\nDESCRIPTION: This ReStructuredText code snippet uses the automodule directive to automatically generate documentation for the tmuxp.cli.load module. It includes all members, shows inheritance, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/load.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.cli.load\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing from Git trunk via Pipx\nDESCRIPTION: Command to install the master branch version using pipx with isolation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/quickstart.md#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ pipx install --suffix=@master 'tmuxp @ git+https://github.com/tmux-python/tmuxp.git@master' --force\n```\n\n----------------------------------------\n\nTITLE: Running mypy for Static Type Checking\nDESCRIPTION: Commands to run mypy for static type checking.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ uv run mypy .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ mypy .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make mypy\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make watch_mypy\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for tmuxp API Documentation\nDESCRIPTION: This code snippet defines a table of contents for the tmuxp API documentation using Sphinx's toctree directive. It includes links to various components of the API such as internals, CLI, workspace, exceptions, logging, plugins, shell utilities, and types.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/index.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\ninternals/index\ncli/index\nworkspace/index\nexc\nlog\nplugin\nshell\nutil\ntypes\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing tmux Manual Documentation via Console\nDESCRIPTION: A command to view the formatted text documentation of the tmux manual file using nroff. This allows users to access the complete tmux documentation through the terminal.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about_tmux.md#2025-04-20_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ nroff -mdoc tmux.1|less\n```\n\n----------------------------------------\n\nTITLE: Defining tmuxp Command Toctree Structure for Configuration Commands\nDESCRIPTION: Sphinx toctree directive that organizes tmuxp configuration commands including edit, import, convert, and freeze into a structured documentation section.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/index.md#2025-04-20_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: Configuration\n:maxdepth: 1\n\nedit\nimport\nconvert\nfreeze\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in Markdown for tmuxp Internals\nDESCRIPTION: This snippet creates a table of contents using Markdown syntax, linking to documentation for config_reader and types within the tmuxp project.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/internals/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nconfig_reader\ntypes\n```\n```\n\n----------------------------------------\n\nTITLE: Installing ipdb Debugger\nDESCRIPTION: Shows how to install the ipdb debugger for enhanced debugging capabilities\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/shell.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user ipdb\n```\n\n----------------------------------------\n\nTITLE: Defining tmuxp Command Toctree Structure for Diagnostic Commands\nDESCRIPTION: Sphinx toctree directive that organizes tmuxp diagnostic commands, specifically debug-info, into a structured documentation section.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/index.md#2025-04-20_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: Diagnostic\n:maxdepth: 1\n\ndebug-info\n```\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Documentation for tmuxp._internal.types Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the tmuxp._internal.types module. It includes all members, shows inheritance, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/internals/types.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp._internal.types\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining tmuxp Command Toctree Structure for Completion Commands\nDESCRIPTION: Sphinx toctree directive that organizes tmuxp shell completion commands into a structured documentation section.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/index.md#2025-04-20_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: Completion\n:maxdepth: 1\n\ncompletion\n```\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for tmuxp.shell Module with Sphinx\nDESCRIPTION: This restructuredtext directive uses Sphinx's eval-rst block to automatically generate API documentation for the tmuxp.shell module. It includes all members, inheritance information, and undocumented members from the module's docstrings.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/shell.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.shell\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Types Documentation using sphinx-eval-rst\nDESCRIPTION: RestructuredText directive for auto-generating documentation from the tmuxp.types module. Shows all members, inheritance relationships, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/types.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.types\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for tmuxp.util Module Using Sphinx\nDESCRIPTION: This RST code snippet uses Sphinx's automodule directive to automatically generate API documentation for the tmuxp.util module. It includes all members, shows inheritance, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/util.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.util\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for tmuxp.workspace.constants Module\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the tmuxp.workspace.constants module. It includes all members, shows inheritance, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/constants.md#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: tmuxp.workspace.constants\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Sphinx Documentation\nDESCRIPTION: Sphinx documentation toctree directive that organizes internal workspace components into a structured table of contents, listing core modules of the tmuxp project.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\nbuilder\nconstants\nfinders\nfreezer\nimporters\nloader\nvalidation\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting tmuxp config reader module using reStructuredText\nDESCRIPTION: Directive that automatically generates module documentation for tmuxp._internal.config_reader using Sphinx. It includes all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/internals/config_reader.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp._internal.config_reader\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for tmuxp.workspace.validation\nDESCRIPTION: This code block contains Sphinx restructuredtext directives that automatically generate documentation for the tmuxp.workspace.validation module. It includes all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/validation.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.workspace.validation\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx automodule directive for tmuxp.cli.ls documentation\nDESCRIPTION: This RST (reStructuredText) directive instructs Sphinx to automatically generate API documentation for the tmuxp.cli.ls module, including all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/ls.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.cli.ls\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for tmuxp\nDESCRIPTION: Basic module declaration for the tmuxp Python package, establishing the module context for documentation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/about.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{module} tmuxp\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for tmuxp.cli.utils Module in reStructuredText\nDESCRIPTION: This Sphinx directive automatically generates comprehensive documentation for the tmuxp.cli.utils module. It displays all members, their inheritance relationships, and includes undocumented members for completeness.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/utils.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.cli.utils\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Attaching to a tmux Session with the tmux Command\nDESCRIPTION: Command to attach to an existing tmux session by its name using the native tmux command. This is used after creating a session in detached mode.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/top-level.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tmux attach -t banana\n```\n\n----------------------------------------\n\nTITLE: Auto-generating API Documentation for tmuxp.plugin Module using Sphinx\nDESCRIPTION: This RST code snippet uses Sphinx's automodule directive to automatically generate comprehensive API documentation for the tmuxp.plugin module. The directive includes all members, inheritance information, and undocumented members in the output.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/plugin.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.plugin\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Markdown Documentation\nDESCRIPTION: This snippet includes content from the README.md file up to a specific point in the documentation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../README.md\n:end-before: <img\n```\n\n----------------------------------------\n\nTITLE: Running ruff format for Code Formatting\nDESCRIPTION: Commands to run ruff format for code formatting.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/developing.md#2025-04-20_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv run ruff format .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ruff format .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make ruff_format\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for tmuxp.cli.debug_info Module using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's eval-rst directive to automatically generate documentation for the tmuxp.cli.debug_info module. It includes all members, shows inheritance information, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/debug_info.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.cli.debug_info\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Inserting Image in Markdown Documentation\nDESCRIPTION: This snippet inserts an image of a tmuxp demo with full width in the documentation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{image} _static/tmuxp-demo.gif\n:width: 100%\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Table of Contents in Markdown Documentation\nDESCRIPTION: This snippet creates a hidden table of contents for various main sections of the documentation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/index.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 2\n:hidden:\n\nabout\nquickstart\ncli/index\nconfiguration/index\nplugins/index\n```\n\n----------------------------------------\n\nTITLE: Creating Project-related Table of Contents in Markdown Documentation\nDESCRIPTION: This snippet creates a hidden table of contents for project-related sections, including a link to the GitHub repository.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/index.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:caption: Project\n:hidden:\n\ndeveloping\napi/index\nhistory\nmigration\nabout_tmux\nglossary\nGitHub <https://github.com/tmux-python/tmuxp>\n```\n\n----------------------------------------\n\nTITLE: Loading tmuxp Workspace File\nDESCRIPTION: Basic command to load a tmuxp workspace configuration file\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/configuration/index.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tmuxp load ./path/to/file\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for tmuxp.cli.edit module\nDESCRIPTION: A Sphinx restructuredtext directive that automatically generates module documentation from the tmuxp.cli.edit module. It includes all members, inheritance information, and undocumented members in the generated documentation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/edit.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.cli.edit\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Directive for tmuxp.workspace.loader\nDESCRIPTION: This code snippet is a Sphinx directive that automatically generates documentation for the tmuxp.workspace.loader module. The directive is configured to include all members, show inheritance relationships, and display undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/loader.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.workspace.loader\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating RST Documentation for tmuxp Freezer Module\nDESCRIPTION: ReStructuredText directive to automatically generate module documentation for tmuxp.workspace.freezer, including all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/freezer.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.workspace.freezer\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Directive for AutoDoc module documentation in Sphinx for tmuxp.cli.import_config\nDESCRIPTION: ReStructuredText directive that uses Sphinx's automodule feature to generate documentation for the tmuxp.cli.import_config module, including all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/import_config.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.cli.import_config\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for tmuxp.cli.freeze Module\nDESCRIPTION: A reStructuredText (rst) directive for Sphinx that automatically generates API documentation for the tmuxp.cli.freeze module. It includes all members, shows inheritance information, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/cli/freeze.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.cli.freeze\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for tmuxp.workspace.finders\nDESCRIPTION: This code snippet uses Sphinx's eval-rst directive to generate automatic documentation for the tmuxp.workspace.finders module. The directive is configured to display all members, show inheritance relationships, and include undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/finders.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.workspace.finders\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for tmuxp.log Module using reStructuredText\nDESCRIPTION: A reStructuredText directive that uses Sphinx's automodule feature to generate comprehensive documentation for the tmuxp.log module. The directive includes all members, inheritance information, and undocumented members in the output.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/log.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.log\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Exception Documentation with Sphinx for tmuxp.exc Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for all exception classes in the tmuxp.exc module. It includes all members, shows inheritance, and includes undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/exc.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.exc\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating argument documentation for tmuxp edit command using restructuredtext\nDESCRIPTION: This code snippet uses the restructuredtext eval-rst directive to automatically generate command-line argument documentation for the tmuxp edit command from the tmuxp.cli module.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/edit.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. argparse::\n    :module: tmuxp.cli\n    :func: create_parser\n    :prog: tmuxp\n    :path: edit\n```\n\n----------------------------------------\n\nTITLE: Evaluating Argparse Documentation for tmuxp ls Command\nDESCRIPTION: This snippet uses Sphinx's eval-rst directive to generate command-line arguments documentation for the 'tmuxp ls' command. It references the argument parser from the tmuxp.cli module to display available options.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/ls.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. argparse::\n    :module: tmuxp.cli\n    :func: create_parser\n    :prog: tmuxp\n    :path: ls\n```\n\n----------------------------------------\n\nTITLE: Defining tmuxp Command Toctree Structure for General Commands\nDESCRIPTION: Sphinx toctree directive that organizes general tmuxp commands including load, shell, and ls into a structured documentation section.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/index.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:caption: General commands\n:maxdepth: 1\n\nload\nshell\nls\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Main tmuxp Command Documentation with argparse\nDESCRIPTION: Sphinx directive that uses argparse to automatically generate documentation for the main tmuxp command by extracting it from the tmuxp.cli module.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/cli/index.md#2025-04-20_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{eval-rst}\n.. argparse::\n    :module: tmuxp.cli\n    :func: create_parser\n    :prog: tmuxp\n    :nosubcommands:\n\n    subparser_name : @replace\n        See :ref:`cli-ls`\n```\n```\n\n----------------------------------------\n\nTITLE: Including CHANGES file in restructuredtext document\nDESCRIPTION: This snippet uses a restructuredtext directive to include the contents of the CHANGES file, which typically contains the changelog and version history for a project.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/history.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} ../CHANGES\n```\n\n----------------------------------------\n\nTITLE: Including Specific Section from README in Markdown Documentation\nDESCRIPTION: This snippet includes content from the README.md file starting after a specific section header.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/index.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../README.md\n:start-after: \"# Freeze a tmux session\"\n```\n\n----------------------------------------\n\nTITLE: Including migration documentation with sphinx directives in Markdown\nDESCRIPTION: Sphinx documentation directives to set the current module to libtmux and include an external migration guide file. This is used to create a migration documentation page in the project documentation.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/migration.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{currentmodule} libtmux\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../MIGRATION\n```\n\n----------------------------------------\n\nTITLE: Sphinx Auto-Documentation for tmuxp.workspace.importers\nDESCRIPTION: ReStructuredText directive for automatically generating documentation from the tmuxp.workspace.importers module. Includes members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/importers.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tmuxp.workspace.importers\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for tmuxp.workspace.builder Module\nDESCRIPTION: RestructuredText directive to auto-generate API documentation for the tmuxp.workspace.builder module. Shows all members, inheritance information, and undocumented members.\nSOURCE: https://github.com/tmux-python/tmuxp/blob/master/docs/api/workspace/builder.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: tmuxp.workspace.builder\n   :members:\n   :show-inheritance:\n   :undoc-members:\n```"
  }
]