[
  {
    "owner": "celery",
    "repo": "django-celery-results",
    "content": "TITLE: Calculating task execution times using TaskResult in Python\nDESCRIPTION: Python code snippet showing how to calculate waiting time, processing time, and total time for a Celery task using the TaskResult model.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntask_result = TaskResult.objects.get(task_id='xxx')\n\nwaiting_time = task_result.date_started - task_result.date_created\nprocessing_time = task_result.date_done - task_result.date_started\ntotal_time = task_result.date_done - task_result.date_created\nprint(f'result: {waiting_time=}, {processing_time=}, {total_time=}')\n```\n\n----------------------------------------\n\nTITLE: Injecting Metadata in Celery Task\nDESCRIPTION: Example showing how to inject custom metadata into a Celery task using task_instance.request.meta. The code demonstrates task state updates and explains how metadata and results are stored in TaskResult. It includes handling of intermediate states and final results.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/injecting_metadata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import Celery\n\napp = Celery('hello', broker='amqp://guest@localhost//')\n\n@app.task(bind=True)\ndef hello(task_instance):\n    task_instance.request.meta = {'some_key': 'some_value'}\n    task_instance.update_state(\n        state='PROGRESS',\n        meta='Task current result'\n    )\n    # If TaskResult is queried from DB at this momento it will yield\n    # TaskResult(\n    #     result='Task current result',\n    #     meta={'some_key': 'some_value'}  # some discrepancies apply as I didn't document the json parse and children data\n    # )\n    return 'hello world'\n\n# After task is completed, if TaskResult is queried from DB at this momento it will yield\n# TaskResult(\n#     result='hello world',\n#     meta={'some_key': 'some_value'}  # some discrepancies apply as I didn't document the json parse and children data\n# )\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery to use django-db backend in Django settings\nDESCRIPTION: Python code snippet showing how to configure Celery to use the django-db backend in the Django project's settings.py file.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCELERY_RESULT_BACKEND = 'django-db'\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery to use django-cache backend in Django settings\nDESCRIPTION: Python code snippet showing how to configure Celery to use the django-cache backend in the Django project's settings.py file.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCELERY_CACHE_BACKEND = 'django-cache'\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery cache backend with Django CACHES setting\nDESCRIPTION: Python code snippet demonstrating how to configure Celery cache backend using the CACHES setting in Django, specifically using a DatabaseCache.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# celery setting.\nCELERY_CACHE_BACKEND = 'default'\n\n# django setting.\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n        'LOCATION': 'my_cache_table',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling extended result information in Celery settings\nDESCRIPTION: Python code snippet showing how to enable the result_extended setting in Celery to include extended information about tasks.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCELERY_RESULT_EXTENDED = True\n```\n\n----------------------------------------\n\nTITLE: Enabling task execution duration tracking in Celery settings\nDESCRIPTION: Python code snippet demonstrating how to enable the track_started setting in Celery to track the execution duration of tasks.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCELERY_TASK_TRACK_STARTED = True\n```\n\n----------------------------------------\n\nTITLE: Adding django_celery_results to INSTALLED_APPS in Django settings\nDESCRIPTION: Python code snippet showing how to add django_celery_results to the INSTALLED_APPS list in the Django project's settings.py file.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...,\n    'django_celery_results',\n)\n```\n\n----------------------------------------\n\nTITLE: Running database migrations for django_celery_results\nDESCRIPTION: Console command to perform database migrations for django_celery_results, creating necessary tables.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py migrate django_celery_results\n```\n\n----------------------------------------\n\nTITLE: Installing django-celery-results using pip\nDESCRIPTION: Command to install the django-celery-results library using pip package manager.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/getting_started.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install django-celery-results\n```\n\n----------------------------------------\n\nTITLE: Defining Version Requirements for Django Celery Results\nDESCRIPTION: Specifies the required dependency versions where Celery must be version 5.2.7 or higher but less than 6.0, and Django must be version 3.2.25 or higher.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/default.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncelery>=5.2.7,<6.0\nDjango>=3.2.25\n```\n\n----------------------------------------\n\nTITLE: Dependencies List for Django Celery Results\nDESCRIPTION: Specifies the core package dependencies with version constraints. Requires sphinx_celery 1.1 or higher, Django 3.2.25 or higher, and Celery version between 5.2.7 and 6.0.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/docs.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nsphinx_celery>=1.1\nDjango>=3.2.25\ncelery>=5.2.7,<6.0\n```\n\n----------------------------------------\n\nTITLE: Installing Django Celery Results via pip\nDESCRIPTION: Simple installation of django-celery-results using pip package manager. The -U flag ensures the latest version is installed.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/includes/installation.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U django-celery-results\n```\n\n----------------------------------------\n\nTITLE: Installing Django Celery Results development version from GitHub\nDESCRIPTION: Installation of the latest development snapshot directly from the GitHub repository using pip. This method provides the most recent code that might not be in a released version yet.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/includes/installation.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install https://github.com/celery/django-celery-results/zipball/master#egg=django-celery-results\n```\n\n----------------------------------------\n\nTITLE: Installing Django Celery Results from source package\nDESCRIPTION: Step-by-step process for installing django-celery-results from a downloaded source tarball. Includes unpacking, building, and installing the package.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/includes/installation.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tar xvfz django-celery-results-0.0.0.tar.gz\n$ cd django-celery-results-0.0.0\n$ python setup.py build\n# python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Django Celery Results\nDESCRIPTION: This requirements file specifies that the project requires Django version 3.2 or newer but less than version 6.0, and psycopg version 3.1.8 or newer for PostgreSQL database connectivity.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango>=3.2,<6.0\npsycopg>=3.1.8\n```\n\n----------------------------------------\n\nTITLE: Installing Django Celery Results via pip\nDESCRIPTION: Command to install the django-celery-results package using pip. This installs the latest stable version from PyPI.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U django-celery-results\n```\n\n----------------------------------------\n\nTITLE: Installing Django Celery Results development version\nDESCRIPTION: Command to install the latest development version of django-celery-results directly from GitHub using pip.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install https://github.com/celery/django-celery-results/zipball/master#egg=django-celery-results\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependencies for Django Celery Results\nDESCRIPTION: This requirements file lists all the Python packages needed for testing the django-celery-results project. It specifies pytest and its extensions for testing, pytz for timezone handling, and PostgreSQL adapters (psycopg2cffi and psycopg) for database connectivity during tests.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=6.2.5,<8\npytest-django>=4.5.2\npytest-benchmark\npytz\npsycopg2cffi\npsycopg\n```\n\n----------------------------------------\n\nTITLE: Specifying Django and psycopg Version Requirements\nDESCRIPTION: Defines the required versions of Django and psycopg for the django-celery-results project. Django must be version 4.2.11 or higher but below 5.0, while psycopg must be version 3.1.8 or higher to ensure compatibility with Django 4.2's psycopg 3 support.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django42.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango>=4.2.11,<5.0\npsycopg>=3.1.8 # necessary due to https://docs.djangoproject.com/en/4.2/releases/4.2/#psycopg-3-support\n```\n\n----------------------------------------\n\nTITLE: Specifying Django and Psycopg Dependencies\nDESCRIPTION: Defines required package versions for Django and Psycopg database adapter. Includes Django 5.0.3 with upper bound limit and Psycopg 3.1.8 which is necessary for Django 4.2+ compatibility.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django50.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango>=5.0.3,<5.1\npsycopg>=3.1.8 # necessary due to https://docs.djangoproject.com/en/4.2/releases/4.2/#psycopg-3-support\n```\n\n----------------------------------------\n\nTITLE: Specifying Django and Psycopg Version Requirements\nDESCRIPTION: Defines the required versions of Django and Psycopg for the django-celery-results project. Requires Django 5.1.3 up to but not including 5.2, and Psycopg 3.1.8 or higher to ensure compatibility with Django 4.2's Psycopg 3 support.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django51.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango>=5.1.3,<5.2\npsycopg>=3.1.8 # necessary due to https://docs.djangoproject.com/en/4.2/releases/4.2/#psycopg-3-support\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Version Requirement for django-celery-results\nDESCRIPTION: This snippet defines the compatible Django version range for the django-celery-results project. It requires Django version 4.1.13 or higher, but less than version 4.2.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django41.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango>=4.1.13,<4.2\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Version Requirements\nDESCRIPTION: Defines the required Django version range for compatibility with django-celery-results. Sets minimum version to 3.2.25 and maximum version to less than 4.0.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django32.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\ndjango>=3.2.25,<4.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Version Requirement for Celery Results\nDESCRIPTION: This line defines the Django version requirement for the django-celery-results project. It specifies that the project is compatible with Django versions from 5.2rc1 (release candidate 1) up to, but not including, version 6.0.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-django52.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ndjango>=5.2rc1,<6.0\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Lists required Python packages for testing and code coverage. Includes pytest-cov for coverage reporting, codecov for coverage upload, and version-specific importlib-metadata requirement for Python versions below 3.8.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/test-ci.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest-cov\ncodecov\nimportlib-metadata<5.0; python_version<\"3.8\"\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Django Celery Results\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the Django Celery Results project. It includes tools for project setup, code quality, testing, documentation conversion, and version management.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/requirements/pkgutils.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools>=40.8.0\nwheel>=0.33.1\nflake8>=3.8.3\ntox>=2.3.1\nsphinx2rst>=1.0\nbumpversion\npydocstyle\n```\n\n----------------------------------------\n\nTITLE: Installing Django Celery Results from source\nDESCRIPTION: Commands to download, extract, build and install django-celery-results from source. This method requires downloading the tarball from PyPI first.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tar xvfz django-celery-results-0.0.0.tar.gz\n$ cd django-celery-results-0.0.0\n$ python setup.py build\n# python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Setting up module documentation structure with reStructuredText\nDESCRIPTION: This snippet demonstrates how to structure module documentation using reStructuredText (rst) format. It sets up headers, table of contents, current module reference, and automodule directives to generate comprehensive documentation for the django_celery_results.backends.database module.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/reference/django_celery_results.backends.database.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``django_celery_results.backends.database``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_results.backends.database\n\n.. automodule:: django_celery_results.backends.database\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Setting up ReStructuredText documentation for django_celery_results.managers module\nDESCRIPTION: This snippet configures the ReStructuredText documentation file for the django_celery_results.managers module. It sets up the page title, table of contents, current module context, and autodoc directives to automatically generate documentation from the module's docstrings.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/reference/django_celery_results.managers.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=====================================================\n ``django_celery_results.managers``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_results.managers\n\n.. automodule:: django_celery_results.managers\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: reStructuredText documentation layout for the django_celery_results.utils module, including table of contents and automodule directives.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/reference/django_celery_results.utils.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``django_celery_results.utils``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_results.utils\n\n.. automodule:: django_celery_results.utils\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Structuring RST Documentation Table of Contents\nDESCRIPTION: ReStructuredText markup for organizing the API reference documentation table of contents, including version and date variables and module paths.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/reference/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _apiref:\n\n===============\n API Reference\n===============\n\n:Release: |version|\n:Date: |today|\n\n.. toctree::\n    :maxdepth: 1\n\n    django_celery_results.backends\n    django_celery_results.backends.database\n    django_celery_results.backends.cache\n    django_celery_results.models\n    django_celery_results.managers\n    django_celery_results.utils\n```\n\n----------------------------------------\n\nTITLE: Including Changelog from Parent Directory in reStructuredText\nDESCRIPTION: This directive includes the Changelog file from the parent directory, making its contents available within the current document. The include directive is a standard reStructuredText feature used to embed external files.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/changelog.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../Changelog\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Glossary Entry\nDESCRIPTION: Demonstrates the syntax for creating a sorted glossary entry in reStructuredText documentation with a term and its description.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/glossary.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. glossary::\n    :sorted:\n\n    term\n        Description of term\n```\n\n----------------------------------------\n\nTITLE: Importing Django Celery Results Backends Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the django_celery_results.backends module in Python. It is typically used in Django projects that integrate Celery for task processing and result storage.\nSOURCE: https://github.com/celery/django-celery-results/blob/main/docs/reference/django_celery_results.backends.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django_celery_results import backends\n```"
  }
]