[
  {
    "owner": "polarsource",
    "repo": "polar",
    "content": "TITLE: Initializing Polar SDK with TypeScript\nDESCRIPTION: Example showing how to initialize the Polar SDK and list user benefits using async iteration. Requires an access token to be set in environment variables.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/typescript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from '@polar-sh/sdk'\n\nconst polar = new Polar({\n  accessToken: process.env['POLAR_ACCESS_TOKEN'] ?? '',\n})\n\nasync function run() {\n  const result = await polar.users.benefits.list({})\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page)\n  }\n}\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar Checkout in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up a Polar checkout route in a Next.js application. It uses the Checkout function from the @polar-sh/nextjs package and configures it with an access token and success URL.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/introduction.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// checkout/route.ts\nimport { Checkout } from \"@polar-sh/nextjs\";\n\nexport const GET = Checkout({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  successUrl: process.env.SUCCESS_URL,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LLM Ingestion Strategy in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the LLM Ingestion Strategy using the Polar SDK in TypeScript. It wraps an LLM model to automatically fire prompt and completion token usage events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ingestion } from \"@polar-sh/ingestion\";\nimport { LLMStrategy } from \"@polar-sh/ingestion/strategies/LLM\";\nimport { generateText } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Setup the LLM Ingestion Strategy\nconst llmIngestion = Ingestion({ accessToken: process.env.POLAR_ACCESS_TOKEN })\n  .strategy(new LLMStrategy(openai(\"gpt-4o\")))\n  .ingest(\"openai-usage\");\n\nexport async function POST(req: Request) {\n  const { prompt }: { prompt: string } = await req.json();\n\n  // Get the wrapped LLM model with ingestion capabilities\n  // Pass Customer Id to properly annotate the ingestion events with a specific customer\n  const model = llmIngestion.client({\n    customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\",\n  });\n\n  const { text } = await generateText({\n    model,\n    system: \"You are a helpful assistant.\",\n    prompt,\n  });\n\n  return Response.json({ text });\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Polar Webhook Events in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to handle different types of webhook events from Polar using a Next.js API route. It uses the @polar-sh/nextjs package to process the webhook payload and includes a switch statement to handle various event types such as checkout creation/update and subscription lifecycle events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/nextjs\";\n\nexport const POST = Webhooks({\n\twebhookSecret: process.env.POLAR_WEBHOOK_SECRET,\n\tonPayload: async (payload) => {\n    switch (payload.type) {\n        case 'checkout.created':\n          // Handle the checkout created event\n          // supabase.from('checkouts').insert(webhookPayload.data)\n          break\n        case 'checkout.updated':\n          // Handle the checkout updated event\n          // supabase.from('checkouts').update(webhookPayload.data).match({ id: webhookPayload.data.id })\n          break\n        case 'subscription.created':\n          // Handle the subscription created event\n          break\n        case 'subscription.updated':\n          // Handle the subscription updated event\n          break\n        case 'subscription.active':\n          // Handle the subscription active event\n          break\n        case 'subscription.revoked':\n          // Handle the subscription revoked event\n          break\n        case 'subscription.canceled':\n          // Handle the subscription canceled event\n          break\n        default:\n          // Handle unknown event\n          console.log('Unknown event', webhookPayload.type)\n          break\n      }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhooks in Express.js\nDESCRIPTION: Sets up a webhook handler for Polar events in an Express.js application. It configures the webhook with a secret and a payload handler function.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/express.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { Webhooks } from \"@polar-sh/express\";\n\nconst app = express()\n\napp\n.use(express.json())\n.post('/polar/webhooks', Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => /** Handle payload */,\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating Products Controller in Laravel\nDESCRIPTION: Implements the ProductsController class to fetch and display Polar products. Makes HTTP requests to Polar's API and passes data to the view.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/Http/Controllers/ProductsController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ProductsController extends Controller\n{\n    public function handle(Request $request)\n    {\n        // Change from sandbox-api.polar.sh -> api.polar.sh when ready to go live\n        // And don't forget to update the .env file with the correct POLAR_ORGANIZATION_ID and POLAR_WEBHOOK_SECRET\n        $data = Http::get('https://sandbox-api.polar.sh/v1/products', [\n            'is_archived' => false,\n        ]);\n\n        $products = $data->json();\n\n        return view('products', ['products' => $products['items']]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhooks Handler in NextJS\nDESCRIPTION: Setup for handling incoming webhook payloads with proper signature verification. Includes support for various event types like checkout, order, subscription, and customer-related events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nextjs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/nextjs\";\n\nexport const POST = Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => {\n    // Handle the payload\n    // No need to return an acknowledge response\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Ingestion Helper in Python\nDESCRIPTION: This snippet demonstrates how to use the Ingestion helper in Python to send events to Polar. It handles batching and background sending of events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom polar_sdk.ingestion import Ingestion\n\ningestion = Ingestion(os.getenv(\"POLAR_ACCESS_TOKEN\"))\n\ningestion.ingest({\n    \"name\": \"my-event\",\n    \"external_customer_id\": \"CUSTOMER_ID\",\n    \"metadata\": {\n        \"usage\": 13.37,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhook Event Listener in Laravel\nDESCRIPTION: Example implementation of a webhook event listener class that handles incoming Polar webhook events. The listener checks the event type and can process specific events like subscription updates.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Listeners;\n\nuse Danestves\\LaravelPolar\\Events\\WebhookHandled;\n\nclass PolarEventListener\n{\n    /**\n     * Handle received Polar webhooks.\n     */\n    public function handle(WebhookHandled $event): void\n    {\n        if ($event->payload['type'] === 'subscription.updated') {\n            // Handle the incoming event...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Webhooks with Express.js\nDESCRIPTION: Express.js implementation for validating and parsing Polar webhooks. Uses the @polar-sh/sdk library to validate webhook signatures and handle incoming events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/webhooks/delivery.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from 'express'\nimport { validateEvent, WebhookVerificationError } from '@polar-sh/sdk/webhooks'\n\nconst app = express()\n\napp.post(\n  '/webhook',\n  express.raw({ type: 'application/json' }),\n  (req: Request, res: Response) => {\n    try {\n      const event = validateEvent(\n        req.body,\n        req.headers,\n        process.env['POLAR_WEBHOOK_SECRET'] ?? '',\n      )\n\n      // Process the event\n\n      res.status(202).send('')\n    } catch (error) {\n      if (error instanceof WebhookVerificationError) {\n        res.status(403).send('')\n      }\n      throw error\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Ingesting Events with Polar TypeScript SDK\nDESCRIPTION: Demonstrates how to initialize the Polar SDK and ingest events with customer data and metadata. The code shows setting up the SDK with an access token and sending an event with a name, external customer ID, and custom metadata.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/event-ingestion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nawait polar.events.ingest({\n  events: [\n    {\n      name: \"<value>\",\n      externalCustomerId: \"<id>\",\n      metadata: {\n        key: \"value\",\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Products Blade View\nDESCRIPTION: Laravel Blade template for displaying Polar products and checkout links.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// resources/views/products.blade.php\n@foreach ($products as $product)\n    <div>\n        <h3>{{ $product['name'] }}</h3>\n        <a href=\"/checkout?priceId={{ $product['prices'][0]['id'] }}\">Buy</a>\n    </div>\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhooks Handler\nDESCRIPTION: Setup for handling incoming webhook payloads with proper signature verification and event handling.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nuxt.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const {\n    private: { polarWebhookSecret },\n  } = useRuntimeConfig();\n\n  const webhooksHandler = Webhooks({\n    webhookSecret: polarWebhookSecret,\n    onPayload: async (payload) => {\n      // Handle the payload\n      // No need to return an acknowledge response\n    },\n  });\n\n  return webhooksHandler(event);\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation\nDESCRIPTION: Example React component implementation showing how to integrate Polar's checkout using the JavaScript library. Uses useEffect to initialize the checkout functionality.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/checkout/embed.mdx#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { PolarEmbedCheckout } from '@polar-sh/checkout/embed'\nimport { useEffect } from 'react'\n\nconst PurchaseLink = () => {\n  useEffect(() => {\n    PolarEmbedCheckout.init()\n  }, [])\n\n  return (\n    <a\n      href=\"__CHECKOUT_LINK__\"\n      data-polar-checkout\n      data-polar-checkout-theme=\"light\"\n    >\n      Purchase\n    </a>\n  )\n}\n\nexport default PurchaseLink\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Python SDK\nDESCRIPTION: This snippet shows how to create a checkout session using the Polar Python SDK. It initializes the Polar client with an access token and creates a checkout session with a specified product ID and discount code option.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/checkout/session.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    checkout = polar.checkouts.create(request={\n        \"allow_discount_codes\": True,\n        \"product_id\": \"<value>\",\n    })\n\n    print(checkout.url)\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Express Dependencies\nDESCRIPTION: Command to install the required dependencies for integrating Polar with Express.js using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/express.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/express zod\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Customer Portal in Express.js\nDESCRIPTION: Creates a route handler for the Polar customer portal in an Express.js application. It configures the portal with an access token, customer ID resolver function, and server environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/express.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { CustomerPortal } from \"@polar-sh/express\";\n\nconst app = express();\n\napp.get(\n  \"/portal\",\n  CustomerPortal({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout in Express.js\nDESCRIPTION: Sets up a route handler for Polar checkouts in an Express.js application. It configures the checkout with an access token, success URL, and server environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/express.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { Checkout } from \"@polar-sh/express\";\n\nconst app = express();\n\napp.get(\n  \"/checkout\",\n  Checkout({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    successUrl: process.env.SUCCESS_URL,\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to create a checkout session using the Polar TypeScript SDK. It initializes the Polar client with an access token and creates a checkout session with specified product IDs.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/checkout/session.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const checkout = await polar.checkouts.create({\n    products: [\"productId\"]\n  });\n\n  console.log(checkout.url)\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Setting up Customer Portal with Elysia\nDESCRIPTION: Implementation of a customer portal endpoint for viewing orders and subscriptions, with customer ID resolution functionality.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/elysia.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from \"elysia\";\nimport { CustomerPortal } from \"@polar-sh/elysia\";\n\nconst app = new Elysia();\n\napp.get(\n  \"/portal\",\n  CustomerPortal({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SDK and Next.js Helper\nDESCRIPTION: Command to install Polar JavaScript SDK and Next.js helper package\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/sdk @polar-sh/nextjs\n```\n\n----------------------------------------\n\nTITLE: Setting Up Polar Customer Portal Handler\nDESCRIPTION: Implementation of a customer portal endpoint that allows customers to view their orders and subscriptions.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nuxt.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const {\n    private: { polarAccessToken, polarCheckoutSuccessUrl, polarServer },\n  } = useRuntimeConfig();\n\n  const customerPortalHandler = CustomerPortal({\n    accessToken: polarAccessToken,\n    server: polarServer as \"sandbox\" | \"production\",\n    getCustomerId: (event) => {\n      // Use your own logic to get the customer ID - from a database, session, etc.\n      return Promise.resolve(\"9d89909b-216d-475e-8005-053dba7cff07\");\n    },\n  });\n\n  return customerPortalHandler(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Webhooks with Flask\nDESCRIPTION: Flask implementation for validating and parsing Polar webhooks. Uses the polar_sdk library to validate webhook signatures and handle incoming events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/webhooks/delivery.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom flask import Flask, request\nfrom polar_sdk.webhooks import validate_event, WebhookVerificationError\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    try:\n        event = validate_event(\n            payload=request.data,\n            headers=request.headers,\n            secret=os.getenv('POLAR_WEBHOOK_SECRET', ''),\n        )\n\n        # Process the event\n\n        return \"\", 202\n    except WebhookVerificationError as e:\n        return \"\", 403\n```\n\n----------------------------------------\n\nTITLE: Structuring an AI Usage Event for Polar's Usage Based Billing in JSON\nDESCRIPTION: This snippet demonstrates how to structure an event for AI usage in Polar's Usage Based Billing system. It includes the event name, external customer ID, and a metadata object with detailed information about the AI model usage.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/snippets/usage/events.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ai_usage\",\n  \"external_customer_id\": \"cus_123\",\n  \"metadata\": {\n    \"model\": \"gpt-4.1-nano\",\n    \"requests\": 1,\n    \"total_tokens\": 77,\n    \"request_tokens\": 58,\n    \"response_tokens\": 19\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Status Checking Methods in PHP\nDESCRIPTION: Collection of methods for checking subscription status including validity, cancellation, and grace period checks.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nif ($user->subscription()->cancelled()) {\n    // ...\n}\n\nif ($user->subscription()->onGracePeriod()) {\n    // ...\n}\n\nif ($user->subscription()->pastDue()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Ingestion Strategy in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the S3 Ingestion Strategy using the Polar SDK in TypeScript. It wraps the AWS S3 Client to automatically ingest bytes uploaded.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ingestion } from \"@polar-sh/ingestion\";\nimport { S3Strategy } from \"@polar-sh/ingestion/strategies/S3\";\nimport { PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION,\n  endpoint: process.env.AWS_ENDPOINT_URL,\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  },\n});\n\n// Setup the S3 Ingestion Strategy\nconst s3Ingestion = Ingestion({ accessToken: process.env.POLAR_ACCESS_TOKEN })\n  .strategy(new S3Strategy(s3Client))\n  .ingest(\"s3-uploads\");\n\nexport async function POST(request: Request) {\n  try {\n    // Get the wrapped S3 Client\n    // Pass Customer Id to properly annotate the ingestion events with a specific customer\n    const s3 = s3Ingestion.client({\n      customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\",\n    });\n\n    await s3.send(\n      new PutObjectCommand({\n        Bucket: process.env.AWS_BUCKET_NAME,\n        Key: \"a-random-key\",\n        Body: JSON.stringify({\n          name: \"John Doe\",\n          age: 30,\n        }),\n        ContentType: \"application/json\",\n      }),\n    );\n\n    return Response.json({});\n  } catch (error) {\n    return Response.json({ error: error.message });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout with Hono\nDESCRIPTION: Setup a checkout handler route in Hono that manages payment redirections. Includes configuration for access token, success URL, and server environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/hono.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { Checkout } from \"@polar-sh/hono\";\n\nconst app = new Hono();\n\napp.get(\n  \"/checkout\",\n  Checkout({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    successUrl: process.env.SUCCESS_URL,\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhooks Handler\nDESCRIPTION: Setup webhook handling for Polar events with payload validation using webhook secret. Includes support for various event types like checkouts, orders, subscriptions, and customer events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/hono.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { Webhooks } from \"@polar-sh/hono\";\n\nconst app = new Hono()\n\napp.post('/polar/webhooks', Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => /** Handle payload */,\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Routes for Checkout\nDESCRIPTION: Sets up the route handler for Polar checkout process in Laravel's web routes file.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// routes/web.php\nRoute::get('/checkout', [CheckoutController::class, 'handle']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout Handler\nDESCRIPTION: Server endpoint implementation for handling Polar checkout redirections with configuration for access token, success URL and server environment\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/tanstack.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/checkout/+server.ts\nimport { Checkout } from \"@polar-sh/sveltekit\";\n\nexport const GET = Checkout({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  successUrl: process.env.SUCCESS_URL,\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customer Portal in Remix\nDESCRIPTION: Implements a customer portal where customers can view their orders and subscriptions. It requires an access token and a function to resolve the Polar Customer ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/remix.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortal } from \"@polar-sh/remix\";\n\nexport const loader = CustomerPortal({\n  accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n  getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Checkout Embed Implementation\nDESCRIPTION: Simple HTML code snippet for embedding Polar's checkout functionality using a link and script tag. Supports theme customization and displays a purchase button that opens an inline checkout.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/checkout/embed.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<a\n  href=\"__CHECKOUT_LINK__\"\n  data-polar-checkout\n  data-polar-checkout-theme=\"light\"\n>\n  Purchase\n</a>\n<script\n  src=\"https://cdn.jsdelivr.net/npm/@polar-sh/checkout@0.1/dist/embed.global.js\"\n  defer\n  data-auto-init\n></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar SDK for Sandbox Environment\nDESCRIPTION: Example demonstrating how to configure the Polar SDK to use the sandbox environment instead of production. Requires setting the server property to 'sandbox' in the configuration.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/typescript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst polar = new Polar({\n  server: 'sandbox',\n  accessToken: process.env['POLAR_ACCESS_TOKEN'] ?? '',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout with Elysia\nDESCRIPTION: Setup for handling checkout redirections with configurable success URL and environment settings. Supports various query parameters for customer and product information.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/elysia.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from \"elysia\";\nimport { Checkout } from \"@polar-sh/elysia\";\n\nconst app = new Elysia();\n\napp.get(\n  \"/checkout\",\n  Checkout({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    successUrl: process.env.SUCCESS_URL,\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Controller\nDESCRIPTION: Implements the CheckoutController to handle Polar checkout sessions and redirect users to Polar's checkout page.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// app/Http/Controllers/CheckoutController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass CheckoutController extends Controller\n{\n    public function handle(Request $request)\n    {\n        $productPriceId = $request->query('priceId', '');\n        // Polar will replace {CHECKOUT_ID} with the actual checkout ID upon a confirmed checkout\n        $confirmationUrl = $request->getSchemeAndHttpHost() . '/confirmation?checkout_id={CHECKOUT_ID}';\n\n        // Change from sandbox-api.polar.sh -> api.polar.sh when ready to go live\n        // And don't forget to update the .env file with the correct POLAR_ORGANIZATION_ID and POLAR_WEBHOOK_SECRET\n        $result = Http::withHeaders([\n            'Authorization' => 'Bearer ' . env('POLAR_API_KEY'),\n            'Content-Type' => 'application/json',\n        ])->post('https://sandbox-api.polar.sh/v1/checkouts/custom/', [\n            'product_price_id' => $productPriceId,\n            'success_url' => $confirmationUrl,\n            'payment_processor' => 'stripe',\n        ]);\n\n        $data = $result->json();\n\n        $checkoutUrl = $data['url'];\n\n        return redirect($checkoutUrl);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout Handler\nDESCRIPTION: Server-side implementation of the Polar checkout handler that manages payment redirections and processes checkout parameters.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nuxt.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const {\n    private: { polarAccessToken, polarCheckoutSuccessUrl, polarServer },\n  } = useRuntimeConfig();\n\n  const checkoutHandler = Checkout({\n    accessToken: polarAccessToken,\n    successUrl: polarCheckoutSuccessUrl,\n    server: polarServer as \"sandbox\" | \"production\",\n  });\n\n  return checkoutHandler(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Webhook Processing Job Implementation\nDESCRIPTION: Implementation of the job handler for processing different types of webhook events\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// app/Handler/ProcessWebhook.php\n<?php\n\nnamespace App\\Handler;\n\nuse Illuminate\\Support\\Facades\\Log;\nuse Spatie\\WebhookClient\\Jobs\\ProcessWebhookJob;\n\nclass ProcessWebhook extends ProcessWebhookJob\n{\n    public function handle()\n    {\n        $decoded = json_decode($this->webhookCall, true);\n        $data = $decoded['payload'];\n\n        switch ($data['type']) {\n            case \"checkout.created\":\n                // Handle the checkout created event\n                break;\n            case \"checkout.updated\":\n                // Handle the checkout updated event\n                break;\n            case \"subscription.created\":\n                // Handle the subscription created event\n                break;\n            case \"subscription.updated\":\n                // Handle the subscription updated event\n                break;\n            case \"subscription.active\":\n                // Handle the subscription active event\n                break;\n            case \"subscription.revoked\":\n                // Handle the subscription revoked event\n                break;\n            case \"subscription.canceled\":\n                // Handle the subscription canceled event\n                break;\n            default:\n                // Handle unknown event\n                Log::info($data['type']);\n                break;\n        }\n\n        //Acknowledge you received the response\n        http_response_code(200);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Price Checkout in Laravel Route\nDESCRIPTION: Example of how to create a checkout with a custom price using the charge method in a Laravel route.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscribe', function (Request $request) {\n    return $request->user()->charge(1000, ['product_id_123']);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar SDK in Sandbox Mode\nDESCRIPTION: Code examples showing how to initialize the Polar SDK in sandbox mode across different programming languages. Each implementation requires specifying the sandbox server and an access token.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sandbox.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst polar = new Polar({\n  server: 'sandbox',\n  accessToken: process.env['POLAR_ACCESS_TOKEN'] ?? '',\n})\n```\n\nLANGUAGE: python\nCODE:\n```\ns = Polar(\n    server=\"sandbox\",\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n```\n\nLANGUAGE: go\nCODE:\n```\n\ts := polargo.New(\n\t\tpolargo.WithServer(\"sandbox\"),\n\t\tpolargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n\t)\n```\n\nLANGUAGE: php\nCODE:\n```\n$sdk = Polar\\Polar::builder()\n    ->setServer('sandbox')\n    ->setSecurity(\n        '<YOUR_BEARER_TOKEN_HERE>'\n    )\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Webhook Handling for Polar in Astro\nDESCRIPTION: Configures a POST route to handle incoming webhooks from Polar. It uses the webhook secret for payload verification and provides a callback for handling the payload.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/astro.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Webhooks } from '@polar-sh/astro';\nimport { POLAR_WEBHOOK_SECRET } from \"astro:env/server\"\n\nexport const POST = Webhooks({\n  webhookSecret: POLAR_WEBHOOK_SECRET,\n  onPayload: async (payload) => /** Handle payload */,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkout Handler in Astro with Polar\nDESCRIPTION: Sets up a GET route for handling checkouts using Polar. It includes configuration for access token, success URL, and server environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/astro.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkout } from \"@polar-sh/astro\";\nimport { POLAR_ACCESS_TOKEN, POLAR_SUCCESS_URL } from \"astro:env/server\";\n\nexport const GET = Checkout({\n  accessToken: POLAR_ACCESS_TOKEN,\n  successUrl: POLAR_SUCCESS_URL,\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Customer Portal Link with NextJS in Polar\nDESCRIPTION: This code snippet shows how to create an authenticated Customer Portal link using NextJS framework in Polar. It uses a utility function from @polar-sh/nextjs to simplify the process, requiring only the access token and a function to get the customer ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/customer-portal.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app/portal/route.ts\nimport { CustomerPortal } from \"@polar-sh/nextjs\";\n\nexport const GET = CustomerPortal({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  getCustomerId: async (req) => '<value>'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription Route in PHP/Laravel\nDESCRIPTION: Route implementation for initiating a new subscription using the billable model's subscribe() method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscribe', function (Request $request) {\n    return $request->user()->subscribe('product_id_123');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkout Route\nDESCRIPTION: Route handler for creating checkout sessions and redirecting to Polar Checkout\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/checkout/route.ts\nimport { Checkout } from '@polar-sh/nextjs'\n\nexport const GET = Checkout({\n  accessToken: process.env.POLAR_ACCESS_TOKEN!,\n  successUrl: '/confirmation',\n  server: 'sandbox', // Use this option if you're using the sandbox environment - else use 'production' or omit the parameter\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout Handler in NextJS\nDESCRIPTION: Setup for a checkout handler that manages payment redirections with configurable success URLs and environment settings. Supports various query parameters for customer information and product selection.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nextjs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// checkout/route.ts\nimport { Checkout } from \"@polar-sh/nextjs\";\n\nexport const GET = Checkout({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  successUrl: process.env.SUCCESS_URL,\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhooks Handler\nDESCRIPTION: POST endpoint implementation for handling Polar webhooks with payload verification using webhook secret\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/tanstack.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/sveltekit\";\n\nexport const POST = Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => {\n    // Handle the payload\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Handler in Sveltekit\nDESCRIPTION: TypeScript code to set up a Checkout handler in Sveltekit. It handles redirections and uses environment variables for configuration.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/sveltekit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/checkout/+server.ts\nimport { Checkout } from \"@polar-sh/sveltekit\";\n\nexport const GET = Checkout({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  successUrl: process.env.SUCCESS_URL,\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Customer Portal Link with Polar TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to use the Polar TypeScript SDK to create an authenticated Customer Portal link. It initializes the Polar client with an access token and calls the customerSessions.create method to generate a portal URL.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/customer-portal.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerSessions.create({\n    customerId: \"<value>\",\n  });\n\n  redirect(result.customerPortalUrl)\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Portal in Sveltekit\nDESCRIPTION: TypeScript code to create a customer portal where customers can view orders and subscriptions. It uses the CustomerPortal function from the Polar Sveltekit package.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/sveltekit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/portal/+server.ts\nimport { CustomerPortal } from \"@polar-sh/sveltekit\";\n\nexport const GET = CustomerPortal({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Polar Checkout with Affonso Referral Data\nDESCRIPTION: JavaScript implementation for creating a Polar checkout session while including Affonso referral data in the metadata to ensure proper commission attribution.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/integrations/affonso.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the referral ID from the Affonso global variable\nconst referralId = window.affonso_referral;\n\n// Create checkout session with Polar\nconst checkout = await polar.checkouts.create({\n  products: [\"your_product_id\"],\n  success_url: \"https://your-site.com/success\",\n  metadata: {\n    affonso_referral: referralId, // Include referral ID from Affonso\n  }\n});\n\n// Redirect to checkout\nwindow.location.href = checkout.url;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Webhook Handling in Sveltekit\nDESCRIPTION: TypeScript code to handle incoming webhook payloads from Polar. It uses the Webhooks function from the Polar Sveltekit package and supports various payload handlers for different events.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/sveltekit.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/sveltekit\";\n\nexport const POST = Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => {\n    // Handle the payload\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Webhook Development Tunnel with Ngrok\nDESCRIPTION: Command to create a local tunnel using ngrok for webhook development and testing. This allows developers to receive webhook events on their local development environment by exposing port 3000.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/webhooks/endpoints.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Portal in Fastify\nDESCRIPTION: Create a customer portal endpoint that allows customers to view their orders and subscriptions\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/fastify.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from \"fastify\";\nimport { CustomerPortal } from \"@polar-sh/fastify\";\n\nfastify().get(\n  \"/portal\",\n  CustomerPortal({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Products Display Page\nDESCRIPTION: Server-side rendered page component that displays a grid of product cards\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/page.tsx\nimport Link from 'next/link'\nimport { api } from '@/polar'\nimport { ProductCard } from '@/components/ProductCard'\n\nexport default async function Page() {\n  const { result } = await api.products.list({\n    isArchived: false, // Only fetch products which are published\n  })\n\n  return (\n    <div className=\"flex flex-col gap-y-32\">\n      <h1 className=\"text-5xl\">Products</h1>\n      <div className=\"grid grid-cols-4 gap-12\">\n        {result.items.map((product) => (\n          <ProductCard key={product.id} product={product} />\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Checkout Session\nDESCRIPTION: Example of how to add custom metadata to a checkout session in Laravel.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$request->user()->checkout('variant-id')\n    ->withMetadata(['key' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Checkout Handler in Fastify\nDESCRIPTION: Setup a checkout handler route in Fastify that manages payment redirections with configurable success URLs and environment settings\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/fastify.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from \"fastify\";\nimport { Checkout } from \"@polar-sh/fastify\";\n\nfastify().get(\n  \"/checkout\",\n  Checkout({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    successUrl: process.env.SUCCESS_URL,\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Polar Webhooks in Remix\nDESCRIPTION: Sets up a webhook handler to process incoming Polar webhook payloads. It verifies the webhook secret and provides a callback for handling the payload.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/remix.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Webhooks } from \"@polar-sh/remix\";\n\nexport const action = Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => /** Handle payload */,\n})\n```\n\n----------------------------------------\n\nTITLE: Activating License Keys via Polar API (Bash)\nDESCRIPTION: This snippet demonstrates how to activate a license key using Polar's API. It includes parameters for the key, organization ID, label, conditions, and metadata.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/benefits/license-keys.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.polar.sh/v1/customer-portal/license-keys/activate\n-H \"Content-Type: application/json\"\n-d '{\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"label\": \"hello\",\n  \"conditions\": { \"major_version\": 1 },\n  \"meta\": { \"ip\": \"84.19.145.194\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting up Webhook Handler in Deno\nDESCRIPTION: Implements webhook handling for Polar events with signature verification. Processes incoming webhook payloads using a secret key for security.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/deno.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Webhooks } from \"jsr:@polar-sh/deno\";\n\nDeno.serve(\n    Webhooks({\n        webhookSecret: Deno.env.get('POLAR_WEBHOOK_SECRET'),\n        onPayload: async (payload) => /** Handle payload */,\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Product Card Component\nDESCRIPTION: React component for displaying individual product information with pricing and purchase options\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/ProductCard.tsx\nimport Link from \"next/link\";\nimport type { Product } from \"@polar-sh/sdk/models/components/product\";\n\ninterface ProductCardProps {\n    product: Product\n}\n\nexport const ProductCard = ({ product }: ProductCardProps) => {\n    // Handling just a single price for now\n    // Remember to handle multiple prices for products if you support monthly & yearly pricing plans\n    const firstPrice = product.prices[0]\n\n    const price = useMemo(() => {\n        switch(firstPrice.amountType) {\n            case 'fixed':\n                // The Polar API returns prices in cents - Convert to dollars for display\n                return `$${firstPrice.priceAmount / 100}`\n            case 'free':\n                return 'Free'\n            default:\n                return 'Pay what you want'\n        }\n    }, [firstPrice])\n\n    return (\n        <div className=\"flex flex-col gap-y-24 justify-between p-12 rounded-3xl bg-neutral-950 h-full border border-neutral-900\">\n            <div className=\"flex flex-col gap-y-8\">\n            <h1 className=\"text-3xl\">{product.name}</h1>\n            <p className=\"text-neutral-400\">{product.description}</p>\n            <ul>\n                {product.benefits.map((benefit) => (\n                    <li key={benefit.id} className=\"flex flex-row gap-x-2 items-center\">\n                        {benefit.description}\n                    </li>\n                ))}\n            </ul>\n           </div>\n            <div className=\"flex flex-row gap-x-4 justify-between items-center\">\n                <Link className=\"h-8 flex flex-row items-center justify-center rounded-full bg-white text-black font-medium px-4\" href={`/checkout?productId=${product.id}`}>Buy</Link>\n                <span className=\"text-neutral-500\">{price}</span>\n            </div>\n        </div>\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterAuth with Polar Plugin\nDESCRIPTION: TypeScript configuration for initializing BetterAuth with Polar plugin, including customer creation, checkout integration, and webhook handling\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/better-auth.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { polar } from \"@polar-sh/better-auth\";\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst client = new Polar({\n    accessToken: process.env.POLAR_ACCESS_TOKEN,\n    // Use 'sandbox' if you're using the Polar Sandbox environment\n    // Remember that access tokens, products, etc. are completely separated between environments.\n    // Access tokens obtained in Production are for instance not usable in the Sandbox environment.\n    server: 'production'\n});\n\nconst auth = betterAuth({\n    // ... Better Auth config\n    plugins: [\n        polar({\n            client,\n            // Enable automatic Polar Customer creation on signup\n            createCustomerOnSignUp: true,\n            // Enable customer portal\n            enableCustomerPortal: true, // Deployed under /portal for authenticated users\n            // Configure checkout\n            checkout: {\n                enabled: true,\n                products: [\n                    {\n                        productId: \"123-456-789\", // ID of Product from Polar Dashboard\n                        slug: \"pro\" // Custom slug for easy reference in Checkout URL, e.g. /checkout/pro\n                    }\n                ],\n                successUrl: \"/success?checkout_id={CHECKOUT_ID}\"\n            },\n            // Incoming Webhooks handler will be installed at /polar/webhooks\n            webhooks: {\n                secret: process.env.POLAR_WEBHOOK_SECRET,\n                onPayload: ...,\n            }\n        })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkout Handler in Remix\nDESCRIPTION: Creates a Checkout handler for Polar integration in Remix. It handles redirections and can be configured with an access token, success URL, and server environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/remix.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkout } from \"@polar-sh/remix\";\n\nexport const loader = Checkout({\n  accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n  successUrl: process.env.SUCCESS_URL,\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PydanticAI Strategy in Python\nDESCRIPTION: This snippet shows how to use the PydanticAI strategy in Python to track LLM usage and send data to Polar for billing. It integrates with the PydanticAI framework.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom polar_sdk.ingestion import Ingestion\nfrom polar_sdk.ingestion.strategies import PydanticAIStrategy\nfrom pydantic import BaseModel\nfrom pydantic_ai import Agent\n\n\ningestion = Ingestion(os.getenv(\"POLAR_ACCESS_TOKEN\"))\nstrategy = ingestion.strategy(PydanticAIStrategy, \"ai_usage\")\n\n\nclass MyModel(BaseModel):\n    city: str\n    country: str\n\n\nagent = Agent(\"gpt-4.1-nano\", output_type=MyModel)\n\nif __name__ == '__main__':\n    result = agent.run_sync(\"The windy city in the US of A.\")\n    print(result.output)\n    strategy.ingest(\"CUSTOMER_ID\", result)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Claude\nDESCRIPTION: JSON configuration for setting up Polar as an MCP server in Claude desktop environment. Defines the server command and necessary arguments including the SDK package and access token.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/mcp.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Polar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"--package\",\n        \"@polar-sh/sdk\",\n        \"--\",\n        \"mcp\",\n        \"start\",\n        \"--access-token\",\n        \"...\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Portal in Deno\nDESCRIPTION: Creates a customer portal interface for managing orders and subscriptions. Requires access token, customer ID retrieval function, and server environment specification.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/deno.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortal } from \"jsr:@polar-sh/deno\";\n\nDeno.serve(\n  CustomerPortal({\n    accessToken: \"xxx\",\n    getCustomerId: (req) => \"\",\n    server: \"sandbox\",\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Polar Products\nDESCRIPTION: API call to retrieve list of published products from Polar\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await api.products.list({\n  isArchived: false, // Only fetch products which are published\n})\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/benefits/ Endpoint\nDESCRIPTION: This OpenAPI specification defines a POST endpoint for creating benefits. It includes the endpoint path, security requirements, and references to request/response schemas.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/benefits/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/benefits/\n```\n\n----------------------------------------\n\nTITLE: Implementing Polar Webhooks in Elysia\nDESCRIPTION: Setup for handling Polar webhooks with payload verification using webhook secrets and custom payload handling.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/elysia.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elysia } from 'elysia'\nimport { Webhooks } from \"@polar-sh/elysia\";\n\nconst app = new Elysia()\n\napp.post('/polar/webhooks', Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => /** Handle payload */,\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Routes for Confirmation\nDESCRIPTION: Sets up the route handler for checkout confirmation in Laravel's web routes file.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// routes/web.php\nRoute::get('/confirmation', [ConfirmationController::class, 'handle']);\n```\n\n----------------------------------------\n\nTITLE: Setting up Polar Webhooks in Fastify\nDESCRIPTION: Implement webhook handling for Polar events with proper secret signing and payload processing\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/fastify.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\nimport { Webhooks } from \"@polar-sh/fastify\";\n\nfastify.post('/polar/webhooks', Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET!,\n  onPayload: async (payload) => /** Handle payload */,\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding Customer Metadata to Checkout Session\nDESCRIPTION: Example of how to add customer metadata to a checkout session in Laravel.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$request->user()->checkout('variant-id')\n    ->withCustomerMetadata(['key' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Handler\nDESCRIPTION: Route handler for processing Polar webhook events\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/nextjs\";\n\nexport const POST = Webhooks({\n\twebhookSecret: process.env.POLAR_WEBHOOK_SECRET,\n\tonPayload: async (payload) => // Handle payload...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Single Payment Checkout in Laravel Route\nDESCRIPTION: Example of how to create a checkout for a single payment in a Laravel route.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscribe', function (Request $request) {\n    return $request->user()->checkout(['product_id_123']);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GET Products Endpoint in OpenAPI\nDESCRIPTION: OpenAPI/Swagger specification defining a GET endpoint path for retrieving products at '/v1/products/'\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/products/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/products/\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Portal Redirect in PHP/Laravel\nDESCRIPTION: Routes to handle customer portal redirection using the billable model's redirectToCustomerPortal() method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/customer-portal', function (Request $request) {\n    return $request->user()->redirectToCustomerPortal();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar SDK with Synchronous Example\nDESCRIPTION: Demonstrates how to initialize the Polar SDK client and use it to list user benefits with pagination handling. Requires a bearer token for authentication.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/python.mdx#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous Example\nfrom polar_sdk import Polar\n\ns = Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n\n\nres = s.users.benefits.list()\n\nif res is not None:\n    while True:\n        # handle items\n\n        res = res.Next()\n        if res is None:\n            break\n```\n\n----------------------------------------\n\nTITLE: Creating Embedded Checkout in Laravel Route\nDESCRIPTION: Example of how to create an embedded checkout in a Laravel route and pass it to a view.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/billing', function (Request $request) {\n    $checkout = $request->user()->checkout(['product_id_123']);\n\n    return view('billing', ['checkout' => $checkout]);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar Project with CLI\nDESCRIPTION: This command uses npx to run the polar-init tool, which sets up a Polar project in a Next.js or Nuxt.js application. It creates necessary files and configures SaaS products.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/introduction.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx polar-init\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Ingestion Strategy in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Stream Ingestion Strategy using the Polar SDK in TypeScript. It wraps a Readable or Writable stream to automatically ingest bytes consumed.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ingestion } from '@polar-sh/ingestion';\nimport { StreamStrategy } from '@polar-sh/ingestion/strategies/Stream';\n\nconst myReadstream = createReadStream(...);\n\n// Setup the Stream Ingestion Strategy\nconst streamIngestion = Ingestion({ accessToken: process.env.POLAR_ACCESS_TOKEN })\n  .strategy(new StreamStrategy(myReadstream))\n  .ingest(\"my-stream\");\n\nexport async function GET(request: Request) {\n  try {\n\n    // Get the wrapped stream\n    // Pass Customer Id to properly annotate the ingestion events with a specific customer\n    const stream = streamIngestion.client({\n      customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\"\n    });\n\n    // Consume stream...\n    stream.on('data', () => ...)\n\n    return Response.json({});\n  } catch (error) {\n    return Response.json({ error: error.message });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Routes for Products\nDESCRIPTION: Sets up the route handler for displaying Polar products in Laravel's web routes file.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// routes/web.php\nRoute::get('/products', [ProductsController::class, 'handle']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Portal in Astro with Polar\nDESCRIPTION: Creates a GET route for a customer portal where customers can view orders and subscriptions. It requires configuration of access token and a function to resolve customer IDs.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/astro.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortal } from \"@polar-sh/astro\";\nimport { POLAR_ACCESS_TOKEN } from \"astro:env/server\";\n\nexport const GET = CustomerPortal({\n  accessToken: POLAR_ACCESS_TOKEN,\n  getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Product Checkout in Laravel Route\nDESCRIPTION: Example of how to create a checkout for multiple products in a Laravel route.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nRoute::get('/subscribe', function (Request $request) {\n    return $request->user()->checkout(['product_id_123', 'product_id_456']);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Polar Migration CLI Tool\nDESCRIPTION: This command runs the polar-migrate CLI tool using npx to initiate the migration process from Lemon Squeezy to Polar. It supports migrating products, variants, license keys, associated files, discount codes, and customers.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/migrate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx polar-migrate\n```\n\n----------------------------------------\n\nTITLE: Stream Ingestion Payload Structure in JSON\nDESCRIPTION: This snippet shows the structure of the ingestion payload for stream processing. It includes customer ID, event name, and metadata with bytes consumed.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customerId\": \"123\",\n  \"name\": \"my-stream\",\n  \"metadata\": {\n    \"bytes\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DeltaTime Ingestion Strategy in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the DeltaTime Ingestion Strategy using the Polar SDK in TypeScript. It allows ingesting delta time of arbitrary execution with a custom now-resolver.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ingestion } from \"@polar-sh/ingestion\";\nimport { DeltaTimeStrategy } from \"@polar-sh/ingestion/strategies/DeltaTime\";\n\nconst nowResolver = () => performance.now();\n// const nowResolver = () => Number(hrtime.bigint())\n// const nowResolver = () => Date.now()\n\n// Setup the Delta Time Ingestion Strategy\nconst deltaTimeIngestion = Ingestion({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n})\n  .strategy(new DeltaTimeStrategy(nowResolver))\n  .ingest(\"execution-time\");\n\nexport async function GET(request: Request) {\n  try {\n    // Get the wrapped start clock function\n    // Pass Customer Id to properly annotate the ingestion events with a specific customer\n    const start = deltaTimeIngestion.client({\n      customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\",\n    });\n\n    const stop = start();\n\n    await sleep(1000);\n\n    // { deltaTime: xxx } is automatically ingested to Polar\n    const delta = stop();\n\n    return Response.json({ delta });\n  } catch (error) {\n    return Response.json({ error: error.message });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating License Keys via Polar API (Bash)\nDESCRIPTION: This snippet shows how to validate a license key using Polar's API. It includes parameters for the key, organization ID, activation ID, conditions, and usage increment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/benefits/license-keys.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.polar.sh/v1/customer-portal/license-keys/validate\n-H \"Content-Type: application/json\"\n-d '{\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"activation_id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n  \"conditions\": { \"major_version\": 1 },\n  \"increment_usage\": 15\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar Checkout Handler in Deno\nDESCRIPTION: Sets up a checkout handler for processing payments. Supports various query parameters including productId, customerEmail, and customerName for customization.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/deno.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkout } from \"jsr:@polar-sh/deno\";\n\nDeno.serve(Checkout({ accessToken: \"xxx\" }));\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar API Client\nDESCRIPTION: Setting up the Polar API client instance with authentication token\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/polar.ts\nimport { Polar } from '@polar-sh/sdk'\n\nexport const api = new Polar({\n  accessToken: process.env.POLAR_ACCESS_TOKEN!,\n  server: 'sandbox', // Use this option if you're using the sandbox environment - else use 'production' or omit the parameter\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Customer Portal in NextJS\nDESCRIPTION: Implementation of a customer portal route that allows customers to view their orders and subscriptions. Requires configuration of access token and customer ID resolution.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nextjs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// portal/route.ts\nimport { CustomerPortal } from \"@polar-sh/nextjs\";\n\nexport const GET = CustomerPortal({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  getCustomerId: (req: NextRequest) => \"\", // Fuction to resolve a Polar Customer ID\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Product Benefits POST Endpoint\nDESCRIPTION: OpenAPI specification for the POST /v1/products/{id}/benefits endpoint that allows creation of product benefits. The specification includes the path parameter for product ID and indicates this is a POST method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/products/update-benefits.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/products/{id}/benefits\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Access Token with Polar API\nDESCRIPTION: This curl command demonstrates how to exchange an authorization code for an access token using Polar's token endpoint. It requires the client ID, client secret, and the authorization code received from the previous step.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/oauth2/connect.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.polar.sh/v1/oauth2/token \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=authorization_code&code=AUTHORIZATION_CODE&client_id=CLIENT_ID&client_secret=CLIENT_SECRET&redirect_uri=https://example.com/callback'\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Service Provider for Polar Webhooks\nDESCRIPTION: Configuration setup in EventServiceProvider for Laravel v10 and lower to register the Polar webhook event listener. Maps the WebhookHandled event to the PolarEventListener class.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\Listeners\\PolarEventListener;\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\nuse Danestves\\LaravelPolar\\Events\\WebhookHandled;\n\nclass EventServiceProvider extends ServiceProvider\n{\n    protected $listen = [\n        WebhookHandled::class => [\n            PolarEventListener::class,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Polar Signature Validator Implementation\nDESCRIPTION: Implementation of the signature validator class for verifying Polar webhook requests\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// app/Handler/PolarSignature.php\n<?php\n\nnamespace App\\Handler;\n\nuse Illuminate\\Http\\Request;\nuse Spatie\\WebhookClient\\Exceptions\\WebhookFailed;\nuse Spatie\\WebhookClient\\WebhookConfig;\nuse Spatie\\WebhookClient\\SignatureValidator\\SignatureValidator;\n\nclass PolarSignature implements SignatureValidator\n{\n    public function isValid(Request $request, WebhookConfig $config): bool\n    {\n        $signingSecret = base64_encode($config->signingSecret);\n        $wh = new \\StandardWebhooks\\Webhook($signingSecret);\n\n        return boolval( $wh->verify($request->getContent(), array(\n            \"webhook-id\" => $request->header(\"webhook-id\"),\n            \"webhook-signature\" => $request->header(\"webhook-signature\"),\n            \"webhook-timestamp\" => $request->header(\"webhook-timestamp\"),\n        )));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar Environment Variables\nDESCRIPTION: Environment variables required for Polar API authentication and webhook verification.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nPOLAR_API_KEY=\"polar_oat...\"\nPOLAR_WEBHOOK_SECRET=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Customer Portal with Hono\nDESCRIPTION: Implement a customer portal route that allows customers to view their orders and subscriptions. Includes customer ID resolution and environment configuration.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/hono.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { CustomerPortal } from \"@polar-sh/hono\";\n\nconst app = new Hono();\n\napp.get(\n  \"/portal\",\n  CustomerPortal({\n    accessToken: \"xxx\", // Or set an environment variable to POLAR_ACCESS_TOKEN\n    getCustomerId: (event) => \"\", // Function to resolve a Polar Customer ID\n    server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/discounts/ Endpoint\nDESCRIPTION: Defines the OpenAPI specification for the POST endpoint to create discounts. The endpoint path is /v1/discounts/ using HTTP POST method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/discounts/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/discounts/\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Request to Polar\nDESCRIPTION: This curl command shows how to make an authenticated API request to Polar's userinfo endpoint using an access token. The access token is included in the Authorization header as a Bearer token.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/oauth2/connect.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://api.polar.sh/v1/oauth2/userinfo \\\n  -H 'Authorization: Bearer polar_at_XXX'\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for AWS S3 Bucket in JSON\nDESCRIPTION: This JSON snippet defines the CORS (Cross-Origin Resource Sharing) configuration for the AWS S3 bucket. It allows specific HTTP methods from a local development origin and exposes the ETag header.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/polar/file/README.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"AllowedHeaders\": [\n            \"*\"\n        ],\n        \"AllowedMethods\": [\n            \"PUT\",\n            \"HEAD\"\n        ],\n        \"AllowedOrigins\": [\n            \"http://127.0.0.1:3000\"\n        ],\n        \"ExposeHeaders\": [\n            \"ETag\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Confirmation Page\nDESCRIPTION: Page component for handling post-checkout confirmation\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/confirmation/page.tsx\nexport default function Page({\n  searchParams: { checkoutId },\n}: {\n  searchParams: {\n    checkoutId: string\n  }\n}) {\n  return <div>Thank you! Your checkout is now being processed.</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Success URL for Checkout\nDESCRIPTION: Example of how to set a custom success URL for a checkout session in Laravel.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request->user()->checkout('variant-id')\n    ->withSuccessUrl(url('/success'));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customer Portal Endpoint\nDESCRIPTION: Server endpoint implementation for customer portal access, allowing customers to view orders and subscriptions\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/tanstack.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/portal/+server.ts\nimport { CustomerPortal } from \"@polar-sh/sveltekit\";\n\nexport const GET = CustomerPortal({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  getCustomerId: (event) => \"\", // Fuction to resolve a Polar Customer ID\n  server: \"sandbox\", // Use sandbox if you're testing Polar - omit the parameter or pass 'production' otherwise\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for PATCH /v1/meters/{id} Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH endpoint to update a meter by its ID in the Polar API.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/meters/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/meters/{id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Route\nDESCRIPTION: Adding webhook route configuration in Laravel routes file\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// routes/api.php\nRoute::webhooks('/webhook/polar');\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Checkouts\nDESCRIPTION: OpenAPI endpoint specification for creating new checkouts via POST request to /v1/checkouts/\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkouts/create-session.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/checkouts/\n```\n\n----------------------------------------\n\nTITLE: Displaying Orders in Blade Template\nDESCRIPTION: Blade template code for displaying order details including dates, amounts, and status information.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<table>\n    @foreach ($user->orders as $order)\n        <td>{{ $order->ordered_at->toFormattedDateString() }}</td>\n        <td>{{ $order->polar_id }}</td>\n        <td>{{ $order->amount }}</td>\n        <td>{{ $order->tax_amount }}</td>\n        <td>{{ $order->refunded_amount }}</td>\n        <td>{{ $order->refunded_tax_amount }}</td>\n        <td>{{ $order->currency }}</td>\n        <!-- Add more columns as needed -->\n    @endforeach\n</table>\n```\n\n----------------------------------------\n\nTITLE: Embedding Polar Subscribe Button in README\nDESCRIPTION: This HTML snippet creates an embeddable button for READMEs to promote and showcase Polar subscribers. It supports both light and dark modes. Replace 'polarsource' in the URLs with the GitHub username or organization name connected to Polar.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/apps/web/src/app/(main)/(landing)/(mdx)/blog/(header)/github-supports-polar-in-funding-yaml/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://polar.sh/embed/subscribe.svg?org=polarsource&label=Subscribe&darkmode\">\n  <img alt=\"Subscribe on Polar\" src=\"https://polar.sh/embed/subscribe.svg?org=polarsource&label=Subscribe\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar SDK for Sandbox Environment\nDESCRIPTION: Shows how to initialize the Polar SDK client to use the sandbox environment instead of production by setting the server parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/python.mdx#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns = Polar(\n    server=\"sandbox\",\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for License Keys in OpenAPI\nDESCRIPTION: OpenAPI schema definition for the PATCH /v1/license-keys/{id} endpoint. The specification includes the path parameter for the license key ID, required request body fields, and possible response status codes.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/license-keys/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/license-keys/{id}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub App Integration for Development\nDESCRIPTION: A shell command to run the setup environment script with GitHub App integration. This creates a GitHub App for local development and requires an external URL that routes to the development server.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./dev/setup-environment --setup-github-app --backend-external-url mydomain.ngrok.dev\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Product Creation Endpoint Definition\nDESCRIPTION: OpenAPI YAML specification defining the POST endpoint for creating new products at /v1/products/\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/products/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/products/\n```\n\n----------------------------------------\n\nTITLE: Adding Billable Trait to User Model\nDESCRIPTION: Example of how to add the Billable trait to a Laravel User model for handling billing functionality.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Danestves\\LaravelPolar\\Billable;\n\nclass User extends Authenticatable\n{\n    use Billable;\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Polar Configuration File\nDESCRIPTION: The contents of the published Laravel Polar configuration file, including settings for access token, webhook secret, and other options.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'access_token' => env('POLAR_ACCESS_TOKEN'),\n    'webhook_secret' => env('POLAR_WEBHOOK_SECRET'),\n    'path' => env('POLAR_PATH', 'polar'),\n    'redirect_url' => null,\n    'currency_locale' => env('POLAR_CURRENCY_LOCALE', 'en'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for License Keys in YAML\nDESCRIPTION: OpenAPI specification for a GET request to /v1/license-keys endpoint. This defines the structure for retrieving license keys, including parameters and response format.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/license-keys/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/license-keys\n```\n\n----------------------------------------\n\nTITLE: Previewing Subscription Confirmation Email Template\nDESCRIPTION: A bash command to render the subscription confirmation email template to a file and preview it in the browser. Changes to the template are automatically refreshed.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nuv run task watch_email email_subscription_confirmation\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Updating Organizations in OpenAPI\nDESCRIPTION: This YAML snippet specifies the OpenAPI schema for the PATCH /v1/organizations/{id} endpoint. It defines the path parameters, request body schema, and possible response codes for updating an organization's details.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/organizations/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/organizations/{id}\n```\n\n----------------------------------------\n\nTITLE: Constructing OAuth 2.0 Authorization URL for Polar\nDESCRIPTION: This code snippet demonstrates how to construct the authorization URL for initiating the OAuth 2.0 flow with Polar. It includes required parameters such as response_type, client_id, redirect_uri, and scope.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/oauth2/connect.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://polar.sh/oauth2/authorize?\n  response_type=code\n  &client_id=CLIENT_ID\n  &redirect_uri=https%3A%2F%2Fexample.com%2Fcallback\n  &scope=openid%20email\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook Secret Environment Variable\nDESCRIPTION: Environment variable configuration for Polar webhook secret\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/better-auth.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nPOLAR_WEBHOOK_SECRET=...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Polar System Architecture with Mermaid Flowchart\nDESCRIPTION: A Mermaid flowchart diagram showing the overall architecture of the Polar system, including the backend components (REST API, PostgreSQL, Redis, S3 Storage, and workers), frontend web client, and external integrations like GitHub and Stripe webhooks.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph \"Backend\"\n        API[\"Rest API\"]\n        POSTGRESQL[\"PostgreSQL\"]\n        REDIS[\"Redis\"]\n        S3[\"S3 Storage\"]\n        WORKER[\"Worker\"]\n        WORKER_GITHUB[\"Worker GitHub\"]\n    end\n    subgraph \"Frontend\"\n        WEB[\"Web client\"]\n    end\n    GITHUB_WH[\"GitHub Webhooks\"]\n    STRIPE_WH[\"Stripe Webhooks\"]\n    USERS[\"Users\"]\n\n    WEB --> API\n    API --> POSTGRESQL\n    API --> REDIS\n    REDIS <--> WORKER\n    REDIS <--> WORKER_GITHUB\n    WORKER --> POSTGRESQL\n    WORKER_GITHUB --> POSTGRESQL\n    API --> S3\n    WEB --> S3\n\n    GITHUB_WH -.-> API\n    STRIPE_WH -.-> API\n    USERS -.-> API\n    USERS -.-> WEB\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Polar Checkout Confirmation\nDESCRIPTION: OpenAPI specification for a checkout confirmation endpoint that requires a client secret parameter. The endpoint is used to confirm a checkout operation in the Polar system.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkouts/confirm-session-from-client.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/checkouts/client/{client_secret}/confirm\n```\n\n----------------------------------------\n\nTITLE: Constructing OAuth 2.0 Authorization URL for Organization Access Token\nDESCRIPTION: This URL demonstrates how to request an organization-level access token by adding the sub_type=organization parameter to the authorization URL. This allows for more granular access control at the organization level.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/oauth2/connect.mdx#2025-04-19_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://polar.sh/oauth2/authorize?response_type=code&client_id=polar_ci_j3X95_MgfdSCeCd2qkFnUw&redirect_uri=https%3A%2F%2Fexample.com%2Fcallback&scope=openid%20email&sub_type=organization\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Updating Checkouts in OpenAPI YAML\nDESCRIPTION: This snippet specifies the OpenAPI definition for a PATCH endpoint to update checkout information. It defines the path '/v1/checkouts/{id}' and uses the PATCH HTTP method, indicating that this endpoint is used for partial updates to existing checkout resources.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkouts/update-session.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/checkouts/{id}\n```\n\n----------------------------------------\n\nTITLE: S3 Ingestion Payload Structure in JSON\nDESCRIPTION: This snippet shows the structure of the ingestion payload for S3 uploads. It includes customer ID, event name, and metadata with bytes, bucket, key, and content type information.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customerId\": \"123\",\n  \"name\": \"s3-uploads\",\n  \"metadata\": {\n    \"bytes\": 100,\n    \"bucket\": \"my-bucket\",\n    \"key\": \"my-key\",\n    \"contentType\": \"application/text\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Credit Card Number for Sandbox Payments\nDESCRIPTION: Test credit card number for simulating successful payments in the sandbox environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sandbox.mdx#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n4242 4242 4242 4242\n```\n\n----------------------------------------\n\nTITLE: DeltaTime Ingestion Payload Structure in JSON\nDESCRIPTION: This snippet shows the structure of the ingestion payload for delta time execution. It includes customer ID, event name, and metadata with delta time in milliseconds.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customerId\": \"123\",\n  \"name\": \"execution-time\",\n  \"metadata\": {\n    \"deltaTime\": 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI DELETE Endpoint for Custom Fields in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a DELETE endpoint to remove a custom field. It specifies the path with a parameter for the custom field ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/custom-fields/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/custom-fields/{id}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Access Token Request\nDESCRIPTION: This JSON object represents the typical response received when successfully exchanging an authorization code for an access token. It includes the access token, refresh token, token type, expiration time, scope, and ID token.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/oauth2/connect.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"access_token\": \"polar_at_XXX\",\n  \"expires_in\": 864000,\n  \"refresh_token\": \"polar_rt_XXX\",\n  \"scope\": \"openid email\",\n  \"id_token\": \"ID_TOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v1/refunds/ Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/refunds/ endpoint which is used for creating refunds in the Polar system. It specifies the endpoint path, request parameters, and response format.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/refunds/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/refunds/\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Template in Python\nDESCRIPTION: Python code snippet demonstrating how to render an email template using the render_email_template function, passing the template name and props.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/emails/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom polar.email.react import render_email_template\n\nbody = render_email_template(\"magic_link\", {\n    \"token_lifetime_minutes\": 30,\n    \"url\": \"https://example.com\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Polar Access Token in .env File\nDESCRIPTION: Example of how to set the Polar access token in the Laravel .env file.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPOLAR_ACCESS_TOKEN=\"<your_access_token>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Checkout Package\nDESCRIPTION: Package installation commands for different Node.js package managers to add the Polar checkout library to a project.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/checkout/embed.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @polar-sh/checkout\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @polar-sh/checkout\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polar-sh/checkout\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Customer Sessions in OpenAPI Specification\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/customer-sessions/ endpoint. This endpoint is likely used for creating or initializing a customer session in the Polar system.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/sessions/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/customer-sessions/\n```\n\n----------------------------------------\n\nTITLE: LLM Ingestion Payload Structure in JSON\nDESCRIPTION: This snippet shows the structure of the ingestion payload for LLM usage. It includes customer ID, event name, and metadata with prompt and completion token counts.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customerId\": \"123\",\n  \"name\": \"openai-usage\",\n  \"metadata\": {\n    \"promptTokens\": 100,\n    \"completionTokens\": 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Meters Endpoint in YAML\nDESCRIPTION: Specifies the OpenAPI definition for a GET endpoint to retrieve meters. The specification uses YAML format to define the API structure.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/meters/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/meters/\n```\n\n----------------------------------------\n\nTITLE: PydanticAI Ingestion Payload Structure in JSON\nDESCRIPTION: This snippet shows the structure of the ingestion payload for PydanticAI usage. It includes customer ID, event name, and metadata with request and token usage information.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ai_usage\",\n  \"external_customer_id\": \"CUSTOMER_ID\",\n  \"metadata\": {\n    \"requests\": 1,\n    \"total_tokens\": 78,\n    \"request_tokens\": 58,\n    \"response_tokens\": 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Fee Breakdown for $30 Subscription from Sweden\nDESCRIPTION: This markdown table illustrates a detailed breakdown of fees for a $30 subscription payment from Sweden, including VAT, transaction fees, and additional charges for international cards and subscriptions.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/merchant-of-record/fees.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Item | Amount |\n| --- | --- |\n| Product Price | $30 |\n| VAT (25%) | $7.5 |\n| **Total Transaction Value** | **$37.5** |\n| Transaction Fee (4% + 40¢) | $1.9 |\n| International Card (+1.5%) | $0.56 |\n| Subscription (+0.5%) | $0.19 |\n| **Total Fees (Before Payout)** | **$2.65** |\n```\n\n----------------------------------------\n\nTITLE: Starting Backend API Server\nDESCRIPTION: A shell command to start the backend API server. The server will be available at http://127.0.0.1:8000 by default and will automatically restart when code changes are detected.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nuv run task api\n```\n\n----------------------------------------\n\nTITLE: GET Organization Details Endpoint Definition\nDESCRIPTION: OpenAPI specification for retrieving organization details via a GET request to /v1/customer-portal/organizations/{slug}. The endpoint accepts an organization slug as a path parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/get-organization.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/organizations/{slug}\n```\n\n----------------------------------------\n\nTITLE: Usage Based Billing Rate Table in Markdown\nDESCRIPTION: Markdown table showing example unit pricing rates for different product meters, specifically prompt-tokens and completion-tokens.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/billing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Product Meter       | Price per unit |\n| ------------------- | -------------- |\n| `prompt-tokens`     | $0.10          |\n| `completion-tokens` | $0.18          |\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Customer Information in OpenAPI\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint to retrieve customer information. It specifies the path /v1/customer-portal/customers/me for the customer portal API.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/get-customer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/customers/me\n```\n\n----------------------------------------\n\nTITLE: License Key Activation Response (JSON)\nDESCRIPTION: This JSON snippet shows the response structure after successfully activating a license key. It includes details about the activation and the associated license key.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/benefits/license-keys.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n  \"license_key_id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n  \"label\": \"hello\",\n  \"meta\": {\n    \"ip\": \"84.19.145.194\"\n  },\n  \"created_at\": \"2024-09-02T13:48:13.251621Z\",\n  \"modified_at\": null,\n  \"license_key\": {\n    \"id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n    \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n    \"user_id\": \"d910050c-be66-4ca0-b4cc-34fde514f227\",\n    \"benefit_id\": \"32a8eda4-56cf-4a94-8228-792d324a519e\",\n    \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n    \"display_key\": \"****-E304DA\",\n    \"status\": \"granted\",\n    \"limit_activations\": 3,\n    \"usage\": 0,\n    \"limit_usage\": 100,\n    \"validations\": 0,\n    \"last_validated_at\": null,\n    \"expires_at\": \"2026-08-30T08:40:34.769148Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: License Key Validation Response (JSON)\nDESCRIPTION: This JSON snippet demonstrates the response structure after successfully validating a license key. It includes updated details about the license key and its associated activation.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/benefits/license-keys.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"user_id\": \"d910050c-be66-4ca0-b4cc-34fde514f227\",\n  \"benefit_id\": \"32a8eda4-56cf-4a94-8228-792d324a519e\",\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"display_key\": \"****-E304DA\",\n  \"status\": \"granted\",\n  \"limit_activations\": 3,\n  \"usage\": 15,\n  \"limit_usage\": 100,\n  \"validations\": 5,\n  \"last_validated_at\": \"2024-09-02T13:57:00.977363Z\",\n  \"expires_at\": \"2026-08-30T08:40:34.769148Z\",\n  \"activation\": {\n    \"id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n    \"license_key_id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n    \"label\": \"hello\",\n    \"meta\": {\n      \"ip\": \"84.19.145.194\"\n    },\n    \"created_at\": \"2024-09-02T13:48:13.251621Z\",\n    \"modified_at\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Bootstrap Configuration\nDESCRIPTION: Bootstrap configuration file setup including route definitions and middleware configuration\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// bootstrap/app.php\n<?php\n\nuse Illuminate\\Foundation\\Application;\nuse Illuminate\\Foundation\\Configuration\\Exceptions;\nuse Illuminate\\Foundation\\Configuration\\Middleware;\n\nreturn Application::configure(basePath: dirname(__DIR__))\n    ->withRouting(\n        web: __DIR__.'/../routes/web.php',\n        api: __DIR__.'/../routes/api.php',\n        commands: __DIR__.'/../routes/console.php',\n        health: '/up',\n    )\n    ->withMiddleware(function (Middleware $middleware) {\n        //\n    })\n    ->withExceptions(function (Exceptions $exceptions) {\n        //\n    })->create();\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Order Invoice Retrieval\nDESCRIPTION: OpenAPI specification for a GET endpoint that retrieves invoice details for a specific order using the order ID as a path parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/orders/get-invoice.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/orders/{id}/invoice\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SDK Dependencies\nDESCRIPTION: Command to install required Polar SDK packages for Next.js integration\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Inside a new Next.js project\nnpx polar-init\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Subscription Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification for the GET endpoint to retrieve customer portal subscriptions.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/subscriptions/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/subscriptions/\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Development Containers with Docker Compose\nDESCRIPTION: Shell commands to navigate to the server directory and start the necessary development containers (PostgreSQL, Redis, and Minio) using Docker Compose.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd server\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting up Ngrok for Local Webhook Testing\nDESCRIPTION: Command to create a tunnel for testing webhooks locally\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/nextjs.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v1/meters/ Endpoint in YAML\nDESCRIPTION: A basic OpenAPI specification that defines a POST endpoint at /v1/meters/ path. This specification serves as documentation for API consumers and may be used for code generation or validation purposes.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/meters/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/meters/\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH /v1/files/{id} Endpoint in OpenAPI Specification\nDESCRIPTION: OpenAPI specification for updating a file by its ID. The specification defines the endpoint path, HTTP method, and likely included request/response schemas, though the complete details aren't visible in the snippet.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/files/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/files/{id}\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Hono Dependencies\nDESCRIPTION: Install the required packages for Polar integration with Hono using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/hono.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/hono zod\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Meter Retrieval in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v1/meters/{id} endpoint. It defines the path and HTTP method for retrieving meter information by its ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/meters/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/meters/{id}\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server\nDESCRIPTION: Shell commands to navigate to the clients directory and start the frontend development server. The web client will be available at http://127.0.0.1:3000 by default.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncd clients\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Cursor\nDESCRIPTION: Command line configuration for setting up Polar as an MCP server in Cursor IDE environment. Includes the NPX command with SDK package and access token configuration.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/mcp.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y --package @polar-sh/sdk -- mcp start --access-token ...\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for PATCH /v1/products/{id} Endpoint\nDESCRIPTION: Defines the OpenAPI specification for the endpoint to update a product by ID. The file uses YAML format to specify the endpoint structure.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/products/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/products/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Benefits Resource in OpenAPI\nDESCRIPTION: Specifies the OpenAPI path for updating a benefit by ID using the PATCH HTTP method. This endpoint would be used to modify existing benefit entries in the Polar API.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/benefits/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/benefits/{id}\n```\n\n----------------------------------------\n\nTITLE: Running Polar Package Tests\nDESCRIPTION: Command to execute the test suite for the Polar Laravel package using Composer.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Customer State in OpenAPI\nDESCRIPTION: This YAML snippet specifies the OpenAPI path for retrieving a customer's state. It uses a GET request with a path parameter 'id' to identify the specific customer.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/state.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customers/{id}/state\n```\n\n----------------------------------------\n\nTITLE: Building Email Templates\nDESCRIPTION: Command to build the email templates using the uv task runner before rendering them from the Python server.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/emails/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run task emails\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Fastify Dependencies\nDESCRIPTION: Install the required dependencies for using Polar with Fastify\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/fastify.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/fastify zod\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SDK via pip\nDESCRIPTION: Command to install the Polar SDK Python package using pip package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/python.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install polar-sdk\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH /v1/subscriptions/{id} Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH /v1/subscriptions/{id} endpoint. It includes the endpoint path, HTTP method, and indicates that this is an update operation for a subscription resource.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/subscriptions/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Validating Polar License Keys using cURL\nDESCRIPTION: This cURL command demonstrates how to validate a license key using Polar's API. It includes optional parameters for activation ID, custom conditions, and usage tracking.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/apps/web/src/app/(main)/(landing)/(mdx)/blog/(header)/introducing-license-keys/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST https://api.polar.sh/v1/customer-portal/license-keys/validate\n-H \"Content-Type: application/json\"\n-d '{\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"activation_id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n  \"conditions\": { \"major_version\": 1 },\n  \"increment_usage\": 15\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for /v1/files/ in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v1/files/ endpoint. It includes the route path and HTTP method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/files/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/files/\n```\n\n----------------------------------------\n\nTITLE: Example Events for Meter Aggregation in JSON\nDESCRIPTION: This snippet demonstrates a sample set of events that could be used with different meter aggregation functions. Each event represents AI usage with a total token count.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/meters.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"ai_usage\",\n    \"external_customer_id\": \"cus_123\",\n    \"metadata\": {\n      \"total_tokens\": 10\n    }\n  },\n  {\n    \"name\": \"ai_usage\",\n    \"external_customer_id\": \"cus_123\",\n    \"metadata\": {\n      \"total_tokens\": 20\n    }\n  },\n  {\n    \"name\": \"ai_usage\",\n    \"external_customer_id\": \"cus_123\",\n    \"metadata\": {\n      \"total_tokens\": 30\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: A shell command to apply database migrations to the PostgreSQL database. This should be run regularly during development to keep the database schema up to date.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nuv run task db_migrate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for PATCH /v1/checkout-links/{id} Endpoint in YAML\nDESCRIPTION: Defines the OpenAPI specification for updating checkout links via the PATCH method. The endpoint requires the checkout link ID as a path parameter and accepts various optional fields to update.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkout-links/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/checkout-links/{id}\n```\n\n----------------------------------------\n\nTITLE: Installing Polar NextJS Dependencies\nDESCRIPTION: Command to install the required Polar NextJS package and Zod dependency using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nextjs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/nextjs zod\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 userinfo Endpoint in OpenAPI\nDESCRIPTION: Specifies the OpenAPI path for the OAuth2 userinfo endpoint that returns authenticated user information. This endpoint follows the OAuth2 standard for retrieving user profile data.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/connect/get-user-info.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/oauth2/userinfo\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Polar Documentation Development\nDESCRIPTION: This command installs the necessary dependencies for developing Polar documentation using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for License Keys in OpenAPI YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a GET endpoint to retrieve license keys. It includes the path, operation details, parameters, and response structure for the API call.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/license-keys/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/license-keys/\n```\n\n----------------------------------------\n\nTITLE: Building Email Renderer Binary\nDESCRIPTION: A shell command to build the email renderer binary required for the backend. This is especially important for first-time local development setup.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nuv run task emails\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for PATCH Subscription Endpoint\nDESCRIPTION: Defines the OpenAPI specification for the PATCH endpoint to update customer subscriptions by ID in the customer portal.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/subscriptions/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/customer-portal/subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Remix Package\nDESCRIPTION: Command to install the Polar Remix package and its dependency Zod using pnpm.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/remix.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/remix zod\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Introspection Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification header for the OAuth2 token introspection endpoint, which is defined as a POST request to /v1/oauth2/introspect\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/connect/introspect-token.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/oauth2/introspect\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SDK in Python\nDESCRIPTION: This snippet shows how to install the Polar SDK using pip or uv package managers in Python.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/ingestion-strategies.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install polar-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv add polar-sdk\n```\n\n----------------------------------------\n\nTITLE: Defining GET /v1/organizations/ Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the GET endpoint to retrieve organization data. The endpoint is defined using YAML notation and specifies the path and HTTP method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/organizations/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/organizations/\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies with PNPM\nDESCRIPTION: Shell commands to navigate to the clients directory and install JavaScript dependencies for the frontend using PNPM package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd clients\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PATCH Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification defining a PATCH endpoint for updating checkout client data. Uses client_secret as the path parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkouts/update-session-from-client.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/checkouts/client/{client_secret}\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Sveltekit Package\nDESCRIPTION: Command to install the required packages for Polar integration with Sveltekit using pnpm.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/sveltekit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/sveltekit zod\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Downloadables\nDESCRIPTION: OpenAPI/Swagger specification defining the GET endpoint '/v1/customer-portal/downloadables/' for retrieving downloadable resources.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/downloadables/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/downloadables/\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Backoffice Assets with UV in Bash\nDESCRIPTION: Command to rebuild the assets bundle for the backoffice, allowing Tailwind and DaisyUI to detect new classes when new styles and components are added.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/polar/web_backoffice/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run task backoffice\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Product Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification for the GET /v1/products/{id} endpoint that retrieves product details by ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/products/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/products/{id}\n```\n\n----------------------------------------\n\nTITLE: Running the Backoffice API with UV in Bash\nDESCRIPTION: Command to start the API and backoffice on the same port using UV task runner. This makes the backoffice available at http://127.0.0.1:8000/backoffice.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/polar/web_backoffice/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv run task api\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Customer Update in OpenAPI YAML\nDESCRIPTION: This OpenAPI specification defines a PATCH endpoint for updating customer information using an external ID. It specifies the path parameters and likely includes additional details about request body and responses in the full specification.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/update-external.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/customers/external/{external_id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Checkout Client in OpenAPI\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint specification for retrieving checkout client information using a client secret as a path parameter. The endpoint uses the GET HTTP method.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkouts/get-session-from-client.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/checkouts/client/{client_secret}\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for OAuth2 Client Removal in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI path and method for deleting an OAuth2 client. It uses the DELETE HTTP method on the path '/v1/oauth2/register/{client_id}' where {client_id} is a path parameter representing the unique identifier of the client to be deleted.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/clients/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/oauth2/register/{client_id}\n```\n\n----------------------------------------\n\nTITLE: Navigating to UI Package Directory for shadcn Updates\nDESCRIPTION: Command to navigate to the UI package directory before adding or updating shadcn components.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/ui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd clients/packages/ui\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Orders in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for retrieving orders using a GET request to '/v1/orders/'. It specifies the HTTP method and the endpoint path.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/orders/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/orders/\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SDK with PNPM\nDESCRIPTION: Command to install the Polar SDK package using PNPM package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/typescript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @polar-sh/sdk\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Patch Endpoint Definition for Benefit Grants\nDESCRIPTION: OpenAPI specification defining the PATCH endpoint for updating benefit grant records in the customer portal system. The endpoint path includes an ID parameter to identify the specific grant to update.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/benefit-grants/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/customer-portal/benefit-grants/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Discount Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification for a GET endpoint that retrieves discount information by ID. The endpoint path includes an ID parameter for identifying the specific discount record to fetch.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/discounts/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/discounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Creating Confirmation Controller\nDESCRIPTION: Implements the ConfirmationController to handle successful Polar checkouts and display confirmation details.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/Http/Controllers/ConfirmationController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ConfirmationController extends Controller\n{\n    public function handle(Request $request)\n    {\n        // Change from sandbox-api.polar.sh -> api.polar.sh when ready to go live\n        // And don't forget to update the .env file with the correct POLAR_ORGANIZATION_ID and POLAR_WEBHOOK_SECRET\n        $data = Http::withHeaders([\n            'Authorization' => 'Bearer ' . env('POLAR_API_KEY'),\n            'Content-Type' => 'application/json',\n        ])->get('https://sandbox-api.polar.sh/v1/checkouts/custom/' . $request->query('checkout_id'));\n\n        $checkout = $data->json();\n\n        Log::info(json_encode($checkout, JSON_PRETTY_PRINT));\n\n        return view('confirmation', ['checkout' => $checkout]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Organization Creation\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST endpoint used to create organizations in the Polar API. It specifies the path as /v1/organizations/.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/organizations/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/organizations/\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Refunds Endpoint Definition\nDESCRIPTION: OpenAPI specification defining the GET endpoint for retrieving refunds information.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/refunds/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/refunds/\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Polar Package via Composer\nDESCRIPTION: Command to install the Laravel Polar package using Composer package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require danestves/laravel-polar\n```\n\n----------------------------------------\n\nTITLE: Defining GET Checkout Link Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the GET /v1/checkout-links/{id} endpoint, which retrieves information about a specific checkout link by its identifier.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkout-links/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/checkout-links/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for File Deletion in OpenAPI\nDESCRIPTION: Specifies an OpenAPI endpoint for deleting a file resource by its unique identifier. The endpoint is configured as a DELETE operation at the path '/v1/files/{id}', where {id} is a path parameter representing the file's unique identifier.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/files/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/files/{id}\n```\n\n----------------------------------------\n\nTITLE: Excluding Polar Webhooks from CSRF Protection\nDESCRIPTION: Example of how to exclude Polar webhook routes from CSRF protection in Laravel's VerifyCsrfToken middleware.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected $except = [\n    'polar/*',\n];\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI PATCH Endpoint for Discount Updates in YAML\nDESCRIPTION: OpenAPI specification for the PATCH /v1/discounts/{id} endpoint that updates discount records. The specification defines the endpoint path, request parameters, and expected responses.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/discounts/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/discounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Subscriptions Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the GET /v1/subscriptions/ endpoint that likely retrieves subscription data. The specification is minimal and only defines the route without details on parameters, responses, or authentication requirements.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/subscriptions/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/subscriptions/\n```\n\n----------------------------------------\n\nTITLE: Visualizing Usage Based Billing Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing the relationship between different components of the Usage Based Billing system, including event ingestion, meters, products, and pricing.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/usage-based-billing/introduction.mdx#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nApp[Your Application]\nUser[User]\n\n    subgraph Polar[\"Polar\"]\n        API[Events Ingestion API]\n        DB[(Events database)]\n        Meters[Meters]\n        Products[Products]\n        Benefit[Meter Credits Benefit]\n\n        subgraph MeteredPrice[\"Metered Prices\"]\n            Unit[Unit Pricing]\n        end\n    end\n\n\n    User -->|Uses| App\n    App -->|Sends events| API\n    API -->|Stores events| DB\n    Benefit -->|Stores credit events| DB\n\n    DB -->|Filtered & aggregated by| Meters\n    Meters -->|Associated with| Products\n    Benefit -->|Associated with| Meters\n\n    Products -.->|Apply| MeteredPrice\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for License Keys\nDESCRIPTION: This OpenAPI snippet defines a GET endpoint for retrieving license key information by ID. The endpoint path contains a parameter for the license key's unique identifier.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/license-keys/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/customer-portal/license-keys/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Customer Portal Order Invoice\nDESCRIPTION: OpenAPI specification for a GET endpoint that retrieves invoice information for a specific order by its ID in the customer portal. The endpoint path includes a required order ID parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/orders/get-invoice.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/orders/{id}/invoice\n```\n\n----------------------------------------\n\nTITLE: Subscription Query Scopes in PHP\nDESCRIPTION: Available subscription query scopes for filtering subscriptions by various states.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nSubscription::query()->incomplete();\nSubscription::query()->incompleteExpired();\nSubscription::query()->onTrial();\nSubscription::query()->active();\nSubscription::query()->pastDue();\nSubscription::query()->unpaid();\nSubscription::query()->cancelled();\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for License Key Activation in OpenAPI\nDESCRIPTION: OpenAPI specification defining the '/v1/customer-portal/license-keys/activate' endpoint that accepts POST requests for license key activation.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/license-keys/activate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/customer-portal/license-keys/activate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Specification for License Key Deactivation\nDESCRIPTION: YAML specification defining the API endpoint for deactivating license keys in the customer portal. Route path is POST /v1/customer-portal/license-keys/deactivate.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/license-keys/deactivate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/customer-portal/license-keys/deactivate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Order Endpoint Specification\nDESCRIPTION: Defines the OpenAPI specification for the GET /v1/orders/{id} endpoint that retrieves order details.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/orders/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/orders/{id}\n```\n\n----------------------------------------\n\nTITLE: GET Benefit Endpoint Definition - YAML\nDESCRIPTION: OpenAPI specification defining the endpoint for retrieving a specific benefit by its ID parameter. The path includes a dynamic ID parameter in the URL structure.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/benefits/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/benefits/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Customer Portal Subscription in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a GET endpoint to retrieve subscription details by ID in a customer portal. It includes the endpoint path, HTTP method, and likely contains additional details such as parameters, responses, and security requirements (not shown in this snippet).\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/subscriptions/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Setting Polar Webhook Secret in .env File\nDESCRIPTION: Example of how to set the Polar webhook secret in the Laravel .env file.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPOLAR_WEBHOOK_SECRET=\"<your_webhook_secret>\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Customer Endpoint Declaration\nDESCRIPTION: OpenAPI specification declaring the GET endpoint /v1/customers/ for retrieving customer data.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customers/\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML Path Specification\nDESCRIPTION: OpenAPI specification defining a PATCH endpoint path for updating custom fields by ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/custom-fields/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/custom-fields/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Subscription Retrieval in OpenAPI\nDESCRIPTION: OpenAPI specification for the GET /v1/subscriptions/{id} endpoint. This endpoint retrieves a specific subscription by its ID from the Polar system.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/subscriptions/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Benefit Grants in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI structure for the GET /v1/benefits/{id}/grants endpoint. It defines the path parameters, query parameters, and expected responses for retrieving grants associated with a specific benefit ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/benefits/list-grants.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/benefits/{id}/grants\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth 2.0 Token Revocation Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the OAuth 2.0 token revocation endpoint. It specifies the HTTP method (POST) and the endpoint path (/v1/oauth2/revoke) for revoking OAuth 2.0 tokens.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/connect/revoke-token.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/oauth2/revoke\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Dependencies for Elysia\nDESCRIPTION: Installation command for required Polar and Zod packages using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/elysia.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/elysia zod\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for OAuth2 Client Registration Endpoint\nDESCRIPTION: An OpenAPI specification that defines the GET /v1/oauth2/register/{client_id} endpoint for retrieving OAuth2 client information. The endpoint uses the client_id as a path parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/clients/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/oauth2/register/{client_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Delete Checkout Link Endpoint Definition\nDESCRIPTION: OpenAPI specification for DELETE endpoint that removes a checkout link by its ID. The path includes an ID parameter for identifying the specific checkout link to delete.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkout-links/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/checkout-links/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Benefit Grants in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a GET endpoint to retrieve a specific benefit grant by its ID. It specifies the path, likely authentication requirements, and the expected response structure.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/benefit-grants/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/benefit-grants/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition - GET Discounts\nDESCRIPTION: OpenAPI/Swagger endpoint specification for retrieving discounts via HTTP GET request to /v1/discounts/.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/discounts/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/discounts/\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition - Get Meter Events\nDESCRIPTION: OpenAPI YAML definition specifying the endpoint path for retrieving meter events by meter ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/meters/get-events.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/meters/{id}/events\n```\n\n----------------------------------------\n\nTITLE: Installing Polar SvelteKit Dependencies\nDESCRIPTION: Command to install required Polar SDK and Zod dependencies using pnpm package manager\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/tanstack.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/sveltekit zod\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PUT Endpoint Definition for OAuth Client Registration\nDESCRIPTION: OpenAPI specification for the PUT /v1/oauth2/register/{client_id} endpoint used to update OAuth client registration information. Defines the path, parameters, request body, and response formats.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/clients/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /v1/oauth2/register/{client_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Delete Endpoint for Subscriptions in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a DELETE endpoint to remove a subscription by its ID. It includes the path parameter and indicates that this is part of the OpenAPI schema.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/subscriptions/revoke.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Order Endpoint in OpenAPI\nDESCRIPTION: OpenAPI/Swagger specification that defines the GET endpoint for fetching order details using the order ID from the customer portal system.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/orders/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/orders/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/custom-fields/ Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST endpoint used to create custom fields in the Polar API.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/custom-fields/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/custom-fields/\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Customer Removal in OpenAPI\nDESCRIPTION: OpenAPI specification for a DELETE endpoint that allows removing a customer by their external ID. The path includes the external_id parameter which serves as the unique identifier for the customer to be deleted.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/delete-external.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/customers/external/{external_id}\n```\n\n----------------------------------------\n\nTITLE: Tracking User Signups with Affonso JavaScript\nDESCRIPTION: JavaScript code to track user signups through affiliate links by calling Affonso's signup method with the user's email after successful registration.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/integrations/affonso.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// After successful registration\nwindow.Affonso.signup(userEmail);\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET Customer Endpoint in YAML\nDESCRIPTION: Defines the REST API endpoint path and HTTP method for retrieving a customer by their unique identifier. The specification uses OpenAPI format to document the endpoint structure.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customers/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Authorization Endpoint in OpenAPI YAML\nDESCRIPTION: YAML specification that defines the OAuth2 authorize endpoint at /v1/oauth2/authorize. The minimal specification appears to be a route definition without detailed parameters or responses.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/connect/authorize.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/oauth2/authorize\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for License Key Activation in OpenAPI\nDESCRIPTION: This YAML snippet specifies the OpenAPI path for retrieving a specific activation of a license key. It defines the endpoint structure, including the license key ID and activation ID as path parameters.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/license-keys/get-activation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/license-keys/{id}/activations/{activation_id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Custom Fields in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/custom-fields/ endpoint. It includes the endpoint path, HTTP method, and a brief summary of its functionality.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/custom-fields/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/custom-fields/\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub App in GitHub Codespaces\nDESCRIPTION: A shell command specifically for GitHub Codespaces users to set up GitHub App integration. The script automatically uses the external GitHub Codespace URL.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./dev/setup-environment --setup-github-app\n```\n\n----------------------------------------\n\nTITLE: Embedding ParityDeals Banner Script\nDESCRIPTION: HTML markup for embedding the ParityDeals banner script on your website. This is the final step of the integration process that enables dynamic pricing based on geolocation.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/integrations/paritydeals.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/assets/features/integrations/paritydeals/success.light.png\" />\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for External Customer Retrieval in OpenAPI\nDESCRIPTION: Specifies the REST API endpoint for retrieving customer information using an external identifier. The path includes the external_id as a path parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/get-external.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customers/external/{external_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Event Schema in Markdown\nDESCRIPTION: Frontmatter definition for the customer.state_changed webhook event documentation, specifying the OpenAPI schema reference for the payload structure.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/webhooks/customer.state_changed.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: customer.state_changed\nopenapi-schema: WebhookCustomerStateChangedPayload\n---\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Custom Field Retrieval in OpenAPI\nDESCRIPTION: OpenAPI specification for the GET /v1/custom-fields/{id} endpoint used to retrieve a specific custom field by its unique identifier.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/custom-fields/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/custom-fields/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for License Keys\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint specification for retrieving a license key by its unique identifier. It specifies the API path structure with a path parameter for the license key ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/license-keys/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/license-keys/{id}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with UV\nDESCRIPTION: A shell command to install Python dependencies for the backend using the UV package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment variable configuration for Polar access token\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/better-auth.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nPOLAR_ACCESS_TOKEN=...\n```\n\n----------------------------------------\n\nTITLE: Defining GET /v1/events/{id} Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v1/events/{id} endpoint. It likely includes details such as path parameters, response schema, and possibly security requirements for retrieving a specific event by its ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/events/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/events/{id}\n```\n\n----------------------------------------\n\nTITLE: Running React-Email Development Server\nDESCRIPTION: Command to start the react-email development server for real-time preview and updates of email templates.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/emails/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Downloadable Content\nDESCRIPTION: OpenAPI/Swagger specification for a GET endpoint that enables access to downloadable content through the customer portal using a token authentication mechanism.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/downloadables/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/downloadables/{token}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Customer Meters Endpoint in OpenAPI\nDESCRIPTION: OpenAPI route specification for retrieving customer meter data via a GET request with an ID parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-meters/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-meters/{id}\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variables with Setup Script\nDESCRIPTION: A shell command to run the setup environment script which creates necessary environment variable files for both server and web client. This script requires uv to be installed on the system.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./dev/setup-environment\n```\n\n----------------------------------------\n\nTITLE: Implementing Zapier Embed Component in React\nDESCRIPTION: This React component dynamically loads Zapier's partner SDK scripts and stylesheets, then creates a custom 'zapier-workflow' element. It handles server-side rendering by returning null if document is undefined, and sets up the Zapier element with specific configurations on the client-side.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/snippets/zapier-embed.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const ZapierEmbed = () => {\n  if (typeof document === \"undefined\") {\n    return null;\n  } else {\n    setTimeout(() => {\n      const script = document.createElement(\"script\");\n      script.type = \"module\";\n      script.src =\n        \"https://cdn.zapier.com/packages/partner-sdk/v0/zapier-elements/zapier-elements.esm.js\";\n      document.head.appendChild(script);\n\n      const stylesheet = document.createElement(\"link\");\n      stylesheet.rel = \"stylesheet\";\n      stylesheet.href =\n        \"https://cdn.zapier.com/packages/partner-sdk/v0/zapier-elements/zapier-elements.css\";\n      document.head.appendChild(stylesheet);\n\n      const element = document.createElement(\"zapier-workflow\");\n      element.clientId = \"Zci4gpfx7Co47mBoFOYm0m8bmnzB5UPcw7eGhpSR\";\n      element.theme = document.querySelector(\"html\").classList.contains(\"dark\") ? \"dark\" : \"light\";\n      element.introCopyDisplay = \"hide\";\n      element.manageZapsDisplay = \"hide\";\n      element.guessZapDisplay = \"hide\";\n      const container =\n        document.querySelector(\"#zapier-container\") || document.body;\n      container.appendChild(element);\n    }, 1);\n\n    return <div id=\"zapier-container\"></div>;\n\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining POST /v1/files/ Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/files/ endpoint. It includes the endpoint path, HTTP method, and a brief summary of its purpose.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/files/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/files/\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Polar Installation Command\nDESCRIPTION: Artisan command to install Laravel Polar, which publishes config, migrations, and views.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan polar:install\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Meter Quantities\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for the GET /v1/meters/{id}/quantities endpoint. It specifies the path parameters, likely used in a RESTful API to retrieve quantity data for a specific meter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/meters/get-quantities.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/meters/{id}/quantities\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET /v1/oauth2/ Endpoint\nDESCRIPTION: OpenAPI specification defining the GET endpoint for OAuth2 authentication path\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/clients/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/oauth2/\n```\n\n----------------------------------------\n\nTITLE: Installing BetterAuth and Polar Dependencies\nDESCRIPTION: Commands to install the required npm packages for BetterAuth and Polar integration\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/better-auth.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add better-auth @polar-sh/better-auth\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for PATCH /v1/customers/{id} in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a PATCH request to update customer information. It includes the endpoint path and HTTP method. The full specification would typically include more details such as parameters, request body, and responses.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/update.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/customers/{id}\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Polar Assets Individually\nDESCRIPTION: Artisan commands to publish migrations, config, and views for Laravel Polar separately.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=\"polar-migrations\"\nphp artisan vendor:publish --tag=\"polar-config\"\nphp artisan vendor:publish --tag=\"polar-views\"\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Defining GET API Endpoint for Customer Portal Benefit Grants in YAML\nDESCRIPTION: Specification for the OpenAPI GET endpoint that retrieves benefit grants through the customer portal. The path is defined as /v1/customer-portal/benefit-grants/.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/benefit-grants/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/benefit-grants/\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Token POST Endpoint Path in OpenAPI\nDESCRIPTION: OpenAPI path specification defining the POST endpoint for OAuth2 token requests at /v1/oauth2/token.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/connect/request-token.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/oauth2/token\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Nuxt Module Configuration\nDESCRIPTION: Configuration setup for adding the Polar module to a Nuxt application's configuration file.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/nuxt.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\"@polar-sh/nuxt\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Processing GitHub Webhook Events with FastAPI in Python\nDESCRIPTION: This code snippet defines an async function to handle GitHub webhook events. It processes different event types, updates the database, and performs specific actions based on the event. The function uses FastAPI's Depends for dependency injection and interacts with various services and models.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/apps/web/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasync def process_github_webhook_event(\n    event: GithubWebhookEvent,\n    db: AsyncSession = Depends(get_db),\n    github_personal_access_token_service: GithubPersonalAccessTokenService = Depends(\n        GithubPersonalAccessTokenService\n    ),\n    repository_service: RepositoryService = Depends(RepositoryService),\n    organization_service: OrganizationService = Depends(OrganizationService),\n    issue_service: IssueService = Depends(IssueService),\n    pull_request_service: PullRequestService = Depends(PullRequestService),\n    badge_service: BadgeService = Depends(BadgeService),\n    pledge_service: PledgeService = Depends(PledgeService),\n    user_service: UserService = Depends(UserService),\n) -> None:\n    # Process the event based on its type\n    match event.event:\n        case \"issues\":\n            await process_issue_event(\n                event,\n                db,\n                github_personal_access_token_service,\n                repository_service,\n                organization_service,\n                issue_service,\n                badge_service,\n                pledge_service,\n                user_service,\n            )\n        case \"pull_request\":\n            await process_pull_request_event(\n                event,\n                db,\n                github_personal_access_token_service,\n                repository_service,\n                organization_service,\n                pull_request_service,\n                badge_service,\n                pledge_service,\n                user_service,\n            )\n        case \"repository\":\n            await process_repository_event(\n                event,\n                db,\n                github_personal_access_token_service,\n                repository_service,\n                organization_service,\n            )\n        case \"organization\":\n            await process_organization_event(\n                event,\n                db,\n                github_personal_access_token_service,\n                organization_service,\n            )\n        case \"installation\":\n            await process_installation_event(\n                event,\n                db,\n                github_personal_access_token_service,\n                repository_service,\n                organization_service,\n            )\n        case \"installation_repositories\":\n            await process_installation_repositories_event(\n                event,\n                db,\n                github_personal_access_token_service,\n                repository_service,\n                organization_service,\n            )\n        case _:\n            logger.info(f\"Unhandled event type: {event.event}\")\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Customer Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for a REST endpoint that deletes a customer resource using their unique identifier. The endpoint path takes a customer ID as a path parameter.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/customers/{id}\n```\n\n----------------------------------------\n\nTITLE: Including Polar Embed Script in Blade View\nDESCRIPTION: Blade directive to include the Polar Embedded Checkout script in the HTML head.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n\n    @polarEmbedScript\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Benefits Endpoint\nDESCRIPTION: Specifies an OpenAPI endpoint for retrieving benefits using the GET HTTP method at the path /v1/benefits/.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/benefits/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/benefits/\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST Event Ingestion Endpoint\nDESCRIPTION: Defines the POST /v1/events/ingest endpoint in YAML format according to OpenAPI standards. The specification outlines the path, request format, and other relevant API details for ingesting events in the Polar system.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/events/ingest.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/events/ingest\n```\n\n----------------------------------------\n\nTITLE: Webhook Client Configuration\nDESCRIPTION: Configuration setup for the webhook client including signature verification and job processing settings\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/webhook-client.php\n<?php\nreturn [\n    'configs' => [\n        [\n            'name' => 'default',\n            'signing_secret' => env('POLAR_WEBHOOK_SECRET'),\n            'signature_header_name' => 'webhook-signature',\n            'signature_validator' => App\\Handler\\PolarSignature::class,\n            'webhook_profile' => \\Spatie\\WebhookClient\\WebhookProfile\\ProcessEverythingWebhookProfile::class,\n            'webhook_response' => \\Spatie\\WebhookClient\\WebhookResponse\\DefaultRespondsTo::class,\n            'webhook_model' => \\Spatie\\WebhookClient\\Models\\WebhookCall::class,\n            'store_headers' => [],\n            'process_webhook_job' => App\\Handler\\ProcessWebhook::class,\n        ],\n    ],\n    'delete_after_days' => 30,\n];\n```\n\n----------------------------------------\n\nTITLE: Previewing Order Confirmation Email Template\nDESCRIPTION: A bash command to render the order confirmation email template to a file and preview it in the browser. Changes to the template are automatically refreshed.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nuv run task watch_email email_order_confirmation\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Metrics Endpoint\nDESCRIPTION: OpenAPI specification for the /v1/metrics/ GET endpoint path. This appears to be a minimal endpoint definition using YAML format.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/metrics/get.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/metrics/\n```\n\n----------------------------------------\n\nTITLE: Publishing Webhook Config\nDESCRIPTION: Command to publish the webhook client configuration file\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\WebhookClient\\WebhookClientServiceProvider\" --tag=\"webhook-client-config\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for /v1/checkouts/ in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v1/checkouts/ endpoint. It includes the endpoint path and the HTTP method used for the operation.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/checkouts/list-sessions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/checkouts/\n```\n\n----------------------------------------\n\nTITLE: Defining GET /v1/customer-meters/ OpenAPI Endpoint\nDESCRIPTION: YAML OpenAPI specification for the GET /v1/customer-meters/ endpoint. This documents an API endpoint that likely returns customer usage metrics or metering information.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-meters/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-meters/\n```\n\n----------------------------------------\n\nTITLE: Installing Standard Webhooks Package\nDESCRIPTION: Command to install the standard-webhooks package for decoding webhook payloads\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require standard-webhooks/standard-webhooks:dev-main\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Worker\nDESCRIPTION: A shell command to start the backend worker process. This worker handles general-purpose background tasks and will automatically restart when code changes are detected.\nSOURCE: https://github.com/polarsource/polar/blob/main/DEVELOPMENT.md#2025-04-19_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nuv run task worker\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Route Definition for Customer Portal Orders\nDESCRIPTION: Defines OpenAPI specification for the GET /v1/customer-portal/orders/ endpoint that retrieves order data from the customer portal.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/orders/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/customer-portal/orders/\n```\n\n----------------------------------------\n\nTITLE: Setting up Ngrok for Local Webhook Testing\nDESCRIPTION: Command to set up Ngrok for tunneling webhook events to local development environment.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /v1/events/ Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/events/ endpoint. It includes the endpoint path and HTTP method. The full specification likely includes more details such as parameters, responses, and schemas.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/events/list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/events/\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Metrics Limits\nDESCRIPTION: YAML specification defining the OpenAPI route for getting metrics limits via GET /v1/metrics/limits\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/metrics/get-limits.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/metrics/limits\n```\n\n----------------------------------------\n\nTITLE: Making OAuth API Requests with Access Token in cURL\nDESCRIPTION: Example of how to make an authenticated API request to Polar's userinfo endpoint using a bearer token obtained through the OAuth flow. The request uses the Authorization header with the access token that starts with 'polar_at_'.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/apps/web/src/app/(main)/(landing)/(mdx)/blog/(header)/build-saas-with-polar/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://api.polar.sh/api/v1/oauth2/userinfo \\\n  -H 'Authorization: Bearer polar_at_XXX'\n```\n\n----------------------------------------\n\nTITLE: Generating API definitions for Polar SDK\nDESCRIPTION: Command to generate API definitions for the Polar SDK package. May require manually adding generated models to src/client/PolarAPI.ts.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm generate\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Client Registration Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the POST /v1/oauth2/register endpoint that allows applications to register as OAuth2 clients with the Polar platform.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/oauth2/clients/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /v1/oauth2/register\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Dependencies for Next.js\nDESCRIPTION: This snippet shows how to install the required dependencies for integrating Polar with a Next.js project using pnpm.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/introduction.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @polar-sh/nextjs zod\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Benefits Resource in OpenAPI YAML\nDESCRIPTION: This snippet defines an OpenAPI specification for a DELETE endpoint that removes a benefit resource by its ID. The endpoint path includes a parameter for the benefit ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/benefits/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/benefits/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Subscription Export Endpoint Definition\nDESCRIPTION: OpenAPI specification for a GET endpoint that exports subscription data.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/subscriptions/export.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/subscriptions/export\n```\n\n----------------------------------------\n\nTITLE: Starting web development environment for Polar\nDESCRIPTION: Command to start the development environment for the web application in the Polar clients repository.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev-web\n```\n\n----------------------------------------\n\nTITLE: Installing Polar Astro Integration\nDESCRIPTION: Command to install the required packages for integrating Polar with Astro.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/astro.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @polar-sh/astro zod\n```\n\n----------------------------------------\n\nTITLE: Defining Polar Checkout Package in Markdown\nDESCRIPTION: This snippet defines the name of the Polar Checkout package using Markdown syntax. It highlights the package name as inline code for clarity and emphasis.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/checkout/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@polar-sh/checkout`\n```\n\n----------------------------------------\n\nTITLE: Delete Discount Endpoint Definition in OpenAPI\nDESCRIPTION: Defines the OpenAPI specification for the DELETE endpoint that removes a discount record by its ID. The path includes a parameter for the discount identifier that should be removed.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/discounts/delete.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/discounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Adding a shadcn Component to the UI Library\nDESCRIPTION: Command to add a new shadcn component (accordion in this example) to the Polar UI library using the shadcn CLI tool.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/ui/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx shadcn@latest add accordion\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Path Definition\nDESCRIPTION: Defines the API endpoint path specification for confirming a file upload completion at /v1/files/{id}/uploaded\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/files/complete-upload.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/files/{id}/uploaded\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Markdown heading showing the npm package name for Polar Checkout integration utilities\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/client/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@polar-sh/checkout`\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/examples/checkout-components/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Displaying MCP Server Help Command\nDESCRIPTION: Command to show all available server arguments and options for the Polar MCP server configuration.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/mcp.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y --package @polar-sh/sdk -- mcp start --help\n```\n\n----------------------------------------\n\nTITLE: MDX Package Information\nDESCRIPTION: Package name specification in markdown format\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/mdx/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @polar-sh/mdx\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: A changelog document detailing version history from 0.1.0 to 0.1.10, including patch changes and minor releases for the @polar-sh/checkout package. Documents important updates like React 19 compatibility, security mechanisms, and UI improvements.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/checkout/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @polar-sh/checkout\n\n## 0.1.10\n\n### Patch Changes\n\n- 15e0267: Allow React 19 as a peer dependency\n\n## 0.1.9\n\n### Patch Changes\n\n- de906a0: Handle case where the checkout element might have nested elements triggering the click event\n\n## 0.1.8\n\n### Patch Changes\n\n- d623321: Add permissions policy to the iframe for better compatibility with wallet payment methods\n\n## 0.1.7\n\n### Patch Changes\n\n- 2811f8a: Prevent embed to be closed while checkout is processing payment\n\n## 0.1.6\n\n### Patch Changes\n\n- 8c2db45: Darken iframe backdrop\n\n## 0.1.5\n\n### Patch Changes\n\n- fabadac: Tweak authorized origins variable name\n\n## 0.1.4\n\n### Patch Changes\n\n- 6421c8d: - Fix backdrop not correctly rendered with forced dark schemes\n  - Improve internals for events handling\n\n## 0.1.3\n\n### Patch Changes\n\n- e67a4cb: Implement security mechanism to avoid XSS vulnerabilities\n- 4bb3bb3: prevent `init()` from wiring the click event listener several times\n\n## 0.1.2\n\n### Patch Changes\n\n- ef574b4: - Prevent background page from scrolling while checkout is shown\n  - Tweak backdrop and loader\n  - Add a method to run initialization logic manually\n\n## 0.1.1\n\n### Patch Changes\n\n- 7ccc8a8: Bump to make CI and tagging back on track\n\n## 0.1.0\n\n### Minor Changes\n\n- d2ec431: Initial release\n\n## 0.1.0\n\n### Minor Changes\n\n- Initial release of @polar-sh/checkout\n```\n\n----------------------------------------\n\nTITLE: Generating Alembic Database Migration - Bash\nDESCRIPTION: Command to automatically generate a new Alembic database migration revision with a custom message. The --autogenerate flag compares the current database schema with models to create appropriate migration steps.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/migrations/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Auto generate a new migration\nalembic revision --autogenerate -m \"your message\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog for Polar UI Package\nDESCRIPTION: A structured changelog documenting the version history and changes made to the @polar-sh/ui package, including both minor and patch updates as well as dependency changes.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/packages/ui/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @polar-sh/ui\n\n## 0.1.1\n\n### Patch Changes\n\n- 62a3c07: Fix package.json metadata\n\n## 0.1.0\n\n### Minor Changes\n\n- 05f1a9b: Reorganize package and prepare for publishing\n\n## 0.0.4\n\n### Patch Changes\n\n- Updated dependencies [d93b98b]\n  - @polar-sh/sdk@0.5.1\n\n## 0.0.3\n\n### Patch Changes\n\n- Updated dependencies [2166b03]\n  - @polar-sh/sdk@0.5.0\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [a20bde6]\n  - @polar-sh/sdk@0.4.8\n\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [8ab2455]\n  - @polar-sh/sdk@0.4.7\n```\n\n----------------------------------------\n\nTITLE: Updating Polar API Schema and Webhooks Documentation\nDESCRIPTION: This script updates the Polar API schema with Speakeasy overlays and generates missing webhooks schema pages. It downloads the latest schema and automatically adds new pages to the 'Webhooks Events' navigation section.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./update-schema.sh https://spec.speakeasy.com/polar/polar/polar-oas-with-code-samples\n```\n\n----------------------------------------\n\nTITLE: Building all Polar client apps and packages\nDESCRIPTION: Command to build all applications and packages in the Polar clients repository using pnpm.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Starting Polar Documentation Development Server\nDESCRIPTION: This command starts the development server for Polar documentation, allowing real-time preview and editing of the documentation.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Defining POST /v1/customers/ Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/customers/ endpoint. It outlines the request body schema and possible response codes for creating a new customer.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customers/create.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/customers/\n```\n\n----------------------------------------\n\nTITLE: Running Storybook for Polar UI component development\nDESCRIPTION: Commands to install dependencies and start Storybook for UI component development within the clients directory. Storybook will run at http://localhost:6006/.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# from the \"clients\" directory\npnpm install\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with pnpm for Polar clients\nDESCRIPTION: Command to install all required dependencies for the Polar clients repository using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Email Template Development\nDESCRIPTION: Command to install the necessary dependencies for working with email templates using pnpm package manager.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/emails/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for S3 Bucket Access in JSON\nDESCRIPTION: This JSON snippet defines an IAM policy that grants specific permissions for S3 bucket operations. It allows actions like PutObject, GetObject, and DeleteObject on all objects within the specified S3 bucket.\nSOURCE: https://github.com/polarsource/polar/blob/main/server/polar/file/README.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObjectAttributes\",\n                \"s3:GetObject\",\n                \"s3:GetObjectVersion\",\n                \"s3:GetObjectVersionAttributes\",\n                \"s3:DeleteObject\",\n                \"s3:DeleteObjectVersion\"\n            ],\n            \"Resource\": \"arn:aws:s3:::<S3_BUCKET_NAME>/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Affonso Tracking Script in HTML\nDESCRIPTION: HTML script tag to be placed in the head section of the website for implementing Affonso's tracking functionality. Requires replacing placeholder program ID and cookie duration values.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/features/integrations/affonso.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Place in <head> tag -->\n<script\n  async\n  defer\n  src=\"https://affonso.io/js/pixel.min.js\"\n  data-affonso=\"YOUR_AFFONSO_PROGRAM_ID\"\n  data-cookie_duration=\"YOUR_COOKIE_DURATION\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Polar in GitHub FUNDING.yaml\nDESCRIPTION: This YAML snippet shows how to add Polar as a funding platform in the .github/FUNDING.yaml file. Replace 'polarsource' with the GitHub username or organization name connected to Polar.\nSOURCE: https://github.com/polarsource/polar/blob/main/clients/apps/web/src/app/(main)/(landing)/(mdx)/blog/(header)/github-supports-polar-in-funding-yaml/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolar: polarsource\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Customer Portal Subscriptions in OpenAPI\nDESCRIPTION: This YAML snippet specifies the OpenAPI path for deleting a subscription in the customer portal. It defines the HTTP DELETE method and the endpoint path with a parameter for the subscription ID.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/subscriptions/cancel.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/customer-portal/subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for License Key Validation\nDESCRIPTION: This snippet defines an OpenAPI specification for a POST endpoint that validates license keys through the customer portal. The endpoint path is '/v1/customer-portal/license-keys/validate'.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/customer-portal/license-keys/validate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/customer-portal/license-keys/validate\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Subscription Revoked Event Schema\nDESCRIPTION: Markdown frontmatter that specifies the title and OpenAPI schema name for subscription revocation webhook events\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/api-reference/webhooks/subscription.revoked.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: subscription.revoked\nopenapi-schema: WebhookSubscriptionRevokedPayload\n---\n```\n\n----------------------------------------\n\nTITLE: Using Polar Button Component in Blade View\nDESCRIPTION: Example of how to use the Polar button component in a Blade view for embedded checkout.\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/integrate/sdk/adapters/laravel.mdx#2025-04-19_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<x-polar-button :checkout=\"$checkout\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Spatie Webhook Client\nDESCRIPTION: Command to install the Spatie Laravel Webhook Client package\nSOURCE: https://github.com/polarsource/polar/blob/main/docs/guides/laravel.mdx#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-webhook-client\n```"
  }
]