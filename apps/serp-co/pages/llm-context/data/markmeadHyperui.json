[
  {
    "owner": "markmead",
    "repo": "hyperui",
    "content": "TITLE: Using Accurate Transition Classes in Tailwind CSS\nDESCRIPTION: This snippet emphasizes the importance of using specific transition classes like `transition-colors` instead of the generic `transition-all` in Tailwind CSS. This improves performance by only applying transitions to the necessary properties, rather than all properties.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"bg-red-500 transition-all hover:bg-red-600\">Click</button>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"bg-red-500 transition-colors hover:bg-red-600\">Click</button>\n```\n\n----------------------------------------\n\nTITLE: Delegating Classes to Parent Element in Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to optimize Tailwind CSS by delegating common classes to the parent element. This improves code readability and reduces redundancy by applying shared styles to the parent, rather than repeating them on each child element.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li class=\"whitespace-nowrap text-sm font-medium\">First</li>\n  <li class=\"whitespace-nowrap text-sm font-medium\">Second</li>\n  <li class=\"whitespace-nowrap text-sm font-medium\">Third</li>\n</ul>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"text-sm font-medium\">\n  <li class=\"whitespace-nowrap\">First</li>\n  <li class=\"whitespace-nowrap\">Second</li>\n  <li class=\"whitespace-nowrap\">Third</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configure Tailwind Container\nDESCRIPTION: This code snippet demonstrates how to customize the container settings in the Tailwind CSS configuration file. It shows how to center the container and add optional padding for different screen sizes. It allows you to reduce the amount of repetitive code needed to style containers.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-containers-in-tailwindcss.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntheme: {\n  container: {\n    center: true,\n\n    // Optional\n    padding: {\n      DEFAULT: '1rem',\n      sm: '1.5rem',\n      lg: '2rem'\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Spacing Classes in Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to remove duplicate spacing classes by utilizing the `space-y-*` utility in Tailwind CSS. Instead of applying margin to each individual element, the parent container manages the spacing, resulting in cleaner and more maintainable code.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n  <li>First</li>\n  <li class=\"mt-8\">Second</li>\n  <li class=\"mt-8\">Third</li>\n</ul>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"space-y-8\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Max Width Classes in Tailwind CSS\nDESCRIPTION: This snippet highlights the benefit of using `max-w-*` classes instead of `w-*` classes for restricting width in Tailwind CSS. `max-w-*` classes are responsive by default and better describe the layout's intention.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"w-auto sm:w-64\">\n  <div>Hello World</div>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"max-w-sm\">\n  <div>Hello World</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Duration to Tailwind CSS\nDESCRIPTION: This code snippet adds animation duration support to Tailwind CSS by creating a custom plugin. It uses the `matchUtilities` function to create classes with the `animate-duration` prefix, mapping them to the corresponding values from the `transitionDuration` theme.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/animation-duration-delay-with-tailwindcss.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plugin = require('tailwindcss/plugin')\n\nmodule.exports = {\n  plugins: [\n    plugin(function ({ matchUtilities, theme }) {\n      matchUtilities(\n        {\n          'animate-duration': (value) => ({\n            animationDuration: value,\n          }),\n        },\n        { values: theme('transitionDuration') }\n      )\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Easing to Tailwind CSS\nDESCRIPTION: This code snippet adds animation easing support to Tailwind CSS by creating a custom plugin. It uses the `matchUtilities` function to create classes with the `animate-ease` prefix, mapping them to the corresponding values from the `transitionTimingFunction` theme.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/animation-duration-delay-with-tailwindcss.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plugin = require('tailwindcss/plugin')\n\nmodule.exports = {\n  plugins: [\n    plugin(function ({ matchUtilities, theme }) {\n      matchUtilities(\n        {\n          'animate-ease': (value) => ({\n            animationTimingFunction: value,\n          }),\n        },\n        { values: theme('transitionTimingFunction') }\n      )\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: HTML List with Delegated Tailwind Classes\nDESCRIPTION: This example shows an HTML unordered list where the common Tailwind CSS classes for text size, font weight, and text color have been moved to the parent `<ul>` element, allowing them to cascade down to the `<li>` elements. This reduces duplication.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"text-sm font-medium text-gray-900\">\n  <li>...</li>\n  <li>...</li>\n  <li class=\"bg-gray-100\">...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: HTML List with JIT Delegated Tailwind Classes\nDESCRIPTION: This example showcases the use of Tailwind CSS JIT (Just-In-Time) mode to delegate classes like `whitespace-nowrap` and `p-4` to the parent element and apply them to the child elements.  It uses the `[&>*]` selector to target all first-level children.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"text-sm font-medium [&>*]:whitespace-nowrap [&>*]:p-4\">\n  <li>...</li>\n  <li>...</li>\n  <li class=\"bg-gray-100\">...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Color Opacity Classes in Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to use Tailwind CSS's built-in color opacity classes (e.g., `bg-opacity-50` or `bg-red-500/50` with JIT mode).  This simplifies setting background color opacity compared to using absolute positioning and opacity, resulting in cleaner and more readable code.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"relative\">\n  <span class=\"absolute inset-0 bg-red-500 opacity-50\"></span>\n  Click\n</button>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"bg-red-500 bg-opacity-50\">Click</button>\n<!-- With JIT -->\n<button class=\"bg-red-500/50\">Click</button>\n```\n\n----------------------------------------\n\nTITLE: Evenly Spacing Content with Flow Root in Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to evenly space content using Tailwind CSS's `flow-root` class. It provides a more robust solution for dynamic content spacing, offering better maintainability and adaptability compared to using `space-y` and `divide-y` classes directly.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"space-y-8 divide-y\">\n  <li>First</li>\n  <li class=\"pt-8\">Second</li>\n  <li class=\"pt-8\">Third</li>\n</ul>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"flow-root\">\n  <ul class=\"-my-8 divide-y\">\n    <li class=\"py-8\">First</li>\n    <li class=\"py-8\">Second</li>\n    <li class=\"py-8\">Third</li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML List with Repeating Tailwind Classes\nDESCRIPTION: This example shows an HTML unordered list where multiple list items have repeating Tailwind CSS classes for text size, font weight, and text color.  The goal is to refactor this to reduce duplication.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li class=\"text-sm font-medium text-gray-900\">...</li>\n  <li class=\"text-sm font-medium text-gray-900\">...</li>\n  <li class=\"bg-gray-100 text-sm font-medium text-gray-900\">...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Animating Gradient Border with Tailwind CSS\nDESCRIPTION: This code snippet demonstrates how to animate a gradient border using Tailwind CSS classes. It includes classes for animation, background size, and duration. The `animate-background` class is used to extend Tailwind's animation utilities with a custom animation for moving background gradients.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/animated-border-gradient-with-tailwindcss.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  href=\"#\"\n  class=\"animate-background block rounded-full bg-gradient-to-r from-green-300 via-blue-600 to-red-300 bg-[length:_400%_400%] p-1 [animation-duration:_6s]\"\n>\n  <span class=\"block rounded-full bg-white px-10 py-4 text-lg font-medium\"> Hello there 👋 </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Margin Bottom for Spacing in Tailwind CSS\nDESCRIPTION: This snippet illustrates the best practice of using `mt-*` (margin-top) instead of `mb-*` (margin-bottom) classes in Tailwind CSS for spacing elements. This approach prevents extra space from appearing below the last element when the content is dynamic or the last element is removed.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div class=\"mb-4\">Hello</div>\n  <div>World</div>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div>Hello</div>\n  <div class=\"mt-4\">World</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disable Number Input Spinners with CSS Class\nDESCRIPTION: This CSS snippet creates a `.no-spinner` class that removes the default spinners from number input fields by modifying the appearance and hiding the inner and outer spin buttons. It is framework-agnostic and can be used with any CSS framework.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/remove-number-input-spinners-with-tailwindcss.mdx#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.no-spinner {\n  -moz-appearance: textfield;\n}\n\n.no-spinner::-webkit-outer-spin-button,\n.no-spinner::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS with Tailwind Directives for List Styles\nDESCRIPTION: This CSS snippet demonstrates the application of Tailwind CSS utility classes using the `@apply` directive. It showcases how to apply text size and font weight to the `<ul>` element and whitespace and padding to the `<li>` elements, equivalent to using JIT.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nul {\n  @apply text-sm font-medium;\n}\n\nul > li {\n  @apply whitespace-nowrap p-4;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Component Creation in CSS Files\nDESCRIPTION: This snippet illustrates how to avoid creating components in CSS files when using a templating language like Blade, React, Liquid, or Vue. Instead of defining CSS classes for components, apply Tailwind CSS classes directly in the HTML, promoting reusability and maintainability.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"card\">\n  <div class=\"card-title\">Title</div>\n  <div class=\"card-body\">Title</div>\n  <div class=\"card-footer\">\n    <div class=\"card-timestamp\">15/05/2025</div>\n\n    <div class=\"card-actions\">\n      <button>Edit</button>\n      <button>Delete</button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fluid Container Example\nDESCRIPTION: This example showcases a more fluid container implementation using max-width and padding classes in Tailwind CSS. It allows for smoother transitions between breakpoints compared to the default .container class. The content adapts more gracefully as the screen size changes.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-containers-in-tailwindcss.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://play.tailwindcss.com/vwHBxhrJMC?layout=preview&size=1866x900\">Fluid Example</a>\n```\n\n----------------------------------------\n\nTITLE: Disable Number Input Spinners with Tailwind CSS Class\nDESCRIPTION: This CSS snippet integrates the `.no-spinner` class into Tailwind CSS as a component. This allows the class to be recognized by Tailwind CSS Intellisense. It removes the default spinners from number input fields by modifying the appearance and hiding the inner and outer spin buttons.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/remove-number-input-spinners-with-tailwindcss.mdx#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@layer components {\n  .no-spinner {\n    -moz-appearance: textfield;\n  }\n\n  .no-spinner::-webkit-outer-spin-button,\n  .no-spinner::-webkit-inner-spin-button {\n    margin: 0;\n    -webkit-appearance: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Prefixed Class Names in Tailwind CSS\nDESCRIPTION: This snippet illustrates how to group prefixed class names in Tailwind CSS for better organization and readability. This makes it easier to identify and modify styles for different screen sizes.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"\\mt-4 lg:text-3xl\\ text-lg sm:mt-0 sm:text-xl\">Hello World</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"mt-4 text-lg sm:mt-0 sm:text-xl lg:text-3xl\">Hello World</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Delay to Tailwind CSS\nDESCRIPTION: This code snippet adds animation delay support to Tailwind CSS by creating a custom plugin. It uses the `matchUtilities` function to create classes with the `animate-delay` prefix, mapping them to the corresponding values from the `transitionDelay` theme.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/animation-duration-delay-with-tailwindcss.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plugin = require('tailwindcss/plugin')\n\nmodule.exports = {\n  plugins: [\n    plugin(function ({ matchUtilities, theme }) {\n      matchUtilities(\n        {\n          'animate-delay': (value) => ({\n            animationDelay: value,\n          }),\n        },\n        { values: theme('transitionDelay') }\n      )\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Animation for Moving Background Gradients\nDESCRIPTION: This CSS code defines a custom animation called `background-move` for creating a flowing gradient effect. It shifts the background position back and forth to achieve the animation. This animation is extended with Tailwind's animation utilities.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/animated-border-gradient-with-tailwindcss.mdx#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@theme {\n  --animate-background: background-move ease infinite;\n\n  @keyframes background-move {\n    0%,\n    100% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Highlight Hover Effect with Tailwind CSS\nDESCRIPTION: This code snippet demonstrates how to create a highlight hover effect using Tailwind CSS.  The `ul` element reduces the opacity of its `li` children when hovered, while individual `li` elements revert to full opacity when hovered over using the `!important` modifier.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/highlight-hover-effect-with-tailwindcss.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"[&:hover>li]:opacity-50\">\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Removing Flex Classes on Mobile in Tailwind CSS\nDESCRIPTION: This snippet illustrates how to improve Tailwind CSS by removing unnecessary flex classes on mobile devices. It targets specific screen sizes to apply flex properties, reducing the amount of CSS loaded on smaller screens where these properties are not needed.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"sm:flex sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Static Gradient Border with Tailwind CSS\nDESCRIPTION: This code snippet demonstrates how to create a static gradient border using Tailwind CSS classes. It uses padding to create space for the gradient border around an inner element with a solid background color. The `<a>` tag is used as an interactive element.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/animated-border-gradient-with-tailwindcss.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"block rounded-full bg-gradient-to-r from-green-300 via-blue-600 to-red-300 p-1\">\n  <span class=\"block rounded-full bg-white px-10 py-4 text-lg font-medium\"> Hello there 👋 </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Being Specific with Breakpoint Classes in Tailwind CSS\nDESCRIPTION: This snippet demonstrates the importance of being specific with breakpoint classes in Tailwind CSS. Applying styles only at the required breakpoints reduces the amount of CSS loaded on mobile devices.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"items-center justify-between sm:flex\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"sm:flex sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Container vs. Fluid Comparison\nDESCRIPTION: This is a comparison between the standard Tailwind CSS .container class and the fluid container approach using max-width and padding. It highlights the snapping behavior of the .container class compared to the smoother transitions of the fluid approach.  It demonstrates the visual differences between the two container types.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-containers-in-tailwindcss.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://play.tailwindcss.com/A7HdMDPg0O?layout=preview&size=1866x900\">Container vs Fluid Example</a>\n```\n\n----------------------------------------\n\nTITLE: HTML List with Non-Delegated Tailwind Classes\nDESCRIPTION: This example shows an HTML unordered list where the list items have repeating Tailwind CSS classes, including those that cannot be delegated to the parent element through cascading (whitespace and padding).\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li class=\"whitespace-nowrap p-4 text-sm font-medium\">...</li>\n  <li class=\"whitespace-nowrap p-4 text-sm font-medium\">...</li>\n  <li class=\"whitespace-nowrap bg-gray-100 p-4 text-sm font-medium\">...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting Tailwind CSS Class Prefix\nDESCRIPTION: This code snippet demonstrates how to configure a prefix for Tailwind CSS classes in the `tailwind.config.js` file. This is used to avoid naming conflicts with Bootstrap during migration.  The `prefix` option is set to 'tw-', so all Tailwind CSS classes will start with 'tw-'.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/move-to-tailwindcss-without-breaking-changes.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprefix: 'tw-'\n```\n\n----------------------------------------\n\nTITLE: Disable Number Input Spinners with Tailwind CSS Class Names\nDESCRIPTION: This HTML snippet uses inline Tailwind CSS class names to remove the spinners from a number input field. This approach applies the necessary styles directly within the HTML, achieving the same result as the previous CSS snippets. Requires Tailwind CSS to be configured.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/remove-number-input-spinners-with-tailwindcss.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  type=\"number\"\n  class=\"[-moz-appearance:_textfield] [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none\"\n/>\n```\n\n----------------------------------------\n\nTITLE: CSS for Avoiding Component Creation in CSS Files\nDESCRIPTION: This snippet shows the incorrect way to define CSS styles for components.  The corresponding HTML shows how to avoid defining components in CSS files.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n.card {\n  @apply rounded-sm p-4;\n}\n\n.card-title {\n  @apply text-lg;\n}\n\n.card-body {\n  @apply mt-1;\n}\n\n.card-footer {\n  @apply flex items-center justify-between;\n}\n\n.card-timestamp {\n  @apply text-sm;\n}\n\n.card-actions {\n  @apply flex gap-4;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Component Creation in HTML\nDESCRIPTION: This HTML snippet shows the correct way to avoid defining components in CSS files.  Instead, Tailwind classes are applied directly to the HTML elements.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"rounded-sm p-4\">\n  <div class=\"text-lg\">Title</div>\n  <div class=\"mt-1\">Title</div>\n  <div class=\"flex items-center justify-between\">\n    <div class=\"text-sm\">15/05/2025</div>\n\n    <div class=\"flex gap-4\">\n      <button>Edit</button>\n      <button>Delete</button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML List with Partial Delegated Tailwind Classes\nDESCRIPTION: This example shows an HTML unordered list where only some of the common Tailwind CSS classes have been moved to the parent `<ul>` element. The classes that cannot be delegated (whitespace and padding) are still repeated on the `<li>` elements.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"text-sm font-medium\">\n  <li class=\"whitespace-nowrap p-4\">...</li>\n  <li class=\"whitespace-nowrap p-4\">...</li>\n  <li class=\"whitespace-nowrap bg-gray-100 p-4\">...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: CSS Equivalent of Tailwind JIT Selector\nDESCRIPTION: This CSS snippet illustrates the equivalent CSS selector used by the Tailwind CSS JIT example to select all first-level children of an element.  This helps understand the underlying CSS being generated.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n& > * {\n  //\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting CSS Class Names onto Multiple Lines\nDESCRIPTION: This snippet shows how to improve the readability of Tailwind CSS in CSS files by splitting class names onto multiple lines with comments indicating the purpose of each section (e.g., layout, spacing/sizing, style, transition, interaction).\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-write-better-tailwindcss.mdx#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n.button {\n  @apply inline-flex items-center rounded-sm border px-5 py-3 text-sm transition hover:scale-105;\n}\n```\n\nLANGUAGE: CSS\nCODE:\n```\n.button {\n  @apply inline-flex items-center; // Layout\n  @apply px-5 py-3 text-sm; // Spacing/Sizing\n  @apply rounded-sm border; // Style\n  @apply transition; // Transition\n  @apply hover:scale-105; // Interaction\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up HyperUI Locally\nDESCRIPTION: Instructions for setting up the HyperUI project locally using Git and Yarn. This involves cloning the repository, installing dependencies, running the development server, and watching CSS files.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-contribute.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:markmead/hyperui.git\nyarn install\nyarn dev\nyarn css --watch\n```\n\n----------------------------------------\n\nTITLE: Disabling Tailwind CSS Normalize\nDESCRIPTION: This code snippet shows how to disable Tailwind CSS normalize by commenting out the `@tailwind base;` directive. This is useful when transitioning from Bootstrap to Tailwind CSS and wanting to maintain Bootstrap's styling during the transition. By commenting out `@tailwind base;`, the Tailwind CSS normalize styles are not applied.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/move-to-tailwindcss-without-breaking-changes.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* @tailwind base; */\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: CSS Rule for List Items\nDESCRIPTION: This CSS snippet shows the equivalent CSS rule using the `ul > li` selector to target list items and apply styles. It mirrors the functionality achieved with the Tailwind CSS JIT arbitrary variant selector.\nSOURCE: https://github.com/markmead/hyperui/blob/main/src/data/posts/how-to-clean-up-tailwindcss-code.mdx#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nul > li {\n  //\n}\n```"
  }
]