[
  {
    "owner": "replicate",
    "repo": "replicate-javascript",
    "content": "TITLE: Instantiating Replicate Client\nDESCRIPTION: Shows how to create a new instance of the Replicate client with API token authentication.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst replicate = new Replicate({\n  // get your token from https://replicate.com/account/api-tokens\n  auth: \"my api token\", // defaults to process.env.REPLICATE_API_TOKEN\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Replicate Client in JavaScript\nDESCRIPTION: Creates a new instance of the Replicate client with configuration options. Requires an API access token and allows customization of user agent, base URL, fetch function, file encoding strategy, and output handling.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst replicate = new Replicate(options);\n```\n\n----------------------------------------\n\nTITLE: Generating an Image with Stability AI SDXL\nDESCRIPTION: Example of running the Stability AI SDXL model to generate an image based on a text prompt. Demonstrates basic usage of the run method with a specific model identifier and input parameters.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = \"stability-ai/sdxl:8beff3369e81422112d93b89ca01426147de542cd4684c244b673b105188fe5f\";\nconst input = { prompt: \"a 19th century portrait of a raccoon gentleman wearing a suit\" };\nconst output = await replicate.run(model, { input });\n```\n\n----------------------------------------\n\nTITLE: Running AI Models with Replicate\nDESCRIPTION: Executes a model and awaits the result. Takes a model identifier, input options, and optional progress callback. Returns the model's output directly rather than the entire prediction object.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await replicate.run(identifier, options, progress);\n```\n\n----------------------------------------\n\nTITLE: Running a Model and Awaiting Results\nDESCRIPTION: Example of running a Stable Diffusion model synchronously and handling the output which is a file.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = \"stability-ai/stable-diffusion:27b93a2413e7f36cd83da926f3656280b2931564ff050bf9575f1fdf9bcd7478\";\nconst input = {\n  prompt: \"a 19th century portrait of a raccoon gentleman wearing a suit\",\n};\nconst [output] = await replicate.run(model, { input });\n// FileOutput('https://replicate.delivery/pbxt/GtQb3Sgve42ZZyVnt8xjquFk9EX5LP0fF68NTIWlgBMUpguQA/out-0.png')\n\nconsole.log(output.url()); // 'https://replicate.delivery/pbxt/GtQb3Sgve42ZZyVnt8xjquFk9EX5LP0fF68NTIWlgBMUpguQA/out-0.png'\nconsole.log(output.blob()); // Blob\n```\n\n----------------------------------------\n\nTITLE: Installing Replicate Node.js Client via NPM\nDESCRIPTION: Command for installing the Replicate client library from npm package repository.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install replicate\n```\n\n----------------------------------------\n\nTITLE: Creating Predictions with Replicate API\nDESCRIPTION: Creates a new prediction using the Replicate API with specified options including model inputs, version, and webhook configurations.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.predictions.create(options);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ufawqhfynnddngldkgtslldrkq\",\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"status\": \"succeeded\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"output\": null,\n  \"error\": null,\n  \"logs\": null,\n  \"metrics\": {},\n  \"created_at\": \"2022-04-26T22:13:06.224088Z\",\n  \"started_at\": null,\n  \"completed_at\": null,\n  \"urls\": {\n    \"get\": \"https://api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq\",\n    \"cancel\": \"https://api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq/cancel\",\n    \"stream\": \"https://streaming.api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming AI Model Output with Replicate\nDESCRIPTION: Uses the stream method to generate and handle streaming output from an AI model. Returns an AsyncGenerator that yields server-sent events containing model outputs as they become available.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const event of replicate.stream(identifier, options)) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Generation with Llama 2\nDESCRIPTION: Example of streaming text generation from Meta's Llama 2 model. Collects output tokens as they are generated and combines them into the final result after completion.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = \"meta/llama-2-70b-chat\";\nconst options = {\n  input: {\n    prompt: \"Write a poem about machine learning in the style of Mary Oliver.\",\n  },\n  // webhook: \"https://smee.io/dMUlmOMkzeyRGjW\" // optional\n};\nconst output = [];\n\nfor await (const { event, data } of replicate.stream(model, options)) {\n  if (event === \"output\") {\n    output.push(data);\n  }\n}\n\nconsole.log(output.join(\"\").trim());\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Prediction to Complete\nDESCRIPTION: Demonstrates how to wait for a background prediction to finish and access its output.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nprediction = await replicate.wait(prediction);\nconsole.log(prediction.output);\n// ['https://replicate.delivery/pbxt/RoaxeXqhL0xaYyLm6w3bpGwF5RaNBjADukfFnMbhOyeoWBdhA/out-0.png']\n```\n\n----------------------------------------\n\nTITLE: Fetching a Prediction Result\nDESCRIPTION: Shows how to retrieve a previously created prediction using its ID.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprediction = await replicate.predictions.get(prediction.id);\n```\n\n----------------------------------------\n\nTITLE: Getting Prediction Status\nDESCRIPTION: Retrieves the current status and details of a specific prediction using its ID.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.predictions.get(prediction_id);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ufawqhfynnddngldkgtslldrkq\",\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"urls\": {\n    \"get\": \"https://api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq\",\n    \"cancel\": \"https://api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq/cancel\"\n  },\n  \"status\": \"starting\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"output\": null,\n  \"error\": null,\n  \"logs\": null,\n  \"metrics\": {},\n  \"created_at\": \"2022-04-26T22:13:06.224088Z\",\n  \"started_at\": null,\n  \"completed_at\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Prediction Results\nDESCRIPTION: Implements server-sent events (SSE) streaming for receiving real-time prediction outputs using EventSource.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nif (prediction && prediction.urls && prediction.urls.stream) {\n  const source = new EventSource(prediction.urls.stream, { withCredentials: true });\n\n  source.addEventListener(\"output\", (e) => {\n    console.log(\"output\", e.data);\n  });\n\n  source.addEventListener(\"error\", (e) => {\n    console.error(\"error\", JSON.parse(e.data));\n  });\n\n  source.addEventListener(\"done\", (e) => {\n    source.close();\n    console.log(\"done\", JSON.parse(e.data));\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Model Execution Progress\nDESCRIPTION: Runs a Stability AI SDXL model with a progress callback function to monitor execution. The callback logs the latest log line from the prediction as it's updated during model execution.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = \"stability-ai/sdxl:8beff3369e81422112d93b89ca01426147de542cd4684c244b673b105188fe5f\";\nconst input = { prompt: \"a 19th century portrait of a raccoon gentleman wearing a suit\" };\nconst onProgress = (prediction) => {\n   const last_log_line = prediction.logs.split(\"\\n\").pop()\n   console.log({id: prediction.id, log: last_log_line})\n}\nconst output = await replicate.run(model, { input }, onProgress)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Replicate with JavaScript Client\nDESCRIPTION: Creates a new file on Replicate by uploading content from Blob, File, or Buffer with optional metadata. Returns file information including ID, checksums, and access URLs. Files expire after 24 hours.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.files.create(file, metadata);\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"MTQzODcyMDct0YjZkLWE1ZGYtMmRjZTViNWIwOGEyNjNhNS0\",\n    \"name\": \"photo.webp\",\n    \"content_type\": \"image/webp\",\n    \"size\": 96936,\n    \"etag\": \"f211779ff7502705bbf42e9874a17ab3\",\n    \"checksums\": {\n        \"sha256\": \"7282eb6991fa4f38d80c312dc207d938c156d714c94681623aedac846488e7d3\",\n        \"md5\": \"f211779ff7502705bbf42e9874a17ab3\"\n    },\n    \"metadata\": {\n        \"customer_reference_id\": \"123\"\n    },\n    \"created_at\": \"2024-06-28T10:16:04.062Z\",\n    \"expires_at\": \"2024-06-29T10:16:04.062Z\",\n    \"urls\": {\n        \"get\": \"https://api.replicate.com/v1/files/MTQzODcyMDct0YjZkLWE1ZGYtMmRjZTViNWIwOGEyNjNhNS0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Progress Callback\nDESCRIPTION: Example using TypeScript with a custom onProgress callback function for tracking model execution progress.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Replicate, { type Prediction } from 'replicate';\n\nconst replicate = new Replicate();\nconst model = \"black-forest-labs/flux-schnell\";\nconst prompt = \"a 19th century portrait of a raccoon gentleman wearing a suit\";\nfunction onProgress(prediction: Prediction) {\n  console.log({ prediction });\n}\n\nconst output = await replicate.run(model, { input: { prompt } }, onProgress)\nconsole.log({ output })\n```\n\n----------------------------------------\n\nTITLE: Running a Model with Local File Input\nDESCRIPTION: Example of running a model that takes a local file as input by reading it and passing the file data.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"node:fs/promises\");\n\n// Or when using ESM.\n// import fs from \"node:fs/promises\";\n\nconst model = \"nightmareai/real-esrgan:42fed1c4974146d4d2414e2be2c5277c7fcf05fcc3a73abf41610695738c1d7b\";\nconst input = {\n  image: await fs.readFile(\"path/to/image.png\"),\n};\nconst [output] = await replicate.run(model, { input });\n// FileOutput('https://replicate.delivery/mgxm/e7b0e122-9daa-410e-8cde-006c7308ff4d/output.png')\n```\n\n----------------------------------------\n\nTITLE: Creating Predictions with Custom Deployment in Replicate JavaScript SDK\nDESCRIPTION: This snippet shows how to run a model using a custom deployment with the Replicate JavaScript SDK. It requires the deployment owner, name, and options including input data and optional webhook configuration.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.deployments.predictions.create(deployment_owner, deployment_name, options);\n```\n\n----------------------------------------\n\nTITLE: Creating a Background Prediction\nDESCRIPTION: Demonstrates how to run a model asynchronously in the background without waiting for the result.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet prediction = await replicate.predictions.create({\n  version: \"27b93a2413e7f36cd83da926f3656280b2931564ff050bf9575f1fdf9bcd7478\",\n  input: {\n    prompt: \"painting of a cat by andy warhol\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling Running Predictions\nDESCRIPTION: Cancels an ongoing prediction before completion using its prediction ID.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.predictions.cancel(prediction_id);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ufawqhfynnddngldkgtslldrkq\",\n  \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"urls\": {\n    \"get\": \"https://api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq\",\n    \"cancel\": \"https://api.replicate.com/v1/predictions/ufawqhfynnddngldkgtslldrkq/cancel\"\n  },\n  \"status\": \"canceled\",\n  \"input\": {\n    \"text\": \"Alice\"\n  },\n  \"output\": null,\n  \"error\": null,\n  \"logs\": null,\n  \"metrics\": {},\n  \"created_at\": \"2022-04-26T22:13:06.224088Z\",\n  \"started_at\": \"2022-04-26T22:13:06.224088Z\",\n  \"completed_at\": \"2022-04-26T22:13:06.224088Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Working with FileOutput in Replicate JavaScript Client\nDESCRIPTION: Demonstrates how to use the FileOutput class to access model file outputs as streams. Supports writing to disk, streaming to browser, accessing as URL, or reading in chunks.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nconst [output] = await replicate.run(\"black-forest-labs/flux-schnell\", { \n  input: { prompt: \"astronaut riding a rocket like a horse\" }\n});\n\n// To access the file URL:\nconsole.log(output.url()); //=> \"http://example.com\"\n\n// To write the file to disk:\nfs.writeFile(\"my-image.png\", output);\n\n// To stream the file back to a browser:\nreturn new Response(output);\n\n// To read the file in chunks:\nfor await (const chunk of output) {\n  console.log(chunk); // UInt8Array\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Prediction with Webhook Integration\nDESCRIPTION: Shows how to create a prediction that sends events to a webhook URL when status changes occur.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Replicate = require(\"replicate\");\nconst replicate = new Replicate();\n\nconst input = {\n    image: \"https://replicate.delivery/pbxt/KWDkejqLfER3jrroDTUsSvBWFaHtapPxfg4xxZIqYmfh3zXm/Screenshot%202024-02-28%20at%2022.14.00.png\",\n    denoising_strength: 0.5,\n    instant_id_strength: 0.8\n};\n\nconst callbackURL = `https://my.app/webhooks/replicate`;\nawait replicate.predictions.create({\n  version: \"19deaef633fd44776c82edf39fd60e95a7250b8ececf11a725229dc75a81f9ca\",\n  input: input,\n  webhook: callbackURL,\n  webhook_events_filter: [\"completed\"],\n});\n\n// The server will now handle the event and log:\n// => {\"id\": \"xyz\", \"status\": \"successful\", ... }\n```\n\n----------------------------------------\n\nTITLE: Creating Training Jobs\nDESCRIPTION: Initiates a fine-tuning job for supported language models with specified training parameters and webhook configurations.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.trainings.create(model_owner, model_name, version_id, options);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"zz4ibbonubfz7carwiefibzgga\",\n  \"version\": \"3ae0799123a1fe11f8c89fd99632f843fc5f7a761630160521c4253149754523\",\n  \"status\": \"starting\",\n  \"input\": {\n    \"text\": \"...\"\n  },\n  \"output\": null,\n  \"error\": null,\n  \"logs\": null,\n  \"started_at\": null,\n  \"created_at\": \"2023-03-28T21:47:58.566434Z\",\n  \"completed_at\": null\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with Type Imports\nDESCRIPTION: Shows how to import and use TypeScript types from the Replicate library.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Replicate, { type Prediction } from 'replicate';\n```\n\n----------------------------------------\n\nTITLE: Get Model Metadata - JavaScript\nDESCRIPTION: Retrieves metadata for a public or private model using the model owner and name.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.models.get(model_owner, model_name);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://replicate.com/replicate/hello-world\",\n  \"owner\": \"replicate\",\n  \"name\": \"hello-world\",\n  \"description\": \"A tiny model that says hello\",\n  \"visibility\": \"public\",\n  \"github_url\": \"https://github.com/replicate/cog-examples\",\n  \"paper_url\": null,\n  \"license_url\": null,\n  \"latest_version\": {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Deployment with Replicate JavaScript SDK\nDESCRIPTION: This snippet shows how to create a new deployment using the Replicate JavaScript SDK. It requires options including the deployment name, model, version, hardware, and instance configuration.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.deployments.create(options);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"owner\": \"acme\",\n  \"name\": \"my-app-image-generator\",\n  \"current_release\": {\n    \"number\": 1,\n    \"model\": \"stability-ai/sdxl\",\n    \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",\n    \"created_at\": \"2024-03-14T11:43:32.049157Z\",\n    \"created_by\": {\n       \"type\": \"organization\",\n       \"username\": \"acme\",\n       \"name\": \"Acme, Inc.\",\n       \"github_url\": \"https://github.com/replicate\"\n    },\n    \"configuration\": {\n      \"hardware\": \"gpu-a100\",\n      \"min_instances\": 1,\n      \"max_instances\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Metadata from Replicate\nDESCRIPTION: Gets metadata for a specific file on Replicate using its file ID.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.files.get(file_id);\n```\n\n----------------------------------------\n\nTITLE: Listing Uploaded Files in Replicate\nDESCRIPTION: Retrieves a list of all files that have been uploaded to Replicate by the authenticated user.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.files.list();\n```\n\n----------------------------------------\n\nTITLE: Configuring Replicate Client to Disable Next.js Caching\nDESCRIPTION: Demonstrates how to fix predictions hanging in Next.js by configuring the Replicate client to disable automatic response caching in the App Router.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nreplicate = new Replicate({/*...*/})\nreplicate.fetch = (url, options) => {\n  return fetch(url, { ...options, cache: \"no-store\" });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Webhook Server with Hono\nDESCRIPTION: Example of creating a simple webhook server using the Hono framework to receive prediction status updates from Replicate.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serve } from '@hono/node-server';\nimport { Hono } from 'hono';\n\nconst app = new Hono();\napp.get('/webhooks/replicate', async (c) => {\n  // Get the prediction from the request.\n  const prediction = await c.req.json();\n  console.log(prediction);\n  //=> {\"id\": \"xyz\", \"status\": \"successful\", ... }\n\n  // Acknowledge the webhook.\n  c.status(200);\n  c.json({ok: true});\n}));\n\nserve(app, (info) => {\n  console.log(`Listening on http://localhost:${info.port}`)\n  //=> Listening on http://localhost:3000\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Training Metadata with Replicate JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to get metadata and status of a training using the Replicate JavaScript SDK. It requires a training ID as input and returns detailed information about the training job.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.trainings.get(training_id);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"zz4ibbonubfz7carwiefibzgga\",\n  \"version\": \"3ae0799123a1fe11f8c89fd99632f843fc5f7a761630160521c4253149754523\",\n  \"status\": \"succeeded\",\n  \"input\": {\n    \"data\": \"...\"\n    \"param1\": \"...\"\n  },\n  \"output\": {\n    \"version\": \"...\"\n  },\n  \"error\": null,\n  \"logs\": null,\n  \"webhook_completed\": null,\n  \"started_at\": \"2023-03-28T21:48:02.402755Z\",\n  \"created_at\": \"2023-03-28T21:47:58.566434Z\",\n  \"completed_at\": \"2023-03-28T02:49:48.492023Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Webhooks in Next.js\nDESCRIPTION: Example of validating webhook signatures in a Next.js route handler to ensure they come from Replicate.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from 'next/server';\nimport { validateWebhook } from 'replicate';\n\nexport async function POST(request) {\n  const secret = process.env.REPLICATE_WEBHOOK_SIGNING_SECRET;\n\n  if (!secret) {\n    console.log(\"Skipping webhook validation. To validate webhooks, set REPLICATE_WEBHOOK_SIGNING_SECRET\")\n    const body = await request.json();\n    console.log(body);\n    return NextResponse.json({ detail: \"Webhook received (but not validated)\" }, { status: 200 });\n  }\n\n  const webhookIsValid = await validateWebhook(request.clone(), secret);\n\n  if (!webhookIsValid) {\n    return NextResponse.json({ detail: \"Webhook is invalid\" }, { status: 401 });\n  }\n\n  // process validated webhook here...\n  console.log(\"Webhook is valid!\");\n  const body = await request.json();\n  console.log(body);\n\n  return NextResponse.json({ detail: \"Webhook is valid\" }, { status: 200 });\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Validation with Node.js Crypto Module\nDESCRIPTION: Example of validating webhooks in Node.js by manually providing the webcrypto module for environments where it's not globally available.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require(\"node:crypto\").webcrypto;\nconst webhookIsValid = await valdiateWebhook(requestData, crypto);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fetch with Cross-fetch in Node.js\nDESCRIPTION: Sets up the Replicate client with a custom fetch implementation from the cross-fetch package. Useful for Node.js versions before 18 or environments without native fetch support.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst Replicate = require(\"replicate\");\nconst fetch = require(\"fetch\");\n\n// Using ESM:\n// import Replicate from \"replicate\";\n// import fetch from \"cross-fetch\";\n\nconst replicate = new Replicate({ fetch });\n```\n\n----------------------------------------\n\nTITLE: Listing Deployments with Replicate JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to list your deployments using the Replicate JavaScript SDK. It takes no arguments and returns a list of deployment information including owner, name, and current release details.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.deployments.list();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"acme\",\n      \"name\": \"my-app-image-generator\",\n      \"current_release\": { /* ... */ }\n    }\n    /* ... */\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating through Replicate API Results\nDESCRIPTION: Uses an async generator function to iterate over paginated API results from Replicate. Supports both for-await loops and manual iteration through pages.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// iterate over paginated results in a for loop\nfor await (const page of replicate.paginate(replicate.predictions.list)) {\n  /* do something with page of results */\n}\n\n// iterate over paginated results one at a time\nlet paginator = replicate.paginate(replicate.predictions.list);\nconst page1 = await paginator.next();\nconst page2 = await paginator.next();\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Making Low-Level API Requests to Replicate\nDESCRIPTION: Sends a custom request to Replicate's API with specified route, parameters, and options. Supports AbortSignal for request cancellation.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.request(route, parameters);\n```\n\n----------------------------------------\n\nTITLE: List Public Models - JavaScript\nDESCRIPTION: Retrieves a paginated list of all public models available on Replicate.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.models.list();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"url\": \"https://replicate.com/replicate/hello-world\",\n      \"owner\": \"replicate\",\n      \"name\": \"hello-world\",\n      \"description\": \"A tiny model that says hello\",\n      \"visibility\": \"public\",\n      \"github_url\": \"https://github.com/replicate/cog-examples\",\n      \"paper_url\": null,\n      \"license_url\": null,\n      \"run_count\": 5681081,\n      \"cover_image_url\": \"...\",\n      \"default_example\": {\n        /* ... */\n      },\n      \"latest_version\": {\n        /* ... */\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Predictions\nDESCRIPTION: Retrieves a paginated list of all predictions created by the user.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.predictions.list();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"previous\": null,\n  \"next\": \"https://api.replicate.com/v1/predictions?cursor=cD0yMDIyLTAxLTIxKzIzJTNBMTglM0EyNC41MzAzNTclMkIwMCUzQTAw\",\n  \"results\": [\n    {\n      \"id\": \"jpzd7hm5gfcapbfyt4mqytarku\",\n      \"version\": \"b21cbe271e65c1718f2999b038c18b45e21e4fba961181fbfae9342fc53b9e05\",\n      \"urls\": {\n        \"get\": \"https://api.replicate.com/v1/predictions/jpzd7hm5gfcapbfyt4mqytarku\",\n        \"cancel\": \"https://api.replicate.com/v1/predictions/jpzd7hm5gfcapbfyt4mqytarku/cancel\"\n      },\n      \"source\": \"web\",\n      \"status\": \"succeeded\",\n      \"created_at\": \"2022-04-26T20:00:40.658234Z\",\n      \"started_at\": \"2022-04-26T20:00:84.583803Z\",\n      \"completed_at\": \"2022-04-26T20:02:27.648305Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files from Replicate\nDESCRIPTION: Deletes a file from Replicate before its automatic 24-hour expiration by specifying its file ID.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.files.delete(file_id);\n```\n\n----------------------------------------\n\nTITLE: Canceling a Training Job with Replicate JavaScript SDK\nDESCRIPTION: This snippet shows how to stop a running training job before it finishes using the Replicate JavaScript SDK. It requires a training ID as input and returns the updated status of the canceled training job.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.trainings.cancel(training_id);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"zz4ibbonubfz7carwiefibzgga\",\n  \"version\": \"3ae0799123a1fe11f8c89fd99632f843fc5f7a761630160521c4253149754523\",\n  \"status\": \"canceled\",\n  \"input\": {\n    \"data\": \"...\"\n    \"param1\": \"...\"\n  },\n  \"output\": {\n    \"version\": \"...\"\n  },\n  \"error\": null,\n  \"logs\": null,\n  \"webhook_completed\": null,\n  \"started_at\": \"2023-03-28T21:48:02.402755Z\",\n  \"created_at\": \"2023-03-28T21:47:58.566434Z\",\n  \"completed_at\": \"2023-03-28T02:49:48.492023Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Search Models - JavaScript\nDESCRIPTION: Searches for public models on Replicate using a query string.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.models.search(query);\n```\n\n----------------------------------------\n\nTITLE: Importing Replicate Client in JavaScript\nDESCRIPTION: Demonstrates how to import the Replicate client in both CommonJS and ESM module formats.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// CommonJS (default or using .cjs extension)\nconst Replicate = require(\"replicate\");\n\n// ESM (where `\"module\": true` in package.json or using .mjs extension)\nimport Replicate from \"replicate\";\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Replicate API Requests\nDESCRIPTION: Implements a custom fetch wrapper that adds headers to all API requests. Demonstrates how to extend the client's fetch functionality with custom behavior like logging or header injection.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst customFetch = (url, options) => {\n  const headers = options && options.headers ? { ...options.headers } : {};\n  headers[\"X-Custom-Header\"] = \"some value\";\n\n  console.log(\"fetch\", { url, ...options, headers });\n\n  return fetch(url, { ...options, headers });\n};\n\nconst replicate = new Replicate({ fetch: customFetch });\n```\n\n----------------------------------------\n\nTITLE: Manual Webhook Validation with Request Data\nDESCRIPTION: Example of manually validating webhook signatures when the environment doesn't support Request objects.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst requestData = {\n  id: \"123\",            // the `Webhook-Id` header\n  timestamp: \"0123456\", // the `Webhook-Timestamp` header\n  signature: \"xyz\",     // the `Webhook-Signature` header\n  body: \"{...}\",        // the request body as a string, ArrayBuffer or ReadableStream\n  secret: \"shhh\",       // the webhook secret, obtained from the `replicate.webhooks.defaul.secret` endpoint\n};\nconst webhookIsValid = await validateWebhook(requestData);\n```\n\n----------------------------------------\n\nTITLE: List Model Versions - JavaScript\nDESCRIPTION: Retrieves a list of all published versions for a specific model.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.models.versions.list(model_owner, model_name);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"previous\": null,\n  \"next\": null,\n  \"results\": [\n    {\n      \"id\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n      \"created_at\": \"2022-04-26T19:29:04.418669Z\",\n      \"cog_version\": \"0.3.0\",\n      \"openapi_schema\": {\n        /* ... */\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Model Version - JavaScript\nDESCRIPTION: Retrieves metadata for a specific version of a model.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.models.versions.get(model_owner, model_name, version_id);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",\n  \"created_at\": \"2022-04-26T19:29:04.418669Z\",\n  \"cog_version\": \"0.3.0\",\n  \"openapi_schema\": {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Deployment with Replicate JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to update an existing deployment using the Replicate JavaScript SDK. It requires the deployment owner, name, and options for updating various configuration parameters.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.deployments.update(deploymentOwner, deploymentName, options);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"owner\": \"acme\",\n  \"name\": \"my-app-image-generator\",\n  \"current_release\": {\n    \"number\": 2,\n    \"model\": \"stability-ai/sdxl\",\n    \"version\": \"39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b\",\n    \"created_at\": \"2024-03-14T11:43:32.049157Z\",\n    \"created_by\": {\n       \"type\": \"organization\",\n       \"username\": \"acme\",\n       \"name\": \"Acme, Inc.\",\n       \"github_url\": \"https://github.com/replicate\"\n    },\n    \"configuration\": {\n      \"hardware\": \"gpu-a100\",\n      \"min_instances\": 1,\n      \"max_instances\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Trainings with Replicate JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to get a paginated list of all the trainings you've run using the Replicate JavaScript SDK. It takes no arguments and returns a list of training metadata.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.trainings.list();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"previous\": null,\n  \"next\": \"https://api.replicate.com/v1/trainings?cursor=cD0yMDIyLTAxLTIxKzIzJTNBMTglM0EyNC41MzAzNTclMkIwMCUzQTAw\",\n  \"results\": [\n    {\n      \"id\": \"jpzd7hm5gfcapbfyt4mqytarku\",\n      \"version\": \"b21cbe271e65c1718f2999b038c18b45e21e4fba961181fbfae9342fc53b9e05\",\n      \"urls\": {\n        \"get\": \"https://api.replicate.com/v1/trainings/jpzd7hm5gfcapbfyt4mqytarku\",\n        \"cancel\": \"https://api.replicate.com/v1/trainings/jpzd7hm5gfcapbfyt4mqytarku/cancel\"\n      },\n      \"source\": \"web\",\n      \"status\": \"succeeded\",\n      \"created_at\": \"2022-04-26T20:00:40.658234Z\",\n      \"started_at\": \"2022-04-26T20:00:84.583803Z\",\n      \"completed_at\": \"2022-04-26T20:02:27.648305Z\"\n    }\n    /* ... */\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Collections - JavaScript\nDESCRIPTION: Retrieves information about curated model collections from Replicate.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.collections.get(collection_slug);\n```\n\n----------------------------------------\n\nTITLE: Create New Model - JavaScript\nDESCRIPTION: Creates a new public or private model with specified configuration options.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.models.create(model_owner, model_name, options);\n```\n\n----------------------------------------\n\nTITLE: List Hardware - JavaScript\nDESCRIPTION: Retrieves a list of available hardware options for running models on Replicate.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/README.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await replicate.hardware.list()\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"name\": \"CPU\", \"sku\": \"cpu\" },\n  {\"name\": \"Nvidia T4 GPU\", \"sku\": \"gpu-t4\" },\n  {\"name\": \"Nvidia A40 GPU\", \"sku\": \"gpu-a40-small\" },\n  {\"name\": \"Nvidia A40 (Large) GPU\", \"sku\": \"gpu-a40-large\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Commands for setting up the development environment and running tests. Requires Node.js version 18 or higher.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands\nDESCRIPTION: Steps to create a new release using np package. This process handles version bumping, testing, tagging, and publishing to npm.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd replicate-js\ngit checkout main\ngit pull\nnpx np minor\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Browser Integration Tests\nDESCRIPTION: Command to install the required npm dependencies for running the browser integration tests.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/integration/browser/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Across All Browsers\nDESCRIPTION: Command to run the integration tests across all supported browsers (Chromium, Firefox, and WebKit).\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/integration/browser/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Default Browser (Chromium)\nDESCRIPTION: Command to run the integration tests using Playwright on the default Chromium browser.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/integration/browser/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec playwright test\n```\n\n----------------------------------------\n\nTITLE: Running Tests on a Specific Browser\nDESCRIPTION: Command to run the integration tests on a specific browser, using Firefox as an example.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/integration/browser/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec playwright test --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Debugging Integration Tests with Playwright\nDESCRIPTION: Command to run the tests in debug mode, which opens a browser window with a debugging interface and sets a breakpoint at the start of the test.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/integration/browser/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec playwright test --debug\n```\n\n----------------------------------------\n\nTITLE: TextDecoderStream Constructor Patch\nDESCRIPTION: Required patch for the vendored TextDecoderStream implementation to handle label and options parameters correctly.\nSOURCE: https://github.com/replicate/replicate-javascript/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  constructor(label, options) {\n-   this[decDecoder] = new TextDecoder(label, options);\n-   this[decTransform] = new TransformStream(new TextDecodeTransformer(this[decDecoder]));\n+   const decoder = new TextDecoder(label || \"utf-8\", options || {});\n+   this[decDecoder] = decoder;\n+   this[decTransform] = new TransformStream(new TextDecodeTransformer(decoder));\n  }\n```"
  }
]