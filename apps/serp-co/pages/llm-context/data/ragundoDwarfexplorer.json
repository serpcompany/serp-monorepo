[
  {
    "owner": "ragundo",
    "repo": "dwarfexplorer",
    "content": "TITLE: Configuring DwarfExplorer Project with CMake\nDESCRIPTION: Sets up the DwarfExplorer project with C++11 standard and compiler definitions for Unix systems. Configures Qt resources, lists all source files including main app, models, UI components, and generated code. Also handles Qt-specific processing for MOC, UI files, and creates the DFHACK plugin target with proper linking.\nSOURCE: https://github.com/ragundo/dwarfexplorer/blob/master/dwarfexplorer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(dwarfexplorer LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\n\nif(UNIX)\nadd_definitions(\n    -Wfatal-errors\n    -Og\n    )\nendif()\n\nqt5_add_resources(RSCS\n    resources/resources.qrc\n    resources/styles/qdarkstyle/style.qrc\n)\n\nset(DWARFEXPLORER_SOURCES\n    main.cpp\n    node.cpp\n    EventProxy.cpp\n    MainWindow.cpp\n    dfstructure_window.cpp\n    hexviewer_window.cpp\n    QtModel/df_model.cpp\n    QtModel/df_model_data_from_structure.cpp\n    QtModel/df_model_data_from_type.cpp\n    QtModel/df_model_data_from_value.cpp\n    QtModel/df_model_vector.cpp\n    QtModel/df_model_array.cpp\n    QtModel/df_model_pointer.cpp\n    QtModel/df_model_util.cpp\n    QtModel/df_model_df_array.cpp\n    QtModel/df_proxy_model.cpp\n    generated/offsets_cache.cpp\n    generated/fill_nodes.cpp\n    generated/fill_offsets.cpp\n    generated/df_types_size.cpp\n    generated/enum_values.cpp\n    generated/bitfield_values.cpp\n    generated/df_2_rdf.cpp\n    generated/polymorphic_factory.cpp\n    generated/fill_globals.cpp\n    generated/enum_sizes.cpp\n    #generated/find_fields_names.cpp\n    QHexView/document/commands/hexcommand.cpp\n    QHexView/document/commands/insertcommand.cpp\n    QHexView/document/commands/removecommand.cpp\n    QHexView/document/commands/replacecommand.cpp\n    QHexView/document/buffer/qhexbuffer.cpp\n    QHexView/document/buffer/qmemoryrefbuffer.cpp\n    QHexView/document/buffer/qmemorybuffer.cpp\n    QHexView/document/qhexcursor.cpp\n    QHexView/document/qhexdocument.cpp\n    QHexView/document/qhexmetadata.cpp\n    QHexView/document/qhexrenderer.cpp\n    QHexView/qhexview.cpp\n    ${RSCS}\n)\n\nqt5_wrap_cpp(DWARFEXPLORER_MOC_SOURCES\n    EventProxy.h\n    MainWindow.h\n    df_model.h\n    QtModel/df_proxy_model.h\n    dfstructure_window.h\n    hexviewer_window.h\n    QHexView/document/commands/hexcommand.h\n    QHexView/document/commands/insertcommand.h\n    QHexView/document/commands/removecommand.h\n    QHexView/document/commands/replacecommand.h\n    QHexView/document/buffer/qhexbuffer.h\n    QHexView/document/buffer/qmemoryrefbuffer.h\n    QHexView/document/buffer/qmemorybuffer.h\n    QHexView/document/qhexcursor.h\n    QHexView/document/qhexdocument.h\n    QHexView/document/qhexmetadata.h\n    QHexView/document/qhexrenderer.h\n    QHexView/qhexview.h\n)\n\nqt5_wrap_ui(DWARFEXPLORER_UI_SOURCES\n    MainWindow.ui\n    dfstructure_window.ui\n)\n\n\n\nDFHACK_PLUGIN(dwarfexplorer\n    ${DWARFEXPLORER_SOURCES} ${DWARFEXPLORER_MOC_SOURCES} ${DWARFEXPLORER_UI_SOURCES} ${RSCS}\n    LINK_LIBRARIES Qt5::Core Qt5::Widgets)\ntarget_include_directories(dwarfexplorer PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack QApplication Plugin with Qt5 in CMake\nDESCRIPTION: This CMake configuration sets up a DFHack plugin called 'qapplication' that uses Qt5. It specifies C++ source files, processes Qt header files with MOC, processes UI files, and links against Qt5 Core and Widgets libraries along with dfhack-tinythread.\nSOURCE: https://github.com/ragundo/dwarfexplorer/blob/master/qapplication/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qapplication)\n\nset(QAPPLICATION_SOURCES\n\tmain.cpp\n\tApplication.cpp\n    Log.cpp\n    LogWindow.cpp\n)\n\nqt5_wrap_cpp(QAPPLICATION_MOC_SOURCES\n\tApplication.h\n    Log.h\n    LogWindow.h\n)\n\nqt5_wrap_ui(QAPPLICATION_UI_SOURCES\n    LogWindow.ui\n)\n\nDFHACK_PLUGIN(qapplication\n    ${QAPPLICATION_SOURCES} ${QAPPLICATION_MOC_SOURCES} ${QAPPLICATION_UI_SOURCES}\n    LINK_LIBRARIES Qt5::Core Qt5::Widgets dfhack-tinythread)\ntarget_include_directories(qapplication PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Dependencies and Project Structure with CMake\nDESCRIPTION: This CMake configuration finds the Qt5 Widgets package required by the project, sets up the include directories path, and adds the dfhack-qt and dwarfexplorer subdirectories to the build process.\nSOURCE: https://github.com/ragundo/dwarfexplorer/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Qt5 REQUIRED Widgets)\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n\nadd_subdirectory(dfhack-qt)\nadd_subdirectory(dwarfexplorer)\n```\n\n----------------------------------------\n\nTITLE: Installing Qt Dependencies on Ubuntu\nDESCRIPTION: Command to install required Qt5 libraries on Ubuntu Linux systems before installing the DwarfExplorer plugin.\nSOURCE: https://github.com/ragundo/dwarfexplorer/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install qt5-default\n```\n\n----------------------------------------\n\nTITLE: Enabling Qt Application Support in DFHack\nDESCRIPTION: DFHack console command to enable Qt application support required for running DwarfExplorer.\nSOURCE: https://github.com/ragundo/dwarfexplorer/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenable qapplication\n```\n\n----------------------------------------\n\nTITLE: Launching DwarfExplorer Plugin\nDESCRIPTION: DFHack console command to start the DwarfExplorer graphical interface after enabling Qt support.\nSOURCE: https://github.com/ragundo/dwarfexplorer/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndwarfexplorer\n```"
  }
]