[
  {
    "owner": "answerdotai",
    "repo": "fasthtml",
    "content": "TITLE: Creating Basic FastHTML Application\nDESCRIPTION: Minimal FastHTML application example showing how to create a simple web page with a 'Hello World' message and HTMX integration for dynamic updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/index.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp,rt = fast_app()\n\n@rt('/')\ndef get(): return Div(P('Hello World!'), hx_get=\"/change\")\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FastHTML Hello World Application\nDESCRIPTION: Initial setup code for a minimal FastHTML application that displays 'Hello, world!' on the root route. This demonstrates the basic structure of a FastHTML app.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML()\nrt = app.route\n\n@rt('/')\ndef get():\n    return 'Hello, world!'\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Implementing Login GET Handler in FastHTML\nDESCRIPTION: Creates a login form with username and password fields using FastHTML components. Returns a titled page when accessed directly, or HTML partials when accessed via HTMX.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/login\")\ndef get():\n    frm = Form(\n        Input(id='name', placeholder='Name'),\n        Input(id='pwd', type='password', placeholder='Password'),\n        Button('login'),\n        action='/login', method='post')\n    return Titled(\"Login\", frm)\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal FastHTML Application\nDESCRIPTION: A minimal FastHTML application that demonstrates the basic structure including imports, app initialization, route definition, and serving the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *  # <1>\n\napp, rt = fast_app()  # <2>\n\n@rt(\"/\")  # <3>\ndef get():  # <4>\n    return Titled(\"FastHTML\", P(\"Let's do this!\"))  # <5>\n\nserve()  # <6>\n```\n\n----------------------------------------\n\nTITLE: Basic FastHTML Application Example\nDESCRIPTION: A minimal FastHTML application that demonstrates the core framework concepts. Shows how to create routes, handle requests, and return HTML content. Serves as a basic \"Hello, World\" example.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_136\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import FastHTML, serve\n\napp = FastHTML()\n\n@app.get(\"/\")\ndef home():\n    return \"<h1>Hello, World</h1>\"\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Basic Routing in FastHTML\nDESCRIPTION: Demonstrates how to define multiple routes in a FastHTML application using the rt decorator, mapping different URLs to different handler functions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \n\napp, rt = fast_app()\n\n@rt(\"/\")  # <1>\ndef get():\n  return Titled(\"FastHTML\", P(\"Let's do this!\"))\n\n@rt(\"/hello\")  # <2>\ndef get():\n  return Titled(\"Hello, world!\")\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Using State in OAuth Flow with Hugging Face in Python\nDESCRIPTION: This snippet shows how to include a state parameter in the OAuth flow to preserve user context or prevent CSRF attacks. It demonstrates creating a login link with a state parameter and handling the state in the auth_redirect function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# in login page:\nlink = A('Login with GitHub', href=client.login_link(state='current_prompt: add a unicorn'))\n\n# in auth_redirect:\n@app.get('/auth_redirect')\ndef auth_redirect(code:str, session, state:str=None):\n    print(f\"state: {state}\") # Use as needed\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining the Index Route for FastHTML\nDESCRIPTION: Defines an index route that returns HTML elements using FastHTML's component syntax, including a button with HTMX attributes for client-side interactions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef index():\n    return Titled('Hello, Jupyter',\n           P('Welcome to the FastHTML + Jupyter example'),\n           Button('Click', hx_get='/click', hx_target='#dest'),\n           Div(id='dest')\n    )\n```\n\n----------------------------------------\n\nTITLE: Minimal FastHTML Application Setup\nDESCRIPTION: Demonstrates the minimal setup required for a FastHTML application including routing, type annotations, and FastTags usage\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\napp,rt = fast_app()\n\nname = str_enum('names', 'Alice', 'Bev', 'Charlie')\n\n@rt\ndef foo(nm: name):\n    return Title(\"FastHTML\"), H1(\"My web app\"), P(f\"Hello, {name}!\")\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal FastHTML Application\nDESCRIPTION: Demonstrates a minimal FastHTML app with route definition, type annotation, FastTags components, and automatic HTML rendering. Shows the basic patterns for creating and serving a simple web application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Meta-package with all key symbols from FastHTML and Starlette. Import it like this at the start of every FastHTML app.\nfrom fasthtml.common import *\n# The FastHTML app object and shortcut to `app.route`\napp,rt = fast_app()\n\n# Enums constrain the values accepted for a route parameter\nname = str_enum('names', 'Alice', 'Bev', 'Charlie')\n\n# Passing a path to `rt` is optional. If not passed (recommended), the function name is the route ('/foo')\n# Both GET and POST HTTP methods are handled by default\n# Type-annotated params are passed as query params (recommended) unless a path param is defined (which it isn't here)\n@rt\ndef foo(nm: name):\n    # `Title` and `P` here are FastTags: direct m-expression mappings of HTML tags to Python functions with positional and named parameters. All standard HTML tags are included in the common wildcard import.\n    # When a tuple is returned, this returns concatenated HTML partials. HTMX by default will use a title HTML partial to set the current page name. HEAD tags (e.g. Meta, Link, etc) in the returned tuple are automatically placed in HEAD; everything else is placed in BODY.\n    # FastHTML will automatically return a complete HTML document with appropriate headers if a normal HTTP request is received. For an HTMX request, however, just the partials are returned.\n    return Title(\"FastHTML\"), H1(\"My web app\"), P(f\"Hello, {name}!\")\n# By default `serve` runs uvicorn on port 5001. Never write `if __name__ == \"__main__\"` since `serve` checks it internally.\nserve()\n```\n\n----------------------------------------\n\nTITLE: Real-Time Chat App with FastHTML and WebSockets - Backend\nDESCRIPTION: The backend part of a real-time chat application built with FastHTML and WebSockets, handling connections, disconnections, and message broadcasting.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_264\n\nLANGUAGE: python\nCODE:\n```\nusers = {}\ndef on_conn(ws, send): users[str(id(ws))] = send\ndef on_disconn(ws): users.pop(str(id(ws)), None)\n\n@app.ws('/ws', conn=on_conn, disconn=on_disconn)\nasync def ws(msg:str):\n    msgs.append(msg)\n    # Use associated `send` function to send message to each user\n    for u in users.values(): await u(Ul(*[Li(m) for m in msgs], id='msg-list'))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with APIRouter in a Separate Module\nDESCRIPTION: This snippet demonstrates defining routes using APIRouter with a prefix in a separate module. The example creates product-related routes with a '/products' prefix, including a route for all products and a parameterized route for product details.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# products.py\nar = APIRouter(prefix=\"/products\")\n\n@ar(\"/all\")\ndef all_products(req):\n    return Div(\n        \"Welcome to the Products Page! Click the button below to look at the details for product 42\",\n        Div(\n            Button(\n                \"Details\",\n                hx_get=req.url_for(\"details\", pid=42),\n                hx_target=\"#products_list\",\n                hx_swap=\"outerHTML\",\n            ),\n        ),\n        id=\"products_list\",\n    )\n\n\n@ar.get(\"/{pid}\", name=\"details\")\ndef details(pid: int):\n    return f\"Here are the product details for ID: {pid}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal FastHTML Application\nDESCRIPTION: Basic FastHTML application setup with a simple route that returns a 'Hello World' message with HTMX functionality. This minimal example demonstrates how to create routes and render HTML elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp,rt = fast_app()\n\n@rt('/')\ndef get(): return Div(P('Hello World!'), hx_get=\"/change\")\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating Endpoint Wrapper for FastHTML\nDESCRIPTION: Method to create an endpoint wrapper for FastHTML routes. It handles request processing, middleware execution, and response generation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef _endp(self:FastHTML, f, body_wrap):\n    sig = signature_ex(f, True)\n    async def _f(req):\n        resp = None\n        req.injects = []\n        req.hdrs,req.ftrs,req.htmlkw,req.bodykw = map(deepcopy, (self.hdrs,self.ftrs,self.htmlkw,self.bodykw))\n        req.hdrs,req.ftrs = listify(req.hdrs),listify(req.ftrs)\n        for b in self.before:\n            if not resp:\n                if isinstance(b, Beforeware): bf,skip = b.f,b.skip\n                else: bf,skip = b,[]\n                if not any(re.fullmatch(r, req.url.path) for r in skip):\n                    resp = await _wrap_call(bf, req, _params(bf))\n        req.body_wrap = body_wrap\n        if not resp: resp = await _wrap_call(f, req, sig.parameters)\n        for a in self.after:\n            _,*wreq = await _wrap_req(req, _params(a))\n            nr = a(resp, *wreq)\n            if nr: resp = nr\n        return _resp(req, resp, sig.return_annotation)\n    return _f\n```\n\n----------------------------------------\n\nTITLE: Client-Side WebSocket Setup with HTMX in FastHTML\nDESCRIPTION: Shows how to set up a client-side WebSocket connection using HTMX's WebSocket extension in FastHTML, including a form that sends messages via WebSocket.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_260\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\n\n@app.get('/')\ndef home():\n    cts = Div(\n        Div(id='notifications'),\n        Form(Input(id='msg'), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n```\n\n----------------------------------------\n\nTITLE: Building a Todo List Application with FastHTML\nDESCRIPTION: Complete CRUD application demonstrating FastHTML patterns with SQLite database integration, authentication, and markdown support.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom hmac import compare_digest\n\ndb = database('data/utodos.db')\ntodos,users = db.t.todos,db.t.users\nif todos not in db.t:\n    users.create(dict(name=str, pwd=str), pk='name')\n    todos.create(id=int, title=str, done=bool, name=str, details=str, priority=int, pk='id')\nTodo,User = todos.dataclass(),users.dataclass()\n\nlogin_redir = RedirectResponse('/login', status_code=303)\n\ndef before(req, sess):\n    auth = req.scope['auth'] = sess.get('auth', None)\n    if not auth: return login_redir\n    todos.xtra(name=auth)\n\nmarkdown_js = \"\"\"\nimport { marked } from \"https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js\";\nproc_htmx('.markdown', e => e.innerHTML = marked.parse(e.textContent));\n\"\"\"\n\ndef _not_found(req, exc): return Titled('Oh no!', Div('We could not find that page :(')\n\nbware = Beforeware(before, skip=[r'/favicon\\.ico', r'/static/.*', r'.*\\.css', '/login'])\napp = FastHTML(before=bware,\n               exception_handlers={404: _not_found},\n               hdrs=(picolink,\n                     Style(':root { --pico-font-size: 100%; }'),\n                     SortableJS('.sortable'),\n                     Script(markdown_js, type='module')))\nrt = app.route\n```\n\n----------------------------------------\n\nTITLE: Building an Image Generation App Homepage with FastHTML and HTMX in Python\nDESCRIPTION: This snippet demonstrates the creation of a homepage for an image generation app using FastHTML and HTMX. It includes a form for submitting prompts and a container for displaying generated images.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_153\n\nLANGUAGE: python\nCODE:\n```\n# Main page\n@app.get(\"/\")\ndef get():\n    inp = Input(id=\"new-prompt\", name=\"prompt\", placeholder=\"Enter a prompt\")\n    add = Form(Group(inp, Button(\"Generate\")), hx_post=\"/\", target_id='gen-list', hx_swap=\"afterbegin\")\n    gen_list = Div(id='gen-list')\n    return Title('Image Generation Demo'), Main(H1('Magic Image Generation'), add, gen_list, cls='container')\n```\n\n----------------------------------------\n\nTITLE: Handling JSON POST Requests in FastHTML\nDESCRIPTION: Demonstrates creating a FastHTML route that accepts JSON data in the request body and returning it. The code includes both the server-side endpoint implementation and a client test that sends JSON data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/bodytext\")\ndef index(body): return body\n\nresponse = cli.post('/bodytext', headers={\"Content-Type\": \"application/json\"}, data=s).text\ntest_eq(response, '{\"b\": \"Lorem\", \"a\": 15}')\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Events (SSE) in FastHTML\nDESCRIPTION: Demonstrates how to set up and use Server-Side Events (SSE) in FastHTML with the HTMX SSE extension. Includes an example of a number generator that sends data to the client.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport random\nhdrs=(Script(src=\"https://unpkg.com/htmx-ext-sse@2.2.3/sse.js\"),)\napp,rt = fast_app(hdrs=hdrs)\n\n@rt\ndef index(): return Div(hx_ext=\"sse\", sse_connect=\"/numstream\", hx_swap=\"beforeend show:bottom\", sse_swap=\"message\")\n\n# `signal_shutdown()` gets an event that is set on shutdown\nshutdown_event = signal_shutdown()\n\nasync def number_generator():\n    while not shutdown_event.is_set():\n        data = Article(random.randint(1, 100))\n        yield sse_message(data)\n\n@rt\nasync def numstream(): return EventStream(number_generator())\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript in FastHTML Applications\nDESCRIPTION: Shows how to include external JavaScript libraries and inline JavaScript code in a FastHTML application, including passing data from Python to JavaScript.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# In future snippets this import will not be shown, but is required\nfrom fasthtml.common import * \napp,rt = fast_app(hdrs=[Script(src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\")])\n# `index` is a special function name which maps to the `/` route. \n@rt\ndef index():\n    data = {'somedata':'fill me in…'}\n    # `Titled` returns a title tag and an h1 tag with the 1st param, with remaining params as children in a `Main` parent.\n    return Titled(\"Chart Demo\", Div(id=\"myDiv\"), Script(f\"var data = {data}; Plotly.newPlot('myDiv', data);\"))\n# In future snippets `serve() will not be shown, but is required\nserve()\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Class with Configuration Options\nDESCRIPTION: Constructor for the FastHTML class, setting up various configuration options including headers, middleware, session handling, and exception handlers. It extends the Starlette framework with additional functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nhtmlkw = htmlkw or {}\nif default_hdrs: hdrs = def_hdrs(htmx, surreal=surreal) + hdrs\nhdrs += [Script(src=ext) for ext in exts.values()]\nif IN_NOTEBOOK:\n    hdrs.append(iframe_scr)\n    from IPython.display import display,HTML\n    if nb_hdrs: display(HTML(to_xml(tuple(hdrs))))\n    middleware.append(cors_allow)\non_startup,on_shutdown = listify(on_startup) or None,listify(on_shutdown) or None\nself.lifespan,self.hdrs,self.ftrs = lifespan,hdrs,ftrs\nself.body_wrap,self.before,self.after,self.htmlkw,self.bodykw = body_wrap,before,after,htmlkw,bodykw\nsecret_key = get_key(secret_key, key_fname)\nif sess_cls:\n    sess = Middleware(sess_cls, secret_key=secret_key,session_cookie=session_cookie,\n                      max_age=max_age, path=sess_path, same_site=same_site,\n                      https_only=sess_https_only, domain=sess_domain)\n    middleware.append(sess)\nexception_handlers = ifnone(exception_handlers, {})\nif 404 not in exception_handlers:\n    def _not_found(req, exc): return  Response('404 Not Found', status_code=404)\n    exception_handlers[404] = _not_found\nexcs = {k:_wrap_ex(v, k, hdrs, ftrs, htmlkw, bodykw, body_wrap=body_wrap) for k,v in exception_handlers.items()}\nsuper().__init__(debug, routes, middleware=middleware, exception_handlers=excs, on_startup=on_startup, on_shutdown=on_shutdown, lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Core Functionality in fasthtml.core\nDESCRIPTION: Core functionality of FastHTML, including the FastHTML class, routing mechanisms, HTTP utilities, and middleware handling. This is the central component of the FastHTML framework.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef parsed_date(s)\n    # Convert `s` to a datetime\n\ndef snake2hyphens(s)\n    # Convert `s` from snake case to hyphenated and capitalised\n\n@dataclass class HtmxHeaders:\n    def __bool__(self)\n    def __init__(self, boosted, current_url, history_restore_request, prompt, request, target, trigger_name, trigger)\n\n@dataclass class HttpHeader:\n    def __init__(self, k, v)\n\n@use_kwargs_dict(**htmx_resps) def HtmxResponseHeaders(**kwargs)\n    # HTMX response headers\n\ndef form2dict(form)\n    # Convert starlette form data to a dict\n\ndef parse_form(req)\n    # Starlette errors on empty multipart forms, so this checks for that situation\n\ndef flat_xt(lst)\n    # Flatten lists\n\nclass Beforeware:\n    def __init__(self, f, skip)\n\ndef EventStream(s)\n    # Create a text/event-stream response from `s`\n\ndef flat_tuple(o)\n    # Flatten lists\n\ndef noop_body(c, req)\n    # Default Body wrap function which just returns the content\n\ndef respond(req, heads, bdy)\n    # Default FT response creation function\n\nclass Redirect:\n    # Use HTMX or Starlette RedirectResponse as required to redirect to `loc`\n    def __init__(self, loc)\n    def __response__(self, req)\n\ndef qp(p, **kw)\n    # Add parameters kw to path p\n\ndef def_hdrs(htmx, surreal)\n    # Default headers for a FastHTML app\n\nclass FastHTML:\n    def __init__(self, debug, routes, middleware, title, exception_handlers, on_startup, on_shutdown, lifespan, hdrs, ftrs, exts, before, after, surreal, htmx, default_hdrs, sess_cls, secret_key, session_cookie, max_age, sess_path, same_site, sess_https_only, sess_domain, key_fname, body_wrap, htmlkw, nb_hdrs, **bodykw)\n    def add_route(self, route)\n\n@patch def ws(self, path, conn, disconn, name, middleware)\n    # Add a websocket route at `path`\n\ndef nested_name(f)\n    # Get name of function `f` using '_' to join nested function names\n\n@patch def route(self, path, methods, name, include_in_schema, body_wrap)\n    # Add a route at `path`\n\ndef serve(appname, app, host, port, reload, reload_includes, reload_excludes)\n    # Run the app in an async server, with live reload set as the default.\n\nclass Client:\n    # A simple httpx ASGI client that doesn't require `async`\n    def __init__(self, app, url)\n\nclass RouteFuncs:\n    def __init__(self)\n    def __setattr__(self, name, value)\n    def __getattr__(self, name)\n    def __dir__(self)\n\nclass APIRouter:\n    # Add routes to an app\n    def __init__(self, prefix, body_wrap)\n    def __call__(self, path, methods, name, include_in_schema, body_wrap)\n        # Add a route at `path`\n    def __getattr__(self, name)\n    def to_app(self, app)\n        # Add routes to `app`\n    def ws(self, path, conn, disconn, name, middleware)\n        # Add a websocket route at `path`\n\ndef cookie(key, value, max_age, expires, path, domain, secure, httponly, samesite)\n    # Create a 'set-cookie' `HttpHeader`\n\n@patch def static_route_exts(self, prefix, static_path, exts)\n    # Add a static route at URL path `prefix` with files from `static_path` and `exts` defined by `reg_re_param()`\n\n@patch def static_route(self, ext, prefix, static_path)\n    # Add a static route at URL path `prefix` with files from `static_path` and single `ext` (including the '.')\n\nclass MiddlewareBase:\n    def __call__(self, scope, receive, send)\n\nclass FtResponse:\n    # Wrap an FT response with any Starlette `Response`\n    def __init__(self, content, status_code, headers, cls, media_type)\n    def __response__(self, req)\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in FastHTML with Python\nDESCRIPTION: This code snippet demonstrates how to handle file uploads in FastHTML. It shows the setup of a file upload form, processing the uploaded file asynchronously, and saving it to a directory.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nupload_dir = Path(\"filez\")\n\n@rt\ndef index():\n    return (\n        Form(hx_post=upload, hx_target=\"#result\")(\n            Input(type=\"file\", name=\"file\"),\n            Button(\"Upload\", type=\"submit\")),\n        Div(id=\"result\")\n    )\n\n# Use `async` handlers where IO is used to avoid blocking other clients\n@rt\nasync def upload(file: UploadFile):\n    filebuffer = await file.read()\n    (upload_dir / file.filename).write_bytes(filebuffer)\n    return P('Size: ', file.size)\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in FastHTML\nDESCRIPTION: Demonstrates how to handle single file uploads in FastHTML using the Form component and UploadFile. Includes an example of saving the uploaded file to a directory.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nupload_dir = Path(\"filez\")\n\n@rt\ndef index():\n    return (\n        Form(hx_post=upload, hx_target=\"#result\")(\n            Input(type=\"file\", name=\"file\"),\n            Button(\"Upload\", type=\"submit\")),\n        Div(id=\"result\")\n    )\n\n# Use `async` handlers where IO is used to avoid blocking other clients\n@rt\nasync def upload(file: UploadFile):\n    filebuffer = await file.read()\n    (upload_dir / file.filename).write_bytes(filebuffer)\n    return P('Size: ', file.size)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in FastHTML with Python\nDESCRIPTION: This snippet demonstrates how to implement authentication in FastHTML using Beforeware. It shows the setup of an authentication function that runs before route handlers and how to incorporate it into the FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef user_auth_before(req, sess):\n    # `auth` key in the request scope is automatically provided to any handler which requests it and can not be injected\n    auth = req.scope['auth'] = sess.get('auth', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n\nbeforeware = Beforeware(\n    user_auth_before,\n    skip=[r'/favicon\\.ico', r'/static/.*', r'.*\\.css', r'.*\\.js', '/login', '/']\n)\n\napp, rt = fast_app(before=beforeware)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic FastHTML Routes with Path Parameters\nDESCRIPTION: Creating a FastHTML application with a GET route that accepts a path parameter. The route returns a greeting message with the provided name.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\n\n@app.get('/user/{nm}')\ndef get_nm(nm:str): return f\"Good day to you, {nm}!\"\n```\n\n----------------------------------------\n\nTITLE: Handling Dictionary Form Data in FastHTML\nDESCRIPTION: Shows how to capture all form data as a dictionary in a FastHTML route handler.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_308\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/bodied/\")\ndef bodied(data:dict): return data\n\nd = dict(a=1, b='foo')\nprint(cli.post('/bodied/', data=d).text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Single File Upload with FastHTML\nDESCRIPTION: Demonstrates how to handle single file uploads using FastHTML and Starlette. Creates a form with file input, processes the uploaded file, displays metadata, and saves the file to disk.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom pathlib import Path\n\napp, rt = fast_app()\n\nupload_dir = Path(\"filez\")\nupload_dir.mkdir(exist_ok=True)\n\n@rt('/')\ndef get():\n    return Titled(\"File Upload Demo\",\n        Article(\n            Form(hx_post=upload, hx_target=\"#result-one\")(\n                Input(type=\"file\", name=\"file\"),\n                Button(\"Upload\", type=\"submit\", cls='secondary'),\n            ),\n            Div(id=\"result-one\")\n        )\n    )\n\ndef FileMetaDataCard(file):\n    return Article(\n        Header(H3(file.filename)),\n        Ul(\n            Li('Size: ', file.size),            \n            Li('Content Type: ', file.content_type),\n            Li('Headers: ', file.headers),\n        )\n    )    \n\n@rt\nasync def upload(file: UploadFile):\n    card = FileMetaDataCard(file)\n    filebuffer = await file.read()\n    (upload_dir / file.filename).write_bytes(filebuffer)\n    return card\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating Forms with FastHTML and Data Binding\nDESCRIPTION: Shows how to use dataclasses with FastHTML forms, automatic form filling based on object attributes, and route paths in form actions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Profile: email:str; phone:str; age:int\nemail = 'john@example.com'\nprofiles = {email: Profile(email=email, phone='123456789', age=5)}\n@rt\ndef profile(email:str): return fill_form(profile_form, profiles[email])\n\nprofile_form = Form(method=\"post\", action=profile)(\n        Fieldset(\n            Label('Email', Input(name=\"email\")),\n            Label(\"Phone\", Input(name=\"phone\")),\n            Label(\"Age\", Input(name=\"age\"))),\n        Button(\"Save\", type=\"submit\"))\n```\n\n----------------------------------------\n\nTITLE: Basic FastHTML Route Handler Implementation\nDESCRIPTION: Basic route handling examples in FastHTML showing parameter typing and response handling using TestClient for testing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_252\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML()\n\n@app.get('/user/{nm}')\ndef get_nm(nm:str): return f\"Good day to you, {nm}!\"\n\nfrom starlette.testclient import TestClient\n\nclient = TestClient(app)\nr = client.get('/user/Jeremy')\nr\n```\n\n----------------------------------------\n\nTITLE: Parameterized Host-based URL Routing\nDESCRIPTION: Shows how to configure routes with parameterized hostnames and perform URL lookups with subdomain parameters. Demonstrates nested routing with Mount and parameter handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Host(\"{subdomain}.example.org\", name=\"sub\", app=Router(routes=[\n        Mount(\"/users\", name=\"users\", routes=[\n            Route(\"/\", user, name=\"user_list\"),\n            Route(\"/{username}\", user, name=\"user_detail\")\n        ])\n    ]))\n]\n...\nurl = request.url_for(\"sub:users:user_detail\", username=..., subdomain=...)\nurl = request.url_for(\"sub:users:user_list\", subdomain=...)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Chat Messages in Python\nDESCRIPTION: Implementation of a chat message renderer that handles multiple messages with different roles and styling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_169\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    {\"role\":\"user\", \"content\":\"Hello\"},\n    {\"role\":\"assistant\", \"content\":\"Hi, how can I assist you?\"}\n]\n\ndef ChatMessage(msg):\n    return Div(\n        Div(msg['role'], cls=\"chat-header\"),\n        Div(msg['content'], cls=f\"chat-bubble chat-bubble-{'primary' if msg['role'] == 'user' else 'secondary'}\"),\n        cls=f\"chat chat-{'end' if msg['role'] == 'user' else 'start'}\")\n\nchatbox = Div(*[ChatMessage(msg) for msg in messages], cls=\"chat-box\", id=\"chatlist\")\n\n# show(Html(*headers, chatbox)) # Uncomment to view\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to APIRouter\nDESCRIPTION: Demonstrates adding multiple HTTP routes to an APIRouter instance, including different HTTP methods and path configurations. Also shows defining a WebSocket endpoint on the router.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n@ar(\"/hi\")\ndef get(): return 'Hi there'\n@ar(\"/hi\")\ndef post(): return 'Postal'\n@ar\ndef ho(): return 'Ho ho'\n@ar(\"/hostie\")\ndef show_host(req): return req.headers['host']\n@ar\ndef yoyo(): return 'a yoyo'\n@ar\ndef index(): return \"home page\"\n\n@ar.ws(\"/ws\")\ndef ws(self, msg:str): return f\"Message text was: {msg}\"\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Starlette in FastHTML\nDESCRIPTION: Shows how to access and process uploaded files from a request in a FastHTML application using Starlette's form handling capabilities. This snippet demonstrates accessing filename, content type, and file content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    inp = await request.form()\n    uploaded_file = inp[\"filename\"]\n    filename = uploaded_file.filename           # abc.png\n    content_type = uploaded.content_type    # MIME type, e.g. image/png\n    content = await uploaded_file.read()       # image content\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database using FastSQL in Python\nDESCRIPTION: Demonstrates connecting to a PostgreSQL database using FastSQL, which also implements the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_191\n\nLANGUAGE: python\nCODE:\n```\nfrom fastsql import *\ndb = Database('postgres:...')\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal MonsterUI Application in FastHTML\nDESCRIPTION: Demonstrates how to create a basic application using MonsterUI, a component library for FastHTML that adds Tailwind-based UI libraries, Markdown support, code highlighting, and LaTeX support.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom monsterui.all import *\n\napp, rt = fast_app(hdrs=Theme.blue.headers()) # Use MonsterUI blue theme\n\n@rt\ndef index():\n    socials = (('github','https://github.com/AnswerDotAI/MonsterUI'),)\n    return Titled(\"App\",\n        Card(\n            P(\"App\", cls=TextPresets.muted_sm),\n            # LabelInput, DivLAigned, and UkIconLink are non-semantic MonsterUI FT Components,\n            LabelInput('Email', type='email', required=True),\n            footer=DivLAligned(*[UkIconLink(icon,href=url) for icon,url in socials])))\n```\n\n----------------------------------------\n\nTITLE: FastHTML Application Class\nDESCRIPTION: Main FastHTML application class extending Starlette with additional configuration options\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass FastHTML(Starlette):\n    def __init__(self, debug=False, routes=None, middleware=None, title: str = \"FastHTML page\", exception_handlers=None,\n                 on_startup=None, on_shutdown=None, lifespan=None, hdrs=None, ftrs=None, exts=None,\n                 before=None, after=None, surreal=True, htmx=True, default_hdrs=True, sess_cls=SessionMiddleware,\n                 secret_key=None, session_cookie='session_', max_age=365*24*3600, sess_path='/',\n                 same_site='lax', sess_https_only=False, sess_domain=None, key_fname='.sesskey',\n                 body_wrap=noop_body, htmlkw=None, nb_hdrs=False, **bodykw):\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Tasks with External API Calls in FastHTML\nDESCRIPTION: A more realistic example showing how to use background tasks to handle slow API calls. The application starts a task in the background while immediately responding to the user, then periodically updates the UI with the results.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/background_tasks.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom fasthtml.common import *\nfrom starlette.background import BackgroundTask\nimport time\nimport httpx\n\napp, rt = fast_app()\n\ndb = database(':memory:')\n\nclass TStamp: request_time: int; response_time: int # <1>\n\ntstamps = db.create(TStamp, pk='request_time')\n\ndef task_submit(request_time: int): # <2>\n    client = httpx.Client()\n    response = client.post(f'http://127.0.0.1:8123/slow?ts={request_time}') # <3>\n    tstamps.insert(**response.json()) # <4>\n\n@rt\ndef submit():\n    \"Route that initiates a background task and returns immediately.\"\n    request_time = int(time.time())\n    task = BackgroundTask(task_submit, request_time=request_time) # <5>\n    return P(f'Request submitted at: {request_time}'), task # <6>\n\n@rt\ndef show_tstamps(): return Ul(map(Li, tstamps())) # <7> \n\n@rt\ndef index():\n    return Titled('Background Task Dashboard',\n        P(Button('Press to call slow service', # <8> \n            hx_post=submit, hx_target='#res')),\n        H2('Responses from Tasks'),\n        P('', id='res'),\n        Div(Ul(map(Li, tstamps())),\n            hx_get=show_tstamps, hx_trigger='every 5s'), # <9>\n    )\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Session Management in FastHTML\nDESCRIPTION: Example of implementing session-based user tracking in FastHTML using built-in session functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_158\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\ndef get(session):\n    if 'session_id' not in session: session['session_id'] = str(uuid.uuid4())\n    return H1(f\"Session ID: {session['session_id']}\")\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in FastHTML\nDESCRIPTION: Implements the OAuth callback route to receive the authorization code from GitHub, exchange it for user info, and store the user ID in the session.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_247\n\nLANGUAGE: python\nCODE:\n```\n@app.get(auth_callback_path)\ndef auth_redirect(code:str, request, session):\n    redir = redir_url(request, auth_callback_path)\n    user_info = client.retr_info(code, redir)\n    user_id = user_info[client.id_key] # get their ID\n    session['user_id'] = user_id # save ID in the session\n    return RedirectResponse('/', status_code=303)\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP Redirects in FastHTML (Python)\nDESCRIPTION: Demonstrates how to perform HTTP redirects in FastHTML using the Redirect object. The example shows a route handler that returns a Redirect object and how to test it using the client without following the redirect.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_301\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/app4\")\ndef _(foo:FastHTML): return Redirect(\"http://example.org\")\ncli.get('/app4', follow_redirects=False)\n```\n\n----------------------------------------\n\nTITLE: Handling Request and Session Objects in FastHTML with Python\nDESCRIPTION: This snippet shows how to work with request and session objects in FastHTML. It demonstrates accessing request headers, managing session data, and using these objects within route handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef headers(req): return req.headers['host']\n```\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef profile(req, sess, user_id: int=None):\n    ip = req.client.host\n    sess['last_visit'] = datetime.now().isoformat()\n    visits = sess.setdefault('visit_count', 0) + 1\n    sess['visit_count'] = visits\n    user = get_user(user_id or sess.get('user_id'))\n    return Titled(f\"Profile: {user.name}\", \n                  P(f\"Visits: {visits}\"), \n                  P(f\"IP: {ip}\"),\n                  Button(\"Logout\", hx_post=logout))\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Handling and Data Binding in FastHTML with Python\nDESCRIPTION: This code snippet shows how to handle form submissions and data binding in FastHTML. It defines a route for editing a profile, demonstrates automatic unpacking of form data into matching attribute names, and shows how to make a POST request with TestClient.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef edit_profile(profile: Profile):\n    profiles[email]=profile\n    return RedirectResponse(url=path)\n\nnew_data = dict(email='john@example.com', phone='7654321', age=25)\nprint(client.post(\"/edit_profile\", data=new_data, headers=htmx_req).text)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fastlite Database in FastHTML\nDESCRIPTION: Shows how to set up and use Fastlite, a CRUD-oriented API for working with SQLite in FastHTML. Includes examples of creating database tables and defining models.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom fastlite import *\n```\n\nLANGUAGE: python\nCODE:\n```\ndb = database(':memory:') # or database('data/app.db')\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Book: isbn: str; title: str; pages: int; userid: int\n# The transform arg instructs fastlite to change the db schema when fields change.\n# Create only creates a table if the table doesn't exist.\nbooks = db.create(Book, pk='isbn', transform=True)\n                \nclass User: id: int; name: str; active: bool = True\n# If no pk is provided, id is used as the primary key.\nusers = db.create(User, transform=True)\nusers\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Implementation\nDESCRIPTION: Demonstrates implementing basic authentication in FastHTML using the user_pwd_auth middleware. The example creates a protected route that requires authentication and shows both authenticated and unauthenticated requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nauth = user_pwd_auth(testuser='spycraft')\napp,cli,rt = get_cli(FastHTML(middleware=[auth]))\n\n@rt(\"/locked\")\ndef get(auth): return 'Hello, ' + auth\n\ntest_eq(cli.get('/locked').text, 'not authenticated')\ntest_eq(cli.get('/locked', auth=(\"testuser\",\"spycraft\")).text, 'Hello, testuser')\n```\n\n----------------------------------------\n\nTITLE: OAuth Class Implementation in Python\nDESCRIPTION: A comprehensive OAuth class that handles the OAuth flow, including redirection, token retrieval, and session management. It includes methods for login, logout, and checking authentication status.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass OAuth:\n    def __init__(self, app, cli, skip=None, redir_path='/redirect', error_path='/error', logout_path='/logout', login_path='/login', https=True, http_patterns=http_patterns):\n        if not skip: skip = [redir_path,error_path,login_path]\n        store_attr()\n        def before(req, session):\n            if 'auth' not in req.scope: req.scope['auth'] = session.get('auth')\n            auth = req.scope['auth']\n            if not auth: return self.redir_login(session)\n            res = self.check_invalid(req, session, auth)\n            if res: return res\n        app.before.append(Beforeware(before, skip=skip))\n\n        @app.get(redir_path)\n        def redirect(req, session, code:str=None, error:str=None, state:str=None):\n            if not code: session['oauth_error']=error; return RedirectResponse(self.error_path, status_code=303)\n            scheme = 'http' if url_match(req.url,self.http_patterns) or not self.https else 'https'\n            base_url = f\"{scheme}://{req.url.netloc}\"\n            info = AttrDictDefault(cli.retr_info(code, base_url+redir_path))\n            ident = info.get(self.cli.id_key)\n            if not ident: return self.redir_login(session)\n            res = self.get_auth(info, ident, session, state)\n            if not res:   return self.redir_login(session)\n            req.scope['auth'] = session['auth'] = ident\n            return res\n\n        @app.get(logout_path)\n        def logout(session):\n            session.pop('auth', None)\n            return self.logout(session)\n\n    def redir_login(self, session): return RedirectResponse(self.login_path, status_code=303)\n    def redir_url(self, req):\n        scheme = 'http' if url_match(req.url,self.http_patterns) or not self.https else 'https'\n        return redir_url(req, self.redir_path, scheme)\n\n    def login_link(self, req, scope=None, state=None): return self.cli.login_link(self.redir_url(req), scope=scope, state=state)\n    def check_invalid(self, req, session, auth): return False\n    def logout(self, session): return self.redir_login(session)\n    def get_auth(self, info, ident, session, state): raise NotImplementedError()\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Beforeware in FastHTML\nDESCRIPTION: Shows how to create an authentication system using FastHTML's Beforeware functionality. The example includes a function to check user authentication and configuration to skip authentication for specific routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Status code 303 is a redirect that can change POST to GET,\n# so it's appropriate for a login page.\nlogin_redir = RedirectResponse('/login', status_code=303)\n\ndef user_auth_before(req, sess):\n    # The `auth` key in the request scope is automatically provided\n    # to any handler which requests it, and can not be injected\n    # by the user using query params, cookies, etc, so it should\n    # be secure to use.    \n    auth = req.scope['auth'] = sess.get('auth', None)\n    # If the session key is not there, it redirects to the login page.\n    if not auth: return login_redir\n```\n\nLANGUAGE: python\nCODE:\n```\nbeforeware = Beforeware(\n    user_auth_before,\n    skip=[r'/favicon\\.ico', r'/static/.*', r'.*\\.css', r'.*\\.js', '/login', '/']\n)\n\napp, rt = fast_app(before=beforeware)\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication in FastHTML\nDESCRIPTION: Example showing how to set up OAuth authentication in a FastHTML application. The code demonstrates creating a custom Auth class that extends OAuth, implementing login/logout functionality, and handling authentication redirects. It includes email domain verification for answer.ai addresses.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_242\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.oauth import OAuth\nfrom fasthtml.common import FastHTML, RedirectResponse\n\nclass Auth(OAuth):\n    def get_auth(self, info, ident, session, state):\n        email = info.email or ''\n        if info.email_verified and email.split('@')[-1]=='answer.ai':\n            return RedirectResponse('/', status_code=303)\n\napp = FastHTML()\noauth = Auth(app, client)\n\n@app.get('/')\ndef home(auth): return P('Logged in!'), A('Log out', href='/logout')\n\n@app.get('/login')\ndef login(req): return Div(P(\"Not logged in\"), A('Log in', href=oauth.login_link(req)))\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal MonsterUI App in FastHTML\nDESCRIPTION: Demonstrates how to create a minimal app using MonsterUI, a component library for FastHTML. The example includes setting up a theme and creating a basic card component.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom monsterui.all import *\n\napp, rt = fast_app(hdrs=Theme.blue.headers(highlightjs=True)) # Use MonsterUI blue theme and highlight code in markdown\n\n@rt\ndef index():\n    socials = (('github','https://github.com/AnswerDotAI/MonsterUI'),)\n    return Titled(\"App\",\n        Card(\n            P(\"App\", cls=TextPresets.muted_sm),\n            # LabelInput, DivLAigned, and UkIconLink are non-semantic MonsterUI FT Components,\n            LabelInput('Email', type='email', required=True),\n            footer=DivLAligned(*[UkIconLink(icon,href=url) for icon,url in socials])))\n```\n\n----------------------------------------\n\nTITLE: SQL-first Design in Python with MiniDataAPI\nDESCRIPTION: Illustrates the SQL-first design approach in MiniDataAPI, including table object creation and extraction of Dataclass versions from table objects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nusers = None\nUser = None\n```\n\nLANGUAGE: python\nCODE:\n```\nusers = db.t.user\nusers\n```\n\nLANGUAGE: python\nCODE:\n```\nUser = users.dataclass()\n```\n\nLANGUAGE: python\nCODE:\n```\nUser(name='Braden', email='b@example.com', year_started=2018)\n```\n\n----------------------------------------\n\nTITLE: Annotated Minimal FastHTML Application\nDESCRIPTION: The same minimal application with annotations explaining each part of the code and how FastHTML works.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * # <1>\n\napp, rt = fast_app()  # <2>\n\n@rt(\"/\") # <3>\ndef get(): #<4>\n    return Titled(\"FastHTML\", P(\"Let's do this!\")) # <5>\n\nserve()  # <6>\n```\n\n----------------------------------------\n\nTITLE: Organizing Routes with APIRouter in FastHTML\nDESCRIPTION: Demonstrates the use of APIRouter to organize routes across multiple files in a FastHTML application. Includes examples of defining routes in a separate file and integrating them into the main application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# products.py\nar = APIRouter()\n\n@ar\ndef details(pid: int): return f\"Here are the product details for ID: {pid}\"\n\n@ar\ndef all_products(req):\n    return Div(\n        Div(\n            Button(\"Details\",hx_get=details.to(pid=42),hx_target=\"#products_list\",hx_swap=\"outerHTML\",),\n        ), id=\"products_list\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom products import ar,all_products\n\napp, rt = fast_app()\nar.to_app(app)\n\n@rt\ndef index():\n    return Div(\n        \"Products\",\n        hx_get=all_products, hx_swap=\"outerHTML\")\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket Example with FastHTML\nDESCRIPTION: A complete example of a FastHTML application with WebSocket support, showing both client and server-side code for real-time message handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_261\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\n@rt('/')\ndef get():\n    cts = Div(\n        Div(id='notifications'),\n        Form(Input(id='msg'), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\n@app.ws('/ws')\nasync def ws(msg:str, send):\n    await send(Div('Hello ' + msg, id='notifications'))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with MonsterUI in FastHTML\nDESCRIPTION: Shows how to render Markdown content using MonsterUI in FastHTML. The example includes various Markdown elements like headers, lists, and code blocks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nrender_md(\"\"\"\n# My Document\n\n> Important note here\n\n+ List item with **bold**\n+ Another with `code`\n\n```python\ndef hello():\n    print(\"world\")\n```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Processing WebSocket Messages and Sending Responses\nDESCRIPTION: Example of receiving a message from a client over WebSocket and sending a response back. Shows two methods: using await send() and using a return statement.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.ws('/ws', conn=on_conn, disconn=on_disconn)\nasync def on_message(msg:str, send):\n    await send(Div('You said: ' + msg, id='notifications'))\n    # or...\n    return Div('You said: ' + msg, id='notifications')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Management in FastHTML\nDESCRIPTION: Demonstrates setting and retrieving cookies using FastHTML routes. Shows how to handle datetime objects in cookies with automatic conversion.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_313\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/setcookie\")\ndef get(): return cookie('now', datetime.now())\n\n@rt(\"/getcookie\")\ndef get(now:parsed_date): return f'Cookie was set at time {now.time()}'\n\nprint(cli.get('/setcookie').text)\ntime.sleep(0.01)\ncli.get('/getcookie').text\n```\n\n----------------------------------------\n\nTITLE: Using APIRouter for Route Organization in FastHTML (Python)\nDESCRIPTION: Demonstrates the use of APIRouter to organize routes in separate files. It shows how to define routes with a prefix and how to incorporate them into the main FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_303\n\nLANGUAGE: python\nCODE:\n```\n# products.py\nar = APIRouter(prefix=\"/products\")\n\n@ar(\"/all\")\ndef all_products(req):\n    return Div(\n        \"Welcome to the Products Page! Click the button below to look at the details for product 42\",\n        Div(\n            Button(\n                \"Details\",\n                hx_get=req.url_for(\"details\", pid=42),\n                hx_target=\"#products_list\",\n                hx_swap=\"outerHTML\",\n            ),\n        ),\n        id=\"products_list\",\n    )\n\n\n@ar.get(\"/{pid}\", name=\"details\")\ndef details(pid: int):\n    return f\"Here are the product details for ID: {pid}\"\n\n# main.py\n# from products import ar\n\napp, rt = fast_app()\nar.to_app(app)\n\n@rt\ndef index():\n    return Div(\n        \"Click me for a look at our products\",\n        hx_get=ar.rt_funcs.all_products,\n        hx_swap=\"outerHTML\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Forms with FastHTML in Python\nDESCRIPTION: Demonstrates form handling in FastHTML, including creating form components, filling forms with data, and integrating forms with views and databases.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Profile: email:str; phone:str; age:int\n\nprofile_form = Form(method=\"post\", action=\"/profile\")(\n        Fieldset(\n            Label('Email', Input(name=\"email\")),\n            Label(\"Phone\", Input(name=\"phone\")),\n            Label(\"Age\", Input(name=\"age\")),\n        ),\n        Button(\"Save\", type=\"submit\"),\n    )\nprofile_form\n\nprofile = Profile(email='john@example.com', phone='123456789', age=5)\nprofile\n\nfill_form(profile_form, profile)\n\ndb = database(\"profiles.db\")\nprofiles = db.create(Profile, pk=\"email\")\n\nprofiles.insert(profile)\n\n@rt(\"/profile/{email}\")\ndef profile(email:str):\n    profile = profiles[email]  # <1>\n    filled_profile_form = fill_form(profile_form, profile) # <2>\n    return Titled(f'Profile for {profile.email}', filled_profile_form)\n\nprint(client.get(f\"/profile/john@example.com\").text)\n\n@rt(\"/profile\")\ndef post(profile: Profile): # <1>\n    profiles.update(profile) # <2>\n    return RedirectResponse(url=f\"/profile/{profile.email}\") # <3>\n\nnew_data = dict(email='john@example.com', phone='7654321', age=25)\nprint(client.post(\"/profile\", data=new_data).text)  # <4>\n```\n\n----------------------------------------\n\nTITLE: Implementing Websockets in FastHTML with Python\nDESCRIPTION: This snippet demonstrates how to implement websockets in FastHTML. It shows the setup of a websocket connection, handling connect and disconnect events, and processing websocket messages.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# These HTMX extensions are available through `exts`:\n#   head-support preload class-tools loading-states multi-swap path-deps remove-me ws chunked-transfer\napp, rt = fast_app(exts='ws')\n\ndef mk_inp(): return Input(id='msg', autofocus=True)\n\n@rt\nasync def index(request):\n    # `ws_send` tells HTMX to send a message to the nearest websocket based on the trigger for the form element\n    cts = Div(\n        Div(id='notifications'),\n        Form(mk_inp(), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\nasync def on_connect(send): await send(Div('Hello, you have connected', id=\"notifications\"))\nasync def on_disconnect(ws): print('Disconnected!')\n\n@app.ws('/ws', conn=on_connect, disconn=on_disconnect)\nasync def ws(msg:str, send):\n    # websocket hander returns/sends are treated as OOB swaps\n    await send(Div('Hello ' + msg, id=\"notifications\"))\n    return Div('Goodbye ' + msg, id=\"notifications\"), mk_inp()\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-Based Routes\nDESCRIPTION: Demonstrates setting and retrieving cookies in FastHTML routes. One route sets a cookie with the current time, and another retrieves and displays the cookie value, showing cookie data persistence between requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_80\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/setcookie\")\ndef get(req): return cookie('now', datetime.now())\n\n@rt(\"/getcookie\")\ndef get(now:parsed_date): return f'Cookie was set at time {now.time()}'\n\nprint(cli.get('/setcookie').text)\ntime.sleep(0.01)\ncli.get('/getcookie').text\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket Example with FastHTML\nDESCRIPTION: A complete example showing both client and server components for WebSocket communication. Demonstrates initializing the FastHTML app with WebSocket extension and setting up routes for both standard HTTP and WebSocket endpoints.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\n@rt('/')\ndef get():\n    cts = Div(\n        Div(id='notifications'),\n        Form(Input(id='msg'), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\n@app.ws('/ws')\nasync def ws(msg:str, send):\n    await send(Div('Hello ' + msg, id='notifications'))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Using Fastlite for Database Operations in FastHTML with Python\nDESCRIPTION: This snippet shows how to use Fastlite for database operations in FastHTML. It demonstrates creating database tables, inserting records, and querying data using Fastlite's CRUD operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom fastlite import *\n\ndb = database(':memory:') # or database('data/app.db')\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Book: isbn: str; title: str; pages: int; userid: int\n# The transform arg instructs fastlite to change the db schema when fields change.\n# Create only creates a table if the table doesn't exist.\nbooks = db.create(Book, pk='isbn', transform=True)\n                \nclass User: id: int; name: str; active: bool = True\n# If no pk is provided, id is used as the primary key.\nusers = db.create(User, transform=True)\nusers\n```\n\nLANGUAGE: python\nCODE:\n```\nuser = users.insert(name='Alex',active=False)\nuser\n```\n\nLANGUAGE: python\nCODE:\n```\n# List all records\nusers()\n\n# Limit, offset, and order results:\nusers(order_by='name', limit=2, offset=1)\n\n# Filter on the results\nusers(where=\"name='Alex'\")\n\n# Placeholder for avoiding injection attacks\nusers(\"name=?\", ('Alex',))\n```\n\n----------------------------------------\n\nTITLE: Using Dataclasses for Structured Form Data in FastHTML\nDESCRIPTION: Demonstrates how to use dataclasses to define structured form data and handle it in a FastHTML route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_307\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Bodie: a:int;b:str\n\n@rt(\"/bodie/{nm}\")\ndef post(nm:str, data:Bodie):\n    res = asdict(data)\n    res['nm'] = nm\n    return res\n\nprint(cli.post('/bodie/me', data=dict(a=1, b='foo', nm='me')).text)\n```\n\n----------------------------------------\n\nTITLE: FastHTML Image Gallery Implementation with Flexbox\nDESCRIPTION: Complete implementation of an image gallery page using FastHTML with Flexbox grid layout and image generation preview functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_157\n\nLANGUAGE: python\nCODE:\n```\ngridlink = Link(rel=\"stylesheet\", href=\"https://cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css\", type=\"text/css\")\napp = FastHTML(hdrs=(picolink, gridlink))\n\n@app.get(\"/\")\ndef get():\n    inp = Input(id=\"new-prompt\", name=\"prompt\", placeholder=\"Enter a prompt\")\n    add = Form(Group(inp, Button(\"Generate\")), hx_post=\"/\", target_id='gen-list', hx_swap=\"afterbegin\")\n    gen_containers = [generation_preview(g) for g in gens(limit=10)]\n    gen_list = Div(*gen_containers[::-1], id='gen-list', cls=\"row\")\n    return Title('Image Generation Demo'), Main(H1('Magic Image Generation'), add, gen_list, cls='container')\n\ndef generation_preview(g):\n    grid_cls = \"box col-xs-12 col-sm-6 col-md-4 col-lg-3\"\n    image_path = f\"{g.folder}/{g.id}.png\"\n    if os.path.exists(image_path):\n        return Div(Card(\n                       Img(src=image_path, alt=\"Card image\", cls=\"card-img-top\"),\n                       Div(P(B(\"Prompt: \"), g.prompt, cls=\"card-text\"),cls=\"card-body\"),\n                   ), id=f'gen-{g.id}', cls=grid_cls)\n    return Div(f\"Generating gen {g.id} with prompt {g.prompt}\", \n            id=f'gen-{g.id}', hx_get=f\"/gens/{g.id}\", \n            hx_trigger=\"every 2s\", hx_swap=\"outerHTML\", cls=grid_cls)\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware with __call__ Method in Starlette\nDESCRIPTION: Shows how to create middleware by defining a class with a __call__ method. This approach gives access to the raw ASGI scope, receive, and send callables, allowing for low-level request and response handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nclass MyMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        # see above scope dictionary as reference\n        headers = dict(scope[\"headers\"])\n        # do something\n        # pass to next middleware\n        return await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Different HTTP Methods in FastHTML\nDESCRIPTION: Shows how to define multiple routes with different HTTP methods (GET, POST, PUT) on the same URL pattern. The example defines different handler functions for each method type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_142\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", methods='get')\ndef home():\n    return H1('Hello, World')\n\n@app.route(\"/\", methods=['post', 'put'])\ndef post_or_put():\n    return \"got a POST or PUT request\"\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Flexbox Grid with FastHTML\nDESCRIPTION: Shows how to create a Flexbox grid layout using Python's FastHTML components with custom styling and responsive columns.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_156\n\nLANGUAGE: python\nCODE:\n```\ngrid = Html(\n    Link(rel=\"stylesheet\", href=\"https://cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css\", type=\"text/css\"),\n    Div(\n        Div(Div(\"This takes up the full width\", cls=\"box\", style=\"background-color: #800000;\"), cls=\"col-xs-12\"),\n        Div(Div(\"This takes up half\", cls=\"box\", style=\"background-color: #008000;\"), cls=\"col-xs-6\"),\n        Div(Div(\"This takes up half\", cls=\"box\", style=\"background-color: #0000B0;\"), cls=\"col-xs-6\"),\n        cls=\"row\", style=\"color: #fff;\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an FT Component in Python\nDESCRIPTION: Shows how to create a basic FT (FastTags) component in FastHTML. This example creates a div containing a heading and a paragraph, demonstrating the structure of FT components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_181\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\ndef example():\n    # The code below is a set of ft components\n    return Div(\n            H1(\"FastHTML APP\"),\n            P(\"Let's do this\"),\n            cls=\"go\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Complete GitHub OAuth Login Implementation in FastHTML\nDESCRIPTION: Combines all components to create a minimal FastHTML app with GitHub OAuth login, session management, and a simple database for user interaction tracking.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_248\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom fasthtml.common import *\nfrom fasthtml.oauth import GitHubAppClient, redir_url\n\ndb = database('data/counts.db')\ncounts = db.t.counts\nif counts not in db.t: counts.create(dict(name=str, count=int), pk='name')\nCount = counts.dataclass()\n\n# Auth client setup for GitHub\nclient = GitHubAppClient(os.getenv(\"AUTH_CLIENT_ID\"), \n                         os.getenv(\"AUTH_CLIENT_SECRET\"))\nauth_callback_path = \"/auth_redirect\"\n\ndef before(req, session):\n    # if not logged in, we send them to our login page\n    # logged in means:\n    # - 'user_id' in the session object, \n    # - 'auth' in the request object\n    auth = req.scope['auth'] = session.get('user_id', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n    counts.xtra(name=auth)\nbware = Beforeware(before, skip=['/login', auth_callback_path])\n\napp = FastHTML(before=bware)\n\n# User asks us to Login\n@app.get('/login')\ndef login(request):\n    redir = redir_url(request,auth_callback_path)\n    login_link = client.login_link(redir)\n    # we tell user to login at github\n    return P(A('Login with GitHub', href=login_link))    \n```\n\n----------------------------------------\n\nTITLE: Creating a Websocket Application in FastHTML\nDESCRIPTION: Shows how to implement bidirectional communication with websockets in FastHTML. Creates a simple form that sends messages to the server and receives responses, demonstrating connection, message handling, and disconnection events.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom asyncio import sleep\n\napp, rt = fast_app(exts='ws') # <1>\n\ndef mk_inp(): return Input(id='msg', autofocus=True) # <2>\n\n@rt('/')\nasync def get(request):\n    cts = Div(\n        Div(id='notifications'),\n        Form(mk_inp(), id='form', ws_send=True), # <3>\n        hx_ext='ws', ws_connect='/ws') # <4>\n    return Titled('Websocket Test', cts)\n\nasync def on_connect(send): # <5>\n    print('Connected!')\n    await send(Div('Hello, you have connected', id=\"notifications\")) # <6>\n\nasync def on_disconnect(ws): # <7>\n    print('Disconnected!')\n\n@app.ws('/ws', conn=on_connect, disconn=on_disconnect) # <8>\nasync def ws(msg:str, send): # <9>\n    await send(Div('Hello ' + msg, id=\"notifications\")) # <10>\n    await sleep(2)\n    return Div('Goodbye ' + msg, id=\"notifications\"), mk_inp() # <11>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Todo Item with HTMX Out-of-Band Swap\nDESCRIPTION: Route handler for creating a new todo item. It inserts the todo into the database and uses HTMX's out-of-band swap feature to clear the input field after adding. The new todo is appended to the start of the todo list using HTMX's afterbegin swap strategy.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef post(todo:Todo):\n    # `hx_swap_oob='true'` tells HTMX to perform an out-of-band swap, updating this element wherever it appears.\n    # This is used to clear the input field after adding the new todo.\n    new_inp =  Input(id=\"new-title\", name=\"title\", placeholder=\"New Todo\", hx_swap_oob='true')\n    # `insert` returns the inserted todo, which is appended to the start of the list, because we used\n    # `hx_swap='afterbegin'` when creating the todo list form.\n    return todos.insert(todo), new_inp\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX with Fetch API in FastHTML\nDESCRIPTION: Shows how to use the Fetch API to make AJAX requests and update DOM content in response to click events, including error handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_79\n\nLANGUAGE: js\nCODE:\n```\nme().on(\"click\", async event => {\n  let e = me(event)\n  // EXAMPLE 1: Hit an endpoint.\n  if((await fetch(\"/webhook\")).ok) console.log(\"Did the thing.\")\n  // EXAMPLE 2: Get content and replace me()\n  try {\n    let response = await fetch('/endpoint')\n    if (response.ok) e.innerHTML = await response.text()\n    else console.warn('fetch(): Bad response')\n  }\n  catch (error) { console.warn(`fetch(): ${error}`) }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Tests with HTTPX in FastHTML\nDESCRIPTION: Demonstrates how to create asynchronous tests for FastHTML applications using httpx.AsyncClient instead of TestClient. Includes a basic route handler and test implementation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_126\n\nLANGUAGE: python\nCODE:\n```\nfrom httpx import AsyncClient\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse\n\n\ndef hello(request: Request) -> PlainTextResponse:\n    return PlainTextResponse(\"Hello World!\")\n\n\napp = Starlette(routes=[Route(\"/\", hello)])\n\n\nasync def test_app() -> None:\n    async with AsyncClient(app=app, base_url=\"http://testserver\") as client:\n        r = await client.get(\"/\")\n        assert r.status_code == 200\n        assert r.text == \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Exception Handlers in FastHTML with Python\nDESCRIPTION: This snippet demonstrates how to customize exception handlers in FastHTML. It defines a custom handler for 404 errors and shows how to incorporate it into the FastHTML application setup.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef not_found(req, exc): return Titled(\"404: I don't exist!\")\nexception_handlers = {404: not_found}\napp, rt = fast_app(exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Building a Real-Time Chat App with FastHTML WebSockets - WebSocket Handler\nDESCRIPTION: Second part of implementing a real-time chat application with FastHTML WebSockets. Handles WebSocket connections, tracks connected users, and broadcasts messages to all connected clients.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nusers = {}\ndef on_conn(ws, send): users[str(id(ws))] = send\ndef on_disconn(ws): users.pop(str(id(ws)), None)\n\n@app.ws('/ws', conn=on_conn, disconn=on_disconn)\nasync def ws(msg:str):\n    msgs.append(msg)\n    # Use associated `send` function to send message to each user\n    for u in users.values(): await u(Ul(*[Li(m) for m in msgs], id='msg-list'))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Upload Handling in FastHTML\nDESCRIPTION: Shows how to handle file uploads using Starlette's UploadFile type with async/await pattern.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_317\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/upload\")\nasync def post(uf:UploadFile): return (await uf.read()).decode()\n\nwith open('../../CHANGELOG.md', 'rb') as f:\n    print(cli.post('/upload', files={'uf':f}, data={'msg':'Hello'}).text[:15])\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling with UploadFile in FastHTML\nDESCRIPTION: Demonstrates handling a single file upload with the UploadFile type, reading its content, and returning it as a response. The example includes both the server implementation and client code that uploads a file.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/upload\")\nasync def post(uf:UploadFile): return (await uf.read()).decode()\n\nwith open('../../CHANGELOG.md', 'rb') as f:\n    print(cli.post('/upload', files={'uf':f}, data={'msg':'Hello'}).text[:15])\n```\n\n----------------------------------------\n\nTITLE: Starlette Middleware Configuration\nDESCRIPTION: Shows how to configure multiple middleware layers in a Starlette application, including TrustedHostMiddleware and HTTPSRedirectMiddleware.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=['example.com', '*.example.com'],\n    ),\n    Middleware(HTTPSRedirectMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Handling WebSockets in FastHTML\nDESCRIPTION: Shows how to set up and handle WebSocket connections in FastHTML, including connection and disconnection events.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_166\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML(exts='ws')\nrt = app.route\n\ndef mk_inp(): return Input(id='msg')\n\n@rt('/')\nasync def get(request):\n    cts = Div(\n        Div(id='notifications'),\n        Form(mk_inp(), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\nasync def on_connect(send):\n    print('Connected!')\n    await send(Div('Hello, you have connected', id=\"notifications\"))\n\nasync def on_disconnect(ws):\n    print('Disconnected!')\n\n@app.ws('/ws', conn=on_connect, disconn=on_disconnect)\nasync def ws(msg:str, send):\n    await send(Div('Hello ' + msg, id=\"notifications\"))\n    await sleep(2)\n    return Div('Goodbye ' + msg, id=\"notifications\"), mk_inp()\n```\n\n----------------------------------------\n\nTITLE: FastHTML Route Middleware Implementation\nDESCRIPTION: Implementation of multi-level middleware for FastHTML routes showing app-level and route-specific beforeware.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_254\n\nLANGUAGE: python\nCODE:\n```\ndef app_beforeware():\n    print('App level beforeware')\n\napp = FastHTML(before=Beforeware(app_beforeware))\nclient = TestClient(app)\n\ndef route_beforeware(f):\n    @wraps(f)\n    async def decorator(*args, **kwargs):\n        print('Route level beforeware')\n        return await f(*args, **kwargs)\n    return decorator\n    \ndef second_route_beforeware(f):\n    @wraps(f)\n    async def decorator(*args, **kwargs):\n        print('Second route level beforeware')\n        return await f(*args, **kwargs)\n    return decorator\n\n@app.get(\"/users\")\n@route_beforeware\n@second_route_beforeware\nasync def users():\n    return \"Users Page\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Click Handler Route\nDESCRIPTION: Defines a route for the /click endpoint that returns a paragraph element. This route can be defined or changed dynamically while the application is running.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef click(): return P('You clicked me!')\n```\n\n----------------------------------------\n\nTITLE: Deleting a Todo Item with HTMX Out-of-Band Swap\nDESCRIPTION: Route handler for deleting a todo item by ID. It leverages HTMX's out-of-band swap feature to clear the details view after deletion. The route accepts a path parameter {id} which is automatically parsed and passed as an integer.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/todos/{id}\")\ndef delete(id:int):\n    # The `delete` method is part of the MiniDataAPI spec, removing the item with the given primary key.\n    todos.delete(id)\n    # Returning `clr_details()` ensures the details view is cleared after deletion,\n    # leveraging HTMX's out-of-band swap feature.\n    # Note that we are not returning *any* FT component that doesn't have an \"OOB\" swap, so the target element\n    # inner HTML is simply deleted. That's why the deleted todo is removed from the list.\n    return clr_details()\n```\n\n----------------------------------------\n\nTITLE: Creating FastTags Components\nDESCRIPTION: Demonstrates FastTags (FT) syntax which maps HTML elements to Python functions. Shows how positional parameters become children and named parameters become attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntags = Title(\"FastHTML\"), H1(\"My web app\"), P(f\"Let's do this!\", cls=\"myclass\")\ntags\n```\n\n----------------------------------------\n\nTITLE: Managing State Variables in Starlette\nDESCRIPTION: Demonstrates how to store and access state variables at both application and request levels. Application-level state persists across requests, while request-level state is limited to the current request's lifecycle.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\napp.state.dbconn = get_db_conn()\nrequest.state.start_time = time.time()\n# use app-scope state variable in a request\nrequest.app.state.dbconn\n```\n\n----------------------------------------\n\nTITLE: WebSocket Setup Implementation\nDESCRIPTION: WebSocket connection setup and management including connection handling and message broadcasting.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_89\n\nLANGUAGE: python\nCODE:\n```\ndef setup_ws(app, f=noop):\n    conns = {}\n    async def on_connect(scope, send): conns[scope.client] = send\n    async def on_disconnect(scope): conns.pop(scope.client)\n    app.ws('/ws', conn=on_connect, disconn=on_disconnect)(f)\n    async def send(s):\n        for o in conns.values(): await o(s)\n    app._send = send\n    return send\n```\n\n----------------------------------------\n\nTITLE: Installing FastHTML with pip\nDESCRIPTION: Command to install the FastHTML Python library using pip package manager. The package is named 'python-fasthtml' rather than just 'fasthtml'.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install python-fasthtml\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic WebSocket Route in FastHTML\nDESCRIPTION: Shows how to create a WebSocket route with FastHTML, including handling connect, disconnect, and message events. The function demonstrates sending messages back to the client.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_257\n\nLANGUAGE: python\nCODE:\n```\n@app.ws('/ws', conn=on_conn, disconn=on_disconn)\nasync def on_message(msg:str, send):\n    await send(Div('Hello ' + msg, id='notifications'))\n    await send(Div('Goodbye ' + msg, id='notifications'))\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session (Python)\nDESCRIPTION: This function creates a Stripe checkout session when the 'Buy Now' button is clicked. It sets up the payment details, including price, quantity, and customer email, and specifies success and cancel URLs.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/create-checkout-session\", methods=[\"POST\"])\nasync def create_checkout_session(sess):\n    checkout_session = stripe.checkout.Session.create(\n        line_items=[{'price': price.id, 'quantity': 1}],\n        mode='payment',\n        payment_method_types=['card'],\n        customer_email=sess['auth'],\n        metadata={'app_name': app_nm, \n                  'AnyOther': 'Metadata',},\n        # CHECKOUT_SESSION_ID is a special variable Stripe fills in for you\n        success_url=DOMAIN_URL + '/success?checkout_sid={CHECKOUT_SESSION_ID}',\n        cancel_url=DOMAIN_URL + '/cancel')\n    return Redirect(checkout_session.url)\n```\n\n----------------------------------------\n\nTITLE: Session Data Persistence in FastHTML\nDESCRIPTION: Shows how to store and retrieve session data across different routes. The example demonstrates setting a session value with a POST request and then retrieving it with a GET request, verifying data persistence.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/sess-first\")\ndef post(sess, name: str):\n    sess[\"name\"] = name\n    return str(sess)\n\ncli.post('/sess-first', data={'name': 2})\n\n@rt(\"/getsess-all\")\ndef get(sess): return sess['name']\n\ntest_eq(cli.get('/getsess-all').text, '2')\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Stripe Payments in Python\nDESCRIPTION: This function handles the success route after a Stripe payment is completed. It verifies the payment status in the database and displays a success message with transaction details.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/success\")\ndef success(sess, checkout_sid:str):    \n    # Get payment record from database (saved in the webhook)\n    payment = payments[checkout_sid]\n\n    if not payment or payment.payment_status != 'paid': \n        return Titled(\"Error\", P(\"Payment not found\"))\n\n    return Titled(\n        \"Success\",\n        Div(H2(\"Payment Successful!\"),\n            P(f\"Thank you for your purchase, {sess['auth']}\"),\n            P(f\"Amount Paid: ${payment.amount / 100:.2f}\"),\n            P(f\"Status: {payment.payment_status}\"),\n            P(f\"Transaction ID: {payment.checkout_session_id}\"),\n            A(\"Back to Home\", href=\"/\")))\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Headers in Python\nDESCRIPTION: Demonstrates how to access HTTP headers in FastHTML handler functions. The example shows how to capture the User-Agent header value.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/ua\")\nasync def _(user_agent:str): return user_agent\nprint(cli.get('/ua', headers={'User-Agent':'FastHTML'}).text)\n```\n\n----------------------------------------\n\nTITLE: HTML Response Implementation\nDESCRIPTION: Demonstrates sending an HTML response using HTMLResponse class.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import HTMLResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = HTMLResponse('<html><body><h1>Hello, world!</h1></body></html>')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Setting HTMX Response Headers in FastHTML (Python)\nDESCRIPTION: Shows how to set HTMX-specific response headers using HtmxResponseHeaders in a FastHTML route handler. This example sets the HX-Location header for client-side redirects in HTMX.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_300\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/app3\")\ndef _(foo:FastHTML): return HtmxResponseHeaders(location=\"http://example.org\")\nr = cli.get('/app3')\nprint(r.headers)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Handler in FastHTML\nDESCRIPTION: Shows how to handle a new WebSocket connection in FastHTML by sending an initial message to the client upon connection.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_258\n\nLANGUAGE: python\nCODE:\n```\nasync def on_conn(send):\n    await send(Div('Hello, world!'))\n```\n\n----------------------------------------\n\nTITLE: Using TypedDict for Structured Form Data in FastHTML\nDESCRIPTION: Shows how to use TypedDict to define structured form data with type hints in a FastHTML route handler.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_310\n\nLANGUAGE: python\nCODE:\n```\nclass BodieTD(TypedDict): a:int;b:str='foo'\n\n@app.post(\"/bodietd/\")\ndef bodient(data:BodieTD): return data\nprint(cli.post('/bodietd/', data=d).text)\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in FastHTML with Python\nDESCRIPTION: This code snippet illustrates how to set and retrieve cookies in FastHTML. It includes examples of setting a cookie, accessing a cookie value in a route handler, and demonstrates how to use the TestClient to interact with cookie-based routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef setcook(): return P(f'Set'), cookie('mycookie', 'foobar')\nprint(client.get('/setcook', headers=htmx_req).text)\n```\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef getcook(mycookie:str): return f'Got {mycookie}'\n# If handlers return text instead of FTs, then a plaintext response is automatically created\nprint(client.get('/getcook').text)\n```\n\n----------------------------------------\n\nTITLE: Handling Different Response Types in Routes\nDESCRIPTION: Demonstrates the different types of responses that FastHTML route handlers can return, including static file serving and integration with markdown and syntax highlighting.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/{fname:path}.{ext:static}\")\nasync def serve_static_file(fname:str, ext:str): return FileResponse(f'public/{fname}.{ext}')\n\napp, rt = fast_app(hdrs=(MarkdownJS(), HighlightJS(langs=['python', 'javascript'])))\n@rt\ndef index(): \n    return Titled(\"Example\",\n                  Div(\"*markdown* here\", cls=\"marked\"),\n                  Pre(Code(\"def foo(): pass\")))\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Client for Google in Python\nDESCRIPTION: Creates a WebApplicationClient for Google OAuth2 authentication. This class provides methods for generating login links and parsing responses from the OAuth server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nclass GoogleAppClient:\n    \"\"\"A `WebApplicationClient` for Google oauth2\"\"\"\n    def __init__(self, client_id, client_secret, code, scope, **kwargs):\n        # Implementation details\n\n    @classmethod\n    def from_file(cls, fname, code, scope, **kwargs):\n        # Implementation details\n```\n\n----------------------------------------\n\nTITLE: Lifespan Management in Starlette\nDESCRIPTION: Demonstrates how to implement application lifecycle management using async context managers for startup and shutdown operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\n\nfrom starlette.applications import Starlette\n\n\n@contextlib.asynccontextmanager\nasync def lifespan(app):\n    async with some_async_resource():\n        print(\"Run at startup!\")\n        yield\n        print(\"Run on shutdown!\")\n\n\nroutes = [\n    ...\n]\n\napp = Starlette(routes=routes, lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using Toast Notifications in FastHTML\nDESCRIPTION: Demonstrates how to configure and display toast notifications of different types (info, success, warning, error) using FastHTML. Requires the setup_toasts() function and sessions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsetup_toasts(app) # <1>\n\n@rt('/toasting')\ndef get(session):  # <2>\n    # Normally one toast is enough, this allows us to see\n    # different toast types in action.\n    add_toast(session, f\"Toast is being cooked\", \"info\")\n    add_toast(session, f\"Toast is ready\", \"success\")\n    add_toast(session, f\"Toast is getting a bit crispy\", \"warning\")\n    add_toast(session, f\"Toast is burning!\", \"error\")\n    return Titled(\"I like toast\") # <3>\n```\n\n----------------------------------------\n\nTITLE: Managing Sessions in FastHTML\nDESCRIPTION: Demonstrates session management with two routes: one for setting a session value and one for retrieving it. The example shows how session data persists across requests and how to access it within route handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/setsess\")\ndef get(sess, foo:str=''):\n    now = datetime.now()\n    sess['auth'] = str(now)\n    return f'Set to {now}'\n\n@rt(\"/getsess\")\ndef get(sess): return f'Session time: {sess[\"auth\"]}'\n\nprint(cli.get('/setsess').text)\ntime.sleep(0.01)\n\ncli.get('/getsess').text\n```\n\n----------------------------------------\n\nTITLE: JavaScript Integration in FastHTML\nDESCRIPTION: Example of including and using JavaScript with FastHTML, including CDN scripts and dynamic data injection\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \napp,rt = fast_app(hdrs=[Script(src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\")])\n@rt\ndef index():\n    data = {'somedata':'fill me in…'}\n    return Titled(\"Chart Demo\", Div(id=\"myDiv\"), Script(f\"var data = {data}; Plotly.newPlot('myDiv', data);\")\nserve()\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Headers for OPTIONS Requests\nDESCRIPTION: Sets up CORS headers for an OPTIONS request to allow cross-origin requests to a form submission endpoint. This demonstrates how to configure proper CORS headers for preflight requests in a RESTful API.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/form-submit/{list_id}\")\ndef options(list_id: str):\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': '*',\n    }\n    return Response(status_code=200, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple File Upload with FastHTML\nDESCRIPTION: Shows implementation for handling multiple file uploads simultaneously using FastHTML. Includes form setup with multiple file selection, batch processing of files, and storing them on disk.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom pathlib import Path\n\napp, rt = fast_app()\n\nupload_dir = Path(\"filez\")\nupload_dir.mkdir(exist_ok=True)\n\n@rt('/')\ndef get():\n    return Titled(\"Multiple File Upload Demo\",\n        Article(\n            Form(hx_post=upload_many, hx_target=\"#result-many\")(\n                Input(type=\"file\", name=\"files\", multiple=True),\n                Button(\"Upload\", type=\"submit\", cls='secondary'),\n            ),\n            Div(id=\"result-many\")\n        )\n    )\n\ndef FileMetaDataCard(file):\n    return Article(\n        Header(H3(file.filename)),\n        Ul(\n            Li('Size: ', file.size),            \n            Li('Content Type: ', file.content_type),\n            Li('Headers: ', file.headers),\n        )\n    )    \n\n@rt\nasync def upload_many(files: list[UploadFile]):\n    cards = []\n    for file in files:\n        cards.append(FileMetaDataCard(file))\n        filebuffer = await file.read()\n        (upload_dir / file.filename).write_bytes(filebuffer)\n    return cards\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connection Events in FastHTML\nDESCRIPTION: Example of handling the connection event in a WebSocket by implementing an on_conn function that sends a message to the client when they connect.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def on_conn(send):\n    await send(Div('Hello, world!'))\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response with Starlette in FastHTML\nDESCRIPTION: Demonstrates how to create and return a custom JSON response with specific media type using Starlette's Response class in a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom starlette.responses import Response\n\nasync def handler(request):\n    data = {\n        \"name\": \"Bo\"\n    }\n    return Response(json.dumps(data), media_type=\"application/json\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with HTMX and FastHTML in Python\nDESCRIPTION: This example shows how to create a counter application using HTMX and FastHTML. It demonstrates HTMX attributes for triggering requests and updating specific parts of the page without a full reload.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_152\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\n\ncount = 0\n\n@app.get(\"/\")\ndef home():\n    return Title(\"Count Demo\"), Main(\n        H1(\"Count Demo\"),\n        P(f\"Count is set to {count}\", id=\"count\"),\n        Button(\"Increment\", hx_post=\"/increment\", hx_target=\"#count\", hx_swap=\"innerHTML\")\n    )\n\n@app.post(\"/increment\")\ndef increment():\n    print(\"incrementing\")\n    global count\n    count += 1\n    return f\"Count is set to {count}\"\n```\n\n----------------------------------------\n\nTITLE: Installing FastHTML with pip\nDESCRIPTION: Command to install the FastHTML Python package using pip package manager.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-fasthtml\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic WebSocket Route in FastHTML\nDESCRIPTION: Example of creating a basic websocket route in FastHTML using the @app.ws decorator with connection and disconnection handlers. The main function processes incoming messages and sends responses back to the client.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.ws('/ws', conn=on_conn, disconn=on_disconn)\nasync def on_message(msg:str, send):\n    await send(Div('Hello ' + msg, id='notifications'))\n    await send(Div('Goodbye ' + msg, id='notifications'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Beforeware in FastHTML\nDESCRIPTION: Creates a beforeware function to check user authentication status and redirect to login if necessary. It skips authentication for login and OAuth callback routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_245\n\nLANGUAGE: python\nCODE:\n```\ndef before(req, session):\n    auth = req.scope['auth'] = session.get('user_id', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n    counts.xtra(name=auth)\nbware = Beforeware(before, skip=['/login', auth_callback_path])\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal FastHTML Application\nDESCRIPTION: Demonstrates the basic structure of a FastHTML application including route definition, parameter typing, and HTML generation using FastTags.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\napp,rt = fast_app()\n\nname = str_enum('names', 'Alice', 'Bev', 'Charlie')\n\n@rt\ndef foo(nm: name):\n    return Title(\"FastHTML\"), H1(\"My web app\"), P(f\"Hello, {name}!\")\nserve()\n```\n\n----------------------------------------\n\nTITLE: Server-Side Events Implementation\nDESCRIPTION: Shows how to implement SSE (Server-Side Events) with HTMX extension support.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport random\nhdrs=(Script(src=\"https://unpkg.com/htmx-ext-sse@2.2.3/sse.js\"),)\napp,rt = fast_app(hdrs=hdrs)\n\n@rt\ndef index(): return Div(hx_ext=\"sse\", sse_connect=\"/numstream\", hx_swap=\"beforeend show:bottom\", sse_swap=\"message\")\n\nshutdown_event = signal_shutdown()\n\nasync def number_generator():\n    while not shutdown_event.is_set():\n        data = Article(random.randint(1, 100))\n        yield sse_message(data)\n\n@rt\nasync def numstream(): return EventStream(number_generator())\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to FastHTML Application\nDESCRIPTION: Method to add routes to the FastHTML application. It handles route deduplication and ensures proper formatting of HTTP methods.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef add_route(self, route):\n    route.methods = [m.upper() for m in listify(route.methods)]\n    self.router.routes = [r for r in self.router.routes if not\n                   (r.path==route.path and r.name == route.name and\n                    ((route.methods is None) or (set(r.methods) == set(route.methods))))]\n    self.router.routes.append(route)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Request Testing with Starlette TestClient\nDESCRIPTION: This example demonstrates how to use Starlette's TestClient to make HTTP requests against an ASGI application for testing purposes. It creates a simple HTML response app and tests it returns a 200 status code.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_122\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import HTMLResponse\nfrom starlette.testclient import TestClient\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = HTMLResponse('<html><body>Hello, world!</body></html>')\n    await response(scope, receive, send)\n\n\ndef test_app():\n    client = TestClient(app)\n    response = client.get('/')\n    assert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Helper Function\nDESCRIPTION: Defines a helper function for creating Set-Cookie HTTP headers with various options like expiration, path, domain, and security settings. This facilitates proper cookie management in FastHTML applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_79\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef cookie(key: str, value=\"\", max_age=None, expires=None, path=\"/\", domain=None, secure=False, httponly=False, samesite=\"lax\",):\n    \"Create a 'set-cookie' `HttpHeader`\"\n    cookie = cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None: cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        cookie[key][\"expires\"] = format_datetime(expires, usegmt=True) if isinstance(expires, datetime) else expires\n    if path is not None: cookie[key][\"path\"] = path\n    if domain is not None: cookie[key][\"domain\"] = domain\n    if secure: cookie[key][\"secure\"] = True\n    if httponly: cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [ \"strict\", \"lax\", \"none\", ], \"must be 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    return HttpHeader(\"set-cookie\", cookie_val)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login GET Handler in FastHTML\nDESCRIPTION: Creates a login form with username and password fields using FastHTML components. Returns a titled page for direct access or HTMX partial for ajax requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/login\")\ndef get():\n    frm = Form(\n        Input(id='name', placeholder='Name'),\n        Input(id='pwd', type='password', placeholder='Password'),\n        Button('login'),\n        action='/login', method='post')\n    return Titled(\"Login\", frm)\n```\n\n----------------------------------------\n\nTITLE: Handling Basic Form Data in FastHTML\nDESCRIPTION: Demonstrates how to handle form data in a POST request, including error handling for missing required fields.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_305\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/profile/me')\ndef profile_update(username: str): return username\n\nr = cli.post('/profile/me', data={'username' : 'Alexis'}).text\nassert r == 'Alexis'\nprint(r)\n```\n\nLANGUAGE: python\nCODE:\n```\nr = cli.post('/profile/me', data={})\nassert r.status_code == 400\nprint(r.text)\nr\n```\n\n----------------------------------------\n\nTITLE: Accessing User-Agent Header in FastHTML (Python)\nDESCRIPTION: Demonstrates how to access the User-Agent header in a FastHTML route handler. The function returns the user agent string, and a test request is made with a custom User-Agent header.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_297\n\nLANGUAGE: python\nCODE:\n```\nasync def _(user_agent:str): return user_agent\nprint(cli.get('/ua', headers={'User-Agent':'FastHTML'}).text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord OAuth Client in Python\nDESCRIPTION: Creates a DiscordAppClient class for Discord OAuth2 authentication, including methods for generating login links and parsing responses.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DiscordAppClient(_AppClient):\n    \"A `WebApplicationClient` for Discord oauth2\"\n    base_url = \"https://discord.com/oauth2/authorize\"\n    token_url = \"https://discord.com/api/oauth2/token\"\n    revoke_url = \"https://discord.com/api/oauth2/token/revoke\"\n    info_url = \"https://discord.com/api/users/@me\"\n    id_key = 'id'\n\n    def __init__(self, client_id, client_secret, is_user=False, perms=0, scope=None, **kwargs):\n        if not scope: scope=\"applications.commands applications.commands.permissions.update identify\"\n        self.integration_type = 1 if is_user else 0\n        self.perms = perms\n        super().__init__(client_id, client_secret, scope=scope, **kwargs)\n\n    def login_link(self, redirect_uri=None, scope=None, state=None):\n        use_scope = scope or self.scope\n        d = dict(response_type='code', client_id=self.client_id,\n                 integration_type=self.integration_type, scope=use_scope)\n        if state: d['state'] = state\n        if redirect_uri: d['redirect_uri'] = redirect_uri\n        return f'{self.base_url}?' + urlencode(d)\n\n    def parse_response(self, code, redirect_uri=None):\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        data = dict(grant_type='authorization_code', code=code)\n        if redirect_uri: data['redirect_uri'] = redirect_uri\n        r = httpx.post(self.token_url, data=data, headers=headers, auth=(self.client_id, self.client_secret))\n        r.raise_for_status()\n        self.parse_request_body_response(r.text)\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Path Parameter in Python\nDESCRIPTION: Demonstrates how to define a route with a path parameter in FastHTML. The function uses the path parameter to create a personalized greeting.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@rt('/user/{nm}', name='gday')\ndef get(nm:str=''): return f\"Good day to you, {nm}!\"\ncli.get('/user/Alexis').text\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Reference with HTMX Integration\nDESCRIPTION: Shows how to use the .to() method for dynamic route references and HTMX integration, allowing for automatic POST request handling on div click.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_278\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef autopost(): return Html(Div('Text.', hx_post=yoyo.to()))\nprint(cli.get('/autopost').text)\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Method Shortcuts with APIRouters\nDESCRIPTION: Demonstrates using the HTTP method shortcut decorators for both regular and prefixed APIRouters. Shows three different patterns of route definition with the shortcut methods.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_77\n\nLANGUAGE: python\nCODE:\n```\n@ar.get\ndef hi2(): return 'Hi there'\n@ar.get(\"/hi3\")\ndef _(): return 'Hi there'\n@ar.post(\"/post2\")\ndef _(): return 'Postal'\n\n@ar2.get\ndef hi2(): return 'Hi there'\n@ar2.get(\"/hi3\")\ndef _(): return 'Hi there'\n@ar2.post(\"/post2\")\ndef _(): return 'Postal'\n```\n\n----------------------------------------\n\nTITLE: Global Error Handler for Starlette Applications\nDESCRIPTION: This example demonstrates how to create a global error handler for all exceptions in a Starlette application. It can be registered using either Exception or the status code 500 as the key.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_121\n\nLANGUAGE: python\nCODE:\n```\nasync def handle_error(request: Request, exc: HTTPException):\n    # Perform some logic\n    return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\nexception_handlers = {\n    Exception: handle_error  # or \"500: handle_error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login POST Handler with Authentication\nDESCRIPTION: Handles login form submission by validating credentials against a user database. Implements secure password comparison and session management.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Login: name:str; pwd:str\n\n@rt(\"/login\")\ndef post(login:Login, sess):\n    if not login.name or not login.pwd: return login_redir\n    try: u = users[login.name]\n    except NotFoundError: u = users.insert(login)\n    if not compare_digest(u.pwd.encode(\"utf-8\"), login.pwd.encode(\"utf-8\")): return login_redir\n    sess['auth'] = u.name\n    return RedirectResponse('/', status_code=303)\n```\n\n----------------------------------------\n\nTITLE: Creating a Books Application with FastHTML\nDESCRIPTION: Demonstrates how to create a basic books application with FastHTML, showing route definitions and HTML generation with the Titled and P components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_255\n\nLANGUAGE: python\nCODE:\n```\nbooks_app, rt = fast_app()\n\nbooks = ['A Guide to FastHTML', 'FastHTML Cookbook', 'FastHTML in 24 Hours']\n\n@rt(\"/\", name=\"list\")\ndef get():\n    return Titled(\"Books\", *[P(book) for book in books])\n```\n\n----------------------------------------\n\nTITLE: Implementing APIRouter Class for FastHTML\nDESCRIPTION: Defines the APIRouter class that provides a way to group routes with a common prefix. This implementation includes methods for adding routes, websocket endpoints, and applying the routes to a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n#| export\nclass APIRouter:\n    \"Add routes to an app\"\n    def __init__(self, prefix:str|None=None, body_wrap=noop_body):\n        self.routes,self.wss = [],[]\n        self.rt_funcs = RouteFuncs()  # Store wrapped route function for discoverability\n        self.prefix = prefix if prefix else \"\"\n        self.body_wrap = body_wrap\n\n    def _wrap_func(self, func, path=None):\n        name = func.__name__\n        wrapped = _mk_locfunc(func, path)\n        wrapped.__routename__ = name\n        # If you are using the def get or def post method names, this approach is not supported\n        if name not in all_meths: setattr(self.rt_funcs, name, wrapped)\n        return wrapped\n\n    def __call__(self, path:str=None, methods=None, name=None, include_in_schema=True, body_wrap=None):\n        \"Add a route at `path`\"\n        def f(func):\n            p = self.prefix + (\"/\" + ('' if path.__name__=='index' else func.__name__) if callable(path) else path)\n            wrapped = self._wrap_func(func, p)\n            self.routes.append((func, p, methods, name, include_in_schema, body_wrap or self.body_wrap))\n            return wrapped\n        return f(path) if callable(path) else f\n\n    def __getattr__(self, name):\n        try: return getattr(self.rt_funcs, name)\n        except AttributeError: return super().__getattr__(self, name)\n\n    def to_app(self, app):\n        \"Add routes to `app`\"\n        for args in self.routes: app._add_route(*args)\n        for args in self.wss: app._add_ws(*args)\n\n    def ws(self, path:str, conn=None, disconn=None, name=None, middleware=None):\n        \"Add a websocket route at `path`\"\n        def f(func=noop): return self.wss.append((func, f\"{self.prefix}{path}\", conn, disconn, name, middleware))\n        return f\n```\n\n----------------------------------------\n\nTITLE: Creating an OAuth Client in FastHTML\nDESCRIPTION: Demonstrates how to create a Google OAuth client using environment variables for client ID and secret. This is used to facilitate OAuth-based authentication in FastHTML applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_241\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom fasthtml.oauth import GoogleAppClient\nclient = GoogleAppClient(os.getenv(\"AUTH_CLIENT_ID\"),\n                         os.getenv(\"AUTH_CLIENT_SECRET\"))\n```\n\n----------------------------------------\n\nTITLE: Disabling PyLance completely for FastHTML projects\nDESCRIPTION: This JSON configuration completely disables PyLance for all files in the project, which can be useful if you're still seeing false errors after adjusting the diagnostic settings.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/faq.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.analysis.ignore\": [  \"*\"  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSockets in FastHTML\nDESCRIPTION: Shows how to set up and use WebSockets in FastHTML with the HTMX websockets extension. Includes examples of handling WebSocket connections, messages, and disconnections.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# These HTMX extensions are available through `exts`:\n#   head-support preload class-tools loading-states multi-swap path-deps remove-me ws chunked-transfer\napp, rt = fast_app(exts='ws')\n\ndef mk_inp(): return Input(id='msg', autofocus=True)\n\n@rt\nasync def index(request):\n    # `ws_send` tells HTMX to send a message to the nearest websocket based on the trigger for the form element\n    cts = Div(\n        Div(id='notifications'),\n        Form(mk_inp(), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\nasync def on_connect(send): await send(Div('Hello, you have connected', id=\"notifications\"))\nasync def on_disconnect(ws): print('Disconnected!')\n\n@app.ws('/ws', conn=on_connect, disconn=on_disconnect)\nasync def ws(msg:str, send):\n    # websocket hander returns/sends are treated as OOB swaps\n    await send(Div('Hello ' + msg, id=\"notifications\"))\n    return Div('Goodbye ' + msg, id=\"notifications\"), mk_inp()\n```\n\n----------------------------------------\n\nTITLE: Adding Route to FastHTML Application\nDESCRIPTION: Method to add a route to the FastHTML application. It handles route creation, naming, and method assignment.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef _add_route(self:FastHTML, func, path, methods, name, include_in_schema, body_wrap):\n    n,fn,p = name,nested_name(func),None if callable(path) else path\n    if methods: m = [methods] if isinstance(methods,str) else methods\n    elif fn in all_meths and p is not None: m = [fn]\n    else: m = ['get','post']\n    if not n: n = fn\n    if not p: p = '/'+('' if fn=='index' else fn)\n    route = Route(p, endpoint=self._endp(func, body_wrap or self.body_wrap), methods=m, name=n, include_in_schema=include_in_schema)\n    self.add_route(route)\n    lf = _mk_locfunc(func, p)\n    lf.__routename__ = n\n    return lf\n```\n\n----------------------------------------\n\nTITLE: Creating Forms with MonsterUI in FastHTML\nDESCRIPTION: Demonstrates how to create styled and spaced forms using MonsterUI components in FastHTML. The example creates an emergency contact form.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef MonsterForm():\n    relationship = [\"Parent\",'Sibling', \"Friend\", \"Spouse\", \"Significant Other\", \"Relative\", \"Child\", \"Other\"]\n    return Div(\n        DivCentered(\n            H3(\"Emergency Contact Form\"),\n            P(\"Please fill out the form completely\", cls=TextPresets.muted_sm)),\n        Form(\n            Grid(LabelInput(\"Name\",id='name'),LabelInput(\"Email\",     id='email')),\n            H3(\"Relationship to patient\"),\n            Grid(*[LabelCheckboxX(o) for o in relationship], cols=4, cls='space-y-3'),\n            DivCentered(Button(\"Submit Form\", cls=ButtonT.primary))),\n        cls='space-y-4')\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Todo List Page Handler\nDESCRIPTION: Renders the main todo list page with add form, sortable todo items, and HTMX integration for dynamic updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef get(auth):\n    title = f\"{auth}'s Todo list\"\n    top = Grid(H1(title), Div(A('logout', href='/logout'), style='text-align: right'))\n    new_inp = Input(id=\"new-title\", name=\"title\", placeholder=\"New Todo\")\n    add = Form(Group(new_inp, Button(\"Add\")),\n               hx_post=\"/\", target_id='todo-list', hx_swap=\"afterbegin\")\n    frm = Form(*todos(order_by='priority'),\n               id='todo-list', cls='sortable', hx_post=\"/reorder\", hx_trigger=\"end\")\n    card = Card(Ul(frm), header=add, footer=Div(id='current-todo'))\n    return Title(title), Container(top, card)\n```\n\n----------------------------------------\n\nTITLE: Implementing API Routing in FastHTML with Python\nDESCRIPTION: This code demonstrates how to use APIRouter to organize routes across multiple files in a FastHTML application. It shows the definition of routes in a separate file and how to incorporate them into the main application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# products.py\nar = APIRouter()\n\n@ar\ndef details(pid: int): return f\"Here are the product details for ID: {pid}\"\n\n@ar\ndef all_products(req):\n    return Div(\n        Div(\n            Button(\"Details\",hx_get=details.to(pid=42),hx_target=\"#products_list\",hx_swap=\"outerHTML\",),\n        ), id=\"products_list\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom products import ar,all_products\n\napp, rt = fast_app()\nar.to_app(app)\n\n@rt\ndef index():\n    return Div(\n        \"Products\",\n        hx_get=all_products, hx_swap=\"outerHTML\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Reordering Handler\nDESCRIPTION: Handles todo list reordering through HTMX POST requests with automatic form data parsing and priority updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/reorder\")\ndef post(id:list[int]):\n    for i,id_ in enumerate(id): todos.update({'priority':i}, id_)\n    return tuple(todos(order_by='priority'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Host-based Routing in Starlette\nDESCRIPTION: Demonstrates how to set up host-based routing using different approaches including direct router instantiation, app.host() method, and router.routes.append(). Shows how to handle different domains with separate routers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nsite = Router()  # Use eg. `@site.route()` to configure this.\napi = Router()  # Use eg. `@api.route()` to configure this.\nnews = Router()  # Use eg. `@news.route()` to configure this.\n\nroutes = [\n    Host('api.example.org', api, name=\"site_api\")\n]\n\napp = Starlette(routes=routes)\n\napp.host('www.example.org', site, name=\"main_site\")\n\nnews_host = Host('news.example.org', news)\napp.router.routes.append(news_host)\n```\n\n----------------------------------------\n\nTITLE: Client Class for Testing FastHTML Applications\nDESCRIPTION: A simple httpx ASGI client for testing FastHTML applications without requiring async syntax. It provides methods for various HTTP requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nclass Client:\n    \"A simple httpx ASGI client that doesn't require `async`\"\n    def __init__(self, app, url=\"http://testserver\"):\n        self.cli = AsyncClient(transport=ASGITransport(app), base_url=url)\n\n    def _sync(self, method, url, **kwargs):\n        async def _request(): return await self.cli.request(method, url, **kwargs)\n        with from_thread.start_blocking_portal() as portal: return portal.call(_request)\n\nfor o in ('get', 'post', 'delete', 'put', 'patch', 'options'): setattr(Client, o, partialmethod(Client._sync, o))\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Starlette\nDESCRIPTION: Code snippet showing how to access and process uploaded files in a Starlette request handler. This demonstrates extracting filename, content type, and file contents.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    inp = await request.form()\n    uploaded_file = inp[\"filename\"]\n    filename = uploaded_file.filename           # abc.png\n    content_type = uploaded.content_type    # MIME type, e.g. image/png\n    content = await uploaded_file.read()       # image content\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Helpers in Python\nDESCRIPTION: A set of helper functions and class extensions for Google OAuth, including methods to get consent URL, update and save credentials, and create Credentials objects from client information.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from google.oauth2.credentials import Credentials\n    from google.auth.transport.requests import Request\nexcept ImportError:\n    Request=None\n    class Credentials: pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch()\ndef consent_url(self:GoogleAppClient, proj=None):\n    \"Get Google OAuth consent screen URL\"\n    loc = \"https://console.cloud.google.com/auth/clients\"\n    if proj is None: proj=self.project_id\n    return f\"{loc}/{self.client_id}?project={proj}\"\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef update(self:Credentials):\n    \"Refresh the credentials if they are expired, and return them\"\n    if self.expired: self.refresh(Request())\n    return self\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef save(self:Credentials, fname):\n    \"Save credentials to `fname`\"\n    save_pickle(fname, self)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef load_creds(fname):\n    \"Load credentials from `fname`\"\n    return load_pickle(fname).update()\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef creds(self:GoogleAppClient):\n    \"Create `Credentials` from the client, refreshing if needed\"\n    return Credentials(token=self.access_token, refresh_token=self.refresh_token, \n        token_uri=self.token_url, client_id=self.client_id,\n        client_secret=self.client_secret, scopes=self.scope).update()\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Route Handler\nDESCRIPTION: Example of adding an interactive route handler that responds to HTMX requests by returning new content to replace existing elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/index.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@rt('/change')\ndef get(): return P('Nice to be here!')\n```\n\n----------------------------------------\n\nTITLE: Custom Route Authentication Decorator Implementation\nDESCRIPTION: Implementation of a basic authentication decorator for protecting FastHTML routes with token-based authentication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_253\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\n\ndef basic_auth(f):\n    @wraps(f)\n    async def wrapper(req, *args, **kwargs):\n        token = req.headers.get(\"Authorization\")\n        if token == 'abc123':\n            return await f(req, *args, **kwargs)\n        return Response('Not Authorized', status_code=401)\n    return wrapper\n\n@app.get(\"/protected\")\n@basic_auth\nasync def protected(req):\n    return \"Protected Content\"\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in FastHTML Routes\nDESCRIPTION: Demonstrates how to use path parameters in FastHTML route definitions and how to access them in the route handler function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_161\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/user/{nm}')\ndef _(nm:str): return f\"Good day to you, {nm}!\"\n\ncli.get('/user/jph').text\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError in FastHTML Database\nDESCRIPTION: Shows how to handle the NotFoundError exception which is raised when trying to access a record that doesn't exist in the database.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntry: users['Amy']\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Mounting a FastHTML Application in Main Module\nDESCRIPTION: Shows how to mount a FastHTML application in the main module using Mount from starlette. Includes examples of creating links to routes both manually and using named routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_256\n\nLANGUAGE: python\nCODE:\n```\nfrom books import books_app\n\napp, rt = fast_app(routes=[Mount(\"/books\", books_app, name=\"books\")])\n\n@rt(\"/\")\ndef get():\n    return Titled(\"Dashboard\",\n        P(A(href=\"/books\")(\"Books\")),\n        Hr(),\n        P(A(link=uri(\"books:list\"))(\"Books\")),\n    )\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Returning HTML Components\nDESCRIPTION: Creating a route that returns FastHTML components which are automatically converted to HTML when sent as a response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef ft1(): return Html(Div('Text.'))\nprint(cli.get('/ft1').text)\n```\n\n----------------------------------------\n\nTITLE: Route Parameter Handling with Type Conversion\nDESCRIPTION: Shows route parameter handling with type conversion in FastHTML. The example defines a route with path parameters for name (string) and age (integer), demonstrating both successful conversion and error handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\napp,cli,rt = get_cli(FastHTML())\n\n@rt(\"/{name}/{age}\")\ndef get(name: str, age: int):\n    return Titled(f\"Hello {name.title()}, age {age}\")\n\nassert '<title>Hello Uma, age 5</title>' in cli.get('/uma/5').text\nassert '404 Not Found' in cli.get('/uma/five').text\n```\n\n----------------------------------------\n\nTITLE: Using Custom Classes for Structured Form Data in FastHTML\nDESCRIPTION: Demonstrates how to use custom classes to define structured form data and handle it in a FastHTML route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_311\n\nLANGUAGE: python\nCODE:\n```\nclass Bodie2:\n    a:int|None; b:str\n    def __init__(self, a, b='foo'): store_attr()\n\n@app.post(\"/bodie2/\")\ndef bodie(d:Bodie2): return f\"a: {d.a}; b: {d.b}\"\nprint(cli.post('/bodie2/', data={'a':1}).text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Data Class and POST Handler\nDESCRIPTION: Handles login form submission with automatic form data parsing into a Login dataclass. Validates credentials and manages user sessions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Login: name:str; pwd:str\n\n@rt(\"/login\")\ndef post(login:Login, sess):\n    if not login.name or not login.pwd: return login_redir\n    try: u = users[login.name]\n    except NotFoundError: u = users.insert(login)\n    if not compare_digest(u.pwd.encode(\"utf-8\"), login.pwd.encode(\"utf-8\")): return login_redir\n    sess['auth'] = u.name\n    return RedirectResponse('/', status_code=303)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Starlette Response\nDESCRIPTION: Demonstrates how to add custom HTTP headers to a response using Starlette's Response class in a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nheaders = {\n\t\"x-extra-key\": \"value\"\n}\nreturn Response(content, status_code=200, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Message Sending and Endpoint Creation in Python\nDESCRIPTION: Functions for sending messages via WebSocket and creating WebSocket endpoints. The _send_ws function converts responses to XML when appropriate. The _ws_endp function creates a WebSocketEndpoint class with appropriate handlers for connect, disconnect, and receive events.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nasync def _send_ws(ws, resp):\n    if not resp: return\n    res = to_xml(resp, indent=fh_cfg.indent) if isinstance(resp, (list,tuple,FT)) or hasattr(resp, '__ft__') else resp\n    await ws.send_text(res)\n\ndef _ws_endp(recv, conn=None, disconn=None):\n    cls = type('WS_Endp', (WebSocketEndpoint,), {\"encoding\":\"text\"})\n\n    async def _generic_handler(handler, ws, data=None):\n        wd = _wrap_ws(ws, loads(data) if data else {}, _params(handler))\n        resp = await _handle(handler, wd)\n        if resp: await _send_ws(ws, resp)\n\n    async def _connect(self, ws):\n        await ws.accept()\n        await _generic_handler(conn, ws)\n\n    async def _disconnect(self, ws, close_code): await _generic_handler(disconn, ws)\n    async def _recv(self, ws, data): await _generic_handler(recv, ws, data)\n\n    if    conn: cls.on_connect    = _connect\n    if disconn: cls.on_disconnect = _disconnect\n    cls.on_receive = _recv\n    return cls\n```\n\n----------------------------------------\n\nTITLE: WebSocket Decorator for FastHTML\nDESCRIPTION: Decorator method to easily add WebSocket routes to a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef ws(self:FastHTML, path:str, conn=None, disconn=None, name=None, middleware=None):\n    \"Add a websocket route at `path`\"\n    def f(func=noop): return self._add_ws(func, path, conn, disconn, name=name, middleware=middleware)\n    return f\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Implementation with Fabric.js\nDESCRIPTION: Implements drawing functionality using Fabric.js, including color picker and brush size controls with integrated JavaScript.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_130\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    canvas = Canvas(id=\"canvas\", width=\"800\", height=\"600\")\n    color_picker = Input(type=\"color\", id=\"color-picker\", value=\"#3CDD8C\")\n    brush_size = Input(type=\"range\", id=\"brush-size\", min=\"1\", max=\"50\", value=\"10\")\n    \n    js = \"\"\"\n    var canvas = new fabric.Canvas('canvas');\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = '#3CDD8C';\n    canvas.freeDrawingBrush.width = 10;\n    \n    document.getElementById('color-picker').onchange = function() {\n        canvas.freeDrawingBrush.color = this.value;\n    };\n    \n    document.getElementById('brush-size').oninput = function() {\n        canvas.freeDrawingBrush.width = parseInt(this.value, 10);\n    };\n    \"\"\"\n    \n    return Titled(f\"Room: {room.name}\",\n                  A(Button(\"Leave Room\"), href=\"/\"),\n                  canvas,\n                  Div(color_picker, brush_size),\n                  Script(src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js\"),\n                  Script(js))\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Item Component Rendering\nDESCRIPTION: Defines how Todo items are rendered as HTML components with HTMX integration for dynamic updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef __ft__(self:Todo):\n    show = AX(self.title, f'/todos/{self.id}', 'current-todo')\n    edit = AX('edit',     f'/edit/{self.id}' , 'current-todo')\n    dt = '✅ ' if self.done else ''\n    cts = (dt, show, ' | ', edit, Hidden(id=\"id\", value=self.id), Hidden(id=\"priority\", value=\"0\"))\n    return Li(*cts, id=f'todo-{self.id}')\n```\n\n----------------------------------------\n\nTITLE: Creating EventStream Response for Server-Sent Events in FastHTML\nDESCRIPTION: Illustrates how to implement server-sent events using EventStream. It creates a generator function that yields messages at intervals, which are then sent to the client as an event stream.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/response_types.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\n\ndef counter():\n    \"\"\"Counter is an generator that\n        publishes a number every second.\n    \"\"\"\n    for i in range(3):\n        yield sse_message(f\"Event {i}\")\n        sleep(1)\n\n@rt('/stream')\ndef get():\n    return EventStream(counter())\n```\n\nLANGUAGE: python\nCODE:\n```\nresp = cli.get('/stream')\nprint(resp.text)\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters with Default Values in Python\nDESCRIPTION: Shows how to use query parameters with default values in FastHTML. The example demonstrates handling both provided and default values for query parameters.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfake_db = [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n\n@rt(\"/items/\")\ndef get(idx:int|None = 0): return fake_db[idx]\nprint(cli.get('/items/?idx=1').text)\n\nprint(cli.get('/items/').text)\n\nprint(cli.get('/items/?idx=g'))\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with BaseHTTPMiddleware in Starlette\nDESCRIPTION: Demonstrates a higher-level approach to middleware using BaseHTTPMiddleware, which provides request and response objects. This approach is more convenient for most HTTP processing needs like adding headers or modifying responses.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass CustomHeaderMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        # do something before pass to next middleware\n        response = await call_next(request)\n        # do something after next middleware returned\n        response.headers['X-Author'] = 'John'\n        return response\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Background Tasks in FastHTML\nDESCRIPTION: An example showing how to add and execute multiple background tasks from a single handler. The tasks are executed in order, and an exception in one task will prevent subsequent tasks from executing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/background_tasks.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.background import BackgroundTasks\n\n@rt\nasync def signup(email, username):\n    tasks = BackgroundTasks()\n    tasks.add_task(send_welcome_email, to_address=email)\n    tasks.add_task(send_admin_notification, username=username)\n    return Titled('Signup successful!'), tasks\n\nasync def send_welcome_email(to_address):\n    ...\n\nasync def send_admin_notification(username):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Diagram Rendering with MermaidJS\nDESCRIPTION: Creates a MermaidJS component that renders diagrams from textual descriptions. Processes elements with the specified selector and converts their content into SVG diagrams using Mermaid.js.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef MermaidJS(\n        sel='.language-mermaid',  # CSS selector for mermaid elements\n        theme='base',  # Mermaid theme to use\n    ):\n    \"Implements browser-based Mermaid diagram rendering.\"\n    src = \"\"\"\nimport mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n\nmermaid.initialize({\n    startOnLoad: false,\n    theme: '%s',\n    securityLevel: 'loose',\n    flowchart: { useMaxWidth: false, useMaxHeight: false }\n});\n\nfunction renderMermaidDiagrams(element, index) {\n    try {\n        const graphDefinition = element.textContent;\n        const graphId = `mermaid-diagram-${index}`;\n        mermaid.render(graphId, graphDefinition)\n            .then(({svg, bindFunctions}) => {\n                element.innerHTML = svg;\n                bindFunctions?.(element);\n            })\n            .catch(error => {\n                console.error(`Error rendering Mermaid diagram ${index}:`, error);\n                element.innerHTML = `<p>Error rendering diagram: ${error.message}</p>`;\n            });\n    } catch (error) {\n        console.error(`Error processing Mermaid diagram ${index}:`, error);\n    }\n}\n\n// Assuming proc_htmx is a function that triggers rendering\nproc_htmx('%s', renderMermaidDiagrams);\n\"\"\" % (theme, sel)\n    return Script(src, type='module')\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Todo Handler in Python with FastHTML\nDESCRIPTION: Route handler for creating a new todo item. Inserts new todo and returns it along with cleared input field using HTMX out-of-band swap.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef post(todo:Todo):\n    new_inp =  Input(id=\"new-title\", name=\"title\", placeholder=\"New Todo\", hx_swap_oob='true')\n    return todos.insert(todo), new_inp\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Request Object in Python\nDESCRIPTION: Demonstrates how to use the url_for method of the request object to generate URLs for named routes. This method is useful for generating absolute URLs.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@rt('/link')\ndef get(req): return f\"{req.url_for('gday', nm='Alexis')}; {req.url_for('show_host')}\"\n\ncli.get('/link').text\n```\n\n----------------------------------------\n\nTITLE: Implementing Toasts in FastHTML\nDESCRIPTION: Explains how to set up and use toasts (notifications) in FastHTML. Demonstrates different toast types and how to add them to a session.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsetup_toasts(app)\n\n@rt\ndef toasting(session):\n    add_toast(session, f\"cooked\", \"info\")\n    add_toast(session, f\"ready\", \"success\")\n    return Titled(\"toaster\")\n```\n\n----------------------------------------\n\nTITLE: Organizing Routes from Different Modules in Starlette\nDESCRIPTION: Demonstrates how to import and combine routes from different project modules, creating a modular application structure.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nfrom myproject import users, auth\n\nroutes = [\n    Route('/', homepage),\n    Mount('/users', routes=users.routes),\n    Mount('/auth', routes=auth.routes),\n]\n```\n\n----------------------------------------\n\nTITLE: Filling HTML Form with Object Data in Python\nDESCRIPTION: This function fills a given HTML form with data from an object. It supports both dataclasses and dictionaries as input objects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef fill_form(form:FT, obj)->FT:\n    \"Fills named items in `form` using attributes in `obj`\"\n    if is_dataclass(obj): obj = asdict(obj)\n    elif not isinstance(obj,dict): obj = obj.__dict__\n    return _fill_item(form, obj)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in FastHTML\nDESCRIPTION: Implements an endpoint that receives multiple uploaded files and returns their contents concatenated. The example shows both route definition with UploadFile type handling and the client request with response checking.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/uploads\")\nasync def post(files:list[UploadFile]):\n    return ','.join([(await file.read()).decode() for file in files])\n\nres = cli.post('/uploads', files=files)\nprint(res.status_code)\nprint(res.text)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Message Board with FastHTML in Python\nDESCRIPTION: This snippet demonstrates how to create a basic message board application using FastHTML. It includes routes for displaying messages, a form for adding new messages, and handling POST requests to update the message list.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_151\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\nmessages = [\"This is a message, which will get rendered as a paragraph\"]\n\n@app.get(\"/\")\ndef home():\n    return Main(H1('Messages'), \n                *[P(msg) for msg in messages],\n                A(\"Link to Page 2 (to add messages)\", href=\"/page2\"))\n\n@app.get(\"/page2\")\ndef page2():\n    return Main(P(\"Add a message with the form below:\"),\n                Form(Input(type=\"text\", name=\"data\"),\n                     Button(\"Submit\"),\n                     action=\"/\", method=\"post\"))\n\n@app.post(\"/\")\ndef add_message(data:str):\n    messages.append(data)\n    return home()\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Events (SSE) in FastHTML with Python\nDESCRIPTION: This code snippet shows how to implement Server-Side Events (SSE) in FastHTML. It demonstrates setting up an SSE connection, creating an event stream, and handling shutdown events.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport random\nhdrs=(Script(src=\"https://unpkg.com/htmx-ext-sse@2.2.3/sse.js\"),)\napp,rt = fast_app(hdrs=hdrs)\n\n@rt\ndef index(): return Div(hx_ext=\"sse\", sse_connect=\"/numstream\", hx_swap=\"beforeend show:bottom\", sse_swap=\"message\")\n\n# `signal_shutdown()` gets an event that is set on shutdown\nshutdown_event = signal_shutdown()\n\nasync def number_generator():\n    while not shutdown_event.is_set():\n        data = Article(random.randint(1, 100))\n        yield sse_message(data)\n\n@rt\nasync def numstream(): return EventStream(number_generator())\n```\n\n----------------------------------------\n\nTITLE: Automatic Custom Component Creation in FastHTML\nDESCRIPTION: Shows how FastHTML can automatically generate component functions for custom HTML tags that don't exist in standard HTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_267\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.components import Some_never_before_used_tag\n\nSome_never_before_used_tag()\n```\n\n----------------------------------------\n\nTITLE: Processing Stripe Refunds in Python\nDESCRIPTION: This function processes refunds for Stripe payments. It retrieves the payment record, creates a refund using the Stripe API, and updates the payment status in the database.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/refund\", methods=[\"POST\"])\nasync def refund(sess, checkout_sid:str):\n    # Get payment record from database\n    payment = payments[checkout_sid]\n    \n    if not payment or payment.payment_status != 'paid':\n        return P(\"Error: Payment not found or not eligible for refund\")\n    \n    try:\n        # Get the payment intent ID from the checkout session\n        checkout_session = stripe.checkout.Session.retrieve(checkout_sid)\n        \n        # Process the refund\n        refund = stripe.Refund.create(payment_intent=checkout_session.payment_intent, reason=\"requested_by_customer\")\n        \n        # Update payment status in database\n        payments.update(Payment(checkout_session_id= checkout_sid, payment_status=\"refunded\"))\n        \n        return Div(\n            P(\"Refund processed successfully!\"),\n            P(f\"Refund ID: {refund.id}\"))\n    \n    except Exception as e: return P(f\"Refund failed: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Inserting Publication Records in FastHTML MiniDataAPI\nDESCRIPTION: Demonstrates inserting publication records using different input formats, including a class instance, keyword arguments, and a dictionary. Shows how the inserted record is returned.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_201\n\nLANGUAGE: python\nCODE:\n```\npublications.insert(Publication(authors='Alma', year=2019, title='FastHTML'))\npublications.insert(authors='Alma', year=2030, title='FastHTML and beyond')\npublication= publications.insert((dict(authors='Alma', year=2035, title='FastHTML, the early years')))\npublication\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Attribute Mapping Function\nDESCRIPTION: Defines a custom attribute mapping function that extends the standard attrmap to handle special attributes like those starting with '@' (for JavaScript event handlers). These are used in the HTML component creation functions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef attrmap_x(o):\n    if o.startswith('_at_'): o = '@'+o[4:]\n    return attrmap(o)\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in FastHTML\nDESCRIPTION: Demonstrates asynchronous file upload handling using Starlette's UploadFile type. The POST route reads and returns the contents of the uploaded file.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/upload\")\nasync def post(uf:UploadFile): return (await uf.read()).decode()\n\nwith open('../../CHANGELOG.md', 'rb') as f:\n    print(cli.post('/upload', files={'uf':f}, data={'msg':'Hello'}).text[:15])\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in FastHTML\nDESCRIPTION: Demonstrates how to set and retrieve cookies in FastHTML applications, including parsing date values from cookies.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom IPython.display import HTML\n\n@rt(\"/settimestamp\")\ndef get(req):\n    now = datetime.now()\n    return P(f'Set to {now}'), cookie('now', datetime.now())\n\nHTML(client.get('/settimestamp').text)\n\n@rt('/gettimestamp')\ndef get(now:parsed_date): return f'Cookie was set at time {now.time()}'\n\nclient.get('/gettimestamp').text\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Cookies in FastHTML\nDESCRIPTION: Demonstrates how to set and retrieve cookies using FastHTML and Starlette Response objects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_165\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\n@app.get(\"/setcookie\")\ndef setc(req):\n    now = datetime.now()\n    res = Response(f'Set to {now}')\n    res.set_cookie('now', str(now))\n    return res\n\ncli.get('/setcookie').text\n\n@app.get(\"/getcookie\")\ndef getc(now:parsed_date): return f'Cookie was set at time {now.time()}'\n\ncli.get('/getcookie').text\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Sent Events (SSE) Message in Python\nDESCRIPTION: This function converts an HTML element into a format suitable for Server-Sent Events (SSE) streaming.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef sse_message(elm, event='message'):\n    \"Convert element `elm` into a format suitable for SSE streaming\"\n    data = '\\n'.join(f'data: {o}' for o in to_xml(elm).splitlines())\n    return f'event: {event}\\n{data}\\n\\n'\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Todo Handler in Python with FastHTML\nDESCRIPTION: Route handler for deleting a todo item. Uses path parameter for ID and returns a clear details view using HTMX's out-of-band swap feature.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/todos/{id}\")\ndef delete(id:int):\n    todos.delete(id)\n    return clr_details()\n```\n\n----------------------------------------\n\nTITLE: OAuth Callback and User Session Management in Python FastHTML\nDESCRIPTION: Implements Github OAuth callback handling, user session management and basic counter functionality. Includes routes for authentication, home page, increment counter and logout.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_249\n\nLANGUAGE: python\nCODE:\n```\n@app.get(auth_callback_path)\ndef auth_redirect(code:str, request, session):\n    redir = redir_url(request, auth_callback_path)\n    user_info = client.retr_info(code, redir)\n    user_id = user_info[client.id_key] # get their ID\n    session['user_id'] = user_id # save ID in the session\n    # create a db entry for the user\n    if user_id not in counts: counts.insert(name=user_id, count=0)\n    return RedirectResponse('/', status_code=303)\n\n@app.get('/')\ndef home(auth):\n    return Div(\n        P(\"Count demo\"),\n        P(f\"Count: \", Span(counts[auth].count, id='count')),\n        Button('Increment', hx_get='/increment', hx_target='#count'),\n        P(A('Logout', href='/logout'))\n    )\n\n@app.get('/increment')\ndef increment(auth):\n    c = counts[auth]\n    c.count += 1\n    return counts.upsert(c).count\n\n@app.get('/logout')\ndef logout(session):\n    session.pop('user_id', None)\n    return RedirectResponse('/login', status_code=303)\n```\n\n----------------------------------------\n\nTITLE: Integrating APIRouter with FastHTML App and Referencing Routes\nDESCRIPTION: This snippet demonstrates how to integrate an APIRouter instance with a FastHTML application and reference route functions from the router. It shows importing the router, attaching it to the app, and using route functions in HTMX attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n# main.py\n# from products import ar\n\napp, rt = fast_app()\nar.to_app(app)\n\n@rt\ndef index():\n    return Div(\n        \"Click me for a look at our products\",\n        hx_get=ar.rt_funcs.all_products,\n        hx_swap=\"outerHTML\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with BaseHTTPMiddleware in Starlette\nDESCRIPTION: Shows how to create middleware in Starlette by extending the BaseHTTPMiddleware class. This higher-level approach simplifies middleware implementation by providing a request object and handling ASGI details automatically.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass CustomHeaderMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        # do something before pass to next middleware\n        response = await call_next(request)\n        # do something after next middleware returned\n        response.headers['X-Author'] = 'John'\n        return response\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Starlette\nDESCRIPTION: Demonstrates the structure of request headers in Starlette. Headers include information about the client, browser, accepted content types, language preferences, and cookies.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n{\n    'host': 'example.com:8080', \n    'connection': 'keep-alive', \n    'cache-control': 'max-age=0', \n    'sec-ch-ua': 'Google Chrome 80', \n    'dnt': '1', \n    'upgrade-insecure-requests': '1', \n    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) ...',\n    'sec-fetch-dest': 'document', \n    'accept': 'text/html,image/apng,*/*;q=0.8;v=b3;q=0.9', \n    'sec-origin-policy': '0', \n    'sec-fetch-site': 'none', \n    'sec-fetch-mode': 'navigate', \n    'sec-fetch-user': '?1', \n    'accept-encoding': 'gzip, deflate, br', \n    'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6', \n    'cookie': 'session=eyJhZG1pbl91c2_KiQ...'\n}\n```\n\n----------------------------------------\n\nTITLE: Running FastHTML Application\nDESCRIPTION: Command to run a FastHTML web application on localhost:5001\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py  # access via localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Background Task in FastHTML\nDESCRIPTION: A basic example showing how to create and use a background task in FastHTML. The example demonstrates a counter function that runs in the background while the handler returns an immediate response to the user.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/background_tasks.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom starlette.background import BackgroundTask\nfrom time import sleep\n\napp, rt = fast_app()\n\ndef counter(loops:int): # <1>\n    \"Slowly print integers to the terminal\"\n    for i in range(loops):\n        print(i)\n        sleep(i)\n\n@rt\ndef index():\n    task = BackgroundTask(counter, loops=5)  # <2>\n    return Titled('Simple Background Task Example'), task # <3>\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration in FastHTML\nDESCRIPTION: Shows how to handle OPTIONS requests and set CORS headers for cross-origin requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_319\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/form-submit/{list_id}\")\ndef options(list_id: str):\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': '*',\n    }\n    return Response(status_code=200, headers=headers)\n\nprint(cli.options('/form-submit/2').headers)\n```\n\n----------------------------------------\n\nTITLE: Handling CORS with OPTIONS Requests in FastHTML\nDESCRIPTION: Implements an OPTIONS request handler for CORS (Cross-Origin Resource Sharing) support, setting appropriate headers to allow cross-origin requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/form-submit/{list_id}\")\ndef options(list_id: str):\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': '*',\n    }\n    return Response(status_code=200, headers=headers)\n\nprint(cli.options('/form-submit/2').headers)\n```\n\n----------------------------------------\n\nTITLE: Routing with Session ID in Python\nDESCRIPTION: Defines a route decorator for a FastHTML app that triggers a get request and includes a session ID in its parameters for dynamic content loading.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef with_sid(app, dest, path='/'):\n    @app.route(path)\n    def get(): return Div(hx_get=dest, hx_trigger=f'load delay:0.001s', hx_swap='outerHTML')\n```\n\n----------------------------------------\n\nTITLE: Implementing Sessions in FastHTML\nDESCRIPTION: Shows how to use sessions in FastHTML to store and retrieve small amounts of data in the user's browser, demonstrated with a simple adder function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@rt('/adder/{num}')\ndef get(session, num: int):\n    session.setdefault('sum', 0)\n    session['sum'] = session.get('sum') + num\n    return Response(f'The sum is {session[\"sum\"]}.')\n```\n\n----------------------------------------\n\nTITLE: APIRouter Implementation\nDESCRIPTION: Shows how to use APIRouter to organize routes across multiple files in FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# products.py\nar = APIRouter()\n\n@ar\ndef details(pid: int): return f\"Here are the product details for ID: {pid}\"\n\n@ar\ndef all_products(req):\n    return Div(\n        Div(\n            Button(\"Details\",hx_get=details.to(pid=42),hx_target=\"#products_list\",hx_swap=\"outerHTML\",),\n        ), id=\"products_list\")\n\n# main.py\nfrom products import ar,all_products\n\napp, rt = fast_app()\nar.to_app(app)\n\n@rt\ndef index():\n    return Div(\n        \"Products\",\n        hx_get=all_products, hx_swap=\"outerHTML\")\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Endpoint in Python\nDESCRIPTION: Example code demonstrating how to create and test a WebSocket endpoint. It defines a simple echo handler that returns a formatted message, creates a WebSocket endpoint with this handler, and tests it using TestClient.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef on_receive(self, msg:str): return f\"Message text was: {msg}\"\nc = _ws_endp(on_receive)\ncli = TestClient(Starlette(routes=[WebSocketRoute('/', _ws_endp(on_receive))]))\nwith cli.websocket_connect('/') as ws:\n    ws.send_text('{\"msg\":\"Hi!\"}')\n    data = ws.receive_text()\n    assert data == 'Message text was: Hi!'\n```\n\n----------------------------------------\n\nTITLE: Complex HTML Structure with Query Parameters\nDESCRIPTION: Demonstrates creating nested HTML components with CSS classes and query parameters in route references. Shows Body and Div nesting with HTMX attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_279\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef autoget(): return Html(Body(Div('Text.', cls='px-2', hx_post=show_host.to(a='b'))))\nprint(cli.get('/autoget').text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Websockets with HTMX and FastHTML\nDESCRIPTION: Example showing websocket implementation using FastHTML and HTMX, featuring real-time message updates. Includes connection handling and message processing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom asyncio import sleep\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\ndef mk_inp(): return Input(id='msg')\nnid = 'notifications'\n\n@rt('/')\nasync def get():\n    cts = Div(\n        Div(id=nid),\n        Form(mk_inp(), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\nasync def on_connect(send): await send(Div('Hello, you have connected', id=nid))\nasync def on_disconnect( ): print('Disconnected!')\n\n@app.ws('/ws', conn=on_connect, disconn=on_disconnect)\nasync def ws(msg:str, send):\n    await send(Div('Hello ' + msg, id=nid))\n    await sleep(2)\n    return Div('Goodbye ' + msg, id=nid), mk_inp()\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Accessing a Database Table in SQL-first Design\nDESCRIPTION: Demonstrates accessing a database table object in SQL-first design pattern.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_238\n\nLANGUAGE: python\nCODE:\n```\nusers = db.t.user\nusers\n```\n\n----------------------------------------\n\nTITLE: Serving FastHTML Application\nDESCRIPTION: Function to serve a FastHTML application using uvicorn. It handles configuration for host, port, and live reloading.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndef serve(\n        appname=None, # Name of the module\n        app='app', # App instance to be served\n        host='0.0.0.0', # If host is 0.0.0.0 will convert to localhost\n        port=None, # If port is None it will default to 5001 or the PORT environment variable\n        reload=True, # Default is to reload the app upon code changes\n        reload_includes:list[str]|str|None=None, # Additional files to watch for changes\n        reload_excludes:list[str]|str|None=None # Files to ignore for changes\n        ):\n    \"Run the app in an async server, with live reload set as the default.\"\n    bk = inspect.currentframe().f_back\n    glb = bk.f_globals\n    code = bk.f_code\n    if not appname:\n        if glb.get('__name__')=='__main__': appname = Path(glb.get('__file__', '')).stem\n        elif code.co_name=='main' and bk.f_back.f_globals.get('__name__')=='__main__': appname = inspect.getmodule(bk).__name__\n    import uvicorn\n    if appname:\n        if not port: port=int(os.getenv(\"PORT\", default=5001))\n        print(f'Link: http://{\"localhost\" if host==\"0.0.0.0\" else host}:{port}')\n        uvicorn.run(f'{appname}:{app}', host=host, port=port, reload=reload, reload_includes=reload_includes, reload_excludes=reload_excludes)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Handling in FastHTML\nDESCRIPTION: Demonstrates setting and retrieving cookies using FastHTML routes. The first route sets a datetime cookie, while the second retrieves and displays it with automatic type conversion.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/setcookie\")\ndef get(): return cookie('now', datetime.now())\n\n@rt(\"/getcookie\")\ndef get(now:parsed_date): return f'Cookie was set at time {now.time()}'\n\nprint(cli.get('/setcookie').text)\ntime.sleep(0.01)\ncli.get('/getcookie').text\n```\n\n----------------------------------------\n\nTITLE: Stacking Multiple Middleware Decorators on Routes\nDESCRIPTION: Example of using app-level and multiple route-level middleware decorators. This demonstrates how to apply layered behavior to specific routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef app_beforeware():\n    print('App level beforeware')\n\napp = FastHTML(before=Beforeware(app_beforeware))\nclient = TestClient(app)\n\ndef route_beforeware(f):\n    @wraps(f)\n    async def decorator(*args, **kwargs):\n        print('Route level beforeware')\n        return await f(*args, **kwargs)\n    return decorator\n    \ndef second_route_beforeware(f):\n    @wraps(f)\n    async def decorator(*args, **kwargs):\n        print('Second route level beforeware')\n        return await f(*args, **kwargs)\n    return decorator\n\n@app.get(\"/users\")\n@route_beforeware\n@second_route_beforeware\nasync def users():\n    return \"Users Page\"\n\nclient.get('/users').text\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database using FastLite in Python\nDESCRIPTION: Shows how to connect to a SQLite database using FastLite, which implements the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_190\n\nLANGUAGE: python\nCODE:\n```\nfrom fastlite import *\ndb = database('test.db')\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Client in Python\nDESCRIPTION: Creates a GitHubAppClient class for GitHub OAuth2 authentication, setting up the necessary URLs and parameters.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass GitHubAppClient(_AppClient):\n    \"A `WebApplicationClient` for GitHub oauth2\"\n    prefix = \"https://github.com/login/oauth/\"\n    base_url = f\"{prefix}authorize\"\n    token_url = f\"{prefix}access_token\"\n    info_url = \"https://api.github.com/user\"\n    id_key = 'id'\n\n    def __init__(self, client_id, client_secret, code=None, scope=None, **kwargs):\n        super().__init__(client_id, client_secret, code=code, scope=scope, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Route References with HTMX\nDESCRIPTION: Generating HTML with HTMX attributes that reference other routes dynamically using the .to() method, creating automatic AJAX interactions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef autopost(): return Html(Div('Text.', hx_post=yoyo.to()))\nprint(cli.get('/autopost').text)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Scope in Starlette\nDESCRIPTION: Shows the structure of the request.scope dictionary in Starlette, which contains HTTP metadata including version, server/client info, request method, path, query string, headers, and application-specific data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'http', \n    'http_version': '1.1', \n    'server': ('127.0.0.1', 9092), \n    'client': ('127.0.0.1', 53102), \n    'scheme': 'https', \n    'method': 'GET', \n    'root_path': '', \n    'path': '/', \n    'raw_path': b'/', \n    'query_string': b'kw=hello', \n    'headers': [\n        (b'host', b'example.com:8080'), \n        (b'connection', b'keep-alive'), \n        (b'cache-control', b'max-age=0'), \n        ...\n    ], \n    'app': <starlette.applications.Starlette object at 0x1081bd650>, \n    'session': {'uid': '57ba03ea7333f72a25f837cf'}, \n    'router': <starlette.routing.Router object at 0x1081bd6d0>, \n    'endpoint': <class 'app.index.Index'>, \n    'path_params': {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication in FastHTML Application\nDESCRIPTION: Demonstrates how to set up OAuth authentication in a FastHTML app using a custom Auth class. It includes logic for handling login, logout, and authorization checks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.oauth import OAuth\nfrom fasthtml.common import FastHTML, RedirectResponse\n\nclass Auth(OAuth):\n    def get_auth(self, info, ident, session, state):\n        email = info.email or ''\n        if info.email_verified and email.split('@')[-1]=='answer.ai':\n            return RedirectResponse('/', status_code=303)\n\napp = FastHTML()\noauth = Auth(app, client)\n\n@app.get('/')\ndef home(auth): return P('Logged in!'), A('Log out', href='/logout')\n\n@app.get('/login')\ndef login(req): return Div(P(\"Not logged in\"), A('Log in', href=oauth.login_link(req)))\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence in FastHTML Database\nDESCRIPTION: Shows how to check if a record exists in the database by using the 'in' keyword with the primary key. Returns a boolean indicating whether the record exists.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n1 in users\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Paths in FastHTML\nDESCRIPTION: Example of configuring custom paths for static files in FastHTML by specifying a static_path parameter.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp, rt = fast_app(static_path='public')\n```\n\n----------------------------------------\n\nTITLE: Live Reload Functionality in fasthtml.live_reload\nDESCRIPTION: Implementation of automatic live reloading for FastHTML applications. It watches for changes in server code and automatically reloads both the server and browser window when changes are detected.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass FastHTMLWithLiveReload:\n    # `FastHTMLWithLiveReload` enables live reloading.\n    # This means that any code changes saved on the server will automatically\n    # trigger a reload of both the server and browser window.\n    #\n    # How does it work?\n    #   - a websocket is created at `/live-reload`\n    #   - a small js snippet `LIVE_RELOAD_SCRIPT` is injected into each webpage\n    #   - this snippet connects to the websocket at `/live-reload` and listens for an `onclose` event\n    #   - when the `onclose` event is detected the browser is reloaded\n    #\n    # Why do we listen for an `onclose` event?\n    #   When code changes are saved the server automatically reloads if the --reload flag is set.\n    #   The server reload kills the websocket connection. The `onclose` event serves as a proxy\n    #   for \"developer has saved some changes\".\n    #\n    # Usage\n    #     >>> from fasthtml.common import *\n    #     >>> app = FastHTMLWithLiveReload()\n    #\n    #     Run:\n    #         serve()\n    def __init__(self, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Response in FastHTML\nDESCRIPTION: Demonstrates how to return a JSON response from a route handler. The content-type is automatically set to application/json, and the response is the JSON data without HTML wrapping.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/response_types.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@rt('/json')\ndef get(): return {'hello': 'world'}\n```\n\nLANGUAGE: python\nCODE:\n```\nresp = cli.get('/json')\nprint(resp.headers)\nprint(resp.json())\n```\n\n----------------------------------------\n\nTITLE: Implementing KaTeX for Math Rendering in Markdown\nDESCRIPTION: Creates a KatexMarkdownJS component that integrates KaTeX for rendering mathematical expressions in Markdown content. Supports both inline and display math with configurable delimiters and LaTeX environments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef KatexMarkdownJS(\n        sel='.marked',  # CSS selector for markdown elements\n        inline_delim='$',  # Delimiter for inline math\n        display_delim='$$',  # Delimiter for long math\n        math_envs=None  # List of environments to render as display math\n    ):\n    math_envs = math_envs or ['equation', 'align', 'gather', 'multline']\n    env_list = '[' + ','.join(f\"'{env}'\" for env in math_envs) + ']'\n    fn = Path(__file__).parent/'katex.js'\n    scr = ScriptX(fn, display_delim=re.escape(display_delim), inline_delim=re.escape(inline_delim),\n                  sel=sel, env_list=env_list, type='module')\n    css = Link(rel=\"stylesheet\", href=npmcdn+\"katex@0.16.11/dist/katex.min.css\")\n    return scr,css\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Product and Price Functions in Python\nDESCRIPTION: Defines functions to search for existing products, create new products and prices, and archive prices in Stripe.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _search_app(app_nm:str, limit=1): \n    \"Checks for product based on app_nm and returns the product if it exists\"\n    return stripe.Product.search(query=f\"name:'{app_nm}' AND active:'True'\", limit=limit).data\n\ndef create_price(app_nm:str, amt:int, currency=\"usd\") -> list[stripe.Price]:\n    \"Create a product and bind it to a price object. If product already exist just return the price list.\"\n    existing_product = _search_app(app_nm)\n    if existing_product: \n        return stripe.Price.list(product=existing_product[0].id).data\n    else:\n        product = stripe.Product.create(name=f\"{app_nm}\")\n        return [stripe.Price.create(product=product.id, unit_amount=amt, currency=currency)]\n\ndef archive_price(app_nm:str):\n    \"Archive a price - useful for cleanup if testing.\"\n    existing_products = _search_app(app_nm, limit=50)\n    for product in existing_products:\n        for price in stripe.Price.list(product=product.id).data: \n            stripe.Price.modify(price.id, active=False)\n        stripe.Product.modify(product.id, active=False)\n```\n\n----------------------------------------\n\nTITLE: Database Setup for FastHTML Drawing App\nDESCRIPTION: Sets up a SQLite database with a rooms table using FastHTML's database utilities and creates a Room dataclass with custom rendering.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_127\n\nLANGUAGE: python\nCODE:\n```\ndb = database('data/drawapp.db')\nrooms = db.t.rooms\nif rooms not in db.t:\n    rooms.create(id=int, name=str, created_at=str, pk='id')\nRoom = rooms.dataclass()\n\n@patch\ndef __ft__(self:Room):\n    return Li(A(self.name, href=f\"/rooms/{self.id}\"))\n```\n\n----------------------------------------\n\nTITLE: FastHTML App Initialization with Session Support\nDESCRIPTION: Initializes a FastHTML application with a secret key for session management and creates routing and client instances.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_315\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML(secret_key='soopersecret')\ncli = Client(app)\nrt = app.route\n```\n\n----------------------------------------\n\nTITLE: FastHTML Response Wrapper\nDESCRIPTION: Response wrapper class for FastHTML that handles content, status codes, headers and background tasks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nclass FtResponse:\n    \"Wrap an FT response with any Starlette `Response`\"\n    def __init__(self, content, status_code:int=200, headers=None, cls=HTMLResponse, media_type:str|None=None, background: BackgroundTask | None = None):\n        self.content,self.status_code,self.headers = content,status_code,headers\n        self.cls,self.media_type,self.background = cls,media_type,background\n\n    def __response__(self, req):\n        cts,httphdrs,tasks = _xt_cts(req, self.content)\n        if not tasks.tasks: tasks = self.background\n        headers = {**(self.headers or {}), **httphdrs}\n        return self.cls(cts, status_code=self.status_code, headers=headers, media_type=self.media_type, background=tasks)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in FastHTML\nDESCRIPTION: Shows how to implement authentication using Beforeware in FastHTML. The example includes a function that runs before route handlers to check for user authentication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef user_auth_before(req, sess):\n    # `auth` key in the request scope is automatically provided to any handler which requests it and can not be injected\n    auth = req.scope['auth'] = sess.get('auth', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n\nbeforeware = Beforeware(\n    user_auth_before,\n    skip=[r'/favicon\\.ico', r'/static/.*', r'.*\\.css', r'.*\\.js', '/login', '/']\n)\n\napp, rt = fast_app(before=beforeware)\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML with FastHTML show function\nDESCRIPTION: Shows how to render an HTML page constructed with fastcore.xml using the show function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nshow(page)\n```\n\n----------------------------------------\n\nTITLE: Extending APIRouter with HTTP Method Shortcuts\nDESCRIPTION: Adds HTTP method-specific shortcut methods to the APIRouter class using partialmethod. This enables more concise route registration syntax like @router.get instead of @router(methods='GET').\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\n#| export\nfor o in all_meths: setattr(APIRouter, o, partialmethod(APIRouter.__call__, methods=o))\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in FastHTML\nDESCRIPTION: Configures FastHTML to serve static Markdown files from a specified directory. The example serves .md files from two directory levels up.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\napp.static_route('.md', static_path='..')\nprint(cli.get('/README.md').text[:10])\n```\n\n----------------------------------------\n\nTITLE: Building Card Components in Python with FastHTML\nDESCRIPTION: A set of functions and an enum for creating card components with different styles and sections. CardT enum defines different card styles, while the various functions create different parts of a card UI component.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nclass CardT(Enum):\n    # Card styles from UIkit\n    # Members: default, primary, secondary, destructive, hover\n    default = \"default\"\n    primary = \"primary\"\n    secondary = \"secondary\"\n    destructive = \"destructive\"\n    hover = \"hover\"\n\ndef CardTitle(*c, **kwargs):\n    # Creates a card title\n    pass\n\ndef CardHeader(*c, **kwargs):\n    # Creates a card header\n    pass\n\ndef CardBody(*c, **kwargs):\n    # Creates a card body\n    pass\n\ndef CardFooter(*c, **kwargs):\n    # Creates a card footer\n    pass\n\ndef CardContainer(*c, **kwargs):\n    # Creates a card container\n    pass\n\ndef Card(*c, **kwargs):\n    # Creates a Card with a header, body, and footer\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with a Primary Key\nDESCRIPTION: Creates a User table with a specified primary key ('name'). This example demonstrates how to define a table schema using a simple class definition and set a custom primary key field.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass User: name:str; email: str; year_started:int\nusers = db.create(User, pk='name')\nusers\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML App with Secret Key\nDESCRIPTION: Creates a FastHTML application with a secret key for secure operations like cookie encryption and session management. This is a prerequisite for the following cookie-related examples.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\napp,cli,rt = get_cli(FastHTML(secret_key='soopersecret'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Required Decorator in Starlette\nDESCRIPTION: Implements a decorator that checks if a user is logged in before allowing access to a protected endpoint. If not logged in, the user is redirected to a login page. This is noted to be easier with FastHTML's Beforeware feature.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nfrom starlette.endpoints import HTTPEndpoint\nfrom starlette.responses import Response\n\ndef login_required(login_url=\"/signin\"):\n    def decorator(handler):\n        @functools.wraps(handler)\n        async def new_handler(obj, req, *args, **kwargs):\n            user = req.session.get(\"login_user\")\n            if user is None:\n                return seeother(login_url)\n            return await handler(obj, req, *args, **kwargs)\n        return new_handler\n    return decorator\n\nclass MyAccount(HTTPEndpiont):\n    @login_required()\n    async def get(self, request):\n        # some logic here\n        content = \"hello\"\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: JSON Data Handling with HTMX\nDESCRIPTION: Demonstrates handling JSON data with HTMX integration and HTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/b\")\ndef index(it: Bodie): return Titled(\"It worked!\", P(f\"{it.a}, {it.b}\"))\n\ns = json.dumps({\"b\": \"Lorem\", \"a\": 15})\nprint(cli.post('/b', headers={\"Content-Type\": \"application/json\", 'hx-request':\"1\"}, data=s).text)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic HTTP Routes in Starlette\nDESCRIPTION: Demonstrates how to set up basic HTTP routing in a Starlette application by defining route handlers for different URL paths.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return PlainTextResponse(\"Homepage\")\n\nasync def about(request):\n    return PlainTextResponse(\"About\")\n\n\nroutes = [\n    Route(\"/\", endpoint=homepage),\n    Route(\"/about\", endpoint=about),\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: HTMX Partial Response Handling\nDESCRIPTION: Demonstrates how responses are handled differently for HTMX requests, returning only the necessary components without full HTML structure.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_281\n\nLANGUAGE: python\nCODE:\n```\nhxhdr = {'headers':{'hx-request':\"1\"}}\nprint(cli.get('/ft2', **hxhdr).text)\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response in FastHTML\nDESCRIPTION: Shows how to implement a redirect response using the Redirect class. The handler redirects the user's browser to a specified URL with a 303 status code.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/response_types.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@rt('/rr')\ndef get(): return Redirect('https://fastht.ml/')\n```\n\nLANGUAGE: python\nCODE:\n```\nresp = cli.get('/rr')\nprint(resp.url)\nprint(resp.status_code)\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Data and Generating HTML Response in FastHTML\nDESCRIPTION: Shows how to handle JSON input data and generate an HTML response using the Titled component in FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_312\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/b\")\ndef index(it: Bodie): return Titled(\"It worked!\", P(f\"{it.a}, {it.b}\"))\n\ns = json.dumps({\"b\": \"Lorem\", \"a\": 15})\nprint(cli.post('/b', headers={\"Content-Type\": \"application/json\", 'hx-request':\"1\"}, data=s).text)\n```\n\n----------------------------------------\n\nTITLE: Session Management in FastHTML\nDESCRIPTION: Demonstrates session handling with routes for setting and retrieving session data across requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_316\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/setsess\")\ndef get(sess, foo:str=''):\n    now = datetime.now()\n    sess['auth'] = str(now)\n    return f'Set to {now}'\n\n@rt(\"/getsess\")\ndef get(sess): return f'Session time: {sess[\"auth\"]}'\n\nprint(cli.get('/setsess').text)\ntime.sleep(0.01)\n\ncli.get('/getsess').text\n```\n\n----------------------------------------\n\nTITLE: Clearing HTML Elements with Specific ID in Python\nDESCRIPTION: Defines a function to return a Div element that can clear its innerHTML based on a specified ID, facilitating dynamic content updates in a web application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef clear(id): return Div(hx_swap_oob='innerHTML', id=id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag-and-Drop with SortableJS\nDESCRIPTION: Creates a SortableJS component that adds drag-and-drop sorting capabilities to elements with the specified selector. Uses the SortableJS library from a CDN.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef SortableJS(\n        sel='.sortable',  # CSS selector for sortable elements\n        ghost_class='blue-background-class'  # When an element is being dragged, this is the class used to distinguish it from the rest\n    ):\n    src = \"\"\"\nimport {Sortable} from 'https://cdn.jsdelivr.net/npm/sortablejs/+esm';\nproc_htmx('%s', Sortable.create);\n\"\"\" % sel\n    return Script(src, type='module')\n```\n\n----------------------------------------\n\nTITLE: HTMX Response Headers\nDESCRIPTION: Special HTTP headers that can be included in responses to control client-side behavior, including URL manipulation, content swapping, and event triggering.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nHX-Location\nHX-Push-Url\nHX-Redirect\nHX-Refresh\nHX-Replace-Url\nHX-Reswap\nHX-Retarget\nHX-Reselect\nHX-Trigger\nHX-Trigger-After-Settle\nHX-Trigger-After-Swap\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Handler in FastHTML\nDESCRIPTION: Handles user logout by clearing the session authentication and redirecting to login page.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/logout\")\ndef logout(sess):\n    del sess['auth']\n    return login_redir\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Login Link in Python\nDESCRIPTION: Adds a login_link method to WebApplicationClient for generating OAuth login URLs with optional scope and state parameters.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef login_link(self:WebApplicationClient, redirect_uri, scope=None, state=None, **kwargs):\n    \"Get a login link for this client\"\n    if not scope: scope=self.scope\n    if not state: state=getattr(self, 'state', None)\n    return self.prepare_request_uri(self.base_url, redirect_uri, scope, state=state, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using Route Functions in Attributes with Path Generation\nDESCRIPTION: Shows how to use route handler functions directly in FastTags attributes like href or action, and how to generate paths with query parameters using the .to() method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef profile(email:str): return fill_form(profile_form, profiles[email])\n\nprofile_form = Form(action=profile)(\n    Label(\"Email\", Input(name=\"email\")),\n    Button(\"Save\", type=\"submit\")\n)\n\nuser_profile_path = profile.to(email=\"user@example.com\")  # '/profile?email=user%40example.com'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom FastHTML Components in Python\nDESCRIPTION: Demonstrates how to create custom FastHTML components using functions and dataclasses, including pass-through components for nested elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\ndef hero(title, statement):\n    return Div(H1(title),P(statement), cls=\"hero\")\n\n# usage example\nMain(\n    hero(\"Hello World\", \"This is a hero statement\")\n)\n\ndef layout(*args, **kwargs):\n    \"\"\"Dashboard layout for all our dashboard views\"\"\"\n    return Main(\n        H1(\"Dashboard\"),\n        Div(*args, **kwargs),\n        cls=\"dashboard\",\n    )\n\n# usage example\nlayout(\n    Ul(*[Li(o) for o in range(3)]),\n    P(\"Some content\", cls=\"description\"),\n)\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Hero:\n    title: str\n    statement: str\n    \n    def __ft__(self):\n        \"\"\" The __ft__ method renders the dataclass at runtime.\"\"\"\n        return Div(H1(self.title),P(self.statement), cls=\"hero\")\n    \n# usage example\nMain(\n    Hero(\"Hello World\", \"This is a hero statement\")\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Flexbox Grid Layout in HTML\nDESCRIPTION: Demonstrates a simple Flexbox grid layout using row and column classes to create responsive layouts.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_155\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <div class=\"box\">This takes up the full width</div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying APIRouter to FastHTML App\nDESCRIPTION: Adds the routes from an APIRouter instance to a FastHTML application. This demonstrates how to connect the router's routes to the main application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\napp,cli,_ = get_cli(FastHTML())\nar.to_app(app)\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Prefixed APIRouter\nDESCRIPTION: Demonstrates adding multiple routes to a prefixed APIRouter, including different HTTP methods, path configurations, and a WebSocket endpoint. All routes will have the router's prefix applied.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\n@ar2(\"/hi\")\ndef get(): return 'Hi there'\n@ar2(\"/hi\")\ndef post(): return 'Postal'\n@ar2\ndef ho(): return 'Ho ho'\n@ar2(\"/hostie\")\ndef show_host(req): return req.headers['host']\n@ar2\ndef yoyo(): return 'a yoyo'\n@ar2\ndef index(): return \"home page\"\n\n@ar2.ws(\"/ws\")\ndef ws(self, msg:str): return f\"Message text was: {msg}\"\n```\n\n----------------------------------------\n\nTITLE: Complex FT Component with Attributes in Python\nDESCRIPTION: Demonstrates a more complex FT component structure with various attributes and nested elements. This example shows how to create a label with a select input, showcasing different ways to set attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_185\n\nLANGUAGE: python\nCODE:\n```\nLabel(\n    \"Choose an option\", \n    Select(\n        Option(\"one\", value=\"1\", selected=True),\n        Option(\"two\", value=\"2\", selected=False),\n        Option(\"three\", value=3),\n        cls=\"selector\",\n        _id=\"counter\",\n        **{'@click':\"alert('Clicked');\"},\n    ),\n    _for=\"counter\",\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Core FastHTML Components\nDESCRIPTION: Basic import statement that includes all key symbols from FastHTML and Starlette, which should be used at the start of every FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n```\n\n----------------------------------------\n\nTITLE: Defining BasicAuthMiddleware in fasthtml.authmw\nDESCRIPTION: A middleware class that implements Basic HTTP Authentication for FastHTML applications. It accepts the app, a callback function for authentication, and paths to skip authentication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BasicAuthMiddleware:\n    def __init__(self, app, cb, skip)\n    def __call__(self, scope, receive, send)\n    def authenticate(self, conn)\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript to Load Existing Canvas Data in FastHTML Application\nDESCRIPTION: Modifies the JavaScript code to fetch and load existing canvas data when the page loads.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\njs = f\"\"\"\n    var canvas = new fabric.Canvas('canvas');\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = '#3CDD8C';\n    canvas.freeDrawingBrush.width = 10;\n    // Load existing canvas data\n    fetch(`/rooms/{id}/load`)\n    .then(response => response.json())\n    .then(data => {{\n        if (data && Object.keys(data).length > 0) {{\n            canvas.loadFromJSON(data, canvas.renderAll.bind(canvas));\n        }}\n    }});\n    \n    // ... (rest of the JavaScript remains the same)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth Implementation with User Counter in Python\nDESCRIPTION: Full implementation of GitHub OAuth authentication with user session management and a counter feature.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom fasthtml.common import *\nfrom fasthtml.oauth import GitHubAppClient, redir_url\n\ndb = database('data/counts.db')\ncounts = db.t.counts\nif counts not in db.t: counts.create(dict(name=str, count=int), pk='name')\nCount = counts.dataclass()\n\n# Auth client setup for GitHub\nclient = GitHubAppClient(os.getenv(\"AUTH_CLIENT_ID\"), \n                         os.getenv(\"AUTH_CLIENT_SECRET\"))\nauth_callback_path = \"/auth_redirect\"\n\ndef before(req, session):\n    # if not logged in, we send them to our login page\n    # logged in means:\n    # - 'user_id' in the session object, \n    # - 'auth' in the request object\n    auth = req.scope['auth'] = session.get('user_id', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n    counts.xtra(name=auth)\nbware = Beforeware(before, skip=['/login', auth_callback_path])\n\napp = FastHTML(before=bware)\n\n# User asks us to Login\n@app.get('/login')\ndef login(request):\n    redir = redir_url(request,auth_callback_path)\n    login_link = client.login_link(redir)\n    # we tell user to login at github\n    return P(A('Login with GitHub', href=login_link))    \n\n# User comes back to us with an auth code from Github\n@app.get(auth_callback_path)\ndef auth_redirect(code:str, request, session):\n    redir = redir_url(request, auth_callback_path)\n    user_info = client.retr_info(code, redir)\n    user_id = user_info[client.id_key] # get their ID\n    session['user_id'] = user_id # save ID in the session\n    # create a db entry for the user\n    if user_id not in counts: counts.insert(name=user_id, count=0)\n    return RedirectResponse('/', status_code=303)\n\n@app.get('/')\ndef home(auth):\n    return Div(\n        P(\"Count demo\"),\n        P(f\"Count: \", Span(counts[auth].count, id='count')),\n        Button('Increment', hx_get='/increment', hx_target='#count'),\n        P(A('Logout', href='/logout'))\n    )\n\n@app.get('/increment')\ndef increment(auth):\n    c = counts[auth]\n    c.count += 1\n    return counts.upsert(c).count\n\n@app.get('/logout')\ndef logout(session):\n    session.pop('user_id', None)\n    return RedirectResponse('/login', status_code=303)\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication with Custom Decorator\nDESCRIPTION: Creating a route-specific authentication decorator that checks for a specific token in the request headers before allowing access to a protected route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\n\ndef basic_auth(f):\n    @wraps(f)\n    async def wrapper(req, *args, **kwargs):\n        token = req.headers.get(\"Authorization\")\n        if token == 'abc123':\n            return await f(req, *args, **kwargs)\n        return Response('Not Authorized', status_code=401)\n    return wrapper\n\n@app.get(\"/protected\")\n@basic_auth\nasync def protected(req):\n    return \"Protected Content\"\n\nclient.get('/protected', headers={'Authorization': 'abc123'}).text\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Token Revocation Implementation\nDESCRIPTION: Implementation of token revocation for Google OAuth. Makes a POST request to Google's revocation endpoint to invalidate an access token.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_250\n\nLANGUAGE: python\nCODE:\n```\nauth_revoke_url = \"https://accounts.google.com/o/oauth2/revoke\"\ndef revoke_token(token):\n    response = requests.post(auth_revoke_url, params={\"token\": token})\n    return response.status_code == 200 # True if successful\n```\n\n----------------------------------------\n\nTITLE: Creating FastHTML Application with Convenience Wrapper in Python\nDESCRIPTION: A convenience function to create a FastHTML or FastHTMLWithLiveReload application with various configuration options. It sets up database connections, rendering functions, headers, and other application-specific settings.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef fast_app(db_file, render, hdrs, ftrs, tbls, before, middleware, live, debug, routes, exception_handlers, on_startup, on_shutdown, lifespan, default_hdrs, pico, surreal, htmx, exts, secret_key, key_fname, session_cookie, max_age, sess_path, same_site, sess_https_only, sess_domain, htmlkw, bodykw, reload_attempts, reload_interval, static_path, body_wrap, nb_hdrs, **kwargs):\n    \"\"\"Create a FastHTML or FastHTMLWithLiveReload app.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Route Decorator for FastHTML\nDESCRIPTION: Decorator method to easily add routes to a FastHTML application. It also adds convenience methods for each HTTP method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef route(self:FastHTML, path:str=None, methods=None, name=None, include_in_schema=True, body_wrap=None):\n    \"Add a route at `path`\"\n    def f(func): return self._add_route(func, path, methods, name=name, include_in_schema=include_in_schema, body_wrap=body_wrap)\n    return f(path) if callable(path) else f\n\nfor o in all_meths: setattr(FastHTML, o, partialmethod(FastHTML.route, methods=o))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handlers in FastHTML\nDESCRIPTION: Shows how to create custom exception handlers in FastHTML for different HTTP status codes, using both function definitions and lambda expressions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\ndef not_found(req, exc): return Titled(\"404: I don't exist!\")\n\nexception_handlers = {404: not_found}\n\napp, rt = fast_app(exception_handlers=exception_handlers)\n\n@rt('/')\ndef get():\n    return (Titled(\"Home page\", P(A(href=\"/oops\")(\"Click to generate 404 error\"))))\n\nserve()\n\n# Using lambda for more concise handlers\nfrom fasthtml.common import *\n\nexception_handlers={\n    404: lambda req, exc: Titled(\"404: I don't exist!\"),\n    418: lambda req, exc: Titled(\"418: I'm a teapot!\")\n}\n\napp, rt = fast_app(exception_handlers=exception_handlers)\n\n@rt('/')\ndef get():\n    return (Titled(\"Home page\", P(A(href=\"/oops\")(\"Click to generate 404 error\"))))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Using NotStr for Custom HTML Tags in FastHTML\nDESCRIPTION: Shows how to use the NotStr class to create custom HTML tags as strings in FastHTML. This is useful for one-off custom tags.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_265\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import NotStr,Div, to_xml\n```\n\n----------------------------------------\n\nTITLE: HTML Component Rendering with FT Objects\nDESCRIPTION: Demonstrates returning HTML components using FT objects, which are automatically converted to HTML strings. Shows basic div element creation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_277\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef ft1(): return Html(Div('Text.'))\nprint(cli.get('/ft1').text)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Integration in FastHTML\nDESCRIPTION: Demonstrates how to include JavaScript and handle data integration between Python and JavaScript.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \napp,rt = fast_app(hdrs=[Script(src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\")])\n@rt\ndef index():\n    data = {'somedata':'fill me in…'}\n    return Titled(\"Chart Demo\", Div(id=\"myDiv\"), Script(f\"var data = {data}; Plotly.newPlot('myDiv', data);\")\nserve()\n```\n\n----------------------------------------\n\nTITLE: Inserting Publication Records with Different Methods\nDESCRIPTION: Inserts records into the Publication table using various input formats (class instance, keyword arguments, dictionary). Demonstrates working with tables that have compound primary keys.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npublications.insert(Publication(authors='Alma', year=2019, title='FastHTML'))\npublications.insert(authors='Alma', year=2030, title='FastHTML and beyond')\npublication= publications.insert((dict(authors='Alma', year=2035, title='FastHTML, the early years')))\npublication\n```\n\n----------------------------------------\n\nTITLE: Handling Login Route in FastHTML\nDESCRIPTION: Implements the /login route handler, which generates a GitHub login link using the GitHubAppClient and presents it to the user.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_246\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/login')\ndef login(request)\n    redir = redir_url(request,auth_callback_path)\n    login_link = client.login_link(redir)\n    return P(A('Login with GitHub', href=login_link))    \n```\n\n----------------------------------------\n\nTITLE: Using HtmxResponseHeaders for Client-Side Redirection\nDESCRIPTION: This snippet shows how to use HtmxResponseHeaders to set HTMX-specific response headers. The example handler returns an HtmxResponseHeaders object with a location parameter, which sets the HX-Location header used by HTMX for client-side redirects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/app3\")\ndef _(foo:FastHTML): return HtmxResponseHeaders(location=\"http://example.org\")\nr = cli.get('/app3')\nprint(r.headers)\n```\n\n----------------------------------------\n\nTITLE: Constructing HTML with FastHTML and fastcore.xml\nDESCRIPTION: Demonstrates how to create HTML elements using Python objects from fastcore.xml library. The example creates a complete HTML page with head, title, body, div, link, and image elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\npage = Html(\n    Head(Title('Some page')),\n    Body(Div('Some text, ', A('A link', href='https://example.com'), Img(src=\"https://placehold.co/200\"), cls='myclass')))\nprint(to_xml(page))\n```\n\n----------------------------------------\n\nTITLE: Complex FT Component Attributes Example\nDESCRIPTION: Comprehensive example demonstrating various ways to handle attributes in FT components, including boolean values, reserved words, and special characters.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/explaining_xt_components.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLabel( # <1>\n    \"Choose an option\", \n    Select(\n        Option(\"one\", value=\"1\", selected=True), # <2>\n        Option(\"two\", value=\"2\", selected=False), # <3>\n        Option(\"three\", value=3),  # <4>\n        cls=\"selector\",  # <5>\n        _id=\"counter\", # <6>            \n        **{'@click':\"alert('Clicked');\"}, # <7>\n    ),\n    _for=\"counter\",  # <8>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in FastHTML\nDESCRIPTION: Demonstrates setting up custom exception handlers for specific HTTP status codes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_320\n\nLANGUAGE: python\nCODE:\n```\ndef _not_found(req, exc): return Div('nope')\n\napp = FastHTML(exception_handlers={404:_not_found})\ncli = Client(app)\nrt = app.route\n\nr = cli.get('/')\nprint(r.text)\n```\n\n----------------------------------------\n\nTITLE: Static Route Extension Handler\nDESCRIPTION: Method to add static file routes with configurable prefix and file extensions. Handles serving static files from specified path.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef static_route_exts(self:FastHTML, prefix='/', static_path='.', exts='static'):\n    \"Add a static route at URL path `prefix` with files from `static_path` and `exts` defined by `reg_re_param()`\"\n    @self.route(f\"{prefix}{{fname:path}}.{{ext:{exts}}}\")\n    async def get(fname:str, ext:str): return FileResponse(f'{static_path}/{fname}.{ext}')\n```\n\n----------------------------------------\n\nTITLE: WebSocket Message Handler with Different Response Options\nDESCRIPTION: Demonstrates handling WebSocket messages in FastHTML with two different ways to send responses: using the send function or returning a component directly.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_259\n\nLANGUAGE: python\nCODE:\n```\n@app.ws('/ws', conn=on_conn, disconn=on_disconn)\nasync def on_message(msg:str, send):\n    await send(Div('You said: ' + msg, id='notifications'))\n    # or...\n    return Div('You said: ' + msg, id='notifications')\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GET Route Handler\nDESCRIPTION: Creating a simple route handler for GET requests to '/hi' path that returns a plain text response. The function name 'get' automatically maps to the GET HTTP method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/hi\")\ndef get(): return 'Hi there'\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Route to FastHTML\nDESCRIPTION: Method to add a WebSocket route to the FastHTML application. It creates a WebSocketRoute and adds it to the application's routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef _add_ws(self:FastHTML, func, path, conn, disconn, name, middleware):\n    endp = _ws_endp(func, conn, disconn)\n    route = WebSocketRoute(path, endpoint=endp, name=name, middleware=middleware)\n    route.methods = ['ws']\n    self.add_route(route)\n    return func\n```\n\n----------------------------------------\n\nTITLE: Inserting a Record Using a Class Instance\nDESCRIPTION: Inserts a new user record into the database using a User class instance. The insert method returns the newly created record.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nusers.insert(User(name='Braden', email='b@example.com', year_started=2018))\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Client in Python\nDESCRIPTION: Defines a GoogleAppClient class for Google OAuth2 authentication, including methods for initialization and loading credentials from a file.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass GoogleAppClient(_AppClient):\n    \"A `WebApplicationClient` for Google oauth2\"\n    base_url = \"https://accounts.google.com/o/oauth2/v2/auth\"\n    token_url = \"https://oauth2.googleapis.com/token\"\n    info_url = \"https://openidconnect.googleapis.com/v1/userinfo\"\n    \n    def __init__(self, client_id, client_secret, code=None, scope=None, project_id=None, **kwargs):\n        scope_pre = \"https://www.googleapis.com/auth/userinfo\"\n        if not scope: scope=[\"openid\", f\"{scope_pre}.email\", f\"{scope_pre}.profile\"]\n        super().__init__(client_id, client_secret, code=code, scope=scope, **kwargs)\n        self.project_id = project_id\n    \n    @classmethod\n    def from_file(cls, fname, code=None, scope=None, **kwargs):\n        cred = Path(fname).read_json()['web']\n        return cls(cred['client_id'], client_secret=cred['client_secret'], project_id=cred['project_id'],\n                  code=code, scope=scope, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: File Response Implementation\nDESCRIPTION: Demonstrates how to serve a file as a response using FileResponse class.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import FileResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = FileResponse('statics/favicon.ico')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Form Argument Casting Function\nDESCRIPTION: Casts form arguments to their specified types based on annotations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef _form_arg(k, v, d):\n    \"Get type by accessing key `k` from `d`, and use to cast `v`\"\n    if v is None: return\n    if not isinstance(v, (str,list,tuple)): return v\n    # This is the type we want to cast `v` to\n    anno = d.get(k, None)\n    if not anno: return v\n    return _fix_anno(anno, v)\n```\n\n----------------------------------------\n\nTITLE: Implementing Plaintext Response in FastHTML\nDESCRIPTION: Shows how to return a plain-text response from a route handler. When a string is returned, it results in a plain-text response without any HTML wrapping.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/response_types.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@rt('/text')\ndef get(): return 'Hello world'\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(cli.get('/text').text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Save and Load Routes in FastHTML Python Application\nDESCRIPTION: Adds routes for saving and loading canvas data, allowing persistence of drawings.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}/save\")\nasync def post(id:int, canvas_data:str):\n    rooms.update({'canvas_data': canvas_data}, id)\n    return \"Canvas saved successfully\"\n\n@rt(\"/rooms/{id}/load\")\nasync def get(id:int):\n    room = rooms[id]\n    return room.canvas_data if room.canvas_data else \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Application and Client\nDESCRIPTION: Sets up a FastHTML application and a test client for making requests to the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_304\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\nrt = app.route\ncli = Client(app)\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data and File Uploads in Starlette\nDESCRIPTION: Demonstrates how to handle multipart form data and file uploads using request.form(). Shows configuration of maximum files and fields for security.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nasync with request.form(max_files=1000, max_fields=1000):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Date Parameter Handling\nDESCRIPTION: Shows automatic parsing of date strings into date objects using dateutil.parser.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_296\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/datie/\")\ndef _(d:parsed_date): return d\ndate_str = \"17th of May, 2024, 2p\"\nprint(cli.get(f'/datie/?d={date_str}').text)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Redirects with Redirect Object\nDESCRIPTION: This snippet demonstrates using the Redirect object to perform HTTP redirects. The handler returns a Redirect object with the target URL, and the test client is configured to not automatically follow redirects to inspect the redirect response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/app4\")\ndef _(foo:FastHTML): return Redirect(\"http://example.org\")\ncli.get('/app4', follow_redirects=False)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastHTML App Headers\nDESCRIPTION: Demonstrates how to configure header elements like CSS, JavaScript libraries, and static file handling through the fast_app initialization function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# In future snippets we'll skip showing the `fast_app` call if it has no params\napp, rt = fast_app(\n    pico=False, # The Pico CSS framework is included by default, so pass `False` to disable it if needed. No other CSS frameworks are included.\n    # These are added to the `head` part of the page for non-HTMX requests.\n    hdrs=(\n        Link(rel='stylesheet', href='assets/normalize.min.css', type='text/css'),\n        Link(rel='stylesheet', href='assets/sakura.css', type='text/css'),\n        Style(\"p {color: red;}\"),\n        # `MarkdownJS` and `HighlightJS` are available via concise functions\n        MarkdownJS(), HighlightJS(langs=['python', 'javascript', 'html', 'css']),\n        # by default, all standard static extensions are served statically from the web app dir,\n        #   which can be modified using e.g `static_path='public'`\n        )\n)\n\n@rt\ndef index(req): return Titled(\"Markdown rendering example\",\n                              # This will be client-side rendered to HTML with highlight-js\n                              Div(\"*hi* there\",cls=\"marked\"),\n                              # This will be syntax highlighted\n                              Pre(Code(\"def foo(): pass\")))\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for FastHTML Jupyter Compatibility\nDESCRIPTION: Imports necessary modules and functions for FastHTML Jupyter compatibility, including asyncio, socket, uvicorn, and various FastHTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nimport asyncio, socket, time, uvicorn\nfrom threading import Thread\nfrom fastcore.utils import *\nfrom fasthtml.common import *\nfrom fasthtml.common import show as _show\nfrom fastcore.parallel import startthread\ntry: from IPython.display import HTML,Markdown,display\nexcept ImportError: pass\n```\n\n----------------------------------------\n\nTITLE: FastHTML Route with URL Parameters using @app.get\nDESCRIPTION: Demonstrates how to define a route with URL parameters using the @app.get decorator, allowing dynamic path segments to be captured as function arguments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_146\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/greet/{nm}\")\ndef greet(nm:str):\n    return f\"Good day to you, {nm}!\"\n\nclient.get(\"/greet/Dave\").text\n```\n\n----------------------------------------\n\nTITLE: Session and Request Handling\nDESCRIPTION: Shows how to work with session and request objects in FastHTML route handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef profile(req, sess, user_id: int=None):\n    ip = req.client.host\n    sess['last_visit'] = datetime.now().isoformat()\n    visits = sess.setdefault('visit_count', 0) + 1\n    sess['visit_count'] = visits\n    user = get_user(user_id or sess.get('user_id'))\n    return Titled(f\"Profile: {user.name}\", \n                  P(f\"Visits: {visits}\"), \n                  P(f\"IP: {ip}\"),\n                  Button(\"Logout\", hx_post=logout))\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for FastHTML in JSON\nDESCRIPTION: Provides a JSON configuration to disable certain PyLance error checks in Visual Studio Code for FastHTML projects. This helps avoid false error messages that PyLance may report due to FastHTML's unique syntax.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_187\n\nLANGUAGE: json\nCODE:\n```\n{\n \"python.analysis.diagnosticSeverityOverrides\": {\n      \"reportGeneralTypeIssues\": \"none\",\n      \"reportOptionalMemberAccess\": \"none\",\n      \"reportWildcardImportFromLibrary\": \"none\",\n      \"reportRedeclaration\": \"none\",\n      \"reportAttributeAccessIssue\": \"none\",\n      \"reportInvalidTypeForm\": \"none\",\n      \"reportAssignmentType\": \"none\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom 404 Error Handler\nDESCRIPTION: Demonstrates how to set up a custom 404 error handler with FastHTML's exception_handlers. The example shows both the handler definition and verification that it produces the expected HTML output.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ndef _not_found(req, exc): return Div('nope')\n\napp,cli,rt = get_cli(FastHTML(exception_handlers={404:_not_found}))\n\ntxt = cli.get('/').text\nassert '<div>nope</div>' in txt\nassert '<!doctype html>' in txt\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Variables in FastHTML\nDESCRIPTION: Example of defining routes with variable components in FastHTML. Shows how to type-hint URL parameters and access them in the handler function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \n\napp, rt = fast_app()\n\n@rt(\"/{name}/{age}\")  # <1>\ndef get(name: str, age: int):  # <2>\n  return Titled(f\"Hello {name.title()}, age {age}\")  # <3>\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handling in Starlette\nDESCRIPTION: This snippet shows how to register custom exception handlers in a Starlette application to provide specific responses for different error conditions. It includes status code handlers for 404 and 500 errors.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import HTMLResponse\n\n\nHTML_404_PAGE = ...\nHTML_500_PAGE = ...\n\n\nasync def not_found(request: Request, exc: HTTPException):\n    return HTMLResponse(content=HTML_404_PAGE, status_code=exc.status_code)\n\nasync def server_error(request: Request, exc: HTTPException):\n    return HTMLResponse(content=HTML_500_PAGE, status_code=exc.status_code)\n\n\nexception_handlers = {\n    404: not_found,\n    500: server_error\n}\n\napp = Starlette(routes=routes, exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Exceptions in Starlette\nDESCRIPTION: Shows how to customize error pages for different HTTP status codes like 403, 404, 503, and 500. Custom handlers are registered with the Starlette application to be invoked when specific exceptions occur.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.exceptions import HTTPException\n\nasync def exc_handle_403(request, exc):\n    return HTMLResponse(\"My 403 page\", status_code=exc.status_code)\n\nasync def exc_handle_404(request, exc):\n    return HTMLResponse(\"My 404 page\", status_code=exc.status_code)\n\nasync def exc_handle_503(request, exc):\n    return HTMLResponse(\"Failed, please try it later\", status_code=exc.status_code)\n\n# error is not exception, 500 is server side unexpected error, all other status code will be treated as Exception\nasync def err_handle_500(request, exc):\n    import traceback\n    Log.error(traceback.format_exc())\n    return HTMLResponse(\"My 500 page\", status_code=500)\n\n# To add handler, we can add either status_code or Exception itself as key\nexception_handlers = {\n    403: exc_handle_403,\n    404: exc_handle_404,\n    503: exc_handle_503,\n    500: err_handle_500,\n    #HTTPException: exc_handle_500,\n}\n\napp = Starlette(routes=routes, exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Creation Routes in FastHTML\nDESCRIPTION: Routes for displaying the homepage with a room creation form and handling POST requests to create new rooms. Uses HTMX for dynamic updates without page reloads.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef get():\n    # The 'Input' id defaults to the same as the name, so you can omit it if you wish\n    create_room = Form(Input(id=\"name\", name=\"name\", placeholder=\"New Room Name\"),\n                       Button(\"Create Room\"),\n                       hx_post=\"/rooms\", hx_target=\"#rooms-list\", hx_swap=\"afterbegin\")\n    rooms_list = Ul(*rooms(order_by='id DESC'), id='rooms-list')\n    return Titled(\"DrawCollab\", \n                  H1(\"DrawCollab\"),\n                  create_room, rooms_list)\n\n@rt(\"/rooms\")\nasync def post(room:Room):\n    room.created_at = datetime.now().isoformat()\n    return rooms.insert(room)\n```\n\n----------------------------------------\n\nTITLE: Automatic HTML Structure Generation in FastHTML (Python)\nDESCRIPTION: Shows how FastHTML automatically structures HTML elements, placing head elements like Title and Meta in the <head> and other elements in the <body>. The example defines a route that returns both head and body elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_302\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef meta(): \n    return ((Title('hi'),H1('hi')),\n        (Meta(property='image'), Meta(property='site_name')))\n\nprint(cli.post('/meta').text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Image Generation with FastHTML and HTMX in Python\nDESCRIPTION: This code snippet shows how to handle asynchronous image generation using FastHTML and HTMX. It includes functions for previewing generations, updating the UI, and handling POST requests for new prompts.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_154\n\nLANGUAGE: python\nCODE:\n```\ndef generation_preview(id):\n    if os.path.exists(f\"gens/{id}.png\"):\n        return Div(Img(src=f\"/gens/{id}.png\"), id=f'gen-{id}')\n    else:\n        return Div(\"Generating...\", id=f'gen-{id}', \n                   hx_post=f\"/generations/{id}\",\n                   hx_trigger='every 1s', hx_swap='outerHTML')\n    \n@app.post(\"/generations/{id}\")\ndef get(id:int): return generation_preview(id)\n\n@app.post(\"/\")\ndef post(prompt:str):\n    id = len(generations)\n    generate_and_save(prompt, id)\n    generations.append(prompt)\n    clear_input =  Input(id=\"new-prompt\", name=\"prompt\", placeholder=\"Enter a prompt\", hx_swap_oob='true')\n    return generation_preview(id), clear_input\n\n@threaded\ndef generate_and_save(prompt, id): ... \n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Python Dictionary in FastHTML MiniDataAPI\nDESCRIPTION: Demonstrates adding a record using a Python dictionary. Useful when data is already in dictionary format or when working with JSON data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_199\n\nLANGUAGE: python\nCODE:\n```\nusers.insert({'name': 'Charlie', 'email': 'c@example.com', 'year_started': 2018})\n```\n\n----------------------------------------\n\nTITLE: Inserting a Record Using a Dictionary\nDESCRIPTION: Inserts a new user record by providing field values in a Python dictionary. This demonstrates the flexibility of the insert method in accepting different input formats.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nusers.insert({'name': 'Charlie', 'email': 'c@example.com', 'year_started': 2018})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Path Parameter Types in Python\nDESCRIPTION: Demonstrates how to define and use custom path parameter types using regular expressions in FastHTML. The example uses a custom type for image file extensions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nreg_re_param(\"imgext\", \"ico|gif|jpg|jpeg|webm\")\n\n@rt(r'/static/{path:path}{fn}.{ext:imgext}')\ndef get(fn:str, path:str, ext:str): return f\"Getting {fn}.{ext} from /{path}\"\n\nprint(cli.get('/static/foo/jph.ico').text)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over WebSocket Messages in Starlette\nDESCRIPTION: Shows how to use WebSocket's async iterators to receive and process messages in a loop, echoing back received text with additional context.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    websocket = WebSocket(scope=scope, receive=receive, send=send)\n    await websocket.accept()\n    async for message in websocket.iter_text():\n        await websocket.send_text(f\"Message text was: {message}\")\n    await websocket.close()\n```\n\n----------------------------------------\n\nTITLE: Defining Pico.css CDN Links\nDESCRIPTION: Creates link tags for including Pico.css from CDN sources. Provides both standard and class-conditional versions of Pico.css along with root font size styling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#| export\npicocss = \"https://cdn.jsdelivr.net/npm/@picocss/pico@latest/css/pico.min.css\"\npicolink = (Link(rel=\"stylesheet\", href=picocss),\n            Style(\":root { --pico-font-size: 100%; }\"))\npicocondcss = \"https://cdn.jsdelivr.net/npm/@picocss/pico@latest/css/pico.conditional.min.css\"\npicocondlink = (Link(rel=\"stylesheet\", href=picocondcss),\n                Style(\":root { --pico-font-size: 100%; }\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS in FastHTML\nDESCRIPTION: Shows how to customize CSS in FastHTML by disabling the default Pico CSS, adding external CSS files, and including inline styles.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \n\napp, rt = fast_app(\n    pico=False,  # <1>\n    hdrs=(\n        Link(rel='stylesheet', href='assets/normalize.min.css', type='text/css'),\n        Link(rel='stylesheet', href='assets/sakura.css', type='text/css'),  # <2>\n        Style(\"p {color: red;}\")  # <3>\n))\n\n@app.get(\"/\")\ndef home():\n    return Titled(\"FastHTML\",\n        P(\"Let's do this!\"),\n    )\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Submounting in Starlette\nDESCRIPTION: Shows how to organize routes into hierarchical structures using the Mount class, allowing for modular routing organization and inclusion of sub-applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Route('/', homepage),\n    Mount('/users', routes=[\n        Route('/', users, methods=['GET', 'POST']),\n        Route('/{username}', user),\n    ])\n]\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth Tokens with Google in Python\nDESCRIPTION: This snippet demonstrates how to programmatically revoke an OAuth access token using Google's revocation endpoint. It sends a POST request to Google's revoke URL with the token as a parameter and returns True if the revocation was successful.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nauth_revoke_url = \"https://accounts.google.com/o/oauth2/revoke\"\ndef revoke_token(token):\n    response = requests.post(auth_revoke_url, params={\"token\": token})\n    return response.status_code == 200 # True if successful\n```\n\n----------------------------------------\n\nTITLE: Base Middleware Implementation\nDESCRIPTION: Base middleware class implementing HTTP and WebSocket request handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nclass MiddlewareBase:\n    async def __call__(self, scope, receive, send) -> None:\n        if scope[\"type\"] not in [\"http\", \"websocket\"]:\n            await self._app(scope, receive, send)\n            return\n        return HTTPConnection(scope)\n```\n\n----------------------------------------\n\nTITLE: Form Data Binding in FastHTML\nDESCRIPTION: Demonstrates automatic form data binding to dataclass objects and handling POST requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef edit_profile(profile: Profile):\n    profiles[email]=profile\n    return RedirectResponse(url=path)\n\nnew_data = dict(email='john@example.com', phone='7654321', age=25)\nprint(client.post(\"/edit_profile\", data=new_data, headers=htmx_req).text)\n```\n\n----------------------------------------\n\nTITLE: Setting HTMX-specific Response Headers in FastHTML\nDESCRIPTION: Shows how to use the HtmxResponseHeaders object to set HTMX-specific response headers in a FastHTML route handler.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef htmlredirect(app): return HtmxResponseHeaders(location=\"http://example.org\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flexbox Modifiers Enum in Python\nDESCRIPTION: Defines an enumeration of flexbox modifiers using Tailwind CSS classes, including various alignment and direction options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nclass FlexT(Enum):\n    block, inline, left, center, right, between, around, stretch, top, middle, bottom, row, row_reverse, column, column_reverse, nowrap, wrap, wrap_reverse\n```\n\n----------------------------------------\n\nTITLE: Accessing FastHTML App Instance in Route Handlers (Python)\nDESCRIPTION: Demonstrates how to access the FastHTML application instance in route handlers using either the special 'app' parameter or a parameter annotated with FastHTML. It shows how to access custom attributes set on the app instance.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_299\n\nLANGUAGE: python\nCODE:\n```\napp.chk = 'foo'\n@app.get(\"/app\")\ndef _(app): return app.chk\nprint(cli.get('/app').text)\n\n@app.get(\"/app2\")\ndef _(foo:FastHTML): return foo.chk,HttpHeader(\"mykey\", \"myval\")\nr = cli.get('/app2', **hxhdr)\nprint(r.text)\nprint(r.headers)\n```\n\n----------------------------------------\n\nTITLE: Implementing the ft_html Function for HTML Component Creation\nDESCRIPTION: Creates a function for generating HTML components with support for custom attributes, automatic ID generation, and automatic name attributes. This function extends the basic ft function with additional features specific to HTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef ft_html(tag: str, *c, id=None, cls=None, title=None, style=None, attrmap=None, valmap=None, ft_cls=None, **kwargs):\n    ds,c = partition(c, risinstance(dict))\n    for d in ds: kwargs = {**kwargs, **d}\n    if ft_cls is None: ft_cls = fh_cfg.ft_cls\n    if attrmap is None: attrmap=fh_cfg.attrmap\n    if valmap  is None: valmap =fh_cfg.valmap\n    if not id and fh_cfg.auto_id: id = True\n    if id and isinstance(id,bool): id = unqid()\n    kwargs['id'] = id.id if isinstance(id,FT) else id\n    kwargs['cls'],kwargs['title'],kwargs['style'] = cls,title,style\n    tag,c,kw = ft(tag, *c, attrmap=attrmap, valmap=valmap, **kwargs).list\n    if fh_cfg['auto_name'] and tag in named and id and 'name' not in kw: kw['name'] = kw['id']\n    return ft_cls(tag,c,kw, void_=tag in voids)\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Tasks in Starlette Applications\nDESCRIPTION: This example demonstrates how to add a single background task to a response using BackgroundTask. It shows a signup endpoint that triggers an email sending task after the response is returned to the client.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\nfrom starlette.background import BackgroundTask\n\n\n...\n\nasync def signup(request):\n    data = await request.json()\n    username = data['username']\n    email = data['email']\n    task = BackgroundTask(send_welcome_email, to_address=email)\n    message = {'status': 'Signup successful'}\n    return JSONResponse(message, background=task)\n\nasync def send_welcome_email(to_address):\n    ...\n\n\nroutes = [\n    ...\n    Route('/user/signup', endpoint=signup, methods=['POST'])\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Background Tasks in Starlette\nDESCRIPTION: Shows how to queue multiple asynchronous tasks to run in the background after sending a response. This pattern is useful for operations like sending emails or processing data that shouldn't delay the response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.background import BackgroundTasks\n\nasync def task1(name):\n    pass\n\nasync def task2(email):\n    pass\n\nasync def handler(request):\n    tasks = BackgroundTasks()\n    tasks.add_task(task1, name=\"John\")\n    tasks.add_task(task2, email=\"info@example.com\")\n    content = \"\"\n    return Response(content, background=tasks)\n```\n\n----------------------------------------\n\nTITLE: Implementing Syntax Highlighting with HighlightJS\nDESCRIPTION: Creates a HighlightJS component that adds syntax highlighting to code blocks. Supports multiple languages, light/dark themes, and includes a copy button plugin.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef HighlightJS(\n        sel='pre code:not([data-highlighted=\"yes\"])', # CSS selector for code elements. Default is industry standard, be careful before adjusting it\n        langs:str|list|tuple='python',  # Language(s) to highlight\n        light='atom-one-light',  # Light theme\n        dark='atom-one-dark'  # Dark theme\n    ):\n    \"Implements browser-based syntax highlighting. Usage example [here](/tutorials/quickstart_for_web_devs.html#code-highlighting).\"\n    src = \"\"\"\nhljs.addPlugin(new CopyButtonPlugin());\nhljs.configure({'cssSelector': '%s'});\nhtmx.onLoad(hljs.highlightAll);\"\"\" % sel\n    hjs = 'highlightjs','cdn-release', 'build'\n    hjc = 'arronhunt'  ,'highlightjs-copy', 'dist'\n    if isinstance(langs, str): langs = [langs]\n    langjs = [jsd(*hjs, f'languages/{lang}.min.js') for lang in langs]\n    return [jsd(*hjs, f'styles/{dark}.css', typ='css', media=\"(prefers-color-scheme: dark)\"),\n            jsd(*hjs, f'styles/{light}.css', typ='css', media=\"(prefers-color-scheme: light)\"),\n            jsd(*hjs, f'highlight.min.js'),\n            jsd(*hjc, 'highlightjs-copy.min.js'),\n            jsd(*hjc, 'highlightjs-copy.min.css', typ='css'),\n            *langjs, Script(src, type='module')]\n```\n\n----------------------------------------\n\nTITLE: Updating a Record That Passes Filter Criteria in MiniDataAPI\nDESCRIPTION: Successfully updates a record that matches the filter criteria set by .xtra().\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_232\n\nLANGUAGE: python\nCODE:\n```\ntodos.update(Todo(id=3, title='Finish development of FastHTML', detail=None, status='closed', name='Charlie'))\n```\n\n----------------------------------------\n\nTITLE: Creating Cookie Responses in FastHTML\nDESCRIPTION: Shows how to create a cookie response using the cookie() function, which returns an HttpHeader object with the 'set-cookie' key.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ncookie('now', datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents from Form Upload\nDESCRIPTION: Example showing how to access uploaded file properties like filename and read contents from a form submission.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nasync with request.form() as form:\n    filename = form[\"upload_file\"].filename\n    contents = await form[\"upload_file\"].read()\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters with Default Values in FastHTML\nDESCRIPTION: Shows how to handle query parameters with default values in FastHTML route handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nfake_db = [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n\n@app.get(\"/items/\")\ndef read_item(idx: int = 0): return fake_db[idx]\n\nprint(cli.get('/items/?idx=1').text)\n\n# Equivalent to `/items/?idx=0`.\nprint(cli.get('/items/').text)\n```\n\n----------------------------------------\n\nTITLE: Complete QuickDraw App with Basic Room Management\nDESCRIPTION: Full implementation of the QuickDraw application with room creation and navigation features. Includes database initialization, route handlers, and basic UI components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom datetime import datetime\n\ndef render(room):\n    return Li(A(room.name, href=f\"/rooms/{room.id}\"))\n\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, pk='id')\n\n@rt(\"/\")\ndef get():\n    create_room = Form(Input(id=\"name\", name=\"name\", placeholder=\"New Room Name\"),\n                       Button(\"Create Room\"),\n                       hx_post=\"/rooms\", hx_target=\"#rooms-list\", hx_swap=\"afterbegin\")\n    rooms_list = Ul(*rooms(order_by='id DESC'), id='rooms-list')\n    return Titled(\"DrawCollab\", create_room, rooms_list)\n\n@rt(\"/rooms\")\nasync def post(room:Room):\n    room.created_at = datetime.now().isoformat()\n    return rooms.insert(room)\n\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    return Titled(f\"Room: {room.name}\", H1(f\"Welcome to {room.name}\"), A(Button(\"Leave Room\"), href=\"/\"))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Custom Path Parameter Types\nDESCRIPTION: Demonstrates registration and usage of custom path parameter types using regular expressions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_291\n\nLANGUAGE: python\nCODE:\n```\nreg_re_param(\"imgext\", \"ico|gif|jpg|jpeg|webm\")\n\n@rt(r'/static/{path:path}{fn}.{ext:imgext}')\ndef get(fn:str, path:str, ext:str): return f\"Getting {fn}.{ext} from /{path}\"\n\nprint(cli.get('/static/foo/jph.ico').text)\n```\n\n----------------------------------------\n\nTITLE: FastHTML GET Route Method Shorthand\nDESCRIPTION: Demonstrates the shorthand notation for defining a GET route using the .get method decorator in FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_143\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\ndef my_function():\n    return \"Hello World from a GET request\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Python\nDESCRIPTION: Defines a function to embed a YouTube video into HTML with customizable parameters for dimensions and controls. It validates the video ID and constructs the embed URL accordingly.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef YouTubeEmbed(video_id:str, *, width:int=560, height:int=315, start_time:int=0, no_controls:bool=False, title:str=\"YouTube video player\", cls:str=\"\", **kwargs):\n    \"Embed a YouTube video\"\n    if not video_id or not isinstance(video_id, str):\n        raise ValueError(\"A valid YouTube video ID is required\")\n    params = []\n    if start_time>0: params.append(f\"start={start_time}\")\n    if no_controls: params.append(\"controls=0\")\n    query_string = \"?\" + \"&\".join(params) if params else \"\"\n    print(f\"https://www.youtube.com/embed/{video_id}{query_string}\")\n    return Div(\n        Iframe(\n            width=width,\n            height=height,\n            src=f\"https://www.youtube.com/embed/{video_id}{query_string}\",\n            title=title,\n            frameborder=\"0\",\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n            referrerpolicy=\"strict-origin-when-cross-origin\",\n            allowfullscreen='',\n            **kwargs\n        ),\n        cls=cls\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Methods for FastHTML\nDESCRIPTION: List of all supported HTTP methods in the FastHTML framework.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nall_meths = 'get post put delete patch head trace options'.split()\n```\n\n----------------------------------------\n\nTITLE: Complete Auth Redirect Handler with Session Management in Python\nDESCRIPTION: Final version of OAuth callback handler that stores user ID in session and redirects to home page.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.get(auth_callback_path)\ndef auth_redirect(code:str, request, session):\n    redir = redir_url(request, auth_callback_path)\n    user_info = client.retr_info(code, redir)\n    user_id = user_info[client.id_key] # get their ID\n    session['user_id'] = user_id # save ID in the session\n    return RedirectResponse('/', status_code=303)\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Handling in FastHTML\nDESCRIPTION: Demonstrates how FastHTML maps function names to HTTP methods. Different function names (get, post) handle different HTTP methods for the same route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \n\napp, rt = fast_app()\n\n@rt(\"/\")  \ndef get(): # <1>\n  return Titled(\"HTTP GET\", P(\"Handle GET\"))\n\n@rt(\"/\")  \ndef post(): # <2>\n  return Titled(\"HTTP POST\", P(\"Handle POST\"))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: FastHTML Form Handling with Dataclasses\nDESCRIPTION: Example of form handling using dataclasses and form filling utilities in FastHTML\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Profile: email:str; phone:str; age:int\nemail = 'john@example.com'\nprofiles = {email: Profile(email=email, phone='123456789', age=5)}\n@rt\ndef profile(email:str): return fill_form(profile_form, profiles[email])\n\nprofile_form = Form(method=\"post\", action=profile)(\n        Fieldset(\n            Label('Email', Input(name=\"email\")),\n            Label(\"Phone\", Input(name=\"phone\")),\n            Label(\"Age\", Input(name=\"age\"))),\n        Button(\"Save\", type=\"submit\"))\n```\n\n----------------------------------------\n\nTITLE: Creating the File Function for Including File Contents\nDESCRIPTION: Defines a File function that reads the contents of a file and includes it unescaped in the HTML output. This is useful for including external HTML, CSS, or JavaScript files directly in FastHTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef File(fname):\n    \"Use the unescaped text in file `fname` directly\"\n    return NotStr(Path(fname).read_text())\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Item HTML Rendering\nDESCRIPTION: Extends Todo class with HTML rendering capability using FastHTML components and HTMX attributes for interactive features.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef __ft__(self:Todo):\n    show = AX(self.title, f'/todos/{self.id}', 'current-todo')\n    edit = AX('edit',     f'/edit/{self.id}' , 'current-todo')\n    dt = '✅ ' if self.done else ''\n    cts = (dt, show, ' | ', edit, Hidden(id=\"id\", value=self.id), Hidden(id=\"priority\", value=\"0\"))\n    return Li(*cts, id=f'todo-{self.id}')\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawing Canvas with Fabric.js in FastHTML\nDESCRIPTION: Enhanced room detail view with a drawing canvas powered by Fabric.js. Includes color picker and brush size controls with corresponding JavaScript event handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    canvas = Canvas(id=\"canvas\", width=\"800\", height=\"600\")\n    color_picker = Input(type=\"color\", id=\"color-picker\", value=\"#3CDD8C\")\n    brush_size = Input(type=\"range\", id=\"brush-size\", min=\"1\", max=\"50\", value=\"10\")\n    \n    js = \"\"\"\n    var canvas = new fabric.Canvas('canvas');\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = '#3CDD8C';\n    canvas.freeDrawingBrush.width = 10;\n    \n    document.getElementById('color-picker').onchange = function() {\n        canvas.freeDrawingBrush.color = this.value;\n    };\n    \n    document.getElementById('brush-size').oninput = function() {\n        canvas.freeDrawingBrush.width = parseInt(this.value, 10);\n    };\n    \"\"\"\n    \n    return Titled(f\"Room: {room.name}\",\n                  A(Button(\"Leave Room\"), href=\"/\"),\n                  canvas,\n                  Div(color_picker, brush_size),\n                  Script(src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js\"),\n                  Script(js))\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Shutdown Signal in Python\nDESCRIPTION: A utility function that patches the Uvicorn Server to handle graceful shutdown. It creates an asyncio.Event that gets set when exit is handled, allowing applications to detect and respond to shutdown signals.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef signal_shutdown():\n    from uvicorn.main import Server\n    event = asyncio.Event()\n    @patch\n    def handle_exit(self:Server, *args, **kwargs):\n        event.set()\n        self.force_exit = True\n        self._orig_handle_exit(*args, **kwargs)\n    return event\n```\n\n----------------------------------------\n\nTITLE: Generating Redirect URL for OAuth in Python\nDESCRIPTION: Defines a function to generate the redirect URL for OAuth callbacks, considering the request's hostname and scheme.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef redir_url(request, redir_path, scheme=None):\n    \"Get the redir url for the host in `request`\"\n    scheme = 'http' if request.url.hostname in (\"localhost\", \"127.0.0.1\") else 'https'\n    return f\"{scheme}://{request.url.netloc}{redir_path}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Reloading with fast_app Function in Python\nDESCRIPTION: This snippet shows how to use the fast_app function to set up live reloading in development mode. It instantiates FastHTMLWithLiveReload when live=True is passed, and includes the serve() function to start the server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/live_reload.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp, rt = fast_app(live=True)  # <1>\n\nserve()  # <2>\n```\n\n----------------------------------------\n\nTITLE: Inserting a Record Using Keyword Arguments\nDESCRIPTION: Inserts a new user record by providing the field values as keyword arguments. This is a more concise alternative to creating a class instance first.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nusers.insert(name='Alma', email='a@example.com', year_started=2019)\n```\n\n----------------------------------------\n\nTITLE: Filling Form Inputs in Python\nDESCRIPTION: This function recursively fills form inputs with values from a given object. It handles various input types including text, checkbox, radio, textarea, and select elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef _fill_item(item, obj):\n    if not isinstance(item,FT): return item\n    tag,cs,attr = item.list\n    if isinstance(cs,tuple): cs = tuple(_fill_item(o, obj) for o in cs)\n    name = attr.get('name', None)\n    val = None if name is None else obj.get(name, None)\n    if val is not None and not 'skip' in attr:\n        if tag=='input':\n            if attr.get('type', '') == 'checkbox':\n                if isinstance(val, list):\n                    if attr['value'] in val: attr['checked'] = '1'\n                    else: attr.pop('checked', '')\n                elif val: attr['checked'] = '1'\n                else: attr.pop('checked', '')\n            elif attr.get('type', '') == 'radio':\n                if val and val == attr['value']: attr['checked'] = '1'\n                else: attr.pop('checked', '')\n            else: attr['value'] = val\n        if tag=='textarea': cs=(val,)\n        if tag == 'select':\n            if isinstance(val, list):\n                for opt in cs:\n                    if opt.tag == 'option' and opt.get('value') in val:\n                        opt.selected = '1'\n            else:\n                option = next((o for o in cs if o.tag=='option' and o.get('value')==val), None)\n                if option: option.selected = '1'\n    return FT(tag,cs,attr,void_=item.void_)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record with Numeric Primary Key\nDESCRIPTION: Shows how to retrieve a record using a numeric primary key in the Todo table. The MiniDataAPI supports both string and numeric primary keys.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntodos[1]\n```\n\n----------------------------------------\n\nTITLE: Inserting Todo Records with Different Methods\nDESCRIPTION: Demonstrates inserting records into the Todo table using class instances, keyword arguments, and dictionaries. Also shows that the insert method returns the newly created record.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntodos.insert(Todo(title='Write MiniDataAPI spec', status='open', name='Braden'))\ntodos.insert(title='Implement SSE in FastHTML', status='open', name='Alma')\ntodo = todos.insert(dict(title='Finish development of FastHTML', status='closed', name='Charlie'))\ntodo\n```\n\n----------------------------------------\n\nTITLE: JSON-based HTTP Exception Handler in Starlette\nDESCRIPTION: This code demonstrates how to override the default HTTPException handler to return JSON responses instead of the default plain text. It captures the exception details and transforms them into a structured JSON response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_118\n\nLANGUAGE: python\nCODE:\n```\nasync def http_exception(request: Request, exc: HTTPException):\n    return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\nexception_handlers = {\n    HTTPException: http_exception\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence with 'in' Operator in FastHTML\nDESCRIPTION: Demonstrates how to check if a record exists in the database using the 'in' operator against a primary key value. Returns a boolean indicating if the record exists.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n1 in users\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Starlette\nDESCRIPTION: Example of creating a customized JSON response in Starlette with specific media type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom starlette.responses import Response\n\nasync def handler(request):\n    data = {\n        \"name\": \"Bo\"\n    }\n    return Response(json.dumps(data), media_type=\"application/json\")\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to FastHTML Application in Python\nDESCRIPTION: Adds a route to the FastHTML application. This method allows specifying the path, HTTP methods, name, and whether to include the route in the API schema.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef route(self, path, methods, name, include_in_schema, body_wrap):\n    \"\"\"Add a route at `path`\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Social Media Card Headers in Python\nDESCRIPTION: Creates Open Graph and Twitter card meta headers for social sharing, including validation for URL and image paths, and configurable parameters for image dimensions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef Socials(title, site_name, description, image, url=None, w=1200, h=630, twitter_site=None, creator=None, card='summary'):\n    \"OG and Twitter social card headers\"\n    if not url: url=site_name\n    if not url.startswith('http'): url = f'https://{url}'\n    if not image.startswith('http'): image = f'{url}{image}'\n    res = [Meta(property='og:image', content=image),\n        Meta(property='og:site_name', content=site_name),\n        Meta(property='og:image:type', content='image/png'),\n        Meta(property='og:image:width', content=w),\n        Meta(property='og:image:height', content=h),\n        Meta(property='og:type', content='website'),\n        Meta(property='og:url', content=url),\n        Meta(property='og:title', content=title),\n        Meta(property='og:description', content=description),\n        Meta(name='twitter:image', content=image),\n        Meta(name='twitter:card', content=card),\n        Meta(name='twitter:title', content=title),\n        Meta(name='twitter:description', content=description)]\n    if twitter_site is not None: res.append(Meta(name='twitter:site',    content=twitter_site))\n    if creator      is not None: res.append(Meta(name='twitter:creator', content=creator))\n    return tuple(res)\n```\n\n----------------------------------------\n\nTITLE: Deploying FastHTML App to Railway in Python\nDESCRIPTION: Implements a function to deploy a FastHTML app to Railway. It checks the Railway CLI version, initializes a new project if needed, sets up domains, links the project, and optionally adds a mounted volume.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/09_cli.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@call_parse\ndef railway_deploy(\n    name:str, # The project name to deploy\n    mount:bool_arg=True # Create a mounted volume at /app/data?\n):\n    \"\"\"Deploy a FastHTML app to Railway\"\"\"\n    nm,ver = check_output(\"railway --version\".split()).decode().split()\n    assert nm=='railwayapp', f'Unexpected railway version string: {nm}'\n    if ver2tuple(ver)<(3,8): return print(\"Please update your railway CLI version to 3.8 or higher\")\n    cp = run(\"railway status --json\".split(), capture_output=True)\n    if not cp.returncode:\n        print(\"Checking deployed projects...\")\n        project_name = json.loads(cp.stdout.decode()).get('name')\n        if project_name == name: return print(\"This project is already deployed. Run `railway open`.\")\n    reqs = Path('requirements.txt')\n    if not reqs.exists(): reqs.write_text('python-fasthtml')\n    _run(f\"railway init -n {name}\".split())\n    _run(f\"railway up -c\".split())\n    _run(f\"railway domain\".split())\n    railway_link.__wrapped__()\n    if mount: _run(f\"railway volume add -m /app/data\".split())\n    _run(f\"railway up -c\".split())\n```\n\n----------------------------------------\n\nTITLE: Basic Route Handler Implementation\nDESCRIPTION: Implementation of basic GET and POST route handlers with client testing\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_274\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/hi\")\ndef get(): return 'Hi there'\n\ncli = Client(app)\n\n@rt(\"/hi\")\ndef post(): return 'Postal'\ncli.post('/hi').text\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Component for Pico.css\nDESCRIPTION: Implements a Pico.css Grid layout as a Div with class 'grid'. Automatically wraps content in Divs unless already provided as a list.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef Grid(*c, cls='grid', **kwargs)->FT:\n    \"A PicoCSS Grid, implemented as child Divs in a Div with class 'grid'\"\n    c = tuple(o if isinstance(o,list) else Div(o) for o in c)\n    return ft_hx('div', *c, cls=cls, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Updating a Todo Item with HTMX\nDESCRIPTION: Route handler for updating an existing todo item. It uses the MiniDataAPI's update method to save the changes and returns both the updated todo and a cleared details view. This enables immediate UI updates without a full page reload.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_74\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef put(todo: Todo):\n    # `update` is part of the MiniDataAPI spec.\n    # Note that the updated todo is returned. By returning the updated todo, we can update the list directly.\n    # Because we return a tuple with `clr_details()`, the details view is also cleared.\n    return todos.update(todo), clr_details()\n```\n\n----------------------------------------\n\nTITLE: Automatic Head/Body Element Placement in FastHTML\nDESCRIPTION: This snippet demonstrates how FastHTML automatically identifies and positions head elements (like Title and Meta) and body elements. The handler returns a tuple containing both head and body elements, which FastHTML distributes to the appropriate sections of the HTML document.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef meta(): \n    return ((Title('hi'),H1('hi')),\n        (Meta(property='image'), Meta(property='site_name')))\n\nprint(cli.post('/meta').text)\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request with TestClient\nDESCRIPTION: Shows how to test a POST route using the Starlette TestClient.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_145\n\nLANGUAGE: python\nCODE:\n```\nclient.post(\"/\").text\n```\n\n----------------------------------------\n\nTITLE: Stopping the FastHTML Server\nDESCRIPTION: Demonstrates how to gracefully shut down the server using the stop method. This prevents issues with dangling threads that could cause errors when restarting Jupyter.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nserver.stop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 OAuth Client in Python\nDESCRIPTION: Defines an Auth0AppClient class for Auth0 OAuth2 authentication, including methods for fetching OpenID configuration and generating login links.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Auth0AppClient(_AppClient):\n    \"A `WebApplicationClient` for Auth0 OAuth2\"\n    def __init__(self, domain, client_id, client_secret, code=None, scope=None, redirect_uri=\"\", **kwargs):\n        self.redirect_uri,self.domain = redirect_uri,domain\n        config = self._fetch_openid_config()\n        self.base_url,self.token_url,self.info_url = config[\"authorization_endpoint\"],config[\"token_endpoint\"],config[\"userinfo_endpoint\"]\n        super().__init__(client_id, client_secret, code=code, scope=scope, redirect_uri=redirect_uri, **kwargs)\n\n    def _fetch_openid_config(self):\n        r = httpx.get(f\"https://{self.domain}/.well-known/openid-configuration\")\n        r.raise_for_status()\n        return r.json()\n\n    def login_link(self, req):\n        d = dict(response_type=\"code\", client_id=self.client_id, scope=self.scope, redirect_uri=redir_url(req, self.redirect_uri))\n        return f\"{self.base_url}?{urlencode(d)}\"\n```\n\n----------------------------------------\n\nTITLE: Enhanced Auth Redirect Handler with User Info in Python\nDESCRIPTION: Improved OAuth callback handler that retrieves user information using the authorization code.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.get(auth_callback_path)\ndef auth_redirect(code:str, request):\n    redir = redir_url(request, auth_callback_path)\n    user_info = client.retr_info(code, redir)\n    user_id = info[client.id_key]\n    return P(f\"User id: {user_id}\")\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError in Delete Operation\nDESCRIPTION: Shows error handling when attempting to delete a non-existent record. A NotFoundError is raised when the primary key doesn't match any existing record.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_218\n\nLANGUAGE: python\nCODE:\n```\ntry: users.delete('Charlies')\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Parameters\nDESCRIPTION: Demonstrates handling of boolean query parameters with automatic string-to-bool conversion.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_295\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/booly/\")\ndef _(coming:bool=True): return 'Coming' if coming else 'Not coming'\nprint(cli.get('/booly/?coming=true').text)\nprint(cli.get('/booly/?coming=no').text)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Starlette Response\nDESCRIPTION: Example of adding custom HTTP headers to a Starlette response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nheaders = {\n\t\"x-extra-key\": \"value\"\n}\nreturn Response(content, status_code=200, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Real-Time Chat App with FastHTML and WebSockets - Frontend\nDESCRIPTION: The frontend part of a real-time chat application built with FastHTML and WebSockets, showing how to display messages and set up WebSocket connections.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_263\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\nmsgs = []\n@rt('/')\ndef home(): return Div(\n    Div(Ul(*[Li(m) for m in msgs], id='msg-list')),\n    Form(Input(id='msg'), id='form', ws_send=True),\n    hx_ext='ws', ws_connect='/ws')\n```\n\n----------------------------------------\n\nTITLE: Creating Classes with FastTags Integration\nDESCRIPTION: Demonstrates how to make a class compatible with FastTags rendering by implementing the __ft__ method, which defines how the object should be converted to HTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass FtTest:\n    def __ft__(self): return P('test')\n    \nto_xml(FtTest())\n```\n\n----------------------------------------\n\nTITLE: Implementing Static File Handler in FastHTML\nDESCRIPTION: Handles static file requests using path parameters with custom regex patterns for file extensions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/{fname:path}.{ext:static}\")\ndef get(fname:str, ext:str): return FileResponse(f'{fname}.{ext}')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records with Ordering\nDESCRIPTION: Demonstrates retrieving records with a specific sort order using the order_by parameter. This allows controlling the sequence of returned records.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nusers(order_by='name')\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Route Extensions\nDESCRIPTION: Configures static route paths and file extensions for serving static files. Defines route parameters for path matching and common static file extensions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nreg_re_param(\"path\", \".*?\")\n_static_exts = \"ico gif jpg jpeg webm css js woff png svg mp4 webp ttf otf eot woff2 txt html map pdf zip tgz gz csv mp3 wav ogg flac aac doc docx xls xlsx ppt pptx epub mobi bmp tiff avi mov wmv mkv json xml yaml yml rar 7z tar bz2 htm xhtml apk dmg exe msi swf iso json\".split()\nreg_re_param(\"static\", '|'.join(_static_exts))\n```\n\n----------------------------------------\n\nTITLE: FastHTML Route Handler Setup\nDESCRIPTION: Basic setup for FastHTML application and route handling with imports\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_273\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom collections import namedtuple\nfrom typing import TypedDict\nfrom datetime import datetime\nimport json,time\n\napp = FastHTML()\nrt = app.route\n```\n\n----------------------------------------\n\nTITLE: Creating Local Function with URL Generation\nDESCRIPTION: Function to create a local function wrapper with a 'to' method for URL generation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ndef _mk_locfunc(f,p):\n    class _lf:\n        def __init__(self): update_wrapper(self, f)\n        def __call__(self, *args, **kw): return f(*args, **kw)\n        def to(self, **kw): return qp(p, **kw)\n        def __str__(self): return p\n    return _lf()\n```\n\n----------------------------------------\n\nTITLE: Background Task Implementation\nDESCRIPTION: Implementation of background task processing with single and multiple task support.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_88\n\nLANGUAGE: python\nCODE:\n```\ndef my_slow_task():\n    print('Starting slow task')    \n    time.sleep(0.001)\n    print('Finished slow task')        \n\n@rt('/background')\ndef get():\n    return P('BG Task'), BackgroundTask(my_slow_task)\n\nr = cli.get('/background')\n\ntest_eq(r.status_code, 200)\n```\n\n----------------------------------------\n\nTITLE: Combining FastTags to Create Reusable Components\nDESCRIPTION: Shows how to create more complex, reusable UI components by combining multiple FastTags within a Python function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef Hero(title, statement): return Div(H1(title),P(statement), cls=\"hero\")\nto_xml(Hero(\"Hello World\", \"This is a hero statement\"))\n```\n\n----------------------------------------\n\nTITLE: Application Configuration in fasthtml.fastapp\nDESCRIPTION: Convenience wrapper function for creating and configuring FastHTML applications. It handles database connections, middleware, live reload, debugging, and other application-level settings.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef fast_app(db_file, render, hdrs, ftrs, tbls, before, middleware, live, debug, routes, exception_handlers, on_startup, on_shutdown, lifespan, default_hdrs, pico, surreal, htmx, exts, secret_key, key_fname, session_cookie, max_age, sess_path, same_site, sess_https_only, sess_domain, htmlkw, bodykw, reload_attempts, reload_interval, static_path, body_wrap, nb_hdrs, **kwargs)\n    # Create a FastHTML or FastHTMLWithLiveReload app.\n```\n\n----------------------------------------\n\nTITLE: Custom Complete HTML Structure\nDESCRIPTION: Demonstrates returning a complete custom HTML structure with Head and Body components, bypassing automatic boilerplate generation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_283\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft4')\ndef get(): return Html(Head(Title('hi')), Body(P('there')))\n\nprint(cli.get('/ft4').text)\n```\n\n----------------------------------------\n\nTITLE: Handling HTMX Requests\nDESCRIPTION: Simulating an HTMX request with the HX-Request header, which causes FastHTML to return only the component content without the HTML boilerplate.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nhxhdr = {'headers':{'hx-request':\"1\"}}\nprint(cli.get('/ft2', **hxhdr).text)\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator to Check Record Existence by Primary Key\nDESCRIPTION: Shows how to use the 'in' operator to check if a record with a specific primary key exists in a table. Returns a boolean value indicating existence.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_221\n\nLANGUAGE: python\nCODE:\n```\n'Alma' in users, 'John' in users\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Jupyter-Compatible Uvicorn Server Start\nDESCRIPTION: Implements 'nb_serve_async', an asynchronous version of 'nb_serve' for starting a Jupyter-compatible Uvicorn server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\nasync def nb_serve_async(app, log_level=\"error\", port=8000, host='0.0.0.0', **kwargs):\n    \"Async version of `nb_serve`\"\n    server = uvicorn.Server(uvicorn.Config(app, log_level=log_level, host=host, port=port, **kwargs))\n    asyncio.get_running_loop().create_task(server.serve())\n    while not server.started: await asyncio.sleep(0.01)\n    return server\n```\n\n----------------------------------------\n\nTITLE: FastHTML with Custom Headers and PicoCSS\nDESCRIPTION: Demonstrates creating a FastHTML application with custom headers including PicoCSS and custom styles. The example shows how to override PicoCSS defaults and apply container styling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\ncss = Style(':root {--pico-font-size:90%,--pico-font-family: Pacifico, cursive;}')\napp = FastHTML(hdrs=(picolink, css))\n\n@app.route(\"/\")\ndef get():\n    return (Title(\"Hello World\"), \n            Main(H1('Hello, World'), cls=\"container\"))\n```\n\n----------------------------------------\n\nTITLE: Fast App Creation with FastHTML\nDESCRIPTION: Shows how to create a FastHTML application with integrated database and rendering in a single line using the fast_app function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_128\n\nLANGUAGE: python\nCODE:\n```\ndef render(room):\n    return Li(A(room.name, href=f\"/rooms/{room.id}\"))\n\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, pk='id')\n```\n\n----------------------------------------\n\nTITLE: Implementing RedirectResponse in Starlette\nDESCRIPTION: Shows how to create a redirect response with different status codes. The handler function returns a RedirectResponse with optional status code (301 for permanent, 302 for temporary, 303 for see others, or 307 for temporary redirect by default).\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import RedirectResponse\n\nasync handler(request):\n    # Customize status_code: \n    #   301: permanent redirect \n    #   302: temporary redirect \n    #   303: see others\n    #   307: temporary redirect (default)\n    return RedirectResponse(url=url, status_code=303)\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular Expression Parameter Conversion\nDESCRIPTION: Defines a helper function for registering URL parameter converters based on regular expressions. This enables custom URL parameter parsing and validation in FastHTML route paths.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_81\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef reg_re_param(m, s):\n    cls = get_class(f'{m}Conv', sup=StringConvertor, regex=s)\n    register_url_convertor(m, cls())\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with ft_hx Function\nDESCRIPTION: Shows how to use the ft_hx function to create custom components with different behavior than FastHTML's default. This example creates a <path> tag that won't conflict with pathlib.Path.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import ft_hx\n\ndef ft_path(*c, target_id=None, **kwargs): \n    return ft_hx('path', *c, target_id=target_id, **kwargs)\n\nft_path()\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the ft_hx Function for HTMX Component Creation\nDESCRIPTION: Extends ft_html with HTMX-specific functionality, handling HTMX attributes like target_id, hx_vals, and hx_target. This function enables easy creation of HTMX-enhanced components with proper attribute handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@use_kwargs(hx_attrs, keep=True)\ndef ft_hx(tag: str, *c, target_id=None, hx_vals=None, hx_target=None, **kwargs):\n    if hx_vals: kwargs['hx_vals'] = json.dumps(hx_vals) if isinstance (hx_vals,dict) else hx_vals\n    if hx_target: kwargs['hx_target'] = '#'+hx_target.id if isinstance(hx_target,FT) else hx_target\n    if target_id: kwargs['hx_target'] = '#'+target_id\n    return ft_html(tag, *c, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebSocket Communication in FastHTML\nDESCRIPTION: Implementation of WebSocket functionality for real-time updates in the Game of Life, including player management and connection handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_172\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML(hdrs=(picolink, gridlink, css, htmx_ws), exts='ws')\n\nplayer_queue = []\nasync def update_players():\n    for i, player in enumerate(player_queue):\n        try: await player(Grid())\n        except: player_queue.pop(i)\nasync def on_connect(send): player_queue.append(send)\nasync def on_disconnect(send): await update_players()\n\n@app.ws('/gol', conn=on_connect, disconn=on_disconnect)\nasync def ws(msg:str, send): pass\n\ndef Home(): return Title('Game of Life'), Main(gol, Div(Grid(), id='gol', cls='row center-xs'), hx_ext=\"ws\", ws_connect=\"/gol\")\n\n@rt('/update')\nasync def put(x: int, y: int):\n    grid[y][x] = 1 if grid[y][x] == 0 else 0\n    await update_players()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record with Compound Primary Key (Direct Format)\nDESCRIPTION: Shows an alternative syntax for retrieving a record with a compound primary key by providing the key values directly as multiple arguments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npublications['Alma', 2030]\n```\n\n----------------------------------------\n\nTITLE: Request Body Parsing Function\nDESCRIPTION: Parses the request body and converts it to an object of the specified annotation type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nasync def _from_body(req, p):\n    anno = p.annotation\n    # Get the fields and types of type `anno`, if available\n    d = _annotations(anno)\n    data = form2dict(await parse_form(req))\n    if req.query_params: data = {**data, **dict(req.query_params)}\n    cargs = {k: _form_arg(k, v, d) for k, v in data.items() if not d or k in d}\n    return anno(**cargs)\n```\n\n----------------------------------------\n\nTITLE: Basic Router Configuration\nDESCRIPTION: Shows how to create a lightweight ASGI application using Router instance with nested routes and method specifications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_108\n\nLANGUAGE: python\nCODE:\n```\napp = Router(routes=[\n    Route('/', homepage),\n    Mount('/users', routes=[\n        Route('/', users, methods=['GET', 'POST']),\n        Route('/{username}', user),\n    ])\n])\n```\n\n----------------------------------------\n\nTITLE: FastTags Basic Usage Example\nDESCRIPTION: Shows how FastTags handle attributes and children with positional and named parameters\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLabel(\n    \"Choose an option\", \n    Select(\n        Option(\"one\", value=\"1\", selected=True),\n        Option(\"two\", value=2, selected=False),\n        cls=\"selector\", id=\"counter\",\n        **{'@click':\"alert('Clicked');\"},\n    ),\n    _for=\"counter\",\n)\n```\n\n----------------------------------------\n\nTITLE: HTMX Headers Implementation\nDESCRIPTION: Defines HTMX header constants and implements classes for handling HTMX-specific HTTP headers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#| export\nhtmx_hdrs = dict(\n    boosted=\"HX-Boosted\",\n    current_url=\"HX-Current-URL\",\n    history_restore_request=\"HX-History-Restore-Request\",\n    prompt=\"HX-Prompt\",\n    request=\"HX-Request\",\n    target=\"HX-Target\",\n    trigger_name=\"HX-Trigger-Name\",\n    trigger=\"HX-Trigger\")\n\n@dataclass\nclass HtmxHeaders:\n    boosted:str|None=None; current_url:str|None=None; history_restore_request:str|None=None; prompt:str|None=None\n    request:str|None=None; target:str|None=None; trigger_name:str|None=None; trigger:str|None=None\n    def __bool__(self): return any(hasattr(self,o) for o in htmx_hdrs)\n\ndef _get_htmx(h):\n    res = {k:h.get(v.lower(), None) for k,v in htmx_hdrs.items()}\n    return HtmxHeaders(**res)\n```\n\n----------------------------------------\n\nTITLE: Untyped Parameter Handling\nDESCRIPTION: Demonstrates behavior with untyped parameters and the resulting warning messages.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_289\n\nLANGUAGE: python\nCODE:\n```\n@rt('/oops')\ndef get(nope): return nope\nr = cli.get('/oops?nope=1')\nprint(r)\nr.text\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError when Updating Non-existent Records\nDESCRIPTION: Demonstrates error handling when attempting to update a record with a primary key that doesn't exist in the database. A NotFoundError is raised in this case.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ntry: users.update(User(name='John', year_started=2024, email='j@example.com'))\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Custom Locations\nDESCRIPTION: Example of defining a route that serves static files from custom locations using FileResponse, useful for serving images, videos, and other media files.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/{fname:path}.{ext:static}\")\nasync def get(fname:str, ext:str): \n    return FileResponse(f'public/{fname}.{ext}')\n```\n\n----------------------------------------\n\nTITLE: URL Generation with Named Routes\nDESCRIPTION: Shows how to generate URLs for named routes using the uri() function and HTML components. Demonstrates dynamic URL generation in HTML elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_286\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef autolink(): return Html(Div('Text.', link=uri('gday', nm='Alexis')))\nprint(cli.get('/autolink').text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Todo Handler in Python with FastHTML\nDESCRIPTION: Route handler for updating an existing todo item. Updates the todo in database and returns updated todo along with cleared details view.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef put(todo: Todo):\n    return todos.update(todo), clr_details()\n```\n\n----------------------------------------\n\nTITLE: Importing Module in FastLite vs FastSQL Implementation\nDESCRIPTION: Demonstrates how switching between database engines (SQLite to PostgreSQL) requires only changing the import statement and connection string while keeping the rest of the application code unchanged.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastlite import *\ndb = database('test.db')\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom fastsql import *\ndb = Database('postgres:...')\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClient for FastHTML Testing in Python\nDESCRIPTION: This snippet demonstrates how to set up and use TestClient for testing FastHTML applications. It shows how to create a client, make requests with custom headers, and print the response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\n```\n\nLANGUAGE: python\nCODE:\n```\npath = \"/profile?email=john@example.com\"\nclient = TestClient(app)\nhtmx_req = {'HX-Request':'1'}\nprint(client.get(path, headers=htmx_req).text)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Utilities in fasthtml.js\nDESCRIPTION: Functions for integrating JavaScript libraries into FastHTML applications, including markdown rendering, syntax highlighting, and diagram rendering using browser-based libraries.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef light_media(css)\n    # Render light media for day mode views\n\ndef dark_media(css)\n    # Render dark media for night mode views\n\ndef MarkdownJS(sel)\n    # Implements browser-based markdown rendering.\n\ndef HighlightJS(sel, langs, light, dark)\n    # Implements browser-based syntax highlighting. Usage example [here](/tutorials/quickstart_for_web_devs.html#code-highlighting).\n\ndef MermaidJS(sel, theme)\n    # Implements browser-based Mermaid diagram rendering.\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Application in Python\nDESCRIPTION: Creates a FastHTML application with various configuration options including debug mode, routes, middleware, and custom headers. This class extends Starlette and provides additional functionality specific to FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nclass FastHTML:\n    def __init__(self, debug, routes, middleware, title, exception_handlers, on_startup, on_shutdown, lifespan, hdrs, ftrs, exts, before, after, surreal, htmx, default_hdrs, sess_cls, secret_key, session_cookie, max_age, sess_path, same_site, sess_https_only, sess_domain, key_fname, body_wrap, htmlkw, nb_hdrs, **bodykw):\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Handler in FastHTML\nDESCRIPTION: Handles user logout by removing authentication from session and redirecting to login page.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/logout\")\ndef logout(sess):\n    del sess['auth']\n    return login_redir\n```\n\n----------------------------------------\n\nTITLE: Accessing FastHTML App Instance with Parameter Annotation\nDESCRIPTION: This snippet demonstrates how to access the FastHTML application instance using a parameter annotated with FastHTML type. The handler returns both content and a custom HTTP header. The example includes making a request with a test client and examining the response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/app2\")\ndef _(foo:FastHTML): return foo.chk,HttpHeader(\"mykey\", \"myval\")\nr = cli.get('/app2', **hxhdr)\nprint(r.text)\nprint(r.headers)\n```\n\n----------------------------------------\n\nTITLE: Using State Wrapper for Dictionary Access in Starlette\nDESCRIPTION: Shows how to use Starlette's State class to wrap a dictionary, allowing dot notation access to dictionary keys. This provides a more convenient syntax when accessing dictionary values.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.datastructures import State\n\ndata = {\n    \"name\": \"Bo\"\n}\nprint(data[\"name\"])\n# now wrap it with State function\nwrapped = State(data)\n# You can use the dot syntaxt, but can't use `wrapped[\"name\"]` any more.\nprint(wrapped.name)\n```\n\n----------------------------------------\n\nTITLE: Defining Base OAuth Application Client in Python\nDESCRIPTION: Creates a base _AppClient class that extends WebApplicationClient, setting up common attributes for OAuth clients.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass _AppClient(WebApplicationClient):\n    id_key = 'sub'\n    def __init__(self, client_id, client_secret, code=None, scope=None, **kwargs):\n        super().__init__(client_id, code=code, scope=scope, **kwargs)\n        self.client_secret = client_secret\n```\n\n----------------------------------------\n\nTITLE: Building a Real-Time Chat App with FastHTML WebSockets - Home Page\nDESCRIPTION: First part of implementing a real-time chat application with FastHTML WebSockets. Sets up the home page with a message list and a form for sending new messages.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\nmsgs = []\n@rt('/')\ndef home(): return Div(\n    Div(Ul(*[Li(m) for m in msgs], id='msg-list')),\n    Form(Input(id='msg'), id='form', ws_send=True),\n    hx_ext='ws', ws_connect='/ws')\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError in FastHTML\nDESCRIPTION: Demonstrates error handling when a record is not found. The NotFoundError is raised when trying to access a non-existent record by primary key, update, or delete operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ntry: users['Amy']\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Using Named Tuples for Structured Form Data in FastHTML\nDESCRIPTION: Demonstrates how to use named tuples to define structured form data and handle it in a FastHTML route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_309\n\nLANGUAGE: python\nCODE:\n```\nnt = namedtuple('Bodient', ['a','b'])\n\n@app.post(\"/bodient/\")\ndef bodient(data:nt): return asdict(data)\nprint(cli.post('/bodient/', data=d).text)\n```\n\n----------------------------------------\n\nTITLE: HTML Extension Components\nDESCRIPTION: Enhanced HTML components with sensible defaults and HTMX integration. Includes form elements, scripts, styles and utility functions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef A(*c, **kwargs)  # A tag with default href='#'\n\n@delegates(ft_hx, keep=True)\ndef Form(*c, **kwargs)  # Form with multipart/form-data encoding\n\n@delegates(ft_html, keep=True)\ndef Script(code, **kwargs)  # Script tag without code escaping\n```\n\n----------------------------------------\n\nTITLE: Creating Theme and Lightbox Components in Python with FastHTML\nDESCRIPTION: Functions for implementing theme selection and lightbox functionality. ThemePicker creates a theme selection component, while LightboxContainer and LightboxItem are used for creating lightbox galleries.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\ndef ThemePicker(color, radii, shadows, font, mode, cls, custom_themes):\n    # Theme picker component with configurable sections\n    pass\n\ndef LightboxContainer(*lightboxitem, **kwargs):\n    # Lightbox container that will hold `LightboxItems`\n    pass\n\ndef LightboxItem(*c, **kwargs):\n    # Anchor tag with appropriate structure to go inside a `LightBoxContainer`\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Bar Components in Python with FastHTML\nDESCRIPTION: A collection of functions for building navigation components including NavCloseLi, NavBar, and ScrollspyT enum for styling navigation elements. These components provide the foundation for creating responsive navigation systems in FastHTML applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\ndef NavCloseLi(*c, **kwargs):\n    # Creates a navigation list item with a close button\n    pass\n\nclass ScrollspyT(Enum):\n    # Members: underline, bold\n    underline = \"underline\"\n    bold = \"bold\"\n\ndef NavBar(*c):\n    # Creates a responsive navigation bar with mobile menu support\n    pass\n\ndef DropDownNavContainer(*li, **kwargs):\n    # A Nav that is part of a DropDown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Path Objects as Parameters in Python\nDESCRIPTION: Demonstrates how to use Path objects from the pathlib module as parameter types in FastHTML. This approach provides a convenient way to handle file paths.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/files/{path}\")\nasync def get(path: Path): return path.with_suffix('.txt')\nprint(cli.get('/files/foo').text)\n```\n\n----------------------------------------\n\nTITLE: Alternative Route Definition with HTTP Method Functions\nDESCRIPTION: Using app.route decorator with explicit function names matching HTTP methods to define routes. This example creates a POST route for the root path.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrt = app.route\n\n@rt('/')\ndef post(): return \"Going postal!\"\n\nclient.post('/').text\n```\n\n----------------------------------------\n\nTITLE: Defining an Index Route\nDESCRIPTION: Creates a route for the index page of the application, returning HTML content using FastHTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_175\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef index():\n    return Titled('Hello, Jupyter',\n           P('Welcome to the FastHTML + Jupyter example'),\n           Button('Click', hx_get='/click', hx_target='#dest'),\n           Div(id='dest')\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing View Todo Details Handler in Python with FastHTML\nDESCRIPTION: Route handler for displaying todo details. Creates a view with title, markdown-formatted details, and delete button with HTMX attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/todos/{id}\")\ndef get(id:int):\n    todo = todos[id]\n    btn = Button('delete', hx_delete=f'/todos/{todo.id}',\n                 target_id=f'todo-{todo.id}', hx_swap=\"outerHTML\")\n    return Div(H2(todo.title), Div(todo.details, cls=\"markdown\"), btn)\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX with XMLHttpRequest in FastHTML\nDESCRIPTION: Demonstrates how to use XMLHttpRequest to make AJAX requests and update DOM content in response to click events.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_80\n\nLANGUAGE: js\nCODE:\n```\nme().on(\"click\", async event => {\n  let e = me(event)\n  // EXAMPLE 1: Hit an endpoint.\n  var xhr = new XMLHttpRequest()\n  xhr.open(\"GET\", \"/webhook\")\n  xhr.send()\n  // EXAMPLE 2: Get content and replace me()\n  var xhr = new XMLHttpRequest()\n  xhr.open(\"GET\", \"/endpoint\")\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 300) e.innerHTML = xhr.responseText\n  }\n  xhr.send()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Button Style Enums in Python\nDESCRIPTION: Enum class defining button styling options including variants, sizes and types.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nclass ButtonT(Enum)\\n    Members: default, ghost, primary, secondary, destructive, text, link, xs, sm, lg, xl, icon\n```\n\n----------------------------------------\n\nTITLE: Testing FastHTML with Starlette TestClient\nDESCRIPTION: Shows how to use Starlette's TestClient to test a FastHTML application in a Jupyter notebook, making HTTP requests and printing the returned HTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_140\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\nclient = TestClient(app)\nr = client.get(\"/\")\nprint(r.text)\n```\n\n----------------------------------------\n\nTITLE: HTMX Response Handler\nDESCRIPTION: Functions for handling HTMX responses and target processing\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n_verbs = dict(get='hx-get', post='hx-post', put='hx-post', delete='hx-delete', patch='hx-patch', link='href')\n\ndef _url_for(req, t):\n    if callable(t): t = t.__routename__\n    kw = {}\n    if t.find('/')>-1 and (t.find('?')<0 or t.find('/')<t.find('?')): t,kw = decode_uri(t)\n    t,m,q = t.partition('?')\n    return f\"{req.url_path_for(t, **kw)}{m}{q}\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Exception Handler with Headers Propagation\nDESCRIPTION: This example shows how to properly propagate headers from an HTTPException to the response. This is useful when the exception includes important headers like authentication challenges.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_119\n\nLANGUAGE: python\nCODE:\n```\nasync def http_exception(request: Request, exc: HTTPException):\n    return JSONResponse(\n        {\"detail\": exc.detail},\n        status_code=exc.status_code,\n        headers=exc.headers\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Modular Books Module for FastHTML\nDESCRIPTION: Defining a separate module for book-related routes that can be mounted in the main application. This demonstrates modular application structure.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# books.py\nbooks_app, rt = fast_app()\n\nbooks = ['A Guide to FastHTML', 'FastHTML Cookbook', 'FastHTML in 24 Hours']\n\n@rt(\"/\", name=\"list\")\ndef get():\n    return Titled(\"Books\", *[P(book) for book in books])\n```\n\n----------------------------------------\n\nTITLE: Form to Dictionary Conversion Function\nDESCRIPTION: Converts Starlette FormData to a dictionary, handling multiple values for a single key.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef form2dict(form: FormData) -> dict:\n    \"Convert starlette form data to a dict\"\n    if isinstance(form, dict): return form\n    return {k: _formitem(form, k) for k in form}\n```\n\n----------------------------------------\n\nTITLE: Basic FT Component Usage in Python\nDESCRIPTION: Demonstrates basic usage of FastHTML FT components to create HTML elements using Python objects. Shows how to create a div containing heading and paragraph elements with class attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/explaining_xt_components.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\ndef example():\n    # The code below is a set of ft components\n    return Div(\n            H1(\"FastHTML APP\"),\n            P(\"Let's do this\"),\n            cls=\"go\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Return with HTML Boilerplate\nDESCRIPTION: Shows how to return multiple FT components as a tuple, with automatic HTML boilerplate generation including required scripts and meta tags.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_280\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft2')\ndef get(): return Title('Foo'),H1('bar')\nprint(cli.get('/ft2').text)\n```\n\n----------------------------------------\n\nTITLE: Displaying Todo Details with HTMX and Markdown Support\nDESCRIPTION: Route handler for viewing a single todo item's details. It retrieves the todo by ID and creates a detailed view with a title, markdown-formatted details, and a delete button. The delete button uses HTMX attributes to handle the deletion process dynamically.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/todos/{id}\")\ndef get(id:int):\n    todo = todos[id]\n    # `hx_swap` determines how the update should occur. We use \"outerHTML\" to replace the entire todo `Li` element.\n    btn = Button('delete', hx_delete=f'/todos/{todo.id}',\n                 target_id=f'todo-{todo.id}', hx_swap=\"outerHTML\")\n    # The \"markdown\" class is used here because that's the CSS selector we used in the JS earlier.\n    # Therefore this will trigger the JS to parse the markdown in the details field.\n    # Because `class` is a reserved keyword in Python, we use `cls` instead, which FastHTML auto-converts.\n    return Div(H2(todo.title), Div(todo.details, cls=\"markdown\"), btn)\n```\n\n----------------------------------------\n\nTITLE: FastHTML Headers and Static Content Configuration\nDESCRIPTION: Configuration of FastHTML application headers, including CSS frameworks, static files, and client-side rendering setup\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp, rt = fast_app(\n    pico=False,\n    hdrs=(\n        Link(rel='stylesheet', href='assets/normalize.min.css', type='text/css'),\n        Link(rel='stylesheet', href='assets/sakura.css', type='text/css'),\n        Style(\"p {color: red;}\"),\n        MarkdownJS(), HighlightJS(langs=['python', 'javascript', 'html', 'css']),\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Named Routes in Python\nDESCRIPTION: Shows how to use the uri function to generate URLs for named routes in FastHTML. This approach promotes maintainable code by centralizing route definitions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef autolink(): return Html(Div('Text.', link=uri('gday', nm='Alexis')))\nprint(cli.get('/autolink').text)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Handler\nDESCRIPTION: Defining a GET route that receives the request object as a parameter and accesses its headers, demonstrating request object handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hostie\")\ndef show_host(req): return req.headers['host']\ncli.get('/hostie').text\n```\n\n----------------------------------------\n\nTITLE: HTMX Request Headers\nDESCRIPTION: Standard HTTP headers sent by HTMX with every request to provide context about the triggering element, current state, and user interactions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nHX-Boosted\nHX-Current-URL\nHX-History-Restore-Request\nHX-Prompt\nHX-Request\nHX-Target\nHX-Trigger-Name\nHX-Trigger\n```\n\n----------------------------------------\n\nTITLE: Creating DialogX Component for Pico.css\nDESCRIPTION: Implements a Pico.css Dialog component with Card content and optional header/footer. Designed for creating modal dialogs in a Pico.css styled interface.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef DialogX(*c, open=None, header=None, footer=None, id=None, **kwargs)->FT:\n    \"A PicoCSS Dialog, with children inside a Card\"\n    card = Card(*c, header=header, footer=footer, **kwargs)\n    return Dialog(card, open=open, id=id)\n```\n\n----------------------------------------\n\nTITLE: Working with FastTags Attributes\nDESCRIPTION: Shows how FastTags handle various attribute situations including boolean attributes, reserved word aliases, and special character attributes through dictionary unpacking.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLabel(\n    \"Choose an option\", \n    Select(\n        Option(\"one\", value=\"1\", selected=True),  # True renders just the attribute name\n        Option(\"two\", value=2, selected=False),   # Non-string values are converted to strings. False omits the attribute entirely\n        cls=\"selector\", id=\"counter\",             # 'cls' becomes 'class'\n        **{'@click':\"alert('Clicked');\"},         # Dict unpacking for attributes with special chars\n    ),\n    _for=\"counter\",                               # '_for' becomes 'for' (can also use 'fr')\n)\n```\n\n----------------------------------------\n\nTITLE: Handling HTMX Headers in FastHTML (Python)\nDESCRIPTION: Shows two ways to access HTMX-specific headers in FastHTML route handlers. One uses the special 'htmx' parameter, and the other uses a parameter annotated with HtmxHeaders. Both return the value of the 'HX-Request' header.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_298\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hxtest\")\ndef _(htmx): return htmx.request\nprint(cli.get('/hxtest', headers={'HX-Request':'1'}).text)\n\n@app.get(\"/hxtest2\")\ndef _(foo:HtmxHeaders, req): return foo.request\nprint(cli.get('/hxtest2', headers={'HX-Request':'1'}).text)\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Root Element\nDESCRIPTION: Creates the main SVG container element with automatic handling of viewBox, dimensions, and XML namespace.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef Svg(*args, viewBox=None, h=None, w=None, height=None, width=None, xmlns=\"http://www.w3.org/2000/svg\", **kwargs):\n    \"An SVG tag; xmlns is added automatically, and viewBox defaults to height and width if not provided\"\n    if h: height=h\n    if w: width=w\n    if not viewBox and height and width: viewBox=f'0 0 {width} {height}'\n    return ft_svg('svg', *args, xmlns=xmlns, viewBox=viewBox, height=height, width=width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Database Schema (Python)\nDESCRIPTION: This snippet defines a database schema for storing payment information. It includes fields for the checkout session ID, email, amount, payment status, timestamp, and additional metadata.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Payment:\n    checkout_session_id: str  # Stripe checkout session ID (primary key)\n    email: str\n    amount: int  # Amount paid in cents\n    payment_status: str  # paid, pending, failed\n    created_at: int # Unix timestamp\n    metadata: str  # Additional payment metadata as JSON\n```\n\n----------------------------------------\n\nTITLE: Initializing GitHub OAuth Client in Python\nDESCRIPTION: Sets up the GitHub OAuth client with client credentials for handling authentication flow between the app and GitHub.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = GitHubAppClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\"\n)\n```\n\n----------------------------------------\n\nTITLE: Route Priority Examples in Starlette\nDESCRIPTION: Illustrates the importance of route ordering when handling specific vs. general route patterns. Shows correct and incorrect implementations for route priority.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_107\n\nLANGUAGE: python\nCODE:\n```\n# Don't do this: `/users/me` will never match incoming requests.\nroutes = [\n    Route('/users/{username}', user),\n    Route('/users/me', current_user),\n]\n\n# Do this: `/users/me` is tested first.\nroutes = [\n    Route('/users/me', current_user),\n    Route('/users/{username}', user),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Application with Secret Key\nDESCRIPTION: Sets up a FastHTML application with a secret key for secure operations like session management, and creates a test client for making requests to the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML(secret_key='soopersecret')\ncli = Client(app)\nrt = app.route\n```\n\n----------------------------------------\n\nTITLE: HTMX Response Headers Generator\nDESCRIPTION: Creates HTMX response headers based on provided keyword arguments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@use_kwargs_dict(**htmx_resps)\ndef HtmxResponseHeaders(**kwargs):\n    \"HTMX response headers\"\n    res = tuple(HttpHeader(_to_htmx_header(k), v) for k,v in kwargs.items())\n    return res[0] if len(res)==1 else res\n```\n\n----------------------------------------\n\nTITLE: Querying Todo Records in Python with MiniDataAPI\nDESCRIPTION: Demonstrates how to retrieve all todo records from a database using MiniDataAPI. Returns a list of Todo objects with their respective properties.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_224\n\nLANGUAGE: python\nCODE:\n```\ntodos()\n```\n\n----------------------------------------\n\nTITLE: Updating a User Record in FastHTML\nDESCRIPTION: Shows how to update a user record in the database. Updates can be performed using either a dict or a typed object. The example modifies the name and active status, returning the updated record.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nuser.name='Lauren'\nuser.active=True\nusers.update(user)\n```\n\n----------------------------------------\n\nTITLE: Using Type-Annotated Path Parameters in Python\nDESCRIPTION: Shows how to use type-annotated path parameters in FastHTML. The framework automatically converts the parameter to the specified type if possible.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@rt('/html/{idx}')\ndef get(idx:int): return Body(H4(f'Next is {idx+1}.'))\nprint(cli.get('/html/1', **hxhdr).text)\n```\n\n----------------------------------------\n\nTITLE: Generating PicoCSS Components in Python\nDESCRIPTION: The pico module provides functions for generating PicoCSS components like cards, groups, search forms, grids, dialogs, and containers. These components are implemented as HTML elements with appropriate classes and roles as per PicoCSS specifications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Card(*c, **kwargs):\n    # A PicoCSS Card, implemented as an Article with optional Header and Footer\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Group(*c, **kwargs):\n    # A PicoCSS Group, implemented as a Fieldset with role 'group'\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Search(*c, **kwargs):\n    # A PicoCSS Search, implemented as a Form with role 'search'\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Grid(*c, **kwargs):\n    # A PicoCSS Grid, implemented as child Divs in a Div with class 'grid'\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef DialogX(*c, **kwargs):\n    # A PicoCSS Dialog, with children inside a Card\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Container(*args, **kwargs):\n    # A PicoCSS Container, implemented as a Main with class 'container'\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Keyword for Record Existence Check in Python\nDESCRIPTION: Shows how to use the 'in' keyword to check if a record exists in a table based on its primary key. It works with both single and compound primary keys.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n'Alma' in users, 'John' in users\n```\n\nLANGUAGE: python\nCODE:\n```\n['Alma', 2019] in  publications\n```\n\nLANGUAGE: python\nCODE:\n```\n('John', 1967) in publications\n```\n\n----------------------------------------\n\nTITLE: Creating a FastHTML route returning XML objects\nDESCRIPTION: Demonstrates creating a web application with FastHTML that returns fastcore.xml objects directly without conversion to string. The example defines a route that returns a complete HTML page.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_139\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\napp = FastHTML()\n\n@app.get(\"/\")\ndef home():\n    page = Html(\n        Head(Title('Some page')),\n        Body(Div('Some text, ', A('A link', href='https://example.com'), Img(src=\"https://placehold.co/200\"), cls='myclass')))\n    return page\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Grid UI with HTMX\nDESCRIPTION: Implementation of the interactive grid UI for Game of Life using FastHTML and HTMX for client-server communication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_171\n\nLANGUAGE: python\nCODE:\n```\ndef Grid():\n    cells = []\n    for y, row in enumerate(game_state['grid']):\n        for x, cell in enumerate(row):\n            cell_class = 'alive' if cell else 'dead'\n            cell = Div(cls=f'cell {cell_class}', hx_put='/update', hx_vals={'x': x, 'y': y}, hx_swap='none', hx_target='#gol', hx_trigger='click')\n            cells.append(cell)\n    return Div(*cells, id='grid')\n\n@rt('/update')\nasync def put(x: int, y: int):\n    grid[y][x] = 1 if grid[y][x] == 0 else 0\n```\n\n----------------------------------------\n\nTITLE: Deleting Records by Primary Key in FastHTML MiniDataAPI\nDESCRIPTION: Demonstrates deleting a record using its primary key. Returns the table object after deletion for method chaining.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_217\n\nLANGUAGE: python\nCODE:\n```\nusers.delete('Charlie')\n```\n\n----------------------------------------\n\nTITLE: Static File Serving in FastHTML\nDESCRIPTION: Demonstrates configuring static file serving for specific file extensions from a designated directory.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_318\n\nLANGUAGE: python\nCODE:\n```\napp.static_route('.md', static_path='..')\nprint(cli.get('/README.md').text[:10])\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Custom FastTags\nDESCRIPTION: Shows how to import existing components or create new custom FastTags that don't yet exist in the FastHTML.components module.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.components import Some_never_before_used_tag\n\nSome_never_before_used_tag()\n```\n\n----------------------------------------\n\nTITLE: Implementing Polygon SVG Element\nDESCRIPTION: Creates an SVG polygon element with support for points (as either coordinate pairs or a space-separated string), fill and stroke attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Polygon(*args, points=None, fill=None, stroke=None, stroke_width=None, **kwargs):\n    \"A standard SVG `polygon` element\"\n    if points is None: points = ' '.join(f\"{x},{y}\" for x, y in args)\n    return ft_svg('polygon', points=points, fill=fill, stroke=stroke, stroke_width=stroke_width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of MermaidJS for Diagram Rendering\nDESCRIPTION: Demonstrates how to use the MermaidJS component in a FastHTML application to render a flowchart diagram that visualizes a recursive factorial function call stack.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp, rt = fast_app(hdrs=[MermaidJS()])\n@rt('/')\ndef get():\n    return Titled(\"Mermaid Examples\", \n        # Assigning 'marked' class to components renders content as markdown\n        Pre(Code(cls =\"language-mermaid\")('''flowchart TD\n            A[main] --> B[\"fact(5)\"] --> C[\"fact(4)\"] --> D[\"fact(3)\"] --> E[\"fact(2)\"] --> F[\"fact(1)\"] --> G[\"fact(0)\"]\n           ''')))\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Starlette\nDESCRIPTION: Shows how to create redirect responses with Starlette, including options for different status codes (301, 302, 303, 307). This is useful for routing users to different pages based on conditions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import RedirectResponse\n\nasync handler(request):\n    # Customize status_code: \n    #   301: permanent redirect \n    #   302: temporary redirect \n    #   303: see others\n    #   307: temporary redirect (default)\n    return RedirectResponse(url=url, status_code=303)\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Save and Load Routes\nDESCRIPTION: Adds two new routes to handle saving and loading canvas data. The save route updates the database with the canvas_data, while the load route retrieves and returns the saved data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_133\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}/save\")\nasync def post(id:int, canvas_data:str):\n    rooms.update({'canvas_data': canvas_data}, id)\n    return \"Canvas saved successfully\"\n\n@rt(\"/rooms/{id}/load\")\nasync def get(id:int):\n    room = rooms[id]\n    return room.canvas_data if room.canvas_data else \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic HTML with MonsterUI in FastHTML\nDESCRIPTION: Demonstrates how to create semantic HTML components using MonsterUI in FastHTML. The example includes various semantic elements like headings, paragraphs, and blockquotes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef SemanticText():\n    return Card(\n        H1(\"MonsterUI's Semantic Text\"),\n        P(\n            Strong(\"MonsterUI\"), \" brings the power of semantic HTML to life with \",\n            Em(\"beautiful styling\"), \" and \", Mark(\"zero configuration\"), \".\"),\n        Blockquote(\n            P(\"Write semantic HTML in pure Python, get modern styling for free.\"),\n            Cite(\"MonsterUI Team\")),\n        footer=Small(\"Released February 2025\"),)\n```\n\n----------------------------------------\n\nTITLE: Room Detail View Route\nDESCRIPTION: Route handler for displaying a specific drawing room with basic navigation controls. Fetches room data from the database and displays it to the user.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    return Titled(f\"Room: {room.name}\", H1(f\"Welcome to {room.name}\"), A(Button(\"Leave Room\"), href=\"/\"))\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with .xtra() Method in Python\nDESCRIPTION: Demonstrates the use of the .xtra() method to filter records based on specific field values. This affects all database operations except record creation and is useful for implementing access control.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ntodos()\n```\n\nLANGUAGE: python\nCODE:\n```\ntodos.xtra(name='Charlie')\n```\n\nLANGUAGE: python\nCODE:\n```\ntodos()\n```\n\nLANGUAGE: python\nCODE:\n```\nct = todos[3]\nct\n```\n\nLANGUAGE: python\nCODE:\n```\nct.id in todos\n```\n\nLANGUAGE: python\nCODE:\n```\n1 in todos, 2 in todos\n```\n\nLANGUAGE: python\nCODE:\n```\ntry: todos[2]\nexcept NotFoundError: print('Record not found')\n```\n\nLANGUAGE: python\nCODE:\n```\ntry: todos.update(Todo(id=1, title='Finish MiniDataAPI Spec', status='closed', name='Braden'))\nexcept NotFoundError as e: print('Record not updated')\n```\n\nLANGUAGE: python\nCODE:\n```\ntodos.update(Todo(id=3, title='Finish development of FastHTML', detail=None, status='closed', name='Charlie'))\n```\n\nLANGUAGE: python\nCODE:\n```\ntry: todos.delete(1)\nexcept NotFoundError as e: print('Record not updated')\n```\n\nLANGUAGE: python\nCODE:\n```\ntodos.delete(ct.id)\n```\n\nLANGUAGE: python\nCODE:\n```\nct = todos.insert(Todo(title='Rewrite personal site in FastHTML', status='open'))\nct\n```\n\nLANGUAGE: python\nCODE:\n```\nct.name = 'Braden'\ntodos.update(ct)\n```\n\n----------------------------------------\n\nTITLE: Running FastHTML App with Uvicorn (Command Line)\nDESCRIPTION: Command to run a FastHTML application using the Uvicorn ASGI server. This assumes the application is defined in a file named main.py.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Session ID Management in JavaScript\nDESCRIPTION: Provides a script to manage session IDs utilizing sessionStorage. It ensures unique session IDs are created and added to outgoing requests via the htmx 'configRequest' event.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#| export\nsid_scr = Script('''\nfunction uuid() {\n    return [...crypto.getRandomValues(new Uint8Array(10))].map(b=>b.toString(36)).join('');\n}\n\nsessionStorage.setItem(\"sid\", sessionStorage.getItem(\"sid\") || uuid());\n\nhtmx.on(\"htmx:configRequest\", (e) => {\n    const sid = sessionStorage.getItem(\"sid\");\n    if (sid) {\n        const url = new URL(e.detail.path, window.location.origin);\n        url.searchParams.set('sid', sid);\n        e.detail.path = url.pathname + url.search;\n    }\n});\n''')\n```\n\n----------------------------------------\n\nTITLE: Basic Form Data Handling\nDESCRIPTION: Demonstrates handling of basic form data with required parameters.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/profile/me')\ndef profile_update(username: str): return username\n\nr = cli.post('/profile/me', data={'username' : 'Alexis'}).text\nassert r == 'Alexis'\nprint(r)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Exception Handler in Starlette\nDESCRIPTION: This code shows how to handle WebSocketException in Starlette applications. It properly closes the WebSocket connection with an appropriate error code when an exception occurs.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_120\n\nLANGUAGE: python\nCODE:\n```\nasync def websocket_exception(websocket: WebSocket, exc: WebSocketException):\n    await websocket.close(code=1008)\n\nexception_handlers = {\n    WebSocketException: websocket_exception\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record by Primary Key in FastHTML\nDESCRIPTION: Shows how to delete a user record by its primary key. The delete operation returns a reference to the table object after deletion.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nusers.delete(user.id)\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Tag Constructor Functions\nDESCRIPTION: Creates constructor functions for all standard HTML tags using ft_hx as the foundation. This enables convenient creation of HTML elements like Div(), P(), or H1() with built-in HTMX capabilities.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\n_g = globals()\n_all_ = [\n    'A', 'Abbr', 'Address', 'Area', 'Article', 'Aside', 'Audio', 'B', 'Base', 'Bdi', 'Bdo', 'Blockquote', 'Body', 'Br',\n    'Button', 'Canvas', 'Caption', 'Cite', 'Code', 'Col', 'Colgroup', 'Data', 'Datalist', 'Dd', 'Del', 'Details', 'Dfn',\n    'Dialog', 'Div', 'Dl', 'Dt', 'Em', 'Embed', 'Fencedframe', 'Fieldset', 'Figcaption', 'Figure', 'Footer', 'Form',\n    'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'Head', 'Header',\n    'Hgroup', 'Hr', 'I', 'Iframe', 'Img', 'Input', 'Ins', 'Kbd', 'Label', 'Legend', 'Li',\n    'Link', 'Main', 'Map', 'Mark', 'Menu', 'Meta', 'Meter', 'Nav', 'Noscript', 'Object', 'Ol', 'Optgroup', 'Option', 'Output',\n    'P', 'Picture', 'PortalExperimental', 'Pre', 'Progress', 'Q', 'Rp', 'Rt', 'Ruby', 'S', 'Samp', 'Script', 'Search',\n    'Section', 'Select', 'Slot', 'Small', 'Source', 'Span', 'Strong', 'Style', 'Sub', 'Summary', 'Sup', 'Table', 'Tbody',\n    'Td', 'Template', 'Textarea', 'Tfoot', 'Th', 'Thead', 'Time', 'Title', 'Tr', 'Track', 'U', 'Ul', 'Var', 'Video', 'Wbr']\nfor o in _all_: _g[o] = partial(ft_hx, o.lower())\n```\n\n----------------------------------------\n\nTITLE: Implementing Game of Life Logic in Python\nDESCRIPTION: Core implementation of Conway's Game of Life rules using Python, including grid initialization and update logic.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_170\n\nLANGUAGE: python\nCODE:\n```\ngrid = [[0 for _ in range(20)] for _ in range(20)]\ndef update_grid(grid: list[list[int]]) -> list[list[int]]:\n    new_grid = [[0 for _ in range(20)] for _ in range(20)]\n    def count_neighbors(x, y):\n        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        count = 0\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]): count += grid[nx][ny]\n        return count\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            neighbors = count_neighbors(i, j)\n            if grid[i][j] == 1:\n                if neighbors < 2 or neighbors > 3: new_grid[i][j] = 0\n                else: new_grid[i][j] = 1\n            elif neighbors == 3: new_grid[i][j] = 1\n    return new_grid\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError in Update Operation\nDESCRIPTION: Demonstrates error handling when trying to update a record that doesn't exist. A NotFoundError is raised when the primary key doesn't match any existing record.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_216\n\nLANGUAGE: python\nCODE:\n```\ntry: users.update(User(name='John', year_started=2024, email='j@example.com'))\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Complete QuickDraw Application with Save/Load Functionality\nDESCRIPTION: The full implementation of the drawing application with canvas saving and loading functionality. Includes routes for creating rooms, managing the drawing interface, and persisting canvas data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom datetime import datetime\n\ndef render(room):\n    return Li(A(room.name, href=f\"/rooms/{room.id}\"))\n\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, canvas_data=str, pk='id')\n\n@rt(\"/\")\ndef get():\n    create_room = Form(Input(id=\"name\", name=\"name\", placeholder=\"New Room Name\"),\n                       Button(\"Create Room\"),\n                       hx_post=\"/rooms\", hx_target=\"#rooms-list\", hx_swap=\"afterbegin\")\n    rooms_list = Ul(*rooms(order_by='id DESC'), id='rooms-list')\n    return Titled(\"QuickDraw\", \n                  create_room, rooms_list)\n\n@rt(\"/rooms\")\nasync def post(room:Room):\n    room.created_at = datetime.now().isoformat()\n    return rooms.insert(room)\n\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    canvas = Canvas(id=\"canvas\", width=\"800\", height=\"600\")\n    color_picker = Input(type=\"color\", id=\"color-picker\", value=\"#000000\")\n    brush_size = Input(type=\"range\", id=\"brush-size\", min=\"1\", max=\"50\", value=\"10\")\n    save_button = Button(\"Save Canvas\", id=\"save-canvas\", hx_post=f\"/rooms/{id}/save\", hx_vals=\"js:{canvas_data: JSON.stringify(canvas.toJSON())}\")\n\n    js = f\"\"\"\n    var canvas = new fabric.Canvas('canvas');\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = '#000000';\n    canvas.freeDrawingBrush.width = 10;\n\n    // Load existing canvas data\n    fetch(`/rooms/{id}/load`)\n    .then(response => response.json())\n    .then(data => {{\n        if (data && Object.keys(data).length > 0) {{\n            canvas.loadFromJSON(data, canvas.renderAll.bind(canvas));\n        }}\n    }});\n    \n    document.getElementById('color-picker').onchange = function() {{\n        canvas.freeDrawingBrush.color = this.value;\n    }};\n    \n    document.getElementById('brush-size').oninput = function() {{\n        canvas.freeDrawingBrush.width = parseInt(this.value, 10);\n    }};\n    \"\"\"\n    \n    return Titled(f\"Room: {room.name}\",\n                  A(Button(\"Leave Room\"), href=\"/\"),\n                  canvas,\n                  Div(color_picker, brush_size, save_button),\n                  Script(src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js\"),\n                  Script(js))\n\n@rt(\"/rooms/{id}/save\")\nasync def post(id:int, canvas_data:str):\n    rooms.update({'canvas_data': canvas_data}, id)\n    return \"Canvas saved successfully\"\n\n@rt(\"/rooms/{id}/load\")\nasync def get(id:int):\n    room = rooms[id]\n    return room.canvas_data if room.canvas_data else \"{}\"\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Defining HTML and HTMX Attribute Configuration\nDESCRIPTION: Configures the attributes for HTML and HTMX components, including named HTML tags, standard HTML attributes, and HTMX-specific attributes with their type annotations. This provides a foundation for the ft_html and ft_hx functions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\nnamed = set('a button form frame iframe img input map meta object param select textarea'.split())\nhtml_attrs = 'id cls title style accesskey contenteditable dir draggable enterkeyhint hidden inert inputmode lang popover spellcheck tabindex translate'.split()\nhx_attrs = 'get post put delete patch trigger target swap swap_oob include select select_oob indicator push_url confirm disable replace_url vals disabled_elt ext headers history history_elt indicator inherit params preserve prompt replace_url request sync validate'\nhx_attrs = [f'hx_{o}' for o in hx_attrs.split()]\nhx_attrs_annotations = {\n    \"hx_swap\": Literal[\"innerHTML\", \"outerHTML\", \"afterbegin\", \"beforebegin\", \"beforeend\", \"afterend\", \"delete\", \"none\"] | str,\n    \"hx_swap_oob\": Literal[\"true\", \"innerHTML\", \"outerHTML\", \"afterbegin\", \"beforebegin\", \"beforeend\", \"afterend\", \"delete\", \"none\"] | str,\n    \"hx_push_url\": Literal[\"true\", \"false\"] | str, \n    \"hx_replace_url\": Literal[\"true\", \"false\"] | str, \n    \"hx_disabled_elt\": Literal[\"this\", \"next\", \"previous\"] | str, \n    \"hx_history\": Literal[\"false\"] | str,\n    \"hx_params\": Literal[\"*\", \"none\"] | str,\n    \"hx_validate\": Literal[\"true\", \"false\"],\n}\nhx_attrs_annotations |= {o: str for o in set(hx_attrs) - set(hx_attrs_annotations.keys())}\nhx_attrs_annotations = {k: Optional[v] for k,v in hx_attrs_annotations.items()} \nhx_attrs = html_attrs + hx_attrs\n```\n\n----------------------------------------\n\nTITLE: Handling Requests and Sessions in FastHTML\nDESCRIPTION: Demonstrates how to access request and session data in FastHTML route handlers. The example shows a profile page that tracks visit counts and user information.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef profile(req, sess, user_id: int=None):\n    ip = req.client.host\n    sess['last_visit'] = datetime.now().isoformat()\n    visits = sess.setdefault('visit_count', 0) + 1\n    sess['visit_count'] = visits\n    user = get_user(user_id or sess.get('user_id'))\n    return Titled(f\"Profile: {user.name}\", \n                  P(f\"Visits: {visits}\"), \n                  P(f\"IP: {ip}\"),\n                  Button(\"Logout\", hx_post=logout))\n```\n\n----------------------------------------\n\nTITLE: Implementing Rectangle SVG Element\nDESCRIPTION: Creates an SVG rectangle element with support for position, dimensions, fill, stroke and corner radius attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Rect(width, height, x=0, y=0, fill=None, stroke=None, stroke_width=None, rx=None, ry=None, **kwargs):\n    \"A standard SVG `rect` element\"\n    return ft_svg('rect', width=width, height=height, x=x, y=y, fill=fill,\n                 stroke=stroke, stroke_width=stroke_width, rx=rx, ry=ry, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Libraries in Python\nDESCRIPTION: Demonstrates how to import FastHTML libraries using different approaches, including wildcard imports and explicit imports with aliasing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_189\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml import common as fh\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP/2 Server Push in Starlette\nDESCRIPTION: This example shows how to use server push with Starlette to improve page load times. The homepage endpoint pushes a CSS resource to the client before the client parses the HTML and discovers it needs the stylesheet.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import HTMLResponse\nfrom starlette.routing import Route, Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nasync def homepage(request):\n    \"\"\"\n    Homepage which uses server push to deliver the stylesheet.\n    \"\"\"\n    await request.send_push_promise(\"/static/style.css\")\n    return HTMLResponse(\n        '<html><head><link rel=\"stylesheet\" href=\"/static/style.css\"/></head></html>'\n    )\n\nroutes = [\n    Route(\"/\", endpoint=homepage),\n    Mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Performing Reverse URL Lookups in Starlette\nDESCRIPTION: Demonstrates how to generate URLs for named routes, including those with path parameters, using the url_for method on request objects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Route(\"/\", homepage, name=\"homepage\")\n]\n\n# We can use the following to return a URL...\nurl = request.url_for(\"homepage\")\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints from APIRouter\nDESCRIPTION: Tests the HTTP endpoints registered with the APIRouter by making requests to them and verifying the responses. This validates that the routes were correctly added to the FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\ntest_eq(cli.get('/hi').text, 'Hi there')\ntest_eq(cli.post('/hi').text, 'Postal')\ntest_eq(cli.get('/hostie').text, 'testserver')\ntest_eq(cli.post('/yoyo').text, 'a yoyo')\n\ntest_eq(cli.get('/ho').text, 'Ho ho')\ntest_eq(cli.post('/ho').text, 'Ho ho')\n```\n\n----------------------------------------\n\nTITLE: Cookie Management in FastHTML\nDESCRIPTION: Demonstrates setting and retrieving cookies in FastHTML routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef setcook(): return P(f'Set'), cookie('mycookie', 'foobar')\nprint(client.get('/setcook', headers=htmx_req).text)\n\n@rt\ndef getcook(mycookie:str): return f'Got {mycookie}'\nprint(client.get('/getcook').text)\n\n@rt\ndef headers(req): return req.headers['host']\n```\n\n----------------------------------------\n\nTITLE: Managing State Variables in Starlette\nDESCRIPTION: Demonstrates how to set and access application and request state variables in Starlette. This allows storing data that can be accessed across different parts of the application or within a single request lifecycle.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\napp.state.dbconn = get_db_conn()\nrequest.state.start_time = time.time()\n# use app-scope state variable in a request\nrequest.app.state.dbconn\n```\n\n----------------------------------------\n\nTITLE: Parentheses Search with Limit and Offset Parameters\nDESCRIPTION: Demonstrates pagination functionality using limit and offset parameters. The offset parameter skips the specified number of records before starting to return results.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_212\n\nLANGUAGE: python\nCODE:\n```\nusers(limit=5, offset=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing FT Component Response in FastHTML\nDESCRIPTION: Demonstrates how to create a route handler that returns an FT component wrapped in an HTML document. It uses the Html and Div components to construct the response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/response_types.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft')\ndef get(): return Html(Div('FT Component Response'))\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(cli.get('/ft').text)\n```\n\n----------------------------------------\n\nTITLE: Railway Deployment CLI Functions in fasthtml.cli\nDESCRIPTION: Command-line interface functions for deploying FastHTML applications to Railway. These functions handle linking and deploying projects to Railway services.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@call_parse def railway_link()\n    # Link the current directory to the current project's Railway service\n\n@call_parse def railway_deploy(name, mount)\n    # Deploy a FastHTML app to Railway\n```\n\n----------------------------------------\n\nTITLE: Sending Files with Starlette TestClient\nDESCRIPTION: This example demonstrates how to upload files with Starlette's TestClient. It shows uploading both single and multiple files, with the ability to specify filename and content type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_124\n\nLANGUAGE: python\nCODE:\n```\nclient = TestClient(app)\n\n# Send a single file\nwith open(\"example.txt\", \"rb\") as f:\n    response = client.post(\"/form\", files={\"file\": f})\n\n# Send multiple files\nwith open(\"example.txt\", \"rb\") as f1:\n    with open(\"example.png\", \"rb\") as f2:\n        files = {\"file1\": f1, \"file2\": (\"filename\", f2, \"image/png\")}\n        response = client.post(\"/form\", files=files)\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Removing Element with Fade Out Animation\nDESCRIPTION: Shows how to implement a simple fade out animation that removes an element when clicked using the fadeOut() utility function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_75\n\nLANGUAGE: html\nCODE:\n```\n<div>I fade out and remove myself.\n  <script>me().on(\"click\", ev => { me(ev).fadeOut() })</script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Components with MonsterUI in FastHTML\nDESCRIPTION: Shows how to use MonsterUI's Flex Layout Elements to create complex layouts concisely in FastHTML. The example creates a team card component.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef TeamCard(name, role, location=\"Remote\"):\n    icons = (\"mail\", \"linkedin\", \"github\")\n    return Card(\n        DivLAligned(\n            DiceBearAvatar(name, h=24, w=24),\n            Div(H3(name), P(role))),\n        footer=DivFullySpaced(\n            DivHStacked(UkIcon(\"map-pin\", height=16), P(location)),\n            DivHStacked(*(UkIconLink(icon, height=16) for icon in icons))))\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Todo Records in MiniDataAPI\nDESCRIPTION: Demonstrates how queries are filtered after applying the .xtra() constraint, showing only records that match the filter criteria.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_226\n\nLANGUAGE: python\nCODE:\n```\ntodos()\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters with Convertors in Starlette Routes\nDESCRIPTION: Shows how to define routes with path parameters and use different type convertors (int, float, path) to control parsing of URL segments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nRoute('/users/{username}', user)\nRoute('/users/{user_id:int}', user)\nRoute('/floating-point/{number:float}', floating_point)\nRoute('/uploaded/{rest_of_path:path}', uploaded)\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal FastHTML Application\nDESCRIPTION: A basic FastHTML application that serves a simple web page with a title and paragraph.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import * \n\napp, rt = fast_app()  \n\n@rt(\"/\") \ndef get():\n    return Titled(\"FastHTML\", P(\"Let's do this!\")) \n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating Search Component for Pico.css\nDESCRIPTION: Implements a Pico.css Search component as a Form with role='search'. Designed for search functionality within a Pico.css styled interface.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef Search(*c, **kwargs)->FT:\n    \"A PicoCSS Search, implemented as a Form with role 'search'\"\n    return Form(*c, role=\"search\", **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Authentication Setup\nDESCRIPTION: Demonstrates setting up authentication using Beforeware in FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef user_auth_before(req, sess):\n    auth = req.scope['auth'] = sess.get('auth', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n\nbeforeware = Beforeware(\n    user_auth_before,\n    skip=[r'/favicon\\.ico', r'/static/.*', r'.*\\.css', r'.*\\.js', '/login', '/']\n)\n\napp, rt = fast_app(before=beforeware)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastHTML Default Settings\nDESCRIPTION: Sets up default configuration settings for FastHTML, including attribute mapping, value mapping, FT class, and auto-ID generation. These settings control the default behavior of FastHTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\nfh_cfg['attrmap']=attrmap_x\nfh_cfg['valmap' ]=valmap\nfh_cfg['ft_cls' ]=FT\nfh_cfg['auto_id']=False\nfh_cfg['auto_name']=True\n```\n\n----------------------------------------\n\nTITLE: Parsing OAuth Response and Retrieving User Info in Python\nDESCRIPTION: Adds methods to _AppClient for parsing OAuth responses, retrieving user information, and combining these operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef parse_response(self:_AppClient, code, redirect_uri):\n    \"Get the token from the oauth2 server response\"\n    payload = dict(code=code, redirect_uri=redirect_uri, client_id=self.client_id,\n                   client_secret=self.client_secret, grant_type='authorization_code')\n    r = httpx.post(self.token_url, json=payload)\n    r.raise_for_status()\n    self.parse_request_body_response(r.text)\n\n@patch\ndef get_info(self:_AppClient, token=None):\n    \"Get the info for authenticated user\"\n    if not token: token = self.token[\"access_token\"]\n    headers = {'Authorization': f'Bearer {token}'}\n    return httpx.get(self.info_url, headers=headers).json()\n\n@patch\ndef retr_info(self:_AppClient, code, redirect_uri):\n    \"Combines `parse_response` and `get_info`\"\n    self.parse_response(code, redirect_uri)\n    return self.get_info()\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter Handling in FastHTML\nDESCRIPTION: Demonstrates handling path parameters using curly brace syntax with a named route. Shows how to capture URL segments and use them in route handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_285\n\nLANGUAGE: python\nCODE:\n```\n@rt('/user/{nm}', name='gday')\ndef get(nm:str=''): return f\"Good day to you, {nm}!\"\ncli.get('/user/Alexis').text\n```\n\n----------------------------------------\n\nTITLE: Editing a Todo Item with Form Population\nDESCRIPTION: Route handler for displaying an edit form for a todo item. It retrieves the todo by ID, populates a form with its data, and configures the form with HTMX attributes to handle submission. The form includes inputs for title, completion status, and details.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/edit/{id}\")\ndef get(id:int):\n    # The `hx_put` attribute tells HTMX to send a PUT request when the form is submitted.\n    # `target_id` specifies which element will be updated with the server's response.\n    res = Form(Group(Input(id=\"title\"), Button(\"Save\")),\n        Hidden(id=\"id\"), CheckboxX(id=\"done\", label='Done'),\n        Textarea(id=\"details\", name=\"details\", rows=10),\n        hx_put=\"/\", target_id=f'todo-{id}', id=\"edit\")\n    # `fill_form` populates the form with existing todo data, and returns the result.\n    # Indexing into a table (`todos`) queries by primary key, which is `id` here. It also includes\n    # `xtra`, so this will only return the id if it belongs to the current user.\n    return fill_form(res, todos[id])\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Redirect Handler in Python\nDESCRIPTION: Simple implementation of the OAuth callback handler that receives the authorization code from GitHub.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(auth_callback_path)\ndef auth_redirect(code:str):\n    return P(f\"code: {code}\")\n```\n\n----------------------------------------\n\nTITLE: Testing FastHTML Routes with TestClient\nDESCRIPTION: Creating a test client instance and sending a GET request to test the previously defined route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = TestClient(app)\nr = client.get('/user/Jeremy')\nr\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Dataclass Object from Table Schema\nDESCRIPTION: Creates an instance of the dataclass representation of a database table with sample data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_240\n\nLANGUAGE: python\nCODE:\n```\nUser(name='Braden', email='b@example.com', year_started=2018)\n```\n\n----------------------------------------\n\nTITLE: Handling Single File Upload in FastHTML\nDESCRIPTION: Shows how to send and process a single file upload. This example demonstrates a client request to the previously defined upload endpoint, but with only one file from the predefined files list.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nres = cli.post('/uploads', files=[files[0]])\nprint(res.status_code)\nprint(res.text)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client for FastHTML in Jupyter\nDESCRIPTION: Implements 'ws_client' function to create a WebSocket client for FastHTML applications in Jupyter notebooks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef ws_client(app, nm='', host='localhost', port=8000, ws_connect='/ws', frame=True, link=True, **kwargs):\n    path = f'/{nm}'\n    c = Main('', cls=\"container\", id=unqid())\n    @app.get(path)\n    def f():\n        return Div(c, id=nm or '_dest', hx_trigger='load',\n                   hx_ext=\"ws\", ws_connect=ws_connect, **kwargs)\n    if link: display(HTML(f'<a href=\"http://{host}:{port}{path}\" target=\"_blank\">open in browser</a>'))\n    if frame: display(HTMX(path, host=host, port=port))\n    def send(o): asyncio.create_task(app._send(o))\n    c.on(send)\n    return c\n```\n\n----------------------------------------\n\nTITLE: Creating a Simulated Slow API Service\nDESCRIPTION: An example of a slow API service that artificially delays responses. This service is used to demonstrate how background tasks can improve user experience when interacting with slow external services.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/background_tasks.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# slow_api.py\nfrom fasthtml.common import *\nfrom time import sleep, time\n\napp, rt = fast_app()\n\n@rt('/slow')\ndef slow(ts: int):\n    sleep(3) # <1>\n    return dict(request_time=ts, response_time=int(time())) # <2>\n\nserve(port=8123)\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with xtra() Method in FastHTML\nDESCRIPTION: Demonstrates using the .xtra() method to automatically constrain queries, updates, and inserts with specific conditions. The example filters users by active status.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nusers.xtra(active=True)\nusers()\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Rendering with Marked.js\nDESCRIPTION: Creates a MarkdownJS component that injects the Marked.js library and automatically processes elements with the specified selector to render Markdown content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef MarkdownJS(\n        sel='.marked' # CSS selector for markdown elements\n    ):\n    \"Implements browser-based markdown rendering.\"\n    src = \"proc_htmx('%s', e => e.innerHTML = marked.parse(e.textContent));\" % sel\n    return Script(marked_imp+src, type='module')\n```\n\n----------------------------------------\n\nTITLE: Linking Current Directory to Railway Service in Python\nDESCRIPTION: Defines a function to link the current directory to a Railway service. It retrieves project and service IDs using the Railway CLI and executes a link command.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/09_cli.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@call_parse\ndef railway_link():\n    \"Link the current directory to the current project's Railway service\"\n    j = json.loads(check_output(\"railway status --json\".split()))\n    prj = j['id']\n    idxpath = 'edges', 0, 'node', 'id'\n    env = nested_idx(j, 'environments', *idxpath)\n    svc = nested_idx(j, 'services', *idxpath)\n\n    cmd = f\"railway link -e {env} -p {prj} -s {svc}\"\n    res = check_output(cmd.split())\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Components in Python\nDESCRIPTION: Set of functions to create modal dialogs with header, body, footer and close button components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\ndef Modal(*c, **kwargs)\\n    Creates a modal with the appropriate classes to put the boilerplate in the appropriate places for you\n```\n\n----------------------------------------\n\nTITLE: Inserting Todo Records in FastHTML MiniDataAPI\nDESCRIPTION: Shows multiple ways to insert records into a Todo table, demonstrating the flexibility of the insert method across different data formats and assigning the result to a variable.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_200\n\nLANGUAGE: python\nCODE:\n```\ntodos.insert(Todo(title='Write MiniDataAPI spec', status='open', name='Braden'))\ntodos.insert(title='Implement SSE in FastHTML', status='open', name='Alma')\ntodo = todos.insert(dict(title='Finish development of FastHTML', status='closed', name='Charlie'))\ntodo\n```\n\n----------------------------------------\n\nTITLE: Finding Input Elements in HTML Form in Python\nDESCRIPTION: This function recursively searches for input elements in an HTML form that match specified tags and attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef find_inputs(e, tags='input', **kw):\n    \"Recursively find all elements in `e` with `tags` and attrs matching `kw`\"\n    if not isinstance(e, (list,tuple,FT)): return []\n    inputs = []\n    if isinstance(tags,str): tags = [tags]\n    elif tags is None: tags = []\n    cs = e\n    if isinstance(e, FT):\n        tag,cs,attr = e.list\n        if tag in tags and kw.items()<=attr.items(): inputs.append(e)\n    for o in cs: inputs += find_inputs(o, tags, **kw)\n    return inputs\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Sent Events (SSE) in FastHTML\nDESCRIPTION: Demonstrates how to create a server-sent events system that generates random numbers and continuously pushes them to the client. Uses the HTMX SSE extension and FastHTML's EventStream component.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom asyncio import sleep\nfrom fasthtml.common import *\n\nhdrs=(Script(src=\"https://unpkg.com/htmx-ext-sse@2.2.1/sse.js\"),) # <1>\napp,rt = fast_app(hdrs=hdrs)\n\n@rt\ndef index():\n    return Titled(\"SSE Random Number Generator\",\n        P(\"Generate pairs of random numbers, as the list grows scroll downwards.\"),\n        Div(hx_ext=\"sse\", # <2>\n            sse_connect=\"/number-stream\", # <3>\n            hx_swap=\"beforeend show:bottom\", # <4>\n            sse_swap=\"message\")) # <5>\n\nshutdown_event = signal_shutdown() # <6>\n\nasync def number_generator(): # <7>\n    while not shutdown_event.is_set(): # <8>\n        data = Article(random.randint(1, 100))\n        yield sse_message(data)  # <9>\n        await sleep(1)\n\n@rt(\"/number-stream\")\nasync def get(): return EventStream(number_generator()) # <10>\n```\n\n----------------------------------------\n\nTITLE: Accessing Redirect Class Implementation\nDESCRIPTION: This snippet references the __response__ method of the Redirect class, which is a special method recognized by the FastHTML framework. When a handler returns a Redirect object, FastHTML calls this method to replace the original response.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nRedirect.__response__\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in FastHTML\nDESCRIPTION: Demonstrates how to render Markdown content in FastHTML using the MarkdownJS function and applying it to a div with the 'marked' class.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\nhdrs = (MarkdownJS(), HighlightJS(langs=['python', 'javascript', 'html', 'css']), )\n\napp, rt = fast_app(hdrs=hdrs)\n\ncontent = \"\"\"\nHere are some _markdown_ elements.\n\n- This is a list item\n- This is another list item\n- And this is a third list item\n\n**Fenced code blocks work here.**\n\"\"\"\n\n@rt('/')\ndef get(req):\n    return Titled(\"Markdown rendering example\", Div(content,cls=\"marked\"))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Styling and Rendering in Python with FastHTML\nDESCRIPTION: Utility functions for applying CSS classes to HTML elements and rendering markdown content. These functions help with content styling and transformation in FastHTML applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\ndef apply_classes(html_str, class_map, class_map_mods):\n    # Apply classes to html string\n    pass\n\ndef render_md(md_content, class_map, class_map_mods):\n    # Renders markdown using mistletoe and lxml\n    pass\n\ndef get_franken_renderer(img_dir):\n    # Create a renderer class with the specified img_dir\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing RouteFuncs Class for API Router\nDESCRIPTION: Defines the RouteFuncs class that stores and manages route functions for the APIRouter. This class handles attribute access and storage for route functions to make them discoverable through the router.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n#| export\nclass RouteFuncs:\n    def __init__(self): super().__setattr__('_funcs', {})\n    def __setattr__(self, name, value): self._funcs[name] = value\n    def __getattr__(self, name):\n        if name in all_meths: raise AttributeError(\"Route functions with HTTP Names are not accessible here\")\n        try: return self._funcs[name]\n        except KeyError: raise AttributeError(f\"No route named {name} found in route functions\")\n    def __dir__(self): return list(self._funcs.keys())\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Keyword Arguments in FastHTML MiniDataAPI\nDESCRIPTION: Shows how to insert a record using keyword arguments directly instead of a class instance. This provides a more concise syntax for adding data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_198\n\nLANGUAGE: python\nCODE:\n```\nusers.insert(name='Alma', email='a@example.com', year_started=2019)\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML App with HighlightJS in Python\nDESCRIPTION: Sets up a FastHTML application with HighlightJS for syntax highlighting and defines a route that renders a code example.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Add the HighlightJS built-in header\nhdrs = (HighlightJS(langs=['python', 'javascript', 'html', 'css']),)\n\napp, rt = fast_app(hdrs=hdrs)\n\ncode_example = \"\"\"\nimport datetime\nimport time\n\nfor i in range(10):\n    print(f\"{datetime.datetime.now()}\")\n    time.sleep(1)\n\"\"\"\n\n@rt('/')\ndef get(req):\n    return Titled(\"Markdown rendering example\",\n        Div(\n            # The code example needs to be surrounded by\n            # Pre & Code elements\n            Pre(Code(code_example))\n    ))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Updating a Record Using Keyword Arguments\nDESCRIPTION: Shows how to update a record by providing the primary key and updated field values as keyword arguments. This is a concise alternative to creating a class instance or dictionary.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nusers.update(name='Alma', year_started=2149)\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations with Fastlite in FastHTML\nDESCRIPTION: Demonstrates various CRUD (Create, Read, Update, Delete) operations using Fastlite in FastHTML. Includes examples of inserting, querying, updating, and deleting records.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nuser = users.insert(name='Alex',active=False)\nuser\n```\n\nLANGUAGE: python\nCODE:\n```\n# List all records\nusers()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Limit, offset, and order results:\nusers(order_by='name', limit=2, offset=1)\n\n# Filter on the results\nusers(where=\"name='Alex'\")\n\n# Placeholder for avoiding injection attacks\nusers(\"name=?\", ('Alex',))\n\n# A single record by pk\nusers[user.id]\n```\n\nLANGUAGE: python\nCODE:\n```\n1 in users\n```\n\nLANGUAGE: python\nCODE:\n```\nuser.name='Lauren'\nuser.active=True\nusers.update(user)\n```\n\nLANGUAGE: python\nCODE:\n```\nusers.xtra(active=True)\nusers()\n```\n\nLANGUAGE: python\nCODE:\n```\nusers.delete(user.id)\n```\n\nLANGUAGE: python\nCODE:\n```\ntry: users['Amy']\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Preparing File Upload Data Structure\nDESCRIPTION: Creates a data structure for multipart/form-data file uploads with two files. This demonstrates how to format file data for sending to a FastHTML server endpoint.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfiles = [ ('files', ('file1.txt', b'content1')),\n         ('files', ('file2.txt', b'content2')) ]\n```\n\n----------------------------------------\n\nTITLE: TypedDict Form Handling\nDESCRIPTION: Demonstrates using TypedDict for type-hinted form data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nclass BodieTD(TypedDict): a:int;b:str='foo'\n\n@app.post(\"/bodietd/\")\ndef bodient(data:BodieTD): return data\nprint(cli.post('/bodietd/', data=d).text)\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Where Clause\nDESCRIPTION: Shows how to filter records using a SQL-style where clause. This retrieves only records matching the specified condition.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nusers(where=\"name='Alma'\")\n```\n\n----------------------------------------\n\nTITLE: Applying Prefixed APIRouter to FastHTML App\nDESCRIPTION: Adds the routes from a prefixed APIRouter instance to a FastHTML application. This demonstrates how to connect the prefixed router's routes to the main application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\napp,cli,_ = get_cli(FastHTML())\nar2.to_app(app)\n```\n\n----------------------------------------\n\nTITLE: Listing Post Files with Pathlib\nDESCRIPTION: Using Python's pathlib to list the files in the posts directory.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pathlib\nposts.ls()\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal MonsterUI Application\nDESCRIPTION: Demonstrates how to build a minimal application using MonsterUI, a shadcn-like component library for FastHTML. The example includes theme setting, social links, and form elements within a card layout.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom monsterui.all import *\n\napp, rt = fast_app(hdrs=Theme.blue.headers()) # Use MonsterUI blue theme\n\n@rt\ndef index():\n    socials = (('github','https://github.com/AnswerDotAI/MonsterUI'),)\n    return Titled(\"App\",\n        Card(\n            P(\"App\", cls=TextPresets.muted_sm),\n            # LabelInput, DivLAigned, and UkIconLink are non-semantic MonsterUI FT Components,\n            LabelInput('Email', type='email', required=True),\n            footer=DivLAligned(*[UkIconLink(icon,href=url) for icon,url in socials])))\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Parameterized Query\nDESCRIPTION: Demonstrates a safer approach to filtering records using parameterized queries with placeholders. This helps prevent SQL injection attacks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nusers(\"name=?\", ('Alma',))\n```\n\n----------------------------------------\n\nTITLE: Named Tuple Form Handling\nDESCRIPTION: Example of using named tuples for structured form data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nnt = namedtuple('Bodient', ['a','b'])\n\n@app.post(\"/bodient/\")\ndef bodient(data:nt): return asdict(data)\nprint(cli.post('/bodient/', data=d).text)\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Response with Orjson\nDESCRIPTION: Shows how to create a custom JSON response class using orjson library for enhanced serialization.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\nimport orjson\nfrom starlette.responses import JSONResponse\n\n\nclass OrjsonResponse(JSONResponse):\n    def render(self, content: Any) -> bytes:\n        return orjson.dumps(content)\n```\n\n----------------------------------------\n\nTITLE: Creating Light Mode Media Query CSS in FastHTML\nDESCRIPTION: Defines a function to render CSS specifically for light mode (day mode) using media queries. The function wraps the provided CSS in a light mode media query.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef light_media(\n        css: str # CSS to be included in the light media query\n    ):\n    \"Render light media for day mode views\"\n    return Style('@media (prefers-color-scheme: light) {%s}' %css)\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Endpoint from Prefixed APIRouter\nDESCRIPTION: Tests the WebSocket endpoint registered with the prefixed APIRouter by connecting to it with the prefix included, sending a message, and verifying the response. This validates that prefixed WebSocket routes work correctly.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nwith cli.websocket_connect('/products/ws') as ws:\n    ws.send_text('{\"msg\":\"Hi!\"}')\n    data = ws.receive_text()\n    assert data == 'Message text was: Hi!'\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Database with MiniDataAPI (SQLite Example)\nDESCRIPTION: Shows how to connect to an in-memory SQLite database using the MiniDataAPI specification. The database connection method is implementation-specific and not part of the core API.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb = database(':memory:')\n```\n\n----------------------------------------\n\nTITLE: Implementing HuggingFace OAuth Client in Python\nDESCRIPTION: Defines a HuggingFaceClient class for HuggingFace OAuth2 authentication, including default scopes and state generation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass HuggingFaceClient(_AppClient):\n    \"A `WebApplicationClient` for HuggingFace oauth2\"\n    prefix = \"https://huggingface.co/oauth/\"\n    base_url = f\"{prefix}authorize\"\n    token_url = f\"{prefix}token\"\n    info_url = f\"{prefix}userinfo\"\n    \n    def __init__(self, client_id, client_secret, code=None, scope=None, state=None, **kwargs):\n        if not scope: scope=[\"openid\",\"profile\"]\n        if not state: state=secrets.token_urlsafe(16)\n        super().__init__(client_id, client_secret, code=code, scope=scope, state=state, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to FastHTML (FT) Expression in Python\nDESCRIPTION: This function converts HTML string to an FT (FastHTML) expression. It handles various HTML attributes and supports nested elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef html2ft(html, attr1st=False):\n    \"\"\"Convert HTML to an `ft` expression\"\"\"\n    rev_map = {'class': 'cls', 'for': 'fr'}\n    \n    def _parse(elm, lvl=0, indent=4):\n        if isinstance(elm, str): return repr(elm.strip()) if elm.strip() else ''\n        if isinstance(elm, list): return '\\n'.join(_parse(o, lvl) for o in elm)\n        tag_name = elm.name.capitalize().replace(\"-\", \"_\")\n        if tag_name=='[document]': return _parse(list(elm.children), lvl)\n        cts = elm.contents\n        cs = [repr(c.strip()) if isinstance(c, str) else _parse(c, lvl+1)\n              for c in cts if str(c).strip()]\n        attrs, exotic_attrs  = [], {}\n        for key, value in sorted(elm.attrs.items(), key=lambda x: x[0]=='class'):\n            if isinstance(value,(tuple,list)): value = \" \".join(value)\n            key, value = rev_map.get(key, key), value or True\n            if _re_h2x_attr_key.match(key): attrs.append(f'{key.replace(\"-\", \"_\")}={value!r}')\n            else: exotic_attrs[key] = value\n        if exotic_attrs: attrs.append(f'**{exotic_attrs!r}')\n        spc = \" \"*lvl*indent\n        onlychild = not cts or (len(cts)==1 and isinstance(cts[0],str))\n        j = ', ' if onlychild else f',\\n{spc}'\n        inner = j.join(filter(None, cs+attrs))\n        if onlychild:\n            if not attr1st: return f'{tag_name}({inner})'\n            else:\n                # respect attr1st setting\n                attrs = ', '.join(filter(None, attrs))\n                return f'{tag_name}({attrs})({cs[0] if cs else \"\"})'\n        if not attr1st or not attrs: return f'{tag_name}(\\n{spc}{inner}\\n{\" \"*(lvl-1)*indent})' \n        inner_cs = j.join(filter(None, cs))\n        inner_attrs = ', '.join(filter(None, attrs))\n        return f'{tag_name}({inner_attrs})(\\n{spc}{inner_cs}\\n{\" \"*(lvl-1)*indent})'\n\n    soup = BeautifulSoup(html.strip(), 'html.parser')\n    for c in soup.find_all(string=risinstance(Comment)): c.extract()\n    return _parse(soup, 1)\n```\n\n----------------------------------------\n\nTITLE: Dynamic FastTags Creation\nDESCRIPTION: Demonstrates creating new FastTags components dynamically from the components module.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.components import Some_never_before_used_tag\n\nSome_never_before_used_tag()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataclass from Table Schema in MiniDataAPI\nDESCRIPTION: Extracts a Python dataclass representation from a database table object.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_239\n\nLANGUAGE: python\nCODE:\n```\nUser = users.dataclass()\n```\n\n----------------------------------------\n\nTITLE: Server Terminal Output\nDESCRIPTION: The expected terminal output when starting a FastHTML application, showing Uvicorn server initialization messages.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nINFO:     Uvicorn running on http://0.0.0.0:5001 (Press CTRL+C to quit)\nINFO:     Started reloader process [58058] using WatchFiles\nINFO:     Started server process [58060]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Defining and Creating Todo Table with Dataclass in Python\nDESCRIPTION: Shows how to define a Todo class using a dataclass decorator and create a corresponding table using the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_194\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Todo: id: int; title: str; detail: str; status: str; name: str\ntodos = db.create(Todo) \ntodos\n```\n\n----------------------------------------\n\nTITLE: Beforeware Class Definition\nDESCRIPTION: Defines a class for handling middleware-like functionality before request processing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Beforeware:\n    def __init__(self, f, skip=None): self.f,self.skip = f,skip or []\n```\n\n----------------------------------------\n\nTITLE: Typed Lifespan State Management\nDESCRIPTION: Shows how to implement typed lifespan state management with HTTP client sharing between lifespan and request handlers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nfrom typing import AsyncIterator, TypedDict\n\nimport httpx\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\nclass State(TypedDict):\n    http_client: httpx.AsyncClient\n\n\n@contextlib.asynccontextmanager\nasync def lifespan(app: Starlette) -> AsyncIterator[State]:\n    async with httpx.AsyncClient() as client:\n        yield {\"http_client\": client}\n\n\nasync def homepage(request: Request) -> PlainTextResponse:\n    client = request.state.http_client\n    response = await client.get(\"https://www.example.com\")\n    return PlainTextResponse(response.text)\n\n\napp = Starlette(\n    lifespan=lifespan,\n    routes=[Route(\"/\", homepage)]\n)\n```\n\n----------------------------------------\n\nTITLE: Parentheses Search for Multiple Records in FastHTML MiniDataAPI\nDESCRIPTION: Retrieves multiple records using parentheses search notation. With empty parentheses, returns all records in the table.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_207\n\nLANGUAGE: python\nCODE:\n```\nusers()\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Homepage\nDESCRIPTION: FastHTML application that lists all markdown files in the posts directory as links on the homepage.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nimport pathlib\n\napp, rt = fast_app()\n\n@rt(\"/\")\ndef get():\n    fnames = pathlib.Path(\"posts\").rglob(\"*.md\")\n    items = [Li(A(fname, href=fname)) for fname in fnames]    \n    return Titled(\"My Blog\",\n        Ul(*items) # <4>\n    ) \n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Plugin for Surreal in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a custom plugin for the Surreal JavaScript library. It defines a 'pluginHello' function that adds a 'hello' method to the Surreal object, allowing for chainable calls. The plugin is then added to the Surreal plugins array.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nfunction pluginHello(e) {\n  function hello(e, name=\"World\") {\n    console.log(`Hello ${name} from ${e}`)\n    return e // Make chainable.\n  }\n  // Add sugar\n  e.hello = (name) => { return hello(e, name) }\n}\n\nsurreal.plugins.push(pluginHello)\n```\n\n----------------------------------------\n\nTITLE: Using FastHTML's Automatic Component Creation\nDESCRIPTION: Shows how FastHTML can automatically generate component functions for custom HTML tags, even if they don't exist in the source code. This is useful for working with CSS or JavaScript libraries that create custom XML tags.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.components import Some_never_before_used_tag\n\nSome_never_before_used_tag()\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Tasks in Starlette\nDESCRIPTION: Demonstrates how to create and execute background tasks in Starlette. This example shows how to delete a file asynchronously after the response has been sent to the client.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport aiofiles\nfrom starlette.background import BackgroundTask\nfrom starlette.responses import Response\n\naiofiles_remove = aiofiles.os.wrap(os.remove)\n\nasync def del_file(fpath):\n    await aiofiles_remove(fpath)\n\nasync def handler(request):\n    content = \"\"\n    fpath = \"/tmp/tmpfile.txt\"\n    task = BackgroundTask(del_file, fpath=fpath)\n    return Response(content, background=task)\n```\n\n----------------------------------------\n\nTITLE: Implementing the show Function for Jupyter Notebook Display\nDESCRIPTION: Creates a function to render FastHTML components in Jupyter notebooks, with support for displaying content in iframes. This enables interactive display of HTML components within notebook environments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef show(ft, *rest, iframe=False, height='auto', style=None):\n    \"Renders FT Components into HTML within a Jupyter notebook.\"\n    if rest: ft = (ft,)+rest\n    res = to_xml(ft)\n    if iframe:\n        style = \"border: none; \" + (style or \"\")\n        cfg = dict(frameborder=0, width='100%', height=height, style=style)\n        res = to_xml(Iframe(srcdoc=res, **cfg))\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", UserWarning)\n        display.display(display.HTML(res))\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Sessions with Starlette TestClient\nDESCRIPTION: This example shows how to test WebSocket connections using Starlette's TestClient. It implements a simple WebSocket application that sends a message and then closes the connection, with a test that verifies the message was received.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_125\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'websocket'\n    websocket = WebSocket(scope, receive=receive, send=send)\n    await websocket.accept()\n    await websocket.send_text('Hello, world!')\n    await websocket.close()\n\n\ndef test_app():\n    client = TestClient(app)\n    with client.websocket_connect('/') as websocket:\n        data = websocket.receive_text()\n        assert data == 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Function Name\nDESCRIPTION: Utility function to get the name of a nested function using underscores to join nested function names.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef nested_name(f):\n    \"Get name of function `f` using '_' to join nested function names\"\n    return f.__qualname__.replace('.<locals>.', '_')\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in FastHTML\nDESCRIPTION: Demonstrates how to access request headers using the req parameter in a route handler. Returns the host header value from the incoming request.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_275\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hostie\")\ndef show_host(req): return req.headers['host']\ncli.get('/hostie').text\n```\n\n----------------------------------------\n\nTITLE: Creating PicoCSS Card Component in Python\nDESCRIPTION: Generates a PicoCSS Card component, implemented as an Article with optional Header and Footer. This function uses the ft_hx decorator for consistent styling and behavior.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Card(*c, **kwargs):\n    \"\"\"A PicoCSS Card, implemented as an Article with optional Header and Footer\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Todo List Page Handler\nDESCRIPTION: Renders the main todo list page with user-specific todos, add form, and sortable todo list with HTMX integration.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef get(auth):\n    title = f\"{auth}'s Todo list\"\n    top = Grid(H1(title), Div(A('logout', href='/logout'), style='text-align: right'))\n    new_inp = Input(id=\"new-title\", name=\"title\", placeholder=\"New Todo\")\n    add = Form(Group(new_inp, Button(\"Add\")),\n               hx_post=\"/\", target_id='todo-list', hx_swap=\"afterbegin\")\n    frm = Form(*todos(order_by='priority'),\n               id='todo-list', cls='sortable', hx_post=\"/reorder\", hx_trigger=\"end\")\n    card = Card(Ul(frm), header=add, footer=Div(id='current-todo'))\n    return Title(title), Container(top, card)\n```\n\n----------------------------------------\n\nTITLE: Basic Route Handler with Default Methods\nDESCRIPTION: Shows how to create a basic route handler using the @rt decorator without arguments, which handles both GET and POST requests using the function name as the route path.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_276\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef yoyo(): return 'a yoyo'\ncli.post('/yoyo').text\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records from a Table\nDESCRIPTION: Uses the parentheses method to retrieve all records from the users table. When called without arguments, this method returns all records in the table.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nusers()\n```\n\n----------------------------------------\n\nTITLE: Using Offset with Limit for Pagination\nDESCRIPTION: Demonstrates using both limit and offset parameters to implement pagination. The offset parameter skips the specified number of records before returning results.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nusers(limit=5, offset=1)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stripe API Key and Domain URL in Python\nDESCRIPTION: Configures the Stripe API key from environment variables and sets the domain URL for the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstripe.api_key = os.environ.get(\"STRIPE_SECRET_KEY\")\nDOMAIN_URL = os.environ.get(\"DOMAIN_URL\", \"http://localhost:5001\")\n```\n\n----------------------------------------\n\nTITLE: Creating Titled HTML Partial in Python\nDESCRIPTION: Defines a function to create a titled HTML partial component with a Title and H1 element, along with additional children elements provided as arguments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef Titled(title:str=\"FastHTML app\", *args, cls=\"container\", **kwargs)->FT:\n    \"An HTML partial containing a `Title`, and `H1`, and any provided children\"\n    return Title(title), Main(H1(title), *args, cls=cls, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Modifying Database Schema in FastHTML\nDESCRIPTION: Updates the database schema to include a canvas_data field for storing drawing information. This modification adds the capability to save canvas state as a string in the database.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_131\n\nLANGUAGE: python\nCODE:\n```\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, canvas_data=str, pk='id')\n```\n\n----------------------------------------\n\nTITLE: Parentheses Search with SQL Where Clause\nDESCRIPTION: Filters records using a SQL WHERE clause string. This allows for direct SQL filtering syntax but may be vulnerable to SQL injection if used with user input.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_209\n\nLANGUAGE: python\nCODE:\n```\nusers(where=\"name='Alma'\")\n```\n\n----------------------------------------\n\nTITLE: SVG Path Commands Class\nDESCRIPTION: PathFT class implementing SVG path commands including move, line, curve and arc operations for creating complex SVG paths.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nclass PathFT:\n    def M(self, x, y)        # Move to\n    def L(self, x, y)        # Line to\n    def C(self, x1, y1, x2, y2, x, y)  # Cubic Bézier\n    def A(self, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y)  # Arc\n```\n\n----------------------------------------\n\nTITLE: JupyUvi Class for Jupyter-Uvicorn Integration\nDESCRIPTION: Implements 'JupyUvi' class to manage Jupyter-compatible Uvicorn servers, including starting, stopping, and async operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#| export\nclass JupyUvi:\n    \"Start and stop a Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`\"\n    def __init__(self, app, log_level=\"error\", host='0.0.0.0', port=8000, start=True, **kwargs):\n        self.kwargs = kwargs\n        store_attr(but='start')\n        self.server = None\n        if start: self.start()\n        htmx_config_port(port)\n\n    def start(self):\n        self.server = nb_serve(self.app, log_level=self.log_level, host=self.host, port=self.port, **self.kwargs)\n\n    async def start_async(self):\n        self.server = await nb_serve_async(self.app, log_level=self.log_level, host=self.host, port=self.port, **self.kwargs)\n\n    def stop(self):\n        self.server.should_exit = True\n        wait_port_free(self.port)\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Dictionary in FastHTML MiniDataAPI\nDESCRIPTION: Demonstrates updating a record using a Python dictionary. The primary key in the dictionary identifies which record to update, and other fields specify the new values.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_214\n\nLANGUAGE: python\nCODE:\n```\nusers.update(dict(name='Alma', year_started=2199, email='a@example.com'))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Path Component in Python\nDESCRIPTION: Example of creating a custom path component using ft_hx function to avoid conflicts with pathlib.Path\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_269\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import ft_hx\n\ndef ft_path(*c, target_id=None, **kwargs): \n    return ft_hx('path', *c, target_id=target_id, **kwargs)\n\nft_path()\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebSocket Client-Side with HTMX in FastHTML\nDESCRIPTION: Example of setting up a client-side interface with HTMX for WebSocket communication. Creates a form that sends messages via WebSocket and displays responses in a notifications div.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\n\n@app.get('/')\ndef home():\n    cts = Div(\n        Div(id='notifications'),\n        Form(Input(id='msg'), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n```\n\n----------------------------------------\n\nTITLE: Displaying Titled HTML Partial in Python\nDESCRIPTION: Calls the Titled function with a specific page title and a paragraph to display the resulting HTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nshow(Titled('my page', P('para')))\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter-Compatible Uvicorn Server\nDESCRIPTION: Defines the 'nb_serve' function to start a Jupyter-compatible Uvicorn server with an ASGI app on a specified port and log level.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef nb_serve(app, log_level=\"error\", port=8000, host='0.0.0.0', **kwargs):\n    \"Start a Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`\"\n    server = uvicorn.Server(uvicorn.Config(app, log_level=log_level, host=host, port=port, **kwargs))\n    async def async_run_server(server): await server.serve()\n    @startthread\n    def run_server(): asyncio.run(async_run_server(server))\n    while not server.started: time.sleep(0.01)\n    return server\n```\n\n----------------------------------------\n\nTITLE: Path Object Parameters\nDESCRIPTION: Demonstrates using Path objects from pathlib as parameter types for file-related routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_293\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/files/{path}\")\nasync def get(path: Path): return path.with_suffix('.txt')\nprint(cli.get('/files/foo').text)\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Required Decorator in Starlette\nDESCRIPTION: Implements a login_required decorator for Starlette endpoints to restrict access to authenticated users. This function checks for a user in the session and redirects to a login page if the user is not authenticated.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nfrom starlette.endpoints import HTTPEndpoint\nfrom starlette.responses import Response\n\ndef login_required(login_url=\"/signin\"):\n    def decorator(handler):\n        @functools.wraps(handler)\n        async def new_handler(obj, req, *args, **kwargs):\n            user = req.session.get(\"login_user\")\n            if user is None:\n                return seeother(login_url)\n            return await handler(obj, req, *args, **kwargs)\n        return new_handler\n    return decorator\n\nclass MyAccount(HTTPEndpiont):\n    @login_required()\n    async def get(self, request):\n        # some logic here\n        content = \"hello\"\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Endpoint from APIRouter\nDESCRIPTION: Tests the WebSocket endpoint registered with the APIRouter by connecting to it, sending a message, and verifying the response. This validates that WebSocket routes work correctly.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nwith cli.websocket_connect('/ws') as ws:\n    ws.send_text('{\"msg\":\"Hi!\"}')\n    data = ws.receive_text()\n    assert data == 'Message text was: Hi!'\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Charting Application with Plotly\nDESCRIPTION: Example of integrating Plotly.js with FastHTML to create a simple chart. Uses Script function to include external JavaScript and generates JSON data for the chart.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom fasthtml.common import * \n\napp, rt = fast_app(hdrs=(Script(src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\"),))\n\ndata = json.dumps({\n    \"data\": [{\"x\": [1, 2, 3, 4],\"type\": \"scatter\"},\n            {\"x\": [1, 2, 3, 4],\"y\": [16, 5, 11, 9],\"type\": \"scatter\"}],\n    \"title\": \"Plotly chart in FastHTML \",\n    \"description\": \"This is a demo dashboard\",\n    \"type\": \"scatter\"\n})\n\n\n@rt(\"/\")\ndef get():\n  return Titled(\"Chart Demo\", Div(id=\"myDiv\"),\n    Script(f\"var data = {data}; Plotly.newPlot('myDiv', data);\"))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Placeholder Component in Python\nDESCRIPTION: Function to create placeholder images using picsum.photos service with configurable size and effects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\ndef PicSumImg(h, w, id, grayscale, blur, **kwargs)\\n    Creates a placeholder image using https://picsum.photos/\n```\n\n----------------------------------------\n\nTITLE: Rendering Payment Button in FastHTML (Python)\nDESCRIPTION: This snippet creates a home route that displays a 'Buy Now' button for a demo product. It uses FastHTML components to render the page with user authentication information.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/\")\ndef home(sess):\n    auth = sess['auth']\n    return Titled(\n        \"Buy Now\", \n        Div(H2(\"Demo Product - $19.99\"),\n            P(f\"Welcome, {auth}\"),\n            Button(\"Buy Now\", hx_post=\"/create-checkout-session\", hx_swap=\"none\"),\n            A(\"View Account\", href=\"/account\")))\n```\n\n----------------------------------------\n\nTITLE: OAuth State Parameter Handling with Hugging Face\nDESCRIPTION: Example of using state parameter in OAuth flow with Hugging Face authentication to maintain context across login flow.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_251\n\nLANGUAGE: python\nCODE:\n```\n# in login page:\nlink = A('Login with GitHub', href=client.login_link_with_state(state='current_prompt: add a unicorn'))\n\n# in auth_redirect:\n@app.get('/auth_redirect')\ndef auth_redirect(code:str, session, state:str=None):\n    print(f\"state: {state}\") # Use as needed\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Using Dataclass with Default Primary Key\nDESCRIPTION: Creates a Todo table using a dataclass definition. When no primary key is specified, 'id' is automatically used as the primary key field.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Todo: id: int; title: str; detail: str; status: str; name: str\ntodos = db.create(Todo) \ntodos\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in FastHTML Route Parameters\nDESCRIPTION: Shows how to use regular expressions to define more complex path parameters in FastHTML routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_162\n\nLANGUAGE: python\nCODE:\n```\nreg_re_param(\"imgext\", \"ico|gif|jpg|jpeg|webm\")\n\n@app.get(r'/static/{path:path}/{fn}.{ext:imgext}')\ndef get_img(fn:str, path:str, ext:str): return f\"Getting {fn}.{ext} from /{path}\"\n\ncli.get('/static/foo/jph.ico').text\n```\n\n----------------------------------------\n\nTITLE: Rendering FastHTML Components in Jupyter\nDESCRIPTION: Implements 'render_ft' function to enable rendering of FastHTML components directly in Jupyter notebooks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef render_ft():\n    @patch\n    def _repr_markdown_(self:FT): return to_xml(Div(self, Script('if (window.htmx) htmx.process(document.body)')))\n```\n\n----------------------------------------\n\nTITLE: Stopping FastHTML Server in Python\nDESCRIPTION: Demonstrates how to gracefully stop a FastHTML server using the server.stop() function. This is important for releasing threads and avoiding errors when restarting Jupyter.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_180\n\nLANGUAGE: python\nCODE:\n```\nserver.stop()\n```\n\n----------------------------------------\n\nTITLE: JupyUviAsync Class for Asynchronous Jupyter-Uvicorn Integration\nDESCRIPTION: Implements 'JupyUviAsync' class, an asynchronous version of JupyUvi for managing Jupyter-compatible Uvicorn servers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#| export\nclass JupyUviAsync(JupyUvi):\n    \"Start and stop an async Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`\"\n    def __init__(self, app, log_level=\"error\", host='0.0.0.0', port=8000, **kwargs):\n        super().__init__(app, log_level=log_level, host=host, port=port, start=False, **kwargs)\n\n    async def start(self):\n        self.server = await nb_serve_async(self.app, log_level=self.log_level, host=self.host, port=self.port, **self.kwargs)\n\n    def stop(self):\n        self.server.should_exit = True\n        wait_port_free(self.port)\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Keyword Arguments in FastHTML MiniDataAPI\nDESCRIPTION: Shows how to update a record using keyword arguments. Only the primary key and fields to be updated need to be specified.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_215\n\nLANGUAGE: python\nCODE:\n```\nusers.update(name='Alma', year_started=2149)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Function Handling Utility\nDESCRIPTION: Handles execution of both synchronous and asynchronous functions in a request context.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nasync def _handle(f, args, **kwargs):\n    return (await f(*args, **kwargs)) if is_async_callable(f) else await run_in_threadpool(f, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Components\nDESCRIPTION: Returning multiple FastHTML components from a handler, where the first is treated as the title and the rest are added to the body automatically.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft2')\ndef get(): return Title('Foo'),H1('bar')\nprint(cli.get('/ft2').text)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Dark Media Query Function\nDESCRIPTION: Demonstrates how to use the dark_media function to apply a white text color to body elements in dark mode.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndark_media('.body {color: white;}')\n```\n\n----------------------------------------\n\nTITLE: Managing Sessions in FastHTML\nDESCRIPTION: Demonstrates session handling to store data across requests. The first route sets a session value with the current time, and the second route retrieves and displays it.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/setsess\")\ndef get(sess, foo:str=''):\n    now = datetime.now()\n    sess['auth'] = str(now)\n    return f'Set to {now}'\n\n@rt(\"/getsess\")\ndef get(sess): return f'Session time: {sess[\"auth\"]}'\n\nprint(cli.get('/setsess').text)\ntime.sleep(0.01)\n\ncli.get('/getsess').text\n```\n\n----------------------------------------\n\nTITLE: Testing FastHTML Views in Python Notebooks\nDESCRIPTION: Shows how to test FastHTML views in notebooks using Starlette's TestClient, as running FastHTML directly in notebooks is not possible due to ASGI event loop limitations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# First we instantiate our app, in this case we remove the\n# default headers to reduce the size of the output.\napp, rt = fast_app(default_hdrs=False)\n\n# Setting up the Starlette test client\nfrom starlette.testclient import TestClient\nclient = TestClient(app)\n\n# Usage example\n@rt(\"/\")\ndef get():\n    return Titled(\"FastHTML is awesome\", \n        P(\"The fastest way to create web apps in Python\"))\n\nprint(client.get(\"/\").text)\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Reloading with FastHTMLWithLiveReload in Python\nDESCRIPTION: This snippet demonstrates how to replace the standard FastHTML class with FastHTMLWithLiveReload to enable live reloading functionality in a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/live_reload.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\napp = FastHTMLWithLiveReload()\n```\n\n----------------------------------------\n\nTITLE: Retrieving User ID from OAuth Code in Python\nDESCRIPTION: A method to retrieve the user ID from an OAuth code and redirect URI. It calls the retr_info method and returns the ID value using the id_key.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef retr_id(self:_AppClient, code, redirect_uri):\n    \"Call `retr_info` and then return id/subscriber value\"\n    return self.retr_info(code, redirect_uri)[self.id_key]\n```\n\n----------------------------------------\n\nTITLE: Mounting Modular Routes in Main FastHTML Application\nDESCRIPTION: Main application file that mounts the books module and creates links to it using both direct paths and named routes with the uri helper function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom books import books_app\n\napp, rt = fast_app(routes=[Mount(\"/books\", books_app, name=\"books\")]) # <1>\n\n@rt(\"/\")\ndef get():\n    return Titled(\"Dashboard\",\n        P(A(href=\"/books\")(\"Books\")),  # <2>\n        Hr(),\n        P(A(link=uri(\"books:list\"))(\"Books\")),  # <3>\n    )\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Using FT Components with Namespaces\nDESCRIPTION: Shows how to use FT components with explicit namespace notation for better code organization and PEP8 compliance.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/explaining_xt_components.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml import ft\n\nft.Ul(\n    ft.Li(\"one\"),\n    ft.Li(\"two\"),\n    ft.Li(\"three\")\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint Class Implementation\nDESCRIPTION: Demonstrates creation of class-based HTTP endpoints with method dispatching. Shows both standalone ASGI application and Starlette application integration.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse\nfrom starlette.endpoints import HTTPEndpoint\n\n\nclass App(HTTPEndpoint):\n    async def get(self, request):\n        return PlainTextResponse(f\"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dark Mode Media Query CSS in FastHTML\nDESCRIPTION: Defines a function to render CSS specifically for dark mode (night mode) using media queries. The function wraps the provided CSS in a dark mode media query.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef dark_media(\n        css: str # CSS to be included in the dark media query\n    ):\n    \"Render dark media for night mode views\"\n    return Style('@media (prefers-color-scheme:  dark) {%s}' %css)\n```\n\n----------------------------------------\n\nTITLE: FastHTML Basic Route Testing\nDESCRIPTION: Tests basic routing and HTML generation with custom title configuration\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef foo(): return Div(\"Hello World\")\n\nprint(app.routes)\n\nresponse = cli.get('/foo')\nassert '<title>My Custom Title</title>' in response.text\n\nfoo.to(param='value')\n```\n\n----------------------------------------\n\nTITLE: Handling Date Parameters in Python\nDESCRIPTION: Shows how to handle date parameters in FastHTML. The framework uses dateutil.parser to automatically parse various date string formats into date objects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/datie/\")\ndef _(d:parsed_date): return d\ndate_str = \"17th of May, 2024, 2p\"\nprint(cli.get(f'/datie/?d={date_str}').text)\n```\n\n----------------------------------------\n\nTITLE: Using Enums in FastHTML Route Parameters\nDESCRIPTION: Demonstrates how to use enums to restrict the possible values for a route parameter in FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nModelName = str_enum('ModelName', \"alexnet\", \"resnet\", \"lenet\")\n\n@app.get(\"/models/{nm}\")\ndef model(nm:ModelName): return nm\n\nprint(cli.get('/models/alexnet').text)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database and Room Dataclass with Manual Configuration\nDESCRIPTION: Code to initialize a SQLite database with a rooms table, create a Room dataclass, and add a custom rendering method to the dataclass using the patch decorator.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb = database('data/drawapp.db')\nrooms = db.t.rooms\nif rooms not in db.t:\n    rooms.create(id=int, name=str, created_at=str, pk='id')\nRoom = rooms.dataclass()\n\n@patch\ndef __ft__(self:Room):\n    return Li(A(self.name, href=f\"/rooms/{self.id}\"))\n```\n\n----------------------------------------\n\nTITLE: Handling Unannotated Parameters in Python\nDESCRIPTION: Demonstrates the behavior when a handler function includes an unannotated parameter. The parameter is ignored, leading to unexpected behavior.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@rt('/oops')\ndef get(nope): return nope\nr = cli.get('/oops?nope=1')\nprint(r)\nr.text\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Elements in Python\nDESCRIPTION: The svg module provides functions for creating SVG elements like rectangles, circles, ellipses, lines, polygons, and paths. It includes a PathFT class for building SVG paths with methods for move, line, curve, and arc operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef Svg(*args, **kwargs):\n    # An SVG tag; xmlns is added automatically, and viewBox defaults to height and width if not provided\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx)\ndef ft_svg(tag, *c, **kwargs):\n    # Create a standard `FT` element with some SVG-specific attrs\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Rect(width, height, x, y, fill, stroke, stroke_width, rx, ry, **kwargs):\n    # A standard SVG `rect` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Circle(r, cx, cy, fill, stroke, stroke_width, **kwargs):\n    # A standard SVG `circle` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Ellipse(rx, ry, cx, cy, fill, stroke, stroke_width, **kwargs):\n    # A standard SVG `ellipse` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef transformd(translate, scale, rotate, skewX, skewY, matrix):\n    # Create an SVG `transform` kwarg dict\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Line(x1, y1, x2, y2, stroke, w, stroke_width, **kwargs):\n    # A standard SVG `line` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Polyline(*args, **kwargs):\n    # A standard SVG `polyline` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Polygon(*args, **kwargs):\n    # A standard SVG `polygon` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Text(*args, **kwargs):\n    # A standard SVG `text` element\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass PathFT:\n    def M(self, x, y):\n        # Move to.\n        pass\n    \n    def L(self, x, y):\n        # Line to.\n        pass\n    \n    def H(self, x):\n        # Horizontal line to.\n        pass\n    \n    def V(self, y):\n        # Vertical line to.\n        pass\n    \n    def Z(self):\n        # Close path.\n        pass\n    \n    def C(self, x1, y1, x2, y2, x, y):\n        # Cubic Bézier curve.\n        pass\n    \n    def S(self, x2, y2, x, y):\n        # Smooth cubic Bézier curve.\n        pass\n    \n    def Q(self, x1, y1, x, y):\n        # Quadratic Bézier curve.\n        pass\n    \n    def T(self, x, y):\n        # Smooth quadratic Bézier curve.\n        pass\n    \n    def A(self, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y):\n        # Elliptical Arc.\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef SvgOob(*args, **kwargs):\n    # Wraps an SVG shape as required for an HTMX OOB swap\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef SvgInb(*args, **kwargs):\n    # Wraps an SVG shape as required for an HTMX inband swap\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Save Button to FastHTML Python Route\nDESCRIPTION: Adds a save button to the room page that captures the canvas state and sends it to the server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    canvas = Canvas(id=\"canvas\", width=\"800\", height=\"600\")\n    color_picker = Input(type=\"color\", id=\"color-picker\", value=\"#3CDD8C\")\n    brush_size = Input(type=\"range\", id=\"brush-size\", min=\"1\", max=\"50\", value=\"10\")\n    save_button = Button(\"Save Canvas\", id=\"save-canvas\", hx_post=f\"/rooms/{id}/save\", hx_vals=\"js:{canvas_data: JSON.stringify(canvas.toJSON())}\")\n    # ... (rest of the function remains the same)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of KaTeX for Math Rendering\nDESCRIPTION: Demonstrates how to use the KatexMarkdownJS component in a FastHTML application to render both inline and display mathematical expressions using LaTeX syntax.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlongexample = r\"\"\"\nLong example:\n\n$$\\begin{array}{c}\n\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\n\\end{array}$$\n\"\"\"\n\napp, rt = fast_app(hdrs=[KatexMarkdownJS()])\n\n@rt('/')\ndef get():\n    return Titled(\"Katex Examples\", \n        # Assigning 'marked' class to components renders content as markdown\n        P(cls='marked')(\"Inline example: $\\sqrt{3x-1}+(1+x)^2$\"),\n        Div(cls='marked')(longexample)\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom URL Parameter Convertors in Starlette\nDESCRIPTION: Demonstrates how to create and register a custom datetime convertor for use in URL path parameters, allowing for date-based routing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nfrom starlette.convertors import Convertor, register_url_convertor\n\n\nclass DateTimeConvertor(Convertor):\n    regex = \"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]+)?\"\n\n    def convert(self, value: str) -> datetime:\n        return datetime.strptime(value, \"%Y-%m-%dT%H:%M:%S\")\n\n    def to_string(self, value: datetime) -> str:\n        return value.strftime(\"%Y-%m-%dT%H:%M:%S\")\n\nregister_url_convertor(\"datetime\", DateTimeConvertor())\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Python Class in FastHTML MiniDataAPI\nDESCRIPTION: Updates an existing record using a modified Python class instance. The primary key is used to identify which record to update.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_213\n\nLANGUAGE: python\nCODE:\n```\nuser\nuser.year_started = 2099\nusers.update(user)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Compound Primary Key in Python\nDESCRIPTION: Demonstrates how to create a table with a compound primary key using the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_195\n\nLANGUAGE: python\nCODE:\n```\nclass Publication: authors: str; year: int; title: str\npublications = db.create(Publication, pk=('authors', 'year'))\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML App with Beforeware for Authentication\nDESCRIPTION: Sets up a FastHTML application with beforeware to simulate authentication by setting a hardcoded email in the session.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef before(sess): sess['auth'] = 'hamel@hamel.com'\nbware = Beforeware(before, skip=['/webhook'])\napp, rt = fast_app(before=bware)\n```\n\n----------------------------------------\n\nTITLE: Session-Based Image Gallery Implementation\nDESCRIPTION: Enhanced version of the image gallery that filters content based on user session ID.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_159\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\ndef get(session):\n    if 'session_id' not in session: session['session_id'] = str(uuid.uuid4())\n    inp = Input(id=\"new-prompt\", name=\"prompt\", placeholder=\"Enter a prompt\")\n    add = Form(Group(inp, Button(\"Generate\")), hx_post=\"/\", target_id='gen-list', hx_swap=\"afterbegin\")\n    gen_containers = [generation_preview(g) for g in gens(limit=10, where=f\"session_id == '{session['session_id']}'\")]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Text Style Enums in Python\nDESCRIPTION: Enum class defining text styles from Franken UI. Includes options for size, weight, color, alignment and text behavior.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\nclass TextT(Enum)\\n    Members: paragraph, lead, meta, gray, italic, xs, sm, lg, xl, light, normal, medium, bold, extrabold, muted, primary, secondary, success, warning, error, info, left, right, center, justify, start, end, top, middle, bottom, truncate, break_, nowrap, underline, highlight\n```\n\n----------------------------------------\n\nTITLE: Using Function Name as Route Path\nDESCRIPTION: Registering a route using the function name as the path when no path is provided to the route decorator. This route handles both GET and POST methods.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef yoyo(): return 'a yoyo'\ncli.post('/yoyo').text\n```\n\n----------------------------------------\n\nTITLE: Using FT Components with Namespaces in Python\nDESCRIPTION: Shows how to use FT components with the fasthtml.ft namespace, which allows for more PEP8-compliant code. This example creates an unordered list with three items.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_183\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml import ft\n\nft.Ul(\n    ft.Li(\"one\"),\n    ft.Li(\"two\"),\n    ft.Li(\"three\")\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Test Client Setup\nDESCRIPTION: Helper function to set up FastHTML test environment with test client and route decorator\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef get_cli(app): return app,TestClient(app),app.route\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic WebSocket Communication in Starlette\nDESCRIPTION: Demonstrates how to create a basic WebSocket endpoint that accepts a connection, sends a message, and closes the connection using Starlette's WebSocket class.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    websocket = WebSocket(scope=scope, receive=receive, send=send)\n    await websocket.accept()\n    await websocket.send_text('Hello, world!')\n    await websocket.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Application Instance\nDESCRIPTION: Creating a new FastHTML application instance that will be used to define routes and handle requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\n```\n\n----------------------------------------\n\nTITLE: Creating PicoBusy Component for Loading Indicators\nDESCRIPTION: Implements htmx event handlers to toggle the aria-busy attribute during requests. Provides visual feedback during AJAX operations in Pico.css styled interfaces.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef PicoBusy():\n    return (HtmxOn('beforeRequest', \"event.detail.elt.setAttribute('aria-busy', 'true' )\"),\n            HtmxOn('afterRequest',  \"event.detail.elt.setAttribute('aria-busy', 'false')\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Label Types Enum in Python\nDESCRIPTION: Defines an enumeration of label types for use in UI components, including primary, secondary, and danger options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\nclass LabelT(Enum):\n    primary, secondary, danger\n```\n\n----------------------------------------\n\nTITLE: Setting Auth Callback Path in Python\nDESCRIPTION: Defines the callback path where GitHub will redirect after successful authentication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nauth_callback_path = \"/auth_redirect\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Loading Canvas Data\nDESCRIPTION: Updates the client-side JavaScript to fetch and load existing canvas data when a user visits a room. Uses Fabric.js to deserialize the JSON data and render it on the canvas.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\njs = f\"\"\"\n    var canvas = new fabric.Canvas('canvas');\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = '#3CDD8C';\n    canvas.freeDrawingBrush.width = 10;\n    // Load existing canvas data\n    fetch(`/rooms/{id}/load`)\n    .then(response => response.json())\n    .then(data => {{\n        if (data && Object.keys(data).length > 0) {{\n            canvas.loadFromJSON(data, canvas.renderAll.bind(canvas));\n        }}\n    }});\n    \n    // ... (rest of the JavaScript remains the same)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record by Primary Key in FastHTML\nDESCRIPTION: Demonstrates how to delete a user record from the database using the primary key. Returns a reference to the table after deletion.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nusers.delete(user.id)\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling\nDESCRIPTION: Shows how to handle file uploads using FastHTML forms.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nupload_dir = Path(\"filez\")\n\n@rt\ndef index():\n    return (\n        Form(hx_post=upload, hx_target=\"#result\")(\n            Input(type=\"file\", name=\"file\"),\n            Button(\"Upload\", type=\"submit\")),\n        Div(id=\"result\")\n    )\n\n@rt\nasync def upload(file: UploadFile):\n    filebuffer = await file.read()\n    (upload_dir / file.filename).write_bytes(filebuffer)\n    return P('Size: ', file.size)\n```\n\n----------------------------------------\n\nTITLE: Executing and Printing Railway Commands in Python\nDESCRIPTION: Defines a helper function to execute Railway commands and print them. It uses the subprocess.run() function to execute the commands.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/09_cli.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef _run(a, **kw):\n    print('#', ' '.join(a))\n    run(a)\n```\n\n----------------------------------------\n\nTITLE: HTML Component Functions in fasthtml.components\nDESCRIPTION: Utility functions for working with FastHTML components, including rendering FT components in Jupyter notebooks, handling forms, and converting between HTML and FT expressions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef show(ft, *rest)\n    # Renders FT Components into HTML within a Jupyter notebook.\n\ndef File(fname)\n    # Use the unescaped text in file `fname` directly\n\ndef fill_form(form, obj)\n    # Fills named items in `form` using attributes in `obj`\n\ndef fill_dataclass(src, dest)\n    # Modifies dataclass in-place and returns it\n\ndef find_inputs(e, tags, **kw)\n    # Recursively find all elements in `e` with `tags` and attrs matching `kw`\n\ndef html2ft(html, attr1st)\n    # Convert HTML to an `ft` expression\n\ndef sse_message(elm, event)\n    # Convert element `elm` into a format suitable for SSE streaming\n```\n\n----------------------------------------\n\nTITLE: URL Lookups with Path Parameters in Starlette\nDESCRIPTION: Shows how to generate URLs for routes that contain path parameters by providing the parameter values in the url_for method call.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Route(\"/users/{username}\", user, name=\"user_detail\")\n]\n\n# We can use the following to return a URL...\nurl = request.url_for(\"user_detail\", username=...)\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication with Various Providers in Python\nDESCRIPTION: The oauth module provides classes for handling OAuth authentication with various providers including Google, GitHub, HuggingFace, Discord, and Auth0. It includes methods for generating login links, parsing responses, retrieving user information, and managing credentials.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass GoogleAppClient:\n    # A WebApplicationClient for Google oauth2\n    def __init__(self, client_id, client_secret, code, scope, **kwargs):\n        pass\n    \n    @classmethod\n    def from_file(cls, fname, code, scope, **kwargs):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass GitHubAppClient:\n    # A WebApplicationClient for GitHub oauth2\n    def __init__(self, client_id, client_secret, code, scope, **kwargs):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass HuggingFaceClient:\n    # A WebApplicationClient for HuggingFace oauth2\n    def __init__(self, client_id, client_secret, code, scope, state, **kwargs):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass DiscordAppClient:\n    # A WebApplicationClient for Discord oauth2\n    def __init__(self, client_id, client_secret, is_user, perms, scope, **kwargs):\n        pass\n    \n    def login_link(self):\n        pass\n    \n    def parse_response(self, code):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Auth0AppClient:\n    # A WebApplicationClient for Auth0 OAuth2\n    def __init__(self, domain, client_id, client_secret, code, scope, redirect_uri, **kwargs):\n        pass\n    \n    def login_link(self, req):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef login_link(self, redirect_uri, scope, state, **kwargs):\n    # Get a login link for this client\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef redir_url(request, redir_path, scheme):\n    # Get the redir url for the host in `request`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef parse_response(self, code, redirect_uri):\n    # Get the token from the oauth2 server response\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef get_info(self, token):\n    # Get the info for authenticated user\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef retr_info(self, code, redirect_uri):\n    # Combines `parse_response` and `get_info`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef retr_id(self, code, redirect_uri):\n    # Call `retr_info` and then return id/subscriber value\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass OAuth:\n    def __init__(self, app, cli, skip, redir_path, error_path, logout_path, login_path, https, http_patterns):\n        pass\n    \n    def redir_login(self, session):\n        pass\n    \n    def redir_url(self, req):\n        pass\n    \n    def login_link(self, req, scope, state):\n        pass\n    \n    def check_invalid(self, req, session, auth):\n        pass\n    \n    def logout(self, session):\n        pass\n    \n    def get_auth(self, info, ident, session, state):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef save(self, fname):\n    # Save credentials to `fname`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef load_creds(fname):\n    # Load credentials from `fname`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef creds(self):\n    # Create `Credentials` from the client, refreshing if needed\n    pass\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints from Prefixed APIRouter\nDESCRIPTION: Tests the HTTP endpoints registered with the prefixed APIRouter by making requests to them with the prefix included and verifying the responses. This validates that the prefixed routes work correctly.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_74\n\nLANGUAGE: python\nCODE:\n```\ntest_eq(cli.get('/products/hi').text, 'Hi there')\ntest_eq(cli.post('/products/hi').text, 'Postal')\ntest_eq(cli.get('/products/hostie').text, 'testserver')\ntest_eq(cli.post('/products/yoyo').text, 'a yoyo')\n\ntest_eq(cli.get('/products/ho').text, 'Ho ho')\ntest_eq(cli.post('/products/ho').text, 'Ho ho')\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError when Retrieving Non-existent Records\nDESCRIPTION: Demonstrates error handling when attempting to retrieve a record with a primary key that doesn't exist in the database. A NotFoundError is raised in this case.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntry: users['David']\nexcept NotFoundError: print(f'User not found')\n```\n\n----------------------------------------\n\nTITLE: Creating Test Client for FastHTML App\nDESCRIPTION: Initializing a test client for the FastHTML application that allows simulating HTTP requests without running a server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncli = Client(app)\n```\n\n----------------------------------------\n\nTITLE: Creating ft_svg Helper Function\nDESCRIPTION: Defines a helper function that adds SVG-specific attributes like transform, opacity, clip, mask, and filter to any SVG element.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx)\ndef ft_svg(tag: str, *c, transform=None, opacity=None, clip=None, mask=None, filter=None,\n           vector_effect=None, pointer_events=None, **kwargs):\n    \"Create a standard `FT` element with some SVG-specific attrs\"\n    return ft_hx(tag, *c, transform=transform, opacity=opacity, clip=clip, mask=mask, filter=filter,\n           vector_effect=vector_effect, pointer_events=pointer_events, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTMX Helpers for SVG Manipulation in Python\nDESCRIPTION: Defines helper functions and constants for HTMX integration with SVG elements. Includes SvgOob for out-of-band SVG swaps and SvgInb for in-band SVG swaps in HTMX applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsvg_inb = dict(hx_select=\"svg>*\")\n\ndef SvgOob(*args, **kwargs):\n    \"Wraps an SVG shape as required for an HTMX OOB swap\"\n    return Template(Svg(*args, **kwargs))\n\ndef SvgInb(*args, **kwargs):\n    \"Wraps an SVG shape as required for an HTMX inband swap\"\n    return Svg(*args, **kwargs), HtmxResponseHeaders(hx_reselect='svg>*')\n```\n\n----------------------------------------\n\nTITLE: URL Generation with Request Object\nDESCRIPTION: Demonstrates URL generation using request.url_for() method to create absolute URLs including scheme and host.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_287\n\nLANGUAGE: python\nCODE:\n```\n@rt('/link')\ndef get(req): return f\"{req.url_for('gday', nm='Alexis')}; {req.url_for('show_host')}\"\n\ncli.get('/link').text\n```\n\n----------------------------------------\n\nTITLE: Running a FastHTML Web Application\nDESCRIPTION: Command to start a FastHTML web application from the command line, which will serve the application on localhost port 5001 by default.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py  # access via localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Creating Card Component for Pico.css\nDESCRIPTION: Implements a Pico.css Card component as an Article tag with optional Header and Footer. Uses delegates to pass through additional HTML attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef Card(*c, header=None, footer=None, **kwargs)->FT:\n    \"A PicoCSS Card, implemented as an Article with optional Header and Footer\"\n    if header: c = (Header(header),) + c\n    if footer: c += (Footer(footer),)\n    return Article(*c, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding README.md for Fast HTML Project\nDESCRIPTION: This command rebuilds the README.md file after making changes to the index.ipynb notebook. It should be run from the root directory of the repository to ensure the documentation is up-to-date with the latest changes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnbdev_readme\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator with Compound Primary Key (Tuple)\nDESCRIPTION: Shows an alternative syntax for checking record existence with a compound primary key using tuple notation with the 'in' operator.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_223\n\nLANGUAGE: python\nCODE:\n```\n('John', 1967) in publications\n```\n\n----------------------------------------\n\nTITLE: Form Data Error Handling\nDESCRIPTION: Shows how FastHTML handles missing required form data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nr = cli.post('/profile/me', data={})\nassert r.status_code == 400\nprint(r.text)\nr\n```\n\n----------------------------------------\n\nTITLE: Path-Only URL Generation\nDESCRIPTION: Shows how to generate URL paths without scheme/host using app.url_path_for() method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_288\n\nLANGUAGE: python\nCODE:\n```\napp.url_path_for('gday', nm='Jeremy')\n```\n\n----------------------------------------\n\nTITLE: Accessing Application-Level Attributes in Python\nDESCRIPTION: Demonstrates how to access application-level attributes in FastHTML handler functions. The example shows how to set and retrieve a custom attribute on the app object.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\napp.chk = 'foo'\n@app.get(\"/app\")\ndef _(app): return app.chk\nprint(cli.get('/app').text)\n```\n\n----------------------------------------\n\nTITLE: Creating Shell Alias for nbdev Commands in Fast HTML Project\nDESCRIPTION: This snippet defines a shell alias 'prep' that combines multiple nbdev commands for exporting, cleaning, and trusting notebooks. It's recommended to add this alias to the shell startup file for convenience during development.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nalias prep='nbdev_export && nbdev_clean && nbdev_trust'\n```\n\n----------------------------------------\n\nTITLE: Initializing Fragment Class in Python\nDESCRIPTION: Defines a Fragment class for creating an empty tag container in FastHTML. It extends a parent class FT and initializes with given content and properties.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nclass Fragment(FT):\n    \"An empty tag, used as a container\"\n    def __init__(self, *c): super().__init__('', c, {}, void_=True)\n```\n\n----------------------------------------\n\nTITLE: URL Path Lookups Without Request Context in Starlette\nDESCRIPTION: Demonstrates how to generate URL paths (without host/scheme) directly from the application instance when no request context is available.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nurl = app.url_path_for(\"user_detail\", username=...)\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Exception Handling\nDESCRIPTION: This example shows how to enable debug mode in a Starlette application, which will display a traceback response instead of using the installed 500 error handler when errors occur.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_117\n\nLANGUAGE: python\nCODE:\n```\napp = Starlette(debug=True, routes=routes, exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Sent Events Stream in Python\nDESCRIPTION: A utility function to create a text/event-stream response for Server-Sent Events (SSE). It wraps a stream in a StreamingResponse with the appropriate media type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef EventStream(s):\n    \"Create a text/event-stream response from `s`\"\n    return StreamingResponse(s, media_type=\"text/event-stream\")\n```\n\n----------------------------------------\n\nTITLE: Displaying APIRouter Route Function Strings\nDESCRIPTION: This snippet shows how to access and print the string representation of route functions defined in an APIRouter. This is useful for debugging or understanding the full route paths of functions in the router.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nprint(str(ar.rt_funcs.all_products))\nprint(str(ar.rt_funcs.details))\n```\n\n----------------------------------------\n\nTITLE: UI Component Classes\nDESCRIPTION: Enums and classes for UI components including theme customization, alerts, steps, and loading indicators.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nclass ThemeRadii(Enum)\nclass AlertT(Enum)\nclass LoadingT(Enum)\nclass ToastHT(Enum)\nclass ToastVT(Enum)\n```\n\n----------------------------------------\n\nTITLE: Handling HTMX Headers in Python\nDESCRIPTION: Shows how to access HTMX-specific headers in FastHTML using either the special htmx parameter name or a parameter annotated with HtmxHeaders.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hxtest\")\ndef _(htmx): return htmx.request\nprint(cli.get('/hxtest', headers={'HX-Request':'1'}).text)\n\n@app.get(\"/hxtest2\")\ndef _(foo:HtmxHeaders, req): return foo.request\nprint(cli.get('/hxtest2', headers={'HX-Request':'1'}).text)\n```\n\n----------------------------------------\n\nTITLE: Creating Tags with Special Characters\nDESCRIPTION: Shows how to create HTML tags that contain special characters like @ which are not allowed in Python function names. This enables working with highly customized or non-standard HTML tags.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef tag_with_AtSymbol(*c, target_id=None, **kwargs): \n    return ft_hx('tag-with-@symbol', *c, target_id=target_id, **kwargs)\n\ntag_with_AtSymbol()\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Path Creation with Fluent Interface in Python\nDESCRIPTION: Defines a PathFT class that extends FT, providing methods for constructing SVG path commands. It includes methods for move, line, curve, and arc operations, allowing for fluent chaining of path commands.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass PathFT(FT):\n    def _append_cmd(self, cmd):\n        if not isinstance(getattr(self, 'd'), str): self.d = cmd\n        else: self.d += f' {cmd}'\n        return self\n    \n    def M(self, x, y):\n        \"Move to.\"\n        return self._append_cmd(f'M{x} {y}')\n\n    def L(self, x, y):\n        \"Line to.\"\n        return self._append_cmd(f'L{x} {y}')\n\n    def H(self, x):\n        \"Horizontal line to.\"\n        return self._append_cmd(f'H{x}')\n\n    def V(self, y):\n        \"Vertical line to.\"\n        return self._append_cmd(f'V{y}')\n\n    def Z(self):\n        \"Close path.\"\n        return self._append_cmd('Z')\n\n    def C(self, x1, y1, x2, y2, x, y):\n        \"Cubic Bézier curve.\"\n        return self._append_cmd(f'C{x1} {y1} {x2} {y2} {x} {y}')\n\n    def S(self, x2, y2, x, y):\n        \"Smooth cubic Bézier curve.\"\n        return self._append_cmd(f'S{x2} {y2} {x} {y}')\n\n    def Q(self, x1, y1, x, y):\n        \"Quadratic Bézier curve.\"\n        return self._append_cmd(f'Q{x1} {y1} {x} {y}')\n\n    def T(self, x, y):\n        \"Smooth quadratic Bézier curve.\"\n        return self._append_cmd(f'T{x} {y}')\n\n    def A(self, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y):\n        \"Elliptical Arc.\"\n        return self._append_cmd(f'A{rx} {ry} {x_axis_rotation} {large_arc_flag} {sweep_flag} {x} {y}')\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Todo Record in MiniDataAPI\nDESCRIPTION: Fetches a specific todo record by its ID and stores it in a variable for further operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_227\n\nLANGUAGE: python\nCODE:\n```\nct = todos[3]\nct\n```\n\n----------------------------------------\n\nTITLE: Starting the FastHTML Server\nDESCRIPTION: Command to start the FastHTML server and begin serving the Todo application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nserve()\n```\n\n----------------------------------------\n\nTITLE: WebSocket Integration Testing\nDESCRIPTION: Tests WebSocket functionality with session management\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/setsess\")\ndef set_sess(session):\n   session['foo'] = 'bar'\n   return 'ok'\n\n@app.ws(\"/ws\")\ndef ws(self, msg:str, ws:WebSocket, session): return f\"Message text was: {msg} with session {session.get('foo')}, from client: {ws.client}\"\n\ncli.get('/setsess')\nwith cli.websocket_connect('/ws') as ws:\n    ws.send_text('{\"msg\":\"Hi!\"}')\n    data = ws.receive_text()\nassert 'Message text was: Hi! with session bar' in data\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code settings for FastHTML\nDESCRIPTION: This JSON configuration disables certain PyLance diagnostics to avoid false error messages in FastHTML projects. It overrides the severity of various type-related issues to 'none'.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/faq.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"python.analysis.diagnosticSeverityOverrides\": {\n      \"reportGeneralTypeIssues\": \"none\",\n      \"reportOptionalMemberAccess\": \"none\",\n      \"reportWildcardImportFromLibrary\": \"none\",\n      \"reportRedeclaration\": \"none\",\n      \"reportAttributeAccessIssue\": \"none\",\n      \"reportInvalidTypeForm\": \"none\",\n      \"reportAssignmentType\": \"none\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTMX IFrame for Jupyter\nDESCRIPTION: Implements 'HTMX' function to create an auto-sizing IFrame for displaying HTMX applications in Jupyter notebooks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef HTMX(path=\"\", app=None, host='localhost', port=8000, height=\"auto\", link=False, iframe=True):\n    \"An iframe which displays the HTMX application in a notebook.\"\n    if isinstance(path, (FT,tuple,Safe)):\n        assert app, 'Need an app to render a component'\n        route = f'/{unqid()}'\n        res = path\n        app.get(route)(lambda: res)\n        path = route\n    if isinstance(height, int): height = f\"{height}px\"\n    scr = \"\"\"{\n        let frame = this;\n        window.addEventListener('message', function(e) {\n            if (e.source !== frame.contentWindow) return; // Only proceed if the message is from this iframe\n            if (e.data.height) frame.style.height = (e.data.height+1) + 'px';\n        }, false);\n    }\"\"\" if height == \"auto\" else \"\"\n    if link: display(HTML(f'<a href=\"http://{host}:{port}{path}\" target=\"_blank\">Open in new tab</a>'))\n    if iframe:\n        return HTML(f'<iframe src=\"http://{host}:{port}{path}\" style=\"width: 100%; height: {height}; border: none;\" onload=\"{scr}\" ' + \"\"\"allow=\"accelerometer; autoplay; camera; clipboard-read; clipboard-write; display-capture; encrypted-media; fullscreen; gamepad; geolocation; gyroscope; hid; identity-credentials-get; idle-detection; magnetometer; microphone; midi; payment; picture-in-picture; publickey-credentials-get; screen-wake-lock; serial; usb; web-share; xr-spatial-tracking\"></iframe> \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Lifespan Testing Configuration\nDESCRIPTION: Shows how to properly test applications with lifespan management using TestClient as a context manager.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nfrom example import app\nfrom starlette.testclient import TestClient\n\n\ndef test_homepage():\n    with TestClient(app) as client:\n        # Application's lifespan is called on entering the block.\n        response = client.get(\"/\")\n        assert response.status_code == 200\n\n    # And the lifespan's teardown is run when exiting the block.\n```\n\n----------------------------------------\n\nTITLE: Implementing Text SVG Element\nDESCRIPTION: Creates an SVG text element with support for position, font properties, text anchor, baseline, and text style attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Text(*args, x=0, y=0, font_family=None, font_size=None, fill=None, text_anchor=None,\n         dominant_baseline=None, font_weight=None, font_style=None, text_decoration=None, **kwargs):\n    \"A standard SVG `text` element\"\n    return ft_svg('text', *args, x=x, y=y, font_family=font_family, font_size=font_size, fill=fill,\n                 text_anchor=text_anchor, dominant_baseline=dominant_baseline, font_weight=font_weight,\n                 font_style=font_style, text_decoration=text_decoration, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Handling Strings and Conversion Order in FastHTML\nDESCRIPTION: Explains the rules for rendering different types of content in FastHTML, including string escaping, dataclass rendering, and using NotStr for raw HTML inclusion.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Hero:\n    title: str\n    statement: str\n        \n# rendering the dataclass with the default method\nMain(\n    Hero(\"<h1>Hello World</h1>\", \"This is a hero statement\")\n)\n\n# This will display the HTML as text on your page\nDiv(\"Let's include some HTML here: <div>Some HTML</div>\")\n\n# Keep the string untouched, will be rendered on the page\nDiv(NotStr(\"<div><h1>Some HTML</h1></div>\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Fast HTML Project\nDESCRIPTION: This command installs the development dependencies for the Fast HTML project. It should be run in the directory where the repository is cloned to ensure all necessary tools are available for development and documentation updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Modifying Database Schema in FastHTML Python Application\nDESCRIPTION: Updates the database schema to include a canvas_data field for storing drawing information.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, canvas_data=str, pk='id')\n```\n\n----------------------------------------\n\nTITLE: Rendering Namespaced FT Components as XML in Python\nDESCRIPTION: Shows the XML output of the namespaced FT components defined in the previous example. This demonstrates how the Python code is transformed into HTML/XML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_184\n\nLANGUAGE: xml\nCODE:\n```\n<ul>\n  <li>one</li>\n  <li>two</li>\n  <li>three</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Updating a User Record in FastHTML Database\nDESCRIPTION: Demonstrates how to update a user record by modifying object properties and using the update method. Returns the updated user record after the changes are applied.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nuser.name='Lauren'\nuser.active=True\nusers.update(user)\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Webhooks (Python)\nDESCRIPTION: This function processes Stripe webhook events. It verifies the event signature, handles completed checkout sessions and refunds, and updates the payment database accordingly.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/webhook\")\nasync def post(req):\n    payload = await req.body()\n    # Verify the event came from Stripe\n    try:\n        event = stripe.Webhook.construct_event(\n            payload, req.headers.get(\"stripe-signature\"), WEBHOOK_SECRET)\n    except Exception as e:\n        print(f\"Webhook error: {e}\")\n        return\n    if event and event.type == \"checkout.session.completed\":\n        event_data = event.data.object\n        if event_data.metadata.get('app_name') == app_nm:\n            payment = Payment(\n                checkout_session_id=event_data.id,\n                email=event_data.customer_email,\n                amount=event_data.amount_total,\n                payment_status=event_data.payment_status,\n                created_at=event_data.created,\n                metadata=str(event_data.metadata))\n            payments.insert(payment)\n            print(f\"Payment recorded for user: {event_data.customer_email}\")\n            \n    # Do not worry about refunds yet, we will cover how to do this later in the tutorial\n    elif event and event.type == \"charge.refunded\":\n        event_data = event.data.object\n        payment_intent_id = event_data.payment_intent\n        sessions = stripe.checkout.Session.list(payment_intent=payment_intent_id)\n        if sessions and sessions.data:\n            checkout_sid = sessions.data[0].id\n            payments.update(Payment(checkout_session_id= checkout_sid, payment_status=\"refunded\"))\n            print(f\"Refund recorded for payment: {checkout_sid}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Table Components in Python with FastHTML\nDESCRIPTION: Functions and an enum for building and styling tables with various data sources. Includes TableT enum for table styles and helper functions to create tables from lists or dictionaries.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nclass TableT(Enum):\n    # Members: divider, striped, hover, sm, lg, justify, middle, responsive\n    divider = \"divider\"\n    striped = \"striped\"\n    hover = \"hover\"\n    sm = \"sm\"\n    lg = \"lg\"\n    justify = \"justify\"\n    middle = \"middle\"\n    responsive = \"responsive\"\n\ndef Table(*c, **kwargs):\n    # Creates a table\n    pass\n\ndef TableFromLists(header_data, body_data, footer_data, header_cell_render, body_cell_render, footer_cell_render, cls, sortable, **kwargs):\n    # Creates a Table from a list of header data and a list of lists of body data\n    pass\n\ndef TableFromDicts(header_data, body_data, footer_data, header_cell_render, body_cell_render, footer_cell_render, cls, sortable, **kwargs):\n    # Creates a Table from a list of header data and a list of dicts of body data\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining and Creating User Table in Python\nDESCRIPTION: Demonstrates how to define a User class and create a corresponding table using the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_193\n\nLANGUAGE: python\nCODE:\n```\nclass User: name:str; email: str; year_started:int\nusers = db.create(User, pk='name')\nusers\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Tag Attributes\nDESCRIPTION: Demonstrates how to include special characters in HTML tag attributes by using a dictionary for attribute names that cannot be expressed as valid Python argument names.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDiv(normal_arg='normal stuff',**{'notNormal:arg:with_varing@symbols!':'123'})\n```\n\n----------------------------------------\n\nTITLE: Cookie Response Example in FastHTML\nDESCRIPTION: Shows how the cookie() function creates an HttpHeader object for setting cookies with appropriate attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_314\n\nLANGUAGE: python\nCODE:\n```\ncookie('now', datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Form Data in FastHTML\nDESCRIPTION: Shows how to handle optional form data parameters with default values in a FastHTML route handler.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_306\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/pet/dog')\ndef pet_dog(dogname: str = None): return dogname or 'unknown name'\nr = cli.post('/pet/dog', data={}).text\nr\n```\n\n----------------------------------------\n\nTITLE: Starting the Uvicorn Server\nDESCRIPTION: Initializes and starts the Uvicorn server using JupyUvi, which runs the server in a separate thread.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_176\n\nLANGUAGE: python\nCODE:\n```\nserver = JupyUvi(app)\n```\n\n----------------------------------------\n\nTITLE: Parameter Extraction Function for Requests\nDESCRIPTION: Extracts and processes parameters from a request based on function annotations and special names.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nasync def _find_p(req, arg:str, p:Parameter):\n    \"In `req` find param named `arg` of type in `p` (`arg` is ignored for body types)\"\n    anno = p.annotation\n    # If there's an annotation of special types, return object of that type\n    # GenericAlias is a type of typing for iterators like list[int] that is not a class\n    if isinstance(anno, type) and not isinstance(anno, GenericAlias):\n        if issubclass(anno, Request): return req\n        if issubclass(anno, HtmxHeaders): return _get_htmx(req.headers)\n        if issubclass(anno, Starlette): return req.scope['app']\n        if _is_body(anno) and 'session'.startswith(arg.lower()): return req.scope.get('session', {})\n        if _is_body(anno): return await _from_body(req, p)\n    # If there's no annotation, check for special names\n    if anno is empty:\n        if 'request'.startswith(arg.lower()): return req\n        if 'session'.startswith(arg.lower()): return req.scope.get('session', {})\n        if arg.lower()=='scope': return dict2obj(req.scope)\n        if arg.lower()=='auth': return req.scope.get('auth', None)\n        if arg.lower()=='htmx': return _get_htmx(req.headers)\n        if arg.lower()=='app': return req.scope['app']\n        if arg.lower()=='body': return (await req.body()).decode()\n        if arg.lower() in ('hdrs','ftrs','bodykw','htmlkw'): return getattr(req, arg.lower())\n        if arg!='resp': warn(f\"`{arg} has no type annotation and is not a recognised special name, so is ignored.\")\n        return None\n    # Look through path, cookies, headers, query, and body in that order\n    res = req.path_params.get(arg, None)\n    if res in (empty,None): res = req.cookies.get(arg, None)\n    if res in (empty,None): res = req.headers.get(snake2hyphens(arg), None)\n    if res in (empty,None): res = req.query_params.getlist(arg)\n    if res==[]: res = None\n    if res in (empty,None): res = _formitem(await parse_form(req), arg)\n    # Raise 400 error if the param does not include a default\n    if (res in (empty,None)) and p.default is empty: raise HTTPException(400, f\"Missing required field: {arg}\")\n    # If we have a default, return that if we have no value\n    if res in (empty,None): res = p.default\n    # We can cast str and list[str] to types; otherwise just return what we have\n    if anno is empty: return res\n    try: return _fix_anno(anno, res)\n    except ValueError: raise HTTPException(404, req.url.path) from None\n\nasync def _wrap_req(req, params):\n    return [await _find_p(req, arg, p) for arg,p in params.items()]\n```\n\n----------------------------------------\n\nTITLE: Manual Custom Component Creation in FastHTML\nDESCRIPTION: Demonstrates how to manually create custom components in FastHTML by directly calling the __getattr__ function, which is what happens behind the scenes with automatic creation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_268\n\nLANGUAGE: python\nCODE:\n```\nimport fasthtml\n\nauto_called = fasthtml.components.Some_never_before_used_tag()\nmanual_called = fasthtml.components.__getattr__('Some_never_before_used_tag')()\n```\n\n----------------------------------------\n\nTITLE: URL Lookups for Mounted Applications in Starlette\nDESCRIPTION: Shows how to perform URL lookups for mounted applications such as static file servers, providing a path parameter to reference specific files.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    ...\n    Mount(\"/static\", app=StaticFiles(directory=\"static\"), name=\"static\")\n]\n\n# We can use the following to return URLs...\nurl = request.url_for(\"static\", path=\"/css/base.css\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Port to Become Free\nDESCRIPTION: Implements 'wait_port_free' function to wait for a specified port to become free on a given host, with a maximum wait time.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef wait_port_free(port, host='localhost', max_wait=3):\n    \"Wait for `port` to be free on `host`\"\n    start_time = time.time()\n    while not is_port_free(port):\n        if time.time() - start_time>max_wait: return print(f\"Timeout\")\n        time.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Starlette TestClient\nDESCRIPTION: This example shows how to set headers when making requests with Starlette's TestClient. Headers can be set globally for all client requests or individually per request.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_123\n\nLANGUAGE: python\nCODE:\n```\nclient = TestClient(app)\n\n# Set headers on the client for future requests\nclient.headers = {\"Authorization\": \"...\"}\nresponse = client.get(\"/\")\n\n# Set headers for each request separately\nresponse = client.get(\"/\", headers={\"Authorization\": \"...\"})\n```\n\n----------------------------------------\n\nTITLE: List Flattening Function\nDESCRIPTION: Flattens nested lists into a single-level tuple.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef flat_xt(lst):\n    \"Flatten lists\"\n    result = []\n    if isinstance(lst,(FT,str)): lst=[lst]\n    for item in lst:\n        if isinstance(item, (list,tuple)): result.extend(item)\n        else: result.append(item)\n    return tuple(result)\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Path Element with Python Function\nDESCRIPTION: Defines a Path function that creates a standard 'path' SVG element. It uses the ft_svg function and sets the PathFT class as the ft_cls parameter, allowing for the use of the fluent interface for path creation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_svg)\ndef Path(d='', fill=None, stroke=None, stroke_width=None, **kwargs):\n    \"Create a standard `path` SVG element. This is a special object\"\n    return ft_svg('path', d=d, fill=fill, stroke=stroke, stroke_width=stroke_width, ft_cls=PathFT, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Integration\nDESCRIPTION: Demonstrates WebSocket implementation with HTMX extensions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\napp, rt = fast_app(exts='ws')\n\ndef mk_inp(): return Input(id='msg', autofocus=True)\n\n@rt\nasync def index(request):\n    cts = Div(\n        Div(id='notifications'),\n        Form(mk_inp(), id='form', ws_send=True),\n        hx_ext='ws', ws_connect='/ws')\n    return Titled('Websocket Test', cts)\n\nasync def on_connect(send): await send(Div('Hello, you have connected', id=\"notifications\"))\nasync def on_disconnect(ws): print('Disconnected!')\n\n@app.ws('/ws', conn=on_connect, disconn=on_disconnect)\nasync def ws(msg:str, send):\n    await send(Div('Hello ' + msg, id=\"notifications\"))\n    return Div('Goodbye ' + msg, id=\"notifications\"), mk_inp()\n```\n\n----------------------------------------\n\nTITLE: Importing Authentication Middleware\nDESCRIPTION: Imports the user_pwd_auth module from fasthtml.authmw for handling basic authentication in FastHTML applications. This is a prerequisite for implementing authentication in the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.authmw import user_pwd_auth\n```\n\n----------------------------------------\n\nTITLE: Setting HTMX Configuration via HTML Meta Tag\nDESCRIPTION: Demonstrates how to configure HTMX options declaratively using a meta tag in HTML, which allows setting configuration values without JavaScript.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\n----------------------------------------\n\nTITLE: FT Component Example Function Call\nDESCRIPTION: Simple example showing how to call a function containing FT components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/explaining_xt_components.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexample()\n```\n\n----------------------------------------\n\nTITLE: Square Bracket Search by Primary Key in FastHTML MiniDataAPI\nDESCRIPTION: Retrieves a single record using square bracket notation with the primary key. Returns the record if found or raises a NotFoundError if the record doesn't exist.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_202\n\nLANGUAGE: python\nCODE:\n```\nuser = users['Alma']\nuser\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Components in Python with FastHTML\nDESCRIPTION: Functions for creating slider components with various container options, navigation controls, and item management. These components allow for creating interactive sliders with customizable navigation and content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ndef SliderContainer(*c, **kwargs):\n    # Creates a slider container\n    pass\n\ndef SliderItems(*c, **kwargs):\n    # Creates a slider items container\n    pass\n\ndef SliderNav(cls, prev_cls, next_cls, **kwargs):\n    # Navigation arrows for Slider component\n    pass\n\ndef Slider(*c, **kwargs):\n    # Creates a slider with optional navigation arrows\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring FastHTML Application and Test Client\nDESCRIPTION: Sets up the FastHTML application, route handlers, and test client for subsequent examples. It imports necessary modules and initializes the app and route handler decorators.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/response_types.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n```\n\nLANGUAGE: python\nCODE:\n```\napp,rt = fast_app()\n```\n\nLANGUAGE: python\nCODE:\n```\ncli = Client(app)\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence in MiniDataAPI with 'in' Operator\nDESCRIPTION: Verifies if a record ID exists in the filtered table using the 'in' operator, which respects the .xtra() constraints.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_228\n\nLANGUAGE: python\nCODE:\n```\nct.id in todos\n```\n\n----------------------------------------\n\nTITLE: Setting Up App and Route Handler for Form Processing\nDESCRIPTION: Imports necessary components and initializes a FastHTML application for form processing examples.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\napp,rt = fast_app()\n```\n\n----------------------------------------\n\nTITLE: Optional Form Parameters\nDESCRIPTION: Example of handling optional form parameters with default values.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/pet/dog')\ndef pet_dog(dogname: str = None): return dogname or 'unknown name'\nr = cli.post('/pet/dog', data={}).text\nr\n```\n\n----------------------------------------\n\nTITLE: Creating HTML with NotStr for One-off Custom Tags\nDESCRIPTION: Demonstrates using the NotStr class to create a simple HTML div tag as a string. This approach works for one-off cases but becomes unwieldy as complexity increases.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndiv_NotStr = NotStr('<div></div>') \nprint(div_NotStr)\n```\n\n----------------------------------------\n\nTITLE: Handling Named Submounts for URL Lookups in Starlette\nDESCRIPTION: Demonstrates the namespace convention for URL lookups with named submounts, using the prefix:name pattern to reference nested routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Mount(\"/users\", name=\"users\", routes=[\n        Route(\"/\", user, name=\"user_list\"),\n        Route(\"/{username}\", user, name=\"user_detail\")\n    ])\n]\n\n# We can use the following to return URLs...\nurl = request.url_for(\"users:user_list\")\nurl = request.url_for(\"users:user_detail\", username=...)\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Application\nDESCRIPTION: Basic setup of FastHTML application and client for testing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\nrt = app.route\ncli = Client(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Todo Form Handler in Python with FastHTML\nDESCRIPTION: Route handler for displaying edit form for a todo item. Creates a form with input fields populated with existing todo data and configures HTMX attributes for PUT request submission.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/edit/{id}\")\ndef get(id:int):\n    res = Form(Group(Input(id=\"title\"), Button(\"Save\")),\n        Hidden(id=\"id\"), CheckboxX(id=\"done\", label='Done'),\n        Textarea(id=\"details\", name=\"details\", rows=10),\n        hx_put=\"/\", target_id=f'todo-{id}', id=\"edit\")\n    return fill_form(res, todos[id])\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Core Dependencies\nDESCRIPTION: Imports essential modules from FastCore, FastHTML components, and extensions needed for JavaScript integration.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#| exporti\nimport re\nfrom fastcore.utils import *\nfrom fasthtml.components import *\nfrom fasthtml.xtend import *\n```\n\n----------------------------------------\n\nTITLE: Using State to Wrap Dictionaries in Starlette\nDESCRIPTION: Shows how to use Starlette's State class to wrap dictionaries for dot notation access. This provides a more convenient way to access dictionary values using attribute syntax rather than bracket notation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.datastructures import State\n\ndata = {\n    \"name\": \"Bo\"\n}\nprint(data[\"name\"])\n# now wrap it with State function\nwrapped = State(data)\n# You can use the dot syntaxt, but can't use `wrapped[\"name\"]` any more.\nprint(wrapped.name)\n```\n\n----------------------------------------\n\nTITLE: Parentheses Search with SQL Placeholders\nDESCRIPTION: Demonstrates a safer way to filter records using SQL placeholders to prevent SQL injection attacks. Values are passed as a tuple as the second argument.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_210\n\nLANGUAGE: python\nCODE:\n```\nusers(\"name=?\", ('Alma',))\n```\n\n----------------------------------------\n\nTITLE: Rendering FastTags to XML/HTML\nDESCRIPTION: Demonstrates how to manually convert FastTags to HTML markup using the to_xml function, which FastHTML uses automatically when handling responses.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nto_xml(tags)\n```\n\n----------------------------------------\n\nTITLE: Single Component HTMX Response\nDESCRIPTION: Returning a single component for an HTMX request, which is rendered as an HTML partial without any additional structure.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft3')\ndef get(): return H1('bar')\nprint(cli.get('/ft3', **hxhdr).text)\n```\n\n----------------------------------------\n\nTITLE: Setting Pico.css Classes for Jupyter Outputs\nDESCRIPTION: Creates a JavaScript function that adds 'pico' class to Jupyter notebook outputs. Uses MutationObserver to dynamically apply styling to new elements added to the DOM.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef set_pico_cls():\n    js = \"\"\"var sel = '.cell-output, .output_area';\ndocument.querySelectorAll(sel).forEach(e => e.classList.add('pico'));\n\nnew MutationObserver(ms => {\n  ms.forEach(m => {\n    m.addedNodes.forEach(n => {\n      if (n.nodeType === 1) {\n        var nc = n.classList;\n        if (nc && (nc.contains('cell-output') || nc.contains('output_area'))) nc.add('pico');\n        n.querySelectorAll(sel).forEach(e => e.classList.add('pico'));\n      }\n    });\n  });\n}).observe(document.body, { childList: true, subtree: true });\"\"\"\n    return display.Javascript(js)\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Configuration\nDESCRIPTION: Shows how to customize exception handlers in FastHTML applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef not_found(req, exc): return Titled(\"404: I don't exist!\")\nexception_handlers = {404: not_found}\napp, rt = fast_app(exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Using Enum Types for Path Parameters in Python\nDESCRIPTION: Shows how to use enum types as path parameter annotations in FastHTML. This pattern is useful for creating type-safe APIs with a predefined set of valid values.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nModelName = str_enum('ModelName', \"alexnet\", \"resnet\", \"lenet\")\n\n@rt(\"/models/{nm}\")\ndef get(nm:ModelName): return nm\n\nprint(cli.get('/models/alexnet').text)\n```\n\n----------------------------------------\n\nTITLE: Extending HTML Components with Sensible Defaults in Python\nDESCRIPTION: The xtend module provides extensions to standard HTML components with sensible defaults and additional functionality. It includes custom form elements, script handling, styling utilities, and HTMX integration helpers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef A(*c, **kwargs):\n    # An A tag; `href` defaults to '#' for more concise use with HTMX\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef AX(txt, hx_get, target_id, hx_swap, href, **kwargs):\n    # An A tag with just one text child, allowing hx_get, target_id, and hx_swap to be positional params\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Form(*c, **kwargs):\n    # A Form tag; identical to plain `ft_hx` version except default `enctype='multipart/form-data'`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Hidden(value, id, **kwargs):\n    # An Input of type 'hidden'\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef CheckboxX(checked, label, value, id, name, **kwargs):\n    # A Checkbox optionally inside a Label, preceded by a `Hidden` with matching name\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_html, keep=True)\ndef Script(code, **kwargs):\n    # A Script tag that doesn't escape its code\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_html, keep=True)\ndef Style(*c, **kwargs):\n    # A Style tag that doesn't escape its code\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef double_braces(s):\n    # Convert single braces to double braces if next to special chars or newline\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef undouble_braces(s):\n    # Convert double braces to single braces if next to special chars or newline\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef loose_format(s, **kw):\n    # String format `s` using `kw`, without being strict about braces outside of template params\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef ScriptX(fname, src, nomodule, type, _async, defer, charset, crossorigin, integrity, **kw):\n    # A `script` element with contents read from `fname`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef replace_css_vars(css, pre, **kwargs):\n    # Replace `var(--)` CSS variables with `kwargs` if name prefix matches `pre`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef StyleX(fname, **kw):\n    # A `style` element with contents read from `fname` and variables replaced from `kw`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef Nbsp():\n    # A non-breaking space\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef Surreal(code):\n    # Wrap `code` in `domReadyExecute` and set `m=me()` and `p=me('-')`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef On(code, event, sel, me):\n    # An async surreal.js script block event handler for `event` on selector `sel,p`, making available parent `p`, event `ev`, and target `e`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef Prev(code, event):\n    # An async surreal.js script block event handler for `event` on previous sibling, with same vars as `On`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef Now(code, sel):\n    # An async surreal.js script block on selector `me(sel)`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef AnyNow(sel, code):\n    # An async surreal.js script block on selector `any(sel)`\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef run_js(js, id, **kw):\n    # Run `js` script, auto-generating `id` based on name of caller if needed, and js-escaping any `kw` params\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef jsd(org, repo, root, path, prov, typ, ver, esm, **kwargs):\n    # jsdelivr `Script` or CSS `Link` tag, or URL\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@delegates(ft_hx, keep=True)\ndef Titled(title, *args, **kwargs):\n    # An HTML partial containing a `Title`, and `H1`, and any provided children\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef Socials(title, site_name, description, image, url, w, h, twitter_site, creator, card):\n    # OG and Twitter social card headers\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\ndef Favicon(light_icon, dark_icon):\n    # Light and dark favicon headers\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring String Representation for FT Components\nDESCRIPTION: Enhances FT (FastHTML) components with custom string representation methods. When a component has an ID, the string representation becomes that ID, and concatenation operators are overloaded to enable easy string composition with FT objects.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@patch\ndef __str__(self:FT): return self.id if self.id else object.__str__(self)\n```\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@patch\ndef __radd__(self:FT, b): return f'{b}{self}'\n```\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@patch\ndef __add__(self:FT, b): return f'{self}{b}'\n```\n\n----------------------------------------\n\nTITLE: Defining POST Route Handler and Testing\nDESCRIPTION: Creating a POST handler for the '/hi' route and testing it with the client. The function name 'post' automatically maps to the POST HTTP method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/hi\")\ndef post(): return 'Postal'\ncli.post('/hi').text\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Starlette\nDESCRIPTION: Demonstrates the structure of request headers in Starlette applications. The headers are presented as a dictionary containing various HTTP headers such as host, user-agent, accept types, and cookies.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n{\n    'host': 'example.com:8080', \n    'connection': 'keep-alive', \n    'cache-control': 'max-age=0', \n    'sec-ch-ua': 'Google Chrome 80', \n    'dnt': '1', \n    'upgrade-insecure-requests': '1', \n    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) ...',\n    'sec-fetch-dest': 'document', \n    'accept': 'text/html,image/apng,*/*;q=0.8;v=b3;q=0.9', \n    'sec-origin-policy': '0', \n    'sec-fetch-site': 'none', \n    'sec-fetch-mode': 'navigate', \n    'sec-fetch-user': '?1', \n    'accept-encoding': 'gzip, deflate, br', \n    'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6', \n    'cookie': 'session=eyJhZG1pbl91c2_KiQ...'\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tag with Underscores\nDESCRIPTION: Creating a custom HTML tag that preserves underscores instead of converting to hyphens\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_270\n\nLANGUAGE: python\nCODE:\n```\ndef tag_with_underscores(*c, target_id=None, **kwargs): \n    return ft_hx('tag_with_underscores', *c, target_id=target_id, **kwargs)\n\ntag_with_underscores()\n```\n\n----------------------------------------\n\nTITLE: Testing Prefixed APIRouter Functionality\nDESCRIPTION: Verifies the functionality of the prefixed APIRouter, including route function discovery, path generation with the prefix, and error handling. This tests that the prefix is correctly applied to all routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nassert str(yoyo) == '/products/yoyo'\nassert ar2.prefix == '/products'\nassert str(ar2.rt_funcs.index) == '/products/'\nassert str(ar2.index) == '/products/'\nassert str(ar.index) == '/'\nwith ExceptionExpected(): ar2.blah()\nwith ExceptionExpected(): ar2.rt_funcs.blah()\nassert \"get\" not in ar2.rt_funcs._funcs.keys()\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Route\nDESCRIPTION: Demonstrates how to define a new route dynamically without restarting the server, which can be used by the previously defined button.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_179\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef click(): return P('You clicked me!')\n```\n\n----------------------------------------\n\nTITLE: Custom Attributes with Special Characters\nDESCRIPTION: Demonstrating how to add HTML attributes containing special characters using dictionary syntax\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_272\n\nLANGUAGE: python\nCODE:\n```\nDiv(normal_arg='normal stuff',**{'notNormal:arg:with_varing@symbols!':'123'})\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Query Parameters in Python\nDESCRIPTION: Demonstrates how to handle boolean query parameters in FastHTML. The framework automatically converts various string values to their corresponding boolean values.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/booly/\")\ndef _(coming:bool=True): return 'Coming' if coming else 'Not coming'\nprint(cli.get('/booly/?coming=true').text)\nprint(cli.get('/booly/?coming=no').text)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Stripe Webhook Listener\nDESCRIPTION: Command to start a Stripe CLI listener for forwarding webhook events to a local server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nstripe listen --forward-to http://localhost:5001/webhook\n```\n\n----------------------------------------\n\nTITLE: Form Parsing Function for Starlette Requests\nDESCRIPTION: Parses form data from a Starlette request, handling empty multipart forms and JSON content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync def parse_form(req: Request) -> FormData:\n    \"Starlette errors on empty multipart forms, so this checks for that situation\"\n    ctype = req.headers.get(\"Content-Type\", \"\")\n    if ctype=='application/json': return await req.json()\n    if not ctype.startswith(\"multipart/form-data\"): return await req.form()\n    try: boundary = ctype.split(\"boundary=\")[1].strip()\n    except IndexError: raise HTTPException(400, \"Invalid form-data: no boundary\")\n    min_len = len(boundary) + 6\n    clen = int(req.headers.get(\"Content-Length\", \"0\"))\n    if clen <= min_len: return FormData()\n    return await req.form()\n```\n\n----------------------------------------\n\nTITLE: Transforming an Existing Table Schema\nDESCRIPTION: Modifies the User table schema by adding a 'pwd' field. The transform parameter allows updating table structures after initial creation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass User: name:str; email: str; year_started:int; pwd:str\nusers = db.create(User, pk='name', transform=True)\nusers\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with __call__ Method in Starlette\nDESCRIPTION: Demonstrates how to create a middleware in Starlette by implementing the __call__ method. This approach gives direct access to the ASGI scope, receive, and send objects for low-level request/response manipulation.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass MyMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        # see above scope dictionary as reference\n        headers = dict(scope[\"headers\"])\n        # do something\n        # pass to next middleware\n        return await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError When Accessing Filtered-Out Records\nDESCRIPTION: Shows how attempting to access a record that doesn't match the filter criteria raises a NotFoundError.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_230\n\nLANGUAGE: python\nCODE:\n```\ntry: todos[2]\nexcept NotFoundError: print('Record not found')\n```\n\n----------------------------------------\n\nTITLE: Creating Click-Triggered Color Change Animation in HTML\nDESCRIPTION: Demonstrates how to create a timeline animation that changes an element's background color every second when clicked. Uses async/await with sleep() for timing and eventually removes the element.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_74\n\nLANGUAGE: html\nCODE:\n```\n<div>I change color every second.\n  <script>\n    // On click, animate something new every second.\n    me().on(\"click\", async ev => {\n      let el = me(ev) // Save target because async will lose it.\n      me(el).styles({ \"transition\": \"background 1s\" })\n      await sleep(1000)\n      me(el).styles({ \"background\": \"red\" })\n      await sleep(1000)\n      me(el).styles({ \"background\": \"green\" })\n      await sleep(1000)\n      me(el).styles({ \"background\": \"blue\" })\n      await sleep(1000)\n      me(el).styles({ \"background\": \"none\" })\n      await sleep(1000)\n      me(el).remove()\n    })\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating a Record Using a Dictionary\nDESCRIPTION: Demonstrates updating a record by providing a dictionary containing the primary key and updated field values. This is an alternative to using a class instance.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nusers.update(dict(name='Alma', year_started=2199, email='a@example.com'))\n```\n\n----------------------------------------\n\nTITLE: Creating Container Component for Pico.css\nDESCRIPTION: Implements a Pico.css Container component as a Main tag with class 'container'. Used as a main content wrapper in Pico.css layouts.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef Container(*args, **kwargs)->FT:\n    \"A PicoCSS Container, implemented as a Main with class 'container'\"\n    return Main(*args, cls=\"container\", **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Basic Package\nDESCRIPTION: Imports all essential symbols from FastHTML and Starlette using the common meta-package.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n```\n\n----------------------------------------\n\nTITLE: Enum Path Parameters\nDESCRIPTION: Shows how to use string enums as path parameters for type-safe route handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_292\n\nLANGUAGE: python\nCODE:\n```\nModelName = str_enum('ModelName', \"alexnet\", \"resnet\", \"lenet\")\n\n@rt(\"/models/{nm}\")\ndef get(nm:ModelName): return nm\n\nprint(cli.get('/models/alexnet').text)\n```\n\n----------------------------------------\n\nTITLE: Returning Complete HTML Structure\nDESCRIPTION: Creating a route that returns a complete HTML structure with explicit Head and Body components, giving full control over the HTML output.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft4')\ndef get(): return Html(Head(Title('hi')), Body(P('there')))\n\nprint(cli.get('/ft4').text)\n```\n\n----------------------------------------\n\nTITLE: Testing CORS Headers in OPTIONS Response\nDESCRIPTION: Verifies that the CORS headers are correctly set in the response to an OPTIONS request. This tests that the previously defined OPTIONS handler is working as expected.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nh = cli.options('/form-submit/2').headers\ntest_eq(h['Access-Control-Allow-Methods'], 'POST')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom HTML Tag with NotStr\nDESCRIPTION: Demonstrates creating a simple div tag using the NotStr class and printing it to verify the output.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_266\n\nLANGUAGE: python\nCODE:\n```\ndiv_NotStr = NotStr('<div></div>') \nprint(div_NotStr)\n```\n\n----------------------------------------\n\nTITLE: Transforming Existing Table in Python\nDESCRIPTION: Shows how to transform an existing table by adding a new field using the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_196\n\nLANGUAGE: python\nCODE:\n```\nclass User: name:str; email: str; year_started:int; pwd:str\nusers = db.create(User, pk='name', transform=True)\nusers\n```\n\n----------------------------------------\n\nTITLE: Static Route Single Extension Handler\nDESCRIPTION: Method to add static routes for a single file extension. Simplifies routing for specific file types.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef static_route(self:FastHTML, ext='', prefix='/', static_path='.'):\n    \"Add a static route at URL path `prefix` with files from `static_path` and single `ext` (including the '.')\"\n    @self.route(f\"{prefix}{{fname:path}}{ext}\")\n    async def get(fname:str): return FileResponse(f'{static_path}/{fname}{ext}')\n```\n\n----------------------------------------\n\nTITLE: Accessing a User Record by Primary Key in FastHTML\nDESCRIPTION: Shows how to retrieve a user record by its primary key. The example demonstrates accessing a user by ID from a users table object.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nusers[user.id]\n```\n\n----------------------------------------\n\nTITLE: Dataclass Form Handling\nDESCRIPTION: Demonstrates using dataclasses for structured form data handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Bodie: a:int;b:str\n\n@rt(\"/bodie/{nm}\")\ndef post(nm:str, data:Bodie):\n    res = asdict(data)\n    res['nm'] = nm\n    return res\n\nprint(cli.post('/bodie/me', data=dict(a=1, b='foo', nm='me')).text)\n```\n\n----------------------------------------\n\nTITLE: Generating URL Paths with Application Object in Python\nDESCRIPTION: Shows how to use the url_path_for method of the application to generate URL paths for named routes. This method returns only the path component of the URL.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\napp.url_path_for('gday', nm='Jeremy')\n```\n\n----------------------------------------\n\nTITLE: Parentheses Search with Ordering in FastHTML MiniDataAPI\nDESCRIPTION: Retrieves records with a specified sort order using the order_by parameter. Orders the results alphabetically by the name column.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_208\n\nLANGUAGE: python\nCODE:\n```\nusers(order_by='name')\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record That Passes Filter Criteria in MiniDataAPI\nDESCRIPTION: Successfully deletes a record that matches the filter criteria set by .xtra().\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_234\n\nLANGUAGE: python\nCODE:\n```\ntodos.delete(ct.id)\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Text from TestClient\nDESCRIPTION: Retrieving the text response from a TestClient request, which uses httpx.Response behind the scenes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nr.text\n```\n\n----------------------------------------\n\nTITLE: Plain Text Response Implementation\nDESCRIPTION: Shows how to send a plain text response using PlainTextResponse class.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Using picolink Component in FastHTML\nDESCRIPTION: Shows how to use the built-in picolink component to include PicoCSS in a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_149\n\nLANGUAGE: python\nCODE:\n```\nprint(to_xml(picolink))\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Starlette\nDESCRIPTION: Shows how to set up custom exception handlers for different HTTP status codes (403, 404, 503, 500) in Starlette. These handlers enable customized error pages and logging for different types of errors.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.exceptions import HTTPException\n\nasync def exc_handle_403(request, exc):\n    return HTMLResponse(\"My 403 page\", status_code=exc.status_code)\n\nasync def exc_handle_404(request, exc):\n    return HTMLResponse(\"My 404 page\", status_code=exc.status_code)\n\nasync def exc_handle_503(request, exc):\n    return HTMLResponse(\"Failed, please try it later\", status_code=exc.status_code)\n\n# error is not exception, 500 is server side unexpected error, all other status code will be treated as Exception\nasync def err_handle_500(request, exc):\n    import traceback\n    Log.error(traceback.format_exc())\n    return HTMLResponse(\"My 500 page\", status_code=500)\n\n# To add handler, we can add either status_code or Exception itself as key\nexception_handlers = {\n    403: exc_handle_403,\n    404: exc_handle_404,\n    503: exc_handle_503,\n    500: err_handle_500,\n    #HTTPException: exc_handle_500,\n}\n\napp = Starlette(routes=routes, exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameters\nDESCRIPTION: Shows handling of optional query parameters with default values and type annotations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_294\n\nLANGUAGE: python\nCODE:\n```\nfake_db = [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n\n@rt(\"/items/\")\ndef get(idx:int|None = 0): return fake_db[idx]\nprint(cli.get('/items/?idx=1').text)\n```\n\n----------------------------------------\n\nTITLE: Using Array Methods with DOM Element Collections\nDESCRIPTION: Demonstrates how to use forEach and map array methods with collections of elements selected using the any() selector, with the optional chaining operator for safety.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_78\n\nLANGUAGE: js\nCODE:\n```\nany('button')?.forEach(...)\nany('button')?.map(...)\n```\n\n----------------------------------------\n\nTITLE: Setting page title with FastHTML\nDESCRIPTION: Demonstrates how to set a custom page title by returning a Title object before the main content in a FastHTML route.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_141\n\nLANGUAGE: python\nCODE:\n```\napp = FastHTML()\n\n@app.get(\"/\")\ndef home():\n    return Title(\"Page Demo\"), Div(H1('Hello, World'), P('Some text'), P('Some more text'))\n\nclient = TestClient(app)\nprint(client.get(\"/\").text)\n```\n\n----------------------------------------\n\nTITLE: Live Reloading Configuration in FastHTML\nDESCRIPTION: Shows how to enable live reloading for development using FastHTMLWithLiveReload.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_321\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\napp = FastHTMLWithLiveReload()\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Client for Google in Python\nDESCRIPTION: Creates a GoogleAppClient instance using environment variables for client ID and secret. This client is used to manage OAuth settings and state for Google authentication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom fasthtml.oauth import GoogleAppClient\nclient = GoogleAppClient(os.getenv(\"AUTH_CLIENT_ID\"),\n                         os.getenv(\"AUTH_CLIENT_SECRET\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Line SVG Element\nDESCRIPTION: Creates an SVG line element with support for start and end coordinates, stroke color and width attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Line(x1, y1, x2=0, y2=0, stroke='black', w=None, stroke_width=1, **kwargs):\n    \"A standard SVG `line` element\"\n    if w: stroke_width=w\n    return ft_svg('line', x1=x1, y1=y1, x2=x2, y2=y2, stroke=stroke, stroke_width=stroke_width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code in Starlette Response\nDESCRIPTION: Shows how to return a response with a specific HTTP status code using Starlette's Response class in a FastHTML application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nreturn Response(content, statu_code=404)\n```\n\n----------------------------------------\n\nTITLE: Printing Stripe Price ID in Python\nDESCRIPTION: Outputs the ID of the created Stripe price for reference.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Price ID = {price.id}\")\n```\n\n----------------------------------------\n\nTITLE: URI Encoding and Decoding Functions\nDESCRIPTION: Functions for encoding and decoding URIs with support for query parameters\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef uri(_arg, **kwargs):\n    return f\"{quote(_arg)}/{urlencode(kwargs, doseq=True)}\"\n\ndef decode_uri(s):\n    arg,_,kw = s.partition('/')\n    return unquote(arg), {k:v[0] for k,v in parse_qs(kw).items()}\n```\n\n----------------------------------------\n\nTITLE: Initializing DaisyUI Chat Component in Python\nDESCRIPTION: Python code showing how to load TailwindCSS and DaisyUI dependencies and create a basic chat message component.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_168\n\nLANGUAGE: python\nCODE:\n```\n# Loading tailwind and daisyui\nheaders = (Script(src=\"https://cdn.tailwindcss.com\"),\n           Link(rel=\"stylesheet\", href=\"https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css\"))\n\n# Displaying a single message\nd = Div(\n    Div(\"Chat header here\", cls=\"chat-header\"),\n    Div(\"My message goes here\", cls=\"chat-bubble chat-bubble-primary\"),\n    cls=\"chat chat-start\"\n)\n# show(Html(*headers, d)) # uncomment to view\n```\n\n----------------------------------------\n\nTITLE: Finding WebSocket Parameters in Python\nDESCRIPTION: This function finds and extracts parameters from WebSocket data based on parameter annotations. It handles special types like HtmxHeaders, Starlette app, and WebSocket objects, and also supports basic parameter discovery for common names like 'ws', 'scope', 'data', etc.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef _find_wsp(ws, data, hdrs, arg:str, p:Parameter):\n    \"In `data` find param named `arg` of type in `p` (`arg` is ignored for body types)\"\n    anno = p.annotation\n    if isinstance(anno, type):\n        if issubclass(anno, HtmxHeaders): return _get_htmx(hdrs)\n        if issubclass(anno, Starlette): return ws.scope['app']\n        if issubclass(anno, WebSocket): return ws\n    if anno is empty:\n        if arg.lower()=='ws': return ws\n        if arg.lower()=='scope': return dict2obj(ws.scope)\n        if arg.lower()=='data': return data\n        if arg.lower()=='htmx': return _get_htmx(hdrs)\n        if arg.lower()=='app': return ws.scope['app']\n        if arg.lower()=='send': return partial(_send_ws, ws)\n        if 'session'.startswith(arg.lower()): return ws.scope.get('session', {})\n        return None\n    res = data.get(arg, None)\n    if res is empty or res is None: res = hdrs.get(arg, None)\n    if res is empty or res is None: res = p.default\n    # We can cast str and list[str] to types; otherwise just return what we have\n    if not isinstance(res, (list,str)) or anno is empty: return res\n    return [_fix_anno(anno, o) for o in res] if isinstance(res,list) else _fix_anno(anno, res)\n\ndef _wrap_ws(ws, data, params):\n    hdrs = {k.lower().replace('-','_'):v for k,v in data.pop('HEADERS', {}).items()}\n    return [_find_wsp(ws, data, hdrs, arg, p) for arg,p in params.items()]\n```\n\n----------------------------------------\n\nTITLE: Starting the FastHTML Server with JupyUvi\nDESCRIPTION: Creates a server instance using JupyUvi, which starts Uvicorn in a separate thread from Jupyter, allowing for concurrent execution of the server and notebook.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nserver = JupyUvi(app)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record by Primary Key\nDESCRIPTION: Uses square bracket notation to retrieve a record by its primary key. This method returns a single record or raises a NotFoundError if no matching record exists.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nuser = users['Alma']\nuser\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handlers in FastHTML\nDESCRIPTION: Creates a custom 404 (Not Found) error handler that returns a Div component. The handler is registered with the FastHTML application during initialization.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\ndef _not_found(req, exc): return Div('nope')\n\napp = FastHTML(exception_handlers={404:_not_found})\ncli = Client(app)\nrt = app.route\n\nr = cli.get('/')\nprint(r.text)\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Content with HTMX in FastHTML\nDESCRIPTION: Additional route handler for the '/change' endpoint that demonstrates HTMX interactivity. When the element with hx_get='/change' is clicked, this function returns content that replaces the original element.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@rt('/change')\ndef get(): return P('Nice to be here!')\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Transform Generator\nDESCRIPTION: Creates a utility function to generate SVG transform attribute strings for common transformations like translate, scale, rotate, skew, and matrix.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef transformd(translate=None, scale=None, rotate=None, skewX=None, skewY=None, matrix=None):\n    \"Create an SVG `transform` kwarg dict\"\n    funcs = []\n    if translate is not None: funcs.append(f\"translate{translate}\")\n    if scale is not None: funcs.append(f\"scale{scale}\")\n    if rotate is not None: funcs.append(f\"rotate({','.join(map(str,rotate))})\")\n    if skewX is not None: funcs.append(f\"skewX({skewX})\")\n    if skewY is not None: funcs.append(f\"skewY({skewY})\")\n    if matrix is not None: funcs.append(f\"matrix{matrix}\")\n    return dict(transform=' '.join(funcs)) if funcs else {}\n```\n\n----------------------------------------\n\nTITLE: Displaying HTMX Application in Jupyter\nDESCRIPTION: Uses the HTMX callable to display the server's HTMX application in an iframe within the Jupyter notebook.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_178\n\nLANGUAGE: python\nCODE:\n```\n# This doesn't display in the docs - uncomment and run it to see it in action\n# HTMX()\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Color Change Animation in HTML\nDESCRIPTION: Creates an immediate self-executing animation that changes element background color every second using an IIFE (Immediately Invoked Function Expression) with async/await.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_76\n\nLANGUAGE: html\nCODE:\n```\n<div>Change color every second.\n  <script>\n    // Run immediately.\n    (async (e = me()) => {\n      me(e).styles({ \"transition\": \"background 1s\" })\n      await sleep(1000)\n      me(e).styles({ \"background\": \"red\" })\n      await sleep(1000)\n      me(e).styles({ \"background\": \"green\" })\n      await sleep(1000)\n      me(e).styles({ \"background\": \"blue\" })\n      await sleep(1000)\n      me(e).styles({ \"background\": \"none\" })\n      await sleep(1000)\n      me(e).remove()\n    })()\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customized Show Function for Jupyter\nDESCRIPTION: Defines a custom 'show' function that adds HTMX processing for Jupyter notebook compatibility.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef show(*s):\n    \"Same as fasthtml.components.show, but also adds `htmx.process()`\"\n    if IN_NOTEBOOK: return _show(*s, Script('if (window.htmx) htmx.process(document.body)'))\n    return _show(*s)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stripe Product and Price for Demo in Python\nDESCRIPTION: Creates a demo product with a single price using the previously defined functions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp_nm = \"[FastHTML Docs] Demo Product\"\nprice_list = create_price(app_nm, amt=1999)\nassert len(price_list) == 1, 'For this tutorial, we only have one price bound to our product.'\nprice = price_list[0]\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Beforeware in Python\nDESCRIPTION: Creates middleware to check authentication status before processing routes, redirecting unauthenticated users to login.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef before(req, session):\n    auth = req.scope['auth'] = session.get('user_id', None)\n    if not auth: return RedirectResponse('/login', status_code=303)\n    counts.xtra(name=auth)\nbware = Beforeware(before, skip=['/login', auth_callback_path])\n```\n\n----------------------------------------\n\nTITLE: HTMX CSS Classes\nDESCRIPTION: CSS classes automatically added by HTMX to manage element states during requests and content swapping. These classes control visibility, transitions, and request status indicators.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_25\n\nLANGUAGE: css\nCODE:\n```\nhtmx-added\nhtmx-indicator\nhtmx-request\nhtmx-settling\nhtmx-swapping\n```\n\n----------------------------------------\n\nTITLE: Initializing FastHTML Application and Test Client\nDESCRIPTION: Sets up a FastHTML application and initializes a test client for making requests to the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_160\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom starlette.testclient import TestClient\n\napp = FastHTML()\ncli = TestClient(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle SVG Element\nDESCRIPTION: Creates an SVG circle element with support for radius, position, fill and stroke attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Circle(r, cx=0, cy=0, fill=None, stroke=None, stroke_width=None, **kwargs):\n    \"A standard SVG `circle` element\"\n    return ft_svg('circle', r=r, cx=cx, cy=cy, fill=fill, stroke=stroke, stroke_width=stroke_width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating In-Memory SQLite Database in Python\nDESCRIPTION: Shows how to create an in-memory SQLite database using the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_192\n\nLANGUAGE: python\nCODE:\n```\ndb = database(':memory:')\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in FastHTML\nDESCRIPTION: Example of enabling debug mode in FastHTML which displays detailed error information in the browser when exceptions occur.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp, rt = fast_app(debug=True)  # <1>\n\n@rt(\"/\")\ndef get():\n    1/0  # <2>\n    return Titled(\"FastHTML Error!\", P(\"Let's error!\"))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Testing APIRouter Route Functionality\nDESCRIPTION: Verifies the functionality of the APIRouter, including route function discovery, path generation, and error handling for non-existent routes. This tests both the router's route registration and attribute access.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nassert str(yoyo) == '/yoyo'\n# ensure route functions are properly discoverable on `APIRouter` and `APIRouter.rt_funcs`\nassert ar.prefix == ''\nassert str(ar.rt_funcs.index) == '/'\nassert str(ar.index) == '/'\nwith ExceptionExpected(): ar.blah()\nwith ExceptionExpected(): ar.rt_funcs.blah()\n# ensure any route functions named using an HTTPMethod are not discoverable via `rt_funcs`\nassert \"get\" not in ar.rt_funcs._funcs.keys()\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Components for Custom Tags\nDESCRIPTION: Imports the necessary FastHTML classes including NotStr, Div, and to_xml for creating custom HTML components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import NotStr,Div, to_xml\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in WebSockets with FastHTML\nDESCRIPTION: Example showing how session data is shared between standard HTTP routes and WebSockets in FastHTML. Demonstrates setting session data in an HTTP route and accessing it in a WebSocket handler.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/websockets.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\n@rt('/login')\ndef get(session):\n    session[\"person\"] = \"Bob\"\n    return \"ok\"\n\n@app.ws('/ws')\nasync def ws(msg:str, send, session):\n    await send(Div(f'Hello {session.get(\"person\")}' + msg, id='notifications'))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Combining FastTags Components\nDESCRIPTION: Shows how to create composite FastTags components by combining existing ones.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef Hero(title, statement): return Div(H1(title),P(statement), cls=\"hero\")\nto_xml(Hero(\"Hello World\", \"This is a hero statement\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Polyline SVG Element\nDESCRIPTION: Creates an SVG polyline element with support for points (as either coordinate pairs or a space-separated string), fill and stroke attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Polyline(*args, points=None, fill=None, stroke=None, stroke_width=None, **kwargs):\n    \"A standard SVG `polyline` element\"\n    if points is None: points = ' '.join(f\"{x},{y}\" for x, y in args)\n    return ft_svg('polyline', points=points, fill=fill, stroke=stroke, stroke_width=stroke_width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of Returned Records\nDESCRIPTION: Shows how to limit the number of records returned from a query using the limit parameter. This is useful for pagination or when only a subset of records is needed.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nusers(limit=1)\n```\n\n----------------------------------------\n\nTITLE: FastHTML Route with URL Parameters using @rt\nDESCRIPTION: Shows how to define a route with URL parameters using the @rt decorator with a function named after the HTTP method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_147\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/greet/{nm}\")\ndef get(nm:str):\n    return f\"Good day to you, {nm}!\"\n\nclient.get(\"/greet/Dave\").text\n```\n\n----------------------------------------\n\nTITLE: Verifying Stripe Test Mode in Python\nDESCRIPTION: Asserts that the Stripe API key is a test key to ensure the application is running in test mode.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassert 'test_' in stripe.api_key\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Compound Primary Key\nDESCRIPTION: Creates a Publication table with a compound primary key using multiple fields ('authors' and 'year'). This demonstrates support for composite keys in the MiniDataAPI specification.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Publication: authors: str; year: int; title: str\npublications = db.create(Publication, pk=('authors', 'year'))\n```\n\n----------------------------------------\n\nTITLE: Testing Static Route Extensions in FastHTML\nDESCRIPTION: Tests the default static route extensions configuration and demonstrates a 404 response for an unsupported file type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\napp.static_route_exts()\nassert cli.get('/README.txt').status_code == 404\nprint(cli.get('/README.txt').text[:50])\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Background Tasks in Starlette\nDESCRIPTION: Shows how to create and execute multiple background tasks in Starlette using the BackgroundTasks class. This approach allows adding multiple asynchronous operations to be performed after the response is sent.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.background import BackgroundTasks\n\nasync def task1(name):\n    pass\n\nasync def task2(email):\n    pass\n\nasync def handler(request):\n    tasks = BackgroundTasks()\n    tasks.add_task(task1, name=\"John\")\n    tasks.add_task(task2, email=\"info@example.com\")\n    content = \"\"\n    return Response(content, background=tasks)\n```\n\n----------------------------------------\n\nTITLE: Testing Dependencies Import\nDESCRIPTION: Imports additional packages needed for testing and development, including IPython display and test utilities.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom IPython import display\nfrom enum import Enum\nfrom pprint import pprint\n\nfrom fastcore.test import *\nfrom starlette.testclient import TestClient\nfrom starlette.requests import Headers\nfrom starlette.datastructures import UploadFile\n```\n\n----------------------------------------\n\nTITLE: FastHTML Route with Function Name as Method\nDESCRIPTION: Shows how to use the function name to define the HTTP method for a route with the rt decorator in FastHTML.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_144\n\nLANGUAGE: python\nCODE:\n```\nrt = app.route\n\n@rt(\"/\")\ndef post():\n    return \"Hello World from a POST request\"\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Callback Path in Python\nDESCRIPTION: Sets the path component of the authorization callback URL, which is used by GitHub to redirect the user after authentication.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_244\n\nLANGUAGE: python\nCODE:\n```\nauth_callback_path = \"/auth_redirect\"\n```\n\n----------------------------------------\n\nTITLE: Defining Text Styles Enum in Python\nDESCRIPTION: Defines an enumeration of text styles from Franken UI, including paragraph, lead, meta, and various text attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\nclass TextT(Enum):\n    paragraph, lead, meta, gray, italic, xs, sm, lg, xl, light, normal, medium, bold, extrabold, muted, primary, secondary, success, warning, error, info, left, right, center, justify, start, end, top, middle, bottom, truncate, break_, nowrap, underline, highlight\n```\n\n----------------------------------------\n\nTITLE: Handling Delete Failures on Filtered-Out Records in MiniDataAPI\nDESCRIPTION: Shows how attempting to delete a record that doesn't match the filter criteria raises a NotFoundError.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_233\n\nLANGUAGE: python\nCODE:\n```\ntry: todos.delete(1)\nexcept NotFoundError as e: print('Record not updated')\n```\n\n----------------------------------------\n\nTITLE: Creating a FastHTML Application\nDESCRIPTION: Initializes a FastHTML application using the fast_app function with the pico option enabled.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_174\n\nLANGUAGE: python\nCODE:\n```\napp, rt = fast_app(pico=True)\n```\n\n----------------------------------------\n\nTITLE: Fading Out All Buttons using Global Selector\nDESCRIPTION: Demonstrates how to automatically fade out all button elements on the page using the any() selector with fadeOut() in a self-executing function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_77\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Run immediately, for every <button> globally!\n  (async () => {\n    any(\"button\").fadeOut()\n  })()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Cancelled Stripe Payments in Python\nDESCRIPTION: This function handles the cancel route when a user abandons the Stripe checkout process. It displays a cancellation message with a link to return to the home page.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/cancel\")\ndef cancel():\n    return Titled(\n        \"Cancelled\",\n        Div(H2(\"Payment Cancelled\"),\n            P(\"Your payment was cancelled.\"),\n            A(\"Back to Home\", href=\"/\")))\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Content with Random Lists\nDESCRIPTION: Enhanced FastHTML application that displays a random list of letters that changes with each page reload.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nimport string, random  # <1>\n\napp, rt = fast_app()\n\n@rt(\"/\")\ndef get():\n    letters = random.choices(string.ascii_uppercase, k=random.randint(5, 20)) # <2>\n    items = [Li(c) for c in letters] # <3>\n    return Titled(\"Random lists of letters\",\n        Ul(*items) # <4>\n    ) \n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Viewing Static Route Configuration in FastHTML\nDESCRIPTION: Displays help information for the static_route_exts method, which shows available options for configuring static file serving.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nhelp(app.static_route_exts)\n```\n\n----------------------------------------\n\nTITLE: Mounting Static Files Server in Starlette\nDESCRIPTION: Shows how to create both standalone static files servers and mount them within a Starlette application under a specific path prefix.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_99\n\nLANGUAGE: python\nCODE:\n```\n# This is a standalone static files server:\napp = StaticFiles(directory=\"static\")\n\n# This is a static files server mounted within a Starlette application,\n# underneath the \"/static\" path.\nroutes = [\n    ...\n    Mount(\"/static\", app=StaticFiles(directory=\"static\"), name=\"static\")\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Square Bracket Search with Compound Primary Key using List\nDESCRIPTION: Demonstrates querying a record with a compound primary key using a list of values. The values must be in the same order as defined in the table schema.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_205\n\nLANGUAGE: python\nCODE:\n```\npublications[['Alma', 2019]]\n```\n\n----------------------------------------\n\nTITLE: Image Extension Route Handler\nDESCRIPTION: Defines route handling for image file extensions and tests the routing functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nreg_re_param(\"imgext\", \"ico|gif|jpg|jpeg|webm|pdf\")\n\n@rt(r'/static/{path:path}{fn}.{ext:imgext}')\ndef get(fn:str, path:str, ext:str): return f\"Getting {fn}.{ext} from /{path}\"\n\ntest_r(cli, '/static/foo/jph.me.ico', 'Getting jph.me.ico from /foo/')\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Data Class\nDESCRIPTION: Defines a simple data class for representing HTTP headers.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass HttpHeader: k:str;v:str\n```\n\n----------------------------------------\n\nTITLE: Creating Login Route Handler in Python\nDESCRIPTION: Handles the login route by generating and presenting the GitHub OAuth login link to users.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/oauth.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/login')\ndef login(request)\n    redir = redir_url(request,auth_callback_path)\n    login_link = client.login_link(redir)\n    return P(A('Login with GitHub', href=login_link))    \n```\n\n----------------------------------------\n\nTITLE: Creating Group Component for Pico.css\nDESCRIPTION: Implements a Pico.css Group component as a Fieldset with role='group'. Used for grouping related form elements together.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_hx, keep=True)\ndef Group(*c, **kwargs)->FT:\n    \"A PicoCSS Group, implemented as a Fieldset with role 'group'\"\n    return Fieldset(*c, role=\"group\", **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Custom FastTags Component\nDESCRIPTION: Shows how to create custom components by implementing the __ft__ method.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass FtTest:\n    def __ft__(self): return P('test')\n    \nto_xml(FtTest())\n```\n\n----------------------------------------\n\nTITLE: Body Type Checking Function\nDESCRIPTION: Checks if an annotation represents a body type (dict, ns, or annotated class).\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef _is_body(anno): return issubclass(anno, (dict,ns)) or _annotations(anno)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Response Implementation\nDESCRIPTION: Shows how to create and send a basic HTTP response with custom content and media type.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import Response\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = Response('Hello, world!', media_type='text/plain')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Single Component HTMX Response\nDESCRIPTION: Shows handling of single FT component returns in HTMX requests, demonstrating simplified partial updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_282\n\nLANGUAGE: python\nCODE:\n```\n@rt('/ft3')\ndef get(): return H1('bar')\nprint(cli.get('/ft3', **hxhdr).text)\n```\n\n----------------------------------------\n\nTITLE: Jupyter Integration in fasthtml.jupyter\nDESCRIPTION: Functions and classes for integrating FastHTML with Jupyter notebooks, allowing for interactive web application development and display within notebook environments.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/apilist.txt#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef nb_serve(app, log_level, port, host, **kwargs)\n    # Start a Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`\n\ndef nb_serve_async(app, log_level, port, host, **kwargs)\n    # Async version of `nb_serve`\n\ndef is_port_free(port, host)\n    # Check if `port` is free on `host`\n\ndef wait_port_free(port, host, max_wait)\n    # Wait for `port` to be free on `host`\n\nclass JupyUvi:\n    # Start and stop a Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`\n    def __init__(self, app, log_level, host, port, start, **kwargs)\n    def start(self)\n    def stop(self)\n\nclass JupyUviAsync:\n    # Start and stop an async Jupyter compatible uvicorn server with ASGI `app` on `port` with `log_level`\n    def __init__(self, app, log_level, host, port, **kwargs)\n    def start(self)\n    def stop(self)\n\ndef HTMX(path, app, host, port, height, link, iframe)\n    # An iframe which displays the HTMX application in a notebook.\n```\n\n----------------------------------------\n\nTITLE: Updating a Record Using a Modified Object\nDESCRIPTION: Shows how to update a record by modifying an existing object and passing it to the update method. The primary key is used to identify which record to update.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nuser\nuser.year_started = 2099\nusers.update(user)\n```\n\n----------------------------------------\n\nTITLE: Creating a FastHTML Application\nDESCRIPTION: Creates a FastHTML application using the fast_app function with the pico parameter enabled, which returns both the app and route handler (rt).\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp, rt = fast_app(pico=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Prefixed APIRouter\nDESCRIPTION: Creates an APIRouter instance with a prefix, which will be applied to all routes registered with it. This demonstrates how to group routes under a common path prefix.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nar2 = APIRouter(\"/products\")\n```\n\n----------------------------------------\n\nTITLE: Static Route Regular Expression Definition in FastHTML\nDESCRIPTION: Shows how FastHTML defines the 'static' regex pattern used for matching common static file extensions in URL routes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nreg_re_param(\"static\", \"ico|gif|jpg|jpeg|webm|css|js|woff|png|svg|mp4|webp|ttf|otf|eot|woff2|txt|html|map\")\n```\n\n----------------------------------------\n\nTITLE: JSON Response Implementation\nDESCRIPTION: Example of sending JSON data as a response using JSONResponse class.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import JSONResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = JSONResponse({'hello': 'world'})\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Square Bracket Search with Compound Primary Key using Tuple\nDESCRIPTION: Shows an alternative syntax for querying with compound primary keys using direct tuple arguments instead of a list. Functionally equivalent to the list approach.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_206\n\nLANGUAGE: python\nCODE:\n```\npublications['Alma', 2030]\n```\n\n----------------------------------------\n\nTITLE: Creating Test Blog Posts Files\nDESCRIPTION: Script to create a posts directory and populate it with sample markdown files for testing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create some dummy posts\nposts = Path(\"posts\")\nposts.mkdir(exist_ok=True)\nfor i in range(10): (posts/f\"article_{i}.md\").write_text(f\"This is article {i}\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route References with Query Parameters\nDESCRIPTION: Creating HTML with HTMX attributes that reference routes with query parameters, demonstrating component nesting and CSS class application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.get\ndef autoget(): return Html(Body(Div('Text.', cls='px-2', hx_post=show_host.to(a='b'))))\nprint(cli.get('/autoget').text)\n```\n\n----------------------------------------\n\nTITLE: URL Path Generation\nDESCRIPTION: Extension to HTTPConnection for generating URL paths with proper scope handling\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@patch\ndef url_path_for(self:HTTPConnection, name: str, **path_params):\n    lp = self.scope['app'].url_path_for(name, **path_params)\n    return URLPath(f\"{self.scope['root_path']}{lp}\", lp.protocol, lp.host)\n```\n\n----------------------------------------\n\nTITLE: Parentheses Search with Limit Parameter\nDESCRIPTION: Limits the number of records returned from a query using the limit parameter. Useful for pagination or when only a specific number of records is needed.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_211\n\nLANGUAGE: python\nCODE:\n```\nusers(limit=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMX Port for Jupyter\nDESCRIPTION: Defines 'htmx_config_port' function to configure HTMX port for use in Jupyter notebooks.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef htmx_config_port(port=8000):\n    display(HTML('''\n<script>\ndocument.body.addEventListener('htmx:configRequest', (event) => {\n    if(event.detail.path.includes('://')) return;\n    htmx.config.selfRequestsOnly=false;\n    event.detail.path = `${location.protocol}//${location.hostname}:%s${event.detail.path}`;\n});\n</script>''' % port))\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Custom HTML Tag\nDESCRIPTION: Shows the HTML output when a custom FastTag component is rendered.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<some-never-before-used-tag></some-never-before-used-tag>\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration for FastHTML\nDESCRIPTION: Sets up a configuration object using AttrDict with indentation enabled.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfh_cfg = AttrDict(indent=True)\n```\n\n----------------------------------------\n\nTITLE: Fastlite Database Setup\nDESCRIPTION: Demonstrates Fastlite database initialization and table creation with SQLite.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom fastlite import *\n\ndb = database(':memory:')\n\nclass Book: isbn: str; title: str; pages: int; userid: int\nbooks = db.create(Book, pk='isbn', transform=True)\n                \nclass User: id: int; name: str; active: bool = True\nusers = db.create(User, transform=True)\n\nuser = users.insert(name='Alex',active=False)\nusers()\nusers(order_by='name', limit=2, offset=1)\nusers(where=\"name='Alex'\")\nusers(\"name=?\", ('Alex',))\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Scope in Starlette\nDESCRIPTION: Shows the complete request scope dictionary in Starlette, which contains all request details including HTTP version, server and client information, path, query parameters, headers, and routing information.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'http', \n    'http_version': '1.1', \n    'server': ('127.0.0.1', 9092), \n    'client': ('127.0.0.1', 53102), \n    'scheme': 'https', \n    'method': 'GET', \n    'root_path': '', \n    'path': '/', \n    'raw_path': b'/', \n    'query_string': b'kw=hello', \n    'headers': [\n        (b'host', b'example.com:8080'), \n        (b'connection', b'keep-alive'), \n        (b'cache-control', b'max-age=0'), \n        ...\n    ], \n    'app': <starlette.applications.Starlette object at 0x1081bd650>, \n    'session': {'uid': '57ba03ea7333f72a25f837cf'}, \n    'router': <starlette.routing.Router object at 0x1081bd6d0>, \n    'endpoint': <class 'app.index.Index'>, \n    'path_params': {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running a FastHTML Application\nDESCRIPTION: Command to run a FastHTML application from the command line.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Initializing APIRouter Instance\nDESCRIPTION: Creates an instance of the APIRouter class without a prefix. This is a basic setup to prepare for adding routes in subsequent code snippets.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nar = APIRouter()\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Railway CLI Tools in Python\nDESCRIPTION: Imports necessary modules and functions for Railway CLI operations, including fastcore utilities, subprocess functions, and JSON handling.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/09_cli.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nfrom fastcore.utils import *\nfrom fastcore.script import call_parse, bool_arg\nfrom subprocess import check_output, run\n\nimport json\n```\n\n----------------------------------------\n\nTITLE: Defining Root Route with Index Function\nDESCRIPTION: Creating a special 'index' function that automatically handles the root path ('/') when defined without arguments to the route decorator.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef index(): return \"welcome!\"\nprint(cli.get('/').text)\n```\n\n----------------------------------------\n\nTITLE: FastTags Attribute Handling\nDESCRIPTION: Demonstrates advanced FastTags attribute handling including boolean attributes, special characters, and attribute aliases.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLabel(\n    \"Choose an option\", \n    Select(\n        Option(\"one\", value=\"1\", selected=True),\n        Option(\"two\", value=2, selected=False),\n        cls=\"selector\", id=\"counter\",\n        **{'@click':\"alert('Clicked');\"},\n    ),\n    _for=\"counter\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Ellipse SVG Element\nDESCRIPTION: Creates an SVG ellipse element with support for x and y radius, position, fill and stroke attributes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\n@delegates(ft_svg)\ndef Ellipse(rx, ry, cx=0, cy=0, fill=None, stroke=None, stroke_width=None, **kwargs):\n    \"A standard SVG `ellipse` element\"\n    return ft_svg('ellipse', rx=rx, ry=ry, cx=cx, cy=cy, fill=fill, stroke=stroke, stroke_width=stroke_width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory with Python\nDESCRIPTION: Uses Python's pathlib module to create a new directory for the blog project.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pathlib\npathlib.Path('blog-system').mkdir()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database and Room Dataclass with fast_app Function\nDESCRIPTION: Simplified code using the fast_app function to create a FastHTML app with a SQLite database and Room dataclass in one line, including a render function for the dataclass.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef render(room):\n    return Li(A(room.name, href=f\"/rooms/{room.id}\"))\n\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, pk='id')\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth Dependencies in Python\nDESCRIPTION: Imports necessary modules for OAuth implementation, including FastHTML common utilities, OAuthLib's WebApplicationClient, and URL parsing tools.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom oauthlib.oauth2 import WebApplicationClient\nfrom urllib.parse import urlparse, urlencode, parse_qs, quote, unquote\nimport secrets, httpx\n```\n\n----------------------------------------\n\nTITLE: Implementing DaisyUI Chat Component in HTML\nDESCRIPTION: Example of DaisyUI chat bubble component implementation showing the basic HTML structure for chat messages with avatars, headers, and timestamps.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_167\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chat chat-start\">\n  <div class=\"chat-image avatar\">\n    <div class=\"w-10 rounded-full\">\n      <img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg\" />\n    </div>\n  </div>\n  <div class=\"chat-header\">\n    Obi-Wan Kenobi\n    <time class=\"text-xs opacity-50\">12:45</time>\n  </div>\n  <div class=\"chat-bubble\">You were the Chosen One!</div>\n  <div class=\"chat-footer opacity-50\">\n    Delivered\n  </div>\n</div>\n<div class=\"chat chat-end\">\n  <div class=\"chat-image avatar\">\n    <div class=\"w-10 rounded-full\">\n      <img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg\" />\n    </div>\n  </div>\n  <div class=\"chat-header\">\n    Anakin\n    <time class=\"text-xs opacity-50\">12:46</time>\n  </div>\n  <div class=\"chat-bubble\">I hate you!</div>\n  <div class=\"chat-footer opacity-50\">\n    Seen at 12:46\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying the HTMX Application in Jupyter\nDESCRIPTION: Creates an HTMX callable to display the server's application in an iframe within the Jupyter notebook. This line is commented out in the documentation but can be uncommented to see it in action.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This doesn't display in the docs - uncomment and run it to see it in action\n# HTMX()\n```\n\n----------------------------------------\n\nTITLE: FastTags Basic Usage\nDESCRIPTION: Shows how to use FastTags for HTML generation with positional and named parameters.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntags = Title(\"FastHTML\"), H1(\"My web app\"), P(f\"Let's do this!\", cls=\"myclass\")\ntags\n```\n\n----------------------------------------\n\nTITLE: Importing Stripe Library in Python\nDESCRIPTION: Imports the Stripe library for use in the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport stripe\n```\n\n----------------------------------------\n\nTITLE: Running FastHTML Application\nDESCRIPTION: Command to start the FastHTML web application on localhost:5001.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/concise_guide.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py  # access via localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Using Single Background Task in Starlette\nDESCRIPTION: Demonstrates how to create a background task in Starlette for operations that should continue after the response is sent. This example shows deleting a file asynchronously after responding to the client.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport aiofiles\nfrom starlette.background import BackgroundTask\nfrom starlette.responses import Response\n\naiofiles_remove = aiofiles.os.wrap(os.remove)\n\nasync def del_file(fpath):\n    await aiofiles_remove(fpath)\n\nasync def handler(request):\n    content = \"\"\n    fpath = \"/tmp/tmpfile.txt\"\n    task = BackgroundTask(del_file, fpath=fpath)\n    return Response(content, background=task)\n```\n\n----------------------------------------\n\nTITLE: Adding Save Button to Canvas Interface\nDESCRIPTION: Updates the room route to include a save button that captures the canvas state using Fabric.js and sends it to the server. The button uses HTMX to post the serialized canvas data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_132\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    canvas = Canvas(id=\"canvas\", width=\"800\", height=\"600\")\n    color_picker = Input(type=\"color\", id=\"color-picker\", value=\"#3CDD8C\")\n    brush_size = Input(type=\"range\", id=\"brush-size\", min=\"1\", max=\"50\", value=\"10\")\n    save_button = Button(\"Save Canvas\", id=\"save-canvas\", hx_post=f\"/rooms/{id}/save\", hx_vals=\"js:{canvas_data: JSON.stringify(canvas.toJSON())}\")\n    # ... (rest of the function remains the same)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for FastHTML Components\nDESCRIPTION: Imports necessary modules and classes for FastHTML components, including dataclasses, BeautifulSoup, typing utilities, and fastcore libraries. This establishes the foundation for HTML/HTMX component functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/01_components.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nfrom dataclasses import dataclass, asdict, is_dataclass, make_dataclass, replace, astuple, MISSING\nfrom bs4 import BeautifulSoup, Comment\nfrom typing import Literal, Optional\n\nfrom fastcore.utils import *\nfrom fastcore.xml import *\nfrom fastcore.meta import use_kwargs, delegates\nfrom fastcore.test import *\nfrom fasthtml.core import fh_cfg, unqid\n\nimport types, json\n\ntry: from IPython import display\nexcept ImportError: display=None\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Libraries for Jupyter\nDESCRIPTION: Imports the required FastHTML libraries for use in a Jupyter notebook environment. This includes common utilities and Jupyter-specific modules.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_173\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom fasthtml.jupyter import JupyUvi, HTMX\n```\n\n----------------------------------------\n\nTITLE: Root Path Handler Definition\nDESCRIPTION: Shows how to define the root path handler using the special index function name with the @rt decorator.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_284\n\nLANGUAGE: python\nCODE:\n```\n@rt\ndef index(): return \"welcome!\"\nprint(cli.get('/').text)\n```\n\n----------------------------------------\n\nTITLE: Manual Component Creation Using __getattr__\nDESCRIPTION: Demonstrates how FastHTML's automatic component creation works behind the scenes using Python's __getattr__ method. This approach provides more understanding and control over the component creation process.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport fasthtml\n\nauto_called = fasthtml.components.Some_never_before_used_tag()\nmanual_called = fasthtml.components.__getattr__('Some_never_before_used_tag')()\n\n# Proving they generate the same xml\nassert to_xml(auto_called) == to_xml(manual_called)\n```\n\n----------------------------------------\n\nTITLE: Creating Background Types Enum in Python\nDESCRIPTION: Defines an enumeration of background types for use in UI components, including muted, primary, secondary, and default options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nclass BackgroundT(Enum):\n    muted, primary, secondary, default\n```\n\n----------------------------------------\n\nTITLE: URL Matching Function in Python\nDESCRIPTION: A function to match URLs against a set of patterns, typically used to identify localhost or 127.0.0.1 addresses.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nhttp_patterns = (r'^(localhost|127\\.0\\.0\\.1)(:\\d+)?$',)\ndef url_match(url, patterns=http_patterns):\n    return any(re.match(pattern, url.netloc.split(':')[0]) for pattern in patterns)\n```\n\n----------------------------------------\n\nTITLE: Complete FastHTML Drawing Application\nDESCRIPTION: Full implementation of a drawing application including room creation, routing, and database operations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_129\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom datetime import datetime\n\ndef render(room):\n    return Li(A(room.name, href=f\"/rooms/{room.id}\"))\n\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, pk='id')\n\n@rt(\"/\")\ndef get():\n    create_room = Form(Input(id=\"name\", name=\"name\", placeholder=\"New Room Name\"),\n                       Button(\"Create Room\"),\n                       hx_post=\"/rooms\", hx_target=\"#rooms-list\", hx_swap=\"afterbegin\")\n    rooms_list = Ul(*rooms(order_by='id DESC'), id='rooms-list')\n    return Titled(\"DrawCollab\", create_room, rooms_list)\n\n@rt(\"/rooms\")\nasync def post(room:Room):\n    room.created_at = datetime.now().isoformat()\n    return rooms.insert(room)\n\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    return Titled(f\"Room: {room.name}\", H1(f\"Welcome to {room.name}\"), A(Button(\"Leave Room\"), href=\"/\"))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Test Request Factory Function\nDESCRIPTION: Implements a function to create test HTTP requests with customizable URLs, headers, and methods for testing purposes.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_request(url: str='/', headers: dict={}, method: str='get') -> Request:\n    scope = {\n        'type': 'http',\n        'method': method,\n        'path': url,\n        'headers': Headers(headers).raw,\n        'query_string': b'',\n        'scheme': 'http',\n        'client': ('127.0.0.1', 8000),\n        'server': ('127.0.0.1', 8000),\n    }\n    receive = lambda: {\"body\": b\"\", \"more_body\": False}\n    return Request(scope, receive)\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn with Reloading Enabled\nDESCRIPTION: This command runs the Uvicorn server with reloading enabled, which is necessary for live reloading to work in conjunction with FastHTMLWithLiveReload.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/live_reload.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Dictionary Form Data Handling\nDESCRIPTION: Shows how to handle form data as a dictionary.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/bodied/\")\ndef bodied(data:dict): return data\n\nd = dict(a=1, b='foo')\nprint(cli.post('/bodied/', data=d).text)\n```\n\n----------------------------------------\n\nTITLE: Another NotFoundError Example in Delete Operation\nDESCRIPTION: Provides another example of attempting to delete a non-existent record, reinforcing the error handling pattern for such cases.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_219\n\nLANGUAGE: python\nCODE:\n```\ntry: users.delete('John')\nexcept NotFoundError: print('User not found')\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Compound Primary Key in FastHTML MiniDataAPI\nDESCRIPTION: Demonstrates deleting a record that has a compound primary key. The entire key must be provided as a list or tuple in the correct order.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_220\n\nLANGUAGE: python\nCODE:\n```\npublications.delete(['Alma' , 2035])\n```\n\n----------------------------------------\n\nTITLE: Initializing GitHubAppClient for OAuth in Python\nDESCRIPTION: Creates a GitHubAppClient object using client ID and secret for handling OAuth communication with GitHub. It's recommended to store these credentials in environment variables.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_243\n\nLANGUAGE: python\nCODE:\n```\nclient = GitHubAppClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\"\n)\n```\n\n----------------------------------------\n\nTITLE: Code Highlighting in FastHTML\nDESCRIPTION: Partial example showing how to implement code highlighting in FastHTML without using Markdown configuration. The example is incomplete in the original content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/quickstart_for_web_devs.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a User Record by Primary Key in FastHTML\nDESCRIPTION: Demonstrates how to query a single record from the 'users' table by its primary key ID, returning a User object with properties like id, name, and active status.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nusers[user.id]\n```\n\n----------------------------------------\n\nTITLE: Rendering FT Components as XML in Python\nDESCRIPTION: Demonstrates how FT components are rendered as XML/HTML when returned from a Python function. This example shows the output of the previously defined 'example()' function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_182\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"go\">\n  <h1>FastHTML APP</h1>\n  <p>Let&#x27;s do this</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Update Failures on Filtered-Out Records in MiniDataAPI\nDESCRIPTION: Demonstrates how attempting to update a record that doesn't match the filter criteria raises a NotFoundError.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_231\n\nLANGUAGE: python\nCODE:\n```\ntry: todos.update(Todo(id=1, title='Finish MiniDataAPI Spec', status='closed', name='Braden'))\nexcept NotFoundError as e: print('Record not updated')\n```\n\n----------------------------------------\n\nTITLE: Date Parsing Function\nDESCRIPTION: Implements a utility function to parse string dates into datetime objects using dateutil parser.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef parsed_date(s:str):\n    \"Convert `s` to a datetime\"\n    return dtparse.parse(s)\n```\n\n----------------------------------------\n\nTITLE: Defining Link Styles Enum in Python\nDESCRIPTION: Creates an enumeration of link styles from Franken UI, including muted, text, reset, primary, and classic options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nclass AT(Enum):\n    muted, text, reset, primary, classic\n```\n\n----------------------------------------\n\nTITLE: Setting Default Export in Python Notebook\nDESCRIPTION: Sets the default export for the notebook to 'js', which indicates this notebook contains JavaScript-related functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| default_exp js\n```\n\n----------------------------------------\n\nTITLE: Complete FastHTML Python Application for Drawing with Canvas Saving\nDESCRIPTION: Full implementation of the drawing application, including room creation, canvas drawing, and data persistence.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom datetime import datetime\n\ndef render(room):\n    return Li(A(room.name, href=f\"/rooms/{room.id}\"))\n\napp,rt,rooms,Room = fast_app('data/drawapp.db', render=render, id=int, name=str, created_at=str, canvas_data=str, pk='id')\n\n@rt(\"/\")\ndef get():\n    create_room = Form(Input(id=\"name\", name=\"name\", placeholder=\"New Room Name\"),\n                       Button(\"Create Room\"),\n                       hx_post=\"/rooms\", hx_target=\"#rooms-list\", hx_swap=\"afterbegin\")\n    rooms_list = Ul(*rooms(order_by='id DESC'), id='rooms-list')\n    return Titled(\"QuickDraw\", \n                  create_room, rooms_list)\n\n@rt(\"/rooms\")\nasync def post(room:Room):\n    room.created_at = datetime.now().isoformat()\n    return rooms.insert(room)\n\n@rt(\"/rooms/{id}\")\nasync def get(id:int):\n    room = rooms[id]\n    canvas = Canvas(id=\"canvas\", width=\"800\", height=\"600\")\n    color_picker = Input(type=\"color\", id=\"color-picker\", value=\"#000000\")\n    brush_size = Input(type=\"range\", id=\"brush-size\", min=\"1\", max=\"50\", value=\"10\")\n    save_button = Button(\"Save Canvas\", id=\"save-canvas\", hx_post=f\"/rooms/{id}/save\", hx_vals=\"js:{canvas_data: JSON.stringify(canvas.toJSON())}\")\n\n    js = f\"\"\"\n    var canvas = new fabric.Canvas('canvas');\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = '#000000';\n    canvas.freeDrawingBrush.width = 10;\n\n    // Load existing canvas data\n    fetch(`/rooms/{id}/load`)\n    .then(response => response.json())\n    .then(data => {{\n        if (data && Object.keys(data).length > 0) {{\n            canvas.loadFromJSON(data, canvas.renderAll.bind(canvas));\n        }}\n    }});\n    \n    document.getElementById('color-picker').onchange = function() {{\n        canvas.freeDrawingBrush.color = this.value;\n    }};\n    \n    document.getElementById('brush-size').oninput = function() {{\n        canvas.freeDrawingBrush.width = parseInt(this.value, 10);\n    }};\n    \"\"\"\n    \n    return Titled(f\"Room: {room.name}\",\n                  A(Button(\"Leave Room\"), href=\"/\"),\n                  canvas,\n                  Div(color_picker, brush_size, save_button),\n                  Script(src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js\"),\n                  Script(js))\n\n@rt(\"/rooms/{id}/save\")\nasync def post(id:int, canvas_data:str):\n    rooms.update({'canvas_data': canvas_data}, id)\n    return \"Canvas saved successfully\"\n\n@rt(\"/rooms/{id}/load\")\nasync def get(id:int):\n    room = rooms[id]\n    return room.canvas_data if room.canvas_data else \"{}\"\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Creating Button Styles Enum in Python\nDESCRIPTION: Defines an enumeration of button styles for use with Franken UI, including various sizes and types like ghost, primary, and secondary.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\nclass ButtonT(Enum):\n    default, ghost, primary, secondary, destructive, text, link, xs, sm, lg, xl, icon\n```\n\n----------------------------------------\n\nTITLE: Installing FastHTML with pip\nDESCRIPTION: Command to install the FastHTML framework using pip package manager. This is required before starting the project.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/e2e.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-fasthtml\n```\n\n----------------------------------------\n\nTITLE: Form Item Extraction Function\nDESCRIPTION: Extracts a single item or list of items from a form based on a key.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef _formitem(form, k):\n    \"Return single item `k` from `form` if len 1, otherwise return list\"\n    if isinstance(form, dict): return form.get(k)\n    o = form.getlist(k)\n    return o[0] if len(o) == 1 else o if o else None\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Post Files\nDESCRIPTION: Code to delete all the test post files after they're no longer needed.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor p in posts.ls(): p.unlink()\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Details Component\nDESCRIPTION: Creates a utility component for clearing todo details using HTMX out-of-band swaps.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\ndef clr_details(): return Div(hx_swap_oob='innerHTML', id='current-todo')\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Python using MiniDataAPI\nDESCRIPTION: Demonstrates how to delete records from a database table using the primary key. It also shows error handling for non-existent records and deleting with compound primary keys.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nusers.delete('Charlie')\n```\n\nLANGUAGE: python\nCODE:\n```\ntry: users.delete('Charlies')\nexcept NotFoundError: print('User not found')\n```\n\nLANGUAGE: python\nCODE:\n```\ntry: users.delete('John')\nexcept NotFoundError: print('User not found')\n```\n\nLANGUAGE: python\nCODE:\n```\npublications.delete(['Alma' , 2035])\n```\n\n----------------------------------------\n\nTITLE: Type Casting Function for Annotations\nDESCRIPTION: Creates a callable type for casting strings to specified types, handling Union types and lists.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef _fix_anno(t, o):\n    \"Create appropriate callable type for casting a `str` to type `t` (or first type in `t` if union)\"\n    origin = get_origin(t)\n    if origin is Union or origin is UnionType or origin in (list,List):\n        t = first(o for o in get_args(t) if o!=type(None))\n    d = {bool: str2bool, int: str2int, date: str2date, UploadFile: noop}\n    res = d.get(t, t)\n    if origin in (list,List): return _mk_list(res, o)\n    if not isinstance(o, (str,list,tuple)): return o\n    return res(o[-1]) if isinstance(o,(list,tuple)) else res(o)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Light Media Query Function\nDESCRIPTION: Demonstrates how to use the light_media function to apply a green text color to body elements in light mode.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlight_media('.body {color: green;}')\n```\n\n----------------------------------------\n\nTITLE: Streaming Response with Async Generator\nDESCRIPTION: Shows how to implement a streaming response using an async generator to stream HTML content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import StreamingResponse\nimport asyncio\n\n\nasync def slow_numbers(minimum, maximum):\n    yield '<html><body><ul>'\n    for number in range(minimum, maximum + 1):\n        yield '<li>%d</li>' % number\n        await asyncio.sleep(0.5)\n    yield '</ul></body></html>'\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    generator = slow_numbers(1, 10)\n    response = StreamingResponse(generator, media_type='text/html')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple IDs for Existence in Filtered MiniDataAPI Table\nDESCRIPTION: Demonstrates how IDs that don't match the filter criteria return False when checked with the 'in' operator.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_229\n\nLANGUAGE: python\nCODE:\n```\n1 in todos, 2 in todos\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Libraries for Jupyter\nDESCRIPTION: Imports the necessary FastHTML libraries for use in Jupyter notebooks, including the common module and Jupyter-specific components like JupyUvi and HTMX.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/tutorials/jupyter_and_fasthtml.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom fasthtml.jupyter import JupyUvi, HTMX\n```\n\n----------------------------------------\n\nTITLE: Setting Htmx Configuration Via Meta Tag\nDESCRIPTION: Example of how to set Htmx configuration options declaratively using a meta tag with JSON content.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\n----------------------------------------\n\nTITLE: Checking Port Availability\nDESCRIPTION: Defines 'is_port_free' function to check if a given port is free on a specified host.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/06_jupyter.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef is_port_free(port, host='localhost'):\n    \"Check if `port` is free on `host`\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.bind((host, port))\n        return True\n    except OSError: return False\n    finally: sock.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Reordering Handler\nDESCRIPTION: Handles todo list reordering through HTMX POST requests, updating priority values in database.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/reorder\")\ndef post(id:list[int]):\n    for i,id_ in enumerate(id): todos.update({'priority':i}, id_)\n    return tuple(todos(order_by='priority'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Sizes Enum in Python\nDESCRIPTION: Defines an enumeration of container sizes from Franken UI, including extra small, small, large, and extra large options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\nclass ContainerT(Enum):\n    xs, sm, lg, xl, expand\n```\n\n----------------------------------------\n\nTITLE: Verifying Session Response in FastHTML\nDESCRIPTION: Hidden test code to assert that the session retrieval endpoint returns a successful HTTP 200 status code.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n#| hide\nassert cli.get('/getsess').status_code==200\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Stripe Integration in Python\nDESCRIPTION: Imports necessary modules from fasthtml.common and the os library for environment variable access.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nimport os\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Webhook Secret from Environment Variable in Python\nDESCRIPTION: Retrieves the Stripe webhook secret from an environment variable for use in the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nWEBHOOK_SECRET = os.getenv(\"STRIPE_LOCAL_TEST_WEBHOOK_SECRET\")\n```\n\n----------------------------------------\n\nTITLE: Common Module Import for FastHTML\nDESCRIPTION: Imports common functionality from the fasthtml package. This is a hidden import that provides necessary components for the examples.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| hide\nfrom fasthtml.common import *\n```\n\n----------------------------------------\n\nTITLE: Custom Class Form Handling\nDESCRIPTION: Shows how to use custom classes for structured form data.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nclass Bodie2:\n    a:int|None; b:str\n    def __init__(self, a, b='foo'): store_attr()\n\n@app.post(\"/bodie2/\")\ndef bodie(d:Bodie2): return f\"a: {d.a}; b: {d.b}\"\nprint(cli.post('/bodie2/', data={'a':1}).text)\n```\n\n----------------------------------------\n\nTITLE: Annotation Extraction Function\nDESCRIPTION: Extracts annotations from a class or namedtuple, handling both standard classes and namedtuples.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef _annotations(anno):\n    \"Same as `get_annotations`, but also works on namedtuples\"\n    if is_namedtuple(anno): return {o:str for o in anno._fields}\n    return get_annotations(anno)\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Approach with Namespace\nDESCRIPTION: Shows how to use FastHTML with a defined namespace instead of wildcard imports.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml import common as fh\n\n\napp, rt = fh.fast_app()  \n\n@rt(\"/\") \ndef get():\n    return fh.Titled(\"FastHTML\", fh.P(\"Let's do this!\")) \n\nfh.serve()\n```\n\n----------------------------------------\n\nTITLE: Redirect Response Implementation\nDESCRIPTION: Demonstrates how to create a redirect response with conditional routing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse, RedirectResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    if scope['path'] != '/':\n        response = RedirectResponse(url='/')\n    else:\n        response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Setting Up TestClient for FastHTML Testing\nDESCRIPTION: Importing Starlette's TestClient for testing FastHTML applications without starting a server.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\n```\n\n----------------------------------------\n\nTITLE: Making Test GET Request\nDESCRIPTION: Simulating a GET request to the '/hi' route using the test client and accessing the response text.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncli.get('/hi').text\n```\n\n----------------------------------------\n\nTITLE: Creating Favicon Links in Python\nDESCRIPTION: Creates link elements for light and dark favicons for use in HTML, tailored to the user's preferred color scheme. Provides an easy means to set favicons.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef Favicon(light_icon, dark_icon):\n    \"Light and dark favicon headers\"\n    return (Link(rel='icon', type='image/x-ico', href=light_icon, media='(prefers-color-scheme: light)'),\n            Link(rel='icon', type='image/x-ico', href=dark_icon, media='(prefers-color-scheme: dark)'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record with Compound Primary Key (List Format)\nDESCRIPTION: Demonstrates retrieving a record using a compound primary key provided as a list. This is used for tables with multiple primary key fields.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/minidataapi.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npublications[['Alma', 2019]]\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Webhook Secret as Environment Variable\nDESCRIPTION: Bash command to set the Stripe webhook secret as an environment variable for local development.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport STRIPE_LOCAL_TEST_WEBHOOK_SECRET=<your-secret>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMX for Jupyter\nDESCRIPTION: JavaScript code to configure HTMX requests to work within the Jupyter notebook environment by modifying request paths.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('htmx:configRequest', (event) => {\n    if(event.detail.path.includes('://')) return;\n    htmx.config.selfRequestsOnly=false;\n    event.detail.path = `${location.protocol}//${location.hostname}:8000${event.detail.path}`;\n});\n```\n\n----------------------------------------\n\nTITLE: HTMX Header Conversion Function\nDESCRIPTION: Converts a string to an HTMX header format.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef _to_htmx_header(s):\n    return 'HX-' + s.replace('_', '-').title()\n\nhtmx_resps = dict(location=None, push_url=None, redirect=None, refresh=None, replace_url=None,\n                 reswap=None, retarget=None, reselect=None, trigger=None, trigger_after_settle=None, trigger_after_swap=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClient in FastHTML\nDESCRIPTION: Sets up TestClient for testing FastHTML applications with HTMX requests.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\n\npath = \"/profile?email=john@example.com\"\nclient = TestClient(app)\nhtmx_req = {'HX-Request':'1'}\nprint(client.get(path, headers=htmx_req).text)\n```\n\n----------------------------------------\n\nTITLE: Creating Route Decorator Alias\nDESCRIPTION: Assigning the app.route decorator to a shorter variable name 'rt' for convenience in route registration throughout the application.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrt = app.route\n```\n\n----------------------------------------\n\nTITLE: Verifying Static File Serving in FastHTML\nDESCRIPTION: Hidden test code to verify that the README.md file is served correctly with content starting with '# FastHTML'.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n#| hide\nassert cli.get('/README.md').text[:10] == '# FastHTML'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code in Starlette Response\nDESCRIPTION: How to return a response with a custom HTTP status code in Starlette.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nreturn Response(content, statu_code=404)\n```\n\n----------------------------------------\n\nTITLE: Constraining Database Access with .xtra() in MiniDataAPI\nDESCRIPTION: Sets a filter using the .xtra() method to constrain database operations to only records with the name 'Charlie'.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_225\n\nLANGUAGE: python\nCODE:\n```\ntodos.xtra(name='Charlie')\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Variables in SQL-first Design\nDESCRIPTION: Sets up initial variables for SQL-first design pattern in MiniDataAPI.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_237\n\nLANGUAGE: python\nCODE:\n```\nusers = None\nUser = None\n```\n\n----------------------------------------\n\nTITLE: Displaying HTMX API Reference Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing HTMX JavaScript API methods and properties. Each row contains a method or property name with a link to its detailed documentation, along with a brief description of its functionality.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Description |\n|-------|-------------|\n| [`htmx.addClass()`](@/api.md#addClass)  | Adds a class to the given element\n| [`htmx.ajax()`](@/api.md#ajax)  | Issues an htmx-style ajax request\n| [`htmx.closest()`](@/api.md#closest)  | Finds the closest parent to the given element matching the selector\n| [`htmx.config`](@/api.md#config)  | A property that holds the current htmx config object\n| [`htmx.createEventSource`](@/api.md#createEventSource)  | A property holding the function to create SSE EventSource objects for htmx\n| [`htmx.createWebSocket`](@/api.md#createWebSocket)  | A property holding the function to create WebSocket objects for htmx\n| [`htmx.defineExtension()`](@/api.md#defineExtension)  | Defines an htmx [extension](https://htmx.org/extensions)\n| [`htmx.find()`](@/api.md#find)  | Finds a single element matching the selector\n| [`htmx.findAll()` `htmx.findAll(elt, selector)`](@/api.md#find)  | Finds all elements matching a given selector\n| [`htmx.logAll()`](@/api.md#logAll)  | Installs a logger that will log all htmx events\n| [`htmx.logger`](@/api.md#logger)  | A property set to the current logger (default is `null`)\n| [`htmx.off()`](@/api.md#off)  | Removes an event listener from the given element\n| [`htmx.on()`](@/api.md#on)  | Creates an event listener on the given element, returning it\n| [`htmx.onLoad()`](@/api.md#onLoad)  | Adds a callback handler for the `htmx:load` event\n| [`htmx.parseInterval()`](@/api.md#parseInterval)  | Parses an interval declaration into a millisecond value\n| [`htmx.process()`](@/api.md#process)  | Processes the given element and its children, hooking up any htmx behavior\n| [`htmx.remove()`](@/api.md#remove)  | Removes the given element\n| [`htmx.removeClass()`](@/api.md#removeClass)  | Removes a class from the given element\n| [`htmx.removeExtension()`](@/api.md#removeExtension)  | Removes an htmx [extension](https://htmx.org/extensions)\n| [`htmx.swap()`](@/api.md#swap)  | Performs swapping (and settling) of HTML content\n| [`htmx.takeClass()`](@/api.md#takeClass)  | Takes a class from other elements for the given element\n| [`htmx.toggleClass()`](@/api.md#toggleClass)  | Toggles a class from the given element\n| [`htmx.trigger()`](@/api.md#trigger)  | Triggers an event on an element\n| [`htmx.values()`](@/api.md#values)  | Returns the input values associated with the given element\n```\n\n----------------------------------------\n\nTITLE: Running a FastHTML Application\nDESCRIPTION: Terminal output when running a FastHTML application, showing the server starting and listening on port 5001.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: shellscript\nCODE:\n```\npython minimal.py \nLink: http://localhost:5001\nINFO:     Will watch for changes in these directories: ['/Users/pydanny/projects/blog-system']\nINFO:     Uvicorn running on http://0.0.0.0:5001 (Press CTRL+C to quit)\nINFO:     Started reloader process [46572] using WatchFiles\nINFO:     Started server process [46576]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Constraining Queries with xtra() Method in FastHTML\nDESCRIPTION: Shows how to use the xtra() method to automatically constrain queries, updates, and inserts based on specified criteria. In this example, it filters for only active users.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nusers.xtra(active=True)\nusers()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Payment Database (Python)\nDESCRIPTION: This code connects to a SQLite database for storing payment information. It creates a table based on the Payment schema defined earlier.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndb = Database(\"stripe_payments.db\")\npayments = db.create(Payment, pk='checkout_session_id', transform=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Pico.css Components in Python\nDESCRIPTION: Imports necessary modules and functions for creating Pico.css components. Dependencies include fastcore utilities, XML handling, and fasthtml components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/04_pico.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nfrom typing import Any\n\nfrom fastcore.utils import *\nfrom fastcore.xml import *\nfrom fastcore.meta import use_kwargs, delegates\nfrom fasthtml.components import *\nfrom fasthtml.xtend import *\n\ntry: from IPython import display\nexcept ImportError: display=None\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Python Class in FastHTML MiniDataAPI\nDESCRIPTION: Demonstrates how to add a new record to the database using a Python class instance. Returns the newly created record.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_197\n\nLANGUAGE: python\nCODE:\n```\nusers.insert(User(name='Braden', email='b@example.com', year_started=2018))\n```\n\n----------------------------------------\n\nTITLE: Handling NotFoundError in Square Bracket Search\nDESCRIPTION: Demonstrates error handling when a record with the specified primary key doesn't exist. Uses a try-except block to catch the NotFoundError and provide a user-friendly message.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_203\n\nLANGUAGE: python\nCODE:\n```\ntry: users['David']\nexcept NotFoundError: print(f'User not found')\n```\n\n----------------------------------------\n\nTITLE: Custom Tag with @ Symbol\nDESCRIPTION: Example of creating an HTML tag containing special characters like @ symbol\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_271\n\nLANGUAGE: python\nCODE:\n```\ndef tag_with_AtSymbol(*c, target_id=None, **kwargs): \n    return ft_hx('tag-with-@symbol', *c, target_id=target_id, **kwargs)\n\ntag_with_AtSymbol()\n```\n\n----------------------------------------\n\nTITLE: HTML Link Tag for PicoCSS\nDESCRIPTION: HTML example showing how to include the PicoCSS library via a link tag in the HTML header.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_148\n\nLANGUAGE: html\nCODE:\n```\n<header>\n    ...\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@latest/css/pico.min.css\">\n</header>\n```\n\n----------------------------------------\n\nTITLE: Square Bracket Search with Numeric Primary Key\nDESCRIPTION: Shows how to retrieve a record using a numeric primary key with square bracket notation. Works the same way as with string keys.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_204\n\nLANGUAGE: python\nCODE:\n```\ntodos[1]\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator with Compound Primary Key (List)\nDESCRIPTION: Demonstrates checking for the existence of a record with a compound primary key using a list notation with the 'in' operator.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_222\n\nLANGUAGE: python\nCODE:\n```\n['Alma', 2019] in  publications\n```\n\n----------------------------------------\n\nTITLE: Installing FastHTML with pip\nDESCRIPTION: Command to install the FastHTML Python library using pip package manager.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/index.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install python-fasthtml\n```\n\n----------------------------------------\n\nTITLE: SVG Element Creation Functions\nDESCRIPTION: Collection of functions for creating SVG elements with default attributes and proper XML namespace. Includes basic shapes like rectangles, circles, lines and text elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\n@delegates(ft_svg)\ndef Rect(width, height, x, y, fill, stroke, stroke_width, rx, ry, **kwargs)\ndef Circle(r, cx, cy, fill, stroke, stroke_width, **kwargs)\ndef Line(x1, y1, x2, y2, stroke, w, stroke_width, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Element Functions Dynamically\nDESCRIPTION: Dynamically creates function references for all SVG elements listed in _all_ using partial application of ft_hx with properly formatted element names.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\ng = globals()\nfor o in _all_: g[o] = partial(ft_hx, o[0].lower() + o[1:])\n```\n\n----------------------------------------\n\nTITLE: Defining Divider Styles Enum in Python\nDESCRIPTION: Creates an enumeration of divider styles from Franken UI, including icon, small, and vertical options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\nclass DividerT(Enum):\n    icon, sm, vertical\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Path Parameters\nDESCRIPTION: Shows automatic type conversion of path parameters using type annotations.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_290\n\nLANGUAGE: python\nCODE:\n```\n@rt('/html/{idx}')\ndef get(idx:int): return Body(H4(f'Next is {idx+1}.'))\nprint(cli.get('/html/1', **hxhdr).text)\n```\n\n----------------------------------------\n\nTITLE: Defining Marked.js Import and NPM CDN URL\nDESCRIPTION: Sets up the import string for the Marked.js library from a CDN and defines a base NPM CDN URL for later use with other libraries.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#| export\nmarked_imp = \"\"\"import { marked } from \"https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js\";\n\"\"\"\nnpmcdn = 'https://cdn.jsdelivr.net/npm/'\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Account Management Page in Python\nDESCRIPTION: This function generates an account management page displaying the user's payment history and providing options to request refunds for eligible payments. It uses HTMX for dynamic updates.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@rt(\"/account\")\ndef account_management(sess):\n    user_email = sess['auth']\n    user_payments = payments(\"email=?\", (user_email,))\n    # Create table rows for each payment\n    payment_rows = []\n    for payment in user_payments:\n        action_button = \"\"\n        if payment.payment_status == 'paid':\n            action_button = Button(\"Request Refund\", hx_post=f\"/refund?checkout_sid={payment.checkout_session_id}\",hx_target=\"#refund-status\")\n        elif payment.payment_status == 'refunded': action_button = \"Refunded\"\n        \n        # Add row to table\n        payment_rows.append(\n            Tr(*map(Td, (payment.created_at, payment.amount, payment.payment_status, action_button))))\n    \n    # Create payment history table\n    payment_history = Table(\n        Thead(Tr(*map(Th, (\"Date\", \"Amount\", \"Status\", \"Action\")))),\n        Tbody(*payment_rows))\n    \n    return Titled(\n        \"Account Management\",\n        Div(H2(f\"Account: {user_email}\"),\n            H3(\"Payment History\"),\n            payment_history,\n            Div(id=\"refund-status\"),  # Target for refund status messages\n            A(\"Back to Home\", href=\"/\")))\n```\n\n----------------------------------------\n\nTITLE: Setting File Path for KaTeX JavaScript\nDESCRIPTION: Sets the file path for the KaTeX JavaScript implementation that will be used in the KatexMarkdownJS function.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/03_js.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n__file__ = '../../fasthtml/katex.js'\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Common Module\nDESCRIPTION: Basic import of the FastHTML common module containing essential components for FastHTML applications.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/routes.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex FT Component as XML in Python\nDESCRIPTION: Shows the XML output of the complex FT component defined in the previous example. This demonstrates how various attributes and nested elements are rendered in the final HTML/XML output.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_186\n\nLANGUAGE: xml\nCODE:\n```\n<label for=\"counter\">\nChoose an option\n  <select id=\"counter\" @click=\"alert(&#x27;Clicked&#x27;);\" class=\"selector\" name=\"counter\">\n    <option value=\"1\" selected>one</option>\n    <option value=\"2\" >two</option>\n    <option value=\"3\">three</option>\n  </select>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Types Enum in Python\nDESCRIPTION: Creates an enumeration of navigation types for use in UI components, including default, primary, and secondary options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\nclass NavT(Enum):\n    default, primary, secondary\n```\n\n----------------------------------------\n\nTITLE: Implementing List Styles Enum in Python\nDESCRIPTION: Defines an enumeration of list styles using Tailwind CSS classes, including various bullet types and list appearances.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\nclass ListT(Enum):\n    disc, circle, square, decimal, hyphen, bullet, divider, striped\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing Fragment Instances in Python\nDESCRIPTION: Creates an instance of the Fragment class with two paragraph elements and converts it to XML format for output.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/02_xtend.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfts = Fragment(P('1st'), P('2nd'))\nprint(to_xml(fts))\n```\n\n----------------------------------------\n\nTITLE: Installing FastHTML with pip\nDESCRIPTION: Command to install the FastHTML Python package using pip.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\npip install python-fasthtml\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Python SDK via pip\nDESCRIPTION: Command to install the Stripe Python SDK using pip package manager.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/explains/Stripe.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install stripe\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for FastHTML Application\nDESCRIPTION: Importing necessary modules and packages for a FastHTML application, including the FastHTML core components and typing utilities.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/handlers.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\nfrom collections import namedtuple\nfrom typing import TypedDict\nfrom datetime import datetime\nimport json,time\n```\n\n----------------------------------------\n\nTITLE: Creating Tags with Underscores\nDESCRIPTION: Demonstrates how to create HTML tags that contain underscores, which FastHTML normally converts to hyphens. This is useful for rare cases where actual underscores are needed in tag names.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/ref/defining_xt_component.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef tag_with_underscores(*c, target_id=None, **kwargs): \n    return ft_hx('tag_with_underscores', *c, target_id=target_id, **kwargs)\n\ntag_with_underscores()\n\n```\n\n----------------------------------------\n\nTITLE: List Type Conversion Utility\nDESCRIPTION: Implements a utility function for converting values to lists of specified types.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef _mk_list(t, v): return [t(o) for o in listify(v)]\n```\n\n----------------------------------------\n\nTITLE: String Converter Configuration\nDESCRIPTION: Modified StringConvertor implementation for path handling without requiring non-empty values\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.convertors import StringConvertor\n\nStringConvertor.regex = \"[^/]*\"  # `+` replaced with `*`\n\n@patch\ndef to_string(self:StringConvertor, value: str) -> str:\n    value = str(value)\n    assert \"/\" not in value, \"May not contain path separators\"\n    return value\n```\n\n----------------------------------------\n\nTITLE: Attempting to Override Filter Field Values in MiniDataAPI\nDESCRIPTION: Shows how attempting to change a filter field value is ignored when the record is updated.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_236\n\nLANGUAGE: python\nCODE:\n```\nct.name = 'Braden'\ntodos.update(ct)\n```\n\n----------------------------------------\n\nTITLE: Importing FastHTML Base Package\nDESCRIPTION: Basic import statement for FastHTML common package that includes all key symbols from FastHTML and Starlette\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n```\n\n----------------------------------------\n\nTITLE: String Case Conversion Utility\nDESCRIPTION: Implements a function to convert snake_case strings to hyphenated format with capitalization.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef snake2hyphens(s:str):\n    \"Convert `s` from snake case to hyphenated and capitalised\"\n    s = snake2camel(s)\n    return camel2words(s, '-')\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for FastHTML Documentation Site\nDESCRIPTION: This robots.txt configuration allows all user agents to access the entire site and specifies the location of the sitemap for improved crawling and indexing.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\nSitemap: https://docs.fastht.ml/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Declaring Available SVG Element Types\nDESCRIPTION: Defines a list of all SVG element types that will be made available in the module, covering the full range of SVG specification elements.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#| export\n_all_ = ['AltGlyph', 'AltGlyphDef', 'AltGlyphItem', 'Animate', 'AnimateColor', 'AnimateMotion', 'AnimateTransform', 'ClipPath', 'Color_profile', 'Cursor', 'Defs', 'Desc', 'FeBlend', 'FeColorMatrix', 'FeComponentTransfer', 'FeComposite', 'FeConvolveMatrix', 'FeDiffuseLighting', 'FeDisplacementMap', 'FeDistantLight', 'FeFlood', 'FeFuncA', 'FeFuncB', 'FeFuncG', 'FeFuncR', 'FeGaussianBlur', 'FeImage', 'FeMerge', 'FeMergeNode', 'FeMorphology', 'FeOffset', 'FePointLight', 'FeSpecularLighting', 'FeSpotLight', 'FeTile', 'FeTurbulence', 'Filter', 'Font', 'Font_face', 'Font_face_format', 'Font_face_name', 'Font_face_src', 'Font_face_uri', 'ForeignObject', 'G', 'Glyph', 'GlyphRef', 'Hkern', 'Image', 'LinearGradient', 'Marker', 'Mask', 'Metadata', 'Missing_glyph', 'Mpath', 'Pattern', 'RadialGradient', 'Set', 'Stop', 'Switch', 'Symbol', 'TextPath', 'Tref', 'Tspan', 'Use', 'View', 'Vkern', 'Template']\n```\n\n----------------------------------------\n\nTITLE: Parameters Utility Function\nDESCRIPTION: Defines utility functions for handling function parameters and empty parameter values.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#| export\ndef _params(f): return signature_ex(f, True).parameters\n\nempty = Parameter.empty\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Module Exports\nDESCRIPTION: Sets up the module exports and imports necessary dependencies from FastCore, FastHTML's common utilities, components, and extensions.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/05_svg.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nfrom fastcore.utils import *\nfrom fastcore.meta import delegates\nfrom fastcore.xml import FT\nfrom fasthtml.common import *\nfrom fasthtml.components import *\nfrom fasthtml.xtend import *\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for FastHTML Core\nDESCRIPTION: Imports required packages and modules for FastHTML core functionality including typing, datetime handling, and ASGI components.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/00_core.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| export\nimport json,uuid,inspect,types,signal,asyncio,threading,inspect\n\nfrom fastcore.utils import *\nfrom fastcore.xml import *\nfrom fastcore.meta import use_kwargs_dict\n\nfrom types import UnionType, SimpleNamespace as ns, GenericAlias\nfrom typing import Optional, get_type_hints, get_args, get_origin, Union, Mapping, TypedDict, List, Any\nfrom datetime import datetime,date\nfrom dataclasses import dataclass,fields\nfrom collections import namedtuple\nfrom inspect import isfunction,ismethod,Parameter,get_annotations\nfrom functools import wraps, partialmethod, update_wrapper\nfrom http import cookies\nfrom urllib.parse import urlencode, parse_qs, quote, unquote\nfrom copy import copy,deepcopy\nfrom warnings import warn\nfrom dateutil import parser as dtparse\nfrom httpx import ASGITransport, AsyncClient\nfrom anyio import from_thread\nfrom uuid import uuid4\nfrom base64 import b85encode,b64encode\n\nfrom fasthtml.starlette import *\n```\n\n----------------------------------------\n\nTITLE: Inserting a Record with Automatic Filter Field Assignment\nDESCRIPTION: Demonstrates how inserted records automatically inherit the filter field values set by .xtra().\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_235\n\nLANGUAGE: python\nCODE:\n```\nct = todos.insert(Todo(title='Rewrite personal site in FastHTML', status='open'))\nct\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Complete changelog entries documenting the evolution of FastHTML framework features and fixes\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### New Features\n\n- Support `dict` value in `hx_vals` ([#288](https://github.com/AnswerDotAI/fasthtml/issues/288))\n- Add `sess_cls` param to `FastHTML` ([#284](https://github.com/AnswerDotAI/fasthtml/issues/284))\n- Make `index` a special handler name for path \"/\" get request ([#274](https://github.com/AnswerDotAI/fasthtml/issues/274))\n- Use `run_in_threadpool` for non-async handlers ([#270](https://github.com/AnswerDotAI/fasthtml/issues/270))\n- Enhance LaTeX rendering in Markdown with support for environments ([#269](https://github.com/AnswerDotAI/fasthtml/pull/269))\n```\n\n----------------------------------------\n\nTITLE: Session Data in WebSockets with FastHTML\nDESCRIPTION: Demonstrates how to access session data in WebSocket handlers, showing that session data is shared between HTTP routes and WebSockets.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_262\n\nLANGUAGE: python\nCODE:\n```\nfrom fasthtml.common import *\n\napp = FastHTML(exts='ws')\nrt = app.route\n\n@rt('/login')\ndef get(session):\n    session[\"person\"] = \"Bob\"\n    return \"ok\"\n\n@app.ws('/ws')\nasync def ws(msg:str, send, session):\n    await send(Div(f'Hello {session.get(\"person\")}' + msg, id='notifications'))\n\nserve()\n```\n\n----------------------------------------\n\nTITLE: Disabling PyLance for FastHTML in JSON\nDESCRIPTION: Shows a JSON configuration to completely disable PyLance analysis for FastHTML projects in Visual Studio Code. This is useful if you're still experiencing false errors after applying the previous configuration.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_188\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.analysis.ignore\": [  \"*\"  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Server in Python\nDESCRIPTION: A simple snippet to stop the server. No context is provided for its usage.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/api/08_oauth.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nserver.stop()\n```\n\n----------------------------------------\n\nTITLE: Implementing Section Styles Enum in Python\nDESCRIPTION: Defines an enumeration of section styles from Franken UI, including various sizes and background options.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nclass SectionT(Enum):\n    default, muted, primary, secondary, xs, sm, lg, xl, remove_vertical\n```\n\n----------------------------------------\n\nTITLE: Importing FastCore Utilities\nDESCRIPTION: Import statement for FastCore utilities which are used later in the tutorial.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/nbs/unpublished/tutorial_for_web_devs.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastcore.utils import *\n```\n\n----------------------------------------\n\nTITLE: Installing Quarto for Fast HTML Project Documentation\nDESCRIPTION: This command installs Quarto, which is required for building and updating the project's documentation. It's a necessary step before making changes to the README.md file through the index.ipynb notebook.\nSOURCE: https://github.com/answerdotai/fasthtml/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnbdev_install_quarto\n```"
  }
]