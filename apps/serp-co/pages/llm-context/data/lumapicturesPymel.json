[
  {
    "owner": "lumapictures",
    "repo": "pymel",
    "content": "TITLE: Installing PyMEL with pip\nDESCRIPTION: This snippet details how to install PyMEL using pip with the mayapy interpreter, including specific instructions for MacOS, Linux, and Windows.  It provides options for installing into Maya's site-packages directory or the user's site-packages directory.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Autodesk/maya<Version>/Maya.app/Contents/bin/mayapy -m pip install pymel\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/autodesk/maya<Version>/bin/mayapy -m pip install pymel\n```\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Autodesk/maya<Version>/Maya.app/Contents/bin/mayapy -m pip install pymel\n```\n\nLANGUAGE: bash\nCODE:\n```\n/usr/autodesk/maya<Version>/bin/mayapy -m pip install pymel --user\n```\n\n----------------------------------------\n\nTITLE: Listing Objects Using PyMEL's ls Function\nDESCRIPTION: This example demonstrates how to use PyMEL's `ls` function to list objects in Maya and how the returned objects are PyMEL classes, specifically instances of `pymel.core.nodetypes.Transform`. It creates a transform and prints its type.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> s = ls(type='transform')[0]\n>>> print type(s)\n<class 'pymel.core.nodetypes.Transform'>\n```\n\n----------------------------------------\n\nTITLE: Creating Objects With PyMEL Functions\nDESCRIPTION: This snippet shows how PyMEL wraps Maya's object creation commands, such as `polySphere`, to return PyMEL classes. It creates a sphere and prints both the object and its type, demonstrating that it is an instance of `pymel.core.nodetypes.Transform`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> t = polySphere()[0]\n>>> print t, type(t)\npSphere1 <class 'pymel.core.nodetypes.Transform'>\n```\n\n----------------------------------------\n\nTITLE: Querying and Connecting Attributes with PyMEL\nDESCRIPTION: This snippet demonstrates how to query object names, connect and disconnect attributes, add and set string array attributes, and get/set attributes using PyMEL. It leverages PyMEL's object-oriented approach for cleaner and more intuitive code.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel import *\nfor x in ls(type='transform'):\n    # object oriented design\n    print(x.longName())\n\n    # make and break some connections\n    x.sx.connect(x.sy)\n    x.sx.connect(x.sz)\n    # disconnect all connections to .sx\n    x.sx.disconnect()\n\n    # add and set a string array attribute with the history of this transform's shape\n    x.setAttr('newAt', x.getShape().history(), force=1)\n\n    # get and set some attributes\n    x.rotate.set([1, 1, 1])\n    trans = x.translate.get()\n    # vector math:\n    trans *= x.scale.get()\n    # ability to pass list/vector args\n    x.translate.set(trans)\n    # call a mel procedure\n    mel.myMelScript(x.type(), trans)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Printing Attributes (PyMEL)\nDESCRIPTION: This snippet shows how to access an attribute of a PyMEL node and print it. In this case, it accesses and prints the 'translateX' attribute of the 'plane' object.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint `plane.translateX`\n# Result: Attribute(u'pPlane1.translateX')\n```\n\n----------------------------------------\n\nTITLE: PyMEL Attribute Manipulation\nDESCRIPTION: This Python snippet demonstrates how to manipulate attributes of a polySphere node using PyMEL, including checking if an attribute is keyable and locked, setting its value, locking it, and printing its type.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ns = pm.polySphere()[0]\nif s.visibility.isKeyable() and not s.visibility.isLocked():\n    s.visibility.set(True)\n    s.visibility.lock()\n    print(s.visibility.type())\n```\n\n----------------------------------------\n\nTITLE: GUI Creation Using PyMEL and Context Managers\nDESCRIPTION: This snippet demonstrates how to streamline GUI creation in PyMEL using Python's `with` statement, providing a more readable and maintainable way to define the GUI hierarchy. It utilizes `uiTemplate`, `window`, `columnLayout`, `frameLayout`, `optionMenu`, `menu`, and `subMenuItem` within the `with` blocks. The `force=True` argument is used to ensure that the template is always recreated.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\n\ntemplate = uiTemplate('ExampleTemplate', force=True)\ntemplate.define(button, width=100, height=40, align='left')\ntemplate.define(frameLayout, borderVisible=True, labelVisible=False)\n\nwith window(menuBar=True,menuBarVisible=True) as win:\n    # start the template block\n    with template:\n        with columnLayout( rowSpacing=5 ):\n            with frameLayout():\n                with columnLayout():\n                    button(label='One')\n                    button(label='Two')\n                    button(label='Three')\n            with frameLayout():\n                with optionMenu():\n                    menuItem(label='Red')\n                    menuItem(label='Green')\n                    menuItem(label='Blue')\n# add a menu to an existing window\nwith win:\n    with menu():\n        menuItem(label='One')\n        menuItem(label='Two')\n        with subMenuItem(label='Sub'):\n            menuItem(label='A')\n            menuItem(label='B')\n        menuItem(label='Three')\n```\n\n----------------------------------------\n\nTITLE: OSX/Linux PYTHONPATH Setup\nDESCRIPTION: This example shows how to set the PYTHONPATH environment variable on OSX and Linux to include the PyMEL directory. The PYTHONPATH variable is used by Python to locate modules and packages. Colons are used to separate multiple paths. This line is intended to be added to the Maya.env file.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nPYTHONPATH = /path/to/pymel-1.0.0:/path/to/something_else\n```\n\n----------------------------------------\n\nTITLE: OSX PyMEL Installation using mayapy\nDESCRIPTION: These commands install PyMEL for different Maya versions using the 'mayapy' executable. 'mayapy' is the Python interpreter that comes with Maya. The 'sudo' command is used to execute the commands with administrator privileges, required for writing to the Maya installation directory. The 'setup.py install' command triggers the installation process.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo /Applications/Autodesk/maya2008/Maya.app/Contents/bin/mayapy setup.py install\nsudo /Applications/Autodesk/maya2009/Maya.app/Contents/bin/mayapy setup.py install\nsudo /Applications/Autodesk/maya2010/Maya.app/Contents/bin/mayapy setup.py install\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Attribute Values (PyMEL)\nDESCRIPTION: This snippet demonstrates how to get and set the value of an attribute. Specifically, it gets the current value of the 'translateX' attribute and then sets it to 10.0.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nplane.translateX.get()\n# Result: 0.0\nplane.translateX.set(10.0)\n```\n\n----------------------------------------\n\nTITLE: Importing a Module in Python\nDESCRIPTION: This Python code shows how to import a Python module named `myModule`. Importing a module makes its functions and classes available to the current script, but requires explicitly calling the module before calling the function inside. The module must be on the `PYTHONPATH`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/mel_to_python.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport myModule\n```\n\n----------------------------------------\n\nTITLE: Creating a SpotLight Using PyMEL - PyMEL\nDESCRIPTION: This snippet demonstrates creating a spotlight using the `nodetypes.SpotLight()` class instead of `maya.cmds.spotlight`. It then prints the name, Maya type, and Python type of the created light.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from pymel.core import *\n>>> l = nodetypes.SpotLight()\n>>> print \"The name is\", l\nThe name is spotLightShape1\n>>> print \"The maya type is\", l.type()\nThe maya type is spotLight\n>>> print \"The python type is\", type(l)\nThe python type is <class 'pymel.core.nodetypes.SpotLight'>\n```\n\n----------------------------------------\n\nTITLE: Comparing PyNodes with API Underpinnings\nDESCRIPTION: This example illustrates how PyMEL utilizes the underlying Maya API for object comparisons, avoiding string-based comparisons. It creates two instanced spheres in different groups, then compares them using `==` and `isInstanceOf` to demonstrate the difference between object identity and instance relationships.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pymel.core import *\n>>> # Make two instanced spheres in different groups\n>>> sphere1, hist = polySphere(name='mySphere')\n>>> grp = group(sphere1)\n>>> grp2 = instance(grp)[0]\n>>> sphere2 = grp2.getChildren()[0]\n\n>>> # check out our objects\n>>> sphere1                            # the original\nTransform('group1|mySphere')\n>>> sphere2                            # the instance\nTransform('group2|mySphere')\n>>> # do some tests\n>>> # they aren't the same dag objects\n>>> sphere1 == sphere2\nFalse\n>>> # but they are instances of each other\n>>> sphere1.isInstanceOf( sphere2 )\nTrue\n```\n\n----------------------------------------\n\nTITLE: Setting and Querying Light Properties - MEL vs PyMEL\nDESCRIPTION: This snippet shows two ways of setting and querying light properties - the old, procedural MEL way using `spotLight` command, and the object-oriented PyMEL way. It sets the light's RGB color and queries the shadow samples.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> spotLight(l, edit=1, rgb=[1, 0, 0]) \n>>> print spotLight(l, query=1, shadowSamples=1) \n1\n\n>>> l.setRgb([1, 0, 0])\n>>> print l.getShadowSamples()   \n1\n```\n\n----------------------------------------\n\nTITLE: Getting Mesh Information (PyMEL)\nDESCRIPTION: This snippet demonstrates how to retrieve information about a mesh object, such as its long name, name, number of edges, number of vertices, and access to a specific vertex.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nshape.longName()\n# Result: |pPlane1|pPlaneShape1\nshape.name()\n# Result: pPlaneShape1\nshape.numEdges()\n# Result: 220\nshape.numVertices()\n121\n`shape.vtx[0]`\n# Result: MeshVertex(u'pPlaneShape1.vtx[0]')\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes using attr Method in pymel\nDESCRIPTION: This snippet demonstrates how to access an attribute using the `attr` method, which is the safest way to access attributes, especially when there are naming conflicts with python methods. It shows how to pass the attribute name as a string variable.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> cam.attr('visibility')\nAttribute('persp.visibility')\n\n>>> for axis in ['scaleX', 'scaleY', 'scaleZ']:\n...     cam.attr( axis ).lock()\n```\n\n----------------------------------------\n\nTITLE: Querying and Editing Attribute Properties (PyMEL)\nDESCRIPTION: This snippet demonstrates how to query and edit properties of an attribute, such as whether it is locked or keyable. It checks if 'translateX' is locked, sets it to locked, checks if it's keyable, and then sets it to not keyable.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nplane.translateX.isLocked()\n# Result: False\nplane.translateX.setLocked(True)\nplane.translateX.isKeyable()\n# Result: True\nplane.translateX.setKeyable(False)\n```\n\n----------------------------------------\n\nTITLE: Getting Instances of a PyNode\nDESCRIPTION: This snippet shows how to retrieve all instances of a given PyNode in the scene using `getInstances()` and `getOtherInstances()`. `getInstances` returns the node and all instances, while `getOtherInstances` returns just the instances.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\t    >>> sphere1.getInstances()\n        [Transform(u'group1|mySphere'), Transform(u'group2|mySphere')]\n\t    >>> sphere1.getOtherInstances()\n        [Transform(u'group2|mySphere')]\n```\n\n----------------------------------------\n\nTITLE: Renaming a PyNode\nDESCRIPTION: This example demonstrates how to rename a Maya node using the `rename` method of a PyNode. It shows that the PyNode variable automatically reflects the new name after renaming.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> orig = polyCube(name='myCube')[0]\n>>> print orig                    # print out the starting name\nmyCube\n>>> orig.rename('crazyCube')      # rename it (the new name is returned)\nTransform('crazyCube')\n>>> print orig                    # the variable 'orig' reflects the name change\ncrazyCube\n```\n\n----------------------------------------\n\nTITLE: PyMEL Shape Component Selection\nDESCRIPTION: This Python snippet demonstrates how to select all faces of a polySphere that point up in world space using PyMEL.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ns = pm.polySphere()[0]\nfor face in s.faces:\n    if face.getNormal('world').y > 0.0:\n       pm.select(face, add=1)\n```\n\n----------------------------------------\n\nTITLE: Direct Instantiation of Attribute in pymel\nDESCRIPTION: This example shows how to directly instantiate the Attribute class, by passing the full attribute name (including the node name) as a string. It also shows how to let PyNode determine the appropriate class automatically.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Attribute('persp.visibility')\nAttribute('persp.visibility')\n\n>>> PyNode('persp.translate') \nAttribute('persp.translate')\n```\n\n----------------------------------------\n\nTITLE: PyMEL Accessing MEL Global Variables\nDESCRIPTION: This Python snippet demonstrates how PyMEL simplifies getting and setting MEL global variables by treating them as a dictionary.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nprint(pm.melGlobals['gMainFileMenu'])\npm.melGlobals['gGridDisplayGridLinesDefault'] = 2\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting Attributes in pymel\nDESCRIPTION: This example shows how to connect and disconnect attributes using the `Attribute.connect` and `Attribute.disconnect` methods.  It also introduces shorthand operators (>> for connect and // for disconnect) for interactive scripting, with a recommendation to avoid them in production code for clarity.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> cam.rotateX.connect(cam.rotateY)\n>>> cam.rotateX.disconnect(cam.rotateY)\n\n>>> c = polyCube(name='testCube')[0]        \n>>> cam.tx >> c.tx    # connect\n>>> cam.tx.outputs()\n[nt.Transform('testCube')]\n>>> cam.tx // c.tx    # disconnect\n>>> cam.tx.outputs()\n[]\n```\n\n----------------------------------------\n\nTITLE: Using Callback Object to Handle Button Presses in PyMEL\nDESCRIPTION: This snippet uses the `Callback` object from PyMEL to correctly handle button press events. The `Callback` object 'pins' down the value of the variable, preventing it from changing during the loop. It takes the function to wrap as the first argument and the arguments to that function as the remaining arguments.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\n\ndef buttonPressed(name):\n    print \"pressed %s!\" % name\n\nwin = window(title=\"My Window\")\nlayout = columnLayout()\nnames = ['chad', 'robert', 'james']\nfor name in names:\n    button( label=name, command = Callback( buttonPressed, name ) )\n\nshowWindow()\n```\n\n----------------------------------------\n\nTITLE: Joining PyNodes as Strings\nDESCRIPTION: This example demonstrates how to convert a list of PyNodes to a list of strings in order to use the `join` method. It shows how a `TypeError` occurs when directly joining PyNodes and provides the correct way of converting them to strings using a list comprehension.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> objs = ls( type='camera')\n>>> print ', '.join( objs )\nTraceback (most recent call last):\n    ...\nTypeError: sequence item 0: expected string, Camera found\n\n>>> objs = ls(type='camera')\n>>> ', '.join([ str(x) for x in objs ])\n'frontShape, perspShape, sideShape, topShape'\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing Objects by Name (PyMEL)\nDESCRIPTION: This snippet demonstrates two ways to access existing objects by name in PyMEL: using the `PyNode` class and using the `SCENE` object. Both methods automatically determine the correct PyMEL class for the object.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nPyNode( 'defaultRenderGlobals').startFrame.get()\n# Result: 1.0\nSCENE.defaultRenderGlobals.startFrame.get()\n# Result: 1.0\n```\n\n----------------------------------------\n\nTITLE: Accessing API Objects from PyNodes\nDESCRIPTION: This snippet demonstrates accessing the underlying API objects (MFnCamera, MDagPath, MPlug) from a PyNode and an Attribute.  It shows how to retrieve the API objects for prototyping API plugins.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> p = PyNode('perspShape')\n>>> p.__apimfn__() # doctest: +ELLIPSIS\n<maya.OpenMaya.MFnCamera; proxy of <Swig Object of type 'MFnCamera *' at ...> >\n>>> p.__apimdagpath__() # doctest: +ELLIPSIS\n<maya.OpenMaya.MDagPath; proxy of <Swig Object of type 'MDagPath *' at ...> >\n>>> a = p.focalLength\n>>> a\nAttribute('perspShape.focalLength')\n>>> a.__apimplug__() # doctest: +ELLIPSIS\n<maya.OpenMaya.MPlug; proxy of <Swig Object of type 'MPlug *' at ...> >\n```\n\n----------------------------------------\n\nTITLE: Querying camera attributes using maya.cmds\nDESCRIPTION: This snippet retrieves the aspect ratio and focal length of a camera using the `camera` command from `maya.cmds`. It then sets a new value for the focal length.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncam = ls(type='camera')[0]\ncamera( cam, query=True, aspectRatio=True)\n# Result: 1.5\ncamera( cam, query=True, focalLength=True)\n# Result: 35.0\ncamera( cam, edit=True, focalLength=20)\n```\n\n----------------------------------------\n\nTITLE: Renaming and Deleting Objects - PyMEL\nDESCRIPTION: This snippet renames a sphere, deletes a cube's shape, and creates a torus to simulate scene changes for the `diff()` function.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ns.rename('monkey')\ndelete(c.getShape())\npolyTorus()\n```\n\n----------------------------------------\n\nTITLE: Using PyNodes as Dictionary Keys - PyMEL\nDESCRIPTION: This snippet demonstrates how PyNodes can be used as keys in dictionaries in Maya 2009 and later, leveraging the unique ID per node. It shows a method to track scene changes by storing node-to-name mappings.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nAllObjects = {}  # node-to-name dictionary\n    def store():\n        for obj in ls():\n            AllObjects[obj] = obj.name()\n    \n    def diff():\n        AllObjsCopy = AllObjects.copy()\n        for obj in ls():\n            try:\n                oldName = AllObjsCopy.pop(obj)\n                newName = obj.name()\n                if newName != oldName:\n                    print \"renamed: %s ---> %s\" % (oldName, newName)\n            except KeyError:\n               print \"new: %s\" % obj.name()\n        for obj, name in AllObjsCopy.iteritems():\n            print \"deleted:\", name\n```\n\n----------------------------------------\n\nTITLE: Testing Attribute Existence using hasAttr Method\nDESCRIPTION: This snippet demonstrates how to check if an attribute exists using the hasAttr method of a PyNode. It creates a PyNode for 'persp' and then checks if it has an attribute named 'spangle', printing a message accordingly.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> x = PyNode('persp') \n>>> if x.hasAttr('spangle'):\n...     print \"Attribute Exists\"\n... else:\n...     print \"Attribute Doesn't Exist\"\nAttribute Doesn't Exist\n```\n\n----------------------------------------\n\nTITLE: Getting Node Connections (PyMEL)\nDESCRIPTION: This snippet retrieves the connections of a shape node, demonstrating how to get incoming and outgoing connections.  It then retrieves inputs and outputs using shortcut methods. It shows how to get connections as attributes instead of nodes.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nshape.connections()\n# Result: [ShadingEngine(u'initialShadingGroup'), PolyPlane(u'polyPlane1')]\nshape.inputs()\n# Result: [PolyPlane(u'polyPlane1')]\nshape.outputs()\n# Result: [ShadingEngine(u'initialShadingGroup')]\nshape.inputs(plugs=1)\n# Result: [Attribute(u'polyPlane1.output')]\n```\n\n----------------------------------------\n\nTITLE: PyMEL optionVars Dictionary\nDESCRIPTION: This Python snippet demonstrates how to work with optionVars as a dictionary in PyMEL, including checking if an optionVar exists, adding elements to an existing optionVar, appending a value, and popping the optionVar.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nif 'numbers' not in pm.optionVar:\n    pm.optionVar['numbers'] = [1, 24, 47]\npm.optionVar['numbers'].append(9)\nnumArray = pm.optionVar.pop('numbers')\n```\n\n----------------------------------------\n\nTITLE: Asserting Node Type using try-except Block\nDESCRIPTION: This snippet demonstrates how to assert that a selected node is of the desired type using a try-except block.  It simulates selecting 'lambert1' and then attempts to cast the selection to a DagNode. If a TypeError is raised, it prints a message indicating that the user should select a DAG node.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> select('lambert1') # this line represents user action\n>>> try:\n...    nt.DagNode( selected()[0] )\n... except TypeError:\n...    print \"Please select a DAG node\"\nPlease select a DAG node\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Values in pymel\nDESCRIPTION: This shows how to retrieve attribute values using the `Attribute.get` method.  It highlights that retrieved values are cast to pymel classes, such as Vector for translation, rotation, and scale attributes. It also provides an example showing potential confusion when comparing values due to data type differences.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> t = cam.translate.get()\n>>> print t\n[4.0, 5.0, 6.0]\n>>> # translation is returned as a vector class\n>>> print type(t) \n<class 'pymel.core.datatypes.Vector'>\n\n>>> value = [4,5,6]\n>>> cam.translate.set(value)\n>>> result = cam.translate.get()\n>>> value == result\nFalse\n>>> # why is this? because result is a Vector and value is a list\n>>> result\ndt.Vector([4,5,6])\n>>> # use `Vector.isEquivalent` or cast the list to a `list`\n>>> list(result) == value\nTrue\n>>> result.isEquivalent(value)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Getting parent transform using PyMEL methods\nDESCRIPTION: This snippet gets the parent transform of a camera using the `getParent` method, and then retrieves the translation using `xform`. This is a step towards a more object-oriented approach.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncam = ls(type='camera')[0]\nparent = cam.getParent() # <---\ntrans = xform(parent,q=1,t=1)\n`trans`\n# Result: [28.0, 21.0, 28.0]\ntrans[2]\n# Result: 28.0\n```\n\n----------------------------------------\n\nTITLE: Importing all of PyMEL core\nDESCRIPTION: If you prefer to import all names from pymel.core directly into the current namespace, use from pymel.core import *. This requires enabling autocomplete on all characters in Eclipse preferences.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/eclipse.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\n```\n\n----------------------------------------\n\nTITLE: PyMEL Node Operations\nDESCRIPTION: This Python snippet demonstrates various operations on a camera node using PyMEL, including setting focal length, getting horizontal field of view, dollying, tracking, and adding a bookmark.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncamTrans, cam = pm.camera()  # create a new camera\ncam.setFocalLength(100)\nfov = cam.getHorizontalFieldOfView()\ncam.dolly(-3)\ncam.track(left=10)\ncam.addBookmark('new')\n```\n\n----------------------------------------\n\nTITLE: Creating a Poly Plane (PyMEL)\nDESCRIPTION: This snippet shows how to create a polygonal plane using the `polyPlane` command in PyMEL.  It returns a list containing the transform node and the polyPlane node.  The returned objects are PyNode classes.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nobjs = polyPlane()\nobjs\n# Result: [nt.Transform(u'pPlane1'), nt.PolyPlane(u'polyPlane1')]\n```\n\n----------------------------------------\n\nTITLE: FormLayout with Ratios and Spacing in PyMEL\nDESCRIPTION: This example illustrates how to create a horizontal layout with specified ratios and spacing between controls. The `horizontalLayout` command takes `ratios` and `spacing` arguments to customize the layout.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwin = window(title=\"My Window\")\nlayout = horizontalLayout(ratios=[1,0,2], spacing=10)\nfor i in range(5):\n    button(label=\"button %s\" % i)\nlayout.redistribute()    # now will redistribute horizontally\nwin.show()\n```\n\n----------------------------------------\n\nTITLE: Casting Strings to Node Types\nDESCRIPTION: This snippet demonstrates how `PyNode` and other node types can cast strings to the proper class in the node hierarchy. It shows examples of casting 'lambert1' to `nt.Lambert` using both `PyNode` and `DependNode`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> PyNode('lambert1')\nnt.Lambert('lambert1')\n>>> DependNode('lambert1')\nnt.Lambert('lambert1')\n```\n\n----------------------------------------\n\nTITLE: Getting camera translation using PyMEL object methods\nDESCRIPTION: This snippet demonstrates a fully object-oriented approach to getting the Z component of a camera's translation. It uses the `getParent` method to get the parent transform, and then the `getTranslation` method to get the translation vector. Finally, it accesses the Z component of the vector using `trans.z`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncam = ls(type='camera')[0]\nparent = cam.getParent()\ntrans = parent.getTranslation() # <---\n`trans`\n# Result: dt.Vector([28.0, 21.0, 28.0])\ntrans.z\n# Result: 28.0\n```\n\n----------------------------------------\n\nTITLE: Concatenating PyNodes with Strings\nDESCRIPTION: This example demonstrates how to concatenate a PyNode with a string by explicitly casting the PyNode to a string using `str()`. It also shows an alternative approach using string formatting.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print \"Camera 1 of \" + str(len(objs)) + \" is named \" + str(objs[0])\nCamera 1 of 4 is named frontShape\n\n>>> print \"Camera 1 of %s is named %s\" % ( len(objs), objs[0] )\nCamera 1 of 4 is named frontShape\n```\n\n----------------------------------------\n\nTITLE: Getting Shape and Center of Interest - PyMEL\nDESCRIPTION: This snippet retrieves a transform's shape (camera node) and its center of interest using PyMEL. It demonstrates accessing and printing node properties.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> trans = PyNode('persp')\n>>> # get the transform's shape, aka the camera node\n>>> cam = trans.getShape()\n>>> print cam\nperspShape\n>>> trans.getCenterOfInterest()\n44.82186966202994\n>>> cam.getCenterOfInterest()\n44.82186966202994\n```\n\n----------------------------------------\n\nTITLE: Listing cameras using PyMEL\nDESCRIPTION: This snippet uses the `ls` function from PyMEL to list all cameras in the scene. It returns a list of `PyNode` objects representing the cameras.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nls(type='camera')\n# Result: [nt.Camera(u'frontShape'), nt.Camera(u'perspShape'), nt.Camera(u'sideShape'), nt.Camera(u'topShape')]\n```\n\n----------------------------------------\n\nTITLE: Initializing Maya Standalone Interpreter in Python\nDESCRIPTION: This code snippet demonstrates how to initialize the Maya standalone interpreter using the standard maya.standalone module. It imports the necessary modules, initializes Maya with a specific name, and then imports maya.cmds for executing Maya commands.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/standalone.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport maya.standalone\nmaya.standalone.initialize(name='python')\nimport maya.cmds as cmds\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for Building (Windows)\nDESCRIPTION: These commands create a virtual environment named `.venv-build` using python3, activate it, update pip, and install poetry and poetry-dynamic-versioning.  This isolates the build dependencies for PyMEL and prevents conflicts with system-level packages.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\npython3 -m venv .venv-build\n.\\.venv-build\\Scripts\\activate\npip install -U pip\npip install poetry poetry-dynamic-versioning\n```\n\n----------------------------------------\n\nTITLE: Testing Node Existence using PyNode and MayaObjectError\nDESCRIPTION: This snippet demonstrates how to check if a node exists using PyNode and catching MayaObjectError. It attempts to create a PyNode for 'fooBar' and catches the MayaObjectError if it doesn't exist, printing a message accordingly.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> try:\n...     PyNode('fooBar')\n...     print \"It Exists\"\n... except MayaObjectError:\n...     print \"It Doesn't Exist\"\nIt Doesn't Exist\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes using Shorthand in pymel\nDESCRIPTION: This demonstrates shorthand notation to access attributes directly as python attributes. However, this method can fail if the attribute name conflicts with existing python class attributes or methods. It also shows how to use short and long names to access attributes.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> cam  # continue from where we left off above\nTransform('persp')\n>>> cam.visibility # long name access\nAttribute('persp.visibility')\n>>> cam.v # short name access\nAttribute('persp.visibility')\n```\n\n----------------------------------------\n\nTITLE: Verifying PyMEL Installation\nDESCRIPTION: This snippet demonstrates how to verify PyMEL installation by printing the file path of the PyMEL module using the mayapy interpreter.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmayapy -c \"import pymel;print(pymel.__file__)\"\n```\n\n----------------------------------------\n\nTITLE: Importing pymel in userSetup.py (Python)\nDESCRIPTION: This Python code imports all modules from the pymel.core package.  Adding this line to the userSetup.py file ensures that PyMEL is automatically imported every time Maya starts up, avoiding the need to manually import it each session.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\n```\n\n----------------------------------------\n\nTITLE: Testing Attribute Existence using Attribute Access and AttributeError\nDESCRIPTION: This snippet demonstrates how to check if an attribute exists by attempting to access it and catching AttributeError. It creates a PyNode for 'persp', attempts to access 'x.spangle', and catches the AttributeError if it doesn't exist, printing a message accordingly.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> x = PyNode('persp') \n>>> try:\n...     x.spangle\n...     print \"Attribute Exists\"\n... except AttributeError:\n...     print \"Attribute Doesn't Exist\"\nAttribute Doesn't Exist\n```\n\n----------------------------------------\n\nTITLE: MEL query/edit flag usage\nDESCRIPTION: Illustrates a practical guideline for PyMEL, where a value returned by a query flag should be accepted as a valid argument by the corresponding edit flag.  This promotes consistency and ease of use when interacting with Maya commands.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/design.rst#_snippet_0\n\nLANGUAGE: MEL\nCODE:\n```\ncamera( 'persp', e=1, focalLength = camera( 'persp', q=1, focalLength=1)   )\n```\n\n----------------------------------------\n\nTITLE: Getting the Shape of a Transform (PyMEL)\nDESCRIPTION: This snippet retrieves the shape node of a transform node, which is assumed to be already assigned to the variable 'plane'. It then prints the shape, revealing that it's a mesh.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# assign the transform from above to a variable\nplane = objs[0]\nshape = plane.getShape()\n`shape`\n# Result: nt.Mesh(u'pPlaneShape1')\n```\n\n----------------------------------------\n\nTITLE: Getting Connections with Source-Destination Pairs (PyMEL)\nDESCRIPTION: This snippet demonstrates how to retrieve connections with source-destination pairs using the 'c' and 'p' flags. It shows the result as a list of tuples, where each tuple contains the source and destination attributes.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nshape.connections(c=1, p=1)\n# Result: [(Attribute(u'pPlaneShape1.instObjGroups[0]'), Attribute(u'initialShadingGroup.dagSetMembers[0]')), (Attribute(u'pPlaneShape1.inMesh'), Attribute(u'polyPlane1.output'))]\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Environment (Windows)\nDESCRIPTION: These commands create a new virtual environment named `.venv-test`, activate it, and install PyMEL from the test PyPI repository. This allows for testing the installed package in an isolated environment before wider release.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\npython -m venv .venv-test\n.\\.venv-test\\Scripts\\activate\npip install -i https://test.pypi.org/simple/ pymel\n```\n\n----------------------------------------\n\nTITLE: PyMEL File Path Operations\nDESCRIPTION: This Python snippet demonstrates file path operations using PyMEL, including creating a backup directory, iterating through files in a directory, and copying files.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nbasedir = pm.sceneName().parent\nbackupDir = basedir / \"backup\" #slash op joins paths\nif not backupDir.exists:\n    backupDir.mkdir()\nfor path in basedir.files('*.mb'):\n    print(\"backing up: \", path.name)\n    path.copy(backupDir / (path.namebase + \".old\"))\n```\n\n----------------------------------------\n\nTITLE: Joint Name Retrieval Fix\nDESCRIPTION: Fixes issue 76, where non-unique joint names were returned by `pymel.joint` and thus were unsuccessfully cast to `nodetypes.Joint`. Ensures that only unique joint names are returned.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npymel.joint\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Environment (Linux/MacOS)\nDESCRIPTION: These commands create a new virtual environment named `.venv-test`, activate it, and install PyMEL from the test PyPI repository. This allows for testing the installed package in an isolated environment before wider release.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv-test\nsource .venv-test/bin/activate\npip install -i https://test.pypi.org/simple/ pymel\n```\n\n----------------------------------------\n\nTITLE: Querying and Connecting Attributes with Maya Commands (cmds)\nDESCRIPTION: This snippet demonstrates how to query object names, connect and disconnect attributes, add and set string array attributes, and get/set attributes using standard Maya commands (cmds). It also shows how to call a MEL procedure.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nif objs is not None:\n    for x in objs:\n        print(mm.eval('longNameOf(\"%s\")' % x))\n\n        # make and break some connections\n        cmds.connectAttr('%s.sx' % x,  '%s.sy' % x)\n        cmds.connectAttr('%s.sx' % x,  '%s.sz' % x)\n\n        # disconnect all connections to .sx\n        conn = cmds.listConnections(x + \".sx\", s=0, d=1, p=1)\n        # returns None when it finds no match:\n        if conn is not None:\n            for inputPlug in conn:\n                cmds.disconnectAttr(x + \".sx\", inputPlug)\n\n        # add and set a string array attribute with the history of this transform's shape\n        if not mm.eval('attributeExists \"newAt\" \"%s\"' % x):\n            cmds.addAttr(x, ln='newAt', dataType='stringArray')\n        shape = cmds.listRelatives(x, s=1 )\n        if shape is not None:\n            history = cmds.listHistory( shape[0] )\n        else:\n            history = []\n        args = tuple(['%s.newAt' % x, len(history)] + history)\n        cmds.setAttr(*args,  type='stringArray' )\n\n        # get and set some attributes\n        cmds.setAttr('%s.rotate' % x, 1, 1, 1)\n        scale = cmds.getAttr('%s.scale' % x)\n        # maya packs the previous result in a list for no apparent reason:\n        scale = scale[0]\n        # the tuple must be converted to a list for item assignment:\n        trans = list(cmds.getAttr('%s.translate' % x )[0])  \n        trans[0] *= scale[0]\n        trans[1] *= scale[1]\n        trans[2] *= scale[2]\n        cmds.setAttr('%s.scale' % x, trans[0], trans[1], trans[2])\n        # call a mel procedure\n        mm.eval('myMelScript(\"%s\",{%s,%s,%s})' % (cmds.nodeType(x), trans[0], trans[1], trans[2]))\n```\n\n----------------------------------------\n\nTITLE: Looping Through Connections (PyMEL)\nDESCRIPTION: This snippet shows how to loop through the source-destination pairs returned by shape.connections(c=1, p=1) and print each source and destination.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfor source, destination in shape.connections(c=1, p=1):\n    print source, destination\n```\n\n----------------------------------------\n\nTITLE: Automatic Form Layouts in PyMEL\nDESCRIPTION: This snippet demonstrates how to use the extended FormLayout class in PyMEL to automatically handle control placement and resizing within a layout. The `redistribute` method evenly distributes the children within the layout.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwin = window(title=\"My Window\")\nlayout = horizontalLayout()\nfor i in range(5):\n    button(label=\"button %s\" % i)\nlayout.redistribute()    # now will redistribute horizontally\nwin.show()\n```\n\n----------------------------------------\n\nTITLE: Querying camera attributes using PyMEL object methods\nDESCRIPTION: This snippet demonstrates the object-oriented approach in PyMEL. It retrieves the aspect ratio and focal length of a camera object using the `getAspectRatio` and `getFocalLength` methods. It then sets a new value for the focal length using `setFocalLength`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncam = ls(type='camera')[0]\ncam.getAspectRatio()\n# Result: 1.5\ncam.getFocalLength()\n# Result: 35.0\ncam.setFocalLength(20)\n```\n\n----------------------------------------\n\nTITLE: Windows PYTHONPATH Setup\nDESCRIPTION: This example shows how to set the PYTHONPATH environment variable on Windows to include the PyMEL directory. The PYTHONPATH variable is used by Python to locate modules and packages. Semicolons are used to separate multiple paths.  This line is intended to be added to the Maya.env file.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nPYTHONPATH = C:\\path\\to\\pymel-1.0.0;C:\\path\\to\\something_else\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in Python\nDESCRIPTION: This Python code defines a function named `myfunc` that takes two arguments and prints them to the console. It demonstrates the equivalent syntax for defining functions in Python, which is simpler and doesn't require explicit type declarations.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/mel_to_python.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef myfunc( arg1, arg2 ):\n    print arg1, arg2\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Package Dependencies\nDESCRIPTION: This snippet declares the dependencies required for the pymel project. It lists the required packages along with their minimum versions. The commented-out lines indicate optional dependencies related to documentation generation and type checking.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfuture >=0.18.2\npytest\njinja2\n#sphinx >=1.2.3, <1.3\n#sphinx_rtd_theme\n#sphinxcontrib-napoleon\n#mypy >= 0.910\n```\n\n----------------------------------------\n\nTITLE: Handling MayaNodeError and MayaAttributeError in PyMEL\nDESCRIPTION: This snippet demonstrates how to handle MayaNodeError and MayaAttributeError when creating PyNodes for potentially non-existent objects or attributes. It iterates through a list of strings, attempts to create a PyNode for each, and catches the exceptions if the object or attribute does not exist.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> for x in [ 'fooBar.spangle', 'superMonk' ] :\n...     try:\n...         PyNode( x )\n...         print \"It Exists\"\n...     except MayaNodeError:\n...         print \"The Node Doesn't Exist:\", x\n...     except MayaAttributeError:\n...         print \"The Attribute Doesn't Exist:\", x\n... \nThe Attribute Doesn't Exist: fooBar.spangle\nThe Node Doesn't Exist: superMonk\n```\n\n----------------------------------------\n\nTITLE: Importing PyMEL into main namespace\nDESCRIPTION: This snippet imports all functions and classes from the `pymel.core` module into the main namespace. This makes it easier to call PyMEL functions without having to prefix them with the module name. However, this can overwrite Python built-in functions if not careful.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Repository (Test PyPI)\nDESCRIPTION: These poetry commands configure the test PyPI repository and sets up basic HTTP authentication for publishing to test PyPI. Replace <username> and <password> with your actual credentials.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npoetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config http-basic.testpypi <username> <password>\n```\n\n----------------------------------------\n\nTITLE: OSX Escaping Spaces in Folder Names\nDESCRIPTION: This example shows how to navigate to a directory containing spaces in its name using the 'cd' command in the shell. The backslash character '\\' is used to escape the space character, allowing the shell to interpret the directory name correctly. Otherwise, the shell would interpret 'Image' and 'Capture.app' as separate arguments.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /Applications/Image\\ Capture.app\n```\n\n----------------------------------------\n\nTITLE: Fix for Component Selection\nDESCRIPTION: Addresses issue 72, which prevented the selection of lists of components. This enhancement enables users to select multiple components simultaneously.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlists of components\n```\n\n----------------------------------------\n\nTITLE: Publishing to Real PyPI\nDESCRIPTION: This poetry command publishes the PyMEL package to the official PyPI repository. This makes the package available to the wider Python community.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\npoetry publish\n```\n\n----------------------------------------\n\nTITLE: Building PyMEL API Cache\nDESCRIPTION: This Python script builds the PyMEL API cache. It sets up the environment by defining the pymel path, MAYA_DOC_DIR and PYMEL_ERRORLEVEL. It adds the pymel path to sys.path and imports the pymel module, ensuring that the correct version is loaded. Finally, it imports `pymel.internal.factories`, which automatically triggers the API cache build.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\npymelPath = r'C:\\Projects\\Dev\\pymel'   # ...or wherever YOUR pymel version is installed\nos.environ['MAYA_DOC_DIR'] = os.path.join(pymelPath, '.mayaDocs')\nos.environ['PYMEL_ERRORLEVEL'] = 'WARNING'\npymelInit = os.path.join(pymelPath, 'pymel', '__init__.py')\nif not os.path.isfile(pymelInit):\n    raise RuntimeError('invalid pymel path: %s' % pymelPath)\nif sys.path[0] != pymelPath:\n    sys.path.insert(0, pymelPath)\nimport pymel\nif not pymel.__file__.startswith(pymelInit):  # don't check equality, it may be a .pyc\n    for mod in list(sys.modules):\n        if mod.split('.')[0] == 'pymel':\n            del sys.modules[mod]\nimport pymel\nassert pymel.__file__.startswith(pymelInit)\nprint(pymel.__file__)\nimport pymel.internal.factories\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MayaAttributeError with Explicit Notation\nDESCRIPTION: This snippet illustrates how a MayaAttributeError is raised when accessing a non-existent attribute using explicit notation (x.attr('myAttr')). It first creates a polySphere named 'earth' and then attempts to access the non-existent attribute 'myAttr'.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> x = polySphere(name='earth')[0]\n>>> x.attr('myAttr')\nTraceback (most recent call last):\n    ...\nMayaAttributeError: Maya Attribute does not exist: u'earth.myAttr'\n```\n\n----------------------------------------\n\nTITLE: Generating PyMEL stubs\nDESCRIPTION: Generates the stub files required for PyMEL autocompletion within Maya. This needs to be run if PyMEL was checked out from a git repository.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/eclipse.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport maintenance.stubs\nmaintenance.stubs.pymelstubs()\n```\n\n----------------------------------------\n\nTITLE: Redistributing Elements with Ratios in PyMEL FormLayout\nDESCRIPTION: This snippet shows how to redistribute elements within a FormLayout using specific ratios. The `redistribute` method accepts ratios as arguments to control the distribution of space among the child elements.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlayout.redistribute(1,3,2)    # (For 5 elements, the ratios will then be 1:3:2:1:1)\n```\n\n----------------------------------------\n\nTITLE: Comparing Attributes of PyNodes\nDESCRIPTION: This example demonstrates how to compare attributes of PyNodes directly without relying on string comparisons. It shows that long and short names of attributes resolve to the same attribute object, and that attributes with the same name on different nodes are also considered equal.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> # long and short names retrieve the same attribute\n>>> sphere1.t == sphere1.translate\nTrue\n>>> sphere1.tx == sphere1.translate.translateX\nTrue\n>>> # the same attrs on different nodes/instances are still the same \n>>> sphere1.t == sphere2.t\nTrue\n```\n\n----------------------------------------\n\nTITLE: Generating PyMEL Core Modules\nDESCRIPTION: This Python script generates the core modules for PyMEL using templates. It sets up the environment, imports the pymel module, and then imports the `maintenance.build` module. Finally, it calls `maintenance.build.generateAll()` to generate the modules.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\npymelPath = r'C:\\Projects\\Dev\\pymel'   # ...or wherever YOUR pymel version is installed\npymelInit = os.path.join(pymelPath, 'pymel', '__init__.py')\nif not os.path.isfile(pymelInit):\n    raise RuntimeError('invalid pymel path: %s' % pymelPath)\nif sys.path[0] != pymelPath:\n    sys.path.insert(0, pymelPath)\nimport pymel\nif not pymel.__file__.startswith(pymelInit):  # don't check equality, it may be a .pyc\n    for mod in list(sys.modules):\n        if mod.split('.')[0] == 'pymel':\n            del sys.modules[mod]\nimport pymel\nassert pymel.__file__.startswith(pymelInit)\nimport maintenance.build\nassert maintenance.build.__file__.startswith(pymelPath)\nmaintenance.build.generateAll()\n```\n\n----------------------------------------\n\nTITLE: Setting PYTHONPATH using sitecustomize.py (Python)\nDESCRIPTION: This Python code snippet is used within a sitecustomize.py file to dynamically insert the PyMEL directory into the Python path. This ensures that Python can find the pymel and maya packages. Replace `/path/to/top-pymel-dir` with the actual path to the directory containing the pymel and maya folders.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0,'/path/to/top-pymel-dir')\n```\n\n----------------------------------------\n\nTITLE: Run tests on Linux/MacOS\nDESCRIPTION: Executes Pymel tests on Linux/MacOS, treating warnings as errors. Requires `MAYA_LOCATION` environment variable to be set to the Maya installation directory. The output, including standard error, is piped to the `tee` command, displaying it in the console and writing it to `pymelTestOut.txt`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:$MAYA_LOCATION/bin\n./pymel_test_output.bash --warnings-as-errors 2>&1 | tee pymelTestOut.txt\n```\n\n----------------------------------------\n\nTITLE: Getting help on a node type\nDESCRIPTION: This snippet shows how to use the built-in `help` command in Python to get documentation on a specific node type, such as `nt.Camera`. It also demonstrates how to get help on a specific method of a node type, such as `nt.Camera.getFocalLength`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint repr(cam)\nhelp(nt.Camera)\nhelp(nt.Camera.getFocalLength)\nhelp(ls)\n```\n\n----------------------------------------\n\nTITLE: Building PyMEL Command Cache\nDESCRIPTION: This Python script builds the PyMEL command cache. Before running the script, specific plugins must be unloaded to prevent crashes. The script sets up the environment, imports the pymel module, and then explicitly unloads the 'renderSetup' plugin. Finally, it loads the command cache using `pymel.internal.factories.loadCmdCache()`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplugins = [\n  'bifrostGraph', # not strictly necessary, but maya will load much faster\n  'lookdevKit',\n  'modelingToolkit',\n  'mtoa',\n  'renderSetup',\n  'Type',\n  'VectorRender', # will cause crash later when querying cmds.allNodeTypes\n]\nimport maya.cmds as cmds\nfor plugin in plugins:\n    plugPath = cmds.pluginInfo(plugin, query=True, path=False)\n    print(plugPath)\n    cmds.pluginInfo(plugPath, edit=True, autoload=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\npymelPath = r'C:\\Projects\\Dev\\pymel'   # ...or wherever YOUR pymel version is installed\nos.environ['MAYA_DOC_DIR'] = os.path.join(pymelPath, '.mayaDocs')\npymelInit = os.path.join(pymelPath, 'pymel', '__init__.py')\nif not os.path.isfile(pymelInit):\n    raise RuntimeError('invalid pymel path: %s' % pymelPath)\nif sys.path[0] != pymelPath:\n    sys.path.insert(0, pymelPath)\nimport pymel\nif not pymel.__file__.startswith(pymelInit):  # don't check equality, it may be a .pyc\n    for mod in list(sys.modules):\n        if mod.split('.')[0] == 'pymel':\n            del sys.modules[mod]\nimport pymel\nassert pymel.__file__.startswith(pymelInit)\nprint(pymel.__file__)\n\n# for some reason, renderSetup.mll is always force-loaded; further, if\n# unloaded automatically by pymel, it seems to trigger a crash - but if\n# explicitly unloaded first, it seems to be ok\nimport maya.cmds as cmds\ncmds.unloadPlugin('renderSetup')\n\nimport pymel.internal.factories\n\n# force loading + building of cmd caches\npymel.internal.factories.loadCmdCache()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for PyMEL\nDESCRIPTION: This shell script installs the necessary Python dependencies for PyMEL using `mayapy`. It first sets the `MAYA_LOCATION` environment variable and adds its `bin` directory to the system path. Then, it upgrades `pip` and installs the dependencies listed in the `maintenance/requirements.txt` file. On Windows, it may require administrator privileges or manual permission changes.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# on windows, if the below commands raise errors, you'll need to either run\n# as administrator, or change permissions manually\nsudo chmod -R ugo+w $MAYA_LOCATION/\nmayapy -m ensurepip --upgrade\nmayapy -m pip install -r maintenance/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing getCenterOfInterest Method - PyMEL\nDESCRIPTION: This snippet demonstrates that the `getCenterOfInterest` method is actually bound to the Camera class, not the Transform class directly. It accesses the bound method through the transform object.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> trans.getCenterOfInterest\n<bound method Camera.getCenterOfInterest of Camera(u'perspShape')>\n```\n\n----------------------------------------\n\nTITLE: Creating symbolic link (Shell)\nDESCRIPTION: This shell command creates a symbolic link from an existing library file to the missing library file that Maya expects to find. This resolves issues with missing dependencies on Linux.  `sudo` is used to run the command with administrative privileges.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s libssl.so.0.9.8b libssl.so.4\n```\n\n----------------------------------------\n\nTITLE: Inspecting PyNode Class Hierarchy\nDESCRIPTION: This example demonstrates how to use built-in Python functions like `type` and `isinstance` to inspect the class hierarchy of PyNodes. It creates a directional light and checks its type and inheritance relationships.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> dl = directionalLight()\n>>> type(dl)\n<class 'pymel.core.nodetypes.DirectionalLight'>\n>>> isinstance( dl, nodetypes.DirectionalLight)\nTrue\n>>> isinstance( dl, nodetypes.Light)\nTrue\n>>> isinstance( dl, nodetypes.Shape)\nTrue\n>>> isinstance( dl, nodetypes.DagNode)\nTrue\n>>> isinstance( dl, nodetypes.Mesh)\nFalse\n```\n\n----------------------------------------\n\nTITLE: Modifying PyMEL FormLayout\nDESCRIPTION: This snippet demonstrates how to modify the layout after creation using methods like `flip` (change orientation), `reverse` (reverse order of children), and `reset` (reset ratios).\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlayout.flip()     # flip the orientation\nlayout.reverse()  # reverse the order of the controls\nlayout.reset()    # reset the ratios\n```\n\n----------------------------------------\n\nTITLE: Installing pip for Older Maya Versions\nDESCRIPTION: This snippet provides a command to install pip for older Maya versions (2021 and earlier) using curl and mayapy.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://bootstrap.pypa.io/get-pip.py | /usr/autodesk/maya2021/bin/mayapy\n```\n\n----------------------------------------\n\nTITLE: Lock File Permissions on Windows\nDESCRIPTION: Locks the permissions of the Maya preferences folder on Windows to prevent writing, ensuring a clean environment for building documentation. This prevents changes to the Maya preferences during the example execution.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_17\n\nLANGUAGE: batch\nCODE:\n```\nREM lock perms so it can't be written to - if you just deny \"write\",\nREM user can still delete, which some of the pref saving routines do!\nREM (ie, when saving scriptEditorTemp, it first deletes all entries,\nREM then tries to write!)\nicacls maya_fixCodeExamples /deny %USERNAME%:(OI)(CI)(DE,DC,WD,AD,WA,WEA)\n```\n\n----------------------------------------\n\nTITLE: Add New MPx Classes in Pymel\nDESCRIPTION: Adds a new `DependNode` subclass for each missing `MPx` type in `pymel.api.plugins`. This example shows how to add a subclass for `MPxBlendShape` if it exists in the `mpx` module (Maya's API).\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# new in 2016\nif hasattr(mpx, 'MPxBlendShape'):\n    class BlendShape(DependNode, mpx.MPxBlendShape): pass\n```\n\n----------------------------------------\n\nTITLE: Testing Attribute Existence using PyNode and MayaAttributeError\nDESCRIPTION: This snippet demonstrates how to check if an attribute exists using PyNode and catching MayaAttributeError. It attempts to create a PyNode for 'persp.spangle' and catches the MayaAttributeError if it doesn't exist, printing a message accordingly.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> try:\n...     PyNode( 'persp.spangle' )\n...     print \"Attribute Exists\"\n... except MayaAttributeError:\n...     print \"Attribute Doesn't Exist\"\nAttribute Doesn't Exist\n```\n\n----------------------------------------\n\nTITLE: Lock File Permissions on Linux/MacOS\nDESCRIPTION: Locks the permissions of the Maya preferences folder on Linux/MacOS to prevent writing, ensuring a clean environment for building documentation.  This is achieved using the `chmod` command to remove write permissions for the user.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nchmod -R u-w maya_fixCodeExamples\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for Building (Linux)\nDESCRIPTION: These commands create a virtual environment named `.venv-build` using python3, activate it, update pip, and install poetry and poetry-dynamic-versioning.  This isolates the build dependencies for PyMEL and prevents conflicts with system-level packages.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv-build\nsource .venv-build/bin/activate\npip install -U pip\npip install poetry poetry-dynamic-versioning\n```\n\n----------------------------------------\n\nTITLE: PyMEL MEL Error Handling\nDESCRIPTION: This Python snippet demonstrates how PyMEL provides specific MEL error messages in a Python traceback, along with line numbers, which helps in debugging MEL scripts called from Python.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmel.myScript('foo', [])\n```\n\n----------------------------------------\n\nTITLE: Run GUI tests on Windows\nDESCRIPTION: Runs Pymel tests in GUI mode on Windows, treating warnings as errors. The output is written to `pymelTestOut.txt`. Since Windows doesn't have the `tee` command, the output is not displayed in the console but can be viewed by opening `pymelTestOut.txt` in a text editor.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\npymel_test_output.bat -W --gui\n```\n\n----------------------------------------\n\nTITLE: Run GUI tests on Linux/MacOS\nDESCRIPTION: Runs Pymel tests in GUI mode on Linux/MacOS, treating warnings as errors. Requires `MAYA_LOCATION` environment variable to be set to the Maya installation directory. The output, including standard error, is piped to the `tee` command, displaying it in the console and writing it to `pymelTestOut.txt`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:$MAYA_LOCATION/bin\n./pymel_test_output.bash -W --gui  2>&1 | tee pymelTestOut.txt\n```\n\n----------------------------------------\n\nTITLE: GUI Creation Using maya.cmds\nDESCRIPTION: This snippet demonstrates how to create GUI elements in Maya using the `maya.cmds` module. It includes creating a uiTemplate, a window, layouts, buttons, option menus, and menus.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport maya.cmds as cmds\n\nif cmds.uiTemplate('ExampleTemplate', exists=True):\n    cmds.deleteUI('ExampleTemplate', uiTemplate=True)\ncmds.uiTemplate('ExampleTemplate')\ncmds.button(defineTemplate='ExampleTemplate',\n            width=100, height=40, align='left')\ncmds.frameLayout(defineTemplate='ExampleTemplate', borderVisible=True,\n                 labelVisible=False)\n\nwindow = cmds.window(menuBar=True,menuBarVisible=True)\n\ncmds.setUITemplate('ExampleTemplate', pushTemplate=True)\ncmds.columnLayout(rowSpacing=5)\n\ncmds.frameLayout()\ncmds.columnLayout()\ncmds.button(label='One')\ncmds.button(label='Two')\ncmds.button(label='Three')\ncmds.setParent('..')\ncmds.setParent('..')\n\ncmds.frameLayout()\ncmds.optionMenu()\nmenuItem(label='Red')\nmenuItem(label='Green')\nmenuItem(label='Blue')\ncmds.setParent('..')\ncmds.setParent('..')\n\ncmds.setUITemplate(popTemplate=True)\n\ncmds.showWindow( window )\n\nmenu()\nmenuItem(label='One')\nmenuItem(label='Two')\nmenuItem(label='Sub', subMenu=True)\nmenuItem(label='A')\nmenuItem(label='B')\nsetParent('..', menu=1)\nmenuItem(label='Three')\n```\n\n----------------------------------------\n\nTITLE: Test Generated Stubs\nDESCRIPTION: Tests the generated stubs using the `maintenance.stubs` module. It runs the tests using the same major version of Python as Maya to ensure compatibility with standard library references.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npython -m maintenance.stubs -o ./extras/completion --test\n```\n\n----------------------------------------\n\nTITLE: Fix Code Examples in Maya\nDESCRIPTION: Imports Pymel in Maya, sets the `PYMEL_DOCSTRINGS_MODE` environment variable to 'html', and calls `cmdcache.fixCodeExamples()` to process Autodesk documentation examples and add them to the examples cache. This script needs the correct path to the pymel installation.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport sys, os\npymelPath = r'/Volumes/sv-dev01/devRepo/chad/pymel'   # ...or wherever YOUR pymel version is installed\nif not os.path.isfile(os.path.join(pymelPath, 'pymel', '__init__.py')):\n    raise RuntimeError('invalid pymel path: %s' % pymelPath)\nif sys.path[0] != pymelPath:\n    sys.path.insert(0, pymelPath)\nos.environ['PYMEL_DOCSTRINGS_MODE'] = 'html'\nimport pymel\nassert pymel.__file__.startswith(pymelPath)\nimport pymel.internal.cmdcache as cmdcache\ncmdcache.fixCodeExamples()\n```\n\n----------------------------------------\n\nTITLE: Locator Instantiation Fix (PEP8)\nDESCRIPTION: Fixes an issue where nodes were created twice when using PEP8 style class instantiation for `pm.Locator`. This ensures that `pm.Locator` objects are created only once.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npm.Locator\n```\n\n----------------------------------------\n\nTITLE: Jinja Template for Function Summary\nDESCRIPTION: This Jinja template snippet generates a rubric and autosummary for functions within a Python module. It iterates through the `functions` list and creates individual entries for each function using the `autosummary` directive. The `toctree` option specifies the location where detailed function documentation will be generated.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/templates/autosummary/module.rst#_snippet_0\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block functions %}\n   {% if functions %}\n   .. rubric:: Functions\n\n   .. autosummary::\n    :toctree: functions/{{ fullname }}\n    :nosignatures:\n   {% for item in functions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Template for Class Summary\nDESCRIPTION: This Jinja template snippet generates a rubric and autosummary for classes within a Python module. It iterates through the `classes` list and creates individual entries for each class using the `autosummary` directive. The `toctree` option specifies the location where detailed class documentation will be generated.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/templates/autosummary/module.rst#_snippet_1\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block classes %}\n   {% if classes %}\n   .. rubric:: Classes\n\n   .. autosummary::\n    :toctree: classes/{{ fullname }}\n    :nosignatures:\n   {% for item in classes %}\n      {{ item }}\n     \n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Nose on Linux/OSX using Maya's Python\nDESCRIPTION: This command installs the 'nose' testing framework using Maya's Python interpreter. 'Nose' is required to run PyMEL's unit tests. It assumes that the environment is properly set up for Maya development.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/dev.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsudo mayapy setup.py easy_install nose\n```\n\n----------------------------------------\n\nTITLE: Jinja Template for Exception Summary\nDESCRIPTION: This Jinja template snippet generates a rubric and autosummary for exceptions within a Python module. It iterates through the `exceptions` list and creates individual entries for each exception using the `autosummary` directive. \nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/templates/autosummary/module.rst#_snippet_2\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block exceptions %}\n   {% if exceptions %}\n   .. rubric:: Exceptions\n\n   .. autosummary::\n   {% for item in exceptions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Splitting a String in Python\nDESCRIPTION: This Python code demonstrates how to split a string into a list of substrings using the `split()` method. The first example splits the string 'chad dombrova' by spaces. The second splits 'joint_01_left_leg' by underscores.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/mel_to_python.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbuf1 = 'chad dombrova'.split()\nbuf2 = 'joint_01_left_leg'.split('_')\n```\n\n----------------------------------------\n\nTITLE: Set MAYA_APP_DIR on Windows\nDESCRIPTION: Sets the `MAYA_APP_DIR` environment variable to a new directory to create a clean Maya environment for building documentation examples. It also launches Maya.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_14\n\nLANGUAGE: batch\nCODE:\n```\ncd %USERPROFILE%\\Documents\nmkdir maya_fixCodeExamples\nset MAYA_APP_DIR=%USERPROFILE%\\Documents\\maya_fixCodeExamples\nmaya\n```\n\n----------------------------------------\n\nTITLE: Getting camera translation procedurally\nDESCRIPTION: This snippet shows how to get the Z component of a camera's translation using a procedural approach with `listRelatives` and `xform`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncam = ls(type='camera')[0]\nparent = listRelatives(cam, p=1)[0]\ntrans = xform(parent,q=1,t=1)\n`trans`\n# Result: [28.0, 21.0, 28.0]\ntrans[2]\n# Result: 28.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Repository (Real PyPI)\nDESCRIPTION: This poetry command configures basic HTTP authentication for publishing to the real PyPI repository. Replace <username> and <password> with your actual credentials.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npoetry config http-basic.pypi <username> <password>\n```\n\n----------------------------------------\n\nTITLE: Sourcing a Script in MEL\nDESCRIPTION: This MEL code shows how to source a MEL script named `myScript.mel`.  Sourcing makes the procedures defined in the script available in the current context. The script must be on the `MAYA_SCRIPT_PATH` to be found.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/mel_to_python.rst#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nsource \"myScript.mel\";\n```\n\n----------------------------------------\n\nTITLE: Installing Nose on Windows using Maya's Python\nDESCRIPTION: This command installs the 'nose' testing framework using Maya's Python interpreter on Windows. 'Nose' is required to run PyMEL's unit tests. The command assumes proper environment setup for Maya development on Windows.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/dev.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmayapy.exe setup.py easy_install nose\n```\n\n----------------------------------------\n\nTITLE: PyMEL Script for Removing Duplicate Strings\nDESCRIPTION: This Python snippet demonstrates the PyMEL equivalent of the MEL script for removing duplicate strings from an array. It showcases PyMEL's more Pythonic and simplified syntax for calling MEL procedures.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvalues = ['one', 'two', 'three', 'four']\npm.mel.stringArrayRemoveDuplicates(values)\n```\n\n----------------------------------------\n\nTITLE: Run Changelog Script\nDESCRIPTION: Runs the changelog script to generate a changelog file based on the differences between two Git tags or commit hashes. The results are then copied from `maintenance/CHANGELOG.temp` to `CHANGELOG.rst`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n./maintenance/changelog $PREVIOUS_PYMEL_VERSION $CURRENT_REVISION\n```\n\n----------------------------------------\n\nTITLE: Testing PyMEL autocompletion\nDESCRIPTION: This snippet is intended to test if PyMEL autocompletion is working correctly in Eclipse. It calls pm.bin and should offer bindSkin() as a completion.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/eclipse.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npm.bin\n```\n\n----------------------------------------\n\nTITLE: OSX Shell Navigation\nDESCRIPTION: This command navigates the user to the directory where the pymel zip file was extracted, using the 'cd' command in the shell. It assumes the user downloaded and extracted the file to their 'Downloads' folder. The '~' symbol represents the user's home directory.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Downloads/pymel-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing cameras using maya.cmds\nDESCRIPTION: This snippet demonstrates how to list all cameras using the `maya.cmds` module. It returns a list of strings representing the camera names.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport maya.cmds as cmds\ncmds.ls(type='camera')\n# Result: [u'frontShape', u'perspShape', u'sideShape', u'topShape']\n```\n\n----------------------------------------\n\nTITLE: Component Creation Fix\nDESCRIPTION: Fixes an issue with creating a component using `Component('pCube1.vtx[3]')`. This ensures that component objects are properly created from strings.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nComponent('pCube1.vtx[3]')\n```\n\n----------------------------------------\n\nTITLE: Nurbs Curve CV Retrieval Fix\nDESCRIPTION: Fixes the failure of `nurbsCurveCV('nurbsCircle1')`. This ensures that CVs are correctly retrieved from Nurbs curves.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nnurbsCurveCV('nurbsCircle1')\n```\n\n----------------------------------------\n\nTITLE: Querying Object Translation Procedurally (MEL)\nDESCRIPTION: This snippet demonstrates how to query the translation of a camera object's parent using MEL commands within PyMEL. It first gets a list of cameras, then their parent and finally queries the translation values. The z component of the translation is then accessed.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nxform( listRelatives( ls(type='camera')[0], p=1)[0],q=1,t=1)[2]\n# Result: 28.0\n```\n\n----------------------------------------\n\nTITLE: Duplicate with Add Shape Fix\nDESCRIPTION: Fixes a bug with `duplicate(addShape=1)`. Ensures correct duplication of objects with the `addShape` flag enabled.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nduplicate(addShape=1)\n```\n\n----------------------------------------\n\nTITLE: Sets Function Fix\nDESCRIPTION: Fixes a bug with `sets()` when it returns lists.  Ensures the `sets()` function behaves correctly when returning lists of sets.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nsets()\n```\n\n----------------------------------------\n\nTITLE: Connect Attribute Error Handling Fix\nDESCRIPTION: Fixes a bug in `connectAttr()` that was preventing connection errors from being raised when the force flag was used. Connection errors are now properly raised when the force flag is used.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nconnectAttr()\n```\n\n----------------------------------------\n\nTITLE: File Node Association Fix\nDESCRIPTION: Fixes issue 80, regarding incorrect association of `nodetypes.File` with `cmds.file`. Ensures the correct association between `nodetypes.File` and the Maya command `cmds.file`.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/CHANGELOG.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nnodetypes.File\n```\n\nLANGUAGE: Python\nCODE:\n```\ncmds.file\n```\n\n----------------------------------------\n\nTITLE: Printing Scene Changes - PyMEL\nDESCRIPTION: This snippet calls the `diff()` function to print the changes detected in the scene since the `store()` function was last called.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndiff()\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template for Docstring\nDESCRIPTION: This Jinja2 template generates reStructuredText documentation for a Python object. It includes the full name, an underline, and directives for Sphinx to automatically document the module and the specified object type and name.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/templates/autosummary/base.rst#_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n{{ fullname }}\n{{ underline }}\n\n.. currentmodule:: {{ module }}\n\n.. auto{{ objtype }}:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Building PyMEL with Poetry\nDESCRIPTION: This poetry command builds a wheel package for PyMEL without interactive prompts and forces the build, ensuring a clean and reproducible build process.  It relies on the `pyproject.toml` file for configuration.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npoetry build -n -f wheel\n```\n\n----------------------------------------\n\nTITLE: MEL Script for Removing Duplicate Strings\nDESCRIPTION: This MEL snippet demonstrates how to remove duplicate strings from an array using the `stringArrayRemoveDuplicates` command. It shows the syntax required to pass a string array to the MEL command.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_0\n\nLANGUAGE: MEL\nCODE:\n```\nvalues = ['one', 'two', 'three', 'four']\nmaya.mel.eval('stringArrayRemoveDuplicates({\"'+'\",\"'.join(values)+'\"})')\n```\n\n----------------------------------------\n\nTITLE: Restore File Permissions on Windows\nDESCRIPTION: Restores the write permissions of the Maya preferences folder on Windows after locking them for building documentation.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_18\n\nLANGUAGE: batch\nCODE:\n```\nicacls maya_fixCodeExamples /remove:d %USERNAME%\n```\n\n----------------------------------------\n\nTITLE: MEL Script Transform Operations\nDESCRIPTION: This MEL snippet shows various operations on transform nodes, including listing transforms, connecting and disconnecting attributes, adding and setting string array attributes, getting and setting attributes, and calling a MEL procedure.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_9\n\nLANGUAGE: MEL\nCODE:\n```\nstring $objs[] = `ls -type transform`;\nfor ($x in $objs) {\n    print (longNameOf($x)); print \"\\n\";\n\n    // make and break some connections\n    connectAttr( $x + \".sx\") ($x + \".sy\");\n    connectAttr( $x + \".sx\") ($x + \".sz\");\n\n    // disconnect all connections to .sx\n    string $conn[] = `listConnections -s 0 -d 1 -p 1 ($x + \".sx\")`;\n    for ($inputPlug in $conn)\n        disconnectAttr ($x + \".sx\") $inputPlug;\n\n    // add and set a string array attribute with the history of this transform's shape\n    if ( !`attributeExists \"newAt\" $x`)\n        addAttr -ln newAt -dataType stringArray $x;\n    string $shape[] = `listRelatives -s $x`;\n    string $history[] = `listHistory $shape[0]`;\n    string $elements = \"\";\n    for ($elem in $history)\n        $elements += \\\" \\\" + $elem + \\\" \\\";\n    eval (\"setAttr -type stringArray \" + $x + \".newAt \" + `size $history` + $elements);\n    print `getAttr ( $x + \".newAt\" )`;\n\n    // get and set some attributes\n    setAttr ($x + \".rotate\") 1 1 1;\n    float $trans[] = `getAttr ($x + \".translate\")`;\n    float $scale[] = `getAttr ($x + \".scale\")`;\n    $trans[0] *= $scale[0];\n    $trans[1] *= $scale[1];\n    $trans[2] *= $scale[2];\n    setAttr ($x + \".scale\") $trans[0] $trans[1] $trans[2];\n\n    // call a mel procedure\n    myMelScript( `nodeType $x`, $trans );\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Tags to Origin\nDESCRIPTION: This git command pushes all local tags to the remote repository (origin). This ensures that the newly created tag for the PyMEL release is available to other developers and the build system.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin --tags\n```\n\n----------------------------------------\n\nTITLE: Restore File Permissions on Linux/MacOS\nDESCRIPTION: Restores the write permissions of the Maya preferences folder on Linux/MacOS after locking them for building documentation. This is achieved using the `chmod` command to add write permissions for the user.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nchmod -R u+w maya_fixCodeExamples\n```\n\n----------------------------------------\n\nTITLE: Printing PYTHONPATH (Python)\nDESCRIPTION: This Python code iterates through the sys.path list and prints each path. This is useful for determining the current Python path and verifying that PyMEL has been added correctly. It can be executed from the Python tab in Maya's script editor.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfor i in sys.path: print i\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AttributeError with Shorthand Notation\nDESCRIPTION: This snippet demonstrates how an AttributeError is raised when accessing a non-existent attribute using shorthand notation (x.myAttr). It creates a polySphere named 'moon' and attempts to access the non-existent attribute 'myAttr'.  Since shorthand notation can also be used for function access, AttributeError is raised instead of MayaAttributeError.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> x = polySphere(name='moon')[0]\n>>> x.myAttr\nTraceback (most recent call last):\n    ...\nAttributeError: Transform(u'moon') has no attribute or method named 'myAttr'\n```\n\n----------------------------------------\n\nTITLE: Importing PyMEL core\nDESCRIPTION: Imports the pymel.core module as pm. This is a standard practice when working with PyMEL to shorten code and improve readability.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/eclipse.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymel.core as pm\n```\n\n----------------------------------------\n\nTITLE: Testing Attribute Existence using objExists Function\nDESCRIPTION: This snippet demonstrates how to check if an attribute exists using the objExists function. It attempts to find an attribute named 'persp.spangle' and prints a message indicating whether it exists or not.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> if objExists('persp.spangle'):\n...     print \"Attribute Exists\"\n... else:\n...     print \"Attribute Doesn't Exist\"\nAttribute Doesn't Exist\n```\n\n----------------------------------------\n\nTITLE: Tokenizing a String in MEL\nDESCRIPTION: This MEL code demonstrates how to use the `tokenize` command to split a string into an array of substrings. The first example splits the string \"chad dombrova\" by spaces. The second splits \"joint_01_left_leg\" by underscores.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/mel_to_python.rst#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstring $buf1[];\ntokenize( \"chad dombrova\", $buf1 );\nstring $buf2[];\ntokenize( \"joint_01_left_leg\", $buf2, \"_\" );\n```\n\n----------------------------------------\n\nTITLE: Running ipymel (Shell)\nDESCRIPTION: This shell command is used to launch the ipymel interpreter. It assumes that ipymel is installed and configured correctly, including setting the necessary environment variables.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nipymel\n```\n\n----------------------------------------\n\nTITLE: Windows Shell Navigation\nDESCRIPTION: This command navigates the user to the directory where the pymel zip file was extracted, using the 'cd' command in the Windows command prompt. It assumes the user downloaded and extracted the file to their desktop. The directory path is enclosed in double quotes because it contains spaces.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\ncd \"C:\\Desktop\\pymel-1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a sphere and overwriting sphere command\nDESCRIPTION: This snippet demonstrates the danger of overwriting Python functions when importing PyMEL into the root namespace. It creates a sphere, then assigns a string value to the 'sphere' variable, effectively overwriting the sphere command. Trying to call `sphere()` afterwards will cause an error.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\ns = sphere() # create a nurbsSphere\nsphere = 'mySphere'  # oops, we've overwritten the sphere command with a string\nsphere()\n# Error: name 'sphere' is not defined\n# Traceback (most recent call last):\n#   File \"<maya console>\", line 1, in <module>\n# NameError: name 'sphere' is not defined # \n```\n\n----------------------------------------\n\nTITLE: Changing file permissions (Shell)\nDESCRIPTION: This shell command changes the permissions of the ipymel executable to allow all users to execute it. This may be necessary after a manual installation of ipymel.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nchmod 777 `which ipymel`\n```\n\n----------------------------------------\n\nTITLE: Install Custom Mypy Version\nDESCRIPTION: Installs a custom version of Mypy from a specific GitHub branch, which includes stub generation changes. This is a temporary step to support generating stubs for Pymel.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install -U mypy @ git+https://github.com/chadrik/mypy@stubgen-for-pymel\n```\n\n----------------------------------------\n\nTITLE: Immutability Example - Python\nDESCRIPTION: Illustrates immutability with Python strings.  String operations create new strings, leaving the original intact.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = 'hampster dance'\n>>> s2 = s1.replace('hampster', 'chicken')\n>>> s1\n'hampster dance'\n>>> s2\n'chicken dance'\n```\n\n----------------------------------------\n\nTITLE: Generate Stubs (Deprecated)\nDESCRIPTION: Generates Python stubs for Pymel using a deprecated method. It sets up the environment, adds the Pymel path to the system path, sets the `PYMEL_DOCSTRINGS_MODE` environment variable, and then calls `maintenance.pymelstubs.pymelstubs()` to generate the stubs.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport sys, os\npymelPath = r'/Volumes/sv-dev01/devRepo/chad/pymel'   # ...or wherever YOUR pymel version is installed\nif not os.path.isfile(os.path.join(pymelPath, 'pymel', '__init__.py')):\n    raise RuntimeError('invalid pymel path: %s' % pymelPath)\nif sys.path[0] != pymelPath:\n    sys.path.insert(0, pymelPath)\nos.environ['PYMEL_DOCSTRINGS_MODE'] = 'stubs'\nimport maintenance.pymelstubs\nreload(maintenance.pymelstubs)\nmaintenance.pymelstubs.pymelstubs()\n```\n\n----------------------------------------\n\nTITLE: String Reassignment - Python\nDESCRIPTION: Shows explicit reassignment to a string variable, necessary due to string immutability.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = 'brand new dance!'\n```\n\n----------------------------------------\n\nTITLE: Python Transform Operations with maya.cmds\nDESCRIPTION: This Python snippet shows the beginning of the equivalent functionality using maya.cmds for the transform operations in the MEL example. It is incomplete, but demonstrates how much more verbose maya.cmds is compared to PyMEL.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/README.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport maya.cmds as cmds\nobjs = cmds.ls(type='transform')\n```\n\n----------------------------------------\n\nTITLE: Importing setup.py and running tests (Python)\nDESCRIPTION: This Python code imports the setup.py file and runs the test_dynload_modules function. This is used to identify any compiled modules that are not working correctly due to missing system libraries. It's part of the Linux troubleshooting steps.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport setup\nsetup.test_dynload_modules()\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in Strings\nDESCRIPTION: This snippet provides examples of how to format numbers within strings using the `%f` (float) and `%d` (integer) format specifiers. It demonstrates controlling precision and padding.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> \"You can control precision %.02f and padding %04d\" % ( 1.2345, 2 )\n'You can control precision 1.23 and padding 0002'\n```\n\n----------------------------------------\n\nTITLE: Listing library files (Shell)\nDESCRIPTION: This shell command lists the library files that start with 'libssl' in the /lib64/ directory (or /lib/ on a 32-bit OS). This is used to identify the available versions of the libssl library.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncd /lib64\nls -la libssl*\n```\n\n----------------------------------------\n\nTITLE: Procedural Code Example in Maya (MEL command)\nDESCRIPTION: This code snippet demonstrates how to retrieve the Z-coordinate of the translate attribute of a camera's parent using a series of nested MEL commands accessible through maya.cmds in Python.  It involves listing cameras, finding the parent of the first camera, accessing the translate attribute, and extracting the Z value.  This highlights the complexity and lack of readability in procedural Maya scripting.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/why_pymel.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncmds.getAttr( cmds.listRelatives( cmds.ls(type='camera')[0], p=1 )[0] + '.translate' )[0][2]\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Code Example in PyMEL\nDESCRIPTION: This code snippet demonstrates the object-oriented approach in PyMEL to achieve the same result as the procedural example. It uses method chaining to navigate the Maya scene graph, retrieve the translate attribute of the camera's parent, and extract the Z-coordinate.  It showcases improved readability and intuitive syntax compared to the procedural approach using maya.cmds.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/why_pymel.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npymel.ls(type='camera')[0].getParent().translate.get().z\n```\n\n----------------------------------------\n\nTITLE: OSX System-Level Environment Setup (Bash)\nDESCRIPTION: This bash script sets up the system-level environment for Maya and PyMEL on OSX. It sets the MAYA_LOCATION variable to the Maya installation directory, adds the Maya bin directory to the PATH, and sets the PYTHONPATH to include the PyMEL directory.  This should be added to the .profile file in the user's home directory.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport MAYA_LOCATION=/Applications/Autodesk/maya2009/Maya.app/Contents\nexport PATH=$MAYA_LOCATION/bin:$PATH\nexport PYTHONPATH=/path/to/pymel-1.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting up PyMEL for Development\nDESCRIPTION: This command is used to set up the PyMEL development environment within Maya. It allows Maya to use the checked-out version of PyMEL. It requires specifying the path to the Maya installation's 'mayapy' executable.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/dev.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPATH/TO/MAYA/INSTALL/bin/mayapy setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Windows PyMEL Installation using mayapy\nDESCRIPTION: These commands install PyMEL for different Maya versions using the 'mayapy.exe' executable in the Windows command prompt. The path to 'mayapy.exe' is enclosed in double quotes because it contains spaces. 'setup.py install' initiates the PyMEL installation process.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n\"C:\\Program Files\\Autodesk\\Maya2008\\bin\\mayapy.exe\" setup.py install\n\"C:\\Program Files\\Autodesk\\Maya2009\\bin\\mayapy.exe\" setup.py install\n\"C:\\Program Files\\Autodesk\\Maya2010\\bin\\mayapy.exe\" setup.py install\n```\n\n----------------------------------------\n\nTITLE: Setting Attribute Values in pymel\nDESCRIPTION: This snippet demonstrates how to set attribute values using the `Attribute.set` method. It shows that any iterable with the correct number of elements can be used to set attributes that expect multiple values (e.g., double3).\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> cam.translateX.set(0)\n\nto set an attribute that expects a double3, you can use any iterable with 3 elements:\n\n>>> cam.translate.set([4,5,6])\n>>> cam.translate.set(datatypes.Vector([4,5,6]))\n```\n\n----------------------------------------\n\nTITLE: Setting PATH environment variable (Linux)\nDESCRIPTION: This shell command sets the PATH environment variable to include the Maya bin directory and the ipymel bin directory, allowing executables in these directories to be accessed from the shell.  The $PATH variable is appended to ensure existing paths are preserved.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/install.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$MAYA_LOCATION/bin:/path/to/pymel-1.0.0/pymel/tools/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Attribute Usage Example in pymel\nDESCRIPTION: This example demonstrates basic usage of the Attribute class, including checking if an attribute is keyable and locked, setting its value, and locking it. It also shows how to access an attribute's type using shortnames.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/attributes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pymel.core import *\n>>> cam = general.PyNode('persp')\n>>> if cam.visibility.isKeyable() and not cam.visibility.isLocked():\n...     cam.visibility.set( True )\n...     cam.visibility.lock()\n... \n>>> print cam.v.type()      # shortnames also work\n```\n\n----------------------------------------\n\nTITLE: Querying Object Translation Object-Oriented (PyMEL)\nDESCRIPTION: This snippet demonstrates how to query the Z translation of a camera object's parent using an object-oriented approach in PyMEL. It retrieves the camera, gets its parent, and then gets the translation vector, finally accessing the Z component.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nls(type='camera')[0].getParent().getTranslation().z\n# Result: 28.0\n```\n\n----------------------------------------\n\nTITLE: Camera Manipulation with PyMEL\nDESCRIPTION: This snippet demonstrates how to create and manipulate a camera in PyMEL, setting its focal length, field of view, dollying, tracking, and adding a bookmark.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> cam = nodetypes.Camera(name='newCam')\n>>> cam.setFocalLength(100)\n>>> cam.getHorizontalFieldOfView()\n20.407947443463367\n>>> cam.dolly(distance=-3)\n>>> cam.track(left=10)\n>>> cam.addBookmark('new')\n```\n\n----------------------------------------\n\nTITLE: Testing Node Existence using objExists Function\nDESCRIPTION: This snippet demonstrates how to check if a node exists using the objExists function. It attempts to find a node named 'fooBar' and prints a message indicating whether it exists or not.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> if objExists('fooBar'): \n...     print \"It Exists\"\n... else:\n...     print \"It Doesn't Exist\"\nIt Doesn't Exist\n```\n\n----------------------------------------\n\nTITLE: Creating Objects and Storing State - PyMEL\nDESCRIPTION: This snippet creates a sphere and a cube, then stores their initial state using the `store()` function defined previously.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ns = sphere()[0]\nc = polyCube(ch=0)[0]\nstore()  # save the state of the current scene\n```\n\n----------------------------------------\n\nTITLE: Starting a new Maya scene\nDESCRIPTION: This snippet uses the `newFile` function to create a new Maya scene. The `f=1` flag forces the creation of a new scene, discarding any unsaved changes in the current scene.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/tutorial.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf=newFile(f=1) #start clean\n```\n\n----------------------------------------\n\nTITLE: Button Command with Lambda in PyMEL\nDESCRIPTION: This snippet demonstrates how to create a button with a lambda function as its command in PyMEL. However, it also highlights the common issue where all buttons end up executing the same command with the last value of the loop variable. The issue arises because the lambda captures the variable, not the value at the time of creation.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/ui.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbutton( label=name, command = lambda *args: buttonPressed(name) )\n```\n\n----------------------------------------\n\nTITLE: Publishing to Test PyPI\nDESCRIPTION: This poetry command publishes the PyMEL package to the test PyPI repository using the configured repository. It's essential to verify the package on test PyPI before publishing to the main PyPI repository.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npoetry publish -r testpypi\n```\n\n----------------------------------------\n\nTITLE: Mutability Example - Python\nDESCRIPTION: Illustrates mutability with a Python list. The list is modified in place without reassignment.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/pynodes.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> numbers = [1,2,3]\n>>> numbers.append(4)\n>>> numbers\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Build Docs (Pymel Imported)\nDESCRIPTION: Builds Pymel documentation in Maya, requiring that Pymel is imported before the documentation build process begins. It adds the Pymel path to the system path and calls `docs.build()` to generate the documentation.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport sys, os\npymelPath = r'/Volumes/sv-dev01/devRepo/chad/pymel'   # ...or wherever YOUR pymel version is installed\nif not os.path.isfile(os.path.join(pymelPath, 'pymel', '__init__.py')):\n    raise RuntimeError('invalid pymel path: %s' % pymelPath)\nif sys.path[0] != pymelPath:\n    sys.path.insert(0, pymelPath)\nimport maintenance.docs as docs\nassert docs.__file__.startswith(pymelPath)\ndocs.build(graphviz_dot=None)  #specify the location of dot executable if not on the PATH\n```\n\n----------------------------------------\n\nTITLE: Set MAYA_APP_DIR on Linux/MacOS\nDESCRIPTION: Sets the `MAYA_APP_DIR` environment variable to a new directory to create a clean Maya environment for building documentation examples. It also launches Maya.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncd ~\nmkdir maya_fixCodeExamples\nexport MAYA_APP_DIR=~/maya_fixCodeExamples\nmaya\n```\n\n----------------------------------------\n\nTITLE: Run tests on Windows\nDESCRIPTION: Executes Pymel tests on Windows, treating warnings as errors. The output is written to `pymelTestOut.txt`. Since Windows doesn't have the `tee` command, the output is not displayed in the console but can be viewed by opening `pymelTestOut.txt` in a text editor.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\npymel_test_output.bat --warnings-as-errors\n```\n\n----------------------------------------\n\nTITLE: Defining a Procedure in MEL\nDESCRIPTION: This MEL code defines a global procedure named `myproc` that takes a string and an integer as arguments and prints them to the console.  It illustrates the syntax for defining procedures in MEL.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/mel_to_python.rst#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nglobal proc myproc( string $arg1, int $arg2 )\n{\n    print ($arg1 + \" \" + arg2 + \"\\n\" );\n}\n```\n\n----------------------------------------\n\nTITLE: Run Stub Generator Script\nDESCRIPTION: Executes the `genstubs.sh` script to generate Python stubs (`.pyi` files) for Pymel. These stubs will then be packaged up by Poetry.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmaintenance/genstubs.sh\n```\n\n----------------------------------------\n\nTITLE: Git Tagging for PyMEL Release\nDESCRIPTION: This git command creates an annotated tag for a specific PyMEL release. The tag name follows a versioning scheme, and the message provides a brief description of the release. This tag is crucial for Poetry to accurately determine the package version during the build process.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/maintenance/BUILDING.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 1.0.5rc1 -m \"pymel release 1.0.5rc1\"\n```\n\n----------------------------------------\n\nTITLE: Raising TypeError for Incorrect Node Type\nDESCRIPTION: This snippet shows how a TypeError is raised if the determined node type does not match the requested type. It demonstrates attempting to create a DagNode from a Lambert node.\nSOURCE: https://github.com/lumapictures/pymel/blob/master/docs/source/non_existent_objs.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> nt.DagNode('lambert1')\nTraceback (most recent call last):\n...\nTypeError: Determined type is Lambert, which is not a subclass of desired type DagNode\n```"
  }
]