[
  {
    "owner": "fedify-dev",
    "repo": "fedify",
    "content": "TITLE: Creating a Memorialized Actor Profile with Fedify (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a new Person object with the memorial property set to true, using the Fedify library. By adding memorial: true, the actor's profile is displayed as memorialized within Mastodon-compatible platforms. Required dependency: @fedify/fedify. Key parameters include name, preferredUsername, summary, and optional attributes. The input is a configuration object, and the resulting Person is used to represent an ActivityPub actor.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Person } from \"@fedify/fedify\";\n// ---cut-before---\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  memorial: true,  // [!code highlight]\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Federation with Web Frameworks and Using Context Data in TypeScript\nDESCRIPTION: This snippet shows how to integrate the Federation object with web frameworks and use context data. It demonstrates passing a database pool as context data to the federation.fetch method.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function handler(request: Request, context: FreshContext) {\n  return federation.fetch(request, {\n    contextData: getPool(),\n    onNotFound: context.next.bind(context),\n    onNotAcceptable: async (request: Request) => {\n      // Omitted for brevity\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying and Sending a Create Activity with Recipients (Fedify, TypeScript)\nDESCRIPTION: Provides a complete example of sending a Create activity using Fedify's Context.sendActivity method in TypeScript. Demonstrates assembling a Create object containing a Note, with properties such as id, actor, object, to (for the primary audience), and cc (secondary recipients like followers), using proper URIs. The function parameters include senderId, recipients, and content. It leverages PUBLIC_COLLECTION for public visibility and Context.getFollowersUri for targeting followers. Explicitly setting id and to/cc ensures correct routing and uniqueness.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type Context, Create, Note, type Actor, PUBLIC_COLLECTION,\n} from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst senderId: string = \"\";\nconst noteId: string = \"\";\nconst content: string = \"\";\nconst recipients: Actor[] = [];\n// ---cut-before---\nawait ctx.sendActivity(\n  { identifier: senderId },\n  recipients,\n  new Create({\n    id: new URL(`#create`, ctx.getObjectUri(Note, { id: noteId })),\n    actor: ctx.getActorUri(senderId),\n    object: new Note({\n      id: ctx.getObjectUri(Note, { id: noteId }),\n      attribution: ctx.getActorUri(senderId),\n      to: PUBLIC_COLLECTION,\n      cc: ctx.getFollowersUri(senderId),\n      content,\n    }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Routing Remote Actor Activities to Inbox Listeners in TypeScript\nDESCRIPTION: Demonstrates how to look up a remote actor, retrieve their outbox, iterate over the collection, and route each Activity to the inbox listener using Context.routeActivity. Requires @fedify/fedify, and uses lookupObject, isActor, getOutbox, and traverseCollection utilities. The main function expects a Context instance; outputs are asynchronous operations to send valid Activity instances through manual routing. Activities are only routed if they pass actor verification.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Context, isActor } from \"@fedify/fedify\";\n\nasync function main(context: Context<void>) {\n// ---cut-before---\nconst actor = await context.lookupObject(\"@hongminhee@fosstodon.org\");\nif (!isActor(actor)) return;\nconst collection = await actor.getOutbox();\nif (collection == null) return;\nfor await (const item of context.traverseCollection(collection)) {\n  if (item instanceof Activity) {\n    await context.routeActivity(null, item);\n  }\n}\n// ---cut-after---\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Object Dispatcher for ActivityPub\nDESCRIPTION: Complete implementation of the Note object dispatcher that retrieves post data from the database and formats it as an ActivityPub Note object. It sets proper attribution, visibility (public), and delivery options for federation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setObjectDispatcher(\n  Note,\n  \"/users/{identifier}/posts/{id}\",\n  (ctx, values) => {\n    const post = db\n      .prepare<unknown[], Post>(\n        `\n        SELECT posts.*\n        FROM posts\n        JOIN actors ON actors.id = posts.actor_id\n        JOIN users ON users.id = actors.user_id\n        WHERE users.username = ? AND posts.id = ?\n        `,\n      )\n      .get(values.identifier, values.id);\n    if (post == null) return null;\n    return new Note({\n      id: ctx.getObjectUri(Note, values),\n      attribution: ctx.getActorUri(values.identifier),\n      to: PUBLIC_COLLECTION,\n      cc: ctx.getFollowersUri(values.identifier),\n      content: post.content,\n      mediaType: \"text/html\",\n      published: Temporal.Instant.from(`${post.created.replace(\" \", \"T\")}Z`),\n      url: ctx.getObjectUri(Note, values),\n    });\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Inbox Listeners in Fedify\nDESCRIPTION: This snippet demonstrates how to register inbox listeners for both personal and shared inboxes using Fedify. It shows how to handle a Follow activity by sending an Accept response.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Follow, async (ctx, follow) => {\n    if (follow.objectId == null) return;\n    const parsed = ctx.parseUri(follow.objectId);\n    if (parsed?.type !== \"actor\") return;\n    const recipient = await follow.getActor(ctx);\n    if (recipient == null) return;\n    await ctx.sendActivity(\n      { identifier: parsed.identifier },\n      recipient,\n      new Accept({ actor: follow.objectId, object: follow }),\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actors with Inbox URIs Using Fedify (TypeScript)\nDESCRIPTION: This snippet configures the Federation instance to resolve an actor's resource, including its inbox URI, with a dedicated dispatcher function. It returns a Person actor object with relevant ActivityPub fields populated, including 'inbox' for proper ActivityPub communication. The dispatcher only handles the identifier 'me'. Dependencies are '@fedify/fedify', and inputs are the HTTP context and actor identifier. The main constraint is that only 'me' can be dispatched.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Federation, Person } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nfederation.setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n  if (identifier !== \"me\") return null;\n  return new Person({\n    id: ctx.getActorUri(identifier),\n    name: \"Me\",\n    summary: \"This is me!\",\n    preferredUsername: identifier,\n    url: new URL(\"/\", ctx.url),\n    inbox: ctx.getInboxUri(identifier),  // Inbox URI // [!code highlight]\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling POST Request for User and Actor Creation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to handle a POST request to create both user and actor records. It includes form data validation, database transactions, and uses the Fedify context for generating ActivityPub-related URLs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/setup\", async (c) => {\n  // Check if an account already exists\n  const user = db\n    .prepare<unknown[], User>(\n      `\n      SELECT * FROM users\n      JOIN actors ON (users.id = actors.user_id)\n      LIMIT 1\n      `,\n    )\n    .get();\n  if (user != null) return c.redirect(\"/\");\n\n  const form = await c.req.formData();\n  const username = form.get(\"username\");\n  if (typeof username !== \"string\" || !username.match(/^[a-z0-9_-]{1,50}$/)) {\n    return c.redirect(\"/setup\");\n  }\n  const name = form.get(\"name\");\n  if (typeof name !== \"string\" || name.trim() === \"\") {\n    return c.redirect(\"/setup\");\n  }\n  const url = new URL(c.req.url);\n  const handle = `@${username}@${url.host}`;\n  const ctx = fedi.createContext(c.req.raw, undefined);\n  db.transaction(() => {\n    db.prepare(\"INSERT OR REPLACE INTO users (id, username) VALUES (1, ?)\").run(\n      username,\n    );\n    db.prepare(\n      `\n      INSERT OR REPLACE INTO actors\n        (user_id, uri, handle, name, inbox_url, shared_inbox_url, url)\n      VALUES (1, ?, ?, ?, ?, ?, ?)\n    `,\n    ).run(\n      ctx.getActorUri(username).href,\n      handle,\n      name,\n      ctx.getInboxUri(username).href,\n      ctx.getInboxUri().href,\n      ctx.getActorUri(username).href,\n    );\n  })();\n  return c.redirect(\"/\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Non-blocking Inbox Listeners with Message Queue - Fedify (TypeScript)\nDESCRIPTION: Illustrates configuring createFederation with a message queue to make inbox listener tasks non-blocking and asynchronous. Shows in-memory InProcessMessageQueue usage for test/dev, highlighting where the queue option fits in Federation construction. Relies on @fedify/fedify for imports; main parameters are the queue instance and any other Fedify federation options. Production deployments should use persistent queues.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\nimport { createFederation, InProcessMessageQueue } from \"@fedify/fedify\";\n\nconst federation = createFederation({\n  // Omitted for brevity; see the related section for details.\n  queue: new InProcessMessageQueue(),  // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Activity Handler for ActivityPub Notes\nDESCRIPTION: Code for handling incoming Create activities containing Notes in the federation.ts file. It verifies the actor, extracts the note content, and persists it to the database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Create, async (ctx, create) => {\n    const object = await create.getObject();\n    if (!(object instanceof Note)) return;\n    const actor = create.actorId;\n    if (actor == null) return;\n    const author = await object.getAttribution();\n    if (!isActor(author) || author.id?.href !== actor.href) return;\n    const actorId = (await persistActor(author))?.id;\n    if (actorId == null) return;\n    if (object.id == null) return;\n    const content = object.content?.toString();\n    db.prepare(\n      \"INSERT INTO posts (uri, actor_id, content, url) VALUES (?, ?, ?, ?)\",\n    ).run(object.id.href, actorId, content, object.url?.href);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Fedify Actor and Key Pair Dispatchers in TypeScript\nDESCRIPTION: Demonstrates setting up asynchronous callbacks in Fedify to dynamically load actor information and their associated cryptographic key pairs (e.g., from a database) based on an identifier. The `setActorDispatcher` retrieves actor details, mapping the first key to `publicKey` and all keys to `assertionMethods`, while `setKeyPairsDispatcher` provides the raw `CryptoKeyPair` objects. Requires `@fedify/fedify`.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Federation, Person } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\ninterface User {}\nconst user = null as User | null;\nconst publicKey1 = null as unknown as CryptoKey;\nconst privateKey1 = null as unknown as CryptoKey;\nconst publicKey2 = null as unknown as CryptoKey;\nconst privateKey2 = null as unknown as CryptoKey;\n// ---cut-before---\nfederation.setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n  // Work with the database to find the actor by the identifier.\n  if (user == null) return null;  // Return null if the actor is not found.\n  // Context.getActorKeyPairs() method dispatches the key pairs of an actor\n  // by the identifier, and returns an array of key pairs in various formats:\n  const keys = await ctx.getActorKeyPairs(identifier);\n  return new Person({\n    id: ctx.getActorUri(identifier),\n    preferredUsername: identifier,\n    // For the publicKey property, we only use first CryptographicKey:\n    publicKey: keys[0].cryptographicKey,\n    // For the assertionMethods property, we use all Multikey instances:\n    assertionMethods: keys.map((key) => key.multikey),\n    // Many more properties; see the previous section for details.\n  });\n})\n  .setKeyPairsDispatcher(async (ctx, identifier) => {\n    // Work with the database to find the key pair by the identifier.\n    if (user == null) return [];  // Return null if the key pair is not found.\n    // Return the loaded key pair.  See the below example for details.\n    return [\n      { publicKey: publicKey1, privateKey: privateKey1 },\n      { publicKey: publicKey2, privateKey: privateKey2 },\n      // ...\n    ];\n  });\n```\n\n----------------------------------------\n\nTITLE: Decoupling Fedify Actor URIs and WebFinger Usernames in TypeScript\nDESCRIPTION: Implements decoupling of WebFinger usernames from stable actor identifiers (like UUIDs) using Fedify's `mapHandle` method. The `mapHandle` callback looks up the stable identifier based on the provided username (e.g., from a database). The `setActorDispatcher` is then configured to use this stable identifier, allowing usernames to change independently of the actor's canonical URI. Requires `@fedify/fedify` and user lookup logic.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2391 2345\nimport { type Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\ninterface User { uuid: string; }\n/**\n * It's a hypothetical function that finds a user by the UUID.\n * @param uuid The UUID of the user.\n * @returns The user object.\n */\nfunction findUserByUuid(uuid: string): User;\n/**\n * It's a hypothetical function that finds a user by the username.\n * @param username The username of the user.\n * @returns The user object.\n */\nfunction findUserByUsername(username: string): User;\n// ---cut-before---\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    // Since we map a WebFinger username to the corresponding user's UUID below,\n    // the `identifier` parameter is the user's UUID, not the WebFinger\n    // username:\n    const user = await findUserByUuid(identifier);\n    // Omitted for brevity; see the previous example for details.\n  })\n  .mapHandle(async (ctx, username) => {\n    // Work with the database to find the user's UUID by the WebFinger username.\n    const user = await findUserByUsername(username);\n    if (user == null) return null;  // Return null if the actor is not found.\n    return user.uuid;\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom KvStore Interface in Fedify (TypeScript)\nDESCRIPTION: Demonstrates how to implement the KvStore interface by creating a custom class MyCustomKvStore with asynchronous get, set, and delete methods. This example serves as a blueprint for integrating any custom storage backend compatible with the KvStore interface in Fedify. Dependencies include the KvStore, KvKey, and KvStoreSetOptions types from @fedify/fedify, and keys/values are handled generically.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KvStore, KvKey, KvStoreSetOptions } from \"@fedify/fedify\";\nclass MyCustomKvStore implements KvStore {\n  async get<T = unknown>(key: KvKey): Promise<T | undefined> {\n    return undefined;\n  }\n  async set(\n    key: KvKey,\n    value: unknown,\n    options?: KvStoreSetOptions\n  ): Promise<void> {\n  }\n  async delete(key: KvKey): Promise<void> {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Actor Dispatcher in Fedify using TypeScript\nDESCRIPTION: This snippet demonstrates how to register an actor dispatcher using `federation.setActorDispatcher()` in Fedify. It defines an asynchronous callback function associated with the URI template `/users/{identifier}`. This callback retrieves actor data based on the `identifier` (potentially from a database), returning a `Person` object with properties like `id` (generated using `ctx.getActorUri()`) and `preferredUsername`, or `null` if the actor is not found. It relies on the `@fedify/fedify` library.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2451 2345\nimport type { Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\ninterface User { }\nconst user = null as User | null;\n// ---cut-before---\nimport { createFederation, Person } from \"@fedify/fedify\";\n\nconst federation = createFederation({\n  // Omitted for brevity; see the related section for details.\n});\n\nfederation.setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n  // Work with the database to find the actor by the identifier.\n  if (user == null) return null;  // Return null if the actor is not found.\n  return new Person({\n    id: ctx.getActorUri(identifier),\n    preferredUsername: identifier,\n    // Many more properties; see the next section for details.\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Followers Collection for One-Shot Recipient Gathering in TypeScript\nDESCRIPTION: Demonstrates how to optimize a followers collection dispatcher for one-shot gathering of recipients when using Context.sendActivity(). This implementation returns the entire collection when cursor is null, facilitating efficient recipient collection.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setFollowersDispatcher(\n    \"/users/{identifier}/followers\",\n    async (ctx, identifier, cursor) => {\n      // If a whole collection is requested, returns the entire collection\n      // instead of paginating it, as we prefer one-shot gathering:\n      if (cursor == null) {\n        // Work with the database to find the actors that are following the actor\n        // (the below `getFollowersByUserId` is a hypothetical function):\n        const { users } = await getFollowersByUserId(identifier);\n        return {\n          items: users.map(actor => ({\n            id: new URL(actor.uri),\n            inboxId: new URL(actor.inboxUri),\n          })),\n        };\n      }\n      const { users, nextCursor, last } = await getFollowersByUserId(\n        identifier,\n        cursor === \"\" ? { limit: 10 } : { cursor, limit: 10 }\n      );\n      // Turn the users into `Recipient` objects:\n      const items: Recipient[] = users.map(actor => ({\n        id: new URL(actor.uri),\n        inboxId: new URL(actor.inboxUri),\n      }));\n      return { items, nextCursor: last ? null : nextCursor };\n    }\n  )\n  // The first cursor is an empty string:\n  .setFirstCursor(async (ctx, identifier) => \"\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Dispatcher for Federation in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement an actor dispatcher for federation. It queries the database for user and actor information and constructs a Person object for ActivityPub responses.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n  const user = db\n    .prepare<unknown[], User & Actor>(\n      `\n      SELECT * FROM users\n      JOIN actors ON (users.id = actors.user_id)\n      WHERE users.username = ?\n      `,\n    )\n    .get(identifier);\n  if (user == null) return null;\n\n  return new Person({\n    id: ctx.getActorUri(identifier),\n    preferredUsername: identifier,\n    name: user.name,\n    inbox: ctx.getInboxUri(identifier),\n    endpoints: new Endpoints({\n      sharedInbox: ctx.getInboxUri(),\n    }),\n    url: ctx.getActorUri(identifier),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering an Object Dispatcher in Fedify using TypeScript\nDESCRIPTION: This snippet demonstrates how to register an object dispatcher for the `Note` class using `federation.setObjectDispatcher`. It takes the class, a URI template (`/users/{userId}/notes/{noteId}`), and an asynchronous callback function. The callback receives the context (`ctx`) and destructured URL parameters (`userId`, `noteId`), retrieves the corresponding note data (simulated here), and returns a new `Note` instance with its properties, including a dynamically generated ID using `ctx.getObjectUri`. If the note is not found, it should return `null`.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/object.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\nconst note: { id: string; content: string } = { id: \"\", content: \"\" };\n// ---cut-before---\nimport { createFederation, Note } from \"@fedify/fedify\";\n\nconst federation = createFederation({\n  // Omitted for brevity; see the related section for details.\n});\n\nfederation.setObjectDispatcher(\n  Note,\n  \"/users/{userId}/notes/{noteId}\",\n  async (ctx, { userId, noteId }) => {\n    // Work with the database to find the note by the author ID and the note ID.\n    if (note == null) return null;  // Return null if the note is not found.\n    return new Note({\n      id: ctx.getObjectUri(Note, { userId, noteId }),\n      content: note.content,\n      // Many more properties...\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Federation Object with MemoryKvStore in TypeScript\nDESCRIPTION: Creates a new `Federation` instance using the `createFederation` function from the `@fedify/fedify` package. It configures the instance to use an in-memory key-value store (`MemoryKvStore`) for caching and queue management, suitable for testing or development. Other configuration options are omitted for brevity.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation, MemoryKvStore } from \"@fedify/fedify\";\n\nconst federation = createFederation<void>({\n  kv: new MemoryKvStore(),\n  // Omitted for brevity; see the following sections for details.\n});\n```\n\n----------------------------------------\n\nTITLE: Actor and Key Pairs Dispatcher Implementation\nDESCRIPTION: Implements federation dispatchers for handling actor information and cryptographic key pairs, including key generation and storage in SQLite database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    const user = db\n      .prepare<unknown[], User & Actor>(\n        `\n        SELECT * FROM users\n        JOIN actors ON (users.id = actors.user_id)\n        WHERE users.username = ?\n        `,\n      )\n      .get(identifier);\n    if (user == null) return null;\n\n    const keys = await ctx.getActorKeyPairs(identifier);\n    return new Person({\n      id: ctx.getActorUri(identifier),\n      preferredUsername: identifier,\n      name: user.name,\n      inbox: ctx.getInboxUri(identifier),\n      endpoints: new Endpoints({\n        sharedInbox: ctx.getInboxUri(),\n      }),\n      url: ctx.getActorUri(identifier),\n      publicKey: keys[0].cryptographicKey,\n      assertionMethods: keys.map((k) => k.multikey),\n    });\n  })\n  .setKeyPairsDispatcher(async (ctx, identifier) => {\n    const user = db\n      .prepare<unknown[], User>(\"SELECT * FROM users WHERE username = ?\")\n      .get(identifier);\n    if (user == null) return [];\n    const rows = db\n      .prepare<unknown[], Key>(\"SELECT * FROM keys WHERE keys.user_id = ?\")\n      .all(user.id);\n    const keys = Object.fromEntries(\n      rows.map((row) => [row.type, row]),\n    ) as Record<Key[\"type\"], Key>;\n    const pairs: CryptoKeyPair[] = [];\n    for (const keyType of [\"RSASSA-PKCS1-v1_5\", \"Ed25519\"] as const) {\n      if (keys[keyType] == null) {\n        logger.debug(\n          \"The user {identifier} does not have an {keyType} key; creating one...\",\n          { identifier, keyType },\n        );\n        const { privateKey, publicKey } = await generateCryptoKeyPair(keyType);\n        db.prepare(\n          `\n          INSERT INTO keys (user_id, type, private_key, public_key)\n          VALUES (?, ?, ?, ?)\n          `,\n        ).run(\n          user.id,\n          keyType,\n          JSON.stringify(await exportJwk(privateKey)),\n          JSON.stringify(await exportJwk(publicKey)),\n        );\n        pairs.push({ privateKey, publicKey });\n      } else {\n        pairs.push({\n          privateKey: await importJwk(\n            JSON.parse(keys[keyType].private_key),\n            \"private\",\n          ),\n          publicKey: await importJwk(\n            JSON.parse(keys[keyType].public_key),\n            \"public\",\n          ),\n        });\n      }\n    }\n    return pairs;\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating and Storing Fedify Key Pairs with Deno KV in TypeScript\nDESCRIPTION: Shows how to generate RSA and Ed25519 cryptographic key pairs using `generateCryptoKeyPair` from `@fedify/fedify`. It then exports these keys to JWK format using `exportJwk` and stores them persistently in a Deno KV database, associating them with an actor identifier. Depends on `@fedify/fedify` and Deno KV.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst identifier: string = \"\";\n// ---cut-before---\nimport { generateCryptoKeyPair, exportJwk } from \"@fedify/fedify\";\n\nconst kv = await Deno.openKv();\nconst rsaPair = await generateCryptoKeyPair(\"RSASSA-PKCS1-v1_5\");\nconst ed25519Pair = await generateCryptoKeyPair(\"Ed25519\");\nawait kv.set([\"keypair\", \"rsa\", identifier], {\n  privateKey: await exportJwk(rsaPair.privateKey),\n  publicKey: await exportJwk(rsaPair.publicKey),\n});\nawait kv.set([\"keypair\", \"ed25519\", identifier], {\n  privateKey: await exportJwk(ed25519Pair.privateKey),\n  publicKey: await exportJwk(ed25519Pair.publicKey),\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actors and Managing Key Pairs with Bun and Fedify (TypeScript, Bun)\nDESCRIPTION: This Bun-specific TypeScript snippet demonstrates actor dispatching and key pair management for Fedify Federation, leveraging Bun's compatibility layer with Deno KV via 'openKv', and Node.js v8 serializer to encode/decode KV values. Public keys are returned as part of the actor object, while private keys are securely stored. Only the identifier 'me' is supported. Dependencies: '@fedify/fedify', '@deno/kv', Node v8 serializer. Inputs are HTTP context and identifier. Limitations: uses Bun-specific code and requires the 'kv.db' file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  exportJwk,\n  generateCryptoKeyPair,\n  importJwk,\n  type Federation,\n  Person,\n} from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nimport { serialize as encodeV8, deserialize as decodeV8 } from \"node:v8\";\nimport { openKv } from \"@deno/kv\";\n\n// Open the key-value store:\nconst kv = await openKv(\"kv.db\", { encodeV8, decodeV8 });\n\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    if (identifier !== \"me\") return null;\n    return new Person({\n      id: ctx.getActorUri(identifier),\n      name: \"Me\",\n      summary: \"This is me!\",\n      preferredUsername: identifier,\n      url: new URL(\"/\", ctx.url),\n      inbox: ctx.getInboxUri(identifier),\n      // The public keys of the actor; they are provided by the key pairs\n      // dispatcher we define below:\n      publicKeys: (await ctx.getActorKeyPairs(identifier))\n        .map(keyPair => keyPair.cryptographicKey),\n    });\n  })\n  .setKeyPairsDispatcher(async (ctx, identifier) => {\n    if (identifier != \"me\") return [];  // Other than \"me\" is not found.\n    const entry = await kv.get<{\n      privateKey: JsonWebKey;\n      publicKey: JsonWebKey;\n    }>([\"key\"]);\n    if (entry == null || entry.value == null) {\n      // Generate a new key pair at the first time:\n      const { privateKey, publicKey } =\n        await generateCryptoKeyPair(\"RSASSA-PKCS1-v1_5\");\n      // Store the generated key pair to the Deno KV database in JWK format:\n      await kv.set(\n        [\"key\"],\n        {\n          privateKey: await exportJwk(privateKey),\n          publicKey: await exportJwk(publicKey),\n        }\n      );\n      return [{ privateKey, publicKey }];\n    }\n    // Load the key pair from the Deno KV database:\n    const privateKey = await importJwk(entry.value.privateKey, \"private\");\n    const publicKey =  await importJwk(entry.value.publicKey, \"public\");\n    return [{ privateKey, publicKey }];\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox Listener for Follow Activities in TypeScript\nDESCRIPTION: TypeScript code implementing an inbox listener to handle Follow activities, including storing follower information in the database and sending an Accept activity in response.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Follow, async (ctx, follow) => {\n    if (follow.objectId == null) {\n      logger.debug(\"The Follow object does not have an object: {follow}\", {\n        follow,\n      });\n      return;\n    }\n    const object = ctx.parseUri(follow.objectId);\n    if (object == null || object.type !== \"actor\") {\n      logger.debug(\"The Follow object's object is not an actor: {follow}\", {\n        follow,\n      });\n      return;\n    }\n    const follower = await follow.getActor();\n    if (follower?.id == null || follower.inboxId == null) {\n      logger.debug(\"The Follow object does not have an actor: {follow}\", {\n        follow,\n      });\n      return;\n    }\n    const followingId = db\n      .prepare<unknown[], Actor>(\n        `\n        SELECT * FROM actors\n        JOIN users ON users.id = actors.user_id\n        WHERE users.username = ?\n        `,\n      )\n      .get(object.identifier)?.id;\n    if (followingId == null) {\n      logger.debug(\n        \"Failed to find the actor to follow in the database: {object}\",\n        { object },\n      );\n    }\n    const followerId = db\n      .prepare<unknown[], Actor>(\n        `\n        -- Add a new follower actor record or update if it already exists\n        INSERT INTO actors (uri, handle, name, inbox_url, shared_inbox_url, url)\n        VALUES (?, ?, ?, ?, ?, ?)\n        ON CONFLICT (uri) DO UPDATE SET\n          handle = excluded.handle,\n          name = excluded.name,\n          inbox_url = excluded.inbox_url,\n          shared_inbox_url = excluded.shared_inbox_url,\n          url = excluded.url\n        WHERE\n          actors.uri = excluded.uri\n        RETURNING *\n        `,\n      )\n      .get(\n        follower.id.href,\n        await getActorHandle(follower),\n        follower.name?.toString(),\n        follower.inboxId.href,\n        follower.endpoints?.sharedInbox?.href,\n        follower.url?.href,\n      )?.id;\n    db.prepare(\n      \"INSERT INTO follows (following_id, follower_id) VALUES (?, ?)\",\n    ).run(followingId, followerId);\n    const accept = new Accept({\n      actor: follow.objectId,\n      to: follow.actorId,\n      object: follow,\n    });\n    await ctx.sendActivity(object, follower, accept);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using InboxContext.recipient for Determining Activity Recipient\nDESCRIPTION: This snippet demonstrates how to use the InboxContext.recipient property to determine the recipient of a Follow activity. This is useful when the 'to', 'cc', 'bto', or 'bcc' fields are not present.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n.on(Follow, async (ctx, follow) => {\n  const recipient = ctx.recipient;\n  // Do something with the recipient\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actors and Managing Key Pairs with Deno and Fedify (TypeScript, Deno)\nDESCRIPTION: This Deno-specific TypeScript snippet sets up an actor dispatcher and a key pairs dispatcher for Fedify Federation. It opens a Deno key-value store to persist the cryptographic key pair (using JSON Web Key format) for the actor 'me'. If no key is found in the store, a new RSA key pair is generated and stored; otherwise, the existing keys are loaded. Dependencies: '@fedify/fedify', Deno KV API. Inputs are the Federation context and actor identifier. Only 'me' is supported. Outputs are used internally to sign activities.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  exportJwk,\n  generateCryptoKeyPair,\n  importJwk,\n  type Federation,\n  Person,\n} from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nconst kv = await Deno.openKv();  // Open the key-value store\n\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    if (identifier !== \"me\") return null;\n    return new Person({\n      id: ctx.getActorUri(identifier),\n      name: \"Me\",\n      summary: \"This is me!\",\n      preferredUsername: identifier,\n      url: new URL(\"/\", ctx.url),\n      inbox: ctx.getInboxUri(identifier),\n      // The public keys of the actor; they are provided by the key pairs\n      // dispatcher we define below:\n      publicKeys: (await ctx.getActorKeyPairs(identifier))\n        .map(keyPair => keyPair.cryptographicKey),\n    });\n  })\n  .setKeyPairsDispatcher(async (ctx, identifier) => {\n    if (identifier != \"me\") return [];  // Other than \"me\" is not found.\n    const entry = await kv.get<{\n      privateKey: JsonWebKey;\n      publicKey: JsonWebKey;\n    }>([\"key\"]);\n    if (entry == null || entry.value == null) {\n      // Generate a new key pair at the first time:\n      const { privateKey, publicKey } =\n        await generateCryptoKeyPair(\"RSASSA-PKCS1-v1_5\");\n      // Store the generated key pair to the Deno KV database in JWK format:\n      await kv.set(\n        [\"key\"],\n        {\n          privateKey: await exportJwk(privateKey),\n          publicKey: await exportJwk(publicKey),\n        }\n      );\n      return [{ privateKey, publicKey }];\n    }\n    // Load the key pair from the Deno KV database:\n    const privateKey = await importJwk(entry.value.privateKey, \"private\");\n    const publicKey =  await importJwk(entry.value.publicKey, \"public\");\n    return [{ privateKey, publicKey }];\n  });\n```\n\n----------------------------------------\n\nTITLE: Specifying Sender by Username in Fedify sendActivity (TypeScript)\nDESCRIPTION: Shows how to specify the activity sender using an object with a `username` property in the `ctx.sendActivity()` method. Fedify resolves this WebFinger username to find the actor and their key pairs for signing. The recipient is specified as the special string 'followers'.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\n// ---cut-before---\nawait ctx.sendActivity(\n  { username: \"john\" },  // [!code highlight]\n  \"followers\",\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Backward Pagination with setLastCursor in Fedify (TypeScript)\nDESCRIPTION: This snippet demonstrates setting up backward pagination for a Fedify outbox using `setLastCursor`, assuming an offset-based pagination system. It modifies the dispatcher (`setOutboxDispatcher`) to handle numeric offsets (parsed from the cursor string) for fetching pages. It sets the first cursor to \"0\" using `setFirstCursor` and calculates the last cursor's offset using `setLastCursor` based on the total item count (`countPostsByUserId`) and page size (`window`). This setup allows clients to traverse the collection forwards and backwards.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Article, Create, type Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n/**\n * A hypothetical type that represents a post.\n */\ninterface Post {\n  /**\n   * The ID of the post.\n   */\n  id: string;\n  /**\n   * The title of the post.\n   */\n  title: string;\n  /**\n   * The content of the post.\n   */\n  content: string;\n}\n/**\n * A hypothetical type that represents the options for\n * the `getPostsByUserId` function.\n */\ninterface GetPostsByUserIdOptions {\n  /**\n   * The offset of the current page.\n   */\n  offset: number;\n  /**\n   * The number of items per page.\n   */\n  limit: number;\n}\n/**\n * A hypothetical function that returns the posts that an actor has sent.\n * @param userId The actor's identifier.\n * @returns The result set that contains the posts, the next cursor, and whether\n *          the current page is the last page.\n */\nfunction getPostsByUserId(\n  userId: string,\n  options: GetPostsByUserIdOptions,\n): Post[] {\n  return [];\n}\n/**\n * A hypothetical function that counts the number of posts that an actor has\n * sent.\n * @param userId The actor's identifier.\n * @returns The number of posts that the actor has sent.\n */\nasync function countPostsByUserId(userId: string): Promise<number> {\n  return 0;\n}\n// ---cut-before---\n// The number of items per page:\nconst window = 10;\n\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier, cursor) => {\n    if (cursor == null) return null;\n    // Here we use the offset numeric value as the cursor:\n    const offset = parseInt(cursor);\n    // The following `getPostsByUserId` is a hypothetical function:\n    const posts = await getPostsByUserId(\n      identifier,\n      { offset, limit: window }\n    );\n    // Turn the posts into `Create` activities:\n    const items = posts.map(post =>\n      new Create({\n        id: new URL(`/posts/${post.id}#activity`, ctx.url),\n        actor: ctx.getActorUri(identifier),\n        object: new Article({\n          id: new URL(`/posts/${post.id}`, ctx.url),\n          summary: post.title,\n          content: post.content,\n        }),\n      })\n    );\n    return { items, nextCursor: (offset + window).toString() }\n  })\n  .setFirstCursor(async (ctx, identifier) => \"0\")\n  .setLastCursor(async (ctx, identifier) => {\n    // The following `countPostsByUserId` is a hypothetical function:\n    const total = await countPostsByUserId(identifier);\n    // The last cursor is the offset of the last page:\n    return (total - (total % window)).toString();\n  });\n```\n\n----------------------------------------\n\nTITLE: Sending Activity to Followers with Context.sendActivity (Fedify, TypeScript)\nDESCRIPTION: Demonstrates how to deliver an activity to all followers of the sender using the Context.sendActivity method in Fedify. Requires the followers collection dispatcher to be implemented. The sender is identified by an object with an identifier, the recipients parameter is set to the string \\\"followers\\\" (a special value), and the activity is an instance of the Activity class or its subclass. The method is asynchronous and will deliver the activity to each follower; it cannot be used with SenderKeyPair objects as the sender.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\n// ---cut-before---\nawait ctx.sendActivity(\n  { identifier: \"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\" },\n  \"followers\",  // [!code highlight]\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Options with Different Handle and Web Origins in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a federation instance with different handleHost and webOrigin settings. It's useful when the WebFinger handles need to be constructed using a different host than the web origin.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst federation = createFederation({\n  kv: null as unknown as KvStore,\n  origin: {\n    handleHost: \"example.com\",\n    webOrigin: \"https://ap.example.com\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Inbox Listeners in Fedify\nDESCRIPTION: This snippet shows how to set up inbox listeners using Fedify. It defines the routes for both user-specific and shared inboxes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Inbox/Outbox Message Queues in TypeScript\nDESCRIPTION: Demonstrates configuring distinct message queues for incoming (inbox) and outgoing (outbox) activities within the `Federation` object, introduced in Fedify 1.3.0. It uses `PostgresMessageQueue` for the inbox, requiring a `postgres` client instance, and `RedisMessageQueue` for the outbox, requiring an `ioredis` client instance. The `kv` store is required but represented as null with type assertion for this example.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createFederation,\n  type KvStore,\n  MemoryKvStore,\n  type MessageQueue,\n} from \"@fedify/fedify\";\nimport { PostgresMessageQueue } from \"@fedify/postgres\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport postgres from \"postgres\";\nimport Redis from \"ioredis\";\n\ncreateFederation<void>({\nkv: null as unknown as KvStore,\n// ---cut-before---\nqueue: {\n  inbox: new PostgresMessageQueue(\n    postgres(\"postgresql://user:pass@localhost/db\")\n  ),\n  outbox: new RedisMessageQueue(() => new Redis()),\n}\n// ---cut-after---\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Follow Request Endpoint in TypeScript\nDESCRIPTION: Implements a POST endpoint to handle follow requests, including actor lookup and activity sending.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/users/:username/following\", async (c) => {\n  const username = c.req.param(\"username\");\n  const form = await c.req.formData();\n  const handle = form.get(\"actor\");\n  if (typeof handle !== \"string\") {\n    return c.text(\"Invalid actor handle or URL\", 400);\n  }\n  const ctx = fedi.createContext(c.req.raw, undefined);\n  const actor = await ctx.lookupObject(handle.trim());\n  if (!isActor(actor)) {\n    return c.text(\"Invalid actor handle or URL\", 400);\n  }\n  await ctx.sendActivity(\n    { identifier: username },\n    actor,\n    new Follow({\n      actor: ctx.getActorUri(username),\n      object: actor.id,\n      to: actor.id,\n    }),\n  );\n  return c.text(\"Successfully sent a follow request\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Fedify Outbox Pagination with setFirstCursor in TypeScript\nDESCRIPTION: This snippet shows how to configure an outbox dispatcher (`setOutboxDispatcher`) and initialize pagination using `setFirstCursor` in Fedify. It defines hypothetical data structures (`Post`, `PostResultSet`, `GetPostsByUserIdOptions`) and a fetching function (`getPostsByUserId`) to retrieve posts, converts them into ActivityPub `Create` activities, and returns the first page. The `setFirstCursor` callback returns an empty string `\"\"` to signify the start of the collection, enabling forward pagination.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Article, Create, type Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n/**\n * A hypothetical type that represents a post.\n */\ninterface Post {\n  /**\n   * The ID of the post.\n   */\n  id: string;\n  /**\n   * The title of the post.\n   */\n  title: string;\n  /**\n   * The content of the post.\n   */\n  content: string;\n}\n/**\n * A hypothetical type that represents the result set of the posts.\n */\ninterface PostResultSet {\n  /**\n   * The posts that the actor has sent.\n   */\n  posts: Post[];\n  /**\n   * The next cursor that represents the position of the next page.\n   */\n  nextCursor: string | null;\n  /**\n   * Whether the current page is the last page.\n   */\n  last: boolean;\n}\n/**\n * A hypothetical type that represents the options for\n * the `getPostsByUserId` function.\n */\ninterface GetPostsByUserIdOptions {\n  /**\n   * The cursor that represents the position of the current page.\n   */\n  cursor?: string | null;\n  /**\n   * The number of items per page.\n   */\n  limit: number;\n}\n/**\n * A hypothetical function that returns the posts that an actor has sent.\n * @param userId The actor's identifier.\n * @returns The result set that contains the posts, the next cursor, and whether\n *          the current page is the last page.\n */\nfunction getPostsByUserId(\n  userId: string,\n  options: GetPostsByUserIdOptions,\n): PostResultSet {\n  return { posts: [], nextCursor: null, last: true };\n}\n// ---cut-before---\n// The number of items per page:\nconst window = 10;\n\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier, cursor) => {\n    if (cursor == null) return null;\n    // The following `getPostsByUserId` is a hypothetical function:\n    const { posts, nextCursor, last } = await getPostsByUserId(\n      identifier,\n      cursor === \"\" ? { limit: window } : { cursor, limit: window }\n    );\n    // Turn the posts into `Create` activities:\n    const items = posts.map(post =>\n      new Create({\n        id: new URL(`/posts/${post.id}#activity`, ctx.url),\n        actor: ctx.getActorUri(identifier),\n        object: new Article({\n          id: new URL(`/posts/${post.id}`, ctx.url),\n          summary: post.title,\n          content: post.content,\n        }),\n      })\n    );\n    return { items, nextCursor: last ? null : nextCursor }\n  })\n  .setFirstCursor(async (ctx, identifier) => {\n    // Let's assume that an empty string represents the beginning of the\n    // collection:\n    return \"\";  // Note that it's not `null`.\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Inbox Key Dispatcher with Instance Actor - Fedify (TypeScript)\nDESCRIPTION: Demonstrates how to set up a shared inbox key dispatcher using an authenticated DocumentLoader that references a dedicated instance actor in Fedify. The snippet shows configuration via setSharedKeyDispatcher() with an actor named '~actor', and dynamic actor resolution using setActorDispatcher. Requires @fedify/fedify and proper knowledge of instance actors. The main input is a function providing a key identifier, and it integrates into Federation setup for secure ActivityPub communication.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nimport { Application, Person } from \"@fedify/fedify\";\n\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  // The following line assumes that there is an instance actor named `~actor`\n  // for the server.  The leading tilde (`~`) is just for avoiding conflicts\n  // with regular actor handles, but you don't have to necessarily follow this\n  // convention:\n  .setSharedKeyDispatcher((_ctx) => ({ identifier: \"~actor\" }));\n\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    if (identifier === \"~actor\") {\n      // Returns an Application object for the instance actor:\n      return new Application({\n        // ...\n      });\n    }\n\n    // Fetches the regular actor from the database and returns a Person object:\n    return new Person({\n      // ...\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Aliases in Fedify (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up actor aliases in Fedify using the mapHandle and mapAlias methods. It shows how to map WebFinger usernames to internal identifiers and how to handle different URLs for actor URIs and web profile URLs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    // Since we map a WebFinger username to the corresponding user's UUID below,\n    // the `identifier` parameter is the user's UUID, not the WebFinger\n    // username:\n    const user = await findUserByUuid(identifier);\n    // Omitted for brevity; see the previous example for details.\n  })\n  .mapHandle(async (ctx, username) => {\n    // Work with the database to find the user's UUID by the WebFinger username.\n    const user = await findUserByUsername(username);\n    if (user == null) return null;  // Return null if the actor is not found.\n    return user.uuid;\n  })\n  .mapAlias((ctx, resource: URL) => {\n    // Parse the URL and return the corresponding actor's username if\n    // the URL is the profile URL of the actor:\n    if (resource.protocol !== \"https:\") return null;\n    if (resource.hostname !== \"example.com\") return null;\n    const m = /^\\/@(\\w+)$/.exec(resource.pathname);\n    if (m == null) return null;\n    // Note that it is okay even if the returned username is non-existent.\n    // It's dealt with by the `mapHandle()` above:\n    return { username: m[1] };\n  });\n```\n\n----------------------------------------\n\nTITLE: Separating Message Processing Using Manual Startup (Deno, TypeScript)\nDESCRIPTION: Demonstrates using the 'manuallyStartQueue' FederationOptions flag and Federation.startQueue(), gated by the NODE_TYPE environment variable, to separate queue processing from main event loop in Deno. Dependencies include @fedify/fedify, @fedify/redis, and ioredis. Main parameters are the queue (a RedisMessageQueue), and the 'manuallyStartQueue' boolean; inputs are set by the environment. Output is a Federation instance that only processes messages when NODE_TYPE=worker, allowing scaling and keeping web nodes responsive. Message processing can be interrupted via SIGINT using AbortController.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KvStore } from \"@fedify/fedify\";\n// ---cut-before---\nimport { createFederation } from \"@fedify/fedify\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\n\nconst federation = createFederation<void>({\n  queue: new RedisMessageQueue(() => new Redis()),\n  manuallyStartQueue: true,  // [!code highlight]\n  // ... other options\n  // ---cut-start---\n  kv: null as unknown as KvStore,\n  // ---cut-end---\n});\n\n// Start the message queue manually only in worker nodes.\n// On non-worker nodes, the queue won't be started.\nif (Deno.env.get(\"NODE_TYPE\") === \"worker\") {\n  const controller = new AbortController();\n  Deno.addSignalListener(\"SIGINT\", () => controller.abort());\n  await federation.startQueue(undefined, { signal: controller.signal });\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Activities to Followers via InboxContext.forwardActivity - Fedify (TypeScript)\nDESCRIPTION: Details how to forward incoming 'Create' activities to a target actor's followers using InboxContext.forwardActivity, preserving the original sender's signature. Inputs include the activity context, the parsed destination, and identifier handling. Useful for relaying replies or moderation events; recipients can verify forwarded messages if they're correctly signed.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create, type Federation } from \"@fedify/fedify\";\nconst federation: Federation<void> = null as unknown as Federation<void>;\nfederation.setInboxListeners(\"/{identifier}/inbox\", \"/inbox\")\n// ---cut-before---\n.on(Create, async (ctx, create) => {\n  if (create.toId == null) return;\n  const to = ctx.parseUri(create.toId);\n  if (to?.type !== \"actor\") return;\n  const forwarder = to.identifier;\n  await ctx.forwardActivity({ identifier: forwarder }, \"followers\");\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Fedify with Express\nDESCRIPTION: This snippet demonstrates how to integrate Fedify with the Express web framework using the @fedify/express package.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { integrateFederation } from \"@fedify/express\";\nimport { createFederation } from \"@fedify/fedify\";\n\nexport const federation = createFederation<string>({\n  // Omitted for brevity; see the related section for details.\n});\n\nexport const app = express();\n\napp.set(\"trust proxy\", true);\n\napp.use(integrateFederation(federation, (req) => \"context data goes here\"));\n```\n\n----------------------------------------\n\nTITLE: Registering a Followers Dispatcher with Federation API (TypeScript)\nDESCRIPTION: This snippet illustrates registering a dispatcher for an actor's 'followers' collection using Fedify's Federation API. The dispatcher provides the list of Recipient objects (or Actor objects) representing followers and establishes a displayed count. Dependencies: @fedify/fedify, with use of Federation and Recipient types. Parameters include the followers path template, dispatcher async function, and counter function. Inputs are context, identifier, and cursor; outputs are objects with recipient items and count. Conforms to ActivityPub standards for follower collections.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Federation, Recipient } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nfederation\n  .setFollowersDispatcher(\n    \"/users/{identifier}/followers\", async (ctx, identifier, cursor) => {\n      // Loads the list of actors that follow the actor...\n      return {\n        items: [\n          {\n            id: new URL(\"...\"),\n            inboxId: new URL(\"...\"),\n          } satisfies Recipient,\n          // ...\n        ]\n      };\n    }\n  )\n  .setCounter((ctx, identifier) => 456);\n```\n\n----------------------------------------\n\nTITLE: Implementing Liked Collection Dispatcher in TypeScript\nDESCRIPTION: Demonstrates how to set up a liked collection dispatcher that returns objects an actor has liked. It includes an example of returning full objects and an alternative approach of returning only object URIs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Object } from \"@fedify/fedify\";\n\nfederation\n  .setLikedDispatcher(\"/users/{identifier}/liked\", async (ctx, identifier, cursor) => {\n    // Work with the database to find the objects that the actor has liked\n    // (the below `getLikedPostsByUserId` is a hypothetical function):\n    const items: Object[] = await getLikedByUserId(identifier);\n    return { items };\n  });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Object } from \"@fedify/fedify\";\n\nfederation\n  .setLikedDispatcher(\"/users/{identifier}/liked\", async (ctx, identifier, cursor) => {\n    // Work with the database to find the objects that the actor has liked\n    // (the below `getLikedPostsByUserId` is a hypothetical function):\n    const objects: Object[] = await getLikedByUserId(identifier);\n    // Turn the objects into `URL` objects:\n    const items: URL[] = objects.map(obj => obj.id).filter(id => id != null);\n    return { items };\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Create(Note) Activity Handler\nDESCRIPTION: Modified POST request handler that creates a new post and sends a Create(Note) activity to followers. Includes database transaction and ActivityPub object creation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/users/:username/posts\", async (c) => {\n  const ctx = fedi.createContext(c.req.raw, undefined);\n  const post: Post | null = db.transaction(() => {\n    const post = db\n      .prepare<unknown[], Post>(\n        `\n        INSERT INTO posts (uri, actor_id, content)\n        VALUES ('https://localhost/', ?, ?)\n        RETURNING *\n        `,\n      )\n      .get(actor.id, stringifyEntities(content, { escapeOnly: true }));\n    if (post == null) return null;\n    const url = ctx.getObjectUri(Note, {\n      identifier: username,\n      id: post.id.toString(),\n    }).href;\n    db.prepare(\"UPDATE posts SET uri = ?, url = ? WHERE id = ?\").run(\n      url,\n      url,\n      post.id,\n    );\n    return post;\n  })();\n  if (post == null) return c.text(\"Failed to create post\", 500);\n  const noteArgs = { identifier: username, id: post.id.toString() };\n  const note = await ctx.getObject(Note, noteArgs);\n  await ctx.sendActivity(\n    { identifier: username },\n    \"followers\",\n    new Create({\n      id: new URL(\"#activity\", note?.id ?? undefined),\n      object: note,\n      actors: note?.attributionIds,\n      tos: note?.toIds,\n      ccs: note?.ccIds,\n    }),\n  );\n  return c.redirect(ctx.getObjectUri(Note, noteArgs).href);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up an Inbox Dispatcher in TypeScript using Fedify\nDESCRIPTION: This example demonstrates configuring an inbox dispatcher using `federation.setInboxDispatcher()`. It defines a route (`/users/{identifier}/inbox`) and an asynchronous handler that retrieves activities received by the actor (using a hypothetical `getInboxByUserId` function). It also sets a counter using `.setCounter()` with a hypothetical `countInboxByUserId` function to provide the total number of items in the inbox. The handler should return an object containing the `items` (an array of `Activity`).\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n/**\n * A hypothetical function that returns the activities that an actor has\n * received.\n * @param userId The actor's identifier.\n * @returns The activities that the actor has received.\n */\nasync function getInboxByUserId(userId: string): Promise<Activity[]> {\n  return [];\n}\n/**\n * A hypothetical function that counts the number of activities that an actor\n * has received.\n * @param userId The actor's identifier.\n * @returns The number of activities that the actor has received.\n */\nasync function countInboxByUserId(userId: string): Promise<number> {\n  return 0;\n}\n// ---cut-before---\nimport { Activity } from \"@fedify/fedify\";\n\nfederation\n  .setInboxDispatcher(\"/users/{identifier}/inbox\", async (ctx, identifier) => {\n    // Work with the database to find the activities that the actor has received\n    // (the following `getInboxByUserId` is a hypothetical function):\n    const items: Activity[] = await getInboxByUserId(identifier);\n    return { items };\n  })\n  .setCounter(async (ctx, identifier) => {\n    // The following `countInboxByUserId` is a hypothetical function:\n    return await countInboxByUserId(identifier);\n  });\n```\n\n----------------------------------------\n\nTITLE: Shared Inbox Delivery Implementation in TypeScript\nDESCRIPTION: Function demonstrating shared inbox delivery for public notes using preferSharedInbox option.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync function sendNote(\n  ctx: Context<void>,\n  senderId: string,\n  recipient: Recipient,\n) {\n  await ctx.sendActivity(\n    { identifier: senderId },\n    recipient,\n    new Create({\n      actor: ctx.getActorUri(senderId),\n      to: PUBLIC_COLLECTION,\n      object: new Note({\n        attribution: ctx.getActorUri(senderId),\n        to: PUBLIC_COLLECTION,\n      }),\n    }),\n    { preferSharedInbox: true },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Actor for Access Control in TypeScript\nDESCRIPTION: This snippet shows how to implement an instance actor to prevent infinite loops in authorized fetch scenarios. It includes special handling for the instance actor and normal user actors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/access-control.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setActorDispatcher(\"/actors/{identifier}\", async (ctx, identifier) => {\n    if (identifier === ctx.hostname) {\n      // A special case for the instance actor:\n      return new Application({\n        id: ctx.getActorUri(identifier),\n        // Omitted for brevity; other properties of the instance actor...\n        // Note that you have to set the `publicKey` property of the instance\n        // actor.\n      });\n    }\n\n    // A normal case for a user actor:\n    return new Person({\n      id: ctx.getActorUri(identifier),\n      // Omitted for brevity; other properties of the user actor...\n    });\n  })\n  .authorize(async (ctx, identifier) => {\n    // Allow the instance actor to access any resources:\n    if (identifier === ctx.hostname) return true;\n    // Create an authenticated document loader behalf of the instance actor:\n    const documentLoader = await ctx.getDocumentLoader({\n      identifier: ctx.hostname,\n    });\n    // Get the actor who signed the request:\n    const signedKeyOwner = await ctx.getSignedKeyOwner({ documentLoader });\n    if (signedKeyOwner == null) return false;\n    return !await isBlocked(identifier, signedKeyOwner);\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Canonical Origin Explicitly in Fedify (TypeScript)\nDESCRIPTION: Shows how to explicitly define the canonical origin (URL) for the Fedify server during initialization using the `origin` option in `createFederation`. This forces Fedify to use the specified origin (e.g., `https://example.com`) when constructing URLs, overriding any origin derived from request headers like `Host` or `X-Forwarded-Host`. This is useful for ensuring consistent URL generation, especially behind proxies.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst federation = createFederation({\n// ---cut-start---\n  kv: null as unknown as KvStore,\n// ---cut-end---\n  origin: \"https://example.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Fedify Key Pairs from Deno KV in a Dispatcher (TypeScript)\nDESCRIPTION: Illustrates implementing the `setKeyPairsDispatcher` callback for Fedify. This function loads RSA and Ed25519 key pairs, previously stored as JWK in Deno KV, using `kv.get`. It then uses `importJwk` from `@fedify/fedify` to convert the JWK data back into `CryptoKeyPair` objects required by Fedify. Depends on `@fedify/fedify` and Deno KV.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\nimport { type Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nimport { importJwk } from \"@fedify/fedify\";\n\ninterface KeyPairEntry {\n  privateKey: JsonWebKey;\n  publicKey: JsonWebKey;\n}\n\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    // Omitted for brevity; see the previous example for details.\n  })\n  .setKeyPairsDispatcher(async (ctx, identifier) => {\n    const kv = await Deno.openKv();\n    const result: CryptoKeyPair[] = [];\n    const rsaPair = await kv.get<KeyPairEntry>(\n      [\"keypair\", \"rsa\", identifier],\n    );\n    if (rsaPair?.value != null) {\n      result.push({\n        privateKey: await importJwk(rsaPair.value.privateKey, \"private\"),\n        publicKey: await importJwk(rsaPair.value.publicKey, \"public\"),\n      });\n    }\n    const ed25519Pair = await kv.get<KeyPairEntry>(\n      [\"keypair\", \"ed25519\", identifier],\n    );\n    if (ed25519Pair?.value != null) {\n      result.push({\n        privateKey: await importJwk(ed25519Pair.value.privateKey, \"private\"),\n        publicKey: await importJwk(ed25519Pair.value.publicKey, \"public\"),\n      });\n    }\n    return result;\n  });\n```\n\n----------------------------------------\n\nTITLE: Cloning Immutable Activity Vocabulary Objects with New Properties (TypeScript)\nDESCRIPTION: This snippet demonstrates immutability in Fedify objects by cloning a Note instance with new property values using the clone() method. Dependencies include @js-temporal/polyfill and @fedify/fedify. Key parameters: a Note instance with various properties (id, content, published). Input is an original Note; output is a new Note with modified content in a different language. Limitations: update operations must always be via cloning; direct mutation is not allowed.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Temporal } from \"@js-temporal/polyfill\";\n// ---cut-before---\nimport { LanguageString, Note } from \"@fedify/fedify\";\n\nconst noteInEnglish = new Note({\n  id: new URL(\"https://example.com/notes/123\"),\n  content: new LanguageString(\"Hello, world!\", \"en\"),\n  published: Temporal.Now.instant(),\n});\nconst noteInChinese = noteInEnglish.clone({\n  content: new LanguageString(\"你好，世界！\", \"zh\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Followers Collection Dispatcher with Pagination in TypeScript\nDESCRIPTION: Demonstrates how to set up a followers collection dispatcher with pagination support. This implementation returns paginated results when cursor is provided and null for whole collection requests, preferring paginated access.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setFollowersDispatcher(\n    \"/users/{identifier}/followers\",\n    async (ctx, identifier, cursor) => {\n      // If a whole collection is requested, returns nothing as we prefer\n      // collection pages over the whole collection:\n      if (cursor == null) return null;\n      // Work with the database to find the actors that are following the actor\n      // (the below `getFollowersByUserId` is a hypothetical function):\n      const { users, nextCursor, last } = await getFollowersByUserId(\n        identifier,\n        cursor === \"\" ? { limit: 10 } : { cursor, limit: 10 }\n      );\n      // Turn the users into `Recipient` objects:\n      const items: Recipient[] = users.map(actor => ({\n        id: new URL(actor.uri),\n        inboxId: new URL(actor.inboxUri),\n      }));\n      return { items, nextCursor: last ? null : nextCursor };\n    }\n  )\n  // The first cursor is an empty string:\n  .setFirstCursor(async (ctx, identifier) => \"\");\n```\n\n----------------------------------------\n\nTITLE: Setting up a Following Collection Dispatcher in TypeScript using Fedify\nDESCRIPTION: This code demonstrates configuring a dispatcher for an actor's 'following' collection using `federation.setFollowingDispatcher()`. It defines a route (`/users/{identifier}/following`) and an asynchronous handler. The handler uses a hypothetical `getFollowingByUserId` function to fetch a paginated list of followed actors based on an identifier and cursor. It maps the fetched user data to `URL` objects and returns them as `items`, along with the `nextCursor` for pagination. The `.setFirstCursor()` method defines the initial cursor value (an empty string in this case). The handler returns `null` if no cursor is provided, preferring paged results.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n/**\n * A hypothetical type that represents an actor in the database.\n */\ninterface User {\n  /**\n   * The URI of the actor.\n   */\n  uri: string;\n}\n/**\n * A hypothetical type that represents the result set of the actors that\n * an actor is following.\n */\ninterface ResultSet {\n  /**\n   * The actors that the actor is following.\n   */\n  users: User[];\n  /**\n   * The next cursor that represents the position of the next page.\n   */\n  nextCursor: string | null;\n  /**\n   * Whether the current page is the last page.\n   */\n  last: boolean;\n}\n/**\n * A hypothetical function that returns the actors that an actor is following.\n * @param userId The actor's identifier.\n * @param options The options for the query.\n * @returns The actors that the actor is following, the next cursor, and whether\n *          the current page is the last page.\n */\nasync function getFollowingByUserId(\n  identifier: string,\n  options: { cursor?: string | null; limit: number },\n): Promise<ResultSet> {\n  return { users: [], nextCursor: null, last: true };\n}\n// ---cut-before---\nfederation\n  .setFollowingDispatcher(\"/users/{identifier}/following\", async (ctx, identifier, cursor) => {\n    // If a whole collection is requested, returns nothing as we prefer\n    // collection pages over the whole collection:\n    if (cursor == null) return null;\n    // Work with the database to find the actors that the actor is following\n    // (the below `getFollowingByUserId` is a hypothetical function):\n    const { users, nextCursor, last } = await getFollowingByUserId(\n      identifier,\n      cursor === \"\" ? { limit: 10 } : { cursor, limit: 10 }\n    );\n    // Turn the users into `URL` objects:\n    const items = users.map(actor => new URL(actor.uri));\n    return { items, nextCursor: last ? null : nextCursor }\n  })\n  // The first cursor is an empty string:\n  .setFirstCursor(async (ctx, identifier) => \"\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Outbox Collection in Fedify\nDESCRIPTION: This snippet shows a more detailed implementation of the outbox collection. It demonstrates how to retrieve posts from a database, convert them into Create activities with Article objects, and return them as items in the outbox collection.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Article, Create } from \"@fedify/fedify\";\n\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier) => {\n    // Work with the database to find the activities that the actor has sent\n    // (the following `getPostsByUserId` is a hypothetical function):\n    const posts = await getPostsByUserId(identifier);\n    // Turn the posts into `Create` activities:\n    const items = posts.map(post =>\n      new Create({\n        id: new URL(`/posts/${post.id}#activity`, ctx.url),\n        actor: ctx.getActorUri(identifier),\n        object: new Article({\n          id: new URL(`/posts/${post.id}`, ctx.url),\n          summary: post.title,\n          content: post.content,\n        }),\n      })\n    );\n    return { items };\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Inbox Listener Errors with onError - Fedify (TypeScript)\nDESCRIPTION: Presents error handling in inbox listeners by registering a callback with the onError method. The snippet captures both ActivityPub protocol errors and handler exceptions, and logs them to the console. It requires a Federation instance and shows typical error callback signature and chaining, making error handling robust for all inbound event processing.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Federation, Follow } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Follow, async (ctx, follow) => {\n    // Omitted for brevity\n  })\n  .onError(async (ctx, error) => {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Looking Up Remote Objects by URI in Fedify\nDESCRIPTION: Demonstrates how to use Context.lookupObject() method to find a Note object using its URI. This method can look up any object in the Activity Vocabulary, not just actors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst note = await ctx.lookupObject(\n  \"https://todon.eu/@hongminhee/112060633798771581\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a FederationBuilder in Fedify (TypeScript)\nDESCRIPTION: Initializes a `FederationBuilder` using `createFederationBuilder` and registers an actor dispatcher. This builder pattern allows deferring the instantiation of the `Federation` object until all configurations are set up, which can help manage larger applications and avoid circular dependencies. The example shows setting an actor dispatcher for user profiles.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederationBuilder } from \"@fedify/fedify\";\n\nexport const builder = createFederationBuilder<void>();\n\n// Register your dispatchers and listeners here...\nbuilder.setActorDispatcher(\n  \"/users/{handle}\",\n  async (ctx, handle) => {\n    // Omitted for brevity\n  }\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Instantiating Create from JSON-LD (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a Fedify Create object asynchronously from a JSON-LD document using Create.fromJsonLd(). Dependencies: @fedify/fedify, async/await support. Input is a JSON-LD structure representing a Create object with nested Note. Output is a Create instance with hydrated properties. Limitations: the method may fetch remote resources depending on configuration.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create } from \"@fedify/fedify\";\n\nconst create = await Create.fromJsonLd({\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"type\": \"Create\",\n  \"id\": \"https://example.com/activities/123\",\n  \"actor\": \"https://example.com/users/alice\",\n  \"object\": {\n    \"type\": \"Note\",\n    \"id\": \"https://example.com/notes/456\",\n    \"content\": \"Hello, world!\",\n    \"published\": \"2024-01-01T00:00:00Z\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Recipient as Object Literal in Fedify sendActivity (TypeScript)\nDESCRIPTION: Illustrates specifying a recipient using an object literal that conforms to the `Recipient` interface. This object provides the recipient's `id` and `inboxId` directly to `ctx.sendActivity()`. The sender is specified by identifier.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Context, Recipient } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\n// ---cut-before---\nawait ctx.sendActivity(\n  { identifier: \"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\" },\n  {\n    id: new URL(\"https://example.com/actors/1\"),\n    inboxId: new URL(\"https://example.com/actors/1/inbox\"),\n  } satisfies Recipient,\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Following Dispatcher with Federation API (TypeScript)\nDESCRIPTION: This snippet shows how to use the Fedify Federation API to register a dispatcher for the 'following' collection of an actor. The dispatcher returns a paginated list of followed actor URIs and sets a displayed following count. Dependencies: @fedify/fedify for Federation type. Parameters include the path template, a dispatcher async function, and a counter callback. Inputs are context, identifier, and cursor; outputs are objects containing items (URLs) and count. The collection is exposed for ActivityPub compatibility.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nfederation\n  .setFollowingDispatcher(\n    \"/users/{identifier}/following\", async (ctx, identifier, cursor) => {\n      // Loads the list of actors that the actor follows...\n      return {\n        items: [\n          new URL(\"...\"),\n          new URL(\"...\"),\n          // ...\n        ]\n      };\n    }\n  )\n  .setCounter((ctx, identifier) => 123);\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Outbox Collection in Fedify\nDESCRIPTION: This snippet demonstrates how to implement a paginated outbox collection using cursor-based pagination. It shows how to handle the cursor parameter, retrieve paginated posts from a database, and return the items along with the next cursor for pagination.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier, cursor) => {\n    // If a whole collection is requested, returns nothing as we prefer\n    // collection pages over the whole collection:\n    if (cursor == null) return null;\n    // Work with the database to find the activities that the actor has sent\n    // (the following `getPostsByUserId` is a hypothetical function):\n    const { posts, nextCursor, last } = await getPostsByUserId(identifier, {\n      cursor,\n      limit: 10,\n    });\n    // Turn the posts into `Create` activities:\n    const items = posts.map(post =>\n      new Create({\n        id: new URL(`/posts/${post.id}#activity`, ctx.url),\n        actor: ctx.getActorUri(identifier),\n        object: new Article({\n          id: new URL(`/posts/${post.id}`, ctx.url),\n          summary: post.title,\n          content: post.content,\n        }),\n      })\n    );\n    return {\n      items,\n      // If `last` is `true`, it means that the current page is the last page:\n      nextCursor: last ? null : nextCursor,\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Constructing Following Collection URIs with Decoupled WebFinger Usernames in TypeScript\nDESCRIPTION: Shows how to construct a following collection URI using a UUID identifier instead of a WebFinger username, which is useful when decoupling actor URIs from WebFinger usernames.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFollowingUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Routing Activity to Inbox Listener Using Context.routeActivity in TypeScript\nDESCRIPTION: Provides an example of routing an ActivityPub Announce object's enclosed Activity to the appropriate inbox (including the shared inbox) using Context.routeActivity. Requires @fedify/fedify and the setup of inbox listeners using setInboxListeners. The code verifies that the object is an Activity before routing; input is the recipient identifier and Activity instance. Output is the routing operation, performed asynchronously. The Announce event handler must be configured on the Federation object.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, Announce, type Federation } from \"@fedify/fedify\";\n\nconst federation = null as unknown as Federation<void>;\n\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n// ---cut-before---\n  .on(Announce, async (ctx, announce) => {\n    // Get an object enclosed in the `Announce` object:\n    const object = await announce.getObject();\n    if (object instanceof Activity) {\n      // Route the activity to the appropriate inbox listener (shared inbox):\n      await ctx.routeActivity(ctx.recipient, object);\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Outbox Dispatcher in Fedify\nDESCRIPTION: This snippet demonstrates how to set up an outbox dispatcher in Fedify. It shows the basic structure of the setOutboxDispatcher method, which defines the URI pattern for the outbox collection and provides a placeholder for the implementation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier) => {\n    // Work with the database to find the activities that the actor has sent.\n    // Omitted for brevity.  See the next example for details.\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Followers Dispatcher in TypeScript\nDESCRIPTION: Sets up a followers collection endpoint that responds to GET requests for an actor's followers. It retrieves follower information from the database and formats it as ActivityPub Recipients.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n        FROM follows\n        JOIN actors ON actors.id = follows.following_id\n        JOIN users ON users.id = actors.user_id\n        WHERE users.username = ?\n        `,\n      )\n      .get(identifier);\n    return result == null ? 0 : result.cnt;\n  });\n```\n\n----------------------------------------\n\nTITLE: Building a Federation Object from Builder in Fedify (TypeScript)\nDESCRIPTION: Demonstrates how to construct the final `Federation` object by invoking the `build()` method on a `FederationBuilder` instance. This method accepts the same configuration options as `createFederation()`, such as the Key-Value store (`kv`). This completes the builder pattern setup initiated in `federation.ts`.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { builder } from \"./federation.ts\";\n\n// Build the `Federation` object\nexport const federation = await builder.build({\n  kv: new MemoryKvStore(),\n  // Omitted for brevity; see the following sections for details.\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisMessageQueue in Fedify (TypeScript)\nDESCRIPTION: Example of using RedisMessageQueue for production use across various runtimes. This implementation uses Redis as the backend, providing scalability and high performance. It requires a Redis server setup.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\n\nconst federation = createFederation<void>({\n  kv: null as unknown as KvStore,\n  queue: new RedisMessageQueue(() => new Redis()),  // [!code highlight]\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Single Actor Recipient in Fedify sendActivity (TypeScript)\nDESCRIPTION: Shows how to specify a single recipient by passing an `Actor` object as the second argument to `ctx.sendActivity()`. Fedify will deliver the activity to this actor's inbox (or shared inbox if configured). The sender is specified by identifier.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Actor, type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\nconst actor = {} as Actor;\n// ---cut-before---\nawait ctx.sendActivity(\n  { identifier: \"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\" },\n  actor,  // [!code highlight]\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Using x-forwarded-fetch Middleware with Deno.serve (TypeScript)\nDESCRIPTION: Shows how to apply the `behindProxy` middleware from `x-forwarded-fetch` when using `Deno.serve`. It wraps the `Federation.fetch()` call, ensuring that Fedify uses the `X-Forwarded-Host` header (if present) instead of the standard `Host` header for domain name recognition, crucial for proxied setups.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { behindProxy } from \"@hongminhee/x-forwarded-fetch\";\n\nDeno.serve(\n  behindProxy(request => federation.fetch(request, { contextData: undefined }))\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing Subtype Create with Activity.fromJsonLd (TypeScript)\nDESCRIPTION: This TypeScript snippet shows that Activity.fromJsonLd() can parse a JSON-LD structure representing a Create object due to Create being a subtype of Activity. Dependencies: @fedify/fedify. Input is a JSON-LD Create document; output is a typed instance (possibly Create or Activity) with full property mapping. Limitations: type must be correctly specified in input JSON-LD; actual subtype detection depends on implementation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity } from \"@fedify/fedify\";\n\nconst create = await Activity.fromJsonLd({\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"type\": \"Create\",\n  \"id\": \"https://example.com/activities/123\",\n  \"actor\": \"https://example.com/users/alice\",\n  \"object\": {\n    \"type\": \"Note\",\n    \"id\": \"https://example.com/notes/456\",\n    \"content\": \"Hello, world!\",\n    \"published\": \"2024-01-01T00:00:00Z\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Creation Handler\nDESCRIPTION: Implements the POST handler for creating new posts. It validates the post content, inserts it into the database, and generates the proper ActivityPub URI for the post.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/users/:username/posts\", async (c) => {\n  const username = c.req.param(\"username\");\n  const actor = db\n    .prepare<unknown[], Actor>(\n      `\n      SELECT actors.*\n      FROM actors\n      JOIN users ON users.id = actors.user_id\n      WHERE users.username = ?\n      `,\n    )\n    .get(username);\n  if (actor == null) return c.redirect(\"/setup\");\n  const form = await c.req.formData();\n  const content = form.get(\"content\")?.toString();\n  if (content == null || content.trim() === \"\") {\n    return c.text(\"Content is required\", 400);\n  }\n  const ctx = fedi.createContext(c.req.raw, undefined);\n  const url: string | null = db.transaction(() => {\n    const post = db\n      .prepare<unknown[], Post>(\n        `\n        INSERT INTO posts (uri, actor_id, content)\n        VALUES ('https://localhost/', ?, ?)\n        RETURNING *\n        `,\n      )\n      .get(actor.id, stringifyEntities(content, { escapeOnly: true }));\n    if (post == null) return null;\n    const url = ctx.getObjectUri(Note, {\n      identifier: username,\n      id: post.id.toString(),\n    }).href;\n    db.prepare(\"UPDATE posts SET uri = ?, url = ? WHERE id = ?\").run(\n      url,\n      url,\n      post.id,\n    );\n    return url;\n  })();\n  if (url == null) return c.text(\"Failed to create post\", 500);\n  return c.redirect(url);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching NodeInfo using Fedify Context (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `Context.lookupNodeInfo()` method (available since Fedify 1.4.0) to fetch NodeInfo data from a specified server URL. The method handles the discovery process (fetching `/.well-known/nodeinfo` and following links) and returns the parsed `NodeInfo` object if successful, or `undefined` otherwise.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/nodeinfo.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nconst nodeInfo = await ctx.lookupNodeInfo(\"https://example.com/\");\nif (nodeInfo != null) console.log(nodeInfo);\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgresMessageQueue in Fedify (TypeScript)\nDESCRIPTION: Example of using PostgresMessageQueue for production use in systems already using PostgreSQL. This implementation uses a PostgreSQL database as the message queue backend, utilizing a table for queue maintenance and LISTEN/NOTIFY for real-time message delivery.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { PostgresMessageQueue } from \"@fedify/postgres\";\nimport postgres from \"postgres\";\n\nconst federation = createFederation<void>({\n  kv: null as unknown as KvStore,\n  queue: new PostgresMessageQueue(\n    postgres(\"postgresql://user:pass@localhost/db\"),\n  ),\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring allowPrivateAddress in Fedify Federation (TypeScript)\nDESCRIPTION: This code demonstrates how to enable the allowPrivateAddress option when calling createFederation from the Fedify library. This configuration allows the local server to fetch ActivityPub resources from private network addresses (such as localhost) for controlled testing environments or end-to-end testing. Required dependency: '@fedify/fedify'. Inputs include federated configuration options, and the key parameter allowPrivateAddress is set to true to bypass SSRF blocks. This feature should be used only in safe test setups due to potential security risks; certain other loader options cannot be used in this configuration.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/test.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\\nimport { createFederation } from \"@fedify/fedify\";\\n// ---cut-before---\\nconst federation = createFederation({\\n  // ... other options\\n  allowPrivateAddress: true,\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fine-grained Access Control in Outbox Dispatcher\nDESCRIPTION: This snippet demonstrates how to implement fine-grained access control in the outbox dispatcher. It filters posts based on visibility to the requesting actor.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/access-control.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federation } from \"./your-federation.ts\";\nimport { getPosts, toCreate } from \"./your-model.ts\";\n\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier) => {\n    const posts = await getPosts(identifier);  // Get posts from the database\n    const keyOwner = await ctx.getSignedKeyOwner();  // Get the actor who signed the request\n    if (keyOwner == null) return { items: [] };  // Return an empty array if the actor is not found\n    const items = posts\n      .filter(post => post.isVisibleTo(keyOwner))  \n      .map(toCreate);  // Convert model objects to ActivityStreams objects\n    return { items };\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring LogTape in a Fedify Application\nDESCRIPTION: Example of how to configure logging in a Fedify application using the LogTape package. Sets up console sink, logger categories with different log levels, and AsyncLocalStorage for context tracking.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/log.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AsyncLocalStorage } from \"node:async_hooks\";\nimport { configure, getConsoleSink } from \"@logtape/logtape\";\n\nawait configure({\n  sinks: { console: getConsoleSink() },\n  loggers: [\n    { category: \"your-app\", sinks: [\"console\"], lowestLevel: \"debug\" },\n    { category: \"fedify\",   sinks: [\"console\"], lowestLevel: \"error\" },\n  ],\n  contextLocalStorage: new AsyncLocalStorage(),\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorized Fetch for Outbox Dispatcher in TypeScript\nDESCRIPTION: This snippet shows how to enable authorized fetch for the outbox dispatcher using the AuthorizePredicate callback. It verifies if the requesting actor is blocked before allowing access.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/access-control.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federation } from \"./your-federation.ts\";\nimport { isBlocked } from \"./your-blocklist.ts\";\n\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier) => {\n    // Omitted for brevity; see the related section for details.\n  })\n  .authorize(async (ctx, identifier) => {\n    const signedKeyOwner  = await ctx.getSignedKeyOwner();\n    if (signedKeyOwner == null) return false;\n    return !await isBlocked(identifier, signedKeyOwner);\n  });\n```\n\n----------------------------------------\n\nTITLE: Looking Up Remote Objects by Handle in Fedify\nDESCRIPTION: Shows how to use Context.lookupObject() method to find an actor object using a fediverse handle. This method queries the remote server's WebFinger endpoint to get the actor's URI from the handle, then fetches the actor object.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = await ctx.lookupObject(\"@hongminhee@todon.eu\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorized Fetch for Actor Dispatcher in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable authorized fetch for the actor dispatcher using the AuthorizePredicate callback. It checks if the requesting actor is blocked before granting access.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/access-control.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federation } from \"./your-federation.ts\";\nimport { isBlocked } from \"./your-blocklist.ts\";\n\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    // Omitted for brevity; see the related section for details.\n  })\n  .authorize(async (ctx, identifier) => {\n    const signedKeyOwner = await ctx.getSignedKeyOwner();\n    if (signedKeyOwner == null) return false;\n    return !await isBlocked(identifier, signedKeyOwner);\n  });\n```\n\n----------------------------------------\n\nTITLE: Specifying Recipient with Shared Inbox in Fedify sendActivity (TypeScript)\nDESCRIPTION: Demonstrates specifying a recipient using a `Recipient` object literal that includes the optional `endpoints.sharedInbox` property. By setting the `preferSharedInbox: true` option in `sendActivity`, Fedify will attempt to deliver the activity to the shared inbox URL provided.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Context, Recipient } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\n// ---cut-before---\nawait ctx.sendActivity(\n  { username: \"john\" },\n  {\n    id: new URL(\"https://example.com/actors/1\"),\n    inboxId: new URL(\"https://example.com/actors/1/inbox\"),\n    endpoints: {\n      sharedInbox: new URL(\"https://example.com/inbox\"),\n    }\n  } satisfies Recipient,\n  activity,\n  { preferSharedInbox: true },  // [!code highlight]\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching NodeInfo with Best-Effort Parsing (TypeScript)\nDESCRIPTION: This snippet shows how to use the `Context.lookupNodeInfo()` method with the `{ parse: \"best-effort\" }` option. This instructs Fedify to attempt parsing potentially invalid or slightly non-compliant NodeInfo responses from other servers, increasing interoperability, although successful parsing is not guaranteed.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/nodeinfo.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nconst nodeInfo = await ctx.lookupNodeInfo(\"https://example.com/\", {\n  parse: \"best-effort\",\n});\n\nif (nodeInfo != null) console.log(nodeInfo);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Activity with Skip If Unsigned Option - Fedify (TypeScript)\nDESCRIPTION: Shows forwarding an activity to a followers collection using forwardActivity, but skipping if the activity lacks a valid signature or proof. Applicable when strict trust chains are required. Assumes a preconfigured InboxContext and highlights use of skipIfUnsigned option to guard against unsigned relayed content.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type InboxContext } from \"@fedify/fedify\";\nconst ctx = null as unknown as InboxContext<void>;\n// ---cut-before---\nawait ctx.forwardActivity(\n  { identifier: \"alice\" },\n  \"followers\",\n  { skipIfUnsigned: true },\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Fedify with Hono\nDESCRIPTION: This code shows how to integrate Fedify with the Hono web framework using the @fedify/fedify/x/hono module.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { federation } from \"@fedify/fedify/x/hono\";\nimport { Hono } from \"hono\";\n\nconst fedi = createFederation<string>({\n  // Omitted for brevity; see the related section for details.\n});\n\nconst app = new Hono();\napp.use(federation(fedi, (ctx) => \"context data\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Federation with Custom KvStore in Fedify (TypeScript)\nDESCRIPTION: Illustrates how to instantiate a custom KvStore and integrate it into a federation instance using the createFederation function from @fedify/fedify. This setup is required to use the newly defined storage backend within a Fedify-powered federation. The code assumes MyCustomKvStore is implemented and that createFederation can accept kv as a configuration option.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\n\nconst customKvStore = new MyCustomKvStore();\nconst federation = createFederation<void>({\n  kv: customKvStore,\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Endpoints with Shared Inbox in Fedify using TypeScript\nDESCRIPTION: This snippet shows how to instantiate an `Endpoints` object for a Fedify actor, specifically setting the `sharedInbox` property. The `sharedInbox` URI is generated by calling `ctx.getInboxUri()` without any arguments, which provides the designated endpoint for receiving activities directed to multiple followers. This configuration is part of defining an actor's properties. It requires the `Endpoints` and `Context` types from the `@fedify/fedify` library.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Endpoints, Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nnew Endpoints({ sharedInbox: ctx.getInboxUri() })\n```\n\n----------------------------------------\n\nTITLE: Customizing User-Agent Header in Fedify using TypeScript\nDESCRIPTION: Demonstrates how to configure the `userAgent` option in Fedify (version 1.3.0+) using a TypeScript object. It specifies custom `software` (application name/version) and `url` (instance URL) properties to modify the generated `User-Agent` header for outgoing HTTP requests, providing more context about the originating instance.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  software: \"MyApp/1.0.0\",\n  url: \"https://myinstance.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Shared Key Pair for Inbox - Fedify (TypeScript)\nDESCRIPTION: Shows how to set up a shared key dispatcher by providing a key pair instead of referencing an actor identifier. Uses a hypothetical getInstanceActor function to fetch key material from DB or storage, then imports the JWK and constructs the key dispatcher result. Requires @fedify/fedify's importJwk utility, and inputs include functions for key lookup and URI usage. The snippet is useful when fine-grained key control is needed, providing privateKey and keyId directly.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2391\nimport type { Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n/**\n * A hypothetical type that represents an instance actor.\n */\ninterface InstanceActor {\n  /**\n   * The private key of the instance actor in JWK format.\n   */\n  privateKey: JsonWebKey;\n  /**\n   * The URI of the public key of the instance actor.\n   */\n  publicKeyUri: string;\n}\n/**\n * A hypothetical function that fetches information about the instance actor\n * from a database or some other storage.\n * @returns Information about the instance actor.\n */\nfunction getInstanceActor(): InstanceActor;\n// ---cut-before---\nimport { importJwk } from \"@fedify/fedify\";\n\ninterface InstanceActor {\n  privateKey: JsonWebKey;\n  publicKeyUri: string;\n}\n\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .setSharedKeyDispatcher(async (_ctx) => {\n    // The following getInstanceActor() is just a hypothetical function that\n    // fetches information about the instance actor from a database or some\n    // other storage:\n    const instanceActor: InstanceActor = await getInstanceActor();\n    return {\n      privateKey: await importJwk(instanceActor.privateKey, \"private\"),\n      keyId: new URL(instanceActor.publicKeyUri),\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Dispatcher for Federation in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Federation object, set up an actor dispatcher for a single actor named 'me', and serve the federation using different runtimes (Deno, Bun, Node.js).\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation, MemoryKvStore, Person } from \"@fedify/fedify\";\n\nconst federation = createFederation<void>({\n  kv: new MemoryKvStore(),\n});\n\nfederation.setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n  if (identifier !== \"me\") return null;  // Other than \"me\" is not found.\n  return new Person({\n    id: ctx.getActorUri(identifier),\n    name: \"Me\",  // Display name\n    summary: \"This is me!\",  // Bio\n    preferredUsername: identifier,  // Bare handle\n    url: new URL(\"/\", ctx.url),\n  });\n});\n\nDeno.serve(\n  request => federation.fetch(request, { contextData: undefined })\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Inbox Listener for Follow Activity with Fedify (TypeScript)\nDESCRIPTION: This snippet registers an inbox listener for the 'Follow' activity using the Fedify framework. It expects a Federation instance and chains the 'setInboxListeners' and 'on' methods to handle incoming follow requests at specific inbox endpoints. Inputs include incoming ActivityPub follow activities; the output is logging the follower's information to the console. Dependencies: '@fedify/fedify'. Key parameters are inbox URI patterns and activity classes. This implementation does not yet respond with an Accept activity.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Federation, Follow } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n// ---cut-before---\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Follow, async (ctx, follow) => {\n    if (follow.id == null || follow.actorId == null || follow.objectId == null) {\n      return;\n    }\n    const parsed = ctx.parseUri(follow.objectId);\n    if (parsed?.type !== \"actor\" || parsed.identifier !== \"me\") return;\n    const follower = await follow.getActor(ctx);\n    console.debug(follower);\n  });\n```\n\n----------------------------------------\n\nTITLE: Constructing Fedify Actor URIs in TypeScript\nDESCRIPTION: Shows the usage of the `Context.getActorUri()` method from `@fedify/fedify` to generate the canonical, dereferenceable URI for a Fedify actor given its unique identifier. This is essential for linking to actors within the Fediverse. Requires a Fedify `Context` object.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getActorUri(\"john_doe\")\n```\n\n----------------------------------------\n\nTITLE: Using Context Data in Actor Dispatcher in TypeScript\nDESCRIPTION: This code snippet demonstrates how to access the context data (such as a database connection) within an actor dispatcher callback function.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setActorDispatcher(\"/users/{handle}\", async (ctx, handle) => {\n  // There is a database connection in `ctx.data`.\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Activity Delivery Fan-Out with sendActivity Options (Fedify, TypeScript)\nDESCRIPTION: Demonstrates customizing the fan-out strategy for sending activities to a large number of recipients using the fanout option in Context.sendActivity. This TypeScript example shows how to specify auto, skip, or force strategies, optimizing between quick response times and per-recipient customization. The method parameters include sender, recipients, the activity, and an options object with fanout set to 'auto'; the setting improves delivery performance at scale and is available since Fedify 1.5.0.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Activity, Context, Recipient } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = {} as Activity;\nconst recipients: Recipient[] = [];\n// ---cut-before---\nawait ctx.sendActivity(\n  { identifier: \"alice\" },  // sender\n  recipients,               // recipients\n  activity,                 // activity to send\n  { fanout: \"auto\" }        // fan-out strategy  // [!code highlight]\n);\n```\n\n----------------------------------------\n\nTITLE: Using x-forwarded-fetch Middleware with Bun.serve (TypeScript)\nDESCRIPTION: Demonstrates applying the `behindProxy` middleware from `x-forwarded-fetch` when using `Bun.serve`. By wrapping the `fetch` handler, this setup ensures Fedify correctly identifies the host using the `X-Forwarded-Host` header in environments where the application runs behind a reverse proxy.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { behindProxy } from \"x-forwarded-fetch\";\n\nBun.serve({\n  fetch: behindProxy((request) => federation.fetch(request, { contextData: undefined })),\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Shared Inbox URI with Fedify Context in TypeScript\nDESCRIPTION: Shows how to create a Fedify Context and use getInboxUri without arguments to obtain the shared inbox URI. @fedify/fedify must be available. No parameters are required; the output is the URI string for the shared inbox. The same constraints on existence apply as with actor inbox URIs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getInboxUri()\n```\n\n----------------------------------------\n\nTITLE: Resolving Collection Objects for Activity Recipients\nDESCRIPTION: This code shows how to handle both actor and collection objects in the 'to' field of a Create activity. It recursively resolves collection objects to determine all recipients.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n.on(Create, async (ctx, create) => {\n  for await (const to of create.getTos()) {\n    if (isActor(to)) {\n      // `to` is a recipient of the activity\n      // Do something with the recipient\n    } else if (to instanceof Collection) {\n      // `to` is a collection object\n      for await (const actor of to.getItems()) {\n        if (!isActor(actor)) continue;\n        // `actor` is a recipient of the activity\n        // Do something with the recipient\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using x-forwarded-fetch Middleware with Node.js/@hono/node-server (TypeScript)\nDESCRIPTION: Illustrates applying the `behindProxy` middleware from `x-forwarded-fetch` in a Node.js environment using `@hono/node-server`. The middleware wraps the `fetch` handler function, enabling Fedify to correctly determine the host from `X-Forwarded-Host` headers when running behind a proxy.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@hono/node-server\";\nimport { behindProxy } from \"x-forwarded-fetch\";\n\nserve({\n  fetch: behindProxy((request) => federation.fetch(request, { contextData: undefined })),\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Only the Inbox Queue Manually (Node.js/Bun, TypeScript)\nDESCRIPTION: For Node.js/Bun, this snippet manually starts only the 'inbox' queue via startQueue with a queue parameter and signal controller using process.on/SIGINT. Useful to restrict message processing to a specific queue when both inbox/outbox are configured. Dependencies: @fedify/fedify, @fedify/redis, ioredis, node:process. Similar to Deno variant, but uses process.env and process.on.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KvStore } from \"@fedify/fedify\";\nimport { createFederation } from \"@fedify/fedify\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\nimport process from \"node:process\";\n\nconst federation = createFederation<void>({\n  queue: new RedisMessageQueue(() => new Redis()),\n  manuallyStartQueue: true,  // [!code highlight]\n  // ... other options\n  // ---cut-start---\n  kv: null as unknown as KvStore,\n  // ---cut-end---\n});\n\n// ---cut-before---\nif (process.env.NODE_TYPE === \"worker\") {\n  const controller = new AbortController();\n  process.on(\"SIGINT\", () => controller.abort());\n  await federation.startQueue(undefined, {\n    signal: controller.signal,\n    queue: \"inbox\",  // [!code highlight]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Hosting in Actor Dispatcher in TypeScript\nDESCRIPTION: This snippet shows how to use the Context.host property to implement virtual hosting in an actor dispatcher. It constructs a full handle using the virtual host information.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setActorDispatcher(\"/@{handle}\", (ctx, handle) => {\n  const fullHandle = `${handle}@${ctx.host}`;\n  // Omitted for brevity\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Equivalent Create Objects with Direct and Referenced Note in TypeScript\nDESCRIPTION: Illustrates two ways of creating equivalent Create objects, one with a fully instantiated Note and another with just the Note's URL reference.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create, Note } from \"@fedify/fedify\";\nimport { Temporal } from \"@js-temporal/polyfill\";\n\nconst a = new Create({\n  id: new URL(\"https://example.com/activities/123\"),\n  actor: new URL(\"https://example.com/users/alice\"),\n  object: new Note({\n    id: new URL(\"https://example.com/notes/456\"),\n    content: \"Hello, world!\",\n    published: Temporal.Instant.from(\"2024-01-01T00:00:00Z\"),\n  }),\n});\nconst b = new Create({\n  actor: new URL(\"https://example.com/users/alice\"),\n  object: new URL(\"https://example.com/notes/456\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Actor Persistence Function Implementation\nDESCRIPTION: Implements a function to persist or update actor information in the database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nasync function persistActor(actor: APActor): Promise<Actor | null> {\n  if (actor.id == null || actor.inboxId == null) {\n    logger.debug(\"Actor is missing required fields: {actor}\", { actor });\n    return null;\n  }\n  return (\n    db\n      .prepare<unknown[], Actor>(\n        `\n        -- Add a new actor record or update if it already exists\n        INSERT INTO actors (uri, handle, name, inbox_url, shared_inbox_url, url)\n        VALUES (?, ?, ?, ?, ?, ?)\n        ON CONFLICT (uri) DO UPDATE SET\n          handle = excluded.handle,\n          name = excluded.name,\n          inbox_url = excluded.inbox_url,\n          shared_inbox_url = excluded.shared_inbox_url,\n          url = excluded.url\n        WHERE\n          actors.uri = excluded.uri\n        RETURNING *\n        `,\n      )\n      .get(\n        actor.id.href,\n        await getActorHandle(actor),\n        actor.name?.toString(),\n        actor.inboxId.href,\n        actor.endpoints?.sharedInbox?.href,\n        actor.url?.href,\n      ) ?? null\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Federation.fetch with Deno.serve (TypeScript)\nDESCRIPTION: Illustrates how to use the `Federation.fetch()` method with Deno's native HTTP server. The `fetch()` method is passed directly as the request handler to `Deno.serve()`, allowing Fedify to process incoming HTTP requests in a Deno environment.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(\n  (request) => federation.fetch(request, { contextData: undefined })\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Federation in TypeScript\nDESCRIPTION: This code snippet shows the necessary imports for setting up federation functionality. It includes types and functions from Fedify and the local database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Endpoints, Person, createFederation } from \"@fedify/fedify\";\nimport db from \"./db.ts\";\nimport type { Actor, User } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Followers Collection by Server in TypeScript\nDESCRIPTION: Demonstrates how to implement a followers dispatcher that filters actors based on a provided base URI. It includes handling of cursor pagination and conversion of user objects to Recipient format.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setFollowersDispatcher(\n    \"/users/{identifier}/followers\",\n    async (ctx, identifier, cursor, baseUri) => {\n      // Work with the database to find the actors that are following the actor\n      // (the below `getFollowersByUserId` is a hypothetical function):\n      let users = await getFollowersByUserId(identifier);\n      // Filter the actors by the base URI:\n      if (baseUri != null) {\n        users = users.filter(actor => actor.uri.href.startsWith(baseUri.href));\n      }\n      // Turn the users into `Recipient` objects:\n      const items: Recipient[] = users.map(actor => ({\n        id: actor.uri,\n        inboxId: actor.inboxUri,\n      }));\n      return { items };\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actor Objects\nDESCRIPTION: Example of using RequestContext.getActor() to dispatch an actor object and send an Update activity.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctx = federation.createContext(request, undefined);\nconst actor = await ctx.getActor(identifier);\nif (actor != null) {\n  await ctx.sendActivity(\n    { identifier },\n    \"followers\",\n    new Update({ actor: actor.id, object: actor }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Create to JSON-LD (TypeScript)\nDESCRIPTION: This snippet demonstrates converting a new (possibly unhydrated) Create object instance into a JSON-LD document using await create.toJsonLd(). Dependencies: @fedify/fedify and async/await support. The Create instance must be properly initialized; input parameters are as per the Create constructor. The output is a non-compacted or expanded JSON-LD object by default; additional options may alter the structure.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create } from \"@fedify/fedify\";\nconst create = new Create({});\n// ---cut-before---\nconst jsonLd = await create.toJsonLd();\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Query in Express Route Handler\nDESCRIPTION: TypeScript JSX code for the main route handler that fetches posts from both the local user and followed actors, orders them chronologically, and renders them in the Home component.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_123\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/\", (c) => {\n  // ... omitted ...\n  if (user == null) return c.redirect(\"/setup\");\n\n  const posts = db\n    .prepare<unknown[], Post & Actor>(\n      `\n      SELECT actors.*, posts.*\n      FROM posts\n      JOIN actors ON posts.actor_id = actors.id\n      WHERE posts.actor_id = ? OR posts.actor_id IN (\n        SELECT following_id\n        FROM follows\n        WHERE follower_id = ?\n      )\n      ORDER BY posts.created DESC\n      `,\n    )\n    .all(user.id, user.id);\n  return c.html(\n    <Layout>\n      <Home user={user} posts={posts} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Create and Note Classes from Fedify\nDESCRIPTION: Import statement for the Create and Note classes from the Fedify library needed for ActivityPub post creation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create, Note } from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Policy for Task Queue (JavaScript)\nDESCRIPTION: Implements a customizable retry policy for failed tasks in the task queue. Introduces new options for outbox and inbox retry policies in CreateFederationOptions.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ninterface CreateFederationOptions {\n  // ... existing properties ...\n  outboxRetryPolicy?: RetryPolicy;\n  inboxRetryPolicy?: RetryPolicy;\n}\n\ntype RetryPolicy = (context: RetryContext) => number | null;\n\ninterface RetryContext {\n  // ... retry context properties ...\n}\n\nfunction createExponentialBackoffPolicy(options?: CreateExponentialBackoffPolicyOptions): RetryPolicy {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Follow Activity with Inlined Actor Object in TypeScript\nDESCRIPTION: This snippet demonstrates creating a Follow activity with an inlined actor object. It shows the structure before the actorDehydrator transformer is applied.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nnew Follow({\n  id: new URL(\"http://example.com/activities/1\"),\n  actor: new Person({\n    id: new URL(\"http://example.com/actors/1\"),\n    name: \"Alice\",\n    preferredUsername: \"alice\",\n  }),\n  object: new Person({\n    id: new URL(\"http://example.com/actors/2\"),\n    name: \"Bob\",\n    preferredUsername: \"bob\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Middleware for Fedify Integration\nDESCRIPTION: This code provides an example of creating a custom middleware to integrate Fedify with a hypothetical web framework that doesn't have official Fedify support.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Federation } from \"@fedify/fedify\";\n\nexport type Middleware = (\n  request: Request,\n  next: (request: Request) => Promise<Response>\n) => Promise<Response>;\n\nexport function createFedifyMiddleware<TContextData>(\n  federation: Federation<TContextData>,\n  contextDataFactory: (request: Request) => TContextData,\n): Middleware {\n  return async (request, next) => {\n    return await federation.fetch(request, {\n      contextData: contextDataFactory(request),\n\n      // If the `federation` object finds a `request` not responsible for it\n      // (i.e., not a federation-related request), it will call the `next`\n      // provided by the web framework to continue the request handling by\n      // the web framework:\n      onNotFound: async (request) => await next(request),\n\n      // Similar to `onNotFound`, but slightly more tickly one.\n      // When the `federation` object finds a `request` not acceptable type-wise\n      // (i.e., a user-agent doesn't want JSON-LD), it will call the `next`\n      // provided by the web framework so that it renders HTML if there's some\n      // page.  Otherwise, it will simply respond with `406 Not Acceptable`.\n      // This trick enables the Fedify and the web framework to share the same\n      // routes and they do content negotiation depending on `Accept` header:\n      onNotAcceptable: async (request) => {\n        const response = await next(request);\n        if (response.status !== 404) return response;\n        return new Response(\"Not Acceptable\", {\n          status: 406,\n          headers: {\n            \"Content-Type\": \"text/plain\",\n            Vary: \"Accept\"\n          },\n        })\n      }\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Followers Collection URI in TypeScript\nDESCRIPTION: Shows how to use the Context.getFollowersUri() method to construct a followers collection URI for a given actor identifier.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFollowersUri(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFollowersUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Defining Recipient Interface for ActivityPub Actors\nDESCRIPTION: Defines the Recipient interface used for ActivityPub actors in the federation protocol. It includes properties for the actor's ID, inbox URL, and shared inbox endpoint.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Recipient {\n  readonly id: URL | null;\n  readonly inboxId: URL | null;\n  readonly endpoints?: {\n    sharedInbox: URL | null;\n  } | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Outgoing Activity Example\nDESCRIPTION: Shows how to use Context.sendActivity() to enqueue an outgoing activity in response to a Follow activity in an inbox listener.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Accept, Follow } from \"@fedify/fedify\";\n\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Follow, async (ctx, follow) => {\n    // In order to send an activity, we need the identifier of the sender actor:\n    if (follow.objectId == null) return;\n    const parsed = ctx.parseUri(follow.objectId);\n    if (parsed?.type !== \"actor\") return;\n    const recipient = await follow.getActor(ctx);\n    if (recipient == null) return;\n    await ctx.sendActivity(\n      { identifier: parsed.identifier }, // sender\n      recipient,\n      new Accept({ actor: follow.objectId, object: follow }),\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Getting Authenticated DocumentLoader in Fedify\nDESCRIPTION: Demonstrates how to obtain an authenticated DocumentLoader using Context.getDocumentLoader() method. This is useful for loading remote documents that require authentication, such as private following collections.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentLoader = await ctx.getDocumentLoader({\n  identifier: \"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\",\n});\nconst following = await actor.getFollowing({ documentLoader });\n```\n\n----------------------------------------\n\nTITLE: Defining an Account Setup Form Component in JSX with TypeScript and Hono\nDESCRIPTION: Creates a SetupForm component using JSX. The form collects a username, applying validation via maxlength and pattern attributes. It's wrapped in a fragment to keep JSX's single-top-level-element constraint. No external dependencies except Hono's JSX typing. Inputs: no external inputs; outputs: a JSX structure containing a heading and form.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { FC } from \"hono/jsx\";\n// ---cut-before---\nexport const SetupForm: FC = () => (\n  <>\n    <h1>Set up your microblog</h1>\n    <form method=\"post\" action=\"/setup\">\n      <fieldset>\n        <label>\n          Username{\" \"}\n          <input\n            type=\"text\"\n            name=\"username\"\n            required\n            maxlength={50}\n            pattern=\"^[a-z0-9_\\-]+$\"\n          />\n        </label>\n      </fieldset>\n      <input type=\"submit\" value=\"Setup\" />\n    </form>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Application Layout Component with JSX and TypeScript (Hono)\nDESCRIPTION: Implements a top-level layout component in TypeScript using Hono's JSX support. This component renders a standard HTML document structure with meta tags and Pico CSS linked for styling. It is parameterized by children, allowing any child components to be rendered inside the main container. Dependencies: 'hono/jsx' types and Pico CSS. Inputs: children elements; outputs: a full HTML document markup as JSX.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { FC } from \"hono/jsx\";\n\nexport const Layout: FC = (props) => (\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <meta name=\"color-scheme\" content=\"light dark\" />\n      <title>Microblog</title>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"\n      />\n    </head>\n    <body>\n      <main class=\"container\">{props.children}</main>\n    </body>\n  </html>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Featured Tags Dispatcher in TypeScript\nDESCRIPTION: Shows how to set up a featured tags dispatcher using Fedify's Federation API. It includes a hypothetical function to fetch featured tags and demonstrates mapping these tags to Hashtag objects.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setFeaturedTagsDispatcher(\"/users/{identifier}/tags\", async (ctx, identifier, cursor) => {\n    // Work with the database to find the tags that the actor has featured\n    // (the below `getFeaturedTagsByUserId` is a hypothetical function):\n    const hashtags = await getFeaturedTagsByUserId(identifier);\n    const items = hashtags.map(hashtag =>\n      new Hashtag({\n        href: new URL(`/tags/${encodeURIComponent(hashtag)}`, ctx.url),\n        name: `#${hashtag}`,\n      })\n    );\n    return { items };\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom KvStore Interface in Fedify (TypeScript)\nDESCRIPTION: Shows the basic structure for implementing a custom KvStore interface in Fedify. It includes skeleton methods for get(), set(), and delete() operations that need to be implemented based on the specific storage backend.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KvStore, KvKey, KvStoreSetOptions } from \"@fedify/fedify\";\n\nclass MyCustomKvStore implements KvStore {\n  async get<T = unknown>(key: KvKey): Promise<T | undefined> {\n    // Implement get logic\n    // ---cut-start---\n    return undefined;\n    // ---cut-end---\n  }\n\n  async set(\n    key: KvKey,\n    value: unknown,\n    options?: KvStoreSetOptions\n  ): Promise<void> {\n    // Implement set logic\n  }\n\n  async delete(key: KvKey): Promise<void> {\n    // Implement delete logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Remote Collections in Fedify\nDESCRIPTION: Shows how to use Context.traverseCollection() method to iterate through a remote collection, such as an actor's outbox. This method allows for efficient traversal of large collections from beginning to end.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = await ctx.lookupObject(\"@hongminhee@fosstodon.org\");\nif (isActor(actor)) {\n  const outbox = await actor.getOutbox();\n  if (outbox != null) {\n    for await (const activity of ctx.traverseCollection(outbox)) {\n      console.log(activity);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring x-forwarded-fetch Middleware for Public Access\nDESCRIPTION: This TypeScript snippet shows how to integrate the x-forwarded-fetch middleware to make the server aware of its public exposure through HTTPS when using fedify tunnel.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { behindProxy } from \"x-forwarded-fetch\";\n\nDeno.serve(\n  behindProxy(request => federation.fetch(request, { contextData: undefined }))\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Route Rendering with Hono and JSX in TypeScript\nDESCRIPTION: Defines a GET route handler in a Hono-based TypeScript application, rendering the SetupForm within the Layout component for the /setup page. Utilizes Hono's context's c.html method for HTML output. Dependencies: 'hono', 'hono/jsx', and the Layout and SetupForm components. Inputs: HTTP GET request to '/setup'; outputs: rendered HTML for the setup form page.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from \"hono\";\nconst app = new Hono();\nimport type { FC } from \"hono/jsx\";\nexport const Layout: FC = (props) => <html/>;\nexport const SetupForm: FC = () => <></>;\n// ---cut-before---\napp.get(\"/setup\", (c) =>\n  c.html(\n    <Layout>\n      <SetupForm />\n    </Layout>,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Fedify in Node.js\nDESCRIPTION: Command and package.json configuration for installing Fedify in Node.js environment.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/install.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @fedify/fedify\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"@fedify/fedify\": \"^1.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Activity Sending Function in TypeScript\nDESCRIPTION: Function to send a Follow activity immediately without queueing using the immediate option.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nasync function sendFollow(\n  ctx: Context<void>,\n  senderId: string,\n  recipient: Recipient,\n) {\n  await ctx.sendActivity(\n    { identifier: senderId },\n    recipient,\n    new Follow({\n      actor: ctx.getActorUri(senderId),\n      object: recipient.id,\n    }),\n    { immediate: true },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Follow Request UI Component\nDESCRIPTION: Enhanced Home component with a form for sending follow requests to other ActivityPub actors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_109\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Home: FC<HomeProps> = ({ user }) => (\n  <>\n    <hgroup>\n    </hgroup>\n    <form method=\"post\" action={`/users/${user.username}/following`}>\n      <fieldset role=\"group\">\n        <input\n          type=\"text\"\n          name=\"actor\"\n          required={true}\n          placeholder=\"Enter an actor handle (e.g., @johndoe@mastodon.com) or URI (e.g., https://mastodon.com/@johndoe)\"\n        />\n        <input type=\"submit\" value=\"Follow\" />\n      </fieldset>\n    </form>\n    <form method=\"post\" action={`/users/${user.username}/posts`}>\n    </form>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring TracerProvider with Sentry SDK\nDESCRIPTION: TypeScript code demonstrating how to use Sentry's TracerProvider with Fedify's createFederation function.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/opentelemetry.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { getClient } from \"@sentry/node\";\n\nconst federation = createFederation<void>({\n  kv: null as unknown as KvStore,\n  // Omitted for brevity; see the related section for details.\n  tracerProvider: getClient()?.traceProvider,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Federation.fetch with Bun.serve (TypeScript)\nDESCRIPTION: Shows how to integrate the `Federation.fetch()` method with Bun's native HTTP server. The `fetch()` method is provided as the value for the `fetch` property within the configuration object passed to `Bun.serve()`, enabling Fedify to handle requests in a Bun environment.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nBun.serve({\n  fetch: (request) => federation.fetch(request, { contextData: undefined }),\n})\n```\n\n----------------------------------------\n\nTITLE: Sending a Follow Activity using Fedify Context in TypeScript\nDESCRIPTION: Demonstrates sending a `Follow` activity using the `ctx.sendActivity()` method. It requires a Fedify `Context` object, the sender's identifier, a `Recipient` object, and constructs a `Follow` activity object with a unique ID, the sender's actor URI, and the recipient's ID as the object being followed. The sender is specified using `{ identifier: senderId }`.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Context, Follow, type Recipient } from \"@fedify/fedify\";\n\nasync function sendFollow(\n  ctx: Context<void>,\n  senderId: string,\n  recipient: Recipient,\n) {\n  await ctx.sendActivity(\n    { identifier: senderId },\n    recipient,\n    new Follow({\n      id: new URL(`https://example.com/${senderId}/follows/${recipient.id}`),\n      actor: ctx.getActorUri(senderId),\n      object: recipient.id,\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AmqpMessageQueue in Fedify (TypeScript)\nDESCRIPTION: Example of using AmqpMessageQueue for production use across various runtimes. This implementation uses AMQP 0-9-1 for message delivery, primarily designed for RabbitMQ. It provides scalability and high performance but requires an AMQP broker setup.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { AmqpMessageQueue } from \"@fedify/amqp\";\nimport { connect } from \"amqplib\";\n\nconst federation = createFederation({\n  kv: null as unknown as KvStore,\n  queue: new AmqpMessageQueue(await connect(\"amqp://localhost\")),  // [!code highlight]\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing an Inbox Collection URI in TypeScript using Fedify Context\nDESCRIPTION: This snippet demonstrates using the `Context.getInboxUri()` method from the Fedify library to generate the URI for an actor's inbox collection. It requires the actor's identifier (e.g., 'alice') and returns the corresponding inbox URI. Similar to `getOutboxUri`, this method constructs the URI but doesn't guarantee the collection exists.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getInboxUri(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Creating Home Component with Post Form in TSX\nDESCRIPTION: React-like component for the home page that displays user information and a form for creating new posts. Includes profile link and post submission form.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_84\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface HomeProps {\n  user: User & Actor;\n}\n\nexport const Home: FC<HomeProps> = ({ user }) => (\n  <>\n    <hgroup>\n      <h1>{user.name}'s microblog</h1>\n      <p>\n        <a href={`/users/${user.username}`}>{user.name}'s profile</a>\n      </p>\n    </hgroup>\n    <form method=\"post\" action={`/users/${user.username}/posts`}>\n      <fieldset>\n        <label>\n          <textarea name=\"content\" required={true} placeholder=\"What's up?\" />\n        </label>\n      </fieldset>\n      <input type=\"submit\" value=\"Post\" />\n    </form>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page Route Handler in Hono\nDESCRIPTION: Route handler for the home page that retrieves user and actor data from the database and renders the Home component. Redirects to setup if no user exists.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_86\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/\", (c) => {\n  const user = db\n    .prepare<unknown[], User & Actor>(\n      `\n      SELECT users.*, actors.*\n      FROM users\n      JOIN actors ON users.id = actors.user_id\n      LIMIT 1\n      `,\n    )\n    .get();\n  if (user == null) return c.redirect(\"/setup\");\n\n  return c.html(\n    <Layout>\n      <Home user={user} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Actor Inbox URI with Fedify Context in TypeScript\nDESCRIPTION: Demonstrates how to instantiate the Fedify Context type and use the getInboxUri method to construct a dereferenceable inbox URI for a specific actor. Requires @fedify/fedify as a dependency, and the actor's identifier as a string parameter. The method does not guarantee the inbox exists (may return a 404), so validity should be checked beforehand. Input is the actor's identifier; output is the constructed inbox URI as a string.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getInboxUri(\"5fefc9bb-397d-4949-86bb-33487bf233fb\")\n```\n\n----------------------------------------\n\nTITLE: Serializing Hydrated Create to JSON-LD in Fedify (TypeScript)\nDESCRIPTION: This code shows hydrating a Create object's object property with getObject(), then converting the Create instance to JSON-LD with toJsonLd(). Dependencies: @fedify/fedify, async/await capable environment, and a reachable remote object. After hydration, the output JSON-LD contains a full object structure rather than a string identifier; the instance must hydrate the object before serialization. Limitations include omitted attributes for readability. Input: a Create instance, possibly constructed with minimal parameters.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create } from \"@fedify/fedify\";\nconst create = new Create({ });\n// ---cut-before---\n// Hydrates the `object` property:\nawait create.getObject();\n\nconst jsonLd = await create.toJsonLd();\nconsole.log(JSON.stringify(jsonLd));\n```\n\n----------------------------------------\n\nTITLE: Building Actor URI in Actor Dispatcher\nDESCRIPTION: Demonstrates using the Context.getActorUri() method to generate proper actor URIs when implementing an actor dispatcher.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n  // Work with the database to find the actor by the identifier.\n  if (user == null) return null;\n  return new Person({\n    id: ctx.getActorUri(identifier),\n    preferredUsername: identifier,\n    // Many more properties...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate MessageQueues for Inbox and Outbox in Fedify (TypeScript)\nDESCRIPTION: Demonstrates how to use different message queue backends for inbox and outbox processing within a Fedify instance. Leverages PostgresMessageQueue for inbox (persistent database) and RedisMessageQueue for outbox (speed-oriented) in a single FederationOptions.queue object. Required dependencies: @fedify/fedify, @fedify/postgres, @fedify/redis, postgres, ioredis. Key parameters are separate queue instances for each route; inputs are database/redis configs and outputs are a tailored Federation instance. Limitations: make sure your databases/queues are properly configured and accessible.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createFederation,\n  type KvStore,\n  MemoryKvStore,\n  type MessageQueue,\n} from \"@fedify/fedify\";\nimport { PostgresMessageQueue } from \"@fedify/postgres\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport postgres from \"postgres\";\nimport Redis from \"ioredis\";\n\n// ---cut-before---\nconst federation = createFederation<void>({\n// ---cut-start---\n  kv: null as unknown as KvStore,\n// ---cut-end---\n  queue: {\n    inbox: new PostgresMessageQueue(\n      postgres(\"postgresql://user:pass@localhost/db\")\n    ),\n    outbox: new RedisMessageQueue(() => new Redis()),\n  },\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing a NodeInfo Endpoint in Fedify (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register a NodeInfo dispatcher using the `Federation.setNodeInfoDispatcher()` method in Fedify. It sets up an endpoint (commonly `/nodeinfo/2.1`) that asynchronously returns a `NodeInfo` object containing server software details, supported protocols (like ActivityPub), and usage statistics. The usage statistics are hard-coded for demonstration and should be replaced with dynamic data.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/nodeinfo.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\nimport { createFederation } from \"@fedify/fedify\";\n\nconst federation = createFederation({\n  // Omitted for brevity; see the related section for details.\n});\n\nfederation.setNodeInfoDispatcher(\"/nodeinfo/2.1\", async (ctx) => {\n  return {\n    software: {\n      name: \"your-software-name\",  // Lowercase, digits, and hyphens only.\n      version: { major: 1, minor: 0, patch: 0 },\n      homepage: new URL(\"https://your-software.com/\"),\n    },\n    protocols: [\"activitypub\"],\n    usage: {\n      // Usage statistics is hard-coded here for demonstration purposes.\n      // You should replace these with real statistics:\n      users: { total: 100, activeHalfyear: 50, activeMonth: 20 },\n      localPosts: 1000,\n      localComments: 2000,\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenTelemetry SDK with OTLP Exporter\nDESCRIPTION: TypeScript code to initialize OpenTelemetry SDK with OTLP trace exporter for a Fedify application.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/opentelemetry.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeSDK } from \"@opentelemetry/sdk-node\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-proto\";\n\nconst sdk = new NodeSDK({\n  serviceName: \"my-fedify-app\",\n  traceExporter: new OTLPTraceExporter({\n    url: \"http://localhost:4317\",\n    headers: { \"x-some-header\": \"some-value\" }\n  }),\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing set() Method in Custom KvStore (TypeScript)\nDESCRIPTION: Demonstrates the implementation of the set() method for a custom KvStore. It stores a value with a given key, handling optional TTL (time-to-live) if the backend supports it.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync set(\n  key: KvKey,\n  value: unknown,\n  options?: KvStoreSetOptions,\n): Promise<void> {\n  const serializedKey = this.serializeKey(key);\n  if (options?.ttl == null) {\n    await this.storage.set(serializedKey, value);\n  } else {\n    // Set with TTL if supported\n    await this.storage.setWithTtl(\n      serializedKey,\n      value,\n      options.ttl.total('millisecond'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Same-Server Recipients in TypeScript\nDESCRIPTION: Shows how to exclude same-server recipients when sending activities using excludeBaseUris option.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.sendActivity(\n  { identifier: senderId },\n  \"followers\",\n  activity,\n  { excludeBaseUris: [ctx.getInboxUri()] },\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Fedify with Fresh\nDESCRIPTION: This code demonstrates how to integrate Fedify with the Fresh web framework for Deno using the @fedify/fedify/x/fresh module.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { integrateHandler } from \"@fedify/fedify/x/fresh\";\n\nconst federation = createFederation<string>({\n  // Omitted for brevity; see the related section for details.\n});\n\n// This is the entry point to the Fedify middleware from the Fresh framework:\nexport const handler = integrateHandler(\n  federation,\n  (req, ctx) => \"context data\",\n);\n```\n\n----------------------------------------\n\nTITLE: Constructing Object URIs in Fedify using TypeScript\nDESCRIPTION: This snippet shows how to construct a dereferenceable URI for an object using the `Context.getObjectUri` method. It requires the object's class (e.g., `Note`) and an object containing the values for the parameters defined in the corresponding dispatcher's path pattern (e.g., `userId`, `noteId`). This method generates the URI based on the registered dispatcher's configuration but does not verify the existence of the object itself.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/object.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Context, Note } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getObjectUri(Note, {\n  userId: \"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\",\n  noteId: \"9f60274d-f6c2-4e3f-8eae-447f4416c0fb\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Header Image for Person Actor in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the 'image' property for a Person actor, which is used as the header image in Mastodon and Misskey.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  image: new Image({\n    url: new URL(\"https://i.imgur.com/yEZ0EEw.jpeg\"),\n    mediaType: \"image/jpeg\",\n  }),\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Followers Route Handler\nDESCRIPTION: TypeScript JSX route handler for the /users/{username}/followers endpoint to fetch and display a user's followers from the database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_72\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username/followers\", async (c) => {\n  const followers = db\n    .prepare<unknown[], Actor>(\n      `\n      SELECT followers.*\n      FROM follows\n      JOIN actors AS followers ON follows.follower_id = followers.id\n      JOIN actors AS following ON follows.following_id = following.id\n      JOIN users ON users.id = following.user_id\n      WHERE users.username = ?\n      ORDER BY follows.created DESC\n      `,\n    )\n    .all(c.req.param(\"username\"));\n  return c.html(\n    <Layout>\n      <FollowerList followers={followers} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Component to Display Follower Count\nDESCRIPTION: TypeScript JSX component update to add follower count and link to the followers page in the Profile component.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_73\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ProfileProps {\n  name: string;\n  username: string;   // [!code highlight]\n  handle: string;\n  followers: number;  // [!code highlight]\n}\n\nexport const Profile: FC<ProfileProps> = ({\n  name,\n  username,   // [!code highlight]\n  handle,\n  followers,  // [!code highlight]\n}) => (\n  <>\n    <hgroup>\n      <h1>\n        <a href={`/users/${username}`}>{name}</a>\n      </h1>\n      <p>\n        <span style=\"user-select: all;\">{handle}</span> &middot;{\" \"}\n        <a href={`/users/${username}/followers`}>\n          {followers === 1 ? \"1 follower\" : `${followers} followers`}\n        </a>\n      </p>\n    </hgroup>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Keys Table in SQLite for ActivityPub\nDESCRIPTION: SQL script to create a 'keys' table for storing RSA and Ed25519 key pairs for ActivityPub actors. The table includes columns for user_id, key type, private key, public key, and creation timestamp.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS keys (\n  user_id     INTEGER NOT NULL REFERENCES users (id),\n  type        TEXT    NOT NULL CHECK (type IN ('RSASSA-PKCS1-v1_5', 'Ed25519')),\n  private_key TEXT    NOT NULL CHECK (private_key <> ''),\n  public_key  TEXT    NOT NULL CHECK (public_key <> ''),\n  created     TEXT    NOT NULL DEFAULT (CURRENT_TIMESTAMP) CHECK (created <> ''),\n  PRIMARY KEY (user_id, type)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing get() Method in Custom KvStore (TypeScript)\nDESCRIPTION: Shows an implementation of the get() method for a custom KvStore. It retrieves a value associated with a key from a hypothetical storage backend, handling cases where the key doesn't exist.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync get<T = unknown>(key: KvKey): Promise<T | undefined> {\n  const serializedKey = this.serializeKey(key);\n  // Retrieve value from your storage backend\n  const value = await this.storage.retrieve(serializedKey);\n  return value as T | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Locked Account Status for Person Actor in TypeScript\nDESCRIPTION: This code demonstrates how to set the 'manuallyApprovesFollowers' property for a Person actor, which indicates a locked account in Mastodon and Misskey.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  manuallyApprovesFollowers: true,\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Only Inbox Queue in Fedify (TypeScript)\nDESCRIPTION: Shows how to configure a Fedify instance with a message queue for only the inbox. PostgresMessageQueue manages inbox activities, while outbox is omitted (not queued). Dependencies: @fedify/fedify, @fedify/postgres, postgres. Main inputs are a Postgres connection string and the message queue instance; output is a Federation instance with only inbox queuing enabled. Limitations: no activities are queued for outbox.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createFederation,\n  type KvStore,\n  MemoryKvStore,\n  type MessageQueue,\n} from \"@fedify/fedify\";\nimport { PostgresMessageQueue } from \"@fedify/postgres\";\nimport postgres from \"postgres\";\n\n// ---cut-before---\nconst federation = createFederation<void>({\n// ---cut-start---\n  kv: null as unknown as KvStore,\n// ---cut-end---\n  queue: {\n    inbox: new PostgresMessageQueue(\n      postgres(\"postgresql://user:pass@localhost/db\")\n    ),\n    // outbox is not provided; outgoing activities will not be queued\n  },\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Display Name for Person Actor in TypeScript\nDESCRIPTION: This code demonstrates how to set the 'name' property for a Person actor, which is used as the display name in Mastodon and most ActivityPub implementations.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Only Inbox Message Queue in TypeScript\nDESCRIPTION: Shows how to configure the `Federation` object to use a message queue only for the inbox, using `PostgresMessageQueue` connected via a `postgres` client. The `outbox` queue is intentionally omitted, resulting in outgoing activities being processed immediately without queuing. The `kv` store is required but represented as null with type assertion for this example.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createFederation,\n  type KvStore,\n  MemoryKvStore,\n  type MessageQueue,\n} from \"@fedify/fedify\";\nimport { PostgresMessageQueue } from \"@fedify/postgres\";\nimport postgres from \"postgres\";\n\ncreateFederation<void>({\nkv: null as unknown as KvStore,\n// ---cut-before---\nqueue: {\n  inbox: new PostgresMessageQueue(\n    postgres(\"postgresql://user:pass@localhost/db\")\n  ),\n  // outbox is not provided; outgoing activities will not be queued.\n}\n// ---cut-after---\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing an Outbox URI with Decoupled Actor Identifier in TypeScript using Fedify\nDESCRIPTION: This snippet shows how to use `Context.getOutboxUri()` when the actor's identifier (a UUID in this case) is decoupled from the WebFinger username. The actual identifier used in the actor dispatcher must be passed to the method, not the username.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getOutboxUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Serializing Unhydrated Create to JSON-LD in Fedify (TypeScript)\nDESCRIPTION: This snippet shows how to serialize a Create object to JSON-LD using toJsonLd(), before hydrating its object property. Dependencies include @fedify/fedify and async/await support. The output JSON-LD will contain the object's URI as a string, not a nested object. Limitations: the snippet does not fetch the remote object and omits extra context details for simplicity. Input is a Create instance with an object property set to a URL.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create } from \"@fedify/fedify\";\n// ---cut-before---\nconst create = new Create({\n  object: new URL(\n    \"https://hollo.social/@fedify/0191e4f3-6b08-7003-9d33-f07d1e33d7b4\",\n  ),\n});\n\nconst jsonLd = await create.toJsonLd();\nconsole.log(JSON.stringify(jsonLd));\n```\n\n----------------------------------------\n\nTITLE: Implementing Featured Collection Dispatcher in TypeScript\nDESCRIPTION: Shows how to set up a featured collection dispatcher that returns objects an actor has featured on their profile. It handles cursor pagination and retrieves featured objects from a database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setFeaturedDispatcher(\"/users/{identifier}/featured\", async (ctx, identifier, cursor) => {\n    // Work with the database to find the objects that the actor has featured\n    // (the below `getFeaturedPostsByUserId` is a hypothetical function):\n    const items = await getFeaturedByUserId(identifier);\n    return { items };\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Schema for Posts Table\nDESCRIPTION: Defines the SQL schema for storing posts with columns for ID, URI, actor reference, content, URL, and creation timestamp. Includes constraints to ensure data integrity.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_80\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS posts (\n  id       INTEGER NOT NULL PRIMARY KEY,\n  uri      TEXT    NOT NULL UNIQUE CHECK (uri <> ''),\n  actor_id INTEGER NOT NULL REFERENCES actors (id),\n  content  TEXT    NOT NULL,\n  url      TEXT             CHECK (url LIKE 'https://%' OR url LIKE 'http://%'),\n  created  TEXT    NOT NULL DEFAULT (CURRENT_TIMESTAMP) CHECK (created <> '')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Display Handler\nDESCRIPTION: Creates a GET handler for displaying individual posts. It retrieves the post and related data from the database and renders the post using the PostPage component.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_99\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username/posts/:id\", (c) => {\n  const post = db\n    .prepare<unknown[], Post & Actor & User>(\n      `\n      SELECT users.*, actors.*, posts.*\n      FROM posts\n      JOIN actors ON actors.id = posts.actor_id\n      JOIN users ON users.id = actors.user_id\n      WHERE users.username = ? AND posts.id = ?\n      `,\n    )\n    .get(c.req.param(\"username\"), c.req.param(\"id\"));\n  if (post == null) return c.notFound();\n\n  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record\n  const { followers } = db\n    .prepare<unknown[], { followers: number }>(\n      `\n      SELECT count(*) AS followers\n      FROM follows\n      WHERE follows.following_id = ?\n      `,\n    )\n    .get(post.actor_id)!;\n  return c.html(\n    <Layout>\n      <PostPage\n        name={post.name ?? post.username}\n        username={post.username}\n        handle={post.handle}\n        followers={followers}\n        post={post}\n      />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Actor in TypeScript\nDESCRIPTION: This example shows how to create a Group actor object, which is considered a group actor by Mastodon and other ActivityPub implementations.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew Group({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Setup Form for Actor Name Input in TypeScript/JSX\nDESCRIPTION: This snippet shows how to modify the SetupForm component to include an input field for the actor's name. It adds a new label and input element for the 'name' field.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nexport const SetupForm: FC = () => (\n  <>\n    <h1>Set up your microblog</h1>\n    <form method=\"post\" action=\"/setup\">\n      <fieldset>\n        <label>\n          Username{\" \"}\n          <input\n            type=\"text\"\n            name=\"username\"\n            required\n            maxlength={50}\n            pattern=\"^[a-z0-9_\\-]+$\"\n          />\n        </label>\n        <label>\n          Name <input type=\"text\" name=\"name\" required />\n        </label>\n      </fieldset>\n      <input type=\"submit\" value=\"Setup\" />\n    </form>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Post Interface in TypeScript\nDESCRIPTION: TypeScript interface that represents the posts table structure in the application code, including all fields from the database schema.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Post {\n  id: number;\n  uri: string;\n  actor_id: number;\n  content: string;\n  url: string | null;\n  created: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cryptographic Functions in TypeScript\nDESCRIPTION: New cryptographic functions added to enhance ActivityPub compatibility. These functions handle key pair generation and JWK import/export operations.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateCryptoKeyPair()\nexportJwk()\nimportJwk()\n```\n\n----------------------------------------\n\nTITLE: Skip Fanout Activity Sending in TypeScript\nDESCRIPTION: Shows how to use the 'skip' fanout option when different content is needed for each recipient.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.sendActivity(\n  { identifier: \"alice\" },\n  recipients,\n  activity,\n  { fanout: \"skip\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing InProcessMessageQueue in Fedify (TypeScript)\nDESCRIPTION: Example of using InProcessMessageQueue for development and testing environments in Fedify. This implementation is simple and has no external dependencies, but doesn't persist messages between restarts.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation, InProcessMessageQueue } from \"@fedify/fedify\";\n\nconst federation = createFederation<void>({\n  kv: null as unknown as KvStore,\n  queue: new InProcessMessageQueue(),  // [!code highlight]\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing POST /setup Handler in TypeScript\nDESCRIPTION: Handles user account setup, checks for existing accounts, validates username, and inserts new user records into the database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/setup\", async (c) => {\n  // Check if an account already exists\n  const user = db.prepare<unknown[], User>(\"SELECT * FROM users LIMIT 1\").get();\n  if (user != null) return c.redirect(\"/\");\n\n  const form = await c.req.formData();\n  const username = form.get(\"username\");\n  if (typeof username !== \"string\" || !username.match(/^[a-z0-9_-]{1,50}$/)) {\n    return c.redirect(\"/setup\");\n  }\n  db.prepare(\"INSERT INTO users (username) VALUES (?)\").run(username);\n  return c.redirect(\"/\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Following List Component in TSX\nDESCRIPTION: React/TSX component implementation for displaying a list of actors that the current user is following.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_116\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface FollowingListProps {\n  following: Actor[];\n}\n\nexport const FollowingList: FC<FollowingListProps> = ({ following }) => (\n  <>\n    <h2>Following</h2>\n    <ul>\n      {following.map((actor) => (\n        <li key={actor.id}>\n          <ActorLink actor={actor} />\n        </li>\n      ))}\n    </ul>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Separating Message Processing Using Manual Startup (Node.js/Bun, TypeScript)\nDESCRIPTION: Configures a Federation instance to separate web and worker responsibilities in Node.js/Bun by using NODE_TYPE environment variable and process.on to trigger an AbortController for shutdown. This pattern is similar to the Deno variant but adapted for process APIs. Required dependencies are @fedify/fedify, @fedify/redis, ioredis, and node:process. Ensures only worker nodes process messages via startQueue; the web nodes enqueue but do not process.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KvStore } from \"@fedify/fedify\";\n// ---cut-before---\nimport { createFederation } from \"@fedify/fedify\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\nimport process from \"node:process\";\n\nconst federation = createFederation<void>({\n  queue: new RedisMessageQueue(() => new Redis()),\n  manuallyStartQueue: true,  // [!code highlight]\n  // ... other options\n  // ---cut-start---\n  kv: null as unknown as KvStore,\n  // ---cut-end---\n});\n\n// Start the message queue manually only in worker nodes.\n// On non-worker nodes, the queue won't be started.\nif (process.env.NODE_TYPE === \"worker\") {\n  const controller = new AbortController();\n  process.on(\"SIGINT\", () => controller.abort());\n  await federation.startQueue(undefined, { signal: controller.signal });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom JSX Components with TypeScript and Hono\nDESCRIPTION: Illustrates the creation of a strongly-typed JSX component in TypeScript using Hono's JSX interface. The Container component accepts props (name and children), uses them to compute props for the rendered div, and demonstrates component composition. Requirements: type imports from 'hono/jsx'. Inputs: name string and JSX children; outputs: a div with a title and child markup.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Child, FC } from \"hono/jsx\";\n\nfunction getName() {\n  return \"JSX\";\n}\n\ninterface ContainerProps {\n  name: string;\n  children: Child;\n}\n\nconst Container: FC<ContainerProps> = (props) => {\n  return <div title={\"Hello, \" + props.name + \"!\"}>{props.children}</div>;\n};\n\nconst html = <Container name={getName()}>\n  <p id=\"greet\">Hello, <strong>{getName()}</strong>!</p>\n</Container>;\n```\n\n----------------------------------------\n\nTITLE: Importing Ed25519 Keys in TypeScript\nDESCRIPTION: Examples of new functions added to support Ed25519 keys for signing and verifying activities. These functions allow importing and exporting keys in various formats.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimportJwk()  // Now accepts Ed25519 keys\nexportJwk()  // Now exports Ed25519 keys\nimportSpki() // Now accepts Ed25519 keys\nexportJwk()  // Now exports Ed25519 keys\n\nimportMultibaseKey()\nexportMultibaseKey()\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo Follow Handler in TypeScript\nDESCRIPTION: TypeScript implementation of the handler for Undo(Follow) activities in the federation system.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setInboxListeners(\"/users/{identifier}/inbox\", \"/inbox\")\n  .on(Follow, async (ctx, follow) => {\n    // ... omitted ...\n  })\n  .on(Undo, async (ctx, undo) => {\n    const object = await undo.getObject();\n    if (!(object instanceof Follow)) return;\n    if (undo.actorId == null || object.objectId == null) return;\n    const parsed = ctx.parseUri(object.objectId);\n    if (parsed == null || parsed.type !== \"actor\") return;\n    db.prepare(\n      `\n      DELETE FROM follows\n      WHERE following_id = (\n        SELECT actors.id\n        FROM actors\n        JOIN users ON actors.user_id = users.id\n        WHERE users.username = ?\n      ) AND follower_id = (SELECT id FROM actors WHERE uri = ?)\n      `,\n    ).run(parsed.identifier, undo.actorId.href);\n  });\n```\n\n----------------------------------------\n\nTITLE: Constructing Liked Collection URI in TypeScript\nDESCRIPTION: Illustrates how to use the Context.getLikedUri() method to generate a liked collection URI for a given actor identifier.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getLikedUri(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getLikedUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Implementing ActivityPub Followers Collection\nDESCRIPTION: TypeScript code to set up followers collection dispatcher for ActivityPub federation, which allows remote servers to retrieve follower information.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setFollowersDispatcher(\n    \"/users/{identifier}/followers\",\n    (ctx, identifier, cursor) => {\n      const followers = db\n        .prepare<unknown[], Actor>(\n          `\n          SELECT followers.*\n          FROM follows\n          JOIN actors AS followers ON follows.follower_id = followers.id\n          JOIN actors AS following ON follows.following_id = following.id\n          JOIN users ON users.id = following.user_id\n          WHERE users.username = ?\n          ORDER BY follows.created DESC\n          `,\n        )\n        .all(identifier);\n      const items: Recipient[] = followers.map((f) => ({\n        id: new URL(f.uri),\n        inboxId: new URL(f.inbox_url),\n        endpoints:\n          f.shared_inbox_url == null\n            ? null\n            : { sharedInbox: new URL(f.shared_inbox_url) },\n      }));\n      return { items };\n    },\n  )\n  .setCounter((ctx, identifier) => {\n    const result = db\n      .prepare<unknown[], { cnt: number }>(\n        `\n        SELECT count(*) AS cnt\n\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgresKvStore in Fedify (TypeScript)\nDESCRIPTION: Demonstrates how to create a Fedify federation using PostgresKvStore from the @fedify/postgres package. This implementation uses PostgreSQL as the backend storage, suitable for production use in systems already using PostgreSQL.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { PostgresKvStore } from \"@fedify/postgres\";\nimport postgres from \"postgres\";\n\nconst federation = createFederation<void>({\n  kv: new PostgresKvStore(\n    postgres(\"postgresql://user:pass@localhost/db\"),\n  ),\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context with JSON-LD Operations\nDESCRIPTION: Shows how to use Context object with JSON-LD operations like fromJsonLd() and toJsonLd().\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = await Object.fromJsonLd(jsonLd, ctx);\nconst json = await object.toJsonLd(ctx);\n```\n\n----------------------------------------\n\nTITLE: Constructing Fedify Actor URIs with UUID Identifiers in TypeScript\nDESCRIPTION: Demonstrates using `Context.getActorUri()` from `@fedify/fedify` when the actor identifier is a UUID, typically used when decoupling actor URIs from changeable WebFinger usernames. Requires a Fedify `Context` object and the actor's UUID identifier.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getActorUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Post Creation\nDESCRIPTION: Imports necessary dependencies for the post creation functionality, including the stringify-entities package and the Note class from Fedify.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stringifyEntities } from \"stringify-entities\";\nimport type { Actor, Post, User } from \"./schema.ts\";\nimport { Note } from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Importing FollowerList Component in App\nDESCRIPTION: TypeScript import statement to import the FollowerList component for use in the main application file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FollowerList, Layout, Profile, SetupForm } from \"./views.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Constructing an Outbox Collection URI in TypeScript using Fedify Context\nDESCRIPTION: This snippet demonstrates using the `Context.getOutboxUri()` method from the Fedify library to generate the URI for an actor's outbox collection. It takes the actor's identifier (e.g., 'alice') as input and returns the corresponding outbox URI. Note that this method only constructs the URI and does not verify its existence.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getOutboxUri(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Adding SendActivityOptions Interface in TypeScript\nDESCRIPTION: New interface added to define options for sending activities. This interface is likely used in conjunction with the sendActivity methods.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nSendActivityOptions\n```\n\n----------------------------------------\n\nTITLE: Defining the Recipient Interface in Fedify (TypeScript)\nDESCRIPTION: Shows the TypeScript interface definition for `Recipient` in Fedify. Any object conforming to this interface can be used as a recipient in `sendActivity`. It requires an `id` (URL or null) and an `inboxId` (URL or null), and optionally an `endpoints` object containing a `sharedInbox` URL.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Recipient {\n  readonly id: URL | null;\n  readonly inboxId: URL | null;\n  readonly endpoints?: {\n    sharedInbox: URL | null;\n  } | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET /setup Handler in TypeScript\nDESCRIPTION: Handles GET requests for the setup page, checks for existing accounts, and renders the setup form if no account exists.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"/setup\", (c) => {\n  // Check if an account already exists\n  const user = db.prepare<unknown[], User>(\"SELECT * FROM users LIMIT 1\").get();\n  if (user != null) return c.redirect(\"/\");\n\n  return c.html(\n    <Layout>\n      <SetupForm />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database in TypeScript\nDESCRIPTION: Creates a connection to a SQLite database using better-sqlite3, sets pragmas for Write-Ahead Logging and foreign key constraints.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport Database from \"better-sqlite3\";\n\nconst db = new Database(\"microblog.sqlite3\");\ndb.pragma(\"journal_mode = WAL\");\ndb.pragma(\"foreign_keys = ON\");\n\nexport default db;\n```\n\n----------------------------------------\n\nTITLE: Initializing DenoKvStore in Fedify (TypeScript)\nDESCRIPTION: Shows how to set up a Fedify federation using DenoKvStore, which is specific to the Deno runtime. It uses Deno's built-in Deno.openKv() API for persistent storage in Deno environments.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { DenoKvStore } from \"@fedify/fedify/x/deno\";\n\nconst kv = await Deno.openKv();\nconst federation = createFederation<void>({\n  kv: new DenoKvStore(kv),\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Protected Object with --authorized-fetch (Shell)\nDESCRIPTION: Demonstrates using the `fedify lookup` command with the `-a` or `--authorized-fetch` option to successfully retrieve a potentially protected ActivityPub object. This option performs an authenticated fetch by generating temporary keys, running a temporary server for the public key, and signing the request. Requires the Fedify CLI tool.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --authorized-fetch @tchambers@indieweb.social\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Fields for Person Actor in TypeScript\nDESCRIPTION: This example shows how to set the 'attachments' property for a Person actor, which is used to display custom fields in Mastodon and Misskey.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  attachments: [\n    new PropertyValue({\n      name: \"Location\",\n      value: \"Seoul, South Korea\",\n    }),\n    new PropertyValue({\n      name: \"Pronoun\",\n      value: \"they/them\",\n    }),\n    new PropertyValue({\n      name: \"Website\",\n      value: '<a href=\"https://fedify.dev/\">fedify.dev</a>'\n    }),\n  ],\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Key Interface in TypeScript for ActivityPub\nDESCRIPTION: TypeScript interface definition for the 'Key' type, representing records stored in the 'keys' table. It includes properties for user_id, key type, private key, public key, and creation timestamp.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Key {\n  user_id: number;\n  type: \"RSASSA-PKCS1-v1_5\" | \"Ed25519\";\n  private_key: string;\n  public_key: string;\n  created: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Dispatcher for Note Objects\nDESCRIPTION: Configures the federation module to handle Note objects with a specific permalink format. This sets up the path pattern for post URLs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setObjectDispatcher(\n  Note,\n  \"/users/{identifier}/posts/{id}\",\n  (ctx, values) => {\n    return null;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Determining Activity Recipient from To Field\nDESCRIPTION: This code shows how to determine the recipient of a Create activity by examining the 'to' field. It parses the URI and checks if it's an actor type.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n.on(Create, async (ctx, create) => {\n  if (create.toId == null) return;\n  const to = ctx.parseUri(create.toId);\n  if (to?.type !== \"actor\") return;\n  const recipient = to.identifier;\n  // Do something with the recipient\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating Create and Note Objects in TypeScript\nDESCRIPTION: Demonstrates the instantiation of Create and Note objects from the Activity Vocabulary, including the use of URL objects for URIs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Temporal } from \"@js-temporal/polyfill\";\nimport { Create, Note } from \"@fedify/fedify\";\n\nconst create = new Create({\n  id: new URL(\"https://example.com/activities/123\"),\n  actor: new URL(\"https://example.com/users/alice\"),\n  object: new Note({\n    id: new URL(\"https://example.com/notes/456\"),\n    content: \"Hello, world!\",\n    published: Temporal.Instant.from(\"2024-01-01T00:00:00Z\"),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Actor Dispatcher to Include Followers Collection\nDESCRIPTION: Adds a reference to the followers collection in the Person object returned by the actor dispatcher. This makes the followers collection discoverable in the ActivityPub protocol.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    // ... omitted ...\n    return new Person({\n      // ... omitted ...\n      followers: ctx.getFollowersUri(identifier),  // [!code highlight]\n    });\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing DenoKvMessageQueue in Fedify (TypeScript)\nDESCRIPTION: Example of using DenoKvMessageQueue for production use in Deno environments. This implementation provides persistent storage and good performance using Deno's built-in Deno.openKv() API.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { DenoKvMessageQueue } from \"@fedify/fedify/x/deno\";\n\nconst kv = await Deno.openKv();\nconst federation = createFederation<void>({\n  queue: new DenoKvMessageQueue(kv),  // [!code highlight]\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Ephemeral Inbox Server with Fedify (Shell)\nDESCRIPTION: Shows how to use the fedify inbox command to start an ephemeral server that serves the ActivityPub inbox with a one-time actor, useful for testing and debugging outgoing activities.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nfedify inbox\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel MessageQueue Processing with Fedify in TypeScript\nDESCRIPTION: Wraps a RedisMessageQueue with ParallelMessageQueue to process messages concurrently up to a user-specified worker count (here, 5). Requires @fedify/fedify, @fedify/redis, and ioredis as dependencies. Intended to handle I/O-bound parallelism in Fedify deployments; CPU-bound work should use multiple processes. The main parameter is the worker count; input is a RedisMessageQueue, and output is a Federation instance able to process the queue concurrently.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KvStore } from \"@fedify/fedify\";\n// ---cut-before---\nimport { createFederation, ParallelMessageQueue } from \"@fedify/fedify\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\n\nconst baseQueue = new RedisMessageQueue(() => new Redis());\n\n// Use parallelQueue in your Federation configuration\nconst federation = createFederation<void>({\n  queue: new ParallelMessageQueue(baseQueue, 5),  // [!code highlight]\n  // ... other options\n  // ---cut-start---\n  kv: null as unknown as KvStore,\n  // ---cut-end---\n});\n```\n\n----------------------------------------\n\nTITLE: Followers Collection Synchronization in TypeScript\nDESCRIPTION: Example of sending an activity with followers collection synchronization enabled.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.sendActivity(\n  { identifier: senderId },\n  \"followers\",\n  new Create({\n    actor: ctx.getActorUri(senderId),\n    to: ctx.getFollowersUri(senderId),\n    object: new Note({\n      attribution: ctx.getActorUri(senderId),\n      to: ctx.getFollowersUri(senderId),\n    }),\n  }),\n  {\n    preferSharedInbox: true,\n    syncCollection: true,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Actors Table in SQLite\nDESCRIPTION: Defines the SQL schema for the actors table, which stores information about both local and remote ActivityPub actors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS actors (\n  id               INTEGER NOT NULL PRIMARY KEY,\n  user_id          INTEGER          REFERENCES users (id),\n  uri              TEXT    NOT NULL UNIQUE CHECK (uri <> ''),\n  handle           TEXT    NOT NULL UNIQUE CHECK (handle <> ''),\n  name             TEXT,\n  inbox_url        TEXT    NOT NULL UNIQUE CHECK (inbox_url LIKE 'https://%'\n                                                  OR inbox_url LIKE 'http://%'),\n  shared_inbox_url TEXT                    CHECK (shared_inbox_url\n                                                  LIKE 'https://%'\n                                                  OR shared_inbox_url\n                                                  LIKE 'http://%'),\n  url              TEXT                    CHECK (url LIKE 'https://%'\n                                                  OR url LIKE 'http://%'),\n  created          TEXT    NOT NULL DEFAULT (CURRENT_TIMESTAMP)\n                                           CHECK (created <> '')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing delete() Method in Custom KvStore (TypeScript)\nDESCRIPTION: Shows the implementation of the delete() method for a custom KvStore. It removes the value associated with the given key from the storage backend.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync delete(key: KvKey): Promise<void> {\n  const serializedKey = this.serializeKey(key);\n  await this.storage.remove(serializedKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing x-forwarded-fetch Middleware for Bun (Shell)\nDESCRIPTION: Shell command using Bun to install the `x-forwarded-fetch` middleware package. This middleware enables Fedify applications running in Bun to correctly recognize the host via `X-Forwarded-Host` headers when situated behind a reverse proxy.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nbun add x-forwarded-fetch\n```\n\n----------------------------------------\n\nTITLE: Integrating Federation.fetch with Node.js via @hono/node-server (TypeScript)\nDESCRIPTION: Demonstrates using the `serve` function from the `@hono/node-server` package to handle HTTP requests in Node.js. The `Federation.fetch()` method is passed as the `fetch` handler within the configuration object, bridging Fedify's fetch-based API with Node.js.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@hono/node-server\";\n\nserve({\n  fetch: (request) => federation.fetch(request, { contextData: undefined }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing WebFinger Client in TypeScript\nDESCRIPTION: Addition of WebFinger client functionality with new functions for object lookup and WebFinger resolution.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nlookupObject()\nlookupWebFinger()\n```\n\n----------------------------------------\n\nTITLE: Example Output of Successful Authorized Fetch\nDESCRIPTION: Shows the formatted output (likely a Deno object representation) when `fedify lookup --authorized-fetch` successfully retrieves a protected ActivityPub object (a 'Person' object). The output includes detailed properties like id, attachments, name, icon, image, publicKey, inbox, outbox, etc.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nPerson {\n  id: URL \"https://indieweb.social/users/tchambers\",\n  attachments: [\n    PropertyValue {\n      name: \"Indieweb Site\",\n      value: '<a href=\"http://www.timothychambers.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" trans'... 128 more characters\n    },\n    PropertyValue {\n      name: \"Gravatar\",\n      value: '<a href=\"https://en.gravatar.com/tchambers\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" tr'... 134 more characters\n    },\n    PropertyValue {\n      name: \"Threads\",\n      value: '<a href=\"https://www.threads.net/@timothyjchambers\" target=\"_blank\" rel=\"nofollow noopener noreferre'... 150 more characters\n    },\n    PropertyValue {\n      name: \"GitHub\",\n      value: '<a href=\"https://github.com/Timothyjchambers\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" '... 138 more characters\n    }\n  ],\n  name: \"Tim Chambers\",\n  icon: Image {\n    url: URL \"https://cdn.masto.host/indiewebsocial/accounts/avatars/000/000/002/original/5de753df6fe336d5.png\",\n    mediaType: \"image/png\"\n  },\n  image: Image {\n    url: URL \"https://cdn.masto.host/indiewebsocial/accounts/headers/000/000/002/original/38c44f4142b84cf4.png\",\n    mediaType: \"image/png\"\n  },\n  published: 2019-08-30T00:00:00Z,\n  summary: \"<p>Technologist, writer, admin of indieweb.social. Fascinated by how new politics impacts technology\"... 346 more characters,\n  url: URL \"https://indieweb.social/@tchambers\",\n  preferredUsername: \"tchambers\",\n  publicKey: CryptographicKey {\n    id: URL \"https://indieweb.social/users/tchambers#main-key\",\n    owner: URL \"https://indieweb.social/users/tchambers\",\n    publicKey: CryptoKey {\n      type: \"public\",\n      extractable: true,\n      algorithm: {\n        name: \"RSASSA-PKCS1-v1_5\",\n        modulusLength: 2048,\n        publicExponent: Uint8Array(3) [ 1, 0, 1 ],\n        hash: { name: \"SHA-256\" }\n      },\n      usages: [ \"verify\" ]\n    }\n  },\n  manuallyApprovesFollowers: false,\n  inbox: URL \"https://indieweb.social/users/tchambers/inbox\",\n  outbox: URL \"https://indieweb.social/users/tchambers/outbox\",\n  following: URL \"https://indieweb.social/users/tchambers/following\",\n  followers: URL \"https://indieweb.social/users/tchambers/followers\",\n  endpoints: Endpoints { sharedInbox: URL \"https://indieweb.social/inbox\" },\n  discoverable: true,\n  memorial: false,\n  indexable: true\n}\n```\n\n----------------------------------------\n\nTITLE: Looking Up ActivityPub Collections with Error Suppression - Fedify CLI - Shell\nDESCRIPTION: Demonstrates the use of the Fedify CLI's lookup command to traverse a remote ActivityPub collection while suppressing partial traversal errors. Requires Fedify version 0.14.0 or greater. The key flags are --traverse for collection traversal and --suppress-errors to allow continued processing even if some errors occur during traversal. Input URL is an ActivityPub collection; output will proceed past partial failures.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --traverse --suppress-errors https://fosstodon.org/users/hongminhee/outbox\n```\n\n----------------------------------------\n\nTITLE: Declaring a Users Table for an SQLite Database\nDESCRIPTION: Defines the schema for a SQLite table named 'users' intended to hold account information for a single user. Includes constraints to ensure only one user (id=1), unique, case-normalized, non-empty usernames, and limits on username length. Dependencies: SQLite. Inputs: none; outputs: creates the required table for account data.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS users (\n  id       INTEGER NOT NULL PRIMARY KEY CHECK (id = 1),\n  username TEXT    NOT NULL UNIQUE      CHECK (trim(lower(username)) = username\n                                               AND username <> ''\n                                               AND length(username) <= 50)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fedify Collection Item Counting with setCounter in TypeScript\nDESCRIPTION: This example demonstrates implementing the `setCounter` callback for a Fedify collection, specifically the outbox. It uses a hypothetical asynchronous function `countPostsByUserId` to retrieve the total count of items associated with a user identifier. The counter should return the total number of items in the collection, which can be either a `number` or a `bigint`.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\nimport { type Federation } from \"@fedify/fedify\";\nconst federation = null as unknown as Federation<void>;\n/**\n * A hypothetical function that counts the number of posts that an actor has\n * sent.\n * @param userId The actor's identifier.\n * @returns The number of posts that the actor has sent.\n */\nasync function countPostsByUserId(userId: string): Promise<number> {\n  return 0;\n}\n// ---cut-before---\nfederation\n  .setOutboxDispatcher(\"/users/{identifier}/outbox\", async (ctx, identifier, cursor) => {\n    // Omitted for brevity.\n  })\n  .setCounter(async (ctx, identifier) => {\n    // The following `countPostsByUserId` is a hypothetical function:\n    return await countPostsByUserId(identifier);\n  });\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile Route Handler to Include Follower Count\nDESCRIPTION: TypeScript JSX route handler update to fetch and include follower count from the database for the user profile page.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_74\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username\", async (c) => {\n  // ... omitted ...\n  if (user == null) return c.notFound();\n\n  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record\n  const { followers } = db\n    .prepare<unknown[], { followers: number }>(\n      `\n      SELECT count(*) AS followers\n      FROM follows\n      JOIN actors ON follows.following_id = actors.id\n      WHERE actors.user_id = ?\n      `,\n    )\n    .get(user.id)!;\n  // ... omitted ...\n  return c.html(\n    <Layout>\n      <Profile\n        name={user.name ?? user.username}\n        username={user.username}\n        handle={handle}\n        followers={followers}\n      />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: ActivityPub Actor Profile Response for 'me'\nDESCRIPTION: This JSON snippet demonstrates the ActivityPub response when querying the actor's canonical URI. It includes the actor's context, ID, type, and basic profile information.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/ns/activitystreams\",\n    \"https://w3id.org/security/v1\",\n    {\n      \"toot\": \"http://joinmastodon.org/ns#\",\n      \"discoverable\": \"toot:discoverable\",\n      \"suspended\": \"toot:suspended\",\n      \"memorial\": \"toot:memorial\",\n      \"indexable\": \"toot:indexable\"\n    }\n  ],\n  \"id\": \"http://localhost:8000/users/me\",\n  \"type\": \"Person\",\n  \"name\": \"Me\",\n  \"preferredUsername\": \"me\",\n  \"summary\": \"This is me!\",\n  \"url\": \"http://localhost:8000/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authenticated Document Loader\nDESCRIPTION: Demonstrates how to use the new authenticated document loader functionality introduced in version 0.4.0.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst federation = new Federation({\n  authenticatedDocumentLoaderFactory: getAuthenticatedDocumentLoader\n});\n\n// In a personal inbox listener:\nconst documentLoader = context.getDocumentLoader();\n```\n\n----------------------------------------\n\nTITLE: Responding with ActivityPub Object\nDESCRIPTION: Shows the usage of new utility functions for responding with an ActivityPub object, introduced in version 0.3.0.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait respondWithObject(request, response, activityPubObject, options);\n\n// Or with content negotiation:\nawait respondWithObjectIfAcceptable(request, response, activityPubObject, options);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User-Agent with fedify lookup --user-agent (Shell)\nDESCRIPTION: Demonstrates using the `fedify lookup` command with the `-u` or `--user-agent` option to specify a custom User-Agent HTTP header ('MyApp/1.0' in this example) when fetching an ActivityPub object. This overrides the default Fedify User-Agent string. This option is available since Fedify 1.3.0. Requires the Fedify CLI tool.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --user-agent MyApp/1.0 @fedify@hollo.social\n```\n\n----------------------------------------\n\nTITLE: Integrating Fedify with SvelteKit\nDESCRIPTION: This snippet shows how to integrate Fedify with SvelteKit using the @fedify/fedify/x/sveltekit module in the hooks.server.ts file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { fedifyHook } from \"@fedify/fedify/x/sveltekit\";\n\nconst federation = createFederation<string>({\n  // Omitted for brevity; see the related section for details.\n});\n\n// This is the entry point to the Fedify hook from the SvelteKit framework:\nexport const handle = fedifyHook(federation, (req) => \"context data\");\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Multiple Recipients in Activity Fields\nDESCRIPTION: This snippet demonstrates how to handle multiple recipients in the 'to' field of a Create activity. It iterates over the toIds array and processes each recipient.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/inbox.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n.on(Create, async (ctx, create) => {\n  for (const toId of create.toIds) {\n    const to = ctx.parseUri(toId);\n    if (to?.type !== \"actor\") continue;\n    const recipient = to.identifier;\n    // Do something with the recipient\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Hydrating the object Property in Fedify (TypeScript)\nDESCRIPTION: This snippet demonstrates how to instantiate a Create object with an object URI, hydrate the object property via an asynchronous getObject() method, and verify that the hydrated object is cached for subsequent accesses without further HTTP requests. Requires @fedify/fedify and a compatible runtime with async/await and Fetch support; input is a Create instance whose object property is a URL. Output is a hydrated object representation, possibly fetched remotely, which is then cached within the instance. The code assumes proper network connectivity and error-handling is not shown.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create } from \"@fedify/fedify\";\n// ---cut-before---\nconst create = new Create({\n  object: new URL(\n    \"https://hollo.social/@fedify/0191e4f3-6b08-7003-9d33-f07d1e33d7b4\",\n  ),\n});\n\n// Hydrates the `object` property:\nconst note = await create.getObject();\n\n// Returns the hydrated `object` property; therefore, the following code does\n// not make any HTTP request:\nconst note2 = await create.getObject();\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Page Handler\nDESCRIPTION: Modified GET request handler that retrieves and displays posts on a user's profile page.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_108\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username\", async (c) => {\n  const posts = db\n    .prepare<unknown[], Post & Actor>(\n      `\n      SELECT actors.*, posts.*\n      FROM posts\n      JOIN actors ON posts.actor_id = actors.id\n      WHERE actors.user_id = ?\n      ORDER BY posts.created DESC\n      `,\n    )\n    .all(user.user_id);\n  return c.html(\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: WebFinger Query Response for Actor 'me'\nDESCRIPTION: This JSON snippet shows the WebFinger response for querying the actor 'me' on the local server. It includes the actor's subject, aliases, and links.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"acct:me@localhost:8000\",\n  \"aliases\": [\n    \"http://localhost:8000/users/me\"\n  ],\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"href\": \"http://localhost:8000/users/me\",\n      \"type\": \"application/activity+json\"\n    },\n    {\n      \"rel\": \"http://webfinger.net/rel/profile-page\",\n      \"href\": \"http://localhost:8000/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using KvStore Interface\nDESCRIPTION: Demonstrates the usage of the new KvStore interface for caching, introduced in version 0.5.0.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst kvStore: KvStore = new DenoKvStore(deno.Kv);\nconst federation = new Federation({\n  kv: kvStore,\n  kvPrefixes: {\n    activityIdempotence: [\"fedify\", \"idempotence\"],\n    remoteDocument: [\"fedify\", \"remote\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Follow Interface in TypeScript\nDESCRIPTION: TypeScript code defining an interface to represent records stored in the 'follows' table, including following_id, follower_id, and created timestamp.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Follow {\n  following_id: number;\n  follower_id: number;\n  created: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @hono/node-server Dependency for Node.js (Shell)\nDESCRIPTION: Provides the necessary shell command to install the `@hono/node-server` package using npm. This package is required in Node.js environments to adapt the standard Request/Response-based `Federation.fetch()` method to Node.js's native HTTP server API.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @hono/node-server\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Component in TSX\nDESCRIPTION: Creates a Profile component in React to display user information. It takes name and handle as props and renders them in an hgroup element.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ProfileProps {\n  name: string;\n  handle: string;\n}\n\nexport const Profile: FC<ProfileProps> = ({ name, handle }) => (\n  <>\n    <hgroup>\n      <h1>{name}</h1>\n      <p style=\"user-select: all;\">{handle}</p>\n    </hgroup>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Follow Dependencies in TypeScript\nDESCRIPTION: Imports necessary classes and functions from Fedify library for handling Follow activities.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Create,\n  Follow,\n  isActor,\n  Note,\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Following List Route Handler\nDESCRIPTION: Hono route handler implementation for fetching and displaying the list of actors a user is following using SQLite queries.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_117\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username/following\", async (c) => {\n  const following = db\n    .prepare<unknown[], Actor>(\n      `\n      SELECT following.*\n      FROM follows\n      JOIN actors AS followers ON follows.follower_id = followers.id\n      JOIN actors AS following ON follows.following_id = following.id\n      JOIN users ON users.id = followers.user_id\n      WHERE users.username = ?\n      ORDER BY follows.created DESC\n      `,\n    )\n    .all(c.req.param(\"username\"));\n  return c.html(\n    <Layout>\n      <FollowingList following={following} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handler Registration in TypeScript\nDESCRIPTION: Example of registering an error handler for activity delivery failures in the federation setup.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst federation = createFederation({\n  queue: new InProcessMessageQueue(),\n  onOutboxError: (error, activity) => {\n    console.error(\"Failed to deliver an activity:\", error);\n    console.error(\"Activity:\", activity);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Page Components\nDESCRIPTION: Defines React components for displaying a post page, including the PostPage component that combines Profile and PostView components, and the PostView component that renders post content.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_97\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface PostPageProps extends ProfileProps, PostViewProps {}\n\nexport const PostPage: FC<PostPageProps> = (props) => (\n  <>\n    <Profile\n      name={props.name}\n      username={props.username}\n      handle={props.handle}\n      followers={props.followers}\n    />\n    <PostView post={props.post} />\n  </>\n);\n\nexport interface PostViewProps {\n  post: Post & Actor;\n}\n\nexport const PostView: FC<PostViewProps> = ({ post }) => (\n  <article>\n    <header>\n      <ActorLink actor={post} />\n    </header>\n    {/* biome-ignore lint/security/noDangerouslySetInnerHtml: */}\n    <div dangerouslySetInnerHTML={{ __html: post.content }} />\n    <footer>\n      <a href={post.url ?? post.uri}>\n        <time datetime={new Date(post.created).toISOString()}>\n          {post.created}\n        </time>\n      </a>\n    </footer>\n  </article>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema in TypeScript\nDESCRIPTION: Defines a TypeScript interface representing the User schema with id and username fields.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface User {\n  id: number;\n  username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fedify Lookup Command for Actor\nDESCRIPTION: Command-line operation to look up an actor profile using the fedify tool.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_89\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup http://localhost:8000/users/johndoe\n```\n\n----------------------------------------\n\nTITLE: Inserting JavaScript Expressions in JSX using Curly Braces in TypeScript\nDESCRIPTION: Shows how to insert computed JavaScript values inside JSX markup by wrapping expressions in curly braces. The provided function getName is called to personalize both an attribute and inner markup. Dependencies: a getName function returning a string. Inputs: the result of getName(); outputs: a JSX element containing dynamic name information.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * A hypothetical function that returns a name.\n */\nfunction getName(): string { return \"\"; }\n// ---cut-before---\nconst html = <div title={\"Hello, \" + getName() + \"!\"}>\n  <p id=\"greet\">Hello, <strong>{getName()}</strong>!</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Accept Follow Activity Handler Implementation\nDESCRIPTION: Implements the handler for receiving Accept(Follow) activities in the federation inbox.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\n  .on(Accept, async (ctx, accept) => {\n    const follow = await accept.getObject();\n    if (!(follow instanceof Follow)) return;\n    const following = await accept.getActor();\n    if (!isActor(following)) return;\n    const follower = follow.actorId;\n    if (follower == null) return;\n    const parsed = ctx.parseUri(follower);\n    if (parsed == null || parsed.type !== \"actor\") return;\n    const followingId = (await persistActor(following))?.id;\n    if (followingId == null) return;\n    db.prepare(\n      `\n      INSERT INTO follows (following_id, follower_id)\n      VALUES (\n        ?,\n        (\n          SELECT actors.id\n          FROM actors\n          JOIN users ON actors.user_id = users.id\n          WHERE users.username = ?\n        )\n      )\n      `,\n    ).run(followingId, parsed.identifier);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring LogTape with File Sink and JSON Lines Formatter in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure LogTape with a file sink using JSON Lines formatter for structured logging. It also sets up context local storage for tracing support.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/log.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AsyncLocalStorage } from \"node:async_hooks\";\nimport { type LogRecord, configure, getFileSink } from \"@logtape/logtape\";\n\nawait configure({\n  sinks: {\n    file: getFileSink(\"fedify-logs.jsonld\", {\n      formatter(record: LogRecord): string {\n        return JSON.stringify(record) + \"\\n\";\n      }\n    })\n  },\n  loggers: [\n    { category: \"fedify\", sinks: [\"file\"], lowestLevel: \"info\" },\n  ],\n  contextLocalStorage: new AsyncLocalStorage(),\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Activity Queueing with InProcessMessageQueue (Fedify, TypeScript)\nDESCRIPTION: Shows how to enable reliable queued delivery of outgoing activities in Fedify by configuring a queue in the createFederation function using TypeScript. The queue option receives an instance of InProcessMessageQueue, which is suitable for development and testing. This setup automatically handles delivery retries with exponential backoff, but for production use, more robust options (like RedisMessageQueue) are recommended. If queue is omitted, activities are sent immediately and not retried on failure.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors: 2345\nimport { createFederation, InProcessMessageQueue } from \"@fedify/fedify\";\n\nconst federation = createFederation({\n  // Omitted for brevity; see the related section for details.\n  queue: new InProcessMessageQueue(),  // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Actor Key Pair Interface Definition\nDESCRIPTION: Defines the interface structure for actor key pairs including various key formats and identifiers.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActorKeyPair {\n  privateKey: CryptoKey;              // Private key\n  publicKey: CryptoKey;               // Public key\n  keyId: URL;                         // Unique identification URI of the key\n  cryptographicKey: CryptographicKey; // Another format of the public key\n  multikey: Multikey;                 // Yet another format of the public key\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Following Collection URIs with Context.getFollowingUri() in TypeScript\nDESCRIPTION: Demonstrates how to construct a following collection URI for an actor named 'alice' using the Context.getFollowingUri() method.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFollowingUri(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Tunneling in Fedify Inbox Server (Shell)\nDESCRIPTION: Demonstrates how to use the -T/--no-tunnel option with the fedify inbox command to disable the tunneling feature and serve the inbox server locally without exposing it to the public internet.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nfedify inbox --no-tunnel\n```\n\n----------------------------------------\n\nTITLE: Example WebFinger Response JSON in Fedify\nDESCRIPTION: This JSON snippet illustrates the structure of a WebFinger response in Fedify. It includes the subject, aliases, and links properties, demonstrating how custom URLs are represented in the response.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"acct:johndoe@example.com\",\n  \"aliases\": [\n    \"https://example.com/users/john_doe\"\n  ],\n  \"links\": [\n    {\n      \"rel\": \"http://webfinger.net/rel/profile-page\",\n      \"href\": \"https://example.com/@john_doe\"\n    },\n    {\n      \"rel\": \"alternate\",\n      \"href\": \"https://example.com/@john_doe/atom.xml\",\n      \"type\": \"application/atom+xml\"\n    },\n    {\n      \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n      \"href\": \"https://example.com/openid\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Note Objects\nDESCRIPTION: Demonstrates using RequestContext.getObject() to dispatch a Note object using identifier and ID.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctx = federation.createContext(request, undefined);\nconst note = await ctx.getObject(Note, { identifier, id });\n```\n\n----------------------------------------\n\nTITLE: Specifying Sender by Key Pairs Directly in Fedify sendActivity (TypeScript)\nDESCRIPTION: Demonstrates specifying the sender directly using `SenderKeyPair` objects obtained via `ctx.getActorKeyPairs(identifier)`. This method bypasses the identifier/username lookup but requires manually providing the key pairs. When using this method, recipients must be specified explicitly (not using 'followers').\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Activity,\n  type Actor,\n  type Context,\n  SenderKeyPair,\n} from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\nconst recipients: Actor[] = [];\n// ---cut-before---\nawait ctx.sendActivity(\n  await ctx.getActorKeyPairs(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\"),  // [!code highlight]\n  recipients,  // You need to specify the recipients manually\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Component with Following Count\nDESCRIPTION: Enhanced Profile component implementation to display following and follower counts with navigation links.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_118\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ProfileProps {\n  name: string;\n  username: string;\n  handle: string;\n  following: number;\n  followers: number;\n}\n\nexport const Profile: FC<ProfileProps> = ({\n  name,\n  username,\n  handle,\n  following,\n  followers,\n}) => (\n  <>\n    <hgroup>\n      <h1>\n        <a href={`/users/${username}`}>{name}</a>\n      </h1>\n      <p>\n        <span style=\"user-select: all;\">{handle}</span> &middot;{\" \"}\n        <a href={`/users/${username}/following`}>{following} following</a>{\" \"}\n        &middot;{\" \"}\n        <a href={`/users/${username}/followers`}>\n          {followers === 1 ? \"1 follower\" : `${followers} followers`}\n        </a>\n      </p>\n    </hgroup>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Attempting to Fetch Protected Object without Authentication (Shell)\nDESCRIPTION: Shows an example of using `fedify lookup` to fetch an ActivityPub object (identified by user handle '@tchambers@indieweb.social') that might be protected. This command is expected to fail without authentication, demonstrating the need for the `--authorized-fetch` option. Requires the Fedify CLI tool.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup @tchambers@indieweb.social\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw JSON with fedify lookup --raw (Shell)\nDESCRIPTION: Demonstrates using the `fedify lookup` command with the `-r` or `--raw` option to retrieve the raw JSON representation of an ActivityPub object specified by its URL. This option is available since Fedify 0.15.0 and is mutually exclusive with `-c`/`--compact` and `-e`/`--expanded`. Requires the Fedify CLI tool.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --raw https://todon.eu/@hongminhee/112341925069749583\n```\n\n----------------------------------------\n\nTITLE: Specifying Tunneling Service with Fedify (Shell)\nDESCRIPTION: Shows how to use the -s/--service option with the fedify tunnel command to specify a particular tunneling service, such as serveo.net.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nfedify tunnel --service serveo.net 3000\n```\n\n----------------------------------------\n\nTITLE: Importing Actor Type in TypeScript\nDESCRIPTION: This snippet shows how to import the Actor type from the schema file. It's a simple import statement used to bring in the necessary type definitions.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actor, User } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Illustrating Fedify Architecture with Mermaid Diagram\nDESCRIPTION: This diagram shows the flow of requests through Fedify, demonstrating how it handles different types of requests and interacts with the web framework.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client\n  participant Fedify\n  participant AD as Actor dispatcher<br/>(Fedify)\n  participant WF as Web framework\n\n  Client ->> Fedify: GET /users/alice<br/>(Accept: application/activity+json)\n  Fedify -->> Client: 200 OK\n  Fedify ->> AD: GET /users/alice\n  AD -->> Fedify: 200 OK\n  Fedify -->> Client: 200 OK\n\n  Client ->> Fedify: GET /users/alice<br/>(Accept: text/html)\n  Fedify ->> AD: GET /users/alice<br/>(Accept: text/html)\n  AD -->> Fedify: 406 Not Acceptable\n  Fedify ->> WF: GET /users/alice\n  WF -->> Fedify: 200 OK\n  Fedify -->> Client: 200 OK\n```\n\n----------------------------------------\n\nTITLE: Importing Fedify NPM Package\nDESCRIPTION: Shows how to import the Fedify package from npm. This was introduced in version 0.5.0.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Federation } from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisKvStore in Fedify (TypeScript)\nDESCRIPTION: Illustrates the setup of a Fedify federation using RedisKvStore from the @fedify/redis package. This implementation uses Redis as the backend storage, providing scalability and high performance for production use in distributed systems.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation } from \"@fedify/fedify\";\nimport { RedisKvStore } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\n\nconst redis = new Redis(); // Configure as needed\nconst federation = createFederation<void>({\n  kv: new RedisKvStore(redis),\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Type in TypeScript\nDESCRIPTION: Creates a TypeScript interface to represent records stored in the actors table.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Actor {\n  id: number;\n  user_id: number | null;\n  uri: string;\n  handle: string;\n  name: string | null;\n  inbox_url: string;\n  shared_inbox_url: string | null;\n  url: string | null;\n  created: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Compacted JSON-LD from Fedify Lookup - Fedify CLI - Shell\nDESCRIPTION: Shows how to use the Fedify CLI to lookup an ActivityPub object and output it in compacted JSON-LD format via the --compact flag. This option cannot be combined with --expanded or --raw. Requires an ActivityPub object URL as input. The resulting output will condense property and type URIs per the JSON-LD compacted form specification.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --compact https://todon.eu/@hongminhee/112341925069749583\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-LD Output for Unhydrated Create Object (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a JSON-LD document resulting from serializing a Create object whose object property has not been hydrated. Dependencies: none; this is output data. It includes simplified @context and demonstrates that the object property is represented as a string (the URI). Inputs correspond to a Create instance in the Fedify API. Limitations: @context is simplified, and actual output may contain additional fields.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\"],\n  \"type\": \"Create\",\n  \"object\": \"https://hollo.social/@fedify/0191e4f3-6b08-7003-9d33-f07d1e33d7b4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing User-Agent in Fedify Node Command (Shell)\nDESCRIPTION: Shows how to use the -u/--user-agent option with the fedify node command to specify a custom User-Agent header when fetching NodeInfo documents.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nfedify node --user-agent MyApp/1.0 mastodon.social\n```\n\n----------------------------------------\n\nTITLE: Implementing FollowerList and ActorLink Components in React/JSX\nDESCRIPTION: TypeScript JSX components to display a list of followers and individual actor links, handling conditional rendering based on actor properties.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_70\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface FollowerListProps {\n  followers: Actor[];\n}\n\nexport const FollowerList: FC<FollowerListProps> = ({ followers }) => (\n  <>\n    <h2>Followers</h2>\n    <ul>\n      {followers.map((follower) => (\n        <li key={follower.id}>\n          <ActorLink actor={follower} />\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nexport interface ActorLinkProps {\n  actor: Actor;\n}\n\nexport const ActorLink: FC<ActorLinkProps> = ({ actor }) => {\n  const href = actor.url ?? actor.uri;\n  return actor.name == null ? (\n    <a href={href} class=\"secondary\">\n      {actor.handle}\n    </a>\n  ) : (\n    <>\n      <a href={href}>{actor.name}</a>{\" \"}\n      <small>\n        (\n        <a href={href} class=\"secondary\">\n          {actor.handle}\n        </a>\n        )\n      </small>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing an Inbox URI with Decoupled Actor Identifier in TypeScript using Fedify\nDESCRIPTION: This example illustrates using `Context.getInboxUri()` when the actor's identifier (e.g., a UUID) is different from their WebFinger username. The identifier used within the Fedify actor dispatcher should be provided to the method.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\n// ---cut-before---\nctx.getInboxUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Importing Actor Type in Views Component\nDESCRIPTION: TypeScript import statement to import the Actor type from the schema file for use in the followers list components.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actor } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Constructing Featured Tags Collection URI in TypeScript\nDESCRIPTION: Demonstrates how to use the Context.getFeaturedTagsUri() method to construct a featured tags collection URI for an actor. It shows examples for both regular identifiers and decoupled WebFinger usernames.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFeaturedTagsUri(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFeaturedTagsUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Setting Suspended Status for Person Actor in TypeScript\nDESCRIPTION: This snippet shows how to set the 'suspended' property for a Person actor, which is used to display a suspended status in Mastodon.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  suspended: true,\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Traversing an ActivityPub collection\nDESCRIPTION: Example of using the fedify lookup command with the --traverse option to retrieve and output objects within an ActivityPub collection.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --traverse https://fosstodon.org/users/hongminhee/outbox\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-LD Output for Hydrated Create Object (JSON)\nDESCRIPTION: This snippet displays a representative JSON-LD output for a hydrated Create object's object property. Dependencies: none, sample output only. Inputs stem from a previously hydrated Fedify Create instance. The object field now holds a full object rather than a URI string. The snippet omits or simplifies some attributes for clarity and brevity.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Create\",\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\"],\n  \"object\": {\n    \"id\": \"https://hollo.social/@fedify/0191e4f3-6b08-7003-9d33-f07d1e33d7b4\",\n    \"type\": \"Note\",\n    \"attributedTo\": \"https://hollo.social/@fedify\",\n    \"content\": \"<p>...</p>\\n\",\n    \"published\": \"2024-09-12T06:37:23.593Z\",\n    \"sensitive\": false,\n    \"tag\": [],\n    \"to\": \"as:Public\",\n    \"url\": \"https://hollo.social/@fedify/0191e4f3-6b08-7003-9d33-f07d1e33d7b4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting WebFinger Requests in Caddy\nDESCRIPTION: This Caddy configuration snippet shows how to redirect WebFinger requests from the handleHost to the webOrigin. This is necessary when the handleHost and webOrigin are different and not served by the same server.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_20\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n  redir /.well-known/webfinger https://ap.example.com/.well-known/webfinger\n}\n```\n\n----------------------------------------\n\nTITLE: Looking up an ActivityPub actor by handle\nDESCRIPTION: Example of using the fedify lookup command to retrieve information about an ActivityPub actor using their handle.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup @fedify-example@fedify-blog.deno.dev\n```\n\n----------------------------------------\n\nTITLE: Importing User Type in Views File\nDESCRIPTION: Import statement for the User type in the views file to use in component props interfaces.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actor, User } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Creating PostList Component\nDESCRIPTION: React component for displaying a list of posts on the profile page.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_107\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface PostListProps {\n  posts: (Post & Actor)[];\n}\n\nexport const PostList: FC<PostListProps> = ({ posts }) => (\n  <>\n    {posts.map((post) => (\n      <div key={post.id}>\n        <PostView post={post} />\n      </div>\n    ))}\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying GET Request Handler for Setup Page in TypeScript/JSX\nDESCRIPTION: This snippet shows how to modify the GET request handler for the setup page. It checks for existing user and actor records before rendering the setup form.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/setup\", (c) => {\n  // Check if the user already exists\n  const user = db\n    .prepare<unknown[], User>(\n      `\n      SELECT * FROM users\n      JOIN actors ON (users.id = actors.user_id)\n      LIMIT 1\n      `,\n    )\n    .get();\n  if (user != null) return c.redirect(\"/\");\n\n  return c.html(\n    <Layout>\n      <SetupForm />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Looking up multiple ActivityPub objects\nDESCRIPTION: Example of using the fedify lookup command to retrieve information about multiple ActivityPub objects in a single command.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup @hongminhee@fosstodon.org @fedify@hollo.social\n```\n\n----------------------------------------\n\nTITLE: Looking up an ActivityPub Note object\nDESCRIPTION: Example of using the fedify lookup command to retrieve information about a specific ActivityPub Note object by its URL.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup https://todon.eu/@hongminhee/112341925069749583\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite Follow Records\nDESCRIPTION: SQL query to check follow relationships in the SQLite database by selecting records from the follows table for a specific follower ID.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_115\n\nLANGUAGE: sh\nCODE:\n```\necho \"SELECT * FROM follows WHERE follower_id = 1;\" | sqlite3 -table microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Redirecting WebFinger Requests in Nginx\nDESCRIPTION: This Nginx configuration snippet demonstrates how to redirect WebFinger requests from the handleHost to the webOrigin. It's an alternative to the Caddy configuration for servers using Nginx.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_21\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  server_name example.com;\n  location /.well-known/webfinger {\n    return 301 https://ap.example.com$request_uri;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Looking up an ActivityPub actor\nDESCRIPTION: Command using the Fedify CLI to look up an ActivityPub actor on the local server.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup http://localhost:8000/users/john\n```\n\n----------------------------------------\n\nTITLE: Assigning HTML Structure with JSX in TypeScript\nDESCRIPTION: Demonstrates how to use JSX syntax directly in TypeScript to assign an HTML fragment to a variable. No external dependencies are needed; a TSX or JSX file extension is required for TypeScript to parse the JSX syntax. The 'html' variable receives a <div> element with nested paragraph and strong tags. Inputs: none, as the HTML is static; outputs: a JSX element assigned to the variable.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst html = <div>\n  <p id=\"greet\">Hello, <strong>JSX</strong>!</p>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Performing WebFinger Lookups in Fedify\nDESCRIPTION: Illustrates the use of Context.lookupWebFinger() method to directly query a remote server's WebFinger endpoint. This method is useful for finding information about accounts and resources across federated networks.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst webfingerData = await ctx.lookupWebFinger(\"acct:fedify@hollo.social\");\n\n// Find the ActivityPub actor URI\nconst activityPubActorLink = webfingerData?.links?.find(link =>\n  link.rel === \"self\" && link.type === \"application/activity+json\"\n);\n\nif (activityPubActorLink?.href) {\n  const actor = await ctx.lookupObject(activityPubActorLink.href);\n  // Work with the actor...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Create Class for ActivityPub in TypeScript\nDESCRIPTION: Code snippet showing how to import the necessary classes from the Fedify library in the federation.ts file, with special highlight on the Create class which is needed for receiving Create(Note) activities.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Create,  // [!code highlight]\n  Endpoints,\n  Follow,\n  Note,\n  PUBLIC_COLLECTION,\n  Person,\n  Undo,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n  isActor,\n  type Actor as APActor,\n  type Recipient,\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Integrating with Hono Middleware\nDESCRIPTION: Shows how to use the federation() function from the @fedify/fedify/x/hono module to integrate with Hono middleware. Added in version 0.6.0.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federation } from \"@fedify/fedify/x/hono\";\n\nconst app = new Hono();\napp.use(\"/\", federation(federationInstance));\n```\n\n----------------------------------------\n\nTITLE: Updating Home Component to Include PostList\nDESCRIPTION: TypeScript JSX code for modifying the Home component to accept and display posts in the views.tsx file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_122\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface HomeProps extends PostListProps {\n  user: User & Actor;\n}\n\nexport const Home: FC<HomeProps> = ({ user, posts }) => (\n  <>\n    {/* ... omitted ... */}\n    <PostList posts={posts} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Recipient Type for ActivityPub Federation\nDESCRIPTION: TypeScript import statement to add the Recipient type from Fedify for use in the ActivityPub followers collection implementation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Endpoints,\n  Follow,\n  Person,\n  Undo,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n  type Recipient,  // [!code highlight]\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server to Public Internet using fedify tunnel\nDESCRIPTION: This shell command demonstrates how to use the fedify tunnel command to expose a local server running on port 8000 to the public internet for development purposes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfedify tunnel 8000\n```\n\n----------------------------------------\n\nTITLE: Using Custom Separator in Fedify Lookup Command (Shell)\nDESCRIPTION: Demonstrates how to use the -s/--separator option to specify a custom separator between outputs when looking up multiple objects with the fedify lookup command.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup -s ==== @fedify@hollo.social @hongminhee@fosstodon.org\n```\n\n----------------------------------------\n\nTITLE: Handling Potentially Null Variables in TypeScript\nDESCRIPTION: This snippet shows how to correctly handle a variable (`bar`) that might be `null` before accessing its properties or methods. It uses a ternary conditional operator (`bar === null ? \"\" : bar.charAt(0)`) to check if `bar` is `null`. If it is `null`, it assigns an empty string to `firstChar`; otherwise, it calls `bar.charAt(0)`. This pattern satisfies TypeScript's null-safety checks and prevents potential runtime errors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction someFunction(): string | null { return \"\"; }\nconst bar: string | null = someFunction();\n// ---cut-before---\nconst firstChar = bar === null ? \"\" : bar.charAt(0);\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting JSX Components in a Hono TypeScript Project\nDESCRIPTION: Demonstrates re-exporting minimally implemented Layout and SetupForm components in a TypeScript file, and shows how to import these components for use elsewhere. This snippet is an illustration for organizing and importing UI modules. Dependencies: 'hono/jsx' and './views.tsx'. Inputs: none; outputs: bindings for imported components.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors: 2395 2307\nimport type { FC } from \"hono/jsx\";\nexport const Layout: FC = (props) => <html/>;\nexport const SetupForm: FC = () => <></>;\n// ---cut-before---\nimport { Layout, SetupForm } from \"./views.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling for Non-extractable CryptoKeys in TypeScript\nDESCRIPTION: Methods that now throw TypeError when a non-extractable CryptoKey is provided. This change affects Context and Federation class methods.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nContext.getActorKey()\nContext.sendActivity()\nFederation.sendActivity()\n```\n\n----------------------------------------\n\nTITLE: Handling GET Request for User Profile in TypeScript/JSX\nDESCRIPTION: This code snippet demonstrates how to handle a GET request for a user's profile. It queries the database for user and actor information and renders the profile page.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username\", async (c) => {\n  const user = db\n    .prepare<unknown[], User & Actor>(\n      `\n      SELECT * FROM users\n      JOIN actors ON (users.id = actors.user_id)\n      WHERE username = ?\n      `,\n    )\n    .get(c.req.param(\"username\"));\n  if (user == null) return c.notFound();\n\n  const url = new URL(c.req.url);\n  const handle = `@${user.username}@${url.host}`;\n  return c.html(\n    <Layout>\n      <Profile name={user.name ?? user.username} handle={handle} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Note Class in Federation Module\nDESCRIPTION: Imports the Note class from the Fedify package to handle ActivityPub notes (posts) in the federation module.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Endpoints,\n  Follow,\n  Note,  // [!code highlight]\n  Person,\n  Undo,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n  type Recipient,\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Starting Only the Inbox Queue Manually (Deno, TypeScript)\nDESCRIPTION: Configures Deno to manually start only the 'inbox' message queue by specifying the queue parameter in startQueue. Useful for cases where only certain tasks (e.g., inbox) should be processed, providing fine-grained control when using multiple queues. Dependencies: @fedify/fedify, @fedify/redis, ioredis. Inputs: environment variable, signal controller, specific queue target. Outputs: only the selected queue is started. Limitations: must manually gate and manage which queue to start.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KvStore } from \"@fedify/fedify\";\nimport { createFederation } from \"@fedify/fedify\";\nimport { RedisMessageQueue } from \"@fedify/redis\";\nimport Redis from \"ioredis\";\n\nconst federation = createFederation<void>({\n  queue: new RedisMessageQueue(() => new Redis()),\n  manuallyStartQueue: true,  // [!code highlight]\n  // ... other options\n  // ---cut-start---\n  kv: null as unknown as KvStore,\n  // ---cut-end---\n});\n\n// ---cut-before---\nif (Deno.env.get(\"NODE_TYPE\") === \"worker\") {\n  const controller = new AbortController();\n  Deno.addSignalListener(\"SIGINT\", () => controller.abort());\n  await federation.startQueue(undefined, {\n    signal: controller.signal,\n    queue: \"inbox\",  // [!code highlight]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing KvKey in Custom KvStore Implementation (TypeScript)\nDESCRIPTION: Demonstrates a method to serialize the KvKey (an array of strings) into a format suitable for storage backends in a custom KvStore implementation. This example uses a simple colon-separated string approach.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nprivate serializeKey(key: KvKey): string {\n  return key.join(':');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom MessageQueue Interface in Fedify (TypeScript)\nDESCRIPTION: Example of implementing a custom MessageQueue interface in Fedify. This code demonstrates the structure for creating a custom message queue, including the required enqueue and listen methods.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/mq.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  MessageQueue,\n  MessageQueueEnqueueOptions,\n  MessageQueueListenOptions,\n} from \"@fedify/fedify\";\n\nclass CustomMessageQueue implements MessageQueue {\n  async enqueue(\n    message: any,\n    options?: MessageQueueEnqueueOptions,\n  ): Promise<void> {\n    // Implementation here\n  }\n\n  async listen(\n    handler: (message: any) => Promise<void> | void,\n    options: MessageQueueListenOptions = {},\n  ): Promise<void> {\n    // Implementation here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Slash Insensitivity to Router (JavaScript)\nDESCRIPTION: Implements an option to make the router insensitive to trailing slashes in URL paths. Adds a new option to CreateFederationOptions and RouterOptions.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ninterface CreateFederationOptions {\n  // ... existing properties ...\n  trailingSlashInsensitive?: boolean;\n}\n\ninterface RouterOptions {\n  trailingSlashInsensitive?: boolean;\n}\n\nclass Router {\n  constructor(options?: RouterOptions) {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Follows Table in SQL\nDESCRIPTION: SQL code to create a 'follows' table in the database to store information about followers and following relationships between actors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_56\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS follows (\n  following_id INTEGER          REFERENCES actors (id),\n  follower_id  INTEGER          REFERENCES actors (id),\n  created      TEXT    NOT NULL DEFAULT (CURRENT_TIMESTAMP)\n                                CHECK (created <> ''),\n  PRIMARY KEY (following_id, follower_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Context for Actor-Like Classes (JSON)\nDESCRIPTION: This JSON code snippet assigns a default context for the `Application`, `Group`, `Organization`, `Person`, and `Service` classes in Fedify. It extends the recognized terms with the 'Emoji' term from Mastodon's namespace, making it possible to serialize instances with federated emoji metadata for interoperability. Requirements are limited to JSON-LD aware systems. The key parameter is 'Emoji', mapped to a specific URI, and the output is used for context expansion in ActivityPub documents.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"Emoji\\\": \\\"http://joinmastodon.org/ns#Emoji\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Setup with Memory Store\nDESCRIPTION: Implementation of Federation object initialization using MemoryKvStore for development purposes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation, MemoryKvStore } from \"@fedify/fedify\";\n\nconst federation = createFederation<void>({\n  kv: new MemoryKvStore(),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Activity Vocabulary Objects with Prefix in TypeScript\nDESCRIPTION: Shows how to import Activity Vocabulary objects with a prefix to avoid naming conflicts.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vocab from \"@fedify/fedify/vocab\";\n```\n\n----------------------------------------\n\nTITLE: Installing Fedify CLI globally\nDESCRIPTION: Command to install the Fedify command-line interface globally using npm.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Applying SQLite Schema\nDESCRIPTION: Shell command to apply the SQL schema to the SQLite database file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 microblog.sqlite3 < src/schema.sql\n```\n\n----------------------------------------\n\nTITLE: Installing LogTape Package for Different JavaScript Runtimes\nDESCRIPTION: Commands to install the @logtape/logtape package for Deno, Node.js, and Bun environments. This package enables logging functionality in federated server applications.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/log.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno add jsr:@logtape/logtape\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @logtape/logtape\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @logtape/logtape\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Queue Start for Federation (JavaScript)\nDESCRIPTION: Adds an option to manually start the task queue in the Federation object. Introduces a new method to start the queue and an option in CreateFederationOptions.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ninterface CreateFederationOptions {\n  // ... existing properties ...\n  manuallyStartQueue?: boolean;\n}\n\ninterface Federation {\n  // ... existing methods ...\n  startQueue(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Question Class in Activity Vocabulary API (JavaScript)\nDESCRIPTION: Adds new properties 'closed' and 'voters' to the Question class in the Activity Vocabulary API. Updates the constructor and clone method to accept these new options.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass Question {\n  constructor(options) {\n    // ... existing code ...\n    this.closed = options.closed;\n    this.voters = options.voters;\n  }\n\n  clone(options) {\n    // ... existing code ...\n    return new Question({\n      // ... existing options ...\n      closed: options.closed !== undefined ? options.closed : this.closed,\n      voters: options.voters !== undefined ? options.voters : this.voters\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server Implementation for Deno\nDESCRIPTION: Simple HTTP server implementation using Deno's native serve function that responds with 'Hello, world'.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(request =>\n  new Response(\"Hello, world\", {\n    headers: { \"Content-Type\": \"text/plain\" }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing fedify CLI using Deno on Windows\nDESCRIPTION: Command to install the fedify CLI using Deno on Windows systems. It includes necessary permissions and flags for installation, using PowerShell syntax.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ndeno install `\n  -A `\n  --unstable-fs --unstable-kv --unstable-temporal `\n  -n fedify `\n  jsr:@fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration for Deno\nDESCRIPTION: JSON configuration for a Deno-based Fedify project, enabling unstable features required by the framework.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"unstable\": [\"kv\", \"temporal\"],\n  \"imports\": {\n    \"@fedify/fedify\": \"jsr:@fedify/fedify@^1.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing x-forwarded-fetch Middleware for Deno (Shell)\nDESCRIPTION: Shell command to install the `x-forwarded-fetch` middleware package from JSR for Deno environments. This middleware helps Fedify correctly identify the server's domain name when running behind a reverse proxy by inspecting `X-Forwarded-Host` headers.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ndeno add jsr:@hongminhee/x-forwarded-fetch\n```\n\n----------------------------------------\n\nTITLE: Installing fedify CLI using Deno on Linux/macOS\nDESCRIPTION: Command to install the fedify CLI using Deno on Linux or macOS systems. It includes necessary permissions and flags for installation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndeno install \\\n  -A \\\n  --unstable-fs --unstable-kv --unstable-temporal \\\n  -n fedify \\\n  jsr:@fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Specifying Sender by Identifier in Fedify sendActivity (TypeScript)\nDESCRIPTION: Illustrates specifying the activity sender using an object with an `identifier` property within the `ctx.sendActivity()` method. Fedify uses this identifier to look up the corresponding actor's key pairs for signing the activity. The recipient is specified as the special string 'followers'.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\n// ---cut-before---\nawait ctx.sendActivity(\n  { identifier: \"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\" },  // [!code highlight]\n  \"followers\",\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Fedify with h3\nDESCRIPTION: This snippet illustrates how to integrate Fedify with the h3 HTTP server framework using the @fedify/h3 package.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/integration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, createRouter } from \"h3\";\nimport { createFederation } from \"@fedify/fedify\";\nimport { integrateFederation, onError } from \"@fedify/h3\";\n\nexport const federation = createFederation<string>({\n  // Omitted for brevity; see the related section for details.\n});\n\nexport const app = createApp({ onError });\napp.use(\n  integrateFederation(\n    federation,\n    (event, request) => \"context data goes here\"\n  )\n);\n\nconst router = createRouter();\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Starting Server and Tunneling (Shell)\nDESCRIPTION: This shell command starts the Node.js application using `npm start` in the background (`&`) and simultaneously runs the Fedify CLI tunnel command to expose the local server running on port 8000 to the internet.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/express/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start & npx @fedify/cli tunnel 8000\n```\n\n----------------------------------------\n\nTITLE: Example Custom User-Agent Header Result\nDESCRIPTION: Displays an example of the resulting `User-Agent` header string when custom `software` and `url` options are provided via the `userAgent` configuration in Fedify. This format includes the custom application info, Fedify version, runtime details, and the provided instance URL.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMyApp/1.0.0 (Fedify/1.3.0; Deno/2.0.4; +https://myinstance.com/)\n```\n\n----------------------------------------\n\nTITLE: Installing fedify using Scoop on Windows\nDESCRIPTION: Command to install the fedify CLI using Scoop package manager for Windows.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nscoop install fedify\n```\n\n----------------------------------------\n\nTITLE: Serializing Create to Compact JSON-LD with Custom Context (TypeScript)\nDESCRIPTION: This snippet shows calling toJsonLd() with options to compact the JSON-LD output using a custom context provided by the caller. Dependencies: @fedify/fedify and async environment. Inputs are a Create instance plus options: format: 'compact' and a custom context URI. Output is a compacted JSON-LD document, benefiting from proper processing (may invoke remote context fetches). Limitations: proper function depends on context accessibility and correct option formatting.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Create } from \"@fedify/fedify\";\nconst create = new Create({});\n// ---cut-before---\nconst jsonLd = await create.toJsonLd({\n  format: \"compact\",\n  context: \"https://example.com/context\",\n});\n```\n\n----------------------------------------\n\nTITLE: Logger Configuration Setup\nDESCRIPTION: Optional logging configuration using LogTape to monitor server operations.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure, getConsoleSink } from \"@logtape/logtape\";\n\nawait configure({\n  sinks: { console: getConsoleSink() },\n  filters: {},\n  loggers: [\n```\n\n----------------------------------------\n\nTITLE: Installing fedify using Bun\nDESCRIPTION: Command to install the fedify CLI globally using Bun package manager.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun install -g @fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok (Shell)\nDESCRIPTION: This command uses ngrok to create a public HTTPS tunnel to the local server running on port 8000. This is essential during development to allow other Fediverse servers to discover and interact with the local blog instance for testing federation features.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/blog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nngrok http 8000\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash Completions for Fedify\nDESCRIPTION: Demonstrates how to add Bash completions for the Fedify CLI by adding a source command to the Bash profile file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nsource <(fedify completions bash)\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages by RequestId Using jq\nDESCRIPTION: This shell command demonstrates how to filter log messages by requestId from a JSON Lines log file using the jq command-line JSON processor.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/log.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\njq -r 'select(.properties.requestId == \"your-request-id\")' fedify-logs.jsonl\n```\n\n----------------------------------------\n\nTITLE: Modifying HTTP Signatures Verification Options (JavaScript)\nDESCRIPTION: Updates the types for signature time window properties in CreateFederationOptions and VerifyRequestOptions to allow skipping signature verification. Adds a new option to skip signature verification entirely.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ninterface CreateFederationOptions {\n  // ... existing properties ...\n  signatureTimeWindow: Temporal.DurationLike | false;\n  skipSignatureVerification?: boolean;\n}\n\ninterface VerifyRequestOptions {\n  // ... existing properties ...\n  timeWindow: Temporal.DurationLike | false;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Federation Instance in TypeScript\nDESCRIPTION: New function introduced for creating Federation instances, replacing the deprecated constructor for forward compatibility as Federation class will become an interface in the future.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncreateFederation()\n// Deprecated:\n// new Federation()\n```\n\n----------------------------------------\n\nTITLE: Initializing New Fedify Project\nDESCRIPTION: Command to create a new Fedify project using the CLI initialization wizard.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/install.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfedify init your-project-dir\n```\n\n----------------------------------------\n\nTITLE: Creating Context Object from Federation Instance\nDESCRIPTION: Example showing how to create a Context object from a Federation instance using createContext() method within a request handler.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/context.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federation } from \"../federation.ts\"; // Import the `Federation` object\n\nexport async function handler(request: Request) {\n  const ctx = federation.createContext(request, undefined);\n  // Work with the `ctx` object...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Route for User Profiles\nDESCRIPTION: Adds a GET route handler for user profiles. It fetches user data from the database and renders the Profile component with the user's information.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/users/:username\", async (c) => {\n  const user = db\n    .prepare<unknown[], User>(\"SELECT * FROM users WHERE username = ?\")\n    .get(c.req.param(\"username\"));\n  if (user == null) return c.notFound();\n\n  const url = new URL(c.req.url);\n  const handle = `@${user.username}@${url.host}`;\n  return c.html(\n    <Layout>\n      <Profile name={user.username} handle={handle} />\n    </Layout>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Fedify Classes and Functions in TypeScript\nDESCRIPTION: TypeScript code importing necessary classes and functions from the Fedify library for implementing the inbox functionality.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Endpoints,\n  Follow,\n  Person,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Error Message for Failed Protected Object Fetch\nDESCRIPTION: Displays the error output produced by `fedify lookup` when it fails to fetch an object, typically because the object requires authentication. The message suggests retrying the command with the `-a`/`--authorized-fetch` flag.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nFailed to fetch the object.\nIt may be a private object.  Try with -a/--authorized-fetch.\n```\n\n----------------------------------------\n\nTITLE: Adding Default JSON-LD Context for Mastodon Emoji Namespace\nDESCRIPTION: This JSON snippet represents a default JSON-LD context added to the `Application`, `Group`, `Organization`, `Person`, and `Service` classes in Fedify version 1.0.18. It maps the term 'Emoji' to the Mastodon namespace URI 'http://joinmastodon.org/ns#Emoji', facilitating the interpretation of emoji-related properties within ActivityStreams objects handled by these Fedify classes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Emoji\": \"http://joinmastodon.org/ns#Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Fedify development server\nDESCRIPTION: Command to start the Fedify development server for the newly created project.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTelemetry Semantic Attribute Table - Markdown\nDESCRIPTION: Presents a Markdown table documenting configuration keys, their types, descriptions, and examples per OpenTelemetry semantic conventions for Fedify. This table is used as a reference for developers to ensure consistent attribute usage for observability and tracing, referencing official OpenTelemetry documents for further specification. No code is executed; inputs are key-value pairs and descriptions, with output being clear documentation. The only dependencies are adherence to Markdown formatting and the semantic conventions it lists.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/opentelemetry.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n| `activitypub.actor.id`                | string   | The URI of the actor object.                                                             | `\"https://example.com/actor/1\"`                                      |\n| `activitypub.actor.key.cached`        | boolean  | Whether the actor's public keys are cached.                                              | `true`                                                               |\n| `activitypub.actor.type`              | string[] | The qualified URI(s) of the actor type(s).                                               | `[\"https://www.w3.org/ns/activitystreams#Person\"]`                   |\n| `activitypub.collection.id`           | string   | The URI of the collection object.                                                        | `\"https://example.com/collection/1\"`                                 |\n| `activitypub.collection.type`         | string[] | The qualified URI(s) of the collection type(s).                                          | `[\"https://www.w3.org/ns/activitystreams#OrderedCollection\"]`        |\n| `activitypub.collection.total_items`  | int      | The total number of items in the collection.                                             | `42`                                                                 |\n| `activitypub.object.id`               | string   | The URI of the object or the object enclosed by the activity.                            | `\"https://example.com/object/1\"`                                     |\n| `activitypub.object.type`             | string[] | The qualified URI(s) of the object type(s).                                              | `[\"https://www.w3.org/ns/activitystreams#Note\"]`                     |\n| `activitypub.object.in_reply_to`      | string[] | The URI(s) of the original object to which the object reply.                             | `[\"https://example.com/object/1\"]`                                   |\n| `activitypub.inboxes`                 | int      | The number of inboxes the activity is sent to.                                           | `12`                                                                 |\n| `activitypub.shared_inbox`            | boolean  | Whether the activity is sent to the shared inbox.                                        | `true`                                                               |\n| `fedify.actor.identifier`             | string   | The identifier of the actor.                                                             | `\"1\"`                                                                |\n| `fedify.inbox.recipient`              | string   | The identifier of the inbox recipient.                                                   | `\"1\"`                                                                |\n| `fedify.object.type`                  | string   | The URI of the object type.                                                              | `\"https://www.w3.org/ns/activitystreams#Note\"`                       |\n| `fedify.object.values.{parameter}`    | string[] | The argument values of the object dispatcher.                                            | `[\"1\", \"2\"]`                                                         |\n| `fedify.collection.cursor`            | string   | The cursor of the collection.                                                            | `\"eyJpZCI6IjEiLCJ0eXBlIjoiT3JkZXJlZENvbGxlY3Rpb24ifQ==\"`             |\n| `fedify.collection.items`             | number   | The number of items in the collection page.  It can be less than the total items.        | `10`                                                                 |\n| `http_signatures.signature`           | string   | The signature of the HTTP request in hexadecimal.                                        | `\"73a74c990beabe6e59cc68f9c6db7811b59cbb22fd12dcffb3565b651540efe9\"` |\n| `http_signatures.algorithm`           | string   | The algorithm of the HTTP request signature.                                             | `\"rsa-sha256\"`                                                       |\n| `http_signatures.key_id`              | string   | The public key ID of the HTTP request signature.                                         | `\"https://example.com/actor/1#main-key\"`                             |\n| `http_signatures.digest.{algorithm}`  | string   | The digest of the HTTP request body in hexadecimal.  The `{algorithm}` is the digest algorithm (e.g., `sha`, `sha-256`). | `\"d41d8cd98f00b204e9800998ecf8427e\"` |\n| `ld_signatures.key_id`                | string   | The public key ID of the Linked Data signature.                                          | `\"https://example.com/actor/1#main-key\"`                             |\n| `ld_signatures.signature`             | string   | The signature of the Linked Data in hexadecimal.                                         | `\"73a74c990beabe6e59cc68f9c6db7811b59cbb22fd12dcffb3565b651540efe9\"` |\n| `ld_signatures.type`                  | string   | The algorithm of the Linked Data signature.                                              | `\"RsaSignature2017\"`                                                 |\n| `object_integrity_proofs.cryptosuite` | string   | The cryptographic suite of the object integrity proof.                                   | `\"eddsa-jcs-2022\"`                                                   |\n| `object_integrity_proofs.key_id`      | string   | The public key ID of the object integrity proof.                                         | `\"https://example.com/actor/1#main-key\"`                             |\n| `object_integrity_proofs.signature`   | string   | The integrity proof of the object in hexadecimal.                                        | `\"73a74c990beabe6e59cc68f9c6db7811b59cbb22fd12dcffb3565b651540efe9\"` |\n| `webfinger.resource`                  | string   | The queried resource URI.                                                                | `\"acct:fedify@hollo.social\"`                                         |\n| `webfinger.resource.scheme`           | string   | The scheme of the queried resource URI.                                                  | `\"acct\"`                                                             |\n```\n\n----------------------------------------\n\nTITLE: Starting Hono Sample Application\nDESCRIPTION: Command to start the Fedify-Hono sample application using Deno task runner. The application will be accessible on port 8000.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/hono-sample/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno task start\n```\n\n----------------------------------------\n\nTITLE: Empty Note Object Dispatcher Implementation\nDESCRIPTION: Shows the initial empty implementation of the Note object dispatcher, which serves as a placeholder before implementing the actual functionality.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nfederation.setObjectDispatcher(\n  Note,\n  \"/users/{identifier}/posts/{id}\",\n  (ctx, values) => {\n    return null;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Fedify Lookup Command for Followers Collection\nDESCRIPTION: Command-line operation to look up the followers collection of a user using the fedify tool, with expected output showing the collection structure.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_87\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup http://localhost:8000/users/johndoe/followers\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with Fedify Tunnel in Shell\nDESCRIPTION: This command uses the fedify tunnel feature to expose a local server running on port 8000 to the public internet, creating a temporary domain for testing purposes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\nfedify tunnel 8000\n```\n\n----------------------------------------\n\nTITLE: Checking Fedify CLI version\nDESCRIPTION: Command to verify the installed version of the Fedify CLI.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfedify --version\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite on Fedora & RHEL\nDESCRIPTION: Installs the SQLite command-line package on Fedora and RHEL using the dnf package manager. This command readies the environment for database operations. Inputs: none; outputs: 'sqlite' installed.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install sqlite\n```\n\n----------------------------------------\n\nTITLE: Cloning Fedify Repository and Navigating to Example Directory\nDESCRIPTION: These commands clone the Fedify repository from GitHub and navigate to the Next.js app router example directory.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next15-app-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/fedify-dev/fedify.git\ncd fedify/examples/next15-app-router\n```\n\n----------------------------------------\n\nTITLE: Cloning Fedify Repository and Navigating to Example Directory\nDESCRIPTION: Commands to clone the Fedify repository from GitHub and navigate to the Next.js app router example directory.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next14-app-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/fedify-dev/fedify.git\ncd fedify/examples/next14-app-router\n```\n\n----------------------------------------\n\nTITLE: Setting Bio for Person Actor in TypeScript\nDESCRIPTION: This snippet shows how to set the 'summary' property for a Person actor, which is used as the bio in Mastodon and most ActivityPub implementations.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Default User-Agent Header Examples in Fedify\nDESCRIPTION: Provides examples of the default `User-Agent` string generated by Fedify 1.3.0 across different JavaScript runtimes like Deno, Node.js, and Bun. This header identifies the Fedify library and the runtime environment in outgoing HTTP requests made by Fedify.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nFedify/1.3.0 (Deno/2.0.4)\nFedify/1.3.0 (Node.js/v22.10.0)\nFedify/1.3.0 (Bun/1.1.33)\n```\n\n----------------------------------------\n\nTITLE: Installing fedify using Homebrew\nDESCRIPTION: Command to install the fedify CLI using Homebrew package manager for macOS and Linux.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install fedify\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite3 via Debian/Ubuntu Package Manager\nDESCRIPTION: Shell command to install the 'sqlite3' command-line tool on Debian or Ubuntu systems using apt. This is necessary for initializing and interacting with the SQLite database. Inputs: none; outputs: installs sqlite3 for later usage.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install sqlite3\n```\n\n----------------------------------------\n\nTITLE: Starting the Blog Server (Shell)\nDESCRIPTION: This command uses the Deno task runner to execute the 'preview' task defined in the project's configuration (e.g., deno.json). This typically starts the Fresh web server for the blog application, making it accessible locally on port 8000.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/blog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno task preview\n```\n\n----------------------------------------\n\nTITLE: Importing Post Type for Post Page Components\nDESCRIPTION: Imports the Post type to be used in the post page components for proper type checking.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actor, Post, User } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Example Output: Expanded JSON-LD Structure - Fedify Lookup - JSON\nDESCRIPTION: Shows a representative expanded JSON-LD object as retrieved by the Fedify CLI --expand option. All property and type names are presented as full URIs, and objects may use arrays for values to comply with JSON-LD expanded structure. Intended to be used as input for JSON-LD processors that expect explicit context and structure, the output contains all original object data using expanded terms.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"@id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583\",\n    \"@type\": [\n      \"https://www.w3.org/ns/activitystreams#Note\"\n    ],\n    \"https://www.w3.org/ns/activitystreams#attachment\": [\n      {\n        \"@type\": [\n          \"https://www.w3.org/ns/activitystreams#Document\"\n        ],\n        \"https://www.w3.org/ns/activitystreams#mediaType\": [\n          {\n            \"@value\": \"video/mp4\"\n          }\n        ],\n        \"https://www.w3.org/ns/activitystreams#name\": [\n          {\n            \"@value\": \"The demo video on my terminal\"\n          }\n        ],\n        \"https://www.w3.org/ns/activitystreams#url\": [\n          {\n            \"@id\": \"https://todon.eu/system/media_attachments/files/112/341/916/300/016/369/original/f83659866f94054f.mp4\"\n          }\n        ]\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#attributedTo\": [\n      {\n        \"@id\": \"https://todon.eu/users/hongminhee\"\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#cc\": [\n      {\n        \"@id\": \"https://todon.eu/users/hongminhee/followers\"\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#content\": [\n      {\n        \"@value\": \"<p>I&#39;m working on adding a CLI toolchain to <a href=\\\"https://todon.eu/tags/Fedify\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>Fedify</span></a> to help with debugging.  The first feature I implemented is the ActivityPub object lookup.</p><p>Here&#39;s a demo.</p><p><a href=\\\"https://todon.eu/tags/fedidev\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>fedidev</span></a> <a href=\\\"https://todon.eu/tags/ActivityPub\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>ActivityPub</span></a></p>\"\n      },\n      {\n        \"@language\": \"en\",\n        \"@value\": \"<p>I&#39;m working on adding a CLI toolchain to <a href=\\\"https://todon.eu/tags/Fedify\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>Fedify</span></a> to help with debugging.  The first feature I implemented is the ActivityPub object lookup.</p><p>Here&#39;s a demo.</p><p><a href=\\\"https://todon.eu/tags/fedidev\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>fedidev</span></a> <a href=\\\"https://todon.eu/tags/ActivityPub\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>ActivityPub</span></a></p>\"\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#published\": [\n      {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2024-04-27T07:08:57Z\"\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#replies\": [\n      {\n        \"@id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies\",\n        \"@type\": [\n          \"https://www.w3.org/ns/activitystreams#Collection\"\n        ],\n        \"https://www.w3.org/ns/activitystreams#first\": [\n          {\n            \"@type\": [\n              \"https://www.w3.org/ns/activitystreams#CollectionPage\"\n            ],\n            \"https://www.w3.org/ns/activitystreams#items\": [\n              {\n                \"@id\": \"https://todon.eu/users/hongminhee/statuses/112343493232608516\"\n              }\n            ],\n            \"https://www.w3.org/ns/activitystreams#next\": [\n              {\n                \"@id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies?min_id=112343493232608516&page=true\"\n              }\n            ],\n            \"https://www.w3.org/ns/activitystreams#partOf\": [\n              {\n                \"@id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies\"\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#sensitive\": [\n      {\n        \"@value\": false\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#to\": [\n      {\n        \"@id\": \"https://www.w3.org/ns/activitystreams#Public\"\n      }\n    ],\n    \"https://www.w3.org/ns/activitystreams#url\": [\n      {\n        \"@id\": \"https://todon.eu/@hongminhee/112341925069749583\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Fedify project\nDESCRIPTION: Command to initialize a new Fedify project in a directory named 'microblog'.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfedify init microblog\n```\n\n----------------------------------------\n\nTITLE: Installing fedify CLI using npm\nDESCRIPTION: Command to install the fedify CLI globally using npm package manager.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Querying ActivityPub actor with curl\nDESCRIPTION: Alternative command using curl to query the ActivityPub actor, with proper Accept header.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H\"Accept: application/activity+json\" http://localhost:8000/users/john\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Fedify-Next.js Example\nDESCRIPTION: Commands to optionally use a specific Node version with nvm and install the required npm packages for the example.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next14-app-router/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# optional\nnvm use\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Code Check for Fedify in Bash\nDESCRIPTION: Commands to run code checks before opening a pull request. This ensures adherence to coding conventions.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd src/\ndeno task check\n```\n\n----------------------------------------\n\nTITLE: Enabling Fish Completions for Fedify\nDESCRIPTION: Shows how to enable Fish shell completions for the Fedify CLI by adding a source command to the Fish configuration file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_32\n\nLANGUAGE: fish\nCODE:\n```\nsource (fedify completions fish | psub)\n```\n\n----------------------------------------\n\nTITLE: Example Raw JSON Output from fedify lookup --raw\nDESCRIPTION: Shows the expected raw JSON output when fetching an ActivityPub object (a 'Note' in this case) using the `fedify lookup --raw` command. The output includes the ActivityStreams context, object details like id, type, content, attachments, and replies.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/ns/activitystreams\",\n    {\n      \"ostatus\": \"http://ostatus.org#\",\n      \"atomUri\": \"ostatus:atomUri\",\n      \"inReplyToAtomUri\": \"ostatus:inReplyToAtomUri\",\n      \"conversation\": \"ostatus:conversation\",\n      \"sensitive\": \"as:sensitive\",\n      \"toot\": \"http://joinmastodon.org/ns#\",\n      \"votersCount\": \"toot:votersCount\",\n      \"blurhash\": \"toot:blurhash\",\n      \"focalPoint\": {\n        \"@container\": \"@list\",\n        \"@id\": \"toot:focalPoint\"\n      },\n      \"Hashtag\": \"as:Hashtag\"\n    }\n  ],\n  \"id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583\",\n  \"type\": \"Note\",\n  \"summary\": null,\n  \"inReplyTo\": null,\n  \"published\": \"2024-04-27T07:08:57Z\",\n  \"url\": \"https://todon.eu/@hongminhee/112341925069749583\",\n  \"attributedTo\": \"https://todon.eu/users/hongminhee\",\n  \"to\": [\n    \"https://www.w3.org/ns/activitystreams#Public\"\n  ],\n  \"cc\": [\n    \"https://todon.eu/users/hongminhee/followers\"\n  ],\n  \"sensitive\": false,\n  \"atomUri\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583\",\n  \"inReplyToAtomUri\": null,\n  \"conversation\": \"tag:todon.eu,2024-04-27:objectId=90184788:objectType=Conversation\",\n  \"content\": \"<p>I&#39;m working on adding a CLI toolchain to <a href=\\\"https://todon.eu/tags/Fedify\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>Fedify</span></a> to help with debugging.  The first feature I implemented is the ActivityPub object lookup.</p><p>Here&#39;s a demo.</p><p><a href=\\\"https://todon.eu/tags/fedidev\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>fedidev</span></a> <a href=\\\"https://todon.eu/tags/ActivityPub\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>ActivityPub</span></a></p>\",\n  \"contentMap\": {\n    \"en\": \"<p>I&#39;m working on adding a CLI toolchain to <a href=\\\"https://todon.eu/tags/Fedify\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>Fedify</span></a> to help with debugging.  The first feature I implemented is the ActivityPub object lookup.</p><p>Here&#39;s a demo.</p><p><a href=\\\"https://todon.eu/tags/fedidev\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>fedidev</span></a> <a href=\\\"https://todon.eu/tags/ActivityPub\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>ActivityPub</span></a></p>\"\n  },\n  \"attachment\": [\n    {\n      \"type\": \"Document\",\n      \"mediaType\": \"video/mp4\",\n      \"url\": \"https://todon.eu/system/media_attachments/files/112/341/916/300/016/369/original/f83659866f94054f.mp4\",\n      \"name\": \"The demo video on my terminal\",\n      \"blurhash\": \"U87_4lWB_3WBt7bHazWV~qbHaybFozj[ayfj\",\n      \"width\": 1092,\n      \"height\": 954\n    }\n  ],\n  \"tag\": [\n    {\n      \"type\": \"Hashtag\",\n      \"href\": \"https://todon.eu/tags/fedify\",\n      \"name\": \"#fedify\"\n    },\n    {\n      \"type\": \"Hashtag\",\n      \"href\": \"https://todon.eu/tags/fedidev\",\n      \"name\": \"#fedidev\"\n    },\n    {\n      \"type\": \"Hashtag\",\n      \"href\": \"https://todon.eu/tags/activitypub\",\n      \"name\": \"#activitypub\"\n    }\n  ],\n  \"replies\": {\n    \"id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies\",\n    \"type\": \"Collection\",\n    \"first\": {\n      \"type\": \"CollectionPage\",\n      \"next\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies?min_id=112343493232608516&page=true\",\n      \"partOf\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies\",\n      \"items\": [\n        \"https://todon.eu/users/hongminhee/statuses/112343493232608516\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fedify CLI Toolchain\nDESCRIPTION: Commands for installing the Fedify CLI toolchain across different platforms and package managers.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/install.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @fedify/cli\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun install -g @fedify/cli\n```\n\nLANGUAGE: powershell\nCODE:\n```\nscoop install fedify\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno install -g -A --unstable-fs --unstable-kv --unstable-temporal -n fedify jsr:@fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Exposing ActivityPub Endpoint with cURL (Bash)\nDESCRIPTION: This Bash command demonstrates how to fetch an ActivityPub actor resource from a public endpoint using the HTTP Accept header to specify the desired ActivityPub JSON format. No code dependencies are required beyond a standard cURL installation. The input is the URL of the user resource, and the output will be the ActivityPub-compliant JSON object describing the actor. This can be used to verify if the server is publicly accessible and responding with valid ActivityPub payloads.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H\"Accept: application/activity+json\" https://e875a03fc2a35b.lhr.life/users/me\n```\n\n----------------------------------------\n\nTITLE: Importing Database and User Type in TypeScript\nDESCRIPTION: Imports the database connection and User type definition for use in the main application file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from \"./db.ts\";\nimport type { User } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Adding Default Context to Actor Classes in JSON\nDESCRIPTION: This snippet shows the default context being added to Application, Group, Organization, Person, and Service classes in the Activity Vocabulary API. It defines the Emoji namespace.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Emoji\": \"http://joinmastodon.org/ns#Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Image for Person Actor in TypeScript\nDESCRIPTION: This code shows how to set the 'icon' property for a Person actor, which is used as the avatar image in Mastodon and most ActivityPub implementations.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  icon: new Image({\n    url: new URL(\"https://i.imgur.com/CUBXuVX.jpeg\"),\n    mediaType: \"image/jpeg\",\n  }),\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK and OTLP Exporter\nDESCRIPTION: Commands to install OpenTelemetry SDK and OTLP exporter for different JavaScript runtimes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/opentelemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno add npm:@opentelemetry/sdk-node npm:@opentelemetry/exporter-trace-otlp-proto\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @opentelemetry/sdk-node @opentelemetry/exporter-trace-otlp-proto\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @opentelemetry/sdk-node @opentelemetry/exporter-trace-otlp-proto\n```\n\n----------------------------------------\n\nTITLE: Installing Fedify in Bun\nDESCRIPTION: Command for installing Fedify package in Bun environment.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/install.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbun add @fedify/fedify\n```\n\n----------------------------------------\n\nTITLE: Default /.well-known/nodeinfo Response (JSON)\nDESCRIPTION: This JSON snippet shows the default response served by Fedify for the `/.well-known/nodeinfo` endpoint when no specific NodeInfo dispatcher has been registered using `setNodeInfoDispatcher()`. It indicates that while the discovery endpoint is handled, no specific NodeInfo version link (like `/nodeinfo/2.1`) is configured.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/nodeinfo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Default Context Configuration for Undo Class in JSON\nDESCRIPTION: Defines the default JSON-LD context configuration for the Undo class, including litepub and toot namespaces with EmojiReact and Emoji definitions.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"litepub\": \"http://litepub.social/ns#\",\n  \"toot\": \"http://joinmastodon.org/ns#\",\n  \"EmojiReact\": \"litepub:EmojiReact\",\n  \"Emoji\": \"toot:Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Interface (JavaScript)\nDESCRIPTION: Replaces the Federation class with an interface. Removes the constructor and some methods, and introduces a createFederation() function for instantiation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ninterface Federation {\n  // ... interface methods ...\n}\n\nfunction createFederation(options: CreateFederationOptions): Federation {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger Categories in JavaScript\nDESCRIPTION: Defines an array of logger categories used in the Fedify project. These categories are used with the LogTape library for logging various aspects of the application.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\"fedify\", \"federation\", \"queue\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Default Context to Undo Class in JSON\nDESCRIPTION: This snippet shows the default context being added to the Undo class in the Activity Vocabulary API. It includes definitions for litepub, toot, EmojiReact, and Emoji namespaces.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"litepub\": \"http://litepub.social/ns#\",\n  \"toot\": \"http://joinmastodon.org/ns#\",\n  \"EmojiReact\": \"litepub:EmojiReact\",\n  \"Emoji\": \"toot:Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Request Handler for Deno\nDESCRIPTION: Integration of Federation object with Deno's HTTP server to handle incoming federation requests.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/basics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(\n  request => federation.fetch(request, { contextData: undefined })\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Temporal API Polyfill in Federation Module\nDESCRIPTION: Imports the Temporal polyfill module to handle time representation in the ActivityPub implementation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Temporal } from \"@js-temporal/polyfill\";\n```\n\n----------------------------------------\n\nTITLE: Undo Follow Activity JSON Structure\nDESCRIPTION: Example of an Undo(Follow) activity JSON object sent when unfollowing an actor in ActivityPub.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"id\": \"https://activitypub.academy/users/dobussia_dovornath#follows/3283/undo\",\n  \"type\": \"Undo\",\n  \"actor\": \"https://activitypub.academy/users/dobussia_dovornath\",\n  \"object\": {\n    \"id\": \"https://activitypub.academy/98b131b8-89ea-49ba-b2bd-3ee0f5a87694\",\n    \"type\": \"Follow\",\n    \"actor\": \"https://activitypub.academy/users/dobussia_dovornath\",\n    \"object\": \"https://temp-address.serveo.net/users/johndoe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Actor Dispatcher with Fedify CLI\nDESCRIPTION: Demonstrates how to use the Fedify CLI to test the actor dispatcher by looking up user accounts.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup http://localhost:8000/users/alice\n```\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup http://localhost:8000/users/johndoe\n```\n\n----------------------------------------\n\nTITLE: Building Fedify Documentation with Bun\nDESCRIPTION: Commands to install dependencies and start a development server for previewing changes to the Fedify documentation.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun install\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Fedify Library in Bash\nDESCRIPTION: Commands to run tests for the Fedify library using Deno, and to run comprehensive tests across Deno, Node.js, and Bun environments.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno task -f @fedify/fedify test\n```\n\nLANGUAGE: bash\nCODE:\n```\ndeno task test-all\n```\n\n----------------------------------------\n\nTITLE: Default Emoji Context for ActivityPub Classes\nDESCRIPTION: Specifies the default context configuration for Application, Group, Organization, Person, and Service classes, defining the Emoji namespace.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Emoji\": \"http://joinmastodon.org/ns#Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite with Windows Package Manager (winget)\nDESCRIPTION: Shows how to install SQLite using Windows' built-in winget package manager. After execution, sqlite3 should be available in the PATH. Inputs: none; outputs: SQLite installation complete.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install SQLite.SQLite\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-LD Representation of a Create Object (JSON)\nDESCRIPTION: This JSON snippet shows an example structure of a JSON-LD document representing a Create activity with an embedded Note object. No dependencies; this is reference data. Inputs correspond to a Fedify Create instance. Shows @context usage, type, id, actor, and nested object with published timestamp. Limitations: data is illustrative; real objects may contain additional attributes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"type\": \"Create\",\n  \"id\": \"https://example.com/activities/123\",\n  \"actor\": \"https://example.com/users/alice\",\n  \"object\": {\n    \"type\": \"Note\",\n    \"id\": \"https://example.com/notes/456\",\n    \"content\": \"Hello, world!\",\n    \"published\": \"2024-01-01T00:00:00Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Actor Recipients in Fedify sendActivity (TypeScript)\nDESCRIPTION: Demonstrates specifying multiple recipients by passing an array of `Actor` objects as the second argument to `ctx.sendActivity()`. Fedify handles delivery to each actor's inbox (optimizing with shared inboxes where possible and configured). The sender is specified by username.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity, type Actor, type Context } from \"@fedify/fedify\";\nconst ctx = null as unknown as Context<void>;\nconst activity = new Activity({});\nconst actor = {} as Actor;\nconst actor2 = {} as Actor;\nconst actor3 = {} as Actor;\n// ---cut-before---\nawait ctx.sendActivity(\n  { username: \"john\" },\n  [actor, actor2, actor3],  // [!code highlight]\n  activity,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Join Date for Person Actor in TypeScript\nDESCRIPTION: This example demonstrates how to set the 'published' property for a Person actor, which is used as the join date in Mastodon and Misskey.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Person({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  published: Temporal.Instant.from(\"2024-03-31T00:00:00Z\"),\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite with Scoop on Windows\nDESCRIPTION: Uses Scoop, a Windows package manager, to install SQLite. Enables users to run sqlite3 commands for database management. Inputs: none; outputs: SQLite installation completed.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\nscoop install sqlite\n```\n\n----------------------------------------\n\nTITLE: Initializing MemoryKvStore in Fedify (TypeScript)\nDESCRIPTION: Demonstrates how to create a Fedify federation using MemoryKvStore, which is suitable for development and testing environments. It's a simple in-memory key-value store that doesn't persist data.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/kv.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFederation, MemoryKvStore } from \"@fedify/fedify\";\n\nconst federation = createFederation<void>({\n  kv: new MemoryKvStore(),\n  // ... other options\n});\n```\n\n----------------------------------------\n\nTITLE: Including CONTRIBUTING.md File in HTML\nDESCRIPTION: This HTML comment is used to include the contents of the CONTRIBUTING.md file from the parent directory. It's likely used in a static site generator or documentation system to incorporate contribution guidelines into another document.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/contribute.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!--@include: ../CONTRIBUTING.md-->\n```\n\n----------------------------------------\n\nTITLE: Including External Security Documentation in Markdown\nDESCRIPTION: This directive instructs VuePress to include the contents of the SECURITY.md file from the parent directory into the current document, allowing for centralized security policy management.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/security.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: ../SECURITY.md-->\n```\n\n----------------------------------------\n\nTITLE: Installing fedify using Deno on Windows\nDESCRIPTION: Command to install the fedify CLI globally using Deno on Windows, with necessary permissions and flags.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\ndeno install `\n  -g `\n  -A `\n  --unstable-fs --unstable-kv --unstable-temporal `\n  -n fedify `\n  jsr:@fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLite Database from Schema Definition Using Shell Command\nDESCRIPTION: Executes the SQLite command-line tool to create a new database file (microblog.sqlite3) from an SQL schema file. Prerequisites: the sqlite3 executable, src/schema.sql present. Inputs: schema SQL file; outputs: a new or updated SQLite database file as specified by the schema.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 microblog.sqlite3 < src/schema.sql\n```\n\n----------------------------------------\n\nTITLE: Starting Fedify-Next.js Server with CLI Tunneling\nDESCRIPTION: These commands start the development server and use the Fedify CLI to create a tunnel. Options are provided for npm, pnpm, and bun package managers.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next15-app-router/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev & npx @fedify/cli tunnel 3000\npnpm dev && pnpx @fedify/cli tunnel 3000\nbun dev && bunx @fedify/cli tunnel 3000\n```\n\n----------------------------------------\n\nTITLE: Importing PostPage Component\nDESCRIPTION: Imports the PostPage component to be used in the post display page handler.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FollowerList,\n  Home,\n  Layout,\n  PostPage,  // [!code highlight]\n  Profile,\n  SetupForm,\n} from \"./views.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a Variable with a Union Type (string | null) in TypeScript\nDESCRIPTION: This snippet defines a function `someFunction` that is declared to return either a `string` or `null`. It then declares a constant `bar` and assigns the result of `someFunction` to it, explicitly typing `bar` as `string | null`. This illustrates the use of union types in TypeScript, allowing a variable to hold values of multiple specified types.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction someFunction(): string | null { return \"\"; }\n// ---cut-before---\nconst bar: string | null = someFunction();\n```\n\n----------------------------------------\n\nTITLE: Running Fedify CLI in Bash\nDESCRIPTION: Example command to test changes in the Fedify CLI by running the 'lookup' subcommand.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeno task -f @fedify/cli run lookup @fedify@hollo.social\n```\n\n----------------------------------------\n\nTITLE: Defining Default Undo Activity Context (JSON)\nDESCRIPTION: This JSON code snippet demonstrates the assignment of default context values to the `Undo` class in Fedify. It maps terms and vocabularies (like 'litepub', 'toot', 'EmojiReact', 'Emoji') to their respective namespaces, ensuring interoperability with Mastodon and Litepub federation actors. No dependencies are required beyond standard JSON; the data is meant to be injected into class constructors or used as part of JSON-LD serialization. Inputs and outputs are simple objects representing Linked Data contexts; the main limitation is that usage assumes consuming code is JSON-LD aware.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"litepub\\\": \\\"http://litepub.social/ns#\\\",\\n  \\\"toot\\\": \\\"http://joinmastodon.org/ns#\\\",\\n  \\\"EmojiReact\\\": \\\"litepub:EmojiReact\\\",\\n  \\\"Emoji\\\": \\\"toot:Emoji\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Featured Collection URI in TypeScript\nDESCRIPTION: Demonstrates how to use the Context.getFeaturedUri() method to construct a featured collection URI for an actor. It shows examples for both regular identifiers and decoupled WebFinger usernames.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/collections.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFeaturedUri(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nctx.getFeaturedUri(\"2bd304f9-36b3-44f0-bf0b-29124aafcbb4\")\n```\n\n----------------------------------------\n\nTITLE: Enqueuing a Fedify Create Activity (TypeScript)\nDESCRIPTION: This TypeScript snippet, likely found within a Fresh route handler (e.g., `routes/posts/index.ts`), demonstrates how to publish a new post to the Fediverse. It gets a Fedify context (`fedCtx`) associated with the incoming request (`req`), retrieves the blog's followers (`getFollowersAsActors()`), constructs a `Create` activity, and uses `fedCtx.sendActivity()` to enqueue it for delivery to the followers' inboxes via the outbox mechanism.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/blog/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Gets a federation context for enqueueing an activity:\nconst fedCtx = await federation.createContext(req);\n// Enqueues a `Create` activity to the outbox:\nawait fedCtx.sendActivity(\n  { handle: blog.handle },\n  await getFollowersAsActors(),\n  new Create({\n    // (omitted for brevity)\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Home Component in App File\nDESCRIPTION: Import statement for the Home component in the main app file, alongside other view components.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FollowerList, Home, Layout, Profile, SetupForm } from \"./views.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Fedify Follower List Example\nDESCRIPTION: An example of the follower list output that can be seen after setting up and interacting with the Fedify-Next.js integration.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next14-app-router/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nThis account has the below 1 followers:\nhttps://activitypub.academy/users/beboes_bedoshs\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from SQLite Follows Table\nDESCRIPTION: Shell command to delete all records from the 'follows' table in an SQLite database, which is necessary before testing follow functionality again.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_66\n\nLANGUAGE: sh\nCODE:\n```\necho \"DELETE FROM follows;\" | sqlite3 microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Illustrating TypeScript Null Possibility Error\nDESCRIPTION: This snippet demonstrates a TypeScript type error (code 18047) related to potential `null` values. It attempts to call the `charAt(0)` method on the `bar` variable, which has the type `string | null`. TypeScript flags this because `bar` might be `null` at runtime, and calling a method on `null` would cause an error. This enforces null-safety checks.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 18047\nfunction someFunction(): string | null { return \"\"; }\nconst bar: string | null = someFunction();\n// ---cut-before---\nconst firstChar = bar.charAt(0);\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable in TypeScript\nDESCRIPTION: This snippet demonstrates the basic syntax for declaring a variable `foo` and explicitly specifying its type as `string` in TypeScript using the colon (`:`) notation. This ensures that only string values can be assigned to this variable.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo: string;\n```\n\n----------------------------------------\n\nTITLE: Executing SQLite Schema Creation\nDESCRIPTION: Shell command to create the 'keys' table in the SQLite database using the schema.sql file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 microblog.sqlite3 < src/schema.sql\n```\n\n----------------------------------------\n\nTITLE: Importing Profile Component in App\nDESCRIPTION: Imports the Profile component along with other components in the main app file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Layout, Profile, SetupForm } from \"./views.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown File in Vue/VitePress\nDESCRIPTION: This snippet demonstrates how to include an external Markdown file using a VitePress-specific include directive. It includes the CHANGES.md file from the parent directory.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: ../CHANGES.md-->\n```\n\n----------------------------------------\n\nTITLE: Illustrating TypeScript Type Error on Incorrect Assignment\nDESCRIPTION: This snippet shows a common TypeScript type error (code 2322). It attempts to assign a number (`123`) to the variable `foo`, which was previously declared as type `string`. Visual Studio Code, utilizing the TypeScript compiler, flags this as an error before runtime because the assigned value's type does not match the declared type. The `// @errors` and `// ---cut-before---` comments are likely for documentation generation tooling.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nlet foo: string;\n// ---cut-before---\nfoo = 123;\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage Layout in Markdown\nDESCRIPTION: This code snippet defines the layout and content for the Fedify documentation homepage. It includes metadata, hero section configuration, and a list of key features. The layout uses YAML frontmatter for configuration and includes HTML for custom styling.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: home\ndescription: >\n  Fedify is a TypeScript library for building federated server apps powered by\n  ActivityPub and other standards, so-called fediverse.\n\nhero:\n  name: Fedify\n  text: ActivityPub server framework\n  tagline: >\n    A TypeScript library for building federated server apps\n    powered by <a style=\"border-bottom: 2px solid;\"\n    href=\"https://activitypub.rocks/\">ActivityPub</a> and other standards,\n    so-called <a style=\"border-bottom: 2px solid;\"\n    href=\"https://www.theverge.com/24063290/fediverse-explained-activitypub-social-media-open-protocol\"\n    >fediverse</a>\n  image: /logo.png\n  actions:\n  - theme: brand\n    text: What is Fedify?\n    link: /intro.md\n  - theme: alt\n    text: Quick demo\n    link: https://dash.deno.com/playground/fedify-demo\n  - theme: alt\n    text: Tutorial\n    link: /tutorial/basics.md\n  - theme: alt\n    text: GitHub\n    link: https://github.com/fedify-dev/fedify\n\nfeatures:\n- icon: 🕸️\n  title: ActivityPub\n  details: >\n    <a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a> server and\n    client\n- icon: 📚\n  title: Activity Vocabulary\n  details: >\n    Type-safe objects for <a\n    href=\"https://www.w3.org/TR/activitystreams-vocabulary/\">Activity\n    Vocabulary</a> (including some vendor-specific extensions)\n  link: /manual/vocab.md\n- icon: 👉\n  title: WebFinger\n  details: >\n    <a href=\"https://datatracker.ietf.org/doc/html/rfc7033\">WebFinger</a>\n    client and server\n- icon: ✍️\n  title: HTTPS Signatures\n  details: >\n    Signing and verifying <a\n    href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-12\">HTTP\n    Signatures</a>\n  link: /manual/send.md#http-signatures\n- icon: 🔗\n  title: Linked Data Signatures\n  details: >\n    Creating and verifying <a\n    href=\"https://web.archive.org/web/20170923124140/https://w3c-dvcg.github.io/ld-signatures/\">Linked\n    Data Signatures</a>\n  link: /manual/send.md#linked-data-signatures\n- icon: 🪪\n  title: Object Integrity Proofs (FEP-8b32)\n  details: >\n    Creating and verifying <a href=\"https://w3id.org/fep/8b32\">Object Integrity\n    Proofs</a>\n  link: /manual/send.md#object-integrity-proofs\n- icon: ℹ️\n  title: NodeInfo\n  details: >\n    <a href=\"https://nodeinfo.diaspora.software/\">NodeInfo</a> server and client\n  link: /manual/nodeinfo.md\n- icon: 🧩\n  title: Integration\n  details: Integration with various web frameworks\n  link: /manual/integration.md\n---\n\n<style>\n#sponsors { text-align: center; }\n</style>\n\n<section id=\"sponsors\">\n\n<h2>Meet our sponsors</h2>\n\nSupport Fedify's development and join these amazing individuals and\norganizations.\n\n[See all sponsors &rarr;](/sponsors.md)\n\n</section>\n```\n\n----------------------------------------\n\nTITLE: Running Actor Lookup CLI Commands - Shell\nDESCRIPTION: This snippet demonstrates two sequential shell commands: first, generating necessary code artifacts with 'deno task codegen', intended for one-time setup; second, running the CLI to look up a fediverse actor by handle using 'deno run -A ./main.ts', passing the desired handle (e.g., @fedify@hollo.social) as an argument. Requires Deno runtime and the Fedify project. The setup command initializes required code, and the run command executes the lookup process, printing actor details to the terminal. Both commands must be run from the project root.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/actor-lookup-cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno task codegen  # At very first time only\ndeno run -A ./main.ts @fedify@hollo.social\n```\n\n----------------------------------------\n\nTITLE: Running SQL Schema with SQLite3\nDESCRIPTION: Shell command to execute the SQL schema file against the SQLite3 database to create the posts table.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_81\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 microblog.sqlite3 < src/schema.sql\n```\n\n----------------------------------------\n\nTITLE: Console Output from Actor Lookup\nDESCRIPTION: Console output showing the result of a successful lookup of an actor, displaying a Person object with inbox, followers, and endpoints properties.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_90\n\nLANGUAGE: console\nCODE:\n```\n✔ Looking up the object...\nPerson {\n  ... omitted ...\n  inbox: URL \"http://localhost:8000/users/johndoe/inbox\",\n  followers: URL \"http://localhost:8000/users/johndoe/followers\",\n  endpoints: Endpoints { sharedInbox: URL \"http://localhost:8000/inbox\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Expanded JSON-LD from Fedify Lookup - Fedify CLI - Shell\nDESCRIPTION: Illustrates how to use the Fedify CLI to lookup an ActivityPub object and produce expanded JSON-LD output with the --expanded flag. This option is mutually exclusive with --compact and --raw. Requires a valid ActivityPub object URL. The output object will contain fully expanded URIs and structure per the JSON-LD expanded form specification.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup --expand https://todon.eu/@hongminhee/112341925069749583\n```\n\n----------------------------------------\n\nTITLE: Example Output: Compacted JSON-LD Structure - Fedify Lookup - JSON\nDESCRIPTION: Provides a sample compacted JSON-LD object as returned by the Fedify CLI with the --compact flag. Relies on the ActivityStreams JSON-LD context for compaction. The structure features short property names and context reference, presenting the full set of ActivityPub object fields as a single JSON object, intended for clients processing compacted JSON-LD.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583\",\n  \"type\": \"Note\",\n  \"attachment\": {\n    \"type\": \"Document\",\n    \"mediaType\": \"video/mp4\",\n    \"name\": \"The demo video on my terminal\",\n    \"url\": \"https://todon.eu/system/media_attachments/files/112/341/916/300/016/369/original/f83659866f94054f.mp4\"\n  },\n  \"attributedTo\": \"https://todon.eu/users/hongminhee\",\n  \"cc\": \"https://todon.eu/users/hongminhee/followers\",\n  \"content\": \"<p>I&#39;m working on adding a CLI toolchain to <a href=\\\"https://todon.eu/tags/Fedify\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>Fedify</span></a> to help with debugging.  The first feature I implemented is the ActivityPub object lookup.</p><p>Here&#39;s a demo.</p><p><a href=\\\"https://todon.eu/tags/fedidev\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>fedidev</span></a> <a href=\\\"https://todon.eu/tags/ActivityPub\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>ActivityPub</span></a></p>\",\n  \"contentMap\": {\n    \"en\": \"<p>I&#39;m working on adding a CLI toolchain to <a href=\\\"https://todon.eu/tags/Fedify\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>Fedify</span></a> to help with debugging.  The first feature I implemented is the ActivityPub object lookup.</p><p>Here&#39;s a demo.</p><p><a href=\\\"https://todon.eu/tags/fedidev\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>fedidev</span></a> <a href=\\\"https://todon.eu/tags/ActivityPub\\\" class=\\\"mention hashtag\\\" rel=\\\"tag\\\">#<span>ActivityPub</span></a></p>\"\n  },\n  \"published\": \"2024-04-27T07:08:57Z\",\n  \"replies\": {\n    \"id\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies\",\n    \"type\": \"Collection\",\n    \"first\": {\n      \"type\": \"CollectionPage\",\n      \"items\": \"https://todon.eu/users/hongminhee/statuses/112343493232608516\",\n      \"next\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies?min_id=112343493232608516&page=true\",\n      \"partOf\": \"https://todon.eu/users/hongminhee/statuses/112341925069749583/replies\"\n    }\n  },\n  \"as:sensitive\": false,\n  \"to\": \"as:Public\",\n  \"url\": \"https://todon.eu/@hongminhee/112341925069749583\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Temporal API Polyfill for Fedify\nDESCRIPTION: Installs the @js-temporal/polyfill package which is required for handling time representation in the ActivityPub implementation since the Temporal API is not yet built into Node.js.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_100\n\nLANGUAGE: sh\nCODE:\n```\nnpm add @js-temporal/polyfill\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite Follows Table\nDESCRIPTION: Shell command to select all records from the 'follows' table in an SQLite database and display them in table format, used to verify follow request processing.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\necho \"SELECT * FROM follows;\" | sqlite3 -table microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite using Chocolatey on Windows\nDESCRIPTION: Installs the SQLite package using the Chocolatey package manager on Windows, providing the sqlite3 executable for further setup. Inputs: none; outputs: SQLite installed system-wide.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing x-forwarded-fetch Middleware for Node.js (Shell)\nDESCRIPTION: Shell command using npm to install the `x-forwarded-fetch` middleware package for Node.js environments. This middleware allows Fedify to accurately determine the host based on `X-Forwarded-Host` headers when deployed behind a reverse proxy.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/federation.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm install x-forwarded-fetch\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm versions\nDESCRIPTION: Commands to verify the installed versions of Node.js and npm, which are prerequisites for using Fedify.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode --version\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Driver and Type Definitions\nDESCRIPTION: Commands to install the better-sqlite3 package and its TypeScript type definitions using npm.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nnpm add better-sqlite3\nnpm add --save-dev @types/better-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Default Activity Sending in TypeScript with Fedify\nDESCRIPTION: Demonstrates the default 'auto' fanout behavior for sending activities to recipients.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.sendActivity({ identifier: \"alice\" }, recipients, activity);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebFinger Links with Custom URL Property in Fedify (TypeScript)\nDESCRIPTION: This snippet shows how to set up an actor dispatcher in Fedify with custom URL properties. It demonstrates how to provide multiple links with different 'rel' values in the WebFinger response, including profile page, alternate formats, and OpenID issuer.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/actor.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfederation\n  .setActorDispatcher(\"/users/{identifier}\", async (ctx, identifier) => {\n    return new Person({\n      id: ctx.getActorUri(identifier),\n      preferredUsername: identifier,\n      urls: [\n        new URL(`/@${identifier}`, ctx.origin),\n        new Link({\n          rel: \"alternate\",\n          href: new URL(`/@${identifier}/atom.xml`, ctx.origin),\n          mediaType: \"application/atom+xml\",\n        }),\n        new Link({\n          rel: \"http://openid.net/specs/connect/1.0/issuer\",\n          href: new URL(\"/openid\", ctx.origin),\n        }),\n      ],\n      // Omitted for brevity; see the previous example for details.\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing fedify using Deno on Linux/macOS\nDESCRIPTION: Command to install the fedify CLI globally using Deno on Linux or macOS, with necessary permissions and flags.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndeno install \\\n  -g \\\n  -A \\\n  --unstable-fs --unstable-kv --unstable-temporal \\\n  -n fedify \\\n  jsr:@fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Fedify in Deno\nDESCRIPTION: Command for installing Fedify package in Deno environment.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/install.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndeno add jsr:@fedify/fedify\n```\n\n----------------------------------------\n\nTITLE: Console Output from Followers Collection Lookup\nDESCRIPTION: Console output showing the result of a successful lookup of a user's followers collection, displaying an OrderedCollection with a totalItems count and items array.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_88\n\nLANGUAGE: console\nCODE:\n```\n✔ Looking up the object...\nOrderedCollection {\n  totalItems: 1,\n  items: [ URL \"https://activitypub.academy/users/dobussia_dovornath\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Fedify-Next.js Example\nDESCRIPTION: This snippet shows how to install dependencies using different package managers (npm, pnpm, or bun). It also includes an optional nvm use command.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next15-app-router/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnvm use # optional\n\n# choose according to your taste\nnpm i\npnpm i\nbun i\n```\n\n----------------------------------------\n\nTITLE: Importing Fedify ActivityPub Types and Constants\nDESCRIPTION: Imports the Note type and PUBLIC_COLLECTION constant from Fedify, which are essential for implementing the ActivityPub object dispatcher for microblog posts.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Endpoints,\n  Follow,\n  Note,\n  PUBLIC_COLLECTION,  // [!code highlight]\n  Person,\n  Undo,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n  type Recipient,\n} from \"@fedify/fedify\";\nimport type {\n  Actor,\n  Key,\n  Post,  // [!code highlight]\n  User,\n} from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Installing fedify CLI using Bun\nDESCRIPTION: Command to install the fedify CLI globally using the Bun package manager.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun install -g @fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Tunnel with Fedify (Shell)\nDESCRIPTION: Demonstrates how to use the fedify tunnel command to expose a local HTTP server to the public internet using a secure tunnel, specifying the local port number.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nfedify tunnel 3000\n```\n\n----------------------------------------\n\nTITLE: Querying Actor Records in SQLite\nDESCRIPTION: SQL query to check actor information in the actors table for federated users.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_62\n\nLANGUAGE: sh\nCODE:\n```\necho \"SELECT * FROM actors WHERE id > 1;\" | sqlite3 -table microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Following Actors with Fedify Inbox Command (Shell)\nDESCRIPTION: Demonstrates how to use the -f/--follow option with the fedify inbox command to follow multiple actors by specifying their handles or URIs.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nfedify inbox -f @john@doe.com -f @jane@doe.com\n```\n\n----------------------------------------\n\nTITLE: Testing Federation Lookup Command\nDESCRIPTION: Shell command for testing the actor lookup functionality.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\nfedify lookup http://localhost:8000/users/johndoe\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeInfo Protocol in TypeScript\nDESCRIPTION: Addition of NodeInfo 2.1 protocol implementation, including new methods, interfaces, and types to support NodeInfo functionality in the Federation and Context classes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nFederation.handle()\nFederation.setNodeInfoDispatcher()\nContext.getNodeInfoUri()\nNodeInfo\nSoftware\nProtocol\nServices\nInboundService\nOutboundService\nUsage\nNodeInfoDispatcher\nnodeInfoToJson()\n```\n\n----------------------------------------\n\nTITLE: Querying Follow Records in SQLite\nDESCRIPTION: SQL query to verify follow relationships in the follows table after a successful follow request.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_61\n\nLANGUAGE: sh\nCODE:\n```\necho \"SELECT * FROM follows;\" | sqlite3 -table microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Importing Federation Dependencies in TypeScript\nDESCRIPTION: Imports required functions and types from Fedify library for key pair management and federation functionality.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Endpoints,\n  Person,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  importJwk,\n} from \"@fedify/fedify\";\nimport type { Actor, Key, User } from \"./schema.ts\";\n```\n\n----------------------------------------\n\nTITLE: Querying and formatting ActivityPub actor with curl and jq\nDESCRIPTION: Command to query the ActivityPub actor using curl and format the JSON output using jq for better readability.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H\"Accept: application/activity+json\" http://localhost:8000/users/john | jq .\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Completions for Fedify\nDESCRIPTION: Demonstrates how to add Zsh completions for the Fedify CLI by adding a source command to the Zsh configuration file.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_33\n\nLANGUAGE: zsh\nCODE:\n```\nsource <(fedify completions zsh)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Schema in Shell\nDESCRIPTION: Shell command to execute the SQL schema file and create the 'follows' table in the SQLite database.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\nsqlite3 microblog.sqlite3 < src/schema.sql\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Changing Directory (Shell)\nDESCRIPTION: This shell command sequence clones the Fedify GitHub repository and navigates into the specific example directory for the Express integration.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/express/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/fedify-dev/fedify.git\ncd fedify/examples/express\n```\n\n----------------------------------------\n\nTITLE: Accepting Follow Requests with Fedify Inbox Command (Shell)\nDESCRIPTION: Shows how to use the -a/--accept-follow option with the fedify inbox command to accept follow requests from specific actors or all actors using a wildcard.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nfedify inbox -a @john@doe.com -a @jane@doe.com\n```\n\n----------------------------------------\n\nTITLE: Example Follower List Output (Text)\nDESCRIPTION: This snippet shows an example of the output displayed by the application, listing the followers of the Fedify account created in the example. It indicates one follower from activitypub.academy.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/express/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nThis account has the below 1 followers:\nhttps://activitypub.academy/users/beboes_bedoshs\n```\n\n----------------------------------------\n\nTITLE: Force Fanout Activity Sending in TypeScript\nDESCRIPTION: Demonstrates using the 'force' fanout option to ensure fan-out behavior regardless of recipient count.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.sendActivity(\n  { identifier: \"alice\" },\n  recipients,\n  activity,\n  { fanout: \"force\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming Follow Activity with Dehydrated Actor in TypeScript\nDESCRIPTION: This snippet shows the result of applying the actorDehydrator transformer to a Follow activity. The actor property is transformed to contain only the actor's URI instead of the full object.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/send.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nnew Follow({\n  id: new URL(\"http://example.com/activities/1\"),\n  actor: new URL(\"http://example.com/actors/1\"),  // [!code highlight]\n  object: new Person({\n    id: new URL(\"http://example.com/actors/2\"),\n    name: \"Bob\",\n    preferredUsername: \"bob\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: SQLite Query for Verifying Remote Posts\nDESCRIPTION: Shell command to query the SQLite database for posts received from remote servers, filtering out local posts (actor_id != 1).\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_121\n\nLANGUAGE: sh\nCODE:\n```\necho \"SELECT * FROM posts WHERE actor_id != 1\" | sqlite3 -table microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Creating an Application Actor in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an Application actor object, which is considered an automated actor by Mastodon and a bot actor by Misskey.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/pragmatics.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Application({\n  name: \"Fedify Demo\",\n  preferredUsername: \"demo\",\n  summary: \"This is a Fedify Demo account\",\n  // Other properties...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Undo Class in TypeScript\nDESCRIPTION: TypeScript import statement for adding Undo functionality from Fedify library.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Endpoints,\n  Follow,\n  Person,\n  Undo,  \n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Counting Records in SQLite Follows Table\nDESCRIPTION: Shell command to count the number of records in the 'follows' table in an SQLite database, used to verify unfollow request processing.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\necho \"SELECT count(*) FROM follows;\" | sqlite3 -table microblog.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Displaying Fedify Follower List Example\nDESCRIPTION: This code snippet demonstrates the format of the follower list output when using the Fedify-Next.js integration.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next15-app-router/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nThis account has the below 1 followers:\nhttps://activitypub.academy/users/beboes_bedoshs\n```\n\n----------------------------------------\n\nTITLE: Adding Default Context to Activity Vocabulary Entities (JSON - English)\nDESCRIPTION: This JSON snippet shows the default context added to several Activity Vocabulary entities (`Application`, `Group`, `Organization`, `Person`, and `Service`) in Fedify version 1.1.15. The context introduces an `Emoji` namespace linked to Mastodon. This is part of the compliance and extensibility improvements for better interoperability with federated social web implementations. The only parameter is the `Emoji` property, which is mapped to its namespace URI. Required by any system using extended context for ActivityPub actors.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Emoji\": \"http://joinmastodon.org/ns#Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Actor Type Imports for Federation Module\nDESCRIPTION: Imports actor-related types and functions for federation handling.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Accept,\n  Endpoints,\n  Follow,\n  Note,\n  PUBLIC_COLLECTION,\n  Person,\n  Undo,\n  createFederation,\n  exportJwk,\n  generateCryptoKeyPair,\n  getActorHandle,\n  importJwk,\n  isActor,\n  type Actor as APActor,\n  type Recipient,\n} from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Adding Default JSON-LD Context to Undo Class\nDESCRIPTION: This JSON object defines default context mappings added to the `Undo` class in Fedify version 1.1.21. It includes namespaces for 'litepub' (http://litepub.social/ns#) and 'toot' (http://joinmastodon.org/ns#), and defines 'EmojiReact' and 'Emoji' types using these namespaces. This enhances interoperability by providing standard definitions for these terms within the context of an `Undo` activity, particularly relevant for interactions with implementations like Mastodon and LitePub.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"litepub\": \"http://litepub.social/ns#\",\n  \"toot\": \"http://joinmastodon.org/ns#\",\n  \"EmojiReact\": \"litepub:EmojiReact\",\n  \"Emoji\": \"toot:Emoji\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing fedify using npm (Node.js)\nDESCRIPTION: Command to install the fedify CLI globally using npm package manager for Node.js.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @fedify/cli\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Fedify project\nDESCRIPTION: Command to initialize a new Fedify project using the fedify CLI, which starts an interactive setup process.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/cli.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfedify init my-fedify-project\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Integrity Proofs in TypeScript\nDESCRIPTION: New functions added for creating and verifying Object Integrity Proofs, which are now used in activity sending and verification processes when Ed25519 key pairs are available.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CHANGES.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nsignObject()\nverifyObject()\ncreateProof()\nverifyProof()\n```\n\n----------------------------------------\n\nTITLE: Starting Fedify-Next.js Server with Tunnel\nDESCRIPTION: Command to start the development server and create a tunnel for external access using the Fedify CLI.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/next14-app-router/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev & npx @fedify/cli tunnel 3000\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Shell)\nDESCRIPTION: These shell commands are used to install the necessary Node.js project dependencies. It first optionally sets the Node version using Node Version Manager (nvm) and then installs dependencies defined in package.json using npm.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/examples/express/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# optional\nnvm use\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno Temporal API\nDESCRIPTION: JSON configuration for enabling the required Temporal API feature in Deno.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/install.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"@fedify/fedify\": \"jsr:@fedify/fedify\"\n  },\n  \"unstable\": [\"temporal\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Activity Vocabulary Object with Alias in TypeScript\nDESCRIPTION: Demonstrates how to import an Activity Vocabulary object with an alias to avoid conflicts with built-in JavaScript classes.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/manual/vocab.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Object as ASObject } from \"@fedify/fedify\";\n```\n\n----------------------------------------\n\nTITLE: Installing stringify-entities Package\nDESCRIPTION: Installs the stringify-entities package via npm, which is used to convert special characters to HTML entities when posting content.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/tutorial/microblog.md#2025-04-23_snippet_93\n\nLANGUAGE: sh\nCODE:\n```\nnpm add stringify-entities\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Fedify Docs Development Server with Bun\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the Fedify documentation. They should be run in the docs/ directory after installing Bun.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Building Fedify Project in Bash\nDESCRIPTION: Commands to set up the development environment and generate code for the Fedify project using Deno.\nSOURCE: https://github.com/fedify-dev/fedify/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno task codegen\ncode .\n```"
  }
]