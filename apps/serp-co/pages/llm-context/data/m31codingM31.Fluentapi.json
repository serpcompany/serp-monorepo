[
  {
    "owner": "m31coding",
    "repo": "m31.fluentapi",
    "content": "TITLE: Fluent API Builder Class Definition in C#\nDESCRIPTION: This code defines the `CreateStudent` class, which implements the fluent API for creating `Student` objects. It includes interfaces (`ICreateStudent`, `IWithName`, `IBornOn`) to define the builder's steps and enforce the order of property assignments. The class also provides methods for setting nullable `Name` and `DateOfBirth` properties.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string? name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    public static IBornOn WhoseNameIsUnknown()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = null;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string? name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IBornOn IWithName.WhoseNameIsUnknown()\n    {\n        student.Name = null;\n        return this;\n    }\n\n    Student IBornOn.BornOn(System.DateOnly? dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return student;\n    }\n\n    Student IBornOn.WithoutDateOfBirth()\n    {\n        student.DateOfBirth = null;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string? name);\n\n        IBornOn WhoseNameIsUnknown();\n    }\n\n    public interface IBornOn\n    {\n        Student BornOn(System.DateOnly? dateOfBirth);\n\n        Student WithoutDateOfBirth();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fluent API Builder - C#\nDESCRIPTION: This code snippet shows the initial setup and static factory methods for creating the 'CreateStudent' fluent API builder. It includes the private constructor, the 'InitialStep' method to start the fluent API and static methods to initialize with specific properties.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableForkMembersClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMember1AWithMember1B WithMember0(string? member0)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member0 = member0;\n        return createStudent;\n    }\n\n    public static IWithMember2 WithMember1A(string? member1A)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1A = member1A;\n        return createStudent;\n    }\n\n    public static IWithMember0 WithMember1B(string? member1B)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1B = member1B;\n        return createStudent;\n    }\n\n    public static Student WithMember2(string? member2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member2 = member2;\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Builder Class Definition (C#)\nDESCRIPTION: Defines the `CreateStudent` class which implements multiple interfaces (ICreateStudent, IWithName, IBornOn, IInSemester) to enforce the fluent API pattern. It uses a private `Student` instance to accumulate the properties and a series of methods to set them in a specific order.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.WithName(name);\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.WithName(name);\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly date)\n    {\n        student.BornOn(date);\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.InSemester(semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly date);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class\nDESCRIPTION: This class defines the fluent API for creating a 'Student' object. It implements the nested interfaces 'ICreateStudent' and 'IInSemester' to guide the user through the creation process. The private constructor and static methods enforce the required steps.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PublicFieldClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Semester = semester;\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Class C#\nDESCRIPTION: This snippet shows the class definition and the private constructor along with the `InitialStep` method that starts the fluent creation of a `Student` object. The class implements interfaces that define the different steps to create a student, starting from `ICreateStudent`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCompoundClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithDetails\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting No Friends C#\nDESCRIPTION: This code sets the student's friends to an empty list. It creates a new `List<string>` with a capacity of 0 and assigns it to the `student.Friends` property. It returns `IWithPets` to enable method chaining for setting other properties.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoHasNoFriends()\n{\n    student.Friends = new List<string>(0);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class\nDESCRIPTION: Defines the `CreateStudent` class, which implements a fluent interface for creating and configuring a `Student` object. It uses nested interfaces `ICreateStudent` and `IInSemester` to chain method calls. The `InitialStep` method starts the fluent creation process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/OneMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Semester = semester;\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Fluent API Builder in C#\nDESCRIPTION: This code initializes the fluent API builder for the `Student` class. It defines the `CreateStudent` class with nested interfaces for step-by-step object construction. The `InitialStep` method creates an instance of the builder, and the `WithName` method sets the student's name.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCollectionClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithAddresses\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithAddresses WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Class Definition in C#\nDESCRIPTION: Defines the `CreateStudent` class, which implements the fluent API interfaces `ICreateStudent`, `IWithName`, and `IBornOn`.  It includes private fields, constructors, and methods to build a `Student` object step by step. The `Student` instance is built internally and exposed when the final method is called in the chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentDefaultMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    public static IBornOn WithUnknownName()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IBornOn IWithName.WithUnknownName()\n    {\n        return this;\n    }\n\n    Student IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return student;\n    }\n\n    Student IBornOn.WithDefaultDateOfBirth()\n    {\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n\n        IBornOn WithUnknownName();\n    }\n\n    public interface IBornOn\n    {\n        Student BornOn(System.DateOnly dateOfBirth);\n\n        Student WithDefaultDateOfBirth();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class Definition in C#\nDESCRIPTION: This code defines the `CreateStudent` class, which implements the fluent API interfaces (`ICreateStudent`, `IWithName`, `IWithDetails`). It encapsulates the creation and population of a `Student` object. The class includes methods for initializing the fluent API (`InitialStep`), setting the student's name, and adding address details using either direct `Address` objects or functions that leverage a nested `CreateAddress` fluent builder.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCompoundOfSameTypeClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithDetails\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithDetails WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IWithDetails IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    Student IWithDetails.WithDetails(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address address1, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address address2)\n    {\n        student.Address1 = address1;\n        student.Address2 = address2;\n        return student;\n    }\n\n    Student IWithDetails.WithDetails(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address> createAddress1, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address> createAddress2)\n    {\n        student.Address1 = createAddress1(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.CreateAddress.InitialStep());\n        student.Address2 = createAddress2(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.CreateAddress.InitialStep());\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IWithDetails WithName(string name);\n    }\n\n    public interface IWithDetails\n    {\n        Student WithDetails(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address address1, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address address2);\n\n        Student WithDetails(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address> createAddress1, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundOfSameTypeClass.Address> createAddress2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class - C#\nDESCRIPTION: Defines the `CreateStudent` class, which implements the fluent API for creating `Student` objects. It includes interfaces (`ICreateStudent`, `IWithName`, `IWithAddress`) that enforce a specific order for setting the `Name` and `Address` properties. The `WithAddress` method supports both direct assignment of an `Address` object and a lambda expression to create the `Address` using another fluent builder.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithAddress\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithAddress WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IWithAddress IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    Student IWithAddress.WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.Address address)\n    {\n        student.Address = address;\n        return student;\n    }\n\n    Student IWithAddress.WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.Address> createAddress)\n    {\n        student.Address = createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.CreateAddress.InitialStep());\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IWithAddress WithName(string name);\n    }\n\n    public interface IWithAddress\n    {\n        Student WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.Address address);\n\n        Student WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaClass.Address> createAddress);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Builder (C#)\nDESCRIPTION: Defines the `CreateStudent` class, which implements the fluent API for creating `Student` objects. It uses interfaces `ICreateStudent`, `IWithName`, `IBornOn`, and `IInSemester` to enforce a specific order of method calls when constructing a `Student` instance. The `InitialStep()` method starts the fluent API, while `WithName()` provides an alternative starting point.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InternalClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ninternal class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    internal static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    internal interface ICreateStudent : IWithName\n    {\n    }\n\n    internal interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    internal interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    internal interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Definition C#\nDESCRIPTION: Defines the `CreateStudent` class with a fluent API for creating `Student` objects. It enforces a specific order of method calls using nested interfaces (`ICreateStudent`, `IWithName`, `IBornOn`, `IInSemester`). The `InitialStep` method is the starting point for the fluent API, and subsequent methods set the `Name`, `DateOfBirth`, and `Semester` properties of the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Class Definition in C#\nDESCRIPTION: This snippet defines the 'CreateStudent' class, which implements the fluent API for creating a 'Student' object. It contains static factory methods 'InitialStep', 'OfAge', and 'BornOn' to start the fluent interface. The class implements the interfaces 'ICreateStudent' and 'IOfAgeBornOn' to provide the methods for setting the student's properties.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ForkClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IOfAgeBornOn\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student OfAge(int age)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Age = age;\n        return createStudent.student;\n    }\n\n    public static Student BornOn(System.DateOnly dateOfBirth)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.DateOfBirth = dateOfBirth;\n        return createStudent.student;\n    }\n\n    Student IOfAgeBornOn.OfAge(int age)\n    {\n        student.Age = age;\n        return student;\n    }\n\n    Student IOfAgeBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return student;\n    }\n\n    public interface ICreateStudent : IOfAgeBornOn\n    {\n    }\n\n    public interface IOfAgeBornOn\n    {\n        Student OfAge(int age);\n\n        Student BornOn(System.DateOnly dateOfBirth);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Class using Fluent API in C#\nDESCRIPTION: This snippet demonstrates the implementation of a fluent API for creating a Student object. It uses interfaces and a class to ensure the correct sequence of method calls for object creation, specifically setting the first and last names.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoParameterCompoundClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TwoParameterCompoundClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WithName(string firstName, string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.FirstName = firstName;\n        createStudent.student.LastName = lastName;\n        return createStudent.student;\n    }\n\n    Student IWithName.WithName(string firstName, string lastName)\n    {\n        student.FirstName = firstName;\n        student.LastName = lastName;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        Student WithName(string firstName, string lastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Fluent API (C#)\nDESCRIPTION: Defines the `InitialStep` method to start the fluent API. This static method returns an instance of the `CreateStudent` class, allowing the fluent chain to begin. The `WithName` static method creates an instance and sets the name.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n        return createStudent;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent and Setting Semester\nDESCRIPTION: This snippet shows the creation of the CreateStudent class, the retrieval of the private '_semester' field from the Student class using reflection, and the use of the fluent API to set the semester value. The static constructor initializes the FieldInfo, and the InSemester method uses reflection to set the semester.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateUnderscoreFieldClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly FieldInfo semesterFieldInfo;\n\n    static CreateStudent()\n    {\n        semesterFieldInfo = typeof(Student).GetField(\"_semester\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.semesterFieldInfo.SetValue(createStudent.student, semester);\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterFieldInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CreateStudent class (C#)\nDESCRIPTION: Defines the `CreateStudent` class that implements the fluent API interfaces. It initializes a `Student` object and a `PropertyInfo` for the `Name` property. The constructor is private, enforcing the use of the fluent API for object creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter\n{\n    private readonly Student student;\n    private static readonly PropertyInfo namePropertyInfo;\n\n    static CreateStudent()\n    {\n        namePropertyInfo = typeof(Student).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: FluentMember Attribute Definition\nDESCRIPTION: This C# snippet shows the signature of the `FluentMember` attribute, used to decorate fields and properties of a class to include them in the generated fluent API.  The parameters control the builder step, method name, and parameter position for compound methods.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nFluentMember(int builderStep, string method = \"With{Name}\", int parameterPosition = 0)\n```\n\n----------------------------------------\n\nTITLE: Fluent API Usage Example\nDESCRIPTION: This C# code snippet demonstrates how to use the generated fluent API to create instances of a class, both by directly accessing the `CreateStudent` class and by using the `InitialStep` method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nStudent alice = CreateStudent.WithFirstName(\"Alice\")...\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\nICreateStudent createStudent = CreateStudent.InitialStep();\nStudent alice = createStudent.WithFirstName(\"Alice\")...\n```\n\n----------------------------------------\n\nTITLE: Fluent API Builder Class Definition in C#\nDESCRIPTION: This code defines the `CreateStudent` class, which implements multiple interfaces to create a fluent API for building a `Student` object.  It includes interfaces for each step in the building process (`ICreateStudent`, `IWithMember1`, `IWithMember2AWithMember2B`, `IWithMember3`, `IWithMember4`). The `student` field holds the instance being built.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithInForkClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithMember1,\n    CreateStudent.IWithMember2AWithMember2B,\n    CreateStudent.IWithMember3,\n    CreateStudent.IWithMember4\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMember2AWithMember2B WithMember1(string member1)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1 = member1;\n        return createStudent;\n    }\n\n    IWithMember2AWithMember2B IWithMember1.WithMember1(string member1)\n    {\n        student.Member1 = member1;\n        return this;\n    }\n\n    IWithMember3 IWithMember2AWithMember2B.WithMember2A(string? member2A)\n    {\n        student.Member2A = member2A;\n        return this;\n    }\n\n    IWithMember4 IWithMember2AWithMember2B.WithMember2B(string? member2B)\n    {\n        student.Member2B = member2B;\n        return this;\n    }\n\n    IWithMember4 IWithMember3.WithMember3(string? member3)\n    {\n        student.Member3 = member3;\n        return this;\n    }\n\n    Student IWithMember4.WithMember4(string member4)\n    {\n        student.Member4 = member4;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithMember1\n    {\n    }\n\n    public interface IWithMember1\n    {\n        IWithMember2AWithMember2B WithMember1(string member1);\n    }\n\n    public interface IWithMember2AWithMember2B\n    {\n        IWithMember3 WithMember2A(string? member2A);\n\n        IWithMember4 WithMember2B(string? member2B);\n    }\n\n    public interface IWithMember3\n    {\n        IWithMember4 WithMember3(string? member3);\n    }\n\n    public interface IWithMember4\n    {\n        Student WithMember4(string member4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FluentApi Attribute Definition\nDESCRIPTION: This C# snippet shows the signature of the `FluentApi` attribute, which is used to decorate classes, structs, or records to enable fluent API generation. The `builderClassName` parameter allows specifying the name of the generated builder class.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nFluentApi(string builderClassName = \"Create{Name}\")\n```\n\n----------------------------------------\n\nTITLE: FluentReturn Attribute Usage C#\nDESCRIPTION: Demonstrates how to use the `FluentReturn` attribute to allow the builder to respect the return value of the decorated method.  This enables the return of arbitrary types and values within the generated API.  If a void method is decorated, the builder method will also return void.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMethod(1)]\n[FluentReturn]\npublic string ToJson()\n{\n    return JsonSerializer.Serialize(this);\n}\n```\n\nLANGUAGE: cs\nCODE:\n```\nstring serialized = ...ToJson();\n```\n\n----------------------------------------\n\nTITLE: FluentCollection with nested Fluent API\nDESCRIPTION: This C# snippet demonstrates the usage of `FluentCollection` attribute on a collection of items (Addresses) that themselves have a Fluent API. This will create lambda methods for adding multiple addresses or a single address by using the Address Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentCollection(1, \"Address\")]\npublic IReadOnlyCollection<Address> Addresses { get; private set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n...WithAddresses(\n    a => a.WithHouseNumber(\"108\").WithStreet(\"5th Avenue\").InCity(\"New York\"),\n    a => a.WithHouseNumber(\"42\").WithStreet(\"Maple Ave\").InCity(\"Boston\"))...\n...WithAddress(a => a.WithHouseNumber(\"82\").WithStreet(\"Friedrichstraße\").InCity(\"Berlin\"))...\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces in C#\nDESCRIPTION: This snippet defines the interfaces ICreateStudent and IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter which define the steps in the Fluent API. They are used to allow method chaining and provide intellisense.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter\n    {\n    }\n\n    public interface IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter\n    {\n        void ReturnVoidMethod();\n\n        int ReturnIntMethod();\n\n        System.Collections.Generic.List<int> ReturnListMethod();\n\n        int ReturnIntMethodWithRefParameter(ref string s);\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class in C#\nDESCRIPTION: This class `CreateStudent` implements a fluent API for creating `Student` objects. It uses interfaces `ICreateStudent` and `IInSemester` to define the steps. The initial constructor is private, and the `Student` instance is created using `Activator.CreateInstance` to bypass the private constructor.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateConstructorClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = (Student) Activator.CreateInstance(typeof(Student), true)!;\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Semester = semester;\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Friends Using Params Array in C#\nDESCRIPTION: This snippet demonstrates setting the `Friends` property using a `params string[]`. It takes a variable number of friend names as input, creates a new `List<string>` from the array, assigns it to `student.Friends`, and returns an object implementing `IWithPets` for further configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)\n    {\n        student.Friends = new List<string>(friends);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the CreateStudent Class with Generic Type Constraints in C#\nDESCRIPTION: This snippet defines the `CreateStudent` class with nine generic type parameters (T1 to T9) and corresponding constraints. These constraints enforce specific type requirements such as `class`, `struct`, `notnull`, `new()`, `unmanaged`, and specific interface implementations. The class implements interfaces to represent each step in the fluent builder.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithConstraints/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9> :\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.ICreateStudent,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty1,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty2,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty3,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty4,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty5,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty6,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty7,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty8,\n    CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>.IWithProperty9\n    where T1 : class\n    where T2 : class?\n    where T3 : struct\n    where T4 : notnull\n    where T5 : new()\n    where T6 : unmanaged\n    where T7 : System.Collections.Generic.List<int>, System.Collections.Generic.IDictionary<int, string>\n    where T8 : class, System.Collections.Generic.IDictionary<int, string>\n    where T9 : System.Collections.Generic.List<int>, new()\n{\n    private readonly Student<T1, T2, T3, T4, T5, T6, T7, T8, T9> student;\n\n    private CreateStudent()\n    {\n        student = new Student<T1, T2, T3, T4, T5, T6, T7, T8, T9>();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces for Student Builder in C#\nDESCRIPTION: This code defines the interfaces used in the `CreateStudent` fluent API builder. `ICreateStudent` represents the initial step, `IWithName` allows setting the student's name, and `IWithAddresses` allows setting the student's addresses using various options. The interfaces enforce the order of operations in building the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCollectionClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IWithAddresses WithName(string name);\n    }\n\n    public interface IWithAddresses\n    {\n        Student WithAddresses(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address> addresses);\n\n        Student WithAddresses(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address[] addresses);\n\n        Student WithAddresses(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>[] createAddresses);\n\n        Student WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address address);\n\n        Student WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address> createAddress);\n\n        Student WithZeroAddresses();\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces (C#)\nDESCRIPTION: Defines the interfaces used in the fluent API: `ICreateStudent`, `IWithName`, and `IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter`. These interfaces define the sequence of method calls and return types, ensuring a structured approach to creating the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter WithName(string name);\n    }\n\n    public interface IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter\n    {\n        void ReturnVoidMethod();\n\n        int ReturnIntMethod();\n\n        System.Collections.Generic.List<int> ReturnListMethod();\n\n        int ReturnIntMethodWithRefParameter(ref string s);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent with Name (C#)\nDESCRIPTION: The `WithName` method creates a new `CreateStudent` instance and sets the `Name` property of the underlying `Student` object using reflection. It returns an instance of the builder that allows chaining further configurations.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backpack Content Using Params Array in C#\nDESCRIPTION: This snippet demonstrates setting the `BackpackContent` property using a `params string[]`. It creates a `HashSet<string>` from the input array and assigns it to the `student.BackpackContent` property before returning the configured `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(params string[] backpackContent)\n    {\n        student.BackpackContent = new HashSet<string>(backpackContent);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Fluent API (C#)\nDESCRIPTION: This snippet shows the initialization and initial step of the CreateStudent fluent API builder. It returns an instance of the ICreateStudent interface which exposes the methods to build the object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Fluent API Class Definition in C#\nDESCRIPTION: This code defines the `CreateStudent` class, implementing interfaces to create a fluent API for building `Student` objects. The builder allows setting the name and address. The address can be set directly, created with a nested builder (`CreateAddress`), or set to null using `WithoutAddress()`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaNullablePropertyClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithAddress\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithAddress WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IWithAddress IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    Student IWithAddress.WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.Address? address)\n    {\n        student.Address = address;\n        return student;\n    }\n\n    Student IWithAddress.WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.Address?> createAddress)\n    {\n        student.Address = createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.CreateAddress.InitialStep());\n        return student;\n    }\n\n    Student IWithAddress.WithoutAddress()\n    {\n        student.Address = null;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IWithAddress WithName(string name);\n    }\n\n    public interface IWithAddress\n    {\n        Student WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.Address? address);\n\n        Student WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaNullablePropertyClass.Address?> createAddress);\n\n        Student WithoutAddress();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodInfo for Reflection (C#)\nDESCRIPTION: This code snippet initializes static MethodInfo objects using reflection to access private methods of the Student class. It retrieves MethodInfo for different overloads of the 'Method1' method, including those with generic parameters and ref/out parameters.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedPrivateMethodClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        method1MethodInfo = typeof(Student).GetMethod(\n            \"Method1\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int), typeof(string) },\n            null)!;\n        method1MethodInfo2 = typeof(Student).GetMethod(\n            \"Method1\",\n            1,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int), typeof(string) },\n            null)!;\n        method1MethodInfo3 = typeof(Student).GetMethod(\n            \"Method1\",\n            1,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { Type.MakeGenericMethodParameter(0), typeof(string) },\n            null)!;\n        method1MethodInfo4 = typeof(Student).GetMethod(\n            \"Method1\",\n            2,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { Type.MakeGenericMethodParameter(1), typeof(string) },\n            null)!;\n        method1MethodInfo5 = typeof(Student).GetMethod(\n            \"Method1\",\n            2,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { Type.MakeGenericMethodParameter(1), typeof(string).MakeByRefType() },\n            null)!;\n        method1MethodInfo6 = typeof(Student).GetMethod(\n            \"Method1\",\n            2,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { Type.MakeGenericMethodParameter(1).MakeByRefType(), typeof(string) },\n            null)!;\n        method1MethodInfo7 = typeof(Student).GetMethod(\n            \"Method1\",\n            2,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { Type.MakeGenericMethodParameter(1).MakeByRefType(), typeof(string).MakeByRefType() },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Builder - C#\nDESCRIPTION: This code defines a fluent API builder class, `CreateStudent`, for creating instances of the `Student` class. It enforces a specific order for setting the `Name`, `DateOfBirth`, and `Semester` properties.  The builder provides a fluent interface through a set of nested interfaces. The auto-generated code uses interfaces to ensure properties are set in the correct sequence.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecord/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nusing System;\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.ThreeMemberRecord;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Step Fluent API C#\nDESCRIPTION: This method represents the initial step in the fluent API. It creates a new instance of the CreateStudent class and returns it as an ICreateStudent interface, which is the starting point for building the Student object. It hides the constructor to enforce using the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Student's Name (WithName)\nDESCRIPTION: The `WithName` methods (both static and interface implementation) set the `name` property of the `Student` object using reflection. The static method creates a new `CreateStudent` instance, while the interface implementation modifies the existing instance. Both methods return an `IBornOn` instance to proceed to the next step.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordPrimaryConstructor/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n    return createStudent;\n}\n\nIBornOn IWithName.WithName(string name)\n{\n    CreateStudent.namePropertyInfo.SetValue(student, name);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backpack Content Using HashSet in C#\nDESCRIPTION: This snippet sets the `BackpackContent` property of the `Student` object using a `HashSet<string>`. It takes a HashSet of strings representing backpack content, assigns it to the student's `BackpackContent` property, and returns the fully configured `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(System.Collections.Generic.HashSet<string> backpackContent)\n    {\n        student.BackpackContent = backpackContent;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces (C#)\nDESCRIPTION: These interfaces define the contract for the fluent API, ensuring that the properties are set in the correct order. Each interface represents a step in the object creation process, enforcing a specific method sequence.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedRecord/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n```\n\n----------------------------------------\n\nTITLE: InitialStep Method (C#)\nDESCRIPTION: The `InitialStep` method provides the starting point for the fluent API. It creates a new instance of the `CreateStudent` class and returns it as an `ICreateStudent` interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoMemberClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pets using IReadOnlyCollection C#\nDESCRIPTION: This code snippet shows how to set the pets of a student using an `IReadOnlyCollection<string>`. It directly assigns the provided collection to the `student.Pets` property. The method returns `IWithBackpackContent` to allow setting the backpack content next.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPets(System.Collections.Generic.IReadOnlyCollection<string> pets)\n{\n    student.Pets = pets;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FluentApi record with attributes in C#\nDESCRIPTION: This code defines a C# record `Student` and uses `FluentApi` attribute to mark it for fluent API generation. The `Semester` property is annotated with `FluentMember(0)` which specifies the order in which this property appears in the generated fluent API. The project depends on the `M31.FluentApi` package.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/GetMissingSetRecord/Student.fixed.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// ReSharper disable All\n\nusing M31.FluentApi.Attributes;\n\nnamespace M31.FluentApi.Tests.AnalyzerAndCodeFixes.TestClasses.GetMissingSetRecord;\n\n[FluentApi]\npublic record Student\n{\n    [FluentMember(0)]\n    int Semester { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesD with Lambda Creation C#\nDESCRIPTION: This snippet demonstrates setting the AddressesD property of a Student object by using lambda expressions to create Address objects. It takes an array of Func delegates which when executed with an initial step, returns an Address object. These Address objects are then used to initialize the Student's AddressesD property which is a HashSet. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesD(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesD)\n    {\n        student.AddressesD = new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(createAddressesD.Select(createAddressD => createAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())));\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Name using WithName Interface Implementation - C#\nDESCRIPTION: This code snippet illustrates the implementation of the `IWithName` interface within the `CreateStudent` class. The `WithName` method sets the student's name by calling the `SetNameFromFirstNameAndLastName` method on the underlying `student` object. It then returns the `IWhoIsHappy` interface for chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CustomFluentMethodNameClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIWhoIsHappy IWithName.WithName(string firstName, string lastName)\n{\n    student.SetNameFromFirstNameAndLastName(firstName, lastName);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Class Definition for Student Creation in C#\nDESCRIPTION: Defines the CreateStudent class which implements a fluent interface for creating Student objects. It provides static methods to start the creation process and methods to set each member of the Student class. The interfaces enforce a specific order of member assignments.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableLoopClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithMember1,\n    CreateStudent.IWithMember2,\n    CreateStudent.IWithMember3WithMember4,\n    CreateStudent.IWithMember1WithMember2WithMember3WithMember4\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMember2 WithMember1(string? member1)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1 = member1;\n        return createStudent;\n    }\n\n    public static IWithMember3WithMember4 WithMember2(string? member2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member2 = member2;\n        return createStudent;\n    }\n\n    public static IWithMember1 WithMember3(string? member3)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member3 = member3;\n        return createStudent;\n    }\n\n    public static Student WithMember4(string member4)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member4 = member4;\n        return createStudent.student;\n    }\n\n    IWithMember2 IWithMember1WithMember2WithMember3WithMember4.WithMember1(string? member1)\n    {\n        student.Member1 = member1;\n        return this;\n    }\n\n    IWithMember3WithMember4 IWithMember1WithMember2WithMember3WithMember4.WithMember2(string? member2)\n    {\n        student.Member2 = member2;\n        return this;\n    }\n\n    IWithMember1 IWithMember1WithMember2WithMember3WithMember4.WithMember3(string? member3)\n    {\n        student.Member3 = member3;\n        return this;\n    }\n\n    Student IWithMember1WithMember2WithMember3WithMember4.WithMember4(string member4)\n    {\n        student.Member4 = member4;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithMember1\n    {\n    }\n\n    public interface IWithMember1 : IWithMember1WithMember2WithMember3WithMember4\n    {\n    }\n\n    public interface IWithMember2 : IWithMember1WithMember2WithMember3WithMember4\n    {\n    }\n\n    public interface IWithMember3WithMember4 : IWithMember1WithMember2WithMember3WithMember4\n    {\n    }\n\n    public interface IWithMember1WithMember2WithMember3WithMember4\n    {\n        IWithMember2 WithMember1(string? member1);\n\n        IWithMember3WithMember4 WithMember2(string? member2);\n\n        IWithMember1 WithMember3(string? member3);\n\n        Student WithMember4(string member4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WithFirstName Method C#\nDESCRIPTION: This method allows setting the FirstName property of the Student object. It takes a string firstName as input, sets the property using the firstNamePropertyInfo, and returns an IWithMiddleNameWithLastName interface, allowing the user to proceed to set the MiddleName and LastName.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithMiddleNameWithLastName WithFirstName(string firstName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.firstNamePropertyInfo.SetValue(createStudent.student, firstName);\n        return createStudent;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Friend in C#\nDESCRIPTION: This snippet shows how to set the `Friends` property with a single friend. It creates a new `List<string>` containing only the provided friend's name, assigns it to `student.Friends`, and returns an object implementing `IWithPets` for further method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoseFriendIs(string friend)\n    {\n        student.Friends = new List<string>(1){ friend };\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using IEnumerable\nDESCRIPTION: This snippet defines a method for setting the 'Friends' property of the Student object using an IEnumerable collection. It creates a new CreateStudent instance, assigns the provided friends, and returns the IWithPets interface to continue building the object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithPets WhoseFriendsAre(System.Collections.IEnumerable friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = friends;\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student using Fluent API in C#\nDESCRIPTION: This snippet demonstrates the creation of a `Student` object using a fluent API. It shows how to initialize properties such as name, date of birth, and semester through method chaining. The fluent API enforces a specific order for setting these properties, guided by interfaces like `ICreateStudent`, `IWithName`, `IBornOn`, and `IInSemester`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreePrivateMembersClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly PropertyInfo namePropertyInfo;\n    private static readonly PropertyInfo dateOfBirthPropertyInfo;\n    private static readonly PropertyInfo semesterPropertyInfo;\n\n    static CreateStudent()\n    {\n        namePropertyInfo = typeof(Student).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n        dateOfBirthPropertyInfo = typeof(Student).GetProperty(\"DateOfBirth\", BindingFlags.Instance | BindingFlags.Public)!;\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        CreateStudent.namePropertyInfo.SetValue(student, name);\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        CreateStudent.dateOfBirthPropertyInfo.SetValue(student, dateOfBirth);\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Student Name with Fluent API\nDESCRIPTION: This snippet demonstrates how to set the `Name` property of the `Student` object using the fluent API. The `WithName` method either initializes the student and sets the name or sets the name on the existing object. Returns the next step of the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Name = name;\n    return createStudent;\n}\n\nIWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG IWithName.WithName(string name)\n{\n    student.Name = name;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface ICreateStudent\nDESCRIPTION: This interface defines the initial step of the fluent API for creating a Student object. It extends the IMethod1Method1Method1Method1Method1Method1Method1 interface, providing access to the available methods in the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IMethod1Method1Method1Method1Method1Method1Method1\n{\n}\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Class Definition (C#)\nDESCRIPTION: Defines the `CreateStudent` class which implements the fluent API interfaces `ICreateStudent`, `IWithName`, and `IBornOn`. It encapsulates the construction of a `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    Student IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        Student BornOn(System.DateOnly dateOfBirth);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Fluent API Builder Class\nDESCRIPTION: This code defines the `CreateStudent` class, which implements the fluent API builder pattern for creating `Student` objects. It utilizes nested interfaces (`ICreateStudent`, `IWithName`, `IBornOn`, `IInSemester`) to enforce a specific order for setting the properties of the `Student` object. The `InitialStep()` method provides the starting point for the fluent API, and each interface method returns the next interface in the chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordStruct/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Private Constructor and Activator Usage in C#\nDESCRIPTION: This snippet shows how the `CreateStudent` class uses a private constructor and `Activator.CreateInstance` to create an instance of the `Student` class. The `Activator.CreateInstance` method is used with the `true` parameter to invoke the private constructor. This is used to enforce the use of the Fluent API for object creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateConstructorClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate CreateStudent()\n{\n    student = (Student) Activator.CreateInstance(typeof(Student), true)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Student Addresses using Fluent API in C#\nDESCRIPTION: This code snippet demonstrates how to set the addresses of a `Student` object using the fluent API.  It provides several `WithAddresses` methods accepting different types of address inputs: a list of `Address` objects, a params array of `Address` objects, a params array of functions that create `Address` objects using the `CreateAddress` fluent API builder, a single `Address` object, a single function that creates an `Address` object, and a method to set an empty list of addresses.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCollectionClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    Student IWithAddresses.WithAddresses(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address> addresses)\n    {\n        student.Addresses = addresses;\n        return student;\n    }\n\n    Student IWithAddresses.WithAddresses(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address[] addresses)\n    {\n        student.Addresses = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>(addresses);\n        return student;\n    }\n\n    Student IWithAddresses.WithAddresses(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>[] createAddresses)\n    {\n        student.Addresses = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>(createAddresses.Select(createAddress => createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.CreateAddress.InitialStep())));\n        return student;\n    }\n\n    Student IWithAddresses.WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address address)\n    {\n        student.Addresses = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>(1){ address };\n        return student;\n    }\n\n    Student IWithAddresses.WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address> createAddress)\n    {\n        student.Addresses = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>(1){ createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.CreateAddress.InitialStep()) };\n        return student;\n    }\n\n    Student IWithAddresses.WithZeroAddresses()\n    {\n        student.Addresses = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass.Address>(0);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesE with Address Collection C#\nDESCRIPTION: This snippet shows how to set the AddressesE property of a Student object using a provided array of Address objects. It assigns the given addresses to the Student's AddressesE property. This method is part of a Fluent API, so it returns the modified Student object for chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesE(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[]? addressesE)\n    {\n        student.AddressesE = addressesE;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interface Definition (C#)\nDESCRIPTION: This interface defines the contract for the fluent API, exposing methods for creating a student object with varying parameters. It serves as a template that dictates the implementation of all the fluent API method signatures.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedPrivateMethodClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMethod1Method1Method1Method1Method1Method1Method1\n    {\n        Student Method1(int p1, string p2);\n\n        Student Method1<T>(int p1, string p2);\n\n        Student Method1<T>(T p1, string p2);\n\n        Student Method1<S, T>(T p1, string p2);\n\n        Student Method1<S, T>(T p1, out string p2);\n\n        Student Method1<S, T>(in T p1, string p2);\n\n        Student Method1<S, T>(in T p1, ref string p2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class\nDESCRIPTION: This code defines a fluent API for creating `Student` objects. It includes the `CreateStudent` class, which implements interfaces (`ICreateStudent`, `IWithName`) to guide the user through the process of setting the first and last names using a fluent interface. The `InitialStep` method starts the fluent creation, while `WithName` sets the first and last names.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoParameterCompoundClassReversedParameters/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WithName(string lastName, string firstName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.LastName = lastName;\n        createStudent.student.FirstName = firstName;\n        return createStudent.student;\n    }\n\n    Student IWithName.WithName(string lastName, string firstName)\n    {\n        student.LastName = lastName;\n        student.FirstName = firstName;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        Student WithName(string lastName, string firstName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Fields for MethodInfo using Reflection in C#\nDESCRIPTION: This static constructor initializes the MethodInfo objects for private methods of the Student class using reflection.  These MethodInfo objects are then used later to invoke the methods on the Student instance during the fluent API calls. BindingFlags are used to access non-public instance methods.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        withNameMethodInfo = typeof(Student).GetMethod(\n            \"WithName\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n        bornOnMethodInfo = typeof(Student).GetMethod(\n            \"BornOn\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(System.DateOnly) },\n            null)!;\n        inSemesterMethodInfo = typeof(Student).GetMethod(\n            \"InSemester\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int) },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student with Fluent API (C#)\nDESCRIPTION: This code defines a fluent API for creating a Student object. It utilizes interfaces and chained method calls to provide a smooth and readable way to configure the student's properties, specifically the address. It demonstrates the use of lambda expressions to create nested objects like the address.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaSingleStepClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nusing System;\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithAddress\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.Address address)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Address = address;\n        return createStudent.student;\n    }\n\n    public static Student WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.Address> createAddress)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Address = createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.CreateAddress.InitialStep());\n        return createStudent.student;\n    }\n\n    Student IWithAddress.WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.Address address)\n    {\n        student.Address = address;\n        return student;\n    }\n\n    Student IWithAddress.WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.Address> createAddress)\n    {\n        student.Address = createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.CreateAddress.InitialStep());\n        return student;\n    }\n\n    public interface ICreateStudent : IWithAddress\n    {\n    }\n\n    public interface IWithAddress\n    {\n        Student WithAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.Address address);\n\n        Student WithAddress(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaSingleStepClass.Address> createAddress);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Chaining for Named in C#\nDESCRIPTION: This code snippet demonstrates the Fluent API's method chaining for setting the `FirstName` and `LastName` of a `Student` object. It uses `PropertyInfo.SetValue` to set the properties through reflection. The method returns `this` to enable chaining with subsequent methods in the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIOfAgeBornOn INamed.Named(string firstName, string lastName)\n    {\n        CreateStudent.firstNamePropertyInfo.SetValue(student, firstName);\n        CreateStudent.lastNamePropertyInfo.SetValue(student, lastName);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Class with Fluent API - C#\nDESCRIPTION: This snippet demonstrates the initialization of the `CreateStudent` class and its associated fluent API interfaces. It showcases the initial `InitialStep()` method and the `WithName()` method which returns the next interface in the chain. It establishes the base for creating a `Student` object using the fluent API pattern.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CustomFluentMethodNameClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWhoIsHappy,\n    CreateStudent.IInSemester,\n    CreateStudent.IWhoseFriendsAre\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWhoIsHappy WithName(string firstName, string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.SetNameFromFirstNameAndLastName(firstName, lastName);\n        return createStudent;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Student Details (Address and Phone) C#\nDESCRIPTION: This snippet shows the methods for setting the address and phone number of the student.  It provides two overloads: one accepts direct `Address` and `Phone` objects, and the other accepts lambda expressions that create those objects using their respective fluent builders. Both methods return the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCompoundClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithDetails.WithDetails(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Address address, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Phone phone)\n{\n    student.Address = address;\n    student.Phone = phone;\n    return student;\n}\n\nStudent IWithDetails.WithDetails(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Address> createAddress, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.CreatePhone.ICreatePhone, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Phone> createPhone)\n{\n    student.Address = createAddress(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.CreateAddress.InitialStep());\n    student.Phone = createPhone(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.CreatePhone.InitialStep());\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Initialization C#\nDESCRIPTION: This snippet demonstrates the initialization of the `CreateStudent` class, including the static constructor that retrieves the `Name` property using reflection, and the private constructor that initializes the underlying `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationPrivateSetClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly Student student;\nprivate static readonly PropertyInfo namePropertyInfo;\n\nstatic CreateStudent()\n{\n    namePropertyInfo = typeof(Student).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n\nprivate CreateStudent()\n{\n    student = new Student();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesF with Address Collection C#\nDESCRIPTION: This snippet shows how to set the AddressesF property of a Student object using a provided array of Address objects. It assigns the given addresses to the Student's AddressesF property. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesF(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[] addressesF)\n    {\n        student.AddressesF = addressesF;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class Definition (C#)\nDESCRIPTION: This C# code defines the CreateStudent class, which implements the fluent API interfaces ICreateStudent, IWithFirstName, and IWithLastName. It uses a Student object internally and PropertyInfo instances to set the FirstName and LastName properties via reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PartialClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithFirstName,\n    CreateStudent.IWithLastName\n{\n    private readonly Student student;\n    private static readonly PropertyInfo firstNamePropertyInfo;\n    private static readonly PropertyInfo lastNamePropertyInfo;\n\n    static CreateStudent()\n    {\n        firstNamePropertyInfo = typeof(Student).GetProperty(\"FirstName\", BindingFlags.Instance | BindingFlags.Public)!;\n        lastNamePropertyInfo = typeof(Student).GetProperty(\"LastName\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithLastName WithFirstName(string firstName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.firstNamePropertyInfo.SetValue(createStudent.student, firstName);\n        return createStudent;\n    }\n\n    IWithLastName IWithFirstName.WithFirstName(string firstName)\n    {\n        CreateStudent.firstNamePropertyInfo.SetValue(student, firstName);\n        return this;\n    }\n\n    Student IWithLastName.WithLastName(string lastName)\n    {\n        CreateStudent.lastNamePropertyInfo.SetValue(student, lastName);\n        return student;\n    }\n\n    public interface ICreateStudent : IWithFirstName\n    {\n    }\n\n    public interface IWithFirstName\n    {\n        IWithLastName WithFirstName(string firstName);\n    }\n\n    public interface IWithLastName\n    {\n        Student WithLastName(string lastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with List of Friends in C#\nDESCRIPTION: This static method `WhoseFriendsAre` creates a `Student` object and initializes its `Friends` property with a given `System.Collections.Generic.IList<string>`. It creates a new `CreateStudent` instance, sets the `Friends` property of the underlying `student` object, and returns the created `student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WhoseFriendsAre(System.Collections.Generic.IList<string> friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = friends;\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Initialization C#\nDESCRIPTION: Initializes the Fluent API by returning an instance of the `ICreateStudent` interface, which is the starting point for building the `Student` object. It leverages a private constructor to enforce the use of the Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberStruct/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate CreateStudent()\n{\n    student = new Student();\n}\n\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API Methods for Setting Properties in C#\nDESCRIPTION: This section demonstrates the implementation of fluent API methods for setting each property of the `Student` object. Each method (`WithProperty1` through `WithProperty9`) takes a value for the corresponding property, assigns it to the internal `student` object, and returns the next interface in the chain, allowing for method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithConstraints/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public static IWithProperty2 WithProperty1(T1 property1)\n    {\n        CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9> createStudent = new CreateStudent<T1, T2, T3, T4, T5, T6, T7, T8, T9>();\n        createStudent.student.Property1 = property1;\n        return createStudent;\n    }\n\n    IWithProperty2 IWithProperty1.WithProperty1(T1 property1)\n    {\n        student.Property1 = property1;\n        return this;\n    }\n\n    IWithProperty3 IWithProperty2.WithProperty2(T2 property2)\n    {\n        student.Property2 = property2;\n        return this;\n    }\n\n    IWithProperty4 IWithProperty3.WithProperty3(T3 property3)\n    {\n        student.Property3 = property3;\n        return this;\n    }\n\n    IWithProperty5 IWithProperty4.WithProperty4(T4 property4)\n    {\n        student.Property4 = property4;\n        return this;\n    }\n\n    IWithProperty6 IWithProperty5.WithProperty5(T5 property5)\n    {\n        student.Property5 = property5;\n        return this;\n    }\n\n    IWithProperty7 IWithProperty6.WithProperty6(T6 property6)\n    {\n        student.Property6 = property6;\n        return this;\n    }\n\n    IWithProperty8 IWithProperty7.WithProperty7(T7 property7)\n    {\n        student.Property7 = property7;\n        return this;\n    }\n\n    IWithProperty9 IWithProperty8.WithProperty8(T8 property8)\n    {\n        student.Property8 = property8;\n        return this;\n    }\n\n    Student<T1, T2, T3, T4, T5, T6, T7, T8, T9> IWithProperty9.WithProperty9(T9 property9)\n    {\n        student.Property9 = property9;\n        return student;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressC - C#\nDESCRIPTION: This code sets the `addressesC` property of the `Student` object to a new array containing a single `Address` object. It leverages the `CreateStudent.addressesCPropertyInfo` to dynamically set the value.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesCPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[1]{ addressC });\n```\n\n----------------------------------------\n\nTITLE: Method with Out Parameter Fluent API\nDESCRIPTION: This snippet shows the implementation of the `MethodWithOutParameter` method, which accepts an integer parameter passed as an output parameter using the `out` keyword. It calls the corresponding method on the underlying `Student` object and returns an instance of `IMethodWithRefInAndOutParameter` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIMethodWithRefInAndOutParameter IMethodWithOutParameter.MethodWithOutParameter(out int n3)\n{\n    student.MethodWithOutParameter(out n3);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Student Creation with Fluent API in C#\nDESCRIPTION: This static method `InitialStep` initiates the fluent API for creating a `Student` object. It returns an instance of the `ICreateStudent` interface, which defines the next steps in the fluent chain. It essentially starts the creation process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fluent API Builder in C#\nDESCRIPTION: This code snippet demonstrates the initialization of the `CreateStudent` class, which is a fluent API builder.  It initializes the underlying `Student` object within the private constructor. The `InitialStep` method is the entry point, returning an instance implementing the `ICreateStudent` interface to start the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using IWhoseFriendsAre Interface - C#\nDESCRIPTION: This code snippet presents the implementation of the `IWhoseFriendsAre` interface, which provides methods for setting the student's friends. It includes methods to set friends using a collection, a parameter array, a single friend, or no friends at all. Each method sets the `Friends` property of the `student` object and returns the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CustomFluentMethodNameClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string> friends)\n{\n    student.Friends = friends;\n    return student;\n}\n\nStudent IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)\n{\n    student.Friends = friends;\n    return student;\n}\n\nStudent IWhoseFriendsAre.WhoseFriendIs(string friend)\n{\n    student.Friends = new string[1]{ friend };\n    return student;\n}\n\nStudent IWhoseFriendsAre.WhoHasNoFriends()\n{\n    student.Friends = new string[0];\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Student's Name (C#)\nDESCRIPTION: This snippet sets the 'Name' property of the Student object using reflection. It takes a 'name' string as input and uses the pre-initialized 'namePropertyInfo' to set the value. The method returns the next interface in the fluent chain, 'IBornOn'.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedMembers/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        CreateStudent.namePropertyInfo.SetValue(student, name);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Step of Fluent API in C#\nDESCRIPTION: The `InitialStep` method serves as the entry point for the fluent API. It creates a new instance of the `CreateStudent` class and returns it as an `ICreateStudent` interface, which defines the next step in the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API Interface Methods - C#\nDESCRIPTION: This code snippet showcases the implementation of the interface methods within the 'CreateStudent' class. These methods are responsible for setting the properties of the 'Student' object in a chainable manner and returning the next interface in the fluent API sequence. Each method sets a specific property (Member0, Member1A, Member1B, or Member2) and returns the appropriate interface to continue the chain, ultimately returning a completed 'Student' object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableForkMembersClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIWithMember1AWithMember1B IWithMember0WithMember1AWithMember1B.WithMember0(string? member0)\n    {\n        student.Member0 = member0;\n        return this;\n    }\n\n    IWithMember2 IWithMember0WithMember1AWithMember1B.WithMember1A(string? member1A)\n    {\n        student.Member1A = member1A;\n        return this;\n    }\n\n    IWithMember0 IWithMember0WithMember1AWithMember1B.WithMember1B(string? member1B)\n    {\n        student.Member1B = member1B;\n        return this;\n    }\n\n    Student IWithMember2.WithMember2(string? member2)\n    {\n        student.Member2 = member2;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Single Backpack Item in C#\nDESCRIPTION: This snippet sets the `BackpackContent` to a single item. It creates a `HashSet<string>` containing only the specified item, sets it to `student.BackpackContent`, and returns the fully built `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(string backpackContent)\n    {\n        student.BackpackContent = new HashSet<string>(1){ backpackContent };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Method with In Parameter Fluent API\nDESCRIPTION: This snippet shows the implementation of the `MethodWithInParameter` method, which accepts an integer parameter passed by read-only reference using the `in` keyword. It calls the corresponding method on the underlying `Student` object and returns an instance of `IMethodWithOutParameter` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIMethodWithOutParameter IMethodWithInParameter.MethodWithInParameter(in int n2)\n{\n    student.MethodWithInParameter(in n2);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Interfaces\nDESCRIPTION: Defines the interfaces that guide the fluent API. Each interface represents a step in the creation process, requiring specific properties to be set before moving to the next step. This ensures that all required properties are set in a logical order.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/DefaultFluentMethodNameClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IIsHappy WithName(string firstName, string lastName);\n    }\n\n    public interface IIsHappy\n    {\n        IWithSemester IsHappy(bool isHappy = true);\n\n        IWithSemester NotIsHappy();\n    }\n\n    public interface IWithSemester\n    {\n        IWithFriends WithSemester(int semester);\n    }\n\n    public interface IWithFriends\n    {\n        Student WithFriends(System.Collections.Generic.IReadOnlyCollection<string> friends);\n\n        Student WithFriends(params string[] friends);\n\n        Student WithFriend(string friend);\n\n        Student WithZeroFriends();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing InSemester Method using Fluent API in C#\nDESCRIPTION: This method is the final step of the fluent API for creating a Student object. It sets the semester of the student and returns the fully constructed Student object. The private `InSemester` method of the Student class is invoked using reflection to set the semester.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n    {\n        CreateStudent.inSemesterMethodInfo.Invoke(student, new object?[] { semester });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (int, string) with Generic T\nDESCRIPTION: This static method creates a `Student` object and calls the generic `Method1<T>` method on it with an integer and a string. It directly instantiates `CreateStudent`, calls `student.Method1<T>(p1, p2)`, and returns the resulting `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<T>(int p1, string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<T>(p1, p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Step for Fluent API - C#\nDESCRIPTION: This snippet shows the initial step in the fluent API. The `InitialStep` method is a static method that returns an instance of `CreateStudent`, enabling the fluent API to begin. It allows the user to start building the object through the interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TryBreakFluentApiClass2/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Fluent API Step (C#)\nDESCRIPTION: The `InitialStep` method provides the starting point for the fluent API. It returns an instance of the `CreateStudent` class that implements the `ICreateStudent` interface, which requires the `WithName` method to be called first.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedRecord/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Builder Class Definition (C#)\nDESCRIPTION: Defines the 'CreateStudent' class, which implements multiple interfaces (ICreateStudent, IWithName, IBornOn, IInSemester) to enforce a specific order of setting properties on a 'Student' object.  It uses private constructor and static methods to control object creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IBornOn,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IBornOn IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    IInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        student.DateOfBirth = dateOfBirth;\n        return this;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressG with Lambda Creation C#\nDESCRIPTION: This snippet sets the AddressesG property of a Student object by using a lambda expression to create a single Address object. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressG(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?> createAddressG)\n    {\n        student.AddressesG = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[1]{ createAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of CreateStudent\nDESCRIPTION: This method is the initial step in the fluent API chain. It creates a new instance of the CreateStudent class, which internally holds a Student object. It returns an ICreateStudent interface, which allows the user to begin configuring the Student object through method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Friends Using List in C#\nDESCRIPTION: This snippet showcases how to set the `Friends` property of the `Student` object using a `List<string>`. The `WhoseFriendsAre` method takes a list of friends as input, assigns it to the `student.Friends` property, and returns an instance that implements `IWithPets`, enabling further configuration in the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.List<string> friends)\n    {\n        student.Friends = friends;\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class (C#)\nDESCRIPTION: Defines the 'CreateStudent' class, implementing the fluent API interfaces. This class encapsulates the 'Student' object and provides methods to set its properties using the fluent API pattern. The class also contains static methods for the initial steps of the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableFirstMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithFirstName,\n    CreateStudent.IWithLastName\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithLastName WithFirstName(string? firstName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.FirstName = firstName;\n        return createStudent;\n    }\n\n    public static Student WithLastName(string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.LastName = lastName;\n        return createStudent.student;\n    }\n\n    IWithLastName IWithFirstName.WithFirstName(string? firstName)\n    {\n        student.FirstName = firstName;\n        return this;\n    }\n\n    Student IWithLastName.WithLastName(string lastName)\n    {\n        student.LastName = lastName;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithFirstName\n    {\n    }\n\n    public interface IWithFirstName : IWithLastName\n    {\n        IWithLastName WithFirstName(string? firstName);\n    }\n\n    public interface IWithLastName\n    {\n        Student WithLastName(string lastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo C#\nDESCRIPTION: This static constructor retrieves PropertyInfo instances for FirstName, MiddleName, and LastName properties of the Student class using reflection. These PropertyInfo objects are then used to set the values of these properties during the fluent API calls.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        firstNamePropertyInfo = typeof(Student).GetProperty(\"FirstName\", BindingFlags.Instance | BindingFlags.Public)!;\n        middleNamePropertyInfo = typeof(Student).GetProperty(\"MiddleName\", BindingFlags.Instance | BindingFlags.Public)!;\n        lastNamePropertyInfo = typeof(Student).GetProperty(\"LastName\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Method in C#\nDESCRIPTION: This snippet shows the implementation of a static method ReturnVoidMethod that creates an instance of CreateStudent, calls the ReturnVoidMethod on the student object, and executes the void method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static void ReturnVoidMethod()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.ReturnVoidMethod();\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class in C#\nDESCRIPTION: This C# code defines the 'CreateStudent' class, which acts as a fluent API for creating 'Student' objects and setting their 'IsHappy' property. It is an auto-generated class, and modifications should be avoided. It includes interfaces for method chaining and static factory methods for creating student instances.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PredicateClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.PredicateClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWhoIsHappy\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WhoIsHappy(bool isHappy = true)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.IsHappy = isHappy;\n        return createStudent.student;\n    }\n\n    public static Student WhoIsSad()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.IsHappy = false;\n        return createStudent.student;\n    }\n\n    Student IWhoIsHappy.WhoIsHappy(bool isHappy)\n    {\n        student.IsHappy = isHappy;\n        return student;\n    }\n\n    Student IWhoIsHappy.WhoIsSad()\n    {\n        student.IsHappy = false;\n        return student;\n    }\n\n    public interface ICreateStudent : IWhoIsHappy\n    {\n    }\n\n    public interface IWhoIsHappy\n    {\n        Student WhoIsHappy(bool isHappy = true);\n\n        Student WhoIsSad();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Student Name via Fluent API - C#\nDESCRIPTION: The `WithName` method sets the name property of the underlying `Student` object using reflection. It takes a string `name` as input, creates a new instance of the `CreateStudent` class if called statically, sets the `Name` property using the pre-initialized `namePropertyInfo`, and returns the appropriate interface to continue the Fluent API chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n        return createStudent;\n    }\n\n    IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter IWithName.WithName(string name)\n    {\n        CreateStudent.namePropertyInfo.SetValue(student, name);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Student with a Single Friend in C#\nDESCRIPTION: This static method `WhoseFriendIs` creates a `Student` object and initializes its `Friends` property with a list containing a single friend. It creates a new `List<string>` with the given friend and assigns it to the `Friends` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WhoseFriendIs(string friend)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new List<string>(1){ friend };\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Struct with FluentApi Attribute C#\nDESCRIPTION: Defines a `record struct` named `Student` and marks it with the `FluentApi` attribute.  It also defines an integer property `Semester` marked with the `FluentMember(0)` attribute. This configuration aims to test the generation of fluent API methods within the context of a record struct and potentially identify and fix issues related to missing `set` accessors.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/GetMissingSetRecordStruct/Student.fixed.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[FluentApi]\npublic record struct Student\n{\n    [FluentMember(0)]\n    int Semester { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: WithFriends with List<string> (C#)\nDESCRIPTION: This method creates a Student object and sets the Friends property using a System.Collections.Generic.List<string>. It creates a new CreateStudent instance, assigns the friend list, and returns the resulting Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WithFriends(System.Collections.Generic.List<string> friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = friends;\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Step for Fluent API\nDESCRIPTION: This snippet defines the `InitialStep` method which serves as the entry point for the Fluent API. It returns an instance of the `CreateStudent` class, implementing the `ICreateStudent` interface, initiating the fluent creation process. This is the starting point for chaining method calls to configure the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n    {\n        return new CreateStudent<T1, T2>();\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo Objects C#\nDESCRIPTION: This snippet initializes `PropertyInfo` and `MethodInfo` objects using reflection to access the properties and methods of the `Student` and `Person` classes. It retrieves properties such as `Semester`, `Name`, and `Age`, as well as the `BornOn` method, for later use in setting values during the object creation process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassPrivateSetters/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n    namePropertyInfo = typeof(Person).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n    agePropertyInfo = typeof(Person).GetProperty(\"Age\", BindingFlags.Instance | BindingFlags.Public)!;\n    bornOnMethodInfo = typeof(Person).GetMethod(\n        \"BornOn\",\n        0,\n        BindingFlags.Instance | BindingFlags.NonPublic,\n        null,\n        new Type[] { typeof(System.DateOnly) },\n        null)!\n;}\n```\n\n----------------------------------------\n\nTITLE: Method with Params Fluent API\nDESCRIPTION: This snippet shows the implementation of the `MethodWithParams` method, which accepts a variable number of integer parameters using the `params` keyword. It calls the corresponding method on the underlying `Student` object and returns an instance of `IMethodWithRefParameter` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IMethodWithRefParameter MethodWithParams(params int[] numbers)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.MethodWithParams(numbers);\n    return createStudent;\n}\n\nIMethodWithRefParameter IMethodWithParams.MethodWithParams(params int[] numbers)\n{\n    student.MethodWithParams(numbers);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student WithName Static Method\nDESCRIPTION: This static method `WithName` creates a new `CreateStudent` instance, sets the last name and first name of the associated `Student` object using the provided parameters, and returns the created `Student` object. It bypasses the fluent interface's `InitialStep()` entry point.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoParameterCompoundClassReversedParameters/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WithName(string lastName, string firstName)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.LastName = lastName;\n    createStudent.student.FirstName = firstName;\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: WithName Method (C#)\nDESCRIPTION: This `WithName` method (both static and interface implementation) sets the `Name` property of the `Student` object and returns an `IBornOn` interface, enforcing the next step in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoMemberClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Name = name;\n    return createStudent;\n}\n\nIBornOn IWithName.WithName(string name)\n{\n    student.Name = name;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressC with Lambda - C#\nDESCRIPTION: This snippet sets the `addressesC` property using a lambda expression that takes `ICreateAddress` and returns an `Address`. A new array with one element is created, populated with the result of the lambda expression, and assigned to the `addressesC` property of the `student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesCPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[1]{ createAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()) });\n```\n\n----------------------------------------\n\nTITLE: Set Name Property with Value C#\nDESCRIPTION: This snippet defines a static method `WithName` which sets the `Name` property of the `Student` object using reflection, and returns the created Student object. It takes a string `name` as input.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationPrivateSetClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Student Object (C#)\nDESCRIPTION: This snippet implements the initial step of the fluent API. It creates a new instance of the CreateStudent class, which initializes a new Student object. This provides a starting point for setting the Student's properties using the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedMembers/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodInfo objects for Reflection - C#\nDESCRIPTION: This static constructor initializes MethodInfo objects for the Student class's Name property and private methods (ReturnVoidMethod, ReturnIntMethod, ReturnListMethod, ReturnIntMethodWithRefParameter) using reflection.  These MethodInfo objects are used later to invoke the methods and set the property value.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        namePropertyInfo = typeof(Student).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n        returnVoidMethodMethodInfo = typeof(Student).GetMethod(\n            \"ReturnVoidMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        returnIntMethodMethodInfo = typeof(Student).GetMethod(\n            \"ReturnIntMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        returnListMethodMethodInfo = typeof(Student).GetMethod(\n            \"ReturnListMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        returnIntMethodWithRefParameterMethodInfo = typeof(Student).GetMethod(\n            \"ReturnIntMethodWithRefParameter\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string).MakeByRefType() },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API for Void Method C#\nDESCRIPTION: This snippet implements the Fluent API call for the ReturnVoidMethod. It creates an instance of the CreateStudent class, then uses the pre-fetched returnVoidMethodMethodInfo to invoke the ReturnVoidMethod on the underlying Student object. The invoke method is used to trigger the underlying method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static void ReturnVoidMethod()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.returnVoidMethodMethodInfo.Invoke(createStudent.student, new object?[] {  });\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo Fields in C#\nDESCRIPTION: This snippet initializes static PropertyInfo fields for each property of the `Student` class. It uses reflection to get the `PropertyInfo` objects, which are then used to set the values of the properties in the fluent API methods. This allows for dynamic property setting without direct access to the properties themselves.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        firstNamePropertyInfo = typeof(Student).GetProperty(\"FirstName\", BindingFlags.Instance | BindingFlags.Public)!;\n        lastNamePropertyInfo = typeof(Student).GetProperty(\"LastName\", BindingFlags.Instance | BindingFlags.Public)!;\n        agePropertyInfo = typeof(Student).GetProperty(\"Age\", BindingFlags.Instance | BindingFlags.Public)!;\n        bornOnMethodInfo = typeof(Student).GetMethod(\n            \"BornOn\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(System.DateOnly) },\n            null)!;\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n        cityPropertyInfo = typeof(Student).GetProperty(\"City\", BindingFlags.Instance | BindingFlags.Public)!;\n        isHappyPropertyInfo = typeof(Student).GetProperty(\"IsHappy\", BindingFlags.Instance | BindingFlags.Public)!;\n        friendsPropertyInfo = typeof(Student).GetProperty(\"Friends\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Fluent API with InitialStep - C#\nDESCRIPTION: The `InitialStep` method provides the starting point for using the Fluent API. It creates a new instance of the `CreateStudent` class and returns it, casting it to the `ICreateStudent` interface, which defines the next available operations.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Pet\nDESCRIPTION: This snippet provides a method to set a single pet for the Student object. It creates a new list containing the single pet and assigns it to the Student.Pets property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPet(object pet)\n{\n    student.Pets = new List<object>(1){ pet };\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Constructor for FieldInfo Initialization C#\nDESCRIPTION: This static constructor initializes the `semesterFieldInfo` field using reflection. It retrieves the `Semester` field from the `Student` type using `GetField` with appropriate binding flags (Instance and Public). This `FieldInfo` object is then used to set the value of the `Semester` field.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PublicReadonlyFieldClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    semesterFieldInfo = typeof(Student).GetField(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Friend C#\nDESCRIPTION: This snippet allows setting a single friend for the student. It creates a new `List<string>` with a single element (the provided `friend`) and assigns it to the `student.Friends` property. It returns `IWithPets` to continue building the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoseFriendIs(string friend)\n{\n    student.Friends = new List<string>(1){ friend };\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Student Object using Fluent API in C#\nDESCRIPTION: This code demonstrates a Fluent API for creating a `Student` object and setting its `Semester` property. It uses interfaces to define the steps and a private constructor to control object creation. The `InitialStep` and `InSemester` methods are entry points to the API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InternalPropertyClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Semester = semester;\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        student.Semester = semester;\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces for Student Creation - C#\nDESCRIPTION: This section defines the interfaces that form the fluent API for creating `Student` objects.  Each interface represents a step in the object creation process, with methods that return the next interface in the chain. This allows for a readable and chainable syntax when creating `Student` objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CustomFluentMethodNameClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    IWhoIsHappy WithName(string firstName, string lastName);\n}\n\npublic interface IWhoIsHappy\n{\n    IInSemester WhoIsHappy(bool isHappy = true);\n\n    IInSemester WhoIsSad();\n}\n\npublic interface IInSemester\n{\n    IWhoseFriendsAre InSemester(int semester);\n}\n\npublic interface IWhoseFriendsAre\n{\n    Student WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string> friends);\n\n    Student WhoseFriendsAre(params string[] friends);\n\n    Student WhoseFriendIs(string friend);\n\n    Student WhoHasNoFriends();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Student Instance with Fluent API (Initial Step)\nDESCRIPTION: This snippet shows how to initialize the fluent API for creating a Student object using the InitialStep() method. It returns an instance of the ICreateStudent interface, which then enables further calls through the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericMethodWithConstraintsClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Invocation: Method3 (Terminal)\nDESCRIPTION: Defines the instance method to invoke the `Method3` on the `Student` object. This method takes one parameter of type T1, invokes the method, and returns the fully constructed `Student` object. This marks the end of the fluent API chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n    Student<T1, T2, T3, T4, T5> IMethod3.Method3<T6, T7, T8, T9>(T1 p1)\n    {\n        student.Method3<T6, T7, T8, T9>(p1);\n        return student;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Setting Name with Fluent API C#\nDESCRIPTION: This snippet shows how to set the `Name` property of the `Student` object using the fluent API. It uses reflection to set the value of the `Name` property. It creates a new `CreateStudent` instance if called directly and returns an `IOfAgeBornOn` interface to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassPrivateSetters/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IOfAgeBornOn WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Compound FluentMember Example\nDESCRIPTION: This C# code snippet demonstrates how to create a compound method using multiple `FluentMember` attributes with the same builder step and method name.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentMember(0, \"Named\", 0)]\npublic string FirstName { get; private set; }\n\n[FluentMember(0, \"Named\", 1)]\npublic string LastName { get; private set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n...Named(\"Alice\", \"King\")...\n```\n\n----------------------------------------\n\nTITLE: WithMiddleNameWithLastName Interface C#\nDESCRIPTION: This interface defines the WithMiddleName and WithLastName methods. WithMiddleName takes a nullable string middleName and returns the same interface to allow chaining. WithLastName takes a string lastName and returns the fully constructed Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IWithMiddleNameWithLastName\n    {\n        IWithMiddleNameWithLastName WithMiddleName(string? middleName);\n\n        Student WithLastName(string lastName);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing IInSemester Fluent API Step in C#\nDESCRIPTION: This C# code implements the `IInSemester.InSemester` method. It sets the `Semester` property of the internal `student` object using reflection and the pre-initialized `semesterPropertyInfo`. It then returns the fully constructed `student` object, completing the fluent API chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedSetters/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student with Fluent API using Reflection (C#)\nDESCRIPTION: This snippet implements a fluent API for creating 'Student' objects, allowing setting of the private init-only 'Semester' property using reflection. It uses interfaces 'ICreateStudent' and 'IInSemester' to define the fluent steps. 'InitialStep()' provides the starting point, and 'InSemester(int semester)' sets the 'Semester' property and returns the created 'Student' object. It leverages reflection to access and set the private init-only 'Semester' property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GetPrivateInitPropertyClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly PropertyInfo semesterPropertyInfo;\n\n    static CreateStudent()\n    {\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.semesterPropertyInfo.SetValue(createStudent.student, semester);\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Semester using IInSemester Interface - C#\nDESCRIPTION: This snippet demonstrates the implementation of the `IInSemester` interface. The `InSemester` method sets the `Semester` property of the `student` object. It returns the `IWhoseFriendsAre` interface for method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CustomFluentMethodNameClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIWhoseFriendsAre IInSemester.InSemester(int semester)\n{\n    student.Semester = semester;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Age in C#\nDESCRIPTION: This snippet demonstrates setting the age of a `Student` object using the fluent API. It uses `PropertyInfo.SetValue` to set the `Age` property. The method returns `this` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IOfAgeBornOn.OfAge(int age)\n    {\n        CreateStudent.agePropertyInfo.SetValue(student, age);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding AddressesD (HashSet) to Student via Fluent API\nDESCRIPTION: This snippet shows how to add a `HashSet<Address>` to the `AddressesD` property of the `Student` object using a few methods.It supports adding a HashSet and a params array of addresses\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesD(System.Collections.Generic.HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> addressesD)\n{\n    student.AddressesD = addressesD;\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesD(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesD)\n{\n```\n\n----------------------------------------\n\nTITLE: Set Name using Fluent API C#\nDESCRIPTION: This snippet defines the `WithName` method, which sets the `FirstName` and `LastName` properties of the `Student` object using reflection. It uses the pre-initialized `firstNamePropertyInfo` and `lastNamePropertyInfo` to set the values. It returns an `IWithProperty2` interface allowing the next step in fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithProperty2 WithName(string firstName, string lastName)\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.firstNamePropertyInfo.SetValue(createStudent.student, firstName);\n    CreateStudent.lastNamePropertyInfo.SetValue(createStudent.student, lastName);\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API methods in C#\nDESCRIPTION: These methods are implementations of the interfaces defined for the fluent API.  They use the `PropertyInfo` and `MethodInfo` instances initialized in the static constructor to set property values and invoke methods on the internal `Person` object.  Each method returns the next interface in the fluent chain, allowing for chained calls to build the `Person` object step by step. The final step typically returns the constructed `Person` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/PersonClass/CreatePerson.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIWithMiddleName IWithFirstName.WithFirstName(string firstName)\n    {\n        CreatePerson.firstNamePropertyInfo.SetValue(person, firstName);\n        return this;\n    }\n\n    IWithLastName IWithMiddleName.WithMiddleName(string? middleName)\n    {\n        CreatePerson.middleNamePropertyInfo.SetValue(person, middleName);\n        return this;\n    }\n\n    IWhoseAddressIsUnknownWhoLivesAtAddressWhoIsADigitalNomad IWithLastName.WithLastName(string lastName)\n    {\n        CreatePerson.lastNamePropertyInfo.SetValue(person, lastName);\n        return this;\n    }\n\n    Person IWhoseAddressIsUnknownWhoLivesAtAddressWhoIsADigitalNomad.WhoseAddressIsUnknown()\n    {\n        CreatePerson.whoseAddressIsUnknownMethodInfo.Invoke(person, new object?[] {  });\n        return person;\n    }\n\n    IWithHouseNumber IWhoseAddressIsUnknownWhoLivesAtAddressWhoIsADigitalNomad.WhoLivesAtAddress()\n    {\n        CreatePerson.whoLivesAtAddressMethodInfo.Invoke(person, new object?[] {  });\n        return this;\n    }\n\n    ILivingInCity IWhoseAddressIsUnknownWhoLivesAtAddressWhoIsADigitalNomad.WhoIsADigitalNomad()\n    {\n        CreatePerson.whoIsADigitalNomadMethodInfo.Invoke(person, new object?[] {  });\n        return this;\n    }\n\n    IWithStreet IWithHouseNumber.WithHouseNumber(string houseNumber)\n    {\n        CreatePerson.withHouseNumberMethodInfo.Invoke(person, new object?[] { houseNumber });\n        return this;\n    }\n\n    IInCity IWithStreet.WithStreet(string street)\n    {\n        CreatePerson.withStreetMethodInfo.Invoke(person, new object?[] { street });\n        return this;\n    }\n\n    Person IInCity.InCity(string city)\n    {\n        CreatePerson.inCityMethodInfo.Invoke(person, new object?[] { city });\n        return person;\n    }\n\n    Person ILivingInCity.LivingInCity(string city)\n    {\n        CreatePerson.livingInCityMethodInfo.Invoke(person, new object?[] { city });\n        return person;\n    }\n```\n\n----------------------------------------\n\nTITLE: WithFirstName Interface C#\nDESCRIPTION: This interface defines the WithFirstName method, which takes a string firstName and returns an IWithMiddleNameWithLastName interface, allowing the user to proceed with setting the middle and last names.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IWithFirstName\n    {\n        IWithMiddleNameWithLastName WithFirstName(string firstName);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting the Student's Semester (C#)\nDESCRIPTION: This snippet sets the 'Semester' property of the Student object using reflection. It takes an integer 'semester' as input and uses the 'semesterPropertyInfo' to set the value. It returns the fully constructed Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedMembers/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Class with Fluent API (C#)\nDESCRIPTION: This code snippet showcases the `CreateStudent` class, a fluent API builder for the `Student` class. It includes methods for initializing a `Student` object, setting its `Name` property, and handling nullable name scenarios. The `InitialStep()` method initiates the builder, while `WithName()` and `WhoseNameIsUnknown()` are used to set the name property, supporting both string and null values.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent.student;\n    }\n\n    public static Student WhoseNameIsUnknown()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = null!;\n        return createStudent.student;\n    }\n\n    Student IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return student;\n    }\n\n    Student IWithName.WhoseNameIsUnknown()\n    {\n        student.Name = null!;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        Student WithName(string name);\n\n        Student WhoseNameIsUnknown();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesD with Address Collection C#\nDESCRIPTION: This snippet shows how to set the AddressesD property of a Student object using a provided collection of Address objects. It initializes a new HashSet with the given addresses and assigns it to the Student's AddressesD property. This method is part of a Fluent API, so it returns the modified Student object for chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstudent.AddressesD = new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(addressesD);\n        return student;\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Semester in C#\nDESCRIPTION: This snippet demonstrates setting the semester of a `Student` object. It uses `PropertyInfo.SetValue` to set the `Semester` property. The method returns `this` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nILivingIn IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces in C#\nDESCRIPTION: This code defines the interfaces used in the fluent API pattern. Each interface (ICreateStudent, IWithProperty1 to IWithProperty9) represents a step in the construction process. Each interface defines a method that sets a specific property and returns the next interface in the sequence. The IWithProperty9 interface's method returns the final `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithConstraints/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithProperty1\n    {\n    }\n\n    public interface IWithProperty1\n    {\n        IWithProperty2 WithProperty1(T1 property1);\n    }\n\n    public interface IWithProperty2\n    {\n        IWithProperty3 WithProperty2(T2 property2);\n    }\n\n    public interface IWithProperty3\n    {\n        IWithProperty4 WithProperty3(T3 property3);\n    }\n\n    public interface IWithProperty4\n    {\n        IWithProperty5 WithProperty4(T4 property4);\n    }\n\n    public interface IWithProperty5\n    {\n        IWithProperty6 WithProperty5(T5 property5);\n    }\n\n    public interface IWithProperty6\n    {\n        IWithProperty7 WithProperty6(T6 property6);\n    }\n\n    public interface IWithProperty7\n    {\n        IWithProperty8 WithProperty7(T7 property7);\n    }\n\n    public interface IWithProperty8\n    {\n        IWithProperty9 WithProperty8(T8 property8);\n    }\n\n    public interface IWithProperty9\n    {\n        Student<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithProperty9(T9 property9);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces in C#\nDESCRIPTION: These interfaces `ICreateStudent` and `IInSemester` define the structure of the fluent API. `ICreateStudent` inherits from `IInSemester`, establishing the order of steps in the API. `IInSemester` defines the `InSemester` method, which sets the semester for the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateConstructorClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IInSemester\n{\n}\n\npublic interface IInSemester\n{\n    Student InSemester(int semester);\n}\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Class Definition with Fluent Interface in C#\nDESCRIPTION: This snippet defines the CreateStudent class with generic types T1 and T2, implementing interfaces ICreateStudent and IWithProperty1WithProperty2. It uses a private Student instance and static methods to create the fluent API for building Student objects, allowing property setting in a controlled manner.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent<T1, T2> :\n    CreateStudent<T1, T2>.ICreateStudent,\n    CreateStudent<T1, T2>.IWithProperty1WithProperty2\n{\n    private readonly Student<T1, T2> student;\n\n    private CreateStudent()\n    {\n        student = new Student<T1, T2>();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent<T1, T2>();\n    }\n\n    public static Student<T1, T2> WithProperty1(T1 property1)\n    {\n        CreateStudent<T1, T2> createStudent = new CreateStudent<T1, T2>();\n        createStudent.student.Property1 = property1;\n        return createStudent.student;\n    }\n\n    public static Student<T1, T2> WithProperty2(T2 property2)\n    {\n        CreateStudent<T1, T2> createStudent = new CreateStudent<T1, T2>();\n        createStudent.student.Property2 = property2;\n        return createStudent.student;\n    }\n\n    Student<T1, T2> IWithProperty1WithProperty2.WithProperty1(T1 property1)\n    {\n        student.Property1 = property1;\n        return student;\n    }\n\n    Student<T1, T2> IWithProperty1WithProperty2.WithProperty2(T2 property2)\n    {\n        student.Property2 = property2;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithProperty1WithProperty2\n    {\n    }\n\n    public interface IWithProperty1WithProperty2\n    {\n        Student<T1, T2> WithProperty1(T1 property1);\n\n        Student<T1, T2> WithProperty2(T2 property2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Student's Name (C#)\nDESCRIPTION: The `WithName` method sets the `Name` property of the `Student` object using reflection. It takes a string `name` as input and returns an instance of `CreateStudent` implementing the `IBornOn` interface, allowing the `BornOn` method to be called next.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedRecord/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n        return createStudent;\n    }\n```\n\n----------------------------------------\n\nTITLE: WithName (string lastName) Implementation C#\nDESCRIPTION: This snippet demonstrates how to set the `LastName` property (a string) of the `Student` object using reflection. It takes a string representing the student's last name as input. It retrieves the `lastNamePropertyInfo` and uses it to set the `LastName` property of the underlying `student` object, and returns the constructed student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SameNameMemberClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithName2.WithName(string lastName)\n    {\n        CreateStudent.lastNamePropertyInfo.SetValue(student, lastName);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initial Fluent API Step for Student Creation (InitialStep)\nDESCRIPTION: This method, `InitialStep()`, is the starting point for the Fluent API. It creates and returns a new instance of the `CreateStudent` class, which implements the `ICreateStudent` interface.  This begins the chain of method calls to construct a `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordPrimaryConstructor/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backpack Content using ISet C#\nDESCRIPTION: This code snippet shows how to set the backpack content of a student using an `ISet<string>`. It directly assigns the provided set to the `student.BackpackContent` property. The method returns the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(System.Collections.Generic.ISet<string> backpackContent)\n{\n    student.BackpackContent = backpackContent;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo for Student Properties C#\nDESCRIPTION: This snippet initializes `PropertyInfo` instances for `FirstName`, `LastName`, `Property1`, and `Property2` properties of the `Student` class. These `PropertyInfo` objects are used later to set the property values using reflection in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    firstNamePropertyInfo = typeof(Student).GetProperty(\"FirstName\", BindingFlags.Instance | BindingFlags.Public)!;\n    lastNamePropertyInfo = typeof(Student).GetProperty(\"LastName\", BindingFlags.Instance | BindingFlags.Public)!;\n    property1PropertyInfo = typeof(Student).GetProperty(\"Property1\", BindingFlags.Instance | BindingFlags.Public)!;\n    property2PropertyInfo = typeof(Student).GetProperty(\"Property2\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AddressesB (IReadOnlyCollection) to Student via Fluent API\nDESCRIPTION: This snippet shows how to add an `IReadOnlyCollection<Address>` to the `AddressesB` property of the `Student` object using various methods.  It supports adding an IReadOnlyCollection, a params array of `Address` objects, a params array of `Func<CreateAddress, Address>`, a single `Address` object, a single `Func<CreateAddress, Address>`, and setting an empty array.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesB(System.Collections.Generic.IReadOnlyCollection<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> addressesB)\n{\n    student.AddressesB = addressesB;\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesB(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesB)\n{\n    student.AddressesB = addressesB;\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesB(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesB)\n{\n    student.AddressesB = createAddressesB.Select(createAddressB => createAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())).ToArray();\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressB)\n{\n    student.AddressesB = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[1]{ addressB };\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressB(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressB)\n{\n    student.AddressesB = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[1]{ createAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesB()\n{\n    student.AddressesB = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[0];\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Student Methods (C#)\nDESCRIPTION: Implements methods from the `IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter` interface that delegate calls to the corresponding methods on the underlying `Student` object. These methods include `ReturnVoidMethod`, `ReturnIntMethod`, `ReturnListMethod`, and `ReturnIntMethodWithRefParameter`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n    void IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnVoidMethod()\n    {\n        student.ReturnVoidMethod();\n    }\n\n    int IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethod()\n    {\n        return student.ReturnIntMethod();\n    }\n\n    System.Collections.Generic.List<int> IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnListMethod()\n    {\n        return student.ReturnListMethod();\n    }\n\n    int IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethodWithRefParameter(ref string s)\n    {\n        return student.ReturnIntMethodWithRefParameter(ref s);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Class with Private Constructor\nDESCRIPTION: This snippet initializes the `CreateStudent` class with a private constructor. It uses `Activator.CreateInstance` to instantiate the `Student` object, bypassing the constructor's access restriction. This allows the Fluent API to work with classes that don't have public constructors.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly Student<T1, T2> student;\n\n    private CreateStudent()\n    {\n        student = (Student<T1, T2>) Activator.CreateInstance(typeof(Student<T1, T2>), true)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: BornOn Method (C#)\nDESCRIPTION: The `BornOn` method sets the `DateOfBirth` property of the `Student` object and returns the fully constructed `Student` object. This is the final step in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoMemberClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IBornOn.BornOn(System.DateOnly dateOfBirth)\n{\n    student.DateOfBirth = dateOfBirth;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Array of Friends in C#\nDESCRIPTION: This static method `WhoseFriendsAre` creates a `Student` object and initializes its `Friends` property with a given array of strings. It converts the array into a `List<string>` before assigning it to the `Friends` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WhoseFriendsAre(params string[] friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new List<string>(friends);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces (C#)\nDESCRIPTION: This snippet defines the interfaces that make up the fluent API.  Each interface represents a step in the object creation process. They enforce a specific order of setting properties: ICreateStudent -> IWithName -> IBornOn -> IInSemester.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedMembers/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IBornOn WithName(string name);\n    }\n\n    public interface IBornOn\n    {\n        IInSemester BornOn(System.DateOnly dateOfBirth);\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API for Int Method C#\nDESCRIPTION: This snippet implements the Fluent API call for the ReturnIntMethod. It creates an instance of the CreateStudent class, then uses the pre-fetched returnIntMethodMethodInfo to invoke the ReturnIntMethod on the underlying Student object. The return value is cast to int and returned.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static int ReturnIntMethod()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        return (int) CreateStudent.returnIntMethodMethodInfo.Invoke(createStudent.student, new object?[] {  })!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Property1 using Fluent API C#\nDESCRIPTION: This snippet defines the `WithProperty1` method which sets the `Property1` property of the student object. It leverages reflection to set the property value. It returns an instance of `IWithProperty2` to maintain the fluent API structure and allow setting `Property2` in the next step.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIWithProperty2 IWithProperty1.WithProperty1(string property1)\n{\n    CreateStudent.property1PropertyInfo.SetValue(student, property1);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property1 Using Static Method (C#)\nDESCRIPTION: This static method creates a new `CreateStudent` instance, sets the `Property1` of the underlying `student` object, and then returns the modified `student` object directly. It provides an alternative, potentially less fluent, way to set `Property1`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateConstructor/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student<T1, T2> WithProperty1(T1 property1)\n{\n    CreateStudent<T1, T2> createStudent = new CreateStudent<T1, T2>();\n    createStudent.student.Property1 = property1;\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Semester Property via Reflection - C#\nDESCRIPTION: This snippet demonstrates setting the 'Semester' property of the Student object using reflection. The `InSemester` method uses `semesterPropertyInfo.SetValue` to set the property value, which is necessary because the 'Semester' property is assumed to have a private setter. It shows two versions, a static method and one from the interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GetPrivateSetPropertyClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student InSemester(int semester)\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.semesterPropertyInfo.SetValue(createStudent.student, semester);\n    return createStudent.student;\n}\n\nStudent IInSemester.InSemester(int semester)\n{\n    CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IWithAddressesA...G Interface C#\nDESCRIPTION: This snippet defines the IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG interface, which provides the methods for setting AddressA and all the subsequent address properties. This is part of the fluent interface, allowing chaining of method calls for configuring the student object's addresses.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG\n    {\n        Student WithAddressesA(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> addressesA);\n```\n\n----------------------------------------\n\nTITLE: FluentMethod Attribute Usage C#\nDESCRIPTION: Shows how to use the `FluentMethod` attribute to provide a custom implementation for setting values or triggering additional behavior in the builder. The decorated method must return `void`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_18\n\nLANGUAGE: cs\nCODE:\n```\nFluentMethod(int builderStep, string method = \"{Name}\")\n```\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMethod(1)]\nprivate void BornOn(DateOnly dateOfBirth)\n{\n    DateOnly today = DateOnly.FromDateTime(DateTime.Today);\n    int age = today.Year - dateOfBirth.Year;\n    if (dateOfBirth > today.AddYears(-age)) age--;\n    Age = age;\n}\n```\n\nLANGUAGE: cs\nCODE:\n```\n...BornOn(new DateOnly(2003, 6, 24))...\n```\n\n----------------------------------------\n\nTITLE: Initializing Student Creation with Fluent API in C#\nDESCRIPTION: This snippet shows the basic structure of the `CreateStudent` class, implementing interfaces for the fluent API.  It contains the required interfaces for method chaining and provides factory methods (`InitialStep`, `Method1`) to start building the object. It uses reflection to access and set the `Property1` and `Property2` properties of the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithOfOverloadedMethodClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IMethod1Method1,\n    CreateStudent.IWithProperty1,\n    CreateStudent.IWithProperty2\n{\n    private readonly Student student;\n    private static readonly PropertyInfo property1PropertyInfo;\n    private static readonly PropertyInfo property2PropertyInfo;\n\n    static CreateStudent()\n    {\n        property1PropertyInfo = typeof(Student).GetProperty(\"Property1\", BindingFlags.Instance | BindingFlags.Public)!;\n        property2PropertyInfo = typeof(Student).GetProperty(\"Property2\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithProperty1 Method1()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Method1();\n        return createStudent;\n    }\n\n    public static IWithProperty2 Method1(int p1)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Method1(p1);\n        return createStudent;\n    }\n\n    IWithProperty1 IMethod1Method1.Method1()\n    {\n        student.Method1();\n        return this;\n    }\n\n    IWithProperty2 IMethod1Method1.Method1(int p1)\n    {\n        student.Method1(p1);\n        return this;\n    }\n\n    IWithProperty2 IWithProperty1.WithProperty1(string property1)\n    {\n        CreateStudent.property1PropertyInfo.SetValue(student, property1);\n        return this;\n    }\n\n    Student IWithProperty2.WithProperty2(string property2)\n    {\n        CreateStudent.property2PropertyInfo.SetValue(student, property2);\n        return student;\n    }\n\n    public interface ICreateStudent : IMethod1Method1\n    {\n    }\n\n    public interface IMethod1Method1\n    {\n        IWithProperty1 Method1();\n\n        IWithProperty2 Method1(int p1);\n    }\n\n    public interface IWithProperty1\n    {\n        IWithProperty2 WithProperty1(string property1);\n    }\n\n    public interface IWithProperty2\n    {\n        Student WithProperty2(string property2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IWhoseFriendsAre Interface (Params) in C#\nDESCRIPTION: This method `WhoseFriendsAre` implements the `IWhoseFriendsAre` interface, taking a `params string[]` as input and assigning it to the student's `Friends` property by converting it to a list.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)\n{\n    student.Friends = new List<string>(friends);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Definition: WithAddressG\nDESCRIPTION: This C# code snippet defines two overloaded methods, 'WithAddressG', in the 'Student' class. The first method takes an 'Address' object or null as input and presumably assigns it to a collection or property. The second method takes a function delegate 'createAddressG' that creates and returns an 'Address' object or null, enabling dynamic address creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address? addressG);\n\nStudent WithAddressG(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?> createAddressG);\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesD with lambda Address creation\nDESCRIPTION: This snippet shows how to set the AddressesD property of a Student object using lambda expressions to create Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesD(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesD);\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Fluent API Class Definition C#\nDESCRIPTION: Defines the `CreateStudent` class, implementing interfaces for fluent API creation of `Student` objects. It includes static methods for initializing the fluent interface and methods for setting student details like address.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TryBreakFluentApiClass3/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithDetails\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WithDetails(string createAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.Address address)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.CreateAddress = createAddress;\n        createStudent.student.Address = address;\n        return createStudent.student;\n    }\n\n    public static Student WithDetails(string createAddress, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.Address> createAddress2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.CreateAddress = createAddress;\n        createStudent.student.Address = createAddress2(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.CreateAddress.InitialStep());\n        return createStudent.student;\n    }\n\n    Student IWithDetails.WithDetails(string createAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.Address address)\n    {\n        student.CreateAddress = createAddress;\n        student.Address = address;\n        return student;\n    }\n\n    Student IWithDetails.WithDetails(string createAddress, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.Address> createAddress2)\n    {\n        student.CreateAddress = createAddress;\n        student.Address = createAddress2(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.CreateAddress.InitialStep());\n        return student;\n    }\n\n    public interface ICreateStudent : IWithDetails\n    {\n    }\n\n    public interface IWithDetails\n    {\n        Student WithDetails(string createAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.Address address);\n\n        Student WithDetails(string createAddress, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass3.Address> createAddress2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method with Ref, In, and Out Parameters Fluent API\nDESCRIPTION: This snippet shows the implementation of the `MethodWithRefInAndOutParameter` method, which accepts integer parameters passed by reference (`ref`), read-only reference (`in`), and as an output parameter (`out`). It calls the corresponding method on the underlying `Student` object and returns the `Student` object itself, terminating the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent IMethodWithRefInAndOutParameter.MethodWithRefInAndOutParameter(ref int n4, in int n5, out int n6)\n{\n    student.MethodWithRefInAndOutParameter(ref n4, in n5, out n6);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (T, string) with Generic T\nDESCRIPTION: This static method creates a `Student` object and calls the generic `Method1<T>` method on it with a generic type `T` and a string. It instantiates `CreateStudent`, calls `student.Method1<T>(p1, p2)`, and returns the created `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<T>(T p1, string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<T>(p1, p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces - C#\nDESCRIPTION: This code snippet presents the interface definitions for the fluent API. These interfaces define the chainable methods for setting the properties of the 'Student' object. Each interface represents a step in the fluent API and specifies which methods are available for setting properties and navigating to the next step.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableForkMembersClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithMember0\n    {\n    }\n\n    public interface IWithMember0 : IWithMember0WithMember1AWithMember1B\n    {\n    }\n\n    public interface IWithMember1AWithMember1B : IWithMember2, IWithMember0WithMember1AWithMember1B\n    {\n    }\n\n    public interface IWithMember0WithMember1AWithMember1B\n    {\n        IWithMember1AWithMember1B WithMember0(string? member0);\n\n        IWithMember2 WithMember1A(string? member1A);\n\n        IWithMember0 WithMember1B(string? member1B);\n    }\n\n    public interface IWithMember2\n    {\n        Student WithMember2(string? member2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing WithName Fluent API Step in C#\nDESCRIPTION: This C# snippet implements the 'WithName' step of the fluent API. It creates a new CreateStudent instance, sets the 'Name' property of the underlying Student object using reflection and the pre-initialized namePropertyInfo, and returns the new instance, chained to the next step (IBornOn).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedSetters/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);\n        return createStudent;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressA with Address\nDESCRIPTION: This snippet shows how to set a single AddressA property of a Student object with an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressA);\n```\n\n----------------------------------------\n\nTITLE: Initializing Fluent API Builder\nDESCRIPTION: This code snippet demonstrates the initial step in the fluent API, creating an instance of the CreateStudent class and returning the ICreateStudent interface. This interface defines the first available methods for configuring the Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Student with First and Last Name in C#\nDESCRIPTION: This snippet demonstrates the usage of reflection to invoke the 'Named' method (accepting first and last name) on the 'Student' object. A new 'CreateStudent' instance is created, and the 'namedMethodInfo' is used to call the 'Named' method on the underlying 'student' instance. The constructed 'student' object is then returned.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/OverloadedMethodClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Named(string firstName, string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namedMethodInfo.Invoke(createStudent.student, new object?[] { firstName, lastName });\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesD C#\nDESCRIPTION: This snippet sets the AddressesD property of a Student object to an empty HashSet. It effectively removes any existing addresses from the AddressesD collection. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesD()\n    {\n        student.AddressesD = new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(0);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initial Fluent API Step C#\nDESCRIPTION: This code snippet shows the initial step in the Fluent API creation, which returns an instance of the `CreateStudent` class implementing the `ICreateStudent` interface. This allows the client to start the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationPrivateSetClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student InSemester Method C#\nDESCRIPTION: Implements the `InSemester` method from the `IInSemester` interface. It sets the `Semester` property of the internal `Student` object and returns the fully constructed `Student` object. This is the final step in the Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberStruct/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n{\n    student.Semester = semester;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentApi Attribute Usage Example\nDESCRIPTION: This C# code snippet demonstrates the basic usage of the `FluentApi` attribute on a `Student` class.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentApi]\npublic class Student\n```\n\n----------------------------------------\n\nTITLE: Fluent API Property Setter: WithProperty1\nDESCRIPTION: Defines static and instance methods to set the `Property1` of the `Student` object. The static method creates a new instance of the builder, while the instance method modifies the current builder instance. This method returns the next interface in the chain (`IWithProperty2`).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public static IWithProperty2 WithProperty1(T1 property1)\n    {\n        CreateStudent<T1, T2, T3, T4, T5> createStudent = new CreateStudent<T1, T2, T3, T4, T5>();\n        createStudent.student.Property1 = property1;\n        return createStudent;\n    }\n\n    IWithProperty2 IWithProperty1.WithProperty1(T1 property1)\n    {\n        student.Property1 = property1;\n        return this;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Class Definition\nDESCRIPTION: Defines the CreateStudent class that implements the fluent API interfaces. This class is responsible for building a Student object step-by-step, ensuring a controlled and readable creation process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/DefaultFluentMethodNameClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IIsHappy,\n    CreateStudent.IWithSemester,\n    CreateStudent.IWithFriends\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IIsHappy WithName(string firstName, string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.WithName(firstName, lastName);\n        return createStudent;\n    }\n\n    IIsHappy IWithName.WithName(string firstName, string lastName)\n    {\n        student.WithName(firstName, lastName);\n        return this;\n    }\n\n    IWithSemester IIsHappy.IsHappy(bool isHappy)\n    {\n        student.IsHappy = isHappy;\n        return this;\n    }\n\n    IWithSemester IIsHappy.NotIsHappy()\n    {\n        student.IsHappy = false;\n        return this;\n    }\n\n    IWithFriends IWithSemester.WithSemester(int semester)\n    {\n        student.Semester = semester;\n        return this;\n    }\n\n    Student IWithFriends.WithFriends(System.Collections.Generic.IReadOnlyCollection<string> friends)\n    {\n        student.Friends = friends;\n        return student;\n    }\n\n    Student IWithFriends.WithFriends(params string[] friends)\n    {\n        student.Friends = friends;\n        return student;\n    }\n\n    Student IWithFriends.WithFriend(string friend)\n    {\n        student.Friends = new string[1]{ friend };\n        return student;\n    }\n\n    Student IWithFriends.WithZeroFriends()\n    {\n        student.Friends = new string[0];\n        return student;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fluent API Builder Class Definition in C#\nDESCRIPTION: Defines the CreateStudent class which implements the fluent API interfaces. The class is responsible for building a Student object using a chained method approach, ensuring a specific order for setting properties. The private constructor ensures instantiation only through the static methods.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodDefaultValuesClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithFirstName,\n    CreateStudent.IWithLastName,\n    CreateStudent.IBornOn,\n    CreateStudent.IEnrolledIn,\n    CreateStudent.IInSemester,\n    CreateStudent.IWithNumberOfPassedExams,\n    CreateStudent.IWithNumberOfFailedExams\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithLastName WithFirstName(string firstName = \"Alice\")\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.WithFirstName(firstName);\n        return createStudent;\n    }\n\n    IWithLastName IWithFirstName.WithFirstName(string firstName)\n    {\n        student.WithFirstName(firstName);\n        return this;\n    }\n\n    IBornOn IWithLastName.WithLastName(string? lastName)\n    {\n        student.WithLastName(lastName);\n        return this;\n    }\n\n    IEnrolledIn IBornOn.BornOn(System.DateOnly date)\n    {\n        student.BornOn(date);\n        return this;\n    }\n\n    IInSemester IEnrolledIn.EnrolledIn(System.DateOnly date)\n    {\n        student.EnrolledIn(date);\n        return this;\n    }\n\n    IWithNumberOfPassedExams IInSemester.InSemester(int semester)\n    {\n        student.InSemester(semester);\n        return this;\n    }\n\n    IWithNumberOfFailedExams IWithNumberOfPassedExams.WithNumberOfPassedExams(int? numberOfPassedExams)\n    {\n        student.WithNumberOfPassedExams(numberOfPassedExams);\n        return this;\n    }\n\n    Student IWithNumberOfFailedExams.WithNumberOfFailedExams(int? numberOfFailedExams)\n    {\n        student.WithNumberOfFailedExams(numberOfFailedExams);\n        return student;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressD with lambda Address creation\nDESCRIPTION: This snippet shows how to set the AddressD property of a Student object using a lambda expression to create an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressD(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressD);\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Interfaces (C#)\nDESCRIPTION: Defines the interfaces used in the fluent API for creating the `Student` object. Each interface represents a step in the configuration process, allowing for a chained method call syntax. Each `IWithMemberX` interface provides a `WithMemberX` method and inherits the next interface in the chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableSeveralMembersClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithMember1\n    {\n    }\n\n    public interface IWithMember1 : IWithMember2\n    {\n        IWithMember2 WithMember1(string? member1);\n    }\n\n    public interface IWithMember2 : IWithMember3\n    {\n        IWithMember3 WithMember2(string? member2);\n    }\n\n    public interface IWithMember3 : IWithMember4\n    {\n        IWithMember4 WithMember3(string? member3);\n    }\n\n    public interface IWithMember4\n    {\n        Student WithMember4(string member4);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Single AddressG to Student (C#)\nDESCRIPTION: This method assigns a single nullable 'Address' object to the 'addressesG' property of a 'Student' object using reflection. It creates an array containing only the given address. The method belongs to the fluent API interface IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address? addressG)\n    {\n        CreateStudent.addressesGPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[1]{ addressG });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting No Friends\nDESCRIPTION: This snippet sets the Student object's Friends property to an empty array, indicating the student has no friends. It returns the IWithPets interface for subsequent configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithPets WhoHasNoFriends()\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new object[0];\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property2 Using Static Method (C#)\nDESCRIPTION: This static method creates a new `CreateStudent` instance, sets the `Property2` of the underlying `student` object, and then returns the modified `student` object directly. It provides an alternative, potentially less fluent, way to set `Property2`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateConstructor/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student<T1, T2> WithProperty2(T2 property2)\n{\n    CreateStudent<T1, T2> createStudent = new CreateStudent<T1, T2>();\n    createStudent.student.Property2 = property2;\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BornOn Method (C#)\nDESCRIPTION: This is the implementation of the BornOn step in the fluent API. It calls the private 'BornOn' method of the Student object, which expects a nullable System.DateOnly?. This function takes the date and uses reflection to invoke the private method and returns the next step in the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodNullableParameterClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly? date)\n    {\n        CreateStudent.bornOnMethodInfo.Invoke(student, new object?[] { date });\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Interfaces for Fluent API Builder in C#\nDESCRIPTION: This code defines the interfaces used in the `CreateStudent` fluent API builder. Each interface represents a step in the building process and defines the methods available at that step. They control the order in which the properties of the `Student` object can be set.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableTwoLoopsClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithMember0\n    {\n    }\n\n    public interface IWithMember0 : IWithMember0WithMember1WithMember1B\n    {\n    }\n\n    public interface IWithMember1WithMember1B : IWithMember0WithMember1WithMember1B\n    {\n    }\n\n    public interface IWithMember0WithMember1WithMember1B\n    {\n        IWithMember1WithMember1B WithMember0(string? member0);\n\n        IWithMember0 WithMember1(string? member1);\n\n        IWithMember2 WithMember1B(string? member1B);\n    }\n\n    public interface IWithMember2\n    {\n        IWithMember3 WithMember2(string? member2);\n    }\n\n    public interface IWithMember3 : IWithMember3WithMember4WithMember4B\n    {\n    }\n\n    public interface IWithMember4WithMember4B : IWithMember3WithMember4WithMember4B\n    {\n    }\n\n    public interface IWithMember3WithMember4WithMember4B\n    {\n        IWithMember4WithMember4B WithMember3(string? member3);\n\n        IWithMember3 WithMember4(string? member4);\n\n        IWithMember5 WithMember4B(string? member4B);\n    }\n\n    public interface IWithMember5\n    {\n        Student WithMember5(string? member5);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interface Definitions\nDESCRIPTION: Defines the interfaces that represent each stage of the fluent API. These interfaces define the methods available at each step and specify the return type, ensuring the correct method chaining.  Method1, Method2, and Method3 also have where clauses on their generic type parameters, specifying further constraints.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithProperty1\n    {\n    }\n\n    public interface IWithProperty1\n    {\n        IWithProperty2 WithProperty1(T1 property1);\n    }\n\n    public interface IWithProperty2\n    {\n        IWithProperty3 WithProperty2(T2 property2);\n    }\n\n    public interface IWithProperty3\n    {\n        IWithProperty4 WithProperty3(T3 property3);\n    }\n\n    public interface IWithProperty4\n    {\n        IWithProperty5 WithProperty4(T4 property4);\n    }\n\n    public interface IWithProperty5\n    {\n        IMethod1 WithProperty5(T5 property5);\n    }\n\n    public interface IMethod1\n    {\n        IMethod2 Method1<T6, T7, T8, T9>(T6 p1, T7 p2, T8 p3, T9 p4)\n            where T6 : unmanaged\n            where T7 : System.Collections.Generic.List<int>, System.Collections.Generic.IDictionary<int, string>\n            where T8 : class, System.Collections.Generic.IDictionary<int, string>\n            where T9 : System.Collections.Generic.List<int>, new();\n    }\n\n    public interface IMethod2\n    {\n        IMethod3 Method2<T6, T7, T8, T9>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)\n            where T6 : unmanaged\n            where T7 : System.Collections.Generic.List<int>, System.Collections.Generic.IDictionary<int, string>\n            where T8 : class, System.Collections.Generic.IDictionary<int, string>\n            where T9 : System.Collections.Generic.List<int>, new();\n    }\n\n    public interface IMethod3\n    {\n        Student<T1, T2, T3, T4, T5> Method3<T6, T7, T8, T9>(T1 p1)\n            where T6 : unmanaged\n            where T7 : System.Collections.Generic.List<int>, System.Collections.Generic.IDictionary<int, string>\n            where T8 : class, System.Collections.Generic.IDictionary<int, string>\n            where T9 : System.Collections.Generic.List<int>, new();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Setting Name through Interface Implementation C#\nDESCRIPTION: This snippet implements the `WithName` method from the `IWithName` interface. It sets the `FirstName` and `LastName` properties of the `Student` object using reflection via the `firstNamePropertyInfo` and `lastNamePropertyInfo` fields. It returns the current instance (`this`) cast to `IWithProperty2` for fluent chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nIWithProperty2 IWithName.WithName(string firstName, string lastName)\n{\n    CreateStudent.firstNamePropertyInfo.SetValue(student, firstName);\n    CreateStudent.lastNamePropertyInfo.SetValue(student, lastName);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface ICreateStudent (C#)\nDESCRIPTION: Defines the initial interface for the fluent API, inheriting from IBornOnWithFriends.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IBornOnWithFriends\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Property Setter: WithProperty2 to WithProperty5\nDESCRIPTION: Defines the instance methods to set the properties `Property2` to `Property5` of the `Student` object. Each method takes a corresponding property and returns the next interface in the chain. This allows for method chaining in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    IWithProperty3 IWithProperty2.WithProperty2(T2 property2)\n    {\n        student.Property2 = property2;\n        return this;\n    }\n\n    IWithProperty4 IWithProperty3.WithProperty3(T3 property3)\n    {\n        student.Property3 = property3;\n        return this;\n    }\n\n    IWithProperty5 IWithProperty4.WithProperty4(T4 property4)\n    {\n        student.Property4 = property4;\n        return this;\n    }\n\n    IMethod1 IWithProperty5.WithProperty5(T5 property5)\n    {\n        student.Property5 = property5;\n        return this;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces C#\nDESCRIPTION: This code defines the interfaces `ICreateStudent` and `IWithName` that are part of the Fluent API. `ICreateStudent` extends `IWithName`. `IWithName` specifies methods for setting the student's name.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationPrivateSetClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    Student WithName(string name);\n\n    Student WhoseNameIsUnknown();\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesA with array of Address\nDESCRIPTION: This snippet shows how to set the AddressesA property of a Student object using a variable number of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesA(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesA);\n```\n\n----------------------------------------\n\nTITLE: Implementing IBornOn Fluent API Step in C#\nDESCRIPTION: This C# snippet implements the `IBornOn.BornOn` method, setting the `DateOfBirth` property of the internal `student` object using reflection. It uses the pre-initialized `dateOfBirthPropertyInfo` and returns the current instance (`this`) to allow chaining to the next step in the fluent API (the `IInSemester` interface).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedSetters/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        CreateStudent.dateOfBirthPropertyInfo.SetValue(student, dateOfBirth);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo Objects for Student\nDESCRIPTION: This static constructor initializes `PropertyInfo` objects for the `name`, `dateOfBirth`, and `semester` properties of the `Student` class. These `PropertyInfo` objects are later used to set the values of these properties using reflection within the Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordPrimaryConstructor/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    namePropertyInfo = typeof(Student).GetProperty(\"name\", BindingFlags.Instance | BindingFlags.Public)!;\n    dateOfBirthPropertyInfo = typeof(Student).GetProperty(\"dateOfBirth\", BindingFlags.Instance | BindingFlags.Public)!;\n    semesterPropertyInfo = typeof(Student).GetProperty(\"semester\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Invocation using Reflection in C#\nDESCRIPTION: These methods (Method1, Method2, Method3) are part of the fluent API and invoke the corresponding private generic methods on the Student instance using reflection.  They use MakeGenericMethod to bind the type parameters and Invoke to execute the method, passing in the required parameters. Each method returns the next interface in the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithPrivateGenericMethods/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIMethod2 IMethod1.Method1<T6, T7, T8, T9>(T6 p1, T7 p2, T8 p3, T9 p4)\n    {\n        CreateStudent<T1, T2, T3, T4, T5>.method1MethodInfo.MakeGenericMethod(typeof(T6), typeof(T7), typeof(T8), typeof(T9)).Invoke(student, new object?[] { p1, p2, p3, p4 });\n        return this;\n    }\n\n    IMethod3 IMethod2.Method2<T6, T7, T8, T9>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)\n    {\n        CreateStudent<T1, T2, T3, T4, T5>.method2MethodInfo.MakeGenericMethod(typeof(T6), typeof(T7), typeof(T8), typeof(T9)).Invoke(student, new object?[] { p1, p2, p3, p4, p5, p6, p7, p8, p9 });\n        return this;\n    }\n\n    Student<T1, T2, T3, T4, T5> IMethod3.Method3<T6, T7, T8, T9>(T1 p1)\n    {\n        CreateStudent<T1, T2, T3, T4, T5>.method3MethodInfo.MakeGenericMethod(typeof(T6), typeof(T7), typeof(T8), typeof(T9)).Invoke(student, new object?[] { p1 });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Property2 and Returning Student C#\nDESCRIPTION: This snippet defines the `WithProperty2` method that sets the `Property2` property using reflection. This is the final step in the fluent API. It returns the fully populated `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithProperty2.WithProperty2(string property2)\n{\n    CreateStudent.property2PropertyInfo.SetValue(student, property2);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressC with lambda Address creation\nDESCRIPTION: This snippet demonstrates setting AddressC using a lambda expression to create an Address.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressC(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressC);\n```\n\n----------------------------------------\n\nTITLE: Initializing AddressesG to Zero in Fluent API (C#)\nDESCRIPTION: This method initializes the 'addressesG' property of a 'Student' object to an empty array of nullable 'Address' objects using reflection. It returns the modified 'Student' object. The method belongs to the fluent API interface IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesG()\n    {\n        CreateStudent.addressesGPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[0]);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressD with Single Address C#\nDESCRIPTION: This code snippet shows how to set a single Address object to the Student's AddressesD property. It initializes a new HashSet with the specified Address object. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressD)\n    {\n        student.AddressesD = new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(1){ addressD };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing IWhoseFriendsAre Interface (Single Friend) in C#\nDESCRIPTION: This method `WhoseFriendIs` implements the `IWhoseFriendsAre` interface, taking a single friend (string) as input, and assigning it as a list to the `Friends` property of the student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendIs(string friend)\n{\n    student.Friends = new List<string>(1){ friend };\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICreateStudent Interface C#\nDESCRIPTION: Defines the ICreateStudent interface, which inherits from IWithName. This indicates that a Student object can be created, starting with the 'WithName' method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n    {\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressF with Single Address C#\nDESCRIPTION: This code snippet shows how to set a single Address object to the Student's AddressesF property. It assigns an array containing the address. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressF(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address? addressF)\n    {\n        student.AddressesF = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[1]{ addressF };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Builder Class Definition\nDESCRIPTION: Defines the main class `CreateStudent` with generic type parameters and implements multiple interfaces, representing different stages of the fluent API. It includes property setting and method invocation steps. The class is constrained with where clauses on the generic parameters, ensuring the correct types are used.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent<T1, T2, T3, T4, T5> :\n    CreateStudent<T1, T2, T3, T4, T5>.ICreateStudent,\n    CreateStudent<T1, T2, T3, T4, T5>.IWithProperty1,\n    CreateStudent<T1, T2, T3, T4, T5>.IWithProperty2,\n    CreateStudent<T1, T2, T3, T4, T5>.IWithProperty3,\n    CreateStudent<T1, T2, T3, T4, T5>.IWithProperty4,\n    CreateStudent<T1, T2, T3, T4, T5>.IWithProperty5,\n    CreateStudent<T1, T2, T3, T4, T5>.IMethod1,\n    CreateStudent<T1, T2, T3, T4, T5>.IMethod2,\n    CreateStudent<T1, T2, T3, T4, T5>.IMethod3\n    where T1 : class\n    where T2 : class?\n    where T3 : struct\n    where T4 : notnull\n    where T5 : new()\n{\n    private readonly Student<T1, T2, T3, T4, T5> student;\n\n    private CreateStudent()\n    {\n        student = new Student<T1, T2, T3, T4, T5>();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent<T1, T2, T3, T4, T5>();\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Int Return Method with Ref Parameter in C#\nDESCRIPTION: This snippet demonstrates the implementation of a static method ReturnIntMethodWithRefParameter that creates an instance of CreateStudent, calls the ReturnIntMethodWithRefParameter on the student object using a ref parameter string, and returns the integer value obtained from that call.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static int ReturnIntMethodWithRefParameter(ref string s)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        return createStudent.student.ReturnIntMethodWithRefParameter(ref s);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesG with Lambda Creation C#\nDESCRIPTION: This snippet demonstrates setting the AddressesG property of a Student object by using lambda expressions to create Address objects. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesG(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?>[]? createAddressesG)\n    {\n        student.AddressesG = createAddressesG?.Select(createAddressG => createAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())).ToArray();\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressF with Lambda Creation C#\nDESCRIPTION: This snippet sets the AddressesF property of a Student object by using a lambda expression to create a single Address object. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressF(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?> createAddressF)\n    {\n        student.AddressesF = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[1]{ createAddressF(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Student with No Friends in C#\nDESCRIPTION: This static method `WhoHasNoFriends` creates a `Student` object and initializes its `Friends` property with an empty list. It represents the scenario where a student has no friends specified.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WhoHasNoFriends()\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new List<string>(0);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AddressB to Student as Array (C#)\nDESCRIPTION: The `WithAddressesB` method sets the `AddressesB` property using an `IReadOnlyCollection`, or an array of `Address` objects, or an array of funcs. It then creates a standard array to set the PropertyInfo.SetValue.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesB(System.Collections.Generic.IReadOnlyCollection<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address> addressesB)\n{\n    CreateStudent.addressesBPropertyInfo.SetValue(student, addressesB);\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesB(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[] addressesB)\n{\n    CreateStudent.addressesBPropertyInfo.SetValue(student, addressesB);\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesB(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>[] createAddressesB)\n{\n    CreateStudent.addressesBPropertyInfo.SetValue(student, createAddressesB.Select(createAddressB => createAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep())).ToArray());\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Named Methods in C#\nDESCRIPTION: These snippets implement the 'INamedNamed' interface with overloaded 'Named' methods. They use reflection to call the underlying 'Named' methods on the 'student' object. This ensures that the fluent API correctly calls the appropriate method based on the provided parameters.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/OverloadedMethodClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent INamedNamed.Named(string firstName, string lastName)\n    {\n        CreateStudent.namedMethodInfo.Invoke(student, new object?[] { firstName, lastName });\n        return student;\n    }\n\n    Student INamedNamed.Named(string lastName)\n    {\n        CreateStudent.namedMethodInfo2.Invoke(student, new object?[] { lastName });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Property1 Using Static Method\nDESCRIPTION: This snippet shows a static method, `WithProperty1`, that creates a `CreateStudent` instance, sets the `Property1` of the underlying `Student` object, and returns the `Student` instance directly. This method provides an alternative way to set `Property1` without using the full fluent interface, useful when only one property needs to be set.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student<T1, T2> WithProperty1(T1 property1)\n    {\n        CreateStudent<T1, T2> createStudent = new CreateStudent<T1, T2>();\n        createStudent.student.Property1 = property1;\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces for Fluent API Steps C#\nDESCRIPTION: This snippet defines the interfaces that structure the fluent API for creating the `Student` object. `ICreateStudent` inherits from `IWithName`, defining the initial step. `IWithName` requires a `WithName` method. `IWithDetails` requires the `WithDetails` method and represents the final step in the builder pattern.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCompoundClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    IWithDetails WithName(string name);\n}\n\npublic interface IWithDetails\n{\n    Student WithDetails(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Address address, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Phone phone);\n\n    Student WithDetails(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Address> createAddress, Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.CreatePhone.ICreatePhone, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCompoundClass.Phone> createPhone);\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressD with Address\nDESCRIPTION: This snippet shows how to set the AddressD property of a Student object with an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressD);\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Friend\nDESCRIPTION: This snippet provides a method to set a single friend for the Student object. It initializes a CreateStudent, sets the Friends property to an array containing only the provided friend, and returns IWithPets.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithPets WhoseFriendIs(object friend)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new object[1]{ friend };\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Pet in C#\nDESCRIPTION: This snippet demonstrates how to set a single pet.  It creates a string array of size 1 containing the pet's name, assigns it to the `student.Pets` property, and returns an object that implements `IWithBackpackContent` for further customization.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPet(string pet)\n    {\n        student.Pets = new string[1]{ pet };\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesF from Array - C#\nDESCRIPTION: This code snippet sets the `addressesF` property of a `Student` object by directly assigning an array of nullable `Address` objects to it. The `addressesFPropertyInfo` is used to set the property's value via reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesFPropertyInfo.SetValue(student, addressesF);\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesF with Lambda Creation C#\nDESCRIPTION: This snippet demonstrates setting the AddressesF property of a Student object by using lambda expressions to create Address objects.  Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesF(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?>[] createAddressesF)\n    {\n        student.AddressesF = createAddressesF.Select(createAddressF => createAddressF(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())).ToArray();\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Pets Using Params Array in C#\nDESCRIPTION: This code snippet allows setting the `Pets` property of the `Student` object using a `params string[]`. It accepts a variable number of pet names as input, assigns them to the `student.Pets` property, and returns an object implementing the `IWithBackpackContent` interface for chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPets(params string[] pets)\n    {\n        student.Pets = pets;\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Date of Birth in C#\nDESCRIPTION: This snippet demonstrates setting the date of birth for a `Student` object. It uses `MethodInfo.Invoke` to call the `BornOn` method, passing the `dateOfBirth` as a parameter. The method returns `this` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IOfAgeBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        CreateStudent.bornOnMethodInfo.Invoke(student, new object?[] { dateOfBirth });\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Private Field Using Reflection (C#)\nDESCRIPTION: This code snippet demonstrates how to set the value of a private field named 'semester' on a 'Student' object using reflection. The 'semesterFieldInfo.SetValue' method is used to accomplish this. It takes the Student object and semester value as input.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFieldClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.semesterFieldInfo.SetValue(createStudent.student, semester);\n```\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.semesterFieldInfo.SetValue(student, semester);\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Invocation: Method1\nDESCRIPTION: Defines the instance method to invoke the `Method1` on the `Student` object. This method takes four generic parameters and corresponding parameters, invokes the method, and returns the next interface in the chain (`IMethod2`).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n    IMethod2 IMethod1.Method1<T6, T7, T8, T9>(T6 p1, T7 p2, T8 p3, T9 p4)\n    {\n        student.Method1<T6, T7, T8, T9>(p1, p2, p3, p4);\n        return this;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API in C#\nDESCRIPTION: This code defines a fluent API for creating a `Student` object. It provides interfaces `ICreateStudent` and `IInSemester` that allow setting the `Semester` property through method chaining. It uses reflection to access and set the `Semester` property of the `Student` class. The `InSemester` methods set the semester and return the student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GetInitPropertyClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nusing System.Reflection;\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.GetInitPropertyClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly PropertyInfo semesterPropertyInfo;\n\n    static CreateStudent()\n    {\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.semesterPropertyInfo.SetValue(createStudent.student, semester);\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: InSemester Method for Setting Semester in C#\nDESCRIPTION: The `InSemester` method sets the `Semester` property of the `Student` object. It takes an integer `semester` as input and assigns it to the `Semester` property. There are two overloaded `InSemester` methods: one static method and another implementation of the `IInSemester` interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateConstructorClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student InSemester(int semester)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Semester = semester;\n    return createStudent.student;\n}\n\nStudent IInSemester.InSemester(int semester)\n{\n    student.Semester = semester;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Class C#\nDESCRIPTION: This snippet initializes the 'CreateStudent' class. It contains the implementation of fluent methods to create a 'Student' object, setting its properties using method chaining. It defines the interfaces for each step of the fluent API and implements them in the 'CreateStudent' class.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaRecursiveClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithFriend\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithFriend WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IWithFriend IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    Student IWithFriend.WithFriend(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.Student? friend)\n    {\n        student.Friend = friend;\n        return student;\n    }\n\n    Student IWithFriend.WithFriend(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.CreateStudent.ICreateStudent, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.Student?> createFriend)\n    {\n        student.Friend = createFriend(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.CreateStudent.InitialStep());\n        return student;\n    }\n\n    Student IWithFriend.WithoutFriend()\n    {\n        student.Friend = null;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IWithFriend WithName(string name);\n    }\n\n    public interface IWithFriend\n    {\n        Student WithFriend(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.Student? friend);\n\n        Student WithFriend(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.CreateStudent.ICreateStudent, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaRecursiveClass.Student?> createFriend);\n\n        Student WithoutFriend();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Class with Fluent API in C#\nDESCRIPTION: This C# code defines a 'CreateStudent' class that implements a fluent API to create 'Student' objects. The 'isHappy' property of the 'Student' class, which is a private field, is accessed and set using reflection. The code defines interfaces 'ICreateStudent' and 'IWhoIsHappy' to structure the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PredicatePrivateFieldClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nusing System.Reflection;\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.PredicatePrivateFieldClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWhoIsHappy\n{\n    private readonly Student student;\n    private static readonly FieldInfo isHappyFieldInfo;\n\n    static CreateStudent()\n    {\n        isHappyFieldInfo = typeof(Student).GetField(\"isHappy\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WhoIsHappy(bool isHappy = true)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.isHappyFieldInfo.SetValue(createStudent.student, isHappy);\n        return createStudent.student;\n    }\n\n    public static Student WhoIsSad()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.isHappyFieldInfo.SetValue(createStudent.student, false);\n        return createStudent.student;\n    }\n\n    Student IWhoIsHappy.WhoIsHappy(bool isHappy)\n    {\n        CreateStudent.isHappyFieldInfo.SetValue(student, isHappy);\n        return student;\n    }\n\n    Student IWhoIsHappy.WhoIsSad()\n    {\n        CreateStudent.isHappyFieldInfo.SetValue(student, false);\n        return student;\n    }\n\n    public interface ICreateStudent : IWhoIsHappy\n    {\n    }\n\n    public interface IWhoIsHappy\n    {\n        Student WhoIsHappy(bool isHappy = true);\n\n        Student WhoIsSad();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (int, string)\nDESCRIPTION: This static method creates a `Student` object and calls the `Method1` method on it with an integer and a string. It directly instantiates `CreateStudent`, calls `student.Method1(p1, p2)`, and returns the resulting `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1(int p1, string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1(p1, p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesA\nDESCRIPTION: This snippet shows how to set zero addresses for the AddressesA property using a Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesA();\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesD with HashSet\nDESCRIPTION: This snippet shows how to set the AddressesD property using a HashSet of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesD(System.Collections.Generic.HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> addressesD);\n```\n\n----------------------------------------\n\nTITLE: Set Name Property to Null C#\nDESCRIPTION: This code defines a static method `WhoseNameIsUnknown` which sets the `Name` property of the `Student` object to null using reflection and returns the created student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationPrivateSetClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WhoseNameIsUnknown()\n{\n    CreateStudent createStudent = new CreateStudent();\n    CreateStudent.namePropertyInfo.SetValue(createStudent.student, null);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Student Object with Reflection (C#)\nDESCRIPTION: This code snippet initializes a `Student` object using reflection because the class has a private constructor. It uses `Activator.CreateInstance` with appropriate `BindingFlags` to access the non-public constructor and create an instance of the `Student` class.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateConstructor/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate CreateStudent()\n{\n    student = (Student<T1, T2>) Activator.CreateInstance(typeof(Student<T1, T2>), BindingFlags.Instance | BindingFlags.NonPublic, null, new object?[] { null, null }, null)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesE with Lambda Creation C#\nDESCRIPTION: This snippet demonstrates setting the AddressesE property of a Student object by using lambda expressions to create Address objects. It takes an array of Func delegates which when executed with an initial step, returns an Address object. These Address objects are then assigned to the Student's AddressesE property. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesE(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[]? createAddressesE)\n    {\n        student.AddressesE = createAddressesE?.Select(createAddressE => createAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())).ToArray();\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressD with Lambda - C#\nDESCRIPTION: This code snippet sets the `addressesD` property (a `HashSet<Address>`) to a new `HashSet` containing a single `Address` instance created by the provided lambda function.  The lambda receives an `ICreateAddress` and should return an `Address` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesDPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(1){ createAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()) });\n```\n\n----------------------------------------\n\nTITLE: Initial Step Method in C#\nDESCRIPTION: The `InitialStep` method is the starting point of the fluent API. It returns an instance of the `CreateStudent` class, which implements the `ICreateStudent` interface. This allows the user to start chaining methods to configure the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateConstructorClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesB\nDESCRIPTION: This snippet shows how to set zero addresses for the AddressesB property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesB();\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo for Student Properties (C#)\nDESCRIPTION: This static constructor initializes `PropertyInfo` objects for each property of the `Student` class that needs to be set via the fluent API. It uses reflection to retrieve the `PropertyInfo` based on the property name and binding flags.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    namePropertyInfo = typeof(Student).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesAPropertyInfo = typeof(Student).GetProperty(\"AddressesA\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesBPropertyInfo = typeof(Student).GetProperty(\"AddressesB\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesCPropertyInfo = typeof(Student).GetProperty(\"AddressesC\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesDPropertyInfo = typeof(Student).GetProperty(\"AddressesD\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesEPropertyInfo = typeof(Student).GetProperty(\"AddressesE\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesFPropertyInfo = typeof(Student).GetProperty(\"AddressesF\", BindingFlags.Instance | BindingFlags.Public)!;\n    addressesGPropertyInfo = typeof(Student).GetProperty(\"AddressesG\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressB with Address\nDESCRIPTION: This snippet demonstrates setting a single AddressB property using an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressB);\n```\n\n----------------------------------------\n\nTITLE: Implementing List Return Method in C#\nDESCRIPTION: This snippet demonstrates the implementation of a static method ReturnListMethod that creates an instance of CreateStudent, calls the ReturnListMethod on the student object, and returns the list of integers obtained from that call.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.Collections.Generic.List<int> ReturnListMethod()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        return createStudent.student.ReturnListMethod();\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Student Creation with Fluent API\nDESCRIPTION: This snippet demonstrates the initial step in the fluent API to create a `Student` object.  The `InitialStep()` method returns an instance of the `CreateStudent` class, implementing the `ICreateStudent` interface, which starts the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressD with Lambda Creation C#\nDESCRIPTION: This snippet sets the AddressesD property of a Student object by using a lambda expression to create a single Address object. The lambda expression takes an ICreateAddress object as input and returns the created Address. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressD(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressD)\n    {\n        student.AddressesD = new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(1){ createAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class in C#\nDESCRIPTION: This code snippet defines the `CreateStudent` class, which acts as a fluent builder for creating `Student` objects. It implements multiple interfaces that define the steps in the fluent API. The class uses a private constructor and static methods to initiate the building process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableTwoLoopsClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithMember0,\n    CreateStudent.IWithMember1WithMember1B,\n    CreateStudent.IWithMember0WithMember1WithMember1B,\n    CreateStudent.IWithMember2,\n    CreateStudent.IWithMember3,\n    CreateStudent.IWithMember4WithMember4B,\n    CreateStudent.IWithMember3WithMember4WithMember4B,\n    CreateStudent.IWithMember5\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMember1WithMember1B WithMember0(string? member0)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member0 = member0;\n        return createStudent;\n    }\n\n    public static IWithMember0 WithMember1(string? member1)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1 = member1;\n        return createStudent;\n    }\n\n    public static IWithMember2 WithMember1B(string? member1B)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1B = member1B;\n        return createStudent;\n    }\n\n    IWithMember1WithMember1B IWithMember0WithMember1WithMember1B.WithMember0(string? member0)\n    {\n        student.Member0 = member0;\n        return this;\n    }\n\n    IWithMember0 IWithMember0WithMember1WithMember1B.WithMember1(string? member1)\n    {\n        student.Member1 = member1;\n        return this;\n    }\n\n    IWithMember2 IWithMember0WithMember1WithMember1B.WithMember1B(string? member1B)\n    {\n        student.Member1B = member1B;\n        return this;\n    }\n\n    IWithMember3 IWithMember2.WithMember2(string? member2)\n    {\n        student.Member2 = member2;\n        return this;\n    }\n\n    IWithMember4WithMember4B IWithMember3WithMember4WithMember4B.WithMember3(string? member3)\n    {\n        student.Member3 = member3;\n        return this;\n    }\n\n    IWithMember3 IWithMember3WithMember4WithMember4B.WithMember4(string? member4)\n    {\n        student.Member4 = member4;\n        return this;\n    }\n\n    IWithMember5 IWithMember3WithMember4WithMember4B.WithMember4B(string? member4B)\n    {\n        student.Member4B = member4B;\n        return this;\n    }\n\n    Student IWithMember5.WithMember5(string? member5)\n    {\n        student.Member5 = member5;\n        return student;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Fluent API\nDESCRIPTION: This snippet defines the `CreateStudent` class with its nested interfaces and static methods for creating `Student` objects. It initializes the `friendsPropertyInfo` using reflection to access and set the `Friends` property of the `Student` class.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionNullableArrayClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWhoseFriendsAre\n{\n    private readonly Student student;\n    private static readonly PropertyInfo friendsPropertyInfo;\n\n    static CreateStudent()\n    {\n        friendsPropertyInfo = typeof(Student).GetProperty(\"Friends\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student WhoseFriendsAre(params string[]? friends)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.friendsPropertyInfo.SetValue(createStudent.student, friends);\n        return createStudent.student;\n    }\n\n    public static Student WhoseFriendIs(string friend)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.friendsPropertyInfo.SetValue(createStudent.student, new string[1]{ friend });\n        return createStudent.student;\n    }\n\n    public static Student WhoHasNoFriends()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.friendsPropertyInfo.SetValue(createStudent.student, new string[0]);\n        return createStudent.student;\n    }\n\n    Student IWhoseFriendsAre.WhoseFriendsAre(params string[]? friends)\n    {\n        CreateStudent.friendsPropertyInfo.SetValue(student, friends);\n        return student;\n    }\n\n    Student IWhoseFriendsAre.WhoseFriendIs(string friend)\n    {\n        CreateStudent.friendsPropertyInfo.SetValue(student, new string[1]{ friend });\n        return student;\n    }\n\n    Student IWhoseFriendsAre.WhoHasNoFriends()\n    {\n        CreateStudent.friendsPropertyInfo.SetValue(student, new string[0]);\n        return student;\n    }\n\n    public interface ICreateStudent : IWhoseFriendsAre\n    {\n    }\n\n    public interface IWhoseFriendsAre\n    {\n        Student WhoseFriendsAre(params string[]? friends);\n\n        Student WhoseFriendIs(string friend);\n\n        Student WhoHasNoFriends();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property1 Through Interface Implementation (C#)\nDESCRIPTION: This method, part of the `IWithProperty1WithProperty2` interface implementation, sets the `Property1` of the `student` object and returns the `student` object, allowing for method chaining in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateConstructor/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent<T1, T2> IWithProperty1WithProperty2.WithProperty1(T1 property1)\n{\n    student.Property1 = property1;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property2 Through Interface Implementation (C#)\nDESCRIPTION: This method, part of the `IWithProperty1WithProperty2` interface implementation, sets the `Property2` of the `student` object and returns the `student` object, allowing for method chaining in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateConstructor/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent<T1, T2> IWithProperty1WithProperty2.WithProperty2(T2 property2)\n{\n    student.Property2 = property2;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Method with Ref Parameter Fluent API\nDESCRIPTION: This snippet shows the implementation of the `MethodWithRefParameter` method, which accepts an integer parameter passed by reference using the `ref` keyword. It calls the corresponding method on the underlying `Student` object and returns an instance of `IMethodWithInParameter` to continue the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIMethodWithInParameter IMethodWithRefParameter.MethodWithRefParameter(ref int n1)\n{\n    student.MethodWithRefParameter(ref n1);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesB with array of Address\nDESCRIPTION: This snippet demonstrates setting AddressesB property using a variable number of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesB(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesB);\n```\n\n----------------------------------------\n\nTITLE: Creating Student Fluent API Class\nDESCRIPTION: This code snippet defines the `CreateStudent` class which implements a Fluent API for creating `Student` objects. It includes nested interfaces for method chaining (ICreateStudent, IWhoseFriendsAre, IWithPets, IWithBackpackContent) and methods to set properties like `Friends`, `Pets`, and `BackpackContent`. The class uses method overloading to handle both `List<string>` and `string[]` for the `Friends` property and `HashSet<string>` and `string[]` for the `BackpackContent` property, providing flexibility in data input.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClassWithSuppression/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWhoseFriendsAre,\n    CreateStudent.IWithPets,\n    CreateStudent.IWithBackpackContent\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithPets WhoseFriendsAre(System.Collections.Generic.List<string> friends)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Friends = friends;\n        return createStudent;\n    }\n\n    public static IWithPets WhoseFriendsAre(params string[] friends)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Friends = new List<string>(friends);\n        return createStudent;\n    }\n\n    IWithPets IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.List<string> friends)\n    {\n        student.Friends = friends;\n        return this;\n    }\n\n    IWithPets IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)\n    {\n        student.Friends = new List<string>(friends);\n        return this;\n    }\n\n    IWithBackpackContent IWithPets.WithPets(params string[] pets)\n    {\n        student.Pets = pets;\n        return this;\n    }\n\n    Student IWithBackpackContent.WithBackpackContent(System.Collections.Generic.HashSet<string> backpackContent)\n    {\n        student.BackpackContent = backpackContent;\n        return student;\n    }\n\n    Student IWithBackpackContent.WithBackpackContent(params string[] backpackContent)\n    {\n        student.BackpackContent = new HashSet<string>(backpackContent);\n        return student;\n    }\n\n    public interface ICreateStudent : IWhoseFriendsAre\n    {\n    }\n\n    public interface IWhoseFriendsAre\n    {\n        IWithPets WhoseFriendsAre(System.Collections.Generic.List<string> friends);\n\n        IWithPets WhoseFriendsAre(params string[] friends);\n    }\n\n    public interface IWithPets\n    {\n        IWithBackpackContent WithPets(params string[] pets);\n    }\n\n    public interface IWithBackpackContent\n    {\n        Student WithBackpackContent(System.Collections.Generic.HashSet<string> backpackContent);\n\n        Student WithBackpackContent(params string[] backpackContent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesA with lambda Address creation\nDESCRIPTION: This snippet shows how to set the AddressesA property of a Student object using lambda expressions to create Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesA(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesA);\n```\n\n----------------------------------------\n\nTITLE: Calling a Generic Method with Constraints Using Fluent API\nDESCRIPTION: This snippet demonstrates the Method1 function, which is a generic method with nine type parameters, each subject to different constraints (class, class?, struct, notnull, new(), unmanaged, and interface implementations). It creates a CreateStudent instance, calls the corresponding generic method on the underlying student object, and returns the Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericMethodWithConstraintsClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)\n    where T1 : class\n    where T2 : class?\n    where T3 : struct\n    where T4 : notnull\n    where T5 : new()\n    where T6 : unmanaged\n    where T7 : System.Collections.Generic.List<int>, System.Collections.Generic.IDictionary<int, string>\n    where T8 : class, System.Collections.Generic.IDictionary<int, string>\n    where T9 : System.Collections.Generic.List<int>, new()\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<T1, T2, T3, T4, T5, T6, T7, T8, T9>(p1, p2, p3, p4, p5, p6, p7, p8, p9);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressF - C#\nDESCRIPTION: This code snippet sets the `addressesF` property of a `Student` object to a new array containing a single nullable `Address` object.  The value is set using reflection via the `addressesFPropertyInfo`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesFPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[1]{ addressF });\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesC - C#\nDESCRIPTION: This code snippet sets the `addressesC` property of a `Student` object to an empty array of `Address` objects using `PropertyInfo.SetValue`. This effectively clears any existing addresses stored in the `addressesC` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesCPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[0]);\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressA with lambda Address creation\nDESCRIPTION: This snippet shows how to set a single AddressA property of a Student object using a lambda expression to create an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressA(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressA);\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressE with Lambda - C#\nDESCRIPTION: This code sets the `addressesE` property to a new array containing one `Address` element. This `Address` is created via a lambda function that takes `ICreateAddress` and returns a new `Address`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesEPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[1]{ createAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()) });\n```\n\n----------------------------------------\n\nTITLE: Invoking List Method via Reflection - C#\nDESCRIPTION: The `ReturnListMethod` method invokes the private `ReturnListMethod` of the `Student` object using reflection. It retrieves the List<int> result from the invocation and returns it.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Collections.Generic.List<int> IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnListMethod()\n    {\n        return (System.Collections.Generic.List<int>) CreateStudent.returnListMethodMethodInfo.Invoke(student, new object?[] {  })!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Invoking Method with Ref Parameter via Reflection - C#\nDESCRIPTION: The `ReturnIntMethodWithRefParameter` method invokes the private `ReturnIntMethodWithRefParameter` of the `Student` object using reflection. It handles a `ref` parameter, passing it to the invoked method and updating it after the invocation. The integer result is also returned.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nint IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethodWithRefParameter(ref string s)\n    {\n        object?[] args = new object?[] { s };\n        int result = (int) CreateStudent.returnIntMethodWithRefParameterMethodInfo.Invoke(student, args)!;\n        s = (string) args[0]!;\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Backpack Content using ICollection\nDESCRIPTION: This snippet defines a method for setting the 'BackpackContent' property of the Student object using an ICollection. It returns the Student object upon completion.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(System.Collections.ICollection backpackContent)\n{\n    student.BackpackContent = backpackContent;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Definition: WithZeroAddressesG\nDESCRIPTION: This C# code snippet defines a method 'WithZeroAddressesG' in the 'Student' class. This method likely clears or initializes the address collection to have no addresses. It returns a 'Student' object, enabling method chaining in a fluent API style.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesG();\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesC with array of Address\nDESCRIPTION: This snippet demonstrates setting the AddressesC property with a variable number of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesC(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesC);\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressF with Lambda - C#\nDESCRIPTION: This code snippet sets the `addressesF` property to a new array containing one element, which is the result of executing the provided lambda function `createAddressF`.  The lambda function receives an `ICreateAddress` and returns a nullable `Address`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesFPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[1]{ createAddressF(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()) });\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesD from Array - C#\nDESCRIPTION: This snippet takes a variable number of `Address` objects as input, converts them into a `HashSet<Address>`, and then sets the `addressesD` property of the `Student` object using reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesDPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(addressesD));\n```\n\n----------------------------------------\n\nTITLE: Invoking MethodWithRefParameter via Reflection\nDESCRIPTION: This method invokes the MethodWithRefParameter method on the Student instance using reflection. It handles the 'ref' parameter by passing the parameter in an object array to Invoke and then updating the original variable with the value returned by the invoked method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIMethodWithInParameter IMethodWithRefParameter.MethodWithRefParameter(ref int n1)\n    {\n        object?[] args = new object?[] { n1 };\n        CreateStudent.methodWithRefParameterMethodInfo.Invoke(student, args);\n        n1 = (int) args[0]!;\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Fluent API for Student Creation in C#\nDESCRIPTION: This code snippet initializes the 'CreateStudent' class with static fields that hold the MethodInfo objects for the overloaded 'Named' methods of the 'Student' class. It retrieves these MethodInfo objects using reflection within a static constructor to ensure they are initialized only once. These methods are then used to set the student's name within the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/OverloadedMethodClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        namedMethodInfo = typeof(Student).GetMethod(\n            \"Named\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string), typeof(string) },\n            null)!;\n        namedMethodInfo2 = typeof(Student).GetMethod(\n            \"Named\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces C#\nDESCRIPTION: Defines the interfaces `ICreateStudent` and `IInSemester` which are used to structure the fluent API.  `ICreateStudent` inherits from `IInSemester` to enforce that setting the semester is the first step.  `IInSemester` defines the `InSemester` method, which accepts an integer for the semester.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PublicReadonlyFieldClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IInSemester\n{\n}\n\npublic interface IInSemester\n{\n    Student InSemester(int semester);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking MethodWithOutParameter via Reflection\nDESCRIPTION: This method invokes the MethodWithOutParameter method on the Student instance using reflection. It handles the 'out' parameter by passing a null value in the object array and then updating the original variable with the returned value after the Invoke method completes.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIMethodWithRefInAndOutParameter IMethodWithOutParameter.MethodWithOutParameter(out int n3)\n    {\n        object?[] args = new object?[] { null };\n        CreateStudent.methodWithOutParameterMethodInfo.Invoke(student, args);\n        n3 = (int) args[0]!;\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesC using Lambda Expression - C#\nDESCRIPTION: This code snippet sets the 'addressesC' property of a 'Student' object using a lambda expression. It first calls a lambda function `createAddressC` that takes an `ICreateAddress` instance, then converts the result to an array and sets it as the value of the 'addressesC' property using reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesCPropertyInfo.SetValue(student, createAddressesC.Select(createAddressC => createAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep())).ToArray());\n```\n\n----------------------------------------\n\nTITLE: Setting Student Name Using Fluent API C#\nDESCRIPTION: This snippet demonstrates two methods for setting the student's name using the fluent API. One is a static method that creates a new instance of the builder, and the other is an interface implementation that modifies the existing instance. Both methods return an `IWithDetails` interface to proceed to the next step.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaCompoundClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithDetails WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Name = name;\n    return createStudent;\n}\n\nIWithDetails IWithName.WithName(string name)\n{\n    student.Name = name;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Happiness with Nullable Boolean in C#\nDESCRIPTION: The `WhoIsHappy` method sets the `IsHappy` property of the `Student` object using the provided nullable boolean value. Reflection is used to set the property value dynamically. The method returns the fully configured `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoIsHappy.WhoIsHappy(bool? isHappy)\n{\n    CreateStudent.isHappyPropertyInfo.SetValue(student, isHappy);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property2 Using Static Method\nDESCRIPTION: This snippet shows a static method, `WithProperty2`, that creates a `CreateStudent` instance, sets the `Property2` of the underlying `Student` object, and returns the `Student` instance directly. This method offers a direct way to set `Property2` without requiring the complete fluent API usage, suitable when only `Property2` needs to be configured.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student<T1, T2> WithProperty2(T2 property2)\n    {\n        CreateStudent<T1, T2> createStudent = new CreateStudent<T1, T2>();\n        createStudent.student.Property2 = property2;\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Interfaces C#\nDESCRIPTION: Defines the nested interfaces that form the structure of the Fluent API. These interfaces enforce the order in which the properties of the `Student` object must be set.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberStruct/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    IBornOn WithName(string name);\n}\n\npublic interface IBornOn\n{\n    IInSemester BornOn(System.DateOnly dateOfBirth);\n}\n\npublic interface IInSemester\n{\n    Student InSemester(int semester);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (in T, string) with Generics S, T\nDESCRIPTION: This static method creates a `Student` object and calls the generic `Method1<S, T>` method on it with an in generic type `T` and a string. It instantiates `CreateStudent`, calls `student.Method1<S, T>(in p1, p2)`, and returns the created `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<S, T>(in T p1, string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<S, T>(in p1, p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodInfo for Reflection\nDESCRIPTION: This static constructor initializes MethodInfo objects for each method of the Student class using reflection. It retrieves methods by name and BindingFlags, specifying non-public instance methods and parameter types. The Type.MakeByRefType() method is used to handle ref, in, and out parameters for method retrieval.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        methodWithParamsMethodInfo = typeof(Student).GetMethod(\n            \"MethodWithParams\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int[]) },\n            null)!;\n        methodWithRefParameterMethodInfo = typeof(Student).GetMethod(\n            \"MethodWithRefParameter\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int).MakeByRefType() },\n            null)!;\n        methodWithInParameterMethodInfo = typeof(Student).GetMethod(\n            \"MethodWithInParameter\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int).MakeByRefType() },\n            null)!;\n        methodWithOutParameterMethodInfo = typeof(Student).GetMethod(\n            \"MethodWithOutParameter\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int).MakeByRefType() },\n            null)!;\n        methodWithRefInAndOutParameterMethodInfo = typeof(Student).GetMethod(\n            \"MethodWithRefInAndOutParameter\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int).MakeByRefType(), typeof(int).MakeByRefType(), typeof(int).MakeByRefType() },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing IWhoseFriendsAre Interface (List) in C#\nDESCRIPTION: This method `WhoseFriendsAre` implements the `IWhoseFriendsAre` interface, taking a `System.Collections.Generic.IList<string>` as input and assigning it to the student's `Friends` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.IList<string> friends)\n{\n    student.Friends = friends;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressD using HashSet - C#\nDESCRIPTION: This snippet sets the `addressesD` property (a `HashSet<Address>`) with a single `Address` object. It creates a new `HashSet` with a capacity of 1, adds the given `addressD` to it, and then sets the `addressesD` property of the `student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesDPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(1){ addressD });\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (T, out string) with Generics S, T\nDESCRIPTION: This static method creates a `Student` object and calls the generic `Method1<S, T>` method on it with a generic type `T` and an out string. It instantiates `CreateStudent`, calls `student.Method1<S, T>(p1, out p2)`, and returns the created `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<S, T>(T p1, out string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<S, T>(p1, out p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces for Person Creation in C#\nDESCRIPTION: These interfaces define the structure of the fluent API. Each interface represents a step in the object creation process, specifying which method must be called next. The interfaces ensure that properties are set in a specific order and that all required properties are set before the final object is returned. These interfaces guide the developer through the construction of a `Person` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/PersonClass/CreatePerson.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreatePerson : IWithFirstName\n    {\n    }\n\n    public interface IWithFirstName\n    {\n        IWithMiddleName WithFirstName(string firstName);\n    }\n\n    public interface IWithMiddleName : IWithLastName\n    {\n        IWithLastName WithMiddleName(string? middleName);\n    }\n\n    public interface IWithLastName\n    {\n        IWhoseAddressIsUnknownWhoLivesAtAddressWhoIsADigitalNomad WithLastName(string lastName);\n    }\n\n    public interface IWhoseAddressIsUnknownWhoLivesAtAddressWhoIsADigitalNomad\n    {\n        Person WhoseAddressIsUnknown();\n\n        IWithHouseNumber WhoLivesAtAddress();\n\n        ILivingInCity WhoIsADigitalNomad();\n    }\n\n    public interface IWithHouseNumber\n    {\n        IWithStreet WithHouseNumber(string houseNumber);\n    }\n\n    public interface IWithStreet\n    {\n        IInCity WithStreet(string street);\n    }\n\n    public interface IInCity\n    {\n        Person InCity(string city);\n    }\n\n    public interface ILivingInCity\n    {\n        Person LivingInCity(string city);\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Class Definition (C#)\nDESCRIPTION: Defines the `CreateStudent` class implementing the Fluent API interfaces. The class uses a private `Student` instance and provides methods to set the `Name` and `Address` properties in a specific order. The `WithAddress` method accepts both a direct `Address` object or a function to create one using a Fluent API for the `Address` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaClassInDifferentNamespace/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithName,\n    CreateStudent.IWithAddress\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithAddress WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Name = name;\n        return createStudent;\n    }\n\n    IWithAddress IWithName.WithName(string name)\n    {\n        student.Name = name;\n        return this;\n    }\n\n    Student IWithAddress.WithAddress(SomeOtherNamespace.Address address)\n    {\n        student.Address = address;\n        return student;\n    }\n\n    Student IWithAddress.WithAddress(Func<SomeOtherNamespace.CreateAddress.ICreateAddress, SomeOtherNamespace.Address> createAddress)\n    {\n        student.Address = createAddress(SomeOtherNamespace.CreateAddress.InitialStep());\n        return student;\n    }\n\n    public interface ICreateStudent : IWithName\n    {\n    }\n\n    public interface IWithName\n    {\n        IWithAddress WithName(string name);\n    }\n\n    public interface IWithAddress\n    {\n        Student WithAddress(SomeOtherNamespace.Address address);\n\n        Student WithAddress(Func<SomeOtherNamespace.CreateAddress.ICreateAddress, SomeOtherNamespace.Address> createAddress);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Student Class with Fluent API Attributes in C#\nDESCRIPTION: This code defines a `Student` class and decorates it with the `[FluentApi]` attribute. It also defines a `Semester` property of type `int`, decorates it with the `[FluentMember(0)]` attribute, and provides a public getter and a private setter, making it a fluent member with order 0.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/PublicGetMissingSetClass/Student.fixed.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[FluentApi]\npublic class Student\n{\n    [FluentMember(0)]\n    public int Semester { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Friend in C#\nDESCRIPTION: The `WhoseFriendIs` method allows setting a single friend for the student. Internally, it creates a new string array containing only the given friend and assigns it to the `Friends` property of a new `CreateStudent` instance before returning the `IWhoIsHappy` interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWhoIsHappy WhoseFriendIs(string friend)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new string[1]{ friend };\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesD with array of Address\nDESCRIPTION: This snippet shows how to set the AddressesD property of a Student object with a variable number of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesD(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesD);\n```\n\n----------------------------------------\n\nTITLE: Creating Student using Fluent API in C#\nDESCRIPTION: This code snippet demonstrates the structure of an auto-generated Fluent API builder for the Student class using M31.FluentAPI. It includes interfaces and a class that implement them to allow method chaining for Student object creation and manipulation, using reflection for method invocation. The `CreateStudent` class acts as the builder, providing methods to interact with the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TryBreakFluentApiClass1/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nusing System;\nusing System.Reflection;\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.TryBreakFluentApiClass1;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.ISomeMethod\n{\n    private readonly Student student;\n    private static readonly MethodInfo someMethodMethodInfo;\n\n    static CreateStudent()\n    {\n        someMethodMethodInfo = typeof(Student).GetMethod(\n            \"SomeMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student SomeMethod(string someMethodMethodInfo)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.someMethodMethodInfo.Invoke(createStudent.student, new object?[] { someMethodMethodInfo });\n        return createStudent.student;\n    }\n\n    Student ISomeMethod.SomeMethod(string someMethodMethodInfo)\n    {\n        CreateStudent.someMethodMethodInfo.Invoke(student, new object?[] { someMethodMethodInfo });\n        return student;\n    }\n\n    public interface ICreateStudent : ISomeMethod\n    {\n    }\n\n    public interface ISomeMethod\n    {\n        Student SomeMethod(string someMethodMethodInfo);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Student Fluent API Creation (C#)\nDESCRIPTION: This code snippet defines a fluent API for creating `Student` objects. It utilizes reflection to set a private readonly 'semester' field. The API provides an `InitialStep` method as well as `InSemester` for creation and configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateReadonlyFieldClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nusing System.Reflection;\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.PrivateReadonlyFieldClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly FieldInfo semesterFieldInfo;\n\n    static CreateStudent()\n    {\n        semesterFieldInfo = typeof(Student).GetField(\"semester\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.semesterFieldInfo.SetValue(createStudent.student, semester);\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterFieldInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesD using HashSet - C#\nDESCRIPTION: This snippet sets the `addressesD` property, which is a `HashSet<Address>`, to the provided `addressesD`. It directly sets the given HashSet to the corresponding property of the student object using reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesDPropertyInfo.SetValue(student, addressesD);\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesE - C#\nDESCRIPTION: This code snippet sets the `addressesE` property of a `Student` object to an empty array. This indicates that the student has no addresses of type E.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesEPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[0]);\n```\n\n----------------------------------------\n\nTITLE: Setting Semester and Creating Student C#\nDESCRIPTION: This snippet demonstrates the final step of the fluent API, setting the `Semester` property of the `Student` object. It uses reflection to set the value and then returns the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassPrivateSetters/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n{\n    CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: WithFriend with single string (C#)\nDESCRIPTION: This method creates a Student object and adds a single friend to the Friends property. It initializes a new List<string> with a capacity of 1 and adds the provided friend to it.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WithFriend(string friend)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new List<string>(1){ friend };\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unknown Mood in C#\nDESCRIPTION: The `WithUnknownMood` method sets the `IsHappy` property of the `Student` to null. This represents an unknown or undefined mood for the student. It utilizes reflection and returns the modified `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoIsHappy.WithUnknownMood()\n{\n    CreateStudent.isHappyPropertyInfo.SetValue(student, null);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesF with lambda nullable Address creation\nDESCRIPTION: This snippet showcases setting AddressesF with lambda expressions for creating nullable Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesF(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?>[] createAddressesF);\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesG with Address Collection C#\nDESCRIPTION: This snippet shows how to set the AddressesG property of a Student object using a provided array of Address objects. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesG(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[]? addressesG)\n    {\n        student.AddressesG = addressesG;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Semester using Reflection C#\nDESCRIPTION: The `InSemester` methods (both static and interface implementation) use reflection to set the value of the `Semester` field of the `Student` object. They call `semesterFieldInfo.SetValue` to set the field's value to the provided `semester` integer.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PublicReadonlyFieldClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.semesterFieldInfo.SetValue(createStudent.student, semester);\nreturn createStudent.student;\n```\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.semesterFieldInfo.SetValue(student, semester);\nreturn student;\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Name C#\nDESCRIPTION: This snippet demonstrates the implementation of the `IWithName` interface methods to set the `Name` property. It leverages the reflection and existing fields for setting the name and returning the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentNullableNoNullableAnnotationPrivateSetClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithName.WithName(string name)\n{\n    CreateStudent.namePropertyInfo.SetValue(student, name);\n    return student;\n}\n\nStudent IWithName.WhoseNameIsUnknown()\n{\n    CreateStudent.namePropertyInfo.SetValue(student, null);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Address Array to AddressesG Property (C#)\nDESCRIPTION: This method assigns an array of nullable 'Address' objects to the 'addressesG' property of a 'Student' object using reflection. The 'addressesG' parameter can be null or an array of nullable Address objects. It returns the modified 'Student' object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesG(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[]? addressesG)\n    {\n        CreateStudent.addressesGPropertyInfo.SetValue(student, addressesG);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing IWhoseFriendsAre Interface (No Friends) in C#\nDESCRIPTION: This method `WhoHasNoFriends` implements the `IWhoseFriendsAre` interface, taking no input, and assigning an empty list to the `Friends` property of the student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/AliasNamespaceClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoHasNoFriends()\n{\n    student.Friends = new List<string>(0);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting No Pets C#\nDESCRIPTION: This code sets the student's pets to an empty array. It creates a new string array with a length of 0 and assigns it to the `student.Pets` property. The method returns `IWithBackpackContent` to proceed with setting the backpack content.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithZeroPets()\n{\n    student.Pets = new string[0];\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: WithMiddleName Method C#\nDESCRIPTION: This method, implemented from the IWithMiddleNameWithLastName interface, allows setting the MiddleName property of the Student object. It takes a string? middleName as input, sets the property using the middleNamePropertyInfo, and returns `this` as an IWithMiddleNameWithLastName interface, to allow chaining further calls.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIWithMiddleNameWithLastName IWithMiddleNameWithLastName.WithMiddleName(string? middleName)\n    {\n        CreateStudent.middleNamePropertyInfo.SetValue(student, middleName);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesF with array of nullable Address\nDESCRIPTION: This snippet demonstrates setting AddressesF with a variable number of nullable Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesF(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[] addressesF);\n```\n\n----------------------------------------\n\nTITLE: Setting the Semester and Completing the Student Creation (C#)\nDESCRIPTION: The `InSemester` method sets the `Semester` property of the `Student` object using reflection. It takes an integer `semester` as input and returns the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedRecord/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesE C#\nDESCRIPTION: This snippet sets the AddressesE property of a Student object to an empty array. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesE()\n    {\n        student.AddressesE = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[0];\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initial Fluent API Step C#\nDESCRIPTION: This snippet defines the `InitialStep` method, which serves as the starting point for the fluent API. It creates a new instance of the `CreateStudent` class and returns it as an `ICreateStudent` interface, allowing the user to start building the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: FluentNullable Attribute Usage C#\nDESCRIPTION: Illustrates the usage of the `FluentNullable` attribute to generate a builder method that sets a property to `null`. This is useful for optional properties that may not always have a value.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\nFluentNullable(string method = \"Without{Name}\")\n```\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMember(3, \"LivingIn\")]\n[FluentDefault(\"LivingInBoston\")]\n[FluentNullable(\"InUnknownCity\")]\npublic string? City { get; private set; } = \"Boston\";\n```\n\nLANGUAGE: cs\nCODE:\n```\n...InUnknownCity()... // City is set to null\n```\n\n----------------------------------------\n\nTITLE: Setting No Friends in C#\nDESCRIPTION: This snippet allows setting an empty list of friends. It creates a new `List<string>` with a capacity of 0, assigns it to `student.Friends`, and returns an object that implements `IWithPets`, enabling subsequent configuration steps.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoHasNoFriends()\n    {\n        student.Friends = new List<string>(0);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student WithName Method (Start) C#\nDESCRIPTION: This static method serves as an alternative entry point to the Fluent API, allowing the user to immediately set the name of the student. It creates a new `CreateStudent` instance, sets the `Name` property, and returns an `IBornOn` instance, which is the next step in the Fluent API chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberStruct/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Name = name;\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Happiness to False in C#\nDESCRIPTION: The `WhoIsSad` method sets the `IsHappy` property of the `Student` to false, indicating that the student is sad. It uses reflection via `isHappyPropertyInfo` to set the property. The method returns the configured `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoIsHappy.WhoIsSad()\n{\n    CreateStudent.isHappyPropertyInfo.SetValue(student, false);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Void Method via Reflection - C#\nDESCRIPTION: The `ReturnVoidMethod` method invokes the private `ReturnVoidMethod` of the `Student` object using reflection.  It utilizes the `returnVoidMethodMethodInfo` field, which was initialized during static construction, to invoke the method on the underlying `student` instance.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvoid IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnVoidMethod()\n    {\n        CreateStudent.returnVoidMethodMethodInfo.Invoke(student, new object?[] {  });\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodInfo for Private Generic Methods in C#\nDESCRIPTION: This static constructor retrieves MethodInfo objects for private generic methods (Method1, Method2, Method3) of the Student class using reflection. It uses GetMethod with specific BindingFlags and parameter types to locate the methods, which are then stored as static readonly fields for later invocation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithPrivateGenericMethods/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        method1MethodInfo = typeof(Student<T1, T2, T3, T4, T5>).GetMethod(\n            \"Method1\",\n            4,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { Type.MakeGenericMethodParameter(0), Type.MakeGenericMethodParameter(1), Type.MakeGenericMethodParameter(2), Type.MakeGenericMethodParameter(3) },\n            null)!;\n        method2MethodInfo = typeof(Student<T1, T2, T3, T4, T5>).GetMethod(\n            \"Method2\",\n            4,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), Type.MakeGenericMethodParameter(0), Type.MakeGenericMethodParameter(1), Type.MakeGenericMethodParameter(2), Type.MakeGenericMethodParameter(3) },\n            null)!;\n        method3MethodInfo = typeof(Student<T1, T2, T3, T4, T5>).GetMethod(\n            \"Method3\",\n            4,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(T1) },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using IList C#\nDESCRIPTION: This code snippet shows how to set the friends of a student using an `IList<string>`. It updates the internal `student` field's `Friends` property with the provided list. It returns `IWithPets` to allow chaining other properties to the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.IList<string> friends)\n{\n    student.Friends = friends;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressG with Single Address C#\nDESCRIPTION: This code snippet shows how to set a single Address object to the Student's AddressesG property. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address? addressG)\n    {\n        student.AddressesG = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[1]{ addressG };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Happiness Status using IWhoIsHappy Interface - C#\nDESCRIPTION: This snippet showcases the implementation of the `IWhoIsHappy` interface.  The `WhoIsHappy` method sets the `IsHappy` property of the `student` object to either true or false, defaulting to true. The `WhoIsSad` method sets the `IsHappy` property to false. Both methods return the `IInSemester` interface for method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CustomFluentMethodNameClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IWhoIsHappy.WhoIsHappy(bool isHappy)\n{\n    student.IsHappy = isHappy;\n    return this;\n}\n\nIInSemester IWhoIsHappy.WhoIsSad()\n{\n    student.IsHappy = false;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using params object[]\nDESCRIPTION: This snippet defines a method to set the 'Friends' property using a variable number of objects. It creates a new CreateStudent instance, assigns the provided friends array, and returns the IWithPets interface for further configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWithPets WhoseFriendsAre(params object[] friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = friends;\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting No Backpack Content C#\nDESCRIPTION: This code sets the student's backpack content to an empty set. It creates a new `HashSet<string>` with a capacity of 0 and assigns it to the `student.BackpackContent` property. The method returns the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithNoBackpackContent()\n{\n    student.BackpackContent = new HashSet<string>(0);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesG with nullable array of nullable Address\nDESCRIPTION: This snippet shows how to set the AddressesG property using a nullable array of nullable Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesG(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[]? addressesG);\n```\n\n----------------------------------------\n\nTITLE: Creating Student object with generic parameter (C#)\nDESCRIPTION: This code snippet demonstrates the creation of a Student object using the fluent API and invoking a private generic 'Method1' via reflection.  The generic type 'T' is passed through to `MakeGenericMethod` to ensure the correct method signature, and then invokes the method and returns the student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedPrivateMethodClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<T>(int p1, string p2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.method1MethodInfo2.MakeGenericMethod(typeof(T)).Invoke(createStudent.student, new object?[] { p1, p2 });\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesE from Array - C#\nDESCRIPTION: This code snippet sets the `addressesE` property of a `Student` object using an array of `Address` objects (nullable).  It directly assigns the input array to the property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesEPropertyInfo.SetValue(student, addressesE);\n```\n\n----------------------------------------\n\nTITLE: Setting Single Backpack Content Item\nDESCRIPTION: This snippet allows setting a single item as the backpack content for the Student object. It sets the BackpackContent property to a new List containing the single item and returns the Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(object backpackContent)\n{\n    student.BackpackContent = new List<object>(1){ backpackContent };\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesE\nDESCRIPTION: This snippet shows setting zero addresses for the AddressesE property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesE();\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent Fluent API\nDESCRIPTION: This snippet shows the initial step for creating an instance of the `CreateStudent` class using the `InitialStep` method. It returns an instance of the `ICreateStudent` interface, which starts the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesG C#\nDESCRIPTION: This snippet sets the AddressesG property of a Student object to an empty array. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesG()\n    {\n        student.AddressesG = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[0];\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: WithLastName Method C#\nDESCRIPTION: This method, implemented from the IWithMiddleNameWithLastName interface, allows setting the LastName property of the Student object. It takes a string lastName as input, sets the property using the lastNamePropertyInfo, and returns the fully constructed Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithMiddleNameWithLastName.WithLastName(string lastName)\n    {\n        CreateStudent.lastNamePropertyInfo.SetValue(student, lastName);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Pets using params object[]\nDESCRIPTION: This snippet allows setting the 'Pets' property using a variable number of object arguments. It creates a List<object> from the provided parameters and sets it as the Pets property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPets(params object[] pets)\n{\n    student.Pets = new List<object>(pets);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API for List Method C#\nDESCRIPTION: This snippet implements the Fluent API call for the ReturnListMethod. It creates an instance of the CreateStudent class, then uses the pre-fetched returnListMethodMethodInfo to invoke the ReturnListMethod on the underlying Student object. The return value is cast to List<int> and returned.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.Collections.Generic.List<int> ReturnListMethod()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        return (System.Collections.Generic.List<int>) CreateStudent.returnListMethodMethodInfo.Invoke(createStudent.student, new object?[] {  })!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Lambda Pattern with Fluent API C#\nDESCRIPTION: Illustrates how to use the lambda pattern to create and pass instances of Fluent API classes into methods of other classes. This is useful for augmenting classes with Fluent API builders.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_24\n\nLANGUAGE: cs\nCODE:\n```\npublic void AddStudent(Func<CreateStudent.ICreateStudent, Student> createStudent)\n{\n    Student student = createStudent(CreateStudent.InitialStep());\n    students.Add(student);\n}\n```\n\nLANGUAGE: cs\nCODE:\n```\nuniversity.AddStudent(s => s.Named(\"Alice\", \"King\").OfAge(22)...);\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Pet C#\nDESCRIPTION: This code snippet demonstrates setting a single pet for the student. It creates a new string array with a single element (the provided `pet`) and assigns it to the `student.Pets` property. The method returns `IWithBackpackContent` for chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPet(string pet)\n{\n    student.Pets = new string[1]{ pet };\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Date of Birth (C#)\nDESCRIPTION: The `BornOn` method sets the `DateOfBirth` property of the `Student` object using reflection. It takes a `System.DateOnly` `dateOfBirth` as input and returns the current instance of `CreateStudent` implementing the `IInSemester` interface, enabling the `InSemester` method to be called.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedRecord/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        CreateStudent.dateOfBirthPropertyInfo.SetValue(student, dateOfBirth);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesC with lambda Address creation\nDESCRIPTION: This snippet demonstrates setting AddressesC with lambda expressions for Address creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesC(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesC);\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodInfo for Private Methods C#\nDESCRIPTION: This snippet retrieves MethodInfo objects for private methods of the Student class using reflection. It uses BindingFlags.Instance | BindingFlags.NonPublic to access private instance methods. These MethodInfo objects are then used to invoke the methods via the Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nreturnVoidMethodMethodInfo = typeof(Student).GetMethod(\n            \"ReturnVoidMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        returnIntMethodMethodInfo = typeof(Student).GetMethod(\n            \"ReturnIntMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        returnListMethodMethodInfo = typeof(Student).GetMethod(\n            \"ReturnListMethod\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        returnIntMethodWithRefParameterMethodInfo = typeof(Student).GetMethod(\n            \"ReturnIntMethodWithRefParameter\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string).MakeByRefType() },\n            null)!;\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Fluent Property Setting (Property1)\nDESCRIPTION: This snippet demonstrates the implementation of the `IWithProperty1WithProperty2.WithProperty1` method, which sets the `Property1` of the `Student` object and returns the modified `Student` instance. This allows for chaining multiple `WithProperty` calls in the fluent API, ensuring a smooth configuration process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent<T1, T2> IWithProperty1WithProperty2.WithProperty1(T1 property1)\n    {\n        student.Property1 = property1;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: WithFirstName Interface Method C#\nDESCRIPTION: This method, implemented from the IWithFirstName interface, allows setting the FirstName property of the Student object within the fluent API chain.  It takes a string firstName as input, sets the property using the firstNamePropertyInfo, and returns `this` as an IWithMiddleNameWithLastName interface, to chain calls.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIWithMiddleNameWithLastName IWithFirstName.WithFirstName(string firstName)\n    {\n        CreateStudent.firstNamePropertyInfo.SetValue(student, firstName);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Static SomeMethod Invocation - C#\nDESCRIPTION: This snippet demonstrates invoking the `SomeMethod` using reflection. A new instance of `CreateStudent` is created, then `someMethodMethodInfo.Invoke` is used to execute the non-public `SomeMethod` on the `Student` instance. A string parameter `createStudent` is passed into the method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TryBreakFluentApiClass2/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student SomeMethod(string createStudent)\n{\n    CreateStudent createStudent2 = new CreateStudent();\n    CreateStudent.someMethodMethodInfo.Invoke(createStudent2.student, new object?[] { createStudent });\n    return createStudent2.student;\n}\n```\n\n----------------------------------------\n\nTITLE: PackageReference with PrivateAssets\nDESCRIPTION: This XML snippet demonstrates how to add a package reference to M31.FluentApi in a .csproj file, including the PrivateAssets metadata tag to prevent consumers of your project from needing a reference to M31.FluentApi.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"M31.FluentApi\" Version=\"1.10.0\" PrivateAssets=\"all\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing WithName Method (C#)\nDESCRIPTION: This method implementation of the WithName step in the fluent API. It invokes the private 'WithName' method of the Student object using reflection. It takes an optional string 'name' as input and returns the next interface in the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodNullableParameterClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIBornOn IWithName.WithName(string? name)\n    {\n        CreateStudent.withNameMethodInfo.Invoke(student, new object?[] { name });\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesE with nullable array of Address\nDESCRIPTION: This snippet shows how to set the AddressesE property of a Student object using a nullable array of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesE(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[]? addressesE);\n```\n\n----------------------------------------\n\nTITLE: Adding AddressesA (List) to Student via Fluent API\nDESCRIPTION: This snippet shows how to add a `List<Address>` to the `AddressesA` property of the `Student` object using various methods. It supports adding a list, a params array of `Address` objects, a params array of `Func<CreateAddress, Address>`, a single `Address` object, a single `Func<CreateAddress, Address>`, and setting an empty list.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesA(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> addressesA)\n{\n    student.AddressesA = addressesA;\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesA(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesA)\n{\n    student.AddressesA = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(addressesA);\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesA(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesA)\n{\n    student.AddressesA = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(createAddressesA.Select(createAddressA => createAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())));\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressA)\n{\n    student.AddressesA = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(1){ addressA };\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressA(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressA)\n{\n    student.AddressesA = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(1){ createAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesA()\n{\n    student.AddressesA = new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>(0);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting No Pets\nDESCRIPTION: This snippet configures the Student object to have no pets by setting the Pets property to an empty List<object>.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithZeroPets()\n{\n    student.Pets = new List<object>(0);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student object (C#)\nDESCRIPTION: This code snippet demonstrates the creation of a Student object using the fluent API and invoking the private 'Method1' via reflection.  The correct `MethodInfo` object is used for the specific overload, ensuring proper method execution with given parameters. It then returns the student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedPrivateMethodClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1(int p1, string p2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.method1MethodInfo.Invoke(createStudent.student, new object?[] { p1, p2 });\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: FluentApi attribute example in C#\nDESCRIPTION: This C# code snippet demonstrates the usage of the [FluentApi] attribute on a Student class. It includes several [FluentMember], [FluentMethod], [FluentPredicate], [FluentCollection], [FluentDefault] and [FluentNullable] attributes to define the fluent API for the class.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentApi]\npublic class Student\n{\n    [FluentMember(0, \"Named\", 0)]\n    public string FirstName { get; private set; }\n\n    [FluentMember(0, \"Named\", 1)]\n    public string LastName { get; private set; }\n\n    [FluentMember(1, \"OfAge\")]\n    public int Age { get; private set; }\n\n    [FluentMethod(1)]\n    private void BornOn(DateOnly dateOfBirth)\n    {\n        DateOnly today = DateOnly.FromDateTime(DateTime.Today);\n        int age = today.Year - dateOfBirth.Year;\n        if (dateOfBirth > today.AddYears(-age)) age--;\n        Age = age;\n    }\n\n    [FluentMember(2, \"InSemester\")]\n    [FluentDefault(\"WhoStartsUniversity\")]\n    public int Semester { get; private set; } = 0;\n\n    [FluentMember(3, \"LivingIn\")]\n    [FluentDefault(\"LivingInBoston\")]\n    [FluentNullable(\"InUnknownCity\")]\n    public string? City { get; private set; } = \"Boston\";\n\n    [FluentPredicate(4, \"WhoIsHappy\", \"WhoIsSad\")]\n    [FluentNullable(\"WithUnknownMood\")]\n    public bool? IsHappy { get; private set; }\n\n    [FluentCollection(5, \"Friend\", \"WhoseFriendsAre\", \"WhoseFriendIs\", \"WhoHasNoFriends\")]\n    public IReadOnlyCollection<string> Friends { get; private set; }\n }\n```\n\n----------------------------------------\n\nTITLE: Defining IWithName Interface C#\nDESCRIPTION: Defines the IWithName interface, which requires the implementation of a 'WithName' method. This method sets the name of the object and returns an interface to set different addresses\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IWithName\n    {\n        IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG WithName(string name);\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Class Definition (C#)\nDESCRIPTION: Defines the 'CreateStudent' class which implements the fluent API for creating a 'Student' object. It includes interfaces 'ICreateStudent' and 'IInSemester' to define the fluent interface steps.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFieldClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly FieldInfo semesterFieldInfo;\n\n    static CreateStudent()\n    {\n        semesterFieldInfo = typeof(Student).GetField(\"semester\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.semesterFieldInfo.SetValue(createStudent.student, semester);\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterFieldInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with Fluent API Attributes in C#\nDESCRIPTION: This C# struct 'Student' is annotated with the 'FluentApi' attribute, signaling that a fluent API should be generated for it. The 'Semester' property, an integer representing the student's semester, is marked with the 'FluentMember' attribute.  The index '0' within FluentMember specifies the position of this property in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/GetMissingSetStruct/Student.fixed.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// ReSharper disable All\n\nusing M31.FluentApi.Attributes;\n\nnamespace M31.FluentApi.Tests.AnalyzerAndCodeFixes.TestClasses.GetMissingSetStruct;\n\n[FluentApi]\npublic struct Student\n{\n    [FluentMember(0)]\n    int Semester { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces - C#\nDESCRIPTION: These interfaces define the structure of the fluent API. `ICreateStudent` extends `IInSemester`, allowing chaining of method calls.  `IInSemester` defines the `InSemester` method, which sets the semester property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GetPrivateSetPropertyClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IInSemester\n{\n}\n\npublic interface IInSemester\n{\n    Student InSemester(int semester);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking MethodWithParams via Reflection\nDESCRIPTION: This method uses reflection to invoke the MethodWithParams method of the Student class, passing an array of integers as parameters. It uses MethodInfo.Invoke to execute the method on the underlying Student object. The method returns an IMethodWithRefParameter interface, enabling further method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IMethodWithRefParameter MethodWithParams(params int[] numbers)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.methodWithParamsMethodInfo.Invoke(createStudent.student, new object?[] { numbers });\n        return createStudent;\n    }\n\n    IMethodWithRefParameter IMethodWithParams.MethodWithParams(params int[] numbers)\n    {\n        CreateStudent.methodWithParamsMethodInfo.Invoke(student, new object?[] { numbers });\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class Definition (C#)\nDESCRIPTION: Defines the `CreateStudent` class, which implements several interfaces (`ICreateStudent`, `IWithMember1`, `IWithMember2`, `IWithMember3`, `IWithMember4`). It uses a private `Student` field for internal state and provides methods for creating and configuring the `Student` object through a fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableSeveralMembersClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithMember1,\n    CreateStudent.IWithMember2,\n    CreateStudent.IWithMember3,\n    CreateStudent.IWithMember4\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMember2 WithMember1(string? member1)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member1 = member1;\n        return createStudent;\n    }\n\n    public static IWithMember3 WithMember2(string? member2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member2 = member2;\n        return createStudent;\n    }\n\n    public static IWithMember4 WithMember3(string? member3)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member3 = member3;\n        return createStudent;\n    }\n\n    public static Student WithMember4(string member4)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.Member4 = member4;\n        return createStudent.student;\n    }\n\n    IWithMember2 IWithMember1.WithMember1(string? member1)\n    {\n        student.Member1 = member1;\n        return this;\n    }\n\n    IWithMember3 IWithMember2.WithMember2(string? member2)\n    {\n        student.Member2 = member2;\n        return this;\n    }\n\n    IWithMember4 IWithMember3.WithMember3(string? member3)\n    {\n        student.Member3 = member3;\n        return this;\n    }\n\n    Student IWithMember4.WithMember4(string member4)\n    {\n        student.Member4 = member4;\n        return student;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: FluentDefault Attribute Usage C#\nDESCRIPTION: Demonstrates how to use the `FluentDefault` attribute to specify a default value for a property in the generated builder. When the associated builder method is called, the property retains its initial value.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nFluentDefault(string method = \"WithDefault{Name}\")\n```\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMember(3, \"LivingIn\")]\n[FluentDefault(\"LivingInBoston\")]\n[FluentNullable(\"InUnknownCity\")]\npublic string? City { get; private set; } = \"Boston\";\n```\n\nLANGUAGE: cs\nCODE:\n```\n...LivingInBoston()... // City is not changed\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using params string[] in C#\nDESCRIPTION: This overloaded `WhoseFriendsAre` method allows setting the `Friends` property of the `Student` object using a `params string[]`.  It simplifies setting a variable number of friends. A new `CreateStudent` instance is created, the friends are assigned, and an `IWhoIsHappy` interface is returned for further configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWhoIsHappy WhoseFriendsAre(params string[]? friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = friends;\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface IBornOnWithFriends (C#)\nDESCRIPTION: Defines the interface with methods for setting DateOfBirth and Friends.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IBornOnWithFriends\n{\n    Student BornOn(System.DateOnly dateOfBirth);\n\n    Student WithFriends(System.Collections.Generic.List<string> friends);\n\n    Student WithFriends(params string[] friends);\n\n    Student WithFriend(string friend);\n\n    Student WithZeroFriends();\n}\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Interface C#\nDESCRIPTION: This interface defines the entry point for the fluent API. It inherits from the IWithFirstName interface, indicating that the first step is to set the first name.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithSelfClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithFirstName\n    {\n    }\n```\n\n----------------------------------------\n\nTITLE: Assigning Address Array Created via Lambda (C#)\nDESCRIPTION: This method assigns an array of nullable 'Address' objects, created from a collection of lambda expressions, to the 'addressesG' property of a 'Student' object using reflection. It uses the 'CreateAddress' fluent API to construct the addresses. The 'createAddressesG' parameter can be null, in which case it assigns null to addressG.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesG(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?>[]? createAddressesG)\n    {\n        CreateStudent.addressesGPropertyInfo.SetValue(student, createAddressesG?.Select(createAddressG => createAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep())).ToArray());\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Initial Step C#\nDESCRIPTION: This snippet defines the `InitialStep` method, which serves as the starting point for the fluent API. It creates a new instance of the `CreateStudent` class and returns it as an `ICreateStudent` interface, allowing the user to begin setting the properties of the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassPrivateSetters/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using params string[] C#\nDESCRIPTION: This code snippet demonstrates setting the friends of a student using a variable number of string arguments (`params string[]`). It converts the input parameters into a `List<string>` and assigns it to the `student.Friends` property. The method returns `IWithPets` for further chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIWithPets IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)\n{\n    student.Friends = new List<string>(friends);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Constructor and Field Initialization (C#)\nDESCRIPTION: This static constructor retrieves the 'semester' field from the 'Student' class using reflection. It is important for subsequent operations to set the semester value. BindingFlags is used to access the private field.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFieldClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    semesterFieldInfo = typeof(Student).GetField(\"semester\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentContinueWith Attribute Usage C#\nDESCRIPTION: Illustrates the usage of the `FluentContinueWith` attribute to jump to a specific builder step, enabling branching in the fluent API. This allows for non-linear builder flows.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_20\n\nLANGUAGE: cs\nCODE:\n```\nFluentContinueWith(int builderStep)\n```\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMethod(3)]\n[FluentContinueWith(7)]\nprivate void WhoIsADigitalNomad()\n{\n    IsDigitalNomad = true;\n}\n\n// ...\n\n[FluentMethod(7)]\nprivate void LivingInCity(string city)\n{\n    City = city;\n}\n```\n\nLANGUAGE: cs\nCODE:\n```\n...WhoIsADigitalNomad().LivingInCity(\"Berlin\")...\n```\n\n----------------------------------------\n\nTITLE: Defining a FluentApi Class in C#\nDESCRIPTION: This code snippet demonstrates how to define a class named `Student` using the `FluentApi` attribute. This indicates that FluentApi functionality should be generated for this class. The `Semester` property is marked with the `FluentMember` attribute, specifying its order in the fluent interface (0).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/GetMissingSetClass/Student.fixed.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[FluentApi]\npublic class Student\n{\n    [FluentMember(0)]\n    int Semester { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: FluentPredicate Attribute Usage Example\nDESCRIPTION: This C# code snippet demonstrates the usage of the `FluentPredicate` attribute on an `IsHappy` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentPredicate(4, \"WhoIsHappy\", \"WhoIsSad\")]\npublic bool IsHappy { get; private set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n...WhoIsHappy()...\n...WhoIsSad()...\n...WhoIsHappy(true)...\n```\n\n----------------------------------------\n\nTITLE: Setting Age with Fluent API C#\nDESCRIPTION: This snippet demonstrates setting the `Age` property of the `Student` object. It retrieves the `agePropertyInfo` using reflection and sets the `Age` property on the underlying `student` object. It then returns the `IInSemester` interface to allow for further method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassPrivateSetters/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IOfAgeBornOn.OfAge(int age)\n{\n    CreateStudent.agePropertyInfo.SetValue(student, age);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressF with lambda nullable Address creation\nDESCRIPTION: This snippet showcases setting a single AddressF property using a lambda expression to create a nullable Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressF(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?> createAddressF);\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodInfo for Reflection (C#)\nDESCRIPTION: This static constructor initializes MethodInfo objects for the WithName, BornOn, and InSemester methods of the Student class. It retrieves the method information using reflection, specifying the method name, binding flags (Instance | NonPublic), and parameter types. The ! operator suppresses nullability warnings, assuming the methods exist.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodNullableParameterClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        withNameMethodInfo = typeof(Student).GetMethod(\n            \"WithName\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n        bornOnMethodInfo = typeof(Student).GetMethod(\n            \"BornOn\",\n            0,\n            BindingFlags.Instance | BindingPublic,\n            null,\n            new Type[] { typeof(System.DateOnly?) },\n            null)!;\n        inSemesterMethodInfo = typeof(Student).GetMethod(\n            \"InSemester\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(int?) },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Fluent API Class in C#\nDESCRIPTION: This snippet demonstrates the initialization of the CreateStudent class, which serves as the entry point for the fluent API. It shows the private constructor and the InitialStep method that creates an instance of the CreateStudent class, enabling the fluent method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (in T, ref string) with Generics S, T\nDESCRIPTION: This static method creates a `Student` object and calls the generic `Method1<S, T>` method on it with an in generic type `T` and a ref string. It instantiates `CreateStudent`, calls `student.Method1<S, T>(in p1, ref p2)`, and returns the created `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<S, T>(in T p1, ref string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<S, T>(in p1, ref p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student WithName Method (Interface) C#\nDESCRIPTION: Implements the `WithName` method from the `IWithName` interface. It sets the `Name` property of the internal `Student` object and returns the current `CreateStudent` instance, cast to the `IBornOn` interface, which represents the next step in the Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberStruct/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIBornOn IWithName.WithName(string name)\n{\n    student.Name = name;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesB with lambda Address creation\nDESCRIPTION: This snippet showcases setting AddressesB with lambda expressions for Address object creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesB(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesB);\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo (C#)\nDESCRIPTION: This snippet initializes static readonly PropertyInfo objects for accessing the 'Semester', 'Name', and 'DateOfBirth' properties using reflection.  It retrieves these properties from the Student and Person classes using BindingFlags to access non-public instance members. The '!' operator is used for null-forgiving, assuming the properties always exist.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedMembers/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n        namePropertyInfo = typeof(Person).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n        dateOfBirthPropertyInfo = typeof(Person).GetProperty(\"DateOfBirth\", BindingFlags.Instance | BindingFlags.NonPublic)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initial Step of Fluent API (C#)\nDESCRIPTION: This static method serves as the entry point for the fluent API. It creates a new instance of the `CreateStudent` builder, which implements the `ICreateStudent` interface, and returns it to start the building process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateConstructor/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent<T1, T2>();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Student Name (C#)\nDESCRIPTION: Implements the `WithName` method from the `IWithName` interface to set the student's name. It uses reflection to set the value of the `Name` property of the `Student` object. It then returns the current `CreateStudent` instance, allowing for method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter IWithName.WithName(string name)\n    {\n        CreateStudent.namePropertyInfo.SetValue(student, name);\n        return this;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Creating Student object with generic parameter and in and string (C#)\nDESCRIPTION: This snippet illustrates how to handle `in` parameters with reflection using the fluent API. An object array is used to pass arguments to the invoked method, and the returned array is used to extract the modified `in` parameter after invocation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedPrivateMethodClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<S, T>(in T p1, ref string p2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        object?[] args = new object?[] { p1, p2 };\n        CreateStudent.method1MethodInfo7.MakeGenericMethod(typeof(S), typeof(T)).Invoke(createStudent.student, args);\n        p2 = (string) args[1]!;\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for Fluent API Method (IMethod1)\nDESCRIPTION: This code defines the IMethod1 interface, part of the fluent API. It declares the generic Method1 function, specifying the type constraints for the generic parameters. This interface is intended to be implemented by classes within the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericMethodWithConstraintsClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMethod1\n{\n    Student Method1<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)\n        where T1 : class\n        where T2 : class?\n        where T3 : struct\n        where T4 : notnull\n        where T5 : new()\n        where T6 : unmanaged\n        where T7 : System.Collections.Generic.List<int>, System.Collections.Generic.IDictionary<int, string>\n        where T8 : class, System.Collections.Generic.IDictionary<int, string>\n        where T9 : System.Collections.Generic.List<int>, new();\n}\n```\n\n----------------------------------------\n\nTITLE: Emit Compiler Generated Files\nDESCRIPTION: This XML snippet shows how to configure a .csproj file to emit the generated code from the M31.FluentApi library, allowing examination of the generated code in the obj/Generated folder.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)Generated</CompilerGeneratedFilesOutputPath>\n    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: FluentMember with nested Fluent API\nDESCRIPTION: This C# snippet demonstrates the usage of `FluentMember` attribute on a property that itself has a Fluent API (Address). This will create a lambda method for setting the property using the Address Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentMember(1)]\npublic Address Address { get; private set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n...WithAddress(a => a.WithHouseNumber(\"108\").WithStreet(\"5th Avenue\").InCity(\"New York\"))...\n```\n\n----------------------------------------\n\nTITLE: Fluent API Property Setters in C#\nDESCRIPTION: These methods define the fluent interface for setting properties of the Student object. Each method sets a specific property and returns the next interface in the chain, enabling a fluent, step-by-step construction. They update the internal student object's properties.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithPrivateGenericMethods/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIWithProperty2 IWithProperty1.WithProperty1(T1 property1)\n    {\n        student.Property1 = property1;\n        return this;\n    }\n\n    IWithProperty3 IWithProperty2.WithProperty2(T2 property2)\n    {\n        student.Property2 = property2;\n        return this;\n    }\n\n    IWithProperty4 IWithProperty3.WithProperty3(T3 property3)\n    {\n        student.Property3 = property3;\n        return this;\n    }\n\n    IWithProperty5 IWithProperty4.WithProperty4(T4 property4)\n    {\n        student.Property4 = property4;\n        return this;\n    }\n\n    IMethod1 IWithProperty5.WithProperty5(T5 property5)\n    {\n        student.Property5 = property5;\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: CreateStudent Fluent API Builder (C#)\nDESCRIPTION: This class provides a fluent API for creating `Student` objects. It defines interfaces for each step of the building process (`ICreateStudent`, `IWithFirstName`, `IWithMiddleName`, `IWithLastName`) and enforces the order in which properties are set. The `InitialStep` method allows creating student object, starting with first name, and the `WithFirstName` method allow creating student object, starting with middle name. The constructor is private to ensure the builder is used. The fluent API allows for optional middle name.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithFirstName,\n    CreateStudent.IWithMiddleName,\n    CreateStudent.IWithLastName\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMiddleName WithFirstName(string firstName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.FirstName = firstName;\n        return createStudent;\n    }\n\n    IWithMiddleName IWithFirstName.WithFirstName(string firstName)\n    {\n        student.FirstName = firstName;\n        return this;\n    }\n\n    IWithLastName IWithMiddleName.WithMiddleName(string? middleName)\n    {\n        student.MiddleName = middleName;\n        return this;\n    }\n\n    Student IWithLastName.WithLastName(string lastName)\n    {\n        student.LastName = lastName;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithFirstName\n    {\n    }\n\n    public interface IWithFirstName\n    {\n        IWithMiddleName WithFirstName(string firstName);\n    }\n\n    public interface IWithMiddleName : IWithLastName\n    {\n        IWithLastName WithMiddleName(string? middleName);\n    }\n\n    public interface IWithLastName\n    {\n        Student WithLastName(string lastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: WithZeroFriends (C#)\nDESCRIPTION: This method creates a Student object and initializes the Friends property with an empty List<string>. It sets the capacity of the list to 0, effectively creating an empty list.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WithZeroFriends()\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new List<string>(0);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: WithName (char initial) Implementation C#\nDESCRIPTION: This snippet demonstrates how to set the `Initial` property (a character) of the `Student` object using reflection. It takes a character representing the student's initial as input. It retrieves the `initialPropertyInfo` and uses it to set the `Initial` property of the underlying `student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SameNameMemberClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIWithName2 IWithName.WithName(char initial)\n    {\n        CreateStudent.initialPropertyInfo.SetValue(student, initial);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Class and IMove Interface C#\nDESCRIPTION: This code defines the `Robot` class and the `IMove` interface in C#. The `Robot` class has properties such as `Name`, `YearOfManufacture`, `PosX`, `PosY`, and `Tasks`. It also includes methods for moving the robot (`Move`) and assigning tasks (`AssignTask`). The `IMove` interface defines the contract for movable objects, requiring a `Move` method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/Components/CodeBuilding/Robots.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\n\nnamespace M31.FluentApi.Tests.Components;\n\npublic class Robot : IMove\n{\n    private readonly List<string> tasks;\n\n    public string Name { get; }\n    public int YearOfManufacture { get; }\n    public double PosX { get; private set; }\n    public double PosY { get; private set; }\n    public IReadOnlyCollection<string> Tasks => tasks;\n\n    public Robot(string name, int yearOfManufacture, double posX = 0, double posY = 0)\n    {\n        Name = name;\n        YearOfManufacture = yearOfManufacture;\n        tasks = new List<string>();\n        PosX = posX;\n        PosY = posY;\n    }\n\n    public void Move(double deltaX, double deltaY)\n    {\n        PosX += deltaX;\n        PosY += deltaY;\n    }\n\n    public void AssignTask(string task)\n    {\n        tasks.Add(task);\n    }\n}\n\npublic interface IMove\n{\n    void Move(double deltaX, double deltaY);\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressB with lambda Address creation\nDESCRIPTION: This snippet showcases setting a single AddressB property using a lambda expression for Address object creation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressB(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressB);\n```\n\n----------------------------------------\n\nTITLE: Implementing Int Return Method in C#\nDESCRIPTION: This snippet demonstrates the implementation of a static method ReturnIntMethod that creates an instance of CreateStudent, calls the ReturnIntMethod on the student object, and returns the integer value obtained from that call.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static int ReturnIntMethod()\n    {\n        CreateStudent createStudent = new CreateStudent();\n        return createStudent.student.ReturnIntMethod();\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student IWithName Interface Implementation\nDESCRIPTION: This is the implementation of the `IWithName` interface's `WithName` method. It sets the `LastName` and `FirstName` properties of the internal `Student` object and returns the `Student` object. The parameters `lastName` and `firstName` are strings representing the last and first name, respectively.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoParameterCompoundClassReversedParameters/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithName.WithName(string lastName, string firstName)\n{\n    student.LastName = lastName;\n    student.FirstName = firstName;\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Student's Semester (InSemester)\nDESCRIPTION: The `InSemester` method sets the `semester` property of the `Student` object using reflection. It takes an integer representing the semester as input. After setting the semester, it returns the fully constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordPrimaryConstructor/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int semester)\n{\n    CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentMember Attribute Usage Example\nDESCRIPTION: This C# code snippet demonstrates the usage of the `FluentMember` attribute on a `FirstName` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentMember(0)]\npublic string FirstName { get; private set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n...WithFirstName(\"Alice\")...\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions for Fluent API C#\nDESCRIPTION: These interfaces define the structure of the fluent API, specifying the order in which properties must be set. Each interface represents a step in the fluent API, requiring a specific method to be called before proceeding to the next step. The methods return an interface that represents the next step in the chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ContinueWithAfterCompoundClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    IWithProperty2 WithName(string firstName, string lastName);\n}\n\npublic interface IWithProperty1\n{\n    IWithProperty2 WithProperty1(string property1);\n}\n\npublic interface IWithProperty2\n{\n    Student WithProperty2(string property2);\n}\n```\n\n----------------------------------------\n\nTITLE: FluentCollection Attribute Definition\nDESCRIPTION: This C# snippet shows the signature of the `FluentCollection` attribute, used for collection members.  It generates methods for adding multiple items, a single item, and clearing the collection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nFluentCollection(\n    int builderStep,\n    string singularName,\n    string withItems = \"With{Name}\",\n    string? withItem = \"With{SingularName}\",\n    string? withZeroItems = \"WithZero{Name}\")\n```\n\n----------------------------------------\n\nTITLE: FluentSkippable Attribute Usage C#\nDESCRIPTION: Demonstrates the use of the `FluentSkippable` attribute to create an optional builder method for a field or property. The generated API will offer the method, but it is not required to be called.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_19\n\nLANGUAGE: cs\nCODE:\n```\nFluentSkippable()\n```\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMember(0)]\npublic string FirstName { get; private set; }\n\n[FluentMember(1)]\n[FluentSkippable]\npublic string? MiddleName { get; private set; }\n\n[FluentMember(2)]\npublic string LastName { get; private set; }\n```\n\nLANGUAGE: cs\nCODE:\n```\n...WithFirstName(\"Bob\").WithLastName(\"Bishop\")...\n...WithFirstName(\"Alice\").WithMiddleName(\"Sophia\").WithLastName(\"King\")...\n```\n\n----------------------------------------\n\nTITLE: Fluent API: BornOn with DateOnly (C#)\nDESCRIPTION: This method creates a Student object and sets the DateOfBirth property using a System.DateOnly object. It creates a new CreateStudent instance, assigns the date, and returns the resulting Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student BornOn(System.DateOnly dateOfBirth)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.DateOfBirth = dateOfBirth;\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation of SomeMethod - C#\nDESCRIPTION: This snippet shows the interface implementation of `SomeMethod`. This method is part of the `ISomeMethod` interface and is implemented by the `CreateStudent` class. The method invokes the `SomeMethod` on the student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TryBreakFluentApiClass2/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent ISomeMethod.SomeMethod(string createStudent)\n{\n    CreateStudent.someMethodMethodInfo.Invoke(student, new object?[] { createStudent });\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Fluent API in C#\nDESCRIPTION: This snippet shows the implementation of the interface methods in the CreateStudent class, ensuring that the fluent API supports chaining calls for methods with different return types (void, int, list of integers) and parameters (including a ref parameter).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvoid IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnVoidMethod()\n    {\n        student.ReturnVoidMethod();\n    }\n\n    int IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethod()\n    {\n        return student.ReturnIntMethod();\n    }\n\n    System.Collections.Generic.List<int> IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnListMethod()\n    {\n        return student.ReturnListMethod();\n    }\n\n    int IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethodWithRefParameter(ref string s)\n    {\n        return student.ReturnIntMethodWithRefParameter(ref s);\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesG\nDESCRIPTION: This snippet demonstrates setting AddressesG to zero.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesG();\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo Fields for Reflection in C#\nDESCRIPTION: This static constructor initializes `PropertyInfo` and `MethodInfo` fields using reflection. It retrieves information about properties like `FirstName`, `MiddleName`, `LastName` and methods like `WhoseAddressIsUnknown`, `WhoLivesAtAddress`, `WithHouseNumber`, `WithStreet`, `InCity`, `WhoIsADigitalNomad`, and `LivingInCity` from the `Person` class using their names and binding flags. These fields are then used in other methods to set property values and invoke methods on the `Person` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/PersonClass/CreatePerson.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreatePerson()\n    {\n        firstNamePropertyInfo = typeof(Person).GetProperty(\"FirstName\", BindingFlags.Instance | BindingFlags.Public)!;\n        middleNamePropertyInfo = typeof(Person).GetProperty(\"MiddleName\", BindingFlags.Instance | BindingFlags.Public)!;\n        lastNamePropertyInfo = typeof(Person).GetProperty(\"LastName\", BindingFlags.Instance | BindingFlags.Public)!;\n        whoseAddressIsUnknownMethodInfo = typeof(Person).GetMethod(\n            \"WhoseAddressIsUnknown\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        whoLivesAtAddressMethodInfo = typeof(Person).GetMethod(\n            \"WhoLivesAtAddress\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        withHouseNumberMethodInfo = typeof(Person).GetMethod(\n            \"WithHouseNumber\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n        withStreetMethodInfo = typeof(Person).GetMethod(\n            \"WithStreet\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n        inCityMethodInfo = typeof(Person).GetMethod(\n            \"InCity\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n        whoIsADigitalNomadMethodInfo = typeof(Person).GetMethod(\n            \"WhoIsADigitalNomad\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] {  },\n            null)!;\n        livingInCityMethodInfo = typeof(Person).GetMethod(\n            \"LivingInCity\",\n            0,\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[] { typeof(string) },\n            null)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressC with Address\nDESCRIPTION: This snippet demonstrates setting the AddressC property with an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressC);\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting City in C#\nDESCRIPTION: This code shows the Fluent API setting the `City` property of a `Student` object. It leverages reflection through `PropertyInfo.SetValue`. The method returns `this` to allow method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIWhoIsHappy ILivingIn.LivingIn(string? city)\n    {\n        CreateStudent.cityPropertyInfo.SetValue(student, city);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesE from Lambdas - C#\nDESCRIPTION: This snippet sets the `addressesE` property using an array created from lambda expressions. Each lambda expression takes an `ICreateAddress` instance and returns an `Address`. The resulting addresses are then converted into an array and assigned to the `addressesE` property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesEPropertyInfo.SetValue(student, createAddressesE?.Select(createAddressE => createAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep())).ToArray());\n```\n\n----------------------------------------\n\nTITLE: Installing M31.FluentApi via NuGet\nDESCRIPTION: This command installs the latest version of the M31.FluentApi NuGet package using the package manager console.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package M31.FluentApi\n```\n\n----------------------------------------\n\nTITLE: Setting No Friends in C#\nDESCRIPTION: The `WhoHasNoFriends` method is a convenience method for setting the `Friends` property to an empty array. This indicates that the student has no friends. The method returns an `IWhoIsHappy` interface to allow further configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWhoIsHappy WhoHasNoFriends()\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new string[0];\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: FluentBreak Attribute Usage C#\nDESCRIPTION: Shows how to use the `FluentBreak` attribute to stop the builder process. This is only relevant for non-linear APIs that utilize `FluentContinueWith` to define custom flows.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_21\n\nLANGUAGE: cs\nCODE:\n```\nFluentBreak()\n```\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMethod(3)]\n[FluentBreak]\nprivate void WhoseAddressIsUnknown()\n{\n}\n```\n\nLANGUAGE: cs\nCODE:\n```\n...WhoseAddressIsUnknown();\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API for Int Method with Ref Parameter C#\nDESCRIPTION: This snippet implements the Fluent API call for the ReturnIntMethodWithRefParameter. It creates an instance of the CreateStudent class, prepares an object array containing the ref parameter, invokes the method, and then updates the ref parameter with the modified value from the object array. The int return value is also returned.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static int ReturnIntMethodWithRefParameter(ref string s)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        object?[] args = new object?[] { s };\n        int result = (int) CreateStudent.returnIntMethodWithRefParameterMethodInfo.Invoke(createStudent.student, args)!;\n        s = (string) args[0]!;\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Pets using IList\nDESCRIPTION: This snippet defines a method for setting the 'Pets' property of the Student object using an IList collection. It assigns the provided pets and returns the IWithBackpackContent interface to continue building the object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPets(System.Collections.IList pets)\n{\n    student.Pets = pets;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Forks in Fluent API C#\nDESCRIPTION: Explains how to create forks in a fluent API by specifying multiple builder methods at the same step. The resulting API will offer all the specified methods at that step, but only one can be called.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_23\n\nLANGUAGE: cs\nCODE:\n```\n[FluentMember(1, \"OfAge\")]\npublic int Age { get; private set; }\n\n[FluentMethod(1)]\nprivate void BornOn(DateOnly dateOfBirth)\n{\n    DateOnly today = DateOnly.FromDateTime(DateTime.Today);\n    int age = today.Year - dateOfBirth.Year;\n    if (dateOfBirth > today.AddYears(-age)) age--;\n    Age = age;\n}\n```\n\nLANGUAGE: cs\nCODE:\n```\n...OfAge(22)...\n...BornOn(new DateOnly(2002, 8, 3))...\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesC\nDESCRIPTION: This snippet demonstrates setting the AddressesC to zero using a Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesC();\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Happiness Status in C#\nDESCRIPTION: This snippet demonstrates setting the happiness status (`IsHappy`) of a `Student` object. It uses `PropertyInfo.SetValue` to set the `IsHappy` property via reflection. The method then returns `this` to support method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nIWhoseFriendsAre IWhoIsHappy.WhoIsHappy(bool? isHappy)\n    {\n        CreateStudent.isHappyPropertyInfo.SetValue(student, isHappy);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding AddressesC (Array) to Student via Fluent API\nDESCRIPTION: This snippet shows how to add an `Address[]` array to the `AddressesC` property of the `Student` object using various methods. It supports adding a params array of `Address` objects, a params array of `Func<CreateAddress, Address>`, a single `Address` object, a single `Func<CreateAddress, Address>`, and setting an empty array.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesC(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[] addressesC)\n{\n    student.AddressesC = addressesC;\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesC(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[] createAddressesC)\n{\n    student.AddressesC = createAddressesC.Select(createAddressC => createAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep())).ToArray();\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressC)\n{\n    student.AddressesC = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[1]{ addressC };\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressC(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressC)\n{\n    student.AddressesC = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[1]{ createAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesC()\n{\n    student.AddressesC = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[0];\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student with Method1 (T, string) with Generics S, T\nDESCRIPTION: This static method creates a `Student` object and calls the generic `Method1<S, T>` method on it with a generic type `T` and a string. It instantiates `CreateStudent`, calls `student.Method1<S, T>(p1, p2)`, and returns the created `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<S, T>(T p1, string p2)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Method1<S, T>(p1, p2);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking MethodWithRefInAndOutParameter via Reflection\nDESCRIPTION: This method invokes the MethodWithRefInAndOutParameter method on the Student object using reflection. It handles 'ref', 'in', and 'out' parameters.  'ref' and 'out' parameters' values are updated after the method invocation, while 'in' parameters are passed directly.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nStudent IMethodWithRefInAndOutParameter.MethodWithRefInAndOutParameter(ref int n4, in int n5, out int n6)\n    {\n        object?[] args = new object?[] { n4, n5, null };\n        CreateStudent.methodWithRefInAndOutParameterMethodInfo.Invoke(student, args);\n        n4 = (int) args[0]!;\n        n6 = (int) args[2]!;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Implementation in C#\nDESCRIPTION: This C# snippet defines the 'CreateStudent' class, implementing the fluent API for creating a 'Student' object. It provides methods to set the 'FirstName', 'MiddleName', and 'LastName' properties in a specific order using interfaces. The initial step and each property setting method return the next interface in the chain, ultimately returning the created 'Student' object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SkippableFirstTwoMembersClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated/>\n// This code was generated by the library M31.FluentAPI.\n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n\n#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n#nullable enable\n\nnamespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.SkippableFirstTwoMembersClass;\n\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IWithFirstName,\n    CreateStudent.IWithMiddleName,\n    CreateStudent.IWithLastName\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static IWithMiddleName WithFirstName(string? firstName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.FirstName = firstName;\n        return createStudent;\n    }\n\n    public static IWithLastName WithMiddleName(string? middleName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.MiddleName = middleName;\n        return createStudent;\n    }\n\n    public static Student WithLastName(string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        createStudent.student.LastName = lastName;\n        return createStudent.student;\n    }\n\n    IWithMiddleName IWithFirstName.WithFirstName(string? firstName)\n    {\n        student.FirstName = firstName;\n        return this;\n    }\n\n    IWithLastName IWithMiddleName.WithMiddleName(string? middleName)\n    {\n        student.MiddleName = middleName;\n        return this;\n    }\n\n    Student IWithLastName.WithLastName(string lastName)\n    {\n        student.LastName = lastName;\n        return student;\n    }\n\n    public interface ICreateStudent : IWithFirstName\n    {\n    }\n\n    public interface IWithFirstName : IWithMiddleName\n    {\n        IWithMiddleName WithFirstName(string? firstName);\n    }\n\n    public interface IWithMiddleName : IWithLastName\n    {\n        IWithLastName WithMiddleName(string? middleName);\n    }\n\n    public interface IWithLastName\n    {\n        Student WithLastName(string lastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesD\nDESCRIPTION: This snippet shows how to set zero addresses for the AddressesD property using a Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesD();\n```\n\n----------------------------------------\n\nTITLE: Initializing Static PropertyInfo for IsHappy in C#\nDESCRIPTION: This static constructor initializes the `isHappyPropertyInfo` field by retrieving the `IsHappy` property from the `Student` class using reflection. This allows for dynamic setting of the `IsHappy` property during the fluent building process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    isHappyPropertyInfo = typeof(Student).GetProperty(\"IsHappy\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesE with nullable lambda Address creation\nDESCRIPTION: This snippet shows how to set the AddressesE property using a nullable array of lambda expressions that create Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesE(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address>[]? createAddressesE);\n```\n\n----------------------------------------\n\nTITLE: Setting Friends using IReadOnlyCollection in C#\nDESCRIPTION: This `WhoseFriendsAre` method allows setting the `Friends` property of the `Student` object to a given `IReadOnlyCollection<string>`. A new `CreateStudent` instance is created and its `student.Friends` property is set before returning an `IWhoIsHappy` interface to continue the chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWhoIsHappy WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string>? friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = friends;\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single Backpack Item C#\nDESCRIPTION: This snippet allows setting a single item in the student's backpack. It creates a new `HashSet<string>` with a single element (the provided `backpackContent`) and assigns it to the `student.BackpackContent` property. It returns the constructed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(string backpackContent)\n{\n    student.BackpackContent = new HashSet<string>(1){ backpackContent };\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressF with nullable Address\nDESCRIPTION: This snippet demonstrates setting a single AddressF with a nullable Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressF(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address? addressF);\n```\n\n----------------------------------------\n\nTITLE: Setting No Backpack Content\nDESCRIPTION: This snippet sets the BackpackContent of the Student object to an empty List<object>, representing an empty backpack.  It then returns the fully constructed Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithNoBackpackContent()\n{\n    student.BackpackContent = new List<object>(0);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces\nDESCRIPTION: This snippet defines the interfaces used to structure the Fluent API. `ICreateStudent` represents the initial step, and `IWithProperty1WithProperty2` defines the methods for setting properties. These interfaces guide the user through the fluent creation process, ensuring proper configuration of the `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithProperty1WithProperty2\n    {\n    }\n\n    public interface IWithProperty1WithProperty2\n    {\n        Student<T1, T2> WithProperty1(T1 property1);\n\n        Student<T1, T2> WithProperty2(T2 property2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Interface IMethod1Method1Method1Method1Method1Method1Method1\nDESCRIPTION: This interface defines the methods available in the fluent API for the Student creation. It includes several overloaded Method1 methods with different parameters and generic types, supporting various scenarios.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMethod1Method1Method1Method1Method1Method1Method1\n{\n    Student Method1(int p1, string p2);\n\n    Student Method1<T>(int p1, string p2);\n\n    Student Method1<T>(T p1, string p2);\n\n    Student Method1<S, T>(T p1, string p2);\n\n    Student Method1<S, T>(T p1, out string p2);\n\n    Student Method1<S, T>(in T p1, string p2);\n\n    Student Method1<S, T>(in T p1, ref string p2);\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Single Friend in C#\nDESCRIPTION: This snippet demonstrates how to set a single friend to the student using a Fluent API. The property `Friends` will be set using the friend provided as a parameter.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendIs(string friend)\n    {\n        CreateStudent.friendsPropertyInfo.SetValue(student, new string[1]{ friend });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Backpack Content using params object[]\nDESCRIPTION: This snippet defines a method for setting the 'BackpackContent' property of the Student object using a variable number of object arguments. It creates a List<object> from the provided parameters and sets it as the BackpackContent property. It then returns the fully constructed Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NonGenericCollectionMemberClass/CreateStudent.expected.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(params object[] backpackContent)\n{\n    student.BackpackContent = new List<object>(backpackContent);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date of Birth with Fluent API C#\nDESCRIPTION: This snippet shows how to set the date of birth using the `BornOn` method of the `Person` class via reflection. It uses `bornOnMethodInfo` to invoke the `BornOn` method on the `student` object, passing in the `dateOfBirth`. It then returns the `IInSemester` interface for further chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassPrivateSetters/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IOfAgeBornOn.BornOn(System.DateOnly dateOfBirth)\n{\n    CreateStudent.bornOnMethodInfo.Invoke(student, new object?[] { dateOfBirth });\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backpack Content using params string[] C#\nDESCRIPTION: This code allows setting the student's backpack content using a variable number of string arguments (`params string[]`). It converts the input parameters into a `HashSet<string>` and assigns it to the `student.BackpackContent` property. The method returns the completed `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithBackpackContent(params string[] backpackContent)\n{\n    student.BackpackContent = new HashSet<string>(backpackContent);\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo Fields (C#)\nDESCRIPTION: This static constructor initializes the `PropertyInfo` fields for `Semester`, `Name`, and `DateOfBirth` using reflection. These fields are used later to set the corresponding properties on the `Student` and `Person` classes.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedRecord/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n        namePropertyInfo = typeof(Person).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n        dateOfBirthPropertyInfo = typeof(Person).GetProperty(\"DateOfBirth\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Student BornOn Method C#\nDESCRIPTION: Implements the `BornOn` method from the `IBornOn` interface. It sets the `DateOfBirth` property of the internal `Student` object and returns the current `CreateStudent` instance, cast to the `IInSemester` interface, which represents the next step in the Fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberStruct/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n{\n    student.DateOfBirth = dateOfBirth;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesG with nullable lambda nullable Address creation\nDESCRIPTION: This snippet sets the AddressesG property using a nullable array of lambda expressions, where each lambda creates a nullable Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesG(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?>[]? createAddressesG);\n```\n\n----------------------------------------\n\nTITLE: Implementing BornOn Method using Fluent API in C#\nDESCRIPTION: This method is part of the fluent API and sets the birth date of the student. It invokes the private `BornOn` method of the `Student` class using reflection. It is chained after the `WithName` method, using the same instance to continue the student object creation process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly date)\n    {\n        CreateStudent.bornOnMethodInfo.Invoke(student, new object?[] { date });\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting No Backpack Content in C#\nDESCRIPTION: This snippet allows setting an empty `HashSet<string>` for the `BackpackContent`. It initializes a new `HashSet<string>` with a capacity of 0, assigns it to `student.BackpackContent`, and returns the complete `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithBackpackContent.WithNoBackpackContent()\n    {\n        student.BackpackContent = new HashSet<string>(0);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Student with Only Last Name in C#\nDESCRIPTION: This snippet demonstrates creating a 'Student' object using the overloaded 'Named' method that accepts only the last name. It instantiates 'CreateStudent', invokes the 'Named' method (with one parameter) on the internal 'student' object using reflection, and returns the modified 'Student' object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/OverloadedMethodClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Named(string lastName)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.namedMethodInfo2.Invoke(createStudent.student, new object?[] { lastName });\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing WithName Method using Fluent API in C#\nDESCRIPTION: This method is part of the fluent API and sets the name of the student. It internally invokes the private `WithName` method of the `Student` class using reflection. It creates a new `CreateStudent` instance, invokes the method and returns the instance allowing method chaining.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IBornOn WithName(string name)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.withNameMethodInfo.Invoke(createStudent.student, new object?[] { name });\n        return createStudent;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Pets using params string[] C#\nDESCRIPTION: This code allows setting the student's pets using a variable number of string arguments (`params string[]`). It directly assigns the provided array to the `student.Pets` property. The method returns `IWithBackpackContent` to enable setting the backpack content.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithPets(params string[] pets)\n{\n    student.Pets = pets;\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unknown Friends in C#\nDESCRIPTION: The `WhoseFriendsAreUnknown` method sets the `Friends` property to null, representing an unknown state. This indicates that the information about the student's friends is not available or not applicable. It returns an `IWhoIsHappy` interface for further configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/NullablePredicateAndCollectionClass/CreateStudent.expected.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic static IWhoIsHappy WhoseFriendsAreUnknown()\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = null;\n    return createStudent;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding List of AddressesA to Student (C#)\nDESCRIPTION: The `WithAddressesA` methods sets the `AddressesA` property of the `Student` object. It accepts a `List<Address>`, an array of `Address` objects, or an array of functions that create `Address` objects.  It uses reflection to set the property value.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesA(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address> addressesA)\n{\n    CreateStudent.addressesAPropertyInfo.SetValue(student, addressesA);\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesA(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[] addressesA)\n{\n    CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(addressesA));\n    return student;\n}\n\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressesA(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>[] createAddressesA)\n{\n    CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(createAddressesA.Select(createAddressA => createAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()))));\n    return student;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InSemester Method (C#)\nDESCRIPTION: This code implements the InSemester method of the fluent API. It invokes the private 'InSemester' method on the Student object using reflection. It accepts a nullable integer 'semester' as input and returns the fully constructed 'Student' object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodNullableParameterClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStudent IInSemester.InSemester(int? semester)\n    {\n        CreateStudent.inSemesterMethodInfo.Invoke(student, new object?[] { semester });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: InSemester Implementation C#\nDESCRIPTION: This snippet demonstrates how to set the `Semester` property of the `Student` object using reflection. It takes an integer representing the semester as input. It retrieves the `semesterPropertyInfo` and uses it to set the `Semester` property of the underlying `student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SameNameMemberClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIWithName IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterPropertyInfo.SetValue(student, semester);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Student Creation with Fluent API\nDESCRIPTION: This static method provides the initial step in the fluent API chain for creating a `Student` object. It returns an instance of the `CreateStudent` class, which implements the `ICreateStudent` interface, allowing subsequent method calls to configure the student.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedMethodClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AddressE with Lambda Creation C#\nDESCRIPTION: This snippet sets the AddressesE property of a Student object by using a lambda expression to create a single Address object. It creates a new array containing the address created from lambda. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressE(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressE)\n    {\n        student.AddressesE = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[1]{ createAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.InitialStep()) };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing the Student Builder C#\nDESCRIPTION: This code snippet demonstrates how to initialize the fluent API builder for the `Student` class. It creates an instance of the `CreateStudent` class and returns the initial step interface, `ICreateStudent`, allowing the user to start building a `Student` object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionInterfaceMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a FluentApi enabled Student Class in C#\nDESCRIPTION: This code defines a 'Student' class marked with the '[FluentApi]' attribute. This enables the fluent API generation process.  The 'Semester' property is decorated with '[FluentMember(0)]' to indicate it should be included in the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/PrivateGetMissingSetClass/Student.fixed.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[FluentApi]\npublic class Student\n{\n    [FluentMember(0)]\n    private int Semester { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Friends in C#\nDESCRIPTION: This snippet demonstrates setting the friends of a `Student` object. It uses `PropertyInfo.SetValue` to set the `Friends` property through reflection. The method returns the `Student` object, marking the end of the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string> friends)\n    {\n        CreateStudent.friendsPropertyInfo.SetValue(student, friends);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method for Setting Friends (Params) in C#\nDESCRIPTION: This snippet shows the fluent API for setting a student's friends using a `params` array. Reflection is used to set the `Friends` property. The completed `Student` object is returned, ending the chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/StudentClass/CreateStudent.expected.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)\n    {\n        CreateStudent.friendsPropertyInfo.SetValue(student, friends);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Student object with generic parameter and out string (C#)\nDESCRIPTION: This snippet illustrates how to handle `out` parameters with reflection using the fluent API. An object array is used to pass arguments to the invoked method, and the returned array is used to extract the modified `out` parameter after invocation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericOverloadedPrivateMethodClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student Method1<S, T>(T p1, out string p2)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        object?[] args = new object?[] { p1, null };\n        CreateStudent.method1MethodInfo5.MakeGenericMethod(typeof(S), typeof(T)).Invoke(createStudent.student, args);\n        p2 = (string) args[1]!;\n        return createStudent.student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Invoking Integer Method via Reflection - C#\nDESCRIPTION: The `ReturnIntMethod` method invokes the private `ReturnIntMethod` of the `Student` object using reflection. It retrieves the integer result from the invocation and returns it.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnMultiStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nint IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethod()\n    {\n        return (int) CreateStudent.returnIntMethodMethodInfo.Invoke(student, new object?[] {  })!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesD - C#\nDESCRIPTION: This snippet sets the `addressesD` property of a `Student` object to an empty `HashSet<Address>`. This effectively clears all addresses from the `addressesD` set.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesDPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(0));\n```\n\n----------------------------------------\n\nTITLE: Fluent API: WithFriends with params string[] (C#)\nDESCRIPTION: This method creates a Student object and sets the Friends property using a params string[] for the friends. It converts the string array into a List<string> before assigning it to the student's Friends property.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FullyQualifiedTypeClass/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static Student WithFriends(params string[] friends)\n{\n    CreateStudent createStudent = new CreateStudent();\n    createStudent.student.Friends = new List<string>(friends);\n    return createStudent.student;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces (C#)\nDESCRIPTION: These interfaces define the structure and constraints of the fluent API, ensuring properties are set in a specific order (`Name` before `DateOfBirth`).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TwoMemberClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    IBornOn WithName(string name);\n}\n\npublic interface IBornOn\n{\n    Student BornOn(System.DateOnly dateOfBirth);\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressG with lambda nullable Address creation\nDESCRIPTION: This snippet sets the AddressG property using a lambda expression that returns a nullable Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressG(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?> createAddressG);\n```\n\n----------------------------------------\n\nTITLE: Fluent API Interfaces for Student Creation in C#\nDESCRIPTION: Defines the interfaces used in the CreateStudent fluent API. Each interface represents a step in the object creation process, ensuring that properties are set in a specific order. The interfaces also define the method signatures for setting the corresponding properties, allowing for chained method calls. Default values are specified in the interface methods.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentMethodDefaultValuesClass/CreateStudent.expected.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    public interface ICreateStudent : IWithFirstName\n    {\n    }\n\n    public interface IWithFirstName\n    {\n        IWithLastName WithFirstName(string firstName = \"Alice\");\n    }\n\n    public interface IWithLastName\n    {\n        IBornOn WithLastName(string? lastName = null);\n    }\n\n    public interface IBornOn\n    {\n        IEnrolledIn BornOn(System.DateOnly date = default);\n    }\n\n    public interface IEnrolledIn\n    {\n        IInSemester EnrolledIn(System.DateOnly date = default);\n    }\n\n    public interface IInSemester\n    {\n        IWithNumberOfPassedExams InSemester(int semester = 3);\n    }\n\n    public interface IWithNumberOfPassedExams\n    {\n        IWithNumberOfFailedExams WithNumberOfPassedExams(int? numberOfPassedExams = default);\n    }\n\n    public interface IWithNumberOfFailedExams\n    {\n        Student WithNumberOfFailedExams(int? numberOfFailedExams = default);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressesB with IReadOnlyCollection\nDESCRIPTION: This snippet shows how to set the AddressesB property using an IReadOnlyCollection of Address objects.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressesB(System.Collections.Generic.IReadOnlyCollection<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> addressesB);\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfo using Reflection in C#\nDESCRIPTION: This C# snippet initializes static PropertyInfo objects using reflection to access properties of the Student and Person classes. It retrieves the 'Semester', 'Name', and 'DateOfBirth' properties using BindingFlags to specify instance and public members. These PropertyInfo objects are later used to set the corresponding properties of the Student object in a type-safe manner.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedSetters/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n        namePropertyInfo = typeof(Person).GetProperty(\"Name\", BindingFlags.Instance | BindingFlags.Public)!;\n        dateOfBirthPropertyInfo = typeof(Person).GetProperty(\"DateOfBirth\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressG with nullable Address\nDESCRIPTION: This snippet shows how to set the AddressG property using a nullable Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address? addressG);\n```\n\n----------------------------------------\n\nTITLE: Initializing Student Creation - C#\nDESCRIPTION: This snippet initializes the fluent API for creating a Student object. It defines the static constructor that retrieves the PropertyInfo for the 'Semester' property using reflection, necessary because it's a private set property. It also provides the InitialStep method to start the fluent creation process.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GetPrivateSetPropertyClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n}\n\nprivate CreateStudent()\n{\n    student = new Student();\n}\n\npublic static ICreateStudent InitialStep()\n{\n    return new CreateStudent();\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Initialization C#\nDESCRIPTION: This code snippet initializes static fields used to access `Student` properties via reflection. It retrieves the `PropertyInfo` for the `Semester`, `Initial`, and `LastName` properties of the `Student` class, which will later be used to set their values.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/SameNameMemberClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n    {\n        semesterPropertyInfo = typeof(Student).GetProperty(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n        initialPropertyInfo = typeof(Student).GetProperty(\"Initial\", BindingFlags.Instance | BindingFlags.Public)!;\n        lastNamePropertyInfo = typeof(Student).GetProperty(\"LastName\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Fluent API Interfaces for Student Creation\nDESCRIPTION: These interfaces define the structure of the Fluent API for creating `Student` objects. Each interface represents a step in the creation process, ensuring that properties are set in a specific order: `ICreateStudent`, `IWithName`, `IBornOn`, and `IInSemester`.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordPrimaryConstructor/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IWithName\n{\n}\n\npublic interface IWithName\n{\n    IBornOn WithName(string name);\n}\n\npublic interface IBornOn\n{\n    IInSemester BornOn(System.DateOnly dateOfBirth);\n}\n\npublic interface IInSemester\n{\n    Student InSemester(int semester);\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Fluent API Class Definition C#\nDESCRIPTION: Defines the `CreateStudent` class which implements the fluent API for creating `Student` objects. It implements the `ICreateStudent` and `IInSemester` interfaces. It uses a private `Student` field and a static `FieldInfo` for the `Semester` field to set the value using reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PublicReadonlyFieldClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent :\n    CreateStudent.ICreateStudent,\n    CreateStudent.IInSemester\n{\n    private readonly Student student;\n    private static readonly FieldInfo semesterFieldInfo;\n\n    static CreateStudent()\n    {\n        semesterFieldInfo = typeof(Student).GetField(\"Semester\", BindingFlags.Instance | BindingFlags.Public)!;\n    }\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public static Student InSemester(int semester)\n    {\n        CreateStudent createStudent = new CreateStudent();\n        CreateStudent.semesterFieldInfo.SetValue(createStudent.student, semester);\n        return createStudent.student;\n    }\n\n    Student IInSemester.InSemester(int semester)\n    {\n        CreateStudent.semesterFieldInfo.SetValue(student, semester);\n        return student;\n    }\n\n    public interface ICreateStudent : IInSemester\n    {\n    }\n\n    public interface IInSemester\n    {\n        Student InSemester(int semester);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for Fluent API Steps C#\nDESCRIPTION: This snippet defines the interfaces for the Fluent API, including ICreateStudent and IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.  These interfaces define the contract for the different steps in the fluent chain.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentReturnSingleStepPrivateMethodsClass/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ICreateStudent : IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter\n    {\n    }\n\n    public interface IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter\n    {\n        void ReturnVoidMethod();\n\n        int ReturnIntMethod();\n\n        System.Collections.Generic.List<int> ReturnListMethod();\n\n        int ReturnIntMethodWithRefParameter(ref string s);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Student's Date of Birth (BornOn)\nDESCRIPTION: The `BornOn` method sets the `dateOfBirth` property of the `Student` object using reflection.  It takes a `DateOnly` object as input and returns an `IInSemester` instance, allowing the user to proceed to the next step in the fluent API.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/ThreeMemberRecordPrimaryConstructor/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n{\n    CreateStudent.dateOfBirthPropertyInfo.SetValue(student, dateOfBirth);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Student Class with Fluent API (C#)\nDESCRIPTION: Defines the 'CreateStudent' class with a nested interface 'ICreateStudent'. The class uses a private constructor to ensure that the object is created through the fluent API. The InitialStep method returns an instance of the CreateStudent class which represents the beginning of the fluent interface.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/EmptyClass/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CreateStudent : CreateStudent.ICreateStudent\n{\n    private readonly Student student;\n\n    private CreateStudent()\n    {\n        student = new Student();\n    }\n\n    public static ICreateStudent InitialStep()\n    {\n        return new CreateStudent();\n    }\n\n    public interface ICreateStudent\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Student's Date of Birth (C#)\nDESCRIPTION: This snippet sets the 'DateOfBirth' property of the Student object using reflection. It takes a 'DateOnly' object as input and uses the 'dateOfBirthPropertyInfo' to set the value. It returns the next interface in the fluent chain, 'IInSemester'.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/InheritedClassProtectedMembers/CreateStudent.expected.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIInSemester IBornOn.BornOn(System.DateOnly dateOfBirth)\n    {\n        CreateStudent.dateOfBirthPropertyInfo.SetValue(student, dateOfBirth);\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API Method Invocation: Method2\nDESCRIPTION: Defines the instance method to invoke the `Method2` on the `Student` object. This method takes nine parameters, some of which are generic and some depend on the `CreateStudent` generic type. It invokes the method and returns the next interface in the chain (`IMethod3`).\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassWithGenericMethods/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n    IMethod3 IMethod2.Method2<T6, T7, T8, T9>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)\n    {\n        student.Method2<T6, T7, T8, T9>(p1, p2, p3, p4, p5, p6, p7, p8, p9);\n        return this;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation for Fluent Property Setting (Property2)\nDESCRIPTION: This snippet shows the implementation of the `IWithProperty1WithProperty2.WithProperty2` method, setting the `Property2` of the `Student` object and returning the adjusted `Student` instance. This method enables property chaining in the fluent API, facilitating sequential property configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/GenericClassPrivateDefaultConstructor/CreateStudent.expected.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nStudent<T1, T2> IWithProperty1WithProperty2.WithProperty2(T2 property2)\n    {\n        student.Property2 = property2;\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesF from Lambdas - C#\nDESCRIPTION: This snippet sets the `addressesF` property using an array generated from lambda functions. Each lambda function takes an `ICreateAddress` interface and returns a nullable `Address`. The `Select` method transforms each lambda into an `Address`, and `ToArray` creates the resulting array.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesFPropertyInfo.SetValue(student, createAddressesF.Select(createAddressF => createAddressF(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep())).ToArray());\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateStudent and Reflecting on SomeMethod - C#\nDESCRIPTION: This snippet initializes the `CreateStudent` class and uses reflection to get the `SomeMethod` method info.  The static constructor retrieves the MethodInfo for the non-public `SomeMethod` using `typeof(Student).GetMethod`. The method info is used later to invoke the method reflectively.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/TryBreakFluentApiClass2/CreateStudent.expected.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic CreateStudent()\n{\n    someMethodMethodInfo = typeof(Student).GetMethod(\n        \"SomeMethod\",\n        0,\n        BindingFlags.Instance | BindingFlags.NonPublic,\n        null,\n        new Type[] { typeof(string) },\n        null)!;\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressE with lambda Address creation\nDESCRIPTION: This snippet shows how to set the AddressE property using a lambda expression.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressE(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address> createAddressE);\n```\n\n----------------------------------------\n\nTITLE: Setting AddressE with Single Address C#\nDESCRIPTION: This code snippet shows how to set a single Address object to the Student's AddressesE property. It assigns an array containing the specified Address object to AddressesE property. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressE)\n    {\n        student.AddressesE = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address[1]{ addressE };\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting AddressE with Address\nDESCRIPTION: This snippet demonstrates setting a single AddressE using an Address object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address addressE);\n```\n\n----------------------------------------\n\nTITLE: Setting No Pets in C#\nDESCRIPTION: This snippet shows how to set no pets for the student. It creates an empty string array and assigns it to the `student.Pets` property.  The method then returns an object that implements the `IWithBackpackContent` interface for further configuration.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/CollectionMemberClass/CreateStudent.expected.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nIWithBackpackContent IWithPets.WithZeroPets()\n    {\n        student.Pets = new string[0];\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Zero AddressesF C#\nDESCRIPTION: This snippet sets the AddressesF property of a Student object to an empty array. Returns the modified Student object.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesF()\n    {\n        student.AddressesF = new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyCollectionsClass.Address?[0];\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AddressesD from Lambdas - C#\nDESCRIPTION: This snippet sets the `addressesD` property of a `Student` object, which is a `HashSet<Address>`, using a collection of lambda functions that create `Address` instances. The lambda functions are executed, and the resulting `Address` objects are collected into a `HashSet` before being assigned to the `addressesD` property using reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesDPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address>(createAddressesD.Select(createAddressD => createAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()))));\n```\n\n----------------------------------------\n\nTITLE: Fluent API: Setting Zero AddressesF\nDESCRIPTION: This snippet demonstrates setting zero addresses for AddressesF.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyCollectionsClass/CreateStudent.expected.txt#_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nStudent WithZeroAddressesF();\n```\n\n----------------------------------------\n\nTITLE: FluentCollection Attribute Usage Example\nDESCRIPTION: This C# code snippet demonstrates the usage of the `FluentCollection` attribute on a `Friends` collection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[FluentCollection(5, \"Friend\", \"WhoseFriendsAre\", \"WhoseFriendIs\", \"WhoHasNoFriends\")]\npublic IReadOnlyCollection<string> Friends { get; private set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n...WhoseFriendsAre(new string[] { \"Bob\", \"Carol\", \"Eve\" })...\n...WhoseFriendsAre(\"Bob\", \"Carol\", \"Eve\")...\n...WhoseFriendIs(\"Alice\")...\n...WhoHasNoFriends()...\n```\n\n----------------------------------------\n\nTITLE: Initializing AddressesF to Zero in Fluent API (C#)\nDESCRIPTION: This method initializes the 'addressesF' property of a 'Student' object to an empty array of nullable 'Address' objects using reflection. It returns the modified 'Student' object. The method belongs to the fluent API interface IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithZeroAddressesF()\n    {\n        CreateStudent.addressesFPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[0]);\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Single AddressE - C#\nDESCRIPTION: This snippet sets the `addressesE` property of a `Student` object to a new array containing a single `Address` object. The `addressesEPropertyInfo` is used to access the property via reflection.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nCreateStudent.addressesEPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address[1]{ addressE });\n```\n\n----------------------------------------\n\nTITLE: Assigning Lambda-Created AddressG to Student (C#)\nDESCRIPTION: This method assigns a single nullable 'Address' object, created using a lambda expression, to the 'addressesG' property of a 'Student' object. It uses the 'CreateAddress' fluent API to construct the address. The method belongs to the fluent API interface IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/FluentLambdaManyPrivateCollectionsClass/CreateStudent.expected.txt#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nStudent IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesEWithAddressesFWithAddressesG.WithAddressG(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?> createAddressG)\n    {\n        CreateStudent.addressesGPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.Address?[1]{ createAddressG(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaManyPrivateCollectionsClass.CreateAddress.InitialStep()) });\n        return student;\n    }\n```\n\n----------------------------------------\n\nTITLE: Invoking MethodWithInParameter via Reflection\nDESCRIPTION: This method invokes the MethodWithInParameter method on the Student instance using reflection. It handles the 'in' parameter by simply passing the parameter within the object array to the Invoke method.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/CodeGeneration/TestClasses/Abstract/PrivateFluentMethodParameterModifiersClass/CreateStudent.expected.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIMethodWithOutParameter IMethodWithInParameter.MethodWithInParameter(in int n2)\n    {\n        CreateStudent.methodWithInParameterMethodInfo.Invoke(student, new object?[] { n2 });\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Fluent API class with invalid return type (C#)\nDESCRIPTION: This code defines a `Student` class decorated with the `FluentApi` attribute. It contains a `WithName` method intended to be part of the Fluent API, but it is incorrectly defined as a `void` method that attempts to return an integer value. This will result in a compile-time error. The purpose of this code is to demonstrate an invalid fluent API implementation.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/src/M31.FluentApi.Tests/AnalyzerAndCodeFixes/TestClasses/InvalidFluentMethodReturnTypeClass/Student.fixed.illustration.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// NOTE: File does not compile due to an error (void method returns int). The file will not be used in the unit test.\n\n// Non-nullable member is uninitialized\n#pragma warning disable CS8618\n\nusing M31.FluentApi.Attributes;\n\nnamespace M31.FluentApi.Tests.AnalyzerAndCodeFixes.TestClasses.InvalidFluentMethodReturnTypeClass;\n\n[FluentApi]\npublic class Student\n{\n    public string Name { get; private set; }\n\n    [FluentMethod(0)]\n    public void WithName(string name)\n    {\n        Name = name;\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FluentPredicate Attribute Definition\nDESCRIPTION: This C# snippet shows the signature of the `FluentPredicate` attribute, used for boolean members. It generates methods for setting the boolean to true, false, or passing the boolean value directly.\nSOURCE: https://github.com/m31coding/m31.fluentapi/blob/main/README.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nFluentPredicate(int builderStep, string method = \"{Name}\", string negatedMethod = \"Not{Name}\")\n```"
  }
]