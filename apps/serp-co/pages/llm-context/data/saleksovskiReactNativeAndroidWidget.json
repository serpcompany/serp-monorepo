[
  {
    "owner": "saleksovski",
    "repo": "react-native-android-widget",
    "content": "TITLE: Creating Basic Hello Widget with React Native Android Widget\nDESCRIPTION: Example of creating a basic widget that displays 'Hello' text centered on a white background. Uses FlexWidget for layout and TextWidget for text display. The widget demonstrates proper styling including font customization, border radius, and flex layout properties.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/widget-design.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { FlexWidget, TextWidget } from 'react-native-android-widget';\n\nexport function HelloWidget() {\n  return (\n    <FlexWidget\n      style={{\n        height: 'match_parent',\n        width: 'match_parent',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#ffffff',\n        borderRadius: 16,\n      }}\n    >\n      <TextWidget\n        text=\"Hello\"\n        style={{\n          fontSize: 32,\n          fontFamily: 'Inter',\n          color: '#000000',\n        }}\n      />\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageWidget in React Native Android\nDESCRIPTION: Example showing how to use the ImageWidget component within a FlexWidget container. The code demonstrates loading a static image resource with specified dimensions.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/image-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlexWidget, ImageWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget>\n      <ImageWidget\n        image={require('../assets/image-file.jpg')}\n        imageWidth={88}\n        imageHeight={88}\n      />\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable List Widget in React Native Android\nDESCRIPTION: Example implementation of a ListWidget component that creates a scrollable list with 15 items. Each item is a FlexWidget containing text and is clickable with a custom URI action. The widget demonstrates proper styling, layout configuration, and click handling.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/list-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ListWidget,\n  FlexWidget,\n  TextWidget,\n} from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <ListWidget\n      style={{\n        height: 'match_parent',\n        width: 'match_parent',\n        backgroundColor: '#1F3529',\n      }}\n    >\n      {Array.from({ length: 15 }).map((_, i) => (\n        <FlexWidget\n          key={i}\n          style={{\n            width: 'match_parent',\n            alignItems: 'center',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            padding: 8,\n          }}\n          clickAction=\"OPEN_URI\"\n          clickActionData={{\n            uri: `androidwidgetexample://list/list-demo/${i + 1}`,\n          }}\n        >\n          <TextWidget text={`React Native Android Widget Release 0.${i + 1}`} />\n        </FlexWidget>\n      ))}\n    </ListWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Widget Updates in React Native\nDESCRIPTION: Example implementation of a Counter screen component that updates an Android widget. The component uses requestWidgetUpdate to sync the counter state between the app and widget, handling cases where widgets may not be present on the home screen.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/request-widget-update.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport { requestWidgetUpdate } from 'react-native-android-widget';\n\nimport { CounterWidget } from './CounterWidget';\n\nexport function CounterScreen() {\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    requestWidgetUpdate({\n      widgetName: 'Counter',\n      renderWidget: () => <CounterWidget count={count} />,\n      widgetNotFound: () => {\n        // Called if no widget is present on the home screen\n      }\n    });\n  }, [count]);\n\n  return (\n    <View style={styles.container}>\n      <Text>{count}</Text>\n      <Button title=\"Increment\" onPress={() => setCount(count + 1)} />\n      <Button title=\"Decrement\" onPress={() => setCount(count - 1)} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Widget Provider XML\nDESCRIPTION: This XML snippet defines the widget provider details, including dimensions, update frequency, layout, preview image, and description. It's crucial for registering the widget with the Android system.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:minWidth=\"320dp\"\n    android:minHeight=\"120dp\"\n\n    android:targetCellWidth=\"5\"\n    android:targetCellHeight=\"2\"\n\n    android:updatePeriodMillis=\"0\"\n\n    android:initialLayout=\"@layout/rn_widget\"\n\n    android:previewImage=\"@drawable/hello_preview\"\n    android:description=\"@string/widget_hello_description\"\n\n    android:resizeMode=\"none\"\n\n    android:widgetCategory=\"home_screen\">\n</appwidget-provider>\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Android Widget by ID in React Native\nDESCRIPTION: This code demonstrates how to use requestWidgetUpdateById to update a specific Android widget with a known ID. It creates a counter screen with increment and decrement buttons, and updates the corresponding widget with the current count when the state changes.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/request-widget-update-by-id.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport { requestWidgetUpdateById } from 'react-native-android-widget';\n\nimport { CounterWidget } from './CounterWidget';\n\nexport function CounterScreen() {\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    requestWidgetUpdateById({\n      widgetName: 'Counter',\n      widgetId: 1,\n      renderWidget: () => <CounterWidget count={count} />,\n      widgetNotFound: () => {\n        // Called if no widget is present on the home screen\n      },\n    });\n  }, [count]);\n\n  return (\n    <View style={styles.container}>\n      <Text>{count}</Text>\n      <Button title=\"Increment\" onPress={() => setCount(count + 1)} />\n      <Button title=\"Decrement\" onPress={() => setCount(count - 1)} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SvgWidget with Different SVG Sources in React Native\nDESCRIPTION: Example showing three different ways to use SvgWidget: importing an SVG file, using an SVG string directly, and loading from a network URL. Each SVG is displayed within a FlexWidget container with consistent sizing of 72x72.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/svg-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlexWidget, SvgWidget } from 'react-native-android-widget';\n\nconst svgString = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" viewBox=\"0 0 300 300\">\n  ...\n</svg>\n`;\n\nexport function MyWidget() {\n  return (\n    <FlexWidget>\n      <SvgWidget\n        // highlight-next-line\n        svg={require('../assets/SVG_Logo.svg')}\n        style={{ height: 72, width: 72 }}\n      />\n\n      <SvgWidget\n        // highlight-next-line\n        svg={svgString}\n        style={{ height: 72, width: 72 }}\n      />\n\n      <SvgWidget\n        // highlight-next-line\n        svg=\"https://upload.wikimedia.org/wikipedia/commons/4/4f/SVG_Logo.svg\"\n        style={{ height: 72, width: 72 }}\n      />\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Task Handler in TypeScript\nDESCRIPTION: Defines a widget task handler function that manages different widget lifecycle events and click actions. Includes mapping widget names to components and handling various widget actions like adding, updating, resizing, and click events.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-task-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport type { WidgetTaskHandlerProps } from 'react-native-android-widget';\nimport { HelloWidget } from './HelloWidget';\n\nconst nameToWidget = {\n  // Hello will be the **name** with which we will reference our widget.\n  Hello: HelloWidget,\n};\n\nexport async function widgetTaskHandler(props: WidgetTaskHandlerProps) {\n  const widgetInfo = props.widgetInfo;\n  const Widget =\n    nameToWidget[widgetInfo.widgetName as keyof typeof nameToWidget];\n\n  switch (props.widgetAction) {\n    case 'WIDGET_ADDED':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_UPDATE':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_RESIZED':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_DELETED':\n      // Handle widget deleted (remove widget data if you stored it somewhere)\n      break;\n\n    case 'WIDGET_CLICK':\n      if (props.clickAction === 'play') {\n        props.renderWidget(<Widget status=\"playing\" />);\n      } else {\n        props.renderWidget(<Widget status=\"stopped\" />);\n      }\n      break;\n\n    default:\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Widget Click Actions in widgetTaskHandler\nDESCRIPTION: This code shows how to implement a widgetTaskHandler that responds to different widget actions, including click events. When a WIDGET_CLICK action is received, it checks the clickAction type and has access to the clickActionData.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/handling-clicks.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function widgetTaskHandler(props: WidgetTaskHandlerProps) {\n  switch (props.widgetAction) {\n    case 'WIDGET_ADDED':\n      // ...;\n      break;\n\n    case 'WIDGET_UPDATE':\n      // ...;\n      break;\n\n    case 'WIDGET_RESIZED':\n      // ...;\n      break;\n\n    case 'WIDGET_DELETED':\n      // ...;\n      break;\n\n    case 'WIDGET_CLICK':\n      if (props.clickAction === 'MY_ACTION') {\n        // Do stuff when primitive with `clickAction=\"MY_ACTION\"` is clicked\n        // props.clickActionData === { id: 0 }\n      }\n      break;\n\n    default:\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Widget Preview Screen with React Native Android Widget\nDESCRIPTION: This example demonstrates how to create a screen that previews an Android widget using the WidgetPreview component. The code sets up a centered container that displays a preview of HelloWidget with specific dimensions.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/widget-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { WidgetPreview } from 'react-native-android-widget';\n\nimport { HelloWidget } from './HelloWidget';\n\nexport function HelloWidgetPreviewScreen() {\n  return (\n    <View style={styles.container}>\n      <WidgetPreview\n        renderWidget={() => <HelloWidget />}\n        width={320}\n        height={200}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlapWidget in React Native Android Widget\nDESCRIPTION: Example showing how to use OverlapWidget to stack multiple FlexWidget components with different margin positions. The component allows child widgets to be laid out on top of each other with customizable margins for positioning.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/overlap-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlapWidget, FlexWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <OverlapWidget>\n      <FlexWidget style={{ marginTop: 10, marginLeft: 10 }}>...</FlexWidget>\n      <FlexWidget style={{ marginTop: 20, marginLeft: 10 }}>...</FlexWidget>\n    </OverlapWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Configuration Screen Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic widget configuration screen component with the appropriate props type. It includes the required parameters: widgetInfo (widget data), setResult (method to finish configuration), and renderWidget (method to update widget appearance).\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-configuration-screen.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport type { WidgetConfigurationScreenProps } from 'react-native-android-widget';\nimport { ConfigurableWidget } from './ConfigurableWidget';\n\nexport function WidgetConfigurationScreen({\n  widgetInfo,\n  setResult,\n  renderWidget,\n}: WidgetConfigurationScreenProps) {\n  // Here we can define the UI for configuring the widget\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Task Handler in React Native\nDESCRIPTION: Defines a widget task handler function that manages widget lifecycle events like addition, updates, resizing, deletion, and clicks. It maps widget names to their component definitions and handles rendering.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-task-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport type { WidgetTaskHandlerProps } from 'react-native-android-widget';\nimport { HelloWidget } from './HelloWidget';\n\nconst nameToWidget = {\n  // Hello will be the **name** with which we will reference our widget.\n  Hello: HelloWidget,\n};\n\nexport async function widgetTaskHandler(props: WidgetTaskHandlerProps) {\n  const widgetInfo = props.widgetInfo;\n  const Widget =\n    nameToWidget[widgetInfo.widgetName as keyof typeof nameToWidget];\n\n  switch (props.widgetAction) {\n    case 'WIDGET_ADDED':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_UPDATE':\n      // Not needed for now\n      break;\n\n    case 'WIDGET_RESIZED':\n      // Not needed for now\n      break;\n\n    case 'WIDGET_DELETED':\n      // Not needed for now\n      break;\n\n    case 'WIDGET_CLICK':\n      // Not needed for now\n      break;\n\n    default:\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FlexWidget Component in React Native Android\nDESCRIPTION: Demonstrates how to import and implement the FlexWidget component with basic flex styling properties. The component allows for flexbox-based layout of child widgets with properties like alignItems and justifyContent.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/flex-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlexWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget\n      style={{\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      ...\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Receiver in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add a receiver for the widget in the AndroidManifest.xml file. This receiver handles system events like widget addition and resizing.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  ...\n  <application\n      android:name=\".MainApplication\"\n      ...>\n\n      <activity\n          android:name=\".MainActivity\"\n          ...>\n      </activity>\n\n      <service\n          android:name=\"com.reactnativeandroidwidget.RNWidgetCollectionService\"\n          ... />\n\n      <receiver\n          android:name=\".widget.Hello\"\n          android:exported=\"false\"\n          android:label=\"My Hello Widget\">\n          <intent-filter>\n              <action android:name=\"android.appwidget.action.APPWIDGET_UPDATE\" />\n              <action android:name=\"com.yourapppackage.WIDGET_CLICK\" />\n          </intent-filter>\n          <meta-data\n              android:name=\"android.appwidget.provider\"\n              android:resource=\"@xml/widgetprovider_hello\" />\n      </receiver>\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Handling Widget Updates in React Native\nDESCRIPTION: This code snippet demonstrates how to handle widget updates in the widgetTaskHandler function. It uses a switch statement to check for the 'WIDGET_UPDATE' action and renders the updated widget accordingly.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/update-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function widgetTaskHandler(props: WidgetTaskHandlerProps) {\n\n  switch (props.widgetAction) {\n    ...\n\n    case 'WIDGET_UPDATE':\n      props.renderWidget(<Widget />);\n      break;\n\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding clickAction to FlexWidget in React Native Android Widget\nDESCRIPTION: This snippet demonstrates how to add a clickAction and clickActionData to a FlexWidget component. The clickAction prop defines the action type, while clickActionData can contain additional information needed for the action.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/handling-clicks.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlexWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget clickAction=\"MY_ACTION\" clickActionData={{ id: 0 }}>\n      ...\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IconWidget in React Native Android Widget\nDESCRIPTION: Basic example of using IconWidget to display a material icon within a FlexWidget. This demonstrates the minimal setup required with the font, size, and icon properties.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/icon-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlexWidget, IconWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget>\n      <IconWidget font=\"material\" size={36} icon=\"play_arrow\" />\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextWidget in React Native Android Widget\nDESCRIPTION: Basic implementation example of TextWidget within a FlexWidget container. This shows how to create a simple text display with custom styling including font size, family, and color.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/text-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlexWidget, TextWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget>\n      <TextWidget\n        text=\"Hello\"\n        style={{\n          fontSize: 32,\n          fontFamily: 'Inter',\n          color: '#000000',\n        }}\n      />\n    </FlexWidget>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RNWidgetCollectionService to AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to add the RNWidgetCollectionService to the AndroidManifest.xml file. This service is required for using ListWidget and should be added only once for all widgets.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  ...\n  <application\n      android:name=\".MainApplication\"\n      ...>\n\n      <activity\n          android:name=\".MainActivity\"\n          ...>\n      </activity>\n\n      <service\n          android:name=\"com.reactnativeandroidwidget.RNWidgetCollectionService\"\n          android:permission=\"android.permission.BIND_REMOTEVIEWS\" />\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Preview Screen in React Native\nDESCRIPTION: Creates a preview screen for an Android widget using the WidgetPreview component. The component allows developers to preview widget designs directly within the app, rendering a HelloWidget component with specified dimensions of 320x200.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/widget-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { WidgetPreview } from 'react-native-android-widget';\n\nimport { HelloWidget } from './HelloWidget';\n\nexport function HelloWidgetPreviewScreen() {\n  return (\n    <View style={styles.container}>\n      <WidgetPreview\n        renderWidget={() => <HelloWidget />}\n        width={320}\n        height={200}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Widget Task Handler with API Call\nDESCRIPTION: Example of handling widget click events with asynchronous API calls to update widget content dynamically.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-task-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'WIDGET_CLICK':\n  if (props.clickAction === 'refresh') {\n    const data = await fetch('https://example.com/api').then((response) => response.json());\n    props.renderWidget(<Widget title={data.title} />);\n  }\n  break;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Widgets in Expo React Native Project\nDESCRIPTION: This code snippet demonstrates how to configure Android widgets in an Expo React Native project using the react-native-android-widget library. It shows the setup for custom fonts, widget properties, and integration with the Expo configuration file.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget-expo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigContext, ExpoConfig } from 'expo/config';\nimport type { WithAndroidWidgetsParams } from 'react-native-android-widget';\n\nconst widgetConfig: WithAndroidWidgetsParams = {\n  fonts: ['./assets/fonts/Inter.ttf'],\n  widgets: [\n    {\n      name: 'Hello',\n      label: 'My Hello Widget',\n      minWidth: '320dp',\n      minHeight: '120dp',\n      targetCellWidth: 5,\n      targetCellHeight: 2,\n      description: 'This is my first widget',\n      previewImage: './assets/widget-preview/hello.png',\n      updatePeriodMillis: 1800000,\n    },\n  ],\n};\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [['react-native-android-widget', widgetConfig]],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Configuration Screen in Expo Project\nDESCRIPTION: This snippet demonstrates how to register a widget configuration screen in an Expo project by creating a custom index.ts file and modifying the package.json to use it. It includes the setup for registering the root component, widget task handler, and configuration screen.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-configuration-screen.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"my-expo-app\",\n  \"main\": \"index.ts\",\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport {\n  registerWidgetConfigurationScreen,\n  registerWidgetTaskHandler,\n} from 'react-native-android-widget';\n\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\nimport { WidgetConfigurationScreen } from './WidgetConfigurationScreen';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\nregisterWidgetTaskHandler(widgetTaskHandler);\nregisterWidgetConfigurationScreen(WidgetConfigurationScreen);\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Configuration Activity in Java\nDESCRIPTION: Defines a Java class that extends RNWidgetConfigurationActivity to create a configurable widget activity.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/make-widget-configurable.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.yourapppackage;\n\nimport com.reactnativeandroidwidget.RNWidgetConfigurationActivity;\n\npublic class WidgetConfigurationActivity extends RNWidgetConfigurationActivity {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Configuration Activity in Kotlin\nDESCRIPTION: Defines a Kotlin class that extends RNWidgetConfigurationActivity to create a configurable widget activity.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/make-widget-configurable.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.yourapppackage\n\nimport com.reactnativeandroidwidget.RNWidgetConfigurationActivity\n\nclass WidgetConfigurationActivity : RNWidgetConfigurationActivity() {\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Configuration Screen in React Native\nDESCRIPTION: This snippet shows how to register a widget configuration screen in the main index file of a React Native app. It demonstrates registering the main app component, widget task handler, and widget configuration screen component.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-configuration-screen.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppRegistry } from 'react-native';\nimport {\n  registerWidgetConfigurationScreen,\n  registerWidgetTaskHandler,\n} from 'react-native-android-widget';\nimport { name as appName } from './app.json';\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\nimport { WidgetConfigurationScreen } from './WidgetConfigurationScreen';\n\nAppRegistry.registerComponent(appName, () => App);\nregisterWidgetTaskHandler(widgetTaskHandler);\nregisterWidgetConfigurationScreen(WidgetConfigurationScreen);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts in Expo for TextWidget\nDESCRIPTION: Example of Expo configuration using a config plugin to specify custom fonts for the TextWidget. The fonts array lists all custom font files needed for the widget.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/text-widget.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [\n    ['react-native-android-widget', {\n      fonts: ['./assets/fonts/Inter.ttf'],\n      widgets: [...],\n    }]\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Widget in Expo using Config Plugin\nDESCRIPTION: Demonstrates how to make a widget configurable in Expo by setting the widgetFeatures property in the config plugin.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/make-widget-configurable.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { ConfigContext, ExpoConfig } from 'expo/config';\nimport type { WithAndroidWidgetsParams } from 'react-native-android-widget';\n\nconst widgetConfig: WithAndroidWidgetsParams = {\n  widgets: [\n    {\n      name: 'Hello',\n      label: 'My Hello Widget',\n      minWidth: '320dp',\n      minHeight: '120dp',\n      targetCellWidth: 5,\n      targetCellHeight: 2,\n      description: 'This is my first widget',\n      previewImage: './assets/widget-preview/hello.png',\n      updatePeriodMillis: 1800000,\n\n      // This\n      widgetFeatures: 'reconfigurable',\n    },\n  ],\n};\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [['react-native-android-widget', widgetConfig]],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Provider Class in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a widget provider class in Kotlin by extending RNWidgetProvider. The class name will be used to reference the widget.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.yourapppackage.widget\n\nimport com.reactnativeandroidwidget.RNWidgetProvider\n\nclass Hello : RNWidgetProvider() {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Widget Configuration Activity to AndroidManifest.xml\nDESCRIPTION: Updates the AndroidManifest.xml file to include the widget configuration activity, enabling widget configuration.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/make-widget-configurable.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  ...\n  <application\n      android:name=\".MainApplication\"\n      ...>\n\n      <activity\n          android:name=\".MainActivity\"\n          ...>\n      </activity>\n\n      <activity android:name=\".WidgetConfigurationActivity\"\n          android:exported=\"true\">\n          <intent-filter>\n              <action android:name=\"android.appwidget.action.APPWIDGET_CONFIGURE\"/>\n          </intent-filter>\n      </activity>\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Task Handler in React Native\nDESCRIPTION: Shows how to register the widget task handler in the main index file of a standard React Native application alongside the main app component registration.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-task-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { AppRegistry } from 'react-native';\nimport { registerWidgetTaskHandler } from 'react-native-android-widget';\nimport { name as appName } from './app.json';\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\n\nAppRegistry.registerComponent(appName, () => App);\nregisterWidgetTaskHandler(widgetTaskHandler);\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Provider Class in Java\nDESCRIPTION: This snippet shows how to create a widget provider class in Java by extending RNWidgetProvider. The class name will be used to reference the widget.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.yourapppackage.widget;\n\nimport com.reactnativeandroidwidget.RNWidgetProvider;\n\npublic class Hello extends RNWidgetProvider {\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Task Handler in React Native\nDESCRIPTION: Shows how to register the widget task handler in a standard React Native application's entry point.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-task-handler.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppRegistry } from 'react-native';\nimport { registerWidgetTaskHandler } from 'react-native-android-widget';\nimport { name as appName } from './app.json';\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\n\nAppRegistry.registerComponent(appName, () => App);\nregisterWidgetTaskHandler(widgetTaskHandler);\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Provider XML for Configurability\nDESCRIPTION: Modifies the widget provider XML file to add configuration properties, making the widget configurable.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/make-widget-configurable.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:minWidth=\"320dp\"\n    android:minHeight=\"120dp\"\n\n    android:targetCellWidth=\"5\"\n    android:targetCellHeight=\"2\"\n\n    android:updatePeriodMillis=\"0\"\n\n    android:initialLayout=\"@layout/rn_widget\"\n\n    android:previewImage=\"@drawable/hello_preview\"\n    android:description=\"@string/widget_hello_description\"\n\n    android:resizeMode=\"none\"\n\n\n    android:configure=\"com.yourapppackage.WidgetConfigurationActivity\"\n    android:widgetFeatures=\"reconfigurable\"\n\n\n    android:widgetCategory=\"home_screen\">\n</appwidget-provider>\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Task Handler in Expo\nDESCRIPTION: Creates a custom index file for Expo projects to register both the main app component and the widget task handler, replacing Expo's default entry point.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-task-handler.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { registerWidgetTaskHandler } from 'react-native-android-widget';\n\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\nregisterWidgetTaskHandler(widgetTaskHandler);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts in Expo Config for IconWidget\nDESCRIPTION: Example showing how to configure custom fonts in an Expo app's config file using the config plugin approach. This setup is necessary to make custom icon fonts available to the IconWidget.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/primitives/icon-widget.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [\n    ['react-native-android-widget', {\n      fonts: ['./assets/fonts/material.ttf'],\n      widgets: [...],\n    }]\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-android-widget with npm\nDESCRIPTION: This command installs the react-native-android-widget package using npm. It saves the package as a dependency in the project's package.json file.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-native-android-widget\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Android Widget using yarn\nDESCRIPTION: Command to install the React Native Android Widget library using yarn package manager. This adds the library as a dependency to your React Native project.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-android-widget\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Task Handler in Expo\nDESCRIPTION: Shows how to register the widget task handler in an Expo application's entry point.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-task-handler.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { registerWidgetTaskHandler } from 'react-native-android-widget';\n\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\nregisterWidgetTaskHandler(widgetTaskHandler);\n```\n\n----------------------------------------\n\nTITLE: Adding Widget Description String in XML\nDESCRIPTION: This XML snippet shows how to add a description string for the widget in the strings.xml file. This description will be displayed in the widget select popup.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-widget.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"app_name\">My App Name</string>\n    <string name=\"widget_hello_description\" translatable=\"false\">This is my first widget</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Expo Widget Support\nDESCRIPTION: Package.json configuration update required for Expo projects to support widget task handlers.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/api/register-widget-task-handler.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-expo-app\",\n  \"main\": \"index.ts\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json for Expo Widget Integration\nDESCRIPTION: Updates the main field in package.json to point to a custom index file instead of Expo's default AppEntry.js, necessary for widget integration in Expo projects.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/tutorial/register-task-handler.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"name\": \"my-expo-app\",\n  \"main\": \"index.ts\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android App with New Architecture\nDESCRIPTION: Command to run the Android example app with the new React Native architecture enabled.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nORG_GRADLE_PROJECT_newArchEnabled=true yarn example android\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Android Widget using npm\nDESCRIPTION: Command to install the React Native Android Widget library using npm package manager. This adds the library as a dependency to your React Native project.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save react-native-android-widget\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-android-widget with yarn\nDESCRIPTION: This command installs the react-native-android-widget package using yarn. It adds the package as a dependency to the project.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-native-android-widget\n```\n\n----------------------------------------\n\nTITLE: Running React Native Android Widget Example (Legacy)\nDESCRIPTION: Command to build and start the example app using the legacy React Native architecture.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn android && yarn start\n```\n\n----------------------------------------\n\nTITLE: Running React Native Android Widget Example (New Architecture)\nDESCRIPTION: Command to build and start the example app using React Native's new architecture with Turbo modules.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn android:turbo && yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn\nDESCRIPTION: Command to install required dependencies for all packages in the project root directory.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Packager\nDESCRIPTION: Command to start the Metro bundler for the example app development.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Running Android Example App\nDESCRIPTION: Command to run the example application on Android device or emulator.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Folders\nDESCRIPTION: Command to cleanup all build folders before rebuilding for different architecture.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn clean\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript and ESLint Checks\nDESCRIPTION: Commands to verify code passes TypeScript type checking and ESLint rules.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn typescript\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Formatting\nDESCRIPTION: Command to automatically fix formatting errors using ESLint.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the project's unit tests.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Publishing New Version\nDESCRIPTION: Command to publish new versions using release-it tool.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docusaurus 2 Website\nDESCRIPTION: This command installs the necessary dependencies for the Docusaurus 2 website using Yarn package manager.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Docusaurus 2 Website\nDESCRIPTION: This command starts a local development server and opens a browser window. It allows for live updates without restarting the server for most changes.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Docusaurus 2 Website\nDESCRIPTION: This command generates static content into the 'build' directory, which can then be served using any static content hosting service.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus 2 Website Using SSH\nDESCRIPTION: This command deploys the website using SSH. It's useful for deploying to GitHub Pages or other hosting services that support SSH deployment.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus 2 Website Without SSH\nDESCRIPTION: This command deploys the website without using SSH. It requires the user's GitHub username and is useful for deploying to GitHub Pages when SSH is not available or preferred.\nSOURCE: https://github.com/saleksovski/react-native-android-widget/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```"
  }
]