[
  {
    "owner": "cdk8s-team",
    "repo": "cdk8s",
    "content": "TITLE: Simple Deployment in TypeScript\nDESCRIPTION: A minimal TypeScript example showing how to create a basic Kubernetes Deployment with three replicas running an Ubuntu container.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as kplus from 'cdk8s-plus-32';\nimport * as cdk8s from 'cdk8s';\n\nconst app = new cdk8s.App();\nconst chart = new cdk8s.Chart(app, 'Chart');\n\nnew kplus.Deployment(chart, 'Deployment', {\n  replicas: 3,\n  containers: [{\n    image: 'ubuntu',\n  }],\n});\n\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Simple Deployment in Python\nDESCRIPTION: A Python example showing how to create a basic Kubernetes Deployment with a single replica running an Ubuntu container using cdk8s-plus.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport cdk8s_plus_27 as kplus\nimport cdk8s\n\napp = cdk8s.App()\nchart = cdk8s.Chart(app, 'Chart')\n\nkplus.Deployment(chart, 'Deployment',\n  replicas=1,\n  containers=[kplus.ContainerProps(image='ubuntu')]\n)\n\napp.synth()\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Deployment with cdk8s in Python\nDESCRIPTION: Complete code sample showing how to define a Kubernetes Deployment resource with three replicas running Nginx. It demonstrates how to structure the Deployment specification with labels, selectors, and container configuration.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nfrom cdk8s import App, Chart\nfrom constructs import Construct\nfrom imports import k8s\n\n\nclass MyChart(Chart):\n   def __init__(self, scope: Construct, ns: str, app_label: str):\n       super().__init__(scope, ns)\n\n       # Define a Kubernetes Deployment\n       k8s.KubeDeployment(self, \"my-deployment\",\n                       spec=k8s.DeploymentSpec(\n                           replicas=3,\n                           selector=k8s.LabelSelector(match_labels={\"app\": app_label}),\n                           template=k8s.PodTemplateSpec(\n                               metadata=k8s.ObjectMeta(labels={\"app\": app_label}),\n                               spec=k8s.PodSpec(containers=[\n                                   k8s.Container(\n                                       name=\"app-container\",\n                                       image=\"nginx:1.19.10\", # Using public nginx image\n                                       ports=[k8s.ContainerPort(container_port=80)] # Nginx listens on port 80 by default\n                                   )\n                               ])\n                           )\n                       )\n                   )\n\napp = App()\nMyChart(app, \"getting-started\", app_label=\"my-app\")\n\napp.synth()\n```\n\n----------------------------------------\n\nTITLE: Terminal Command for Applying Generated Kubernetes YAML\nDESCRIPTION: Command to apply a Kubernetes chart generated by cdk8s to a Kubernetes cluster using kubectl.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f dist/chart.k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Applications with cdk8s+ in TypeScript\nDESCRIPTION: A comprehensive TypeScript example that creates a Kubernetes deployment with a Node.js application. The example demonstrates creating a ConfigMap volume from local files, mounting it in a container, and exposing the deployment as a LoadBalancer service.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as kplus from 'cdk8s-plus-32';\nimport * as cdk8s from 'cdk8s';\nimport * as path from 'path';\n\n// our cdk app\nconst app = new cdk8s.App();\n\n// our kubernetes chart\nconst chart = new cdk8s.Chart(app, 'my-chart');\n\n// lets create a volume that contains our app.\n// we use a trick with a config map!\nconst appData = new kplus.ConfigMap(chart, 'AppData');\nappData.addDirectory(path.join(__dirname, 'app'));\n\nconst appVolume = kplus.Volume.fromConfigMap(appData);\n\n// lets create a deployment to run a few instances of a pod\nconst deployment = new kplus.Deployment(chart, 'Deployment', {\n  replicas: 3,\n});\n\n// now we create a container that runs our app\nconst appPath = '/var/lib/app';\nconst port = 80;\nconst container = deployment.addContainer({\n  image: 'node:14.4.0-alpine3.12',\n  command: ['node', 'index.js', `${port}`],\n  port: port,\n  workingDir: appPath,\n});\n\n// make the app accessible to the container\ncontainer.mount(appPath, appVolume);\n\n// finally, we expose the deployment as a load balancer service and make it run\ndeployment.exposeViaService({ serviceType: kplus.ServiceType.LOAD_BALANCER });\n\n// we are done, synth\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chart Class in TypeScript for CDK8s\nDESCRIPTION: This snippet demonstrates how to create a custom Chart class in CDK8s. The Chart class is a container that synthesizes a single Kubernetes manifest and allows adding contents within its constructor.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/chart.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyChart extends Chart {\n  constructor(scope: Construct, ns: string) {\n    super(scope, ns);\n\n    // add contents here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI with npm\nDESCRIPTION: Command to install the cdk8s Command Line Interface (CLI) globally using npm. This CLI is necessary for initializing cdk8s projects and generating Kubernetes manifests.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cdk8s-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment with cdk8s in TypeScript\nDESCRIPTION: TypeScript code that defines a Kubernetes Deployment using cdk8s. It demonstrates how to create a deployment with replicas, selectors, and container specifications.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Construct } from 'constructs';\nimport { App, Chart } from 'cdk8s';\nimport { KubeDeployment } from './imports/k8s';\n\nclass MyChart extends Chart {\n  constructor(scope: Construct, ns: string, appLabel: string) {\n    super(scope, ns);\n\n    // Define a Kubernetes Deployment\n    new KubeDeployment(this, 'my-deployment', {\n      spec: {\n        replicas: 3,\n        selector: { matchLabels: { app: appLabel } },\n        template: {\n          metadata: { labels: { app: appLabel } },\n          spec: {\n            containers: [\n              {\n                name: 'app-container',\n                image: 'nginx:1.19.10',\n                ports: [{ containerPort: 80 }]\n              }\n            ]\n          }\n        }\n      }\n    });\n  }\n}\n\nconst app = new App();\nnew MyChart(app, 'getting-started', 'my-app');\n\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Initializing Go cdk8s Project\nDESCRIPTION: Command to initialize a new cdk8s project with Go template, setting up the necessary directory structure and dependencies.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncdk8s init go-app\n```\n\n----------------------------------------\n\nTITLE: Initializing a Python cdk8s Project\nDESCRIPTION: Command to create a new cdk8s project with Python template, which sets up the directory structure and installs necessary dependencies.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncdk8s init python-app\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment in cdk8s with Go\nDESCRIPTION: Complete example of defining a Kubernetes Deployment resource using cdk8s Go. It demonstrates configuring replicas, labels, container images, and ports using Go's type system and the cdk8s API.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"example.com/cdk8s-golang/imports/k8s\"\n\t\"github.com/aws/constructs-go/constructs/v10\"\n\t\"github.com/aws/jsii-runtime-go\"\n\t\"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2\"\n)\n\nfunc NewChart(scope constructs.Construct, id string, ns string, appLabel string) cdk8s.Chart {\n\n\tchart := cdk8s.NewChart(scope, jsii.String(id), &cdk8s.ChartProps{\n\t\tNamespace: jsii.String(ns),\n\t})\n\n\tlabels := map[string]*string{\n\t\t\"app\": jsii.String(appLabel),\n\t}\n\n\tk8s.NewKubeDeployment(chart, jsii.String(\"deployment\"), &k8s.KubeDeploymentProps{\n\t\tSpec: &k8s.DeploymentSpec{\n\t\t\tReplicas: jsii.Number(3),\n\t\t\tSelector: &k8s.LabelSelector{\n\t\t\t\tMatchLabels: &labels,\n\t\t\t},\n\t\t\tTemplate: &k8s.PodTemplateSpec{\n\t\t\t\tMetadata: &k8s.ObjectMeta{\n\t\t\t\t\tLabels: &labels,\n\t\t\t\t},\n\t\t\t\tSpec: &k8s.PodSpec{\n\t\t\t\t\tContainers: &[]*k8s.Container{{\n\t\t\t\t\t\tName:  jsii.String(\"app-container\"),\n\t\t\t\t\t\tImage: jsii.String(\"nginx:1.19.10\"),\n\t\t\t\t\t\tPorts: &[]*k8s.ContainerPort{{\n\t\t\t\t\t\t\tContainerPort: jsii.Number(80),\n\t\t\t\t\t\t}},\n\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\treturn chart\n}\n\nfunc main() {\n\tapp := cdk8s.NewApp(nil)\n\n\tNewChart(app, \"getting-started\", \"default\", \"my-app\")\n\n\tapp.Synth()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CDK8s Project with Template\nDESCRIPTION: Basic syntax for creating a new CDK8s project using a specified template. This command requires the template name as an argument.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/init.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncdk8s init TEMPLATE\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources with CDK8s in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create Kubernetes resources using CDK8s in TypeScript. It shows the creation of a Deployment using higher-level constructs and a StorageClass using lower-level constructs when the higher-level object is not available.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as kplus from 'cdk8s-plus-32';\nimport * as cdk8s from 'cdk8s';\n\nconst app = new cdk8s.App();\nconst chart = new cdk8s.Chart(app, 'Chart');\n\n// a Deployment exists as a higher level objects,\n// so we use it.\nnew kplus.Deployment(chart, 'Deployment', {\n  replicas: 3,\n  containers: [{\n    image: 'ubuntu',\n  }],\n});\n\n// a StorageClass doesn't, so we use the low level objects.\n// notice the '.k8s.' addition.\nnew kplus.k8s.KubeStorageClass(chart, 'StorageClass', {\n  provisioner: 'kubernetes.io/aws-ebs'\n});\n\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment in cdk8s Java\nDESCRIPTION: Java code defining a Kubernetes Deployment using cdk8s constructs, including container specifications and label selectors.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.mycompany.app;\n\nimport software.constructs.Construct;\nimport org.cdk8s.App;\nimport org.cdk8s.Chart;\nimport org.cdk8s.ChartProps;\nimport imports.k8s.Container;\nimport imports.k8s.ContainerPort;\nimport imports.k8s.DeploymentSpec;\nimport imports.k8s.KubeDeployment;\nimport imports.k8s.KubeDeploymentProps;\nimport imports.k8s.LabelSelector;\nimport imports.k8s.ObjectMeta;\nimport imports.k8s.PodSpec;\nimport imports.k8s.PodTemplateSpec;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Main extends Chart {\n\n    public Main(final Construct scope, final String id, final String appLabel) {\n        this(scope, id, null, appLabel);\n    }\n\n    public Main(final Construct scope, final String id, final ChartProps props, final String appLabel) {\n        super(scope, id, props);\n\n        Map<String, String> label = Collections.singletonMap(\"app\", appLabel);\n\n        new KubeDeployment(this, \"my-deployment\", KubeDeploymentProps.builder()\n                .spec(DeploymentSpec.builder()\n                        .replicas(3)\n                        .selector(LabelSelector.builder()\n                                .matchLabels(label)\n                                .build())\n                        .template(PodTemplateSpec.builder()\n                                .metadata(ObjectMeta.builder().labels(label)\n                                        .build())\n                                .spec(PodSpec.builder()\n                                        .containers(List.of(Container.builder()\n                                                .name(\"app-container-test\")\n                                                .image(\"nginx:1.19.10\")\n                                                .ports(List.of(ContainerPort.builder()\n                                                        .containerPort(80)\n                                                        .build()))\n                                                .build()))\n                                        .build())\n                                .build())\n                        .build())\n                .build());\n    }\n\n    public static void main(String[] args) {\n        final App app = new App();\n        new Main(app, \"getting-started\", \"my-app\");\n        app.synth();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Deployment Manifest\nDESCRIPTION: YAML representation of the Kubernetes Deployment manifest generated from the cdk8s Java code.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: getting-started-my-deployment-c85252a6\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - image: nginx:1.19.10\n          name: app-container\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Deployment Manifest\nDESCRIPTION: Example of a Kubernetes Deployment manifest generated by cdk8s. This YAML file defines the deployment with replicas, selectors, and container specifications as defined in the TypeScript code.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: getting-started-my-deployment-c85252a6\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - image: nginx:1.19.10\n          name: app-container\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Initializing a Helm Chart in CDK8s (TypeScript)\nDESCRIPTION: Demonstrates how to use the Helm construct to include the bitnami/redis Helm chart with custom values for enabling sentinel containers. Shows the basic pattern of extending a CDK8s Chart class.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/helm.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyChart extends cdk8s.Chart {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const redis = new Helm(this, 'redis', {\n      chart: 'bitnami/redis',\n      values: {\n        sentinel: {\n          enabled: true\n        }\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Deployment YAML\nDESCRIPTION: The resulting Kubernetes YAML manifest generated from the cdk8s Go code. It defines a Deployment with 3 replicas of an nginx container exposed on port 80.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: getting-started-deployment-c80c7257\n  namespace: default\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - image: nginx:1.19.10\n          name: app-container\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Simple Deployment in Java\nDESCRIPTION: A Java example demonstrating how to create a basic Kubernetes Deployment with three replicas running an Ubuntu container using the cdk8s-plus Java bindings.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.mycompany.app;\n\nimport software.constructs.Construct;\n\nimport org.cdk8s.App;\nimport org.cdk8s.Chart;\nimport org.cdk8s.ChartProps;\nimport org.cdk8s.plus32.Deployment;\nimport org.cdk8s.plus32.ContainerProps;\n\nimport java.util.Arrays;\n\npublic class Main extends Chart \n{\n\n    public Main(final Construct scope, final String id) {\n        this(scope, id, null);\n    }\n\n    public Main(final Construct scope, final String id, final ChartProps options) {\n        super(scope, id, options);\n\n        Deployment.Builder.create(this, \"Deployment\")\n          .replicas(3)\n          .containers(Arrays.asList(ContainerProps.builder()\n            .image(\"ubuntu\")\n            .build()))\n          .build();\n    }\n\n    public static void main(String[] args) {\n        final App app = new App();\n        final Chart chart = new Main(app, \"Chart\");\n        app.synth();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete cdk8s Application Structure (TypeScript)\nDESCRIPTION: Shows the high-level structure of a cdk8s application, including initializing the App, registering Charts, and synthesizing YAML manifests with app.synth().\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/app.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from 'cdk8s';\n\n// create the app entry-point\nconst app = new App();\n\n// register charts to the app\nnew MyChart(app, 'Chart');\n\n// synthesize the app\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Patching API Objects with JSON Patch in TypeScript\nDESCRIPTION: Demonstrates how to use the addJsonPatch method of ApiObject to modify the synthesized output using JSON Patch (RFC-6902). This allows for direct manipulation of the Kubernetes manifest at the wire level.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/escape-hatches.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JsonPatch } from 'cdk8s';\napiObject.addJsonPatch(JsonPatch.replace('/foo', 'bar'));\napiObject.addJsonPatch(JsonPatch.add('/foo/bar/0', { bar: 123 }));\n```\n\n----------------------------------------\n\nTITLE: Simple Deployment in Go\nDESCRIPTION: A Go example showing how to create a basic Kubernetes Deployment with three replicas running an Ubuntu container using the cdk8s-plus Go bindings.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/aws/constructs-go/constructs/v10\"\n  \"github.com/aws/jsii-runtime-go\"\n  \"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2\"\n  \"github.com/cdk8s-team/cdk8s-plus-go/cdk8splus32\"\n)\n```\n\nLANGUAGE: go\nCODE:\n```\napp := cdk8s.NewApp(nil)\nchart := cdk8s.NewChart(app, jsii.String(\"ubuntu\"), nil)\n\ncdk8splus32.NewDeployment(chart, jsii.String(\"Deployment\"), &cdk8splus32.DeploymentProps{\n  Replicas: jsii.Number(3),\n  Containers: &[]*cdk8splus32.ContainerProps{{\n    Image: jsii.String(\"ubuntu\"),\n  }},\n})\n\napp.Synth()\n```\n\n----------------------------------------\n\nTITLE: Using an Imported Helm Chart in a cdk8s Application\nDESCRIPTION: TypeScript example showing how to use an imported MySQL helm chart in a cdk8s application with typed values properties.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Construct } from 'constructs';\nimport { App, Chart, ChartProps } from 'cdk8s';\nimport { Mysql, MysqlArchitecture } from './imports/mysql';\n\nexport class MyChart extends Chart {\n  constructor(scope: Construct, id: string, props: ChartProps = { }) {\n    super(scope, id, props);\n\n    new Mysql(this, 'demo', {\n      values: {\n        architecture: MysqlArchitecture.STANDALONE,\n        common: {\n          anyProp: 'foo',\n        },\n        global: {\n          anyGlobalProp: 'bar',\n        }\n      }\n    });\n\n  }\n}\n\nconst app = new App();\nnew MyChart(app, 'Typescript-App');\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Patching API Objects Behind Higher-Level APIs in TypeScript\nDESCRIPTION: Shows how to access and patch underlying API objects when using higher-level constructs. This example demonstrates setting the enableServiceLinks property on a Pod, which is not directly exposed by the higher-level Pod API.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/escape-hatches.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pod } from 'cdk8s-plus-32';\nimport { ApiObject } from 'cdk8s';\n\nconst pod = new Pod(...);\nconst kubePod = ApiObject.of(pod);\nkubePod.addJsonPatch(...);\n```\n\n----------------------------------------\n\nTITLE: Basic cdk8s Application Structure in Python\nDESCRIPTION: Boilerplate code showing the essential structure of a cdk8s application in Python, including the App class, Chart class, and the synth method for generating Kubernetes manifests.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nfrom constructs import Construct\nfrom cdk8s import App, Chart\n\n\nclass MyChart(Chart):\n   def __init__(self, scope: Construct, id: str):\n       super().__init__(scope, id)\n\n       # define resources here\n\n\napp = App()\nMyChart(app, \"python\")\n\napp.synth()\n```\n\n----------------------------------------\n\nTITLE: Out-of-Band Query Pattern in CDK8s\nDESCRIPTION: Shows how to decouple cloud infrastructure from Kubernetes resources by using environment variables to pass values. Resource values are populated externally before CDK8s synthesis.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew kplus.CronJob(manifest, 'CronJob', {\n containers: [{ \n   image: 'job',\n   envVariables: {\n     BUCKET_NAME: kplus.EnvValue.fromValue(process.env.BUCKET_NAME),\n   }\n }]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with Namespace and Labels in CDK8s\nDESCRIPTION: This example shows how to create a Chart with chart-level namespace and labels in CDK8s. These configurations are applied to all API objects defined within the chart recursively. It also demonstrates adding an ApiObject to the chart.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/chart.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyChart extends Chart {\n  constructor(scope: Construct, ns: string) {\n    super(scope, ns, {\n      namespace: 'my-namespace',\n      labels: {\n        app: 'my-app',\n      },\n    });\n\n    new ApiObject(this, 'my-object', {\n      apiVersion: 'v1',\n      kind: 'Foo'\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript CDK8s Project Example\nDESCRIPTION: Complete example showing how to create a new directory, navigate into it, and initialize a new TypeScript-based CDK8s project using the typescript-app template.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/init.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-fun-little-project\ncd my-fun-little-project\ncdk8s init typescript-app\n```\n\n----------------------------------------\n\nTITLE: Dependencies with Custom Constructs in cdk8s\nDESCRIPTION: Example of creating dependencies involving custom constructs. When a dependency is declared from one construct to another, each ApiObject in the source construct depends on every ApiObject in the target construct.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Database extends Construct {\n  constructor(scope: Construct, name: string) {\n    super(scope, name);\n\n    new k8s.KubeStatefulSet(this, 'StatefulSet');\n    new k8s.KubeConfigMap(this, 'ConfigMap');\n  }\n}\n\nconst app = new App();\n\nconst chart = new Chart(app, 'Chart');\n\nconst service = new k8s.KubeService(chart, 'Service')\nconst database = new Database(chart, 'Database');\n\nservice.addDependency(database);\n```\n\n----------------------------------------\n\nTITLE: Basic cdk8s TypeScript Application Structure\nDESCRIPTION: Initial TypeScript code structure for a cdk8s application. It includes the essential imports, a custom Chart class, and the main application setup.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Construct } from 'constructs';\nimport { App, Chart, ChartProps } from 'cdk8s';\n\nexport class MyChart extends Chart {\n  constructor(scope: Construct, id: string, props: ChartProps = { }) {\n    super(scope, id, props);\n\n    // define resources here\n\n  }\n}\n\nconst app = new App();\nnew MyChart(app, 'typescript');\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Including Kubernetes Dashboard Manifest in a CDK8s Chart\nDESCRIPTION: This snippet demonstrates how to include the Kubernetes Dashboard manifest in a CDK8s Chart using the Include construct. The manifest can be loaded from either a remote URL or a local file.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/include.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Include } from 'cdk8s';\n\nclass MyChart extends Chart {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const dashboard = new Include(this, 'dashboard', {\n      url: 'https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml',\n      // or\n      url: 'dashboard.yaml'\n    });\n\n    // ...other resources\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Chart Dependency Inference in cdk8s\nDESCRIPTION: Example showing how cdk8s automatically infers chart dependencies when dependencies are declared between ApiObjects in different charts. This simplifies dependency management by focusing on the resources themselves.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst namespaceChart = new Chart(app, 'namespace');\nconst applicationChart = new Chart(app, 'application');\n\nconst namespace = new k8s.KubeNamespace(namespaceChart, 'namespace');\nconst deployment = new k8s.KubeDeployment(applicationChart, 'Deployment');\n\n// dependency between ApiObjects, not Charts!\ndeployment.addDependency(namespace);\n```\n\n----------------------------------------\n\nTITLE: Explicit Output Resolution in CDK8s with AWS\nDESCRIPTION: Demonstrates how to expose AWS resource values to CDK8s applications using CfnOutput and explicit resolution via fetchOutput function. Shows integration between an S3 bucket and a Kubernetes CronJob.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnew aws.aws_s3.Bucket(stack, 'Bucket');\n\nconst bucketNameOutput = new aws.CfnOutput(this, 'BucketName', {\n  value: bucket.bucketName,\n});\n\n// fetch its name directly from AWS\nconst bucketName = fetchOutput(bucketNameOutput);\n\n// pass the bucket name to the CronJob container\nnew kplus.CronJob(manifest, 'CronJob', {\n containers: [{ \n   image: 'job',\n   envVariables: {\n     BUCKET_NAME: kplus.EnvValue.fromValue(bucketName),\n   }\n }]\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Helm Chart TypeScript Interface\nDESCRIPTION: Example of the TypeScript interfaces and class generated by cdk8s for the MySQL helm chart, including type definitions from values.schema.json.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// generated by cdk8s\nimport { Helm } from 'cdk8s';\nimport { Construct } from 'constructs';\n\nexport interface MysqlValuesProps extends SchemaGeneratedValues {\n  readonly common?: { [key: string]: any };\n  readonly global?: { [key: string]: any };\n}\nexport interface MysqlProps {\n  readonly namespace?: string;\n  readonly releaseName?: string;\n  readonly helmExecutable?: string;\n  readonly helmFlags?: string[];\n  readonly values?: MysqlValuesProps;\n}\n\nexport class Mysql extends Helm {\n  public constructor(scope: Construct, id: string, props: MysqlProps = {}) {\n    const finalProps = {\n      chart: 'mysql',\n      repo: 'https://charts.bitnami.com/bitnami',\n      version: '9.10.10',\n      ...props,\n    };\n    super(scope, id, {\n      ...finalProps,\n    });\n  }\n}\n\n/**\n * @schema mysql\n */\nexport interface SchemaGeneratedValues {\n  /**\n   * Allowed values: `standalone` or `replication`\n   *\n   * @schema mysql#architecture\n   */\n  readonly architecture?: MysqlArchitecture;\n\n  /**\n   * @schema mysql#auth\n   */\n  readonly auth?: MysqlAuth;\n\n  /**\n   * @schema mysql#primary\n   */\n  readonly primary?: MysqlPrimary;\n\n  /**\n   * @schema mysql#secondary\n   */\n  readonly secondary?: MysqlSecondary;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies Between Kubernetes ApiObjects in cdk8s (TypeScript)\nDESCRIPTION: Example of declaring a dependency between a Namespace and a Service to ensure the Namespace is applied first. This uses the addDependency() method to establish the order relationship.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst namespace = new k8s.KubeNamespace(chart, 'backend');\nconst service = new k8s.KubeService(chart, 'Service', { metadata: { namespace: namespace.name }});\n\n// declare the dependency. this is just a syntactic sugar for Node.of(service).addDependency(namespace)\nservice.addDependency(namespace);\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CDK8s App to Helm Chart\nDESCRIPTION: Command to synthesize a CDK8s application into a Helm chart, specifying the format and chart version.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1251-helm-synthesis.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s synth --format helm --chart-version 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Installation Command\nDESCRIPTION: Command to install the generated Helm chart to a Kubernetes cluster.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1251-helm-synthesis.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <release-name> ./dist\n```\n\n----------------------------------------\n\nTITLE: Importing CRD Types - TypeScript\nDESCRIPTION: Example of importing generated CRD types in TypeScript.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cluster } from './imports/example-cluster';\nimport { Autoscaler } from './imports/example-autoscaler';\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Deployment YAML Manifest\nDESCRIPTION: Example of the generated Kubernetes YAML manifest for a Deployment resource with three replicas of an Nginx container. This is the output of the cdk8s synth command.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: getting-started-my-deployment-c85252a6\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - image: nginx:1.19.10\n          name: app-container\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies Between Charts in cdk8s\nDESCRIPTION: Example of declaring dependencies between entire Charts to control the order of manifest application. This ensures the namespaceChart is synthesized before the applicationChart.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst namespaceChart = new Chart(app, 'namespace');\nconst applicationChart = new Chart(app, 'application');\n\n// declare the dependency. this is just a syntactic sugar for Node.of(applicationChart).addDependency(namespaceChart)\napplicationChart.addDependency(namespaceChart);\n```\n\n----------------------------------------\n\nTITLE: Implementing CDK8s Application with Cloud Resource Integration\nDESCRIPTION: A CDK8s application that imports instances from a published AWS CDK package and uses a custom resolver to fetch concrete values at deploy time.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as k8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-26';\n\n// import the desired instance from the AWS CDK app.\nimport { bucketName } from 'my-cdk-app';\n\nimport { AwsCdkResolver } from '@cdk8s/aws-cdk-resolver';\n\nconst k8sApp = new k8s.App({ resolver: new AwsCdkResolver() });\nconst manifest = new k8s.Chart(k8sApp, 'Manifest');\n\nnew kplus.CronJob(manifest, 'CronJob', {\n  schedule: k8s.Cron.daily(),\n  containers: [{\n    image: 'job',\n    envVariables: {\n      // directly passing the value of the `CfnOutput` containing \n      // the deploy time bucket name\n      BUCKET_NAME: kplus.EnvValue.fromValue(bucketName.value),\n    }\n }]\n});\n\nk8sApp.synth();\n```\n\n----------------------------------------\n\nTITLE: Synthesized YAML Output from CDK8s Chart\nDESCRIPTION: This YAML snippet shows the synthesized output of a CDK8s Chart with namespace and labels applied. It demonstrates how the chart-level configurations are reflected in the final Kubernetes manifest.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/chart.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Foo\nmetadata:\n  namespace: my-namespace\n  labels:\n    app: my-app\n```\n\n----------------------------------------\n\nTITLE: Creating AWS CDK Main Entrypoint for Synthesis\nDESCRIPTION: The main entry point for the AWS CDK application that imports app instances and calls synth().\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { awsApp } from './app.ts'\n\nawsApp.synth();\n```\n\n----------------------------------------\n\nTITLE: Resulting YAML Manifest with Ordered Resources\nDESCRIPTION: The generated YAML manifest showing how the dependency affects the order of resources. The Namespace appears before the Service in the output as a result of the declared dependency.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: chart-backend-a59d2e47\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: chart-service-93d02be7\n  namespace: chart-backend-a59d2e47\n```\n\n----------------------------------------\n\nTITLE: Resolving AWS CDK Outputs in cdk8s with TypeScript\nDESCRIPTION: This example demonstrates how to use the AwsCdkResolver to resolve CfnOutput values from an AWS CDK application within a cdk8s application. It creates an S3 Bucket and passes its name to a Kubernetes CronJob as an environment variable.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as aws from 'aws-cdk-lib';\nimport * as k8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-26';\n\nimport { AwsCdkResolver } from '@cdk8s/aws-cdk-resolver';\n\nconst awsApp = new aws.App();\nconst stack = new aws.Stack(awsApp, 'aws');\n\nconst k8sApp = new k8s.App({ resolver: new AwsCdkResolver() });\nconst manifest = new k8s.Chart(k8sApp, 'Manifest');\n\nconst bucket = new aws.aws_s3.Bucket(stack, 'Bucket');\nconst bucketName = new aws.CfnOutput(stack, 'BucketName', {\n  value: bucket.bucketName,\n});\n\nnew kplus.CronJob(manifest, 'CronJob', {\n  schedule: k8s.Cron.daily(),\n  containers: [{\n    image: 'job',\n    envVariables: {\n      // directly passing the value of the `CfnOutput` containing \n      // the deploy time bucket name\n      BUCKET_NAME: kplus.EnvValue.fromValue(bucketName.value),\n    }\n }]\n});\n\nawsApp.synth();\nk8sApp.synth();\n```\n\n----------------------------------------\n\nTITLE: Separating AWS CDK Application into Exportable Modules\nDESCRIPTION: Breaking up an AWS CDK application into separate files to enable cross-repository access. The app.ts file exports resource instances that can be published as a package.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as aws from 'aws-cdk-lib';\n\nconst awsApp = new aws.App();\nconst stack = new aws.Stack(awsApp, 'aws');\n\nconst bucket = new aws.aws_s3.Bucket(stack, 'Bucket');\nexport const bucketName = new aws.CfnOutput(stack, 'BucketName', {\n  value: bucket.bucketName,\n});\n\n// note that we don't call awsApp.synth here\n```\n\n----------------------------------------\n\nTITLE: Importing a Helm Chart with cdk8s CLI\nDESCRIPTION: Command to import a MySQL helm chart from the Bitnami repository with a specific version into a cdk8s application.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s import helm:https://charts.bitnami.com/bitnami/mysql@9.10.10\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS CDK Application with Cloud Resources\nDESCRIPTION: A TypeScript example of a simple AWS CDK application that creates an S3 bucket and exports the bucket name as a CfnOutput.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as aws from 'aws-cdk-lib';\n\nconst awsApp = new aws.App();\nconst stack = new aws.Stack(awsApp, 'aws');\n\nconst bucket = new aws.aws_s3.Bucket(stack, 'Bucket');\nconst bucketName = new aws.CfnOutput(stack, 'BucketName', {\n  value: bucket.bucketName,\n});\n\nawsApp.synth();\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests with cdk8s CLI\nDESCRIPTION: Command to generate Kubernetes manifest files from cdk8s Java code using the cdk8s CLI.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s synth\n```\n\n----------------------------------------\n\nTITLE: Configuring App Synthesis Output Properties in TypeScript\nDESCRIPTION: Example of customizing the output properties of synthesized YAML through the App construct. This includes changing the output directory, file extension, and how resources are distributed across files.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/synth.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new App({\n  // Instead of the default \"dist\"\n  outdir: \"output\",\n  // Instead of \".k8s.yaml\"\n  outputFileExtension: \".generated.yaml\",\n  // Divide every resource into its own file, instead of grouping by Chart\n  yamlOutputType: YamlOutputType.FILE_PER_RESOURCE,\n});\n```\n\n----------------------------------------\n\nTITLE: CDK8s Synthesis and Helm Installation\nDESCRIPTION: Combined command to synthesize a CDK8s app into a Helm chart and install it using Helm.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1251-helm-synthesis.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s synth --format helm --chart-version 1.0.0 && helm install <release-name> ./dist\n```\n\n----------------------------------------\n\nTITLE: Chart.yaml Template\nDESCRIPTION: Template for the Chart.yaml file with placeholders for dynamic values.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1251-helm-synthesis.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: {{ api-version }}                       # The chart API version. v2 is for Helm 3 and v1 is for previous versions. \nname: {{ app }}                                     # cdk8s app name. This is equal to the current directory name.\nversion: {{ version }}                              # Chart version.\ndescription: Generated chart for {{ app }}          # Description for the chart\ntype: application                                   # The chart type can either be 'application' or 'library'. Application charts can be deployed to Kubernetes.\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Name in TypeScript\nDESCRIPTION: This example shows how to programmatically access the name of a resource in a cdk8s application using the .name property.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/api-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst deployment = new kplus.Deployment(chart, 'deployment', {\n  containers: [{ image: 'nginx' }]\n});\nconst deploymentName = deployment.name;\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Usage - TypeScript\nDESCRIPTION: Example of using a generated Helm chart construct in TypeScript.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Construct } from 'constructs';\nimport { App, Chart, ChartProps } from 'cdk8s';\nimport { Mysql, MysqlArchitecture } from './imports/mysql';\n\nexport class MyChart extends Chart {\n  constructor(scope: Construct, id: string, props: ChartProps = { }) {\n    super(scope, id, props);\n\n    new Mysql(this, 'MySql', {\n      values: {\n        architecture: MysqlArchitecture.STANDALONE,     // <------- type safe property\n      }\n    });\n  }\n}\n\nconst app = new App();\nnew MyChart(app, 'Typescript-App');\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Creating a Deployment with Auto-generated Name in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Deployment resource using cdk8s and cdk8s-plus. It shows the default behavior of auto-generating resource names with a hash suffix.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/api-object.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Chart } from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-32';\n\nconst app = new App();\nconst chart = new MyChart(app, 'my-chart');\n\nnew kplus.Deployment(chart, 'deployment', {\n  containers: [{ image: 'nginx' }]\n});\n\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Helm Pull Command for Implementation\nDESCRIPTION: Command used in the import implementation to download and extract the helm chart for accessing its schema.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm pull chart-name --repo chart-url --version chart-version --untar --untardir working-directory\n```\n\n----------------------------------------\n\nTITLE: Basic CDK8s YAML Configuration\nDESCRIPTION: Example of a basic cdk8s.yaml configuration file that defines the application to be executed during synthesis.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/synth.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp: node app.js\n```\n\n----------------------------------------\n\nTITLE: CDK8s Import Configuration - YAML\nDESCRIPTION: YAML configuration for importing a CRD with a custom module name.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - example:=my_crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing External Validation Configuration in CDK8s YAML\nDESCRIPTION: Example of referring to an external validation configuration file instead of embedding the validation configuration directly in the cdk8s.yaml file.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/synth.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: typescript\napp: ts-node main.ts\nvalidations: http://path/to/validations.yaml\n```\n\n----------------------------------------\n\nTITLE: Simple Deployment in JavaScript\nDESCRIPTION: A JavaScript example demonstrating how to create a basic Kubernetes Deployment with three replicas running an Ubuntu container.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst kplus = require('cdk8s-plus-32');\nconst cdk8s = require('cdk8s');\n\nconst app = new cdk8s.App();\nconst chart = new cdk8s.Chart(app, 'Chart');\n\nnew kplus.Deployment(chart, 'Deployment', {\n  replicas: 3,\n  containers: [{\n    image: 'ubuntu',\n  }],\n});\n\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Generated Helm Chart Structure\nDESCRIPTION: The directory structure of the generated Helm chart after synthesizing a CDK8s application.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1251-helm-synthesis.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndist/              \n├── Chart.yaml      \n├── Readme.md      \n└── templates/      \n└── crds/           \n```\n\n----------------------------------------\n\nTITLE: Configuring Private NPM Registry for Validation Plugins\nDESCRIPTION: Example of how to specify a custom NPM registry for installing private validation plugins using the installEnv property in the cdk8s.yaml file.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/synth.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: typescript\napp: ts-node main.ts\nvalidations:\n  - package: my-private-plugin\n    class: MyValidation\n    version: 0.0.1\n    installEnv:\n      npm_config_registry: http://my/custom/registry\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation for Helm Pull\nDESCRIPTION: Code snippet showing how the helm pull command is executed from within the ImportHelm class.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst args = new Array<string>();\nargs.push('pull');\nargs.push(chartName);\nargs.push('--repo', chartUrl);\nargs.push('--version', chartVersion);\nargs.push('--untar');\nargs.push('--untardir', workdir);\n\nconst command = 'helm';\n\nconst helm = spawnSync(command, args, {\n  maxBuffer: MAX_HELM_BUFFER,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing the App in cdk8s (TypeScript)\nDESCRIPTION: Creates an instance of the App class, which serves as the entry-point of a cdk8s application. This is the first step in building a cdk8s application.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/app.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from 'cdk8s';\n\nconst app = new App();\n```\n\n----------------------------------------\n\nTITLE: Resolving CDKTF Outputs in cdk8s with TypeScript\nDESCRIPTION: This example shows how to use the CdkTfResolver to resolve values from a CDKTF application within a cdk8s application. It creates an S3 Bucket using CDKTF and passes its name to a Kubernetes CronJob as an environment variable.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as tf from \"cdktf\";\nimport * as aws from \"@cdktf/provider-aws\";\nimport * as k8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-26';\n\nimport { CdkTfResolver } from '@cdk8s/cdktf-resolver';\n\nconst awsApp = new tf.App();\nconst stack = new tf.TerraformStack(awsApp, 'aws');\n\nconst k8sApp = new k8s.App({ resolver: new CdkTfResolver() });\nconst manifest = new k8s.Chart(k8sApp, 'Manifest', { resolver });\n\nconst bucket = new aws.s3Bucket.S3Bucket(stack, 'Bucket');\n\nnew kplus.CronJob(manifest, 'CronJob', {\n  schedule: k8s.Cron.daily(),\n  containers: [{\n    image: 'job',\n    envVariables: {\n      BUCKET_NAME: kplus.EnvValue.fromValue(bucket.bucket),\n    }\n }]\n});\n\nawsApp.synth();\nk8sApp.synth();\n```\n\n----------------------------------------\n\nTITLE: Accessing API Objects from an Included Manifest in CDK8s\nDESCRIPTION: This snippet shows how to query and access specific Kubernetes API objects from an included manifest. It demonstrates finding a Deployment resource from the previously imported dashboard manifest.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/include.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst deploymentApiObject = dashboard.apiObjects.find(c => c.kind === 'Deployment');\n```\n\n----------------------------------------\n\nTITLE: Registering a Chart with the App in cdk8s (TypeScript)\nDESCRIPTION: Demonstrates how to add a Chart to a cdk8s App. Charts are registered as children of the App in the constructs tree.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/app.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew MyChart(app, 'Chart');\n```\n\n----------------------------------------\n\nTITLE: Accessing Testing Utilities in cdk8s\nDESCRIPTION: This snippet demonstrates the main testing utilities provided by cdk8s under the Testing class. It includes methods for creating test App and Chart objects, as well as synthesizing Kubernetes manifests from charts.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Testing.app()` returns an `App` object bound to a temporary output directory.\n* `Testing.chart()` returns a `Chart` object bound to a testing app.\n* `Testing.synth(chart)` returns the Kubernetes manifest synthesized from a\n  chart.\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Resolvers to a cdk8s App (TypeScript)\nDESCRIPTION: Shows how to pass custom resolvers to a cdk8s App during initialization. Resolvers allow for injecting custom logic that transforms values before they're written to Kubernetes manifests.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/app.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Chart } from 'cdk8s'\n\nconst app = new App({ resolvers: [new AddNamePrefixResolver('custom-prefix')] });\nnew Chart(app, 'Chart');\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Resource Name in TypeScript\nDESCRIPTION: This snippet shows how to explicitly set a name for a resource using the metadata.name property, overriding the auto-generated name.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/api-object.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew kplus.Deployment(c, 'Deployment', {\n  metadata: {\n    name: 'my-deployment'\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for TypeScript in CDK8s 2.x\nDESCRIPTION: Updates the package.json dependencies to use CDK8s 2.x and the compatible constructs library version.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"cdk8s\": \"^2.2.87\",\n  \"constructs\": \"^10.1.12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Resolver Interface for CDK8s\nDESCRIPTION: Defines the interface and context for implementing custom resolution of values during CDK8s synthesis, allowing for custom handling of token resolution.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiObject } from './api-object';\n\nexport class ResolutionContext {\n\n  public readonly obj: ApiObject;\n  public readonly key: string[];\n  public readonly value: any;\n\n  public replaceValue(newValue: any): void {\n    ...\n  }\n\n}\n\nexport interface IValueResolver {\n\n  resolve(context: ResolutionContext): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Python in CDK8s 2.x\nDESCRIPTION: Updates the Pipfile dependencies to use CDK8s 2.x and the compatible constructs library version for Python projects.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[packages]\nconstructs = \"~=10.1.12\"\ncdk8s = \"~=2.2.87\"\n```\n\n----------------------------------------\n\nTITLE: Basic cdk8s Go Application Structure\nDESCRIPTION: Initial code showing the basic structure of a cdk8s Go application with imports, chart definition, and main function. This provides the foundation for defining Kubernetes resources.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/aws/constructs-go/constructs/v10\"\n\t\"github.com/aws/jsii-runtime-go\"\n\t\"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2\"\n)\n\ntype MyChartProps struct {\n\tcdk8s.ChartProps\n}\n\nfunc NewMyChart(scope constructs.Construct, id string, props *MyChartProps) cdk8s.Chart {\n\tvar cprops cdk8s.ChartProps\n\tif props != nil {\n\t\tcprops = props.ChartProps\n\t}\n\tchart := cdk8s.NewChart(scope, jsii.String(id), &cprops)\n\n\t// define resources here\n\n\treturn chart\n}\n\nfunc main() {\n\tapp := cdk8s.NewApp(nil)\n\tNewMyChart(app, \"cdk8s-golang\", nil)\n\tapp.Synth()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Resolver in TypeScript for cdk8s\nDESCRIPTION: This snippet demonstrates how to create a custom resolver by implementing the IValueResolver interface. It includes the resolve method which allows for custom logic to transform values before they are written to the Kubernetes manifest.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IValueResolver, ResolutionContext } from 'cdk8s';\n\nexport class MyCustomResolver implements IValueResolver {\n\n  public resolve(context: ResolutionContext): any {\n    const newValue = ... // run some custom logic\n    context.replaceValue(newValue);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest Validation in CDK8s YAML\nDESCRIPTION: Example of how to configure third-party validation plugins in the cdk8s.yaml file to perform validation on the manifests produced by cdk8s.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/synth.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: typescript\napp: ts-node main.ts\nvalidations:\n  - package: '@datreeio/datree-cdk8s'\n    class: DatreeValidation\n    version: 1.3.4\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Kubernetes Manifests with cdk8s CLI\nDESCRIPTION: Command to generate Kubernetes YAML manifest files from cdk8s code. This process converts the Python code into standard Kubernetes resource definitions.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncdk8s synth\n```\n\n----------------------------------------\n\nTITLE: Implementing CDK8s Deployment Example in TypeScript\nDESCRIPTION: Example CDK8s code showing a basic Kubernetes deployment definition that would be subject to validation checks.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/manifest-validation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyChart extends Chart {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    new k8s.KubeDeployment(this, 'Deployment', {\n      spec: {\n        template: {\n          containers: [{ image: 'nginx', name: 'main' }]\n        }\n      }\n    });\n\n  }\n}\n\nconst app = new App();\nnew MyChart(app, 'Chart');\napp.synth();\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI using Homebrew\nDESCRIPTION: Command to install the Cloud Development Kit for Kubernetes CLI tool using the Homebrew package manager on macOS or Linux.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nbrew install cdk8s\n```\n\n----------------------------------------\n\nTITLE: Implementing generateHelmConstruct Function for CDK8s Import\nDESCRIPTION: This function generates the Helm construct, including custom types, values interface, and construct properties.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function generateHelmConstruct(typegen: TypeGenerator, def: HelmObjectDefinition) {\n\n  const chartName = TypeGenerator.normalizeTypeName(def.chartName);\n  const schema = def.schema;\n  const repoUrl = def.chartUrl;\n  const chartVersion = def.chartVersion;\n\n  // Create custom type\n  typegen.emitCustomType(chartName, code => {\n\n    const valuesInterface = `${chartName}ValuesProps`;\n    if (schema !== undefined) {\n      // Interface for schema generated props\n      let schemaGenValuesInterface: string = 'SchemaGeneratedValues';\n      schemaGenValuesInterface = typegen.emitType(schemaGenValuesInterface, schema, def.fqn);\n\n      // Creating values interface\n      emitValuesInterface();\n\n      function emitValuesInterface() {\n        code.openBlock(`export interface ${valuesInterface} extends ${schemaGenValuesInterface}`);\n\n        // Sub charts or dependencies\n        for (const dependency of def.chartDependencies) {\n          code.line(`readonly ${dependency}?: { [key: string]: any };`);\n        }\n\n        // Global values\n        code.line('readonly global?: { [key: string]: any };');\n\n        code.closeBlock();\n      }\n    }\n\n    // Creating construct properties\n    emitPropsInterface();\n\n    code.line();\n\n    // Creating construct for helm chart\n    emitConstruct();\n\n    function emitPropsInterface() {\n      code.openBlock(`export interface ${chartName}Props`);\n\n      code.line('readonly namespace?: string;');\n      code.line('readonly releaseName?: string;');\n      code.line('readonly helmExecutable?: string;');\n      code.line('readonly helmFlags?: string[];');\n\n      if (schema === undefined) {\n        code.line('readonly values?: { [key: string]: any };');\n      } else {\n        code.line(`readonly values?: ${valuesInterface};`);\n      }\n\n      code.closeBlock();\n    }\n\n    function emitConstruct() {\n      code.openBlock(`export class ${chartName} extends Helm`);\n\n      emitInitializer();\n\n      code.closeBlock();\n    }\n\n    function emitInitializer() {\n      code.openBlock(`public constructor(scope: Construct, id: string, props: ${chartName}Props = {})`);\n\n      code.open('const finalProps = {');\n      code.line(`chart: '${def.chartName}',`);\n      code.line(`repo: '${repoUrl}',`);\n      code.line(`version: '${chartVersion}',`);\n      code.line('...props,');\n      code.close('};');\n\n      code.open('super(scope, id, {');\n      code.line('...finalProps,');\n      code.close('});');\n\n      code.closeBlock();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing generateTypeScript Method for ImportHelm Class\nDESCRIPTION: This method generates TypeScript code for the Helm chart, including schema parsing, type generation, and construct generation.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nprotected async generateTypeScript(code: CodeMaker) {\n\n  emitHelmHeader(code);\n\n  let schema: JSONSchema4 | undefined;\n\n  if (this.chartSchemaPath !== undefined) {\n    JSON.parse(fs.readFileSync(this.chartSchemaPath, 'utf-8'));\n  } else {\n    schema = undefined;\n  }\n\n  const types = new TypeGenerator({\n    definitions: schema?.definitions,\n  });\n\n  generateHelmConstruct(types, {\n    schema: schema,\n    chartName: this.chartName,\n    chartUrl: this.chartUrl,\n    chartVersion: this.chartVersion,\n    fqn: this.chartName,\n  });\n\n  code.line(types.render());\n\n  cleanup(this.tmpDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI using npm\nDESCRIPTION: Command to install the Cloud Development Kit for Kubernetes CLI tool globally using the Node Package Manager (npm).\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm i -g cdk8s-cli\n```\n\n----------------------------------------\n\nTITLE: Implementing Datree Validation Plugin\nDESCRIPTION: Example implementation of a validation plugin for Datree, showing how to integrate external validation tools with the CDK8s validation system.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/manifest-validation.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Validation, Violation } from 'cdk8s-cli';\n\nexport interface DatreeValidationProps {\n  /**\n   * URL for the policy to use.\n   */\n  readonly policyUrl: string;\n}\n\nexport class DatreeValidation implements Validation {\n\n  private readonly policyUrl: string;\n\n  constructor(props: DatreeValidationProps) {\n    this.policyUrl = props.policyUrl;\n  }\n\n  public validate(manifests: string[]): Violation[] {\n    const report: Violation[] = [];\n    for (const manifest of manifests) {\n      const out = execSync(`datree test --output json ${manifest}`);\n      report.push(...parseOutput(out));\n    }\n    return report;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI using Yarn\nDESCRIPTION: Command to install the Cloud Development Kit for Kubernetes CLI tool globally using the Yarn package manager.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn global add cdk8s-cli\n```\n\n----------------------------------------\n\nTITLE: Disabling Resource Name Hashes in TypeScript\nDESCRIPTION: This snippet demonstrates how to disable resource name hashes by setting the disableResourceNameHashes property to true when creating a chart.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/api-object.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst chart = new MyChart(app, 'my-chart', {\n    disableResourceNameHashes: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Adopters Table in Markdown\nDESCRIPTION: This snippet demonstrates how to create a table in Markdown format to list cdk8s adopters. It includes columns for organization name, description of cdk8s usage, contact information, and relevant links.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/ADOPTERS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Organization | Description | Contacts | Link |\n| --- | --- | --- | --- |\n| [example] Amazon, Inc. | Building cdk8s and cdk8s+ | `@jgarr`, `@iliapolo` | [Announcing GA for cdk8s](https://aws.amazon.com/blogs/containers/announcing-the-general-availability-of-cdk8s-and-support-for-go/) |\n| 8gears Container Registry | With cdk8s we dynamically generate manifests for different destinations of our Harbor-based SaaS. Multi-Cloud, Edge.  | `@vad1mo`  | [container-registry.com](https://container-registry.com/) |\n| Canida | Using cdk8s to generate Kubernetes manifests which are deployed to AWS EKS via ArgoCD | `nico@canida.io` | [Canida](https://canida.io) |\n| Cloudflare | Using cdk8s to manage large multi-tenant clusters with low drift and high velocity | `@heckler1` | [Cloudflare](https://www.cloudflare.com) |\n| Concrete Genius | CDK and cdk8s are used to manage our AWS and local development infrastructure | `@njlaw` | [Concrete Genius](https://concretegenius.com) |\n| Datamole | Relying on seamless CDK - CDK8s interoperability to manage AWS EKS workloads | `@datamole-ai` | [Datamole](https://www.datamole.ai/) |\n| Finimize | Using both CDK and cdk8s to create a consistent experience when describing our IaC | `@pykita` | [Finimize](https://finimize.com/) |\n| Griffin | Using CDK, CDK8s, and CDK8s+ to manage our AWS infra and EKS workloads | `@dancmeyers` | [Griffin](https://griffin.com/) |\n| PreciseTarget | We use cdk8s to manage all applications running in kubernetes across mulitple clusters. | `@steven-esser` | [PreciseTarget](https://www.precisetarget.com) |\n| The Home Depot | Using cdk8s to manage large, multi-tenant Kubernetes clusters with strong consistency across teams. | `@shinebayar-g` | [TheHomeDepot](https://www.homedepot.com/) |\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Deployments with Potential Name Clash in TypeScript\nDESCRIPTION: This example illustrates a potential name clash scenario when creating multiple deployments with disabled name hashes. It shows how construct IDs containing hyphens can lead to conflicts.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/api-object.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// think of this as a custom construct\nconst c = new Construct(this, 'Construct');\n\nnew kplus.Deployment(c, 'Deployment', {\n  containers: [{ image: 'image' }]\n});\n\nnew kplus.Deployment(this, 'Construct-Deployment', {\n  containers: [{ image: 'image' }]\n})\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes YAML Manifest\nDESCRIPTION: The resulting YAML manifest generated by the cdk8s+ TypeScript example. It includes a ConfigMap with the application code, a Deployment with three replicas, and a LoadBalancer Service to expose the application.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/plus/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  index.js: |-\n    var http = require('http');\n\n    var port = process.argv[2];\n\n    //create a server object:\n    http.createServer(function (req, res) {\n      res.write('Hello World!'); //write a response to the client\n      res.end(); //end the response\n    }).listen(port); //the server object listens on port 80\nkind: ConfigMap\nmetadata:\n  annotations: {}\n  labels: {}\n  name: chart-appdata-configmap-da4c63ab\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations: {}\n  labels: {}\n  name: chart-deployment-pod-d4285cc9\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      cdk8s.deployment: ChartDeploymentCFC2E30C\n  template:\n    metadata:\n      annotations: {}\n      labels:\n        cdk8s.deployment: ChartDeploymentCFC2E30C\n    spec:\n      containers:\n        - command:\n            - node\n            - index.js\n            - \"80\"\n          env: []\n          image: node:14.4.0-alpine3.12\n          name: main\n          ports:\n            - containerPort: 80\n          volumeMounts:\n            - mountPath: /var/lib/app\n              name: configmap-chart-appdata-configmap-da4c63ab\n          workingDir: /var/lib/app\n      volumes:\n        - configMap:\n            name: chart-appdata-configmap-da4c63ab\n          name: configmap-chart-appdata-configmap-da4c63ab\n---\napiVersion: v1\nkind: Service\nmetadata:\n  annotations: {}\n  labels: {}\n  name: chart-deployment-service-pod-42f50c26\nspec:\n  externalIPs: []\n  ports:\n    - port: 8080\n      targetPort: 80\n  selector:\n    cdk8s.deployment: ChartDeploymentCFC2E30C\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Checking cdk8s CLI version\nDESCRIPTION: Command to verify the installed version of the cdk8s CLI tool.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncdk8s --version\n```\n\n----------------------------------------\n\nTITLE: Implementing emitHelmHeader Function for CDK8s Import\nDESCRIPTION: This function adds relevant imports for the generated Helm construct using CodeMaker.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Emit imports for generated helm construct\n * @param code CodeMaker instance\n */\nexport function emitHelmHeader(code: CodeMaker) {\n  code.line('// generated by cdk8s');\n  code.line(\"import { Helm } from 'cdk8s';\");\n  code.line(\"import { Construct } from 'constructs';\");\n  code.line();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Bash\nDESCRIPTION: Command to check the installed version of Node.js, which is a prerequisite for using cdk8s with TypeScript.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests with cdk8s CLI\nDESCRIPTION: Command to synthesize Kubernetes manifests from the cdk8s TypeScript code. This generates YAML files in the 'dist' folder of the project.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s synth\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Version Config - YAML\nDESCRIPTION: YAML configuration for specifying Kubernetes version.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - k8s@1.17.0\n```\n\n----------------------------------------\n\nTITLE: CDK8s Language Configuration - YAML\nDESCRIPTION: YAML configuration for specifying the target programming language in cdk8s.yaml.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: typescript\n```\n\n----------------------------------------\n\nTITLE: Synthesis Output with Inferred Chart Dependencies\nDESCRIPTION: The console output showing how dependencies between ApiObjects in different charts result in the same ordering of manifest files as explicit chart dependencies would.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n> cdk8s synth\n\ndist/0000-namespace.k8s.yaml\ndist/0001-application.k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Kubernetes API Import - Shell\nDESCRIPTION: Command to import Kubernetes API objects.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncdk8s import k8s\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests with cdk8s\nDESCRIPTION: Command to synthesize Kubernetes YAML manifests from the cdk8s Go code definitions. This produces the final deployment files in the dist directory.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncdk8s synth\n```\n\n----------------------------------------\n\nTITLE: CDK8s Repository Relocation URL\nDESCRIPTION: URL reference pointing to the new location of the Java CDK8s CRD example in the cdk8s-examples repository\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/examples/java/crd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/cdk8s-team/cdk8s-examples/tree/main/java/cdk8s-crd\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI with npm\nDESCRIPTION: Command to install the cdk8s command-line interface globally using npm, which is required for initializing projects and generating Kubernetes manifests.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g cdk8s-cli\n```\n\n----------------------------------------\n\nTITLE: Chart Synthesis Output with Ordered Files\nDESCRIPTION: The console output showing how chart dependencies affect the ordering of generated manifest files. Files are prefixed with sequence numbers to ensure correct application order.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n> cdk8s synth\n\ndist/0000-namespace.k8s.yaml\ndist/0001-application.k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in Bash\nDESCRIPTION: Command to check the installed Python version to ensure compatibility with cdk8s for Python, which requires Python 3.7+.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/python.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI using npm\nDESCRIPTION: Command to install the cdk8s CLI globally using npm.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cdk8s-cli\n```\n\n----------------------------------------\n\nTITLE: Basic cdk8s Java Application Structure\nDESCRIPTION: Initial Java code structure for a cdk8s application, including the Main class extending Chart and the main method.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.mycompany.app;\n\nimport software.constructs.Construct;\n\nimport org.cdk8s.App;\nimport org.cdk8s.Chart;\nimport org.cdk8s.ChartProps;\n\npublic class Main extends Chart \n{\n\n    public Main(final Construct scope, final String id) {\n        this(scope, id, null);\n    }\n\n    public Main(final Construct scope, final String id, final ChartProps options) {\n        super(scope, id, options);\n\n        // define resources here\n    }\n\n    public static void main(String[] args) {\n        final App app = new App();\n        new Main(app, \"java\");\n        app.synth();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: State Diagram Definition in DOT Language\nDESCRIPTION: This code snippet defines a state diagram representing the RFC process using the DOT language. It illustrates the various states of an RFC, such as Proposed, Review, Final Comment Period, Approved, Planning, Implementing, Done, and Rejected, along with the transitions between them.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: DOT\nCODE:\n```\ndigraph states {\n    node [shape=ellipse];\n    edge [color=gray, fontsize=12]\n\n    idea [label = \"Idea\", shape = plaintext]\n    proposed [label = \"Proposed\"];\n    review [label = \"In Review\"];\n    fcp [label = \"Final Comment Period\"];\n    approved [label = \"Approved\"];\n    plannning [label = \"Planning\"];\n    implementing [label = \"Implementing\"];\n    done [label = \"Done\"];\n    rejected [label = \"Rejected\"];\n\n    idea -> proposed [label = \"github issue created\"]\n    proposed -> review [label = \"pull request with rfc doc created\"];\n    review -> review [label = \"doc revisions\"];\n    review -> fcp [label = \"shepherd approved\"];\n    review -> rejected [label = \"rejected\"];\n    fcp -> review [label = \"revision requested\"];\n    fcp -> approved [label = \"pull request approved and merged\"];\n    fcp -> rejected [label = \"rfc rejected\"];\n    approved -> plannning [label = \"pull request with implementation plan created\"];\n    plannning -> implementing [label = \"rfc with implementation plan approved and merged\"];\n    implementing -> done [label = \"implementation completed\"];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Git Hooks for CDK8s Project (Bash)\nDESCRIPTION: This command runs a setup script to configure git hooks for the CDK8s project. It should be executed from the root directory of the project to properly set up the hooks described in the file.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/git-hooks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./git-hooks/setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing CDK8s CLI 1.x with npm\nDESCRIPTION: Command to install CDK8s CLI version 1.x using npm.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g cdk8s-cli@^1\n```\n\n----------------------------------------\n\nTITLE: Generated Chart.yaml Content\nDESCRIPTION: The content of the Chart.yaml file in the generated Helm chart, including chart metadata.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1251-helm-synthesis.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v2                        \nname: <cdk8s-app-directory-name>                                 \nversion: 1.0.0                             \ndescription: Generated chart for <cdk8s-app-directory-name>  \ntype: application\n```\n\n----------------------------------------\n\nTITLE: Basic CDK8s Import Command - Shell\nDESCRIPTION: Basic shell command for importing TypeScript constructs using cdk8s import.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncdk8s import --language typescript\n```\n\n----------------------------------------\n\nTITLE: Installing CDK8s CLI 1.x with yarn\nDESCRIPTION: Command to install CDK8s CLI version 1.x using yarn.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nyarn global add cdk8s-cli@^1\n```\n\n----------------------------------------\n\nTITLE: Construct-Aware YAML Annotations\nDESCRIPTION: Example of YAML annotations used to enable construct traceability in generated Kubernetes manifests.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/manifest-validation.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: chart-deployment-c8a3b439\n  annotations:\n    cdk8s.io/construct.path: Chart/Deployment\n    cdk8s.io/construct.traceback:\n      - deployment.ts:25\n      - main.ts:15\n...\n```\n\n----------------------------------------\n\nTITLE: API Bar Raiser Sign-off Checkbox in Markdown\nDESCRIPTION: A checkbox to indicate that the public API of the RFC has been signed-off by an API bar raiser. This serves as a formal approval mechanism for the proposed changes.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/0000-template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[ ] Signed-off by API Bar Raiser @xxxxx\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Validation Interfaces\nDESCRIPTION: Core interfaces for the validation system including Validation interface for plugin implementation and Violation interface for reporting issues.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/manifest-validation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Validation {\n\n  /**\n   * Run the validation tool and produce a report.\n   */\n  validate(manifests: string[]): Violation[];\n\n}\n\n/**\n * Represents a distinct violation in the manifest.\n */\nexport interface Violation {\n  /**\n   * The name of resource exhibiting the violation.\n   */\n  readonly resourceName: string;\n  /**\n   * The violation message.\n   */\n  readonly message: string;\n\n  /**\n   * The manifest file this violation originated in.\n   */\n  readonly manifestPath: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Go in CDK8s 2.x\nDESCRIPTION: Updates the import statements in Go source code to use the v10 constructs and v2 cdk8s packages.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/aws/constructs-go/constructs/v10\"\n  \"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Proposed CDK8s TypeScript API for ConfigMap Volumes\nDESCRIPTION: A proposed TypeScript API design for CDK8s that simplifies the process of creating ConfigMaps from directories and mounting them as volumes in Pods. The API provides a more intuitive and concise way to implement the ConfigMap-as-volume pattern.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/research/high-level-abstractions/config-map-volume-in-pod/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// define a config map with all the files in a local dir\nconst config = ConfigMap.fromDirectory(this, './config');\n\n// define a pod\nconst pod = new Pod(this, 'dapi-test-pod');\n\n// add the config map as a volume\nconst volume = pod.addConfigMapVolume(config);\n\n// add a container to the pod and mount the files\n// to /etc/config, and print them on initialization\nconst container = pod.addContainer('test-container');\ncontainer.image = 'registry.k8s.io/busybox';\ncontainer.mount(volume, '/etc/config'); // <-- NICE!\ncontainer.command = \"/bin/sh\", \"-c\", \"ls /etc/config/\";\ncontainer.restartPolicy = PodRestartPolicy.NEVER;\n```\n\n----------------------------------------\n\nTITLE: Initializing a cdk8s TypeScript Project\nDESCRIPTION: Command to create a new cdk8s project with TypeScript setup. This initializes the project structure and installs necessary dependencies.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s init typescript-app\n```\n\n----------------------------------------\n\nTITLE: Importing CRD Types - Python\nDESCRIPTION: Example of importing CRD types in Python (not yet supported).\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnot yet supported\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter in YAML\nDESCRIPTION: This snippet defines the front matter for a Hugo blog post using YAML syntax. It includes a dynamically generated title, the current date, and sets the draft status to true.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/website/archetypes/default.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing cdk8s Java Project\nDESCRIPTION: Command to initialize a new cdk8s Java project using the cdk8s CLI.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncdk8s init java-app\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for CDK8s Documentation\nDESCRIPTION: Command to install Node.js dependencies at the root of the CDK8s repository. This installs the latest release of the supported cdk8s-plus-* packages needed for documentation generation.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Root of repo\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Building CDK8s Documentation Pages\nDESCRIPTION: Command to build the documentation pages using the build script. This installs pip dependencies, copies documentation files from various sources, and builds the MkDocs site.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Root of repo\n./docs/build.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Go Version\nDESCRIPTION: Command to verify the installed Go version, which should be 1.16+ for cdk8s compatibility.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo version\n```\n\n----------------------------------------\n\nTITLE: Running Hugo Server for CDK8s Landing Page Preview\nDESCRIPTION: Command to start the Hugo development server for previewing the landing page at http://127.0.0.1:1313/. Requires Hugo to be installed.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Root of repo\ncd website && hugo server && cd -\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Resolver for cdk8s (TypeScript)\nDESCRIPTION: Implements a custom resolver that adds a prefix to every resource name in the application. Demonstrates how to implement the IResolver interface and transform values before they're written to Kubernetes manifests.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/app.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IResolver, ResolutionContext } from 'cdk8s';\n\nexport class AddNamePrefixResolver implements IResolver {\n\n  constructor(private readonly prefix: string) {}\n\n  public resolve(context: ResolutionContext): void {\n\n    // check if we are resolving the name property\n    const isNameProperty = context.key.includes('metadata') && context.key.includes('name') && context.key.length === 2;\n\n    // check we haven't already added a prefix. this is important because\n    // resolution is recursive, so we need to avoid infinite recursion.\n    const isPrefixed = typeof(context.value) === 'string' && context.value.startsWith(this.prefix);\n\n    if (isNameProperty && !isPrefixed) {\n      // replace the value with a new one\n      context.replaceValue(`${this.prefix}${context.value}`);\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Markdown content describing high-level abstractions in CDK8s, including contribution guidelines and use case organization.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/research/high-level-abstractions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# High-Level Abstractions\n\nOne of the major benefits of *cdk8s*, is the ability to create high level abstractions ontop of the basic Kubernetes building blocks. \nThese abstractions, which we refer to as `L2` (Layer 2) constructs, are meant to simplify the interaction with kubernetes resources, and more accurately represent the mental model of the developer (author).\n\nAmong others, their capabitilities should include:\n\n- Provide sane defaults.\n- Auto create and wire dependent resources.\n- Expose type-safe semantic API's the convey *intent*, rather than data.\n\nThe process of hand-crafting these abstractions requires thourough research of use-cases and common patterns that emerge when authoring kubernetes applications.\n\nAt a certain point, when we've collected enough such use-cases, we will start consolidating it and build \nthe first versions of these `L2` constructs.\n\n## Curation\n\nWe structure and curate the research by focusing on **use-cases**:\n\n- Every sub-directory represents a different use-case.\n- Every use-case should, **at least**, include a `REAMDE` file that describes \n  the motivation behind the suggestion.\n\n  > If the use-case was inspired by external material (i.e docs, blog post, examples), the README should include a reference to that material.\n- Aside from the `README`, the structure of the use-case directory is free form. It can range from proposing theoretical API's without any implementation, to a full blown *cdk8s* application that can synthesized and deployed.\n\nFor example: [ConfigMap as Pod volumes](./config-map-volume-in-pod)\n\n## Contribution\n\nKubernetes has such a rich domain, and so many different configuration options, that come along with a lot of complexity for manifest authors. We feel that the best way to create these abstractions, is to engage with the community so that we understand the needs and the pain points. \n\n*Simply put, we need you!*\n\nHere are some general guidelines:\n\n- Try focusing on specific use-cases, rather than a general design for the construct.\n\n- Put yourself in the shoes of manifest authors, how can we make their lifes easier?\n\n- While it makes since to draw inspiration from API's suggested in existing use-cases, its important you have full creative freedom, so don't feel you have to be aligned with them.\n\nContributing to `L2` research essentially means one of:\n\n### 1) Propose new use-cases\n\nIf you have a new use-case in mind, create a new directory and give it a concise name that describes the use-case. Make sure to include a `README` file as mentioned earlier.\n\n### 3) Suggest an alternate\n\nSometimes you may have a different suggestion for an existing API. In such a case, **append** your suggestion to the existing one, don't replace it. Remember that this is research, so we are still not in the decision making phase, we just want all possible alternatives in front of us.\n\n> Its possible that as part of the review process, we will decide to actually replace, but lets leave that for a discussion, as we assume that more often than not, we will choose to append.\n\n### 2) Extend existing use-cases\n\nYou might also have a suggestion to extend the API of an existing use-case, feel free do so, but remember to try and focus on the use-case in question.\n```\n\n----------------------------------------\n\nTITLE: Using Custom Resolver with cdk8s App in TypeScript\nDESCRIPTION: This code shows how to use a custom resolver with a cdk8s App. The resolver is passed to the App constructor via the resolver property.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Chart } from 'cdk8s'\n\nconst app = new App({ resolver: new MyCustomResolver() });\nnew Chart(app, 'Chart');\n```\n\n----------------------------------------\n\nTITLE: Displaying CDK8s Logo Assets in HTML Tables\nDESCRIPTION: This HTML code creates tables to showcase different versions of the CDK8s logo. It includes horizontal, stacked, and icon variants in color, black, and white, available as PNG and SVG files. The tables are structured to provide a clear overview of all available logo assets.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/media.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n    <thead>\n        <tr>\n            <th colspan=\"3\"></th>\n        </tr>\n        <tr>\n            <th></th>\n            <th colspan=\"1\">PNG</th>\n            <th colspan=\"1\">SVG</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th>color</th>\n            <td><img src=\"/assets/logos/horizontal/cdk8s.horizontal.color.png\" width=\"150px\"></td>\n            <td><img src=\"/assets/logos/horizontal/cdk8s.horizontal.color.svg\" width=\"150px\"></td>\n        </tr>\n        <tr>\n            <th>black</th>\n            <td><img src=\"/assets/logos/horizontal/cdk8s.horizontal.black.png\" width=\"150px\"></td>\n            <td><img src=\"/assets/logos/horizontal/cdk8s.horizontal.black.svg\" width=\"150px\"></td>\n        </tr>\n        <tr style=\"background-color: black; color: white;\">\n            <th>white</th>\n            <td><img src=\"/assets/logos/horizontal/cdk8s.horizontal.white.png\" width=\"150px\"></td>\n            <td><img src=\"/assets/logos/horizontal/cdk8s.horizontal.white.svg\" width=\"150px\"></td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing cdk8s CLI\nDESCRIPTION: Command to install the cdk8s command-line interface globally using npm.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g cdk8s-cli\n```\n\n----------------------------------------\n\nTITLE: Defining a Pod with ConfigMap Volume in YAML\nDESCRIPTION: YAML definition for a Kubernetes Pod that mounts a ConfigMap as a volume at /etc/config path. The example shows a simple busybox container that lists the content of the mounted directory.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/research/high-level-abstractions/config-map-volume-in-pod/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: registry.k8s.io/busybox\n      command: [ \"/bin/sh\", \"-c\", \"ls /etc/config/\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: my-config\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Versioned Kubernetes Import - Shell\nDESCRIPTION: Command to import specific version of Kubernetes API objects.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncdk8s import k8s@1.16.0\n```\n\n----------------------------------------\n\nTITLE: Getting SQS Queue Resource by Queue Name\nDESCRIPTION: This snippet demonstrates the correct way to retrieve an SQS queue resource using the AWS CloudControl API. It shows that the queue name should be used as the identifier instead of the URL.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n❯ aws cloudcontrol get-resource --type-name AWS::SQS::Queue --identifier \"Stack-Queue4A7E3555-CiJRmiNfSLJZ\"       [11:54:55]\n{\n    \"TypeName\": \"AWS::SQS::Queue\",\n    \"ResourceDescription\": {\n        \"Identifier\": \"Stack-Queue4A7E3555-CiJRmiNfSLJZ\",\n        \"Properties\": \"{\\\"SqsManagedSseEnabled\\\":true,\\\"ReceiveMessageWaitTimeSeconds\\\":0,\\\"DelaySeconds\\\":0,\\\"MessageRetentionPeriod\\\":345600,\\\"MaximumMessageSize\\\":262144,\\\"VisibilityTimeout\\\":30,\\\"Arn\\\":\\\"arn:aws:sqs:us-east-1:185706627232:Stack-Queue4A7E3555-CiJRmiNfSLJZ\\\",\\\"QueueName\\\":\\\"Stack-Queue4A7E3555-CiJRmiNfSLJZ\\\",\\\"QueueUrl\\\":\\\"Stack-Queue4A7E3555-CiJRmiNfSLJZ\\\"}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CDK8s Module Import Configuration - Shell\nDESCRIPTION: Shell command for importing a CRD with a custom module name.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/import.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncdk8s import example:=my_crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Post-Synth Processing Pattern in CDK8s\nDESCRIPTION: Illustrates defining cloud infrastructure and Kubernetes resources in the same application with tight coupling, requiring post-processing of synthesized output to resolve tokens.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// define the bucket without an explicit name\nnew aws.aws_s3.Bucket(stack, 'Bucket');\n\n// pass the bucket name to the CronJob container\nnew kplus.CronJob(manifest, 'CronJob', {\n containers: [{ \n   image: 'job',\n   envVariables: {\n     BUCKET_NAME: kplus.EnvValue.fromValue(bucket.bucketName),\n   }\n }]\n});\n\ncdk8sApp.synth();\n```\n\n----------------------------------------\n\nTITLE: YAML Output with Custom Construct Dependencies\nDESCRIPTION: The resulting YAML manifest showing how dependencies from custom constructs affect resource ordering. All ApiObjects from the Database construct appear before the Service object.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/deps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: chart-database-statefulset-4627f8e2\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chart-database-configmap-676f8640\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: chart-service-93d02be7\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Helm-Generated API Objects in CDK8s (TypeScript)\nDESCRIPTION: Shows how to interact with Kubernetes API objects created by a Helm chart after it has been included in CDK8s. Demonstrates finding a specific API object by name and adding an annotation to it.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/basics/helm.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst master = redis.apiObjects.find(o => o.name === 'foo-redis-master');\nmaster.metadata.addAnnotation('my.annotation', 'hey-there');\n```\n\n----------------------------------------\n\nTITLE: Querying AWS CloudControl API for SQS Queues\nDESCRIPTION: This snippet demonstrates how to list SQS queues using the AWS CloudControl API. It shows the API's response format and highlights a quirk where the queue URL is listed as the identifier.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n ❯ aws cloudcontrol list-resources --type-name AWS::SQS::Queue                                                     \n{\n    \"ResourceDescriptions\": [\n        {\n            \"Identifier\": \"https://sqs.us-east-1.amazonaws.com/185706627232/Stack-Queue4A7E3555-CiJRmiNfSLJZ\",\n            \"Properties\": \"{\\\"QueueUrl\\\":\\\"https://sqs.us-east-1.amazonaws.com/185706627232/Stack-Queue4A7E3555-CiJRmiNfSLJZ\\\"}\"\n        },\n        {\n            \"Identifier\": \"https://sqs.us-east-1.amazonaws.com/185706627232/terraform-20230106124443466000000002\",\n            \"Properties\": \"{\\\"QueueUrl\\\":\\\"https://sqs.us-east-1.amazonaws.com/185706627232/terraform-20230106124443466000000002\\\"}\"\n        }\n    ],\n    \"TypeName\": \"AWS::SQS::Queue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RFC Document with API Sign-off\nDESCRIPTION: This code snippet demonstrates how to update the RFC document after the API Bar Raiser has signed off on the public API. It involves adding a line indicating the sign-off, including the API Bar Raiser's name.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n[x] Signed-off by API Bar Raiser @foobar\n```\n\n----------------------------------------\n\nTITLE: Attempting to Get SQS Queue Resource by URL\nDESCRIPTION: This snippet shows an attempt to retrieve an SQS queue resource using its URL as the identifier. It demonstrates that using the URL as an identifier results in an error.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1216-resolve-cloud-tokens.md#2025-04-22_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n❯ aws cloudcontrol get-resource --type-name AWS::SQS::Queue --identifier \"https://sqs.us-east-1.amazonaws.com/185706627232/Stack-Queue4A7E3555-CiJRmiNfSLJZ\"\n\nError parsing parameter '--identifier': Unable to retrieve https://sqs.us-east-1.amazonaws.com/185706627232/Stack-Queue4A7E3555-CiJRmiNfSLJZ: received non 200 status code of 404\n```\n\n----------------------------------------\n\nTITLE: Validation Console Output Example\nDESCRIPTION: Example console output showing validation errors for missing CPU requests and unpinned container image versions.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/manifest-validation.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n❌  Ensure each container has a configured CPU request  [1 occurrence]\n    - construct: Chart/Deployment (kind: Deployment)\n💡  Missing property object `requests.cpu` - value should be within the accepted boundaries recommended by the organization\n\n❌  Ensure each container image has a pinned (tag) version  [1 occurrence]\n    - construct: Chart/Deployment (kind: Deployment)\n💡  Incorrect value for key `image` - specify an image version to avoid unpleasant \"version surprises\" in the future\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Go in CDK8s 2.x\nDESCRIPTION: Updates the go.mod dependencies to use CDK8s 2.x and the compatible constructs library version for Go projects.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nrequire (\n  github.com/aws/constructs-go/constructs/v10 v10.1.12\n  github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2 v2.2.87\n)\n```\n\n----------------------------------------\n\nTITLE: CDK8s Validation Configuration in YAML\nDESCRIPTION: Example YAML configuration showing how to configure validation tools and policies in CDK8s projects.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/manifest-validation.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napp: node main.js\nlanguage: typescript\nimports:\n  - k8s\nvalidations:\n  - http://mycompany.com/cdk8s-validations.yaml\n\nWhere http://mycompany.com/cdk8s-validations.yaml is a file published by the central team, and contains:\n\n- package: datree-cdk8s-plugin\n  class: DatreeValidation\n  config:\n    policyUrl: http://mycompany.com/k8s-datree-policy.yaml\n- package: checkov-cdk8s-plugin\n  class: CheckovValidation\n  config:\n    rulesUrl: http://mycompany.com/k8s-checkov-policy.yaml\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally\nDESCRIPTION: Starts a local web server to preview the documentation. This allows contributors to verify the appearance and functionality of documentation changes before submitting them.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Installs the required Python 3 dependencies for building the documentation locally. This step is necessary to test documentation changes before submitting a pull request.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining moduleNames Method for ImportHelm Class in TypeScript\nDESCRIPTION: This method sets the name of the generated file based on the chart name.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/rfc/1272-helm-import.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npublic get moduleNames() {\n  return [this.chartName];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Java in CDK8s 2.x\nDESCRIPTION: Updates the pom.xml dependencies to use CDK8s 2.x and the compatible constructs library version, specifying version ranges.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.cdk8s</groupId>\n    <artifactId>cdk8s</artifactId>\n    <version>[2.2.86,3.0]</version>\n  </dependency>\n  <dependency>\n    <groupId>software.constructs</groupId>\n    <artifactId>constructs</artifactId>\n    <version>[10.1.12,11.0.0]</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Example cdk8s CLI version output\nDESCRIPTION: Sample output from running the version check command, showing the installed version number of the cdk8s CLI.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/cli/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n2.2.31\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap from Directory using kubectl\nDESCRIPTION: Command to create a Kubernetes ConfigMap from files in a local directory using kubectl CLI tool.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/research/high-level-abstractions/config-map-volume-in-pod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap my-config --from-file=./config\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Command to create a new directory for the cdk8s Go project.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/go.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cdk8s-golang\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version in Bash\nDESCRIPTION: Command to check the installed Java version on the system.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/get-started/java.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava --version\n```\n\n----------------------------------------\n\nTITLE: Installing CDK8s CLI 1.x with Homebrew\nDESCRIPTION: Command to install a specific 1.x version of CDK8s CLI using Homebrew.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/migrating-from-1.x.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nbrew install cdk8s@1.<minor>.<patch>\n```\n\n----------------------------------------\n\nTITLE: Previewing CDK8s Documentation with MkDocs Server\nDESCRIPTION: Command to start the MkDocs development server for previewing the documentation pages at http://127.0.0.1:8000/.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Root of repo\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Building CDK8s Production Documentation\nDESCRIPTION: Command to build the MkDocs documentation and copy it to Hugo's public directory for deployment as part of the complete website.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Root of repo\n./docs/build.sh\n```\n\n----------------------------------------\n\nTITLE: Building CDK8s Production Landing Page\nDESCRIPTION: Command to build the production version of the landing page using Hugo. This generates static files in the website/public directory.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Root of repo\ncd website && ./build.sh && cd -\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Robot Behavior for CDK8s Website\nDESCRIPTION: This robots.txt file defines rules for how web crawlers should interact with the cdk8s.io website. It specifies the sitemap location, allows general access to the site, and explicitly disallows access to specific documentation paths related to the 'plus' module components.\nSOURCE: https://github.com/cdk8s-team/cdk8s/blob/master/website/static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nSitemap: https://cdk8s.io/sitemap.xml\nHost: cdk8s.io\n\nUser-agent: *\n\nAllow: /\n\nDisallow: /docs/latest/plus/config-map\nDisallow: /docs/latest/plus/container\nDisallow: /docs/latest/plus/cronjob\nDisallow: /docs/latest/plus/deployment\nDisallow: /docs/latest/plus/horizontal-pod-autoscaler\nDisallow: /docs/latest/plus/ingress\nDisallow: /docs/latest/plus/job\nDisallow: /docs/latest/plus/namespace\nDisallow: /docs/latest/plus/network-policy\nDisallow: /docs/latest/plus/pod\nDisallow: /docs/latest/plus/pv\nDisallow: /docs/latest/plus/pvc\nDisallow: /docs/latest/plus/rbac\nDisallow: /docs/latest/plus/secret\nDisallow: /docs/latest/plus/service\nDisallow: /docs/latest/plus/service-account\nDisallow: /docs/latest/plus/volume\n```"
  }
]