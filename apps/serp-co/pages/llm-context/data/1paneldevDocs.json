[
  {
    "owner": "1panel-dev",
    "repo": "docs",
    "content": "TITLE: Installing 1Panel on Ubuntu using quick start script\nDESCRIPTION: Command to download and execute the 1Panel quick start installation script for Ubuntu systems. The script uses sudo to ensure proper permissions during installation.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/online_installation.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sudo bash quick_start.sh\n```\n\n----------------------------------------\n\nTITLE: Installing 1Panel on RedHat/CentOS using quick start script\nDESCRIPTION: Command to download and execute the 1Panel quick start installation script for RedHat/CentOS systems. The script automatically handles the installation process.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/online_installation.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sh quick_start.sh\n```\n\n----------------------------------------\n\nTITLE: Installing 1Panel on Debian using quick start script\nDESCRIPTION: Command to download and execute the 1Panel quick start installation script for Debian systems. The script handles the necessary setup for Debian-based distributions.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/online_installation.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && bash quick_start.sh\n```\n\n----------------------------------------\n\nTITLE: Running 1Panel Installation Script (bash)\nDESCRIPTION: This bash script executes the 1Panel installation process after the offline package has been extracted. It navigates to the package directory and then executes the install.sh script using /bin/bash. This requires that the user has already extracted the package to the appropriate location.  Replace the example directory name with the actual directory extracted.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/package_installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 进入离线包目录（1panel-v1.10.0-lts-linux-amd64 为示例离线包目录名称，操作时可根据实际离线包名称替换）\ncd 1panel-v1.10.0-lts-linux-amd64\n\n# 运行安装脚本\n/bin/bash install.sh\n```\n\n----------------------------------------\n\nTITLE: Docker troubleshooting installation script\nDESCRIPTION: Alternative Docker installation script to resolve installation failures. This script provides a more reliable Docker installation method from linuxmirrors.cn.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/online_installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n\n----------------------------------------\n\nTITLE: Installing Docker for 1Panel prerequisites\nDESCRIPTION: Command to install Docker as a prerequisite for 1Panel installation. This script automates Docker installation on Linux systems.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/online_installation.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Token Validation in Go\nDESCRIPTION: Presents Go code using the Gin framework (`gin.Context`) to validate incoming API requests. The `validateToken` function extracts `1Panel-Token` and `1Panel-Timestamp` headers, regenerates the expected token using the server's API key (`systemKey`) and the provided timestamp via the `md5Sum` helper, and compares it to the received token for authentication. Requires the `crypto/md5`, `encoding/hex`, and `fmt` packages.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/dev_manual/api_manual.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc validateToken(c *gin.Context) error {\n    panelToken := c.GetHeader(\"1Panel-Token\")\n    panelTimestamp := c.GetHeader(\"1Panel-Timestamp\")\n    systemToken := panelToken\n    systemKey = ******* // 面板 API 密钥\n    expectedToken := md5Sum(\"1panel\" + systemKey + panelTimestamp)\n    if systemToken != expectedToken {\n        return fmt.Errorf(\"invalid token\")\n    }\n    return nil\n}\n\nfunc md5Sum(data string) string {\n    h := md5.New()\n    h.Write([]byte(data))\n    return hex.EncodeToString(h.Sum(nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting 1Panel Offline Package (bash)\nDESCRIPTION: This bash snippet extracts the 1Panel offline package. It assumes the user has downloaded the package and placed it in the /tmp directory.  The tar command with the zxvf options is used to extract the contents of the .tar.gz archive. The user needs root privileges to execute this command.  Replace the example package name with the actual offline package name.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/package_installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp\n# 解压离线包（1panel-v1.10.0-lts-linux-amd64.tar.gz 为示例离线包名称，操作时可根据实际离线包名称替换）\ntar zxvf 1panel-v1.10.0-lts-linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Using an Online Script on Unsupported Linux Distributions - Bash\nDESCRIPTION: This snippet provides a bash command to install Docker via a custom online script when the official Docker installation fails due to an unsupported Linux distribution. It suggests manually installing and starting Docker before proceeding with 1Panel installation. The script uses curl to download and execute the installation from linuxmirrors.cn. Inputs: none explicitly; the script handles environment detection. Outputs: Docker installed or errors reported by the script.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/operating_system.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n\n----------------------------------------\n\nTITLE: Using 1pctl Command-Line Tool for 1Panel Service Management - Bash\nDESCRIPTION: This snippet demonstrates how to use the 1pctl command-line tool to manage various aspects of the 1Panel service. It lists available commands such as checking service status, starting and stopping the service, managing user info, updating system settings, and restoring data. No special dependencies are required beyond the pre-installed 1pctl tool on the 1Panel host. Expected input is a specific command (e.g., start, stop, status), and the output varies based on the command executed. Constraints include requiring necessary system permissions to operate service-level commands.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage:\n  1pctl [COMMAND] [ARGS...]\n  1pctl --help\n\nCommands: \n  status              查看 1Panel 服务运行状态\n  start               启动 1Panel 服务\n  stop                停止 1Panel 服务\n  restart             重启 1Panel 服务\n  uninstall           卸载 1Panel 服务\n  user-info           获取 1Panel 用户信息\n  listen-ip           切换 1Panel 监听 IP\n  version             查看 1Panel 版本信息\n  update              修改 1Panel 系统信息\n  reset               重置 1Panel 系统信息\n  restore             恢复 1Panel 服务及数据\n```\n\n----------------------------------------\n\nTITLE: Updating 1Panel System Information via 1pctl update - Bash\nDESCRIPTION: This snippet provides guidance on modifying 1Panel system details such as username, password, and management port using 1pctl update. The command requires no external dependencies and must be run with suitable privileges. Parameters accepted include username, password, and port; passing the chosen sub-command applies the change to the system. Only one aspect can be modified per command invocation.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage:\n  1pctl update [COMMAND] [ARGS...]\n  1pctl update --help\n\nCommands: \n  username            修改面板用户\n  password            修改面板密码\n  port                修改面板端口\n```\n\n----------------------------------------\n\nTITLE: Resetting 1Panel System Settings with 1pctl reset - Bash\nDESCRIPTION: This snippet details the usage of the 1pctl reset command, which resets various aspects of the 1Panel system such as removing secure login, domain binding, two-factor authentication, and authorized IPs. The user must have access to the 1pctl CLI tool; no additional dependencies are required. The input consists of a sub-command indicating what to reset, and the output confirms completion of the reset action. Only one reset operation can be performed at a time, and administrative privileges may be necessary.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage:\n  1pctl reset [COMMAND] [ARGS...]\n  1pctl reset --help\n\nCommands: \n  domain              取消 1Panel 访问域名绑定\n  entrance            取消 1Panel 安全入口\n  https               取消 1Panel https 方式登录\n  ips                 取消 1Panel 授权 IP 限制\n  mfa                 取消 1Panel 两步验证\n```\n\n----------------------------------------\n\nTITLE: Modifying 1Panel Listening IP Using 1pctl listen-ip - Bash\nDESCRIPTION: This snippet shows how to use the 1pctl listen-ip command to change which IP versions (IPv4/IPv6) 1Panel binds to. The tool is pre-installed with 1Panel and requires only CLI access. Specify either ipv4 or ipv6 as a sub-command to set the listening mode. This command helps configure network accessibility and may require service restart for changes to take effect.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage:\n  1pctl listen-ip [COMMAND] [ARGS...]\n  1pctl listen-ip --help\n\nCommands: \n  ipv4                监听 IPv4\n  ipv6                监听 IPv6\n```\n\n----------------------------------------\n\nTITLE: Installing 1Panel on openEuler and other distributions\nDESCRIPTION: Command to download and execute the 1Panel quick start installation script for openEuler and other Linux distributions after Docker is installed.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/online_installation.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sh quick_start.sh\n```\n\n----------------------------------------\n\nTITLE: Reset and Update Commands for 1Panel CLI Tool\nDESCRIPTION: Provides CLI commands for resetting configuration components and updating panel information such as password, port, and username. These commands are used when configuration changes impact access or functionality.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/settings.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nroot@hostname:/# 1pctl reset --help\n重置系统信息\n\nUsage:\n1panel reset [command]\n\nAvailable Commands:\ndomain      取消 1Panel 访问域名绑定\nentrance    取消 1Panel 安全入口\nhttps       取消 1Panel https 方式登录\nips         取消 1Panel 授权 IP 限制\nmfa         取消 1Panel 两步验证\n\nFlags:\n-h, --help   help for reset\n\nUse \"1panel reset [command] --help\" for more information about a command.\n```\n\nLANGUAGE: Shell\nCODE:\n```\nroot@hostname:/# 1pctl update\n修改面板信息\n\nUsage:\n1panel update [command]\n\nAvailable Commands:\npassword    修改面板密码\nport        修改面板端口\nusername    修改面板用户\n\nFlags:\n-h, --help   help for update\n\nUse \"1panel update [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on RedHat/CentOS\nDESCRIPTION: A sequence of commands to install and configure Supervisor on RedHat/CentOS systems. This includes installing the EPEL repository, installing Supervisor, starting the service, enabling autostart, and checking the service status.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/supervisor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y epel-release\n```\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y supervisor\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start supervisord\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable supervisord\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status supervisord\n```\n\n----------------------------------------\n\nTITLE: Installing Fail2ban on RedHat / CentOS using yum\nDESCRIPTION: This snippet details the commands to install EPEL repository and Fail2ban service on RedHat or CentOS systems, including starting and enabling the service, and checking its status.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/fail2ban.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y epel-release\n```\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y fail2ban\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start fail2ban\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable fail2ban\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status fail2ban\n```\n\n----------------------------------------\n\nTITLE: Installing Fail2ban on Ubuntu / Debian using apt\nDESCRIPTION: This snippet shows how to install Fail2ban on Ubuntu or Debian, including handling dependencies like rsyslog on Debian 12+, starting the service, enabling it to run at startup, and checking its status.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/fail2ban.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install fail2ban\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install rsyslog\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start fail2ban\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable fail2ban\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status fail2ban\n```\n\n----------------------------------------\n\nTITLE: Starting ClamAV Services and Updating Virus Definitions on Ubuntu/Debian\nDESCRIPTION: Initializes virus definitions via freshclam and starts both the scan daemon and update service using systemctl. Requires sudo privileges. Ensures the ClamAV background services are running for both scanning and updates.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfreshclam\nsudo systemctl start clamav-daemon\nsudo systemctl start clamav-freshclam.service\n\n```\n\n----------------------------------------\n\nTITLE: Starting ClamAV Services and Updating Virus Definitions on RedHat/CentOS\nDESCRIPTION: Initializes ClamAV virus database with freshclam and starts core scanning and updater services using systemd. Root access required. Properly starts continuous protection and ensures updates are running in background.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreshclam\nsystemctl start clamd@scan.service\nsystemctl start clamav-freshclam.service\n\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor on Ubuntu/Debian\nDESCRIPTION: Command to install Supervisor on Ubuntu/Debian systems. After installation, Supervisor will start automatically by default.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/supervisor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: Installing ClamAV on Ubuntu/Debian with Bash\nDESCRIPTION: Installs ClamAV and its daemon on Ubuntu or Debian systems using apt. Requires sudo privileges. Downloads and installs the necessary packages for real-time virus scanning.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install clamav clamav-daemon -y\n\n```\n\n----------------------------------------\n\nTITLE: Installing ClamAV on RedHat/CentOS with Bash\nDESCRIPTION: Installs ClamAV, its daemon, and the update utility on RedHat/CentOS systems using the yum package manager. Requires EPEL repository to be enabled. This command fetches and installs all listed packages with their dependencies.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum install clamav clamd clamav-update -y\n\n```\n\n----------------------------------------\n\nTITLE: Installing Pure-FTPd on CentOS/RedHat\nDESCRIPTION: Installs the Pure-FTPd server package through yum, preparing the system for FTP service configuration.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum -y install pure-ftpd\n```\n\n----------------------------------------\n\nTITLE: Installing Pure-FTPd on Ubuntu/Debian\nDESCRIPTION: Installs Pure-FTPd server package via apt-get, preparing the system for subsequent configuration.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pure-ftpd\n```\n\n----------------------------------------\n\nTITLE: Installing EPEL Repository on RedHat/CentOS with Bash\nDESCRIPTION: Installs the Extra Packages for Enterprise Linux (EPEL) repository, a prerequisite for accessing ClamAV packages on RedHat or CentOS systems. Required dependency: root access. Command expects a standard network connection. Output will be progress and result of yum installation.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y epel-release\n\n```\n\n----------------------------------------\n\nTITLE: Installing EPEL Repository on CentOS/RedHat\nDESCRIPTION: Installs the EPEL repository required for accessing additional packages like Pure-FTPd using yum package manager.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y epel-release\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA GPU Drivers in Linux Command Line\nDESCRIPTION: Commands to make the NVIDIA driver installer executable and run the installation process. After execution, follow the prompts in the installation wizard to complete the setup. The nvidia-smi command will be installed with the drivers to provide GPU information.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/ai/gpu.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x NVIDIA-Linux-x86_64-570.86.15.run\n./NVIDIA-Linux-x86_64-570.86.15.run\n```\n\n----------------------------------------\n\nTITLE: Initializing a 1Panel Application Using 1panel app init - Bash\nDESCRIPTION: This snippet demonstrates the initialization of a new application using the 1panel app init command, specifying an application name and version via command-line flags. It requires the 1panel CLI to be available on the system. The command expects -k for the application key (name) and -v for version as input and produces a confirmation or error as output. Ensure correct syntax and available permissions; the example initializes an app called app_name with version v1.0.0.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/installation/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n1panel app init -k app_name -v v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Default Fail2ban Configuration Parameters\nDESCRIPTION: This configuration defines the default behavior of Fail2ban, setting parameters such as bantime, findtime, maxretry, and actions, as well as specific settings for the sshd jail, including whitelist IPs, port, retry limits, and log paths.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/fail2ban.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n#DEFAULT-START\n[DEFAULT]\nbantime = 600\nfindtime = 300\nmaxretry = 5\nbanaction = firewallcmd-ipset\naction = %(action_mwl)s\n#DEFAULT-END\n\n[sshd]\nignoreip = 127.0.0.1/8\nenabled = true\nfilter = sshd\nport = 22\nmaxretry = 2\nfindtime = 300\nbantime = 600\naction = %(action_mwl)s\nbanaction = iptables-multiport\nlogpath = /var/log/secure\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Fail2ban Service and Configuration\nDESCRIPTION: This advice covers common issues such as reconfiguring [sshd] in jail.local, verifying firewall compatibility, adjusting log paths based on OS, and note changes from Debian 12 onwards regarding rsyslog. It emphasizes ensuring service configurations match the environment to avoid errors.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/fail2ban.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Checking Pure-FTPd Service Status on CentOS/RedHat\nDESCRIPTION: Displays current status of the Pure-FTPd system service to verify successful startup and operational status.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status pure-ftpd.service\n```\n\n----------------------------------------\n\nTITLE: Checking ClamAV Service Status on Ubuntu/Debian\nDESCRIPTION: Checks the running status of ClamAV's daemon and update service on Ubuntu or Debian. Useful for verifying service availability and diagnosing problems if antivirus protections are not functioning.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status clamav-daemon\nsudo systemctl status clamav-freshclam.service\n\n```\n\n----------------------------------------\n\nTITLE: Checking ClamAV Service Status on RedHat/CentOS\nDESCRIPTION: Queries the running status of ClamAV scanning and update services via systemd. Outputs the current states, uptime, and any error messages to assist in troubleshooting service startup.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status clamd@scan.service\nsystemctl status clamav-freshclam.service\n\n```\n\n----------------------------------------\n\nTITLE: Enabling ClamAV Services at Boot on RedHat/CentOS\nDESCRIPTION: Sets ClamAV scanning and update daemons to start automatically on system boot using systemctl. Ensures continued virus protection after reboots. Requires root privileges.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable clamd@scan.service\nsystemctl enable clamav-freshclam.service\n\n```\n\n----------------------------------------\n\nTITLE: Enabling ClamAV Services at Boot on Ubuntu/Debian\nDESCRIPTION: Sets ClamAV daemon and updater to autostart on system boot using systemctl. Essential for persistent system protection. Commands require sudo privileges.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable clamav-daemon\nsudo systemctl enable clamav-freshclam.service\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Firewall Zone to Public on Fedora 37 - Bash\nDESCRIPTION: These bash commands reset the default firewall zone to 'public' and reload firewall settings on Fedora 37 distributions. This resolves issues where the panel-created port rules do not take effect due to the default non-public zone. Dependencies include a working firewall-cmd utility and necessary privileges to change firewall configurations. Inputs: none; commands act on current firewall settings. Outputs: updated firewall zone and active rules after reload.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/operating_system.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirewall-cmd --set-default-zone=public\n```\n\nLANGUAGE: bash\nCODE:\n```\nfirewall-cmd --reload\n```\n\n----------------------------------------\n\nTITLE: Starting Pure-FTPd Service on CentOS/RedHat\nDESCRIPTION: Uses systemctl to start the Pure-FTPd service, enabling FTP server operation on the system.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start pure-ftpd.service\n```\n\n----------------------------------------\n\nTITLE: Starting Pure-FTPd Service on Ubuntu/Debian\nDESCRIPTION: Launches the Pure-FTPd server process using systemctl to enable FTP services.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start pure-ftpd.service\n```\n\n----------------------------------------\n\nTITLE: Checking Pure-FTPd Service Status on Ubuntu/Debian\nDESCRIPTION: Checks the operational status of the Pure-FTPd service to confirm successful start and health.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status pure-ftpd.service\n```\n\n----------------------------------------\n\nTITLE: Modifying Pure-FTPd Default Configuration on CentOS/RedHat\nDESCRIPTION: Replaces default parameters in the Pure-FTPd configuration file to set server behavior including user database path, logging, anonymous login, and passive port range.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 默认配置位于 /etc/pure-ftpd/pure-ftpd.conf，在配置文件中找到下面几个参数进行修改：\n\n# 指定路径，PureDB用户数据库文件\nPureDB /etc/pure-ftpd/pureftpd.pdb\n# 开启日志\nVerboseLog yes\n# 拒绝匿名登录\nNoAnonymous yes\n# 开启被动端口范围 (这里需要根据实际需求调整端口范围)\nPassivePortRange 39000 40000\n```\n\n----------------------------------------\n\nTITLE: Configuring Pure-FTPd on Ubuntu/Debian via Configuration Files\nDESCRIPTION: Creates configuration files in /etc/pure-ftpd/conf and sets parameters such as database path, logging, anonymous login, and passive port range to customize server behavior.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# 与 centos 不同，这里需要在 /etc/pure-ftpd/conf 文件夹下执行下列命令，增加对应配置文件：\n\n# 创建 /etc/pure-ftpd/conf/PureDB 文件，内容指定路径 /etc/pure-ftpd/pureftpd.pdb\necho '/etc/pure-ftpd/pureftpd.pdb' > /etc/pure-ftpd/conf/PureDB\n# 创建 /etc/pure-ftpd/conf/VerboseLog 文件，开启日志\necho yes > /etc/pure-ftpd/conf/VerboseLog\n# 创建 /etc/pure-ftpd/conf/NoAnonymous 文件，拒绝匿名登录\necho yes > /etc/pure-ftpd/conf/NoAnonymous\n# 创建 /etc/pure-ftpd/conf/PassivePortRange 文件，开启被动端口范围 (这里需要根据实际需求调整端口范围)\necho '39000 40000' > /etc/pure-ftpd/conf/PassivePortRange\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Pure-FTPd Database Configuration on Ubuntu/Debian\nDESCRIPTION: Creates a symbolic link from the configuration file to the authentication directory, enabling the server to recognize settings.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/ftp.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nln -s /etc/pure-ftpd/conf/PureDB /etc/pure-ftpd/auth/50puredb\n```\n\n----------------------------------------\n\nTITLE: Configuring ClamAV Scan Daemon on RedHat/CentOS\nDESCRIPTION: Shows required modifications to the ClamAV scan daemon configuration file. Lines provided are to be uncommented/set for logging, PID file, database location, and socket communication. Configuration file changes improve logging, control, and daemon startup behavior. Root permission is usually required.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_2\n\nLANGUAGE: configuration\nCODE:\n```\n/etc/clamd.d/scan.conf 取消下面行注释\nLogFile /var/log/clamd.scan\nLogFileMaxSize 2M\nPidFile /run/clamd.scan/clamd.pid\nDatabaseDirectory /var/lib/clamav\nLocalSocket /run/clamd.scan/clamd.sock\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ClamAV Freshclam Updates on RedHat/CentOS\nDESCRIPTION: Lists configuration details required in freshclam.conf for updating ClamAV virus database. Specifies directories, log files, update server, and schedule. These changes ensure proper update logging and frequency for keeping virus definitions current.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/user_manual/toolbox/clam.md#_snippet_3\n\nLANGUAGE: configuration\nCODE:\n```\n/etc/freshclam.conf 取消下面行注释\nDatabaseDirectory /var/lib/clamav\nUpdateLogFile  /var/log/freshclam.log\nPidFile  /var/run/freshclam.pid\nDatabaseMirror database.clamav.net\nChecks 12\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy Headers for 1Panel Terminal - Properties\nDESCRIPTION: This snippet demonstrates how to update the Nginx location block to properly support WebSocket upgrades required by 1Panel's host and container terminals. It ensures compatibility by setting HTTP/1.1 protocol, adjusting the Upgrade and Connection headers, and should be inserted into the target server's Nginx configuration file. Prerequisites include access to the Nginx configuration, and after applying, a service reload may be necessary. This configuration is essential when using Nginx as a reverse proxy for terminal access with 1Panel.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/system_function.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nlocation / {\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Tagging MySQL 5.7 for s390x Architecture (Bash)\nDESCRIPTION: This snippet downloads a MySQL 5.7 image for the s390x architecture and then retags it to match the version used by the 1Panel application store.  It assumes Docker is installed and accessible. The output is a renamed Docker image suitable for 1Panel.  The command `docker pull` fetches the image, and `docker tag` renames it. The user then installs MySQL 5.7 from the app store.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/server_architecture.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ibmcom/mysql-s390x:5.7.34\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag ibmcom/mysql-s390x:5.7.34 mysql:5.7.42\n```\n\n----------------------------------------\n\nTITLE: Downloading and Tagging MySQL 8.0 for s390x Architecture (Bash)\nDESCRIPTION: This snippet downloads a MySQL 8.0 image for the s390x architecture and then retags it to match the version used by the 1Panel application store. It assumes Docker is installed and accessible. The output is a renamed Docker image suitable for 1Panel. The command `docker pull` fetches the image, and `docker tag` renames it. The user then installs MySQL 8.0 from the app store.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/server_architecture.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ibmcom/mysql-s390x:8.0.25\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag ibmcom/mysql-s390x:8.0.25 mysql:8.0.33\n```\n\n----------------------------------------\n\nTITLE: Downloading and Tagging MySQL 5.7 for armv7l Architecture (Bash)\nDESCRIPTION: This snippet downloads a MySQL 5.7 image for the armv7l architecture and then retags it to match the version used by the 1Panel application store. It assumes Docker is installed and accessible. The output is a renamed Docker image suitable for 1Panel. The command `docker pull` fetches the image, and `docker tag` renames it. The user then installs MySQL 5.7 from the app store.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/server_architecture.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull biarms/mysql:5.7.33-beta-circleci\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag biarms/mysql:5.7.33-beta-circleci mysql:5.7.42\n```\n\n----------------------------------------\n\nTITLE: Downloading and Tagging OpenResty for armv7l Architecture (Bash)\nDESCRIPTION: This snippet downloads an OpenResty image for the armv7l architecture and then retags it to match the version used by the 1Panel application store.  It assumes Docker is installed and accessible. The output is a renamed Docker image suitable for 1Panel. The command `docker pull` fetches the image, and `docker tag` renames it. The user then installs OpenResty from the app store.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/faq/server_architecture.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull imzcc/openresty:1.21.4.1-7-alpine\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag imzcc/openresty:1.21.4.1-7-alpine openresty/openresty:1.21.4.1-7-focal\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Custom Token Headers (Bash)\nDESCRIPTION: Provides a `curl` command example showing how to make a GET request to an API endpoint (`/api/v1/dashboard/current`), including the mandatory `1Panel-Token` and `1Panel-Timestamp` headers for authentication. Placeholders `<1panel_token>` and `<current_unix_timestamp>` must be replaced with actual generated values.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/dev_manual/api_manual.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:4004/api/v1/dashboard/current\" \\\n-H \"1Panel-Token: <1panel_token>\" \\\n-H \"1Panel-Timestamp: <current_unix_timestamp>\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Custom API Authentication Token Format\nDESCRIPTION: Specifies the components and MD5 hashing method used to generate the custom 'Token' for API authentication requests. It combines a fixed prefix '1panel', the user's API key, and the current Unix timestamp (in seconds).\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/dev_manual/api_manual.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nToken = md5('1panel' + API-Key + UnixTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Generating Client-Side Token (JavaScript Pseudocode)\nDESCRIPTION: Illustrates pseudocode in JavaScript for generating the `1Panel-Token` on the client side. It involves concatenating the '1panel' prefix, the client's API key (`clientToken`), and the current Unix timestamp, followed by applying an MD5 hash function (represented by `md5`). This is intended as a guide for implementation.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/docs/dev_manual/api_manual.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = md5('1panel' + clientToken + unixTimestamp);\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Dependencies for 1panel\nDESCRIPTION: Lists the minimum required versions of documentation-related Python packages needed for the 1panel project. These include mkdocs-material for theming, mkdocs-macros-plugin for extended functionality, and mike for versioning.\nSOURCE: https://github.com/1panel-dev/docs/blob/main/requirements/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-material>=8.4.0\nmkdocs-macros-plugin>=0.7.0\nmike>=1.1.2\n```"
  }
]