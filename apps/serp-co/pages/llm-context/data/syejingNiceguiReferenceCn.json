[
  {
    "owner": "syejing",
    "repo": "nicegui-reference-cn",
    "content": "TITLE: Using NiceGUI's Automatic Context System\nDESCRIPTION: Demonstrates NiceGUI's automatic context tracking which allows for intuitive UI descriptions without explicit parent parameters. This example shows how elements added within a with statement context or from callbacks maintain their correct hierarchical relationship.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.card():\n    ui.label('Card content')\n    ui.button('Add label', on_click=lambda: ui.label('Click!'))\n    ui.timer(1.0, lambda: ui.label('Tick!'), once=True)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating RESTful API Endpoints with NiceGUI\nDESCRIPTION: Demonstrates how to leverage FastAPI within NiceGUI to create RESTful API endpoints. This example creates a random number generator API that can be accessed via HTTP requests or through the UI.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom nicegui import app, ui\n\n@app.get('/random/{max}')\ndef generate_random_number(max: int):\n    return {'min': 0, 'max': max, 'value': random.randint(0, max)}\n\nmax = ui.number('max', value=100)\nui.button('generate random number', on_click=lambda: ui.open(f'/random/{max.value:.0f}'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript from NiceGUI Python Code\nDESCRIPTION: Shows how to run arbitrary JavaScript code in the browser from Python using ui.run_javascript. Demonstrates different patterns including fire-and-forget, receiving results, and accessing client-side elements.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nasync def alert():\n    await ui.run_javascript('alert(\"Hello!\")', respond=False)\n\nasync def get_date():\n    time = await ui.run_javascript('Date()')\n    ui.notify(f'Browser time: {time}')\n\nasync def access_elements():\n    await ui.run_javascript(f'getElement({label.id}).innerText += \" Hello!\"')\n\nui.button('fire and forget', on_click=alert)\nui.button('receive result', on_click=get_date)\nui.button('access elements', on_click=access_elements)\nlabel = ui.label()\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Data Binding in NiceGUI\nDESCRIPTION: Shows how to create data bindings between UI elements and models in NiceGUI. The example demonstrates two-way bindings between a slider, toggle, and number input with a model property, and visibility binding with a checkbox.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nclass Demo:\n    def __init__(self):\n        self.number = 1\n\ndemo = Demo()\nv = ui.checkbox('visible', value=True)\nwith ui.column().bind_visibility_from(v, 'value'):\n    ui.slider(min=1, max=3).bind_value(demo, 'number')\n    ui.toggle({1: 'A', 2: 'B', 3: 'C'}).bind_value(demo, 'number')\n    ui.number().bind_value(demo, 'number')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Running CPU-Bound Tasks in NiceGUI\nDESCRIPTION: Shows how to run CPU-intensive tasks in a separate process using NiceGUI's run.cpu_bound function. This prevents long computations from blocking the event loop and making the UI unresponsive.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom nicegui import run, ui\n\ndef compute_sum(a: float, b: float) -> float:\n    time.sleep(1)  # simulate a long-running computation\n    return a + b\n\nasync def handle_click():\n    result = await run.cpu_bound(compute_sum, 1, 2)\n    ui.notify(f'Sum is {result}')\n\nui.button('Compute', on_click=handle_click)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Pages with NiceGUI in Python\nDESCRIPTION: Shows how to create private pages for each user using the @ui.page decorator. Each decorated function defines a new route that constructs a unique page instance for every user that accesses it.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\n@ui.page('/other_page')\ndef other_page():\n    ui.label('Welcome to the other side')\n    ui.link('Back to main page', '/documentation#page')\n\n@ui.page('/dark_page', dark=True)\ndef dark_page():\n    ui.label('Welcome to the dark side')\n    ui.link('Back to main page', '/documentation#page')\n\nui.link('Visit other page', other_page)\nui.link('Visit dark page', dark_page)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Running I/O Bound Tasks with NiceGUI in Python\nDESCRIPTION: Demonstrates how to use NiceGUI's io_bound function to run I/O intensive operations in a separate thread, preventing the UI from becoming unresponsive. This example downloads content from a URL without blocking the event loop.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom nicegui import run, ui\n\nasync def handle_click():\n    URL = 'https://httpbin.org/delay/1'\n    response = await run.io_bound(requests.get, URL, timeout=3)\n    ui.notify(f'Downloaded {len(response.content)} bytes')\n\nui.button('Download', on_click=handle_click)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Handling Lifecycle Events in NiceGUI\nDESCRIPTION: Shows how to register event handlers for NiceGUI application lifecycle events like startup, shutdown, client connection, and disconnection. This example tracks and displays the time of the last new client connection.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom nicegui import app, ui\n\ndt = datetime.now()\n\ndef handle_connection():\n    global dt\n    dt = datetime.now()\napp.on_connect(handle_connection)\n\nlabel = ui.label()\nui.timer(1, lambda: label.set_text(f'Last new connection: {dt:%H:%M:%S}'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Using Async Event Handlers in NiceGUI\nDESCRIPTION: Demonstrates how to use asynchronous event handlers in NiceGUI. The example shows a button that triggers an async task which displays notifications at the start and end of a 5-second operation.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom nicegui import ui\n\nasync def async_task():\n    ui.notify('Asynchronous task started')\n    await asyncio.sleep(5)\n    ui.notify('Asynchronous task finished')\n\nui.button('start async task', on_click=async_task)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Using Storage in NiceGUI Applications\nDESCRIPTION: Demonstrates NiceGUI's storage mechanisms for data persistence. Shows how to use the user storage type to maintain user-specific data across browser sessions, requiring a storage_secret for cookie encryption.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import app, ui\n\n@ui.page('/')\ndef index():\n    app.storage.user['count'] = app.storage.user.get('count', 0) + 1\n    with ui.row():\n       ui.label('your own page visits:')\n       ui.label().bind_text_from(app.storage.user, 'count')\n\nui.run(storage_secret='private key to secure the browser session cookie')\n```\n\n----------------------------------------\n\nTITLE: Creating Page Layouts with Headers, Footers, and Drawers in NiceGUI\nDESCRIPTION: Shows how to implement complex page layouts with headers, footers, and side drawers in NiceGUI. Demonstrates fixed and scrollable elements, as well as customization of corners and styling.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\n@ui.page('/page_layout')\ndef page_layout():\n    ui.label('CONTENT')\n    [ui.label(f'Line {i}') for i in range(100)]\n    with ui.header(elevated=True).style('background-color: #3874c8').classes('items-center justify-between'):\n        ui.label('HEADER')\n        ui.button(on_click=lambda: right_drawer.toggle(), icon='menu').props('flat color=white')\n    with ui.left_drawer(top_corner=True, bottom_corner=True).style('background-color: #d7e3f4'):\n        ui.label('LEFT DRAWER')\n    with ui.right_drawer(fixed=False).style('background-color: #ebf1fa').props('bordered') as right_drawer:\n        ui.label('RIGHT DRAWER')\n    with ui.footer().style('background-color: #3874c8'):\n        ui.label('FOOTER')\n\nui.link('show page with fancy layout', page_layout)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Refreshable UI Functions in NiceGUI\nDESCRIPTION: Shows how to create refreshable UI functions in NiceGUI using the @ui.refreshable decorator. The example demonstrates a function that displays a sorted list of numbers, which can be refreshed after adding a random number.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom nicegui import ui\n\nnumbers = []\n\n@ui.refreshable\ndef number_ui() -> None:\n    ui.label(', '.join(str(n) for n in sorted(numbers)))\n\ndef add_number() -> None:\n    numbers.append(random.randint(0, 100))\n    number_ui.refresh()\n\nnumber_ui()\nui.button('Add random number', on_click=add_number)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Parameter Injection in NiceGUI Page Routes\nDESCRIPTION: Demonstrates how to use FastAPI's parameter injection in NiceGUI page functions. The example shows path parameters and query parameters being used to dynamically customize page content.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\n@ui.page('/icon/{icon}')\ndef icons(icon: str, amount: int = 1):\n    ui.label(icon).classes('text-h3')\n    with ui.row():\n        [ui.icon(icon).classes('text-h3') for _ in range(amount)]\nui.link('Star', '/icon/star?amount=5')\nui.link('Home', '/icon/home')\nui.link('Water', '/icon/water_drop?amount=3')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Using Generic Events in NiceGUI\nDESCRIPTION: Demonstrates various ways to register event handlers in NiceGUI, including using predefined event parameters, generic events with the 'on' method, throttling event handling, and capturing event arguments.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.row():\n    ui.button('A', on_click=lambda: ui.notify('You clicked the button A.'))\n    ui.button('B').on('click', lambda: ui.notify('You clicked the button B.'))\nwith ui.row():\n    ui.button('C').on('mousemove', lambda: ui.notify('You moved on button C.'))\n    ui.button('D').on('mousemove', lambda: ui.notify('You moved on button D.'), throttle=0.5)\nwith ui.row():\n    ui.button('E').on('mousedown', lambda e: ui.notify(e))\n    ui.button('F').on('mousedown', lambda e: ui.notify(e), ['ctrlKey', 'shiftKey'])\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing AG Grid for Large Datasets in NiceGUI\nDESCRIPTION: Shows how to use ui.aggrid to create a data grid for handling large datasets. The example demonstrates column definitions, row data, selection options, and API method calls for grid interaction.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\ngrid = ui.aggrid({\n    'defaultColDef': {'flex': 1},\n    'columnDefs': [\n        {'headerName': 'Name', 'field': 'name'},\n        {'headerName': 'Age', 'field': 'age'},\n        {'headerName': 'Parent', 'field': 'parent', 'hide': True},\n    ],\n    'rowData': [\n        {'name': 'Alice', 'age': 18, 'parent': 'David'},\n        {'name': 'Bob', 'age': 21, 'parent': 'Eve'},\n        {'name': 'Carol', 'age': 42, 'parent': 'Frank'},\n    ],\n    'rowSelection': 'multiple',\n}).classes('max-h-40')\n\ndef update():\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()\n\nui.button('Update', on_click=update)\nui.button('Select all', on_click=lambda: grid.call_api_method('selectAll'))\nui.button('Show parent', on_click=lambda: grid.call_column_api_method('setColumnVisible', 'parent', True))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Manually Updating UI Elements in NiceGUI\nDESCRIPTION: Demonstrates how to manually update UI elements in NiceGUI when automatic updates aren't sufficient. The example shows both element.update() and ui.update() methods on a chart where changes to nested data might not be automatically detected.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom random import randint\n\nchart = ui.chart({'title': False, 'series': [{'data': [1, 2]}]}).classes('w-full h-64')\n\ndef add():\n    chart.options['series'][0]['data'].append(randint(0, 100))\n    chart.update()\n\ndef clear():\n    chart.options['series'][0]['data'].clear()\n    ui.update(chart)\n\nwith ui.row():\n    ui.button('Add', on_click=add)\n    ui.button('Clear', on_click=clear)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Programmatic Page Navigation in NiceGUI with ui.open\nDESCRIPTION: Demonstrates how to trigger client-side redirections programmatically using ui.open. This function can redirect all connected clients or specific ones based on the socket parameter provided by user events.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\n@ui.page('/yet_another_page')\ndef yet_another_page():\n    ui.label('Welcome to yet another page')\n    ui.button('RETURN', on_click=lambda: ui.open('documentation#open'))\n\nui.button('REDIRECT', on_click=lambda: ui.open(yet_another_page))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Understanding Auto-Index Pages in NiceGUI\nDESCRIPTION: Demonstrates the difference between private pages and the auto-index page in NiceGUI. Private pages create new instances for each client, while the auto-index page is shared across all clients, maintaining state.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom uuid import uuid4\n\n@ui.page('/private_page')\nasync def private_page():\n    ui.label(f'private page with ID {uuid4()}')\n\nui.label(f'shared auto-index page with ID {uuid4()}')\nui.link('private page', private_page)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Using Apache ECharts for Data Visualization in NiceGUI\nDESCRIPTION: Shows how to implement data visualization with Apache ECharts in NiceGUI. The example creates a bar chart with two series and provides dynamic data updates through a button click.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom random import random\n\nechart = ui.echart({\n    'xAxis': {'type': 'value'},\n    'yAxis': {'type': 'category', 'data': ['A', 'B'], 'inverse': True},\n    'legend': {'textStyle': {'color': 'gray'}},\n    'series': [\n        {'type': 'bar', 'name': 'Alpha', 'data': [0.1, 0.2]},\n        {'type': 'bar', 'name': 'Beta', 'data': [0.3, 0.4]},\n    ],\n})\n\ndef update():\n    echart.options['series'][0]['data'][0] = random()\n    echart.update()\n\nui.button('Update', on_click=update)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Log Views in NiceGUI\nDESCRIPTION: Demonstrates how to create a log view component in NiceGUI that allows adding new lines without retransmitting the entire history. The example shows a log with a maximum number of displayed lines and a button to add timestamps.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom nicegui import ui\n\nlog = ui.log(max_lines=10).classes('w-full h-20')\nui.button('Log time', on_click=lambda: log.push(datetime.now().strftime('%X.%f')[:-5]))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Charts with Highcharts in NiceGUI\nDESCRIPTION: Demonstrates how to create and update interactive charts using Highcharts. The example shows a bar chart with two series and provides a button to dynamically update chart data.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom random import random\n\nchart = ui.chart({\n    'title': False,\n    'chart': {'type': 'bar'},\n    'xAxis': {'categories': ['A', 'B']},\n    'series': [\n        {'name': 'Alpha', 'data': [0.1, 0.2]},\n        {'name': 'Beta', 'data': [0.3, 0.4]},\n    ],\n}).classes('w-full h-64')\n\ndef update():\n    chart.options['series'][0]['data'][0] = random()\n    chart.update()\n\nui.button('Update', on_click=update)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Editors in NiceGUI\nDESCRIPTION: Shows how to implement a JSON editor in NiceGUI using the JSONEditor component. The example creates an editor with various JSON data types and demonstrates handling select and change events.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\njson = {\n    'array': [1, 2, 3],\n    'boolean': True,\n    'color': '#82b92c',\n    None: None,\n    'number': 123,\n    'object': {\n        'a': 'b',\n        'c': 'd',\n    },\n    'time': 1575599819000,\n    'string': 'Hello World',\n}\nui.json_editor({'content': {'json': json}},\n               on_select=lambda e: ui.notify(f'Select: {e}'),\n               on_change=lambda e: ui.notify(f'Change: {e}'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Integrating Plotly Graphs in NiceGUI\nDESCRIPTION: Demonstrates how to render Plotly charts in NiceGUI. The example creates a simple scatter plot using a Plotly Figure object and configures it to fit within the UI layout.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom nicegui import ui\n\nfig = go.Figure(go.Scatter(x=[1, 2, 3, 4], y=[1, 2, 3, 2.5]))\nfig.update_layout(margin=dict(l=0, r=0, t=0, b=0))\nui.plotly(fig).classes('w-full h-40')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Boxes in NiceGUI\nDESCRIPTION: Demonstrates how to create dialog boxes in NiceGUI using the dialog component, which is based on Quasar's QDialog. The example shows a dialog with a label and a close button that can be opened by clicking a button.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.dialog() as dialog, ui.card():\n    ui.label('Hello world!')\n    ui.button('Close', on_click=dialog.close)\n\nui.button('Open a dialog', on_click=dialog.open)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with NiceGUI\nDESCRIPTION: Demonstrates how to serve static files from a local directory using app.add_static_files(). This makes local files accessible to the frontend through a specified endpoint, useful for images and other non-sensitive data.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import app, ui\n\napp.add_static_files('/examples', 'examples')\nui.label('Some NiceGUI Examples').classes('text-h5')\nui.link('AI interface', '/examples/ai_interface/main.py')\nui.link('Custom FastAPI app', '/examples/fastapi/main.py')\nui.link('Authentication', '/examples/authentication/main.py')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Streaming Media Files with NiceGUI\nDESCRIPTION: Shows how to stream media files from a local directory using app.add_media_files(). This enables proper streaming of media content like videos, allowing browsers to access and load files gradually.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom nicegui import app, ui\nfrom pathlib import Path\n\nmedia = Path('media')\nmedia.mkdir(exist_ok=True)\nr = requests.get('https://cdn.coverr.co/videos/coverr-cloudy-sky-2765/1080p.mp4')\n(media  / 'clouds.mp4').write_bytes(r.content)\napp.add_media_files('/my_videos', media)\nui.video('/my_videos/clouds.mp4')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in NiceGUI\nDESCRIPTION: Demonstrates how to add global keyboard event tracking in NiceGUI. The example shows how to handle key presses, releases, arrow keys, and modifier keys, displaying notifications in response.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom nicegui.events import KeyEventArguments\n\ndef handle_key(e: KeyEventArguments):\n    if e.key == 'f' and not e.action.repeat:\n        if e.action.keyup:\n            ui.notify('f was just released')\n        elif e.action.keydown:\n            ui.notify('f was just pressed')\n    if e.modifiers.shift and e.action.keydown:\n        if e.key.arrow_left:\n            ui.notify('going left')\n        elif e.key.arrow_right:\n            ui.notify('going right')\n        elif e.key.arrow_up:\n            ui.notify('going up')\n        elif e.key.arrow_down:\n            ui.notify('going down')\n\nkeyboard = ui.keyboard(on_key=handle_key)\nui.label('Key events can be caught globally by using the keyboard element.')\nui.checkbox('Track key events').bind_value_to(keyboard, 'active')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Step Interfaces with Quasar QStepper in NiceGUI\nDESCRIPTION: Demonstrates how to implement multi-step workflows using NiceGUI's stepper component based on Quasar's QStepper. The example shows a vertical stepper with three steps for a cooking recipe, including navigation buttons between steps.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.stepper().props('vertical').classes('w-full') as stepper:\n    with ui.step('Preheat'):\n        ui.label('Preheat the oven to 350 degrees')\n        with ui.stepper_navigation():\n            ui.button('Next', on_click=stepper.next)\n    with ui.step('Ingredients'):\n        ui.label('Mix the ingredients')\n        with ui.stepper_navigation():\n            ui.button('Next', on_click=stepper.next)\n            ui.button('Back', on_click=stepper.previous).props('flat')\n    with ui.step('Bake'):\n        ui.label('Bake for 20 minutes')\n        with ui.stepper_navigation():\n            ui.button('Done', on_click=lambda: ui.notify('Yay!', type='positive'))\n            ui.button('Back', on_click=stepper.previous).props('flat')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Line Plots in NiceGUI\nDESCRIPTION: Shows how to create real-time updating line plots using ui.line_plot in combination with ui.timer. The example plots sine and cosine functions with timestamps on the x-axis.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport math\nfrom datetime import datetime\nfrom nicegui import ui\n\nline_plot = ui.line_plot(n=2, limit=20, figsize=(3, 2), update_every=5) \\\n    .with_legend(['sin', 'cos'], loc='upper center', ncol=2)\n\ndef update_line_plot() -> None:\n    now = datetime.now()\n    x = now.timestamp()\n    y1 = math.sin(x)\n    y2 = math.cos(x)\n    line_plot.push([now], [[y1], [y2]])\n\nline_updates = ui.timer(0.1, update_line_plot, active=False)\nline_checkbox = ui.checkbox('active').bind_value(line_updates, 'active')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Structures with Quasar QTree in NiceGUI\nDESCRIPTION: Shows how to create hierarchical tree structures using NiceGUI's tree component based on Quasar's QTree. The example demonstrates creating a simple tree with nested items and handling selection events.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.tree([\n    {'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]},\n    {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]},\n], label_key='id', on_select=lambda e: ui.notify(e.value))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scenes with Three.js in NiceGUI\nDESCRIPTION: Demonstrates how to create a 3D scene using NiceGUI's scene element which is based on Three.js. The example shows various 3D objects like spheres, cylinders, boxes with different materials, positioning, and transformations.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.scene().classes('w-full h-64') as scene:\n    scene.sphere().material('#4488ff')\n    scene.cylinder(1, 0.5, 2, 20).material('#ff8800', opacity=0.5).move(-2, 1)\n    scene.extrusion([[0, 0], [0, 1], [1, 0.5]], 0.1).material('#ff8888').move(-2, -2)\n\n    with scene.group().move(z=2):\n        scene.box().move(x=2)\n        scene.box().move(y=2).rotate(0.25, 0.5, 0.75)\n        scene.box(wireframe=True).material('#888888').move(x=2, y=2)\n\n    scene.line([-4, 0, 0], [-4, 2, 0]).material('#ff0000')\n    scene.curve([-4, 0, 0], [-4, -1, 0], [-3, -1, 0], [-3, -2, 0]).material('#008800')\n\n    logo = 'https://avatars.githubusercontent.com/u/2843826'\n    scene.texture(logo, [[[0.5, 2, 0], [2.5, 2, 0]],\n                         [[0.5, 0, 0], [2.5, 0, 0]]]).move(1, -2)\n\n    teapot = 'https://upload.wikimedia.org/wikipedia/commons/9/93/Utah_teapot_(solid).stl'\n    scene.stl(teapot).scale(0.2).move(-3, 4)\n\n    scene.text('2D', 'background: rgba(0, 0, 0, 0.2); border-radius: 5px; padding: 5px').move(z=2)\n    scene.text3d('3D', 'background: rgba(0, 0, 0, 0.2); border-radius: 5px; padding: 5px').move(y=-2).scale(.05)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Timers in NiceGUI\nDESCRIPTION: Shows how to create timers in NiceGUI that execute a callback function at regular intervals. The example displays the current time in a label, updating every second.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom nicegui import ui\n\nlabel = ui.label()\nui.timer(1.0, lambda: label.set_text(f'{datetime.now():%X}'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Images with Mouse Event Handling in NiceGUI\nDESCRIPTION: Shows how to implement an interactive image that responds to mouse events. The example creates an SVG overlay that draws circles where mouse events occur and displays notifications with image coordinates.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom nicegui.events import MouseEventArguments\n\ndef mouse_handler(e: MouseEventArguments):\n    color = 'SkyBlue' if e.type == 'mousedown' else 'SteelBlue'\n    ii.content += f'<circle cx=\"{e.image_x}\" cy=\"{e.image_y}\" r=\"15\" fill=\"none\" stroke=\"{color}\" stroke-width=\"4\" />'\n    ui.notify(f'{e.type} at ({e.image_x:.1f}, {e.image_y:.1f})')\n\nsrc = 'https://picsum.photos/id/565/640/360'\nii = ui.interactive_image(src, on_mouse=mouse_handler, events=['mousedown', 'mouseup'], cross=True)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Accessing Available URLs in NiceGUI\nDESCRIPTION: Shows how to access the list of all URLs available in a NiceGUI application using app.urls. This can be useful for generating navigation menus or sitemaps dynamically.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import app, ui\n\n@ui.page('/')\ndef index():\n    for url in app.urls:\n        ui.link(url, target=url)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Data Tables with Quasar QTable in NiceGUI\nDESCRIPTION: Demonstrates how to create a data table using ui.table, which is based on Quasar's QTable component. The example defines columns with various properties and populates the table with row data.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\ncolumns = [\n    {'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'},\n    {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True},\n]\nrows = [\n    {'name': 'Alice', 'age': 18},\n    {'name': 'Bob', 'age': 21},\n    {'name': 'Carol'},\n]\nui.table(columns=columns, rows=rows, row_key='name')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: PyInstaller Build Script for NiceGUI Applications\nDESCRIPTION: A Python script to build a NiceGUI application into a single executable file using PyInstaller, with proper inclusion of the NiceGUI package.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport subprocess\nfrom pathlib import Path\nimport nicegui\n\ncmd = [\n    'python',\n    '-m', 'PyInstaller',\n    'main.py', # your main file with ui.run()\n    '--name', 'myapp', # name of your app\n    '--onefile',\n    #'--windowed', # prevent console appearing, only use with ui.run(native=True, ...)\n    '--add-data', f'{Path(nicegui.__file__).parent}{os.pathsep}nicegui'\n]\nsubprocess.call(cmd)\n```\n\n----------------------------------------\n\nTITLE: Integrating Matplotlib Pyplot in NiceGUI\nDESCRIPTION: Demonstrates how to integrate Matplotlib plots within NiceGUI using the ui.pyplot context. The example creates a simple plot of a damped cosine function.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom nicegui import ui\n\nwith ui.pyplot(figsize=(3, 2)):\n    x = np.linspace(0.0, 5.0)\n    y = np.cos(2 * np.pi * x) * np.exp(-x)\n    plt.plot(x, y, '-')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for NiceGUI\nDESCRIPTION: Provides a Docker Compose configuration for deploying a NiceGUI application with proper user permissions and volume mounting.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\napp:\n    image: zauberzeug/nicegui:latest\n    restart: always\n    ports:\n        - 80:8080\n    environment:\n        - PUID=1000 # change this to your user id\n        - PGID=1000 # change this to your group id\n    volumes:\n        - ./:/app/\n```\n\n----------------------------------------\n\nTITLE: Styling UI Elements in NiceGUI\nDESCRIPTION: Demonstrates different ways to style UI elements in NiceGUI using Quasar props, Tailwind CSS classes, and custom CSS styles. The example shows styling applied to radio buttons, a button, and a label.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.radio(['x', 'y', 'z'], value='x').props('inline color=green')\nui.button(icon='touch_app').props('outline round').classes('shadow-lg')\nui.label('Stylish!').style('color: #6E93D6; font-size: 200%; font-weight: 300')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Deploying NiceGUI Application\nDESCRIPTION: Shows how to deploy a NiceGUI application using Docker, mapping ports and mounting the application directory.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --restart always \\\n  -p 80:8080 \\\n  -e PUID=$(id -u) \\\n  -e PGID=$(id -g) \\\n  -v $(pwd)/:/app/ \\\n  zauberzeug/nicegui:latest\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with NiceGUI\nDESCRIPTION: Shows how to use Tailwind CSS classes in NiceGUI with its fluent interface for auto-completion. The example demonstrates different ways to apply Tailwind styles, including method chaining, passing multiple classes, and creating reusable style objects.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import Tailwind, ui\n\nui.label('Label A').tailwind.font_weight('extrabold').text_color('blue-600').background_color('orange-200')\nui.label('Label B').tailwind('drop-shadow', 'font-bold', 'text-green-600')\n\nred_style = Tailwind().text_color('red-600').font_weight('bold')\nlabel_c = ui.label('Label C')\nred_style.apply(label_c)\nui.label('Label D').tailwind(red_style)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Triggering File Downloads in NiceGUI\nDESCRIPTION: Shows how to use the ui.download function to initiate file downloads in the browser. This simple example downloads the NiceGUI logo when a button is clicked.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.button('NiceGUI Logo', on_click=lambda: ui.download('https://nicegui.io/logo.png'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Mode in NiceGUI\nDESCRIPTION: Demonstrates how to run a NiceGUI application in native mode with custom window settings and how to manipulate the window programmatically.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import app, ui\n\napp.native.window_args['resizable'] = False\napp.native.start_args['debug'] = True\n\nui.label('app running in native mode')\nui.button('enlarge', on_click=lambda: app.native.main_window.resize(1000, 700))\n\nui.run(native=True, window_size=(400, 300), fullscreen=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying Syntax-Highlighted Code in NiceGUI\nDESCRIPTION: Demonstrates how to display code blocks with syntax highlighting in NiceGUI using the code element. The example shows Python code with proper formatting and styling.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.code('''\n    from nicegui import ui\n\n    ui.label('Code inception!')\n\n    ui.run()\n''').classes('w-full')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Using Query Selectors in NiceGUI\nDESCRIPTION: Demonstrates how to use query selectors in NiceGUI to manipulate elements like the document body. The example shows how to change the background color of the page when buttons are clicked.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\ndef set_background(color: str) -> None:\n    ui.query('body').style(f'background-color: {color}')\n\nui.button('Blue', on_click=lambda: set_background('#ddeeff'))\nui.button('Orange', on_click=lambda: set_background('#ffeedd'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Timelines with Quasar QTimeline in NiceGUI\nDESCRIPTION: Shows how to create timeline displays using NiceGUI's timeline and timeline_entry components based on Quasar's QTimeline. The example displays the development history of NiceGUI with dates, titles, and descriptions.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.timeline(side='right'):\n    ui.timeline_entry('Rodja and Falko start working on NiceGUI.',\n                      title='Initial commit',\n                      subtitle='May 07, 2021')\n    ui.timeline_entry('The first PyPI package is released.',\n                      title='Release of 0.1',\n                      subtitle='May 14, 2021')\n    ui.timeline_entry('Large parts are rewritten to remove JustPy '\n                      'and to upgrade to Vue 3 and Quasar 2.',\n                      title='Release of 1.0',\n                      subtitle='December 15, 2022',\n                      icon='rocket')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring NiceGUI with ui.run\nDESCRIPTION: Shows how to customize the NiceGUI application title using the ui.run function.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.label('page with custom title')\n\nui.run(title='My App')\n```\n\n----------------------------------------\n\nTITLE: Creating Expandable Sections with Quasar QExpansionItem in NiceGUI\nDESCRIPTION: Shows how to create expandable content sections using NiceGUI's expansion component based on Quasar's QExpansionItem. The example demonstrates a simple expandable panel with a label inside.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.expansion('Expand!', icon='work').classes('w-full'):\n    ui.label('inside the expansion')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Color Themes in NiceGUI\nDESCRIPTION: Shows how to set the main colors used by the Quasar Framework in NiceGUI, such as primary, secondary, and accent colors. The example provides buttons to switch between default colors and a custom gray theme.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.button('Default', on_click=lambda: ui.colors())\nui.button('Gray', on_click=lambda: ui.colors(primary='#555'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Video with Event Handling in NiceGUI\nDESCRIPTION: Shows how to implement a video player using ui.video component with event handling. The example displays a notification when video playback is completed.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nv = ui.video('https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/360/Big_Buck_Bunny_360_10s_1MB.mp4')\nv.on('ended', lambda _: ui.notify('Video playback completed'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode in NiceGUI\nDESCRIPTION: Demonstrates how to enable, disable, or toggle dark mode in NiceGUI. The example shows buttons to switch between dark and light modes using the dark_mode component.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\ndark = ui.dark_mode()\nui.label('Switch mode:')\nui.button('Dark', on_click=dark.enable)\nui.button('Light', on_click=dark.disable)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Programmatically Shutting Down NiceGUI Server\nDESCRIPTION: Demonstrates how to programmatically stop the NiceGUI server using app.shutdown. This functionality is only available when automatic reloading is disabled using the reload=False parameter in ui.run().\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import app, ui\n\nui.button('shutdown', on_click=app.shutdown)\n\nui.run(reload=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation in NiceGUI with Quasar QTabs\nDESCRIPTION: Shows how to create tabbed interfaces using NiceGUI's tabs, tab, tab_panels, and tab_panel components based on Quasar's QTabs and QTabPanels. The example creates a simple two-tab interface with different content in each tab.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.tabs().classes('w-full') as tabs:\n    one = ui.tab('One')\n    two = ui.tab('Two')\nwith ui.tab_panels(tabs, value=two).classes('w-full'):\n    with ui.tab_panel(one):\n        ui.label('First tab')\n    with ui.tab_panel(two):\n        ui.label('Second tab')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Using Linear Progress Bars in NiceGUI\nDESCRIPTION: Shows how to implement a linear progress bar using ui.linear_progress, which wraps Quasar's QLinearProgress component. The example binds the progress value to a slider for interactive control.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nslider = ui.slider(min=0, max=1, step=0.01, value=0.5)\nui.linear_progress().bind_value_from(slider, 'value')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Carousel with NiceGUI\nDESCRIPTION: Demonstrates how to create a carousel component using NiceGUI, which is based on Quasar's QCarousel. The example shows how to add multiple slides with images, configure animation, arrows, and navigation controls.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.carousel(animated=True, arrows=True, navigation=True).props('height=180px'):\n    with ui.carousel_slide().classes('p-0'):\n        ui.image('https://picsum.photos/id/30/270/180').classes('w-[270px]')\n    with ui.carousel_slide().classes('p-0'):\n        ui.image('https://picsum.photos/id/31/270/180').classes('w-[270px]')\n    with ui.carousel_slide().classes('p-0'):\n        ui.image('https://picsum.photos/id/32/270/180').classes('w-[270px]')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Progress Indicators in NiceGUI\nDESCRIPTION: Demonstrates how to use circular progress indicators with ui.circular_progress, which wraps Quasar's QCircularProgress component. The example binds the progress value to a slider for interactive control.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nslider = ui.slider(min=0, max=1, step=0.01, value=0.5)\nui.circular_progress().bind_value_from(slider, 'value')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Clearing and Removing Elements from Containers in NiceGUI\nDESCRIPTION: Demonstrates how to manipulate container contents by adding, removing, or clearing elements. The example shows a row container with buttons to add icons, remove individual elements, or clear the entire container.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\ncontainer = ui.row()\n\ndef add_face():\n    with container:\n        ui.icon('face')\nadd_face()\n\nui.button('Add', on_click=add_face)\nui.button('Remove', on_click=lambda: container.remove(0) if list(container) else None)\nui.button('Clear', on_click=container.clear)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Spinners in NiceGUI\nDESCRIPTION: Shows how to implement loading spinners using ui.spinner, which is based on Quasar's QSpinner component. The example demonstrates different spinner types, sizes, and colors.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.row():\n    ui.spinner(size='lg')\n    ui.spinner('audio', size='lg', color='green')\n    ui.spinner('dots', size='lg', color='red')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Resizable Split Layouts with Quasar QSplitter in NiceGUI\nDESCRIPTION: Demonstrates how to create resizable split layouts using NiceGUI's splitter component based on Quasar's QSplitter. The example creates a horizontal split with content on both sides.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.splitter() as splitter:\n    with splitter.before:\n        ui.label('This is some content on the left hand side.').classes('mr-2')\n    with splitter.after:\n        ui.label('This is some content on the right hand side.').classes('ml-2')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Displaying Images in NiceGUI\nDESCRIPTION: Shows how to display an image using NiceGUI's ui.image component, which is based on Quasar's QImg component. The example displays an image from an external URL.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.image('https://picsum.photos/id/377/640/360')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing WYSIWYG Editors in NiceGUI with Quasar QEditor\nDESCRIPTION: Shows how to use NiceGUI's editor component based on Quasar's QEditor to create a WYSIWYG (What You See Is What You Get) editor. The example creates an editor and binds its HTML content to a markdown element.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\neditor = ui.editor(placeholder='Type something here')\nui.markdown().bind_content_from(editor, 'value',\n                                backward=lambda v: f'HTML code:\\n```\\n{v}\\n```')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Captions and Overlays to Images in NiceGUI\nDESCRIPTION: Demonstrates how to enhance images with captions and SVG overlays. The example shows two techniques: adding a text caption positioned at the bottom of an image and overlaying an SVG graphic on another image.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.image('https://picsum.photos/id/29/640/360'):\n    ui.label('Nice!').classes('absolute-bottom text-subtitle2 text-center')\n\nwith ui.image('https://cdn.stocksnap.io/img-thumbs/960w/airplane-sky_DYPWDEEILG.jpg'):\n    ui.html('''\n        <svg viewBox=\"0 0 960 638\" width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"445\" cy=\"300\" r=\"100\" fill=\"none\" stroke=\"red\" stroke-width=\"20\" />\n        </svg>\n    ''').classes('bg-transparent')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Menus with NiceGUI\nDESCRIPTION: Shows how to create interactive dropdown menus using NiceGUI's menu component, which is based on Quasar's QMenu. The example demonstrates how to create menu items with different click behaviors and a separator.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.row().classes('w-full items-center'):\n    result = ui.label().classes('mr-auto')\n    with ui.button(icon='menu'):\n        with ui.menu() as menu:\n            ui.menu_item('Menu item 1', lambda: result.set_text('Selected item 1'))\n            ui.menu_item('Menu item 2', lambda: result.set_text('Selected item 2'))\n            ui.menu_item('Menu item 3 (keep open)',\n                         lambda: result.set_text('Selected item 3'), auto_close=False)\n            ui.separator()\n            ui.menu_item('Close', on_click=menu.close)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Separators in NiceGUI with Quasar QSeparator\nDESCRIPTION: Shows how to use NiceGUI's separator component based on Quasar's QSeparator to create visual dividers between content. The example places a separator between two labels.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.label('text above')\nui.separator()\nui.label('text below')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications in NiceGUI\nDESCRIPTION: Shows how to display notifications on the screen using NiceGUI's notify function. The example creates a button that displays a notification with a custom close button when clicked.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.button('Say hi!', on_click=lambda: ui.notify('Hi!', close_button='OK'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Playback with Event Handling in NiceGUI\nDESCRIPTION: Demonstrates how to use the ui.audio component to create an audio player with event handling. The example includes an event listener for playback completion and buttons to toggle audio muting.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\na = ui.audio('https://cdn.pixabay.com/download/audio/2022/02/22/audio_d1718ab41b.mp3')\na.on('ended', lambda _: ui.notify('Audio playback completed'))\n\nui.button(on_click=lambda: a.props('muted'), icon='volume_off').props('outline')\nui.button(on_click=lambda: a.props(remove='muted'), icon='volume_up').props('outline')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layouts in NiceGUI\nDESCRIPTION: Shows how to use NiceGUI's grid component to arrange elements in a grid format. The example creates a two-column grid displaying name-value pairs for personal information.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.grid(columns=2):\n    ui.label('Name:')\n    ui.label('Tom')\n\n    ui.label('Age:')\n    ui.label('42')\n\n    ui.label('Height:')\n    ui.label('1.80m')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Scrollable Areas in NiceGUI\nDESCRIPTION: Demonstrates how to create scrollable content containers using NiceGUI's scroll_area component based on Quasar's ScrollArea. The example compares scrollable and non-scrollable containers with long text content.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.row():\n    with ui.card().classes('w-32 h-32'):\n        with ui.scroll_area():\n            ui.label('I scroll. ' * 20)\n    with ui.card().classes('w-32 h-32'):\n        ui.label('I will not scroll. ' * 10)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Sample NiceGUI Application for PyInstaller Packaging\nDESCRIPTION: A minimal NiceGUI application that can be packaged with PyInstaller, using native_mode to find an open port dynamically.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import native_mode, ui\n\nui.label('Hello from PyInstaller')\n\nui.run(reload=False, port=native_mode.find_open_port())\n```\n\n----------------------------------------\n\nTITLE: Creating Card Layouts with Quasar QCard in NiceGUI\nDESCRIPTION: Demonstrates how to use NiceGUI's card component based on Quasar's QCard to create containers with shadow effects. The example shows how to create a card with an image and text section using the tight method.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.card().tight():\n    ui.image('https://picsum.photos/id/684/640/360')\n    with ui.card_section():\n        ui.label('Lorem ipsum dolor sit amet, consectetur adipiscing elit, ...')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to UI Elements in NiceGUI\nDESCRIPTION: Demonstrates how to add tooltips to UI elements in NiceGUI. The example shows both a simple tooltip added directly to a label and a more customized tooltip with styling applied to a button.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.label('Tooltips...').tooltip('...are shown on mouse over')\nwith ui.button(icon='thumb_up'):\n    ui.tooltip('I like this').classes('bg-green')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Interactive Buttons with Notifications\nDESCRIPTION: Demonstrates creating interactive buttons with click handlers and notifications.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.button('Click me!', on_click=lambda: ui.notify('You clicked me!'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Row Layouts in NiceGUI\nDESCRIPTION: Demonstrates how to use NiceGUI's row component to arrange elements horizontally. The example shows three labels placed side by side in a row container.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.row():\n    ui.label('label 1')\n    ui.label('label 2')\n    ui.label('label 3')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Column Layouts in NiceGUI\nDESCRIPTION: Shows how to use NiceGUI's column component to arrange elements vertically. The example demonstrates creating a simple column with three labels stacked on top of each other.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nwith ui.column():\n    ui.label('label 1')\n    ui.label('label 2')\n    ui.label('label 3')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Graphics with NiceGUI HTML Element\nDESCRIPTION: Demonstrates how to use ui.html to add Scalable Vector Graphics (SVG) in a NiceGUI application. The code creates a simple smiley face using SVG markup.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\ncontent = '''\n    <svg viewBox=\"0 0 200 200\" width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"100\" cy=\"100\" r=\"78\" fill=\"#ffde34\" stroke=\"black\" stroke-width=\"3\" />\n    <circle cx=\"80\" cy=\"85\" r=\"8\" />\n    <circle cx=\"120\" cy=\"85\" r=\"8\" />\n    <path d=\"m60,120 C75,150 125,150 140,120\" style=\"fill:none; stroke:black; stroke-width:8; stroke-linecap:round\" />\n    </svg>'''\nui.html(content)\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in NiceGUI\nDESCRIPTION: Shows how to access configuration settings like the Markdown content cache size, which can be configured through environment variables.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\nfrom nicegui.elements import markdown\n\nui.label(f'Markdown content cache size is {markdown.prepare_content.cache_info().maxsize}')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Icons using Quasar Components\nDESCRIPTION: Shows how to implement icons using NiceGUI's icon component which is based on Quasar's QIcon.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.icon('thumb_up', color='primary').classes('text-5xl')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Avatars with NiceGUI\nDESCRIPTION: Example of creating avatar elements using NiceGUI's avatar component based on Quasar's QAvatar.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.avatar('favorite_border', text_color='grey-11', square=True)\nui.avatar('img:https://nicegui.io/logo_square.png', color='blue-2')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperlinks in NiceGUI\nDESCRIPTION: Shows how to create hyperlinks using NiceGUI's link component.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.link('NiceGUI on GitHub', 'https://github.com/zauberzeug/nicegui')\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Labels with NiceGUI\nDESCRIPTION: Demonstrates how to create and display a basic text label using NiceGUI's label component.\nSOURCE: https://github.com/syejing/nicegui-reference-cn/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.label('some label')\n\nui.run()\n```"
  }
]