[
  {
    "owner": "artifexsoftware",
    "repo": "mupdf.js",
    "content": "TITLE: Counting Pages in PDF - MuPDF.js - JavaScript\nDESCRIPTION: Retrieves the total number of pages in the current PDF document using 'document.countPages'. No input parameters are needed; returns the page count as a number. Dependencies: open PDF document. Output: numeric total page count.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar numPages = document.countPages();\n```\n\n----------------------------------------\n\nTITLE: Converting Page to Image\nDESCRIPTION: Demonstrates converting a PDF page to a pixmap image and then to base64-encoded PNG format.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet pixmap = page.toPixmap(mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB, false, true)\nlet pngImage = pixmap.asPNG()\nlet base64Image = Buffer.from(pngImage, 'binary').toString('base64')\n```\n\n----------------------------------------\n\nTITLE: Loading a PDF Document with mupdf/tasks (JavaScript)\nDESCRIPTION: This updated snippet shows how to load a PDF document with the mupdf.js API using the loadPDF function from mupdf/tasks. It eliminates the need for library initialization. The input file is converted into a Uint8Array before being passed to loadPDF, which returns a Document instance. This approach improves clarity and reduces setup overhead, supporting both browser and Node.js data types.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/migration/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadPDF } from \"mupdf/tasks\";\n\nasync function handleSomePdf(file) {\n  const buf = await file.arrayBuffer();\n  const arrayBuf = new Uint8Array(buf);\n  const doc = loadPDF(arrayBuf); // Returns a Document instance\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Text from All PDF Pages - MuPDF.js - JavaScript\nDESCRIPTION: Iterates over all pages of a PDF, converts each to a StructuredText object, serializes to JSON, and prints to console. Uses document.countPages(), document.loadPage(), and page.toStructuredText().asJSON(). Input: none; Output: JSON strings per page. Requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0\nwhile (i < document.countPages()) {\n    const page = document.loadPage(i)\n    const json = page.toStructuredText(\"preserve-whitespace\").asJSON()\n    console.log(`json=${json}`)\n    i++\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MuPDF.js Installation with Node\nDESCRIPTION: A simple JavaScript test file to verify that MuPDF.js has been properly installed via NPM. This code imports the MuPDF module and logs it to the console.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as mupdf from \"mupdf\"\nconsole.log(mupdf)\n```\n\n----------------------------------------\n\nTITLE: Splitting a PDF Document by Pages - MuPDF.js - JavaScript\nDESCRIPTION: Splits a PDF into multiple documents using document.split with an array of page indices. Returns new document instances representing the split results. Input: array of integers; Output: array of documents. Assumes a multi-page input document.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet documents = document.split([0,2,3])\n```\n\n----------------------------------------\n\nTITLE: Adding Text Annotations with MuPDF.js - JavaScript\nDESCRIPTION: This snippet illustrates loading a PDF document and programmatically creating several text annotation types—Text (note), FreeText, and Caret—using the MuPDF.js API in JavaScript. The code demonstrates setting contents, customizing appearance (including font, size, and color for FreeText), positioning via setRect, updating the annotations, and saving the changes to a new PDF file. Required dependencies include the MuPDF.js library and access to the file system; inputs are a PDF file and annotation properties, and the output is a new PDF file with the new annotations. FreeText uses setDefaultAppearance, and Text/Caret annotations can accept single-point rectangles since an icon is being positioned.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/text/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\nlet document = mupdfjs.PDFDocument.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\n\n// note\nlet note = page.createAnnotation(\"Text\")\nnote.setContents(\"I'm a note!\")\nnote.setRect([50,50,0,0])\n\n// free text\nlet freeText = page.createAnnotation(\"FreeText\")\nfreeText.setContents(\"I'm free text!\")\nfreeText.setDefaultAppearance(\"Helv\", 16, [0,1,0]);\nfreeText.setRect([0,0,200,50])\n\n// caret\nlet caret = page.createAnnotation(\"Caret\")\ncaret.setContents(\"I'm a caret!\")\ncaret.setRect([100,50,0,0])\n\nnote.update()\nfreeText.update()\ncaret.update()\n\n// Save the changes to a new file.\nfs.writeFileSync(\"output-text.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Metadata - MuPDF.js - JavaScript\nDESCRIPTION: Sets a metadata field (here, Author) for a PDF document using document.setMetaData. Accepts a metadata key and value as strings. Requires write access to the document. Input: key and value strings; Output: typically undefined.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.setMetaData(\"info:Author\", \"Jane Doe\")\n```\n\n----------------------------------------\n\nTITLE: Saving Extracted Images from PDF Pages - MuPDF.js - JavaScript\nDESCRIPTION: Iterates through all pages and saves each extracted image as a JPEG file to disk. Uses page.getImages(), image.toPixmap().asJPEG(), and fs.writeFileSync. Requires Node.js's fs module and MuPDF.js Buffer/image APIs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0\nwhile (i < document.countPages()) {\n    const page = document.loadPage(i)\n    let imageStack = page.getImages()\n\n    for (var j in imageStack) {\n        var image = imageStack[j].image;\n        var pixmap = image.toPixmap();\n        let raster = pixmap.asJPEG(80);\n        fs.writeFileSync('page-'+i+'-image-'+j+'.jpg', raster);\n    }\n\n    i++\n}\n```\n\n----------------------------------------\n\nTITLE: Loading PDF Outline (Bookmarks) - MuPDF.js - JavaScript\nDESCRIPTION: Extracts the document outline ('bookmarks'/table of contents) as an array of objects via 'document.loadOutline'. Each object includes 'title', 'page', and optional 'down' (sub-headings array). No input required; returns an OutlineItem array. Output: structured hierarchical outline data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar outline = document.loadOutline();\n```\n\n----------------------------------------\n\nTITLE: Creating Blank PDF Document in JavaScript\nDESCRIPTION: Creates a new one-page PDFDocument with default A4 size (595x842) if no dimensions are specified.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet document = mupdfjs.PDFDocument.createBlankDocument()\n```\n\n----------------------------------------\n\nTITLE: Searching for Text in a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Searches a page for a specified text phrase using page.search, returning an array of result rectangles (QuadPoints per PDF spec). Input: search string; Output: array of results, each a series of coordinates. Requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet results = page.search(\"my search phrase\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating PDF Documents - MuPDF.js - JavaScript\nDESCRIPTION: Demonstrates how to authenticate a PDF document using the MuPDF.js 'document.authenticate' method. Requires an initialized document object. The method accepts a password string and returns a bitfield value indicating the authentication result: failed (0), no password needed (1), user password valid (2), owner password valid (4), or both valid (6). The main parameter is the password, and the output is a numeric authentication result.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar auth = document.authenticate(\"abracadabra\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDF Metadata - MuPDF.js - JavaScript\nDESCRIPTION: Fetches various metadata fields (format, modification date, author) from a PDF using the document.getMetaData method. Each call takes a metadata field key as a string and returns the corresponding value. Requires an open document. Input: key string; Output: property value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst format = document.getMetaData(\"format\")\nconst modificationDate = document.getMetaData(\"info:ModDate\")\nconst author = document.getMetaData(\"info:Author\")\n```\n\n----------------------------------------\n\nTITLE: Loading a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Loads a specific page from a PDF by its zero-based index using document.loadPage. The method takes the page index (integer) as input and returns a page instance. Requires an open document. Input: page index; Output: page object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// load the 1st page of the document\nlet page = document.loadPage(0)\n```\n\n----------------------------------------\n\nTITLE: Writing PDFObject Content and Streams - MuPDF.js JavaScript\nDESCRIPTION: Shows updating an indirect reference object using writeObject(), writeStream(), and writeRawStream(). writeObject replaces the referenced object, while writeStream replaces the stream with automatic updates to relevant metadata fields. writeRawStream assumes the input is pre-compressed data and updates length only.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npdfObj.writeObject(obj);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npdfObj.writeStream(buffer);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npdfObj.writeRawStream(buffer);\n```\n\n----------------------------------------\n\nTITLE: Deleting Embedded File from PDF Document in JavaScript\nDESCRIPTION: Removes an embedded file from the PDF document by specifying its filename.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npdfDocument.deleteEmbeddedFile(\"test.txt\");\n```\n\n----------------------------------------\n\nTITLE: Adding and Customizing Square Shape Annotations with MuPDF.js in JavaScript\nDESCRIPTION: Shows how to insert a 'Square' annotation into a PDF using MuPDF.js, set its bounding rectangle, color, fill, border effects, and opacity. Requires 'fs' and MuPDF.js as dependencies. Developers specify the rectangle ([x0, y0, x1, y1]), set stroke and fill colors, configure border styles such as effects and intensity, and write the annotated PDF back to disk. Useful for highlighting regions with visually distinct shapes; customization options control shape appearance and transparency.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/drawing-and-shapes/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\n\nlet document = mupdf.Document.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Square\")\nannotation.setRect([100, 100, 300, 300])\nannotation.setColor([0, 0, 0])\nannotation.setInteriorColor([0.5, 0, 0])\nannotation.setBorderEffect(\"Cloudy\")\nannotation.setBorderEffectIntensity(0.3)\nannotation.setBorderWidth(5)\nannotation.setOpacity(0.5)\n\nfs.writeFileSync(\"output-circle.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n\n```\n\n----------------------------------------\n\nTITLE: Merging PDF Documents & Adding Text - MuPDF.js - JavaScript\nDESCRIPTION: Creates a blank PDF document, inserts text onto its first page, and then merges it into another PDF at a specified location and rotation. Uses mupdfjs.PDFDocument.createBlankDocument(), insertText, and document.merge methods. Input: none; Output: modifies the original document. Requires MuPDF.js and appropriate APIs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// create a blank document and add some text\nlet sourcePDF = mupdfjs.PDFDocument.createBlankDocument()\nlet page = sourcPDF.loadPage(0)\npage.insertText(\"HELLO WORLD\", \n                    [0,0], \n                    \"Times-Roman\", \n                    20, \n                    {strokeColor:[0,0,0,1], fillColor:[1,0,0,0.75], strokeThickness:0.5})\n// now merge this document onto page 2 of our document and rotate it by 90 degrees\ndocument.merge(sourcePDF, 0, -1, 1, 90);\n```\n\n----------------------------------------\n\nTITLE: Opening PDF Document from File in JavaScript\nDESCRIPTION: Opens a PDF document from a file buffer, specifying the file type as 'application/pdf'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet document = mupdfjs.PDFDocument.openDocument(fs.readFileSync(\"test.pdf\"),\n                                                        \"application/pdf\")\n```\n\n----------------------------------------\n\nTITLE: Creating File Attachment Annotation in PDF using MuPDF.js\nDESCRIPTION: This code demonstrates how to create a file attachment annotation in a PDF document. It loads a file, creates an annotation, sets its position, creates a file specification object, and associates it with the annotation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/embedding-files/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet embedMe = fs.readFileSync(\"embedMe.doc\")\nlet document = mupdf.Document.openDocument(fs.readFileSync(\"test.pdf\"), \"application/pdf\")\n\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"FileAttachment\")\n\nannotation.setRect([50,50,100,100])\n\nlet fileSpecObject = document.addEmbeddedFile(\"embedMe.doc\",\n                                            \"application/msword\",\n                                            embedMe,\n                                            new Date(),\n                                            new Date(),\n                                            false)\n\nannotation.setFileSpec(fileSpecObject)\n\nfs.writeFileSync(\"output.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n```\n\n----------------------------------------\n\nTITLE: Converting a PDF Page to an Image with mupdf/tasks (JavaScript)\nDESCRIPTION: This snippet shows the use of the new functions from mupdf/tasks for rendering a PDF page as a PNG, SVG, or HTML string. Without requiring explicit initialization, it imports loadPDF, drawPageAsPNG, drawPageAsSVG, and drawPageAsHTML. The code takes a File input, converts it, loads the document, and then calls each render function with the page number and optional DPI. Each rendering function outputs a string suitable for further processing or display.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/migration/index.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  loadPDF,\n  drawPageAsPNG,\n  drawPageAsSVG,\n  drawPageAsHTML\n} from \"mupdf/tasks\";\n\nasync function handleSomePdf(file) {\n  const buf = await file.arrayBuffer();\n  const arrayBuf = new Uint8Array(buf);\n  const doc = loadPDF(arrayBuf);\n\n  // Each of these returns a string:\n\n  const png = drawPageAsPNG(doc, 1, 300);\n  const svg = drawPageAsSVG(doc, 1);\n  const html = drawPageAsHTML(doc, 1);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting PDF Page Label - MuPDF.js - JavaScript\nDESCRIPTION: Removes any associated page label from a given page index using 'pdfDocument.deletePageLabels'. Parameter: index (number) of the target page. Output: void. Used to clean up or reset custom label assignments.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfDocument.deletePageLabels(0);\n```\n\n----------------------------------------\n\nTITLE: Checking PDF Password Protection in JavaScript\nDESCRIPTION: Determines if a PDF document requires a password to open.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar needsPassword = document.needsPassword();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Quadding (Justification) with mupdf.js - JavaScript\nDESCRIPTION: Obtains the text justification (quadding) of an annotation with getQuadding(), returning 0 for left, 1 for center, or 2 for right. Mainly used for text field annotations or custom appearance logic.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar quadding = annotation.getQuadding();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Opacity with mupdf.js - JavaScript\nDESCRIPTION: Obtains the annotation's opacity as a number (typically between 0 and 1) using getOpacity(). Useful for blending annotation overlays or reconstructing PDF transparency effects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar opacity = annotation.getOpacity();\n```\n\n----------------------------------------\n\nTITLE: Extracting Basic Page Text\nDESCRIPTION: Shows how to extract plain text content from a PDF page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = page.getText()\nconsole.log(`text=${text}`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDF Metadata - MuPDF.js - JavaScript\nDESCRIPTION: Illustrates fetching metadata properties from a PDF document using 'document.getMetaData'. Supported keys include 'format', 'encryption', and information fields such as 'info:ModDate' and 'info:Author'. Returns a string with the corresponding metadata value. Dependencies: valid document object. Inputs: key string (metadata field). Outputs: corresponding metadata value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar format = document.getMetaData(\"format\");\nvar modificationDate = doc.getMetaData(\"info:ModDate\");\nvar author = doc.getMetaData(\"info:Author\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Pixmap with RGB ColorSpace in JavaScript\nDESCRIPTION: Creates a new Pixmap object with RGB colorspace, specified dimensions, and optional alpha channel. This example creates a 100x100 RGB pixmap with alpha channel enabled.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixmap = new mupdfjs.Pixmap(mupdfjs.ColorSpace.DeviceRGB, [0,0,100,100], true);\n```\n\n----------------------------------------\n\nTITLE: Deleting an Existing PDF Object - MuPDF.js - JavaScript\nDESCRIPTION: Removes a specified PDF object from the document using 'pdfDocument.deleteObject'. Accepts either a PDFObject or an object number. This operation allows for low-level cleanup or structure modification. Output: void.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfDocument.deleteObject(obj);\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Text from a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Extracts the structured text from a PDF page by invoking toStructuredText with options controlling ligature, whitespace, span, image, and Unicode handling. Requires a PDFPage instance (page). Returns a StructuredText object. The options parameter is a comma-separated string controlling extraction features.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet sText = page.toStructuredText(\"preserve-whitespace,ignore-actualtext\");\n```\n\n----------------------------------------\n\nTITLE: Adding an Annotation by Type and Location with MuPDF.js in JavaScript\nDESCRIPTION: Creates an annotation of a specified type at defined coordinates with optional author and contents. The addAnnotation method requires annotation type, metrics object (x, y, width, height), and optional author and comment text. Returns a PDFAnnotation object for further manipulation. Ensure annotation type is supported by CreatableAnnotationType.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet myNote = page.addAnnotation(\"Text\", {x:100, y:200, width:300, height:50}, null, \"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a PDF Redaction in JavaScript with MuPDF.js\nDESCRIPTION: This snippet demonstrates how to create a redaction annotation on a PDF page, set its position and dimensions, and then apply the redaction with the option to paint the redacted area in black. The modified document is saved as a new file.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/redactions/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\n\nlet document = mupdf.Document.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Redact\")\nannotation.setRect([40, 40, 300, 20])\nannotation.applyRedaction(true)\n\nfs.writeFileSync(\"output-redact.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n```\n\n----------------------------------------\n\nTITLE: Applying Redaction with Image Removal - MuPDF.js - JavaScript\nDESCRIPTION: This JavaScript snippet showcases applying a redaction annotation using MuPDF.js with the option to remove entire images under the redaction region. It calls applyRedaction on an annotation with true to add black boxes and the REDACT_IMAGE_REMOVE constant to wipe out images. This is useful for thoroughly sanitizing sensitive visual data; it requires the annotation object and the MuPDF.js environment. Inputs are the black box boolean and image redaction mode, output is an updated, securely redacted annotation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nannotation.applyRedaction(true, mupdfjs.PDFPage.REDACT_IMAGE_REMOVE);\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF Pages to PNG using MuPDF.js in Node.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use MuPDF.js and the Node.js filesystem module to load a PDF, iterate through its pages, render each page as a PNG at 96 DPI, and save the output to disk. Dependencies are 'mupdf' and 'node:fs'. Inputs include an 'input.pdf' file and the script expects ESM module syntax (e.g., .mjs extension or type=module in package config). Outputs are PNG images for each page named sequentially as 'pageN.png'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/INSTALL.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from \\\"node:fs\\\"\\nimport * as mupdf from \\\"mupdf\\\"\\n\\nvar buffer = fs.readFileSync(\\\"input.pdf\\\")\\n\\nvar doc = mupdf.Document.openDocument(buffer, \\\"application/pdf\\\")\\nvar n = doc.countPages()\\nfor (var i = 0; i < n; ++i) {\\n\\tconsole.log(`Rendering page ${i+1} / ${n}.`)\\n\\tvar page = doc.loadPage(i)\\n\\tvar pixmap = page.toPixmap(mupdf.Matrix.scale(96 / 72, 96 / 72), mupdf.ColorSpace.DeviceRGB)\\n\\tfs.writeFileSync(`page${i+1}.png`, pixmap.asPNG())\\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Freehand Ink Annotations with MuPDF.js in JavaScript\nDESCRIPTION: Demonstrates how to add a freehand annotation (of type 'Ink') to a PDF using MuPDF.js within a Node.js environment. Dependencies include the 'fs' module for file I/O and the 'mupdf' API for annotation management. The snippet initializes a PDF, loads a page, creates an Ink annotation, sets its ink list to multiple strokes, updates it, and writes the result back to disk. The method setInkList expects nested arrays of points for multiple ink strokes; the output PDF will contain a multi-stroke freehand drawing.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/drawing-and-shapes/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\n\nlet document = mupdf.Document.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Ink\")\n\nannotation.setInkList([\n    [\n        [0,0]\n    ],\n    [\n        [10,10], [20,20], [30,30]\n    ],\n    [\n        [30,30], [55,20], [60,30]\n    ]\n])\n\nannotation.update()\n\nfs.writeFileSync(\"output-ink.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Buffer with ArrayBuffer Data in MuPDF.js JavaScript\nDESCRIPTION: Demonstrates how to create a new Buffer initialized with binary data from an external source, such as a file, using MuPDF.js. Requires both MuPDF.js and an appropriate Node.js buffer or array reading mechanism (such as fs.readFileSync). The Buffer is initialized with contents from an ArrayBuffer or Uint8Array; typical use-case is reading files for further processing.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet buffer = new mupdfjs.Buffer(fs.readFileSync(\"test.pdf\"))\n```\n\n----------------------------------------\n\nTITLE: Saving PDF to Buffer with Options - MuPDF.js - JavaScript\nDESCRIPTION: Serializes the current PDF document into a Buffer using 'pdfDocument.saveToBuffer', supporting a rich set of comma-separated options (e.g., compression, encryption, garbage collection policies). Input: options string. Output: Buffer containing PDF data. Used for custom file export scenarios. See accompanying documentation for all option flags and default values.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar buffer = pdfDocument.saveToBuffer(\"garbage=2,compress=yes,user-password=PASSWORD\")\n```\n\n----------------------------------------\n\nTITLE: Drawing Polygon Annotations (e.g. Triangles) with MuPDF.js in JavaScript\nDESCRIPTION: Demonstrates adding a 'Polygon' annotation (here, a triangle) by specifying vertices, color, and interior fill using MuPDF.js for Node.js. Relies on 'fs' and MuPDF.js dependencies. The snippet opens a PDF, adds a Polygon annotation, sets stroke and fill to blue, appends three vertices to form a triangle, commits the annotation, and writes to a file. Vertices are added via addVertex; all coordinates must be provided in the order of polygonal corners.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/drawing-and-shapes/index.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\n\nlet document = mupdf.Document.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Polygon\")\nannotation.setColor([0, 0, 1])\nannotation.setInteriorColor([0, 0, 1])\nannotation.addVertex([10, 100])\nannotation.addVertex([200, 200])\nannotation.addVertex([30, 300])\nannotation.update()\n\nfs.writeFileSync(\"output-polygon.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n\n```\n\n----------------------------------------\n\nTITLE: Getting File Specification of Annotation in JavaScript\nDESCRIPTION: Retrieves the file specification object of the annotation. Returns a PDFObject.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileSpec = annotation.getFilespec();\n```\n\n----------------------------------------\n\nTITLE: Adding Vertex to Annotation - MuPDF.js JavaScript\nDESCRIPTION: Appends a single [x, y] point as a vertex to the annotation's shape. Used for interactive editing or incremental construction of polygons/polylines.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.addVertex([0,0]);\n```\n\n----------------------------------------\n\nTITLE: Converting a PDF Page to an Image with mupdf-js (JavaScript)\nDESCRIPTION: This snippet demonstrates rendering a PDF page as a PNG, SVG, or HTML string using the mupdf-js library. It initializes the library, loads the PDF, and calls drawPageAsPNG, drawPageAsSVG, and drawPageAsHTML, each of which returns a formatted image string. The function parameters include the document, page number, and, for PNG, the desired DPI. This pattern is essential for exporting visual representations or extracting content in web applications.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/migration/index.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMuPdf } from \"mupdf-js\";\n\nasync function handleSomePdf(file) {\n  const mupdf = await createMuPdf();\n  const buf = await file.arrayBuffer();\n  const arrayBuf = new Uint8Array(buf);\n  const doc = mupdf.load(arrayBuf);\n\n  // Each of these returns a string:\n\n  const png = mupdf.drawPageAsPNG(doc, 1, 300);\n  const svg = mupdf.drawPageAsSVG(doc, 1);\n  const html = mupdf.drawPageAsHTML(doc, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Plain Text from a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Illustrates extracting the unstyled, plain text from a PDF page using the 'getText' method. This requires a 'pdfPage' object and returns a plain string containing the textual content of the page. There are no special dependencies besides the loaded MuPDF.js module; output is a string, with no styling or structure info.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet text = pdfPage.getText();\n```\n\n----------------------------------------\n\nTITLE: Destroying MuPDF.js Objects with destroy() - JavaScript\nDESCRIPTION: Demonstrates how to invoke the destroy() method on MuPDF.js objects (such as page and document) to properly release allocated resources and prevent memory leaks. No additional dependencies are required aside from MuPDF.js. Both page and document are assumed to be valid instances of MuPDF.js classes; their destroy() methods must be called when the object is no longer needed. This is essential for long-lived browser applications or worker threads to avoid excessive memory usage.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/destroy/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npage.destroy()\ndocument.destroy()\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from PDF Pages - MuPDF.js - JavaScript\nDESCRIPTION: Retrieves all images from every page of a PDF by iterating over document pages and calling page.getImages(). Can be used for further processing of images. Input: none; Output: image stack per page; requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0\nwhile (i < document.countPages()) {\n    const page = document.loadPage(i)\n    let imageStack = page.getImages()\n    i++\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Links Using MuPDF.js - JavaScript\nDESCRIPTION: Demonstrates how to retrieve all link annotations from a PDF page in MuPDF.js using the getLinks method. The snippet checks if any links are present, then accesses the first link's bounds, URI, and whether it is external. Depends on a page object from MuPDF.js. Inputs are a valid PDF page; outputs include an array of Link objects or an empty array if none exist.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/links/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet links = page.getLinks()\n\nif (links.length) {\n    let link = links[0]\n    let linkBounds = link.getBounds()\n    let linkURI = link.getURI()\n    let linkIsExternal = link.isExternal()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Images to PDF Page\nDESCRIPTION: Demonstrates how to add an image to a PDF page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet image = new mupdfjs.Image(fs.readFileSync(\"logo.png\"))\npage.insertImage({image:image, name:\"MyLogo\"})\n\nfs.writeFileSync(\"output.pdf\", document.saveToBuffer(\"\").asUint8Array())\n```\n\n----------------------------------------\n\nTITLE: Merging PDF Documents in JavaScript\nDESCRIPTION: Merges another PDF document (sourcePDF) into the current document, inserting it at page 2.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// merge another document (sourcePDF) onto page 2 of our document instance\ndocument.merge(sourcePDF, 0, -1, 1);\n```\n\n----------------------------------------\n\nTITLE: Applying All Redactions on a PDF Page in JavaScript with MuPDF.js\nDESCRIPTION: This code shows how to apply all redaction annotations that exist on a page at once using the page-level applyRedactions method.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/redactions/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npage.applyRedactions()\n```\n\n----------------------------------------\n\nTITLE: Walking Through StructuredText Elements in MuPDF.js in JavaScript\nDESCRIPTION: Shows how to traverse the hierarchical structure of text blocks, lines, and characters in a structured text object. The walker object contains callback methods for each element type encountered.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StructuredText.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar sText = pdfPage.toStructuredText();\nsText.walk({\n    beginLine: function (bbox, wmode, direction) {\n        console.log(\"beginLine\", bbox, wmode, direction);\n    },\n    beginTextBlock: function (bbox) {\n        console.log(\"beginTextBlock\", bbox);\n    },\n    endLine: function () {\n        console.log(\"endLine\");\n    },\n    endTextBlock: function () {\n        console.log(\"endTextBlock\");\n    },\n    onChar: function (utf, origin, font, size, quad) {\n        console.log(\"onChar\", utf, origin, font, size, quad);\n    },\n    onImageBlock: function (bbox, transform, image) {\n        console.log(\"onImageBlock\", bbox, transform, image);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching File to PDF Document in JavaScript\nDESCRIPTION: Attaches a file to the PDF document by providing a name and buffer of data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = \"Test content\";\nconst buffer = new Buffer();\nbuffer.writeLine(content);\npdfDocument.attachFile(\"test.txt\", buffer);\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotation on a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Creates a new annotation of the specified type on a PDF page by calling createAnnotation. The type parameter determines annotation appearance, e.g., 'Text'. Requires a PDFPage instance (pdfPage). Returns a PDFAnnotation object. The annotation must be further configured and saved.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar annot = pdfPage.createAnnotation(\"Text\");\n```\n\n----------------------------------------\n\nTITLE: Getting Popup Rectangle of Annotation in JavaScript\nDESCRIPTION: Retrieves the popup rectangle of the annotation. Returns a Rect object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar popupRect = annotation.getPopup();\n```\n\n----------------------------------------\n\nTITLE: Authenticating a PDF Document - MuPDF.js - JavaScript\nDESCRIPTION: Authenticates a PDF by providing a password via the document.authenticate method. Takes a single string parameter representing the password. Returns a value indicating authentication status based on the MuPDF.js API. Requires a protected document; output varies by API's return value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet auth = document.authenticate(\"abracadabra\")\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Metadata - MuPDF.js - JavaScript\nDESCRIPTION: Demonstrates updating a metadata field in a PDF document using 'document.setMetaData'. Accepts a key and value, where the key specifies the metadata field (e.g., 'info:Author'). Mutates the document in place. Dependencies: writable document object. Inputs: key and value strings. Output: void.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.setMetaData(\"info:Author\", \"My Name\");\n```\n\n----------------------------------------\n\nTITLE: Rendering a PDF Page to a Pixmap with MuPDF.js in JavaScript\nDESCRIPTION: Renders the content of a PDF page to a Pixmap image using specified colorspace, optional alpha channel, extras, usage, and box selection. Requires mupdfjs.Matrix, mupdfjs.ColorSpace, and a PDFPage instance. Returns a Pixmap object. Parameters control output image size, color, presence of annotations, and rendering intent.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixmap = pdfPage.toPixmap(mupdfjs.Matrix.identity,\n                                  mupdfjs.ColorSpace.DeviceRGB,\n                                  true,\n                                  false,\n                                  \"View\",\n                                  \"CropBox\");\n```\n\n----------------------------------------\n\nTITLE: Extracting Hyperlinks from a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Retrieves all link objects from a PDF page as an array. The 'getLinks' method returns an array of Link objects, allowing for link enumeration, overlay, or accessibility tooling. Requires a loaded 'page' instance and MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet links = page.getLinks();\n```\n\n----------------------------------------\n\nTITLE: Getting Widget Bounding Box in JavaScript\nDESCRIPTION: Retrieves the bounding box of the widget as a Rect object, defining its position and size on the page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = widget.getRect();\n```\n\n----------------------------------------\n\nTITLE: Getting All Annotations for All Pages with MuPDF.js (JavaScript)\nDESCRIPTION: This snippet retrieves all annotations for each page of a PDF document using MuPDF.js. By looping over all page indices (from 0 to document.countPages()), it loads each page, fetches its annotations via getAnnotations, and logs both the page and its annotations. Dependencies include an initialized MuPDF.js document object with the countPages and loadPage methods, and console access for logging.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/getting-started/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0\nwhile (i < document.countPages()) {\n    const page = document.loadPage(i)\n    const annots = page.getAnnotations()\n    console.log(`Page=${page}, Annotations=${annots}`)\n    i++\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Pixmap as JPEG in JavaScript\nDESCRIPTION: Converts the pixmap to JPEG format with specified quality (0-100) and returns it as a buffer. Throws an exception if the pixmap has an alpha channel.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = pixmap.asJPEG(80, false);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Redaction Annotation - MuPDF.js - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a redaction annotation on a PDF page using MuPDF.js and then apply that redaction with specific options. It first uses the addRedaction method on a PDFPage instance to annotate a rectangular area, then applies the redaction with control over black box usage and image handling. Dependencies include the MuPDF.js library and a PDFPage instance. The rect parameter specifies the redacted area, and applyRedaction expects a boolean for black box overlay and an integer constant for image redaction. Input is the redaction rectangle and options, output is the modified annotation; the operation is irreversible once applied.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\n// create a redaction annotation\\nlet redactionAnnotation = page.addRedaction(rect)\\n// apply redaction to the annotation with options\\nredactionAnnotation.applyRedaction(true, mupdfjs.PDFPage.REDACT_IMAGE_NONE);\n```\n\n----------------------------------------\n\nTITLE: Deleting Annotations with MuPDF.js (JavaScript)\nDESCRIPTION: This snippet shows how to delete an existing annotation from a PDF page using the delete method of the PDFPage class in MuPDF.js. The method takes the target annotation object as a parameter. Before running this snippet, ensure that the annotation variable references a valid annotation returned by createAnnotation or similar calls, and that the page object is a valid PDFPage instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/getting-started/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npage.delete(annotation)\n```\n\n----------------------------------------\n\nTITLE: Loading a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Demonstrates loading the first page of a PDF document using the loadPage method of a PDFDocument instance. Requires a PDFDocument object (doc). The input page index is zero-based; passing 0 returns the first page as a PDFPage object. Ensure doc is initialized by opening a PDF beforehand.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet page = doc.loadPage(0); // returns the first page of the document\n```\n\n----------------------------------------\n\nTITLE: Deleting Annotations or Objects from a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Deletes a PDFAnnotation, PDFWidget, Link, or specific PDFObject by reference or xref key using the delete method. The snippet uses getAnnotations to retrieve annotation references and removes the first one. Requires a PDFPage instance (page) and valid reference.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet annots = getAnnotations();\npage.delete(annots[0]);\n```\n\n----------------------------------------\n\nTITLE: Clearing Annotation QuadPoints - MuPDF.js JavaScript\nDESCRIPTION: Removes all QuadPoints from the annotation, clearing the areas of influence for text markup or link annotations. No parameters are required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.clearQuadPoints();\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Border Effect - MuPDF.js JavaScript\nDESCRIPTION: Sets the border effect style of a PDF annotation. Accepts a string parameter (such as 'None' or 'Cloudy'). Requires a writable annotation object. Alters the appearance of the border.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setBorderEffect(\"None\");\n```\n\n----------------------------------------\n\nTITLE: Extracting Annotations from PDF Pages - MuPDF.js - JavaScript\nDESCRIPTION: Iterates through PDF pages and retrieves all annotation objects using page.getAnnotations(). Logs page and annotations information. Inputs: none; Outputs: annotation array per page. Requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0\nwhile (i < document.countPages()) {\n    const page = document.loadPage(0)\n    const annots = page.getAnnotations()\n    console.log(`Page=${page}, Annotations=${annots}`)\n    i++\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a File to a PDF Document - MuPDF.js - JavaScript\nDESCRIPTION: Attaches a file as an embedded object to a PDF using doc.attachFile, showing how to use mupdfjs.Buffer to create the file content. Requires MuPDF.js and a writable document. Input: file name and Buffer; Output: document is modified.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = \"Test content\";\nconst buffer = new mupdfjs.Buffer();\nbuffer.writeLine(content);\ndoc.attachFile(\"test.txt\", buffer);\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDF Annotations - MuPDF.js - JavaScript\nDESCRIPTION: Retrieves all annotations present on a PDF page as an array of PDFAnnotation objects. The code snippet requires a 'pdfPage' object and does not take any parameters. The result is an array whose members represent the annotations, allowing further inspection, modification, or rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet annots = pdfPage.getAnnotations();\n```\n\n----------------------------------------\n\nTITLE: Reading Bits Per Component with getBitsPerComponent - mupdf.js - JavaScript\nDESCRIPTION: Shows how to get the number of bits used for each color component via getBitsPerComponent() on a mupdf.js Image. The Image should already be initialized. Output is a number corresponding to bits per color channel.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar bits = image.getBitsPerComponent();\n```\n\n----------------------------------------\n\nTITLE: Creating Annotations with MuPDF.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a text annotation on a PDF page using MuPDF.js. The page instance must be an object of the PDFPage class. The createAnnotation method accepts the annotation type as a string, here set to \\\"Text\\\", and returns a new annotation object. Ensure MuPDF.js and a loaded PDFPage instance are available before executing this code.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/getting-started/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet annotation = page.createAnnotation(\"Text\")\n```\n\n----------------------------------------\n\nTITLE: Adding Text to PDF Page\nDESCRIPTION: Shows how to create a new PDF document and add styled text to a page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet document = mupdfjs.PDFDocument.createBlankDocument()\nlet page = document.loadPage(0) // get the 1st page of the document\npage.insertText(\"HELLO WORLD\", \n                [0,0], \n                \"Times-Roman\", \n                20, \n                {\n                    strokeColor:[0,0,0,1], \n                    fillColor:[1,0,0,0.75], \n                    strokeThickness:0.5\n                }\n                )\n\nfs.writeFileSync(\"output.pdf\", document.saveToBuffer(\"\").asUint8Array())\n```\n\n----------------------------------------\n\nTITLE: Beginning a new page with DocumentWriter in JavaScript\nDESCRIPTION: Creates a new page in the document with the specified dimensions. Returns a Device object that can be used to render graphics on the page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DocumentWriter.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar device = writer.beginPage([0,0,100,100]);\n```\n\n----------------------------------------\n\nTITLE: Closing a DocumentWriter in JavaScript\nDESCRIPTION: Finalizes the document and flushes any pending output to the buffer. This method should be called when done creating the document.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DocumentWriter.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwriter.close();\n```\n\n----------------------------------------\n\nTITLE: Inserting Text onto a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Inserts stylized text onto a PDF page at a specified point with optional font, size, color, and border properties. Requires a PDFPage instance (mupdfJSPage). The insertText method takes the text, coordinates, font name, font size, and a graphics object configuring stroke and fill styling. The point array [x, y] and color arrays must be properly formed. Returns void.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmupdfJSPage.insertText(\"HELLO WORLD!\", \n               [0,0], \n               \"Times-Roman\", \n               65, \n               {strokeColor:[0,0,0,1], fillColor:[1,0,0,0.75], strokeThickness:1.5});\n```\n\n----------------------------------------\n\nTITLE: Deleting PDF Pages\nDESCRIPTION: Shows how to delete pages from a PDF document.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// delete the first page of a document\ndocument.deletePage(0)\n```\n\n----------------------------------------\n\nTITLE: Getting Images and Metadata from a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Extracts all images from a given PDF page with associated metadata, such as bounding boxes and transform matrices. The 'getImages' method should be called on a page object, returning an array with each entry providing 'bbox', 'matrix', and 'image' properties. This is useful for image extraction, processing, or analysis.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet images = page.getImages();\n```\n\n----------------------------------------\n\nTITLE: Creating Links on a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Creates links on a PDF page via insertLink, targeting either external URLs or internal page destinations. Metrics specify the clickable rectangle, and the URI determines the destination. Requires a PDFPage instance (page) and proper rectangle coordinates. Returns a Link object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// create a link to an external URL\nvar link = page.insertLink({0,0,100,100}, \"https://example.com\");\n\n// create a link to another page in the document\nvar link = page.insertLink({0,0,100,100}, \"#page=1&view=FitV,0\");\n```\n\n----------------------------------------\n\nTITLE: Checking Border Style Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports a border style. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasBorder = annotation.hasBorder();\n```\n\n----------------------------------------\n\nTITLE: Getting Border Width of Annotation in JavaScript\nDESCRIPTION: Retrieves the border width of the annotation in points. Returns a number.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = annotation.getBorderWidth();\n```\n\n----------------------------------------\n\nTITLE: Checking PDF Password Requirement - MuPDF.js - JavaScript\nDESCRIPTION: Determines if a PDF document requires a password by calling the needsPassword() method on a document instance. No parameters are needed. Returns a boolean indicating if authentication is needed. Requires an initialized document instance. Input: none; Output: boolean.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet needsPassword = document.needsPassword()\n```\n\n----------------------------------------\n\nTITLE: Loading PDF Page\nDESCRIPTION: Demonstrates how to load a specific page from a PDF document using the loadPage method.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// load the 1st page of the document\nlet page = document.loadPage(0)\n```\n\n----------------------------------------\n\nTITLE: Adding New Pages to PDF\nDESCRIPTION: Shows how to add new pages with custom dimensions to a PDF document.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a blank document with a blank page\nlet document = mupdfjs.PDFDocument.createBlankDocument()\n\n// Add a page to the end of the document\ndocument.newPage(-1, 300, 500)\n```\n\n----------------------------------------\n\nTITLE: Applying Redactions to PDF Content - MuPDF.js - JavaScript\nDESCRIPTION: Demonstrates how to apply redactions to a PDF page using MuPDF.js, specifying options to remove covered images. This operation requires a valid 'pdfPage' object and uses the static option 'REDACT_IMAGE_REMOVE' to define which elements will be redacted. Inputs are a boolean for confirmation and a redaction mode; the result is the redaction applied in-place to the page. MuPDF.js should be loaded and initialized before use.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npdfPage.applyRedactions(true, mupdfjs.PDFPage.REDACT_IMAGE_REMOVE);\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Page Text\nDESCRIPTION: Demonstrates retrieving structured text content with formatting and positional data as JSON.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst json = page.toStructuredText(\"preserve-whitespace\").asJSON()\nconsole.log(`json=${json}`)\n```\n\n----------------------------------------\n\nTITLE: Getting Page Bounds\nDESCRIPTION: Shows how to retrieve the page boundaries as an array of coordinates [ulx,uly,lrx,lry].\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet rect = page.getBounds()\n```\n\n----------------------------------------\n\nTITLE: Flattening PDF Annotations (Baking) - MuPDF.js - JavaScript\nDESCRIPTION: Flattens (bakes) all annotations and widgets in the current PDF document using document.bake(). Makes all markups permanent and not separately editable. Input: none; Output: modifies the document. Requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.bake()\n```\n\n----------------------------------------\n\nTITLE: Rendering Only Widgets on a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Utilizes 'runPageWidgets' to draw only the widget annotations of a PDF page (e.g., form elements) to a specified output device. This is useful for custom rendering or UI scenarios. Requires a valid page, a device, and a transform matrix.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\npage.runPageWidgets(device, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Drawing Cubic Bezier Curve in Path using JavaScript\nDESCRIPTION: Demonstrates how to draw a cubic bezier curve using the curveTo method, which takes three sets of coordinates as arguments.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npath.curveTo(0, 0, 10, 10, 100, 100);\n```\n\n----------------------------------------\n\nTITLE: Grafting PDF Pages between Documents with PDFGraftMap in JavaScript\nDESCRIPTION: Shows how to copy a complete page with its resources from a source document to a destination document using a graft map.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFGraftMap.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = dstdoc.newGraftMap();\nmap.graftObject(-1, srcdoc, 0);\n```\n\n----------------------------------------\n\nTITLE: Updating Annotation Appearance with mupdf.js - JavaScript\nDESCRIPTION: Refreshes the annotation's appearance to match its current properties by calling update(). This is necessary after changes to certain properties so that rendering reflects the new state. No parameters required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.update()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Annotations - MuPDF.js - JavaScript\nDESCRIPTION: Shows how to extract all widget annotations from a PDF page, returning them in an array of PDFWidget objects. Requires a valid 'pdfPage' object. The method takes no arguments and outputs an array for further use (e.g., form processing or interaction handling).\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet widgets = pdfPage.getWidgets();\n```\n\n----------------------------------------\n\nTITLE: Getting the Logical Page Label - MuPDF.js - JavaScript\nDESCRIPTION: Obtains the page's logical label (string) per the document's numbering scheme using 'getLabel'. Useful for UI display or referencing. Relies on a valid 'page' object; output is a string label, e.g., 'ix' or '12'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = page.getLabel();\n```\n\n----------------------------------------\n\nTITLE: Inverting Pixmap Luminance in JavaScript\nDESCRIPTION: Inverts the luminance of each pixel while keeping chrominance as unchanged as possible. Alpha channel remains unchanged.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npixmap.invertLuminance();\n```\n\n----------------------------------------\n\nTITLE: Counting PDF Pages - MuPDF.js - JavaScript\nDESCRIPTION: Retrieves the number of pages in a PDF document by calling document.countPages(), which returns an integer. Requires an open document instance. Input: none; Output: integer number of pages.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst numPages = document.countPages()\n```\n\n----------------------------------------\n\nTITLE: Rotating a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Demonstrates rotating a PDF page by 90 degrees counterclockwise using the 'rotate' method. The parameter is the angle to rotate (can be 0, ±90, ±180, ±270), with negative values rotating anticlockwise and positive clockwise. Invalid values are ignored, and the method modifies the orientation of the page in place. Requires a 'page' object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// rotate a page 90 degrees anti-clockwise\npage.rotate(-90)\n```\n\n----------------------------------------\n\nTITLE: Rendering and Displaying a PDF Page in the Browser with MuPDF.js (HTML/JavaScript)\nDESCRIPTION: This snippet demonstrates loading a PDF file and rendering its first page as a PNG image in a web browser using MuPDF.js. HTML using a <script type='module'> block imports MuPDF.js, fetches 'input.pdf', renders page 1 to a pixmap, creates a PNG Blob, and appends the image to the document body. Dependencies: MuPDF.js (installed via npm and available under node_modules), and a browser supporting ES modules. Inputs: an 'input.pdf' in the server root. Outputs: a rendered image on the web page. Limitations: relies on correct relative paths and browser ES module support.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/INSTALL.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<script type=\\\"module\\\">\\n\\timport * as mupdf from \\\"./node_modules/mupdf/dist/mupdf.js\\\"\\n\\n\\t// fetch PDF file\\n\\tvar response = await fetch(\\\"./input.pdf\\\")\\n\\tif (!response.ok)\\n\\t\\tthrow new Error(response.status + \\\" \\\" + response.statusText)\\n\\tvar buffer = await response.arrayBuffer()\\n\\n\\t// open the PDF file and render the first page\\n\\tvar doc = mupdf.Document.openDocument(buffer, \\\"application/pdf\\\")\\n\\tvar page = doc.loadPage(0)\\n\\tvar pixmap = page.toPixmap(mupdf.Matrix.scale(96 / 72, 96 / 72), mupdf.ColorSpace.DeviceRGB)\\n\\n\\t// create and append an image to the HTML document\\n\\tvar blob = new Blob([ pixmap.asPNG() ], { type: \\\"image/png\\\" })\\n\\tvar img = document.createElement(\\\"img\\\")\\n\\timg.src = URL.createObjectURL(blob)\\n\\tdocument.body.appendChild(img)\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Inserting an Image onto a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Places an image onto a PDF page at specified coordinates and dimensions. The snippet demonstrates importing image data, creating a mupdfjs.Image, and adding it using insertImage. Requires fs.readFileSync for image I/O and mupdfjs.Image class. The data object includes the image and a unique name; metrics defines placement and scaling.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst imageData = fs.readFileSync(\"logo.png\"));\nlet logo:mupdfjs.Image = new mupdfjs.Image(imageData);\nmupdfJSPage.insertImage({image:logo, name:\"MyLogo\"}, \n                        {x:0, y:0, width:200, height:200});\n```\n\n----------------------------------------\n\nTITLE: Getting Glyph Advance Width in MuPDF.js (JavaScript)\nDESCRIPTION: This snippet shows how to retrieve the advance width of a glyph in a Font object using MuPDF.js. The method 'advanceGlyph' takes a glyph identifier (e.g., Unicode value) and an optional writing mode (0 for horizontal, 1 for vertical). It returns the glyph's width as a number, which can be used for layout calculations.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = font.advanceGlyph(0x42);\n```\n\n----------------------------------------\n\nTITLE: Slicing Buffers in MuPDF.js JavaScript\nDESCRIPTION: Shows how to produce a new Buffer containing a subsequence of data from an existing Buffer using slice(start, end). Arguments are start and end indices (can be negative for offsets from end). The resulting Buffer represents the specified range of bytes; useful for extracting sections of binary data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = new mupdfjs.Buffer();\nbuffer.write(\"hello world\"); // buffer contains \"hello world\"\nvar newBuffer = buffer.slice(1, -1); // newBuffer contains \"ello worl\"\n```\n\n----------------------------------------\n\nTITLE: Grafting Object in PDF Document in JavaScript\nDESCRIPTION: Deep copies an object into the destination PDF document.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npdfDocument.graftObject(obj);\n```\n\n----------------------------------------\n\nTITLE: Resolving Internal Link Destinations with MuPDF.js - JavaScript\nDESCRIPTION: Explains how to resolve a link annotation to its internal destination object inside a PDF using document.resolveLinkDestination. The method takes a link object and returns a Link Destination Object describing where the link points. Requires a document object and a valid link; input is a link instance from MuPDF.js and output is a destination object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/links/index.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet linkDestinationObject = document.resolveLinkDestination(my_link)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Boxes for PDF Geometry - MuPDF.js - JavaScript\nDESCRIPTION: Sets a specific page box (such as TrimBox) for a PDF page using the 'setPageBox' method, requiring the box type and rectangle coordinates. The method allows precise definition of the visible or printable area of the page. A 'page' object is needed; inputs are a string box type and a four-element array specifying the rectangle.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\npage.setPageBox(\"TrimBox\", [10,10, 585, 832]);\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation QuadPoints - MuPDF.js JavaScript\nDESCRIPTION: Retrieves the QuadPoints array for an annotation, typically used to specify the geometric areas affected by highlighters, underlines, or links. Each Quad is represented as an array of 8 numbers (coordinates).\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nvar quadPoints = annotation.getQuadPoints();\n```\n\n----------------------------------------\n\nTITLE: Reading Page Resource Objects - MuPDF.js - JavaScript\nDESCRIPTION: Shows how to access the resource objects associated with a PDF page, iterating over their key/value pairs. Calling 'getResourcesXrefObjects' returns an array of resource objects, which can be processed or logged, aiding in resource management or debugging. This snippet demonstrates logging each resource in the array.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlet xrefObjs = getResourcesXrefObjects();\nfor (var obj in xrefObjs) {\n    console.log(xrefObjs[obj])    \n}\n```\n\n----------------------------------------\n\nTITLE: Determining if a Font is Monospaced with MuPDF.js (JavaScript)\nDESCRIPTION: This code checks whether the Font object is monospaced using the 'isMono' method of MuPDF.js. It returns a boolean indicating if all glyphs have equal width. The snippet assumes the presence of a Font instance called 'font'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar isMono = font.isMono();\n```\n\n----------------------------------------\n\nTITLE: Recording a DisplayList from a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Creates a DisplayList representing drawing commands on the page, optionally including annotations and widgets. Requires a PDFPage instance (page). The toDisplayList method returns a DisplayList object, used for efficient re-rendering and manipulation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = page.toDisplayList();\n```\n\n----------------------------------------\n\nTITLE: Creating Null PDF Objects in JavaScript\nDESCRIPTION: Creates a new null PDF object and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newNull();\n```\n\n----------------------------------------\n\nTITLE: Retrieving PDF Trailer Dictionary - MuPDF.js - JavaScript\nDESCRIPTION: Obtains the trailer dictionary object from a PDF using 'pdfDocument.getTrailer'. The trailer references core objects such as 'Root' and 'Info'. No parameters required. Output is a PDFObject representing the trailer. Required for advanced manipulation, adhering to PDF specifications.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar dict = pdfDocument.getTrailer();\n```\n\n----------------------------------------\n\nTITLE: Rendering Only Annotations on a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Renders only annotation objects of a page to a target device with transformation, via 'runPageAnnots'. This allows separate processing or display of annotations apart from main content. Requires a compatible device and a matrix; page object must be present.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\npage.runPageAnnots(device, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Installing MuPDF.js with NPM\nDESCRIPTION: Command to install the MuPDF.js library using NPM package manager.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mupdf\n```\n\n----------------------------------------\n\nTITLE: Creating a Font from Custom Font Data with MuPDF.js (JavaScript)\nDESCRIPTION: This snippet shows how to create a new MuPDF.js Font object using a custom name and a binary data buffer containing the font file (such as a TTF). It requires Node.js's 'fs' module to read the font file. The 'name' parameter specifies the font's identifier, and 'fontBuffer' holds the raw font data. The resultant Font object allows for font manipulation and use in PDF documents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet fontBuffer = fs.readFileSync(\"FreigSans.ttf\");\nlet font = new mupdfjs.Font(\"Freight Sans\", fontBuffer);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Label in JavaScript\nDESCRIPTION: Gets the field name of the widget as a string, which typically serves as its label.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = widget.getLabel();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pages by Label - MuPDF.js - JavaScript\nDESCRIPTION: Gets the indices of all pages that have a specified label using 'pdfDocument.getPageNumbers'. Takes a label string and an optional boolean to limit output to a single result. Result is an array of matching page numbers. Useful for searching navigation markers. Output: array of numbers.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n// find all the pages labelled as \"Appendix-A\"\nlet result = pdfDocument.getPageNumbers(\"Appendix-A\");\n```\n\n----------------------------------------\n\nTITLE: Resolving Internal PDF Link to Page Index - MuPDF.js - JavaScript\nDESCRIPTION: Resolves an internal document link (URI or Link object) to a numeric page index using 'document.resolveLink'. Input: uri as string or Link. Output: page number (integer index). Dependencies: valid document and link reference.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pageNumber = document.resolveLink(uri);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link URI in MuPDF.js\nDESCRIPTION: Example of using the getURI() method to retrieve the destination URI of a link. Returns a string that can be used directly for external links or passed to resolveLink() for internal document links.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Link.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar uri = link.getURI();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Modification Date with mupdf.js - JavaScript\nDESCRIPTION: Queries the annotation's modification date with getModificationDate(), returning a JavaScript Date object. Allows tracking of editing activity for PDF annotations.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = annotation.getModificationDate();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Flags with mupdf.js - JavaScript\nDESCRIPTION: Obtains the annotation's flags as a number (bit-field) using getFlags(), denoting visibility, printability, locking, and other metadata. The value combines multiple states, so bitwise manipulation may be necessary for advanced editing.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar flags = annotation.getFlags();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options with tsconfig.json - JSON\nDESCRIPTION: Defines a minimal tsconfig.json file needed to enable TypeScript module resolution compatible with Node.js environments for use with MuPDF.js. The configuration sets the 'module' option to 'nodenext' under 'compilerOptions', which allows TypeScript files to properly resolve ECMAScript modules in Node environments. No external dependencies are required aside from TypeScript itself. This configuration should be placed at the project root to be picked up by the TypeScript compiler.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/typescript/index.rst#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"compilerOptions\\\": {\\n        \\\"module\\\": \\\"nodenext\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Appearance with Resources and Contents with mupdf.js - JavaScript\nDESCRIPTION: Sets an annotation's appearance stream using setAppearance(), specifying appearance key, state, transformation matrix, bounding box, resources, and content buffer. Allows detailed customization of how the annotation is rendered. Requires all parameters to be correctly formatted and valid.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setAppearance(\"N\", null, mupdfjs.Matrix.identity, [0,0,100,100], resources, contents);\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text Annotations in PDF with MuPDF.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use MuPDF.js in JavaScript to add a highlighted text annotation covering two lines of text. The process includes loading a PDF, selecting a page, creating a highlight annotation, specifying its color, and defining the area to annotate with setQuadPoints (using coordinates for two rectangles). After updating, the modified PDF is saved. Inputs are the PDF file and quad points; the output is a new PDF with highlighted text. Dependencies are MuPDF.js and Node.js’s fs module. The technique generalizes to Underline, Squiggly, and StrikeOut by changing the annotation type.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/text/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\nlet document = mupdfjs.PDFDocument.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Highlight\")\nannotation.setColor([1, 1, 0])\nannotation.setQuadPoints([\n        [\n            20, 65,\n            230, 65,\n            20, 85,\n            230, 85,\n        ],\n        [\n            20, 90,\n            230, 90,\n            20, 110,\n            230, 110,\n        ],\n    ])\n\nannotation.update()\n\n// Save the changes to a new file.\nfs.writeFileSync(\"output-hl-text.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n\n```\n\n----------------------------------------\n\nTITLE: Querying Number of Components in a ColorSpace (JavaScript, MuPDF.js)\nDESCRIPTION: Illustrates how to use the 'getNumberOfComponents' method from a ColorSpace object to determine how many color components the space contains (e.g., 3 for RGB). Requires an instance of ColorSpace, such as the built-in DeviceRGB. The method outputs a number representing the component count. Useful for programmatically adapting to varying color spaces.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet cs = mupdfjs.ColorSpace.DeviceRGB;\nlet num = cs.getNumberOfComponents(); // 3\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Stamp Annotations with MuPDF.js\nDESCRIPTION: Creates a stamp annotation on a PDF page using MuPDF.js. The example shows how to open a PDF document, create a stamp annotation with a 'Draft' icon, set its position and size, and save the modified document incrementally.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/stamps/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\n\nlet document = mupdfjs.PDFDocument.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Stamp\")\nannotation.setIcon(\"Draft\")\nannotation.setRect([0, 0, 50, 50])\nannotation.update()\n\nfs.writeFileSync(\"output-stamp.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Text Value in JavaScript\nDESCRIPTION: Sets the string value of the widget, typically used for text input fields.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setTextValue(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Grafting PDF Objects with PDFGraftMap in JavaScript\nDESCRIPTION: Demonstrates how to create a graft map from a document and use it to copy PDF objects with the ability to track previously copied objects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFGraftMap.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = document.newGraftMap();\nmap.graftObject(obj);\n```\n\n----------------------------------------\n\nTITLE: Rendering All Page Content to a Device - MuPDF.js - JavaScript\nDESCRIPTION: Uses MuPDF.js's 'run' method to render all page content (including images, text, annotations, and widgets) to a specified device with a transformation matrix, typically for display or rasterization. Inputs are a 'device' object and a matrix (here, the identity). A full-featured MuPDF.js deployment and correct device implementation are prerequisites.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\npage.run(device, mupdf.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying PDF Object - MuPDF.js - JavaScript\nDESCRIPTION: Illustrates how to obtain the fundamental PDFObject for the current PDF page using the 'getObject' method. This enables low-level access for advanced use, such as inspecting raw PDF dictionary data. Requires a 'page' object; result is a PDFObject instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = page.getObject();\n```\n\n----------------------------------------\n\nTITLE: Removing Embedded File from File Attachment Annotation in PDF using MuPDF.js\nDESCRIPTION: This code snippet shows how to remove an embedded file from a file attachment annotation in a PDF document by setting the file specification to null.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/embedding-files/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setFileSpec(null)\n```\n\n----------------------------------------\n\nTITLE: Accessing PDFObject Dictionaries and Arrays - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates how to access dictionary and array entries in a PDFObject using the get method. Requires a PDFDocument instance to create new dictionaries or arrays. The arguments specify the key or index to retrieve, and the output is the corresponding value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar dict = pdfDocument.newDictionary();\nvar value = dict.get(\"my_key\");\nvar arr = pdfDocument.newArray();\nvar value = arr.get(1);\n```\n\n----------------------------------------\n\nTITLE: Running Annotation Render on Device with mupdf.js - JavaScript\nDESCRIPTION: Invokes the run method to render an annotation onto a given device, applying a transformation matrix. Requires an annotation, a Device object, and a Matrix (commonly using mupdfjs.Matrix.identity). Used when dynamically displaying or updating annotation visuals.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.run(device, mupdfjs.Matrix.identity)\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Stream Objects to PDF Documents in JavaScript\nDESCRIPTION: Creates a stream object with pre-compressed data that matches the defined Filter and DecodeParms in the stream dictionary. Returns an indirect reference to the stream.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar stream = pdfDocument.addRawStream(buffer, object);\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation QuadPoints - MuPDF.js JavaScript\nDESCRIPTION: Sets QuadPoints for the annotation, with each quad represented as an array of eight numbers defining four (x,y) vertex pairs. Used for text highlight, underline, or redaction regions.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setQuadPoints([\n                                [1,2,3,4,5,6,7,8],\n                                [1,2,3,4,5,6,7,8],\n                                [1,2,3,4,5,6,7,8]\n                            ]);\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Bounds with mupdf.js - JavaScript\nDESCRIPTION: Retrieves the bounding rectangle of a PDF annotation using the getBounds() method. Requires an annotation object from mupdf.js and returns a Rect object defining the annotation's position and size. Useful for layout, hit-testing, or UI highlighting tasks.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet bounds = annotation.getBounds()\n```\n\n----------------------------------------\n\nTITLE: Toggling Widget State in JavaScript\nDESCRIPTION: Toggles the state of the widget and returns 1 if the state changed, typically used for checkboxes or radio buttons.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar state = widget.toggle();\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text Selection in StructuredText with MuPDF.js in JavaScript\nDESCRIPTION: Shows how to highlight a text selection defined by start and end points. The method returns an array of Quads needed to visually highlight the selection.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StructuredText.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = sText.highlight([100,100], [200,100]);\n```\n\n----------------------------------------\n\nTITLE: Resolving Indirect PDFObjects - MuPDF.js JavaScript\nDESCRIPTION: Shows how to resolve an indirect reference in a PDFObject to obtain the actual referenced object using resolve(). The input is an indirect PDFObject, and the output is either the referenced object or itself if direct. No additional dependencies beyond a valid PDFObject reference.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar resolvedObj = pdfObj.resolve();\n```\n\n----------------------------------------\n\nTITLE: Clearing Annotation Ink List - MuPDF.js JavaScript\nDESCRIPTION: Removes all ink strokes from the annotation's ink list, effectively erasing freehand content associated with the annotation. No parameters are required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.clearInkList();\n```\n\n----------------------------------------\n\nTITLE: Putting Values in PDFObject - MuPDF.js JavaScript\nDESCRIPTION: This snippet shows how to insert or update key-value pairs in PDFObject dictionaries or arrays using the put method. Dependencies include a PDFDocument for creating objects. The key can be a number, string, or PDFObject, and the value can be any type. The stored value can be accessed later via its key or index.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dict = pdfDocument.newDictionary();\ndict.put(\"my_key\", \"my_value\");\nvar arr = pdfDocument.newArray();\narr.put(0, 42);\n```\n\n----------------------------------------\n\nTITLE: Setting Interior Color of Annotation in JavaScript\nDESCRIPTION: Sets the interior color of the annotation. Takes a Color object as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setInteriorColor([0,1,1]);\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Language with mupdf.js - JavaScript\nDESCRIPTION: Specifies the language for an annotation using setLanguage(language), where language is a string code like \"en\". Useful for accessibility and compliance purposes.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setLanguage(\"en\");\n```\n\n----------------------------------------\n\nTITLE: Querying Annotation Hidden-for-Editing State with mupdf.js - JavaScript\nDESCRIPTION: Checks if an annotation is marked as hidden for editing using getHiddenForEditing(). Returns a boolean indicating if the annotation should be rendered during editing. Useful for editor UI logic.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet hidden = annotation.getHiddenForEditing()\n```\n\n----------------------------------------\n\nTITLE: Writing a String to Buffer in MuPDF.js JavaScript\nDESCRIPTION: Illustrates appending a string to the current Buffer using the write() method in MuPDF.js. The string is encoded as UTF-8 and appended to the buffer's contents. This is intended for adding textual data; input is a string and the buffer is modified in place.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbuffer.write(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Checking Annotation QuadPoints Support - MuPDF.js JavaScript\nDESCRIPTION: Checks if the annotation supports QuadPoints, which are used for text markup and redactions. Returns a boolean; true if QuadPoint manipulation is available.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasQuadPoints = annotation.hasQuadPoints();\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines with Arrow Endings Using MuPDF.js in JavaScript\nDESCRIPTION: Illustrates creating a 'Line' annotation with specified start/end points and arrow endings in a PDF via MuPDF.js. Dependencies are 'fs' and MuPDF.js. The code initializes the PDF, creates a Line annotation, sets line color and interior (fill) color for the ending, assigns line coordinates, chooses ending styles (e.g., 'ClosedArrow'), updates the annotation, and saves to disk. Parameters include coordinates for endpoints and optional styles for each terminus. Output PDF displays a color-customized arrow line as annotation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/drawing-and-shapes/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet fileData = fs.readFileSync(\"test.pdf\")\n\nlet document = mupdf.Document.openDocument(fileData, \"application/pdf\")\nlet page = document.loadPage(0)\nlet annotation = page.createAnnotation(\"Line\")\nannotation.setColor([1, 0, 0])\nannotation.setInteriorColor([0, 0, 1])\nannotation.setLine([10, 300], [200, 500])\nannotation.setLineEndingStyles(\"None\", \"ClosedArrow\")\nannotation.update()\n\nfs.writeFileSync(\"output-line.pdf\", document.saveToBuffer(\"incremental\").asUint8Array())\n\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is Device N (JavaScript, MuPDF.js)\nDESCRIPTION: Demonstrates the use of 'isDeviceN', which identifies ColorSpace instances representing a Device N color space. Returns true if the ColorSpace is DeviceN. DeviceN spaces are used for spot-color and multi-ink printing workflows.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isDeviceN();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links from a PDF Page - MuPDF.js - JavaScript\nDESCRIPTION: Fetches all link objects (hyperlinks and internal references) from a PDF page using page.getLinks(). Returns an array of Link objects containing bounds and URI info. Input: none; Output: array of link objects. Requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet links = page.getLinks()\n```\n\n----------------------------------------\n\nTITLE: Getting Pixmap Pixels in JavaScript\nDESCRIPTION: Retrieves the pixel data from the pixmap as an array.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixels = pixmap.getPixels();\n```\n\n----------------------------------------\n\nTITLE: Adding QuadPoint to Annotation - MuPDF.js JavaScript\nDESCRIPTION: Adds a single QuadPoint (array of eight coordinate values) to the annotation, specifying an affected region for a markup or link. Parameter is a flat array with four (x, y) pairs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.addQuadPoint([1,2,3,4,5,6,7,8]);\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Page Labels Array - MuPDF.js - JavaScript\nDESCRIPTION: Sets multiple custom page labels in batch using 'document.setPageLabelsArray'. Takes an array of PageLabelRule objects, each with properties like startpage, style, prefix, and firstpagenum. Used for flexible, non-linear page labeling schemes. Output: void.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst labels = [\n    { startpage: 0, style: \"D\" },\n    { startpage: 5, prefix: \"B-\" },\n    { startpage: 10, firstpagenum: 5 },\n];\n\ndocument.setPageLabelsArray(labels);\n```\n\n----------------------------------------\n\nTITLE: Setting Popup Rectangle of Annotation in JavaScript\nDESCRIPTION: Sets the popup rectangle of the annotation. Takes a Rect object as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setPopup([0,0,100,100]);\n```\n\n----------------------------------------\n\nTITLE: Appending Items to PDFObject Arrays - MuPDF.js JavaScript\nDESCRIPTION: Shows how to append an item to a PDFObject array using the push() method. The input is a value of any type, which is added to the end of the PDFObject if it is an array. The object must support array operations.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npdfObj.push(\"item\");\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Ink List Stroke - MuPDF.js JavaScript\nDESCRIPTION: Appends a new, empty stroke to the annotation's ink list for later point addition. Prepares the annotation for drawing a new freehand path.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.addInkListStroke();\n```\n\n----------------------------------------\n\nTITLE: Getting Border Style of Annotation in JavaScript\nDESCRIPTION: Retrieves the border style of the annotation. Returns a string.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar borderStyle = annotation.getBorderStyle();\n```\n\n----------------------------------------\n\nTITLE: Adding Vertex to Ink List Stroke - MuPDF.js JavaScript\nDESCRIPTION: Adds a point, given as an [x, y] array, to the end of the last ink stroke in the annotation. Used to build up a sequence of points forming a freehand path.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.addInkListStrokeVertex([0,0]);\n```\n\n----------------------------------------\n\nTITLE: Getting Page Bounds with MuPDF.js in JavaScript\nDESCRIPTION: Retrieves the bounding rectangle of the page using getBounds. Returns a Rect object with coordinates representing the page's dimensions. Requires a loaded PDFPage instance (page). Useful for page layout, cropping, or rendering calculations.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = page.getBounds();\n```\n\n----------------------------------------\n\nTITLE: Grafting Page in PDF Document in JavaScript\nDESCRIPTION: Copies a page from a source document to the current PDF document, inserting it at the end.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npdfDocument.graftPage(-1, srcDoc, 0);\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Flags with mupdf.js - JavaScript\nDESCRIPTION: Defines the annotation's flags via setFlags(flags), where flags is a numerical bit-field. This overwrites previous flag values and directly controls behaviors such as visibility, locking, and printability. Use with caution to avoid unintended effects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setFlags(4); // Clears all other flags and sets \"NoZoom\".\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Rect with mupdf.js - JavaScript\nDESCRIPTION: Obtains the annotation's bounding rectangle using getRect(), returning a Rect object. Should be used only if hasRect() confirms support.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = annotation.getRect();\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Rectangle in JavaScript\nDESCRIPTION: Sets the rectangle for an annotation object. The rectangle is defined by an array of four numbers representing the coordinates.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setRect([0,0,100,100]);\n```\n\n----------------------------------------\n\nTITLE: PDF Stream Type Checking and Reading - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates identifying stream types using isStream() and reading stream contents with readStream() and readRawStream(). Streams must be indirect objects. readStream() returns a decoded Buffer, while readRawStream() returns the uncompressed raw buffer of the stream.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isStream();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = pdfObj.readStream();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = pdfObj.readRawStream();\n```\n\n----------------------------------------\n\nTITLE: Warping Pixmap Section in JavaScript\nDESCRIPTION: Returns a warped subsection of the pixmap with specified dimensions. Points define a convex quadrilateral within the pixmap to be warped.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar warpedPixmap = pixmap.warp([[0,0], [100,100], [130,170], [150,200]],200,200);\n```\n\n----------------------------------------\n\nTITLE: Rotating PDF Pages\nDESCRIPTION: Demonstrates how to rotate pages in 90-degree increments.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// rotate a page 90 degrees anti-clockwise\npage.rotate(-90)\n```\n\n----------------------------------------\n\nTITLE: Creating a New PDF Object - MuPDF.js - JavaScript\nDESCRIPTION: Allocates an uninitialized, uniquely numbered PDF object with 'pdfDocument.createObject'. Outputs a PDFObject representing the indirect reference. Used in advanced PDF editing for adding new resources or custom data structures.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = pdfDocument.createObject();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Field Flags in JavaScript\nDESCRIPTION: Gets the field flags of the widget as a number, which represents a bit-field value as defined in the PDF specification.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar flags = widget.getFieldFlags();\n```\n\n----------------------------------------\n\nTITLE: Searching for Text in a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Finds occurrences of a search term in a PDF page's text stream by calling search with a query and optional maximum hits parameter. Returns an array of Quad arrays for each match, providing precise character positions. Requires a PDFPage instance (page). Results represent search hits as 8-value quadpoint arrays.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet results = page.search(\"my search phrase\");\n```\n\n----------------------------------------\n\nTITLE: Text Walking Implementation in MuPDF.js\nDESCRIPTION: Complex example showing text walking functionality with a custom walker implementation and device handling for PDF processing.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Text.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction print(...args) {\n    console.log(args.join(\" \"))\n}\n\nvar textPrinter = {\n    beginSpan: function (f,m,wmode, bidi, dir, lang) {\n        print(\"beginSpan\",f,m,wmode,bidi,dir,Q(lang));\n    },\n    showGlyph: function (f,m,g,u,v,b) { print(\"glyph\",f,m,g,String.fromCodePoint(u),v,b)},\n    endSpan: function () { print(\"endSpan\"); }\n}\n\nvar traceDevice = {\n    fillText: function (text, ctm, colorSpace, color, alpha) {\n        print(\"fillText\", ctm, colorSpace, color, alpha)\n        text.walk(textPrinter)\n    },\n    clipText: function (text, ctm) {\n        print(\"clipText\", ctm)\n        text.walk(textPrinter)\n    },\n    strokeText: function (text, stroke, ctm, colorSpace, color, alpha) {\n        print(\"strokeText\", Q(stroke), ctm, colorSpace, color, alpha)\n        text.walk(textPrinter)\n    },\n    clipStrokeText: function (text, stroke, ctm) {\n        print(\"clipStrokeText\", Q(stroke), ctm)\n        text.walk(textPrinter)\n    },\n    ignoreText: function (text, ctm) {\n        print(\"ignoreText\", ctm)\n        text.walk(textPrinter)\n    }\n}\n\nvar doc = mupdfjs.PDFDocument.openDocument(fs.readFileSync(\"test.pdf\"), \"application/pdf\")\nvar page = doc.loadPage(0)\nvar device = new mupdfjs.Device(traceDevice)\npage.run(device, mupdfjs.Matrix.identity)\n```\n\n----------------------------------------\n\nTITLE: Counting PDF Objects - MuPDF.js - JavaScript\nDESCRIPTION: Calculates the total number of objects within a PDF file using 'pdfDocument.countObjects'. Reserved object number 0 is excluded from use. No input parameters. Returns a number representing the count of objects for advanced PDF analysis or debugging.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar num = pdfDocument.countObjects();\n```\n\n----------------------------------------\n\nTITLE: Getting Author of Annotation in JavaScript\nDESCRIPTION: Retrieves the author of the annotation. Returns a string.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar author = annotation.getAuthor();\n```\n\n----------------------------------------\n\nTITLE: Beginning a Blend Group with MuPDF.js Device (JavaScript)\nDESCRIPTION: Initiates a transparency group for blending, isolating or knocking out subsequent drawing with the given blend mode and alpha. It requires area, color space, isolated/knockout settings, blend mode, and group alpha. Utilized in rendering layered PDF pages with complex compositing or group transparency effects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.beginGroup([0,0,100,100], mupdfjs.ColorSpace.DeviceRGB, true, true, \"Multiply\", 0.5);\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Ink List - MuPDF.js JavaScript\nDESCRIPTION: Retrieves the ink list for a PDF annotation. Returns an array of strokes, each defined as an array of points (with each point as an [x, y] array). Useful for parsing and rendering freehand drawing shapes.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nvar inkList = annotation.getInkList();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Creation Date with mupdf.js - JavaScript\nDESCRIPTION: Retrieves the annotation's creation date as a JavaScript Date object using getCreationDate(). Used for versioning, auditing, or displaying annotation metadata.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = annotation.getCreationDate();\n```\n\n----------------------------------------\n\nTITLE: Inserting an Internal Document Link with MuPDF.js - JavaScript\nDESCRIPTION: Shows how to insert an internal document link that points to a specific page using insertLink and formatLinkURI. The bounding box is set to 100x100 at the top left; the link destination is formatted via document.formatLinkURI with an object indicating the target page. Requires a valid document and page object, and suitable for internal navigation in a PDF.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/links/index.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npage.insertLink({x:0,y:0,width:100,height:100}, document.formatLinkURI({ type: \"Fit\", page: 1 }))\n```\n\n----------------------------------------\n\nTITLE: Rendering DisplayList to a Pixmap in MuPDF.js\nDESCRIPTION: Demonstrates rendering a display list to a Pixmap using a transformation matrix, colorspace, and background setting.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayList.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixmap = displayList.toPixmap(mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB, false);\n```\n\n----------------------------------------\n\nTITLE: Encoding a Unicode Character to Glyph Index with MuPDF.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates mapping a Unicode character to its corresponding glyph index in a Font object using MuPDF.js. The input parameter (e.g., 0x42 for 'B') specifies the Unicode code point. The 'encodeCharacter' method returns the glyph index as a number, or 0 if the glyph is not found.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar index = font.encodeCharacter(0x42);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Link Annotation with MuPDF.js - JavaScript\nDESCRIPTION: Demonstrates how to remove an existing link annotation from a PDF page by using the delete method on a PDFPage instance. The method takes a link object to be deleted from the page. Requires a PDFPage object and the specific link reference obtained from getLinks. No output is produced, but the link is removed from the page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/links/index.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npage.delete(link)\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to PDF Documents in JavaScript\nDESCRIPTION: Adds an object to a PDF document as a numbered object and returns an indirect reference to it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar ref = pdfDocument.addObject(obj);\n```\n\n----------------------------------------\n\nTITLE: Rendering Only Page Contents (Excluding Annotations/Widgets) - MuPDF.js - JavaScript\nDESCRIPTION: Renders only the core page contents to a device using the 'runPageContents' method, omitting any annotations or widgets. Used for scenarios where overlays should be ignored. Inputs and dependencies are similar to the 'run' example; output is restricted to the main page graphics.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\npage.runPageContents(device, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionary PDF Objects in JavaScript\nDESCRIPTION: Creates a new dictionary PDF object with an optional initial capacity and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newDictionary();\n```\n\n----------------------------------------\n\nTITLE: Iterating PDF Outline - MuPDF.js - JavaScript\nDESCRIPTION: Obtains an OutlineIterator for programmatic traversal of the document outline using 'document.outlineIterator'. Returns an iterator object for structured outline access. Input: none. Output: OutlineIterator object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = document.outlineIterator();\n```\n\n----------------------------------------\n\nTITLE: Setting Line Ending Styles of Annotation in JavaScript\nDESCRIPTION: Sets the line ending styles of the annotation. Takes start and end styles as parameters.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setLineEndingStyles(\"Square\", \"OpenArrow\");\n```\n\n----------------------------------------\n\nTITLE: Setting Border Effect Intensity - MuPDF.js JavaScript\nDESCRIPTION: Sets the intensity for the annotation's border effect. Requires a number (usually 0-2) as parameter, influencing how strongly the effect is displayed. The annotation object must support writing this property.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setBorderEffectIntensity(1.5);\n```\n\n----------------------------------------\n\nTITLE: Creating Text Object in MuPDF.js\nDESCRIPTION: Demonstrates how to create a new empty text object using the Text constructor.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Text.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = new mupdfjs.Text();\n```\n\n----------------------------------------\n\nTITLE: Beginning a Tile Pattern with MuPDF.js Device (JavaScript)\nDESCRIPTION: Begins the definition of a tiling pattern, specifying the pattern's area, viewing area, tile spacing (xstep, ystep), transformation matrix, and cache ID. All drawing between beginTile and endTile will be repeated in the pattern's region. This is used for repeated fills like backgrounds or texture effects in PDF rendering; caching is supported via the ID argument.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.beginTile([0,0,100,100], [100,100,200,200], 10, 10, mupdfjs.Matrix.identity, 0);\n```\n\n----------------------------------------\n\nTITLE: Getting Icon of Annotation in JavaScript\nDESCRIPTION: Retrieves the icon name of the annotation. Returns a string.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = annotation.getIcon();\n```\n\n----------------------------------------\n\nTITLE: Creating a DocumentWriter instance in JavaScript\nDESCRIPTION: Initializes a new DocumentWriter object that will output to a buffer in PDF format. The writer can be used to create a new document with specified format and output options.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DocumentWriter.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar writer = new mupdfjs.DocumentWriter(buffer, \"PDF\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Creating ColorSpace from ICC Profile in MuPDF.js (JavaScript)\nDESCRIPTION: Demonstrates how to instantiate a new ColorSpace object in MuPDF.js using an ICC profile buffer. Requires the 'fs' module to read an ICC file and the 'mupdfjs' library to access ColorSpace. The 'from' parameter is a buffer containing the ICC data, and 'name' is a descriptive string. Returns a ColorSpace instance representing the specified color profile. Ensure correct file path and file accessibility when reading the ICC profile.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet icc_colorspace = new mupdfjs.ColorSpace(fs.readFileSync(\"SWOP.icc\"), \"SWOP\");\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Opacity with mupdf.js - JavaScript\nDESCRIPTION: Changes the opacity of an annotation by calling setOpacity(opacity), where opacity is a float from 0 (transparent) to 1 (opaque). Affects visual rendering in viewers and on export.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Page Labels - MuPDF.js - JavaScript\nDESCRIPTION: Configures custom page labels and numbering for a PDF using 'pdfDocument.setPageLabels'. Inputs include a start page index (number), a label style (string), a prefix (string), and a starting number. Alters label display on PDF readers for organized navigation. Output: void.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfDocument.setPageLabels(0, \"D\", \"Prefix\", 1);\n```\n\n----------------------------------------\n\nTITLE: Updating All Annotations on a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Forces an update on all annotations in a PDF page, processing events, JavaScript, or edits. Returns true if any update requires re-rendering. Only requires a PDFPage instance (pdfPage). Intended for synchronizing UI or when annotation states may have changed.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npdfPage.update();\n```\n\n----------------------------------------\n\nTITLE: Setting Line of Annotation in JavaScript\nDESCRIPTION: Sets the line end points of the annotation. Takes two Point objects as parameters.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setLine([100,100], [150, 175]);\n```\n\n----------------------------------------\n\nTITLE: Iterating over PDFObject Entries - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates the forEach method to iterate over all entries in a PDFObject dictionary or array. Requires a callback function with value and key parameters. Each key-value pair is passed to the callback, facilitating enumeration and custom logic.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npdfObj.forEach(function(value,key){console.log(\"value=\"+value+\",key=\"+key)});\n```\n\n----------------------------------------\n\nTITLE: Checking Icon Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports an icon. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasIcon = annotation.hasIcon();\n```\n\n----------------------------------------\n\nTITLE: Defining Color Type Alias in JavaScript/TypeScript\nDESCRIPTION: This snippet defines the various possible representations of a Color value within MuPDF.js as an array of floats between 0 and 1, with support for grayscale, RGB, and CMYK color spaces. No dependencies are required. The type alias ensures type safety and clarity when specifying color component arrays throughout the library.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype Color = [number] | [number, number, number] | [number, number, number, number]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Value in JavaScript\nDESCRIPTION: Gets the current value of the widget as a string.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = widget.getValue();\n```\n\n----------------------------------------\n\nTITLE: Getting Line of Annotation in JavaScript\nDESCRIPTION: Retrieves the line end points of the annotation. Returns an array of two points.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = annotation.getLine();\n```\n\n----------------------------------------\n\nTITLE: Transforming a Rectangle Using Rect.transform in JavaScript\nDESCRIPTION: This example demonstrates mupdfjs.Rect.transform, which applies an affine transformation (specified as a matrix array) to the given rectangle coordinates. Returns a new four-element rectangle array representing the transformed rectangle. Used for layout, rendering, or coordinate system conversions.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Rect.transform([0,0,100,100], [1,0.5,1,1,1,1]);\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Bounding Box in JavaScript\nDESCRIPTION: Sets the bounding box of the widget using a Rect object, allowing repositioning and resizing of the widget.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setRect([0,0,100,100]);\n```\n\n----------------------------------------\n\nTITLE: Inserting an External URI Link with MuPDF.js - JavaScript\nDESCRIPTION: Illustrates how to add an external hyperlink annotation to a PDF page in MuPDF.js by calling insertLink. The bounding box for the link is specified as an object with x, y, width, and height properties, and the second parameter is the destination URI. Requires a page object and write access to a PDF. The output is a new link annotation on the PDF page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/annotations/links/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npage.insertLink({x:0,y:0,width:100,height:30}, \"https://mupdfjs.readthedocs.io\")\n```\n\n----------------------------------------\n\nTITLE: PDFObject Primitive Type Checking and Conversion - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates using isNull(), isBoolean(), asBoolean(), isInteger(), isNumber(), asNumber(), isName(), asName(), isString(), asString(), and asByteString() for checking PDFObject primitive types and converting to corresponding JavaScript values. Each method returns a boolean or the primitive value as appropriate, supporting robust type handling of PDFObject primitives.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isNull();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isBoolean();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.asBoolean();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isInteger();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isNumber();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.asNumber();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isName();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.asName();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isString();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.asString();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.asByteString();\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Creation Date with mupdf.js - JavaScript\nDESCRIPTION: Sets the creation date for an annotation by invoking setCreationDate(date), where date is a JavaScript Date object. Important for maintaining document history and compliance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setCreationDate(new Date());\n```\n\n----------------------------------------\n\nTITLE: Searching Text in a DisplayList in MuPDF.js\nDESCRIPTION: Demonstrates searching for text within a display list, returning an array of search hits represented as Quads arrays.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayList.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar results = displayList.search(\"my search phrase\");\n```\n\n----------------------------------------\n\nTITLE: Deleting PDFObject Entries - MuPDF.js JavaScript\nDESCRIPTION: Illustrates deleting dictionary or array elements from a PDFObject using the delete method. Requires a PDFDocument to create objects. The method accepts a key, index, or PDFObject reference. Deleted entries are removed from the object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npdfObj.delete(\"my_key\");\nvar dict = pdfDocument.newDictionary();\ndict.put(\"my_key\", \"my_value\");\ndict.delete(\"my_key\");\nvar arr = pdfDocument.newArray();\narr.put(1, 42);\narr.delete(1);\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for MuPDF.js in Node.js\nDESCRIPTION: This code snippet demonstrates how to import the necessary modules for using MuPDF.js in a Node.js environment. It includes the file system module and the MuPDF.js library.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from \"fs\"\nimport * as mupdfjs from \"mupdf/mupdfjs\"\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Appearance in JavaScript\nDESCRIPTION: Updates the appearance stream of the widget to reflect any changes made to its properties or value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.update();\n```\n\n----------------------------------------\n\nTITLE: Copying Text Selection in StructuredText with MuPDF.js in JavaScript\nDESCRIPTION: Demonstrates how to extract text from a selection defined by start and end points. The method returns the selected text as a string.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StructuredText.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = sText.copy([100,100], [200,100]);\n```\n\n----------------------------------------\n\nTITLE: Checking if Link is External in MuPDF.js\nDESCRIPTION: Example of using the isExternal() method to determine if a link points to an external resource. Returns true if the link URI has a valid scheme followed by a colon (e.g., https:, mailto:).\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Link.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar isExternal = link.isExternal();\n```\n\n----------------------------------------\n\nTITLE: Inserting OutlineItem Using OutlineIterator in JavaScript\nDESCRIPTION: Shows how to insert a new OutlineItem at the current iterator position using the insert(item) method. Requires an OutlineItem instance as a parameter. Returns 0 if inserted before a valid item, 1 if inserted at an empty position. The iterator's position remains unchanged post-insert. This is key for building or extending the PDF outline.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = outlineIterator.insert(item);\n```\n\n----------------------------------------\n\nTITLE: Clearing a Pixmap to White in JavaScript\nDESCRIPTION: Clears all pixels in the pixmap to the specified value (255 for white, 0 for black, or omit for transparent).\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npixmap.clear(255);\n```\n\n----------------------------------------\n\nTITLE: Defining Outline Item Interface - JavaScript\nDESCRIPTION: This snippet defines the OutlineItem interface for representing entries in a document's outline (table of contents) as returned by the MuPDF.js loadOutline method. Properties include the required title (string or undefined), URI (string or undefined), open state (boolean), optional nested children (down), and an optional page reference (page). This structure is used for building or traversing hierarchical outlines in PDF documents loaded via MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ninterface OutlineItem {\n    title: string | undefined,\n    uri: string | undefined,\n    open: boolean,\n    down?: OutlineItem[],\n    page?: number,\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Annotation Object with mupdf.js - JavaScript\nDESCRIPTION: Retrieves the underlying PDFObject of an annotation for lower-level inspection or manipulation. The getObject() method returns the internal PDFObject representation, enabling access to raw PDF dictionary data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = annotation.getObject()\n```\n\n----------------------------------------\n\nTITLE: Converting Buffer to Uint8Array in MuPDF.js JavaScript\nDESCRIPTION: Demonstrates converting a Buffer to a Uint8Array using the asUint8Array() method. Output is a new Uint8Array containing the buffer data. Facilitates interoperability with APIs or libraries requiring standard typed arrays.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = buffer.asUint8Array();\n```\n\n----------------------------------------\n\nTITLE: Clipping and Stroking a Path using MuPDF.js Device (JavaScript)\nDESCRIPTION: Performs both stroking and clipping in a single command with the given Path, StrokeState settings, and matrix. This approach is used when the region for future drawing should match a visually stroked contour. In practice, this method constrains subsequent output and visually outlines the region as well.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.clipStrokePath(path, true, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Formatting Link Destination as URI - MuPDF.js - JavaScript\nDESCRIPTION: Converts a LinkDest object representing a PDF internal destination into a URI string suitable for link creation via 'document.formatLinkURI'. Parameters include the destination details like chapter, page, coordinates, and zoom. Used in combination with link-creating methods. Output: string URI.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar uri = document.formatLinkURI({chapter:0, page:42,\n        type:\"FitV\", x:0, y:0, width:100, height:50, zoom:1});\ndocument.createLink([0,0,100,100], uri);\n```\n\n----------------------------------------\n\nTITLE: Filling a Path using MuPDF.js Device (JavaScript)\nDESCRIPTION: Demonstrates how to fill a path using a Device instance in MuPDF.js. It requires a Path object, a CTM matrix (typically identity for no transformation), DeviceRGB color space, an RGB color array, and an alpha channel. This method is commonly used when rendering closed shapes and supports specifying the even-odd rule for filling. Returns no output, but triggers the rendering of the filled path within the device context.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.fillPath(path, false, mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB, [1,0,0], true);\n```\n\n----------------------------------------\n\nTITLE: Filling an Image with MuPDF.js Device (JavaScript)\nDESCRIPTION: Renders an image into the device coordinate space, with placement determined by a transformation matrix and transparency via alpha. Images always fill a normalized rectangle, so the matrix scales/positions them appropriately. This method is used for drawing raster images or bitmaps within PDFs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.fillImage(image, mupdfjs.Matrix.identity, false, {overPrinting:true});\n```\n\n----------------------------------------\n\nTITLE: Querying PDF Outline Item Using OutlineIterator in JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current OutlineItem at the iterator's position using the item() method. Requires an instance of OutlineIterator, which traverses the document's outline/bookmarks. Returns either an OutlineItem or null if the iterator is out of range; input parameters are not needed and output should be checked for null before using the returned object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = outlineIterator.item();\n```\n\n----------------------------------------\n\nTITLE: Setting Pixmap Resolution in JavaScript\nDESCRIPTION: Sets the x and y resolution of the pixmap in dots per inch.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npixmap.setResolution(300, 300);\n```\n\n----------------------------------------\n\nTITLE: Splitting PDF Document in JavaScript\nDESCRIPTION: Splits a PDF document into multiple documents based on specified page ranges.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// split out 3 documents, the first two pages, then page three, then everything from page 4 onwards\nvar documents = document.split([0, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Filling Text using MuPDF.js Device (JavaScript)\nDESCRIPTION: Shows how to fill a Text object using a Device, taking parameters for transformation, color space, fill color, and alpha. Typically used for rendering filled glyphs or text inside graphical content streams. This call draws opaque or semi-transparent colored text.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.fillText(text, mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB, [1,0,0], 1);\n```\n\n----------------------------------------\n\nTITLE: Rendering Annotation to Pixmap with mupdf.js - JavaScript\nDESCRIPTION: Renders a PDF annotation into a Pixmap for pixel-based manipulation or export. Uses toPixmap() with transformation, colorspace, and optional alpha channel boolean. Requires appropriate mupdfjs objects and returns a Pixmap.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet pixmap = annotation.toPixmap(mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB, true)\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Vertices - MuPDF.js JavaScript\nDESCRIPTION: Assigns new vertices to a polygon or polyline annotation. Input is an array of points, each a two-element [x, y] array, defining the annotation's path.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setVertices([\n                            [0,0],\n                            [10,10],\n                            [20,20]\n                          ]);\n```\n\n----------------------------------------\n\nTITLE: Beginning Marked-Content Layer in MuPDF.js with JavaScript\nDESCRIPTION: Initiates a new marked-content layer with a specified name on the device object. The function beginLayer requires a string argument 'name', which identifies the layer. This is useful for organizing or grouping content within rendering contexts (such as PDF documents), aiding in structured output. The method expects a string layer name input and alters the device state to enter the named layer.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.beginLayer(\"my tag\");\n```\n\n----------------------------------------\n\nTITLE: Getting X Resolution in JavaScript\nDESCRIPTION: Retrieves the x-axis resolution of the pixmap in dots per inch.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar xRes = pixmap.getXResolution();\n```\n\n----------------------------------------\n\nTITLE: Creating Real Number PDF Objects in JavaScript\nDESCRIPTION: Creates a new real number PDF object with the specified value and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newReal(7.3);\n```\n\n----------------------------------------\n\nTITLE: Filling a Shade (Gradient) using MuPDF.js Device (JavaScript)\nDESCRIPTION: Fill the device with a shade (gradient) by providing a Shade object, transformation matrix, and alpha value. The sample uses overPrinting options, although the specifics of the gradient fill aren't exposed to JavaScript yet. It's used for smooth color transitions and gradient fills in rendered PDF content.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.fillShade(shade, mupdfjs.Matrix.identity, true, {overPrinting:true});\n```\n\n----------------------------------------\n\nTITLE: Creating String PDF Objects in JavaScript\nDESCRIPTION: Creates a new string PDF object with the specified value and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newString(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Components in JavaScript\nDESCRIPTION: Retrieves the number of color components in the pixmap, plus one if an alpha channel is present.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar num = pixmap.getNumberOfComponents();\n```\n\n----------------------------------------\n\nTITLE: Stroking Text using MuPDF.js Device (JavaScript)\nDESCRIPTION: Applies a stroke to text outlines with configurable StrokeState (dashes, width, and cap style), using the supplied Text object, matrix, color settings, and alpha. Used to render text with an outlined appearance instead of filled glyphs. Particularly relevant for text effects in complex document rendering scenarios.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.strokeText(text,\n                          {dashes:[5,10], lineWidth:3, lineCap:'Round'},\n                          mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB,\n                          [1,0,0],\n                          1);\n```\n\n----------------------------------------\n\nTITLE: Converting Annotation to DisplayList with mupdf.js - JavaScript\nDESCRIPTION: Records the annotation contents as a DisplayList using toDisplayList(), enabling fast replay or analysis. Accepts no parameters and returns a DisplayList. Useful for batch rendering or advanced manipulation scenarios.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet displayList = annotation.toDisplayList()\n```\n\n----------------------------------------\n\nTITLE: Creating a Built-in PDF Font Instance with MuPDF.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to instantiate a MuPDF.js Font object using the name of a built-in PDF font (e.g., 'Times-Roman'). No external dependencies are required aside from the MuPDF.js library. The input parameter is a string specifying the font name, while the output is a Font object that can be used for further operations such as rendering text in a PDF.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar font = new mupdfjs.Font(\"Times-Roman\");\n```\n\n----------------------------------------\n\nTITLE: Ending a Mask Group with MuPDF.js Device (JavaScript)\nDESCRIPTION: Completes the mask grouping started by beginMask, finalizing the composite mask for the region. Should always be paired with a corresponding beginMask call. No input parameters required; restores standard device rendering mode.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.endMask();\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Font Name via MuPDF.js (JavaScript)\nDESCRIPTION: This example illustrates how to retrieve the name of a Font object instantiated with MuPDF.js. The 'getName' method returns the font's name as a string. It assumes there is an existing Font object ('font') to operate on, and outputs a string representing the font's name.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = font.getName();\n```\n\n----------------------------------------\n\nTITLE: Retrieving the ColorSpace Type String (JavaScript, MuPDF.js)\nDESCRIPTION: Demonstrates the 'getType' method, which returns a string code describing the type of the ColorSpace (e.g., 'Gray', 'RGB', 'CMYK', etc). Usable for conditional logic or display. The returned value is one of a set list of strings, enumerated in the documentation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = colorSpace.getType();\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is Lab (JavaScript, MuPDF.js)\nDESCRIPTION: Shows how to verify if a ColorSpace object represents a Lab color space using the 'isLab' method. It returns a boolean and can be used for conditionally processing Lab color data. The method does not take any parameters.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isLab();\n```\n\n----------------------------------------\n\nTITLE: Constructing an Image with mupdf.js - JavaScript\nDESCRIPTION: Demonstrates how to create an Image instance using the mupdf.js library in JavaScript. The code reads file data from \\'logo.png\\' into a buffer using the Node.js fs module and creates an Image object. Requires the mupdfjs module and access to the fs module. Input is a buffer containing image file data; output is a constructed Image instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet image = new mupdfjs.Image(fs.readFileSync(\"logo.png\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Array PDF Objects in JavaScript\nDESCRIPTION: Creates a new array PDF object with an optional initial capacity and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newArray();\n```\n\n----------------------------------------\n\nTITLE: Creating a DisplayList in MuPDF.js\nDESCRIPTION: Demonstrates how to create a new DisplayList object by providing a mediabox rectangle that defines the bounds of the page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayList.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = new mupdfjs.DisplayList([0,0,100,100]);\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Appearance from DisplayList with mupdf.js - JavaScript\nDESCRIPTION: Defines a new appearance stream for an annotation using setAppearanceFromDisplayList(), which accepts appearance type, state, transformation, and a DisplayList. Used primarily for custom rendering or updating interactive widget states. Dependencies include valid DisplayList and Matrix objects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setAppearanceFromDisplayList(\"N\", null, mupdfjs.Matrix.identity, displayList);\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Color with mupdf.js - JavaScript\nDESCRIPTION: Fetches the annotation's color as an array via getColor(), which represents the color as one, three, or four components depending on the colorspace. Returned value can be used to set UI highlights or clone styles.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = annotation.getColor();\n```\n\n----------------------------------------\n\nTITLE: Writing a String with Line End to Buffer in MuPDF.js JavaScript\nDESCRIPTION: Shows how to append a string to a Buffer followed by a newline character using writeLine(). Accepts a string input, appends it plus a newline to the buffer. Useful for creating line-based text content in binary buffers.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuffer.writeLine(\"a line\");\n```\n\n----------------------------------------\n\nTITLE: Getting Path Bounds in JavaScript\nDESCRIPTION: Shows how to get the bounding rectangle for a path using the getBounds method, which takes a StrokeState and a transform Matrix as arguments.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = path.getBounds(1.0, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Creating DisplayListDevice Instance in MuPDF.js\nDESCRIPTION: Demonstrates how to create a new DisplayListDevice object by first initializing a DisplayList with dimensions and then passing it to the DisplayListDevice constructor. The DisplayList is configured with a viewport of [0,0,100,100].\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayListDevice.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar myDisplayList = new mupdfjs.DisplayList([0,0,100,100]);\nvar displayListDevice = new mupdfjs.DisplayListDevice(myDisplayList);\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is RGB (JavaScript, MuPDF.js)\nDESCRIPTION: Provides an example of using the 'isRGB' method to check if a ColorSpace object corresponds to an RGB color space. This requires a ColorSpace instance and returns true if the space is RGB. Useful for branching logic based on color space type.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isRGB();\n```\n\n----------------------------------------\n\nTITLE: Obtaining Number of Components with getNumberOfComponents - mupdf.js - JavaScript\nDESCRIPTION: Demonstrates querying a mupdf.js Image object for the number of color components (plus one if alpha is present) using getNumberOfComponents(). An initialized Image object is required. Returns a number indicating the color components in use.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar num = image.getNumberOfComponents();\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Color with mupdf.js - JavaScript\nDESCRIPTION: Assigns a color to an annotation with setColor(color), where color is an array of 1, 3, or 4 numerical values representing the desired color. Used for visual customization or tagging.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setColor([0,1,0]);\n```\n\n----------------------------------------\n\nTITLE: Appending a Single Byte to Buffer in MuPDF.js JavaScript\nDESCRIPTION: Shows how to append a single byte value to the end of a Buffer using writeByte(). The input is a numeric value (only the least significant 8 bits are used). The snippet demonstrates growing the buffer one byte at a time; useful for building buffers incrementally.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbuffer.writeByte(0x2a);\n```\n\n----------------------------------------\n\nTITLE: Converting DisplayList to StructuredText in MuPDF.js\nDESCRIPTION: Shows how to extract text from a display list into a StructuredText object, with options to preserve whitespace.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayList.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sText = displayList.toStructuredText(\"preserve-whitespace\");\n```\n\n----------------------------------------\n\nTITLE: Adding String to Text Object in MuPDF.js\nDESCRIPTION: Demonstrates adding a simple string to a Text object with font substitution support.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Text.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntext.showString(new mupdfjs.Font(\"Times-Roman\"), mupdfjs.Matrix.identity, \"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Fetching Y Resolution with getYResolution - mupdf.js - JavaScript\nDESCRIPTION: Shows how to use getYResolution() from a mupdf.js Image instance to read its vertical resolution in dots per inch. The image instance must exist. The function yields a number representing y resolution. No arguments needed.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar yRes = image.getYResolution();\n```\n\n----------------------------------------\n\nTITLE: Clipping and Stroking Text using MuPDF.js Device (JavaScript)\nDESCRIPTION: This command creates a clipping path matching the stroke of a given Text object, based on StrokeState and transformation matrix. It is utilized when masked drawing regions should follow text outlines rather than filled areas, supporting advanced graphic design or watermarking within PDF content.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.clipStrokeText(text, {dashes:[5,10], lineWidth:3, lineCap:'Round'},  mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Fetching X Resolution with getXResolution - mupdf.js - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the horizontal resolution, in dots per inch, of an Image using getXResolution(). Requires an initialized Image instance. Returns a number denoting the x resolution. No method parameters are required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar xRes = image.getXResolution();\n```\n\n----------------------------------------\n\nTITLE: Exporting Pixmap as PSD in JavaScript\nDESCRIPTION: Converts the pixmap to PSD format and returns it as a buffer.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = pixmap.asPSD();\n```\n\n----------------------------------------\n\nTITLE: Ignoring (Invisible) Text with MuPDF.js Device (JavaScript)\nDESCRIPTION: Makes text non-visible but searchable, often used when overlaying computer-recognized text (OCR) atop scanned images. This Device method takes a Text object and a transformation matrix, ensuring the text will not be displayed yet remains accessible for search operations. No color or alpha is applied in this operation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.ignoreText(text, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap Style with setLineCap (MuPDF.js) - JavaScript\nDESCRIPTION: This code sets the line cap property of a StrokeState object using the setLineCap method. It accepts either a string or numerical value corresponding to predefined enumerations (e.g., 'Butt', 'Round'). The method ensures subsequent line drawings use the specified cap style. Requires a valid StrokeState instance and an appropriate style argument.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrokeState.setLineCap(\"Butt\");\n```\n\n----------------------------------------\n\nTITLE: Inverting Pixmap Colors in JavaScript\nDESCRIPTION: Inverts all pixel components in the pixmap except for alpha, which remains unchanged.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npixmap.invert();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Language with mupdf.js - JavaScript\nDESCRIPTION: Gets the language of the annotation, or falls back to the inherited document language if not set. The getLanguage() method returns a string such as \"en\" or \"fr\".\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar language = annotation.getLanguage();\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Contents with mupdf.js - JavaScript\nDESCRIPTION: Updates the plain text contents of an annotation by calling setContents(text), where text is a string. Used to annotate, comment, or update display strings. Ensure encoding is appropriate for your PDF workflow.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setContents(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Quadding (Justification) with mupdf.js - JavaScript\nDESCRIPTION: Sets annotation text justification using setQuadding(value), where value is 0 (left), 1 (center), or 2 (right). Use only on annotation types supporting quadding.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setQuadding(1);\n```\n\n----------------------------------------\n\nTITLE: Setting Miter Limit for Strokes with setMiterLimit (MuPDF.js) - JavaScript\nDESCRIPTION: This snippet adjusts the miter limit on a StrokeState object via the setMiterLimit method, influencing how sharp corners are rendered when using 'miter' joins. The width parameter is a number specifying the maximum allowed miter length, preventing excessively long spikes at joins. This property is important when rendering polygons or paths with acute angles.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstrokeState.setMiterLimit(2);\n```\n\n----------------------------------------\n\nTITLE: Reading a Byte from Buffer at an Index in MuPDF.js JavaScript\nDESCRIPTION: Demonstrates reading a byte at a specified position from a Buffer using the readByte(at) method. Requires a Buffer object and an integer index. Returns the numeric value of the byte at the given offset; useful for inspecting buffer contents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbuffer.readByte(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Author of Annotation in JavaScript\nDESCRIPTION: Sets the author of the annotation. Takes a string as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setAuthor(\"Jane Doe\");\n```\n\n----------------------------------------\n\nTITLE: Getting Stroke Line Width with getLineWidth (MuPDF.js) - JavaScript\nDESCRIPTION: By invoking getLineWidth, this snippet fetches the current stroke width setting from a StrokeState object. It outputs a numeric value representing pixel thickness. This is useful for debugging or programmatically adapting rendering parameters, assuming a StrokeState instance has already been created and possibly configured.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = strokeState.getLineWidth();\n```\n\n----------------------------------------\n\nTITLE: Getting Pixmap Stride in JavaScript\nDESCRIPTION: Gets the number of bytes per row in the pixmap.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar stride = pixmap.getStride();\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Content Device\nDESCRIPTION: Demonstrates implementing a device to analyze and print PDF page contents including paths and text.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst Q = JSON.stringify\n\nfunction print(...args) {\n    console.log(args.join(\" \"))\n}\n\nvar pathPrinter = {\n    moveTo: function (x,y) { print(\"moveTo\", x, y) },\n    lineTo: function (x,y) { print(\"lineTo\", x, y) },\n    curveTo: function (x1,y1,x2,y2,x3,y3) { print(\"curveTo\", x1, y1, x2, y2, x3, y3) },\n    closePath: function () { print(\"closePath\") },\n}\n\nvar textPrinter = {\n    beginSpan: function (f,m,wmode, bidi, dir, lang) {\n        print(\"beginSpan\",f,m,wmode,bidi,dir,Q(lang));\n    },\n    showGlyph: function (f,m,g,u,v,b) { print(\"glyph\",f,m,g,String.fromCodePoint(u),v,b) },\n    endSpan: function () { print(\"endSpan\"); }\n}\n\nvar traceDevice = {\n    fillPath: function (path, evenOdd, ctm, colorSpace, color, alpha) {\n        print(\"fillPath\", evenOdd, ctm, colorSpace, color, alpha)\n        path.walk(pathPrinter)\n    },\n    clipPath: function (path, evenOdd, ctm) {\n        print(\"clipPath\", evenOdd, ctm)\n        path.walk(pathPrinter)\n    },\n    strokePath: function (path, stroke, ctm, colorSpace, color, alpha) {\n        print(\"strokePath\", Q(stroke), ctm, colorSpace, color, alpha)\n        path.walk(pathPrinter)\n    },\n    clipStrokePath: function (path, stroke, ctm) {\n        print(\"clipStrokePath\", Q(stroke), ctm)\n        path.walk(pathPrinter)\n    },\n\n    fillText: function (text, ctm, colorSpace, color, alpha) {\n        print(\"fillText\", ctm, colorSpace, color, alpha)\n        text.walk(textPrinter)\n    },\n    clipText: function (text, ctm) {\n        print(\"clipText\", ctm)\n        text.walk(textPrinter)\n    },\n    strokeText: function (text, stroke, ctm, colorSpace, color, alpha) {\n        print(\"strokeText\", Q(stroke), ctm, colorSpace, color, alpha)\n        text.walk(textPrinter)\n    },\n    clipStrokeText: function (text, stroke, ctm) {\n        print(\"clipStrokeText\", Q(stroke), ctm)\n        text.walk(textPrinter)\n    },\n    ignoreText: function (text, ctm) {\n        print(\"ignoreText\", ctm)\n        text.walk(textPrinter)\n    },\n\n    fillShade: function (shade, ctm, alpha) {\n        print(\"fillShade\", shade, ctm, alpha)\n    },\n    fillImage: function (image, ctm, alpha) {\n        print(\"fillImage\", image, ctm, alpha)\n    }\n```\n\n----------------------------------------\n\nTITLE: Beginning a Mask Group with MuPDF.js Device (JavaScript)\nDESCRIPTION: Starts a soft mask region, grouping all drawing commands between beginMask and endMask as a mask over a defined area. It supports both luminosity and alpha-based masks and requires area, mask type (luminosity), color space, and initial color. Used for advanced transparency and effect masking in PDF rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.beginMask([0,0,100,100], true, mupdfjs.ColorSpace.DeviceRGB, [1,0,1]);\n```\n\n----------------------------------------\n\nTITLE: Moving OutlineIterator to Previous Item (prev) in JavaScript\nDESCRIPTION: Illustrates the usage of prev() on OutlineIterator to move to the previous outline item. The iterator's state changes to the preceding item, returning a number indicating movement success: negative for failure, 0 for success, or 1 for an insertable position. No parameters are required; ensure to check the return code for handling iteration bounds.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = outlineIterator.prev();\n```\n\n----------------------------------------\n\nTITLE: Determining if a Font is Serif in MuPDF.js (JavaScript)\nDESCRIPTION: This example shows how to check whether a Font object is of serif style in MuPDF.js using the 'isSerif' method. The result is a boolean indicating if the font has serifs. It requires an existing Font instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar isSerif = font.isSerif();\n```\n\n----------------------------------------\n\nTITLE: Getting Default Appearance for Text Annotations in JavaScript\nDESCRIPTION: Retrieves the default text appearance for free text annotations. Returns an object containing font, size, and color information.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar appearance = annotation.getDefaultAppearance();\n```\n\n----------------------------------------\n\nTITLE: Getting Line Cap Style with getLineCap (MuPDF.js) - JavaScript\nDESCRIPTION: This snippet retrieves the current line cap style of a StrokeState object as a number by calling getLineCap. The returned value maps to an internal enumeration, which can be translated back to a style string for display purposes. It requires only a StrokeState object configured previously, and outputs a numeric representation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineCap = strokeState.getLineCap();\n```\n\n----------------------------------------\n\nTITLE: Getting Widget Field Type in JavaScript\nDESCRIPTION: Retrieves the type of the widget as a string, indicating the specific type of form component.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = widget.getFieldType();\n```\n\n----------------------------------------\n\nTITLE: Setting Border Style of Annotation in JavaScript\nDESCRIPTION: Sets the border style of the annotation. Takes a string as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setBorderStyle(\"Dashed\");\n```\n\n----------------------------------------\n\nTITLE: Moving OutlineIterator Up in PDF Hierarchy (up) in JavaScript\nDESCRIPTION: Uses up() to navigate the OutlineIterator one level up in the outline hierarchy. No parameters are needed; it returns a number representing the move outcome (negative if not possible, 0 if moved to a valid item, 1 if at an insertable location). This allows traversing from a child to its parent item within the outline structure.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = outlineIterator.up();\n```\n\n----------------------------------------\n\nTITLE: Drawing Cubic Bezier Curve with End Point Control in JavaScript\nDESCRIPTION: Demonstrates how to draw a cubic bezier curve using the curveToY method, which uses two control points including the end point.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npath.curveToY(0, 0, 100, 100);\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer using MuPDF.js in JavaScript\nDESCRIPTION: Shows how to create a new, empty Buffer instance using the MuPDF.js library. No dependencies apart from MuPDF.js are required. The resulting Buffer can be used for subsequent binary data operations; there are no input arguments, and the output is a new Buffer object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = new mupdfjs.Buffer();\n```\n\n----------------------------------------\n\nTITLE: Moving OutlineIterator Down to Child Item (down) in JavaScript\nDESCRIPTION: Demonstrates the down() method to move the OutlineIterator into the first child of the current outline item. No arguments needed; the returned value indicates success, failure, or a possible insert position as a number. This is particularly useful for traversing nested (tree-like) outlines in hierarchical PDFs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = outlineIterator.down();\n```\n\n----------------------------------------\n\nTITLE: Updating OutlineItem Properties Using OutlineIterator in JavaScript\nDESCRIPTION: Demonstrates updating the current outline item via update(item), which takes an OutlineItem as a parameter and applies its property values to the current item. No value is returned. Prerequisite: a valid OutlineItem containing the desired properties. Used for editing the metadata or titles of existing bookmarks.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\noutlineIterator.update(item);\n```\n\n----------------------------------------\n\nTITLE: Converting Buffer to String with MuPDF.js JavaScript\nDESCRIPTION: Illustrates retrieving the contents of a Buffer as a string using asString(). There are no input arguments; the buffer data is returned decoded as a standard JavaScript string. This is useful for interpreting binary buffer data as textual content.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar str = buffer.asString();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for MuPDF.js ESM Modules (JSON)\nDESCRIPTION: This \"tsconfig.json\" snippet configures the TypeScript compiler to use the 'nodenext' module resolution, allowing it to understand ESM-style imports which are required by mupdf. The configuration is used by Visual Studio Code and the TypeScript CLI. Key parameters: 'module' is set to 'nodenext'. Input is a JSON configuration file.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/INSTALL.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\\\"compilerOptions\\\": {\\n\\t\\t\\\"module\\\": \\\"nodenext\\\"\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Type with mupdf.js - JavaScript\nDESCRIPTION: Retrieves the annotation type as a string using getType(), which can be used to tailor UI behaviors or apply type-specific processing. Refer to annotation type documentation for possible string values.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet type = annotation.getType()\n```\n\n----------------------------------------\n\nTITLE: Getting Line Ending Styles of Annotation in JavaScript\nDESCRIPTION: Retrieves the line ending styles of the annotation. Returns an object with start and end properties.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineEndingStyles = annotation.getLineEndingStyles();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Width with getWidth - mupdf.js - JavaScript\nDESCRIPTION: Shows how to obtain the width, in pixels, of a mupdf.js Image instance using the getWidth() method. The image object must have previously been initialized. Returns a number as the width. This method requires no input parameters.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = image.getWidth();\n```\n\n----------------------------------------\n\nTITLE: Getting Widget Options in JavaScript\nDESCRIPTION: Retrieves an array of strings representing the values for each corresponding radio button or checkbox field.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = widget.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Setting Border Width of Annotation in JavaScript\nDESCRIPTION: Sets the border width of the annotation in points. Takes a number as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setBorderWidth(1.5);\n```\n\n----------------------------------------\n\nTITLE: Transforming Path in JavaScript\nDESCRIPTION: Shows how to transform a path using a given transform matrix with the transform method.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npath.transform(mupdfjs.Matrix.scale(2,2));\n```\n\n----------------------------------------\n\nTITLE: Creating Graft Map for PDF Document in JavaScript\nDESCRIPTION: Creates a new graft map for copying objects between PDF documents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar graftMap = pdfDocument.newGraftMap();\n```\n\n----------------------------------------\n\nTITLE: Clipping Text using MuPDF.js Device (JavaScript)\nDESCRIPTION: Clips to the shape of the provided Text object using the given transformation matrix. All graphics output following this call will be constrained to the outlines of the text until popClip is called. This is useful in advanced masking or text-as-clip-path PDF effects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.clipText(text, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Ending Marked-Content Layer in MuPDF.js with JavaScript\nDESCRIPTION: Ends the current marked-content layer previously begun with beginLayer. This notifies the device to exit the context of the current layer, ensuring correct stacking and containment of rendered content. No parameters are required, and it simply finalizes layer scoping.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.endLayer();\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Elements and External Links for MuPDF.js in JavaScript\nDESCRIPTION: This script runs on page load to modify DOM elements. It sets external links to open in new tabs, updates the copyright information, and adds a support link. It also includes a function for page navigation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/footer.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// On Load, do what we need to do with the DOM\ndocument.body.onload = function() {\n\n   // ensure external links open in a new tab\n   const collection = document.getElementsByClassName(\"nav-external\");\n   for (var i=0;i<collection.length;i++) {\n      collection[i].setAttribute(\"target\", \"blank\");\n   }\n\n   const collectionB = document.getElementsByClassName(\"reference external\");\n   for (var i=0;i<collectionB.length;i++) {\n      collectionB[i].setAttribute(\"target\", \"blank\");\n   }\n\n   // set the copyright\n   const footerItem = document.getElementsByClassName(\"footer-item\");\n   for (var i=0;i<footerItem.length;i++) {\n      const copyright = footerItem[i].getElementsByClassName(\"copyright\");\n      for (var j=0;j<copyright.length;j++) {\n         copyright[j].innerHTML = \"&copy; Copyright 2024 <a href='https://artifex.com' target=_blank>Artifex Software, Inc</a> — All Rights Reserved\";\n      }\n   }\n\n   const footerItemEnd = document.getElementsByClassName(\"footer-items__end\");\n   for (var i=0;i<footerItemEnd.length;i++) {\n      const endItem = footerItemEnd[i];\n      endItem.innerHTML = \"<a href='https://discord.gg/zpyAHM7XtF' target='new'>Support</a>\";\n   }\n\n\n};\n\n\nfunction gotoPage(page) {\n   window.location.href = page;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PDF Permissions - MuPDF.js - JavaScript\nDESCRIPTION: Shows how to check if a PDF document grants a specific permission with 'document.hasPermission'. The method expects a string such as 'edit', 'print', etc., and returns a boolean indicating permission availability. Dependencies: a MuPDF.js loaded document instance. Inputs: permission string. Output: boolean result.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar canEdit = document.hasPermission(\"edit\");\n```\n\n----------------------------------------\n\nTITLE: Checking File Specification Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports a file specification. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasFileSpec = annotation.hasFilespec();\n```\n\n----------------------------------------\n\nTITLE: Checking for Image Mask with getImageMask - mupdf.js - JavaScript\nDESCRIPTION: Illustrates how to check if an Image serves as a mask by calling getImageMask() on a mupdf.js Image instance. The method expects a valid Image instance as context. Returns a boolean indicating whether this is an image mask.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasMask = image.getImageMask();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Contents with mupdf.js - JavaScript\nDESCRIPTION: Retrieves the plain text contents of an annotation using getContents(), returning a string. This content is typically displayed as a popup or tooltip in PDF viewers.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar contents = annotation.getContents();\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Vertices - MuPDF.js JavaScript\nDESCRIPTION: Obtains an array of vertices (each an [x, y] point) defining the shape of a polygon or polyline annotation. Enables reading and rendering of vector shapes.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvar vertices = annotation.getVertices();\n```\n\n----------------------------------------\n\nTITLE: Checking for Alpha Channel in JavaScript\nDESCRIPTION: Determines whether the pixmap has an alpha channel.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = pixmap.getAlpha();\n```\n\n----------------------------------------\n\nTITLE: Resolving Internal PDF Link Destination - MuPDF.js - JavaScript\nDESCRIPTION: Retrieves a detailed link destination object from a URI using 'document.resolveLinkDestination'. Input is the uri (string). Output is a Link destination object describing the link's coordinates or destination semantics. Used for navigation or link analysis.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar linkDestination = document.resolveLinkDestination(uri);\n```\n\n----------------------------------------\n\nTITLE: Adding PDF Content Stream\nDESCRIPTION: Shows how to add a content stream to a PDFObject using PDF's coordinate system (origin at bottom-left). The stream positions and sizes an image using PDF syntax.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/coordinate-system/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar extra_contents = document.addStream(\"q 200 0 0 200 10 10 cm /Image1 Do Q\", null)\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag for MuPDF.js DOM Manipulation\nDESCRIPTION: This HTML script tag contains JavaScript code for DOM manipulation in a MuPDF.js project. It includes functions for setting external link behavior, updating copyright information, and adding a support link.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/footer.rst#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\n      // On Load, do what we need to do with the DOM\n      document.body.onload = function() {\n\n         // ensure external links open in a new tab\n         const collection = document.getElementsByClassName(\"nav-external\");\n         for (var i=0;i<collection.length;i++) {\n            collection[i].setAttribute(\"target\", \"blank\");\n         }\n\n         const collectionB = document.getElementsByClassName(\"reference external\");\n         for (var i=0;i<collectionB.length;i++) {\n            collectionB[i].setAttribute(\"target\", \"blank\");\n         }\n\n         // set the copyright\n         const footerItem = document.getElementsByClassName(\"footer-item\");\n         for (var i=0;i<footerItem.length;i++) {\n            const copyright = footerItem[i].getElementsByClassName(\"copyright\");\n            for (var j=0;j<copyright.length;j++) {\n               copyright[j].innerHTML = \"&copy; Copyright 2024 <a href='https://artifex.com' target=_blank>Artifex Software, Inc</a> — All Rights Reserved\";\n            }\n         }\n\n         const footerItemEnd = document.getElementsByClassName(\"footer-items__end\");\n         for (var i=0;i<footerItemEnd.length;i++) {\n            const endItem = footerItemEnd[i];\n            endItem.innerHTML = \"<a href='https://discord.gg/zpyAHM7XtF' target='new'>Support</a>\";\n         }\n\n\n      };\n\n\n      function gotoPage(page) {\n         window.location.href = page;\n      }\n\n\n   </script>\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Objects in PDF with JavaScript\nDESCRIPTION: Creates a stream object with the contents of a buffer, adds it to the PDF, and returns an indirect reference. The optional object parameter defines the stream object dictionary.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar stream = pdfDocument.addStream(buffer, object);\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Modification Date with mupdf.js - JavaScript\nDESCRIPTION: Updates the annotation's modification date using setModificationDate(date), supplying a JavaScript Date object. Ensures document workflows track annotation edits accurately.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setModificationDate(new Date());\n```\n\n----------------------------------------\n\nTITLE: Setting Border Dash Pattern of Annotation in JavaScript\nDESCRIPTION: Sets the border dash pattern of the annotation. Takes an array of numbers as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setBorderDashPattern([2.0, 1.0, 4.0, 1.0]);\n```\n\n----------------------------------------\n\nTITLE: Creating Name PDF Objects in JavaScript\nDESCRIPTION: Creates a new name PDF object with the specified value and returns it. Names are used as dictionary keys in PDF documents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newName(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Embedded Files from a PDF - MuPDF.js - JavaScript\nDESCRIPTION: Removes a file attached to a PDF using document.deleteEmbeddedFile. The method takes the file name as a string. Input: attachment file name; Output: modification of the document. Requires MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.deleteEmbeddedFile(\"test.txt\")\n```\n\n----------------------------------------\n\nTITLE: Clearing Annotation Vertices - MuPDF.js JavaScript\nDESCRIPTION: Removes all vertices from the annotation, resetting its geometric shape. No parameters; used to erase or reset geometry.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.clearVertices();\n```\n\n----------------------------------------\n\nTITLE: Checking Annotation Rect Support with mupdf.js - JavaScript\nDESCRIPTION: Uses hasRect() to check if an annotation supports rectangular bounding boxes, returning a boolean. Needed before manipulating geometric properties on varying annotation types.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasRect = annotation.hasRect();\n```\n\n----------------------------------------\n\nTITLE: Getting Border Dash Item of Annotation in JavaScript\nDESCRIPTION: Retrieves the length of a specific dash pattern item. Takes an index as parameter and returns a number.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nvar length = annotation.getBorderDashItem(0);\n```\n\n----------------------------------------\n\nTITLE: Linking and Organizing Class Reference Pages Using reStructuredText - reStructuredText\nDESCRIPTION: This snippet demonstrates the use of .rst directives to include shared header and footer files and create an expandable table of contents (toctree) for class documentation within the MuPDF.js project. Dependencies include Sphinx, reStructuredText, and the existence of the referenced .rst files for each class. The file does not accept direct inputs; its output is a rendered documentation page with navigable links, used during static site generation. It is constrained to documentation build environments supporting reStructuredText, and its functionality relies on proper directory structure and correctly named class reference files.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/index.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../header.rst\n\n.. _Classes:\n\n\nClasses\n===================\n\n.. toctree::\n    :maxdepth: 2\n\n    Buffer.rst\n    ColorSpace.rst\n    Device.rst\n    DisplayList.rst\n    DisplayListDevice.rst\n    DocumentWriter.rst\n    DrawDevice.rst\n    Font.rst\n    Image.rst\n    Link.rst\n    OutlineIterator.rst\n    Path.rst\n    PDFAnnotation.rst\n    PDFDocument.rst\n    PDFGraftMap.rst\n    PDFObject.rst\n    PDFPage.rst\n    PDFWidget.rst\n    Pixmap.rst\n    StrokeState.rst\n    StructuredText.rst\n    Text.rst\n\n\n.. include:: ../footer.rst\n\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Worker for MuPDF.js Testing\nDESCRIPTION: JavaScript worker file that imports the MuPDF.js library and logs its contents to the console.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\"\n\nimport * as mupdf from \"../../dist/mupdf.js\"\n\nfor (var name in mupdf) {\n    console.log(`mupdf.${name}=${mupdf[name]}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Annotation Border Effect - MuPDF.js JavaScript\nDESCRIPTION: Retrieves the type of border effect applied to a PDF annotation using MuPDF.js. The returned value is a string describing the border effect (e.g., 'Cloudy', 'None'). Depends on the annotation API providing the getBorderEffect function.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = annotation.getBorderEffect();\n```\n\n----------------------------------------\n\nTITLE: Creating Byte String PDF Objects in JavaScript\nDESCRIPTION: Creates a new byte string PDF object from a Uint8Array and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newByteString([21, 31]);\n```\n\n----------------------------------------\n\nTITLE: Getting Interior Color of Annotation in JavaScript\nDESCRIPTION: Retrieves the interior color of the annotation. Returns a Color object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar interiorColor = annotation.getInteriorColor();\n```\n\n----------------------------------------\n\nTITLE: Checking Line Ending Styles Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports line ending styles. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasLineEndingStyles = annotation.hasLineEndingStyles();\n```\n\n----------------------------------------\n\nTITLE: Appending Data from Another Buffer or String in MuPDF.js JavaScript\nDESCRIPTION: Demonstrates concatenating the contents of another Buffer, ArrayBuffer, Uint8Array, or string to the current buffer using writeBuffer(). Input may be any compatible data type. Extends the buffer by appending additional binary or textual content.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbuffer.writeBuffer(anotherBuffer);\n```\n\n----------------------------------------\n\nTITLE: Querying Annotation Border Effect - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates how to check if a PDF annotation uses a border effect using MuPDF.js. Requires an annotation object with the appropriate API. The result is a boolean indicating presence of a border effect.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasEffect = annotation.hasBorderEffect();\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Python Server\nDESCRIPTION: Command to start a local HTTP server using Python, necessary for testing MuPDF.js with web workers.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Checking File Specification in PDFObject - MuPDF.js JavaScript\nDESCRIPTION: Shows use of isFilespec() to determine if a PDFObject or its reference is a file specification object. Returns a boolean indicating presence of the filespec type. No prerequisites besides an object reference.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isFilespec();\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation for MuPDF.js\nDESCRIPTION: Command to build HTML documentation using Sphinx. This generates the HTML files from the RST source files, placing the output in the 'build/html' directory.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -b html . build/html\n```\n\n----------------------------------------\n\nTITLE: Checking Annotation Ink List Support - MuPDF.js JavaScript\nDESCRIPTION: Checks if the 'ink list' feature is supported by the annotation object, returning a boolean. This determines whether you can manipulate freehand ink data on the annotation using subsequent API calls.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasInkList = annotation.hasInkList();\n```\n\n----------------------------------------\n\nTITLE: Checking Line Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports a line. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasLine = annotation.hasLine();\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering PDF Document with MuPDF.js\nDESCRIPTION: Demonstrates loading a PDF document from file, accessing its first page, and running it through a device with identity matrix transformation. Uses MuPDF.js APIs for document handling and rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar doc = mupdfjs.PDFDocument.openDocument(fs.readFileSync(\"test.pdf\"), \"application/pdf\")\nvar page = doc.loadPage(0)\nvar device = new mupdfjs.Device(traceDevice)\npage.run(device, mupdfjs.Matrix.identity)\n```\n\n----------------------------------------\n\nTITLE: Setting Icon of Annotation in JavaScript\nDESCRIPTION: Sets the icon name of the annotation. Takes a string as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setIcon(\"Note\");\n```\n\n----------------------------------------\n\nTITLE: Ending page rendering with DocumentWriter in JavaScript\nDESCRIPTION: Finalizes the current page being rendered. This method should be called after all content has been added to the page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DocumentWriter.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwriter.endPage();\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules for MuPDF.js\nDESCRIPTION: Command to initialize and update the Git submodules required for building MuPDF libraries.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Running Node Test Script\nDESCRIPTION: Command to execute the MuPDF.js test script using Node.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode test.mjs\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Ink List - MuPDF.js JavaScript\nDESCRIPTION: Defines the ink list for a PDF annotation. Accepts an array of strokes, where each stroke is an array of points with [x, y] coordinates. This allows for custom freehand shapes or signature input.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setInkList([\n                              [\n                                  [0,0]\n                              ],\n                              [\n                                  [10,10], [20,20], [30,30]\n                              ]\n                          ]);\n```\n\n----------------------------------------\n\nTITLE: Checking if Widget is Read-Only in JavaScript\nDESCRIPTION: Determines if the widget is read-only and cannot be interacted with by the user.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar isReadOnly = widget.isReadOnly();\n```\n\n----------------------------------------\n\nTITLE: Filling an Image Mask with MuPDF.js Device (JavaScript)\nDESCRIPTION: Handles image masks (binary or alpha-only images) by drawing the mask in the provided color and color space, with transformation and transparency. The color fills only visible parts of the mask. Used for stencils, glyphs, and pseudo-transparent effects in PDF rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.fillImageMask(image, mupdfjs.Matrix.identity, mupdfjs.ColorSpace.DeviceRGB, [0,1,0], true);\n```\n\n----------------------------------------\n\nTITLE: Setting File Specification of Annotation in JavaScript\nDESCRIPTION: Sets the file specification object of the annotation. Takes a PDFObject as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setFilespec({filename:\"my_file.pdf\",\n                                mimetype:\"application/pdf\",\n                                size:1000,\n                                creationDate:date,\n                                modificationDate:date});\n```\n\n----------------------------------------\n\nTITLE: Using Matrix Identity Property in JavaScript\nDESCRIPTION: This example shows how to access the static identity property of the Matrix class in MuPDF.js, which returns the identity transformation as the array [1,0,0,1,0,0]. This is a utility for resetting or initializing transformation matrices with no effect. Requires the mupdfjs.Matrix class to be available.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Matrix.identity;\n```\n\n----------------------------------------\n\nTITLE: Advancing PDF Outline Iterator Position (next) in JavaScript\nDESCRIPTION: Shows how to move the OutlineIterator to the next outline item using next(). Requires a valid OutlineIterator instance. The method returns a number: negative if the movement is not possible, 0 if the new position has a valid item, or 1 if there's no item but one can be inserted at this spot. No input parameters are needed. This is essential for sequential outline navigation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = outlineIterator.next();\n```\n\n----------------------------------------\n\nTITLE: Checking If a Rectangle is Infinite with Rect.isInfinite in JavaScript\nDESCRIPTION: This snippet shows mupdfjs.Rect.isInfinite to check if a rectangle represents an infinite area (as per specific MuPDF conventions, using boundary constants). The function outputs a boolean. This is relevant for edge case handling, such as when interpreting or setting unbounded regions.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInfinite = mupdfjs.Rect.isInfinite([0x80000000,0x80000000,0x7fffff80,0x7fffff80]); //true\nvar isInfinite = mupdfjs.Rect.isInfinite([0,0,100,100]); // false\n```\n\n----------------------------------------\n\nTITLE: Checking If a Rectangle is Valid with Rect.isValid in JavaScript\nDESCRIPTION: This snippet uses mupdfjs.Rect.isValid to verify whether a rectangle is valid (lrx >= ulx and lry >= uly). The method assists in validating geometric inputs before further processing in MuPDF.js. Returns a boolean.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar isValid = mupdfjs.Rect.isValid([0,0,100,100]); // true\nvar isValid = mupdfjs.Rect.isValid([0,0,-100,100]); // false\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is Indexed (JavaScript, MuPDF.js)\nDESCRIPTION: Illustrates the 'isIndexed' method, which returns true if the ColorSpace object describes an Indexed color space. This method helps differentiate between color models, supporting optimizations or special handling for Indexed data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isIndexed();\n```\n\n----------------------------------------\n\nTITLE: Starting MuPDF NextJS Development Server\nDESCRIPTION: Commands to start the NextJS development server using different package managers (npm, yarn, pnpm, or bun).\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/nextjs-client/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Indirect Reference Checking and Retrieval - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates how to check if a PDFObject is an indirect reference using isIndirect(), and how to retrieve the object number for such references using asIndirect(). Both methods assist with working with indirect PDF references in the PDF structure.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.isIndirect();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.asIndirect();\n```\n\n----------------------------------------\n\nTITLE: Installing and Running MuPDF.js Annotation Tests with NPM\nDESCRIPTION: Commands to install dependencies with npm ci and start a local web server for testing MuPDF.js annotations. After running these commands, a web server will be available at http://localhost:8080.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/annotations-test/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ci\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Hidden-for-Editing State with mupdf.js - JavaScript\nDESCRIPTION: Toggles the hidden-for-editing status of an annotation using setHiddenForEditing(hidden), where hidden is a boolean. This prevents annotations from displaying during editing sessions. Ensure this flag is managed consistently to keep UI coherent.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setHiddenForEditing(true)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Appearance for Text Annotations in JavaScript\nDESCRIPTION: Sets the default text appearance for free text annotations. Takes font name, size, and color as parameters.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setDefaultAppearance(\"Helv\", 16, [0,0,0]);\n```\n\n----------------------------------------\n\nTITLE: Creating Integer PDF Objects in JavaScript\nDESCRIPTION: Creates a new integer PDF object with the specified value and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newInteger(1);\n```\n\n----------------------------------------\n\nTITLE: Getting Border Dash Count of Annotation in JavaScript\nDESCRIPTION: Retrieves the number of items in the border dash pattern. Returns a number.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nvar dashCount = annotation.getBorderDashCount();\n```\n\n----------------------------------------\n\nTITLE: Getting Primitive Value from PDFObject - MuPDF.js JavaScript\nDESCRIPTION: This snippet demonstrates extracting the primitive value from a PDFObject using valueOf(). The output can be null, boolean, number, or string for direct primitives, 'R' for indirect objects, and strings for PDF names. Arrays and dictionaries are returned unchanged.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = pdfObj.valueOf();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Bounds in MuPDF.js\nDESCRIPTION: Example of using the getBounds() method to retrieve the rectangle describing a link's location on the page. Returns a Rect object representing the link's boundaries.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Link.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = link.getBounds();\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build Locally - Vite - Bash\nDESCRIPTION: Launches a local server to preview the production build output from the ./dist directory. Ensures the production version renders correctly before actual deployment. Accessible at http://localhost:4173/ by default, and requires that the build step was completed first.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/vue/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Object in JavaScript\nDESCRIPTION: Demonstrates how to create a new empty Path object using the Path constructor.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = new mupdfjs.Path();\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle with MuPDF Coordinates\nDESCRIPTION: Demonstrates creating a 200x200 rectangle using MuPDF's coordinate system where (0,0) is at the top-left corner.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/coordinate-system/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet rectangle = [0,0,200,200]\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Line Width with setLineWidth (MuPDF.js) - JavaScript\nDESCRIPTION: This snippet sets the width of the stroke for drawing operations using the setLineWidth method. The width argument must be a number, determining how thick rendered lines will appear. This method should be called on a valid StrokeState object before rendering shapes for accurate stroke display.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstrokeState.setLineWidth(2);\n```\n\n----------------------------------------\n\nTITLE: Adding Border Dash Item to Annotation in JavaScript\nDESCRIPTION: Appends an item to the end of the border dash pattern. Takes a number as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.addBorderDashItem(10.0);\n```\n\n----------------------------------------\n\nTITLE: Defining Matrix Type Alias in Bash\nDESCRIPTION: This snippet declares the Matrix type as an array of six numbers, suitable for representing affine transformations in MuPDF.js. Used throughout geometric and layout computations, this type alias clarifies expected input for transformation functions. No pre-requisites beyond JavaScript/TypeScript basic types.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntype Matrix = [number, number, number, number, number, number]\n```\n\n----------------------------------------\n\nTITLE: Converting Image to Pixmap with toPixmap - mupdf.js - JavaScript\nDESCRIPTION: Demonstrates the toPixmap() method for generating a Pixmap representation from a mupdf.js Image. The method accepts no arguments and assumes an existing Image object. The output is a Pixmap object resulting from the conversion.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixmap = image.toPixmap();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Height with getHeight - mupdf.js - JavaScript\nDESCRIPTION: Illustrates calling getHeight() on a mupdf.js Image to get the image height in pixels. Expects an existing Image instance. The method outputs a number representing the image height. No additional dependencies are required beyond the image instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar height = image.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Angular CLI - Shell\nDESCRIPTION: Shows how to start the Angular development server using the CLI. Requires Angular CLI to be installed in the project. The command launches the app at http://localhost:4200/ and enables automatic reloads on source file changes. The command does not accept additional parameters in this documentation, but options can be added for customization.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/angular/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Array and Dictionary Type Checking - MuPDF.js JavaScript\nDESCRIPTION: Demonstrates checking whether a PDFObject is an array or dictionary using isArray() and isDictionary(). The method returns a boolean result, useful for performing type-based operations on PDFObjects.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = pdfObj.isArray();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = pdfObj.isDictionary();\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Methods Badge Tag - reStructuredText/HTML\nDESCRIPTION: Introduces an 'instance_method_tag' substitution in reStructuredText, which renders as a styled span labeled INSTANCE METHODS by injecting raw HTML. This approach enables visually distinct labeling for instance method sections when writing documentation. Outputs a span with class 'instance-method-tag'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |instance_method_tag| raw:: html\\n\\n   <span class=\\\"instance-method-tag\\\">INSTANCE METHODS</span>\n```\n\n----------------------------------------\n\nTITLE: Closing Path in JavaScript\nDESCRIPTION: Shows how to close the path by drawing a line to the last moveTo point using the closePath method.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npath.closePath();\n```\n\n----------------------------------------\n\nTITLE: PDF Content Stream Syntax Explanation\nDESCRIPTION: Explains the PDF syntax used for image manipulation with detailed comments for each operation in the content stream.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/coordinate-system/index.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nq                               % Save graphics state\n    200 0 0 200 10 10 cm        % Translate\n    /Image1 Do                  % Paintimage\nQ                               % Restore graphics state\n```\n\n----------------------------------------\n\nTITLE: Setting Open State of Annotation in JavaScript\nDESCRIPTION: Sets the open state of the annotation. Takes a boolean value as parameter.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.setIsOpen(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Choice Value in JavaScript\nDESCRIPTION: Sets the choice value for the widget, used for dropdown or list selection fields.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setChoiceValue(\"Yes\");\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Test File for MuPDF.js\nDESCRIPTION: HTML file that creates a worker to test the MuPDF.js library in browser context.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <script>\n        const worker = new Worker(\"worker.js\", { type: \"module\" });\n    </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: PDF Text Search Results Format - QuadPoints - JSON\nDESCRIPTION: Demonstrates the JSON structure returned by PDF text search, where each result consists of an array of floating-point rectangle coordinates (QuadPoints), indicating where in the PDF the match appears. Each array holds points for a single match. Input: none; Output: structured array as per MuPDF.js search API.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/document/index.rst#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n    [\n        [\n            97.44780731201172,\n            32.626708984375,\n            114.12963104248047,\n            32.626708984375,\n            97.44780731201172,\n            46.032958984375,\n            114.12963104248047,\n            46.032958984375\n        ]\n    ],\n    [\n        [\n            62.767799377441406,\n            68.626708984375,\n            79.44963073730469,\n            68.626708984375,\n            62.767799377441406,\n            82.032958984375,\n            79.44963073730469,\n            82.032958984375\n        ]\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Example Badge Tag - reStructuredText/HTML\nDESCRIPTION: Defines a reStructuredText substitution named 'example_tag' that produces a styled EXAMPLE badge using a raw HTML span element. This enables highlighting example sections in generated documentation with a consistent visual marker. Requires Sphinx/reStructuredText support for raw and substitution directives; outputs a span with class 'example-tag'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |example_tag| raw:: html\\n\\n   <span class=\\\"example-tag\\\">EXAMPLE</span>\n```\n\n----------------------------------------\n\nTITLE: Tinting Pixmap Colors in JavaScript\nDESCRIPTION: Tints all pixels in an RGB, BGR, or Gray pixmap by mapping black and white colors to the specified hex RGB values.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npixmap.tint(0xffff00, 0xffff00);\n```\n\n----------------------------------------\n\nTITLE: Copying Pages in PDF\nDESCRIPTION: Demonstrates copying pages within the same document and from other documents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.copyPage(0,-1)\n\nlet anotherDocument = mupdfjs.PDFDocument.openDocument(fs.readFileSync(\"test.pdf\"), \"application/pdf\")\ndocument.graftPage(-1, anotherDocument, 0)\n```\n\n----------------------------------------\n\nTITLE: Getting Open State of Annotation in JavaScript\nDESCRIPTION: Retrieves the open state of the annotation. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOpen = annotation.getIsOpen();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Font is Bold with MuPDF.js (JavaScript)\nDESCRIPTION: This code example demonstrates checking whether a given Font object is bold using MuPDF.js. The 'isBold' method returns a boolean indicating boldness. It assumes a Font instance is already available in the variable 'font'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar isBold = font.isBold();\n```\n\n----------------------------------------\n\nTITLE: Initializing mupdf-js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize the mupdf-js library prior to using its PDF handling functions. Historically, applications using mupdf-js required an asynchronous call to createMuPdf() before accessing library features. The example includes a wrapper function accepting a File object and shows the initialization sequence. With the new mupdf.js package, this step can be omitted as explicit initialization is no longer necessary.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/migration/index.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMuPdf } from \"mupdf-js\";\n\nasync function handleSomePdf(file: File) {\n  const mupdf = await createMuPdf(); // this is no longer needed\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DrawDevice instance in JavaScript\nDESCRIPTION: Creates a device for drawing into a Pixmap using an identity matrix. The DrawDevice is initialized with a Matrix and a Pixmap, where the Pixmap bounds should match the transformed page bounds or can be adjusted to draw only part of the page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DrawDevice.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar drawDevice = new mupdfjs.DrawDevice(mupdfjs.Matrix.identity, pixmap);\n```\n\n----------------------------------------\n\nTITLE: Extracting and Saving Page Images\nDESCRIPTION: Shows how to extract images from a PDF page and save them as JPEG files.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar imageStack = page.getImages()\n\nfor (var i in imageStack) {\n    var image = imageStack[i].image;\n    var pixmap = image.toPixmap();\n    let raster = pixmap.asJPEG(80);\n    fs.writeFileSync('image-'+i+'.jpg', raster);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting StructuredText as JSON in MuPDF.js in JavaScript\nDESCRIPTION: Demonstrates how to convert a structured text object to JSON format. The scale parameter allows adjusting coordinates for different resolutions.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StructuredText.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar json = sText.asJSON();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Metadata for SEO - reStructuredText Meta\nDESCRIPTION: Uses the 'meta' directive in reStructuredText to embed HTML meta tags for page description and keywords into the generated documentation. These tags enhance search engine optimization for the MuPDF.js documentation site. The fields set description and keywords relevant to MuPDF.js APIs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. meta::\\n   :description: MuPDF.js Developer documentation.\\n   :keywords: mupdf, wasm, pdf, document, api, split, merge, extract, view\n```\n\n----------------------------------------\n\nTITLE: Getting Pixmap Bounds in JavaScript\nDESCRIPTION: Retrieves the boundary rectangle of the pixmap as a Rect object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = pixmap.getBounds();\n```\n\n----------------------------------------\n\nTITLE: Extracting and Searching Text in PDF Pages with mupdf/tasks (JavaScript)\nDESCRIPTION: This code provides examples of using getPageText and searchPageText functions from mupdf/tasks to extract and search for text on specific PDF pages. After loading the document, getPageText(doc, 1) returns plain text for the first page, and searchPageText(doc, 1, \"some text\") returns an array of matches, each including bounding box coordinates. The approach streamlines text operations without requiring prior library initialization.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/migration/index.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  loadPDF,\n  getPageText,\n  searchPageText\n} from \"mupdf/tasks\";\n\nasync function handleSomePdf(file) {\n  const buf = await file.arrayBuffer();\n  const arrayBuf = new Uint8Array(buf);\n  const doc = loadPDF(arrayBuf);\n\n  // Returns plain text for the first page\n  const pageText = getPageText(doc, 1);\n\n  // Returns an array of objects with the bounding box for each match:\n  const searchResults = searchPageText(doc, 1, \"some text\");\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Stroke Miter Limit with getMiterLimit (MuPDF.js) - JavaScript\nDESCRIPTION: This code retrieves the current miter limit set in a StrokeState object using getMiterLimit. It returns a numeric value, indicating the parameter previously set via setMiterLimit. It is useful for examining configuration or ensuring stylistic consistency in path rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar limit = strokeState.getMiterLimit();\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is Grayscale (JavaScript, MuPDF.js)\nDESCRIPTION: Demonstrates the 'isGray' instance method, which checks whether a ColorSpace represents a grayscale color space. Accepts no arguments and returns a boolean. An instantiated ColorSpace is required; the result is true for grayscale spaces and false otherwise.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isGray();\n```\n\n----------------------------------------\n\nTITLE: Matrix Definition as 6-Element Array in Bash\nDESCRIPTION: This snippet illustrates the structure of a 3-by-3 transformation matrix used for geometric transformations such as scaling, translation, and rotation in MuPDF.js, represented as a 6-element array. The example shows the layout in matrix form; in JavaScript, this is mapped to [a,b,c,d,e,f]. The snippet serves as a reference for interpreting and creating transformation matrices.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/ a b 0 \\\n| c d 0 |\n\\ e f 1 /\n```\n\n----------------------------------------\n\nTITLE: Exporting Pixmap as PAM in JavaScript\nDESCRIPTION: Converts the pixmap to PAM format and returns it as a buffer.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = pixmap.asPAM();\n```\n\n----------------------------------------\n\nTITLE: Getting the String Representation of a ColorSpace (JavaScript, MuPDF.js)\nDESCRIPTION: Shows the usage of the 'toString' method on a ColorSpace object to retrieve its human-readable name. Requires a ColorSpace instance; here, DeviceRGB is used. Returns a string identifying the color space, aiding in debugging or UI display. No arguments required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar cs = mupdfjs.ColorSpace.DeviceRGB;\nvar name = cs.toString(); // \"[ColorSpace DeviceRGB]\"\n```\n\n----------------------------------------\n\nTITLE: Popping Clip Mask with MuPDF.js Device (JavaScript)\nDESCRIPTION: Reverts the most recent clipping region or mask, so that subsequent drawing is no longer constrained. No arguments are taken. PopClip is called after one or more clip or mask operations to restore default device drawing behavior.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.popClip();\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is Subtractive (JavaScript, MuPDF.js)\nDESCRIPTION: Uses the 'isSubtractive' method to determine if the given ColorSpace is a subtractive color space (like CMYK). The method returns a boolean, enabling code to distinguish between additive and subtractive color spaces for rendering or conversion processes.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isSubtractive();\n```\n\n----------------------------------------\n\nTITLE: Creating StrokeState Object with MuPDF.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a new StrokeState object using the MuPDF.js API. The object serves as a holder for stroke style configurations before applying them to drawing operations. No external dependencies are required apart from the MuPDF.js library itself. The resulting object can later be configured using setter methods and queried via getter methods.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar strokeState = new mupdfjs.StrokeState();\n```\n\n----------------------------------------\n\nTITLE: Clipping a Path using MuPDF.js Device (JavaScript)\nDESCRIPTION: Illustrates invoking a clip operation on a Device, where a Path object is used to set the clip region, with a transformation matrix and even-odd rule. Subsequent drawing is constrained to this clipped region until popClip is called. Essential for complex region masking in PDF page content rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.clipPath(path, true, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Getting Pixmap Width in JavaScript\nDESCRIPTION: Retrieves the width of the pixmap in pixels.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = pixmap.getWidth();\n```\n\n----------------------------------------\n\nTITLE: Testing if a ColorSpace is CMYK (JavaScript, MuPDF.js)\nDESCRIPTION: Utilizes the 'isCMYK' method on a ColorSpace instance, returning true if it represents a CMYK color space. No arguments are needed. This is typically used in workflows where color fidelity and print color management are necessary.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/ColorSpace.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar bool = colorSpace.isCMYK();\n```\n\n----------------------------------------\n\nTITLE: Ending a Blend Group with MuPDF.js Device (JavaScript)\nDESCRIPTION: Ends the transparency group begun by beginGroup and composites the result back into the underlying device with the specified blending mode and isolation. No arguments. Finalizes complex graphics layering within PDF content.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.endGroup();\n```\n\n----------------------------------------\n\nTITLE: Getting Pixmap Height in JavaScript\nDESCRIPTION: Retrieves the height of the pixmap in pixels.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar h = pixmap.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Loading a PDF Document with mupdf-js (JavaScript)\nDESCRIPTION: This code outlines the process for loading a PDF document using the original mupdf-js package. It involves initializing the library via createMuPdf(), converting the File input into an ArrayBuffer, wrapping it in a Uint8Array, and then loading the document via mupdf.load. All parameters and API calls are aligned with mupdf-js conventions. Usage of 'arrayBuffer' and typed arrays is essential to facilitate cross-environment compatibility.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/migration/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMuPdf } from \"mupdf-js\";\n\nasync function handleSomePdf(file) {\n  const mupdf = await createMuPdf();\n  const buf = await file.arrayBuffer();\n  const arrayBuf = new Uint8Array(buf);\n  const doc = mupdf.load(arrayBuf);\n}\n```\n\n----------------------------------------\n\nTITLE: PDFObjectPath Type Alias Declaration - MuPDF.js JavaScript\nDESCRIPTION: Defines the PDFObjectPath type as an array consisting of numbers, strings, or PDFObject instances. This type is used for specifying deep paths in PDF dictionary or array structures and is fundamental for path-based access to PDF data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntype PDFObjectPath = Array<number | string | PDFObject>;\n```\n\n----------------------------------------\n\nTITLE: Setting Package Module Type for Node.js Compatibility - JSON\nDESCRIPTION: Specifies the 'type' property in package.json as 'module' to ensure Node.js treats .js and .ts files as ECMAScript modules (ESM), making them compatible with the MuPDF.js module import system and modern TypeScript workflows. This is necessary when using .ts files for modules in TypeScript projects. The configuration should be added within the project's package.json file. No other properties or dependencies are affected.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/typescript/index.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\\\"type\\\": \\\"module\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style with setLineJoin (MuPDF.js) - JavaScript\nDESCRIPTION: This snippet demonstrates how to change the line join style for a StrokeState object via setLineJoin. The argument can be a string or a number related to enumerated join styles (such as 'Round'). The method configures how path segments are rendered at their junctions. Requires a StrokeState instance and a compatible argument.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstrokeState.setLineJoin(\"Round\");\n```\n\n----------------------------------------\n\nTITLE: Building MuPDF Libraries\nDESCRIPTION: Command to build the MuPDF libraries including the WASM module and associated TypeScript/JavaScript files.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Clearing Border Dash Pattern of Annotation in JavaScript\nDESCRIPTION: Clears the entire border dash pattern of the annotation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nannotation.clearBorderDash();\n```\n\n----------------------------------------\n\nTITLE: Exporting Pixmap as PNG in JavaScript\nDESCRIPTION: Converts the pixmap to PNG format and returns it as a buffer.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar buffer = pixmap.asPNG();\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Design for MuPDF.js Documentation\nDESCRIPTION: Command to install Sphinx Design, an extension that provides additional design components and layout options for Sphinx-generated documentation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install sphinx-design\n```\n\n----------------------------------------\n\nTITLE: Defining Static Methods Badge Tag - reStructuredText/HTML\nDESCRIPTION: Defines a substitution tag called 'static_method_tag' for use in reStructuredText, intended to label STATIC METHODS sections via styled HTML. This snippet facilitates uniform marking of static method documentation across MuPDF.js docs. It substitutes as a span with class 'static-method-tag'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |static_method_tag| raw:: html\\n\\n   <span class=\\\"static-method-tag\\\">STATIC METHODS</span>\n```\n\n----------------------------------------\n\nTITLE: Closing Device and Flushing Output in MuPDF.js with JavaScript\nDESCRIPTION: Closes the device, indicating that all drawing operations are complete, and flushes any buffered output. It is essential to ensure that the stack is clear before calling close to avoid incomplete rendering or resource leaks. This is typically the last operation performed on a device before releasing or discarding its resources.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.close();\n```\n\n----------------------------------------\n\nTITLE: Enumerating Available Stroke Constants (LINE_CAP and LINE_JOIN) - MuPDF.js - JavaScript\nDESCRIPTION: This code snippet shows the static enumeration arrays LINE_CAP and LINE_JOIN attached to the StrokeState class in MuPDF.js. These arrays list all supported line cap and join style names, enabling validation or programmatic selection when configuring strokes. The properties are read-only and require no instantiation, serving as canonical sources for argument values in the relevant setter methods.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstatic readonly LINE_CAP: LineCap[] = [\n    \"Butt\",\n    \"Round\",\n    \"Square\",\n    \"Triangle\"\n]\n\nstatic readonly LINE_JOIN: LineJoin[] = [\n    \"Miter\",\n    \"Round\",\n    \"Bevel\",\n    \"MiterXPS\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies and Building Project - Bash\nDESCRIPTION: This shell command installs all NPM dependencies and triggers the TypeScript/WebAssembly build process. It is the main entry point for a new developer to set up the MuPDF.js project. Running this command will compile and prepare the library for both browser and Node.js environments.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/BUILDING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Popup Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports a popup. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasPopup = annotation.hasPopup();\n```\n\n----------------------------------------\n\nTITLE: Converting PDFObject to Pretty String - MuPDF.js JavaScript\nDESCRIPTION: Illustrates converting a PDFObject to a formatted string using toString(). The return value is a string representation, optionally for debugging or display. There are no dependencies beyond the PDFObject instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFObject.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar str = pdfObj.toString();\n```\n\n----------------------------------------\n\nTITLE: Starting MuPDF.js Node Server\nDESCRIPTION: Commands to start the MuPDF.js Node server after building. The second command specifically starts the server.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/rest-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining Point Type Alias in JavaScript/TypeScript\nDESCRIPTION: This type alias defines a two-number array for points [x, y], standard throughout MuPDF.js for representing a 2D coordinate. Used for annotation, drawing, and geometric calculations. No dependencies required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntype Point = [number, number]\n```\n\n----------------------------------------\n\nTITLE: Running the Complete MuPDF.js Test Suite with npm in Shell\nDESCRIPTION: This snippet details the command for running all automated tests defined in the project, utilizing the npm script labeled 'test'. It is used for comprehensive verification of MuPDF.js via the test runner configured in the package.json file. The command has no extra parameters and outputs the results of all tests executed. Requires npm and the configured test runner dependencies in the project.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/tests/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Checking Author Presence for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation has an author. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasAuthor = annotation.hasAuthor();\n```\n\n----------------------------------------\n\nTITLE: Cropping PDF Pages\nDESCRIPTION: Shows how to crop a PDF page by setting its CropBox value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npage.setPageBox(\"CropBox\", [ 0, 0, 500, 500 ])\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTP Server for MuPDF.js Demo\nDESCRIPTION: Command to start a Python HTTP server in the mupdf.js directory to serve the demo files locally\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/super-simple-viewer/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Importing MuPDF.js Dependencies in TypeScript\nDESCRIPTION: Demonstrates the required import statements for using MuPDF.js in a TypeScript project. Imports both the file system module and MuPDF.js library.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/node-footer.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from \"fs\"\nimport * as mupdfjs from \"mupdf/mupdfjs\"\n```\n\n----------------------------------------\n\nTITLE: Running a DisplayList on a Device in MuPDF.js\nDESCRIPTION: Shows how to play back the recorded device calls onto a device with a transformation matrix.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayList.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndisplayList.run(device, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Creating a Scaling Matrix with Matrix.scale in JavaScript\nDESCRIPTION: This snippet demonstrates the use of mupdfjs.Matrix.scale for generating a scaling transformation matrix given X and Y scale factors. Parameters sx and sy specify scaling along each axis, and the returned value is a 6-element array usable for further geometric processing. Requires mupdfjs.Matrix utility functions.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Matrix.scale(2,2);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MuPDF.js Node Server\nDESCRIPTION: Command to install the required npm packages for the MuPDF.js Node server.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/rest-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Interior Color Support for Annotations in JavaScript\nDESCRIPTION: Determines if the annotation supports an interior color. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasInteriorColor = annotation.hasInteriorColor();\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTP Server with Python - Bash\nDESCRIPTION: This snippet demonstrates how to launch a simple HTTP server using Python's built-in module. It is required to serve the MuPDF.js demo files in a way that modern browsers will load their scripts correctly. Dependency: Python 3 must be installed. Run this command from the project's top-level directory using a terminal. Once running, files will be available at http://localhost:8000/ .\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/simple-viewer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Using Sphinx Autobuild for Live Updates of MuPDF.js Documentation\nDESCRIPTION: Command to use Sphinx Autobuild, which serves the documentation on localhost and automatically updates pages as edits are made. This is useful for active development of documentation.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-autobuild . _build/html\n```\n\n----------------------------------------\n\nTITLE: Defining Rect Type Alias in Bash\nDESCRIPTION: This line defines the Rect type for rectangles as an array of four numbers, typically representing [ulx,uly,lrx,lry] (upper left and lower right coordinates). Used extensively for representing page boxes, clipping regions, and annotation boundaries throughout MuPDF.js.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntype Rect = [number, number, number, number]\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help Reference - Shell\nDESCRIPTION: Demonstrates retrieving help information for Angular CLI commands. The 'ng help' command prints usage instructions and supported options for the CLI tools. It requires a valid installation of Angular CLI and outputs guidance directly in the terminal.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/angular/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Length of Widget Value in JavaScript\nDESCRIPTION: Retrieves the maximum allowed length for the string value of the widget.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFWidget.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar length = widget.getMaxLen();\n```\n\n----------------------------------------\n\nTITLE: Accessing MuPDF.js Demo in Browser\nDESCRIPTION: Command showing the URL to access the super-simple-viewer demo in Firefox browser\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/super-simple-viewer/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirefox http://localhost:8000/examples/super-simple-viewer/\n```\n\n----------------------------------------\n\nTITLE: Walking Through Path with Custom Functions in JavaScript\nDESCRIPTION: Demonstrates how to use the walk method to traverse a path with custom functions for different path operations. It includes examples of path printing and device tracing.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction print(...args) {\n    console.log(args.join(\" \"))\n}\n\nvar pathPrinter = {\n    moveTo: function (x,y) { print(\"moveTo\", x, y) },\n    lineTo: function (x,y) { print(\"lineTo\", x, y) },\n    curveTo: function (x1,y1,x2,y2,x3,y3) { print(\"curveTo\", x1, y1, x2, y2, x3, y3) },\n    closePath: function () { print(\"closePath\") },\n}\n\nvar traceDevice = {\n    fillPath: function (path, evenOdd, ctm, colorSpace, color, alpha) {\n        print(\"fillPath\", evenOdd, ctm, colorSpace, color, alpha)\n        path.walk(pathPrinter)\n    },\n    clipPath: function (path, evenOdd, ctm) {\n        print(\"clipPath\", evenOdd, ctm)\n        path.walk(pathPrinter)\n    },\n    strokePath: function (path, stroke, ctm, colorSpace, color, alpha) {\n        print(\"strokePath\", JSON.stringify(stroke), ctm, colorSpace, color, alpha)\n        path.walk(pathPrinter)\n    },\n    clipStrokePath: function (path, stroke, ctm) {\n        print(\"clipStrokePath\", JSON.stringify(stroke), ctm)\n        path.walk(pathPrinter)\n    }\n}\n\nvar doc = mupdfjs.PDFDocument.openDocument(fs.readFileSync(\"test.pdf\"), \"application/pdf\")\nvar page = doc.loadPage(0)\nvar device = new mupdfjs.Device(traceDevice)\npage.run(device, mupdfjs.Matrix.identity)\n```\n\n----------------------------------------\n\nTITLE: Implementing MuPDF Device Interface Methods in JavaScript\nDESCRIPTION: Defines a collection of device interface methods for PDF rendering operations. Methods handle operations like image masks, clipping, groups, tiles, layers, and document structures. Each method logs its function name and parameters using print statements.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    fillImageMask: function (image, ctm, colorSpace, color, alpha) {\n        print(\"fillImageMask\", image, ctm, colorSpace, color, alpha)\n    },\n    clipImageMask: function (image, ctm) {\n        print(\"clipImageMask\", image, ctm)\n    },\n    beginMask: function (area, luminosity, colorspace, color) {\n        print(\"beginMask\", area, luminosity, colorspace, color)\n    },\n    endMask: function () {\n        print(\"endMask\")\n    },\n    popClip: function () {\n        print(\"popClip\")\n    },\n    beginGroup: function (area, isolated, knockout, blendmode, alpha) {\n        print(\"beginGroup\", area, isolated, knockout, blendmode, alpha)\n    },\n    endGroup: function () {\n        print(\"endGroup\")\n    },\n    beginTile: function (area, view, xstep, ystep, ctm, id) {\n        print(\"beginTile\", area, view, xstep, ystep, ctm, id)\n        return 0\n    },\n    endTile: function () {\n        print(\"endTile\")\n    },\n    beginLayer: function (name) {\n        print(\"beginLayer\", name)\n    },\n    endLayer: function () {\n        print(\"endLayer\")\n    },\n    beginStructure: function (structure, raw, uid) {\n        print(\"beginStructure\", structure, raw, uid)\n    },\n    endStructure: function () {\n        print(\"endStructure\")\n    },\n    beginMetatext: function (meta, metatext) {\n        print(\"beginMetatext\", meta, metatext)\n    },\n    endMetatext: function () {\n        print(\"endMetatext\")\n    },\n    renderFlags: function (set, clear) {\n        print(\"renderFlags\", set, clear)\n    },\n    setDefaultColorSpaces: function (colorSpaces) {\n        print(\"setDefaultColorSpaces\", colorSpaces.getDefaultGray(),\n        colorSpaces.getDefaultRGB(), colorSpaces.getDefaultCMYK(),\n        colorSpaces.getOutputIntent())\n    },\n    close: function () {\n        print(\"close\")\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript Source Files with tsc - Shell\nDESCRIPTION: Demonstrates the command to invoke the TypeScript compiler (tsc) from the shell. This command transpiles TypeScript (.ts or .mts) files to JavaScript, using the configuration specified in tsconfig.json. Requires TypeScript to be installed (globally or as a project dependency). No arguments are required unless overriding defaults. Input files are determined automatically according to the 'include' or 'files' keys in tsconfig.json.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/typescript/index.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntsc\n```\n\n----------------------------------------\n\nTITLE: Checking if a Font is Italic with MuPDF.js (JavaScript)\nDESCRIPTION: This snippet illustrates how to determine if a MuPDF.js Font object is italic. The method 'isItalic' returns true if the font has italic styling. This function operates on a pre-existing Font instance.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Font.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar isItalic = font.isItalic();\n```\n\n----------------------------------------\n\nTITLE: Re-Building MuPDF.js Library with NPM - Bash\nDESCRIPTION: This command re-runs the project 'prepare' script to rebuild MuPDF.js. Use it if you have made changes to the source files or dependencies. The script typically recompiles the WebAssembly and TypeScript sources and outputs the updated builds to the 'dist' directory.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/BUILDING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prepare\n```\n\n----------------------------------------\n\nTITLE: Building Project for Production - Vite - Bash\nDESCRIPTION: Builds the Vue application using Vite for optimized production deployment. Generates build artifacts and places them in the dist directory. Requires all dependencies to be installed. Produces static files suitable for serving in production environments.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/vue/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting Page Annotations\nDESCRIPTION: Demonstrates how to retrieve annotations from a PDF page.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/how-to-guide/node/page/index.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst annots = page.getAnnotations()\nconsole.log(`Annotations=${annots}`)\n```\n\n----------------------------------------\n\nTITLE: Defining TODO Highlight Block - reStructuredText/HTML\nDESCRIPTION: Defines a TODO substitution that adds a visually distinct red-highlighted block via raw HTML, drawing attention to pending documentation tasks. Produces a div styled with red color, border, and padding to enhance visibility of 'TODO' markers during authoring or reviews.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_6\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |TODO| raw:: html\\n\\n   <div style=\\\"color:red;padding:10px;border:1px solid red;\\\">TODO</div>\n```\n\n----------------------------------------\n\nTITLE: Clipping with an Image Mask using MuPDF.js Device (JavaScript)\nDESCRIPTION: Applies an image as a mask to restrict all subsequent drawing to the shape of the given image, using a CTM for positioning. Suitable when bitmap shape masking is needed in a PDF page or canvas context. The mask is applied until a corresponding popClip call.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.clipImageMask(image, mupdfjs.Matrix.identity);\n```\n\n----------------------------------------\n\nTITLE: Cloning the MuPDF.js Repository\nDESCRIPTION: Git command to clone the MuPDF.js repository from GitHub.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/getting-started/index.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:ArtifexSoftware/mupdf.js.git\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - npm - Bash\nDESCRIPTION: Installs all project dependencies defined in the package.json using npm. Must be executed before running or building the application, as it sets up required packages for MuPDF integration, Vue, TypeScript, and Vite. No arguments required, and it must be run in the root project directory. On completion, all dependencies will be available in node_modules.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/vue/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle in Path using JavaScript\nDESCRIPTION: Demonstrates how to draw a rectangle using the rect method, which is a shorthand for a sequence of moveTo, lineTo, and closePath operations.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npath.rect(0,0,100,100);\n```\n\n----------------------------------------\n\nTITLE: Getting Length of a Buffer in MuPDF.js JavaScript\nDESCRIPTION: Illustrates how to obtain the number of bytes contained in a Buffer instance using the getLength() method. Assumes a valid Buffer object exists. The example returns an integer representing the size of the underlying data.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Buffer.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar length = buffer.getLength();\n```\n\n----------------------------------------\n\nTITLE: Including RST Templates for 404 Page in mupdf.js Documentation\nDESCRIPTION: This code includes the necessary header and footer templates for the 404 error page using reStructuredText directives. It demonstrates how to structure a simple error page with include directives.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/404.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: header-404.rst\n\n404!\n======\n\n\n**This page is not available.**\n\n\nPlease use the menu or search to find what you are looking for.\n\n.. include:: footer.rst\n```\n\n----------------------------------------\n\nTITLE: Creating a Translation Matrix with Matrix.translate in JavaScript\nDESCRIPTION: This snippet illustrates generating a translation matrix using mupdfjs.Matrix.translate, with tx and ty as translation values in the X and Y directions. Useful for shifting geometric objects. The method returns the standard 6-element array.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Matrix.translate(2,2);\n```\n\n----------------------------------------\n\nTITLE: Installing Pydata Sphinx Theme for MuPDF.js Documentation\nDESCRIPTION: Command to install the pydata theme for Sphinx, which is required for building the MuPDF.js documentation. This theme provides the visual styling for the generated HTML docs.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pydata-sphinx-theme\n```\n\n----------------------------------------\n\nTITLE: Stroking a Path using MuPDF.js Device (JavaScript)\nDESCRIPTION: This snippet shows how to stroke a path on a Device instance, requiring a Path object, StrokeState (defining dash patterns, line width, and cap style), transformation matrix, color space, stroke color, and alpha. The stroke styles offer flexibility in outlining paths, relevant for vector outlines in PDF rendering. The method expects all graphical state parameters and renders the outlined shape with the specified properties.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.strokePath(path,\n                          {dashes:[5,10], lineWidth:3, lineCap:'Round'},\n                          mupdfjs.Matrix.identity,\n                          mupdfjs.ColorSpace.DeviceRGB,\n                          [0,1,0],\n                          0.5);\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotation Matrix with Matrix.rotate in JavaScript\nDESCRIPTION: This snippet demonstrates creating a rotation matrix using mupdfjs.Matrix.rotate, taking an angle theta (presumably in degrees or radians as per library convention) and producing the corresponding transformation array. It is required for geometrically rotating points, shapes, or images.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Matrix.rotate(90);\n```\n\n----------------------------------------\n\nTITLE: Generating Project Components with Angular CLI - Shell\nDESCRIPTION: Demonstrates how to generate a new Angular component using the CLI tool. Before running, ensure Angular CLI is available in your environment. Replace 'component-name' with the desired component identifier. This approach can be extended to generate directives, pipes, services, classes, guards, interfaces, enums, and modules by substituting the type in the command.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/angular/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Drawing Cubic Bezier Curve with Start Point Control in JavaScript\nDESCRIPTION: Shows how to draw a cubic bezier curve using the curveToV method, which uses the start point and one control point.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npath.curveToV(0, 0, 100, 100);\n```\n\n----------------------------------------\n\nTITLE: Ending Device Tiling Pattern with JavaScript\nDESCRIPTION: Ends the current tiling pattern on a device object in MuPDF.js. This method is called to signify the conclusion of a tiling sequence in the graphics context, ensuring that the pattern state is properly closed. There are no parameters for this call, and it modifies the internal state of the device related to pattern rendering.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Device.rst#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndevice.endTile();\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Angular CLI - Shell\nDESCRIPTION: Explains how to launch end-to-end (E2E) tests for the Angular project via the CLI. To use this command, ensure a suitable E2E testing package (like Protractor or Cypress) is added to the project. The test framework and its configuration determine how tests are discovered and executed.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/angular/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Documenting File Path, Search, and Discord Link Issues - Raw HTML Comment\nDESCRIPTION: Documents in-file issues related to file path handling and hardcoded remote resources using HTML comments. Indicates reliance on hardcoded paths for remote RTD (ReadTheDocs) root and Discord image resources in the documentation theme. These comments do not affect the rendering but clarify technical decisions for maintainers.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- file path issue -->\\n<!-- note: we have to hard code the search path to the remote RTD root as the header is included in sub-dirs -->\\n<!-- this is also why we add a remote Discord image -->\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm in Shell\nDESCRIPTION: This snippet provides the command to install all project dependencies as defined in the package.json file, using npm. It is intended to set up the development environment for MuPDF.js before running any tests. No parameters are required; simply execute the command in the root directory, and it will download all necessary node modules. The main output is a populated node_modules directory. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/tests/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Getting DisplayList Bounds in MuPDF.js\nDESCRIPTION: Retrieves a rectangle containing the dimensions of the display list contents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/DisplayList.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = displayList.getBounds();\n```\n\n----------------------------------------\n\nTITLE: Installing Emscripten SDK with Bash (Shell) - Bash\nDESCRIPTION: This snippet demonstrates how to install and activate Emscripten SDK version 3.1.55 using terminal commands. Emscripten is a required dependency for building MuPDF.js. The install command downloads the specified version to /opt/emsdk, and the activate command switches to the installed version. These commands must be run before attempting to build the project.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/BUILDING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/opt/emsdk/emsdk install 3.1.55\n/opt/emsdk/emsdk activate 3.1.55\n```\n\n----------------------------------------\n\nTITLE: Running a Specific MuPDF.js Test File with npm in Shell\nDESCRIPTION: This command allows the user to execute only a single test file by specifying the test file path as an argument after the npm run test script. The output is test results for only the named file, aiding focused debugging or iterative testing. The snippet expects the parameter to be a valid path to a test file, typically in src/, such as src/journal.test.ts. Requires npm and all dependencies installed.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/tests/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test -- src/journal.test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MuPDF NextJS Client\nDESCRIPTION: Command to install the required npm dependencies for the NextJS client application.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/nextjs-client/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MuPDF.js using npm (Bash)\nDESCRIPTION: This snippet shows how to install the MuPDF.js library using npm from the command line. It also demonstrates setting the npm project type to ESM modules, which is required for using the mupdf package. Input is a shell command to be run in the terminal; no code dependencies other than Node.js and npm are required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/INSTALL.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mupdf\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm pkg set type=module\n```\n\n----------------------------------------\n\nTITLE: Drawing Line in Path using JavaScript\nDESCRIPTION: Shows how to draw a line to a specific coordinate using the lineTo method.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npath.lineTo(20,20);\n```\n\n----------------------------------------\n\nTITLE: Getting Color Space with getColorSpace - mupdf.js - JavaScript\nDESCRIPTION: Exemplifies retrieving the ColorSpace object linked to a mupdf.js Image by invoking getColorSpace(). The Image instance must already be available. Returns a ColorSpace object, representing the colorspace of the image. No parameters are given.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar cs = image.getColorSpace();\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Methods Badge Tag - reStructuredText/HTML\nDESCRIPTION: Creates a 'constructor_tag' substitution for reStructuredText documentation, which inserts a raw HTML badge labeled CONSTRUCTOR METHODS with a dedicated CSS class. Useful for marking sections related to constructor functions in documentation builds using Sphinx or similar tools. Inserts a span with class 'constructor-tag'.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |constructor_tag| raw:: html\\n\\n   <span class=\\\"constructor-tag\\\">CONSTRUCTOR METHODS</span>\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean PDF Objects in JavaScript\nDESCRIPTION: Creates a new boolean PDF object with the specified value and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newBoolean(true);\n```\n\n----------------------------------------\n\nTITLE: Hiding Feedback Form in Documentation Footer - JavaScript\nDESCRIPTION: This JavaScript snippet is used within a raw HTML block in the .rst documentation home page. It immediately hides the feedback form by setting the display CSS property of the DOM element with id 'feedbackHolder' to 'none'. It assumes that this element exists in the page's DOM and requires no other dependencies. This prevents the feedback form from appearing solely on the homepage, ensuring a cleaner landing experience.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/index.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script>document.getElementById(\\\"feedbackHolder\\\").style.display = \\\"none\\\";<\\/script>\n```\n\n----------------------------------------\n\nTITLE: Moving Path Pen in JavaScript\nDESCRIPTION: Demonstrates how to move the pen to a specific coordinate using the moveTo method.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Path.rst#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npath.moveTo(10, 10);\n```\n\n----------------------------------------\n\nTITLE: Building the Angular Project with CLI - Shell\nDESCRIPTION: Illustrates how to compile and bundle the Angular project using the build command. This requires a pre-configured Angular workspace and outputs the production-ready artifacts to the 'dist/' directory by default. The command can be customized with additional flags for development or production builds.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/angular/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Serving Example HTML Files with Python HTTP Server (Bash)\nDESCRIPTION: This snippet uses Python's built-in HTTP server module to serve files from the current directory and then opens the HTML example in Firefox. It is intended for local development and testing of the example browser code with MuPDF.js. Requirements: Python installed and Firefox browser. Outputs: HTTP server runs at http://localhost:8000/.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/INSTALL.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server &\n```\n\nLANGUAGE: bash\nCODE:\n```\nfirefox http://localhost:8000/example.html\n```\n\n----------------------------------------\n\nTITLE: Checking Open State Support for Annotation in JavaScript\nDESCRIPTION: Determines if the annotation supports an open state. Returns a boolean value.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasOpen = annotation.hasOpen();\n```\n\n----------------------------------------\n\nTITLE: Building MuPDF.js Node Server\nDESCRIPTION: Command to build the MuPDF.js Node server, compiling TypeScript files.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/rest-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting Line Join Style with getLineJoin (MuPDF.js) - JavaScript\nDESCRIPTION: This code retrieves the current line join style of a StrokeState object with getLineJoin, returning a numeric value referencing the class's join enumeration array. Useful for inspection or conditional logic within rendering workflows, it expects a previously constructed StrokeState object.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StrokeState.rst#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineJoin = strokeState.getLineJoin();\n```\n\n----------------------------------------\n\nTITLE: Running Development Server - Vite - Bash\nDESCRIPTION: Starts the Vite development server so developers can preview and hot-reload the application at http://localhost:5173/. Depends on prior installation of all dependencies via npm. Allows iterative development with immediate browser refresh on source file changes. Must be run from the root project folder.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/vue/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules for MuPDF Library - Bash\nDESCRIPTION: This snippet updates and initializes the MuPDF submodule required for the build. The git command ensures that the 'libmupdf' submodule and any nested submodules are fully populated. This is a prerequisite for building MuPDF.js and should be executed if the build fails due to missing source files.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/BUILDING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Properties Badge Tag - reStructuredText/HTML\nDESCRIPTION: Provides a 'instance_property_tag' reStructuredText substitution that injects a span with the INSTANCE PROPERTIES label, used for consistent documentation styling of property sections in MuPDF.js docs. Integrates raw HTML for enhanced section labeling. Requires Sphinx and raw directive support.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |instance_property_tag| raw:: html\\n\\n   <span class=\\\"instance-properties-tag\\\">INSTANCE PROPERTIES</span>\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Angular CLI and Karma - Shell\nDESCRIPTION: Details how to execute unit tests for the Angular project using the CLI, leveraging the Karma test runner. This command requires a configured Karma setup, typically present in Angular CLI-generated projects. All unit tests in the application are automatically discovered and run.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/examples/angular/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Adding Glyph to Text Object in MuPDF.js\nDESCRIPTION: Shows how to add glyphs to a text object, including handling ligatures with n-to-m cluster mappings.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Text.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntext.showGlyph(new mupdfjs.Font(\"Times-Roman\"), mupdfjs.Matrix.identity, 21, 0x66, 0);\ntext.showGlyph(new mupdfjs.Font(\"Times-Roman\"), mupdfjs.Matrix.identity, -1, 0x69, 0);\n```\n\n----------------------------------------\n\nTITLE: Extracting Mask Image with getMask - mupdf.js - JavaScript\nDESCRIPTION: Shows usage of the getMask() method to retrieve an additional Image object serving as the mask for the current Image. Input is an existing Image instance. The return value is either an Image instance (mask) or null if no mask applies.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Image.rst#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.getMask();\n```\n\n----------------------------------------\n\nTITLE: Getting Pixmap ColorSpace in JavaScript\nDESCRIPTION: Retrieves the ColorSpace object associated with the pixmap.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar cs = pixmap.getColorSpace();\n```\n\n----------------------------------------\n\nTITLE: Getting Y Resolution in JavaScript\nDESCRIPTION: Retrieves the y-axis resolution of the pixmap in dots per inch.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar yRes = pixmap.getYResolution();\n```\n\n----------------------------------------\n\nTITLE: Applying Gamma Correction in JavaScript\nDESCRIPTION: Applies gamma correction to all pixmap components except alpha. Values between 0.1 and 1 darken the image, while values between 1 and 10 lighten it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/Pixmap.rst#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npixmap.gamma(3.5);\n```\n\n----------------------------------------\n\nTITLE: Styling Documentation TOC Drawer and Main Content - HTML/CSS\nDESCRIPTION: This snippet applies CSS rules using a raw HTML block embedded in an .rst file to hide the documentation table of contents drawer and set the main content area width to 100%. No external dependencies are required as the <style> tag is used inline. This ensures that on the documentation homepage, the sidebar TOC is not displayed and the content stretches across the page, enhancing readability for landing users.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/index.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n\\n   .toc-drawer {\\n      display: none;\\n   }\\n\\n   .main .content {\\n      width:  100% !important;\\n   }\\n\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Concatenating Two Transformation Matrices with Matrix.concat in JavaScript\nDESCRIPTION: This snippet shows the use of mupdfjs.Matrix.concat for combining two transformation matrices via multiplication (note: not commutative). The parameters are two 6-element arrays, and the result is a new transformation matrix. Essential for composing multiple geometric operations in sequence.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Matrix.concat([1,1,1,1,1,1], [2,2,2,2,2,2]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Redaction Annotation to a PDF Page with MuPDF.js in JavaScript\nDESCRIPTION: Generates a redaction rectangle on the page at specified coordinates using addRedaction. Expects a metrics object with x, y, width, and height properties. Returns a PDFAnnotation instance. The annotation must be applied with applyRedactions for the redacted effect.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFPage.rst#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet redactionAnnotation = page.addRedaction({x:100, y:200, width:300, height:50})\n```\n\n----------------------------------------\n\nTITLE: Deleting Current OutlineItem Using OutlineIterator in JavaScript\nDESCRIPTION: Exhibits the delete() method to remove the item at the iterator's current position. Requires no parameters. The iterator automatically moves to the next item. Returns 0 if the new position is valid, 1 otherwise. Useful for dynamically pruning outline entries.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/OutlineIterator.rst#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\noutlineIterator.delete();\n```\n\n----------------------------------------\n\nTITLE: Inverting a Transformation Matrix with Matrix.invert in JavaScript\nDESCRIPTION: This snippet demonstrates using mupdfjs.Matrix.invert to compute the inverse of a given 6-element transformation matrix. It is particularly important for reverting transformed coordinates to their original states. The function requires a valid matrix array as input and returns its inverse or possibly throws if not invertible.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = mupdfjs.Matrix.invert([1,0.5,1,1,1,1]);\n```\n\n----------------------------------------\n\nTITLE: Checking If a Rectangle is Empty with Rect.isEmpty in JavaScript\nDESCRIPTION: This example demonstrates mupdfjs.Rect.isEmpty, which determines whether a supplied rectangle [x1,y1,x2,y2] is empty. The function returns a boolean. Used for validation and layout logic where zero-area rectangles must be detected. Input is a four-number array.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEmpty = mupdfjs.Rect.isEmpty([0,0,0,0]); // true\nvar isEmpty = mupdfjs.Rect.isEmpty([0,0,100,100]); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Quad Type Alias in JavaScript/TypeScript\nDESCRIPTION: This snippet defines the Quad type as an eight-number array, where pairs of elements represent the X,Y coordinates of quad corners. This is used for highlighting, selecting regions, or representing quadrilaterals, such as those used in annotation highlight quadrants in PDF files.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntype Quad = [number, number, number, number, number, number, number, number]\n```\n\n----------------------------------------\n\nTITLE: Defining PageBox Type as a String Union in JavaScript/TypeScript\nDESCRIPTION: This snippet defines the PageBox type as a string union for the five main PDF page box types (MediaBox, CropBox, BleedBox, TrimBox, ArtBox). Used for specifying or querying paper or layout boundaries in PDF APIs. No dependencies required.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntype PageBox = \"MediaBox\" | \"CropBox\" | \"BleedBox\" | \"TrimBox\" | \"ArtBox\"\n```\n\n----------------------------------------\n\nTITLE: Searching Text in StructuredText with MuPDF.js in JavaScript\nDESCRIPTION: Demonstrates how to search for specific text within a structured text object. The method returns an array of arrays containing QuadPoints that cover the matching text.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/StructuredText.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = sText.search(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Defining Page Label Rule Interface - JavaScript\nDESCRIPTION: This snippet defines the structure of a JavaScript interface named PageLabelRule, which represents the schema for assigning labels to PDF pages in MuPDF.js. It requires a numeric startpage and optionally supports a prefix, a style, and the first page number. The interface is used to specify custom labeling rules when manipulating or displaying PDF page labels via the API.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/glossary/index.rst#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ninterface PageLabelRule {\n    startpage: number;\n    prefix?: string;\n    style?: string;\n    firstpagenum?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for MuPDF.js in TypeScript\nDESCRIPTION: This snippet imports the Node.js file system module (\\\"fs\\\") and the MuPDF.js library for use in a TypeScript file. Both imports are necessary for file operations and PDF manipulation through MuPDF.js in subsequent code samples. No additional parameters are required; the snippet sets up prerequisites for all further MuPDF.js TypeScript example code that interacts with files or PDF documents.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/footer.rst#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from \\\"fs\\\"\\nimport * as mupdfjs from \\\"mupdf/mupdfjs\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating Indirect PDF Objects in JavaScript\nDESCRIPTION: Creates a new indirect PDF object reference with the specified object number and returns it.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFDocument.rst#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = pdfDocument.newIndirect(100);\n```\n\n----------------------------------------\n\nTITLE: Getting Border Effect Intensity - MuPDF.js JavaScript\nDESCRIPTION: Retrieves the numeric intensity value of the border effect for the annotation. The value is typically between 0 and 2 inclusive, affecting visual prominence. Returns a number.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = annotation.getBorderEffectIntensity();\n```\n\n----------------------------------------\n\nTITLE: Checking Annotation Vertex Support - MuPDF.js JavaScript\nDESCRIPTION: Verifies if a polygon or polyline annotation supports vertex manipulation. The result is a boolean. Allows conditional logic for complex shape editing.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/classes/PDFAnnotation.rst#_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasVertices = annotation.hasVertices();\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Copy Button for MuPDF.js Documentation\nDESCRIPTION: Command to install Sphinx Copy Button, an extension that adds a copy button to code blocks in the generated HTML documentation, improving user experience.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install sphinx-copybutton\n```\n\n----------------------------------------\n\nTITLE: Building All HTML Documentation with Assets for MuPDF.js\nDESCRIPTION: Command to build all HTML documentation, including updated assets from the '_static' directory. This is important when CSS or other static files have been modified.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -a -b html . build/html\n```\n\n----------------------------------------\n\nTITLE: Defining Page Spacer Divider - reStructuredText/HTML\nDESCRIPTION: Introduces a 'page_spacer' substitution that adds a styled horizontal divider via raw HTML. Used to visually separate content or sections within the documentation. The inserted code produces a div containing an <hr> tag with margin styling applied.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |page_spacer| raw:: html\\n\\n   <div class=\\\"page-spacer\\\" style=\\\"margin:40px 0 20px;\\\"><hr/></div>\n```\n\n----------------------------------------\n\nTITLE: Custom Search and Discord UI Elements - Raw HTML\nDESCRIPTION: This raw HTML block provides a styled search bar and Discord invitation section for inclusion in the MuPDF.js documentation site. The search form posts to 'search.html', while the Discord link includes an SVG logo and links to the community channel. Intended for embedding modern interactive UI elements directly in Sphinx builds; relies on standard HTML/CSS; note that the SVG is inlined for styling the Discord logo.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header.rst#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div style=\\\"display:flex;justify-content:space-between;align-items: center;\\\">\\n    <form class=\\\"sidebar-search-container top\\\" method=\\\"get\\\" action=\\\"/en/latest/search.html\\\" role=\\\"search\\\" style=\\\"width:75%\\\">\\n      <input class=\\\"sidebar-search\\\" placeholder=\\\"Search\\\" name=\\\"q\\\" aria-label=\\\"Search\\\">\\n      <input type=\\\"hidden\\\" name=\\\"check_keywords\\\" value=\\\"yes\\\">\\n      <input type=\\\"hidden\\\" name=\\\"area\\\" value=\\\"default\\\">\\n    </form>\\n</div>\\n\\n<div style=\\\"display:flex;justify-content:space-between;align-items:center;margin-top:20px;\\\">\\n    <div class=\\\"discordLink\\\" style=\\\"display:flex;align-items:center;margin-top: -5px;\\\">\\n        <a href=\\\"https://discord.gg/zpyAHM7XtF\\\" id=\\\"findOnDiscord\\\" target=_blank>Find <b>#mupdf.js</b> on <b>Discord</b></a>\\n        <a href=\\\"https://discord.gg/zpyAHM7XtF\\\" target=_blank>\\n        \\n            <div style=\\\"width:30px;height:30px;margin-left:5px;\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 127.14 96.36\\\">\\n                    <defs>\\n                        <style>.discordLogoFill{fill:#5865f2;}</style>\\n                    </defs>\\n                    <g id=\\\"Discord_Logo\\\" data-name=\\\"Discord Logo\\\">\\n                        <path class=\\\"discordLogoFill\\\" d=\\\"M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z\\\"/>\\n                    </g>\\n                </svg>\\n            </div>\\n        </a>\\n    </div>\\n\\n\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Form in HTML for MuPDF.js Documentation\nDESCRIPTION: This HTML snippet creates a search form for the MuPDF.js documentation. It includes a text input for search queries and hidden inputs for additional search parameters. The form is styled using flexbox for layout.\nSOURCE: https://github.com/artifexsoftware/mupdf.js/blob/master/docs/header-404.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display:flex;justify-content:space-between;align-items: center;\">\n    <form class=\"sidebar-search-container top\" method=\"get\" action=\"/en/latest/search.html\" role=\"search\" style=\"width:100%\">\n      <input class=\"sidebar-search\" placeholder=\"Search\" name=\"q\" aria-label=\"Search\">\n      <input type=\"hidden\" name=\"check_keywords\" value=\"yes\">\n      <input type=\"hidden\" name=\"area\" value=\"default\">\n    </form>\n</div>\n```"
  }
]