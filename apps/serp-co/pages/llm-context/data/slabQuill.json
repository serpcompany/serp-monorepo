[
  {
    "owner": "slab",
    "repo": "quill",
    "content": "TITLE: Configuring Quill Editor Options in JavaScript\nDESCRIPTION: This code demonstrates how to configure various Quill editor options including debug level, modules, placeholder text, and theme.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/configuration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  debug: 'info',\n  modules: {\n    toolbar: true,\n  },\n  placeholder: 'Compose an epic...',\n  theme: 'snow'\n};\nconst quill = new Quill('#editor', options);\n```\n\n----------------------------------------\n\nTITLE: Setting Quill Editor Contents\nDESCRIPTION: Shows how to overwrite the entire contents of the Quill editor using the setContents method. This method takes a Delta object and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetContents(delta: Delta, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setContents([\n  { insert: 'Hello ' },\n  { insert: 'World!', attributes: { bold: true } },\n  { insert: '\\n' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic Quill editor instance using HTML for the structure and JavaScript for initialization. It includes the necessary stylesheet, toolbar buttons, editor container, and JavaScript code to create a new Quill object with a snow theme.\nSOURCE: https://github.com/slab/quill/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Include Quill stylesheet -->\n<link\n  href=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.snow.css\"\n  rel=\"stylesheet\"\n/>\n\n<!-- Create the toolbar container -->\n<div id=\"toolbar\">\n  <button class=\"ql-bold\">Bold</button>\n  <button class=\"ql-italic\">Italic</button>\n</div>\n\n<!-- Create the editor container -->\n<div id=\"editor\">\n  <p>Hello World!</p>\n  <p>Some initial <strong>bold</strong> text</p>\n  <p><br /></p>\n</div>\n\n<!-- Include the Quill library -->\n<script src=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.js\"></script>\n\n<!-- Initialize Quill editor -->\n<script>\n  const quill = new Quill(\"#editor\", {\n    theme: \"snow\",\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Quill Toolbar Configuration with Various Options in JavaScript\nDESCRIPTION: This extensive example showcases a comprehensive toolbar configuration for Quill. It includes various button types, dropdowns, and formatting options, demonstrating the full range of toolbar customization possibilities.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbarOptions = [\n  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n  ['blockquote', 'code-block'],\n  ['link', 'image', 'video', 'formula'],\n\n  [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n  [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],\n  [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n  [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\n  [{ 'direction': 'rtl' }],                         // text direction\n\n  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n\n  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n  [{ 'font': [] }],\n  [{ 'align': [] }],\n\n  ['clean']                                         // remove formatting button\n];\n\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: toolbarOptions\n  },\n  theme: 'snow'\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with Full Toolbar Configuration\nDESCRIPTION: Demonstrates setting up a Quill editor instance with a comprehensive toolbar containing all supported formatting options. Includes HTML structure for toolbar controls and JavaScript initialization with syntax highlighting and Snow theme.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/formats.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/styles.css\" rel=\"stylesheet\" />\n<link href=\"{{site.cdn}}/quill.snow.css\" rel=\"stylesheet\" />\n<script src=\"{{site.highlightjs}}/highlight.min.js\"></script>\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<link\n  rel=\"stylesheet\"\n  href=\"{{site.highlightjs}}/styles/atom-one-dark.min.css\"\n/>\n<script src=\"{{site.katex}}/katex.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.katex}}/katex.min.css\" />\n\n<div id=\"toolbar-container\">\n  <span class=\"ql-formats\">\n    <select class=\"ql-font\"></select>\n    <select class=\"ql-size\"></select>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-bold\"></button>\n    <button class=\"ql-italic\"></button>\n    <button class=\"ql-underline\"></button>\n    <button class=\"ql-strike\"></button>\n  </span>\n  <span class=\"ql-formats\">\n    <select class=\"ql-color\"></select>\n    <select class=\"ql-background\"></select>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-script\" value=\"sub\"></button>\n    <button class=\"ql-script\" value=\"super\"></button>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-header\" value=\"1\"></button>\n    <button class=\"ql-header\" value=\"2\"></button>\n    <button class=\"ql-blockquote\"></button>\n    <button class=\"ql-code-block\"></button>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-list\" value=\"ordered\"></button>\n    <button class=\"ql-list\" value=\"bullet\"></button>\n    <button class=\"ql-indent\" value=\"-1\"></button>\n    <button class=\"ql-indent\" value=\"+1\"></button>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-direction\" value=\"rtl\"></button>\n    <select class=\"ql-align\"></select>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-link\"></button>\n    <button class=\"ql-image\"></button>\n    <button class=\"ql-video\"></button>\n    <button class=\"ql-formula\"></button>\n  </span>\n  <span class=\"ql-formats\">\n    <button class=\"ql-clean\"></button>\n  </span>\n</div>\n<div id=\"editor\">\n</div>\n\n<!-- Initialize Quill editor -->\n<script>\n  const quill = new Quill('#editor', {\n    modules: {\n      syntax: true,\n      toolbar: '#toolbar-container',\n    },\n    placeholder: 'Compose an epic...',\n    theme: 'snow',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with Default Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a basic Quill editor with default settings. It creates a new Quill instance, attaches it to an HTML element with the ID 'editor', enables the toolbar module, and applies the 'snow' theme.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/why-quill.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: { toolbar: true },\n  theme: 'snow'\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Modules from Quill Instance\nDESCRIPTION: Demonstrates the getModule() method which retrieves a module that has been added to the editor. This allows direct access to module functionality after Quill initialization.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst toolbar = quill.getModule('toolbar');\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Toolbar with Custom Container and Handlers in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Quill with a custom toolbar container and handlers. It shows the basic configuration for the toolbar module, including specifying a container selector and custom handler for the bold format.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: {\n      container: '#toolbar', // Selector for toolbar container\n      handlers: {\n        bold: customBoldHandler\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to set up the Quill editor in an HTML file. It includes the required stylesheet, creates a container for the editor, loads the Quill library, and initializes the editor with a snow theme. The initial content of the editor is also defined within the HTML.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Include stylesheet -->\n<link href=\"{{site.cdn}}/quill.snow.css\" rel=\"stylesheet\" />\n\n<!-- Create the editor container -->\n<div id=\"editor\">\n  <p>Hello World!</p>\n  <p>Some initial <strong>bold</strong> text</p>\n  <p><br /></p>\n</div>\n\n<!-- Include the Quill library -->\n<script src=\"{{site.cdn}}/quill.js\"></script>\n\n<!-- Initialize Quill editor -->\n<script>\n  const quill = new Quill('#editor', {\n    theme: 'snow'\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill with Full Build via CDN in HTML\nDESCRIPTION: This snippet demonstrates how to include Quill's full build using a CDN, set up a basic editor with the Snow theme, and initialize Quill. It includes both the JavaScript library and CSS stylesheet.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<link href=\"{{site.cdn}}/quill.snow.css\" rel=\"stylesheet\">\n\n<div id=\"editor\">\n  <h2>Demo Content</h2>\n  <p>Preset build with <code>snow</code> theme, and some common formats.</p>\n</div>\n\n<script>\n  const quill = new Quill('#editor', {\n    theme: 'snow'\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quill Editor Contents\nDESCRIPTION: Shows how to retrieve the contents of the Quill editor, including formatting data, represented as a Delta object. The getContents method can optionally specify a range to retrieve.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContents(index: number = 0, length: number = remaining): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst delta = quill.getContents();\n```\n\n----------------------------------------\n\nTITLE: Inserting Text with Formatting in Quill\nDESCRIPTION: Demonstrates how to insert text with optional formatting into the Quill editor using the insertText method. This method can apply multiple formats and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninsertText(index: number, text: string, source: string = 'api'): Delta\ninsertText(index: number, text: string, format: string, value: any,\n           source: string = 'api'): Delta\ninsertText(index: number, text: string, formats: { [name: string]: any },\n           source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.insertText(0, 'Hello', 'bold', true);\n\nquill.insertText(5, 'Quill', {\n  color: '#ffff00',\n  italic: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in Quill\nDESCRIPTION: Shows how to use the on() method to add an event handler for Quill events. This example adds a handler for the text-change event that logs a message when text changes occur.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nquill.on('text-change', () => {\n  console.log('Text change!');\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Lines in Quill Editor\nDESCRIPTION: Shows how to format all lines in a given range of the Quill editor using the formatLine method. This method is used for line-level formats and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nformatLine(index: number, length: number, source: string = 'api'): Delta\nformatLine(index: number, length: number, format: string, value: any,\n           source: string = 'api'): Delta\nformatLine(index: number, length: number, formats: { [name: string]: any },\n           source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello\\nWorld!\\n');\n\nquill.formatLine(1, 2, 'align', 'right');   // right aligns the first line\nquill.formatLine(4, 4, 'align', 'center');  // center aligns both lines\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with CSS Selector in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a Quill editor instance by passing a CSS selector to target the container element.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor');  // First matching element will be used\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Format with Quill - TypeScript\nDESCRIPTION: This snippet documents the `getFormat` method of the Quill editor, which retrieves the formatting applied to a range of text. It can be used without parameters to get the formatting of the current selection or with parameters to specify a particular range. Dependencies include having the Quill editor instance ready. Inputs are the range index and length, and the output is a record of formatting options applied within the range.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetFormat(range: Range = current): Record<string, unknown>\ngetFormat(index: number, length: number = 0): Record<string, unknown>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello World!');\nquill.formatText(0, 2, 'bold', true);\nquill.formatText(1, 2, 'italic', true);\nquill.getFormat(0, 2);   // { bold: true }\nquill.getFormat(1, 1);   // { bold: true, italic: true }\n\nquill.formatText(0, 2, 'color', 'red');\nquill.formatText(2, 1, 'color', 'blue');\nquill.getFormat(0, 3);   // { color: ['red', 'blue'] }\n\nquill.setSelection(3);\nquill.getFormat();       // { italic: true, color: 'blue' }\n\nquill.format('strike', true);\nquill.getFormat();       // { italic: true, color: 'blue', strike: true }\n\nquill.formatLine(0, 1, 'align', 'right');\nquill.getFormat();       // { italic: true, color: 'blue', strike: true,\n                         //   align: 'right' }\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Content into Quill Editor\nDESCRIPTION: Shows how to use the dangerouslyPasteHTML method to insert HTML content into the Quill editor at a specific index. This method interprets the HTML using Clipboard matchers and inserts the resulting content.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/clipboard.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nquill.setText('Hello!');\n\nquill.clipboard.dangerouslyPasteHTML(5, '&nbsp;<b>World</b>');\n// Editor is now '<p>Hello&nbsp;<strong>World</strong>!</p>';\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill with Core Build via CDN in HTML\nDESCRIPTION: This example shows how to use Quill's core build from a CDN. It includes only the essential core CSS and JavaScript, allowing for a more customized setup without pre-built themes or modules.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{{site.cdn}}/quill.core.css\" rel=\"stylesheet\">\n<script src=\"{{site.cdn}}/quill.core.js\"></script>\n\n<div id=\"editor\">\n  <p>Core build with no theme, formatting, non-essential modules</p>\n</div>\n\n<script>\n  const quill = new Quill('#editor');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting HTML Representation of Quill Contents\nDESCRIPTION: Demonstrates how to get the HTML representation of the Quill editor contents using the getSemanticHTML method. This is useful for exporting editor contents in HTML format.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetSemanticHTML(index: number = 0, length: number = remaining): string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst html = quill.getSemanticHTML(0, 10);\n```\n\n----------------------------------------\n\nTITLE: Setting Plain Text in Quill Editor\nDESCRIPTION: Demonstrates how to set the contents of the Quill editor with plain text using the setText method. This method automatically adds a newline if omitted and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetText(text: string, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello\\n');\n```\n\n----------------------------------------\n\nTITLE: Updating Quill Editor Contents\nDESCRIPTION: Shows how to apply a Delta to the existing contents of the Quill editor using the updateContents method. This method returns a Delta representing the change and can be used for complex content updates.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nupdateContents(delta: Delta, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming editor currently contains [{ insert: 'Hello World!' }]\nquill.updateContents(new Delta()\n  .retain(6)                  // Keep 'Hello '\n  .delete(5)                  // 'World' is deleted\n  .insert('Quill')\n  .retain(1, { bold: true })  // Apply bold to exclamation mark\n);\n// Editor should now be [\n//  { insert: 'Hello Quill' },\n//  { insert: '!', attributes: { bold: true} }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Adding Key Binding in Quill JavaScript\nDESCRIPTION: Demonstrates how to add a key binding to Quill for formatting text. The example shows binding the 'Ctrl+B' (or 'Cmd+B' on Mac) shortcut to apply bold formatting.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nquill.keyboard.addBinding({\n  key: 'b',\n  shortKey: true\n}, function(range, context) {\n  this.quill.formatText(range, 'bold', true);\n});\n\n// addBinding may also be called with one parameter,\n// in the same form as in initialization\nquill.keyboard.addBinding({\n  key: 'b',\n  shortKey: true,\n  handler: function(range, context) {\n\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Toolbar for Quill and Initializing Editor in HTML/JavaScript\nDESCRIPTION: This example demonstrates how to create a custom HTML toolbar for Quill and initialize the editor with it. It includes a font size dropdown, bold button, and subscript/superscript buttons, showing how to structure the HTML and link it to Quill.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- Create toolbar container -->\n<div id=\"toolbar\">\n  <!-- Add font size dropdown -->\n  <select class=\"ql-size\">\n    <option value=\"small\"></option>\n    <!-- Note a missing, thus falsy value, is used to reset to default -->\n    <option selected></option>\n    <option value=\"large\"></option>\n    <option value=\"huge\"></option>\n  </select>\n  <!-- Add a bold button -->\n  <button class=\"ql-bold\"></button>\n  <!-- Add subscript and superscript buttons -->\n  <button class=\"ql-script\" value=\"sub\"></button>\n  <button class=\"ql-script\" value=\"super\"></button>\n</div>\n<div id=\"editor\"></div>\n\n<!-- Initialize editor with toolbar -->\n<script>\n  const quill = new Quill('#editor', {\n    modules: {\n      toolbar: '#toolbar'\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Modules in JavaScript\nDESCRIPTION: This snippet shows how to enable and configure Quill modules when initializing a new Quill editor instance. It demonstrates setting custom configurations for the history module and enabling the syntax module with default settings.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    history: {          // Enable with custom configurations\n      delay: 2500,\n      userOnly: true\n    },\n    syntax: true        // Enable with default configuration\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text from Quill Editor\nDESCRIPTION: Shows how to retrieve the string contents of the Quill editor using the getText method. This method can optionally specify a range and omits non-string content.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetText(index: number = 0, length: number = remaining): string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = quill.getText(0, 10);\n```\n\n----------------------------------------\n\nTITLE: Inserting Embedded Content in Quill\nDESCRIPTION: Shows how to insert embedded content into the Quill editor using the insertEmbed method. This method inserts content at a specified index and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninsertEmbed(index: number, type: string, value: any, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.insertEmbed(10, 'image', 'https://quilljs.com/images/cloud.png');\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Modules in Quill\nDESCRIPTION: Shows how to register a custom module in Quill using the register() method. Registered modules can be later retrieved with Quill.import() and added to an editor instance.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst Module = Quill.import('core/module');\n\nclass CustomModule extends Module {}\n\nQuill.register('modules/custom-module', CustomModule);\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in Quill Editor\nDESCRIPTION: Demonstrates how to format text in the Quill editor using the formatText method. This method can apply multiple formats to a range of text and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nformatText(index: number, length: number, source: string = 'api'): Delta\nformatText(index: number, length: number, format: string, value: any,\n           source: string = 'api'): Delta\nformatText(index: number, length: number, formats: { [name: string]: any },\n           source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello\\nWorld!\\n');\n\nquill.formatText(0, 5, 'bold', true);      // bolds 'hello'\n\nquill.formatText(0, 5, {                   // unbolds 'hello' and set its color to blue\n  'bold': false,\n  'color': 'rgb(0, 0, 255)'\n});\n\nquill.formatText(5, 1, 'align', 'right');  // right aligns the 'hello' line\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill with Simple Toolbar Options Array in JavaScript\nDESCRIPTION: This example shows how to initialize Quill with a simple array of toolbar options. It defines basic formatting controls like bold, italic, underline, and strike.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbarOptions = ['bold', 'italic', 'underline', 'strike'];\n\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: toolbarOptions\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Delta Change Operations Example\nDESCRIPTION: Demonstrates complex Delta operations including retain, delete, and formatting changes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/delta.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ops: [\n    // Unbold and italicize \"Gandalf\"\n    { retain: 7, attributes: { bold: null, italic: true } },\n\n    // Keep \" the \" as is\n    { retain: 5 },\n\n    // Insert \"White\" formatted with color #fff\n    { insert: 'White', attributes: { color: '#fff' } },\n\n    // Delete \"Grey\"\n    { delete: 4 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Editor Change Events in Quill\nDESCRIPTION: Demonstrates how to listen for the editor-change event which is emitted for both text-change and selection-change events. This event fires even when the source is \"silent\" and provides the event name as the first parameter followed by event-specific arguments.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nquill.on('editor-change', (eventName, ...args) => {\n  if (eventName === 'text-change') {\n    // args[0] will be delta\n  } else if (eventName === 'selection-change') {\n    // args[0] will be old range\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Mode in Quill Editor with JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Quill editor in read-only mode, disabling the toolbar and setting initial content.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/configuration.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  readOnly: true,\n  modules: {\n    toolbar: null\n  },\n  theme: 'snow'\n};\nconst quill = new Quill('#editor', options);\nconst Delta = Quill.import('delta');\nquill.setContents(\n  new Delta()\n    .insert('Hello, ')\n    .insert('World', { bold: true })\n    .insert('\\n')\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Buttons to Quill Toolbar in HTML/JavaScript\nDESCRIPTION: This snippet shows how to add custom buttons to a Quill toolbar that coexist with standard Quill controls. It demonstrates adding a custom button with its own click handler alongside Quill's built-in formatting buttons.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"toolbar\">\n  <!-- Add buttons as you would before -->\n  <button class=\"ql-bold\"></button>\n  <button class=\"ql-italic\"></button>\n\n  <!-- But you can also add your own -->\n  <button id=\"custom-button\"></button>\n</div>\n<div id=\"editor\"></div>\n\n<script>\n  const quill = new Quill('#editor', {\n    modules: {\n      toolbar: '#toolbar',\n    },\n  });\n\n  const customButton = document.querySelector('#custom-button');\n  customButton.addEventListener('click', function () {\n    console.log('Clicked!');\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Quill via npm\nDESCRIPTION: This command installs Quill using npm, which is recommended for projects using bundlers like Webpack or Vite.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install quill@{{site.version}}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text in Quill Editor with JavaScript\nDESCRIPTION: This code shows how to set a placeholder text for the Quill editor when it's empty.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/configuration.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  placeholder: 'Hello, World!',\n  theme: 'snow'\n};\nconst quill = new Quill('#editor', options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill with Syntax Highlighting in HTML\nDESCRIPTION: This snippet demonstrates how to set up Quill with the Syntax Module using CDN-hosted resources. It includes the necessary CSS and JavaScript imports, and initializes Quill with syntax highlighting enabled.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/syntax.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Include your favorite highlight.js stylesheet -->\n<link href=\"{{site.highlightjs}}/styles/atom-one-dark.min.css\" rel=\"stylesheet\">\n\n<!-- Include the highlight.js library -->\n<script src=\"{{site.highlightjs}}/highlight.min.js\"></script>\n\n<link href=\"{{site.cdn}}/quill.snow.css\" rel=\"stylesheet\" />\n<script src=\"{{site.cdn}}/quill.js\"></script>\n\n<div id=\"editor\"></div>\n\n<script>\nconst quill = new Quill('#editor', {\n  modules: {\n    syntax: true,              // Include syntax module\n    toolbar: [['code-block']]  // Include button in toolbar\n  },\n  theme: 'snow'\n});\n\nconst Delta = Quill.import('delta');\nquill.setContents(\n  new Delta()\n    .insert('const language = \"JavaScript\";')\n    .insert('\\n', { 'code-block': 'javascript' })\n    .insert('console.log(\"I love \" + language + \"!\");')\n    .insert('\\n', { 'code-block': 'javascript' })\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Editor with Quill - TypeScript\nDESCRIPTION: Shows how to use `enable` and `disable` to toggle user edit capabilities in Quill. The `enable` method can selectively disable inputs while allowing API actions. Input parameter sets enabled state. Outputs alter editor's user interaction ability.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nenable(enabled: boolean = true);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.enable();\nquill.enable(false);   // Disables user input\n```\n\n----------------------------------------\n\nTITLE: Formatting Text at Cursor in Quill\nDESCRIPTION: Demonstrates how to format text at the user's current selection in the Quill editor using the format method. This method sets the format for the next character typed if the selection length is 0.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nformat(name: string, value: any, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.format('color', 'red');\nquill.format('align', 'right');\n```\n\n----------------------------------------\n\nTITLE: Handling Text Change Events in Quill - TypeScript\nDESCRIPTION: Explains the `text-change` event in Quill that triggers when editor content changes, providing details on the delta change, previous content, and source. Essential for tracking user/editor actions. Callback uses delta and source parameters.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nhandler(delta: Delta, oldContents: Delta, source: string)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.on('text-change', (delta, oldDelta, source) => {\n  if (source == 'api') {\n    console.log('An API call triggered this change.');\n  } else if (source == 'user') {\n    console.log('A user action triggered this change.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting User Selection with Quill - TypeScript\nDESCRIPTION: Documents the `setSelection` method that sets the user selection to a specified range, focusing the editor. Providing `null` will blur it. Essential for managing focus programmatically. Requires an index, length, or range object with an optional source parameter.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nsetSelection(index: number, length: number = 0, source: string = 'api')\nsetSelection(range: { index: number, length: number },\n             source: string = 'api')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setSelection(0, 5);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Selection with Quill - TypeScript\nDESCRIPTION: Demonstrates the `getSelection` method which returns the user's current selection range in the Quill editor, or `null` if not focused. Useful for understanding user interactions. No dependencies beyond Quill instance setup. Input option to focus the editor and a range object or null output.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelection(focus = false): { index: number, length: number }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst range = quill.getSelection();\nif (range) {\n  if (range.length == 0) {\n    console.log('User cursor is at index', range.index);\n  } else {\n    const text = quill.getText(range.index, range.length);\n    console.log('User has highlighted: ', text);\n  }\n} else {\n  console.log('User cursor is not in editor');\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Line Key Binding in Quill JavaScript\nDESCRIPTION: Shows how to add a key binding that only triggers on empty lines in Quill. The example removes list formatting when Enter is pressed on an empty list item.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nquill.keyboard.addBinding({ key: 'Enter' }, {\n  empty: true,    // implies collapsed: true and offset: 0\n  format: ['list']\n}, function(range, context) {\n  this.quill.format('list', false);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Matchers to Quill Clipboard\nDESCRIPTION: Demonstrates how to add custom matchers to the Quill Clipboard for handling text nodes and specific HTML elements. These matchers allow customization of how pasted content is interpreted and inserted into the editor.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/clipboard.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nquill.clipboard.addMatcher(Node.TEXT_NODE, (node, delta) => {\n  return new Delta().insert(node.data);\n});\n\n// Interpret a <b> tag as bold\nquill.clipboard.addMatcher('B', (node, delta) => {\n  return delta.compose(new Delta().retain(delta.length(), { bold: true }));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Bindings in Quill JavaScript\nDESCRIPTION: Shows how to configure custom key bindings during Quill initialization. The example includes bindings for tab, a custom shift+B command, and a special backspace behavior for lists.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bindings = {\n  // This will overwrite the default binding also named 'tab'\n  tab: {\n    key: 9,\n    handler: function() {\n      // Handle tab\n    }\n  },\n\n  // There is no default binding named 'custom'\n  // so this will be added without overwriting anything\n  custom: {\n    key: ['b', 'B'],\n    shiftKey: true,\n    handler: function(range, context) {\n      // Handle shift+b\n    }\n  },\n\n  list: {\n    key: 'Backspace',\n    format: ['list'],\n    handler: function(range, context) {\n      if (context.offset === 0) {\n        // When backspace on the first character of a list,\n        // remove the list instead\n        this.quill.format('list', false, Quill.sources.USER);\n      } else {\n        // Otherwise propogate to Quill's default\n        return true;\n      }\n    }\n  }\n};\n\nconst quill = new Quill('#editor', {\n  modules: {\n    keyboard: {\n      bindings: bindings\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Toolbar Dropdowns with Custom Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a dropdown in the Quill toolbar with custom size options. It includes a note about using 'false' to remove formatting and allow default styling.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Note false, not 'normal', is the correct value\n// quill.format('size', false) removes the format,\n// allowing default styling to work\nconst toolbarOptions = [\n  { size: [ 'small', false, 'large', 'huge' ]}\n];\n```\n\n----------------------------------------\n\nTITLE: Removing Text Format with Quill - TypeScript\nDESCRIPTION: Documents the `removeFormat` method, which clears formatting from a specified text range in the Quill editor and returns a Delta structure to show changes. Key dependencies include an active editor instance. Requires index and length parameters, and the output is a Delta. Constraints include potential loss of user selection.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nremoveFormat(index: number, length: number, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setContents([\n  { insert: 'Hello', { bold: true } },\n  { insert: '\\n', { align: 'center' } },\n  { insert: { formula: 'x^2' } },\n  { insert: '\\n', { align: 'center' } },\n  { insert: 'World', { italic: true }},\n  { insert: '\\n', { align: 'center' } }\n]);\n\nquill.removeFormat(3, 7);\n// Editor contents are now\n// [\n//   { insert: 'Hel', { bold: true } },\n//   { insert: 'lo\\n\\nWo' },\n//   { insert: 'rld', { italic: true }},\n//   { insert: '\\n', { align: 'center' } }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Basic Quill Theme Implementation\nDESCRIPTION: Demonstrates how to implement a basic Quill editor with theme configuration. Includes stylesheet inclusion and basic editor initialization with theme specification.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization/themes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Add the theme's stylesheet -->\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.bubble.css\" />\n\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<script>\n  const quill = new Quill('#editor', {\n    theme: 'bubble', // Specify theme in configuration\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring History Module in Quill (JavaScript)\nDESCRIPTION: Example of configuring the History module when initializing a Quill editor. It sets custom values for delay, maxStack, and userOnly options.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/history.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    history: {\n      delay: 2000,\n      maxStack: 500,\n      userOnly: true\n    },\n  },\n  theme: 'snow'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Change Events in Quill - TypeScript\nDESCRIPTION: Focuses on the `selection-change` event triggered by selection alterations in Quill. It includes current and old selection ranges and the source. A null range denotes focus loss, useful for focus management. The handler uses range objects.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nhandler(range: { index: number, length: number },\n        oldRange: { index: number, length: number },\n        source: string)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.on('selection-change', (range, oldRange, source) => {\n  if (range) {\n    if (range.length == 0) {\n      console.log('User cursor is on', range.index);\n    } else {\n      const text = quill.getText(range.index, range.length);\n      console.log('User has highlighted', text);\n    }\n  } else {\n    console.log('Cursor not in the editor');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Keys with Modifiers in Quill JavaScript\nDESCRIPTION: Shows various ways to bind keys with modifiers in Quill. Examples include binding without modifiers, with specific modifiers, and with flexible modifier options.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Only b with no modifier will trigger\nquill.keyboard.addBinding({ key: 'b' }, handler);\n\n// Only shift+b will trigger\nquill.keyboard.addBinding({ key: ['b', 'B'], shiftKey: true }, handler);\n\n// Either b or shift+b will trigger\nquill.keyboard.addBinding({ key: ['b', 'B'], shiftKey: null }, handler);\n```\n\n----------------------------------------\n\nTITLE: Final Polished Word Counter Module in JavaScript\nDESCRIPTION: This snippet presents the final, polished version of the word counter module as an ES6 class, fixing bugs and improving functionality.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/building-a-custom-module.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Counter {\n  constructor(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.container = document.querySelector(options.container);\n    quill.on(Quill.events.TEXT_CHANGE, this.update.bind(this));\n  }\n\n  calculate() {\n    const text = this.quill.getText();\n\n    if (this.options.unit === 'word') {\n      const trimmed = text.trim();\n      // Splitting empty text returns a non-empty array\n      return trimmed.length > 0 ? trimmed.split(/\\s+/).length : 0;\n    } else {\n      return text.length;\n    }\n  }\n\n  update() {\n    const length = this.calculate();\n    let label = this.options.unit;\n    if (length !== 1) {\n      label += 's';\n    }\n    this.container.innerText = `${length} ${label}`;\n  }\n}\n\nQuill.register('modules/counter', Counter);\n\n// We can now initialize Quill with something like this:\nconst quill = new Quill('#editor', {\n  modules: {\n    counter: {\n      container: '#counter',\n      unit: 'word'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipboard Matchers in Quill Initialization\nDESCRIPTION: Demonstrates how to configure custom clipboard matchers during Quill initialization. This allows for appending custom matchers after Quill's default matchers for handling pasted content.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/clipboard.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    clipboard: {\n      matchers: [\n        ['B', customMatcherA],\n        [Node.TEXT_NODE, customMatcherB]\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toolbar Handlers in Quill with JavaScript\nDESCRIPTION: This example demonstrates how to implement custom handlers for toolbar actions in Quill. It shows a custom handler for the link format, allowing for custom UI interactions when applying or removing links.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbarOptions = {\n  handlers: {\n    // handlers object will be merged with default handlers object\n    link: function (value) {\n      if (value) {\n        const href = prompt('Enter the URL');\n        this.quill.format('link', href);\n      } else {\n        this.quill.format('link', false);\n      }\n    }\n  }\n};\n\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: toolbarOptions\n  }\n});\n\n// Handlers can also be added post initialization\nconst toolbar = quill.getModule('toolbar');\ntoolbar.addHandler('image', showImageUI);\n```\n\n----------------------------------------\n\nTITLE: Getting Quill Editor Length\nDESCRIPTION: Demonstrates how to get the length of the Quill editor contents using the getLength method. This method returns the number of characters in the editor, including a newline character for an empty editor.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetLength(): number\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst length = quill.getLength();\n```\n\n----------------------------------------\n\nTITLE: Removing Event Handlers in Quill\nDESCRIPTION: Shows how to use the off() method to remove previously registered event handlers. The handler function reference must be the same as the one used when registering the event.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handler() {\n  console.log('Hello!');\n}\n\nquill.on('text-change', handler);\nquill.off('text-change', handler);\n```\n\n----------------------------------------\n\nTITLE: Deleting Text with Quill API\nDESCRIPTION: Demonstrates how to delete text from the Quill editor using the deleteText method. This method removes a specified length of text starting from a given index and returns a Delta representing the change.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteText(index: number, length: number, source: string = 'api'): Delta\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.deleteText(6, 4);\n```\n\n----------------------------------------\n\nTITLE: Batch Registering Multiple Components in Quill\nDESCRIPTION: Demonstrates how to register multiple components at once using the register() method with an object of path-definition pairs. Also shows the shorthand for registering a format directly.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nQuill.register({\n  'formats/custom-format': CustomFormat,\n  'modules/custom-module-a': CustomModuleA,\n  'modules/custom-module-b': CustomModuleB,\n});\n\nQuill.register(CustomFormat);\n// You cannot do Quill.register(CustomModuleA); as CustomModuleA is not a format\n```\n\n----------------------------------------\n\nTITLE: Updating Editor State with Quill - TypeScript\nDESCRIPTION: The `update` method checks for user updates in the editor and fires events if changes are detected, useful for collaborative editing. It synchronizes the editor state and accepts a source string parameter to specify the update origin.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(((source: string) = 'user'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.update();\n```\n\n----------------------------------------\n\nTITLE: Importing Quill Styles in JavaScript\nDESCRIPTION: This snippet shows how to import Quill's CSS stylesheets directly in JavaScript files, which is useful when using module bundlers.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"quill/dist/quill.core.css\";\n```\n\n----------------------------------------\n\nTITLE: Basic Delta Document Structure in JavaScript\nDESCRIPTION: Example showing Delta format representing formatted text 'Gandalf the Grey' with bold and color attributes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/delta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ops: [\n    { insert: 'Gandalf', attributes: { bold: true } },\n    { insert: ' the ' },\n    { insert: 'Grey', attributes: { color: '#cccccc' } }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing Editor with Quill - TypeScript\nDESCRIPTION: Focuses the editor using the `focus` method and optionally prevents automatic scrolling. This snippet demonstrates how to control editor focus programmatically. Accepts options with a preventScroll flag, but outputs nothing.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nfocus(options: { preventScroll?: boolean } = {});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Focus the editor, and scroll the selection into view\nquill.focus();\n\n// Focus the editor, but don't scroll\nquill.focus({ preventScroll: true });\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Values for Quill Toolbar Buttons in JavaScript\nDESCRIPTION: This example shows how to specify a custom value for a toolbar button using an object. It sets up a header button with a specific size value.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbarOptions = [{ header: '3' }];\n```\n\n----------------------------------------\n\nTITLE: One-time Event Handlers in Quill\nDESCRIPTION: Demonstrates the once() method for adding a handler that will only be triggered on the first occurrence of an event. This example logs a message on the first text change only.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nquill.once('text-change', () => {\n  console.log('First text change!');\n});\n```\n\n----------------------------------------\n\nTITLE: Redoing Last Undone Change in Quill (JavaScript)\nDESCRIPTION: Example of using the redo() method to reapply the last undone change in Quill's history.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/history.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nquill.history.redo();\n```\n\n----------------------------------------\n\nTITLE: Delta Embed Operation Example\nDESCRIPTION: Demonstrates how to represent non-text content (like images) in Delta format with attributes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/delta.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ops: [{\n    // An image link\n    insert: {\n      image: 'https://quilljs.com/assets/images/icon.png'\n    },\n    attributes: {\n      link: 'https://quilljs.com'\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor - JavaScript\nDESCRIPTION: This JavaScript snippet initializes a Quill editor instance with specific options for toolbar, syntax highlighting, and placeholder text. It is designed for use within an HTML editor container and allows for rich text editing capabilities.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/full.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    syntax: true,\n    toolbar: '#toolbar-container',\n  },\n  placeholder: 'Compose an epic...',\n  theme: 'snow',\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Editor Focus with Quill - TypeScript\nDESCRIPTION: Illustrates the `hasFocus` method that checks whether the Quill editor currently has focus. Useful in UI logic to determine when the editor should or shouldn't be considered active. The method returns a boolean indicating focus state.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nhasFocus(): boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.hasFocus();\n```\n\n----------------------------------------\n\nTITLE: Finding Leaf Blot at Specific Index in Quill\nDESCRIPTION: Demonstrates the getLeaf() method which retrieves the leaf Blot at a specified index within the document, along with the offset within that leaf. This is useful for working with the lowest-level text nodes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello Good World!');\nquill.formatText(6, 4, 'bold', true);\n\nlet [leaf, offset] = quill.getLeaf(7);\n// leaf should be a Text Blot with value \"Good\"\n// offset should be 1, since the returned leaf started at index 6\n```\n\n----------------------------------------\n\nTITLE: Undoing Last Change in Quill (JavaScript)\nDESCRIPTION: Example of using the undo() method to revert the last change in Quill's history.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/history.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nquill.history.undo();\n```\n\n----------------------------------------\n\nTITLE: Getting Selection Bounds with Quill - TypeScript\nDESCRIPTION: This code shows how to use the `getBounds` method to retrieve the position and dimensions of text selection in Quill. It's essential for tooltip placement. Inputs are index and length, with outputs detailing selection coordinates and dimensions. No additional dependencies are required.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetBounds(index: number, length: number = 0):\n  { left: number, top: number, height: number, width: number }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello\\nWorld\\n');\nquill.getBounds(7); // Returns { height: 15, width: 0, left: 27, top: 31 }\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Lines Within a Range in Quill\nDESCRIPTION: Demonstrates the getLines() method which returns an array of line Blots contained within a specified location range. Can be called with index and length or with a Range object.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello\\nGood\\nWorld!');\nquill.formatLine(1, 1, 'list', 'bullet');\n\nlet lines = quill.getLines(2, 5);\n// array with a ListItem and Block Blot,\n// representing the first two lines\n```\n\n----------------------------------------\n\nTITLE: Configuring Color and Size Attributors\nDESCRIPTION: Demonstrates how to register and configure class-based color attributes and inline style-based size attributes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ColorClass = Quill.import('attributors/class/color');\nconst SizeStyle = Quill.import('attributors/style/size');\nQuill.register(ColorClass, true);\nQuill.register(SizeStyle, true);\n\n// Initialize as you would normally\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: true,\n  },\n  theme: 'snow',\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Delta Format Example in JavaScript\nDESCRIPTION: Shows a complete example of the Delta format, including text, formatting, and embedded content.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = [{\n  insert: 'Hello'\n}, {\n  insert: 'World',\n  attributes: { bold: true }\n}, {\n  insert: {\n    image: 'https://exclamation.com/mark.png'\n  },\n  attributes: { width: '100' }\n}];\n```\n\n----------------------------------------\n\nTITLE: Line Formatting in Delta Format\nDESCRIPTION: Shows how line formatting is applied using newline characters and attributes in Delta format.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/delta.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ops: [\n    { insert: 'The Two Towers' },\n    { insert: '\\n', attributes: { header: 1 } },\n    { insert: 'Aragorn sped on up the hill.\\n' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Level in Quill\nDESCRIPTION: Shows how to use the static debug() method to control logging levels in Quill. Accepts 'error', 'warn', 'log', or 'info'. Setting to true is equivalent to 'log', and false disables all messages.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nQuill.debug('info');\n```\n\n----------------------------------------\n\nTITLE: Clearing History in Quill (JavaScript)\nDESCRIPTION: Example of using the clear() method to reset the history stack in Quill.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/history.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nquill.history.clear();\n```\n\n----------------------------------------\n\nTITLE: Getting Index Position from Blot in Quill\nDESCRIPTION: Shows how to use the getIndex() method to find the distance between the beginning of the document and a given Blot. Useful for converting between Blot-based positions and numeric indices.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nlet [line, offset] = quill.getLine(10);\nlet index = quill.getIndex(line); // index + offset should == 10\n```\n\n----------------------------------------\n\nTITLE: Prefix-Based Key Binding in Quill JavaScript\nDESCRIPTION: Demonstrates a key binding that uses a prefix condition in Quill. The example converts a hyphen followed by a space into a bullet list item.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nquill.keyboard.addBinding({ key: ' ' }, {\n  collapsed: true,\n  format: { list: false },  // ...on a line that's not already a list\n  prefix: /^-$/,            // ...following a '-' character\n  offset: 1,                // ...at the 1st position of the line,\n                            // otherwise handler would trigger if the user\n                            // typed hyphen+space mid sentence\n}, function(range, context) {\n  // the space character is consumed by this handler\n  // so we only need to delete the hyphen\n  this.quill.deleteText(range.index - 1, 1);\n  // apply bullet formatting to the line\n  this.quill.formatLine(range.index, 1, 'list', 'bullet');\n  // restore selection\n  this.quill.setSelection(range.index - 1);\n\n  // console.log(context.prefix) would print '-'\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Line Blot at Specific Index in Quill\nDESCRIPTION: Shows how to use the getLine() method to retrieve the line Blot at a specified index within the document. Returns the line containing the index and the offset within that line.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nquill.setText('Hello\\nWorld!');\n\nlet [line, offset] = quill.getLine(7);\n// line should be a Block Blot representing the 2nd \"World!\" line\n// offset should be 1, since the returned line started at index 6\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Blot in Quill - JavaScript\nDESCRIPTION: The ImageBlot class extends BlockEmbed to allow image embedding within the editor. It utilizes attributes such as 'src' and 'alt' for setting image URLs and descriptions. Users insert images via predefined static values.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass ImageBlot extends BlockEmbed {\n  static blotName = 'image';\n  static tagName = 'img';\n\n  static create(value) {\n    const node = super.create();\n    node.setAttribute('alt', value.alt);\n    node.setAttribute('src', value.url);\n    return node;\n  }\n\n  static value(node) {\n    return {\n      alt: node.getAttribute('alt'),\n      url: node.getAttribute('src')\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Toolbar in Snow Theme\nDESCRIPTION: Example of configuring Quill to use Snow theme without the default toolbar module.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: false    // Snow includes toolbar by default\n  },\n  theme: 'snow'\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill with Syntax Highlighting using npm Package in JavaScript\nDESCRIPTION: This snippet shows how to initialize Quill with the Syntax Module when using highlight.js as an npm package. It demonstrates how to import both Quill and highlight.js, and pass the hljs object to the syntax module option.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/syntax.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Quill from 'quill';\nimport hljs from 'highlight.js';\n\nconst quill = new Quill('#editor', {\n  modules: {\n    syntax: { hljs },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Bold and Italic Blots in JavaScript\nDESCRIPTION: This snippet shows how to create custom Blots for bold and italic formatting by extending Quill's Inline blot. It demonstrates setting the blot name and tag name, and registering the blots with Quill.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Inline = Quill.import('blots/inline');\n\nclass BoldBlot extends Inline {\n  static blotName = 'bold';\n  static tagName = 'strong';\n}\n\nclass ItalicBlot extends Inline {\n  static blotName = 'italic';\n  static tagName = 'em';\n}\n\nQuill.register(BoldBlot);\nQuill.register(ItalicBlot);\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Toolbar with Shorthand Syntax in JavaScript\nDESCRIPTION: This snippet shows a shorthand way to configure the Quill toolbar by directly specifying the container selector. It's equivalent to the more verbose configuration but is more concise for simple use cases.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n  modules: {\n    // Equivalent to { toolbar: { container: '#toolbar' }}\n    toolbar: '#toolbar'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Toolbar with Nested Options Array in JavaScript\nDESCRIPTION: This snippet demonstrates how to group toolbar controls using a nested array. This structure wraps controls in a <span> with class 'ql-formats', allowing themes to apply specific styling.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/toolbar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbarOptions = [['bold', 'italic'], ['link', 'image']];\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Blot in JavaScript\nDESCRIPTION: This code creates a custom Link blot that extends Quill's Inline blot. It demonstrates how to handle creation and format retrieval for links, including setting and getting the href attribute.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass LinkBlot extends Inline {\n  static blotName = 'link';\n  static tagName = 'a';\n\n  static create(value) {\n    const node = super.create();\n    // Sanitize url value if desired\n    node.setAttribute('href', value);\n    // Okay to set other non-format related attributes\n    // These are invisible to Parchment so must be static\n    node.setAttribute('target', '_blank');\n    return node;\n  }\n\n  static formats(node) {\n    // We will only be called with a node already\n    // determined to be a Link blot, so we do\n    // not need to check ourselves\n    return node.getAttribute('href');\n  }\n}\n\nQuill.register(LinkBlot);\n```\n\n----------------------------------------\n\nTITLE: Bubble Theme Implementation\nDESCRIPTION: Complete implementation of Quill's Bubble theme, featuring a tooltip-based interface with placeholder text configuration.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization/themes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{{site.cdn}}/quill.bubble.css\" rel=\"stylesheet\" />\n\n<div id=\"editor\" style=\"margin: 50px 0;\">\n  <p>Hello, <strong>World</strong></p>\n</div>\n\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<script>\n  const quill = new Quill('#editor', {\n    placeholder: 'Compose an epic...',\n    theme: 'bubble',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Scrolling Selection Into View with Quill - TypeScript\nDESCRIPTION: Details the `scrollSelectionIntoView` method that ensures the current selection is in view within the Quill editor container. Automatically executed with `setSelection` unless the source is 'silent'. No additional inputs or outputs are relevant aside from invoking the method on the Quill instance.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nscrollSelectionIntoView();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.scrollSelectionIntoView();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Word Counter Module in JavaScript\nDESCRIPTION: This snippet shows the initial implementation of a word counter module for Quill. It listens for text changes, counts words, and updates a counter element.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/building-a-custom-module.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Counter(quill, options) {\n  const container = document.querySelector('#counter');\n  quill.on(Quill.events.TEXT_CHANGE, () => {\n    const text = quill.getText();\n    // There are a couple issues with counting words\n    // this way but we'll fix these later\n    container.innerText = text.split(/\\s+/).length;\n  });\n}\n\nQuill.register('modules/counter', Counter);\n\n// We can now initialize Quill with something like this:\nconst quill = new Quill('#editor', {\n  modules: {\n    counter: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting Formats in Quill Editor with JavaScript\nDESCRIPTION: This snippet illustrates how to restrict formatting options in Quill to a specific list of formats, in this case, only allowing italic formatting.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/configuration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parchment = Quill.import('parchment');\n\nconst quill = new Quill('#editor', {\n  formats: ['italic'],\n});\n\nconst Delta = Quill.import('delta');\nquill.setContents(\n  new Delta()\n    .insert('Only ')\n    .insert('italic', { italic: true })\n    .insert(' is allowed. ')\n    .insert('Bold', { bold: true })\n    .insert(' is not.')\n);\n```\n\n----------------------------------------\n\nTITLE: Extending and Re-registering Quill Modules in JavaScript\nDESCRIPTION: This example demonstrates how to extend and re-register a Quill module, specifically the Clipboard module. It creates a custom PlainClipboard class that overrides the convert method to handle plain text pasting, then registers it to replace the original Clipboard module.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Clipboard = Quill.import('modules/clipboard');\nconst Delta = Quill.import('delta');\n\nclass PlainClipboard extends Clipboard {\n  convert(html = null) {\n    if (typeof html === 'string') {\n      this.container.innerHTML = html;\n    }\n    let text = this.container.innerText;\n    this.container.innerHTML = '';\n    return new Delta().insert(text);\n  }\n}\n\nQuill.register('modules/clipboard', PlainClipboard, true);\n\n// Will be created with instance of PlainClipboard\nconst quill = new Quill('#editor');\n```\n\n----------------------------------------\n\nTITLE: Creating Video Embed with Quill Editor in JavaScript\nDESCRIPTION: This snippet defines a custom VideoBlot class extending from BlockEmbed to embed videos using iframes in Quill editor. It facilitates adding video URLs, handling attributes like height and width, and provides a mechanism for reporting unregistered formats. The key dependencies are the Quill framework and the video URL to embed.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass VideoBlot extends BlockEmbed {\n  static blotName = 'video';\n  static tagName = 'iframe';\n\n  static create(url) {\n    const node = super.create();\n    node.setAttribute('src', url);\n    // Set non-format related attributes with static values\n    node.setAttribute('frameborder', '0');\n    node.setAttribute('allowfullscreen', true);\n\n    return node;\n  }\n\n  static formats(node) {\n    // We still need to report unregistered embed formats\n    const format = {};\n    if (node.hasAttribute('height')) {\n      format.height = node.getAttribute('height');\n    }\n    if (node.hasAttribute('width')) {\n      format.width = node.getAttribute('width');\n    }\n    return format;\n  }\n\n  static value(node) {\n    return node.getAttribute('src');\n  }\n\n  format(name, value) {\n    // Handle unregistered embed formats\n    if (name === 'height' || name === 'width') {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name, value);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plain List Item Format\nDESCRIPTION: Example of extending the built-in list item format to create a version that doesn't allow content formatting.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ListItem = Quill.import('formats/list/item');\n\nclass PlainListItem extends ListItem {\n  formatAt(index, length, name, value) {\n    if (name === 'list') {\n      // Allow changing or removing list format\n      super.formatAt(name, value);\n    }\n    // Otherwise ignore\n  }\n}\n\nQuill.register(PlainListItem, true);\n\n// Initialize as you would normally\nconst quill = new Quill('#editor', {\n  modules: {\n    toolbar: true,\n  },\n  theme: 'snow',\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Quill or Blot Instances from DOM Nodes\nDESCRIPTION: Demonstrates the static find() method that returns the Quill or Blot instance associated with a DOM node. The bubble parameter can be used to search up the DOM tree to find a corresponding Blot.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#container');\nconst quill = new Quill(container);\nconsole.log(Quill.find(container) === quill); // Should be true\n\nquill.insertText(0, 'Hello', 'link', 'https://world.com');\nconst linkNode = document.querySelector('#container a');\nconst linkBlot = Quill.find(linkNode);\n\n// Find Quill instance from a blot\nconsole.log(Quill.find(linkBlot.scroll.domNode.parentElement));\n```\n\n----------------------------------------\n\nTITLE: Enhancing Word Counter Module with Options in JavaScript\nDESCRIPTION: This snippet improves the word counter module by adding options for the container selector and counting unit (words or characters).\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/building-a-custom-module.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Counter(quill, options) {\n  const container = document.querySelector(options.container);\n  quill.on(Quill.events.TEXT_CHANGE, () => {\n    const text = quill.getText();\n    if (options.unit === 'word') {\n      container.innerText = text.split(/\\s+/).length + ' words';\n    } else {\n      container.innerText = text.length + ' characters';\n    }\n\n  });\n}\n\nQuill.register('modules/counter', Counter);\n\n// We can now initialize Quill with something like this:\nconst quill = new Quill('#editor', {\n  modules: {\n    counter: {\n      container: '#counter',\n      unit: 'word'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Core Quill CSS\nDESCRIPTION: Shows how to include the minimal required stylesheet for an unstyled Quill editor instance.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.core.css\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Blot in Quill - JavaScript\nDESCRIPTION: DividerBlot is a custom Embed Blot, inheriting from BlockEmbed, for inserting horizontal dividers. The divider is immutable once created, requiring manual user selection adjustments upon insertion.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass DividerBlot extends BlockEmbed {\n  static blotName = 'divider';\n  static tagName = 'hr';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Blot in Quill - JavaScript\nDESCRIPTION: The HeaderBlot class extends the Block class to define custom headers within the text editor. Supporting up to two header sizes, it determines the heading level based on the tag name and formats content with the tags H1 and H2.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass HeaderBlot extends Block {\n  static blotName = 'header';\n  static tagName = ['H1', 'H2'];\n\n  static formats(node) {\n    return HeaderBlot.tagName.indexOf(node.tagName) + 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Editor Focus with Quill - TypeScript\nDESCRIPTION: The `blur` method removes focus from the Quill editor, useful for managing focus programmatically in applications where the editor does not require input focus to function. No inputs or outputs are necessary, and it is called on the Quill instance.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nblur();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nquill.blur();\n```\n\n----------------------------------------\n\nTITLE: Importing Quill in JavaScript\nDESCRIPTION: These snippets show how to import Quill in a JavaScript environment, demonstrating both full and core build imports, as well as importing specific components like Delta and formats.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Quill from 'quill';\n// Or if you only need the core build\n// import Quill from 'quill/core';\n\nconst quill = new Quill('#editor');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Quill from 'quill';\n// Or if you only need the core build\n// import Quill from 'quill/core';\n\nimport { Delta } from 'quill';\n// Or if you only need the core build\n// import { Delta } from 'quill/core';\n// Or const Delta = Quill.import('delta');\n\nimport Link from 'quill/formats/link';\n// Or const Link = Quill.import('formats/link');\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Counter as ES6 Class in JavaScript\nDESCRIPTION: This snippet refactors the word counter module into an ES6 class, allowing direct access to the module and adding a calculate method.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/building-a-custom-module.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Counter {\n  constructor(quill, options) {\n    const container = document.querySelector(options.container);\n    quill.on(Quill.events.TEXT_CHANGE, () => {\n      const text = quill.getText();\n      if (options.unit === 'word') {\n        container.innerText = text.split(/\\s+/).length + ' words';\n      } else {\n        container.innerText = text.length + ' characters';\n      }\n\n    });\n  }\n\n  calculate() {\n    const text = this.quill.getText();\n\n    return this.options.unit === 'word' ?\n      text.split(/\\s+/).length :\n      text.length;\n  }\n}\n\nQuill.register('modules/counter', Counter);\n\n// We can now initialize Quill with something like this:\nconst quill = new Quill('#editor', {\n  modules: {\n    counter: {\n      container: '#counter',\n      unit: 'word'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cutting off History Merging in Quill (JavaScript)\nDESCRIPTION: Example of using the cutoff() method to prevent merging of changes before and after the cutoff point in Quill's history.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/history.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nquill.history.cutoff();\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with DOM Object in JavaScript\nDESCRIPTION: This snippet shows how to initialize a Quill editor instance by passing a DOM object as the container.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/configuration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.getElementById('editor');\nconst quill = new Quill(container);\n```\n\n----------------------------------------\n\nTITLE: Implementing Blockquote Blot in Quill - JavaScript\nDESCRIPTION: This snippet defines a custom Blockquote Blot inheriting from Quill's Block class. It enables the application of Blockquote formatting within the text editor. This blot is identified by 'blockquote' and is rendered using the <blockquote> HTML tag.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Block = Quill.import('blots/block');\n\nclass BlockquoteBlot extends Block {\n  static blotName = 'blockquote';\n  static tagName = 'blockquote';\n}\n```\n\n----------------------------------------\n\nTITLE: Embedded Content Representation in JavaScript\nDESCRIPTION: Illustrates how embedded content like images and formulas are represented in the Delta format.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = {\n  image: {\n    url: 'https://quilljs.com/logo.png'\n  }\n};\n\nconst f = {\n  formula: 'e=mc^2'\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Essential Formats for Quill Editor\nDESCRIPTION: Shows how to register essential format blots required for a functional Quill editor, including Scroll, Block, Break, Container, Cursor, Inline, and Text formats.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization/registries.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parchment = Quill.import('parchment');\n\n// Essential formats\nconst Block = Quill.import('blots/block');\nconst Break = Quill.import('blots/break');\nconst Container = Quill.import('blots/container');\nconst Cursor = Quill.import('blots/cursor');\nconst Inline = Quill.import('blots/inline');\nconst Scroll = Quill.import('blots/scroll');\nconst Text= Quill.import('blots/text');\n\nconst registry = new Parchment.Registry();\nregistry.register(\n  Scroll,\n  Block,\n  Break,\n  Container,\n  Cursor,\n  Inline,\n  Text,\n);\n\nconst quill = new Quill('#editor', {\n  registry,\n  theme: 'snow'\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting a Range of Text\nDESCRIPTION: This code snippet demonstrates how to format a specific range of text using the Delta format. It specifies the index and length of the text to be formatted, along with the desired attributes (in this case, making the text bold).\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst delta = [{\n  format: {\n    index: 4,\n    length: 1\n  },\n  attributes: {\n    bold: true\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Applying Bold Formatting with Retain\nDESCRIPTION: This snippet illustrates how to apply bold formatting to a specific portion of text and insert a space using the 'retain' operation.  Each character that needs to retain its value is marked with `retain: true` along with its attributes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Starting with \"HelloWorld\",\n// bold \"Hello\", and insert a space right after it\nconst change = [\n  { format: true, attributes: { bold: true } },  // H\n  { format: true, attributes: { bold: true } },  // e\n  { format: true, attributes: { bold: true } },  // l\n  { format: true, attributes: { bold: true } },  // l\n  { format: true, attributes: { bold: true } },  // o\n  { insert: ' ' },\n  { retain: true },  // W\n  { retain: true },  // o\n  { retain: true },  // r\n  { retain: true },  // l\n  { retain: true }   // d\n]\n```\n\n----------------------------------------\n\nTITLE: Including Quill via CDN\nDESCRIPTION: This HTML snippet demonstrates how to include Quill in a web page using Content Delivery Network (CDN) links. It shows options for including the main library, theme stylesheets, and a core build with minimal features.\nSOURCE: https://github.com/slab/quill/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Main Quill library -->\n<script src=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.js\"></script>\n\n<!-- Theme included stylesheets -->\n<link\n  href=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.snow.css\"\n  rel=\"stylesheet\"\n/>\n<link\n  href=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.bubble.css\"\n  rel=\"stylesheet\"\n/>\n\n<!-- Core build with no theme, formatting, non-essential modules -->\n<link\n  href=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.core.css\"\n  rel=\"stylesheet\"\n/>\n<script src=\"https://cdn.jsdelivr.net/npm/quill@2/dist/quill.core.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Representing Formatted Text in JavaScript\nDESCRIPTION: Demonstrates how to represent formatted text using an array of objects with text and attribute properties.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = [\n  { text: 'Hello' },\n  { text: 'World', attributes: { bold: true } }\n];\n```\n\n----------------------------------------\n\nTITLE: Combining Format and Retain Operations\nDESCRIPTION: This code shows how the `format` and `retain` operations can be combined where `retain` indicates the length of unchanged text and `attributes` represent the formatting that needs to be applied to the retained text.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst change = [\n  { retain: 5, attributes: { bold: true } },\n  { insert: ' ' }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Initializing Quill Editor with Bubble Theme\nDESCRIPTION: This snippet shows the HTML structure for importing Quill dependencies and initializing the editor. It includes scripts for syntax highlighting, KaTeX for math rendering, and Quill itself. The editor is initialized with a placeholder and the Bubble theme.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/bubble.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"{{site.highlightjs}}/highlight.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.highlightjs}}/styles/atom-one-dark.min.css\" />\n<script src=\"{{site.katex}}/katex.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.katex}}/katex.min.css\" />\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.bubble.css\" />\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<div id=\"editor\" style=\"height: 220px\">\n</div>\n<script src=\"/index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Snow Theme Implementation\nDESCRIPTION: Complete implementation of Quill's Snow theme, featuring a clean flat toolbar interface with placeholder text configuration.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization/themes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{{site.cdn}}/quill.snow.css\" rel=\"stylesheet\" />\n\n<div id=\"editor\">\n  <p>Hello, <strong>World</strong></p>\n</div>\n\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<script>\n  const quill = new Quill('#editor', {\n    placeholder: 'Compose an epic...',\n    theme: 'snow',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Dependencies for Quill Snow Theme\nDESCRIPTION: Sets up the required HTML structure and imports necessary dependencies including highlight.js, KaTeX, and Quill's Snow theme CSS.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/snow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{{site.highlightjs}}/highlight.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.highlightjs}}/styles/atom-one-dark.min.css\" />\n<script src=\"{{site.katex}}/katex.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.katex}}/katex.min.css\" />\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.snow.css\" />\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<div id=\"editor\" style=\"height: 220px\">\n</div>\n<script src=\"/index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for Quill Editor\nDESCRIPTION: This HTML snippet sets up the necessary structure and resources for the Quill editor. It includes script and stylesheet references for highlight.js, KaTeX, and Quill, as well as a container div for the editor.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/stress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"{{site.highlightjs}}/highlight.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.highlightjs}}/styles/atom-one-dark.min.css\" />\n<script src=\"{{site.katex}}/katex.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.katex}}/katex.min.css\" />\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.snow.css\" />\n<script src=\"{{site.cdn}}/quill.js\"></script>\n<div id=\"editor\" style=\"height: 220px\">\n</div>\n<script src=\"/index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Tweets in Quill Editor with JavaScript\nDESCRIPTION: This JavaScript snippet defines a custom TweetBlot class for embedding tweets within Quill editor. It leverages Twitter's native JavaScript library to handle tweet rendering within a specified div. Dependencies include the Quill editor and the Twitter JavaScript library. It requires a Tweet ID for embedding and manages this ID as a data attribute.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/cloning-medium-with-parchment.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass TweetBlot extends BlockEmbed {\n  static blotName = 'tweet';\n  static tagName = 'div';\n  static className = 'tweet';\n\n  static create(id) {\n    const node = super.create();\n    node.dataset.id = id;\n    // Allow twitter library to modify our contents\n    twttr.widgets.createTweet(id, node);\n    return node;\n  }\n\n  static value(domNode) {\n    return domNode.dataset.id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Quill Instance with Custom Registry\nDESCRIPTION: Demonstrates how to create a Quill editor with a custom Parchment registry, which allows having different format support for different editor instances.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization/registries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst registry = new Parchment.Registry();\n\n// Register the formats that you need for the editor with `registry.register()`.\n// We will cover this in more detail in the next section.\n\nconst quill = new Quill('#editor', {\n  registry,\n  // ...other options\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Quill via npm\nDESCRIPTION: This snippet shows the command to install Quill using npm (Node Package Manager). It's a simple one-line command that adds Quill to your project's dependencies.\nSOURCE: https://github.com/slab/quill/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install quill\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Delta Formats for Image Embedding in JavaScript\nDESCRIPTION: This snippet shows how the old and new Delta formats handle embedding images. The new format provides native support for embeds, making it more versatile for various types of content.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/a-new-delta.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar oldFormat = {\n  startLength: 0,\n  endLength: 1,\n  ops: [{\n    text: '!',\n    attributes: { image: 'https://octodex.github.com/images/labtocat.png' }\n  }]\n};\n\nvar newFormat = {\n  ops: [{\n    insert: 1, attributes: { image: 'https://octodex.github.com/images/labtocat.png' }\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Delta Object with Operations Array\nDESCRIPTION: This code shows how Deltas are expressed as Objects, with a single property `ops` that stores an array of Operations. Each operation defines an insertion along with formatting attributes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst delta = {\n  ops: [{\n    insert: 'Hello'\n  }, {\n    insert: 'World',\n    attributes: { bold: true }\n  }, {\n    insert: {\n    image: 'https://exclamation.com/mark.png'\n    },\n    attributes: { width: '100' }\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Delta Conversion Helper Functions in JavaScript\nDESCRIPTION: This snippet provides helper functions for manually creating insert, delete, and retain operations when converting old Deltas to the new format. It's useful when the rich-text module can't be used or when implementing the conversion in another language.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/upgrading-to-rich-text-deltas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar nweDelta = { ops: [] };\noldDelta.ops.forEach(function () {\n  // Following a similar logic to the earlier snippet\n  // except replacing .insert(), .retain(), .delete() with:\n  // insertOp(newDelta.ops, value, formats)\n  // retainOp(newDelta.ops, length, formats)\n  // deleteOp(newDelta.ops, length)\n});\n\nfunction insertOp(opsArr, text, formats) {\n  var op = { insert: text };\n  if (formats && Object.keys(formats).length > 0) {\n    op.attributes = formats;\n  }\n  opsArr.push(op);\n}\n\nfunction deleteOp(opsArr, length) {\n  opsArr.push({ delete: length });\n}\n\nfunction retainOp(opsArr, length, formats) {\n  var op = { retain: length };\n  if (formats && Object.keys(formats).length > 0) {\n    op.attributes = formats;\n  }\n  opsArr.push(op);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Delta Formats for Text Deletion in JavaScript\nDESCRIPTION: This snippet demonstrates the difference between the old and new Delta formats for representing the deletion of the character 'b' from the string 'abc'. The new format uses explicit delete operations and is more intuitive.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/a-new-delta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar oldFormat = {\n  startLength: 3,\n  endLength: 2,\n  ops: [\n    { start: 0, end: 1 },\n    { start: 2, end: 3 }\n  ]\n};\n\nvar newFormat = {\n  ops: [\n    { retain: 1 },\n    { delete: 1 }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Bindings in Quill JavaScript\nDESCRIPTION: Demonstrates how to handle multiple bindings for the same key combination in Quill. The example shows a handler for the Tab key that allows propagation to other handlers.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nquill.keyboard.addBinding({ key: 'Tab' }, function(range) {\n  // I will normally prevent handlers of the tab key\n  // Return true to let later handlers be called\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Including Latest Quill Version via CDN\nDESCRIPTION: Links the latest version of the minified Quill JavaScript library from the official CDN using the 'latest' keyword.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/an-official-cdn-for-quill.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.quilljs.com/latest/quill.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Applying Bold Formatting with Retain and Length\nDESCRIPTION: This snippet demonstrates an optimization by merging adjacent equal operations and re-introducing *length*. It displays how to apply bold formatting to the first 5 characters of a text string and insert a space.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst change = [\n  { format: 5, attributes: { bold: true } }\n  { insert: ' ' }\n]\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Pixel Position with Quill - TypeScript\nDESCRIPTION: Uses `scrollRectIntoView` to scroll the editor to a specific pixel position, effectively showing the specified text range in view. Inputs are bounds specifying top, bottom, right, and left positions, commonly used with getBounds method.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nscrollRectIntoView(bounds: {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Scroll the editor to reveal the range of { index: 20, length: 5 }\nconst bounds = this.selection.getBounds(20, 5);\nif (bounds) {\n  quill.scrollRectIntoView(bounds);\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet text = \"\";\nfor (let i = 0; i < 100; i += 1) {\n  text += `line ${i + 1}\\n`;\n}\n\nconst quill = new Quill('#editor', { theme: 'snow' });\nquill.setText(text);\n\nconst target = 'line 50';\nconst bounds = quill.selection.getBounds(\n  text.indexOf(target),\n  target.length\n);\nif (bounds) {\n  quill.scrollRectIntoView(bounds);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Quill CSS via CDN\nDESCRIPTION: Links the Quill Snow theme stylesheet from the official CDN using a specific version number.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/an-official-cdn-for-quill.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"//cdn.quilljs.com/0.16.0/quill.snow.css\" />\n```\n\n----------------------------------------\n\nTITLE: Canonical Representation of Formatted Text in JavaScript\nDESCRIPTION: Illustrates the canonical representation of formatted text with multiple attributes.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = [{\n  text: \"Mystery\",\n  attributes: {\n    italic: true,\n    bold: true\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Attributor\nDESCRIPTION: Shows how to extend the font whitelist and add custom font styling.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/customization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst FontAttributor = Quill.import('attributors/class/font');\nFontAttributor.whitelist = [\n  'sofia',\n  'slabo',\n  'roboto',\n  'inconsolata',\n  'ubuntu',\n];\nQuill.register(FontAttributor, true);\n```\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\" />\n<style>\n  .ql-font-roboto {\n    font-family: 'Roboto', sans-serif;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Including Quill JavaScript via CDN\nDESCRIPTION: Links the minified Quill JavaScript library from the official CDN using a specific version number.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/an-official-cdn-for-quill.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.quilljs.com/0.16.0/quill.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Quill Editor with Sandpack - HTML\nDESCRIPTION: This HTML snippet sets up a standalone container for a Quill editor, defining necessary scripts, styles, and toolbar configurations for text formatting. It makes use of multiple libraries including highlight.js and KaTeX for advanced text features.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/full.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nimport { StandaloneSandpack } from '../../components/Sandpack';\n\n<title>Full Editor</title>\n\n<StandaloneSandpack\n  preferPreview\n  activeFile=\"index.js\"\n  files={{\n    'index.html': `\n<script src=\"{{site.highlightjs}}/highlight.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.highlightjs}}/styles/atom-one-dark.min.css\" />\n<script src=\"{{site.katex}}/katex.min.js\"></script>\n<link rel=\"stylesheet\" href=\"{{site.katex}}/katex.min.css\" />\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.snow.css\" />\n<link rel=\"stylesheet\" href=\"{{site.cdn}}/quill.bubble.css\" />\n<script src=\"{{site.cdn}}/quill.js\"></script>\n\n<div id=\"standalone-container\">\n  <div id=\"toolbar-container\">\n    <span class=\"ql-formats\">\n      <select class=\"ql-font\"></select>\n      <select class=\"ql-size\"></select>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-bold\"></button>\n      <button class=\"ql-italic\"></button>\n      <button class=\"ql-underline\"></button>\n      <button class=\"ql-strike\"></button>\n    </span>\n    <span class=\"ql-formats\">\n      <select class=\"ql-color\"></select>\n      <select class=\"ql-background\"></select>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-script\" value=\"sub\"></button>\n      <button class=\"ql-script\" value=\"super\"></button>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-header\" value=\"1\"></button>\n      <button class=\"ql-header\" value=\"2\"></button>\n      <button class=\"ql-blockquote\"></button>\n      <button class=\"ql-code-block\"></button>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-list\" value=\"ordered\"></button>\n      <button class=\"ql-list\" value=\"bullet\"></button>\n      <button class=\"ql-indent\" value=\"-1\"></button>\n      <button class=\"ql-indent\" value=\"+1\"></button>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-direction\" value=\"rtl\"></button>\n      <select class=\"ql-align\"></select>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-link\"></button>\n      <button class=\"ql-image\"></button>\n      <button class=\"ql-video\"></button>\n      <button class=\"ql-formula\"></button>\n    </span>\n    <span class=\"ql-formats\">\n      <button class=\"ql-clean\"></button>\n    </span>\n  </div>\n  <div id=\"editor\" style=\"height: 220px\">\n  </div>\n</div>\n<script src=\"/index.js\"></script>\n    `,\n    'index.js': `\nconst quill = new Quill('#editor', {\n  modules: {\n    syntax: true,\n    toolbar: '#toolbar-container',\n  },\n  placeholder: 'Compose an epic...',\n  theme: 'snow',\n});\n    `\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Quill Components\nDESCRIPTION: Demonstrates the static import() method that retrieves Quill library components, formats, modules or themes. The path should mirror Quill's source code directory structure.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst Parchment = Quill.import('parchment');\nconst Delta = Quill.import('delta');\n\nconst Toolbar = Quill.import('modules/toolbar');\nconst Link = Quill.import('formats/link');\n// Similar to ES6 syntax `import Link from 'quill/formats/link';`\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Class Names in Quill v0.19\nDESCRIPTION: Example demonstrating the new class naming convention where all Quill container classes are now prefixed with 'ql-'. This change affects all containers in the Quill editor and requires updates to any custom styling targeting these elements.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/quill-v0-19-no-more-iframes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nql-container {\n  /* New class naming convention */\n}\n```\n\n----------------------------------------\n\nTITLE: Including Quill 1.0 Release Candidate via CDN\nDESCRIPTION: HTML snippet to include Quill 1.0 release candidate CSS and JavaScript files from the CDN. This shows how to include both themes (Snow and Bubble) and both full and minified JavaScript versions.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/quill-1-0-release-candidate-released.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"//cdn.quilljs.com/1.0.0-rc.0/quill.snow.css\" rel=\"stylesheet\" />\n<link href=\"//cdn.quilljs.com/1.0.0-rc.0/quill.bubble.css\" rel=\"stylesheet\" />\n\n<script src=\"//cdn.quilljs.com/1.0.0-rc.0/quill.js\"></script>\n<script src=\"//cdn.quilljs.com/1.0.0-rc.0/quill.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Context-Specific Key Binding in Quill JavaScript\nDESCRIPTION: Illustrates how to add a context-specific key binding in Quill. The example shows a binding for the Backspace key that removes formatting at the beginning of a list or blockquote.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/modules/keyboard.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nquill.keyboard.addBinding({ key: 'Backspace' }, {\n  collapsed: true,\n  format: ['blockquote', 'list'],\n  offset: 0\n}, function(range, context) {\n  if (context.format.list) {\n    this.quill.format('list', false);\n  } else {\n    this.quill.format('blockquote', false);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a KaTeX Equation Format in Quill using Parchment\nDESCRIPTION: This code snippet demonstrates how to create a custom Equation format using Parchment, Quill's new document model. It integrates KaTeX for rendering mathematical equations and defines methods for handling the equation's value.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/the-road-to-1-0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Equation extends Parchment.Embed {\n  constructor(value) {\n    super(value);\n    this.value = value;\n    this.domNode.setAttribute('contenteditable', false);\n    katex.render(value, this.domNode);\n  }\n\n  getValue() {\n    return this.value;\n  }\n}\n\nQuill.registerFormat(Equation);\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with Snow Theme\nDESCRIPTION: Creates a new Quill editor instance with the Snow theme and a placeholder text. The editor is initialized on an element with ID 'editor'.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/snow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst quill = new Quill('#editor', {\n placeholder: 'Compose an epic...',\n theme: 'snow' \n});\n```\n\n----------------------------------------\n\nTITLE: Newline Handling for Line Formatting in JavaScript\nDESCRIPTION: Shows how Quill handles newlines to maintain atomicity and clarity in line formatting.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = [\n  { text: \"Hello\" },\n  { text: \"\\n\", attributes: { align: \"center\" } },\n  { text: \"World\" },\n  { text: \"\\n\", attributes: { align: \"right\" } }   // Deltas must end with newline\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Quill Editor with Dynamic Content in JavaScript\nDESCRIPTION: This snippet creates a Quill editor instance and populates it with a large amount of dynamically generated HTML content. It demonstrates how to programmatically insert structured content into a Quill editor, including headings, paragraphs, and nested lists.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/stress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst editor = document.getElementById('editor');\n\neditor.innerHTML = new Array(200).fill(0).map((_, index) => {\n  return `\n    <h2>Heading <i>${index}</i></h2>\n    <p>List items:</p>\n    <ul>\n    ${\n      new Array(20).fill(0).map((_, index) => {\n        return `<li>List <strong>item</strong> ${index}</li>`\n      }).join('')\n    }\n    </ul>\n  >`\n}).join('')\n\nconst quill = new Quill('#editor', {\n placeholder: 'Compose an epic...',\n theme: 'snow' \n});\n```\n\n----------------------------------------\n\nTITLE: Delete Operation Representation in JavaScript\nDESCRIPTION: Demonstrates how delete operations could be represented in the Delta format, using index and length.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst delta = [{\n  delete: {\n    index: 4,\n    length: 1\n  }\n}, {\n  delete: {\n    index: 12,\n    length: 3\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Adding Container Elements to Quill\nDESCRIPTION: Shows how to use the addContainer() method to add and return a container element inside the Quill container, sibling to the editor itself. By convention, Quill module containers have a class name prefixed with 'ql-'.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/api.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = quill.addContainer('ql-custom');\n```\n\n----------------------------------------\n\nTITLE: Line Formatting Representation in JavaScript\nDESCRIPTION: Demonstrates the challenges of representing line formatting in a compact and canonical way.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = [\n  { text: \"Hello\", attributes: { align: \"center\" } },\n  { text: \"\\nWorld\" }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Editor with Bubble Theme in JavaScript\nDESCRIPTION: This JavaScript code initializes a Quill editor instance with the Bubble theme. It sets a placeholder text and targets the editor container with the ID 'editor'.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/src/pages/standalone/bubble.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst quill = new Quill('#editor', {\n placeholder: 'Compose an epic...',\n theme: 'bubble' \n});\n```\n\n----------------------------------------\n\nTITLE: Compact Representation of Formatted Text in JavaScript\nDESCRIPTION: Shows an invalid, non-compact representation of formatted text that violates Delta format constraints.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = [\n  { text: 'Hel' },\n  { text: 'lo' },\n  { text: 'World', attributes: { bold: true } }\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Quill 1.0 Beta via npm\nDESCRIPTION: Command to install the beta version of Quill 1.0 using npm. This installs the specific 1.0.0-beta.0 version of the Quill editor package.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/quill-1-0-beta-release.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install quill@1.0.0-beta.0\n```\n\n----------------------------------------\n\nTITLE: Installing Quill 1.0 Release Candidate via npm\nDESCRIPTION: Command to install the Quill 1.0 release candidate using npm package manager. This is the recommended method for projects using Node.js or a module bundler.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/quill-1-0-release-candidate-released.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install quill@1.0.0-rc.0\n```\n\n----------------------------------------\n\nTITLE: Delta with Invalid Format Ranges\nDESCRIPTION: This code snippet showcases a potentially invalid Delta, resulting from applying other Deltas without careful consideration of format ranges. Deltas themselves do not inherently ascribe meaning to attribute key-value pairs or embed types. It illustrates a scenario where different insert types (image, text, video) are assigned attributes that might not be logically applicable or might have conflicting meanings.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/docs/guides/designing-the-delta-format.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst delta = [{\n  insert: {\n    image: \"https://imgur.com/\"\n  },\n  attributes: {\n    duration: 600\n  }\n}, {\n  insert: \"Hello\",\n  attributes: {\n    alt: \"Funny cat photo\"\n  }\n}, {\n  insert: {\n    video: \"https://youtube.com/\"\n  },\n  attributes: {\n    bold: true\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Converting Old Delta to New Rich Text Delta in JavaScript\nDESCRIPTION: This snippet demonstrates how to convert an old Delta format to the new Rich Text Delta format using the rich-text module. It handles explicit deletes, support for embeds, and ensures proper conversion of insert, retain, and delete operations.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/upgrading-to-rich-text-deltas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar richText = require('rich-text');\n\nvar newDelta = new richText.Delta();\nvar index = 0;\nvar changeLength = 0;\noldDelta.ops.forEach(function (op) {\n  if (_.isString(op.value)) {\n    // Insert operation\n    if (op.value === '!' && op.attributes && _.isString(op.attributes.src)) {\n      // Found the old hacky representation for an embed\n      // Quill only supports images so far so we can be confident this is an image\n      // which is represented by 1\n      newDelta.insert(1, op.attributes);\n    } else {\n      newDelta.insert(op.value, op.attributes);\n    }\n    changeLength += op.value.length;\n  } else if (_.isNumber(op.start) && _.isNumber(op.end)) {\n    // Retain operation\n    if (op.start > index) {\n      // Delete operation was implied by the current retain operation\n      var length = op.start - index;\n      newDelta.delete(length);\n      changeLength -= length;\n    }\n    // Now handle or retain operation\n    newDelta.retain(op.end - op.start, op.attributes);\n    index = op.end;\n  } else {\n    throw new Error('You have a misformed delta');\n  }\n});\n\n// Handle implied deletes at the end of the document\nif (oldDelta.endLength < oldDelta.startLength + changeLength) {\n  var length = oldDelta.startLength + changeLength - oldDelta.endLength;\n  newDelta.delete(length);\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Markdown Link in Blog Post\nDESCRIPTION: This snippet demonstrates how to insert a markdown-style link within the blog post content. It links to a previous blog post about Quill's roadmap to version 1.0.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/are-we-there-yet-to-1-0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1.0 roadmap](/blog/the-road-to-1-0/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Web Crawler Permissions in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers (*) to access all parts of the website. Uses standard directives to set open access permissions.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Adding More Content Separator in Markdown\nDESCRIPTION: This snippet shows the use of a special comment in markdown to indicate where to truncate the post for a preview or 'read more' functionality.\nSOURCE: https://github.com/slab/quill/blob/main/packages/website/content/blog/are-we-there-yet-to-1-0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* more */}\n```"
  }
]