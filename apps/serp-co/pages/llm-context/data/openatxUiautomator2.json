[
  {
    "owner": "openatx",
    "repo": "uiautomator2",
    "content": "TITLE: Selector Usage with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to use selectors to find and interact with UI elements based on their text attribute using uiautomator2.  It waits for an element to appear and then clicks it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Selector操作\nsel = d(text=\"Gmail\")\nsel.wait()\nsel.click()\n```\n\n----------------------------------------\n\nTITLE: Check if UI Object Exists with uiautomator2\nDESCRIPTION: This snippet shows how to check if a UI element with specific properties exists on the screen using the `exists` method. It can also wait for a specified timeout for the element to appear.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").exists # True if exists, else False\nd.exists(text=\"Settings\") # alias of above property.\n\n# advanced usage\nd(text=\"Settings\").exists(timeout=3) # wait for Settings to appear in 3s, same as .wait(3)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Android Device with uiautomator2 in Python\nDESCRIPTION: This Python code snippet demonstrates how to connect to an Android device using the uiautomator2 library. It initializes a device connection using `u2.connect()` and prints the device information. This requires the `uiautomator2` library to be installed.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\n\nd = u2.connect() # connect to device\nprint(d.info)\n```\n\n----------------------------------------\n\nTITLE: Get/Set/Clear Text of Editable Field in Python\nDESCRIPTION: This snippet demonstrates how to get, set, and clear text of an editable field (e.g., EditText widgets) using the uiautomator2 library.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").get_text()  # get widget text\nd(text=\"Settings\").set_text(\"My text...\")  # set the text\nd(text=\"Settings\").clear_text()  # clear the text\n```\n\n----------------------------------------\n\nTITLE: Waiting for UI object with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to wait for a UI object to appear or disappear using the `wait` and `wait_gone` methods. It requires the `uiautomator2` library. The `timeout` parameter specifies the maximum time to wait in seconds. These methods return a boolean value indicating whether the UI object appeared or disappeared within the specified timeout.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n# wait until the UI object appears\nd(text=\"Settings\").wait(timeout=3.0) # return bool\n# wait until the UI object is gone\nd(text=\"Settings\").wait_gone(timeout=1.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to connect to an Android device using the uiautomator2 library. It shows how to connect using the device's serial number or automatically connect when only one device is available. It also includes basic information retrieval examples.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\n\nd = u2.connect(\"--serial-here--\") # 只有一个设备也可以省略参数\nd = u2.connect() # 一个设备时, read env-var ANDROID_SERIAL\n\n# 信息获取\nprint(d.info)\nprint(d.device_info)\nwidth, height = d.window_size()\nprint(d.wlan_ip)\nprint(d.serial)\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot with uiautomator2\nDESCRIPTION: This code shows how to capture a screenshot of the Android device's screen. It can save the screenshot to a file (requires Android 4.2 or higher), or return the image in PIL.Image, opencv, or raw JPEG data formats.  Requires installing necessary libraries, i.e. pillow for PIL format, numpy and cv2 for opencv format.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n# take screenshot and save to a file on the computer, require Android>=4.2.\nd.screenshot(\"home.jpg\")\n    \n# get PIL.Image formatted images. Naturally, you need pillow installed first\nimage = d.screenshot() # default format=\"pillow\"\nimage.save(\"home.jpg\") # or home.png. Currently, only png and jpg are supported\n\n# get opencv formatted images. Naturally, you need numpy and cv2 installed first\nimport cv2\nimage = d.screenshot(format='opencv')\ncv2.imwrite('home.jpg', image)\n\n# get raw jpeg data\nimagebin = d.screenshot(format='raw')\nopen(\"some.jpg\", \"wb\").write(imagebin)\n```\n\n----------------------------------------\n\nTITLE: UI Interaction without Session in uiautomator2 Python\nDESCRIPTION: These snippets demonstrate how to interact with UI elements directly (without a session) using uiautomator2. Examples include clicking, long clicking, double clicking, swiping, and dragging.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# 无session状态下操作\nd.click(10, 20) # 坐标点击\nd.long_click(10, 10)\nd.double_click(10, 20)\n\nd.swipe(10, 20, 80, 90) # 从(10, 20)滑动到(80, 90)\nd.swipe_ext(\"right\") # 整个屏幕右滑动\nd.swipe_ext(\"right\", scale=0.9) # 屏幕右滑，滑动距离为屏幕宽度的90%\nd.drag(10, 10, 80, 80)\n```\n\n----------------------------------------\n\nTITLE: Launching an App with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates different methods to launch an Android application using uiautomator2. It showcases launching by package name, with the monkey command, and by specifying the main activity. Requires an initialized uiautomator2 device object `d` and the target application to be installed.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# The default method is to parse the mainActivity of the apk package through atx-agent, and then call am start -n $package/$activity to start\nd.app_start(\"com.example.hello_world\")\n\n# Use monkey -p com.example.hello_world -c android.intent.category.LAUNCHER 1 to start\n# This method has a side effect, it will automatically turn off the phone's rotation lock\nd.app_start(\"com.example.hello_world\", use_monkey=True) # start with package name\n\n# Start the application by specifying the main activity, equivalent to calling am start -n com.example.hello_world/.MainActivity\nd.app_start(\"com.example.hello_world\", \".MainActivity\")\n```\n\n----------------------------------------\n\nTITLE: Perform Click Action on UI Object with uiautomator2\nDESCRIPTION: This snippet demonstrates different ways to perform a click action on a UI element using the `click()` method. It covers clicking the center, waiting for the element to appear, clicking with offset coordinates, clicking if the element exists, and clicking until the element is gone.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\n# click on the center of the specific UI object\nd(text=\"Settings\").click()\n\n# wait for the element to appear for at most 10 seconds and then click\nd(text=\"Settings\").click(timeout=10)\n\n# click with offset(x_offset, y_offset)\n# click_x = x_offset * width + x_left_top\n# click_y = y_offset * height + y_left_top\nd(text=\"Settings\").click(offset=(0.5, 0.5)) # Default center\nd(text=\"Settings\").click(offset=(0, 0)) # click left-top\nd(text=\"Settings\").click(offset=(1, 1)) # click right-bottom\n\n# click when exists in 10s, default timeout 0s\nclicked = d(text='Skip').click_exists(timeout=10.0)\n\n# click until the element is gone, return bool\nis_gone = d(text=\"Skip\").click_gone(maxretry=10, interval=1.0) # maxretry default 10, interval default 1.0\n```\n\n----------------------------------------\n\nTITLE: Dump UI Hierarchy with uiautomator2\nDESCRIPTION: This example demonstrates how to retrieve the UI hierarchy of the current screen. The `d.dump_hierarchy()` method returns an XML representation of the UI.  The `compressed`, `pretty`, and `max_depth` parameters control the level of detail in the XML output.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n# get the UI hierarchy dump content\nxml = d.dump_hierarchy()\n\n# compressed=True: include not important nodes\n# pretty: format xml\n# max_depth: limit xml depth, default 50\nxml = d.dump_hierarchy(compressed=False, pretty=False, max_depth=50)\n```\n\n----------------------------------------\n\nTITLE: Complete uiautomator2 XPath example in Python\nDESCRIPTION: A comprehensive example combining various features of the uiautomator2 XPath extension, including connecting to a device, starting an app, clicking elements, using popup monitoring, enabling background monitoring, swiping, and scrolling.  This illustrates how to manage interactions, UI changes, and element properties.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\nfrom uiautomator2 import Direction\n\ndef main():\n    d = u2.connect()\n    d.app_start(\"com.netease.cloudmusic\", stop=True)\n\n    # Steps\n    d.xpath(\"//*[@text='Private FM']/../android.widget.ImageView\").click()\n    d.xpath(\"Next Song\").click()\n\n    # Monitor popups for 2 seconds, the time may exceed 2 seconds\n    d.xpath.sleep_watch(2)\n    d.xpath(\"Go to Previous Level\").click()\n    \n    d.xpath(\"Go to Previous Level\").click(watch=False) # Click without triggering watch\n    d.xpath(\"Go to Previous Level\").click(timeout=5.0) # Wait timeout 5 seconds\n\n    d.xpath.watch_background() # Enable background monitoring mode, checks every 4 seconds by default\n    d.xpath.watch_background(interval=2.0) # Check every 2 seconds\n    d.xpath.watch_stop() # Stop monitoring\n\n    for el in d.xpath('//android.widget.EditText').all():\n        print(\"rect:\", el.rect) # Output tuple: (left_x, top_y, width, height)\n        print(\"bounds:\", el.bounds) # Output tuple: (left, top, right, bottom)\n        print(\"center:\", el.center())\n        el.click() # Click operation\n        print(el.elem) # Output the Node parsed by lxml\n\n    # Swiping\n    el = d.xpath('@com.taobao.taobao:id/fl_banner_container').get()\n\n    # Swipe from right to left\n    el.swipe(Direction.HORIZ_FORWARD) \n    el.swipe(Direction.LEFT) # Swipe from right to left\n\n    # Swipe from bottom to top\n    el.swipe(Direction.FORWARD)\n    el.swipe(Direction.UP)\n\n    el.swipe(\"right\", scale=0.9) # scale defaults to 0.9, swipe distance is 80% of the control's width, the swipe center aligns with the control's center\n    el.swipe(\"up\", scale=0.5) # Swipe distance is 50% of the control's height\n\n    # scroll is different from swipe; scroll returns a bool indicating whether new elements appeared\n    el.scroll(Direction.FORWARD) # Swipe down\n    el.scroll(Direction.BACKWARD) # Swipe up\n    el.scroll(Direction.HORIZ_FORWARD) # Swipe horizontally forward\n    el.scroll(Direction.HORIZ_BACKWARD) # Swipe horizontally backward\n\n    if el.scroll(\"forward\"):\n        print(\"Can continue scrolling\")\n```\n\n----------------------------------------\n\nTITLE: Set Clipboard Content with uiautomator2\nDESCRIPTION: This example demonstrates how to set the clipboard content on the Android device using the `d.clipboard` attribute or the `d.set_clipboard` method. The `d.set_clipboard` method also allows setting a label for the clipboard content.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nd.clipboard = 'hello-world'\n# or\nd.set_clipboard('hello-world', 'label')\n```\n\n----------------------------------------\n\nTITLE: Run Shell Command Python\nDESCRIPTION: Executes a short-lived shell command on the Android device. The `d.shell` method provides timeout protection and returns both the output and the exit code. It supports both string and list formats for the command.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\noutput, exit_code = d.shell(\"pwd\", timeout=60) # timeout 60s (Default)\n# output: \"/\\n\", exit_code: 0\n# Similar to command: adb shell pwd\n\n# Since `shell` function return type is `namedtuple(\"ShellResponse\", (\"output\", \"exit_code\"))`\n# so we can do some tricks\noutput = d.shell(\"pwd\").output\nexit_code = d.shell(\"pwd\").exit_code\n```\n\nLANGUAGE: python\nCODE:\n```\noutput, exit_code = d.shell([\"ls\", \"-l\"])\n# output: \"/....\", exit_code: 0\n```\n\n----------------------------------------\n\nTITLE: Grant App Permissions Python\nDESCRIPTION: Grants all required permissions to a specified application. The `d.app_auto_grant_permissions()` method automates the permission granting process for the given app package name.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nd.app_auto_grant_permissions(\"io.appium.android.apis\")\n```\n\n----------------------------------------\n\nTITLE: Basic uiautomator2 XPath usage in Python\nDESCRIPTION: Demonstrates basic usage of the uiautomator2 XPath extension for connecting to a device, starting an application, and clicking on an element located by its text attribute using XPath.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\n\ndef main():\n    d = u2.connect()\n    d.app_start(\"com.netease.cloudmusic\", stop=True)\n\n    d.xpath('//*[@text=\"Private FM\"]').click()\n    \n    #\n    # Advanced Usage (Element Positioning)\n    #\n\n    # Starting with @\n    d.xpath('@personal-fm') # Equivalent to d.xpath('//*[@resource-id=\"personal-fm\"]')\n    \n    # Multiple condition positioning, similar to AND\n    d.xpath('//android.widget.Button').xpath('//*[@text=\"Private FM\"]')\n    \n    d.xpath('//*[@text=\"Private FM\"]').parent() # Position to the parent element\n    d.xpath('//*[@text=\"Private FM\"]').parent(\"@android:list\") # Position to the parent element that meets the condition\n\n    # When using child, it is not recommended to use multiple condition XPath because it can be confusing\n    d.xpath('@android:id/list').child('/android.widget.TextView').click()\n    # Equivalent to the following\n    # d.xpath('//*[@resource-id=\"android:id/list\"]/android.widget.TextView').click()\n```\n\n----------------------------------------\n\nTITLE: Perform Long Click on UI Object with uiautomator2\nDESCRIPTION: This snippet shows how to perform a long click action on the center of a UI element using the `long_click()` method.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n# long click on the center of the specific UI object\nd(text=\"Settings\").long_click()\n```\n\n----------------------------------------\n\nTITLE: Get UI Object Text with uiautomator2\nDESCRIPTION: This snippet demonstrates how to get, set, and clear the text of an editable UI element (e.g., EditText) using the `get_text()`, `set_text()`, and `clear_text()` methods.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").get_text()  # get widget text\nd(text=\"Settings\").set_text(\"My text...\")  # set the text\nd(text=\"Settings\").clear_text()  # clear the text\n```\n\n----------------------------------------\n\nTITLE: Click UI element with children via uiautomator2\nDESCRIPTION: This snippet demonstrates chained element selection using `child_by_text` and `child` to locate and click a switch widget next to a 'Wi‑Fi' TextView within a ListView. This is useful when the target element doesn't have unique properties, but is related to a uniquely identifiable element.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nd(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n  .child_by_text(\"Wi‑Fi\", className=\"android.widget.LinearLayout\") \\\n  .child(className=\"android.widget.Switch\") \\\n  .click()\n```\n\n----------------------------------------\n\nTITLE: Select UI Element with Relative Positioning in uiautomator2\nDESCRIPTION: This snippet illustrates how to select a UI element based on its relative position to another element using methods like `right`. In this example, it selects the 'Switch' widget located on the right side of the element containing the text 'Wi‑Fi' and then clicks on it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n## select \"switch\" on the right side of \"Wi‑Fi\"\nd(text=\"Wi‑Fi\").right(className=\"android.widget.Switch\").click()\n```\n\n----------------------------------------\n\nTITLE: Press Key Event Python\nDESCRIPTION: Simulates pressing a hardware or software key on the device. Keys can be specified by name (e.g., \"home\", \"back\") or by key code and meta state.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nd.press(\"home\") # press the home key, with key name\nd.press(\"back\") # press the back key, with key name\nd.press(0x07, 0x02) # press keycode 0x07('0') with META ALT(0x02)\n```\n\n----------------------------------------\n\nTITLE: XPath Operations with uiautomator2 in Python\nDESCRIPTION: These snippets showcase how to use XPath to locate and interact with UI elements. It demonstrates waiting for elements, clicking elements, getting element information, and iterating through elements.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# XPath操作\n# 元素操作\nd.xpath(\"立即开户\").wait() # 等待元素，最长等10s（默认）\nd.xpath(\"立即开户\").wait(timeout=10) # 修改默认等待时间\n\n# 常用配置\nd.settings['wait_timeout'] = 20 # 控件查找默认等待时间(默认20s)\n\nd.xpath(\"立即开户\").click() # 包含查找等待+点击操作，匹配text或者description等于立即开户的按钮\nd.xpath(\"//*[@text='私人FM']/../android.widget.ImageView\").click()\n\nd.xpath('//*[@text=\"私人FM\"]').get().info # 获取控件信息\n\nfor el in d.xpath('//android.widget.EditText').all():\n    print(\"rect:\", el.rect) # output tuple: (left_x, top_y, width, height)\n    print(\"bounds:\", el.bounds) # output tuple: （left, top, right, bottom)\n    print(\"center:\", el.center())\n    el.click() # click operation\n    print(el.elem) # 输出lxml解析出来的Node\n```\n\n----------------------------------------\n\nTITLE: Using Watcher with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to use the `watcher` to monitor for UI elements and perform actions when a selector does not find a match. It requires the `uiautomator2` library. `d.watcher.when` specifies the UI element to watch for, and `click()` specifies the action to perform. `d.watcher.start()` starts the background monitoring thread, while `d.watcher.stop()` stops it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n# Common writing, register anonymous monitoring\nd.watcher.when(\"Install\").click()\n\n# Register monitoring named ANR, when ANR and Force Close appear, click Force Close\nd.watcher(\"ANR\").when(xpath=\"ANR\").when(\"Force Close\").click()\n\n# Other callback examples\nd.watcher.when(\"Grab red envelope\").press(\"back\")\nd.watcher.when(\"//*[@text = 'Out of memory']\").call(lambda d: d.shell('am force-stop com.im.qq'))\n\n# Callback description\ndef click_callback(d: u2.Device):\n    d.xpath(\"OK\").click() # Calling in the callback will not trigger the watcher again\n\nd.xpath(\"Continue\").click() # When using d.xpath to check elements, the watcher will be triggered (currently up to 5 times)\n\n# Start background monitoring\nd.watcher.start()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Remove ANR monitoring\nd.watcher.remove(\"ANR\")\n\n# Remove all monitoring\nd.watcher.remove()\n\n# Start background monitoring\nd.watcher.start()\nd.watcher.start(2.0) # Default monitoring interval 2.0s\n\n# Force run all monitoring\nd.watcher.run()\n\n# Stop monitoring\nd.watcher.stop()\n\n# Stop and remove all monitoring, commonly used for initialization\nd.watcher.reset()\n```\n\n----------------------------------------\n\nTITLE: Managing App Sessions with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates how to manage application sessions using the `session` method of the uiautomator2 library. It showcases starting, closing, restarting, and attaching to an app session, as well as using a `with` statement for automatic session management and detecting app crashes. Requires the uiautomator2 library and a connected device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsess = d.session(\"com.netease.cloudmusic\") # start NetEase Cloud Music\nsess.close() # stop NetEase Cloud Music\nsess.restart() # cold start NetEase Cloud Music\n```\n\nLANGUAGE: python\nCODE:\n```\nwith d.session(\"com.netease.cloudmusic\") as sess:\n    sess(text=\"Play\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\n# launch app if not running, skip launch if already running\nsess = d.session(\"com.netease.cloudmusic\", attach=True)\n```\n\nLANGUAGE: python\nCODE:\n```\n# check if the session is ok.\n# Warning: function name may change in the future\nsess.running() # True or False\n```\n\n----------------------------------------\n\nTITLE: Touch and Drag with uiautomator2\nDESCRIPTION: This snippet shows the more primitive touch and drag functionality for simulating precise touch interactions. It involves simulating a 'down' press, a 'move' action, and an 'up' release at specified coordinates.  It requires explicit control over timing with `time.sleep()`.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nd.touch.down(10, 10) # Simulate press\nimport time\ntime.sleep(.01) # Delay between down and move, control it yourself\nd.touch.move(15, 15) # Simulate move\nd.touch.up(10, 10) # Simulate release\n```\n\n----------------------------------------\n\nTITLE: Swipe Ext Python\nDESCRIPTION: Extends the basic swipe functionality with options for direction, scale, and bounding box. It allows swiping in predefined directions (left, right, up, down) with a configurable scale factor and within a specified region.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nd.swipe_ext(\"right\") # 手指右滑，4选1 \"left\", \"right\", \"up\", \"down\"\nd.swipe_ext(\"right\", scale=0.9) # 默认0.9, 滑动距离为屏幕宽度的90%\nd.swipe_ext(\"right\", box=(0, 0, 100, 100)) # 在 (0,0) -> (100, 100) 这个区域做滑动\n\n# 实践发现上滑或下滑的时候，从中点开始滑动成功率会高一些\nd.swipe_ext(\"up\", scale=0.8) # 代码会vkk\n\n# 还可以使用Direction作为参数\nfrom uiautomator2 import Direction\n\nd.swipe_ext(Direction.FORWARD) # 页面下翻, 等价于 d.swipe_ext(\"up\"), 只是更好理解\nd.swipe_ext(Direction.BACKWARD) # 页面上翻\nd.swipe_ext(Direction.HORIZ_FORWARD) # 页面水平右翻\nd.swipe_ext(Direction.HORIZ_BACKWARD) # 页面水平左翻\n```\n\n----------------------------------------\n\nTITLE: Get Children Elements with uiautomator2\nDESCRIPTION: This snippet shows how to retrieve child elements of a UI element using the `child` method.  It selects a ListView and then finds a child element within it that has the text 'Bluetooth'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n# get the children or grandchildren\nd(className=\"android.widget.ListView\").child(text=\"Bluetooth\")\n```\n\n----------------------------------------\n\nTITLE: Get count of UI element instances with uiautomator2\nDESCRIPTION: This snippet illustrates how to determine the number of UI elements matching specific criteria using `count` and `len`. It also demonstrates how to access a specific instance using index and iterate over the list.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n# get the count of views with text \"Add new\" on the current screen\nd(text=\"Add new\").count\n\n# same as count property\nlen(d(text=\"Add new\"))\n\n# get the instance via index\nd(text=\"Add new\")[0]\nd(text=\"Add new\")[1]\n...\n\n# iterator\nfor view in d(text=\"Add new\"):\n    view.info  # ...\n```\n\n----------------------------------------\n\nTITLE: UI Hierarchy Dump with uiautomator2 in Python\nDESCRIPTION: This snippet shows how to dump the UI hierarchy of the current screen as an XML string using uiautomator2. This is useful for analyzing the UI structure and identifying elements for automation.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# 获取hierarchy\nd.dump_hierarchy() # str\n```\n\n----------------------------------------\n\nTITLE: Select UI Object with uiautomator2 Selector\nDESCRIPTION: This example demonstrates how to use the Selector mechanism to identify a specific UI object in the current window based on its properties like text and class name.  Selectors provide a flexible way to locate UI elements for automation.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n# Select the object with text 'Clock' and its className is 'android.widget.TextView'\nd(text='Clock', className='android.widget.TextView')\n```\n\n----------------------------------------\n\nTITLE: Get Child by Text with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to find a child element by its text content using the uiautomator2 library. It finds a child with text 'Bluetooth' and className 'android.widget.LinearLayout' within a ListView, and it also shows using allow_scroll_search=True\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n# get the child matching the condition className=\"android.widget.LinearLayout\"\n# and also its children or grandchildren with text \"Bluetooth\"\nd(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n .child_by_text(\"Bluetooth\", className=\"android.widget.LinearLayout\")\n\n# get children by allowing scroll search\nd(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n .child_by_text(\n    \"Bluetooth\",\n    allow_scroll_search=True,\n    className=\"android.widget.LinearLayout\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Scroll to a specified position in Python\nDESCRIPTION: Demonstrates how to scroll to a specified element using the `scroll_to` function, including specifying the direction and maximum number of swipes.  It also illustrates how to scroll within a specific element using direction.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom uiautomator2 import connect_usb, Direction\n\nd = connect_usb()\n\nd.scroll_to(\"Place Order\")\nd.scroll_to(\"Place Order\", Direction.FORWARD) # Defaults to scrolling down. Other options include BACKWARD, HORIZ_FORWARD (horizontal), HORIZ_BACKWARD (horizontal reverse)\nd.scroll_to(\"Place Order\", Direction.HORIZ_FORWARD, max_swipes=5)\n\n# Additionally, you can scroll within a specified element\nd.xpath('@com.taobao.taobao:id/dx_root').scroll(Direction.HORIZ_FORWARD)\nd.xpath('@com.taobao.taobao:id/dx_root').scroll_to(\"Place Order\", Direction.HORIZ_FORWARD)\n```\n\n----------------------------------------\n\nTITLE: Touch and Drag Python\nDESCRIPTION: Simulates a touch and drag gesture using low-level touch events. It involves pressing down, moving the touch, and releasing the touch at specified coordinates. Requires precise timing for accurate simulation.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nd.touch.down(10, 10) # 模拟按下\ntime.sleep(.01) # down 和 move 之间的延迟，自己控制\nd.touch.move(15, 15) # 模拟移动\nd.touch.up(10, 10) # 模拟抬起\n```\n\n----------------------------------------\n\nTITLE: Connecting to Android device using uiautomator2\nDESCRIPTION: Connects to an Android device using its serial number.  The serial number can be obtained from `adb devices`. The `d.info` will print the device information.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\n\nd = u2.connect('123456f') # alias for u2.connect_usb('123456f')\nprint(d.info)\n```\n\n----------------------------------------\n\nTITLE: Stopping and Clearing App Data in uiautomator2 (Python)\nDESCRIPTION: This code shows how to stop an app and clear its data using uiautomator2. `app_stop` is equivalent to `am force-stop`, while `app_clear` is equivalent to `pm clear`. Requires uiautomator2 library and device connection.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# equivalent to `am force-stop`, thus you could lose data\nd.app_stop(\"com.example.hello_world\") \n# equivalent to `pm clear`\nd.app_clear('com.example.hello_world')\n```\n\n----------------------------------------\n\nTITLE: Getting application information using uiautomator2\nDESCRIPTION: Retrieves information about an installed Android application, such as its main activity, label, version name, and version code.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nd.app_info(\"com.examples.demo\")\n# expect output\n#{\n#    \"mainActivity\": \"com.github.uiautomator.MainActivity\",\n#    \"label\": \"ATX\",\n#    \"versionName\": \"1.1.7\",\n#    \"versionCode\": 1001007,\n```\n\n----------------------------------------\n\nTITLE: Swipe on Screen with uiautomator2\nDESCRIPTION: This snippet shows how to simulate a swipe gesture on the screen from starting coordinates (sx, sy) to ending coordinates (ex, ey). The swipe duration defaults to 0.5 seconds and can be customized.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nd.swipe(sx, sy, ex, ey)\nd.swipe(sx, sy, ex, ey, 0.5) # swipe for 0.5s (default)\n```\n\n----------------------------------------\n\nTITLE: Setting Global HTTP Timeout in uiautomator2 Python\nDESCRIPTION: This code snippet demonstrates how to set the global HTTP timeout for uiautomator2 using `u2.HTTP_TIMEOUT`. This affects all subsequent HTTP requests made by the uiautomator2 library.  The default value is 60 seconds.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nu2.HTTP_TIMEOUT = 60 # Default value 60s, default HTTP request timeout\n```\n\n----------------------------------------\n\nTITLE: Perform Long Click on UI Object in Python\nDESCRIPTION: This snippet demonstrates how to perform a long click action on a specific UI object using the uiautomator2 library.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n# long click on the center of the specific UI object\nd(text=\"Settings\").long_click()\n```\n\n----------------------------------------\n\nTITLE: XPath: Elements Containing Resource ID\nDESCRIPTION: This shows how to locate elements whose `resource-id` attribute contains a specific string using the `contains` function in XPath. This example finds all elements with resource IDs containing 'login'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_14\n\nLANGUAGE: xpath\nCODE:\n```\n# Elements where resource-id contains 'login'\n//*[contains(@resource-id, 'login')]\n```\n\n----------------------------------------\n\nTITLE: Double Click Python\nDESCRIPTION: Performs a double click at the given screen coordinates (x, y). The default duration between clicks is 0.1 seconds, which can be adjusted.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nd.double_click(x, y)\nd.double_click(x, y, 0.1) # default duration between two click is 0.1s\n```\n\n----------------------------------------\n\nTITLE: Implicit Wait Configuration in uiautomator2 Python\nDESCRIPTION: This snippet configures the implicit wait time for element searching in uiautomator2. It sets the maximum time (in seconds) to wait for an element to appear before throwing an exception.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# 设置查找元素等待时间，单位秒\nd.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Press Key with uiautomator2\nDESCRIPTION: This code shows how to simulate pressing a key on the Android device. You can either use a key name (e.g., \"home\", \"back\") or a key code with a meta state.  A list of supported key names are provided.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nd.press(\"home\") # press the home key, with key name\nd.press(\"back\") # press the back key, with key name\nd.press(0x07, 0x02) # press keycode 0x07('0') with META ALT(0x02)\n```\n\n----------------------------------------\n\nTITLE: XMLElement operations\nDESCRIPTION: This example showcases how to interact with an XMLElement object, which is returned by XPathSelector.get(). It demonstrates getting element properties like rect, bounds, center, text, and attributes, as well as performing actions like clicking, taking screenshots, and swiping.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# 通过XPathSelector.get() 返回的对象叫做 XMLElement\nel = d.xpath(\"@com.example:id/home_searchedit\").get()\n\nlx, ly, width, height = el.rect # 获取左上角坐标和宽高\nlx, ly, rx, ry = el.bounds # 左上角与右下角的坐标\nx, y = el.center() # get element center position\nx, y = el.offset(0.5, 0.5) # same as center()\n\n# send click\nel.click()\n\n# 打印文本内容\nprint(el.text) \n\n# 获取组内的属性, dict类型\nprint(el.attrib)\n\n# 控件截图 （原理为先整张截图，然后再crop）\nel.screenshot()\n\n# 控件滑动\nel.swipe(\"right\") # left, right, up, down\nel.swipe(\"right\", scale=0.9) # scale默认0.9, 意思是滑动距离为控件宽度的90%, 上滑则为高度的90%\n\nprint(el.info)\n# output example\n{'index': '0',\n 'text': '',\n 'resourceId': 'com.example:id/home_searchedit',\n 'checkable': 'true',\n 'checked': 'true',\n 'clickable': 'true',\n 'enabled': 'true',\n 'focusable': 'false',\n 'focused': 'false',\n 'scrollable': 'false',\n 'longClickable': 'false',\n 'password': 'false',\n 'selected': 'false',\n 'visibleToUser': 'true',\n 'childCount': 0,\n 'className': 'android.widget.Switch',\n 'bounds': {'left': 882, 'top': 279, 'right': 1026, 'bottom': 423},\n 'packageName': 'com.android.settings',\n 'contentDescription': '',\n 'resourceName': 'android:id/switch_widget'}\n```\n\n----------------------------------------\n\nTITLE: Get Child UI Object in Python\nDESCRIPTION: This snippet demonstrates how to get a child UI object using the uiautomator2 library. It finds a child with the text 'Bluetooth' within a ListView.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n# get the children or grandchildren\nd(className=\"android.widget.ListView\").child(text=\"Bluetooth\")\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates how to execute shell commands on the Android device using the `shell` method in the uiautomator2 library.  The `shell` method allows running shell commands through ADB. It requires a uiautomator2 device connection.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\noutput, exit_code = d.shell(\"pwd\", timeout=60) # timeout 60s (Default)\n# output: \"/\\n\", exit_code: 0\n# Similar to command: adb shell pwd\n\n# Since `shell` function return type is `namedtuple(\"ShellResponse\", (\"output\", \"exit_code\"))`\n# so we can do some tricks\noutput = d.shell(\"pwd\").output\nexit_code = d.shell(\"pwd\").exit_code\n```\n\nLANGUAGE: python\nCODE:\n```\noutput, exit_code = d.shell([\"ls\", \"-l\"])\n# output: \"/....\", exit_code: 0\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions and Opening URLs in uiautomator2 (Python)\nDESCRIPTION: This code shows how to grant all permissions to an app and open a URL using uiautomator2. Requires a device connection and uiautomator2 library.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# grant all the permissions\nd.app_auto_grant_permissions(\"io.appium.android.apis\")\n\n# open scheme\nd.open_url(\"appname://appnamehost\")\n# same as\n# adb shell am start -a android.intent.action.VIEW -d \"appname://appnamehost\"\n```\n\n----------------------------------------\n\nTITLE: Unlock Screen Python\nDESCRIPTION: Unlocks the device screen using the `d.unlock()` method, which simulates pressing the power button and swiping from left-bottom to right-top.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nd.unlock()\n# This is equivalent to\n# 1. press(\"power\")\n# 2. swipe from left-bottom to right-top\n```\n\n----------------------------------------\n\nTITLE: Swipe Points Python\nDESCRIPTION: Performs a swipe action through a series of specified points. The `d.swipe_points` method takes a list of coordinates and the time to spend between each point.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nd.swipe_points([(x0, y0), (x1, y1), (x2, y2)], 0.2))\n# swipe from point(x0, y0) to point(x1, y1) then to point(x2, y2)\n# time will speed 0.2s bwtween two points\n```\n\n----------------------------------------\n\nTITLE: Pull Files Python\nDESCRIPTION: Demonstrates how to pull files from the Android device to the local machine. The `d.pull` method retrieves files from a specified path on the device and saves them locally.  `FileNotFoundError` will be raised if the file is not found on the device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nd.pull(\"/sdcard/tmp.txt\", \"tmp.txt\")\n\n# FileNotFoundError will raise if the file is not found on the device\nd.pull(\"/sdcard/some-file-not-exists.txt\", \"tmp.txt\")\n```\n\n----------------------------------------\n\nTITLE: Open Notification/Quick Settings with uiautomator2\nDESCRIPTION: This code shows how to programmatically open the notification shade and quick settings panel on the Android device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nd.open_notification()\nd.open_quick_settings()\n```\n\n----------------------------------------\n\nTITLE: Wait Activity Python\nDESCRIPTION: Waits for a specific activity to become active. The `d.wait_activity()` method blocks until the specified activity is running or the timeout is reached. Returns true or false.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nd.wait_activity(\".ApiDemos\", timeout=10) # default timeout 10.0 seconds\n# Output: true of false\n```\n\n----------------------------------------\n\nTITLE: Get UI Object Center Point with uiautomator2\nDESCRIPTION: This snippet demonstrates how to get the center point coordinates of a UI element using the `center()` method. It returns the x and y coordinates of the center of the element.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nx, y = d(text=\"Settings\").center()\n# x, y = d(text=\"Settings\").center(offset=(0, 0)) # left-top x, y\n```\n\n----------------------------------------\n\nTITLE: Swipe Extended Function with uiautomator2\nDESCRIPTION: This example demonstrates using the `d.swipe_ext()` function for performing swipes in specific directions (left, right, up, down).  It allows specifying a scale factor (defaulting to 0.9) to control the swipe distance relative to the screen width and a bounding box to restrict the swipe area.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nd.swipe_ext(\"right\") # swipe right, 4 options \"left\", \"right\", \"up\", \"down\"\nd.swipe_ext(\"right\", scale=0.9) # default 0.9, swipe distance is 90% of the screen width\nd.swipe_ext(\"right\", box=(0, 0, 100, 100)) # swipe in the area (0,0) -> (100, 100)\n\n# Practice found that when swiping up or down, starting from the midpoint has a higher success rate\nd.swipe_ext(\"up\", scale=0.8) # The code will vkk\n\n# You can also use Direction as a parameter\nfrom uiautomator2 import Direction\n    \nd.swipe_ext(Direction.FORWARD) # Page down, equivalent to d.swipe_ext(\"up\"), just easier to understand\nd.swipe_ext(Direction.BACKWARD) # Page up\nd.swipe_ext(Direction.HORIZ_FORWARD) # Page horizontally right\nd.swipe_ext(Direction.HORIZ_BACKWARD) # Page horizontally left\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot of UI Object with uiautomator2\nDESCRIPTION: This snippet shows how to capture a screenshot of a specific UI element using the `screenshot()` method. The resulting image can then be saved to a file.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nim = d(text=\"Settings\").screenshot()\nim.save(\"settings.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Two-Point Gesture with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to perform a two-point gesture on the screen using the `gesture` method.  It requires the `uiautomator2` library. The parameters `sx1`, `sy1`, `sx2`, `sy2` are the starting coordinates of the two points and `ex1`, `ey1`, `ex2`, `ey2` are the ending coordinates.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").gesture((sx1, sy1), (sx2, sy2), (ex1, ey1), (ex2, ey2))\n```\n\n----------------------------------------\n\nTITLE: Drag Python\nDESCRIPTION: Simulates a drag action from the starting coordinates (sx, sy) to the ending coordinates (ex, ey). The default drag duration is 0.5 seconds.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nd.drag(sx, sy, ex, ey)\nd.drag(sx, sy, ex, ey, 0.5) # swipe for 0.5s(default)\n```\n\n----------------------------------------\n\nTITLE: Push Files Python\nDESCRIPTION: Demonstrates how to push files from the local machine to the Android device. The `d.push` method allows pushing files to a specified directory, renaming them, and changing their access mode.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# push to a folder\nd.push(\"foo.txt\", \"/sdcard/\")\n# push and rename\nd.push(\"foo.txt\", \"/sdcard/bar.txt\")\n# push fileobj\nwith open(\"foo.txt\", 'rb') as f:\n    d.push(f, \"/sdcard/\")\n# push and change file access mode\nd.push(\"foo.sh\", \"/data/local/tmp/\", mode=0o755)\n```\n\n----------------------------------------\n\nTITLE: Swipe Points on Screen with uiautomator2\nDESCRIPTION: This example demonstrates how to perform a swipe gesture through multiple points on the screen. It takes a list of (x, y) coordinates and an optional time parameter (default 0.2s) defining the speed between points. Mostly used for gestures like nine-grid unlock.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n# swipe from point(x0, y0) to point(x1, y1) then to point(x2, y2)\n# time will speed 0.2s between two points\nd.swipe_points([(x0, y0), (x1, y1), (x2, y2)], 0.2))\n```\n\n----------------------------------------\n\nTITLE: XPathSelector operations in Python\nDESCRIPTION: Demonstrates various operations that can be performed on an XPathSelector object, including clicking, waiting for elements to appear or disappear, getting text, setting text, and iterating through all matched elements. It shows examples of click with timeout, conditional clicks, and getting/setting text on elements.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsl = d.xpath(\"@com.example:id/home_searchedit\") # sl is an XPathSelector object\n\n# Click\nsl.click()\nsl.click(timeout=10) # Specify a timeout, throws XPathElementNotFoundError if not found\nsl.click_exists() # Click if exists, returns whether the click was successful\nsl.click_exists(timeout=10) # Wait up to 10 seconds\n\nsl.match() # Returns None if not matched, otherwise returns an XMLElement\n\n# Wait for the corresponding element to appear, returns XMLElement\n# The default waiting time is 10 seconds\nel = sl.wait()\nel = sl.wait(timeout=15) # Wait for 15 seconds, returns None if not found\n\n# Wait for the element to disappear\nsl.wait_gone()\nsl.wait_gone(timeout=15) \n\n# Similar to wait, but throws XPathElementNotFoundError if not found\nel = sl.get() \nel = sl.get(timeout=15)\n\n# Change the default waiting time to 15 seconds\nd.xpath.global_set(\"timeout\", 15)\nd.xpath.implicitly_wait(15) # Equivalent to the previous line (TODO: Removed)\n\nprint(sl.exists) # Returns whether it exists (bool)\nsl.get_last_match() # Get the last matched XMLElement\n\nsl.get_text() # Get the component name\nsl.set_text(\"\") # Clear the input box\nsl.set_text(\"hello world\") # Input \"hello world\" into the input box\n\n# Iterate through all matched elements\nfor el in d.xpath('//android.widget.EditText').all():\n    print(\"rect:\", el.rect) # Output tuple: (x, y, width, height)\n    print(\"center:\", el.center())\n    el.click() # Click operation\n    print(el.elem) # Output the Node parsed by lxml\n    print(el.text)\n\n# Child operation\nd.xpath('@android:id/list').child('/android.widget.TextView').click()\n# Equivalent to d.xpath('//*[@resource-id=\"android:id/list\"]/android.widget.TextView').all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation Delay with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to configure operation delays using `d.settings`. It allows setting a delay before and after specific operations like `click` and `swipe`. The `operation_delay` setting takes a tuple of two values: the delay before the operation and the delay after the operation, both in seconds.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nprint(d.settings)\n{'operation_delay': (0, 0),\n 'operation_delay_methods': ['click', 'swipe'],\n 'wait_timeout': 20.0}\n\n# Configure delay before click 0.5s, delay after click 1s\nd.settings['operation_delay'] = (.5, 1)\n```\n\n----------------------------------------\n\nTITLE: Swiping UI object with uiautomator2 in Python\nDESCRIPTION: This code snippet shows how to swipe a UI object in different directions (left, right, up, down) using the `swipe` method. It utilizes the `uiautomator2` library and assumes a device object `d` is initialized. The `steps` parameter controls the speed of the swipe, with each step taking approximately 5ms.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").swipe(\"right\")\nd(text=\"Settings\").swipe(\"left\", steps=10)\nd(text=\"Settings\").swipe(\"up\", steps=20) # 1 step is about 5ms, so 20 steps is about 0.1s\nd(text=\"Settings\").swipe(\"down\", steps=20)\n```\n\n----------------------------------------\n\nTITLE: Get Children by Text with uiautomator2\nDESCRIPTION: This snippet shows how to find child elements by matching specific text criteria using `child_by_text`. It retrieves child elements with the class 'android.widget.LinearLayout' which are children or grandchildren of the ListView, containing the text 'Bluetooth'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n# get the child matching the condition className=\"android.widget.LinearLayout\"\n# and also its children or grandchildren with text \"Bluetooth\"\nd(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n .child_by_text(\"Bluetooth\", className=\"android.widget.LinearLayout\")\n\n# get children by allowing scroll search\nd(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n .child_by_text(\n    \"Bluetooth\",\n    allow_scroll_search=True,\n    className=\"android.widget.LinearLayout\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Stopping an app using uiautomator2\nDESCRIPTION: Stops or clears the data of an Android application using the `app_stop` and `app_clear` methods.  `app_stop` is equivalent to `am force-stop`, while `app_clear` is equivalent to `pm clear`.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# equivalent to `am force-stop`, thus you could lose data\nd.app_stop(\"com.example.hello_world\") \n# equivalent to `pm clear`\nd.app_clear('com.example.hello_world')\n```\n\n----------------------------------------\n\nTITLE: Using WatchContext with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to use the `watch_context` to monitor for UI elements and automatically perform actions when they appear.  It requires the `uiautomator2` library. `wait_stable` waits for the interface to stabilize. `ctx.when` specifies the element to watch for, and `click()` or `call()` specifies the action to perform.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nwith d.watch_context() as ctx:\n    # When both (Download Now or Update Now) and Cancel buttons appear, click Cancel\n    ctx.when(\"^Download Now|Update Now\").when(\"Cancel\").click() \n    ctx.when(\"Agree\").click()\n    ctx.when(\"OK\").click()\n    # The above three lines of code are executed immediately, without any waiting\n    \n    ctx.wait_stable() # Start popup monitoring and wait for the interface to stabilize (no popups within two popup check cycles means stable)\n\n    # Use the call function to trigger function callbacks\n    # call supports two parameters, d and el, regardless of parameter position, can be omitted, if passed, the variable name cannot be wrong\n    # eg: When an element matches Midsummer Night, click the back button\n    ctx.when(\"Midsummer Night\").call(lambda d: d.press(\"back\"))\n    ctx.when(\"OK\").call(lambda el: el.click())\n\n    # Other operations\n\n# For convenience, you can also use the default popup monitoring logic in the code\n# Below is the current built-in default logic, you can @ the group owner in the group to add new logic, or directly submit a PR\n    # when(\"Continue to use\").click()\n    # when(\"Move to control\").when(\"Cancel\").click()\n    # when(\"^Download Now|Update Now\").when(\"Cancel\").click()\n    # when(\"Agree\").click()\n    # when(\"^(OK|Confirm)\").click()\nwith d.watch_context(builtin=True) as ctx:\n    # Add on top of the existing logic\n    ctx.when(\"@tb:id/jview_view\").when('//*[@content-desc=\"Image\"]').click()\n\n    # Other script logic\n```\n\nLANGUAGE: python\nCODE:\n```\nctx = d.watch_context()\nctx.when(\"Settings\").click()\nctx.wait_stable() # Wait for the interface to no longer have popups\n\nctx.close()\n```\n\n----------------------------------------\n\nTITLE: Select UI element by instance with uiautomator2\nDESCRIPTION: This snippet shows how to select a specific instance of a UI element when multiple elements share the same properties. It selects the first instance (instance=0) of an element with the text 'Add new'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Add new\", instance=0)  # which means the first instance with text \"Add new\"\n```\n\n----------------------------------------\n\nTITLE: Get Widget Center Point with uiautomator2 in Python\nDESCRIPTION: This snippet shows how to get the center point (x, y coordinates) of a UI widget using the uiautomator2 library. It also illustrates how to apply an offset to the center point.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nx, y = d(text=\"Settings\").center()\n# x, y = d(text=\"Settings\").center(offset=(0, 0)) # left-top x, y\n```\n\n----------------------------------------\n\nTITLE: Select UI Object by Text and ClassName in Python\nDESCRIPTION: This snippet demonstrates how to select a specific UI object using the uiautomator2 library's selector mechanism. It selects the object with the text 'Clock' and className 'android.widget.TextView'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n# Select the object with text 'Clock' and its className is 'android.widget.TextView'\nd(text='Clock', className='android.widget.TextView')\n```\n\n----------------------------------------\n\nTITLE: Advanced XPath combination\nDESCRIPTION: This snippet demonstrates combining XPath selectors with AND and OR operators for complex queries. It shows how to find elements that match multiple conditions or any of several conditions.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# 查找 text=NFC AND id=android:id/item\n(d.xpath(\"NFC\") & d.xpath(\"@android:id/item\")).get()\n\n# 查找 text=NFC OR id=android:id/item\n(d.xpath(\"NFC\") | d.xpath(\"App\") | d.xpath(\"Content\")).get()\n\n# 复杂一点也支持\n((d.xpath(\"NFC\") | d.xpath(\"@android:id/item\")) & d.xpath(\"//android.widget.TextView\")).get()\n```\n\n----------------------------------------\n\nTITLE: Complete uiautomator2 XPath example\nDESCRIPTION: This comprehensive example demonstrates a full workflow using uiautomator2 and the XPath extension. It includes app startup, element interaction, background monitoring, element properties access, swiping, scrolling, and handling of pop-up windows.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\nfrom uiautomator2 import Direction\n\ndef main():\n    d = u2.connect()\n    d.app_start(\"com.netease.cloudmusic\", stop=True)\n\n    # steps\n    d.xpath(\"//*[@text='私人FM']/../android.widget.ImageView\").click()\n    d.xpath(\"下一首\").click()\n\n    # 监控弹窗2s钟，时间可能大于2s\n    d.xpath.sleep_watch(2)\n    d.xpath(\"转到上一层级\").click()\n    \n    d.xpath(\"转到上一层级\").click(watch=False) # click without trigger watch\n    d.xpath(\"转到上一层级\").click(timeout=5.0) # wait timeout 5s\n\n    d.xpath.watch_background() # 开启后台监控模式，默认每4s检查一次\n    d.xpath.watch_background(interval=2.0) # 每2s检查一次\n    d.xpath.watch_stop() # 停止监控\n\n    for el in d.xpath('//android.widget.EditText').all():\n        print(\"rect:\", el.rect) # output tuple: (left_x, top_y, width, height)\n        print(\"bounds:\", el.bounds) # output tuple: （left, top, right, bottom)\n        print(\"center:\", el.center())\n        el.click() # click operation\n        print(el.elem) # 输出lxml解析出来的Node\n    \n    # 滑动\n    el = d.xpath('@com.taobao.taobao:id/fl_banner_container').get()\n\n    # 从右滑到左\n    el.swipe(Direction.HORIZ_FORWARD) \n    el.swipe(Direction.LEFT) # 从右滑到左\n\n    # 从下滑到上\n    el.swipe(Direction.FORWARD)\n    el.swipe(Direction.UP)\n\n    el.swipe(\"right\", scale=0.9) # scale 默认0.9, 滑动距离为控件宽度的80%, 滑动的中心点与控件中心点一致\n    el.swipe(\"up\", scale=0.5) # 滑动距离为控件高度的50%\n\n    # scroll同swipe不一样，scroll返回bool值，表示是否还有新元素出现\n    el.scroll(Direction.FORWARD) # 向下滑动\n    el.scroll(Direction.BACKWARD) # 向上滑动\n    el.scroll(Direction.HORIZ_FORWARD) # 水平向前\n    el.scroll(Direction.HORIZ_BACKWARD) # 水平向后\n\n    if el.scroll(\"forward\"):\n        print(\"还可以继续滚动\")\n```\n\n----------------------------------------\n\nTITLE: Get Device Info with uiautomator2\nDESCRIPTION: This snippet retrieves and prints the device information using the `d.device_info` attribute. This allows you to access various properties of the connected Android device, such as architecture, brand, model, SDK version, and serial number.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nprint(d.device_info)\n```\n\n----------------------------------------\n\nTITLE: XMLElement operations in Python\nDESCRIPTION: Demonstrates operations that can be performed on an XMLElement object, including getting coordinates, size, center position, clicking, printing text content, getting attributes, taking a screenshot, swiping the control, and accessing element information.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# The object returned by XPathSelector.get() is called XMLElement\nel = d.xpath(\"@com.example:id/home_searchedit\").get()\n\nlx, ly, width, height = el.rect # Get the top-left coordinates and size\nlx, ly, rx, ry = el.bounds # Top-left and bottom-right coordinates\nx, y = el.center() # Get the element’s center position\nx, y = el.offset(0.5, 0.5) # Same as center()\n\n# Send click\nel.click()\n\n# Print text content\nprint(el.text) \n\n# Get the attributes within the group, as a dict\nprint(el.attrib)\n\n# Take a screenshot of the control (the principle is to take a full screenshot first, then crop)\nel.screenshot()\n\n# Swipe the control\nel.swipe(\"right\") # left, right, up, down\nel.swipe(\"right\", scale=0.9) # scale defaults to 0.9, meaning the swipe distance is 90% of the control's width. Swiping up uses 90% of the height.\n\nprint(el.info)\n# Output example\n{\n 'index': '0',\n 'text': '',\n 'resourceId': 'com.example:id/home_searchedit',\n 'checkable': 'true',\n 'checked': 'true',\n 'clickable': 'true',\n 'enabled': 'true',\n 'focusable': 'false',\n 'focused': 'false',\n 'scrollable': 'false',\n 'longClickable': 'false',\n 'password': 'false',\n 'selected': 'false',\n 'visibleToUser': 'true',\n 'childCount': 0,\n 'className': 'android.widget.Switch',\n 'bounds': {'left': 882, 'top': 279, 'right': 1026, 'bottom': 423},\n 'packageName': 'com.android.settings',\n 'contentDescription': '',\n 'resourceName': 'android:id/switch_widget'\n}\n```\n\n----------------------------------------\n\nTITLE: Click on Screen with uiautomator2\nDESCRIPTION: This example demonstrates how to simulate a click at a specific coordinate (x, y) on the screen.  The coordinates can be absolute pixel values or percentages of the screen dimensions.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nd.click(x, y)\n```\n\n----------------------------------------\n\nTITLE: Generate HTML Report with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to use the `uiautomator2.ext.htmlreport` module to generate HTML reports for UI automation testing. It connects to a device, patches the click method to automatically take screenshots before each click, and performs click actions on the device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/uiautomator2/ext/htmlreport/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# coding: utf-8\n\nimport uiautomator2 as u2\nimport uiautomator2.ext.htmlreport as htmlreport\n\n\nu = u2.connect()\nhrp = htmlreport.HTMLReport(u)\n\n# take screenshot before each click\nhrp.patch_click()\n\nu.click(0.4, 0.6)\nu.click(0.4, 0.5)\nu(text=\"Github\").click() # will also record\n```\n\n----------------------------------------\n\nTITLE: Get Detailed Device Info Python\nDESCRIPTION: Retrieves detailed device information using the `d.device_info` attribute. The information includes the device's architecture, brand, model, SDK version, serial number, and Android version.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nprint(d.device_info)\n```\n\n----------------------------------------\n\nTITLE: Performance Data CSV Format (CSV)\nDESCRIPTION: This code snippet illustrates the CSV format in which the performance data is saved when using the `uiautomator2.ext.perf` module. The columns represent the timestamp, package name, PSS memory, CPU usage, system CPU usage, received bytes, transmitted bytes, and frames per second (FPS). Each row represents a snapshot of the performance metrics at a given time.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/uiautomator2/ext/perf/README.md#_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\ntime,package,pss,cpu,systemCpu,rxBytes,txBytes,fps\n2018-09-11 20:35:29.016,com.tencent.tmgp.sgame,456.71,13.3,15.8,0,0,12.8\n2018-09-11 20:35:29.733,com.tencent.tmgp.sgame,456.75,11.0,20.6,108,160,30.7\n2018-09-11 20:35:30.756,com.tencent.tmgp.sgame,456.83,12.2,18.9,548,2021,31.3\n2018-09-11 20:35:31.730,com.tencent.tmgp.sgame,457.05,11.6,19.1,160,1199,29.8\n2018-09-11 20:35:32.759,com.tencent.tmgp.sgame,457.05,11.7,19.5,108,160,31.1\n2018-09-11 20:35:33.821,com.tencent.tmgp.sgame,456.86,11.6,17.7,0,0,29.2\n```\n\n----------------------------------------\n\nTITLE: URL Opening and Key Events in uiautomator2 Python\nDESCRIPTION: This snippet shows how to open a URL in the device's browser and simulate key events using uiautomator2.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nd.open_url(\"https://www.baidu.com\")\nd.keyevent(\"HOME\") # same as: input keyevent HOME\n```\n\n----------------------------------------\n\nTITLE: Retrieve UI Object Information with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to retrieve information about a specific UI object using the uiautomator2 library. The `.info` attribute returns a dictionary containing various properties of the UI element.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").info\n```\n\n----------------------------------------\n\nTITLE: Get Sibling UI Object in Python\nDESCRIPTION: This snippet demonstrates how to get a sibling UI object using the uiautomator2 library. It finds a sibling with the className 'android.widget.ImageView' of an object with the text 'Google'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n# get siblings\nd(text=\"Google\").sibling(className=\"android.widget.ImageView\")\n```\n\n----------------------------------------\n\nTITLE: Pushing Files to Device with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates how to push files to an Android device using the `push` method of the uiautomator2 library. It showcases pushing files to a folder, pushing and renaming, pushing a file object, and pushing with file access mode changes. Requires a uiautomator2 device object.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# push to a folder\nd.push(\"foo.txt\", \"/sdcard/\")\n# push and rename\nd.push(\"foo.txt\", \"/sdcard/bar.txt\")\n# push fileobj\nwith open(\"foo.txt\", 'rb') as f:\n    d.push(f, \"/sdcard/\")\n# push and change file access mode\nd.push(\"foo.sh\", \"/data/local/tmp/\", mode=0o755)\n```\n\n----------------------------------------\n\nTITLE: XPathSelector operations\nDESCRIPTION: This example demonstrates common operations using an XPathSelector object. It covers clicking, matching, waiting for elements, getting elements, setting text, and iterating through matching elements.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsl = d.xpath(\"@com.example:id/home_searchedit\") # sl为XPathSelector对象\n\n# 点击\nsl.click()\nsl.click(timeout=10) # 指定超时时间, 找不到抛出异常 XPathElementNotFoundError\nsl.click_exists() # 存在即点击，返回是否点击成功\nsl.click_exists(timeout=10) # 等待最多10s钟\n\nsl.match() # 不匹配返回None, 否则返回XMLElement\n\n# 等到对应的元素出现，返回XMLElement\n# 默认的等待时间是10s\nel = sl.wait()\nel = sl.wait(timeout=15) # 等待15s, 没有找到会返回None\n\n# 等待元素消失\nsl.wait_gone()\nsl.wait_gone(timeout=15) \n\n# 跟wait用法类似，区别是如果没找到直接抛出 XPathElementNotFoundError 异常\nel = sl.get() \nel = sl.get(timeout=15)\n\n# 修改默认的等待时间为15s\nd.xpath.global_set(\"timeout\", 15)\nd.xpath.implicitly_wait(15) # 与上一行代码等价 (TODO: Removed)\n\nprint(sl.exists) # 返回是否存在 (bool)\nsl.get_last_match() # 获取上次匹配的XMLElement\n\nsl.get_text() # 获取组件名\nsl.set_text(\"\") # 清空输入框\nsl.set_text(\"hello world\") # 输入框输入 hello world\n\n# 遍历所有匹配的元素\nfor el in d.xpath('//android.widget.EditText').all():\n    print(\"rect:\", el.rect) # output tuple: (x, y, width, height)\n    print(\"center:\", el.center())\n    el.click() # click operation\n    print(el.elem) # 输出lxml解析出来的Node\n    print(el.text)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Android device using ANDROID_SERIAL env var\nDESCRIPTION: Connects to an Android device using the `ANDROID_SERIAL` environment variable. This is useful when you have multiple devices connected.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# export ANDROID_SERIAL=123456f\nd = u2.connect()\n```\n\n----------------------------------------\n\nTITLE: Open Notification/Quick Settings with uiautomator2 in Python\nDESCRIPTION: This snippet shows how to open the notification shade and quick settings panel using the uiautomator2 library. The `open_notification()` and `open_quick_settings()` methods are used to perform these actions.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nd.open_notification()\nd.open_quick_settings()\n```\n\n----------------------------------------\n\nTITLE: Waiting for App to Run with uiautomator2 (Python)\nDESCRIPTION: This code shows how to wait for a specific application to start running, optionally waiting for it to be in the foreground, and with a specified timeout. The `app_wait` function from the uiautomator2 library is used for this purpose. Requires the `uiautomator2` library and a connected device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\npid = d.app_wait(\"com.example.android\") # wait for the app to run, return pid(int)\nif not pid:\n    print(\"com.example.android is not running\")\nelse:\n    print(\"com.example.android pid is %d\" % pid)\n\nd.app_wait(\"com.example.android\", front=True) # wait for the app to run in the foreground\nd.app_wait(\"com.example.android\", timeout=20.0) # maximum wait time 20s (default)\n```\n\n----------------------------------------\n\nTITLE: Turn Screen On/Off with uiautomator2\nDESCRIPTION: These functions control the screen state of the Android device. `d.screen_on()` turns the screen on, while `d.screen_off()` turns it off.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nd.screen_on() # turn on the screen\nd.screen_off() # turn off the screen\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug HTTP Requests in uiautomator2\nDESCRIPTION: Enables debug mode, which prints the HTTP requests made by the uiautomator2 library. This is useful for debugging and understanding the communication between the Python script and the Android device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> d.debug = True\n>>> d.info\n12:32:47.182 $ curl -X POST -d '{\"jsonrpc\": \"2.0\", \"id\": \"b80d3a488580be1f3e9cb3e926175310\", \"method\": \"deviceInfo\", \"params\": {}}' 'http://127.0.0.1:54179/jsonrpc/0'\n12:32:47.225 Response >>>\n{\"jsonrpc\":\"2.0\",\"id\":\"b80d3a488580be1f3e9cb3e926175310\",\"result\":{\"currentPackageName\":\"com.android.mms\",\"displayHeight\":1920,\"displayRotation\":0,\"displaySizeDpX\":360,\"displaySizeDpY\":640,\"displayWidth\":1080,\"productName\"\n:\"odin\",\"screenOn\":true,\"sdkInt\":25,\"naturalOrientation\":true}}\n<<< END\n```\n\n----------------------------------------\n\nTITLE: XPath: Buttons Containing Specific Text\nDESCRIPTION: This demonstrates how to locate `android.widget.Button` elements with text attributes containing either 'Account' or 'Account Number', using the `contains` function combined with the `or` operator.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_15\n\nLANGUAGE: xpath\nCODE:\n```\n# Buttons containing 'Account' or 'Account Number'\n/android.widget.Button[contains(@text, 'Account') or contains(@text, 'Account Number')]\n```\n\n----------------------------------------\n\nTITLE: Long Click on Screen with uiautomator2\nDESCRIPTION: This example demonstrates how to simulate a long click at specified coordinates (x, y) on the screen.  The default duration for the long click is 0.5 seconds, which can be customized.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nd.long_click(x, y)\nd.long_click(x, y, 0.5) # long click 0.5s (default)\n```\n\n----------------------------------------\n\nTITLE: XPath: Selecting the Last ImageView\nDESCRIPTION: This demonstrates how to select the last `android.widget.ImageView` element in the UI hierarchy using the `last()` function in XPath.  `(//android.widget.ImageView)[last()]` retrieves the last matching element.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_17\n\nLANGUAGE: xpath\nCODE:\n```\n# The last element among all ImageViews\n(//android.widget.ImageView)[last()]\n```\n\n----------------------------------------\n\nTITLE: XPath parent element selection\nDESCRIPTION: This snippet shows how to locate the parent element of an element found by XPath. It first locates an element with the text '私人FM', and then selects its parent. It can also be filtered by conditions on parent.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nd.xpath('//*[@text=\"私人FM\"]').parent()\n    d.xpath('//*[@text=\"私人FM\"]').parent(\"@android:list\") # 定位到符合条件的父元素\n```\n\n----------------------------------------\n\nTITLE: Get Window Size Python\nDESCRIPTION: Retrieves the window size of the device. The `d.window_size()` method returns a tuple containing the width and height of the screen.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nprint(d.window_size())\n# device upright output example: (1080, 1920)\n# device horizontal output example: (1920, 1080)\n```\n\n----------------------------------------\n\nTITLE: Running doctor check using uiautomator2\nDESCRIPTION: Runs the doctor command to check the health of the uiautomator2 installation.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 doctor\n[I 2024-04-25 19:53:36,288 __main__:101 pid:15596] uiautomator2 is OK\n```\n\n----------------------------------------\n\nTITLE: XPath: Selecting All Elements\nDESCRIPTION: This shows how to select all elements within the UI hierarchy using a basic XPath expression. `//*` selects all elements regardless of their type or attributes.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_13\n\nLANGUAGE: xpath\nCODE:\n```\n# All elements\n//* \n```\n\n----------------------------------------\n\nTITLE: Scrolling to a specific text\nDESCRIPTION: This example demonstrates how to scroll to an element containing specific text. It allows specifying the direction of the scroll and the maximum number of swipes.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom uiautomator2 import connect_usb, Direction\n\nd = connect_usb()\n\nd.scroll_to(\"下单\")\nd.scroll_to(\"下单\", Direction.FORWARD) # 默认就是向下滑动，除此之外还可以BACKWARD, HORIZ_FORWARD(水平), HORIZ_BACKWARD(水平反向)\nd.scroll_to(\"下单\", Direction.HORIZ_FORWARD, max_swipes=5)\n\n# 除此之外还可以在指定在某个元素内滑动\nd.xpath('@com.taobao.taobao:id/dx_root').scroll(Direction.HORIZ_FORWARD)\nd.xpath('@com.taobao.taobao:id/dx_root').scroll_to(\"下单\", Direction.HORIZ_FORWARD)\n```\n\n----------------------------------------\n\nTITLE: Get Current App Info Python\nDESCRIPTION: Retrieves information about the currently running application. The `d.app_current()` method returns a dictionary containing the activity, package name, and process ID (PID) of the current app.  The output could be empty on some Android devices.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nprint(d.app_current())\n# Output example 1: {'activity': '.Client', 'package': 'com.netease.example', 'pid': 23710}\n# Output example 2: {'activity': '.Client', 'package': 'com.netease.example'}\n# Output example 3: {'activity': None, 'package': None}\n```\n\n----------------------------------------\n\nTITLE: Swipe Python\nDESCRIPTION: Performs a swipe action on the screen from the starting coordinates (sx, sy) to the ending coordinates (ex, ey). The default swipe duration is 0.5 seconds, which can be adjusted.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nd.swipe(sx, sy, ex, ey)\nd.swipe(sx, sy, ex, ey, 0.5) # swipe for 0.5s(default)\n```\n\n----------------------------------------\n\nTITLE: Installing uiautodev for UI inspection\nDESCRIPTION: Installs uiautodev package for inspecting the UI hierarchy of Android devices. It allows viewing the structure in a browser at https://uiauto.dev.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install uiautodev\n```\n\n----------------------------------------\n\nTITLE: Launching uiauto.dev UI inspector\nDESCRIPTION: Launches uiauto.dev after installing it for inspecting the UI hierarchy in a browser.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuiauto.dev\n```\n\n----------------------------------------\n\nTITLE: Pinching UI object with uiautomator2 in Python\nDESCRIPTION: This code snippet shows how to perform a pinch-in and pinch-out gesture on a UI object using the `pinch_in` and `pinch_out` methods respectively. It requires the `uiautomator2` library and Android version 4.3 or higher. `percent` specifies how much to pinch, and `steps` controls the speed of the pinch.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n# notes: pinch cannot be set until Android 4.3.\n# from edge to center. here is \"In\" not \"in\"\nd(text=\"Settings\").pinch_in(percent=100, steps=10)\n# from center to edge\nd(text=\"Settings\").pinch_out()\n```\n\n----------------------------------------\n\nTITLE: Stopping all running apps using uiautomator2\nDESCRIPTION: Stops all running applications on the device, optionally excluding certain packages. This is done using the `app_stop_all` method.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# stop all\nd.app_stop_all()\n# stop all app except for com.examples.demo\nd.app_stop_all(excludes=['com.examples.demo'])\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Apps with uiautomator2 (Bash)\nDESCRIPTION: This command uninstalls one or more applications from the connected Android device. It utilizes the `uiautomator2` command-line tool with the `uninstall` subcommand. Requires the `uiautomator2` tool and proper device connection.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 uninstall <package-name> # Uninstall a package\n$ uiautomator2 uninstall <package-name-1> <package-name-2> # Uninstall multiple packages\n$ uiautomator2 uninstall --all # Uninstall all\n```\n\n----------------------------------------\n\nTITLE: Uninstalling application package using uiautomator2\nDESCRIPTION: Uninstalls a package from the connected Android device using the uiautomator2 command-line tool. Supports uninstalling a single package, multiple packages, or all packages.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 uninstall <package-name> # 卸载一个包\n$ uiautomator2 uninstall <package-name-1> <package-name-2> # 卸载多个包\n$ uiautomator2 uninstall --all # 全部卸载\n```\n\n----------------------------------------\n\nTITLE: Click UI Object with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to perform a click action on a specific UI object using the uiautomator2 library. It covers clicking on the center, waiting for the element to appear, clicking with an offset, clicking when the element exists, and clicking until the element is gone.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n# click on the center of the specific ui object\nd(text=\"Settings\").click()\n\n# wait element to appear for at most 10 seconds and then click\nd(text=\"Settings\").click(timeout=10)\n\n# click with offset(x_offset, y_offset)\n# click_x = x_offset * width + x_left_top\n# click_y = y_offset * height + y_left_top\nd(text=\"Settings\").click(offset=(0.5, 0.5)) # Default center\nd(text=\"Settings\").click(offset=(0, 0)) # click left-top\nd(text=\"Settings\").click(offset=(1, 1)) # click right-bottom\n\n# click when exists in 10s, default timeout 0s\nclicked = d(text='Skip').click_exists(timeout=10.0)\n\n# click until element gone, return bool\nis_gone = d(text=\"Skip\").click_gone(maxretry=10, interval=1.0) # maxretry default 10, interval default 1.0\n```\n\n----------------------------------------\n\nTITLE: Pulling Files from Device with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates how to pull files from an Android device using the `pull` method of the uiautomator2 library. It shows a basic pull operation and error handling for when the file is not found. Requires a uiautomator2 device object.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nd.pull(\"/sdcard/tmp.txt\", \"tmp.txt\")\n\n# FileNotFoundError will raise if the file is not found on the device\nd.pull(\"/sdcard/some-file-not-exists.txt\", \"tmp.txt\")\n```\n\n----------------------------------------\n\nTITLE: Shell Command Execution with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to execute shell commands on the Android device using uiautomator2. It shows how to retrieve the output and exit code of the command.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# 执行shell命令\noutput, exit_code = d.shell(\"ps -A\", timeout=60) # 执行shell命令，获取输出和exitCode\noutput = d.shell(\"pwd\").output # 这样也可以\nexit_code = d.shell(\"pwd\").exit_code # 这样也可以\n```\n\n----------------------------------------\n\nTITLE: Turn On/Off Screen Python\nDESCRIPTION: Turns the device screen on or off using the `d.screen_on()` and `d.screen_off()` methods respectively.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nd.screen_on() # turn on the screen\nd.screen_off() # turn off the screen\n```\n\n----------------------------------------\n\nTITLE: Customizing CSV to Images Output (Python)\nDESCRIPTION: This code snippet shows how to customize the output directory when generating images from the collected performance data using the `csv2images` function. By specifying the `target_dir` parameter, the generated images will be saved to the specified directory. If not set, the images are saved in the current working directory.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/uiautomator2/ext/perf/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nd.ext_perf.csv2images(\"perf.csv\", target_dir=\"./\")\n```\n\n----------------------------------------\n\nTITLE: Device Key Presses in uiautomator2 Python\nDESCRIPTION: These snippets illustrate how to simulate key presses on the Android device using uiautomator2, including back, home, volume up, text input, and clearing text.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nd.press(\"back\") # 模拟点击返回键\nd.press(\"home\") # 模拟Home键\nd.long_press(\"volume_up\")\n\nd.send_keys(\"hello world\") # 模拟输入，需要光标已经在输入框中才可以\nd.clear_text() # 清空输入框\n```\n\n----------------------------------------\n\nTITLE: Get Screen Status Python\nDESCRIPTION: Retrieves the current screen status (on/off) using `d.info.get('screenOn')`. Requires Android 4.4 or higher.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nd.info.get('screenOn') # require Android >= 4.4\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: Installs the necessary dependencies for the project using npm. This command ensures that all required modules are available for running the application.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/examples/adbkit-init/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Flinging UI object with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to perform a fling action on a scrollable UI object using the `fling` method. It requires the `uiautomator2` library.  Possible properties are `horiz` or `vert` for horizontal or vertical fling, and `forward`, `backward`, `toBeginning`, or `toEnd` for specifying the direction and destination of the fling.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n# fling forward (default) vertically (default) \nd(scrollable=True).fling()\n# fling forward horizontally\nd(scrollable=True).fling.horiz.forward()\n# fling backward vertically\nd(scrollable=True).fling.vert.backward()\n# fling to beginning horizontally\nd(scrollable=True).fling.horiz.toBeginning(max_swipes=1000)\n# fling to end vertically\nd(scrollable=True).fling.toEnd()\n```\n\n----------------------------------------\n\nTITLE: Select UI Object by Instance in Python\nDESCRIPTION: This snippet demonstrates how to select a UI object based on its instance when multiple views have the same properties. It selects the first instance (index 0) with the text 'Add new'. It also shows how to get the count of views with the specified text, access elements by index, and iterate.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Add new\", instance=0)  # which means the first instance with text \"Add new\"\n\n# get the count of views with text \"Add new\" on current screen\nd(text=\"Add new\").count\n\n# same as count property\nlen(d(text=\"Add new\"))\n\n# get the instance via index\nd(text=\"Add new\")[0]\nd(text=\"Add new\")[1]\n...\n\n# iterator\nfor view in d(text=\"Add new\"):\n    view.info  # ...\n```\n\n----------------------------------------\n\nTITLE: Getting App Information with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates how to retrieve information about a specific application using the `app_info` method of the uiautomator2 library, and how to save the app icon. Requires uiautomator2 and a connected device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nd.app_info(\"com.examples.demo\")\n# expect output\n#{\n#    \"mainActivity\": \"com.github.uiautomator.MainActivity\",\n#    \"label\": \"ATX\",\n#    \"versionName\": \"1.1.7\",\n#    \"versionCode\": 1001007,\n#    \"size\":1760809\n#}\n\n# save app icon\nimg = d.app_icon(\"com.examples.demo\")\nimg.save(\"icon.png\")\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with Multiple Conditions (Python)\nDESCRIPTION: This snippet demonstrates how to find elements based on multiple conditions using XPath within the uiautomator2 framework. It retrieves two sets of elements based on different XPath queries and then uses set operations to find the intersection and difference of these sets.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nes1 = source.find_elements('//android.widget.TextView')\nes2 = source.find_elements(XPath('@android:id/content').joinpath(\"//*\"))\n\n# Find TextViews that do not belong to nodes under id=android:id/content\nels = set(es1) - set(es2)\n\n# Find TextViews that belong to nodes under id=android:id/content\nels = set(es1) & set(es2)\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates taking screenshots using the uiautomator2 library. It covers saving screenshots to a file, getting PIL.Image formatted images (requires pillow), getting OpenCV formatted images (requires numpy and cv2), and getting raw JPEG data.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n# take screenshot and save to a file on the computer, require Android>=4.2.\nd.screenshot(\"home.jpg\")\n\n# get PIL.Image formatted images. Naturally, you need pillow installed first\nimage = d.screenshot() # default format=\"pillow\"\nimage.save(\"home.jpg\") # or home.png. Currently, only png and jpg are supported\n\n# get opencv formatted images. Naturally, you need numpy and cv2 installed first\nimport cv2\nimage = d.screenshot(format='opencv')\ncv2.imwrite('home.jpg', image)\n\n# get raw jpeg data\nimagebin = d.screenshot(format='raw')\nopen(\"some.jpg\", \"wb\").write(imagebin)\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Time in uiautomator2 (Python)\nDESCRIPTION: This code snippet sets the implicit wait time for element search operations in uiautomator2.  The `implicitly_wait()` method sets the maximum time (in seconds) the driver will wait when searching for an element.  Requires the uiautomator2 library and a connected device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nd.implicitly_wait(10.0) # can also be modified by d.settings['wait_timeout'] = 10.0\nd(text=\"Settings\").click() # if the Settings button does not appear in 10s, UiObjectNotFoundError will be raised\n\nprint(\"wait timeout\", d.implicitly_wait()) # get default implicit wait\n```\n\n----------------------------------------\n\nTITLE: Detect App Crash Python\nDESCRIPTION: Shows how to detect application crashes using the `SessionBrokenError` exception.  The `sess.running()` method can check if the session is still valid.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# check if session is ok.\n# Warning: function name may change in the future\nsess.running() # True or False\n```\n\n----------------------------------------\n\nTITLE: Device Info (2.x)\nDESCRIPTION: Shows the output structure of the device_info property in Uiautomator2 version 2.x. It includes detailed information about the device such as udid, version, serial, brand, model, hardware address, SDK version, agent version, display properties, battery status, memory details, CPU information, architecture, and other properties.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/docs/2to3.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(d.device_info)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n'udid': '08a3d291-26:17:84:b6:cb:a0-DT1901A',\n 'version': '10',\n 'serial': '08a3d291',\n 'brand': 'SMARTISAN',\n 'model': 'DT1901A',\n 'hwaddr': '26:17:84:b6:cb:a0',\n 'sdk': 29,\n 'agentVersion': '0.10.0',\n 'display': {'width': 1080, 'height': 2340},\n 'battery': {'acPowered': False,\n  'usbPowered': True,\n  'wirelessPowered': False,\n  'status': 5,\n  'health': 2,\n  'present': True,\n  'level': 100,\n  'scale': 100,\n  'voltage': 4356,\n  'temperature': 292,\n  'technology': 'Li-poly'},\n 'memory': {'total': 7665272, 'around': '7 GB'},\n 'cpu': {'cores': 8, 'hardware': 'Qualcomm Technologies, Inc SM8150'},\n 'arch': '',\n 'owner': None,\n 'presenceChangedAt': '0001-01-01T00:00:00Z',\n 'usingBeganAt': '0001-01-01T00:00:00Z',\n 'product': None,\n 'provider': None\n }\n```\n\n----------------------------------------\n\nTITLE: Dragging UI object with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to drag a UI object to a specific point on the screen or to another UI object using the `drag_to` method. It requires the `uiautomator2` library and assumes a device object `d` is already initialized. The duration parameter controls the speed of the drag.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\n# notes: drag cannot be used for Android<4.3.\n# drag the UI object to a screen point (x, y), in 0.5 seconds\nd(text=\"Settings\").drag_to(x, y, duration=0.5)\n# drag the UI object to (the center position of) another UI object, in 0.25 seconds\nd(text=\"Settings\").drag_to(text=\"Clock\", duration=0.25)\n```\n\n----------------------------------------\n\nTITLE: Open URL Scheme Python\nDESCRIPTION: Opens a URL scheme using the `d.open_url` method. This is equivalent to executing an `adb shell am start` command with an intent to view the specified URL.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nd.open_url(\"appname://appnamehost\")\n# same as\n# adb shell am start -a android.intent.action.VIEW -d \"appname://appnamehost\"\n```\n\n----------------------------------------\n\nTITLE: Stopping UiAutomator Service with Python\nDESCRIPTION: This Python code snippet shows how to programmatically stop the UiAutomator service.  The `d.stop_uiautomator()` function call is used to terminate the UiAutomator service. This function requires the `uiautomator2` library to be installed.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nd.stop_uiautomator()\n```\n\n----------------------------------------\n\nTITLE: Retrieve/Set Device Orientation with uiautomator2\nDESCRIPTION: This code shows how to retrieve and set the device's screen orientation. It is possible to retrieve the current orientation and set it to `natural`, `left`, or `right`. Setting to `upsidedown` requires Android 4.3 or greater. It also freezes the rotation.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n# retrieve orientation. the output could be \"natural\" or \"left\" or \"right\" or \"upsidedown\"\norientation = d.orientation\n\n# WARNING: not pass testing in my TT-M1\n# set orientation and freeze rotation.\n# notes: setting \"upsidedown\" requires Android>=4.3.\nd.set_orientation('l') # or \"left\"\nd.set_orientation(\"l\") # or \"left\"\nd.set_orientation(\"r\") # or \"right\"\nd.set_orientation(\"n\") # or \"natural\"\n```\n\n----------------------------------------\n\nTITLE: App Management with uiautomator2 in Python\nDESCRIPTION: These snippets demonstrate how to manage Android applications using uiautomator2, including getting the current app, starting an app, stopping an app, and creating a session for an app.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nd.app_current() # 获取前台应用 packageName, activity\nd.app_start(\"io.appium.android.apis\") # 启动应用\nd.app_start(\"io.appium.android.apis\", stop=True) # 启动应用前停止应用\nd.app_stop(\"io.appium.android.apis\") # 停止应用\n\napp = d.session(\"io.appium.android.apis\") # 启动应用并获取session\n\n# session的用途是操作的同时监控应用是否闪退，当闪退时操作，会抛出SessionBrokenError\napp.click(10, 20) # 坐标点击\n```\n\n----------------------------------------\n\nTITLE: Launching an app using uiautomator2\nDESCRIPTION: Launches an Android application using its package name and optionally the main activity. It shows different ways to start an application, including using monkey.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# 默认的这种方法是先通过atx-agent解析apk包的mainActivity，然后调用am start -n $package/$activity启动\nd.app_start(\"com.example.hello_world\")\n\n# 使用 monkey -p com.example.hello_world -c android.intent.category.LAUNCHER 1 启动\n# 这种方法有个副作用，它自动会将手机的旋转锁定给关掉\nd.app_start(\"com.example.hello_world\", use_monkey=True) # start with package name\n\n# 通过指定main activity的方式启动应用，等价于调用am start -n com.example.hello_world/.MainActivity\nd.app_start(\"com.example.hello_world\", \".MainActivity\")\n```\n\n----------------------------------------\n\nTITLE: Launch and Close App Session Python\nDESCRIPTION: Demonstrates how to manage application lifecycles using sessions. The `d.session` method starts an app, `sess.close()` stops it, and `sess.restart()` performs a cold start. The session can also be used in a `with` statement for automatic cleanup.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsess = d.session(\"com.netease.cloudmusic\") # start 网易云音乐\nsess.close() # 停止网易云音乐\nsess.restart() # 冷启动网易云音乐\n```\n\nLANGUAGE: python\nCODE:\n```\nwith d.session(\"com.netease.cloudmusic\") as sess:\n    sess(text=\"Play\").click()\n```\n\nLANGUAGE: python\nCODE:\n```\n# launch app if not running, skip launch if already running\nsess = d.session(\"com.netease.cloudmusic\", attach=True)\n```\n\n----------------------------------------\n\nTITLE: List Running Apps Python\nDESCRIPTION: Retrieves a list of currently running applications on the device. The `d.app_list_running()` method returns a list of package names representing the running apps.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nd.app_list_running()\n# expect output\n# [\"com.xxxx.xxxx\", \"com.github.uiautomator\", \"xxxx\"]\n```\n\n----------------------------------------\n\nTITLE: Performance Monitoring with Uiautomator2 (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `uiautomator2.ext.perf` module to collect performance data for a specified package name. It initializes the uiautomator2 connection, registers the 'perf' plugin, sets the package name, starts and stops data collection, and generates images from the collected CSV data. The `matplotlib`, `pandas`, `numpy`, and `humanize` libraries are required for image generation.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/uiautomator2/ext/perf/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\nimport uiautomator2.ext.perf as perf\n\npackage_name = \"com.netease.cloudmusic\"\nu2.plugin_register('perf', perf.Perf)\n\n\ndef main():\n    d = u2.connect()\n    d.ext_perf.package_name = package_name\n    d.ext_perf.csv_output = \"perf.csv\" # 保存数据到perf.csv\n    # d.debug = True # 采集到数据就输出，默认关闭\n    # d.interval = 1.0 # 数据采集间隔，默认1.0s，尽量不要小于0.5s，因为采集内存比较费时间\n    d.ext_perf.start()\n\n    # run ... tests code here ...\n    d.ext_perf.stop() # 最好结束的时候调用下，虽然不调用也没多大关系\n    \n    # generate images from csv\n    # 需要安装 matplotlib, pandas, numpy, humanize\n    d.ext_perf.csv2images()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Dump UI Hierarchy with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to dump the UI hierarchy as an XML string using the uiautomator2 library. It allows specifying parameters such as `compressed` (to include not important nodes), `pretty` (to format the XML), and `max_depth` (to limit the XML depth).\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n# get the UI hierarchy dump content\nxml = d.dump_hierarchy()\n\n# compressed=True: include not import nodes\n# pretty: format xml\n# max_depth: limit xml depth, default 50\nxml = d.dump_hierarchy(compressed=False, pretty=False, max_depth=50)\n```\n\n----------------------------------------\n\nTITLE: Set Device Orientation with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to retrieve and set the device orientation using the uiautomator2 library. The orientation can be set to 'natural', 'left', or 'right'. Setting to 'upsidedown' requires Android 4.3 or higher.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n# retrieve orientation. the output could be \"natural\" or \"left\" or \"right\" or \"upsidedown\"\norientation = d.orientation\n\n# WARNING: not pass testing in my TT-M1\n# set orientation and freeze rotation.\n# notes: setting \"upsidedown\" requires Android>=4.3.\nd.set_orientation('l') # or \"left\"\nd.set_orientation(\"l\") # or \"left\"\nd.set_orientation(\"r\") # or \"right\"\nd.set_orientation(\"n\") # or \"natural\"\n```\n\n----------------------------------------\n\nTITLE: Wait Until App Running Python\nDESCRIPTION: Waits for a specific application to start running. The `d.app_wait()` method blocks until the app is running, optionally waiting for it to be in the foreground. Timeout can be set to limit the waiting time.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\npid = d.app_wait(\"com.example.android\") # 等待应用运行, return pid(int)\nif not pid:\n    print(\"com.example.android is not running\")\nelse:\n    print(\"com.example.android pid is %d\" % pid)\n\nd.app_wait(\"com.example.android\", front=True) # 等待应用前台运行\nd.app_wait(\"com.example.android\", timeout=20.0) # 最长等待时间20s（默认）\n```\n\n----------------------------------------\n\nTITLE: Listing Running Apps with uiautomator2 (Python)\nDESCRIPTION: This code snippet shows how to retrieve a list of currently running applications on the device using the `app_list_running` method in the uiautomator2 library. Requires the uiautomator2 library and a connected device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nd.app_list_running()\n# expect output\n# [\"com.xxxx.xxxx\", \"com.github.uiautomator\", \"xxxx\"]\n```\n\n----------------------------------------\n\nTITLE: XPath Resource ID Positioning\nDESCRIPTION: This explains the shorthand notation `@resourceId` used in uiautomator2's XPath expressions.  `@smartisanos:id/right_container` is a simplified way to represent a full XPath query that locates elements by their resource ID attribute.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_9\n\nLANGUAGE: xpath\nCODE:\n```\n`@smartisanos:id/right_container` is equivalent to `//*[@resource-id=\"smartisanos:id/right_container\"]`\n```\n\n----------------------------------------\n\nTITLE: Connecting to Android Device with Serial Number in Python\nDESCRIPTION: This Python code snippet shows how to connect to a specific Android device using its serial number with uiautomator2. The `u2.connect('123456f')` or `u2.connect_usb('123456f')` function is used to establish the connection. Ensure that adb is configured correctly and the device is recognized.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\n\nd = u2.connect('123456f') # alias for u2.connect_usb('123456f')\nprint(d.info)\n```\n\n----------------------------------------\n\nTITLE: Advanced XPath search syntax in Python\nDESCRIPTION: Demonstrates advanced XPath search syntax using the '&' (AND) and '|' (OR) operators to combine multiple XPath expressions and refine element selection. Includes an example combining AND and OR operators for complex queries.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Find text=NFC AND id=android:id/item\n(d.xpath(\"NFC\") & d.xpath(\"@android:id/item\")).get()\n\n# Find text=NFC OR id=android:id/item\n(d.xpath(\"NFC\") | d.xpath(\"App\") | d.xpath(\"Content\")).get()\n\n# Supports more complex queries\n((d.xpath(\"NFC\") | d.xpath(\"@android:id/item\")) & d.xpath(\"//android.widget.TextView\")).get()\n```\n\n----------------------------------------\n\nTITLE: Installing an app via URL using uiautomator2\nDESCRIPTION: Installs an Android application (APK) from a given URL using the `app_install` method. This requires the URL to be accessible by the device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nd.app_install('http://some-domain.com/some.apk')\n```\n\n----------------------------------------\n\nTITLE: XPath LIKE Operator Equivalents\nDESCRIPTION: This explains how the LIKE operator is emulated using XPath functions in uiautomator2. It demonstrates the usage of `starts-with`, `ends-with`, and `contains` XPath functions to achieve LIKE operator-like behavior when matching text attributes.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_11\n\nLANGUAGE: xpath\nCODE:\n```\n`Know%` matches text starting with `Know`, equivalent to `//*[starts-with(text(), 'Know')]`\n\n`%Know` matches text ending with `Know`, equivalent to `//*[ends-with(text(), 'Know')]`\n\n`%Know%` matches text containing `Know`, equivalent to `//*[contains(text(), 'Know')]`\n```\n\n----------------------------------------\n\nTITLE: XPath Matching Text and Description\nDESCRIPTION: This clarifies that a plain string search in uiautomator2's XPath implementation will match both the `text` and `content-desc` attributes of an element. The example shows that searching for \"Search\" is equivalent to checking both attributes and the resource-id.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_12\n\nLANGUAGE: xpath\nCODE:\n```\nFor example, `Search` is equivalent to XPath `//*[@text=\"Search\" or @content-desc=\"Search\" or @resource-id=\"Search\"]`\n```\n\n----------------------------------------\n\nTITLE: XPath selection with multiple conditions\nDESCRIPTION: This code demonstrates how to combine multiple XPath expressions for more precise element selection using AND-like logic. It first finds all Button elements, and then filters them by elements containing the text '私人FM'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nd.xpath('//android.widget.Button').xpath('//*[@text=\"私人FM\"]')\n```\n\n----------------------------------------\n\nTITLE: Installing an App via URL in uiautomator2 (Python)\nDESCRIPTION: This code snippet installs an Android application (APK) from a given URL using the uiautomator2 library.  The `app_install()` method takes the URL of the APK file as input and installs the application on the connected device.  Requires an active uiautomator2 device connection.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nd.app_install('http://some-domain.com/some.apk')\n```\n\n----------------------------------------\n\nTITLE: Drag on Screen with uiautomator2\nDESCRIPTION: This code shows how to simulate a drag gesture on the screen, moving an element from starting coordinates (sx, sy) to ending coordinates (ex, ey). The drag duration can be specified (default is 0.5 seconds).\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nd.drag(sx, sy, ex, ey)\nd.drag(sx, sy, ex, ey, 0.5) # swipe for 0.5s (default)\n```\n\n----------------------------------------\n\nTITLE: Setup uiautomator2 Local Development Environment\nDESCRIPTION: This snippet outlines the steps to set up a local development environment for the uiautomator2 project. It includes cloning the repository, installing dependencies using poetry, syncing assets, and running the uiautomator2 console.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/DEVELOP.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/openatx/uiautomator2\ncd uiautomator2\n\npip install poetry\npoetry install\n\n# download apk to assets/\nmake sync\n\n# run python shell after device or emulator connected\npoetry run uiautomator2 console\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in uiautomator2 (Python)\nDESCRIPTION: This code snippet sets the debug mode for the uiautomator2 device object. When debug mode is enabled, the HTTP requests made by the uiautomator2 library are printed to the console, which is useful for debugging purposes. Requires an initialized uiautomator2 device object `d`.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> d.debug = True\n>>> d.info\n12:32:47.182 $ curl -X POST -d '{\"jsonrpc\": \"2.0\", \"id\": \"b80d3a488580be1f3e9cb3e926175310\", \"method\": \"deviceInfo\", \"params\": {}}' 'http://127.0.0.1:54179/jsonrpc/0'\n12:32:47.225 Response >>>\n{\"jsonrpc\":\"2.0\",\"id\":\"b80d3a488580be1f3e9cb3e926175310\",\"result\":{\"currentPackageName\":\"com.android.mms\",\"displayHeight\":1920,\"displayRotation\":0,\"displaySizeDpX\":360,\"displaySizeDpY\":640,\"displayWidth\":1080,\"productName\":\"odin\",\"screenOn\":true,\"sdkInt\":25,\"naturalOrientation\":true}}\n<<< END\n```\n\n----------------------------------------\n\nTITLE: PageSource usage with XPath\nDESCRIPTION: This snippet showcases how to utilize the PageSource object directly to find elements using XPath. It retrieves all TextView elements and obtains their text, demonstrating the core method `find_elements` and various ways to filter results using set operations.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsource = d.xpath.get_page_source()\n\n# find_elements 是核心方法\nelements = source.find_elements('//android.widget.TextView') # List[XMLElement]\nfor el in elements:\n    print(el.text)\n\n# 获取坐标后点击\nx, y = elements[0].center()\nd.click(x, y)\n\n# 多种条件的查询写法\nes1 = source.find_elements('//android.widget.TextView')\nes2 = source.find_elements(XPath('@android:id/content').joinpath(\"//*\"))\n\n# 寻找是TextView但不属于id=android:id/content下的节点\nels = set(es1) - set(es2)\n\n# 寻找是TextView同事属于id=android:id/content下的节点\nels = set(es1) & set(es2)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Android Device with Serial Number from Environment Variable in Python\nDESCRIPTION: This snippet illustrates how to connect to an Android device using the serial number specified in the `ANDROID_SERIAL` environment variable. It assumes that the environment variable is properly set. The `u2.connect()` function will automatically use the serial number from the environment variable.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# export ANDROID_SERIAL=123456f\nd = u2.connect()\n```\n\n----------------------------------------\n\nTITLE: Check UI Object Existence with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to check if a specific UI object exists using the uiautomator2 library. It also shows how to wait for an element to appear with a timeout.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nd(text=\"Settings\").exists # True if exists, else False\nd.exists(text=\"Settings\") # alias of above property.\n\n# advanced usage\nd(text=\"Settings\").exists(timeout=3) # wait Settings appear in 3s, same as .wait(3)\n```\n\n----------------------------------------\n\nTITLE: App Info Response (3.x)\nDESCRIPTION: Illustrates the structure of the response returned by the app_info function in Uiautomator2 version 3.x. The response is simplified compared to 2.x, containing only versionName and versionCode.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/docs/2to3.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"versionName\": \"1.1.7\",\n    \"versionCode\": 1001007\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Time in uiautomator2\nDESCRIPTION: Sets the implicit wait time, which is the amount of time the library will wait for an element to appear before throwing an exception. The default is 20 seconds.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nd.implicitly_wait(10.0) # 也可以通过d.settings['wait_timeout'] = 10.0 修改\nd(text=\"Settings\").click() # if Settings button not show in 10s, UiObjectNotFoundError will raised\n\nprint(\"wait timeout\", d.implicitly_wait()) # get default implicit wait\n```\n\n----------------------------------------\n\nTITLE: XPath: Elements with Class Name Containing String\nDESCRIPTION: This demonstrates how to locate elements whose class name contains a specific string. The example finds all elements whose class name contains 'ImageView'. Note the use of the `name()` function to get the class name.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_18\n\nLANGUAGE: xpath\nCODE:\n```\n# Elements where className contains 'ImageView'\n//*[contains(name(), \"ImageView\")]\n```\n\n----------------------------------------\n\nTITLE: XPath Regular Expression Matching\nDESCRIPTION: This describes the shorthand `^regex` for using regular expressions within XPath queries in uiautomator2. `^.*done` is a simplified way to express an XPath query that matches elements whose text attribute matches a given regular expression.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_10\n\nLANGUAGE: xpath\nCODE:\n```\n`^.*done` is equivalent to `//*[re:match(text(), '^.*done')]`\n```\n\n----------------------------------------\n\nTITLE: Device Info (3.x)\nDESCRIPTION: Shows the output structure of the device_info property in Uiautomator2 version 3.x. The response is simplified, providing only serial, sdk, brand, model, arch, and version.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/docs/2to3.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(d.device_info)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n 'serial': 'VVY0223208008426',\n 'sdk': 31,\n 'brand': 'HUAWEI',\n 'model': 'JAD-AL80',\n 'arch': 'arm64-v8a',\n 'version': 12\n }\n```\n\n----------------------------------------\n\nTITLE: Double Click on Screen with uiautomator2\nDESCRIPTION: This code shows how to perform a double click at specified coordinates (x, y) on the screen.  The default duration between the two clicks is 0.1 seconds, which can be customized.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nd.double_click(x, y)\nd.double_click(x, y, 0.1) # default duration between two clicks is 0.1s\n```\n\n----------------------------------------\n\nTITLE: Get Clipboard Content with uiautomator2\nDESCRIPTION: This snippet shows how to retrieve the current clipboard content from the Android device using the `d.clipboard` attribute.  It's important to call `d.set_input_ime()` before using it which requires IME(com.github.uiautomator/.AdbKeyboard).\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# get clipboard content\nprint(d.clipboard)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Information with uiautomator2 (Python)\nDESCRIPTION: This code demonstrates how to retrieve device information, window size, current app info, device serial number and wlan ip using the uiautomator2 library.  Requires the uiautomator2 library and a connected device.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nd.info\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(d.window_size())\n# device upright output example: (1080, 1920)\n# device horizontal output example: (1920, 1080)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(d.app_current())\n# Output example 1: {'activity': '.Client', 'package': 'com.netease.example', 'pid': 23710}\n# Output example 2: {'activity': '.Client', 'package': 'com.netease.example'}\n# Output example 3: {'activity': None, 'package': None}\n```\n\nLANGUAGE: python\nCODE:\n```\nd.wait_activity(\".ApiDemos\", timeout=10) # default timeout 10.0 seconds\n# Output: true or false\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(d.serial)\n# output example: 74aAEDR428Z9\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(d.wlan_ip)\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture with uiautomator2 in Python\nDESCRIPTION: This snippet showcases how to capture screenshots using uiautomator2.  It demonstrates capturing a screenshot as a Pillow Image object and saving it to a file. Requires the Pillow library to be installed.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n## 截图\nd.screenshot() # Pillow.Image.Image格式\nd.screenshot().save(\"current_screen.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Run Main Application with Server Address\nDESCRIPTION: Runs the main JavaScript application (main.js) using Node.js, specifying the server address via the --server flag. The $SERVER_ADDR variable represents the address of the server to connect to.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/examples/adbkit-init/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js --server $SERVER_ADDR\n```\n\n----------------------------------------\n\nTITLE: Freeze/Unfreeze Rotation with uiautomator2 in Python\nDESCRIPTION: This snippet shows how to freeze and unfreeze screen rotation using the uiautomator2 library. The `freeze_rotation()` method is used to freeze rotation, and `freeze_rotation(False)` is used to unfreeze it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n# freeze rotation\nd.freeze_rotation()\n# un-freeze rotation\nd.freeze_rotation(False)\n```\n\n----------------------------------------\n\nTITLE: UI Element Monitoring with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to monitor for specific UI elements (e.g., pop-up windows) and automatically interact with them using uiautomator2's watcher feature. This is useful for handling common UI interruptions.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# 监控弹窗(在线程中监控)\nd.watcher.when(\"跳过\").click()\nd.watcher.start()\n```\n\n----------------------------------------\n\nTITLE: Toast Handling with uiautomator2 in Python\nDESCRIPTION: This snippet shows how to retrieve and clear toast messages displayed on the Android device using uiautomator2.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(d.last_toast) # 获取显示的toast文本\nd.clear_toast() # 重置一下\n```\n\n----------------------------------------\n\nTITLE: Stopping All Running Apps in uiautomator2 (Python)\nDESCRIPTION: This code shows how to stop all running apps, optionally excluding specific packages, using uiautomator2's `app_stop_all` method. Requires a uiautomator2 device object.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# stop all\nd.app_stop_all()\n# stop all apps except for com.examples.demo\nd.app_stop_all(excludes=['com.examples.demo'])\n```\n\n----------------------------------------\n\nTITLE: Initialize uiautomator2 with Server Address\nDESCRIPTION: Initializes the uiautomator2 framework using Python, specifying the server address with the --server flag. This command is typically called when a device plugin is detected.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/examples/adbkit-init/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m uiautomator2 init --server $SERVER_ADDR\n```\n\n----------------------------------------\n\nTITLE: Get Clipboard Content Python\nDESCRIPTION: Retrieves the current clipboard content from the device using `d.clipboard`. It requires that the IME (com.github.uiautomator/.AdbKeyboard) has been set with `d.set_input_ime()` before using it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# get clipboard content\nprint(d.clipboard)\n```\n\n----------------------------------------\n\nTITLE: Get Device Info Python\nDESCRIPTION: Retrieves device information using the `d.info` attribute. This provides details such as current package name, display dimensions, product name, screen status, and SDK version.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nd.info\n```\n\n----------------------------------------\n\nTITLE: Advanced XPath selection with resource-id\nDESCRIPTION: This snippet showcases how to use the `@` symbol as a shorthand for resource-id-based XPath selection. It finds an element where resource-id is 'personal-fm'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nd.xpath('@personal-fm') # 等价于 d.xpath('//*[@resource-id=\"personal-fm\"]')\n```\n\n----------------------------------------\n\nTITLE: Getting current package and activity using uiautomator2\nDESCRIPTION: Retrieves the current package name, activity, and process ID of the foreground app on the connected Android device using the uiautomator2 command-line tool.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 current\n{\n    \"package\": \"com.android.browser\",\n    \"activity\": \"com.uc.browser.InnerUCMobile\",\n    \"pid\": 28478\n}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using pip\nDESCRIPTION: This command installs the required Python packages listed in the requirements.txt file. These packages are necessary for the batteryweb application to function correctly.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/examples/batteryweb/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Unlock Screen with uiautomator2\nDESCRIPTION: The `d.unlock()` method simulates unlocking the screen. It's equivalent to pressing the power button and then swiping from the bottom-left to the top-right of the screen.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nd.unlock()\n# This is equivalent to\n# 1. press(\"power\")\n# 2. swipe from left-bottom to right-top\n```\n\n----------------------------------------\n\nTITLE: Save App Icon Python\nDESCRIPTION: Saves the icon of a specified application as a PNG image. The `d.app_icon` method retrieves the app icon, and the `img.save` method saves it to a file named 'icon.png'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimg = d.app_icon(\"com.examples.demo\")\nimg.save(\"icon.png\")\n```\n\n----------------------------------------\n\nTITLE: Get Current Screen Status with uiautomator2\nDESCRIPTION: This example retrieves the current screen status (on or off) from the device using the `d.info.get('screenOn')` method. This requires Android version 4.4 or higher.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nd.info.get('screenOn') # require Android >= 4.4\n```\n\n----------------------------------------\n\nTITLE: Freeze/Un-freeze Rotation with uiautomator2\nDESCRIPTION: This example demonstrates how to freeze or unfreeze the screen rotation of the Android device. `d.freeze_rotation()` freezes the rotation, while `d.freeze_rotation(False)` unfreezes it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n# freeze rotation\nd.freeze_rotation()\n# un-freeze rotation\nd.freeze_rotation(False)\n```\n\n----------------------------------------\n\nTITLE: Screen Control using uiautomator2 in Python\nDESCRIPTION: This snippet shows how to control the Android device's screen state (on/off), orientation, and rotation using uiautomator2.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nd.screen_on() # wakeUp\nd.screen_off() # sleep screen\n\nprint(d.orientation) # left|right|natural|upsidedown\nd.orientation = 'natural'\nd.freeze_rotation(True)\n```\n\n----------------------------------------\n\nTITLE: Get Sibling Elements with uiautomator2\nDESCRIPTION: This snippet demonstrates how to find sibling elements of a UI element. It selects an element with the text 'Google' and then finds a sibling element that is an ImageView.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n# get siblings\nd(text=\"Google\").sibling(className=\"android.widget.ImageView\")\n```\n\n----------------------------------------\n\nTITLE: Long Click Python\nDESCRIPTION: Simulates a long click at the specified screen coordinates (x, y). The default long click duration is 0.5 seconds, which can be customized.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nd.long_click(x, y)\nd.long_click(x, y, 0.5) # long click 0.5s (default)\n```\n\n----------------------------------------\n\nTITLE: Set Clipboard Content Python\nDESCRIPTION: Sets the clipboard content on the device. The `d.clipboard` attribute or the `d.set_clipboard()` method can be used to set the clipboard text and optionally a label.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nd.clipboard = 'hello-world'\n# or\nd.set_clipboard('hello-world', 'label')\n```\n\n----------------------------------------\n\nTITLE: Installing uiautomator2 with pip\nDESCRIPTION: This command installs or updates the uiautomator2 package using pip, the Python package installer. This is the first step to use the library.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Installing uiautodev with pip\nDESCRIPTION: This bash command installs the `uiautodev` package, which is a UI inspector used with uiautomator2.  It is used to view the current device's interface structure.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install uiautodev\n```\n\n----------------------------------------\n\nTITLE: Getting Current App Info with uiautomator2 (Bash)\nDESCRIPTION: This command retrieves information about the currently running application on the connected Android device, including the package name, activity, and process ID (PID). It uses the `uiautomator2` command-line tool. Requires uiautomator2 to be installed and configured.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 current\n{\n    \"package\": \"com.android.browser\",\n    \"activity\": \"com.uc.browser.InnerUCMobile\",\n    \"pid\": 28478\n}\n```\n\n----------------------------------------\n\nTITLE: XPath: Selecting the Second ImageView\nDESCRIPTION: This shows how to select the second `android.widget.ImageView` element in the UI hierarchy using indexing in XPath. `(//android.widget.ImageView)[2]` retrieves the second matching element.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_16\n\nLANGUAGE: xpath\nCODE:\n```\n# The second element among all ImageViews\n(//android.widget.ImageView)[2]\n```\n\n----------------------------------------\n\nTITLE: Install uiautomator2 with pip\nDESCRIPTION: Installs or upgrades the uiautomator2 library using pip, the Python package installer. This is a prerequisite for using the XPath extension.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Click on Screen Python\nDESCRIPTION: Simulates a click at a specified coordinate (x, y) on the device screen.  The coordinates can be absolute pixel values or percentage-based values.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nd.click(x, y)\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot of UI Widget with uiautomator2 in Python\nDESCRIPTION: This snippet shows how to take a screenshot of a specific UI widget using the uiautomator2 library and save it to a file.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nim = d(text=\"Settings\").screenshot()\nim.save(\"settings.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Get WLAN IP Address Python\nDESCRIPTION: Retrieves the WLAN IP address of the device. The `d.wlan_ip` attribute returns the IP address as a string or `None` if not available.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nprint(d.wlan_ip)\n# output example: 10.0.0.1 or None\n```\n\n----------------------------------------\n\nTITLE: Running Doctor Command with uiautomator2 (Bash)\nDESCRIPTION: This command executes the `doctor` subcommand of the `uiautomator2` tool, which likely performs a system health check and reports any potential issues.  It verifies that `uiautomator2` is functioning correctly. Requires uiautomator2 to be installed and accessible.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 doctor\n[I 2024-04-25 19:53:36,288 __main__:101 pid:15596] uiautomator2 is OK\n```\n\n----------------------------------------\n\nTITLE: Installing uiautomator2 with pip\nDESCRIPTION: This command installs or upgrades the uiautomator2 library using pip, ensuring the latest version is used. This is a prerequisite for using the XPath extension.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -U uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Stopping application using uiautomator2\nDESCRIPTION: Stops a running application using the uiautomator2 command-line tool. Supports stopping a specific application or all running applications.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 stop com.example.app # 停止一个app\n$ uiautomator2 stop --all # 停止所有的app\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with uiautomator2 (Bash)\nDESCRIPTION: This command takes a screenshot of the connected Android device and saves it as 'screenshot.jpg' in the current directory.  It utilizes the `uiautomator2` command-line tool. Requires uiautomator2 to be installed and configured.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 screenshot screenshot.jpg\n```\n\n----------------------------------------\n\nTITLE: Get Device Serial Number Python\nDESCRIPTION: Retrieves the serial number of the connected device using `d.serial`.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nprint(d.serial)\n# output example: 74aAEDR428Z9\n```\n\n----------------------------------------\n\nTITLE: Taking a screenshot using uiautomator2 command line tool\nDESCRIPTION: Takes a screenshot of the connected Android device using the uiautomator2 command-line tool and saves it to a file named 'screenshot.jpg'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 screenshot screenshot.jpg\n```\n\n----------------------------------------\n\nTITLE: Click UI Element via Relative Positioning in Python\nDESCRIPTION: This snippet shows how to select a UI element based on its relative position to another element. Specifically, it clicks a 'switch' element on the right side of a 'Wi‑Fi' element using the `right()` method.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README_CN.md#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n## select \"switch\" on the right side of \"Wi‑Fi\"\nd(text=\"Wi‑Fi\").right(className=\"android.widget.Switch\").click()\n```\n\n----------------------------------------\n\nTITLE: ViewConfiguration Parameters\nDESCRIPTION: This section describes default ViewConfiguration parameters such as TAP_TIMEOUT, LONG_PRESS_TIMEOUT, and DOUBLE_TAP_TIMEOUT which are related to Android UI interaction delays. The values are listed in milliseconds (ms).\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/DEVELOP.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n- TAP_TIMEOUT: 100\n- LONG_PRESS_TIMEOUT: 500\n- DOUBLE_TAP_TIMEOUT: 300\n```\n\n----------------------------------------\n\nTITLE: Running uiauto.dev\nDESCRIPTION: This bash command starts the `uiauto.dev` UI inspector, allowing you to view the interface structure of the connected Android device in a web browser.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Start\nuiauto.dev\n```\n\n----------------------------------------\n\nTITLE: Installing uiautomator2 with pip\nDESCRIPTION: This bash command installs or updates the `uiautomator2` Python library using pip. The `-U` flag ensures that the package is upgraded to the latest version if it is already installed.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -U uiautomator2\n```\n\n----------------------------------------\n\nTITLE: PageSource object usage in Python\nDESCRIPTION: Demonstrates the use of the PageSource object, which is initialized from the return value of `d.dump_hierarchy()`. It highlights the `find_elements` method for locating elements using XPath expressions and extracting their center coordinates for clicking.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsource = d.xpath.get_page_source()\n\n# find_elements is the core method\nelements = source.find_elements('//android.widget.TextView') # List[XMLElement]\nfor el in elements:\n    print(el.text)\n\n# Get coordinates and click\nx, y = elements[0].center()\nd.click(x, y)\n```\n\n----------------------------------------\n\nTITLE: Stopping Apps with uiautomator2 (Bash)\nDESCRIPTION: This command stops a specific application or all running applications on the connected Android device using the `uiautomator2` command-line tool. Requires the `uiautomator2` tool and a device connection.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ uiautomator2 stop com.example.app # Stop an app\n$ uiautomator2 stop --all # Stop all apps\n```\n\n----------------------------------------\n\nTITLE: XPath child element selection\nDESCRIPTION: This snippet demonstrates selecting a child element using the `child` method. It finds an element with resource-id 'android:id/list', and then selects its TextView child, finally clicking it.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nd.xpath('@android:id/list').child('/android.widget.TextView').click()\n# 等价于下面这个\n# d.xpath('//*[@resource-id=\"android:id/list\"]/android.widget.TextView').click()\n```\n\n----------------------------------------\n\nTITLE: Basic XPath usage in uiautomator2\nDESCRIPTION: This example demonstrates basic usage of the uiautomator2 XPath extension. It connects to a device, starts an application, and uses XPath to click on an element with the text '私人FM'.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/XPATH_CN.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uiautomator2 as u2\n\ndef main():\n    d = u2.connect()\n    d.app_start(\"com.netease.cloudmusic\", stop=True)\n\n    d.xpath('//*[@text=\"私人FM\"]').click()\n```\n\n----------------------------------------\n\nTITLE: System UI Interaction with uiautomator2 in Python\nDESCRIPTION: This snippet demonstrates how to open the notification shade and quick settings panel on the Android device using uiautomator2.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/QUICK_REFERENCE.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nd.open_notification()\nd.open_quick_settings()\n```\n\n----------------------------------------\n\nTITLE: App Info Response (2.x)\nDESCRIPTION: Illustrates the structure of the response returned by the app_info function in Uiautomator2 version 2.x. Includes fields like mainActivity, label, versionName, versionCode, and size.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/docs/2to3.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mainActivity\": \"com.github.uiautomator.MainActivity\",\n    \"label\": \"ATX\",\n    \"versionName\": \"1.1.7\",\n    \"versionCode\": 1001007,\n    \"size\":1760809\n}\n```\n\n----------------------------------------\n\nTITLE: Run Flask application\nDESCRIPTION: These commands configure and run the Flask application. The FLASK_APP environment variable specifies the main application file, FLASK_DEBUG enables debugging mode, and flask run starts the Flask development server.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/examples/batteryweb/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport FLASK_APP=\"main.py\"\nexport FLASK_DEBUG=1\nflask run\n```\n\n----------------------------------------\n\nTITLE: Adding a new command with cobra-init in Shell\nDESCRIPTION: This command adds a new command named 'nohup' to the project using the `cobra-init` tool. It's typically used for generating the basic structure and files required for a new subcommand within a Cobra-based CLI application. The `cobra-init` command likely has dependencies on the Cobra framework and assumes it's set up in the project environment.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/uibox/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncobra-init add nohup\n```\n\n----------------------------------------\n\nTITLE: Scrolling UI object with uiautomator2 in Python\nDESCRIPTION: This code snippet demonstrates how to perform a scroll action on a scrollable UI object using the `scroll` method. It requires the `uiautomator2` library.  Possible properties are `horiz` or `vert` for horizontal or vertical scroll, and `forward`, `backward`, `toBeginning`, `toEnd`, or `to` for specifying the direction and destination of the scroll. `steps` defines the scrolling speed, and `max_swipes` limits the maximum number of swipes.\nSOURCE: https://github.com/openatx/uiautomator2/blob/master/README.md#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\n# scroll forward (default) vertically (default)\nd(scrollable=True).scroll(steps=10)\n# scroll forward horizontally\nd(scrollable=True).scroll.horiz.forward(steps=100)\n# scroll backward vertically\nd(scrollable=True).scroll.vert.backward()\n# scroll to beginning horizontally\nd(scrollable=True).scroll.horiz.toBeginning(steps=100, max_swipes=1000)\n# scroll to end vertically\nd(scrollable=True).scroll.toEnd()\n# scroll forward vertically until specific UI object appears\nd(scrollable=True).scroll.to(text=\"Security\")\n```"
  }
]