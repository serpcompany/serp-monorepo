[
  {
    "owner": "sunarya-thito",
    "repo": "shadcn_flutter",
    "content": "TITLE: Defining Build Configuration Options in CMake\nDESCRIPTION: This snippet defines build configuration options, checking if the generator is multi-config and setting the CMAKE_CONFIGURATION_TYPES accordingly. If not multi-config, it sets the CMAKE_BUILD_TYPE to Debug if not already defined and sets allowed values for it (Debug, Profile, Release).\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This snippet adds the executable target, specifying source files. The BINARY_NAME variable is used to define the executable name, which is important for `flutter run` to work correctly.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used is compatible with the commands and features used in the build configuration. It should be at least version 3.14.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins in CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, managing the building and adding of plugins to the application.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Targets and Files in CMake\nDESCRIPTION: This snippet installs the application executable, the Flutter ICU data file, and the Flutter library to their respective destination directories. It also installs bundled libraries, native assets, and handles removing and copying the assets directory. Lastly, it installs the AOT library for Profile and Release builds.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings in CMake\nDESCRIPTION: This function applies standard compilation settings to a target. It sets the C++ standard to C++17, adds compiler options for warnings, treats warnings as errors, disables specific warnings, enables exception handling, and defines _HAS_EXCEPTIONS=0 to disable exception support. It also defines _DEBUG for Debug configurations.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `pkg-config` to locate and import system-level dependencies required by Flutter on Linux, such as GTK, GLib, and GIO. It ensures that these libraries are available and properly linked during the build process.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library\nDESCRIPTION: Defines the Flutter library target, specifying include directories and library dependencies. This allows other parts of the project to link against the Flutter runtime. The `add_dependencies` command ensures that the flutter_assemble target is built before this library.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library only in non-Debug builds. This library improves performance in Release and Profile builds.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter`. Interface libraries are used to define the public interface of a library without including any implementation code. It then sets include directories and links the necessary libraries to the interface.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library for the Flutter plugin wrapper. This library includes core implementations and plugin registrar sources. It sets the target properties for position-independent code and hidden C++ visibility. It links against the Flutter library and includes the wrapper's include directory.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories in CMake\nDESCRIPTION: This snippet configures the installation directories for the application. It sets the build bundle directory, makes the install step default, and sets the installation prefix to the build bundle directory. It then defines directories for data and libraries.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables\nDESCRIPTION: This snippet sets several project-level variables, including the path to the Flutter library, the ICU data file, the project build directory, and the AOT (Ahead-of-Time) compiled library. These variables are published to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of header files related to the Flutter library to the `FLUTTER_LIBRARY_HEADERS` list. These headers define the interfaces and data structures used to interact with the Flutter engine.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Tool Backend\nDESCRIPTION: Defines a custom command to run the Flutter tool backend. It sets the environment variables and executes the tool_backend.bat script. The command generates the Flutter library, headers, and wrapper sources. It creates a phony output file to force the command to run every time.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This function, `list_prepend`, prepends a given prefix to each element in a specified list. It emulates the `list(TRANSFORM ... PREPEND ...)` functionality, which is not available in CMake versions prior to a certain version.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration with CMake\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, defines the project name, and explicitly opts-in to modern CMake behaviors to avoid warnings.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(docs LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"docs\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Using Shadcn Flutter Widgets (Dart)\nDESCRIPTION: This code snippet demonstrates how to use Shadcn Flutter widgets within a Flutter application. It initializes a ShadcnApp widget, sets its title, home, and theme, showcasing basic configuration options.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    ShadcnApp(\n      title: 'My App',\n      home: MyHomePage(),\n      theme: ThemeData(\n        colorScheme: ColorSchemes.darkZinc(),\n        radius: 0.5,\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions in CMake\nDESCRIPTION: This snippet adds preprocessor definitions for the build version, including FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, FLUTTER_VERSION_MINOR, FLUTTER_VERSION_PATCH, and FLUTTER_VERSION_BUILD.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library for the Flutter application wrapper. This library includes core implementations and application-specific sources. It links against the Flutter library and includes the wrapper's include directory.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard, adding compiler warnings, and enabling optimizations for non-Debug builds.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command that executes the Flutter tool backend script to assemble the Flutter library and related components.  It defines the output files and the command to be executed, including environment variables and the path to the tool backend script.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assemble\nDESCRIPTION: Defines a custom target called flutter_assemble, which depends on the Flutter library, headers, and wrapper sources. This target is used to trigger the Flutter tool backend build process.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring for Cross-Building\nDESCRIPTION: Configures the CMake environment for cross-building by setting the sysroot and search paths. This is essential when targeting a different platform than the host system.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: Installs the entire flutter_assets directory, first removing the old directory recursively to avoid stale files. This directory contains all of the Flutter application's assets.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains platform-specific settings and dependencies required for building the Flutter application. The file path is dynamically determined based on the ephemeral directory.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Shadcn Flutter Dependency (bash)\nDESCRIPTION: This command adds the shadcn_flutter package as a dependency to the Flutter project using `flutter pub add`. This allows you to import and use the library's widgets and functions.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add shadcn_flutter\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the directory where the application bundle will be created. This is the final output of the build process, containing all the necessary files to run the application.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Type\nDESCRIPTION: Defines the build type if it's not already set. It defaults to \"Debug\" and provides options for \"Profile\" and \"Release\".\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory\nDESCRIPTION: Removes the build bundle directory at the beginning of each build to ensure a clean build. Uses file(REMOVE_RECURSE) within an install(CODE) block, running during the install phase.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable. This puts the unbundled copy of the executable in a subdirectory to prevent users from running it directly.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the output files generated by the custom command. This target ensures that the Flutter library and headers are built before any other targets that depend on them.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: Explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. This ensures that the build process uses the latest best practices.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Activating Shadcn Flutter CLI (bash)\nDESCRIPTION: This command activates the shadcn_flutter_cli package globally, making it available for use in the terminal. It requires Flutter to be installed and configured.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub global activate shadcn_flutter_cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project (bash)\nDESCRIPTION: This command creates a new Flutter project and navigates into its directory.  It uses the `flutter create` command which is part of the Flutter SDK.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter create my_app\ncd my_app\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: Creates the executable target for the application. This specifies the source files that will be compiled and linked to create the executable.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Shadcn Flutter CLI Setup (bash)\nDESCRIPTION: This command executes the setup script provided by the shadcn_flutter_cli package. It likely handles project initialization and configuration tasks.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub global run shadcn_flutter_cli:setup\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Libraries\nDESCRIPTION: Sets the RPATH (Run-Time Search Path) for the application. This tells the dynamic linker where to find the bundled libraries at runtime, relative to the executable.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: Installs native assets from packages to the lib directory in the bundle.  These assets are built by build.dart in each package.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet adds dependency libraries and include directories. It links flutter, flutter_wrapper_app, and dwmapi.lib.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: Finds the GTK (Gimp Toolkit) package using pkg-config. This is a dependency for Flutter applications that use GTK for their UI.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific settings and dependencies required for the build.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake features used are compatible with the specified version.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory in CMake\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, allowing CMake to process the Flutter build rules.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Application ID\nDESCRIPTION: Sets the unique GTK application identifier. This is important for desktop integration and should follow reverse domain name notation.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(APPLICATION_ID \"com.example.docs\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory in CMake\nDESCRIPTION: This snippet adds the 'runner' directory as a subdirectory.  The runner contains the application's specific build configuration.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings in CMake\nDESCRIPTION: This snippet applies the standard set of build settings. It can be removed for applications that need different build settings.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Name\nDESCRIPTION: Sets the name of the executable file that will be created for the application. This allows you to control the on-disk name of your application.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"docs\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the build process. It ensures that the CMake version used is at least 3.10.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in CMake\nDESCRIPTION: This snippet runs the Flutter tool portions of the build by adding a dependency on flutter_assemble. This step is essential for Flutter projects.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build. This includes the Flutter engine and related build rules.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets the minimum CMake version required and defines the project. It specifies the languages used (CXX).\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: Installs bundled libraries for plugins to the lib directory within the application bundle.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: Adds a dependency on the flutter_assemble target. This ensures that the Flutter tool runs as part of the build process.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the application bundle.  ICU provides Unicode support.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries within the application bundle.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID. This allows the application code to access the application ID at compile time.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: Links the necessary libraries to the executable target, including the Flutter engine and GTK.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file. This manages building the plugins and adding them to the application.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Languages\nDESCRIPTION: Defines the project name and specifies the programming languages used in the project (C++ in this case).\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: Applies the standard build settings to the executable target using the APPLY_STANDARD_SETTINGS function defined earlier.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library (engine) to the lib directory within the application bundle.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the install prefix (within the bundle).\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions in CMake\nDESCRIPTION: This snippet adds definitions to ensure Unicode support for the project. It adds -DUNICODE and -D_UNICODE, enabling wide character support.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flags for Profile Build Mode in CMake\nDESCRIPTION: This snippet defines settings for the Profile build mode, setting the linker and compiler flags for Profile to be the same as Release. This helps in optimizing the application for performance profiling.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Shadcn Flutter Package (Dart)\nDESCRIPTION: This line imports the shadcn_flutter package into a Dart file. It is necessary to import the package to access its components and functionalities.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:shadcn_flutter/shadcn_flutter.dart';\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App (bash)\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It's the standard way to launch a Flutter app after it's been built.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter shared library (`libflutter_linux_gtk.so`). This library contains the core Flutter runtime code for Linux.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Prepending to Flutter Library Headers List\nDESCRIPTION: This snippet uses the custom `list_prepend` function to prepend the path to the Flutter Linux headers directory to each header file in the `FLUTTER_LIBRARY_HEADERS` list.  This ensures that the compiler can find the headers during the build process.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: This snippet disables Windows macros that collide with C++ standard library functions by defining NOMINMAX.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other temporary build artifacts. This directory is relative to the current source directory.\nSOURCE: https://github.com/sunarya-thito/shadcn_flutter/blob/master/docs/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```"
  }
]