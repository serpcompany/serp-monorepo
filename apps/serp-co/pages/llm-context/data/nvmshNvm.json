[
  {
    "owner": "nvm-sh",
    "repo": "nvm",
    "content": "TITLE: Manual Installation of NVM\nDESCRIPTION: A complete shell script for manually installing NVM. It clones the NVM repository into $HOME/.nvm, checks out the latest tagged version, and loads NVM.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_DIR=\"$HOME/.nvm\" && (\n  git clone https://github.com/nvm-sh/nvm.git \"$NVM_DIR\"\n  cd \"$NVM_DIR\"\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1)`\n) && \\. \"$NVM_DIR/nvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Using nvm to Switch Between Node.js Versions\nDESCRIPTION: Demonstrates how to use nvm to switch between different Node.js versions and verify the active version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ nvm use 16\nNow using node v16.9.1 (npm v7.21.1)\n$ node -v\nv16.9.1\n$ nvm use 14\nNow using node v14.18.0 (npm v6.14.15)\n$ node -v\nv14.18.0\n$ nvm install 12\nNow using node v12.22.6 (npm v6.14.5)\n$ node -v\nv12.22.6\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Node.js Version with NVM\nDESCRIPTION: Command to download, compile, and install the latest release of Node.js using NVM. The 'node' alias automatically points to the most recent stable version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnvm install node # \"node\" is an alias for the latest version\n```\n\n----------------------------------------\n\nTITLE: Creating .nvmrc Files for Node Version Management with Shell Commands\nDESCRIPTION: Examples of creating .nvmrc files to specify different Node.js versions using echo command. Shows how to specify an exact version (5.9), the latest LTS version, or the latest node version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\n$ echo \"5.9\" > .nvmrc\n\n$ echo \"lts/*\" > .nvmrc # to default to the latest LTS version\n\n$ echo \"node\" > .nvmrc # to default to the latest version\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Node.js Version with NVM\nDESCRIPTION: Command to install a particular version of Node.js by specifying the exact version number.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnvm install 14.7.0 # or 16.3.0, 12.22.1, etc\n```\n\n----------------------------------------\n\nTITLE: Switching to a Node.js Version in NVM\nDESCRIPTION: Command to activate and use a specific installed Node.js version in the current shell.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnvm use node\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with Latest NPM Version in NVM\nDESCRIPTION: Command to install an LTS Node.js version with the latest compatible npm version, while migrating packages from the default version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --reinstall-packages-from=default --latest-npm 'lts/*'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Node.js Version in NVM\nDESCRIPTION: Commands to set a default Node.js version that will be automatically used in any new shell session.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nnvm alias default node # this refers to the latest installed version of node\nnvm alias default 18 # this refers to the latest installed v18.x version of node\nnvm alias default 18.12  # this refers to the latest installed v18.12.x version of node\n```\n\n----------------------------------------\n\nTITLE: Installing nvm Using wget\nDESCRIPTION: Shows how to download and run the nvm installation script using wget.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Installing nvm Using curl\nDESCRIPTION: Shows how to download and run the nvm installation script using curl.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Migrating Packages During Node.js Installation in NVM\nDESCRIPTION: Command to install a new Node.js version while migrating npm packages from the current version. This preserves all globally installed packages.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --reinstall-packages-from=node node\n```\n\n----------------------------------------\n\nTITLE: Using nvm with .nvmrc Files for Automatic Node Version Selection\nDESCRIPTION: Demonstrates using the 'nvm use' command with a .nvmrc file to automatically switch to the specified Node.js version without having to specify it on the command line.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\n$ nvm use\nFound '/path/to/project/.nvmrc' with version <5.9>\nNow using node v5.9.1 (npm v3.7.3)\n```\n\n----------------------------------------\n\nTITLE: Bash Function for Automatic nvm Use with Directory Changes\nDESCRIPTION: A Bash function that automatically detects .nvmrc files when changing directories and switches to the specified Node.js version. It falls back to the default version if no .nvmrc is found.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncdnvm() {\n    command cd \"$@\" || return $?\n    nvm_path=\"$(nvm_find_up .nvmrc | command tr -d '\\n')\"\n\n    # If there are no .nvmrc file, use the default nvm version\n    if [[ ! $nvm_path = *[^[:space:]]* ]]; then\n\n        declare default_version\n        default_version=\"$(nvm version default)\"\n\n        # If there is no default version, set it to `node`\n        # This will use the latest version on your machine\n        if [ $default_version = 'N/A' ]; then\n            nvm alias default node\n            default_version=$(nvm version default)\n        fi\n\n        # If the current version is not the default version, set it to use the default version\n        if [ \"$(nvm current)\" != \"${default_version}\" ]; then\n            nvm use default\n        fi\n    elif [[ -s \"${nvm_path}/.nvmrc\" && -r \"${nvm_path}/.nvmrc\" ]]; then\n        declare nvm_version\n        nvm_version=$(<\"${nvm_path}\"/.nvmrc)\n\n        declare locally_resolved_nvm_version\n        # `nvm ls` will check all locally-available versions\n        # If there are multiple matching versions, take the latest one\n        # Remove the `->` and `*` characters and spaces\n        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found\n        locally_resolved_nvm_version=$(nvm ls --no-colors \"${nvm_version}\" | command tail -1 | command tr -d '\\->*' | command tr -d '[:space:]')\n\n        # If it is not already installed, install it\n        # `nvm install` will implicitly use the newly-installed version\n        if [ \"${locally_resolved_nvm_version}\" = 'N/A' ]; then\n            nvm install \"${nvm_version}\";\n        elif [ \"$(nvm current)\" != \"${locally_resolved_nvm_version}\" ]; then\n            nvm use \"${nvm_version}\";\n        fi\n    fi\n}\n\nalias cd='cdnvm'\ncdnvm \"$PWD\" || exit\n```\n\n----------------------------------------\n\nTITLE: Listing Available Node.js Versions for Installation in NVM\nDESCRIPTION: Command to show all Node.js versions available for installation from the remote repository.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nnvm ls-remote\n```\n\n----------------------------------------\n\nTITLE: Zsh Functions for Automatic .nvmrc Detection and Node Version Switching\nDESCRIPTION: Zsh shell functions that automatically detect .nvmrc files and switch to the specified Node version. This implementation uses zsh hooks to trigger when changing directories.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_43\n\nLANGUAGE: zsh\nCODE:\n```\n# place this after nvm initialization!\nautoload -U add-zsh-hook\n\nload-nvmrc() {\n  local nvmrc_path\n  nvmrc_path=\"$(nvm_find_nvmrc)\"\n\n  if [ -n \"$nvmrc_path\" ]; then\n    local nvmrc_node_version\n    nvmrc_node_version=$(nvm version \"$(cat \"${nvmrc_path}\")\")\n\n    if [ \"$nvmrc_node_version\" = \"N/A\" ]; then\n      nvm install\n    elif [ \"$nvmrc_node_version\" != \"$(nvm version)\" ]; then\n      nvm use\n    fi\n  elif [ -n \"$(PWD=$OLDPWD nvm_find_nvmrc)\" ] && [ \"$(nvm version)\" != \"$(nvm version default)\" ]; then\n    echo \"Reverting to nvm default version\"\n    nvm use default\n  fi\n}\n\nadd-zsh-hook chpwd load-nvmrc\nload-nvmrc\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Node.js Versions in NVM\nDESCRIPTION: Command to display all Node.js versions currently installed via NVM on the system.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nnvm ls\n```\n\n----------------------------------------\n\nTITLE: Updating to Latest Compatible NPM Version in NVM\nDESCRIPTION: Command to update npm to the latest version that's compatible with the currently active Node.js version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nnvm install-latest-npm\n```\n\n----------------------------------------\n\nTITLE: Verifying NVM Installation\nDESCRIPTION: A shell command to verify that NVM has been successfully installed. This uses the 'command -v' syntax as 'which' won't work with NVM since it's a sourced shell function, not an executable binary.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncommand -v nvm\n```\n\n----------------------------------------\n\nTITLE: Executing Command in Subshell with Specific Node.js Version in NVM\nDESCRIPTION: Command to run any arbitrary command in a subshell using a specific Node.js version, useful for testing with different versions.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnvm exec 4.2 node --version\n```\n\n----------------------------------------\n\nTITLE: Adding nvm to Shell Profile\nDESCRIPTION: Code snippet to be added to the shell profile file for loading nvm.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n----------------------------------------\n\nTITLE: Installing LTS Node.js Version with Package Migration in NVM\nDESCRIPTION: Command to install the latest LTS version of Node.js while migrating existing packages from the currently active version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --reinstall-packages-from=current 'lts/*'\n```\n\n----------------------------------------\n\nTITLE: Installing NVM with Ansible\nDESCRIPTION: An Ansible task that installs NVM using curl. The task includes a check that prevents reinstallation if NVM is already installed in the user's home directory.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install nvm\n  ansible.builtin.shell: >\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash\n  args:\n    creates: \"{{ ansible_env.HOME }}/.nvm/nvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version Specified in .nvmrc Automatically\nDESCRIPTION: Shows how the 'nvm install' command can automatically install the Node.js version specified in a .nvmrc file if it's not already installed.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\n$ nvm install\nFound '/path/to/project/.nvmrc' with version <5.9>\nDownloading and installing node v5.9.1...\nDownloading https://nodejs.org/dist/v5.9.1/node-v5.9.1-linux-x64.tar.xz...\n#################################################################################### 100.0%\nComputing checksum with sha256sum\nChecksums matched!\nNow using node v5.9.1 (npm v3.7.3)\n```\n\n----------------------------------------\n\nTITLE: Adding NVM to Shell Profile\nDESCRIPTION: Shell commands for adding NVM to your profile file to load it automatically upon login. This should be added to ~/.bashrc, ~/.profile, or ~/.zshrc depending on your shell.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n----------------------------------------\n\nTITLE: Using a Mirror for Node.js Binaries in NVM\nDESCRIPTION: Commands to use a custom mirror for downloading Node.js binaries, which can be set via environment variables or inline with the install command.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nnvm install node\n\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2\n```\n\n----------------------------------------\n\nTITLE: Running a Command with Specific Node.js Version in NVM\nDESCRIPTION: Command to run a specific Node.js version with arguments without changing the current active version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnvm run node --version\n```\n\n----------------------------------------\n\nTITLE: Problematic Environment Variables for NVM\nDESCRIPTION: Environment variables that can interfere with nvm's operation by setting custom paths for npm and Node.js installations.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\n$NPM_CONFIG_PREFIX\n$PREFIX\n```\n\n----------------------------------------\n\nTITLE: Listing Available Remote Node.js Versions in NVM\nDESCRIPTION: Command to display all available Node.js versions that can be installed from the remote repository.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnvm ls-remote\n```\n\n----------------------------------------\n\nTITLE: Using System-Installed Node.js with NVM\nDESCRIPTION: Commands to use the system-installed version of Node.js through NVM using the special 'system' alias.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nnvm use system\nnvm run system --version\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Functions for nvm and .nvmrc Integration\nDESCRIPTION: Fish shell functions for integrating nvm with automatic .nvmrc detection. Requires the bass utility to help bridge between bash and fish shell environments.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_44\n\nLANGUAGE: fish\nCODE:\n```\n# ~/.config/fish/functions/nvm.fish\nfunction nvm\n  bass source ~/.nvm/nvm.sh --no-use ';' nvm $argv\nend\n\n# ~/.config/fish/functions/nvm_find_nvmrc.fish\nfunction nvm_find_nvmrc\n  bass source ~/.nvm/nvm.sh --no-use ';' nvm_find_nvmrc\nend\n\n# ~/.config/fish/functions/load_nvm.fish\nfunction load_nvm --on-variable=\"PWD\"\n  set -l default_node_version (nvm version default)\n  set -l node_version (nvm version)\n  set -l nvmrc_path (nvm_find_nvmrc)\n  if test -n \"$nvmrc_path\"\n    set -l nvmrc_node_version (nvm version (cat $nvmrc_path))\n    if test \"$nvmrc_node_version\" = \"N/A\"\n      nvm install (cat $nvmrc_path)\n    else if test \"$nvmrc_node_version\" != \"$node_version\"\n      nvm use $nvmrc_node_version\n    end\n  else if test \"$node_version\" != \"$default_node_version\"\n    echo \"Reverting to default Node version\"\n    nvm use default\n  end\nend\n\n# ~/.config/fish/config.fish\n# You must call it on initialization or listening to directory switching won't work\nload_nvm > /dev/stderr\n```\n\n----------------------------------------\n\nTITLE: Default Package Configuration Example for NVM\nDESCRIPTION: Example configuration file for specifying default packages to be installed automatically with each new Node.js version. The file supports package names, specific versions, and GitHub repositories.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n# $NVM_DIR/default-packages\n\nrimraf\nobject-inspect@1.0.2\nstevemao/left-pad\n```\n\n----------------------------------------\n\nTITLE: Migrating Packages Between Specific Node.js Versions in NVM\nDESCRIPTION: Commands to install a new Node.js version while migrating npm packages from a specific previous version, allowing for controlled upgrades.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --reinstall-packages-from=5 6\nnvm install --reinstall-packages-from=iojs v4.2\n```\n\n----------------------------------------\n\nTITLE: Sourcing nvm Bash Completion in Shell Profile\nDESCRIPTION: Shell command to activate Bash completion for nvm by sourcing the bash_completion file. This should be placed in your shell profile file after nvm is sourced.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\n[[ -r $NVM_DIR/bash_completion ]] && \\. $NVM_DIR/bash_completion\n```\n\n----------------------------------------\n\nTITLE: Manual Upgrade of NVM\nDESCRIPTION: Shell commands for manually upgrading an existing NVM installation using git. This changes to the NVM directory, fetches the latest changes, checks out the latest tagged version, and activates it.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n(\n  cd \"$NVM_DIR\"\n  git fetch --tags origin\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1)`\n) && \\. \"$NVM_DIR/nvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Alpine Linux 3.5-3.12\nDESCRIPTION: Command sequence for installing nvm on Alpine Linux versions 3.5 to 3.12. Uses python2 instead of python3 and includes all required dependencies.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\napk add -U curl bash ca-certificates openssl ncurses coreutils python2 make gcc g++ libgcc linux-headers grep util-linux binutils findutils\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Adding nvm to Shell Profile Without Auto-use\nDESCRIPTION: Code snippet to add nvm to the shell profile without automatically using the default version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" --no-use # This loads nvm, without auto-using the default version\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js from Source with NVM\nDESCRIPTION: Command to force nvm to install Node.js from source code instead of using pre-compiled binaries, useful when binary packages cause compatibility issues.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\nnvm install -s 0.8.6\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Alias for Node.js Version in NVM\nDESCRIPTION: Command to create a custom alias that points to a specific Node.js version for easier reference.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnvm alias my_alias v14.4.0\n```\n\n----------------------------------------\n\nTITLE: Finding Installation Path of Node.js Version in NVM\nDESCRIPTION: Command to get the full path to a specific Node.js version's executable, showing where it was installed on the system.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnvm which 12.22\n```\n\n----------------------------------------\n\nTITLE: Passing Authentication Header to Mirror URL in NVM\nDESCRIPTION: Command to pass an Authorization header when accessing a mirror URL for Node.js downloads, useful for private or authenticated mirrors.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nNVM_AUTH_HEADER=\"Bearer secret-token\" nvm install node\n```\n\n----------------------------------------\n\nTITLE: Deactivating NVM and Restoring Original PATH\nDESCRIPTION: Command to deactivate NVM in the current shell and restore the original PATH environment variable.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nnvm deactivate\n```\n\n----------------------------------------\n\nTITLE: Shell Setting Causing NVM Issues\nDESCRIPTION: Shell setting that can cause problems with nvm by causing scripts to exit immediately when a command fails.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\nset -e\n```\n\n----------------------------------------\n\nTITLE: Manually Uninstalling NVM\nDESCRIPTION: Commands to manually remove nvm from your system. First unloads nvm from the current session, then removes the installation directory.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\n$ nvm_dir=\"${NVM_DIR:-~/.nvm}\"\n$ nvm unload\n$ rm -rf \"$nvm_dir\"\n```\n\n----------------------------------------\n\nTITLE: Installing older node version on Apple Silicon Macs\nDESCRIPTION: This command installs an older version of node (12.22.1) on Apple Silicon Macs using the --shared-zlib flag to avoid potential compilation issues.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\n$ nvm install v12.22.1 --shared-zlib\n```\n\n----------------------------------------\n\nTITLE: Installing nvm in Docker\nDESCRIPTION: Dockerfile instructions for installing nvm in a Docker container.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Use bash for the shell\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# Create a script file sourced by both interactive and non-interactive bash shells\nENV BASH_ENV /home/user/.bash_env\nRUN touch \"${BASH_ENV}\"\nRUN echo '. \"${BASH_ENV}\"' >> ~/.bashrc\n\n# Download and install nvm\nRUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | PROFILE=\"${BASH_ENV}\" bash\nRUN echo node > .nvmrc\nRUN nvm install\n```\n\n----------------------------------------\n\nTITLE: Checking processor architecture on macOS\nDESCRIPTION: These commands help verify the current processor architecture being used, which is important when switching between native and Rosetta environments.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\n$ exit\n$ arch\narm64\n```\n\n----------------------------------------\n\nTITLE: Installing nvm in Docker for CI/CD Jobs\nDESCRIPTION: Dockerfile instructions for installing nvm in a Docker container suitable for CI/CD jobs.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ubuntu:latest\nARG NODE_VERSION=20\n\n# install curl\nRUN apt update && apt install curl -y\n\n# install nvm\nRUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash\n\n# set env\nENV NVM_DIR=/root/.nvm\n\n# install node\nRUN bash -c \"source $NVM_DIR/nvm.sh && nvm install $NODE_VERSION\"\n\n# set ENTRYPOINT for reloading nvm-environment\nENTRYPOINT [\"bash\", \"-c\", \"source $NVM_DIR/nvm.sh && exec \\\"$@\\\"\", \"--\"]\n\n# set cmd to bash\nCMD [\"/bin/bash\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying node architecture on Apple Silicon Macs\nDESCRIPTION: This command checks the architecture of the installed node version, ensuring it's running under the correct architecture (x64 for Rosetta-enabled older versions).\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\n$ node -p process.arch\nx64\n```\n\n----------------------------------------\n\nTITLE: NVM Configuration Lines to Remove from Shell Config\nDESCRIPTION: The shell configuration lines that need to be removed from .bashrc or other shell resource files when uninstalling nvm.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n[[ -r $NVM_DIR/bash_completion ]] && \\. $NVM_DIR/bash_completion\n```\n\n----------------------------------------\n\nTITLE: Sourcing nvm in Rosetta-enabled shell\nDESCRIPTION: This command sources nvm in the Rosetta-enabled shell, ensuring nvm is available for use.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\n$ source \"${NVM_DIR}/nvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 for Apple Silicon Macs\nDESCRIPTION: This command installs Rosetta 2, which is necessary for running older versions of node on Apple Silicon Macs.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\n$ softwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Fixing nvm node version discrepancy in vim shell on macOS\nDESCRIPTION: This command modifies the permissions of the path_helper to resolve issues with node version detection in vim on macOS.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod ugo-x /usr/libexec/path_helper\n```\n\n----------------------------------------\n\nTITLE: Opening a Rosetta-enabled shell on Apple Silicon Macs\nDESCRIPTION: This command opens a zsh shell running under Rosetta, allowing installation of older node versions on Apple Silicon Macs.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\n$ arch -x86_64 zsh\n```\n\n----------------------------------------\n\nTITLE: Fixing DNS resolution issues in WSL\nDESCRIPTION: This series of commands resolves DNS issues in WSL by setting a custom nameserver and preventing automatic regeneration of the resolv.conf file.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /etc/resolv.conf\nsudo bash -c 'echo \"nameserver 8.8.8.8\" > /etc/resolv.conf'\nsudo bash -c 'echo \"[network]\" > /etc/wsl.conf'\nsudo bash -c 'echo \"generateResolvConf = false\" >> /etc/wsl.conf'\nsudo chattr +i /etc/resolv.conf\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Alpine Linux 3.13+\nDESCRIPTION: Command sequence for installing nvm on Alpine Linux version 3.13 or newer. Installs required dependencies and downloads the nvm installation script.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\napk add -U curl bash ca-certificates openssl ncurses coreutils python3 make gcc g++ libgcc linux-headers grep util-linux binutils findutils\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Verifying resolv.conf contents in WSL\nDESCRIPTION: This command displays the contents of the resolv.conf file, allowing you to verify that the DNS settings have been correctly applied.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/resolv.conf\n```\n\n----------------------------------------\n\nTITLE: Identifying Problematic NPM Configuration in .npmrc\nDESCRIPTION: Example of NPM configuration in .npmrc that can cause compatibility issues with nvm, specifically setting a custom prefix path.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\nprefix='some/path'\n```\n\n----------------------------------------\n\nTITLE: Resolving Homebrew-induced zsh security warnings\nDESCRIPTION: This snippet shows the warning message displayed when Homebrew creates insecure zsh directories. It's not an nvm issue, but a Homebrew-related problem.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\nzsh compinit: insecure directories, run compaudit for list.\nIgnore insecure directories and continue [y] or abort compinit [n]? y\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Output Colors in NVM\nDESCRIPTION: Command to customize the colors used in NVM's output. Five color codes can be specified using a simple color code system.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nnvm set-colors rgBcm\n```\n\n----------------------------------------\n\nTITLE: Using a Mirror for io.js Binaries in NVM\nDESCRIPTION: Commands to use a custom mirror for downloading io.js binaries, which can be set via environment variables or inline with the install command.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_IOJS_ORG_MIRROR=https://iojs.org/dist\nnvm install iojs-v1.0.3\n\nNVM_IOJS_ORG_MIRROR=https://iojs.org/dist nvm install iojs-v1.0.3\n```\n\n----------------------------------------\n\nTITLE: Persisting Custom Colors for NVM in Shell Profile\nDESCRIPTION: Example of setting the NVM_COLORS environment variable to make custom color settings persist across shell sessions.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nexport NVM_COLORS='cmgRY'\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for NVM Development\nDESCRIPTION: Command to build a Docker image for nvm development environment based on the Dockerfile in the nvm repository.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\n$ docker build -t nvm-dev .\n```\n\n----------------------------------------\n\nTITLE: Suppressing Colorized Output in NVM Commands\nDESCRIPTION: Commands to disable colored output in NVM either through command-line flags or environment variables.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nnvm ls --no-colors\nnvm help --no-colors\nTERM=dumb nvm ls\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Image for NVM Development\nDESCRIPTION: Command to verify the built nvm-dev Docker image and its expected output showing image details.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\n$ docker images\n\nREPOSITORY         TAG                 IMAGE ID            CREATED             SIZE\nnvm-dev            latest              9ca4c57a97d8        7 days ago          650 MB\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for NVM Development\nDESCRIPTION: Command to start an interactive Docker container using the nvm-dev image for development purposes.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -h nvm-dev -it nvm-dev\n\nnvm@nvm-dev:~/.nvm$\n```\n\n----------------------------------------\n\nTITLE: Installing io.js with NVM\nDESCRIPTION: Command to install the latest version of io.js using NVM, an alternative JavaScript runtime.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nnvm install iojs\n```\n\n----------------------------------------\n\nTITLE: Feature Roadmap Task List in Markdown\nDESCRIPTION: A markdown checklist showing planned and completed features for the nvm project, including source installation support, release candidate handling, auto-update functionality, and v1.0.0 release plans.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/ROADMAP.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] Rewriting installation code paths to support installing `io.js` and `node` `v4+` [from source](https://github.com/nvm-sh/nvm/issues/1188).\n  - This will include [reusing previously downloaded tarballs](https://github.com/nvm-sh/nvm/issues/1193) that match checksums, which is a nice performance and bandwidth bonus.\n- [ ] Adding opt-in environment variable support to list, download, and install `node` [release candidates](https://github.com/nvm-sh/nvm/issues/779), and [nightly builds](https://github.com/nvm-sh/nvm/issues/1053).\n- [ ] [`nvm update`](https://github.com/nvm-sh/nvm/issues/400): the ability to autoupdate `nvm` itself\n- [ ] [v1.0.0](https://github.com/nvm-sh/nvm/milestone/1), including updating the [nvm on npm](https://github.com/nvm-sh/nvm/issues/304) to auto-install nvm properly\n```\n\n----------------------------------------\n\nTITLE: Defining Maintainer Role in NVM Project Governance (Markdown)\nDESCRIPTION: This snippet lists the current maintainer of the NVM project and outlines their responsibilities. It includes tasks such as issue and PR triage, feature management, maintenance, security, releases, and repository management.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/GOVERNANCE.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Maintainers\n  - [@ljharb](https://github.com/ljharb)\n\nMaintainers are responsible for issue/PR triage, feature additions, maintenance, bugfixes, security fixes, releases, promoting existing contributors to maintainers, managing repo and CI configuration, etc.\n```\n\n----------------------------------------\n\nTITLE: Migrating Packages During io.js Installation in NVM\nDESCRIPTION: Command to install a new io.js version while migrating npm packages from a previous io.js version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --reinstall-packages-from=iojs iojs\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub for a nvm Pull Request\nDESCRIPTION: Shows how to push your local branch changes to your GitHub fork to prepare for creating a pull request.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin issue1234\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js Version List with LTS Information\nDESCRIPTION: This snippet shows a formatted list of Node.js versions, including LTS (Long Term Support) releases with their codenames. It uses ANSI color codes to highlight the latest LTS versions for each major release.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm ls-remote.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n       v10.14.2  [0;37m (LTS: Dubnium)[0m\n       v10.15.0  [0;37m (LTS: Dubnium)[0m\n       ...\n       v10.24.1  [1;32m (Latest LTS: Dubnium)[0m\n        v11.0.0\n        ...\n       v12.22.12  [1;32m (Latest LTS: Erbium)[0m\n        v13.0.0\n        ...\n       v14.21.3  [1;32m (Latest LTS: Fermium)[0m\n        v15.0.0\n        ...\n       v16.20.2  [1;32m (Latest LTS: Gallium)[0m\n        v17.0.0\n        ...\n       v18.20.4  [1;32m (Latest LTS: Hydrogen)[0m\n        v19.0.0\n        ...\n       v20.18.0  [1;32m (Latest LTS: Iron)[0m\n        v21.0.0\n        ...\n       v22.11.0  [1;32m (Latest LTS: Jod)[0m\n        v23.0.0\n        v23.1.0\n```\n\n----------------------------------------\n\nTITLE: Mapping LTS Codenames to Node.js Versions in NVM\nDESCRIPTION: This snippet provides a list of Node.js LTS releases with their codenames and corresponding version numbers. It's used by NVM to manage and install specific LTS versions of Node.js. Each line represents a mapping between an LTS codename and its Node.js version.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm_make_alias LTS alias calls.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlts/*|lts/jod\nlts/jod|v22.11.0\nlts/iron|v20.18.0\nlts/hydrogen|v18.20.4\nlts/gallium|v16.20.2\nlts/fermium|v14.21.3\nlts/erbium|v12.22.12\nlts/dubnium|v10.24.1\nlts/carbon|v8.17.0\nlts/boron|v6.17.1\nlts/argon|v4.9.1\n```\n\n----------------------------------------\n\nTITLE: Referencing Node.js LTS Jod Version\nDESCRIPTION: This single line identifies the Node.js Long-Term Support (LTS) version with the codename \"Jod\". In nvm, these identifiers allow users to install specific LTS versions without needing to know the exact version number.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/lts-star.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlts/jod\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js LTS Version History\nDESCRIPTION: Terminal output showing Node.js LTS versions with ANSI color formatting. Each line displays a version number followed by its LTS codename. Latest versions of each LTS line are highlighted in green.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm ls-remote lts.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n         v4.2.0  [0;37m (LTS: Argon)[0m\n         v4.2.1  [0;37m (LTS: Argon)[0m\n         v4.2.2  [0;37m (LTS: Argon)[0m\n         v4.2.3  [0;37m (LTS: Argon)[0m\n         v4.2.4  [0;37m (LTS: Argon)[0m\n         v4.2.5  [0;37m (LTS: Argon)[0m\n         v4.2.6  [0;37m (LTS: Argon)[0m\n         v4.3.0  [0;37m (LTS: Argon)[0m\n         v4.3.1  [0;37m (LTS: Argon)[0m\n         v4.3.2  [0;37m (LTS: Argon)[0m\n         v4.4.0  [0;37m (LTS: Argon)[0m\n         v4.4.1  [0;37m (LTS: Argon)[0m\n         v4.4.2  [0;37m (LTS: Argon)[0m\n         v4.4.3  [0;37m (LTS: Argon)[0m\n         v4.4.4  [0;37m (LTS: Argon)[0m\n         v4.4.5  [0;37m (LTS: Argon)[0m\n         v4.4.6  [0;37m (LTS: Argon)[0m\n         v4.4.7  [0;37m (LTS: Argon)[0m\n         v4.5.0  [0;37m (LTS: Argon)[0m\n         v4.6.0  [0;37m (LTS: Argon)[0m\n         v4.6.1  [0;37m (LTS: Argon)[0m\n         v4.6.2  [0;37m (LTS: Argon)[0m\n         v4.7.0  [0;37m (LTS: Argon)[0m\n         v4.7.1  [0;37m (LTS: Argon)[0m\n         v4.7.2  [0;37m (LTS: Argon)[0m\n         v4.7.3  [0;37m (LTS: Argon)[0m\n         v4.8.0  [0;37m (LTS: Argon)[0m\n         v4.8.1  [0;37m (LTS: Argon)[0m\n         v4.8.2  [0;37m (LTS: Argon)[0m\n         v4.8.3  [0;37m (LTS: Argon)[0m\n         v4.8.4  [0;37m (LTS: Argon)[0m\n         v4.8.5  [0;37m (LTS: Argon)[0m\n         v4.8.6  [0;37m (LTS: Argon)[0m\n         v4.8.7  [0;37m (LTS: Argon)[0m\n         v4.9.0  [0;37m (LTS: Argon)[0m\n         v4.9.1  [1;32m (Latest LTS: Argon)[0m\n```\n\n----------------------------------------\n\nTITLE: Specifying NVM Version Number\nDESCRIPTION: A plain text version number for the NVM (Node Version Manager) project. This version (24.0) indicates a major release with no minor version components.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm_print_implicit_alias remote stable nightly.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n24.0\n```\n\n----------------------------------------\n\nTITLE: Node.js Version List\nDESCRIPTION: Complete version history of Node.js releases, showing the evolution from early v0.x releases through major versions up to v23. Includes LTS (Long Term Support) release codenames marked with their respective versions.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm_ls_remote.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nv0.1.14\nv0.1.15\n...\nv23.0.0\nv23.1.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js Version List with LTS Information\nDESCRIPTION: This snippet shows a list of Node.js versions, including LTS releases with their codenames. The list is formatted with version numbers and LTS information, using ANSI color codes for highlighting.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm ls-remote node.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nv4.2.0  [0;37m (LTS: Argon)[0m\nv4.2.1  [0;37m (LTS: Argon)[0m\nv4.2.2  [0;37m (LTS: Argon)[0m\n...\nv4.9.1  [1;32m (Latest LTS: Argon)[0m\n...\nv6.9.0  [0;37m (LTS: Boron)[0m\nv6.9.1  [0;37m (LTS: Boron)[0m\n...\nv6.17.1  [1;32m (Latest LTS: Boron)[0m\n...\nv8.9.0  [0;37m (LTS: Carbon)[0m\nv8.9.1  [0;37m (LTS: Carbon)[0m\n...\nv8.17.0  [1;32m (Latest LTS: Carbon)[0m\n...\nv10.13.0  [0;37m (LTS: Dubnium)[0m\nv10.14.0  [0;37m (LTS: Dubnium)[0m\n...\nv10.20.1  [0;37m (LTS: Dubnium)[0m\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js Versions with NVM\nDESCRIPTION: This snippet shows the output of an NVM command listing available Node.js versions. It includes version numbers, LTS release names, and highlights for the latest versions.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm ls-remote lts.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n       v20.16.0  [0;37m (LTS: Iron)[0m\n       v20.17.0  [0;37m (LTS: Iron)[0m\n       v20.18.0  [1;32m (Latest LTS: Iron)[0m\n       v22.11.0  [1;32m (Latest LTS: Jod)[0m\n```\n\n----------------------------------------\n\nTITLE: Testing nvm Changes Before Submitting a Pull Request\nDESCRIPTION: Demonstrates how to verify your changes by running the test suite before submitting a pull request.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for Pull Requests in nvm\nDESCRIPTION: Shows how to create a new Git branch for making changes to the nvm project. This is the first step in the pull request workflow.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b issue1234\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Pull Request Branch in nvm\nDESCRIPTION: Shows how to update your branch with the latest code from the upstream repository before submitting a pull request.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to a nvm Pull Request Branch\nDESCRIPTION: Demonstrates how to commit changes to your branch with a proper commit message following the project's standards.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format for nvm Contributions\nDESCRIPTION: Demonstrates the proper format for commit messages in the nvm project, including tag, description, and issue reference.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[Tag]: Short description of what you did\n\nLonger description here if necessary\n\nFixes #1234\n```\n\n----------------------------------------\n\nTITLE: Node.js Nightly Build Version Identifier in NVM\nDESCRIPTION: This is a version string identifier for a Node.js nightly build that NVM can use to install this specific version. The identifier follows the format of version number followed by nightly date and commit hash.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/test/fast/Unit tests/mocks/nvm_ls_remote stable nightly.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nv24.0.0-nightly20241031996708042b\n```\n\n----------------------------------------\n\nTITLE: Adding Co-Authors to Commit Messages in nvm\nDESCRIPTION: Shows how to properly attribute multiple authors in a commit message for the nvm project.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nCo-authored-by: Name Here <email@here>\n```\n\n----------------------------------------\n\nTITLE: Defining Contributor Role in NVM Project Governance (Markdown)\nDESCRIPTION: This snippet defines the role of contributors in the NVM project. It explains that contributors can participate through various means such as code, content, or time contributions, but do not have additional project permissions.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/GOVERNANCE.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Contributors\n\nAnyone who contributes code or content or time, via issues or pull requests or otherwise. Contributors do not have any additional permissions on the project.\n```\n\n----------------------------------------\n\nTITLE: Referencing nvm as an OpenJS Foundation Project\nDESCRIPTION: Command showing nvm as a member project of the OpenJS Foundation that uses Contributor Covenant v2.1 as its code of conduct.\nSOURCE: https://github.com/nvm-sh/nvm/blob/master/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm\n```"
  }
]