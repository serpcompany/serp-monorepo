[
  {
    "owner": "fluxcd",
    "repo": "flagger",
    "content": "TITLE: Configuring A/B Testing with Gateway API in Flagger\nDESCRIPTION: YAML configuration for A/B testing using Flagger's Canary resource. Defines deployment settings, service configuration, analysis parameters, and testing webhooks for gradual traffic shifting based on HTTP headers.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  progressDeadlineSeconds: 60\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 9898\n    targetPort: 9898\n    hosts:\n     - www.example.com\n    gatewayRefs:\n      - name: gateway\n        namespace: istio-ingress\n  analysis:\n    interval: 1m\n    threshold: 5\n    maxWeight: 50\n    stepWeight: 10\n    metrics:\n    - name: error-rate\n      templateRef:\n        name: error-rate\n        namespace: flagger-system\n      thresholdRange:\n        max: 1\n      interval: 1m\n    - name: latency\n      templateRef:\n        name: latency\n        namespace: flagger-system\n      thresholdRange:\n         max: 0.5\n      interval: 30s\n    webhooks:\n      - name: smoke-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 15s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'anon' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 -host www.example.com -H 'X-Canary: insider' http://gateway-istio.istio-ingress/\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Canary Release in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines a Canary custom resource for a deployment named 'podinfo'. It specifies the target deployment, service configuration, analysis parameters, and metrics for progressive traffic shifting.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  service:\n    port: 9898\n  analysis:\n    interval: 1m\n    threshold: 10\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n      - name: request-success-rate\n        thresholdRange:\n          min: 99\n        interval: 1m\n      - name: request-duration\n        thresholdRange:\n          max: 500\n        interval: 1m\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Deployment\nDESCRIPTION: YAML configuration for setting up canary deployment with detailed analysis and webhook configurations\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  progressDeadlineSeconds: 60\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 9898\n    targetPort: 9898\n    gateways:\n    - istio-system/public-gateway\n    hosts:\n    - app.example.com\n    trafficPolicy:\n      tls:\n        mode: DISABLE\n    retries:\n      attempts: 3\n      perTryTimeout: 1s\n      retryOn: \"gateway-error,connect-failure,refused-stream\"\n  analysis:\n    interval: 1m\n    threshold: 5\n    maxWeight: 50\n    stepWeight: 10\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Target Deployment in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows how to configure the target deployment for a canary release, including autoscaling settings and primary scaler replicas.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  progressDeadlineSeconds: 60\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n    primaryScalerReplicas:\n      minReplicas: 2\n      maxReplicas: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Blue/Green Analysis in Flagger\nDESCRIPTION: YAML configuration for Blue/Green deployment analysis settings including iteration count, interval timing, and failure threshold parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # total number of iterations\n    iterations: 10\n    # max number of failed iterations before rollback\n    threshold: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Custom Resource for Session Affinity\nDESCRIPTION: This YAML configuration defines a Canary custom resource in Kubernetes for session affinity, balancing traffic while deploying updates. It provides detailed parameters like session affinity cookie settings, traffic routing, analysis metrics, and webhook configurations for load testing. It requires Flagger setup within Kubernetes and familiarity with HTTPRoute and canary deployment intricacies.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  # deployment reference\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  # HPA reference (optional)\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    # service port number\n    port: 9898\n    # container port number or name (optional)\n    targetPort: 9898\n    # Gateway API HTTPRoute host names\n    hosts:\n     - www.example.com\n    # Reference to the Gateway that the generated HTTPRoute would attach to.\n    gatewayRefs:\n      - name: gateway\n        namespace: istio-ingress\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 10\n    # session affinity config\n    sessionAffinity:\n      # name of the cookie used\n      cookieName: flagger-cookie\n      # max age of the cookie (in seconds)\n      # optional; defaults to 86400\n      maxAge: 21600\n    metrics:\n    - name: error-rate\n      # max error rate (5xx responses)\n      # percentage (0-100)\n      templateRef:\n        name: error-rate\n        namespace: flagger-system\n      thresholdRange:\n        max: 1\n      interval: 1m\n    - name: latency\n      templateRef:\n        name: latency\n        namespace: flagger-system\n      # seconds\n      thresholdRange:\n         max: 0.5\n      interval: 30s\n    # testing (optional)\n    webhooks:\n      - name: smoke-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 15s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'anon' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 -host www.example.com http://gateway-istio.istio-ingress/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Release Analysis Parameters in YAML\nDESCRIPTION: This snippet configures the analysis parameters for a canary deployment using Flagger. It specifies the interval for checks, the threshold for failed metrics, the maximum weight of traffic to be routed to the canary, and the step sizes for the incrementing weights. It allows for finely-tuned deployment strategies based on observed metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 10\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 2\n    # promotion increment step (default 100)\n    # percentage (0-100)\n    stepWeightPromotion: 100\n  # deploy straight to production without\n  # the metrics and webhook checks\n  skipAnalysis: false\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Resource with Traffic Mirroring in Flagger\nDESCRIPTION: This YAML snippet defines a Canary resource with traffic mirroring enabled for a podinfo application. It specifies the analysis configuration, including the interval, threshold, iterations, and mirror settings. Traffic mirroring is enabled by setting `mirror` to `true`, and `mirrorWeight` to 100.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  analysis:\n    # schedule interval\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # total number of iterations\n    iterations: 10\n    # enable traffic shadowing \n    mirror: true\n    # weight of the traffic mirrored to your canary (defaults to 100%)\n    mirrorWeight: 100\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 1m\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Validation Time for Canary Deployments\nDESCRIPTION: This snippet offers the formula for calculating the minimum time required to validate and promote a canary deployment according to specified intervals and weight metrics. It aids in planning and understanding deployment timelines.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ninterval * (maxWeight / stepWeight)\n```\n\n----------------------------------------\n\nTITLE: MetricTemplate with Variable Substitution for Prometheus\nDESCRIPTION: Defines a Prometheus MetricTemplate that uses template variables in the query. Variables like namespace, target, and custom variables are injected into the PromQL query during execution.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: my-metric\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.linkerd-viz:9090\n  query: |\n    histogram_quantile(\n      0.99,\n      sum(\n        rate(\n          response_latency_ms_bucket{\n            namespace=\"{{ namespace }}\",\n            deployment=~\"{{ target }}\",\n            direction=\"{{ variables.direction }}\"\n          }[{{ interval }}]\n        )\n      ) by (le)\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing with Cookies in Flagger\nDESCRIPTION: This YAML snippet shows how to configure A/B testing using HTTP cookies for traffic routing, including the regex pattern for cookie matching.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    cookie:\n      regex: \"^(.*?;)?(canary=insider)(;.*)?$\"\nwebhooks:\n- name: load-test\n  url: http://flagger-loadtester.test/\n  metadata:\n    cmd: \"hey -z 1m -q 10 -c 2 -H 'Cookie: canary=insider' http://podinfo.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Rollback Time for Canary Deployments\nDESCRIPTION: This snippet provides the formula to determine how long it takes to rollback a canary deployment when metric checks fail. This allows developers to anticipate recovery times when issues arise.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ninterval * threshold\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Promotion with Flagger Custom Resource in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a canary promotion for a deployment named 'podinfo' using Flagger's custom resource. It includes configuration for service mesh provider, deployment reference, autoscaler, service details, analysis settings, and alerting.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: istio\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  progressDeadlineSeconds: 60\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    name: podinfo\n    port: 9898\n    targetPort: 9898\n    portName: http\n    portDiscovery: true\n    match:\n      - uri:\n          prefix: /\n    rewrite:\n      uri: /\n    timeout: 5s\n  skipAnalysis: false\n  analysis:\n    interval: 1m\n    threshold: 10\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    - name: \"database connections\"\n      templateRef:\n        name: db-connections\n      thresholdRange:\n        min: 2\n        max: 100\n      interval: 1m\n    webhooks:\n      - name: \"conformance test\"\n        type: pre-rollout\n        url: http://flagger-helmtester.test/\n        timeout: 5m\n        metadata:\n          type: \"helmv3\"\n          cmd: \"test run podinfo -n test\"\n      - name: \"load test\"\n        type: rollout\n        url: http://flagger-loadtester.test/\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo.test:9898/\"\n    alerts:\n      - name: \"dev team Slack\"\n        severity: error\n        providerRef:\n          name: dev-slack\n          namespace: flagger\n      - name: \"qa team Discord\"\n        severity: warn\n        providerRef:\n          name: qa-discord\n      - name: \"on-call MS Teams\"\n        severity: info\n        providerRef:\n          name: on-call-msteams\n```\n\n----------------------------------------\n\nTITLE: Referencing 404 Error Rate MetricTemplate in Analysis\nDESCRIPTION: Shows how to reference the HTTP 404 error rate MetricTemplate in a canary analysis. The configuration sets a maximum threshold of 5% for the 404 error rate.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"404s percentage\"\n        templateRef:\n          name: not-found-percentage\n          namespace: istio-system\n        thresholdRange:\n          max: 5\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Suspending a Canary Deployment in Flagger\nDESCRIPTION: The 'suspend' field in the YAML specification, when set to true, pauses the reconciliation of the canary deployment. This helps in managing ongoing changes without affecting the current workloads or traffic routing during active canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsuspend: true\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Deployment Configuration\nDESCRIPTION: Creates a Canary custom resource that defines the progressive deployment strategy, including traffic increment steps, metrics thresholds, and testing webhooks. This configuration orchestrates the entire canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  # deployment reference\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  # HPA reference (optional)\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    # service port number\n    port: 9898\n    # container port number or name (optional)\n    targetPort: 9898\n    # Gateway API HTTPRoute host names\n    hosts:\n     - www.example.com\n    # Reference to the Gateway that the generated HTTPRoute would attach to.\n    gatewayRefs:\n      - name: gateway\n        namespace: istio-ingress\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 10\n    metrics:\n    - name: error-rate\n      # max error rate (5xx responses)\n      # percentage (0-100)\n      templateRef:\n        name: error-rate\n        namespace: flagger-system\n      thresholdRange:\n        max: 1\n      interval: 1m\n    - name: latency\n      templateRef:\n        name: latency\n        namespace: flagger-system\n      # seconds\n      thresholdRange:\n         max: 0.5\n      interval: 30s\n    # testing (optional)\n    webhooks:\n      - name: smoke-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 15s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'anon' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 -host www.example.com http://gateway-istio.istio-ingress/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Analysis Parameters in Flagger\nDESCRIPTION: This YAML specification outlines various parameters for configuring canary analysis within Flagger. It includes settings for metrics, thresholds, traffic weights, and load testing to ensure successful canary deployments and rollbacks based on real-time performance data.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval:\n    # max number of failed metric checks before rollback\n    threshold:\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight:\n    # canary increment step\n    # percentage (0-100)\n    stepWeight:\n    # promotion increment step\n    # percentage (0-100)\n    stepWeightPromotion:\n    # total number of iterations\n    # used for A/B Testing and Blue/Green\n    iterations:\n    # threshold of primary pods that need to be available to consider it ready\n    # before starting rollout. this is optional and the default is 100\n    # percentage (0-100)\n    primaryReadyThreshold: 100\n    # threshold of canary pods that need to be available to consider it ready\n    # before starting rollout. this is optional and the default is 100\n    # percentage (0-100)\n    canaryReadyThreshold: 100\n    # canary match conditions\n    # used for A/B Testing\n    match:\n      - # HTTP header\n    # key performance indicators\n    metrics:\n      - # metric check\n    # alerting\n    alerts:\n      - # alert provider\n    # external checks\n    webhooks:\n      - # hook\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Canary Resource\nDESCRIPTION: YAML configuration for the Flagger Canary custom resource. This defines the A/B testing parameters, including traffic routing rules and analysis metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  progressDeadlineSeconds: 60\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 9898\n    gateways:\n    - istio-system/public-gateway\n    hosts:\n    - app.example.com\n    trafficPolicy:\n      tls:\n        mode: DISABLE\n  analysis:\n    interval: 1m\n    iterations: 10\n    threshold: 2\n    match:\n      - headers:\n          user-agent:\n            regex: \".*Firefox.*\"\n      - headers:\n          cookie:\n            regex: \"^(.*?;)?(type=insider)(;.*)?$\"\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 15s\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 -H 'Cookie: type=insider' http://podinfo.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Referencing a MetricTemplate in Canary Analysis\nDESCRIPTION: Demonstrates how to reference a MetricTemplate in a canary analysis configuration. The configuration specifies the template reference, threshold ranges, and interval for the metric check.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"my metric\"\n        templateRef:\n          name: my-metric\n          # namespace is optional\n          # when not specified, the canary namespace will be used\n          namespace: flagger\n        # accepted values\n        thresholdRange:\n          min: 10\n          max: 1000\n        # metric query time window\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing with Exact Header Matches in YAML for Istio\nDESCRIPTION: This snippet shows how to specify exact header matches and cookie conditions in an A/B testing configuration using Flagger. This allows the canary analysis to focus on specific user agents or sessions during rollout.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    interval: 1m\n    threshold: 10\n    iterations: 2\n    match:\n      - headers:\n          x-canary:\n            exact: \"insider\"\n      - headers:\n          cookie:\n            regex: \"^(.*?;)?(canary=always)(;.*)?$\"\n      - sourceLabels:\n          app.kubernetes.io/name: \"scheduler\"\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Browser Version with User-Agent Header\nDESCRIPTION: YAML configuration for targeting users with a specific browser version in A/B testing by matching the User-Agent header suffix.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    user-agent:\n      suffix: \"Firefox/71.0\"\n```\n\n----------------------------------------\n\nTITLE: Define HelmRelease with Flux\nDESCRIPTION: This YAML snippet defines a HelmRelease custom resource for Flux, specifying the release name, chart source (GitHub repository), and values to override the defaults. It includes annotations to automate the release based on image tag updates and configures canary deployment settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flux.weave.works/v1beta1\nkind: HelmRelease\nmetadata:\n  name: frontend\n  namespace: test\n  annotations:\n    fluxcd.io/automated: \"true\"\n    filter.fluxcd.io/chart-image: semver:~3.1\nspec:\n  releaseName: frontend\n  chart:\n    git: https://github.com/weaveowrks/flagger\n    ref: master\n    path: charts/podinfo\n  values:\n    image:\n      repository: stefanprodan/podinfo\n      tag: 3.1.0\n      backend: http://backend-podinfo:9898/echo\n      canary:\n        enabled: true\n        istioIngress:\n          enabled: true\n          gateway: istio-system/public-gateway\n          host: frontend.istio.example.com\n        loadtest:\n          enabled: true\n        helmtest:\n          enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Canary Custom Resource\nDESCRIPTION: Creates a Canary resource definition with specifications for deployment, HPA, service configuration, and analysis metrics. Replace `app.example.com` with your domain.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 80\n    targetPort: 9898\n    timeout: 15s\n    retries:\n      attempts: 3\n      perTryTimeout: 5s\n      retryOn: \"5xx\"\n  analysis:\n    interval: 30s\n    threshold: 5\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    webhooks:\n    - name: acceptance-test\n      type: pre-rollout\n      url: http://flagger-loadtester.test/\n      timeout: 30s\n      metadata:\n        type: bash\n        cmd: \"curl -sd 'test' http://podinfo-canary.test/token | grep token\"\n    - name: load-test\n      url: http://flagger-loadtester.test/\n      type: rollout\n      timeout: 5s\n      metadata:\n        cmd: \"hey -z 1m -q 10 -c 2 -host app.example.com http://envoy.projectcontour\"\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Labels for Flagger in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to properly label a deployment for use with Flagger, using the required 'app' selector.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: podinfo\nspec:\n  selector:\n    matchLabels:\n      app: podinfo\n  template:\n    metadata:\n      labels:\n        app: podinfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Affinity in Flagger Canary Releases\nDESCRIPTION: YAML configuration for implementing session affinity in canary releases using cookie-based routing with customizable cookie names and expiration settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 10\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 2\n    # session affinity config\n    sessionAffinity:\n      # name of the cookie used\n      cookieName: flagger-cookie\n      # max age of the cookie (in seconds)\n      # optional; defaults to 86400\n      maxAge: 21600\n```\n\n----------------------------------------\n\nTITLE: Enabling mTLS for a Flagger Canary with Istio\nDESCRIPTION: Shows how to enable mutual TLS authentication for a Flagger canary deployment using Istio's built-in TLS capabilities. This configuration sets the TLS mode to ISTIO_MUTUAL for global mTLS environments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nspec:\n  service:\n    trafficPolicy:\n      tls:\n        mode: ISTIO_MUTUAL\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Istio Service Mesh\nDESCRIPTION: Install Flagger with Istio as the mesh provider, configuring metrics server and namespace\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -i flagger flagger\\/flagger \\\n    --namespace=istio-system \\\n    --set meshProvider=istio \\\n    --set metricsServer=http:\\/\\/prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Waiting for Canary Analysis Completion in Kubernetes\nDESCRIPTION: This command waits for a canary deployment's condition to be promoted, ensuring that the canary analysis has completed successfully. It uses a timeout of 5 minutes to avoid indefinite waiting periods.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait canary/podinfo --for=condition=promoted --timeout=5m\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment with kubectl\nDESCRIPTION: This bash command updates the container image in a Kubernetes deployment to initiate a canary deployment process. The specified deployment and container are updated to a new image version. Requires kubectl and access to the Kubernetes cluster with the necessary permissions.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Linear Promotion Weights for Canary Release in YAML\nDESCRIPTION: This snippet demonstrates how to configure linear weight values for a canary deployment's analysis. It determines how the canary's traffic weight increases incrementally until it reaches the maximum specified value, illustrating the stepwise promotion process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# canary.yaml\nspec:\n  analysis:\n    maxWeight: 50\n    stepWeight: 20\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger for Istio\nDESCRIPTION: This Helm command installs Flagger for use with Istio service mesh, configuring the metrics server and other essential parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=istio-system \\\n--set crd.create=false \\\n--set meshProvider=istio \\\n--set metricsServer=http://prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Defining Flagger Canary Resource\nDESCRIPTION: YAML configuration for creating a Flagger canary custom resource, specifying the deployment, metrics, and analysis parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: gloo\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 9898\n    targetPort: 9898\n  analysis:\n    interval: 10s\n    threshold: 5\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 10s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 2m -q 5 -c 2 -host app.example.com http://gateway-proxy.gloo-system\"\n```\n\n----------------------------------------\n\nTITLE: Defining a MetricTemplate Custom Resource in Flagger\nDESCRIPTION: Shows the structure of a MetricTemplate custom resource that allows Flagger to connect to a metrics provider and run a custom query. The template includes provider configuration, connection details, and the query definition.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: my-metric\nspec:\n  provider:\n    type: # can be prometheus, datadog, etc\n    address: # API URL\n    insecureSkipVerify: # if set to true, disables the TLS cert validation\n    secretRef:\n      name: # name of the secret containing the API credentials\n  query: # metric query\n```\n\n----------------------------------------\n\nTITLE: Canary Analysis Configuration\nDESCRIPTION: YAML configuration for adding a custom metric check to the canary analysis that monitors 404 error rates.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"404s percentage\"\n        templateRef:\n          name: not-found-percentage\n        thresholdRange:\n          max: 5\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Example Flagger Event Webhook Payload\nDESCRIPTION: Example of a JSON payload sent by Flagger to a configured webhook. This example shows a notification that a new revision was detected for the podinfo canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"podinfo\",\n  \"namespace\": \"default\",\n  \"phase\": \"Progressing\",\n  \"metadata\": {\n    \"eventMessage\": \"New revision detected! Scaling up podinfo.default\",\n    \"eventType\": \"Normal\",\n    \"timestamp\": \"1578607635167\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traffic Mirroring Analysis in Flagger\nDESCRIPTION: YAML configuration for traffic mirroring in Flagger, including mirror settings, iteration count, and weight parameters for copying traffic between primary and canary services.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # total number of iterations\n    iterations: 10\n    # max number of failed iterations before rollback\n    threshold: 2\n    # Traffic shadowing\n    mirror: true\n    # Weight of the traffic mirrored to your canary (defaults to 100%)\n    # Only applicable for Istio.\n    mirrorWeight: 100\n```\n\n----------------------------------------\n\nTITLE: Creating Metric Template for HTTP Error Rate\nDESCRIPTION: YAML configuration to create a metric template for measuring HTTP requests error rate using Prometheus queries.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: error-rate\n  namespace: test\nspec:\n  provider:\n    address: http://prometheus-prometheus.monitoring:9090\n    type: prometheus\n  query: |\n    100 - rate(\n      http_requests_total{\n        namespace=\"{{ namespace }}\",\n        job=\"{{ target }}-canary\",\n        status!~\"5.*\"\n      }[{{ interval }}]) \n    / \n    rate(\n      http_requests_total{\n        namespace=\"{{ namespace }}\",\n        job=\"{{ target }}-canary\"\n      }[{{ interval }}]\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Analysis with Metrics\nDESCRIPTION: YAML configuration for setting up canary analysis using the previously defined metric templates for HTTP error rate and latency checks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: kubernetes\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  progressDeadlineSeconds: 60\n  service:\n    port: 80\n    targetPort: http\n    name: podinfo\n  analysis:\n    interval: 30s\n    iterations: 10\n    threshold: 2\n    metrics:\n    - name: error-rate\n      templateRef:\n        name: error-rate\n      thresholdRange:\n        max: 1\n      interval: 30s\n    - name: latency\n      templateRef:\n        name: latency\n      thresholdRange:\n        max: 0.5\n      interval: 30s\n    webhooks:\n      - name: load-test\n        type: rollout\n        url: \"http://loadtester.flagger-system/\"\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Types for Canary Analysis in YAML\nDESCRIPTION: Example YAML configuration showing how to define different webhook types for canary analysis, including confirm-rollout, pre-rollout, rollout, confirm-traffic-increase, confirm-promotion, post-rollout, rollback and event webhooks with their respective metadata and options.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    webhooks:\n      - name: \"start gate\"\n        type: confirm-rollout\n        url: http://flagger-loadtester.test/gate/approve\n        retries: 5\n      - name: \"helm test\"\n        type: pre-rollout\n        url: http://flagger-helmtester.flagger/\n        timeout: 3m\n        metadata:\n          type: \"helmv3\"\n          cmd: \"test podinfo -n test\"\n      - name: \"load test\"\n        type: rollout\n        url: http://flagger-loadtester.test/\n        timeout: 15s\n        metadata:\n          cmd: \"hey -z 1m -q 5 -c 2 http://podinfo-canary.test:9898/\"\n      - name: \"traffic increase gate\"\n        type: confirm-traffic-increase\n        url: http://flagger-loadtester.test/gate/approve\n      - name: \"promotion gate\"\n        type: confirm-promotion\n        url: http://flagger-loadtester.test/gate/approve\n      - name: \"notify\"\n        type: post-rollout\n        url: http://telegram.bot:8080/\n        timeout: 5s\n        metadata:\n          some: \"message\"\n      - name: \"rollback gate\"\n        type: rollback\n        url: http://flagger-loadtester.test/rollback/check\n      - name: \"send to Slack\"\n        type: event\n        url: http://event-recevier.notifications/slack\n        retries: 3\n        metadata:\n          environment: \"test\"\n          cluster: \"flagger-test\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Custom Resource Definitions (CRDs)\nDESCRIPTION: Apply Flagger's custom resource definitions to extend Kubernetes API with Flagger-specific resources\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f https:\\/\\/raw.githubusercontent.com\\/fluxcd\\/flagger\\/main\\/artifacts\\/flagger\\/crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Resource with Session Affinity in Flagger\nDESCRIPTION: This YAML snippet defines a Canary resource with session affinity configured for a podinfo application. It specifies the target deployment, autoscaler, and service details, including Istio gateways and virtual service hosts. The analysis section configures metrics, webhooks, and session affinity settings, such as the cookie name and max age.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  # deployment reference\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  # HPA reference (optional)\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    # service port number\n    port: 9898\n    # container port number or name (optional)\n    targetPort: 9898\n    # Istio gateways (optional)\n    gateways:\n    - istio-system/public-gateway\n    # Istio virtual service host names (optional)\n    hosts:\n    - app.example.com\n    # Istio traffic policy (optional)\n    trafficPolicy:\n      tls:\n        # use ISTIO_MUTUAL when mTLS is enabled\n        mode: DISABLE\n    # Istio retry policy (optional)\n    retries:\n      attempts: 3\n      perTryTimeout: 1s\n      retryOn: \"gateway-error,connect-failure,refused-stream\"\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 10\n    # session affinity config\n    sessionAffinity:\n      # name of the cookie used\n      cookieName: flagger-cookie\n      # max age of the cookie (in seconds)\n      # optional; defaults to 86400\n      maxAge: 21600\n    metrics:\n    - name: request-success-rate\n      # minimum req success rate (non 5xx responses)\n      # percentage (0-100)\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      # maximum req duration P99\n      # milliseconds\n      thresholdRange:\n        max: 500\n      interval: 30s\n    # testing (optional)\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Test Webhooks in YAML\nDESCRIPTION: Example YAML configuration showing how to define load test webhooks that will generate HTTP GET and POST requests to ensure the canary receives traffic during analysis. Uses the flagger-loadtester to execute commands.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  - name: load-test-get\n    url: http://flagger-loadtester.test/\n    timeout: 5s\n    metadata:\n      type: cmd\n      cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n  - name: load-test-post\n    url: http://flagger-loadtester.test/\n    timeout: 5s\n    metadata:\n      type: cmd\n      cmd: \"hey -z 1m -q 10 -c 2 -m POST -d '{test: 2}' http://podinfo-canary.test:9898/echo\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger for Linkerd\nDESCRIPTION: This Helm command installs Flagger for use with Linkerd service mesh, configuring the metrics server and other essential parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=linkerd \\\n--set crd.create=false \\\n--set meshProvider=linkerd \\\n--set metricsServer=http://linkerd-prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Updating Deployment Image and Monitoring Canary Progress in Bash\nDESCRIPTION: This Bash script updates a deployment's container image and then waits for Flagger to detect the change and start the canary analysis process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# update the container image\nkubectl set image deployment/podinfo podinfod=stefanprodan/podinfo:3.0.1\n\n# wait for Flagger to detect the change\nok=false\nuntil ${ok}; do\n    kubectl get canary/podinfo | grep 'Progressing' && ok=true || ok=false\n    sleep 5\ndone\n```\n\n----------------------------------------\n\nTITLE: Updating Canary Manifest to Use Custom Latency Metric in YAML\nDESCRIPTION: This YAML snippet shows how to update a Canary manifest to use the custom latency metric defined in the MetricTemplate. It replaces the standard request-duration metric with the new latency metric for compatibility with Istio 1.4.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/upgrade-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n- name: latency\n  templateRef:\n    name: latency\n    namespace: istio-system\n  thresholdRange:\n    max: 0.500\n  interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Deploying New Frontend Version for Canary Analysis\nDESCRIPTION: This command re-deploys the frontend version of the application while enabling load testing and helm testing features, initiating the canary analysis process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i frontend flagger/podinfo/ \\\n--namespace test \\\n--reuse-values \\\n--set canary.loadtest.enabled=true \\\n--set canary.helmtest.enabled=true \\\n--set image.tag=3.1.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Linear Promotion Weights for Canary Release in YAML\nDESCRIPTION: This snippet introduces a configuration for non-linear promotion weights during a canary deployment. It allows for a defined array of weights that dictate how the traffic will shift over the course of the deployment, enabling greater flexibility in promotion strategies.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# canary.yaml\nspec:\n  analysis:\n    stepWeights: [1, 2, 10, 80]\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing Parameters in YAML for App Mesh\nDESCRIPTION: This snippet provides an example of A/B testing configuration specifically for App Mesh. It demonstrates how to apply conditions for users with specific user-agent headers during canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    interval: 1m\n    threshold: 10\n    iterations: 2\n    match:\n      - headers:\n          user-agent:\n            regex: \".*Chrome.*\"\n```\n\n----------------------------------------\n\nTITLE: Istio Service Configuration\nDESCRIPTION: Complete YAML configuration for exposing a service through Istio with traffic policies and routing rules.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: frontend\n  namespace: test\nspec:\n  service:\n    # container port\n    port: 9898\n    # service port name (optional, will default to \"http\")\n    portName: http-frontend\n    # Istio gateways (optional)\n    gateways:\n    - istio-system/public-gateway\n    - mesh\n    # Istio virtual service host names (optional)\n    hosts:\n    - frontend.example.com\n    # Istio traffic policy\n    trafficPolicy:\n      tls:\n        # use ISTIO_MUTUAL when mTLS is enabled\n        mode: DISABLE\n    # HTTP match conditions (optional)\n    match:\n      - uri:\n          prefix: /\n    # HTTP rewrite (optional)\n    rewrite:\n      uri: /\n    # Istio retry policy (optional)\n    retries:\n      attempts: 3\n      perTryTimeout: 1s\n      retryOn: \"gateway-error,connect-failure,refused-stream\"\n    # Add headers (optional)\n    headers:\n      request:\n        add:\n          x-some-header: \"value\"\n    # cross-origin resource sharing policy (optional)\n    corsPolicy:\n      allowOrigin:\n        - example.com\n      allowMethods:\n        - GET\n      allowCredentials: false\n      allowHeaders:\n        - x-some-header\n      maxAge: 24h\n```\n\n----------------------------------------\n\nTITLE: Defining a MetricTemplate for 404 Percentage\nDESCRIPTION: This snippet defines a MetricTemplate named `not-found-percentage` for Flagger. It uses Prometheus to query the percentage of requests resulting in a 404 error.  The query calculates the ratio of 404 requests to total requests based on Traefik's service request duration metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: not-found-percentage\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.traefik:9090\n  query: |\n    sum(\n      rate(\n        traefik_service_request_duration_seconds_bucket{\n          service=~\"{{ namespace }}-{{ target }}-canary-[0-9a-zA-Z-]+@kubernetescrd\",\n          code!=\"404\",\n        }[{{ interval }}]\n      )\n    )\n    /\n    sum(\n      rate(\n        traefik_service_request_duration_seconds_bucket{\n          service=~\"{{ namespace }}-{{ target }}-canary-[0-9a-zA-Z-]+@kubernetescrd\",\n        }[{{ interval }}]\n      )\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Deployment Configuration\nDESCRIPTION: Applies the Canary custom resource to begin the canary deployment process. This triggers Flagger to create the necessary resources and begin monitoring the deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Metric Template for Latency Analysis in Flagger\nDESCRIPTION: Defines a MetricTemplate resource for measuring request latency using Prometheus queries. This template can be used in canary analysis to validate performance based on HTTP request duration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: latency\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.ingress-nginx:9090\n  query: |\n    histogram_quantile(0.99,\n      sum(\n        rate(\n          http_request_duration_seconds_bucket{\n            kubernetes_namespace=\"{{ namespace }}\",\n            kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n          }[1m]\n        )\n      ) by (le)\n    )\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Command to trigger a canary deployment by updating the container image\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger for Istio Using Helm\nDESCRIPTION: Installs Flagger in the istio-system namespace using Helm, configuring it to work with Istio as the mesh provider and connecting it to a Prometheus metrics server.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-alibaba-servicemesh.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=istio-system \\\n--set crd.create=false \\\n--set meshProvider=istio \\\n--set metricsServer=http://prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Prometheus MetricTemplate for HTTP 404 Error Rate\nDESCRIPTION: Defines a Prometheus MetricTemplate that calculates the percentage of 404 errors. The template uses Istio metrics to calculate the error rate based on destination workload metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: not-found-percentage\n  namespace: istio-system\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.istio-system:9090\n  query: |\n    100 - sum(\n        rate(\n            istio_requests_total{\n              reporter=\"destination\",\n              destination_workload_namespace=\"{{ namespace }}\",\n              destination_workload=\"{{ target }}\",\n              response_code!=\"404\"\n            }[{{ interval }}]\n        )\n    )\n    /\n    sum(\n        rate(\n            istio_requests_total{\n              reporter=\"destination\",\n              destination_workload_namespace=\"{{ namespace }}\",\n              destination_workload=\"{{ target }}\"\n            }[{{ interval }}]\n        )\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing Parameters in YAML for Istio\nDESCRIPTION: This snippet illustrates how to set up A/B testing parameters in Flagger using Istio. It includes match conditions to route a set of users based on HTTP headers or cookies, allowing variable analysis of different application versions during canary testing.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # total number of iterations\n    iterations: 10\n    # max number of failed iterations before rollback\n    threshold: 2\n    # canary match condition\n    match:\n      - headers:\n          x-canary:\n            regex: \".*insider.*\"\n      - headers:\n          cookie:\n            regex: \"^(.*?;)?(canary=always)(;.*)?$\"\n```\n\n----------------------------------------\n\nTITLE: Executing Load Tests for Backend Canary\nDESCRIPTION: These commands allow for simulation of error conditions and latency on the backend canary service to evaluate its resilience and performance under load.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xxx-yyy sh\n\nwatch curl http://backend-canary:9898/status/500\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xxx-yyy sh\n\nwatch curl http://backend-canary:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Limiting Unavailable Pods During Updates - Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to limit the number of unavailable pods during a Kubernetes rolling update by setting `maxUnavailable` to 0. This ensures all pods remain available during updates.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  progressDeadlineSeconds: 120\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Metrics in Flagger Analysis\nDESCRIPTION: Defines the built-in metrics configuration for request success rate and request duration in Flagger. The configuration specifies thresholds and intervals for monitoring these metrics during canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: request-success-rate\n      interval: 1m\n      # minimum req success rate (non 5xx responses)\n      # percentage (0-100)\n      thresholdRange:\n        min: 99\n    - name: request-duration\n      interval: 1m\n      # maximum req duration P99\n      # milliseconds\n      thresholdRange:\n        max: 500\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP 500 Errors with curl\nDESCRIPTION: This bash command uses curl in a loop to continuously send requests that induce HTTP 500 errors to test the canary’s resilience and rollback mechanism. Requires access to the specified service and sufficient Kubernetes privileges to execute the curl command.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Configuring Traffic Mirroring in Flagger\nDESCRIPTION: YAML configuration for traffic mirroring deployment strategy, enabling B/G testing with request duplication and analysis based on success rate and duration metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  service:\n    port: 9898\n    targetPort: 9898\n    hosts:\n     - www.example.com\n    gatewayRefs:\n      - name: gateway\n        namespace: istio-ingress\n  analysis:\n    interval: 1m\n    threshold: 5\n    iterations: 10\n    mirror: true\n    metrics:\n      - name: request-success-rate\n        thresholdRange:\n          min: 99\n        interval: 1m\n      - name: request-duration\n        thresholdRange:\n          max: 500\n        interval: 1m\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 -host www.example.com http://gateway-istio.istio-ingress/\"\n```\n\n----------------------------------------\n\nTITLE: Referencing the Splunk MetricTemplate in Canary Analysis\nDESCRIPTION: This YAML snippet shows how to reference the Splunk MetricTemplate in a Flagger canary analysis configuration. It defines a success rate metric with a threshold range and check interval of 1 minute.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"success rate\"\n        templateRef:\n          name: success-rate\n          namespace: istio-system\n        thresholdRange:\n          max: 99\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Configuring Splunk MetricTemplate in Flagger\nDESCRIPTION: This YAML snippet defines a MetricTemplate for calculating service success rate using Splunk as the provider. It includes the API endpoint, references the authentication secret, and specifies a SignalFlow query that calculates the percentage of successful traces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: success-rate\n  namespace: istio-system\nspec:\n  provider:\n    type: splunk\n    address: https://api.<REALM>.signalfx.com\n    secretRef:\n      name: splunk\n  query: |\n    total = data('traces.count', filter=filter('sf_service', '{{target}}')).sum().publish(enable=False)\n    success = data('traces.count', filter=filter('sf_service', '{{target}}') and filter('sf_error', 'false')).sum().publish(enable=False)\n    ((success/total) * 100).publish()\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Istio with Kustomize\nDESCRIPTION: This command uses Kustomize to install Flagger configured for use with Istio service mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/istio?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Requests and Limits - Kubernetes YAML\nDESCRIPTION: This YAML snippet configures CPU and memory requests and limits in a Kubernetes deployment to ensure stable resource usage, enabling efficient pod scheduling and autoscaling decisions.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      containers:\n      - name: app\n        resources:\n          limits:\n            cpu: 1000m\n            memory: 1Gi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs During A/B Testing\nDESCRIPTION: Command output showing Flagger logs during an A/B testing scenario, demonstrating the progression through analysis iterations.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n gloo-system logs deploy/flagger -f | jq .msg\n\nNew revision detected! Progressing canary analysis for podinfo.test\nAdvance podinfo.test canary iteration 1/10\nAdvance podinfo.test canary iteration 2/10\nAdvance podinfo.test canary iteration 3/10\nAdvance podinfo.test canary iteration 4/10\nAdvance podinfo.test canary iteration 5/10\nAdvance podinfo.test canary iteration 6/10\nAdvance podinfo.test canary iteration 7/10\nAdvance podinfo.test canary iteration 8/10\nAdvance podinfo.test canary iteration 9/10\nAdvance podinfo.test canary iteration 10/10\nCopying podinfo.test template spec to podinfo-primary.test\nWaiting for podinfo-primary.test rollout to finish: 1 of 2 updated replicas are available\nRouting all traffic to primary\nPromotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Setting Termination Grace Period - Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates adding a `preStop` hook to delay pod termination and allow the service mesh to drain traffic. It sets a termination grace period of 60 seconds, ensuring closure of connections.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      terminationGracePeriodSeconds: 60\n      containers:\n      - name: app\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - sleep\n              - \"10\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus MetricTemplate for gRPC Error Rate\nDESCRIPTION: Defines a Prometheus MetricTemplate for monitoring gRPC error rates. This template works with gRPC services instrumented with go-grpc-prometheus and calculates the percentage of non-OK gRPC responses.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: grpc-error-rate-percentage\n  namespace: flagger\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.flagger-system:9090\n  query: |\n    100 - sum(\n        rate(\n            grpc_server_handled_total{\n              grpc_code!=\"OK\",\n              kubernetes_namespace=\"{{ namespace }}\",\n              kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n            }[{{ interval }}]\n        )\n    )\n    /\n    sum(\n        rate(\n            grpc_server_started_total{\n              kubernetes_namespace=\"{{ namespace }}\",\n              kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n            }[{{ interval }}]\n        )\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metrics for Canary Analysis with OSM\nDESCRIPTION: YAML configuration for adding a custom metric to the canary analysis that monitors HTTP 404 error rates. This metric uses Prometheus queries with OSM (Open Service Mesh) metrics to calculate the percentage of 404 responses.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: \"404s percentage\"\n      threshold: 3\n      query: |\n        100 - (\n          sum(\n              rate(\n                  osm_request_total{\n                    destination_namespace=\"test\",\n                    destination_kind=\"Deployment\",\n                    destination_name=\"podinfo\",\n                    response_code!=\"404\"\n                  }[1m]\n              )\n          )\n          /\n          sum(\n              rate(\n                  osm_request_total{\n                    destination_namespace=\"test\",\n                    destination_kind=\"Deployment\",\n                    destination_name=\"podinfo\"\n                  }[1m]\n              )\n          ) * 100\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Custom Resource for Podinfo\nDESCRIPTION: YAML configuration for the Flagger Canary custom resource, specifying the deployment strategy and analysis parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: osm\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  progressDeadlineSeconds: 60\n  service:\n    port: 9898\n    targetPort: 9898\n  analysis:\n    interval: 30s\n    threshold: 5\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        type: rollout\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors\nDESCRIPTION: Command using 'hey' tool to generate HTTP 500 errors for testing canary rollback.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhey -z 1m -c 5 -q 5 -host app.example.com http://apisix-gateway.apisix/status/500\n```\n\n----------------------------------------\n\nTITLE: Defining a KeptnMetric for Response Time Measurement\nDESCRIPTION: This YAML snippet shows how to define a KeptnMetric resource that's referenced by the Flagger MetricTemplate. It configures the metric provider, fetch interval, and the Prometheus query to measure the 80th percentile of HTTP response times.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: metrics.keptn.sh/v1beta1\nkind: KeptnMetric\nmetadata:\n  name: response-time\n  namespace: my-namespace\nspec:\n  fetchIntervalSeconds: 10\n  provider:\n    name: my-prometheus-keptn-provider\n  query: histogram_quantile(0.8, sum by(le) (rate(http_server_request_latency_seconds_bucket{status_code='200',\n    job='simple-go-backend'}[5m[]))))\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Deployment with Flagger in Kubernetes YAML\nDESCRIPTION: This snippet shows how to define a canary deployment using Flagger, including service configuration and port settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  service:\n    # service name (optional)\n    name: podinfo\n    # ClusterIP port number (required)\n    port: 9898\n    # container port name or number\n    targetPort: http\n    # port name can be http or grpc (default http)\n    portName: http\n```\n\n----------------------------------------\n\nTITLE: A/B Testing Canary Configuration\nDESCRIPTION: Complete YAML configuration for A/B testing setup with header and cookie-based routing\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: nginx\n  ingressRef:\n    apiVersion: extensions/v1beta1\n    kind: Ingress\n    name: podinfo\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 9898\n  analysis:\n    interval: 1m\n    threshold: 10\n    iterations: 10\n    match:\n      - headers:\n          x-canary:\n            exact: \"always\"\n      - headers:\n          cookie:\n            exact: \"canary\"\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      thresholdRange:\n        max: 500\n      interval: 30s\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary:9898/token | grep token\"\n      - name: load-test\n        type: rollout\n        url: http://flagger-loadtester.test/\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 -H 'Cookie: canary=always' http://app.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flagger Canary Resource\nDESCRIPTION: YAML configuration for creating a Flagger Canary resource, specifying deployment details, analysis parameters, and webhook configurations.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: nginx\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  ingressRef:\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  progressDeadlineSeconds: 60\n  service:\n    port: 80\n    targetPort: 9898\n  analysis:\n    interval: 10s\n    threshold: 10\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 http://app.example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Installing Istio as Gateway API Implementation\nDESCRIPTION: Installs Istio with a minimal profile and applies the Prometheus addon for metrics collection. Istio serves as the Gateway API implementation for this tutorial.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install --set profile=minimal -y\n\n# Suggestion: Please change release-1.20 in below command, to your real istio version.\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaler - Kubernetes YAML\nDESCRIPTION: This YAML definition sets up a Horizontal Pod Autoscaler to automatically adjust the number of pods in a deployment based on CPU and memory usage, ensuring efficient resource scaling.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: app\n  minReplicas: 2\n  maxReplicas: 4\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      targetAverageValue: 900m\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageValue: 768Mi\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Canary Testing\nDESCRIPTION: A curl command to continuously generate latency for testing Flagger's rollback mechanism.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Creating Metric Template for HTTP Request Duration\nDESCRIPTION: YAML configuration to create a metric template for measuring HTTP requests average duration using Prometheus queries.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: latency\n  namespace: test\nspec:\n  provider:\n    address: http://prometheus-prometheus.monitoring:9090\n    type: prometheus\n  query: |\n    histogram_quantile(0.99,\n      sum(\n        rate(\n          http_request_duration_seconds_bucket{\n            namespace=\"{{ namespace }}\",\n            job=\"{{ target }}-canary\"\n          }[{{ interval }}]\n        )\n      ) by (le)\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in Flagger Metrics Analysis\nDESCRIPTION: Shows how to use template variables in a canary analysis metric configuration. This allows for passing custom variables to the query defined in the MetricTemplate during analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"my metric\"\n        templateRef:\n          name: my-metric\n          namespace: flagger\n        # accepted values\n        thresholdRange:\n          min: 10\n          max: 1000\n        # metric query time window\n        interval: 1m\n        # custom variables used within the referenced metric template\n        templateVariables:\n          direction: inbound\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment in Kubernetes\nDESCRIPTION: Command to update the podinfo deployment image, triggering a canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Resource Configuration for Kuma\nDESCRIPTION: YAML configuration defining a Canary custom resource for the podinfo deployment, specifying traffic routing, analysis metrics, and webhooks in a Kuma service mesh environment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\n  annotations:\n    kuma.io/mesh: default\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  progressDeadlineSeconds: 60\n  service:\n    port: 9898\n    targetPort: 9898\n    apex:\n      annotations:\n        9898.service.kuma.io/protocol: \"http\"\n    canary:\n      annotations:\n        9898.service.kuma.io/protocol: \"http\"\n    primary:\n      annotations:\n        9898.service.kuma.io/protocol: \"http\"\n  analysis:\n    # schedule interval (default 60s)\n    interval: 30s\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 5\n    metrics:\n      - name: request-success-rate\n        threshold: 99\n        interval: 1m\n      - name: request-duration\n        threshold: 500\n        interval: 30s\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        type: rollout\n        url: http://flagger-loadtester.test/\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Alert Provider and Secret\nDESCRIPTION: YAML configuration for setting up a Slack alert provider with optional secret reference for webhook URL or token.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/alerting.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: AlertProvider\nmetadata:\n  name: on-call\n  namespace: flagger\nspec:\n  type: slack\n  channel: on-call-alerts\n  username: flagger\n  # webhook address (ignored if secretRef is specified)\n  # or https://slack.com/api/chat.postMessage if you use token in the secret\n  address: https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\n  # optional http/s proxy\n  proxy: http://my-http-proxy.com\n  # secret containing the webhook address (optional)\n  secretRef:\n    name: on-call-url\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: on-call-url\n  namespace: flagger\ndata:\n  address: <encoded-url>\n  token: <encoded-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing in Flagger\nDESCRIPTION: YAML configuration for setting up A/B testing in Flagger, including HTTP header matching and load testing webhook.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  interval: 1m\n  threshold: 5\n  iterations: 10\n  match:\n  - headers:\n      x-canary:\n        exact: \"insider\"\n  webhooks:\n  - name: load-test\n    url: http://flagger-loadtester.test/\n    metadata:\n      cmd: \"hey -z 1m -q 5 -c 5 -H 'X-Canary: insider' -host app.example.com http://gateway-proxy.gloo-system\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Routing Rules in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows how to configure advanced service settings for a canary deployment, including URI matching, rewriting, retries, and timeouts.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  service:\n    port: 9898\n    match:\n      - uri:\n          prefix: /\n    rewrite:\n      uri: /\n    retries:\n      attempts: 3\n      perTryTimeout: 1s\n    timeout: 5s\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing with HTTP Cookies in YAML\nDESCRIPTION: YAML configuration for cookie-based user targeting in A/B testing with Flagger, including corresponding load test webhook configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    cookie:\n      suffix: \"insider\"\nwebhooks:\n- name: load-test\n  url: http://flagger-loadtester.test/\n  metadata:\n    cmd: \"hey -z 1m -q 5 -c 5 -H 'Cookie: canary=insider' -host app.example.com http://envoy.projectcontour\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Deployment Stickiness in Flagger\nDESCRIPTION: YAML configuration for setting up session affinity with primary deployment stickiness, including cookie configuration for both primary and canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    sessionAffinity:\n      # name of the cookie used\n      cookieName: flagger-cookie\n      # max age of the cookie (in seconds)\n      # optional; defaults to 86400\n      maxAge: 21600\n      # name of the cookie to use for the primary backend\n      # optional; unset means no primary stickiness\n      primaryCookieName: primary-flagger-cookie\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Alerts in Flagger using Helm\nDESCRIPTION: Helm command to configure Flagger with Slack webhook integration for notifications. Supports optional HTTP proxy and custom channel/user settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/alerting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n--set slack.proxy=my-http-proxy.com \\ # optional http/s proxy\n--set slack.channel=general \\\n--set slack.user=flagger \\\n--set clusterName=my-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Templates and Canary Custom Resource\nDESCRIPTION: YAML configuration for creating metrics templates and a canary custom resource. This sets up the metrics to be monitored during canary analysis and defines the canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: success-rate\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.linkerd-viz:9090\n  query: |\n    sum(\n      rate(\n        response_total{\n          namespace=\"{{ namespace }}\",\n          deployment=~\"{{ target }}\",\n          classification!=\"failure\",\n          direction=\"{{ variables.direction }}\"\n        }[{{ interval }}]\n      )\n    ) \n    / \n    sum(\n      rate(\n        response_total{\n          namespace=\"{{ namespace }}\",\n          deployment=~\"{{ target }}\",\n          direction=\"{{ variables.direction }}\"\n        }[{{ interval }}]\n      )\n    ) \n    * 100\n---\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: latency\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.linkerd-viz:9090\n  query: |\n    histogram_quantile(\n        0.99,\n        sum(\n            rate(\n                response_latency_ms_bucket{\n                    namespace=\"{{ namespace }}\",\n                    deployment=~\"{{ target }}\",\n                    direction=\"{{ variables.direction }}\"\n                    }[{{ interval }}]\n                )\n            ) by (le)\n        )\n---\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  # deployment reference\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # HPA reference (optional)\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  service:\n    # ClusterIP port number\n    port: 9898\n    # container port number or name (optional)\n    targetPort: 9898\n    # Reference to the Service that the generated HTTPRoute would attach to.\n    gatewayRefs:\n      - name: podinfo\n        namespace: test\n        group: core\n        kind: Service\n        port: 9898\n  analysis:\n    # schedule interval (default 60s)\n    interval: 30s\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 5\n    # Linkerd Prometheus checks\n    metrics:\n    - name: success-rate\n      templateRef:\n        name: success-rate\n        namespace: test\n      # minimum req success rate (non 5xx responses)\n      # percentage (0-100)\n      thresholdRange:\n        min: 99\n      interval: 1m\n      templateVariables:\n        direction: inbound\n    - name: latency\n      templateRef:\n        name: latency\n        namespace: test\n      # maximum req duration P99\n      # milliseconds\n      thresholdRange:\n        max: 500\n      interval: 30s\n      templateVariables:\n        direction: inbound\n    # testing (optional)\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 30s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        type: rollout\n        url: http://flagger-loadtester.test/\n        metadata:\n          cmd: \"hey -z 2m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Another Canary Deployment\nDESCRIPTION: Command to trigger another canary deployment by updating the podinfo container image to a newer version for testing failure scenarios.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Analysis with Custom Latency Metric in Flagger\nDESCRIPTION: Adds a latency check to the canary analysis configuration using the previously defined metric template. It sets a threshold of 500ms for the average request duration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: \"latency\"\n      templateRef:\n        name: latency\n      thresholdRange:\n        max: 0.5\n      interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Metric Templates for Canary Analysis\nDESCRIPTION: Defines custom metric templates for latency and error rate that will be used in the canary analysis. These templates use PromQL queries to collect metrics from Istio's Envoy proxies.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: latency\n  namespace: flagger-system\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.istio-system:9090\n  query: |\n    histogram_quantile(0.99,\n      sum(\n        rate(\n          istio_request_duration_milliseconds_bucket{\n            reporter=\"source\",\n            destination_workload_namespace=~\"{{ namespace }}\",\n            destination_workload=~\"{{ target }}\",\n          }[{{ interval }}]\n        )\n      ) by (le)\n    )/1000\n---\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: error-rate\n  namespace: flagger-system\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.istio-system:9090\n  query: |\n    100 - sum(\n      rate(\n        istio_requests_total{\n          reporter=\"source\",\n          destination_workload_namespace=~\"{{ namespace }}\",\n          destination_workload=~\"{{ target }}\",\n          response_code!~\"5.*\"\n        }[{{ interval }}]\n      )\n    )\n    /\n    sum(\n      rate(\n        istio_requests_total{\n          reporter=\"source\",\n          destination_workload_namespace=~\"{{ namespace }}\",\n          destination_workload=~\"{{ target }}\",\n        }[{{ interval }}]\n      )\n    )\n    * 100\n```\n\n----------------------------------------\n\nTITLE: Querying Flagger Prometheus Metrics\nDESCRIPTION: Examples of Prometheus metrics exposed by Flagger for monitoring canary deployments. The metrics include version information, canary status, traffic weight, and analysis duration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Flagger version and mesh provider gauge\nflagger_info{version=\"0.10.0\", mesh_provider=\"istio\"} 1\n\n# Canaries total gauge\nflagger_canary_total{namespace=\"test\"} 1\n\n# Canary promotion last known status gauge\n# 0 - running, 1 - successful, 2 - failed\nflagger_canary_status{name=\"podinfo\" namespace=\"test\"} 1\n\n# Canary traffic weight gauge\nflagger_canary_weight{workload=\"podinfo-primary\" namespace=\"test\"} 95\nflagger_canary_weight{workload=\"podinfo\" namespace=\"test\"} 5\n\n# Seconds spent performing canary analysis histogram\nflagger_canary_duration_seconds_bucket{name=\"podinfo\",namespace=\"test\",le=\"10\"} 6\nflagger_canary_duration_seconds_bucket{name=\"podinfo\",namespace=\"test\",le=\"+Inf\"} 6\nflagger_canary_duration_seconds_sum{name=\"podinfo\",namespace=\"test\"} 17.3561329\nflagger_canary_duration_seconds_count{name=\"podinfo\",namespace=\"test\"} 6\n\n# Last canary metric analysis result per different metrics\nflagger_canary_metric_analysis{metric=\"podinfo-http-successful-rate\",name=\"podinfo\",namespace=\"test\"} 1\nflagger_canary_metric_analysis{metric=\"podinfo-custom-metric\",name=\"podinfo\",namespace=\"test\"} 0.918223108974359\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment in Kubernetes\nDESCRIPTION: A kubectl command to update the podinfo container image, triggering a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating Canary Custom Resource\nDESCRIPTION: Defines a Canary custom resource for Flagger, specifying the deployment, analysis parameters, and webhooks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: traefik\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  progressDeadlineSeconds: 60\n  service:\n    port: 80\n    targetPort: 9898\n  analysis:\n    interval: 10s\n    threshold: 10\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      interval: 1m\n      thresholdRange:\n        min: 99\n    - name: request-duration\n      interval: 1m\n      thresholdRange:\n        max: 500\n    webhooks:\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 10s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary.test/token | grep token\"\n      - name: load-test\n        type: rollout\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 10m -q 10 -c 2 -host app.example.com http://traefik.traefik\"\n          logCmdOutput: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Deployments across All Namespaces\nDESCRIPTION: This bash command continuously monitors the status of all canary deployments within all namespaces. It outputs the canary's name, status, weight, and last transition time, providing a comprehensive view. Requires kubectl access to all namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Grafana Dashboard for Canary Analysis\nDESCRIPTION: Command to install Grafana using Helm for monitoring Flagger canary deployments. The dashboard is configured to use a Prometheus data source at the specified URL.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-grafana flagger/grafana \\\n--set url=http://prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Referencing Datadog MetricTemplate in Analysis\nDESCRIPTION: Shows how to reference a Datadog MetricTemplate in a canary analysis. The configuration sets a maximum threshold of 5% for the 404 error rate using Datadog metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"404s percentage\"\n        templateRef:\n          name: not-found-percentage\n          namespace: istio-system\n        thresholdRange:\n          max: 5\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing Parameters in YAML for Contour\nDESCRIPTION: This snippet illustrates how to set the A/B testing configuration within Contour, emphasizing the use of prefix matching for the user-agent header. This ensures specific traffic is routed correctly based on user conditions.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    interval: 1m\n    threshold: 10\n    iterations: 2\n    match:\n      - headers:\n          user-agent:\n            prefix: \"Chrome\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flux HelmRelease for Flagger Installation\nDESCRIPTION: Configures a Flux HelmRelease to install and manage Flagger using the Helm chart from the specified repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-with-flux.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: flagger\n  namespace: flagger-system\nspec:\n  interval: 1h\n  releaseName: flagger\n  install: # override existing Flagger CRDs\n    crds: CreateReplace\n  upgrade: # update Flagger CRDs\n    crds: CreateReplace\n  chart:\n    spec:\n      chart: flagger\n      version: 1.x # update Flagger to the latest minor version\n      interval: 6h # scan for new versions every six hours\n      sourceRef:\n        kind: HelmRepository\n        name: flagger\n      verify: # verify the chart signature with Cosign keyless\n        provider: cosign \n  values:\n    nodeSelector:\n      kubernetes.io/os: linux\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Deployment Configuration\nDESCRIPTION: This YAML configuration defines a Canary resource for Flagger, specifying the deployment strategy, service configuration, and analysis parameters for the canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  annotations:\n    # Enable Envoy access logging to stdout.\n    appmesh.flagger.app/accesslog: enabled\n  name: podinfo\n  namespace: test\nspec:\n  # App Mesh API reference\n  provider: appmesh:v1beta2\n  # deployment reference\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  # HPA reference (optional)\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    # container port\n    port: 9898\n    # App Mesh ingress timeout (optional)\n    timeout: 15s\n    # App Mesh retry policy (optional)\n    retries:\n      attempts: 3\n      perTryTimeout: 5s\n      retryOn: \"gateway-error,client-error,stream-error\"\n    # App Mesh URI settings\n    match:\n      - uri:\n          prefix: /\n    rewrite:\n      uri: /\n  # define the canary analysis timing and KPIs\n  analysis:\n    # schedule interval (default 60s)\n    interval: 1m\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 5\n    # App Mesh Prometheus checks\n    metrics:\n    - name: request-success-rate\n      # minimum req success rate (non 5xx responses)\n      # percentage (0-100)\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      # maximum req duration P99\n      # milliseconds\n      thresholdRange:\n        max: 500\n      interval: 30s\n    # testing (optional)\n    webhooks:\n    - name: acceptance-test\n      type: pre-rollout\n      url: http://flagger-loadtester.test/\n      timeout: 30s\n      metadata:\n        type: bash\n        cmd: \"curl -sd 'test' http://podinfo-canary.test:9898/token | grep token\"\n    - name: load-test\n      url: http://flagger-loadtester.test/\n      timeout: 5s\n      metadata:\n        cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Custom Resource\nDESCRIPTION: Applies the podinfo-canary.yaml resource to initiate the canary analysis as per the definitions provided in the YAML.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Custom Prometheus Metric Template\nDESCRIPTION: YAML configuration for creating a custom metric template that measures HTTP 404 error rates using Prometheus queries.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: not-found-percentage\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.apisix:9090\n  query: |\n    sum(\n      rate(\n        apisix_http_status{\n          route=~\"{{ namespace }}_{{ route }}-{{ target }}-canary_.+\",\n          code!~\"4..\"\n        }[{{ interval }}]\n      )\n    )\n    /\n    sum(\n      rate(\n        apisix_http_status{\n          route=~\"{{ namespace }}_{{ route }}-{{ target }}-canary_.+\"\n        }[{{ interval }}]\n      )\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Custom Resource for Blue/Green Deployment\nDESCRIPTION: This YAML configuration defines a Canary resource that specifies the deployment strategy, metrics, thresholds, and testing hooks for the Blue/Green deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  # service mesh provider can be: kubernetes, istio, appmesh, nginx, gloo\n  provider: kubernetes\n  # deployment reference\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before rollback (default 600s)\n  progressDeadlineSeconds: 60\n  # HPA reference (optional)\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  service:\n    port: 9898\n    portDiscovery: true\n  analysis:\n    # schedule interval (default 60s)\n    interval: 30s\n    # max number of failed checks before rollback\n    threshold: 2\n    # number of checks to run before rollback\n    iterations: 10\n    # Prometheus checks based on \n    # http_request_duration_seconds histogram\n    metrics:\n      - name: request-success-rate\n        # minimum req success rate (non 5xx responses)\n        # percentage (0-100)\n        thresholdRange:\n          min: 99\n        interval: 1m\n      - name: request-duration\n        # maximum req duration P99\n        # milliseconds\n        thresholdRange:\n          max: 500\n        interval: 30s\n    # acceptance/load testing hooks\n    webhooks:\n      - name: smoke-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 15s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'anon' http://podinfo-canary.test:9898/token | grep token\"\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Custom Resource in YAML\nDESCRIPTION: YAML configuration for creating a Canary custom resource for Flagger, specifying deployment strategy, metrics, and webhooks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: skipper\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  ingressRef:\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    name: podinfo\n  autoscalerRef:\n    apiVersion: autoscaling/v2\n    kind: HorizontalPodAutoscaler\n    name: podinfo\n  progressDeadlineSeconds: 60\n  service:\n    port: 80\n    targetPort: 9898\n  analysis:\n    interval: 10s\n    threshold: 10\n    maxWeight: 50\n    stepWeight: 5\n    metrics:\n    - name: request-success-rate\n      interval: 1m\n      thresholdRange:\n        min: 99\n    - name: request-duration\n      interval: 1m\n      thresholdRange:\n        max: 500\n    webhooks:\n      - name: gate\n        type: confirm-rollout\n        url: http://flagger-loadtester.test/gate/approve\n      - name: acceptance-test\n        type: pre-rollout\n        url: http://flagger-loadtester.test/\n        timeout: 10s\n        metadata:\n          type: bash\n          cmd: \"curl -sd 'test' http://podinfo-canary/token | grep token\"\n      - name: load-test\n        type: rollout\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 10m -q 10 -c 2 -host app.example.com http://skipper-ingress.kube-system\"\n          logCmdOutput: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Applying Flagger Canary Resource\nDESCRIPTION: Command to apply the Flagger Canary resource to the Kubernetes cluster after saving it as a YAML file.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Applications\nDESCRIPTION: Commands to deploy the test application and load testing service\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing in Flagger\nDESCRIPTION: This YAML configuration sets up A/B testing using HTTP headers for traffic routing and defines the analysis parameters and load testing webhook.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    interval: 1m\n    threshold: 5\n    iterations: 10\n    match:\n    - headers:\n        x-canary:\n          exact: \"insider\"\n    webhooks:\n    - name: load-test\n      url: http://flagger-loadtester.test/\n      metadata:\n        cmd: \"hey -z 1m -q 10 -c 2 -H 'X-Canary: insider' http://podinfo.test:9898/\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Canary Deployments\nDESCRIPTION: Creates a dedicated namespace and installs Flagger using Helm. Configures Flagger to use Gateway API v1 and sets Prometheus as the metrics server for canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns flagger-system\n\nhelm repo add flagger https://flagger.app\nhelm upgrade -i flagger flagger/flagger \\\n  --namespace flagger-system \\\n  --set prometheus.install=false \\\n  --set meshProvider=gatewayapi:v1 \\\n  --set metricsServer=http://prometheus.istio-system:9090\n```\n\n----------------------------------------\n\nTITLE: Event Payload Structure in JavaScript\nDESCRIPTION: JSON structure of the event payload that Flagger sends to event webhooks. Contains canary name, namespace, phase, checksum, and event-specific metadata including the event message, type, and timestamp.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"string (canary name)\",\n  \"namespace\": \"string (canary namespace)\",\n  \"phase\": \"string (canary phase)\",\n  \"checksum\": \"string (canary checksum\"),\n  \"metadata\": {\n    \"eventMessage\": \"string (canary event message)\",\n    \"eventType\": \"string (canary event type)\",\n    \"timestamp\": \"string (unix timestamp ms)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Retries - Kubernetes YAML\nDESCRIPTION: This YAML configuration for Envoy retries settings in Flagger ensures HTTP requests are retried in case of gateway errors, helping to avoid 503 errors during downscale operations.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nspec:\n  service:\n    port: 9898\n    gateways:\n    - istio-system/public-gateway\n    hosts:\n    - app.example.com\n    retries:\n      attempts: 10\n      perTryTimeout: 5s\n      retryOn: \"gateway-error,connect-failure,refused-stream\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Bats Testing with Flagger\nDESCRIPTION: This YAML configuration demonstrates running acceptance tests using Bats via a pre-rollout webhook. It requires mounting a ConfigMap with Bats tests inside the tester container.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"acceptance tests\"\n      type: pre-rollout\n      url: http://flagger-batstester.default/\n      timeout: 5m\n      metadata:\n        type: \"bash\"\n        cmd: \"bats /tests/acceptance.bats\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flagger Canary Resource\nDESCRIPTION: YAML configuration for a Flagger Canary resource that defines how the canary deployment should be performed, including traffic shifting strategy, analysis metrics, and webhook for load testing.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: apisix\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  # apisix route reference\n  routeRef:\n    apiVersion: apisix.apache.org/v2\n    kind: ApisixRoute\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  service:\n    # ClusterIP port number\n    port: 80\n    # container port number or name\n    targetPort: 9898\n  analysis:\n    # schedule interval (default 60s)\n    interval: 10s\n    # max number of failed metric checks before rollback\n    threshold: 10\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 10\n    # APISIX Prometheus checks\n    metrics:\n      - name: request-success-rate\n        # minimum req success rate (non 5xx responses)\n        # percentage (0-100)\n        thresholdRange:\n          min: 99\n        interval: 1m\n      - name: request-duration\n        # builtin Prometheus check\n        # maximum req duration P99\n        # milliseconds\n        thresholdRange:\n          max: 500\n        interval: 30s\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        type: rollout\n        metadata:\n          cmd: |-\n            hey -z 1m -q 10 -c 2 -h2 -host app.example.com http://apisix-gateway.apisix/api/info\n```\n\n----------------------------------------\n\nTITLE: Applying Flagger Canary Resource in Kubernetes\nDESCRIPTION: A kubectl command to apply the Flagger Canary resource definition to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring ExternalDNS Annotations for Flagger Services\nDESCRIPTION: Demonstrates how to set ExternalDNS annotations for Flagger's generated apex, primary, and canary services. This enables automatic DNS record management for different components of the canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  service:\n    apex:\n      annotations:\n        external-dns.alpha.kubernetes.io/hostname: \"mydomain.com\"\n    primary:\n      annotations:\n        external-dns.alpha.kubernetes.io/hostname: \"primary.mydomain.com\"\n    canary:\n      annotations:\n        external-dns.alpha.kubernetes.io/hostname: \"canary.mydomain.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing in Flagger Canary Analysis\nDESCRIPTION: YAML configuration for setting up A/B testing in Flagger. It defines match conditions based on HTTP headers and cookies, and specifies analysis parameters including iterations and success rate metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    interval: 1m\n    threshold: 10\n    iterations: 10\n    match:\n      # curl -H 'X-Canary: insider' http://app.example.com\n      - headers:\n          x-canary:\n            exact: \"insider\"\n      # curl -b 'canary=always' http://app.example.com\n      - headers:\n          cookie:\n            exact: \"canary\"\n    metrics:\n    - name: request-success-rate\n      thresholdRange:\n        min: 99\n      interval: 1m\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          cmd: \"hey -z 1m -q 10 -c 2 -H 'Cookie: canary=always' http://app.example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metric to Canary Analysis in YAML\nDESCRIPTION: Configures a canary analysis in Flagger to use the defined Prometheus custom metric. The configuration specifies a metric threshold range of 5% for 404 errors, with measurements taken at 1 minute intervals. Required dependencies include a valid Prometheus metric template created previously.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  metrics:\n    - name: \"404s percentage\"\n      templateRef:\n        name: not-found-percentage\n      thresholdRange:\n        max: 5\n      interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: Command to apply the Flagger Canary resource configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceMonitor Objects for Podinfo\nDESCRIPTION: YAML configuration to create ServiceMonitor objects for scraping Podinfo's metrics endpoints for both canary and primary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: podinfo-canary\n  namespace: test\nspec:\n  endpoints:\n  - path: /metrics\n    port: http\n    interval: 5s\n  selector:\n    matchLabels:\n      app: podinfo-canary\n---\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: podinfo-primary\n  namespace: test\nspec:\n  endpoints:\n    - path: /metrics\n      port: http\n      interval: 5s\n  selector:\n    matchLabels:\n      app: podinfo\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Application and Load Tester\nDESCRIPTION: Commands to deploy the test application (podinfo) and a load testing service. These are used to simulate traffic during the canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Defining Canary Resource for TCP Service in Flagger\nDESCRIPTION: This YAML snippet defines a Canary resource for a TCP service, specifically setting the appProtocol to TCP within the service section. This informs Flagger that it's a TCP service and should be handled accordingly when creating the VirtualService document, ensuring proper routing between primary and canary services.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\n# omitted for brevity\nspec:\n  service:\n    port: 7070\n    appProtocol: TCP # <== set the appProtocol here\n    targetPort: 7070\n    portName: \"tcp-service-port\"\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Testing Rollback\nDESCRIPTION: Command to generate artificial latency every second to trigger the latency threshold detection in the canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://podinfo-canary.test:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Metric Template in YAML\nDESCRIPTION: Defines a Prometheus metric template using the Flagger API to monitor not-found (404) HTTP status codes. This custom metric calculates the percentage of 404 errors relative to total requests, for canary analysis purposes. Parameters such as 'namespace', 'target', and 'interval' are templated for dynamic input, and Prometheus is a required dependency.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: not-found-percentage\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.flagger:9090\n  query: |\n    100 - sum(\n        rate(\n            http_request_duration_seconds_count{\n              kubernetes_namespace=\"{{ namespace }}\",\n              kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n              status!=\"{{ interval }}\"\n            }[1m]\n        )\n    )\n    /\n    sum(\n        rate(\n            http_request_duration_seconds_count{\n              kubernetes_namespace=\"{{ namespace }}\",\n              kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n            }[{{ interval }}]\n        )\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Event Webhook\nDESCRIPTION: Command to configure Flagger to send event payloads to a webhook endpoint. This enables external systems to receive notifications about canary deployment events.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--set eventWebhook=https://example.com/flagger-canary-event-webhook\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Notifications and Approvals\nDESCRIPTION: This YAML configuration illustrates how to set up a manual gating webhook in Flagger with the option to disable notifications to services like Slack or MS Teams during a canary rollout.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n    webhooks:\n      - name: \"gate\"\n        type: confirm-rollout\n        url: http://flagger-loadtester.test/gate/approve\n        muteAlert: true\n```\n\n----------------------------------------\n\nTITLE: Defining Flagger Canary Resource for Knative Service in Kubernetes\nDESCRIPTION: A YAML configuration for creating a Flagger Canary resource that defines the canary deployment strategy for the podinfo Knative Service.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: knative\n  # knative service ref\n  targetRef:\n    apiVersion: serving.knative.dev/v1\n    kind: Service\n    name: podinfo\n  # the maximum time in seconds for the canary deployment\n  # to make progress before it is rollback (default 600s)\n  progressDeadlineSeconds: 60\n  analysis:\n    # schedule interval (default 60s)\n    interval: 15s\n    # max number of failed metric checks before rollback\n    threshold: 15\n    # max traffic percentage routed to canary\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 10\n    metrics:\n    - name: request-success-rate\n      # min success rate (non-5xx responses)\n      # percentage (0-100)\n      thresholdRange:\n        min: 99\n      interval: 1m\n    - name: request-duration\n      # milliseconds\n      thresholdRange:\n         max: 500\n      interval: 1m\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 1m -q 5 -c 2 http://podinfo.test\"\n          logCmdOutput: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Applying Ingress Configuration\nDESCRIPTION: Command to apply the Ingress configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Test Pre-Rollout Hook in YAML\nDESCRIPTION: Configures a pre-rollout Helm test hook that calls a deployed Helm tester service before advancing Flagger's canary stages. Setting a retry mechanism if the hook fails with a timeout of 3 minutes. Requires an active Flagger and Helm tester setup.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"conformance testing\"\n      type: pre-rollout\n      url: http://flagger-helmtester.kube-system/\n      timeout: 3m\n      metadata:\n        type: \"helm\"\n        cmd: \"test {{ .Release.Name }} --cleanup\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Annotations and Labels in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to set custom annotations and labels for the services generated by Flagger during a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  service:\n    port: 9898\n    apex:\n      annotations:\n        test: \"test\"\n      labels:\n        test: \"test\"\n    canary:\n      annotations:\n        test: \"test\"\n      labels:\n        test: \"test\"\n    primary:\n      annotations:\n        test: \"test\"\n      labels:\n        test: \"test\"\n```\n\n----------------------------------------\n\nTITLE: Building and deploying custom Flagger image\nDESCRIPTION: Instructions for building a custom Flagger Docker image, pushing it to a registry, and deploying it on a cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake build\ndocker build -t <YOUR-DOCKERHUB-USERNAME>/flagger:<YOUR-TAG> .\ndocker push <YOUR-DOCKERHUB-USERNAME>/flagger:<YOUR-TAG>\n\nkubectl -n istio-system set image deployment/flagger flagger=<YOUR-DOCKERHUB-USERNAME>/flagger:<YOUR-TAG>\nkubectl -n istio-system scale deployment/flagger --replicas=1\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Metric Template for Latency\nDESCRIPTION: Defines a custom Prometheus metric template to measure request latency for canary deployments, using histogram quantile calculation for 99th percentile response times\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: latency\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.flagger-system:9090\n  query: |\n    histogram_quantile(0.99,\n      sum(\n        rate(\n          skipper_serve_route_duration_seconds_bucket{\n            route=~\"{{ printf \\\"kube(ew)?_%s__%s_canary__.*__%s_canary(_[0-9]+)?\\\" namespace ingress service }}\",\n            le=\"+Inf\"\n          }[1m]\n        )\n      ) by (le)\n    )\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Command to update the container image, triggering a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring nGrinder Load Test Delegation in YAML\nDESCRIPTION: YAML configuration for delegating load testing to an external nGrinder server. Includes authentication, test cloning, and polling interval configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  - name: load-test-post\n    url: http://flagger-loadtester.test/\n    timeout: 5s\n    metadata:\n      # type of this load test task, cmd or ngrinder\n      type: ngrinder\n      # base url of your nGrinder controller server\n      server: http://ngrinder-server:port\n      # id of the test to clone from, the test must have been defined.\n      clone: 100\n      # user name and base64 encoded password to authenticate against the nGrinder server\n      username: admin\n      passwd: YWRtaW4=\n      # the interval between between nGrinder test status polling, default to 1s\n      pollInterval: 5s\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: This command updates the Podinfo deployment's container image, triggering a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Flagger Event Webhook JSON Schema\nDESCRIPTION: JSON schema for the event payloads that Flagger sends to configured webhooks. The schema includes canary name, namespace, phase, and metadata about the event.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"string (canary name)\",\n  \"namespace\": \"string (canary namespace)\",\n  \"phase\": \"string (canary phase)\",\n  \"metadata\": {\n    \"eventMessage\": \"string (canary event message)\",\n    \"eventType\": \"string (canary event type)\",\n    \"timestamp\": \"string (unix timestamp ms)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring k6 Webhook for Load Testing\nDESCRIPTION: This YAML snippet demonstrates how to configure a k6 webhook for pre-rollout load testing in a Kubernetes environment using Flagger. The k6 script specifies the number of virtual users, test duration, and performance thresholds, among other options. Dependencies include a configured k6 service and the Flagger setup.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n- name: k6-load-test\n  timeout: 5m\n  type: pre-rollout\n  url: http://k6-loadtester.flagger/launch-test\n  metadata:\n    script: |\n      import http from 'k6/http';\n      import { sleep } from 'k6';\n      export const options = {\n        vus: 2,\n        duration: '30s',\n        thresholds: {\n            http_req_duration: ['p(95)<50']\n        },\n        ext: {\n          loadimpact: {\n            name: '<cluster>/<your_service>',\n            projectID: <project id>,\n          },\n        },\n      };\n\n      export default function () {\n        http.get('http://<your_service>-canary.<namespace>:80/');\n        sleep(0.10);\n      }\n```\n\n----------------------------------------\n\nTITLE: Concord Integration for Flagger Testing\nDESCRIPTION: This YAML snippet sets up a Concord integration test using a pre-rollout webhook in Flagger. It includes metadata configuration for the Concord environment setup including 'org', 'project', 'repo', and authentication key paths.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"concord integration test\"\n      type: pre-rollout\n      url: http://flagger-concordtester.default/\n      timeout: 60s\n      metadata:\n        type: \"concord\"\n        org: \"your-concord-org\"\n        project: \"your-concord-project\"\n        repo: \"your-concord-repo\"\n        entrypoint: \"your-concord-entrypoint\"\n        apiKeyPath: \"/tmp/concord-api-key\"\n        endpoint: \"https://canary-endpoint/\"\n        pollInterval: \"5\"\n        pollTimeout: \"60\"\n```\n\n----------------------------------------\n\nTITLE: Creating Flagger Canary Resource\nDESCRIPTION: YAML configuration for a Flagger Canary resource targeting the podinfo deployment with analysis settings and webhooks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  provider: kubernetes\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: podinfo\n  autoscalerRef:\n    apiVersion: keda.sh/v1alpha1\n    kind: ScaledObject\n    name: podinfo-so\n    primaryScalerQueries:\n      prom-trigger: sum(rate(http_requests_total{ app=\"podinfo-primary\" }[30s]))\n    primaryScalerReplicas:\n      minReplicas: 2\n      maxReplicas: 5\n  progressDeadlineSeconds: 60\n  service:\n    port: 80\n    targetPort: 9898\n    name: podinfo-svc\n    portDiscovery: true\n  analysis:\n    interval: 15s\n    threshold: 5\n    iterations: 5\n    metrics:\n      - name: request-success-rate\n        interval: 1m\n        thresholdRange:\n          min: 99\n      - name: request-duration\n        interval: 30s\n        thresholdRange:\n          max: 500\n    webhooks:\n      - name: load-test\n        url: http://flagger-loadtester.test/\n        timeout: 5s\n        metadata:\n          type: cmd\n          cmd: \"hey -z 2m -q 20 -c 2 http://podinfo-svc-canary.test/\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gateway API CRDs in Kubernetes\nDESCRIPTION: Applies the Gateway API Custom Resource Definitions from the kubernetes-sigs GitHub repository using kubectl. This establishes the foundational Gateway API components required for the deployment strategy.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing with HTTP Headers in YAML\nDESCRIPTION: YAML configuration for A/B testing with Flagger, using HTTP header matching to target specific user segments and configuring load testing webhooks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  interval: 1m\n  threshold: 5\n  iterations: 10\n  match:\n  - headers:\n      x-canary:\n        exact: \"insider\"\n  webhooks:\n  - name: load-test\n    url: http://flagger-loadtester.test/\n    metadata:\n      cmd: \"hey -z 1m -q 5 -c 5 -H 'X-Canary: insider' -host app.example.com http://envoy.projectcontour\"\n```\n\n----------------------------------------\n\nTITLE: Example Istio VirtualService TCP Configuration\nDESCRIPTION: This YAML snippet illustrates the resulting TCP configuration within an Istio VirtualService that Flagger generates when appProtocol is set to TCP in the Canary resource. It demonstrates the weighted routing between the primary and canary services on the specified port, allowing Flagger to manage the traffic split during a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntcp:\n  - route:\n    - destination:\n        host: tcp-service-primary\n        port:\n          number: 7070\n      weight: 100\n    - destination:\n        host: tcp-service-canary\n        port:\n          number: 7070\n      weight: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Load Test in YAML\nDESCRIPTION: YAML configuration for a load test webhook that uses ghz to generate gRPC traffic for testing gRPC services with reflection enabled.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  - name: grpc-load-test\n    url: http://flagger-loadtester.test/\n    timeout: 5s\n    metadata:\n      type: cmd\n      cmd: \"ghz -z 1m -q 10 -c 2 --insecure podinfo.test:9898\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Prometheus Add-on for Kubernetes\nDESCRIPTION: This command installs Flagger and its Prometheus add-on using Helm, configuring it for Kubernetes as the mesh provider.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger flagger/flagger \\\n--namespace flagger \\\n--set prometheus.install=true \\\n--set meshProvider=kubernetes\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment in Kubernetes\nDESCRIPTION: This command updates the image of a deployment to trigger a canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Success Rate Analysis in YAML\nDESCRIPTION: YAML configuration for setting up request success rate analysis with minimum threshold percentage requirement.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: request-success-rate\n      # minimum req success rate (non 5xx responses)\n      # percentage (0-100)\n      thresholdRange:\n        min: 99\n      interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Service in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows how to configure the service for a canary deployment, including port settings, discovery, and protocol options.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  service:\n    name: podinfo\n    port: 9898\n    portName: http\n    appProtocol: http\n    targetPort: 9898\n    portDiscovery: true\n    headless: false\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs During A/B Testing\nDESCRIPTION: Command to stream and format Flagger logs showing the progression of the A/B testing canary deployment process through its iterations.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n projectcontour logs deploy/flagger -f | jq .msg\n\nNew revision detected! Progressing canary analysis for podinfo.test\nAdvance podinfo.test canary iteration 1/10\nAdvance podinfo.test canary iteration 2/10\nAdvance podinfo.test canary iteration 3/10\nAdvance podinfo.test canary iteration 4/10\nAdvance podinfo.test canary iteration 5/10\nAdvance podinfo.test canary iteration 6/10\nAdvance podinfo.test canary iteration 7/10\nAdvance podinfo.test canary iteration 8/10\nAdvance podinfo.test canary iteration 9/10\nAdvance podinfo.test canary iteration 10/10\nCopying podinfo.test template spec to podinfo-primary.test\nWaiting for podinfo-primary.test rollout to finish: 1 of 2 updated replicas are available\nRouting all traffic to primary\nPromotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Datadog MetricTemplate for HTTP 404 Error Rate\nDESCRIPTION: Defines a Datadog MetricTemplate that calculates the percentage of 404 errors. The template uses Datadog query syntax to calculate the error rate based on Istio metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: not-found-percentage\n  namespace: istio-system\nspec:\n  provider:\n    type: datadog\n    address: https://api.datadoghq.com\n    secretRef:\n      name: datadog\n  query: |\n    100 - (\n      sum:istio.mesh.request.count{\n        reporter:destination,\n        destination_workload_namespace:{{ namespace }},\n        destination_workload:{{ target }},\n        !response_code:404\n      }.as_count()\n      / \n      sum:istio.mesh.request.count{\n        reporter:destination,\n        destination_workload_namespace:{{ namespace }},\n        destination_workload:{{ target }}\n      }.as_count()\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Delay Envoy Shutdown - Bash Script\nDESCRIPTION: This Bash script is designed to delay the shutdown of the Envoy sidecar until all application processes have terminated, preventing premature connection failures.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -e\nif ! pidof envoy &>/dev/null; then\n  exit 0\nfi\n\nif ! pidof pilot-agent &>/dev/null; then\n  exit 0\nfi\n\nwhile [ $(netstat -plunt | grep tcp | grep -v envoy | wc -l | xargs) -ne 0 ]; do\n  sleep 1;\ndone\n\nexit 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Port Application Deployment in Kubernetes YAML\nDESCRIPTION: This example shows how to configure a deployment that exposes multiple ports, which can be used with Flagger's port discovery feature.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"9899\"\n    spec:\n      containers:\n      - name: app\n        ports:\n        - containerPort: 8080\n        - containerPort: 9090\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger using Helm\nDESCRIPTION: Commands to add the Flagger Helm repository and install Flagger with Prometheus and Kubernetes provider enabled.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nkubectl create namespace flagger\nhelm upgrade -i flagger flagger/flagger \\\n--namespace flagger \\\n--set prometheus.install=true \\\n--set meshProvider=kubernetes\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Structure in JavaScript\nDESCRIPTION: JSON structure of the webhook payload that Flagger sends via HTTP POST requests. Includes canary name, namespace, phase, checksum, and metadata that can be used by webhook receivers to identify the specific canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"podinfo\",\n  \"namespace\": \"test\",\n  \"phase\": \"Progressing\",\n  \"checksum\": \"85d557f47b\",\n  \"metadata\": {\n    \"test\":  \"all\",\n    \"token\":  \"16688eb5e9f289f1991c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Gateway for TCP Service\nDESCRIPTION: This YAML snippet configures an Istio Gateway to support TCP routing. The key configuration is setting the protocol to TCP within the server's port configuration. This tells Istio to handle traffic on port 7070 as TCP, which is necessary for canary deployments of TCP services with Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: public-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n    - port:\n        number: 7070\n        name: tcp-service\n        protocol: TCP # <== set the protocol to tcp here\n      hosts:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Ingress Controller with Helm\nDESCRIPTION: Commands to add the NGINX ingress Helm repository and install the ingress controller with specific configurations for metrics and Prometheus scraping.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nkubectl create ns ingress-nginx\nhelm upgrade -i ingress-nginx ingress-nginx/ingress-nginx \\\n--namespace ingress-nginx \\\n--set controller.metrics.enabled=true \\\n--set controller.podAnnotations.\"prometheus\\.io/scrape\"=true \\\n--set controller.podAnnotations.\"prometheus\\.io/port\"=10254\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Operator with Helm\nDESCRIPTION: Commands to add the Prometheus community Helm repository and install Prometheus Operator in the monitoring namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\nkubectl create ns monitoring\nhelm upgrade -i prometheus prometheus-community/kube-prometheus-stack \\\n--namespace monitoring \\\n--set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \\\n--set fullnameOverride=prometheus\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metric to Canary Analysis in Flagger\nDESCRIPTION: YAML snippet showing how to add a custom metric to the canary analysis configuration in Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"404s percentage\"\n        templateRef:\n          name: not-found-percentage\n        thresholdRange:\n          max: 5\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Request Duration Configuration in YAML\nDESCRIPTION: YAML configuration for setting up P99 request duration analysis with maximum threshold.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: request-duration\n      # maximum req duration P99\n      # milliseconds\n      thresholdRange:\n        max: 500\n      interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Waiting for Canary Promotion with kubectl Bash Command\nDESCRIPTION: This Bash command uses kubectl to wait for a specific canary deployment to reach the 'promoted' condition.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait canary/podinfo --for=condition=promoted\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs for Custom Metrics Analysis\nDESCRIPTION: Example output of Flagger logs showing the canary deployment process and eventual rollback due to the 404 error rate exceeding the configured threshold of 3%.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n osm-system logs deployment/flagger -f | jq .msg\n\nStarting canary deployment for podinfo.test\nPre-rollout check acceptance-test passed\nAdvance podinfo.test canary weight 5\nHalt podinfo.test advancement 404s percentage 6.20 > 3\nHalt podinfo.test advancement 404s percentage 6.45 > 3\nHalt podinfo.test advancement 404s percentage 7.22 > 3\nHalt podinfo.test advancement 404s percentage 6.50 > 3\nHalt podinfo.test advancement 404s percentage 6.34 > 3\nRolling back podinfo.test failed checks threshold reached 5\nCanary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Load Test without Reflection in YAML\nDESCRIPTION: YAML configuration for a load test webhook that uses ghz to generate gRPC traffic for services without reflection enabled, using a health check schema.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  - name: grpc-load-test-no-reflection\n    url: http://flagger-loadtester.test/\n    timeout: 5s\n    metadata:\n      type: cmd\n      cmd: \"ghz --insecure --proto=/tmp/ghz/health.proto --call=grpc.health.v1.Health/Check podinfo.test:9898\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Kustomization File for Customized Flagger Installation\nDESCRIPTION: This command creates a kustomization.yaml file that uses Flagger as a base and adds patches for customization. It demonstrates how to modify deployment arguments to add Slack notifications.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat > kustomization.yaml <<EOF\nnamespace: istio-system\nbases:\n  - github.com/fluxcd/flagger/kustomize/base/flagger\npatches:\n- target:\n    kind: Deployment\n    name: flagger\n  patch: |-\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: flagger\n    spec:\n      template:\n        spec:\n          containers:\n          - name: flagger\n            args:\n              - -mesh-provider=istio\n              - -metrics-server=http://prometheus.istio-system:9090\n              - -slack-user=flagger\n              - -slack-channel=alerts\n              - -slack-url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Analysis with Latency Threshold\nDESCRIPTION: Adds a latency metric check to the canary analysis, setting a maximum threshold of 500ms for request duration, which will trigger a rollback if exceeded\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: \"latency\"\n      templateRef:\n        name: latency\n      thresholdRange:\n        max: 0.5\n      interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger with Existing Prometheus Instance\nDESCRIPTION: This command installs Flagger and configures it to use an existing Prometheus instance in the cluster by pointing to its ClusterIP service.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace flagger \\\n--set metricsServer=http://prometheus.monitoring:9090\n```\n\n----------------------------------------\n\nTITLE: Configuring External Load Test with HTTP2 in YAML\nDESCRIPTION: YAML configuration for a load test webhook that targets a public URL using HTTP2. Useful when the workload is exposed outside the service mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwebhooks:\n  - name: load-test-get\n    url: http://flagger-loadtester.test/\n    timeout: 5s\n    metadata:\n      type: cmd\n      cmd: \"hey -z 1m -q 10 -c 2 -h2 https://podinfo.example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Revert on Deletion for Canary Resources\nDESCRIPTION: This YAML specification sets the 'revertOnDeletion' attribute to true, enabling Flagger to revert certain resources to their initial states upon deletion of the canary. This helps in maintaining resource integrity when canaries are removed.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  revertOnDeletion: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Slack Notifications for Flagger\nDESCRIPTION: This command configures Flagger to send notifications to a Slack channel when deployment events occur, using the existing values while adding Slack configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--reuse-values \\\n--namespace flagger \\\n--set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n--set slack.channel=general \\\n--set slack.user=flagger\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Teams Alerts in Flagger\nDESCRIPTION: Helm command to set up Microsoft Teams webhook integration for Flagger notifications with optional proxy support.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/alerting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--set msteams.url=https://outlook.office.com/webhook/YOUR/TEAMS/WEBHOOK \\\n--set msteams.proxy-url=my-http-proxy.com # optional http/s proxy\n```\n\n----------------------------------------\n\nTITLE: Querying Canary Status with kubectl Bash Command\nDESCRIPTION: This Bash command uses kubectl to retrieve the status of all canary deployments across all namespaces in a Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Istio and Prometheus\nDESCRIPTION: Commands to install Istio with telemetry support and Prometheus monitoring\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nistioctl manifest install --set profile=default\n\n# Suggestion: Please change release-1.8 in below command, to your real istio version.\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.18/samples/addons/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Manual Gating with Flagger\nDESCRIPTION: This YAML snippet shows how to use a confirm-rollout webhook type in Flagger for manual approval of canary deployments. The URL specifies a gating endpoint which determines the progression of the canary based on HTTP status responses.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"gate\"\n      type: confirm-rollout\n      url: http://flagger-loadtester.test/gate/halt\n```\n\n----------------------------------------\n\nTITLE: Configuring Canary Analysis Alerts\nDESCRIPTION: YAML configuration showing how to set up multiple alerts with different severity levels and providers for canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/alerting.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    alerts:\n      - name: \"on-call Slack\"\n        severity: error\n        providerRef:\n          name: on-call\n          namespace: flagger\n      - name: \"qa Discord\"\n        severity: warn\n        providerRef:\n          name: qa-discord\n      - name: \"dev MS Teams\"\n        severity: info\n        providerRef:\n          name: dev-msteams\n```\n\n----------------------------------------\n\nTITLE: Triggering A/B Test Canary Deployment\nDESCRIPTION: Command to update the podinfo deployment to a new version, which will trigger the A/B testing process configured in Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.3\n```\n\n----------------------------------------\n\nTITLE: Integrating Metric into Canary Analysis\nDESCRIPTION: This snippet demonstrates how to integrate the `not-found-percentage` MetricTemplate into a Flagger canary analysis configuration. It specifies a metric named \"404s percentage\", references the template, sets a maximum threshold of 5, and defines an evaluation interval of 1 minute.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n      - name: \"404s percentage\"\n        templateRef:\n          name: not-found-percentage\n        thresholdRange:\n          max: 5\n        interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Knative in Kubernetes\nDESCRIPTION: A kubectl command to install Flagger in the flagger-system namespace using kustomize.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/fluxcd/flagger//kustomize/knative\n```\n\n----------------------------------------\n\nTITLE: Interacting with Flagger Tester API via Bash\nDESCRIPTION: This Bash snippet demonstrates how to interact with the Flagger tester API to manage canary rollouts, allowing opening or closing gates for rollout using cURL commands.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xxxx-xxxx sh\n\ncurl -d '{\"name\": \"podinfo\",\"namespace\":\"test\"}' http://localhost:8080/gate/open\n```\n\n----------------------------------------\n\nTITLE: Configuring User Agent-Based Routing in Flagger\nDESCRIPTION: YAML snippets showing how to configure Flagger for routing based on user agent headers, targeting mobile, Android, or specific browser versions.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    user-agent:\n      regex: \".*Mobile.*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    user-agent:\n      regex: \".*Android.*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    user-agent:\n      regex: \".*Firefox.*\"\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace with App Mesh Sidecar Injection\nDESCRIPTION: This code creates a test namespace in Kubernetes and enables App Mesh sidecar injection for it using labels.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: test\n  labels:\n    appmesh.k8s.aws/sidecarInjectorWebhook: enabled\nEOF\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Weights with kubectl\nDESCRIPTION: This bash command uses kubectl to watch changes in HTTPRoute rules, displaying the specifications related to canary weight progression in Flagger. It provides continuous monitoring, requiring kubectl access and the appropriate privileges to access the specified namespace and HTTPRoute object.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get httproute -n test podinfo -o=jsonpath='{.spec.rules}'\n```\n\n----------------------------------------\n\nTITLE: Install Flux and Helm Operator\nDESCRIPTION: This bash script installs Flux and the Helm Operator using Helm. It configures the Git repository URL and sets up the SSH secret for secure access. This allows Flux to synchronize the cluster state with the Git repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add fluxcd https://charts.fluxcd.io\n\nhelm install --name flux \\\n--set git.url=git@github.com:<USERNAME>/<REPOSITORY> \\\n--namespace fluxcd \\\nfluxcd/flux\n\nhelm upgrade -i helm-operator fluxcd/helm-operator \\\n--namespace fluxcd \\\n--set git.ssh.secretName=flux-git-deploy\n```\n\n----------------------------------------\n\nTITLE: Triggering A/B Testing Canary Deployment\nDESCRIPTION: Command to update the container image of the podinfo deployment, which initiates the A/B testing process configured in Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.4\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Success of a Canary Version\nDESCRIPTION: This command retrieves the status of a canary deployment and filters the output to check if the deployment has succeeded. It ensures that the deployment process completed without errors.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get canary/podinfo | grep Succeeded\n```\n\n----------------------------------------\n\nTITLE: Using Helm Test Webhook for Canary Analysis\nDESCRIPTION: This YAML snippet configures a pre-rollout webhook for Helm tests in a Flagger canary analysis process. It specifies the test command using Helm v3, requiring a dedicated service account and the release namespace in the configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"smoke test\"\n      type: pre-rollout\n      url: http://flagger-helmtester.kube-system/\n      timeout: 3m\n      metadata:\n        type: \"helmv3\"\n        cmd: \"test {{ .Release.Name }} --timeout 3m -n {{ .Release.Namespace }}\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment with Kubernetes\nDESCRIPTION: Command to trigger a canary deployment by updating the podinfo container image to version 6.0.2, which will initiate Flagger's canary analysis process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe - Kubernetes YAML\nDESCRIPTION: This YAML configuration sets up a liveness probe using an HTTP endpoint with `wget` executed as an `exec` command. It ensures that Kubernetes can determine if the app is in a broken state that requires a restart.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  exec:\n    command:\n    - wget\n    - --quiet\n    - --tries=1\n    - --timeout=4\n    - --spider\n    - http://localhost:8080/healthz\n  timeoutSeconds: 5\n  initialDelaySeconds: 5\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment and HPA for Canary Testing\nDESCRIPTION: Command to create a deployment and a horizontal pod autoscaler for the podinfo application, which will be used as the test subject for canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Manual Rollback with Flagger\nDESCRIPTION: This YAML snippet configures a rollback webhook type in Flagger, allowing manual rollback through a specified endpoint. The snippet includes setting the rollback status via interaction with an API endpoint.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"rollback\"\n      type: rollback\n      url: http://flagger-loadtester.test/rollback/check\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing Parameters in YAML for NGINX\nDESCRIPTION: This snippet demonstrates NGINX-specific A/B testing parameters, including conditions for exact matching of headers and cookies. It is tailored for the specific needs of the NGINX ingress controller in deploying canary releases.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    interval: 1m\n    threshold: 10\n    iterations: 2\n    match:\n      - headers:\n          x-canary:\n            exact: \"insider\"\n      - headers:\n          cookie:\n            exact: \"canary\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Prometheus as Metrics Server\nDESCRIPTION: Commands to add the Flagger Helm repository and install Flagger in the flagger-system namespace, configuring Prometheus as the metrics server.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nkubectl create ns flagger-system\nhelm upgrade -i flagger flagger/flagger \\\n--namespace flagger-system \\\n--set metricsServer=http://prometheus-prometheus.monitoring:9090 \\\n--set meshProvider=kubernetes\n```\n\n----------------------------------------\n\nTITLE: Deploying Application and Autoscaler\nDESCRIPTION: Deploys an application along with a horizontal pod autoscaler using Kustomize.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Viewing Canary Deployment Status and Events\nDESCRIPTION: Sample output of the kubectl describe command showing the status, conditions, and events of the canary deployment process, including weight changes and promotion steps.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Canary Weight:  0\n  Conditions:\n    Message:               Canary analysis completed successfully, promotion finished.\n    Reason:                Succeeded\n    Status:                True\n    Type:                  Promoted\n  Failed Checks:           1\n  Iterations:              0\n  Phase:                   Succeeded\n\nEvents:\n  Type     Reason  Age                    From     Message\n  ----     ------  ----                   ----     -------\n  Warning  Synced  2m59s                  flagger  podinfo-primary.test not ready: waiting for rollout to finish: observed deployment generation less than desired generation\n  Warning  Synced  2m50s                  flagger  podinfo-primary.test not ready: waiting for rollout to finish: 0 of 1 (readyThreshold 100%) updated replicas are available\n  Normal   Synced  2m40s (x3 over 2m59s)  flagger  all the metrics providers are available!\n  Normal   Synced  2m39s                  flagger  Initialization done! podinfo.test\n  Normal   Synced  2m20s                  flagger  New revision detected! Scaling up podinfo.test\n  Warning  Synced  2m (x2 over 2m10s)     flagger  canary deployment podinfo.test not ready: waiting for rollout to finish: 0 of 1 (readyThreshold 100%) updated replicas are available\n  Normal   Synced  110s                   flagger  Starting canary analysis for podinfo.test\n  Normal   Synced  109s                   flagger  Advance podinfo.test canary weight 10\n  Warning  Synced  100s                   flagger  Halt advancement no values found for apisix metric request-success-rate probably podinfo.test is not receiving traffic: running query failed: no values found\n  Normal   Synced  90s                    flagger  Advance podinfo.test canary weight 20\n  Normal   Synced  80s                    flagger  Advance podinfo.test canary weight 30\n  Normal   Synced  69s                    flagger  Advance podinfo.test canary weight 40\n  Normal   Synced  59s                    flagger  Advance podinfo.test canary weight 50\n  Warning  Synced  30s (x2 over 40s)      flagger  podinfo-primary.test not ready: waiting for rollout to finish: 1 old replicas are pending termination\n  Normal   Synced  9s (x3 over 50s)       flagger  (combined from similar events): Promotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication Secret for Prometheus\nDESCRIPTION: Creates a Kubernetes Secret containing a bearer token for authentication with Prometheus. This approach uses a service account token for API authentication.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: prom-auth\n  namespace: flagger\ndata:\n  token: ey1234...\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 404 Errors for Custom Metrics Testing\nDESCRIPTION: Continuously sends HTTP 404 error requests to the canary service to test Flagger's custom metrics analysis for 404 error rates.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 0.1 curl http://podinfo-canary.test:9898/status/404\n```\n\n----------------------------------------\n\nTITLE: Defining Flagger Namespace in Kubernetes YAML\nDESCRIPTION: Creates a Kubernetes namespace for Flagger installation with appropriate labels.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-with-flux.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: flagger-system\n  labels:\n    toolkit.fluxcd.io/tenant: sre-team\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Resource Configuration\nDESCRIPTION: This bash command applies the previously defined Canary resource YAML file to the Kubernetes cluster, initiating the session affinity and deployment strategy configuration. The command requires the YAML file path and kubectl access with permissions to apply changes in the test namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary-session-affinity.yaml\n```\n\n----------------------------------------\n\nTITLE: Triggering a Deployment Using kubectl in Bash\nDESCRIPTION: Issues a command to update the 'podinfo' deployment in the 'test' namespace with a specified container image version using kubectl. It requires Kubernetes CLI tools configured with appropriate cluster permissions.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Anti-Affinity for Canary Deployments\nDESCRIPTION: This example demonstrates how to configure pod anti-affinity in a deployment, which Flagger will respect when creating the primary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: podinfo\nspec:\n  selector:\n    matchLabels:\n      app: podinfo\n  template:\n    metadata:\n      labels:\n        app: podinfo\n    spec:\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                    - podinfo\n              topologyKey: topology.kubernetes.io/zone\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace and Deploying Podinfo\nDESCRIPTION: Commands to create a test namespace and deploy the podinfo application.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl apply -n test -f https://raw.githubusercontent.com/fluxcd/flagger/main/kustomize/podinfo/deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger and Prometheus for Generic Kubernetes using Kustomize\nDESCRIPTION: This command installs Flagger with Prometheus for generic Kubernetes usage. It deploys both in the flagger-system namespace and sets the provider to kubernetes for Blue/Green style deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/kubernetes?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Canary Deployment Status Output\nDESCRIPTION: Example output showing the status and events of a canary deployment rollout.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Failed Checks:         0\n  Phase:                 Succeeded\nEvents:\n  Type     Reason  Age   From     Message\n  ----     ------  ----  ----     -------\n  Normal   Synced  3m    flagger  New revision detected podinfo.test\n  Normal   Synced  3m    flagger  Scaling up podinfo.test\n  Warning  Synced  3m    flagger  Waiting for podinfo.test rollout to finish: 0 of 1 updated replicas are available\n  Normal   Synced  3m    flagger  Advance podinfo.test canary iteration 1/10\n  Normal   Synced  3m    flagger  Advance podinfo.test canary iteration 2/10\n  Normal   Synced  3m    flagger  Advance podinfo.test canary iteration 3/10\n  Normal   Synced  2m    flagger  Advance podinfo.test canary iteration 4/10\n  Normal   Synced  2m    flagger  Advance podinfo.test canary iteration 5/10\n  Normal   Synced  1m    flagger  Advance podinfo.test canary iteration 6/10\n  Normal   Synced  1m    flagger  Advance podinfo.test canary iteration 7/10\n  Normal   Synced  55s   flagger  Advance podinfo.test canary iteration 8/10\n  Normal   Synced  45s   flagger  Advance podinfo.test canary iteration 9/10\n  Normal   Synced  35s   flagger  Advance podinfo.test canary iteration 10/10\n  Normal   Synced  25s   flagger  Copying podinfo.test template spec to podinfo-primary.test\n  Warning  Synced  15s   flagger  Waiting for podinfo-primary.test rollout to finish: 1 of 2 updated replicas are available\n  Normal   Synced  5s    flagger  Promotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: Add the official Flagger Helm repository to enable installation of Flagger components via Helm package manager\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add flagger https:\\/\\/flagger.app\n```\n\n----------------------------------------\n\nTITLE: Applying Customized Flagger Installation with Slack Notifications\nDESCRIPTION: This command builds the customized Kustomize configuration and applies it to the cluster, installing Flagger for Istio with Slack notifications enabled.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build . | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Viewing Failed Canary Deployment Status\nDESCRIPTION: Sample output showing the status and events of a failed canary deployment, with automated rollback after exceeding failure thresholds.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Canary Weight:         0\n  Failed Checks:         10\n  Phase:                 Failed\nEvents:\n Starting canary analysis for podinfo.test\n Pre-rollout check acceptance-test passed\n Advance podinfo.test canary weight 5\n Advance podinfo.test canary weight 10\n Advance podinfo.test canary weight 15\n Halt podinfo.test advancement success rate 69.17% < 99%\n Halt podinfo.test advancement success rate 61.39% < 99%\n Halt podinfo.test advancement success rate 55.06% < 99%\n Halt podinfo.test advancement request duration 1.20s > 0.5s\n Halt podinfo.test advancement request duration 1.45s > 0.5s\n Rolling back podinfo.test failed checks threshold reached 5\n Canary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Viewing Canary Deployment Status in Kubernetes\nDESCRIPTION: Kubectl command output showing the status of a failed canary deployment, including weight, checks, and events.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Canary Weight:         0\n  Failed Checks:         10\n  Phase:                 Failed\nEvents:\n  Type     Reason  Age   From     Message\n  ----     ------  ----  ----     -------\n  Normal   Synced  3m    flagger  Starting canary deployment for podinfo.test\n  Normal   Synced  3m    flagger  Advance podinfo.test canary weight 5\n  Normal   Synced  3m    flagger  Advance podinfo.test canary weight 10\n  Normal   Synced  3m    flagger  Advance podinfo.test canary weight 15\n  Normal   Synced  3m    flagger  Halt podinfo.test advancement success rate 69.17% < 99%\n  Normal   Synced  2m    flagger  Halt podinfo.test advancement success rate 61.39% < 99%\n  Normal   Synced  2m    flagger  Halt podinfo.test advancement success rate 55.06% < 99%\n  Normal   Synced  2m    flagger  Halt podinfo.test advancement success rate 47.00% < 99%\n  Normal   Synced  2m    flagger  (combined from similar events): Halt podinfo.test advancement success rate 38.08% < 99%\n  Warning  Synced  1m    flagger  Rolling back podinfo.test failed checks threshold reached 10\n  Warning  Synced  1m    flagger  Canary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Deployments\nDESCRIPTION: Command to watch and monitor the status of all canary deployments across namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration in Kubernetes\nDESCRIPTION: Command to apply the podinfo-canary.yaml file, which contains the metrics templates and canary custom resource configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger's Canary CRD\nDESCRIPTION: This command applies the Flagger Canary Custom Resource Definition (CRD) to your Kubernetes cluster, which is required for Flagger to function.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/fluxcd/flagger/main/artifacts/flagger/crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Linkerd, Linkerd Viz, Linkerd-SMI, and Flagger using Helm\nDESCRIPTION: Helm commands to install Linkerd, Linkerd Viz, Linkerd-SMI, and Flagger. This is an alternative installation method using Helm charts instead of direct kubectl commands.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add linkerd https://helm.linkerd.io/stable\nhelm install linkerd-crds linkerd/linkerd-crds -n linkerd --create-namespace\n# See https://linkerd.io/2/tasks/generate-certificates/ for how to generate the\n# certs referred below\nhelm install linkerd-control-plane linkerd/linkerd-control-plane \\\n  -n linkerd \\\n  --set-file identityTrustAnchorsPEM=ca.crt \\\n  --set-file identity.issuer.tls.crtPEM=issuer.crt \\\n  --set-file identity.issuer.tls.keyPEM=issuer.key \\\n\nhelm install linkerd-viz linkerd/linkerd-viz -n linkerd-viz --create-namespace\n\nhelm install flagger flagger/flagger \\\n  --n flagger-system \\\n  --set meshProvider=gatewayapi:v1beta1 \\\n  --set metricsServer=http://prometheus.linkerd-viz:9090 \\\n  --set linkerdAuthPolicy.create=true\n```\n\n----------------------------------------\n\nTITLE: Custom Metrics Configuration\nDESCRIPTION: YAML configuration for adding custom Prometheus metrics to monitor 404 errors\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    metrics:\n    - name: \"404s percentage\"\n      threshold: 3\n      query: |\n        100 - sum(\n            rate(\n                response_total{\n                    namespace=\"test\",\n                    deployment=\"podinfo\",\n                    status_code!=\"404\",\n                    direction=\"inbound\"\n                }[1m]\n            )\n        )\n        /\n        sum(\n            rate(\n                response_total{\n                    namespace=\"test\",\n                    deployment=\"podinfo\",\n                    direction=\"inbound\"\n                }[1m]\n            )\n        )\n        * 100\n```\n\n----------------------------------------\n\nTITLE: Monitoring Flagger Canaries in Kubernetes\nDESCRIPTION: A kubectl command to watch the status of all Flagger canaries across all namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace\nDESCRIPTION: Commands to create and configure a test namespace with Istio sidecar injection\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl label namespace test istio-injection=enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Flux HelmRepository for Flagger Charts\nDESCRIPTION: Defines a Flux HelmRepository resource pointing to the OCI registry containing Flagger Helm charts.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-with-flux.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmRepository\nmetadata:\n  name: flagger\n  namespace: flagger-system\nspec:\n  interval: 1h\n  url: oci://ghcr.io/fluxcd/charts\n  type: oci\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Canary Deployment Logs\nDESCRIPTION: Command to retrieve and format the logs from Flagger's deployment. The logs are filtered and formatted using jq to display canary deployment progression messages.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n istio-system logs deployment/flagger --tail=100 | jq .msg\n\nStarting canary deployment for podinfo.test\nAdvance podinfo.test canary weight 5\nAdvance podinfo.test canary weight 10\nAdvance podinfo.test canary weight 15\nAdvance podinfo.test canary weight 20\nAdvance podinfo.test canary weight 25\nAdvance podinfo.test canary weight 30\nAdvance podinfo.test canary weight 35\nHalt podinfo.test advancement success rate 98.69% < 99%\nAdvance podinfo.test canary weight 40\nHalt podinfo.test advancement request duration 1.515s > 500ms\nAdvance podinfo.test canary weight 45\nAdvance podinfo.test canary weight 50\nCopying podinfo.test template spec to podinfo-primary.test\nHalt podinfo-primary.test advancement waiting for rollout to finish: 1 old replicas are pending termination\nScaling down podinfo.test\nPromotion completed! podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canaries\nDESCRIPTION: Command to watch and monitor all canaries across namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Helm for Custom OSM Setup\nDESCRIPTION: Helm command to install Flagger in a custom namespace with specific OSM and Prometheus settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=<osm-namespace> \\\n--set meshProvider=osm \\\n--set metricsServer=http://osm-prometheus.<osm-namespace>.svc:7070\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs During A/B Testing\nDESCRIPTION: This command displays the Flagger logs, showing the progression of an A/B test from detection to promotion.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n appmesh-system logs deploy/flagger -f | jq .msg\n\nNew revision detected! progressing canary analysis for podinfo.test\nAdvance podinfo.test canary iteration 1/10\nAdvance podinfo.test canary iteration 2/10\nAdvance podinfo.test canary iteration 3/10\nAdvance podinfo.test canary iteration 4/10\nAdvance podinfo.test canary iteration 5/10\nAdvance podinfo.test canary iteration 6/10\nAdvance podinfo.test canary iteration 7/10\nAdvance podinfo.test canary iteration 8/10\nAdvance podinfo.test canary iteration 9/10\nAdvance podinfo.test canary iteration 10/10\nCopying podinfo.test template spec to podinfo-primary.test\nWaiting for podinfo-primary.test rollout to finish: 1 of 2 updated replicas are available\nRouting all traffic to primary\nPromotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment with kubectl\nDESCRIPTION: This command triggers a canary deployment by updating the container image of the podinfo deployment in the test namespace. It sets the podinfod container's image to ghcr.io/stefanprodan/podinfo:6.0.1, causing Flagger to start the canary analysis process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Open Service Mesh with Prometheus and Permissive Traffic Policy\nDESCRIPTION: Command to install OSM with Prometheus enabled and permissive traffic policy using the OSM CLI.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nosm install \\\n--set=OpenServiceMesh.deployPrometheus=true \\\n--set=OpenServiceMesh.enablePermissiveTrafficPolicy=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Alert Manager Rules\nDESCRIPTION: YAML configuration for setting up Prometheus Alert Manager rules to monitor canary deployment failures.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/alerting.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  - alert: canary_rollback\n    expr: flagger_canary_status > 1\n    for: 1m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"Canary failed\"\n      description: \"Workload {{ $labels.name }} namespace {{ $labels.namespace }}\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment with kubectl\nDESCRIPTION: Command to trigger a canary deployment by updating the container image of a deployment called 'podinfo' in the 'test' namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Triggering Backend Canary Deployment with ConfigMap Change\nDESCRIPTION: This command triggers a new canary deployment for the backend application while making an adjustment to its configuration, monitoring the impact on performance.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i backend flagger/podinfo/ \\\n--namespace test \\\n--reuse-values \\\n--set canary.loadtest.enabled=true \\\n--set canary.helmtest.enabled=true \\\n--set httpServer.timeout=25s\n```\n\n----------------------------------------\n\nTITLE: Setting Flagger Version in Bash\nDESCRIPTION: Sets the version number in code and manifests for a new Flagger release. This command uses environment variables and Make to update version information across the project.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/release-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTAG=2.0.0 make version-set\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace and Deploying Application\nDESCRIPTION: Commands to create a test namespace, deploy a sample application, and set up a load testing service.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger's Canary CRD\nDESCRIPTION: This command applies the Flagger Canary Custom Resource Definition (CRD) to your Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/fluxcd/flagger/main/artifacts/flagger/crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Git remote for Flagger upstream repository\nDESCRIPTION: Sets up the upstream remote and provides commands for syncing the fork with the main repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/fluxcd/flagger.git\n\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway API Gateway Resource\nDESCRIPTION: Creates a Gateway resource that configures HTTP traffic handling with a wildcard hostname. This Gateway will be responsible for routing traffic to canary and primary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: gateway\n  namespace: istio-ingress\nspec:\n  gatewayClassName: istio\n  listeners:\n  - name: default\n    hostname: \"*.example.com\"\n    port: 80\n    protocol: HTTP\n    allowedRoutes:\n      namespaces:\n        from: All\n```\n\n----------------------------------------\n\nTITLE: Defining a Knative Service for Podinfo in Kubernetes\nDESCRIPTION: A YAML configuration for creating a Knative Service that deploys the podinfo application with specific container settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  template:\n    spec:\n      containers:\n        - image: ghcr.io/stefanprodan/podinfo:6.0.0\n          ports:\n            - containerPort: 9898\n              protocol: TCP\n          command:\n            - ./podinfo\n            - --port=9898\n            - --port-metrics=9797\n            - --grpc-port=9999\n            - --grpc-service-name=podinfo\n            - --level=info\n            - --random-delay=false\n            - --random-error=false\n```\n\n----------------------------------------\n\nTITLE: Installing Load Testing Service for Canary Analysis\nDESCRIPTION: Command to deploy a load testing service which will be used to generate traffic during the canary analysis process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Referencing Authentication Secret in Prometheus MetricTemplate\nDESCRIPTION: Shows how to reference an authentication secret in a Prometheus MetricTemplate. The secretRef field points to the Kubernetes Secret containing API credentials.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: my-metric\n  namespace: flagger\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.monitoring:9090\n    secretRef:\n      name: prom-auth\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger\nDESCRIPTION: Helm command to install Flagger in the appmesh-system namespace, configuring it for App Mesh and specifying the Prometheus metrics server.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=appmesh-system \\\n--set crd.create=false \\\n--set meshProvider=appmesh:v1beta2 \\\n--set metricsServer=http://appmesh-prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Status\nDESCRIPTION: Command to monitor the status of all canaries across all namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Checking Out Main Branch in Bash\nDESCRIPTION: Switches to the main branch and pulls the latest changes. This step is performed after merging the release PR and before tagging the release.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/release-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main && git pull\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace for Gateway Resource\nDESCRIPTION: Creates a dedicated Kubernetes namespace for the Gateway resource, which will be used to configure load balancing and traffic management.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns istio-ingress\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger for Istio Multi-Cluster\nDESCRIPTION: This Helm command installs Flagger for Istio multi-cluster setups, including configuration for the control plane kubeconfig.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=istio-system \\\n--set crd.create=false \\\n--set meshProvider=istio \\\n--set metricsServer=http://istio-cluster-prometheus:9090 \\\n--set controlplane.kubeconfig.secretName=istio-kubeconfig \\\n--set controlplane.kubeconfig.key=kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for AWS App Mesh using Kustomize\nDESCRIPTION: This command builds and applies the Kustomize configuration for Flagger with AWS App Mesh. It deploys Flagger in the appmesh-system namespace and configures it to use App Mesh's Prometheus instance.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/appmesh?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Flagger Canary Analysis Logs\nDESCRIPTION: Example log output showing progressive canary advancement and subsequent halting due to latency threshold violations\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n flagger-system logs deployment/flagger -f | jq .msg\n\nStarting canary deployment for podinfo.test\nAdvance podinfo.test canary weight 5\nAdvance podinfo.test canary weight 10\nAdvance podinfo.test canary weight 15\nHalt podinfo.test advancement latency 1.20 > 0.5\nHalt podinfo.test advancement latency 1.45 > 0.5\nHalt podinfo.test advancement latency 1.60 > 0.5\nHalt podinfo.test advancement latency 1.69 > 0.5\nHalt podinfo.test advancement latency 1.70 > 0.5\nRolling back podinfo.test failed checks threshold reached 5\nCanary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Checking Canary Status\nDESCRIPTION: This command queries the status of canary deployments within the test namespace in Kubernetes, showing the current status and metrics for both 'frontend' and 'backend' canaries.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test get canaries\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Gateway for Public Access\nDESCRIPTION: YAML configuration for creating an Istio Gateway resource. This exposes the demo app outside of the service mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: public-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n    - port:\n        number: 80\n        name: http\n        protocol: HTTP\n      hosts:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Observing Flagger Logs\nDESCRIPTION: This command allows you to stream and parse Flagger logs. It filters the logs from the `flagger` deployment in the `traefik` namespace and displays the `msg` field, providing real-time insights into the canary deployment process and any detected issues.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n traefik logs deployment/flagger -f | jq .msg\n\nStarting canary deployment for podinfo.test\nAdvance podinfo.test canary weight 5\nAdvance podinfo.test canary weight 10\nAdvance podinfo.test canary weight 15\nHalt podinfo.test advancement 404s percentage 6.20 > 5\nHalt podinfo.test advancement 404s percentage 6.45 > 5\nHalt podinfo.test advancement 404s percentage 7.60 > 5\nHalt podinfo.test advancement 404s percentage 8.69 > 5\nHalt podinfo.test advancement 404s percentage 9.70 > 5\nRolling back podinfo.test failed checks threshold reached 5\nCanary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service\nDESCRIPTION: Installs the load testing service using Helm, which will be used to generate traffic during the canary analysis phase.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test\n```\n\n----------------------------------------\n\nTITLE: Installing Apache APISIX and APISIX Ingress Controller with Helm\nDESCRIPTION: Helm commands to add the APISIX repository and install Apache APISIX with the Ingress Controller, configuring Prometheus metrics scraping and other essential settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add apisix https://charts.apiseven.com\nkubectl create ns apisix\n\nhelm upgrade -i apisix apisix/apisix --version=0.11.3 \\\n--namespace apisix \\\n--set apisix.podAnnotations.\"prometheus\\.io/scrape\"=true \\\n--set apisix.podAnnotations.\"prometheus\\.io/port\"=9091 \\\n--set apisix.podAnnotations.\"prometheus\\.io/path\"=/apisix/prometheus/metrics \\\n--set pluginAttrs.prometheus.export_addr.ip=0.0.0.0 \\\n--set pluginAttrs.prometheus.export_addr.port=9091 \\\n--set pluginAttrs.prometheus.export_uri=/apisix/prometheus/metrics \\\n--set pluginAttrs.prometheus.metric_prefix=apisix_ \\\n--set ingress-controller.enabled=true \\\n--set ingress-controller.config.apisix.serviceNamespace=apisix\n```\n\n----------------------------------------\n\nTITLE: Extracting Canary Status with kubectl and awk Bash Commands\nDESCRIPTION: This Bash command combination uses kubectl to get the YAML of a specific canary deployment and awk to extract the status section.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/how-it-works.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test get canary/podinfo -oyaml | awk '/status/,0'\n```\n\n----------------------------------------\n\nTITLE: Overriding Event Webhook at Canary Level in YAML\nDESCRIPTION: YAML configuration example showing how to override the default event webhook for a specific canary. This allows different notification endpoints for different canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/monitoring.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  analysis:\n    webhooks:\n      - name: \"send to Slack\"\n        type: event\n        url: http://event-recevier.notifications/slack\n```\n\n----------------------------------------\n\nTITLE: Installing Podinfo Chart with YAML Configuration\nDESCRIPTION: Example of installing the Podinfo chart using a YAML file for parameter configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/README.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm install flagger/podinfo --name frontend -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Canary Deployment Status\nDESCRIPTION: Example output of the canary resource description showing the failed state after the rollback, including events that demonstrate the progressive weight increases and subsequent halting due to failed checks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Canary Weight:         0\n  Failed Checks:         10\n  Phase:                 Failed\nEvents:\n Starting canary analysis for podinfo.test\n Pre-rollout check acceptance-test passed\n Advance podinfo.test canary weight 5\n Advance podinfo.test canary weight 10\n Advance podinfo.test canary weight 15\n Halt podinfo.test advancement success rate 69.17% < 99%\n Halt podinfo.test advancement success rate 61.39% < 99%\n Halt podinfo.test advancement success rate 55.06% < 99%\n Halt podinfo.test advancement request duration 1.20s > 0.5s\n Halt podinfo.test advancement request duration 1.45s > 0.5s\n Rolling back podinfo.test failed checks threshold reached 5\n Canary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Linkerd with Kustomize\nDESCRIPTION: This command uses Kustomize to install Flagger configured for use with Linkerd service mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/linkerd?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Podinfo Chart Parameters\nDESCRIPTION: Example of specifying Podinfo chart parameters using Helm's --set flag during installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm install flagger/podinfo --name frontend \\\n  --set=image.tag=1.4.1,hpa.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Linkerd using Kustomize\nDESCRIPTION: This command builds and applies the Kustomize configuration for Flagger with Linkerd. It deploys Flagger in the linkerd namespace and sets the metrics server to linkerd-viz's Prometheus instance.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/linkerd?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Monitoring All Canary Deployments\nDESCRIPTION: Continuously monitors the status of all canary deployments across all namespaces, showing current progression and weight.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n\nNAMESPACE   NAME      STATUS        WEIGHT   LASTTRANSITIONTIME\ntest        podinfo   Progressing   15       2019-12-20T14:05:07Z\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Canaries on a Single Domain with Istio\nDESCRIPTION: This YAML configuration demonstrates how to set up two canary deployments (website and API) on the same external domain using Flagger with Istio. The configuration uses URI path-based routing to direct traffic to different services.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: website\nspec:\n  service:\n    port: 8080\n    gateways:\n    - istio-system/public-gateway\n    hosts:\n    - my-site.com\n    match:\n      - uri:\n          prefix: /\n    rewrite:\n      uri: /\n---\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: webapi\nspec:\n  service:\n    port: 8080\n    gateways:\n    - istio-system/public-gateway\n    hosts:\n    - my-site.com\n    match:\n      - uri:\n          prefix: /api\n    rewrite:\n      uri: /\n```\n\n----------------------------------------\n\nTITLE: Installing Contour Load Balancer on Kubernetes\nDESCRIPTION: This snippet demonstrates how to deploy the Contour ingress controller with a LoadBalancer on a Kubernetes cluster. It requires Kubernetes version 1.16 or newer.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://projectcontour.io/quickstart/contour.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger and Prometheus Add-on\nDESCRIPTION: Commands to add the Flagger Helm repository and install Flagger with Prometheus in the same namespace as the ingress controller.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger flagger/flagger \\\n--namespace ingress-nginx \\\n--set prometheus.install=true \\\n--set meshProvider=nginx\n```\n\n----------------------------------------\n\nTITLE: Installing Gloo Edge with Helm\nDESCRIPTION: Commands to install Gloo Edge using Helm v3 in the gloo-system namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add gloo https://storage.googleapis.com/solo-public-helm\nkubectl create ns gloo-system\nhelm upgrade -i gloo gloo/gloo \\\n--namespace gloo-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Gateway\nDESCRIPTION: YAML configuration for creating a public gateway in Istio to expose the demo application\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: public-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n    - port:\n        number: 80\n        name: http\n        protocol: HTTP\n      hosts:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Disabling mTLS for the Load Tester Service in Istio\nDESCRIPTION: YAML configuration to disable mutual TLS for the Flagger load tester service, allowing Flagger to call it from outside the mesh. This includes both a DestinationRule and PeerAuthentication resource.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nmetadata:\n  name: flagger-loadtester\n  namespace: test\nspec:\n  host: \"flagger-loadtester.test.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n---\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: flagger-loadtester\n  namespace: test\nspec:\n  selector:\n    matchLabels:\n      app: flagger-loadtester\n  mtls:\n    mode: DISABLE\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: Command to add the Flagger Helm repository to your local Helm installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs During Canary Analysis\nDESCRIPTION: Command to view Flagger logs, showing the progression and eventual failure of a canary deployment based on custom metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n gloo-system logs deployment/flagger -f | jq .msg\n\nStarting canary deployment for podinfo.test\nAdvance podinfo.test canary weight 5\nAdvance podinfo.test canary weight 10\nAdvance podinfo.test canary weight 15\nHalt podinfo.test advancement 404s percentage 6.20 > 5\nHalt podinfo.test advancement 404s percentage 6.45 > 5\nHalt podinfo.test advancement 404s percentage 7.60 > 5\nHalt podinfo.test advancement 404s percentage 8.69 > 5\nHalt podinfo.test advancement 404s percentage 9.70 > 5\nRolling back podinfo.test failed checks threshold reached 5\nCanary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Generic Ingress Controllers with Kustomize\nDESCRIPTION: This command uses Kustomize to install Flagger and Prometheus for use with various ingress controllers like Contour, Gloo, NGINX, etc.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/kubernetes?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Kubectl\nDESCRIPTION: This YAML configuration demonstrates the use of kubectl command in a pre-rollout webhook to run a test in Flagger. It requires RBAC setup for the service account running kubectl.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nanalysis:\n  webhooks:\n    - name: \"smoke test\"\n      type: pre-rollout\n      url: http://flagger-kubectltester.kube-system/\n      timeout: 3m\n      metadata:\n        type: \"kubectl\"\n        cmd: \"run test --image=alpine --overrides='{ \"spec\": { \"serviceAccount\": \"default:default\" }  }'\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Flagger Service Locally\nDESCRIPTION: This URL provides access to the Flagger service through the port forwarding set up in the previous step. It uses localhost and port 3000.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/templates/NOTES.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Open Service Mesh using Kustomize\nDESCRIPTION: This command builds and applies the Kustomize configuration for Flagger with Open Service Mesh. It deploys Flagger in the osm-system namespace and configures it to use OSM's Prometheus instance.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/osm?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service\nDESCRIPTION: Deploys a load testing service that will generate traffic during the canary analysis. This is necessary to validate metrics and behavior during the progressive deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Secret for Prometheus\nDESCRIPTION: Creates a Kubernetes Secret containing basic authentication credentials for Prometheus. This secret can be referenced in a MetricTemplate to authenticate with the Prometheus API.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: prom-auth\n  namespace: flagger\ndata:\n  username: your-user\n  password: your-password\n```\n\n----------------------------------------\n\nTITLE: Deploying Updated Image with Session Affinity Configuration\nDESCRIPTION: This bash command updates a Kubernetes deployment with a new container image version, testing the session affinity setup. It requires kubectl and access to execute deployment updates in the specified namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Monitoring All Canary Deployments\nDESCRIPTION: Command and sample output showing how to monitor all canary deployments across all namespaces, displaying their status, weight, and transition times.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n\nNAMESPACE   NAME      STATUS        WEIGHT   LASTTRANSITIONTIME\ntest        podinfo   Progressing   15       2019-06-30T14:05:07Z\nprod        frontend  Succeeded     0        2019-06-30T16:15:07Z\nprod        backend   Failed        0        2019-06-30T17:05:07Z\n```\n\n----------------------------------------\n\nTITLE: Defining Gloo Virtual Service\nDESCRIPTION: YAML configuration for creating a Gloo virtual service that references a route table generated by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.solo.io/v1\nkind: VirtualService\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  virtualHost:\n    domains:\n      - 'app.example.com'\n    routes:\n      - matchers:\n         - prefix: /\n        delegateAction:\n          ref:\n            name: podinfo\n            namespace: test\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik IngressRoute\nDESCRIPTION: Creates a Traefik IngressRoute that references the TraefikService generated by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`app.example.com`)\n      kind: Rule\n      services:\n        - name: podinfo\n          kind: TraefikService\n          port: 80\n```\n\n----------------------------------------\n\nTITLE: Creating KEDA ScaledObject for Podinfo\nDESCRIPTION: YAML configuration for a KEDA ScaledObject targeting the podinfo deployment with Prometheus-based scaling.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: podinfo-so\n  namespace: test\nspec:\n  scaleTargetRef:\n    name: podinfo\n  pollingInterval: 10\n  cooldownPeriod: 20\n  minReplicaCount: 1\n  maxReplicaCount: 3\n  triggers:\n  - type: prometheus\n    metadata:\n      name: prom-trigger\n      serverAddress: http://flagger-prometheus.flagger:9090\n      metricName: http_requests_total\n      query: sum(rate(http_requests_total{ app=\"podinfo\" }[30s]))\n      threshold: '5'\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 404 Errors with curl in Bash\nDESCRIPTION: Uses the curl command in a watch loop to continuously issue HTTP requests to induce 404 errors against the 'podinfo-canary' service. The bash script is for testing canary deployments under erroneous conditions.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary.test:9898/status/400\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Resource Configuration with kubectl\nDESCRIPTION: This command uses kubectl to apply the Canary resource configuration defined in the podinfo-canary-session-affinity.yaml file. This command creates or updates the Canary resource in the Kubernetes cluster, triggering Flagger to manage the canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary-session-affinity.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Canary Testing\nDESCRIPTION: This command uses the 'hey' tool to generate HTTP 500 errors, testing Flagger's ability to detect and respond to failures.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhey -z 1m -c 5 -q 5 http://podinfo-canary.test:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Deployments\nDESCRIPTION: Command to watch the status of all canary deployments across namespaces. This helps in monitoring the progress of A/B tests.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Istio Gateway API Error Rate Query\nDESCRIPTION: Prometheus query for calculating HTTP request error percentage when using Istio with Gateway API.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n100 - sum(\n    rate(\n        istio_requests_total{\n          reporter=\"source\",\n          destination_workload_namespace=~\"{{ namespace }}\",\n          destination_workload=~\"{{ target }}\",\n          response_code!~\"5.*\"\n        }[{{ interval }}]\n    )\n)\n/\nsum(\n    rate(\n        istio_requests_total{\n          reporter=\"source\",\n          destination_workload_namespace=~\"{{ namespace }}\",\n          destination_workload=~\"{{ target }}\"\n        }[{{ interval }}]\n    )\n) * 100\n```\n\n----------------------------------------\n\nTITLE: Viewing Canary Deployment Status and Events\nDESCRIPTION: Sample output showing the status and events of a successful canary deployment process, with gradual traffic shifting and promotion.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Canary Weight:         0\n  Failed Checks:         0\n  Phase:                 Succeeded\nEvents:\n New revision detected! Scaling up podinfo.test\n Waiting for podinfo.test rollout to finish: 0 of 1 updated replicas are available\n Pre-rollout check acceptance-test passed\n Advance podinfo.test canary weight 5\n Advance podinfo.test canary weight 10\n Advance podinfo.test canary weight 15\n Advance podinfo.test canary weight 20\n Advance podinfo.test canary weight 25\n Waiting for podinfo.test rollout to finish: 1 of 2 updated replicas are available\n Advance podinfo.test canary weight 30\n Advance podinfo.test canary weight 35\n Advance podinfo.test canary weight 40\n Advance podinfo.test canary weight 45\n Advance podinfo.test canary weight 50\n Copying podinfo.test template spec to podinfo-primary.test\n Waiting for podinfo-primary.test rollout to finish: 1 of 2 updated replicas are available\n Promotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPProxy for Application\nDESCRIPTION: Creates an HTTPProxy resource for routing traffic from a domain to the podinfo service. Requires setting your domain in place of `app.example.com`.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: projectcontour.io/v1\nkind: HTTPProxy\nmetadata:\n  name: podinfo-ingress\n  namespace: test\nspec:\n  virtualhost:\n    fqdn: app.example.com\n  includes:\n    - name: podinfo\n      namespace: test\n      conditions:\n        - prefix: /\n```\n\n----------------------------------------\n\nTITLE: Defining Ingress for Sample Application in YAML\nDESCRIPTION: YAML configuration for creating an Ingress resource for the sample application using Skipper ingress class.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: podinfo\n  namespace: test\n  labels:\n    app: podinfo\n  annotations:\n    kubernetes.io/ingress.class: \"skipper\"\nspec:\n  rules:\n    - host: \"app.example.com\"\n      http:\n        paths:\n          - pathType: Prefix\n            path: \"/\"\n            backend:\n              service:\n                name: podinfo\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Creating App Mesh Gateway Route\nDESCRIPTION: This YAML configuration defines a GatewayRoute resource for App Mesh, routing traffic to the Podinfo virtual service.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat << EOF | kubectl apply -f -\napiVersion: appmesh.k8s.aws/v1beta2\nkind: GatewayRoute\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  httpRoute:\n    match:\n      prefix: \"/\"\n    action:\n      target:\n        virtualService:\n          virtualServiceRef:\n            name: podinfo\nEOF\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana via Port Forwarding\nDESCRIPTION: This kubectl command sets up port forwarding to access the Grafana dashboard installed for Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n istio-system port-forward svc/flagger-grafana 3000:80\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: This command applies the Canary resource configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Contour using Kustomize\nDESCRIPTION: This command builds and applies the Kustomize configuration for Flagger with Contour. It deploys Flagger and Prometheus in the projectcontour namespace and configures Prometheus to scrape Contour's Envoy instances.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/contour?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Canary Testing\nDESCRIPTION: Continuously sends HTTP 500 error requests to the canary service to test Flagger's failure detection and rollback functionality.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 0.1 curl http://podinfo-canary.test:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Enabling Port Discovery in Flagger Canary Configuration\nDESCRIPTION: This snippet demonstrates how to enable port discovery in Flagger's canary configuration, allowing additional ports to be exposed and secured with mTLS.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nspec:\n  service:\n    # container port used for canary analysis\n    port: 8080\n    # port name can be http or grpc (default http)\n    portName: http\n    # add all the other container ports\n    # to the ClusterIP services (default false)\n    portDiscovery: true\n    trafficPolicy:\n      tls:\n        mode: ISTIO_MUTUAL\n```\n\n----------------------------------------\n\nTITLE: Generating Test Traffic for Rollback Scenario\nDESCRIPTION: Commands to generate HTTP 500 errors and high latency, used to test Flagger's automatic rollback functionality during canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl -b 'type=insider' http://app.example.com/status/500\n\nwatch curl -b 'type=insider' http://app.example.com/delay/1\n```\n\n----------------------------------------\n\nTITLE: Defining Apache APISIX Route for Canary Testing\nDESCRIPTION: YAML configuration for an Apache APISIX Route resource that defines how traffic should be routed to the application, including host, paths, and enabling Prometheus metrics collection.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  name: podinfo\n  namespace: test\nspec:\n  http:\n    - backends:\n        - serviceName: podinfo\n          servicePort: 80\n      match:\n        hosts:\n          - app.example.com\n        methods:\n          - GET\n        paths:\n          - /*\n      name: method\n      plugins:\n        - name: prometheus\n          enable: true\n          config:\n            disable: false\n            prefer_name: true\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment in Bash\nDESCRIPTION: Bash command to update the container image of the sample application, triggering a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:4.0.6\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Status\nDESCRIPTION: Command to watch the status of all canaries across all namespaces in the cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Linkerd in Kubernetes\nDESCRIPTION: Command to install Flagger in the flagger-system namespace using Kustomize. Flagger is the tool that will manage the canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/fluxcd/flagger//kustomize/linkerd\n```\n\n----------------------------------------\n\nTITLE: Triggering Failed Canary Deployment\nDESCRIPTION: Commands to trigger a new canary deployment and generate HTTP 500 errors to test rollback functionality.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n\nwatch curl http://app.example.com/status/500\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger in Istio-System Namespace\nDESCRIPTION: Command to install Flagger in the istio-system namespace using kustomize. This deploys Flagger, which will manage the canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/fluxcd/flagger//kustomize/istio\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: Command to apply the A/B testing configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-ab-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Skipper Ingress Controller Arguments in YAML\nDESCRIPTION: YAML configuration for Skipper ingress controller with essential arguments for metrics, Kubernetes integration, and health checks.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- -enable-connection-metrics\n- -histogram-metric-buckets=.01,1,10,100\n- -kubernetes\n- -kubernetes-in-cluster\n- -kubernetes-path-mode=path-prefix\n- -metrics-exp-decay-sample\n- -metrics-flavour=prometheus\n- -route-backend-metrics\n- -route-backend-error-counters\n- -route-response-metrics\n- -serve-host-metrics\n- -serve-route-metrics\n- -whitelisted-healthcheck-cidr=0.0.0.0/0 # permit Kind source health checks\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Anti-Affinity with Custom Labels\nDESCRIPTION: This example shows how to use a different label than the default 'app' label for pod anti-affinity in a deployment managed by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: podinfo\nspec:\n  selector:\n    matchLabels:\n      app: podinfo\n      affinity: podinfo\n  template:\n    metadata:\n      labels:\n        app: podinfo\n        affinity: podinfo\n    spec:\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchLabels:\n                  affinity: podinfo\n              topologyKey: topology.kubernetes.io/zone\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment with Label Selector for Flagger\nDESCRIPTION: This example shows the required label selector format for a deployment to be managed by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: podinfo\nspec:\n  selector:\n    matchLabels:\n      app: podinfo\n  template:\n    metadata:\n      labels:\n        app: podinfo\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for AWS App Mesh with Kustomize\nDESCRIPTION: This command uses Kustomize to install Flagger configured for use with AWS App Mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/appmesh?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment by Updating Container Image\nDESCRIPTION: Command to trigger a canary deployment by updating the podinfo container image to a new version.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Provider in Flagger Canary Resource\nDESCRIPTION: This YAML snippet shows how to specify a different provider in the Flagger Canary custom resource.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: app\n  namespace: test\nspec:\n  # can be: kubernetes, istio, linkerd, appmesh, nginx, skipper, gloo, traefik, osm, apisix\n  # use the kubernetes provider for Blue/Green style deployments\n  provider: nginx\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Rollback Testing\nDESCRIPTION: Command to generate HTTP 500 errors by repeatedly calling an endpoint on the canary service, used to test Flagger's automatic rollback functionality.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary.test:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Canary Testing\nDESCRIPTION: This command uses curl to repeatedly hit an endpoint that introduces a 1-second delay, simulating high latency for testing purposes.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://podinfo-canary.test:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Testing in Bash\nDESCRIPTION: Bash command to generate latency by repeatedly curling a delay endpoint for testing Flagger's response to increased latency.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://app.example.com/delay/1\n```\n\n----------------------------------------\n\nTITLE: Triggering A/B Test Deployment in Kubernetes\nDESCRIPTION: This command updates the image of a deployment to initiate an A/B test using Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.3\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Command to update the container image, triggering a canary deployment. This initiates the A/B testing process managed by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Test Namespace for OSM\nDESCRIPTION: Commands to create a test namespace, enable OSM monitoring, and metrics scraping for the namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace test\nosm namespace add test\nosm metrics enable --namespace test\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Linkerd Service Mesh\nDESCRIPTION: Install Flagger with Linkerd as the mesh provider, including authentication policy configuration\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -i flagger flagger\\/flagger \\\n    --namespace=flagger-system \\\n    --set meshProvider=linkerd \\\n    --set metricsServer=http:\\/\\/prometheus.linkerd-viz:9090 \\\n    --set linkerdAuthPolicy.create=true\n```\n\n----------------------------------------\n\nTITLE: Defining NGINX Ingress for Application\nDESCRIPTION: YAML configuration for creating an Ingress resource to expose the application through NGINX ingress controller.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: podinfo\n  namespace: test\n  labels:\n    app: podinfo\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n    - host: \"app.example.com\"\n      http:\n        paths:\n          - pathType: Prefix\n            path: \"/\"\n            backend:\n              service:\n                name: podinfo\n                port:\n                  number: 80\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Istio\nDESCRIPTION: Command to install Flagger in the istio-system namespace\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/fluxcd/flagger//kustomize/istio\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Command to update the podinfo deployment image, triggering a canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Deploying App Mesh Gateway with Helm\nDESCRIPTION: This Helm command installs the App Mesh Gateway in the test namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i appmesh-gateway eks/appmesh-gateway \\\n--namespace test\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service\nDESCRIPTION: Helm command to install the Flagger load testing service, which generates traffic during canary analysis to properly test the deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test\n```\n\n----------------------------------------\n\nTITLE: Generate Latency Test\nDESCRIPTION: Command to introduce artificial latency for testing performance thresholds\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://podinfo-canary.test:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Creating Datadog API Credentials Secret\nDESCRIPTION: Creates a Kubernetes Secret with Datadog API and application keys. These credentials are required for Flagger to authenticate with the Datadog API when using Datadog as a metrics provider.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: datadog\n  namespace: istio-system\ndata:\n  datadog_api_key: your-datadog-api-key\n  datadog_application_key: your-datadog-application-key\n```\n\n----------------------------------------\n\nTITLE: Installing Kuma Control Plane and Observability Components\nDESCRIPTION: Commands to install the Kuma control plane along with observability components (Grafana, Prometheus) using the kumactl CLI tool.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkumactl install control-plane | kubectl apply -f -\nkumactl install observability --components \"grafana,prometheus\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Slack Webhook Configuration using Helm\nDESCRIPTION: Example command for upgrading or installing Flagger using Helm with Slack webhook configuration. This command sets up Flagger in the flagger-system namespace and configures Slack notifications.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -i flagger flagger/flagger \\\n  --namespace flagger-system \\\n  --set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n  --set slack.channel=general\n```\n\n----------------------------------------\n\nTITLE: Simulating Latency with curl\nDESCRIPTION: This bash command uses curl to introduce artificial latency, observing canary response and error handling during delayed requests. It requires access to the service at the specified address and to execute within the Kubernetes environment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Helm v3\nDESCRIPTION: Installs Flagger using Helm in the projectcontour namespace. Sets meshProvider and ingressClass to contour, and installs Prometheus if not already available.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger flagger/flagger \\\n--namespace projectcontour \\\n--set meshProvider=contour \\\n--set ingressClass=contour \\\n--set prometheus.install=true\n```\n\n----------------------------------------\n\nTITLE: Installing App Mesh Prometheus\nDESCRIPTION: Helm command to install Prometheus for App Mesh metrics collection in the appmesh-system namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i appmesh-prometheus eks/appmesh-prometheus \\\n--wait --namespace appmesh-system\n```\n\n----------------------------------------\n\nTITLE: Applying HTTPProxy Resource\nDESCRIPTION: Applies the podinfo-ingress.yaml to the Kubernetes cluster, enabling external access to the podinfo application.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Podinfo Helm Chart\nDESCRIPTION: This command installs the podinfo application as a Helm release named 'frontend'. It specifies various configurations including enabling canary deployments and defining backend endpoints.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i frontend flagger/podinfo \\\n--namespace test \\\n--set nameOverride=frontend \\\n--set backend=http://backend.test:9898/echo \\\n--set canary.enabled=true \\\n--set canary.istioIngress.enabled=true \\\n--set canary.istioIngress.gateway=istio-system/public-gateway \\\n--set canary.istioIngress.host=frontend.istio.example.com\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Application with Kustomize\nDESCRIPTION: Applies a Kubernetes deployment and horizontal pod autoscaler for the test application using Kustomize from the Flagger repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger in the Kuma Namespace\nDESCRIPTION: Command to install Flagger in the kong-mesh-system namespace using kustomize.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/fluxcd/flagger//kustomize/kuma\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace and Deploying Application\nDESCRIPTION: Creates a test namespace and deploys a sample application with a horizontal pod autoscaler.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Values File using Helm\nDESCRIPTION: Example command for upgrading or installing Flagger using Helm with a values YAML file. This approach allows for more complex configurations to be managed in a separate file.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm upgrade -i flagger flagger/flagger \\\n  --namespace istio-system \\\n  -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Canary Testing\nDESCRIPTION: Curl command to generate HTTP 500 errors, used to test Flagger's error detection and rollback functionality.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl -H 'Host: app.example.com' http://gateway-proxy.gloo-system/status/500\n```\n\n----------------------------------------\n\nTITLE: Monitoring All Canary Deployments\nDESCRIPTION: Command to watch and list all canary deployments across all namespaces, showing their status, weight, and last transition time.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Deploying the Flagger Load Tester with kubectl\nDESCRIPTION: Command for deploying the Flagger load test runner in a Kubernetes namespace using kubectl and kustomize. This component is used to generate traffic during canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Deploying Grafana with Helm\nDESCRIPTION: This Helm command installs Grafana in the istio-system namespace. It sets the Prometheus URL, admin username, and password for Grafana.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-grafana flagger/grafana \\\n--namespace=istio-system \\\n--set url=http://prometheus.istio-system:9090 \\\n--set user=admin \\\n--set password=replace-me\n```\n\n----------------------------------------\n\nTITLE: Installing Load Testing Service\nDESCRIPTION: This command installs a load testing service that simulates traffic to assess the readiness of the canary deployments during analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test\n```\n\n----------------------------------------\n\nTITLE: Installing Podinfo Chart as Frontend\nDESCRIPTION: Helm command to install the Podinfo chart as a frontend service with Istio ingress and canary deployment enabled.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i frontend flagger/podinfo \\\n--namespace test \\\n--set nameOverride=frontend \\\n--set backend=http://backend.test:9898/echo \\\n--set canary.enabled=true \\\n--set canary.istioIngress.enabled=true \\\n--set canary.istioIngress.gateway=istio-system/public-gateway \\\n--set canary.istioIngress.host=frontend.istio.example.com\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Application with Kustomize\nDESCRIPTION: Command to deploy a sample application (podinfo) using Kustomize, which will be used for demonstrating canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Installing Istio and Prometheus in Kubernetes\nDESCRIPTION: Commands to install Istio with telemetry support and Prometheus in a Kubernetes cluster. This sets up the necessary infrastructure for A/B testing.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nistioctl manifest install --set profile=default\n\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.18/samples/addons/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger using Kustomize in Bash\nDESCRIPTION: Bash command to install Flagger in a Kubernetes cluster using Kustomize.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/kubernetes | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Metric Template for Prometheus in Flagger\nDESCRIPTION: YAML configuration for a MetricTemplate resource in Flagger, defining a custom Prometheus query for monitoring HTTP 404 rates.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: not-found-percentage\n  namespace: test\nspec:\n  provider:\n    type: prometheus\n    address: http://flagger-prometheus.gloo-system:9090\n  query: |\n    100 - sum(\n        rate(\n            http_request_duration_seconds_count{\n              kubernetes_namespace=\"{{ namespace }}\",\n              kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n              status!=\"{{ interval }}\"\n            }[1m]\n        )\n    )\n    /\n    sum(\n        rate(\n            http_request_duration_seconds_count{\n              kubernetes_namespace=\"{{ namespace }}\",\n              kubernetes_pod_name=~\"{{ target }}-[0-9a-zA-Z]+(-[0-9a-zA-Z]+)\"\n            }[{{ interval }}]\n        )\n    ) * 100\n```\n\n----------------------------------------\n\nTITLE: Generating High Latency for Testing\nDESCRIPTION: Uses watch and curl to simulate high response latency and trigger canary analysis failure condition\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://app.example.com/delay/2\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Deployments Across Namespaces\nDESCRIPTION: Command to watch and monitor the status of all canary deployments across all namespaces in the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus for Istio Telemetry\nDESCRIPTION: Command to install Prometheus in the istio-system namespace for monitoring Istio telemetry.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n istio-system apply -f \\\nhttps://storage.googleapis.com/gke-release/istio/release/1.0.6-gke.3/patches/install-prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Linkerd and Prometheus in Kubernetes\nDESCRIPTION: Commands to install Linkerd, Prometheus, and the SMI extension in a Kubernetes cluster. This sets up the service mesh infrastructure required for canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The CRDs need to be installed beforehand\nlinkerd install --crds | kubectl apply -f -\n\nlinkerd install | kubectl apply -f -\nlinkerd viz install | kubectl apply -f -\n\n# For linkerd versions 2.12 and later, the SMI extension needs to be install in\n# order to enable TrafficSplits\ncurl -sL https://linkerd.github.io/linkerd-smi/install | sh\nlinkerd smi install | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Test Namespace in Kubernetes\nDESCRIPTION: Commands to create a test namespace and enable Linkerd proxy injection. This prepares the environment for deploying and testing canary releases.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl annotate namespace test linkerd.io/inject=enabled\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment by Updating Container Image\nDESCRIPTION: Command to update the container image of the podinfo deployment, which triggers a canary deployment process in Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.3\n```\n\n----------------------------------------\n\nTITLE: Deploying Grafana for Flagger\nDESCRIPTION: This Helm command installs Grafana with a dashboard for monitoring Flagger's canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-grafana flagger/grafana \\\n--namespace=istio-system \\\n--set url=http://prometheus.istio-system:9090 \\\n--set user=admin \\\n--set password=change-me\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace in Kubernetes using Bash\nDESCRIPTION: Bash command to create a test namespace in Kubernetes for deploying the sample application.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Load Tester with Custom Values\nDESCRIPTION: Example of upgrading the Flagger load tester installation with custom configuration values for AWS App Mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/loadtester/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--set \"appmesh.enabled=true\" \\\n--set \"appmesh.backends[0]=podinfo\" \\\n--set \"appmesh.backends[1]=podinfo-canary\"\n```\n\n----------------------------------------\n\nTITLE: Generating High Response Latency for Testing\nDESCRIPTION: Command to simulate high response latency by making requests to a specific endpoint of the application.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://app.example.com/delay/2\n```\n\n----------------------------------------\n\nTITLE: Updating OSM MeshConfig for Permissive Traffic Policy\nDESCRIPTION: Command to patch the OSM MeshConfig resource to enable permissive traffic policy after installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch meshconfig osm-mesh-config -n <osm-namespace> -p '{\"spec\":{\"traffic\":{\"enablePermissiveTrafficPolicyMode\":true}}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Installing Podinfo Demo App\nDESCRIPTION: Commands to add the Podinfo Helm repository and install the Podinfo demo app in the test namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add podinfo https://stefanprodan.github.io/podinfo\n\nkubectl create ns test\nhelm upgrade -i podinfo podinfo/podinfo \\\n--namespace test \\\n--set service.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Deploying the Flagger Load Tester with Helm\nDESCRIPTION: Commands for deploying the Flagger load test runner using Helm chart. Includes adding the Flagger repository and upgrading/installing the loadtester with customized timeout and namespace settings.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test \\\n--set cmd.timeout=1h \\\n--set cmd.namespaceRegexp=''\n```\n\n----------------------------------------\n\nTITLE: Applying Metric Templates Configuration\nDESCRIPTION: Applies the previously created metric templates to the cluster. These templates will be referenced in the canary deployment configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f metric-templates.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace for Canary Deployment\nDESCRIPTION: Creates a dedicated namespace for testing the canary deployment setup. This namespace will contain the application and related resources.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\n```\n\n----------------------------------------\n\nTITLE: Installing Traefik with Helm\nDESCRIPTION: Installs Traefik using Helm, configuring it with Prometheus metrics enabled.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add traefik https://helm.traefik.io/traefik\nkubectl create ns traefik\n\ncat <<EOF | helm upgrade -i traefik traefik/traefik --namespace traefik -f -\ndeployment:\n  podAnnotations:\n    prometheus.io/port: \"9100\"\n    prometheus.io/scrape: \"true\"\n    prometheus.io/path: \"/metrics\"\nmetrics:\n  prometheus:\n    entryPoint: metrics\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager\nDESCRIPTION: Commands to install and configure cert-manager for automated TLS certificate management.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCERT_REPO=https://raw.githubusercontent.com/jetstack/cert-manager\n\nkubectl apply -f ${CERT_REPO}/release-0.10/deploy/manifests/00-crds.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace cert-manager\n\nkubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add jetstack https://charts.jetstack.io && \\\nhelm repo update && \\\nhelm upgrade -i cert-manager \\\n--namespace cert-manager \\\n--version v0.10.0 \\\njetstack/cert-manager\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Local Testing with Kind/K3s\nDESCRIPTION: Sets up port forwarding for the Istio gateway service to enable local access to the application when using local Kubernetes clusters. This provides a way to test the deployment without external DNS setup.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward -n istio-ingress svc/gateway-istio 8080:80\n```\n\n----------------------------------------\n\nTITLE: Defining MetricTemplate for Istio 1.4 Latency Metric in YAML\nDESCRIPTION: This YAML snippet defines a MetricTemplate for use with Istio 1.4. It creates a custom latency metric using the old istio_request_duration_seconds_bucket metric, which is necessary for compatibility with Istio 1.4 when using Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/upgrade-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: latency\n  namespace: istio-system\nspec:\n  provider:\n    type: prometheus\n    address: http://prometheus.istio-system:9090\n  query: |\n    histogram_quantile(\n        0.99,\n        sum(\n            rate(\n                istio_request_duration_seconds_bucket{\n                    reporter=\"destination\",\n                    destination_workload_namespace=\"{{ namespace }}\",\n                    destination_workload=~\"{{ target }}\"\n                }[{{ interval }}]\n            )\n        ) by (le)\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Testing\nDESCRIPTION: Using 'hey' HTTP load generator to send requests that will produce HTTP 500 errors to test Flagger's failure detection.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nhey -z 1m -c 5 -q 5 http://app.example.com/status/500\n```\n\n----------------------------------------\n\nTITLE: Custom Load Tester Dockerfile\nDESCRIPTION: Dockerfile example showing how to extend the Flagger load tester image with custom CLI tools for specialized load testing scenarios.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nFROM weaveworks/flagger-loadtester:<VER>\n\nRUN curl -Lo /usr/local/bin/my-cli https://github.com/user/repo/releases/download/ver/my-cli \\\n    && chmod +x /usr/local/bin/my-cli\n```\n\n----------------------------------------\n\nTITLE: Deploying Podinfo and Load Tester\nDESCRIPTION: Commands to deploy the podinfo application, its autoscaler, and a load testing service for canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Test Namespace for Kuma\nDESCRIPTION: Commands to create a test namespace and enable Kuma sidecar injection for service mesh integration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl annotate namespace test kuma.io/sidecar-injection=enabled\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Istio using Kustomize\nDESCRIPTION: This command builds and applies the Kustomize configuration for Flagger with Istio. It deploys Flagger in the istio-system namespace and configures it to use Istio's Prometheus instance for metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/istio?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Kustomize for OSM\nDESCRIPTION: Command to install Flagger in the default osm-system namespace using Kustomize.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/osm?ref=main\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment Update\nDESCRIPTION: Updates the podinfo container image to trigger a new canary deployment rollout by Flagger based on the changes in the deployment revision.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing App Mesh controller\nDESCRIPTION: Helm command to install the App Mesh controller in the appmesh-system namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i appmesh-controller eks/appmesh-controller \\\n--wait --namespace appmesh-system\n```\n\n----------------------------------------\n\nTITLE: Deploying Sample Application in Kubernetes using Kustomize\nDESCRIPTION: Bash command to deploy a sample application (podinfo) and its HPA using Kustomize in the test namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Release with Deployment Annotation in Kubernetes YAML\nDESCRIPTION: To retry a failed release, add or change an annotation on the pod template. This triggers a new canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        timestamp: \"2020-03-10T14:24:48+0000\"\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Canary Testing\nDESCRIPTION: A curl command to continuously generate HTTP 500 errors for testing Flagger's rollback mechanism.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Creating App Mesh Resource in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create an App Mesh resource named 'global' using kubectl. It sets up the mesh with a namespace selector for sidecar injection.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF | kubectl apply -f -\napiVersion: appmesh.k8s.aws/v1beta2\nkind: Mesh\nmetadata:\n  name: global\nspec:\n  namespaceSelector:\n    matchLabels:\n      appmesh.k8s.aws/sidecarInjectorWebhook: enabled\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Load Testing Service for Canary Analysis\nDESCRIPTION: Deploys a load testing service in the test namespace to generate traffic during the canary analysis phase.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Finding External Load Balancer Address for Gateway\nDESCRIPTION: Extracts the external hostname of Istio's load balancer service to enable external access to the deployed application. This address will be used to set up DNS records.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport ADDRESS=\"$(kubectl -n istio-ingress get svc/gateway-istio -ojson \\\n| jq -r \".status.loadBalancer.ingress[].hostname\")\"\necho $ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger for Open Service Mesh with Kustomize\nDESCRIPTION: This command uses Kustomize to install Flagger configured for use with Open Service Mesh (OSM).\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/osm?ref=main | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger and Prometheus Add-on\nDESCRIPTION: Commands to install Flagger and the Prometheus add-on in the gloo-system namespace using Helm.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger flagger/flagger \\\n--namespace gloo-system \\\n--set prometheus.install=true \\\n--set meshProvider=gloo\n```\n\n----------------------------------------\n\nTITLE: Triggering Another Canary Deployment with kubectl\nDESCRIPTION: This bash command updates the container image of the deployment to a specified new version, triggering a new canary deployment. Like the initial deployment, it requires kubectl access with permissions to update the deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Installing App Mesh CRDs\nDESCRIPTION: kubectl command to apply the Custom Resource Definitions (CRDs) for AWS App Mesh.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/aws/eks-charts/stable/appmesh-controller//crds?ref=master\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace for Flagger Deployment\nDESCRIPTION: Creates a dedicated Kubernetes namespace for testing the Flagger deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Deployment and HPA\nDESCRIPTION: Command to create a sample podinfo deployment and horizontal pod autoscaler that will be used for canary testing.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS for a Flagger Canary in Istio Permissive Mode\nDESCRIPTION: Configuration example for disabling TLS in a Flagger canary when Istio is running in permissive mode. This allows traffic to flow without TLS enforcement.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: Canary\nspec:\n  service:\n    trafficPolicy:\n      tls:\n        mode: DISABLE\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Test with Istio\nDESCRIPTION: This command creates a test namespace in Kubernetes, enabling Istio sidecar injection, which is essential for running services with traffic management and telemetry features provided by Istio.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport REPO=https://raw.githubusercontent.com/fluxcd/flagger/main\n\nkubectl apply -f ${REPO}/artifacts/namespaces/test.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving App Mesh Gateway URL\nDESCRIPTION: These commands retrieve and export the public URL of the App Mesh Gateway.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport URL=\"http://$(kubectl -n test get svc/appmesh-gateway -ojson | jq -r \".status.loadBalancer.ingress[].hostname\")\"\necho $URL\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: This command adds the Flagger Helm repository to your local Helm installation, allowing you to install Flagger charts.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Custom Resource\nDESCRIPTION: Command to apply the canary custom resource definition to the Kubernetes cluster, initiating the Blue/Green deployment configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service with Helm\nDESCRIPTION: This Helm command installs the Flagger load tester, configuring it for App Mesh and specifying backend services.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test \\\n--set appmesh.enabled=true \\\n--set \"appmesh.backends[0]=podinfo\" \\\n--set \"appmesh.backends[1]=podinfo-canary\"\n```\n\n----------------------------------------\n\nTITLE: Applying Apache APISIX Route Configuration\nDESCRIPTION: Command to apply the ApisixRoute resource to the Kubernetes cluster after saving it as a YAML file.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-apisixroute.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository in Bash\nDESCRIPTION: Adds the official Flagger Helm repository to the local Helm configuration, which is required before installing Flagger components.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-alibaba-servicemesh.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: Command to apply the Canary custom resource configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Grafana for Istio\nDESCRIPTION: Installs the Flagger Grafana chart for Istio using Helm. It sets the namespace to istio-system and configures the Prometheus URL.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i flagger-grafana flagger/grafana \\\n--namespace=istio-system \\\n--set url=http://prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: This bash command triggers a canary deployment by updating the container image of the `podinfo` deployment in the `test` namespace. This change initiates the canary analysis process by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:4.0.6\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Deployments Across Namespaces\nDESCRIPTION: Command to continuously watch the status of all canary deployments across all namespaces, showing their current phase, weight, and last transition time.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Get Flux SSH Public Key\nDESCRIPTION: This bash script retrieves the SSH public key generated by Flux. The key is then used to configure a deploy key with write access on the GitHub repository, allowing Flux to synchronize the cluster state with the repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n fluxcd logs deployment/flux | grep identity.pub | cut -d '\"' -f2\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: This command adds the Flagger Helm repository to your local Helm installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canaries in Bash\nDESCRIPTION: Bash command to watch and monitor all canary deployments across all namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Load Tester\nDESCRIPTION: Helm command to install the Flagger load tester with the release name 'flagger-loadtester'.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/loadtester/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger with Helm\nDESCRIPTION: This Helm command installs Flagger in the istio-system namespace with Slack notifications enabled. It sets the metrics server to Prometheus and configures Slack webhook details.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=istio-system \\\n--set crd.create=false \\\n--set metricsServer=http://prometheus.istio-system:9090 \\\n--set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n--set slack.channel=general \\\n--set slack.user=flagger\n```\n\n----------------------------------------\n\nTITLE: Installing Knative v1.17.0 in Kubernetes\nDESCRIPTION: A series of kubectl commands to install Knative v1.17.0 components and configure the network ingress class.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-crds.yaml\nkubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-core.yaml\nkubectl apply -f https://github.com/knative/net-kourier/releases/download/knative-v1.17.0/kourier.yaml\nkubectl patch configmap/config-network \\\n  --namespace knative-serving \\\n  --type merge \\\n  --patch '{\"data\":{\"ingress-class\":\"kourier.ingress.networking.knative.dev\"}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Flagger Installation with Kustomize\nDESCRIPTION: This YAML file demonstrates how to create a customized Flagger installation using Kustomize, patching the container arguments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: istio-system\nbases:\n  - https://github.com/fluxcd/flagger/kustomize/kubernetes?ref=main\npatches:\n- target:\n    kind: Deployment\n    name: flagger\n  patch: |-\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: flagger\n    spec:\n      template:\n        spec:\n          containers:\n          - name: flagger\n            args:\n              - -mesh-provider=istio\n              - -metrics-server=http://prometheus.istio-system:9090\n              - -include-label-prefix=app.kubernetes.io\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Grafana with Custom Token\nDESCRIPTION: Demonstrates how to install Flagger Grafana with a custom Weave Cloud token using Helm.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhelm install flagger/grafana --name flagger-grafana \\\n--set token=WEAVE-CLOUD-TOKEN\n```\n\n----------------------------------------\n\nTITLE: Triggering Deployment Update\nDESCRIPTION: Command to update the podinfo deployment image, triggering a new rollout.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring ExternalDNS Source for Istio Integration\nDESCRIPTION: Configuration example for ExternalDNS container arguments, showing how to select the appropriate source (either service or istio-virtualservice) to avoid conflicts when using ExternalDNS with Istio.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n    spec:\n      containers:\n        args:\n        - --source=service              # choose only one\n        - --source=istio-virtualservice # of these two\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe - Kubernetes YAML\nDESCRIPTION: This YAML snippet configures a readiness probe to check if the application is ready to receive traffic using `wget` executed as an `exec` command, ensuring dependencies are available before routing traffic.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/zero-downtime-deployments.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe:\n  exec:\n    command:\n    - wget\n    - --quiet\n    - --tries=1\n    - --timeout=4\n    - --spider\n    - http://localhost:8080/readyz\n  timeoutSeconds: 5\n  initialDelaySeconds: 5\n  periodSeconds: 5\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: Command to apply the Flagger canary configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Kustomize\nDESCRIPTION: Deploys Flagger and Prometheus to a Kubernetes cluster using kubectl and Kustomize in the projectcontour namespace. Requires kubectl version 1.14 or newer.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/contour?ref=main\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Updates the container image to trigger a canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:4.0.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Flux OCIRepository for Flagger Load Tester\nDESCRIPTION: Defines a Flux OCIRepository resource for the Flagger load tester Kustomize overlays stored in an OCI registry.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-with-flux.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: flagger-loadtester\n  namespace: apps\nspec:\n  interval: 6h # scan for new versions every six hours\n  url: oci://ghcr.io/fluxcd/flagger-manifests\n  ref:\n    semver: 1.x # update to the latest version \n  verify: # verify the artifact signature with Cosign keyless\n    provider: cosign\n```\n\n----------------------------------------\n\nTITLE: Executing into Load Tester Pod\nDESCRIPTION: Command to gain interactive shell access to the Flagger load tester deployment pod for running test commands.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it deploy/flagger-loadtester bash\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration in Bash\nDESCRIPTION: Bash command to apply the Canary custom resource configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Sample Application with Horizontal Pod Autoscaler\nDESCRIPTION: Applies the podinfo sample application with its Horizontal Pod Autoscaler from the Flagger GitHub repository. This deployment will be used for demonstrating canary deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Installing Load Testing Service for Canary Analysis\nDESCRIPTION: Command to install a load testing service that will generate traffic during the canary analysis process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod for Testing\nDESCRIPTION: Command to execute into the load tester pod's shell, which allows manually running commands to test the deployment's behavior.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xx-xx sh\n```\n\n----------------------------------------\n\nTITLE: Generating Flagger Yaml with Helm Template\nDESCRIPTION: These commands fetch the Flagger Helm chart, generate the YAML using helm template, and apply it to the cluster using kubectl.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# generate\nhelm fetch --untar --untardir . flagger/flagger &&\nhelm template flagger ./flagger \\\n--namespace=istio-system \\\n--set metricsServer=http://prometheus.istio-system:9090 \\\n> flagger.yaml\n\n# apply\nkubectl apply -f flagger.yaml\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Command to update the container image, triggering a canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: Command to apply the podinfo canary configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Metrics Configuration in YAML for Flagger v1beta1\nDESCRIPTION: This snippet demonstrates how to update the metrics configuration in YAML for Flagger v1beta1. It shows the new format for specifying thresholds using thresholdRange instead of the deprecated threshold field.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/upgrade-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n- name: request-success-rate\n  thresholdRange:\n    min: 99\n  interval: 1m\n- name: request-duration\n  thresholdRange:\n    max: 500\n  interval: 1m\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment by Updating Container Image\nDESCRIPTION: Command to update the container image of the podinfo deployment, which triggers a canary deployment process managed by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod\nDESCRIPTION: Command to execute an interactive shell in the Flagger load tester deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it deploy/flagger-loadtester bash\n```\n\n----------------------------------------\n\nTITLE: Monitoring Canary Deployments\nDESCRIPTION: Command to watch the status of all canary deployments across namespaces.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get canaries --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Flagger Deployment and Pods\nDESCRIPTION: This Helm command demonstrates how to add custom labels to the Flagger deployment and pods during installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n<other parameters> \\\n--set podLabels.<labelName>=<labelValue> \\\n--set deploymentLabels.<labelName>=<labelValue>\n```\n\n----------------------------------------\n\nTITLE: Installing Podinfo Chart as Backend\nDESCRIPTION: Helm command to install the Podinfo chart as a backend service with canary deployment enabled.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i backend flagger/podinfo \\\n--namespace test \\\n--set nameOverride=backend \\\n--set canary.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service\nDESCRIPTION: Command to deploy a load testing service for generating traffic during the analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Finding External Address for Contour Envoy\nDESCRIPTION: Retrieves the external IP address of the Contour Envoy service for configuring DNS records to point a domain to this address.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport ADDRESS=\"$(kubectl -n projectcontour get svc/envoy -ojson \\\n| jq -r \".status.loadBalancer.ingress[].hostname\")\"\necho $ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment with Kubectl\nDESCRIPTION: Command to update a deployment image version to trigger a new canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Verifying HTTPProxy with Kubectl\nDESCRIPTION: Checks the status of HTTPProxy resources in the test namespace to ensure they are valid and active.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test get httpproxies\n\nNAME              FQDN                STATUS\npodinfo                               valid\npodinfo-ingress   app.example.com     valid\n```\n\n----------------------------------------\n\nTITLE: Executing into Load Tester Pod\nDESCRIPTION: This bash command grants shell access into a specified pod within the Kubernetes test namespace to execute HTTP requests that simulate load testing. Requires the name of the pod, kubectl, and permissions to execute within the pod’s namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xx-xx sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod in Kubernetes\nDESCRIPTION: This command allows you to execute an interactive bash session inside the Flagger load tester pod.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it deploy/flagger-loadtester bash\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Testing\nDESCRIPTION: Using 'watch' and 'curl' to continuously generate high latency requests to test Flagger's latency threshold detection.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://app.example.com/delay/1\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod Shell\nDESCRIPTION: Command to execute an interactive shell in the Flagger load tester pod, which will be used to generate test traffic for the canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xx-xx sh\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Flagger Helm Chart\nDESCRIPTION: Remove the Flagger deployment and associated Kubernetes components using Helm delete command\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm delete flagger\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service for Flagger in Kubernetes\nDESCRIPTION: A kubectl command to deploy a load testing service used by Flagger during canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod\nDESCRIPTION: Command to execute a shell in the load tester pod for generating test traffic during canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xx-xx sh\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm repository\nDESCRIPTION: Helm command to add the Flagger chart repository for installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment with Bash\nDESCRIPTION: Command to update the podinfo deployment image to trigger a canary deployment\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Applying Ingress Configuration in Bash\nDESCRIPTION: Bash command to apply the Ingress configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Services for Canary Deployments\nDESCRIPTION: Flagger generates multiple Kubernetes ClusterIP services based on the canary spec service. This ensures proper traffic routing during the canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: podinfo\nspec:\n  type: ClusterIP\n  selector:\n    app: podinfo-primary\n  ports:\n  - name: http\n    port: 9898\n    protocol: TCP\n    targetPort: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: podinfo-primary\nspec:\n  type: ClusterIP\n  selector:\n    app: podinfo-primary\n  ports:\n  - name: http\n    port: 9898\n    protocol: TCP\n    targetPort: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: podinfo-canary\nspec:\n  type: ClusterIP\n  selector:\n    app: podinfo\n  ports:\n  - name: http\n    port: 9898\n    protocol: TCP\n    targetPort: http\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger for App Mesh\nDESCRIPTION: This Helm command installs Flagger for use with AWS App Mesh, configuring the metrics server and other essential parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=appmesh-system \\\n--set crd.create=false \\\n--set meshProvider=appmesh \\\n--set metricsServer=http://appmesh-prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 404 Errors for Custom Metric Testing\nDESCRIPTION: Curl command to generate HTTP 404 errors, used to test Flagger's custom metric analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl -H 'Host: app.example.com' http://gateway-proxy.gloo-system/status/404\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: Adds the Flagger Helm repository to the local Helm installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Monitoring Deployment Scaling\nDESCRIPTION: Command to watch and monitor the scaling of podinfo deployments.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl -n test get deploy podinfo\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Test Namespace\nDESCRIPTION: Bash commands to create a test namespace and enable Istio sidecar injection. This prepares the environment for deploying the test application.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/istio-ab-testing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl label namespace test istio-injection=enabled\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Prometheus Add-on\nDESCRIPTION: Installs Flagger and its Prometheus add-on in the Traefik namespace, configuring it to use Traefik as the mesh provider.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger flagger/flagger \\\n--namespace traefik \\\n--set prometheus.install=true \\\n--set meshProvider=traefik\n```\n\n----------------------------------------\n\nTITLE: Triggering Deployment Update with New Image\nDESCRIPTION: Command to update the deployment with a new container image version, which will trigger Flagger to start the Blue/Green deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger's Canary CRD\nDESCRIPTION: kubectl command to apply the Custom Resource Definition (CRD) for Flagger's Canary resource.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/fluxcd/flagger/main/artifacts/flagger/crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod in Kubernetes\nDESCRIPTION: A kubectl command to execute an interactive shell in the Flagger load tester pod.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xx-xx sh\n```\n\n----------------------------------------\n\nTITLE: Describing Canary Deployment Status\nDESCRIPTION: Displays the current status and events of the canary deployment, showing traffic weights and rollout progress as Flagger manages the deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n test describe canary/podinfo\n\nStatus:\n  Canary Weight:         0\n  Failed Checks:         0\n  Phase:                 Succeeded\nEvents:\n New revision detected! Scaling up podinfo.test\n Waiting for podinfo.test rollout to finish: 0 of 1 updated replicas are available\n Pre-rollout check acceptance-test passed\n Advance podinfo.test canary weight 5\n Advance podinfo.test canary weight 10\n Advance podinfo.test canary weight 15\n Advance podinfo.test canary weight 20\n Advance podinfo.test canary weight 25\n Advance podinfo.test canary weight 30\n Advance podinfo.test canary weight 35\n Advance podinfo.test canary weight 40\n Advance podinfo.test canary weight 45\n Advance podinfo.test canary weight 50\n Copying podinfo.test template spec to podinfo-primary.test\n Waiting for podinfo-primary.test rollout to finish: 1 of 2 updated replicas are available\n Routing all traffic to primary\n Promotion completed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Generating 404 Errors\nDESCRIPTION: This bash command uses `watch` and `curl` to continuously generate HTTP 404 errors at `http://app.example.com/status/400`. This is used to simulate a scenario where the canary deployment is returning errors exceeding a defined threshold.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://app.example.com/status/400\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment for Custom Metrics Testing\nDESCRIPTION: Command to trigger a new canary deployment by updating the podinfo container image to version 6.0.3, which will be used to test the custom 404 metrics configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=ghcr.io/stefanprodan/podinfo:6.0.3\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: Command to add the Flagger Helm repository to your local Helm installation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/loadtester/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace and Deploying Resources\nDESCRIPTION: Commands to create a test namespace and deploy necessary resources for the canary deployment setup.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\nkubectl -n test apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\nkubectl -n test apply -k https://github.com/fluxcd/flagger//kustomize/tester?ref=main\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger's Canary CRD with kubectl\nDESCRIPTION: Applies the Flagger Canary Custom Resource Definition (CRD) to the Kubernetes cluster, which is required for Flagger to function properly.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-alibaba-servicemesh.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/fluxcd/flagger/v1.21.0/artifacts/flagger/crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Prometheus Add-on\nDESCRIPTION: Helm commands to add the Flagger repository and install Flagger with the Prometheus add-on in the same namespace as Apache APISIX, configuring it to use APISIX as the mesh provider.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger flagger/flagger \\\n--namespace apisix \\\n--set prometheus.install=true \\\n--set meshProvider=apisix\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Flagger Version using Kustomize\nDESCRIPTION: This command demonstrates how to install a specific version of Flagger (v1.0.0) for Linkerd by specifying the version in the reference parameter.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build https://github.com/fluxcd/flagger/kustomize/linkerd?ref=v1.0.0 | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Generate HTTP 500 Errors\nDESCRIPTION: Command to generate HTTP 500 errors for testing failure scenarios\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://podinfo-canary.test:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Triggering Another Canary Deployment in Kubernetes\nDESCRIPTION: A kubectl command to update the podinfo container image again, triggering another canary deployment for testing rollback scenarios.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.2\n```\n\n----------------------------------------\n\nTITLE: Deploying Helm Test Runner\nDESCRIPTION: This Bash snippet shows how to deploy a Helm test runner using the Tiller service account in the kube-system namespace. Dependencies include the Flagger Helm repository and a Tiller service account.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/webhooks.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger-helmtester flagger/loadtester \\\n--namespace=kube-system \\\n--set serviceAccountName=tiller\n```\n\n----------------------------------------\n\nTITLE: Monitoring ScaledObject Annotations\nDESCRIPTION: Command to watch how Flagger edits the annotations of the ScaledObject.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwatch \"kubectl get -n test scaledobjects podinfo-so -o=jsonpath='{.metadata.annotations}'\"\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Testing\nDESCRIPTION: Commands to generate HTTP 500 errors and latency for testing Flagger's automated rollback.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhey -z 1m -c 5 -q 5 http://app.example.com/status/500\n\nwatch -n 1 curl http://app.example.com/delay/1\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Flagger Load Tester\nDESCRIPTION: Helm command to uninstall and delete the 'flagger-loadtester' deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/loadtester/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm delete flagger-loadtester\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Command to trigger a new canary deployment by updating the container image.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gatewayapi-progressive-delivery.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.3\n```\n\n----------------------------------------\n\nTITLE: Defining Flux Kustomization for Flagger Load Tester Deployment\nDESCRIPTION: Configures a Flux Kustomization to deploy the Flagger load tester using the Kustomize overlays from the OCIRepository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-with-flux.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: flagger-loadtester\n  namespace: apps\nspec:\n  interval: 6h\n  wait: true\n  timeout: 5m\n  prune: true\n  sourceRef:\n    kind: OCIRepository\n    name: flagger-loadtester\n  path: ./tester\n  targetNamespace: apps\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Gateway TLS with Let's Encrypt\nDESCRIPTION: YAML configurations for setting up Istio Gateway with TLS using Let's Encrypt and cert-manager.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: certmanager.k8s.io/v1alpha1\nkind: Issuer\nmetadata:\n  name: letsencrypt-prod\n  namespace: istio-system\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: email@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    dns01:\n      providers:\n      - name: cloud-dns\n        clouddns:\n          serviceAccountSecretRef:\n            name: cert-manager-credentials\n            key: gcp-dns-admin.json\n          project: my-gcp-project\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: certmanager.k8s.io/v1alpha1\nkind: Certificate\nmetadata:\n  name: istio-gateway\n  namespace: istio-system\nspec:\n  secretName: istio-ingressgateway-certs\n  issuerRef:\n    name: letsencrypt-prod\n  commonName: \"*.example.com\"\n  acme:\n    config:\n    - dns01:\n        provider: cloud-dns\n      domains:\n      - \"*.example.com\"\n      - \"example.com\"\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Canary Testing\nDESCRIPTION: Continuously sends requests with artificial 1-second delay to the canary service to test Flagger's latency-based rollback functionality.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/osm-progressive-delivery.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 0.1 curl http://podinfo-canary.test:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Namespace in Kubernetes\nDESCRIPTION: Creates a new namespace 'test' in the Kubernetes cluster to isolate resources for canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger with Custom Pod and Deployment Labels\nDESCRIPTION: Install Flagger while adding custom labels to pods and deployments for better organization and tracking\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/flagger/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i flagger flagger\\/flagger \\\n<other parameters> \\\n--set podLabels.<labelName>=<labelValue> \\\n--set deploymentLabels.<labelName>=<labelValue>\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment by Updating Image\nDESCRIPTION: Command to update the container image of the deployed application, which triggers Flagger to start the canary deployment process.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:6.0.1\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Flagger with Helm\nDESCRIPTION: This command uninstalls the Flagger release using Helm, removing all associated Kubernetes components.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhelm delete flagger\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Testing in Bash\nDESCRIPTION: Bash command to generate HTTP 500 errors using the hey tool for testing Flagger's rollback functionality.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhey -z 1m -c 5 -q 5 http://app.example.com/status/500\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Load Testing Service URL using Helm Templates\nDESCRIPTION: This snippet defines the URL for Flagger's load testing service using Helm templating. It combines the chart name and release namespace to create a fully qualified domain name for the service.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/loadtester/templates/NOTES.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nFlagger's load testing service is available at http://{{ include \"loadtester.fullname\" . }}.{{ .Release.Namespace }}/\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Deployment\nDESCRIPTION: Demonstrates how to initiate a canary deployment by updating a container image using kubectl\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test set image deployment/podinfo \\\npodinfod=stefanprodan/podinfo:4.0.6\n```\n\n----------------------------------------\n\nTITLE: Installing App Mesh Grafana\nDESCRIPTION: Helm command to install Grafana with App Mesh dashboards for monitoring Flagger's canary releases.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i appmesh-grafana eks/appmesh-grafana \\\n--namespace appmesh-system\n```\n\n----------------------------------------\n\nTITLE: Targeting Mobile Users with User-Agent Header\nDESCRIPTION: YAML configuration for targeting mobile users in A/B testing by matching the User-Agent header prefix.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    user-agent:\n      prefix: \"Mobile\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger's Loadtester\nDESCRIPTION: Command to install Flagger's loadtester in the flagger-system namespace using Helm.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/prometheus-operator.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i loadtester flagger/loadtester \\\n--namespace flagger-system\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Grafana for AWS App Mesh\nDESCRIPTION: Installs the Flagger Grafana chart for AWS App Mesh using Helm. It sets the namespace to appmesh-system and configures the Prometheus URL.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -i flagger-grafana flagger/grafana \\\n--namespace=appmesh-system \\\n--set url=http://appmesh-prometheus:9090\n```\n\n----------------------------------------\n\nTITLE: Deploying Flagger for Open Service Mesh (OSM)\nDESCRIPTION: This Helm command installs Flagger for use with Open Service Mesh (OSM), configuring the metrics server and other essential parameters.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger flagger/flagger \\\n--namespace=osm-system \\\n--set crd.create=false \\\n--set meshProvider=osm \\\n--set metricsServer=http://osm-prometheus.osm-system.svc:7070\n```\n\n----------------------------------------\n\nTITLE: Verifying EKS cluster installation\nDESCRIPTION: Command to verify the successful creation of the EKS cluster by listing the nodes.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Istio Success Rate Prometheus Query\nDESCRIPTION: Prometheus query for measuring request success rate in Istio-enabled services.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsum(\n    rate(\n        istio_requests_total{\n          reporter=\"destination\",\n          destination_workload_namespace=~\"{{ namespace }}\",\n          destination_workload=~\"{{ target }}\",\n          response_code!~\"5.*\"\n        }[{{ interval }}]\n    )\n)\n/\nsum(\n    rate(\n        istio_requests_total{\n          reporter=\"destination\",\n          destination_workload_namespace=~\"{{ namespace }}\",\n          destination_workload=~\"{{ target }}\"\n        }[{{ interval }}]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Service Configuration\nDESCRIPTION: Command to apply the Gloo virtual service configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-virtualservice.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Istio VirtualService for Grafana\nDESCRIPTION: This YAML defines an Istio VirtualService to expose Grafana through a public gateway. It routes traffic for 'grafana.example.com' to the Flagger Grafana service.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: grafana\n  namespace: istio-system\nspec:\n  hosts:\n  - \"grafana.example.com\"\n  gateways:\n  - istio-system/public-gateway\n  http:\n  - route:\n    - destination:\n        host: flagger-grafana\n```\n\n----------------------------------------\n\nTITLE: Targeting Android Users with User-Agent Header\nDESCRIPTION: YAML configuration for targeting Android users in A/B testing by matching the User-Agent header prefix.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nmatch:\n- headers:\n    user-agent:\n      prefix: \"Android\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flagger Helm Repository\nDESCRIPTION: This command adds the Flagger Helm repository to your Helm client, allowing you to install Flagger and its charts from this repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/canary-helm-gitops.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n```\n\n----------------------------------------\n\nTITLE: Running Flagger code formatters and tests\nDESCRIPTION: Commands to format code, run unit tests, and perform necessary code generation after changes.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n\nmake fmt\n\nmake test\n\nmake codegen\n\nmake crd\n```\n\n----------------------------------------\n\nTITLE: Setting up Cloud DNS for Istio\nDESCRIPTION: Commands to create a managed zone in Cloud DNS and configure DNS records for Istio ingress gateway.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dns managed-zones create \\\n--dns-name=\"example.com.\" \\\n--description=\"Istio zone\" \"istio\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport GATEWAY_IP=$(kubectl -n istio-system get svc/istio-ingressgateway -ojson \\\n| jq -r .status.loadBalancer.ingress[0].ip)\n\ngcloud compute addresses create istio-gateway --addresses ${GATEWAY_IP} --region us-central1\n```\n\nLANGUAGE: bash\nCODE:\n```\nDOMAIN=\"example.com\"\n\ngcloud dns record-sets transaction start --zone=istio\n\ngcloud dns record-sets transaction add --zone=istio \\\n--name=\"${DOMAIN}\" --ttl=300 --type=A ${GATEWAY_IP}\n\ngcloud dns record-sets transaction add --zone=istio \\\n--name=\"www.${DOMAIN}\" --ttl=300 --type=A ${GATEWAY_IP}\n\ngcloud dns record-sets transaction add --zone=istio \\\n--name=\"*.${DOMAIN}\" --ttl=300 --type=A ${GATEWAY_IP}\n\ngcloud dns record-sets transaction execute --zone istio\n```\n\n----------------------------------------\n\nTITLE: Creating an EKS cluster with App Mesh access\nDESCRIPTION: eksctl command to create an EKS cluster with 3 nodes, 120GB volume size, and App Mesh access enabled in the us-west-2 region.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neksctl create cluster --name=appmesh \\\n--region=us-west-2 \\\n--nodes 3 \\\n--node-volume-size=120 \\\n--appmesh-access\n```\n\n----------------------------------------\n\nTITLE: Envoy App Mesh Success Rate Query\nDESCRIPTION: Prometheus query for measuring request success rate in App Mesh using Envoy metrics.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsum(\n    rate(\n        envoy_cluster_upstream_rq{\n          kubernetes_namespace=\"{{ namespace }}\",\n          kubernetes_pod_name=~\"{{ target }}\",\n          envoy_response_code!~\"5.*\"\n        }[{{ interval }}]\n    )\n)\n/\nsum(\n    rate(\n        envoy_cluster_upstream_rq{\n          kubernetes_namespace=\"{{ namespace }}\",\n          kubernetes_pod_name=~\"{{ target }}\"\n        }[{{ interval }}]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Load Testing Service\nDESCRIPTION: Installs a load testing service to generate traffic during canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/traefik-progressive-delivery.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Canary Deployments Status\nDESCRIPTION: Example output showing the status of canary deployments across namespaces, with information about their progression status and traffic weights.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nNAMESPACE   NAME      STATUS      WEIGHT   LASTTRANSITIONTIME\ntest        podinfo-2   Progressing   10       2022-11-23T05:00:54Z\ntest        podinfo     Succeeded     0        2022-11-23T06:00:54Z\n```\n\n----------------------------------------\n\nTITLE: Simulating High Latency for Canary Testing\nDESCRIPTION: Curl command to generate high latency requests, used to test Flagger's performance-based rollback.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/gloo-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl -H 'Host: app.example.com' http://gateway-proxy.gloo-system/delay/2\n```\n\n----------------------------------------\n\nTITLE: Accessing Load Tester Pod in Bash\nDESCRIPTION: Bash command to execute an interactive shell in the load tester pod for generating test traffic.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it deploy/flagger-loadtester bash\n```\n\n----------------------------------------\n\nTITLE: Manual testing of Flagger changes\nDESCRIPTION: Steps to manually test Flagger changes by running it locally against a remote cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n istio-system scale deployment/flagger --replicas=0\n\nkubectl -n istio-system port-forward svc/prometheus 9090:9090\n\ngo run cmd/flagger/ -kubeconfig=$HOME/.kube/config \\\n-log-level=info \\\n-mesh-provider=istio \\\n-metrics-server=http://localhost:9090\n```\n\n----------------------------------------\n\nTITLE: Generating Latency for Rollback Testing\nDESCRIPTION: Command to generate high latency by repeatedly calling a delayed endpoint on the canary service, used to test Flagger's response to performance degradation.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch curl http://podinfo-canary.test:9898/delay/1\n```\n\n----------------------------------------\n\nTITLE: Adding EKS repository to Helm\nDESCRIPTION: Command to add the EKS chart repository to Helm for installing EKS-specific charts.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add eks https://aws.github.io/eks-charts\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podinfo Chart\nDESCRIPTION: Helm command to uninstall and delete the Podinfo chart deployment, removing all associated Kubernetes components.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm delete --purge frontend\n```\n\n----------------------------------------\n\nTITLE: Applying Canary Configuration\nDESCRIPTION: Command to apply the Flagger Canary configuration to the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/nginx-progressive-delivery.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./podinfo-canary.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Test Namespace for Canary Deployment\nDESCRIPTION: Command to create a dedicated Kubernetes namespace for testing canary deployments with Flagger and APISIX.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns test\n```\n\n----------------------------------------\n\nTITLE: Applying Grafana VirtualService\nDESCRIPTION: This command applies the Grafana VirtualService YAML file to the Kubernetes cluster, enabling the Istio routing for Grafana.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./grafana-virtual-service.yaml\n```\n\n----------------------------------------\n\nTITLE: Load Tester Access Command\nDESCRIPTION: Command to execute into the load tester pod for running tests\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n test exec -it flagger-loadtester-xx-xx sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Splunk Authentication Secret\nDESCRIPTION: This YAML snippet creates a Kubernetes Secret containing the Splunk authentication token needed to access the Splunk Observability API. The token is stored in the 'sf_token_key' field.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: splunk\n  namespace: istio-system\ndata:\n  sf_token_key: your-access-token\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Helm\nDESCRIPTION: Commands to install Helm and set up Tiller with appropriate permissions in the Kubernetes cluster.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nbrew install kubernetes-helm\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system create sa tiller\n\nkubectl create clusterrolebinding tiller-cluster-rule \\\n--clusterrole=cluster-admin \\\n--serviceaccount=kube-system:tiller\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm init --service-account tiller\n```\n\n----------------------------------------\n\nTITLE: Deploying Podinfo and HPA using Kustomize\nDESCRIPTION: This command applies a Kustomize configuration to deploy the Podinfo application and its associated Horizontal Pod Autoscaler.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/fluxcd/flagger//kustomize/podinfo?ref=main\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Flagger Service in Kubernetes\nDESCRIPTION: This command sets up port forwarding for the Flagger service in Kubernetes. It maps local port 3000 to port 80 of the service in the specified namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/templates/NOTES.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n {{ .Release.Namespace }} port-forward svc/{{ .Release.Name }} 3000:80\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace for Knative Service in Kubernetes\nDESCRIPTION: A kubectl command to create a new namespace called 'test' for deploying Knative Services.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/knative-progressive-delivery.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace test\n```\n\n----------------------------------------\n\nTITLE: Ingress Configuration\nDESCRIPTION: YAML configuration for setting up NGINX ingress with Linkerd header rewriting\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: podinfo\n  namespace: test\n  labels:\n    app: podinfo\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    nginx.ingress.kubernetes.io/configuration-snippet: |\n      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:9898;\n      proxy_hide_header l5d-remote-ip;\n      proxy_hide_header l5d-server-id;\nspec:\n  rules:\n    - host: app.example.com\n      http:\n        paths:\n          - backend:\n              serviceName: podinfo\n              servicePort: 9898\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana via port forwarding\nDESCRIPTION: kubectl command to set up port forwarding for accessing the Grafana dashboard on localhost:3000.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n appmesh-system port-forward svc/appmesh-grafana 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Helm on MacOS\nDESCRIPTION: Command to install Helm v3 using Homebrew on MacOS.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install helm\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Flagger Grafana\nDESCRIPTION: Removes the Flagger Grafana deployment and associated Kubernetes components using Helm.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm delete --purge flagger-grafana\n```\n\n----------------------------------------\n\nTITLE: Generating Latency\nDESCRIPTION: Command to introduce artificial latency using curl with a watch interval.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl -H \\\"host: app.example.com\\\" http://apisix-gateway.apisix/delay/1\n```\n\n----------------------------------------\n\nTITLE: NGINX Installation Command\nDESCRIPTION: Helm command to install NGINX ingress controller\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/linkerd-progressive-delivery.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i nginx-ingress stable/nginx-ingress \\\n--namespace ingress-nginx\n```\n\n----------------------------------------\n\nTITLE: Setting up Flagger development environment in Go\nDESCRIPTION: Creates the necessary directory structure and clones the Flagger repository fork for development.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/github.com/fluxcd\ncd $GOPATH/src/github.com/fluxcd\ngit clone https://github.com/YOUR_USERNAME/flagger\ncd flagger\n```\n\n----------------------------------------\n\nTITLE: Changing Replicas for Deployment without HPA in Kubernetes YAML\nDESCRIPTION: To change replicas for a deployment when not using HPA, update the canary deployment with the desired replica count and trigger an analysis by annotating the template.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  replicas: 4  #update replicas\n  template:\n    metadata:\n      annotations:\n        timestamp: \"2022-02-10T14:24:48+0000\" #add annotation to trigger analysis\n```\n\n----------------------------------------\n\nTITLE: Generating Grafana Yaml with Helm Template\nDESCRIPTION: These commands fetch the Grafana Helm chart, generate the YAML using helm template, and apply it to the cluster using kubectl.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# generate\nhelm fetch --untar --untardir . flagger/grafana &&\nhelm template flagger-grafana ./grafana \\\n--namespace=istio-system \\\n> flagger-grafana.yaml\n\n# apply\nkubectl apply -f flagger-grafana.yaml\n```\n\n----------------------------------------\n\nTITLE: Flagger Rollback Logs\nDESCRIPTION: Log output showing the progression of a failed canary deployment and subsequent rollback.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/apisix-progressive-delivery.md#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n apisix logs deploy/flagger -f | jq .msg\n\n\"New revision detected! Scaling up podinfo.test\"\n\"canary deployment podinfo.test not ready: waiting for rollout to finish: 0 of 1 (readyThreshold 100%) updated replicas are available\"\n\"Starting canary analysis for podinfo.test\"\n\"Advance podinfo.test canary weight 10\"\n\"Halt podinfo.test advancement success rate 0.00% < 99%\"\n\"Halt podinfo.test advancement success rate 26.76% < 99%\"\n\"Halt podinfo.test advancement success rate 34.19% < 99%\"\n\"Halt podinfo.test advancement success rate 37.32% < 99%\"\n\"Halt podinfo.test advancement success rate 39.04% < 99%\"\n\"Halt podinfo.test advancement success rate 40.13% < 99%\"\n\"Halt podinfo.test advancement success rate 48.28% < 99%\"\n\"Halt podinfo.test advancement success rate 50.35% < 99%\"\n\"Halt podinfo.test advancement success rate 56.92% < 99%\"\n\"Halt podinfo.test advancement success rate 67.70% < 99%\"\n\"Rolling back podinfo.test failed checks threshold reached 10\"\n\"Canary failed! Scaling down podinfo.test\"\n```\n\n----------------------------------------\n\nTITLE: Installing eksctl on MacOS using Homebrew\nDESCRIPTION: Commands to install eksctl, a CLI tool for creating and managing EKS clusters, using Homebrew on MacOS.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap weaveworks/tap\nbrew install weaveworks/tap/eksctl\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Grafana with Custom Values File\nDESCRIPTION: Shows how to install Flagger Grafana using a custom values YAML file with Helm.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/grafana/README.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhelm install flagger/grafana --name flagger-grafana -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Flagger integration tests with Kubernetes Kind\nDESCRIPTION: Steps to set up a Kind cluster, build and load the Flagger image, and run integration tests.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster\n\nmake build\ndocker build -t test/flagger:latest .\nkind load docker-image test/flagger:latest\n\n./test/istio/run.sh\n```\n\n----------------------------------------\n\nTITLE: Building Flagger and load tester binaries\nDESCRIPTION: Commands to download Go modules and build the Flagger and load tester binaries.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download\n\nmake build\n\nmake loadtester-build\n```\n\n----------------------------------------\n\nTITLE: Installing Metrics Server for HPA\nDESCRIPTION: Helm command to install the Metrics Server for Horizontal Pod Autoscaling in the kube-system namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i metrics-server stable/metrics-server \\\n--namespace kube-system \\\n--set args[0]=--kubelet-preferred-address-types=InternalIP\n```\n\n----------------------------------------\n\nTITLE: Deploying Helm Test Runner Using Helm in Bash\nDESCRIPTION: Demonstrates using Helm CLI commands to deploy the Flagger Helm test runner service in the 'kube-system' namespace. This setup uses the 'tiller' service account and makes use of a custom Helm repository.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kubernetes-blue-green.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flagger https://flagger.app\n\nhelm upgrade -i flagger-helmtester flagger/loadtester \\\n--namespace=kube-system \\\n--set serviceAccountName=tiller\n```\n\n----------------------------------------\n\nTITLE: Flagger Changelog Markdown Content\nDESCRIPTION: Markdown formatted changelog documenting the evolution of Flagger features and fixes across multiple versions, including breaking changes, new capabilities, and bug fixes.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### Fixes\n\n- Reject deployment if the pod label selector doesn't match `app: <DEPLOYMENT_NAME>` [#43](https://github.com/fluxcd/flagger/pull/43)\n\n## 0.5.0 (2019-01-30)\n\nTrack changes in ConfigMaps and Secrets [#37](https://github.com/fluxcd/flagger/pull/37)\n\n#### Features\n\n- Promote configmaps and secrets changes from canary to primary\n- Detect changes in configmaps and/or secrets and (re)start canary analysis\n- Add configs checksum to Canary CRD status\n- Create primary configmaps and secrets at bootstrap\n- Scan canary volumes and containers for configmaps and secrets\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch for Flagger in Bash\nDESCRIPTION: Creates a new Git branch for a Flagger release version. This is the first step in the release process for Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/release-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release-2.0.0\n```\n\n----------------------------------------\n\nTITLE: Signing Git commits for Flagger contributions\nDESCRIPTION: Explains how to sign commits to certify contribution rights according to the DCO.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/dev-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Verifying metrics API\nDESCRIPTION: Command to check if the metrics API is reporting CPU and memory usage for pods in the kube-system namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system top pods\n```\n\n----------------------------------------\n\nTITLE: Configuring kubectl Credentials and Cluster Admin Role\nDESCRIPTION: Commands to set up kubectl credentials and create a cluster admin role binding.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters get-credentials istio\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create clusterrolebinding \"cluster-admin-$(whoami)\" \\\n--clusterrole=cluster-admin \\\n--user=\"$(gcloud config get-value core/account)\"\n```\n\n----------------------------------------\n\nTITLE: Tagging Flagger Release in Bash\nDESCRIPTION: Creates a new release tag for Flagger using Make. This command is executed on the main branch after all release changes have been merged.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/release-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake release\n```\n\n----------------------------------------\n\nTITLE: Git DCO Signature Format Example\nDESCRIPTION: Example showing the required format for signing off commits with Developer Certificate of Origin (DCO) in Git.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSigned-off-by: Jane Doe <jane.doe@example.com>\n```\n\n----------------------------------------\n\nTITLE: Configuring SMI Provider in Canary Object\nDESCRIPTION: This YAML snippet shows how to configure the SMI (Service Mesh Interface) provider in a Flagger Canary object. The `provider` field within the `spec` section is used to specify the SMI version to be used for traffic splitting.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: flagger.app/v1beta1\nkind: Canary\nmetadata:\n  name: my-canary\nspec:\n  provider: \\\"smi:v1alpha3\\\" # or \\\"smi:v1alpha2\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating App Mesh system namespace\nDESCRIPTION: kubectl command to create the appmesh-system namespace for App Mesh components.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-eks-appmesh.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns appmesh-system\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes and Cloud DNS Services in GCP\nDESCRIPTION: Commands to enable the Kubernetes and Cloud DNS services for the GCP project.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngcloud services enable container.googleapis.com\ngcloud services enable dns.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs During Canary Rollback\nDESCRIPTION: This command displays the Flagger logs, showing the progression and eventual rollback of a failed canary deployment.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/appmesh-progressive-delivery.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n appmesh-system logs deploy/flagger -f | jq .msg\n\nNew revision detected! progressing canary analysis for podinfo.test\nPre-rollout check acceptance-test passed\nAdvance podinfo.test canary weight 5\nAdvance podinfo.test canary weight 10\nAdvance podinfo.test canary weight 15\nHalt podinfo.test advancement success rate 69.17% < 99%\nHalt podinfo.test advancement success rate 61.39% < 99%\nHalt podinfo.test advancement success rate 55.06% < 99%\nHalt podinfo.test advancement request duration 1.20s > 0.5s\nHalt podinfo.test advancement request duration 1.45s > 0.5s\nRolling back podinfo.test failed checks threshold reached 5\nCanary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Removing Flagger Canary CRD\nDESCRIPTION: This kubectl command removes the Flagger Canary Custom Resource Definition, which will delete all objects owned by Flagger.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-kubernetes.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nkubectl delete crd canaries.flagger.app\n```\n\n----------------------------------------\n\nTITLE: Viewing Flagger Logs During Rollback\nDESCRIPTION: Command to stream and format Flagger logs to observe the canary analysis and automated rollback process when failures are detected.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/contour-progressive-delivery.md#2025-04-21_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nkubectl -n projectcontour logs deploy/flagger -f | jq .msg\n\nNew revision detected! progressing canary analysis for podinfo.test\nPre-rollout check acceptance-test passed\nAdvance podinfo.test canary weight 5\nAdvance podinfo.test canary weight 10\nAdvance podinfo.test canary weight 15\nHalt podinfo.test advancement success rate 69.17% < 99%\nHalt podinfo.test advancement success rate 61.39% < 99%\nHalt podinfo.test advancement success rate 55.06% < 99%\nHalt podinfo.test advancement request duration 1.20s > 500ms\nHalt podinfo.test advancement request duration 1.45s > 500ms\nRolling back podinfo.test failed checks threshold reached 5\nCanary failed! Scaling down podinfo.test\n```\n\n----------------------------------------\n\nTITLE: Displaying Podinfo Release Deployment Message in Helm\nDESCRIPTION: Template code that displays a deployment success message including the release name using Helm templating syntax.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/podinfo/templates/NOTES.txt#2025-04-21_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\npodinfo {{ .Release.Name }} deployed!\n```\n\n----------------------------------------\n\nTITLE: Installing KEDA using Helm\nDESCRIPTION: Commands to add the KEDA Helm repository and install KEDA in a dedicated namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/keda-scaledobject.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kedacore https://kedacore.github.io/charts\nkubectl create namespace keda\nhelm install keda kedacore/keda --namespace keda\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Cluster with Istio Add-on\nDESCRIPTION: Bash script to create a GKE cluster with Istio add-on enabled, using the latest Kubernetes version and specific node configuration.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nK8S_VERSION=$(gcloud container get-server-config --format=json \\\n| jq -r '.validMasterVersions[0]')\n\ngcloud beta container clusters create istio \\\n--cluster-version=${K8S_VERSION} \\\n--zone=us-central1-a \\\n--num-nodes=2 \\\n--machine-type=n1-highcpu-4 \\\n--preemptible \\\n--no-enable-cloud-logging \\\n--no-enable-cloud-monitoring \\\n--disk-size=30 \\\n--enable-autorepair \\\n--addons=HorizontalPodAutoscaling,Istio \\\n--istio-config=auth=MTLS_PERMISSIVE\n```\n\n----------------------------------------\n\nTITLE: Configuring Flagger Provider in Canary Resource\nDESCRIPTION: This YAML example shows how to specify a different provider in the Canary custom resource definition. The provider can be set to kubernetes, istio, linkerd, appmesh, nginx, skipper, gloo, or osm.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/kustomize/README.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1alpha3\nkind: Canary\nmetadata:\n  name: app\n  namespace: test\nspec:\n  # can be: kubernetes, istio, linkerd, appmesh, nginx, skipper, gloo, osm\n  # use the kubernetes provider for Blue/Green style deployments\n  provider: nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Keptn MetricTemplate in Flagger\nDESCRIPTION: This YAML snippet defines a MetricTemplate that uses Keptn provider to reference a KeptnMetric for response time monitoring. The template specifies the provider type and the query format to identify the metric resource.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/metrics.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flagger.app/v1beta1\nkind: MetricTemplate\nmetadata:\n  name: response-time\n  namespace: istio-system\nspec:\n  provider:\n    type: keptn\n  query: keptnmetric/my-namespace/response-time/2m/reporter=destination\n```\n\n----------------------------------------\n\nTITLE: Curl Commands for Testing A/B Testing Routes\nDESCRIPTION: This snippet provides example curl commands to test routing based on the defined A/B testing criteria, showcasing how to invoke head-based routes during the canary analysis phase.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/usage/deployment-strategies.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'X-Canary: insider' http://app.example.com\ncurl -b 'canary=always' http://app.example.com\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 500 Errors for Testing Rollback\nDESCRIPTION: Command to generate HTTP 500 errors every second to trigger the failure detection mechanism in the canary analysis.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/kuma-progressive-delivery.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 1 curl http://podinfo-canary.test:9898/status/500\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Project and Region in gcloud CLI\nDESCRIPTION: Commands to set the default project, compute region, and zone in the Google Cloud CLI.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/install/flagger-install-on-google-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngcloud config set project PROJECT_ID\n```\n\nLANGUAGE: text\nCODE:\n```\ngcloud config set compute/region us-central1\ngcloud config set compute/zone us-central1-a\n```\n\n----------------------------------------\n\nTITLE: Installing Flagger Load Tester with Custom Values File\nDESCRIPTION: Helm command to install the Flagger load tester using a custom values YAML file.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/charts/loadtester/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhelm install flagger/loadtester --name flagger-loadtester -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch for Flagger Load Tester in Bash\nDESCRIPTION: Creates a new Git branch for a Flagger load tester release version. This is the first step in the release process for the load tester component.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/dev/release-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release-ld-2.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Load Tester using Helm in Bash\nDESCRIPTION: Bash command to install the Flagger load tester using Helm in the test namespace.\nSOURCE: https://github.com/fluxcd/flagger/blob/main/docs/gitbook/tutorials/skipper-progressive-delivery.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i flagger-loadtester flagger/loadtester \\\n--namespace=test\n```"
  }
]