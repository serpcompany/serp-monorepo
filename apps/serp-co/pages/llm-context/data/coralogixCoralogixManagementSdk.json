[
  {
    "owner": "coralogix",
    "repo": "coralogix-management-sdk",
    "content": "TITLE: Configuring Environment Variables for Coralogix Management SDK\nDESCRIPTION: Sets up the necessary environment variables for using the Coralogix Management SDK. This includes API keys for team and user-level interactions, region selection, and additional variables for running examples locally.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- `CORALOGIX_TEAM_API_KEY`: The API key that is used for all team-level interactions. Note that it has to have appropriate permissions. Read the [docs](https://coralogix.com/docs/api-keys/) for more information.\n- `CORALOGIX_USER_API_KEY`: The API key that is used for all user-level interactions. Note that it has to have appropriate permissions. Read the [docs](https://coralogix.com/docs/api-keys/) for more information.\n- `CORALGOIX_REGION`: The region/cluster to connect to as a shorthand (EU2, AP1, etc. read more [here](https://coralogix.com/docs/coralogix-domain/)). \n\nFurthermore, if you want to run the examples locally, you're going to to have set the following environment variables:\n- `AWS_REGION`: The aws region that you wanna use in the examples, eg. `eu-north-1`.\n- `METRICS_BUCKET`: The name of the S3 bucket that you want to use for the archive-metrics example.\n- `LOGS_BUCKET`: The name of the S3 bucket that you want to use for the archive-logs example.\n```\n\n----------------------------------------\n\nTITLE: Creating Coralogix Action Client in Rust\nDESCRIPTION: Example demonstrating how to initialize a Coralogix ActionsClient and create a new action. Shows authentication setup and action configuration with various parameters including URL, visibility settings, and application targeting.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/rust/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet client = ActionsClient::new(\n    AuthContext::from_env(),\n    CoralogixRegion::from_env().unwrap(),\n)?\n\nlet _ = client.create(Action {\n    name: Some(\"google search action\".to_string()),\n    url: Some(\"https://www.google.com/search?q={{$p.selected_value}}\".to_string()),\n    is_private: Some(false),\n    source_type: SourceType::Log.into(),\n    application_names: vec![\"app\".to_string()],\n    subsystem_names: vec![\"sub\".to_string()],\n    id: None,\n    is_hidden: Some(false),\n    created_by: Some(\"someone@mycompany.com\".into()),\n}).await?\n```\n\n----------------------------------------\n\nTITLE: Protobuf Extension Conflict Resolution\nDESCRIPTION: Error message and resolution for handling conflicting protobuf extensions between different Coralogix API packages. Shows how to use ldflags to convert errors to warnings.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npanic: proto: extension number 5000 is already registered on message google.protobuf.MethodOptions\n\tpreviously from: \"github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2\"\n\tcurrently from:  \"github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/logs2metrics/v2\"\nSee https://protobuf.dev/reference/go/faq#namespace-conflict\n```\n\nLANGUAGE: shell\nCODE:\n```\n-ldflags \"-X google.golang.org/protobuf/reflect/protoregistry.conflictPolicy=warn\"\n```\n\n----------------------------------------\n\nTITLE: Running the Terraform Migration Script in Bash\nDESCRIPTION: The command to execute the Terraform migration script which will guide the user through an interactive process to migrate Coralogix resources to newer provider versions.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/tools/terraform-importer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./generate_and_migrate.sh\n```\n\n----------------------------------------\n\nTITLE: Example Script Execution Logs\nDESCRIPTION: A sample of the logs displayed during script execution, showing the various steps from creating the migration folder to completing the terraform operations.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/tools/terraform-importer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n2024-12-01 15:45:22 [INFO] Creating migration folder: ./alert_migration\n2024-12-01 15:45:22 [INFO] Running generate_imports.go with -type...\n2024-12-01 15:45:22 [INFO] Successfully generated imports.tf at ./alert_migration.\n2024-12-01 15:45:22 [INFO] Generating provider configuration in ./alert_migration/provider.tf...\n2024-12-01 15:45:22 [INFO] Provider configuration generated in ./alert_migration/provider.tf.\n2024-12-01 15:45:22 [INFO] Initializing Terraform in ./alert_migration...\n2024-12-01 15:45:22 [INFO] Running terraform plan in ./alert_migration...\n...\n2024-12-01 15:45:22 [INFO] Terraform apply completed.\n2024-12-01 15:45:22 [INFO] Cleanup completed.\n2024-12-01 15:45:22 [INFO] Script completed successfully.\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Commands in Shell\nDESCRIPTION: Shell commands for building the SDK and running example tests using cargo.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/rust/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\ncd examples && cargo test\ncd examples && cargo test -p archive-logs\n```\n\n----------------------------------------\n\nTITLE: Example Terminal Interaction for Migration Type Selection\nDESCRIPTION: Example output showing the interactive prompt for selecting the migration type, which can be either based on a folder containing terraform.tfstate or based on a specific resource name.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/tools/terraform-importer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] Select the migration type:\n[INFO] 1) Migrate based on a folder containing terraform.tfstate\n[INFO] 2) Migrate based on a specific resource name\nEnter your choice (1 or 2): 2\n```\n\n----------------------------------------\n\nTITLE: Provider Version Specification Prompt\nDESCRIPTION: Example of the prompt asking the user to specify the Terraform provider version to migrate to, with an example format provided.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/tools/terraform-importer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nEnter the Terraform provider version to migrate to (e.g., ~>1.19.0): >=2.0.0\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Tool Versions Configuration\nDESCRIPTION: Defines specific versions of Protocol Buffer compiler (protoc) and Go protocol buffer code generator (protoc-gen-go) required for the project.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/proto-toolchain-versions.txt#2025-04-23_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nprotoc-gen-go=1.34.2\nprotoc=5.28.2\n```\n\n----------------------------------------\n\nTITLE: File Reference for Hooks Installation Script\nDESCRIPTION: Reference to an installation script for setting up git pre-commit and post-commit hooks that help verify code quality and API compatibility.\nSOURCE: https://github.com/coralogix/coralogix-management-sdk/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninstall_hooks.sh\n```"
  }
]