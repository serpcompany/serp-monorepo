[
  {
    "owner": "microsoft",
    "repo": "tsdoc",
    "content": "TITLE: TSDoc Example in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates the use of TSDoc comments within a class. The `getAverage` method includes various TSDoc tags like `@remarks`, `@param`, and `@returns`, showcasing how to document function parameters, return values, and provide additional remarks. This example highlights the TSDoc syntax used for documenting TypeScript code.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Statistics {\n  /**\n   * Returns the average of two numbers.\n   *\n   * @remarks\n   * This method is part of the {@link core-library#Statistics | Statistics subsystem}.\n   *\n   * @param x - The first input number\n   * @param y - The second input number\n   * @returns The arithmetic mean of `x` and `y`\n   *\n   * @beta\n   */\n  public static getAverage(x: number, y: number): number {\n    return (x + y) / 2.0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Applying TSDoc Configuration using TypeScript API\nDESCRIPTION: This TypeScript code demonstrates how to load a tsdoc.json file for a project using the @microsoft/tsdoc-config package and apply its settings to a TSDoc parser. It imports required classes, locates the nearest configuration file, checks for and handles errors, and configures TSDocParser with custom tags. Dependencies include NodeJS, @microsoft/tsdoc, and @microsoft/tsdoc-config. Input is a path to a TypeScript source file; output is a configured TSDocParser instance.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc-config/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as path from 'path';\nimport { TSDocParser, TSDocConfiguration } from '@microsoft/tsdoc';\nimport { TSDocConfigFile } from '@microsoft/tsdoc-config';\n\n// Sample source file to be parsed\nconst mySourceFile: string = 'my-project/src/example.ts';\n\n// Load the nearest config file, for example `my-project/tsdoc.json`\nconst tsdocConfigFile: TSDocConfigFile = TSDocConfigFile.loadForFolder(path.dirname(mySourceFile));\nif (tsdocConfigFile.hasErrors) {\n  // Report any errors\n  console.log(tsdocConfigFile.getErrorSummary());\n}\n\n// Use the TSDocConfigFile to configure the parser\nconst tsdocConfiguration: TSDocConfiguration = new TSDocConfiguration();\ntsdocConfigFile.configureParser(tsdocConfiguration);\nconst tsdocParser: TSDocParser = new TSDocParser(tsdocConfiguration);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tags in TSDoc Configuration JSON\nDESCRIPTION: This snippet shows a minimal example of a tsdoc.json file used to define custom TSDoc tags for a TypeScript project. The file follows the tsdoc.schema.json schema and includes a tagDefinitions array, where each object specifies a custom tag with a tagName and its syntaxKind. No external dependencies are required for this file, but the consuming tool should support the TSDoc configuration format. The input is a JSON object; the output is consumed by tooling leveraging TSDoc.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc-config/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json\",\n  \"tagDefinitions\": [\n    {\n      \"tagName\": \"@myTag\",\n      \"syntaxKind\": \"modifier\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example package.json Configuration\nDESCRIPTION: This snippet provides an example of a package.json file, showcasing the necessary dependencies for integrating eslint-plugin-tsdoc within a TypeScript project. It lists dependencies for @typescript-eslint, eslint, and typescript itself, alongside a lint script for running ESLint.  It's a standard setup for TypeScript projects using ESLint.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"~2.6.1\",\n    \"@typescript-eslint/parser\": \"~2.6.1\",\n    \"eslint\": \"~6.6.0\",\n    \"typescript\": \"~3.7.2\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint -f unix \\\"src/**/*.{ts,tsx}\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TSDocParser Class Declaration\nDESCRIPTION: Defines the `TSDocParser` class responsible for parsing TSDoc comments. It accepts an optional `TSDocConfiguration` in its constructor.  It provides methods `parseRange` and `parseString` to parse TSDoc from a text range or a string, respectively. The parsed result is encapsulated in a `ParserContext` object.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class TSDocParser {\n    constructor(configuration?: TSDocConfiguration);\n    readonly configuration: TSDocConfiguration;\n    // (undocumented)\n    parseRange(range: TextRange): ParserContext;\n    // (undocumented)\n    parseString(text: string): ParserContext;\n}\n```\n\n----------------------------------------\n\nTITLE: TSDocEmitter Class Declaration\nDESCRIPTION: Defines the `TSDocEmitter` class responsible for rendering TSDoc comments, declaration references, and HTML tags into a string builder.  It includes methods for rendering various DocNode types.  It exposes a readonly `eol` property for end-of-line characters.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class TSDocEmitter {\n    // (undocumented)\n    readonly eol: string;\n    // (undocumented)\n    renderComment(output: IStringBuilder, docComment: DocComment): void;\n    // (undocumented)\n    renderDeclarationReference(output: IStringBuilder, declarationReference: DocDeclarationReference): void;\n    // (undocumented)\n    renderHtmlTag(output: IStringBuilder, htmlTag: DocHtmlStartTag | DocHtmlEndTag): void;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Sequence and TSDoc Configuration Classes - TypeScript\nDESCRIPTION: This snippet defines TokenSequence and TSDocConfiguration classes, which manage the sequence of tokens for a doc comment and configuration for tag and message handling. Methods include creating and manipulating token slices, determining range, and configuring tag definitions or HTML support. Dependencies include token, tag definition, and parser context types. These classes facilitate adjusting tag support, retrieving tag/message info, and customizing parsing behaviors with well-defined APIs.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TokenSequence {\n    constructor(parameters: ITokenSequenceParameters);\n    static createEmpty(parserContext: ParserContext): TokenSequence;\n    get endIndex(): number;\n    getContainingTextRange(): TextRange;\n    getNewSequence(startIndex: number, endIndex: number): TokenSequence;\n    isEmpty(): boolean;\n    readonly parserContext: ParserContext;\n    get startIndex(): number;\n    get tokens(): ReadonlyArray<Token>;\n    toString(): string;\n    }\n\nexport class TSDocConfiguration {\n    constructor();\n    addTagDefinition(tagDefinition: TSDocTagDefinition): void;\n    addTagDefinitions(tagDefinitions: ReadonlyArray<TSDocTagDefinition>, supported?: boolean | undefined): void;\n    get allTsdocMessageIds(): ReadonlyArray<TSDocMessageId>;\n    clear(noStandardTags?: boolean): void;\n    get docNodeManager(): DocNodeManager;\n    isHtmlElementSupported(htmlTag: string): boolean;\n    isKnownMessageId(messageId: TSDocMessageId | string): boolean;\n    isTagSupported(tagDefinition: TSDocTagDefinition): boolean;\n    setSupportedHtmlElements(htmlTags: string[]): void;\n    setSupportForTag(tagDefinition: TSDocTagDefinition, supported: boolean): void;\n    setSupportForTags(tagDefinitions: ReadonlyArray<TSDocTagDefinition>, supported: boolean): void;\n    get supportedHtmlElements(): string[];\n    get supportedTagDefinitions(): ReadonlyArray<TSDocTagDefinition>;\n    get tagDefinitions(): ReadonlyArray<TSDocTagDefinition>;\n\n```\n\n----------------------------------------\n\nTITLE: Running the Advanced Demo of api-demo\nDESCRIPTION: Shell command to execute the advanced demo, which uses the TypeScript compiler to parse source files and extract comments, demonstrating custom TSDoc tag configuration.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run advanced\n```\n\n----------------------------------------\n\nTITLE: Implementing String Builder, Text Range, and Token Classes - TypeScript\nDESCRIPTION: This snippet implements utility and foundational classes: StringBuilder for string composition with append and toString, TextRange for representing and slicing ranges in source buffers, and Token for individual lexical tokens. Their methods permit string construction, range calculation, location mapping, token kind assignment, and debug representation. Inputs are source strings, indices, and token/kind values; outputs are objects encapsulating state and behaviors needed by higher-level parsing logic.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class StringBuilder implements IStringBuilder {\n    constructor();\n    append(text: string): void;\n    toString(): string;\n}\n\nexport class TextRange {\n    readonly buffer: string;\n    static readonly empty: TextRange;\n    readonly end: number;\n    static fromString(buffer: string): TextRange;\n    static fromStringRange(buffer: string, pos: number, end: number): TextRange;\n    getDebugDump(posDelimiter: string, endDelimiter: string): string;\n    getLocation(index: number): ITextLocation;\n    getNewRange(pos: number, end: number): TextRange;\n    isEmpty(): boolean;\n    get length(): number;\n    readonly pos: number;\n    toString(): string;\n    }\n\nexport class Token {\n    constructor(kind: TokenKind, range: TextRange, line: TextRange);\n    readonly kind: TokenKind;\n    readonly line: TextRange;\n    readonly range: TextRange;\n    toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Modifier Tag and Tag Definition Classes - TypeScript\nDESCRIPTION: This snippet details the StandardModifierTagSet and StandardTags classes, which extend modifier tag functionality and aggregate standard doc tag definitions. They provide convenience methods for quick checks (such as isAlpha, isInternal, etc.) and expose statically defined tag definitions for reuse. These classes expect tag definitions and enable consistent handling of TSDoc modifier tags and their semantics; they are tightly integrated with the tag parsing/validation subsystems.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class StandardModifierTagSet extends ModifierTagSet {\n    isAlpha(): boolean;\n    isBeta(): boolean;\n    isEventProperty(): boolean;\n    isExperimental(): boolean;\n    isInternal(): boolean;\n    isOverride(): boolean;\n    isPackageDocumentation(): boolean;\n    isPublic(): boolean;\n    isReadonly(): boolean;\n    isSealed(): boolean;\n    isVirtual(): boolean;\n}\n\nexport class StandardTags {\n    static allDefinitions: ReadonlyArray<TSDocTagDefinition>;\n    static readonly alpha: TSDocTagDefinition;\n    static readonly beta: TSDocTagDefinition;\n    static readonly decorator: TSDocTagDefinition;\n    static readonly defaultValue: TSDocTagDefinition;\n    static readonly deprecated: TSDocTagDefinition;\n    static readonly eventProperty: TSDocTagDefinition;\n    static readonly example: TSDocTagDefinition;\n    static readonly experimental: TSDocTagDefinition;\n    static readonly inheritDoc: TSDocTagDefinition;\n    static readonly internal: TSDocTagDefinition;\n    static readonly label: TSDocTagDefinition;\n    static readonly link: TSDocTagDefinition;\n    static readonly override: TSDocTagDefinition;\n    static readonly packageDocumentation: TSDocTagDefinition;\n    static readonly param: TSDocTagDefinition;\n    static readonly privateRemarks: TSDocTagDefinition;\n    static readonly public: TSDocTagDefinition;\n    static readonly readonly: TSDocTagDefinition;\n    static readonly remarks: TSDocTagDefinition;\n    static readonly returns: TSDocTagDefinition;\n    static readonly sealed: TSDocTagDefinition;\n    static readonly see: TSDocTagDefinition;\n    static readonly throws: TSDocTagDefinition;\n    static readonly typeParam: TSDocTagDefinition;\n    static readonly virtual: TSDocTagDefinition;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Parser Context and Message Classes - TypeScript\nDESCRIPTION: This snippet defines classes for parsing context and individual parser messages, including constructors and principal properties. Dependencies include TSDocConfiguration, DocComment, TextRange, and others, with methods exposing metadata like lines, configuration, source range, and logging facilities. Expected input consists of configuration options, token arrays, and message parameters; output includes context and error/message representation for use in upstream processing. These classes are pivotal for organizing sequenced parsing state and error tracking per parse.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ParserContext {\n    constructor(configuration: TSDocConfiguration, sourceRange: TextRange);\n    commentRange: TextRange;\n    readonly configuration: TSDocConfiguration;\n    readonly docComment: DocComment;\n    lines: TextRange[];\n    readonly log: ParserMessageLog;\n    readonly sourceRange: TextRange;\n    tokens: Token[];\n}\n\nexport class ParserMessage {\n    constructor(parameters: IParserMessageParameters);\n    readonly docNode: DocNode | undefined;\n    readonly messageId: TSDocMessageId;\n    get text(): string;\n    readonly textRange: TextRange;\n    readonly tokenSequence: TokenSequence | undefined;\n    toString(): string;\n    readonly unformattedText: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parser Message and Context Interfaces - TypeScript\nDESCRIPTION: This snippet defines interfaces relating to parser messages, string building, text locations, token sequencing, and tag definition parameters. Dependencies include types such as DocNode, TSDocMessageId, TextRange, TokenSequence, and ParserContext. Expected inputs are typically parsing diagnostics and structural elements, while outputs are structured message and location data. The interfaces are foundational for diagnostics, error handling, and source mapping functionality within the TSDoc parser ecosystem.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IParserMessageParameters {\n    docNode?: DocNode;\n    messageId: TSDocMessageId;\n    messageText: string;\n    textRange: TextRange;\n    tokenSequence?: TokenSequence;\n}\n\nexport interface IStringBuilder {\n    append(text: string): void;\n    toString(): string;\n}\n\nexport interface ITextLocation {\n    column: number;\n    line: number;\n}\n\nexport interface ITokenSequenceParameters {\n    endIndex: number;\n    parserContext: ParserContext;\n    startIndex: number;\n}\n\nexport interface ITSDocTagDefinitionParameters {\n    allowMultiple?: boolean;\n    syntaxKind: TSDocTagSyntaxKind;\n    tagName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ExcerptKind Enum in TypeScript\nDESCRIPTION: Exports a public enum `ExcerptKind` that lists specific types of text excerpts captured during TSDoc parsing. These correspond to distinct syntactic elements like delimiters, tag names, code content, identifiers, etc., allowing for more granular access to the original source text structure.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum ExcerptKind {\n    // (undocumented)\n    BlockTag = \"BlockTag\",\n    // (undocumented)\n    CodeSpan_ClosingDelimiter = \"CodeSpan_ClosingDelimiter\",\n    // (undocumented)\n    CodeSpan_Code = \"CodeSpan_Code\",\n    // (undocumented)\n    CodeSpan_OpeningDelimiter = \"CodeSpan_OpeningDelimiter\",\n    // (undocumented)\n    DeclarationReference_ImportHash = \"DeclarationReference_ImportHash\",\n    // (undocumented)\n    DeclarationReference_ImportPath = \"DeclarationReference_ImportPath\",\n    // (undocumented)\n    DeclarationReference_PackageName = \"DeclarationReference_PackageName\",\n    // (undocumented)\n    DocMemberSymbol_LeftBracket = \"DocMemberSymbol_LeftBracket\",\n    // (undocumented)\n    DocMemberSymbol_RightBracket = \"DocMemberSymbol_RightBracket\",\n    ErrorText = \"ErrorText\",\n    // (undocumented)\n    EscapedText = \"EscapedText\",\n    // (undocumented)\n    FencedCode_ClosingFence = \"FencedCode_ClosingFence\",\n    // (undocumented)\n    FencedCode_Code = \"FencedCode_Code\",\n    // (undocumented)\n    FencedCode_Language = \"FencedCode_Language\",\n    // (undocumented)\n    FencedCode_OpeningFence = \"FencedCode_OpeningFence\",\n    // (undocumented)\n    HtmlAttribute_Equals = \"HtmlAttribute_Equals\",\n    // (undocumented)\n    HtmlAttribute_Name = \"HtmlAttribute_Name\",\n    // (undocumented)\n    HtmlAttribute_Value = \"HtmlAttribute_Value\",\n    // (undocumented)\n    HtmlEndTag_ClosingDelimiter = \"HtmlEndTag_ClosingDelimiter\",\n    // (undocumented)\n    HtmlEndTag_Name = \"HtmlEndTag_Name\",\n    // (undocumented)\n    HtmlEndTag_OpeningDelimiter = \"HtmlEndTag_OpeningDelimiter\",\n    // (undocumented)\n    HtmlStartTag_ClosingDelimiter = \"HtmlStartTag_ClosingDelimiter\",\n    // (undocumented)\n    HtmlStartTag_Name = \"HtmlStartTag_Name\",\n    // (undocumented)\n    HtmlStartTag_OpeningDelimiter = \"HtmlStartTag_OpeningDelimiter\",\n    // (undocumented)\n    InlineTag_ClosingDelimiter = \"InlineTag_ClosingDelimiter\",\n    // (undocumented)\n    InlineTag_OpeningDelimiter = \"InlineTag_OpeningDelimiter\",\n    // (undocumented)\n    InlineTag_TagContent = \"InlineTag_TagContent\",\n    // (undocumented)\n    InlineTag_TagName = \"InlineTag_TagName\",\n    // (undocumented)\n    LinkTag_LinkText = \"LinkTag_LinkText\",\n    // (undocumented)\n    LinkTag_Pipe = \"LinkTag_Pipe\",\n    // (undocumented)\n    LinkTag_UrlDestination = \"LinkTag_UrlDestination\",\n    // (undocumented)\n    MemberIdentifier_Identifier = \"MemberIdentifier_Identifier\",\n    // (undocumented)\n    MemberIdentifier_LeftQuote = \"MemberIdentifier_LeftQuote\",\n    // (undocumented)\n    MemberIdentifier_RightQuote = \"MemberIdentifier_RightQuote\",\n    // (undocumented)\n    MemberReference_Colon = \"MemberReference_Colon\",\n    // (undocumented)\n    MemberReference_Dot = \"MemberReference_Dot\",\n    // (undocumented)\n    MemberReference_LeftParenthesis = \"MemberReference_LeftParenthesis\",\n    // (undocumented)\n    MemberReference_RightParenthesis = \"MemberReference_RightParenthesis\",\n    // (undocumented)\n    MemberSelector = \"MemberSelector\",\n    NonstandardText = \"NonstandardText\",\n    // (undocumented)\n    ParamBlock_Hyphen = \"ParamBlock_Hyphen\",\n    // (undocumented)\n    ParamBlock_ParameterName = \"ParamBlock_ParameterName\",\n    // (undocumented)\n    PlainText = \"PlainText\",\n    // (undocumented)\n    SoftBreak = \"SoftBreak\",\n    // (undocumented)\n    Spacing = \"Spacing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring TSDoc AST Node Parameter Interfaces in TypeScript\nDESCRIPTION: Defines a series of TypeScript interfaces, each specifying the expected properties for various TSDoc AST node parameters and their parsed counterparts. Many interfaces inherit from 'IDocNodeParameters' or 'IDocNodeParsedParameters', supporting consistent configuration and parsed status tracking (e.g., 'parsed: true'). Dependencies include types such as 'TSDocConfiguration', 'TokenSequence', and several AST helper types (e.g., 'DocMemberReference'). Fields denote syntax-specific elements of TSDoc nodes (e.g., html attribute spacing, member references, tag names) and corresponding parsed excerpts. Interfaces are designed as type contracts for use in TSDoc parser implementations; they expect as input the relevant configuration and extract token references, while outputting strongly-typed parameter collections for each node.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocDeclarationReferenceParameters extends IDocNodeParameters {\n    // (undocumented)\n    importPath?: string;\n    // (undocumented)\n    memberReferences?: DocMemberReference[];\n    // (undocumented)\n    packageName?: string;\n}\n\n// @public\nexport interface IDocDeclarationReferenceParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    importHashExcerpt?: TokenSequence;\n    // (undocumented)\n    importPathExcerpt?: TokenSequence;\n    // (undocumented)\n    memberReferences?: DocMemberReference[];\n    // (undocumented)\n    packageNameExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterImportHashExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocErrorTextParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    errorLocation: TokenSequence;\n    // (undocumented)\n    errorMessage: string;\n    // (undocumented)\n    messageId: TSDocMessageId;\n    // (undocumented)\n    textExcerpt: TokenSequence;\n}\n\n// @public\nexport interface IDocEscapedTextParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    decodedText: string;\n    // (undocumented)\n    encodedTextExcerpt: TokenSequence;\n    // (undocumented)\n    escapeStyle: EscapeStyle;\n}\n\n// @public\nexport interface IDocExcerptParameters extends IDocNodeParameters {\n    // (undocumented)\n    content: TokenSequence;\n    // (undocumented)\n    excerptKind: ExcerptKind;\n}\n\n// @public\nexport interface IDocFencedCodeParameters extends IDocNodeParameters {\n    // (undocumented)\n    code: string;\n    // (undocumented)\n    language: string;\n}\n\n// @public\nexport interface IDocFencedCodeParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    closingFenceExcerpt: TokenSequence;\n    // (undocumented)\n    codeExcerpt: TokenSequence;\n    // (undocumented)\n    languageExcerpt?: TokenSequence;\n    // (undocumented)\n    openingFenceExcerpt: TokenSequence;\n    // (undocumented)\n    spacingAfterClosingFenceExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterLanguageExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterOpeningFenceExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingBeforeClosingFenceExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocHtmlAttributeParameters extends IDocNodeParameters {\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    spacingAfterEquals?: string;\n    // (undocumented)\n    spacingAfterName?: string;\n    // (undocumented)\n    spacingAfterValue?: string;\n    // (undocumented)\n    value: string;\n}\n\n// @public\nexport interface IDocHtmlAttributeParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    equalsExcerpt: TokenSequence;\n    // (undocumented)\n    nameExcerpt: TokenSequence;\n    // (undocumented)\n    spacingAfterEqualsExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterNameExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterValueExcerpt?: TokenSequence;\n    // (undocumented)\n    valueExcerpt: TokenSequence;\n}\n\n// @public\nexport interface IDocHtmlEndTagParameters extends IDocNodeParameters {\n    // (undocumented)\n    name: string;\n}\n\n// @public\nexport interface IDocHtmlEndTagParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    closingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    nameExcerpt: TokenSequence;\n    // (undocumented)\n    openingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    spacingAfterNameExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocHtmlStartTagParameters extends IDocNodeParameters {\n    // (undocumented)\n    htmlAttributes?: DocHtmlAttribute[];\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    selfClosingTag?: boolean;\n    // (undocumented)\n    spacingAfterName?: string;\n}\n\n// @public\nexport interface IDocHtmlStartTagParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    closingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    htmlAttributes: DocHtmlAttribute[];\n    // (undocumented)\n    nameExcerpt: TokenSequence;\n    // (undocumented)\n    openingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    selfClosingTag: boolean;\n    // (undocumented)\n    spacingAfterNameExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocInheritDocTagParameters extends IDocInlineTagBaseParameters {\n    // (undocumented)\n    declarationReference?: DocDeclarationReference;\n}\n\n// @public\nexport interface IDocInheritDocTagParsedParameters extends IDocInlineTagBaseParsedParameters {\n    // (undocumented)\n    declarationReference?: DocDeclarationReference;\n}\n\n// @public\nexport interface IDocInlineTagBaseParameters extends IDocNodeParameters {\n    // (undocumented)\n    tagName: string;\n}\n\n// @public\nexport interface IDocInlineTagBaseParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    closingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    openingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    spacingAfterTagNameExcerpt?: TokenSequence;\n    // (undocumented)\n    tagName: string;\n    // (undocumented)\n    tagNameExcerpt: TokenSequence;\n}\n\n// @public\nexport interface IDocInlineTagParameters extends IDocInlineTagBaseParameters {\n    // (undocumented)\n    tagContent: string;\n}\n\n// @public\nexport interface IDocInlineTagParsedParameters extends IDocInlineTagBaseParsedParameters {\n    // (undocumented)\n    tagContentExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocLinkTagParameters extends IDocInlineTagBaseParameters {\n    // (undocumented)\n    codeDestination?: DocDeclarationReference;\n    // (undocumented)\n    linkText?: string;\n    // (undocumented)\n    urlDestination?: string;\n}\n\n// @public\nexport interface IDocLinkTagParsedParameters extends IDocInlineTagBaseParsedParameters {\n    // (undocumented)\n    codeDestination?: DocDeclarationReference;\n    // (undocumented)\n    linkTextExcerpt?: TokenSequence;\n    // (undocumented)\n    pipeExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterDestinationExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterLinkTextExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterPipeExcerpt?: TokenSequence;\n    // (undocumented)\n    urlDestinationExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocMemberIdentifierParameters extends IDocNodeParameters {\n    // (undocumented)\n    identifier: string;\n}\n\n// @public\nexport interface IDocMemberIdentifierParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    identifierExcerpt: TokenSequence;\n    // (undocumented)\n    leftQuoteExcerpt?: TokenSequence;\n    // (undocumented)\n    rightQuoteExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocMemberReferenceParameters extends IDocNodeParameters {\n    // (undocumented)\n    hasDot: boolean;\n    // (undocumented)\n    memberIdentifier?: DocMemberIdentifier;\n    // (undocumented)\n    memberSymbol?: DocMemberSymbol;\n    // (undocumented)\n    selector?: DocMemberSelector;\n}\n\n// @public\nexport interface IDocMemberReferenceParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    colonExcerpt?: TokenSequence;\n    // (undocumented)\n    dotExcerpt?: TokenSequence;\n    // (undocumented)\n    leftParenthesisExcerpt?: TokenSequence;\n    // (undocumented)\n    memberIdentifier?: DocMemberIdentifier;\n    // (undocumented)\n    memberSymbol?: DocMemberSymbol;\n    // (undocumented)\n    rightParenthesisExcerpt?: TokenSequence;\n    // (undocumented)\n    selector?: DocMemberSelector;\n    // (undocumented)\n    spacingAfterColonExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterDotExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterLeftParenthesisExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterMemberExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterRightParenthesisExcerpt?: TokenSequence;\n    // (undocumented)\n    spacingAfterSelectorExcerpt?: TokenSequence;\n}\n\n// @public\nexport interface IDocMemberSelectorParameters extends IDocNodeParameters {\n    // (undocumented)\n    selector: string;\n}\n\n// @public\nexport interface IDocMemberSelectorParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    selectorExcerpt: TokenSequence;\n}\n\n// @public\nexport interface IDocMemberSymbolParameters extends IDocNodeParameters {\n    // (undocumented)\n    symbolReference: DocDeclarationReference;\n}\n\n// @public\nexport interface IDocMemberSymbolParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    leftBracketExcerpt: TokenSequence;\n    // (undocumented)\n    rightBracketExcerpt: TokenSequence;\n    // (undocumented)\n    spacingAfterLeftBracketExcerpt?: TokenSequence;\n    // (undocumented)\n    symbolReference: DocDeclarationReference;\n}\n\n// @public\nexport interface IDocNodeContainerParameters extends IDocNodeParameters {\n}\n\n// @public\nexport interface IDocNodeContainerParsedParameters extends IDocNodeParsedParameters {\n}\n\n// @public (undocumented)\nexport interface IDocNodeDefinition {\n    // (undocumented)\n    constructor: DocNodeConstructor;\n    // (undocumented)\n    docNodeKind: string;\n}\n\n// @public\nexport interface IDocNodeParameters {\n    // (undocumented)\n    configuration: TSDocConfiguration;\n}\n\n// @public\nexport interface IDocNodeParsedParameters {\n    // (undocumented)\n    configuration: TSDocConfiguration;\n    parsed: true;\n}\n\n// @public\nexport interface IDocParagraphParameters extends IDocNodeContainerParameters {\n}\n\n// @public\nexport interface IDocParamBlockParameters extends IDocBlockParameters {\n    // (undocumented)\n    parameterName: string;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parsing and Tagging Enums - TypeScript\nDESCRIPTION: This snippet defines enums representing selector types, standardization levels, and token kinds. The enums describe allowed values for selector logic, documentation tag support tiers, and detailed token classification used in parsing. The enums facilitate type safety and clear intent in areas that need discrete state handling; they assume consumption by parsing or tag definition logic.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum SelectorKind {\n    Error = \"error\",\n    Index = \"index\",\n    Label = \"label\",\n    System = \"system\"\n}\n\nexport enum Standardization {\n    Core = \"Core\",\n    Discretionary = \"Discretionary\",\n    Extended = \"Extended\",\n    None = \"None\"\n}\n\nexport enum TokenKind {\n    AsciiWord = 2004,\n    AtSign = 2015,\n    Backslash = 2007,\n    Backtick = 2018,\n    Colon = 2020,\n    Comma = 2021,\n    DollarSign = 2029,\n    DoubleQuote = 2012,\n    EndOfInput = 2001,\n    Equals = 2010,\n    GreaterThan = 2009,\n    Hyphen = 2014,\n    LeftCurlyBracket = 2016,\n    LeftParenthesis = 2025,\n    LeftSquareBracket = 2022,\n    LessThan = 2008,\n    Newline = 2002,\n    Other = 2006,\n    OtherPunctuation = 2005,\n    Period = 2019,\n    Pipe = 2024,\n    Plus = 2028,\n    PoundSymbol = 2027,\n    RightCurlyBracket = 2017,\n    RightParenthesis = 2026,\n    RightSquareBracket = 2023,\n    SingleQuote = 2011,\n    Slash = 2013,\n    Spacing = 2003\n}\n```\n\n----------------------------------------\n\nTITLE: TSDocValidationConfiguration Class Declaration\nDESCRIPTION: Defines the `TSDocValidationConfiguration` class, which configures the validation behavior of the TSDoc parser. It includes flags such as `ignoreUndefinedTags`, `reportUnsupportedHtmlElements`, and `reportUnsupportedTags` to control which validation errors are reported.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class TSDocValidationConfiguration {\n    ignoreUndefinedTags: boolean;\n    reportUnsupportedHtmlElements: boolean;\n    reportUnsupportedTags: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: TSDocMessageId Enum Declaration\nDESCRIPTION: Declares the `TSDocMessageId` enum, which defines a comprehensive list of message identifiers used for TSDoc validation and error reporting. These identifiers represent various TSDoc syntax and semantic issues.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum TSDocMessageId {\n    AtSignInWord = \"tsdoc-at-sign-in-word\",\n    AtSignWithoutTagName = \"tsdoc-at-sign-without-tag-name\",\n    CharactersAfterBlockTag = \"tsdoc-characters-after-block-tag\",\n    CharactersAfterInlineTag = \"tsdoc-characters-after-inline-tag\",\n    CodeFenceClosingIndent = \"tsdoc-code-fence-closing-indent\",\n    CodeFenceClosingSyntax = \"tsdoc-code-fence-closing-syntax\",\n    CodeFenceMissingDelimiter = \"tsdoc-code-fence-missing-delimiter\",\n    CodeFenceOpeningIndent = \"tsdoc-code-fence-opening-indent\",\n    CodeFenceSpecifierSyntax = \"tsdoc-code-fence-specifier-syntax\",\n    CodeSpanEmpty = \"tsdoc-code-span-empty\",\n    CodeSpanMissingDelimiter = \"tsdoc-code-span-missing-delimiter\",\n    CommentMissingClosingDelimiter = \"tsdoc-comment-missing-closing-delimiter\",\n    CommentNotFound = \"tsdoc-comment-not-found\",\n    CommentOpeningDelimiterSyntax = \"tsdoc-comment-missing-opening-delimiter\",\n    ConfigFileCyclicExtends = \"tsdoc-config-cyclic-extends\",\n    ConfigFileDuplicateTagName = \"tsdoc-config-duplicate-tag-name\",\n    ConfigFileInvalidTagName = \"tsdoc-config-invalid-tag-name\",\n    ConfigFileNotFound = \"tsdoc-config-file-not-found\",\n    ConfigFileSchemaError = \"tsdoc-config-schema-error\",\n    ConfigFileUndefinedTag = \"tsdoc-config-undefined-tag\",\n    ConfigFileUnresolvedExtends = \"tsdoc-config-unresolved-extends\",\n    ConfigFileUnsupportedSchema = \"tsdoc-config-unsupported-schema\",\n    ConfigInvalidJson = \"tsdoc-config-invalid-json\",\n    EscapeGreaterThan = \"tsdoc-escape-greater-than\",\n    EscapeRightBrace = \"tsdoc-escape-right-brace\",\n    ExtraInheritDocTag = \"tsdoc-extra-inheritdoc-tag\",\n    HtmlStringMissingQuote = \"tsdoc-html-string-missing-quote\",\n    HtmlTagMissingEquals = \"tsdoc-html-tag-missing-equals\",\n    HtmlTagMissingGreaterThan = \"tsdoc-html-tag-missing-greater-than\",\n    HtmlTagMissingString = \"tsdoc-html-tag-missing-string\",\n    InheritDocIncompatibleSummary = \"tsdoc-inheritdoc-incompatible-summary\",\n    InheritDocIncompatibleTag = \"tsdoc-inheritdoc-incompatible-tag\",\n    InheritDocTagSyntax = \"tsdoc-inheritdoc-tag-syntax\",\n    InlineTagMissingBraces = \"tsdoc-inline-tag-missing-braces\",\n    InlineTagMissingRightBrace = \"tsdoc-inline-tag-missing-right-brace\",\n    InlineTagUnescapedBrace = \"tsdoc-inline-tag-unescaped-brace\",\n    LinkTagDestinationSyntax = \"tsdoc-link-tag-destination-syntax\",\n    LinkTagEmpty = \"tsdoc-link-tag-empty\",\n    LinkTagInvalidUrl = \"tsdoc-link-tag-invalid-url\",\n    LinkTagUnescapedText = \"tsdoc-link-tag-unescaped-text\",\n    MalformedHtmlName = \"tsdoc-malformed-html-name\",\n    MalformedInlineTag = \"tsdoc-malformed-inline-tag\",\n    MalformedTagName = \"tsdoc-malformed-tag-name\",\n    MissingDeprecationMessage = \"tsdoc-missing-deprecation-message\",\n    MissingHtmlEndTag = \"tsdoc-missing-html-end-tag\",\n    MissingReference = \"tsdoc-missing-reference\",\n    MissingTag = \"tsdoc-missing-tag\",\n    ParamTagMissingHyphen = \"tsdoc-param-tag-missing-hyphen\",\n    ParamTagWithInvalidName = \"tsdoc-param-tag-with-invalid-name\",\n    ParamTagWithInvalidOptionalName = \"tsdoc-param-tag-with-invalid-optional-name\",\n    ParamTagWithInvalidType = \"tsdoc-param-tag-with-invalid-type\",\n    ReferenceEmptyIdentifier = \"tsdoc-reference-empty-identifier\",\n    ReferenceHashSyntax = \"tsdoc-reference-hash-syntax\",\n    ReferenceMalformedImportPath = \"tsdoc-reference-malformed-import-path\",\n    ReferenceMalformedPackageName = \"tsdoc-reference-malformed-package-name\",\n    ReferenceMissingColon = \"tsdoc-reference-missing-colon\",\n    ReferenceMissingDot = \"tsdoc-reference-missing-dot\",\n    ReferenceMissingHash = \"tsdoc-reference-missing-hash\",\n    ReferenceMissingIdentifier = \"tsdoc-reference-missing-identifier\",\n    ReferenceMissingLabel = \"tsdoc-reference-missing-label\",\n    ReferenceMissingQuote = \"tsdoc-reference-missing-quote\",\n    ReferenceMissingRightBracket = \"tsdoc-reference-missing-right-bracket\",\n    ReferenceMissingRightParen = \"tsdoc-reference-missing-right-paren\",\n    ReferenceSelectorMissingParens = \"tsdoc-reference-selector-missing-parens\",\n    ReferenceSelectorSyntax = \"tsdoc-reference-selector-syntax\",\n    ReferenceSymbolSyntax = \"tsdoc-reference-symbol-syntax\",\n    ReferenceUnquotedIdentifier = \"tsdoc-reference-unquoted-identifier\",\n    TagShouldNotHaveBraces = \"tsdoc-tag-should-not-have-braces\",\n    TextAfterHtmlString = \"tsdoc-text-after-html-string\",\n    UndefinedTag = \"tsdoc-undefined-tag\",\n    UnnecessaryBackslash = \"tsdoc-unnecessary-backslash\",\n    UnsupportedHtmlElementName = \"tsdoc-unsupported-html-name\",\n    UnsupportedTag = \"tsdoc-unsupported-tag\"\n}\n```\n\n----------------------------------------\n\nTITLE: TSDocTagSyntaxKind Enum Declaration\nDESCRIPTION: Declares the `TSDocTagSyntaxKind` enum, which categorizes TSDoc tags into three types: `BlockTag`, `InlineTag`, and `ModifierTag`.  These kinds determine how the tags are parsed and processed.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum TSDocTagSyntaxKind {\n    BlockTag = 1,\n    InlineTag = 0,\n    ModifierTag = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DocNodeKind Enum in TypeScript\nDESCRIPTION: Exports a public enum `DocNodeKind` that lists the various types of nodes that can appear in a TSDoc AST, such as `Block`, `CodeSpan`, `Comment`, `Paragraph`, `PlainText`, etc. Each member maps a kind name to its string representation.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum DocNodeKind {\n    // (undocumented)\n    Block = \"Block\",\n    // (undocumented)\n    BlockTag = \"BlockTag\",\n    // (undocumented)\n    CodeSpan = \"CodeSpan\",\n    // (undocumented)\n    Comment = \"Comment\",\n    // (undocumented)\n    DeclarationReference = \"DeclarationReference\",\n    // (undocumented)\n    ErrorText = \"ErrorText\",\n    // (undocumented)\n    EscapedText = \"EscapedText\",\n    // (undocumented)\n    Excerpt = \"Excerpt\",\n    // (undocumented)\n    FencedCode = \"FencedCode\",\n    // (undocumented)\n    HtmlAttribute = \"HtmlAttribute\",\n    // (undocumented)\n    HtmlEndTag = \"HtmlEndTag\",\n    // (undocumented)\n    HtmlStartTag = \"HtmlStartTag\",\n    // (undocumented)\n    InheritDocTag = \"InheritDocTag\",\n    // (undocumented)\n    InlineTag = \"InlineTag\",\n    // (undocumented)\n    LinkTag = \"LinkTag\",\n    // (undocumented)\n    MemberIdentifier = \"MemberIdentifier\",\n    // (undocumented)\n    MemberReference = \"MemberReference\",\n    // (undocumented)\n    MemberSelector = \"MemberSelector\",\n    // (undocumented)\n    MemberSymbol = \"MemberSymbol\",\n    // (undocumented)\n    Paragraph = \"Paragraph\",\n    // (undocumented)\n    ParamBlock = \"ParamBlock\",\n    // (undocumented)\n    ParamCollection = \"ParamCollection\",\n    // (undocumented)\n    PlainText = \"PlainText\",\n    // (undocumented)\n    Section = \"Section\",\n    // (undocumented)\n    SoftBreak = \"SoftBreak\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocInheritDocTag in TypeScript\nDESCRIPTION: The `DocInheritDocTag` class, which inherits from `DocInlineTagBase`, represents an `inheritDoc` tag. Its constructor takes `IDocInheritDocTagParameters` or `IDocInheritDocTagParsedParameters`. It has a `declarationReference` property. It uses the method `getChildNodesForContent()` to get content and also provides the kind.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocInheritDocTag extends DocInlineTagBase {\n    // @internal\n    constructor(parameters: IDocInheritDocTagParameters | IDocInheritDocTagParsedParameters);\n    get declarationReference(): DocDeclarationReference | undefined;\n    // @override (undocumented)\n    protected getChildNodesForContent(): ReadonlyArray<DocNode | undefined>;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocInlineTagBase in TypeScript\nDESCRIPTION: This abstract class, `DocInlineTagBase`, serves as a base class for inline tags. Its constructor takes `IDocInlineTagBaseParameters` or `IDocInlineTagBaseParsedParameters`. It has an abstract method `getChildNodesForContent()`. It includes methods for getting the tag name. It overrides the method `onGetChildNodes()`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class DocInlineTagBase extends DocNode {\n    // @internal\n    constructor(parameters: IDocInlineTagBaseParameters | IDocInlineTagBaseParsedParameters);\n    // @virtual\n    protected abstract getChildNodesForContent(): ReadonlyArray<DocNode | undefined>;\n    // @sealed @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get tagName(): string;\n    get tagNameWithUpperCase(): string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocMemberSymbol in TypeScript\nDESCRIPTION: This snippet shows the `DocMemberSymbol` class, which is used for representing member symbols. Its constructor takes parameters of type `IDocMemberSymbolParameters` or `IDocMemberSymbolParsedParameters`. The class exposes the `symbolReference` and provides access to the kind and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocMemberSymbol extends DocNode {\n    // @internal\n    constructor(parameters: IDocMemberSymbolParameters | IDocMemberSymbolParsedParameters);\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get symbolReference(): DocDeclarationReference;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocInlineTag in TypeScript\nDESCRIPTION: This defines `DocInlineTag`, which is the base class for inline tags. The constructor accepts `IDocInlineTagParameters` or `IDocInlineTagParsedParameters`. It has the `getChildNodesForContent()` method. It exposes a `tagContent` property with getter and setter. It inherits from `DocNode` and also includes `kind` and child node retrieval.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocInlineTag extends DocInlineTagBase {\n    // @internal\n    constructor(parameters: IDocInlineTagParameters | IDocInlineTagParsedParameters);\n    // @override (undocumented)\n    protected getChildNodesForContent(): ReadonlyArray<DocNode | undefined>;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get tagContent(): string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocMemberIdentifier in TypeScript\nDESCRIPTION: The `DocMemberIdentifier` class is used for identifying members within a TSDoc context. It's instantiated with `IDocMemberIdentifierParameters` or `IDocMemberIdentifierParsedParameters`. It has properties to check for quotes and get the identifier string. The class provides a static method to validate identifiers. It provides access to the `kind` and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocMemberIdentifier extends DocNode {\n    // @internal\n    constructor(parameters: IDocMemberIdentifierParameters | IDocMemberIdentifierParsedParameters);\n    get hasQuotes(): boolean;\n    get identifier(): string;\n    static isValidIdentifier(identifier: string): boolean;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocHtmlStartTag in TypeScript\nDESCRIPTION: The `DocHtmlStartTag` class represents the start tag of an HTML element.  It is created with parameters of type `IDocHtmlStartTagParameters` or `IDocHtmlStartTagParsedParameters`. It has an `emitAsHtml()` method, and it provides access to its attributes, name, self-closing status, as well as spacing information. It inherits from `DocNode` and provides the `kind` and child node retrieval.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocHtmlStartTag extends DocNode {\n    // @internal\n    constructor(parameters: IDocHtmlStartTagParameters | IDocHtmlStartTagParsedParameters);\n    emitAsHtml(): string;\n    get htmlAttributes(): ReadonlyArray<DocHtmlAttribute>;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get name(): string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get selfClosingTag(): boolean;\n    get spacingAfterName(): string | undefined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocDeclarationReference in TypeScript\nDESCRIPTION: The `DocDeclarationReference` class provides a way to reference declarations in the TSDoc. It is initialized with parameters of type `IDocDeclarationReferenceParameters` or `IDocDeclarationReferenceParsedParameters`. It provides functionality to emit itself as TSDoc string. It provides properties to get import and package paths, member references and the kind, and also to get its child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocDeclarationReference extends DocNode {\n    // @internal\n    constructor(parameters: IDocDeclarationReferenceParameters | IDocDeclarationReferenceParsedParameters);\n    emitAsTsdoc(): string;\n    get importPath(): string | undefined;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get memberReferences(): ReadonlyArray<DocMemberReference>;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get packageName(): string | undefined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocCodeSpan in TypeScript\nDESCRIPTION: The `DocCodeSpan` class represents an inline code snippet within a TSDoc comment.  The constructor accepts either an `IDocCodeSpanParameters` or an `IDocCodeSpanParsedParameters`. It exposes methods for getting the `code`, the `kind`, and child nodes. This class is used to format code within the documentation.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocCodeSpan extends DocNode {\n    // @internal\n    constructor(parameters: IDocCodeSpanParameters | IDocCodeSpanParsedParameters);\n    get code(): string;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocEscapedText in TypeScript\nDESCRIPTION: This defines `DocEscapedText` which handles escaped text sequences within TSDoc. The constructor accepts `IDocEscapedTextParsedParameters`. It provides access to the decoded and encoded text, as well as the `escapeStyle`.  It inherits from DocNode and includes `kind` and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocEscapedText extends DocNode {\n    // @internal\n    constructor(parameters: IDocEscapedTextParsedParameters);\n    get decodedText(): string;\n    get encodedText(): string;\n    get escapeStyle(): EscapeStyle;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocBlock in TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a `DocBlock` object. It initializes a DocBlock with parameters that can either be an `IDocBlockParameters` or an `IDocBlockParsedParameters`. This class represents a block-level element within a TSDoc comment.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocBlock extends DocNode {\n    // @internal\n    constructor(parameters: IDocBlockParameters | IDocBlockParsedParameters);\n    get blockTag(): DocBlockTag;\n    get content(): DocSection;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocExcerpt in TypeScript\nDESCRIPTION: The `DocExcerpt` class represents an excerpt of text. The constructor requires `IDocExcerptParameters`. It provides access to the `content` as a `TokenSequence`, and the `excerptKind`, the kind and is a DocNode. It is used to include snippets of text.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocExcerpt extends DocNode {\n    // @internal\n    constructor(parameters: IDocExcerptParameters);\n    get content(): TokenSequence;\n    get excerptKind(): ExcerptKind;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DocNodeContainer Abstract Class in TypeScript\nDESCRIPTION: Defines the abstract class `DocNodeContainer` which extends `DocNode`. It represents TSDoc nodes that can contain child nodes, providing methods like `appendNode`, `appendNodes`, `clearNodes` to manage children, and a getter `nodes` to access them. It overrides the `onGetChildNodes` method.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport abstract class DocNodeContainer extends DocNode {\n    // @internal\n    constructor(parameters: IDocNodeContainerParameters | IDocNodeContainerParsedParameters, childNodes?: ReadonlyArray<DocNode>);\n    appendNode(docNode: DocNode): void;\n    appendNodes(docNodes: ReadonlyArray<DocNode>): void;\n    clearNodes(): void;\n    get nodes(): ReadonlyArray<DocNode>;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DocNodeTransforms Class in TypeScript\nDESCRIPTION: Exports a public class `DocNodeTransforms` containing static utility methods for transforming TSDoc nodes. Includes the `trimSpacesInParagraph` method to remove leading/trailing whitespace within a `DocParagraph` node.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocNodeTransforms {\n    static trimSpacesInParagraph(docParagraph: DocParagraph): DocParagraph;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocErrorText in TypeScript\nDESCRIPTION: This code shows the `DocErrorText` class. It's used to represent error messages within the TSDoc context.  The constructor uses `IDocErrorTextParsedParameters`.  It provides access to the error's `text`, `textExcerpt`,  `messageId`, `errorMessage`,  and `errorLocation`.  It also exposes the `kind` and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocErrorText extends DocNode {\n    // @internal\n    constructor(parameters: IDocErrorTextParsedParameters);\n    get errorLocation(): TokenSequence;\n    get errorMessage(): string;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get messageId(): TSDocMessageId;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get text(): string;\n    // (undocumented)\n    get textExcerpt(): TokenSequence | undefined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the DocParagraph Class in TypeScript\nDESCRIPTION: Exports a public class `DocParagraph` which extends `DocNodeContainer`. It represents a paragraph of content within a TSDoc comment. It overrides the `kind` property to return `DocNodeKind.Paragraph`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocParagraph extends DocNodeContainer {\n    // @internal\n    constructor(parameters: IDocParagraphParameters, childNodes?: ReadonlyArray<DocNode>);\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DocParamBlock Class in TypeScript\nDESCRIPTION: Exports a public class `DocParamBlock` which extends `DocBlock` (implicitly, as DocBlock extends DocNodeContainer). It represents a documentation block for a single parameter (e.g., `@param name description`). It provides access to the parameter name via the `parameterName` getter and overrides `kind` and `onGetChildNodes`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocParamBlock extends DocBlock {\n    // @internal\n    constructor(parameters: IDocParamBlockParameters | IDocParamBlockParsedParameters);\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get parameterName(): string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the DocParamCollection Class in TypeScript\nDESCRIPTION: Exports a public class `DocParamCollection` which extends `DocNode`. It represents a collection of `DocParamBlock` nodes, allowing iteration over them using `Symbol.iterator`. Provides methods to add (`add`), clear (`clear`), count (`count`), access (`blocks`), and find blocks by name (`tryGetBlockByName`). Overrides `kind` and `onGetChildNodes`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocParamCollection extends DocNode {\n    [Symbol.iterator](): IterableIterator<DocParamBlock>;\n    // @internal\n    constructor(parameters: IDocParamCollectionParameters);\n    add(docParamBlock: DocParamBlock): void;\n    get blocks(): ReadonlyArray<DocParamBlock>;\n    clear(): void;\n    get count(): number;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    tryGetBlockByName(parameterName: string): DocParamBlock | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DocSection Class in TypeScript\nDESCRIPTION: Exports a public class `DocSection` which extends `DocNodeContainer`. It represents a logical section within the documentation comment, often implicitly created. Provides helper methods `appendNodeInParagraph` and `appendNodesInParagraph` to wrap appended nodes in a `DocParagraph` if necessary. Overrides the `kind` property.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocSection extends DocNodeContainer {\n    // @internal\n    constructor(parameters: IDocSectionParameters | IDocSectionParsedParameters, childNodes?: ReadonlyArray<DocNode>);\n    appendNodeInParagraph(docNode: DocNode): void;\n    // (undocumented)\n    appendNodesInParagraph(docNodes: ReadonlyArray<DocNode>): void;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DocPlainText Class in TypeScript\nDESCRIPTION: Exports a public class `DocPlainText` which extends `DocNode`. It represents a span of plain, unformatted text within a TSDoc comment. It provides access to the text content via the `text` getter and optionally the original `TokenSequence` via `textExcerpt`. Overrides `kind` and `onGetChildNodes`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocPlainText extends DocNode {\n    // @internal\n    constructor(parameters: IDocPlainTextParameters | IDocPlainTextParsedParameters);\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get text(): string;\n    // (undocumented)\n    get textExcerpt(): TokenSequence | undefined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the DocSoftBreak Class in TypeScript\nDESCRIPTION: Exports a public class `DocSoftBreak` which extends `DocNode`. It represents a soft break (e.g., a newline character) within TSDoc text content that does not start a new paragraph. Overrides `kind` and `onGetChildNodes`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocSoftBreak extends DocNode {\n    // @internal\n    constructor(parameters: IDocSoftBreakParameters | IDocSoftBreakParsedParameters);\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocComment in TypeScript\nDESCRIPTION: This snippet defines `DocComment` which represents the root of a TSDoc comment.  It takes `IDocCommentParameters` in the constructor. It includes methods for appending custom blocks and see blocks, getting custom blocks, and accessing various blocks like `deprecatedBlock`, `remarksBlock`, `returnsBlock`. It can emit the comment as TSDoc string.  It also provides access to parameters and type parameters via collections.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocComment extends DocNode {\n    // @internal\n    constructor(parameters: IDocCommentParameters);\n    appendCustomBlock(block: DocBlock): void;\n    // @internal\n    _appendSeeBlock(block: DocBlock): void;\n    get customBlocks(): ReadonlyArray<DocBlock>;\n    deprecatedBlock: DocBlock | undefined;\n    emitAsTsdoc(): string;\n    inheritDocTag: DocInheritDocTag | undefined;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    readonly modifierTagSet: StandardModifierTagSet;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    readonly params: DocParamCollection;\n    privateRemarks: DocBlock | undefined;\n    remarksBlock: DocBlock | undefined;\n    returnsBlock: DocBlock | undefined;\n    get seeBlocks(): ReadonlyArray<DocBlock>;\n    summarySection: DocSection;\n    readonly typeParams: DocParamCollection;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the EscapeStyle Enum in TypeScript\nDESCRIPTION: Exports a public enum `EscapeStyle` defining different methods for escaping special characters within TSDoc content. Currently includes `CommonMarkBackslash`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum EscapeStyle {\n    CommonMarkBackslash = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocBlockParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocBlockParameters` which extends the base `IDocNodeParameters`. It defines the required parameters for constructing a `DocBlock` node, specifically requiring a `blockTag` property of type `DocBlockTag`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocBlockParameters extends IDocNodeParameters {\n    // (undocumented)\n    blockTag: DocBlockTag;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocHtmlAttribute in TypeScript\nDESCRIPTION: This code shows the `DocHtmlAttribute` class, used for representing HTML attributes. It is initialized with `IDocHtmlAttributeParameters` or `IDocHtmlAttributeParsedParameters`. The class provides access to the `name`, `value`, and spacing information. It inherits from `DocNode` and provides the `kind` and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocHtmlAttribute extends DocNode {\n    // @internal\n    constructor(parameters: IDocHtmlAttributeParameters | IDocHtmlAttributeParsedParameters);\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get name(): string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get spacingAfterEquals(): string | undefined;\n    get spacingAfterName(): string | undefined;\n    get spacingAfterValue(): string | undefined;\n    get value(): string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the DocNodeConstructor Type Alias in TypeScript\nDESCRIPTION: Exports a public type alias `DocNodeConstructor` representing a constructor function that can create instances of classes derived from `DocNode`. It accepts any number of arguments.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type DocNodeConstructor = new (...args: any[]) => DocNode;\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocBlockTagParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocBlockTagParameters` extending `IDocNodeParameters`. It defines the required parameters for constructing a `DocBlockTag` node, mandating a `tagName` property of type string.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocBlockTagParameters extends IDocNodeParameters {\n    // (undocumented)\n    tagName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocBlockTagParsedParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocBlockTagParsedParameters` extending `IDocNodeParsedParameters`. It describes the parameters available after a `DocBlockTag` has been parsed, including the string `tagName` and the original `TokenSequence` for the tag name (`tagNameExcerpt`).\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocBlockTagParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    tagName: string;\n    // (undocumented)\n    tagNameExcerpt: TokenSequence;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocCodeSpanParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocCodeSpanParameters` extending `IDocNodeParameters`. It defines the required parameters for constructing a `DocCodeSpan` node, specifically requiring a `code` property containing the string content of the code span.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocCodeSpanParameters extends IDocNodeParameters {\n    // (undocumented)\n    code: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocCommentParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocCommentParameters` which extends the base `IDocNodeParameters`. It defines the parameters for constructing a `DocComment` node. This specific definition is empty, implying properties might be inherited or optional.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocCommentParameters extends IDocNodeParameters {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocNode in TypeScript\nDESCRIPTION: The `DocNode` class is an abstract base class for all other documentation node classes. It defines the constructor and is intended to be inherited. The constructor accepts `IDocNodeParameters` or `IDocNodeParsedParameters`. It's an abstract class and is intended to be extended by other classes in the library.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class DocNode {\n    constructor(parameters: IDocNodeParameters | IDocNodeParsedParameters);\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Block Parsing Interfaces - TypeScript\nDESCRIPTION: This snippet defines various parameter interfaces related to doc block parsing, text nodes, and section handling. Dependencies include types such as TokenSequence and other doc node parameter interfaces. Key parameters include fields for parameter names, token sequences, and text excerpts, with expected input being parsed doc block tokens and outputs being typed parameter objects. The interfaces facilitate extensibility and accurate parsing of documentation parameters. No runtime logic or concrete implementation is present.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface IDocParamBlockParsedParameters extends IDocBlockParsedParameters {\n    hyphenExcerpt?: TokenSequence;\n    parameterName: string;\n    parameterNameExcerpt: TokenSequence;\n    spacingAfterHyphenExcerpt?: TokenSequence;\n    spacingAfterParameterNameExcerpt?: TokenSequence;\n    spacingBeforeParameterNameExcerpt?: TokenSequence;\n    unsupportedJsdocOptionalNameOpenBracketExcerpt?: TokenSequence;\n    unsupportedJsdocOptionalNameRestExcerpt?: TokenSequence;\n    unsupportedJsdocTypeAfterHyphenExcerpt?: TokenSequence;\n    unsupportedJsdocTypeAfterParameterNameExcerpt?: TokenSequence;\n    unsupportedJsdocTypeBeforeParameterNameExcerpt?: TokenSequence;\n}\n\nexport interface IDocParamCollectionParameters extends IDocNodeParameters {\n}\n\nexport interface IDocPlainTextParameters extends IDocNodeParameters {\n    text: string;\n}\n\nexport interface IDocPlainTextParsedParameters extends IDocNodeParsedParameters {\n    textExcerpt: TokenSequence;\n}\n\nexport interface IDocSectionParameters extends IDocNodeContainerParameters {\n}\n\nexport interface IDocSectionParsedParameters extends IDocNodeContainerParsedParameters {\n}\n\nexport interface IDocSoftBreakParameters extends IDocNodeParameters {\n}\n\nexport interface IDocSoftBreakParsedParameters extends IDocNodeParsedParameters {\n    softBreakExcerpt: TokenSequence;\n}\n```\n\n----------------------------------------\n\nTITLE: TSDocTagDefinition Class Declaration\nDESCRIPTION: Defines the `TSDocTagDefinition` class, which represents the definition of a TSDoc tag. It includes properties such as `allowMultiple`, `standardization`, `syntaxKind`, `tagName`, and `tagNameWithUpperCase`.  The constructor takes an `ITSDocTagDefinitionParameters` object.  It exposes a static method `validateTSDocTagName` to validate tag names.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class TSDocTagDefinition {\n    constructor(parameters: ITSDocTagDefinitionParameters);\n    readonly allowMultiple: boolean;\n    readonly standardization: Standardization;\n    readonly syntaxKind: TSDocTagSyntaxKind;\n    readonly tagName: string;\n    readonly tagNameWithUpperCase: string;\n    static validateTSDocTagName(tagName: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocBlockTag in TypeScript\nDESCRIPTION: This snippet defines the `DocBlockTag` class, which inherits from `DocNode`.  It's used to represent tags within `DocBlock` objects. The constructor takes parameters that can be `IDocBlockTagParameters` or `IDocBlockTagParsedParameters`. It also includes methods to get a `TokenSequence`, the kind, and child nodes. The `tagName` and `tagNameWithUpperCase` are also provided.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocBlockTag extends DocNode {\n    // @internal\n    constructor(parameters: IDocBlockTagParameters | IDocBlockTagParsedParameters);\n    // (undocumented)\n    getTokenSequence(): TokenSequence;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get tagName(): string;\n    get tagNameWithUpperCase(): string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocBlockParsedParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocBlockParsedParameters` extending `IDocNodeParsedParameters`. It specifies the structure of parameters available after a `DocBlock` node has been parsed, including the associated `blockTag`.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocBlockParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    blockTag: DocBlockTag;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocFencedCode in TypeScript\nDESCRIPTION: The `DocFencedCode` class handles fenced code blocks in TSDoc. It's initialized with `IDocFencedCodeParameters` or `IDocFencedCodeParsedParameters`. The class provides properties for accessing the `code` and the `language`.  It extends `DocNode` and includes the `kind` and child node retrieval.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocFencedCode extends DocNode {\n    // @internal\n    constructor(parameters: IDocFencedCodeParameters | IDocFencedCodeParsedParameters);\n    get code(): string;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get language(): string | 'ts' | '';\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Extending TSDoc Configuration from Multiple Sources in JSON\nDESCRIPTION: This JSON snippet illustrates how to use the extends field in a tsdoc.json file to share custom TSDoc tags and configuration across multiple projects. The extends property is an array of file paths to other JSON configuration files, which are merged with the current file. NodeJS module resolution is used, and local paths must start with './'. The input is a JSON object, which tooling merges at runtime; the final configuration is consumed by TSDoc-aware tools.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc-config/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json\",\n  \"extends\": [\n    \"my-package/dist/tsdoc-base.json\",\n    \"./path/to/local/file/tsdoc-local.json\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocMemberReference in TypeScript\nDESCRIPTION: The `DocMemberReference` class represents a reference to a member. It is created with `IDocMemberReferenceParameters` or `IDocMemberReferenceParsedParameters`. This class provides properties to indicate the presence of a dot, the `memberIdentifier`, the `memberSymbol`, and `selector`. It also provides access to the `kind` and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocMemberReference extends DocNode {\n    // @internal\n    constructor(parameters: IDocMemberReferenceParameters | IDocMemberReferenceParsedParameters);\n    get hasDot(): boolean;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get memberIdentifier(): DocMemberIdentifier | undefined;\n    get memberSymbol(): DocMemberSymbol | undefined;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get selector(): DocMemberSelector | undefined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Rush\nDESCRIPTION: Shell command to install all project dependencies in the Rush monorepo environment, setting up for builds and testing.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ rush install\n```\n\n----------------------------------------\n\nTITLE: Building All Projects in the Rush Monorepo\nDESCRIPTION: Shell command to build all packages within the monorepo, establishing the environment for development or testing.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ rush build\n```\n\n----------------------------------------\n\nTITLE: Creating DocLinkTag in TypeScript\nDESCRIPTION: The `DocLinkTag` class represents a link tag, inheriting from `DocInlineTagBase`. Its constructor takes parameters of the type `IDocLinkTagParameters` or `IDocLinkTagParsedParameters`. It provides access to the `codeDestination`, `linkText` and `urlDestination`. It also has the method `getChildNodesForContent()` to retrieve content, and provides the kind.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocLinkTag extends DocInlineTagBase {\n    // @internal\n    constructor(parameters: IDocLinkTagParameters | IDocLinkTagParsedParameters);\n    get codeDestination(): DocDeclarationReference | undefined;\n    // @override (undocumented)\n    protected getChildNodesForContent(): ReadonlyArray<DocNode | undefined>;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get linkText(): string | undefined;\n    get urlDestination(): string | undefined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Building the api-demo Project with NPM\nDESCRIPTION: Shell command to compile the api-demo project using the npm run build script, preparing it for execution.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Defining the DocNode Abstract Class in TypeScript\nDESCRIPTION: Defines the abstract base class `DocNode` for all nodes in the TSDoc Abstract Syntax Tree (AST). It specifies core properties like `configuration` and `kind`, and methods for accessing child nodes (`getChildNodes`, `onGetChildNodes`). It also includes a static type guard `isParsedParameters` to differentiate parameter types.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class DocNode {\n    readonly configuration: TSDocConfiguration;\n    getChildNodes(): ReadonlyArray<DocNode>;\n    static isParsedParameters(parameters: IDocNodeParameters | IDocNodeParsedParameters): parameters is IDocNodeParsedParameters;\n    abstract get kind(): DocNodeKind | string;\n    // @virtual\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Simple Demo of api-demo\nDESCRIPTION: Shell command to execute the simple demo, which parses source files directly without TypeScript compiler API, utilizing default parser settings.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run simple\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for api-demo\nDESCRIPTION: Shell command to navigate to the api-demo directory and install dependencies without a package lock, preparing the project for build and run.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ./api-demo\n# Note: Be sure to specify \"--no-package-lock\" to avoid conflicts with Rush\n$ npm install --no-package-lock\n```\n\n----------------------------------------\n\nTITLE: Defining the DocNodeManager Class in TypeScript\nDESCRIPTION: Exports a public class `DocNodeManager` used to manage TSDoc node definitions. It provides methods to register allowed child kinds for parent kinds (`registerAllowableChildren`), register node definitions from a package (`registerDocNodes`), check if a child kind is allowed for a parent (`isAllowedChild`), and validate registered kinds (`throwIfNotRegisteredKind`).\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DocNodeManager {\n    isAllowedChild(parentKind: string, childKind: string): boolean;\n    registerAllowableChildren(parentKind: string, childKinds: ReadonlyArray<string>): void;\n    registerDocNodes(packageName: string, definitions: ReadonlyArray<IDocNodeDefinition>): void;\n    throwIfNotRegisteredKind(docNodeKind: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plain Text Emitter Utility - TypeScript\nDESCRIPTION: This snippet provides a utility class for determining if a doc node or collection of nodes contain any text content, optionally requiring a minimum character count. The method signatures accept either a single node or an array of nodes, plus an optional threshold, and return a boolean result. This utility is used for text emission and comment analysis in the TSDoc pipeline, and imposes no special constraints or dependencies.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class PlainTextEmitter {\n    static hasAnyTextContent(node: DocNode, requiredCharacters?: number): boolean;\n    static hasAnyTextContent(nodes: ReadonlyArray<DocNode>, requiredCharacters?: number): boolean;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring .eslintrc.js with eslint-plugin-tsdoc\nDESCRIPTION: This snippet demonstrates the configuration of an .eslintrc.js file for ESLint. It adds the `eslint-plugin-tsdoc` package to the plugins array and enables the `tsdoc/syntax` rule with a warning level. The `parser`, `parserOptions` and `extends` configurations are essential for properly parsing and linting TypeScript files.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/eslint-plugin/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nmodule.exports =  {\n  plugins: [\n    \"@typescript-eslint/eslint-plugin\",\n    \"eslint-plugin-tsdoc\"\n  ],\n  extends:  [\n    'plugin:@typescript-eslint/recommended'\n  ],\n  parser:  '@typescript-eslint/parser',\n  parserOptions: {\n    project: \"./tsconfig.json\",\n    tsconfigRootDir: __dirname,\n    ecmaVersion: 2018,\n    sourceType: \"module\"\n  },\n  rules: {\n    \"tsdoc/syntax\": \"warn\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Modifier Tags and Message Logging - TypeScript\nDESCRIPTION: This snippet introduces classes for managing modifier tag sets and parser message logs. It provides methods for adding, checking, retrieving, and enumerating tags, as well as logging parser messages with associated text ranges and nodes. Dependencies include tag and message parameter types, and expected usage involves validation and collection of doc comment analysis and reporting. These classes improve library maintainability by encapsulating tag and message management logic.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ModifierTagSet {\n    addTag(blockTag: DocBlockTag): boolean;\n    hasTag(modifierTagDefinition: TSDocTagDefinition): boolean;\n    hasTagName(modifierTagName: string): boolean;\n    get nodes(): ReadonlyArray<DocBlockTag>;\n    tryGetTag(modifierTagDefinition: TSDocTagDefinition): DocBlockTag | undefined;\n}\n\nexport class ParserMessageLog {\n    addMessage(parserMessage: ParserMessage): void;\n    addMessageForDocErrorText(docErrorText: DocErrorText): void;\n    addMessageForTextRange(messageId: TSDocMessageId, messageText: string, textRange: TextRange): void;\n    addMessageForTokenSequence(messageId: TSDocMessageId, messageText: string, tokenSequence: TokenSequence, docNode?: DocNode): void;\n    get messages(): ReadonlyArray<ParserMessage>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocHtmlEndTag in TypeScript\nDESCRIPTION: This defines `DocHtmlEndTag`, which represents an HTML end tag in TSDoc. It is created with parameters of type `IDocHtmlEndTagParameters` or `IDocHtmlEndTagParsedParameters`. It includes `emitAsHtml()` to generate HTML output. It provides access to the tag name, `kind`, and child nodes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocHtmlEndTag extends DocNode {\n    // @internal\n    constructor(parameters: IDocHtmlEndTagParameters | IDocHtmlEndTagParsedParameters);\n    emitAsHtml(): string;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    get name(): string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DocMemberSelector in TypeScript\nDESCRIPTION: The `DocMemberSelector` class allows selection of members and has a constructor accepting `IDocMemberSelectorParameters` or `IDocMemberSelectorParsedParameters`. The class provides methods to get the error message, the selector, and the selector kind. It extends `DocNode` and provides the kind and child node retrieval.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocMemberSelector extends DocNode {\n    // @internal\n    constructor(parameters: IDocMemberSelectorParameters | IDocMemberSelectorParsedParameters);\n    get errorMessage(): string | undefined;\n    // @override (undocumented)\n    get kind(): DocNodeKind | string;\n    // @override (undocumented)\n    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;\n    get selector(): string;\n    get selectorKind(): SelectorKind;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining the IDocCodeSpanParsedParameters Interface in TypeScript\nDESCRIPTION: Exports a public interface `IDocCodeSpanParsedParameters` extending `IDocNodeParsedParameters`. It describes the parameters available after a `DocCodeSpan` has been parsed, including `TokenSequence` excerpts for the opening delimiter, closing delimiter, and the code content itself.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/tsdoc/etc/tsdoc.api.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface IDocCodeSpanParsedParameters extends IDocNodeParsedParameters {\n    // (undocumented)\n    closingDelimiterExcerpt: TokenSequence;\n    // (undocumented)\n    codeExcerpt: TokenSequence;\n    // (undocumented)\n    openingDelimiterExcerpt: TokenSequence;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-plugin-tsdoc with npm\nDESCRIPTION: This bash command installs the eslint-plugin-tsdoc package as a development dependency in your project using npm. It adds the package to your project's devDependencies and makes it available for use within the ESLint configuration. This is a prerequisite for using the plugin.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/eslint-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project\n$ npm install --save-dev eslint-plugin-tsdoc\n```\n\n----------------------------------------\n\nTITLE: Building the api-demo Project with Rush Locally\nDESCRIPTION: Shell commands to navigate into the api-demo directory and build the project individually using npm, suitable after monorepo build.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ./api-demo\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Rush for Monorepo Management\nDESCRIPTION: Shell command to install the Rush tool globally via npm, enabling management of monorepo dependencies and build processes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -g @microsoft/rush\n```\n\n----------------------------------------\n\nTITLE: Running the api-demo Simple and Advanced Demos via NPM\nDESCRIPTION: Shell commands to execute either the simple or advanced demo scripts for testing or demonstration purposes.\nSOURCE: https://github.com/microsoft/tsdoc/blob/main/api-demo/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run simple\n$ npm run advanced\n```"
  }
]