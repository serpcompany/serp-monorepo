[
  {
    "owner": "wagtail",
    "repo": "wagtail",
    "content": "TITLE: Defining StreamField in Page Model\nDESCRIPTION: Example of defining a StreamField in a BlogPage model with heading, paragraph and image blocks. Shows basic StreamField configuration with content panels.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nfrom wagtail.models import Page\nfrom wagtail.fields import StreamField\nfrom wagtail import blocks\nfrom wagtail.admin.panels import FieldPanel\nfrom wagtail.images.blocks import ImageBlock\n\nclass BlogPage(Page):\n    author = models.CharField(max_length=255)\n    date = models.DateField(\"Post date\")\n    body = StreamField([\n        ('heading', blocks.CharBlock(form_classname=\"title\")),\n        ('paragraph', blocks.RichTextBlock()),\n        ('image', ImageBlock()),\n    ])\n\n    content_panels = Page.content_panels + [\n        FieldPanel('author'),\n        FieldPanel('date'),\n        FieldPanel('body'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Image Renditions Cache in Wagtail\nDESCRIPTION: Sets up a dedicated cache backend for storing image renditions in Wagtail. This configuration uses Memcached with specific timeout and entry limits to optimize image processing performance.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/performance.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    'default': {...},\n    'renditions': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': '127.0.0.1:11211',\n        'TIMEOUT': 600,\n        'OPTIONS': {\n            'MAX_ENTRIES': 1000\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Punctuation Highlighting for Draftail Editor\nDESCRIPTION: JavaScript implementation for a text decorator that highlights problematic punctuation in the Draftail editor. This defines both a strategy function to detect problematic punctuation patterns and a component to render the highlighted text.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst PUNCTUATION = /(\\.\\.\\.\\.|!!|\\?!)/g;\n\nconst punctuationStrategy = (block, callback) => {\n  const text = block.getText();\n  let matches;\n  while ((matches = PUNCTUATION.exec(text)) !== null) {\n    callback(matches.index, matches.index + matches[0].length);\n  }\n};\n\nconst errorHighlight = {\n  color: 'var(--w-color-text-error)',\n  outline: '1px solid currentColor',\n}\n\nconst PunctuationHighlighter = ({ children }) => (\n  window.React.createElement('span', { style: errorHighlight, title: 'refer to our styleguide' }, children)\n);\n\nwindow.draftail.registerPlugin({\n  type: 'punctuation',\n  strategy: punctuationStrategy,\n  component: PunctuationHighlighter,\n}, 'decorators');\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogTagIndexPage Model in Python\nDESCRIPTION: This snippet defines a BlogTagIndexPage model that filters BlogPage objects by tag. It overrides the get_context method to add filtered blog pages to the template context.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass BlogTagIndexPage(Page):\n\n    def get_context(self, request):\n\n        # Filter by tag\n        tag = request.GET.get('tag')\n        blogpages = BlogPage.objects.filter(tags__name=tag)\n\n        # Update template context\n        context = super().get_context(request)\n        context['blogpages'] = blogpages\n        return context\n```\n\n----------------------------------------\n\nTITLE: Responsive Picture Tag with Multiple Formats and Sizes in Wagtail\nDESCRIPTION: Shows how to combine multiple formats and sizes in a responsive picture tag for optimal image delivery across different devices and browsers.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{% picture page.photo format-{avif,webp,jpeg} width-{400,800} sizes=\"80vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Author Snippet Model in Wagtail\nDESCRIPTION: Defines an Author model as a Wagtail snippet which can be reused across the site. The model includes a name field and an optional author image, with appropriate admin panels configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@register_snippet\nclass Author(models.Model):\n    name = models.CharField(max_length=255)\n    author_image = models.ForeignKey(\n        'wagtailimages.Image', null=True, blank=True,\n        on_delete=models.SET_NULL, related_name='+'\n    )\n\n    panels = [\"name\", \"author_image\"]\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        verbose_name_plural = 'Authors'\n```\n\n----------------------------------------\n\nTITLE: Customizing Snippet Registration with SnippetViewSet in Python\nDESCRIPTION: This snippet demonstrates how to create a custom SnippetViewSet for the Advert model, defining panels and registering it using the register_snippet function. This approach allows for more customization and separation of concerns.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/registering.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# myapp/wagtail_hooks.py\nfrom wagtail.snippets.models import register_snippet\nfrom wagtail.snippets.views.snippets import SnippetViewSet\n\nfrom myapp.models import Advert\n\n\nclass AdvertViewSet(SnippetViewSet):\n    model = Advert\n\n    panels = [\n        FieldPanel(\"url\"),\n        FieldPanel(\"text\"),\n    ]\n\n# Instead of using @register_snippet as a decorator on the model class,\n# register the snippet using register_snippet as a function and pass in\n# the custom SnippetViewSet subclass.\nregister_snippet(AdvertViewSet)\n```\n\n----------------------------------------\n\nTITLE: Displaying Authors in Blog Page Template\nDESCRIPTION: Updates the blog_page.html template to display the authors associated with a blog post. The template loops through all authors, showing their image and name.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n{% block content %}\n    <h1>{{ page.title }}</h1>\n    <p class=\"meta\">{{ page.date }}</p>\n\n    <!-- Add this: -->\n    {% with authors=page.authors.all %}\n        {% if authors %}\n            <h3>Posted by:</h3>\n            <ul>\n                {% for author in authors %}\n                    <li style=\"display: inline\">\n                        {% image author.author_image fill-40x60 style=\"vertical-align: middle\" %}\n                        {{ author.name }}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    {% endwith %}\n\n    <div class=\"intro\">{{ page.intro }}</div>\n\n    {{ page.body|richtext }}\n\n    {% for item in page.gallery_images.all %}\n        <div style=\"float: inline-start; margin: 10px\">\n            {% image item.image fill-320x240 %}\n            <p>{{ item.caption }}</p>\n        </div>\n    {% endfor %}\n\n    <p><a href=\"{{ page.get_parent.url }}\">Return to blog</a></p>\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Custom Page Creation Hook in Wagtail (Python)\nDESCRIPTION: This hook demonstrates how to perform custom actions after a page is created in Wagtail. It shows two examples: returning a custom HTTP response and modifying the page title.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('after_create_page')\ndef do_after_page_create(request, page):\n    return HttpResponse(\"Congrats on making content!\", content_type=\"text/plain\")\n\n@hooks.register('after_create_page')\ndef set_attribute_after_page_create(request, page):\n    page.title = 'Persistent Title'\n    new_revision = page.save_revision()\n    if page.live:\n        # page has been created and published at the same time,\n        # so ensure that the updated title is on the published version too\n        new_revision.publish()\n```\n\n----------------------------------------\n\nTITLE: Common Content Block Implementation - Python\nDESCRIPTION: Demonstrates creating reusable content blocks for multiple page types using StreamBlock.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CommonContentBlock(blocks.StreamBlock):\n    heading = blocks.CharBlock(form_classname=\"title\")\n    paragraph = blocks.RichTextBlock()\n    image = ImageBlock()\n\n\nclass BlogPage(Page):\n    body = StreamField(CommonContentBlock())\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom 'Help Text' Block Feature in Draftail (Python)\nDESCRIPTION: This code snippet shows how to register a custom 'help-text' block feature for the Draftail editor in Wagtail. It includes configuration for the editor toolbar, content transformation, and database conversion for block-level elements.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport wagtail.admin.rich_text.editors.draftail.features as draftail_features\nfrom wagtail.admin.rich_text.converters.html_to_contentstate import BlockElementHandler\nfrom wagtail import hooks\n\n@hooks.register('register_rich_text_features')\ndef register_help_text_feature(features):\n    \"\"\"\n    Registering the `help-text` feature, which uses the `help-text` Draft.js block type,\n    and is stored as HTML with a `<div class=\"help-text\">` tag.\n    \"\"\"\n    feature_name = 'help-text'\n    type_ = 'help-text'\n\n    control = {\n        'type': type_,\n        'label': '?',\n        'description': 'Help text',\n        # Optionally, we can tell Draftail what element to use when displaying those blocks in the editor.\n        'element': 'div',\n    }\n\n    features.register_editor_plugin(\n        'draftail', feature_name, draftail_features.BlockFeature(control, css={'all': ['help-text.css']})\n    )\n\n    features.register_converter_rule('contentstate', feature_name, {\n        'from_database_format': {'div[class=help-text]': BlockElementHandler(type_)},\n        'to_database_format': {'block_map': {type_: {'element': 'div', 'props': {'class': 'help-text'}}}},\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating StreamField with StreamBlock Definition - Python\nDESCRIPTION: Defines a StreamField with a carousel StreamBlock containing image and video blocks, along with other basic content blocks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('carousel', blocks.StreamBlock([\n        ('image', ImageBlock()),\n        ('video', EmbedBlock()),\n    ])),\n    ('heading', blocks.CharBlock(form_classname=\"title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageBlock()),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining BlogPage Model\nDESCRIPTION: Implementation of the BlogPage model with date, intro, and body fields plus search functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom wagtail.models import Page\nfrom wagtail.fields import RichTextField\n\n# add this:\nfrom wagtail.search import index\n\nclass BlogPage(Page):\n    date = models.DateField(\"Post date\")\n    intro = models.CharField(max_length=250)\n    body = RichTextField(blank=True)\n\n    search_fields = Page.search_fields + [\n        index.SearchField('intro'),\n        index.SearchField('body'),\n    ]\n\n    content_panels = Page.content_panels + [\"date\", \"intro\", \"body\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Portfolio Blocks\nDESCRIPTION: Defines CardBlock and FeaturedPostsBlock with their respective configurations and child blocks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.blocks import (\n    CharBlock,\n    ListBlock,\n    PageChooserBlock,\n    RichTextBlock,\n    StructBlock,\n)\n\nfrom wagtail.images.blocks import ImageBlock\n\nfrom base.blocks import BaseStreamBlock\n\nclass CardBlock(StructBlock):\n    heading = CharBlock()\n    text = RichTextBlock(features=[\"bold\", \"italic\", \"link\"])\n    image = ImageBlock(required=False)\n\n    class Meta:\n        icon = \"form\"\n        template = \"portfolio/blocks/card_block.html\"\n\nclass FeaturedPostsBlock(StructBlock):\n    heading = CharBlock()\n    text = RichTextBlock(features=[\"bold\", \"italic\", \"link\"], required=False)\n    posts = ListBlock(PageChooserBlock(page_type=\"blog.BlogPage\"))\n\n    class Meta:\n        icon = \"folder-open-inverse\"\n        template = \"portfolio/blocks/featured_posts_block.html\"\n\nclass PortfolioStreamBlock(BaseStreamBlock):\n    card = CardBlock(group=\"Sections\")\n    featured_posts = FeaturedPostsBlock(group=\"Sections\")\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Page with Gallery Images Model in Wagtail\nDESCRIPTION: Defines a BlogPage model with gallery image support, utilizing ParentalKey and Orderable for managing image relationships\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    date = models.DateField(\"Post date\")\n    intro = models.CharField(max_length=250)\n    body = RichTextField(blank=True)\n\n    content_panels = Page.content_panels + [\n        \"date\", \"intro\", \"body\", \"gallery_images\",\n    ]\n\nclass BlogPageGalleryImage(Orderable):\n    page = ParentalKey(BlogPage, on_delete=models.CASCADE, related_name='gallery_images')\n    image = models.ForeignKey(\n        'wagtailimages.Image', on_delete=models.CASCADE, related_name='+'\n    )\n    caption = models.CharField(blank=True, max_length=250)\n\n    panels = [\"image\", \"caption\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Event Pages in Python Using Wagtail's Page Model\nDESCRIPTION: This snippet demonstrates how to create a function in a parent node (EventPageIndex) to retrieve and filter its descendant event pages. It uses Wagtail's Page model methods to filter live pages, order them by date, and ensure they are descendants of the current page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/theory.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass EventPageIndex(Page):\n    # ...\n    def events(self):\n        # Get the list of live event pages that are descendants of this page\n        events = EventPage.objects.live().descendant_of(self)\n\n        # Filter events list to get ones that are either\n        # running now or start in the future\n        events = events.filter(date_from__gte=date.today())\n\n        # Order by date\n        events = events.order_by('date_from')\n\n        return events\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Index Page with RoutablePageMixin\nDESCRIPTION: Complete example of an EventIndexPage class using RoutablePageMixin to handle different URL patterns and views for event listings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/routablepage.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom django.http import JsonResponse\nfrom wagtail.fields import RichTextField\nfrom wagtail.models import Page\nfrom wagtail.contrib.routable_page.models import RoutablePageMixin, path, re_path\n\n\nclass EventIndexPage(RoutablePageMixin, Page):\n\n    # Routable pages can have fields like any other - here we would\n    # render the intro text on a template with {{ page.intro|richtext }}\n    intro = RichTextField()\n\n    @path('') # will override the default Page serving mechanism\n    def current_events(self, request):\n        \"\"\"\n        View function for the current events page\n        \"\"\"\n        events = EventPage.objects.live().filter(event_date__gte=datetime.date.today())\n\n        # NOTE: We can use the RoutablePageMixin.render() method to render\n        # the page as normal, but with some of the context values overridden\n        return self.render(request, context_overrides={\n            'title': \"Current events\",\n            'events': events,\n        })\n\n    @path('past/')\n    def past_events(self, request):\n        \"\"\"\n        View function for the past events page\n        \"\"\"\n        events = EventPage.objects.live().filter(event_date__lt=datetime.date.today())\n\n        # NOTE: We are overriding the template here, as well as few context values\n        return self.render(\n            request,\n            context_overrides={\n                'title': \"Past events\",\n                'events': events,\n            },\n            template=\"events/event_index_historical.html\",\n        )\n\n    # Multiple routes!\n    @path('year/<int:year>/')\n    @path('year/current/')\n    def events_for_year(self, request, year=None):\n        \"\"\"\n        View function for the events for year page\n        \"\"\"\n        if year is None:\n            year = datetime.date.today().year\n\n        events = EventPage.objects.live().filter(event_date__year=year)\n\n        return self.render(request, context_overrides={\n            'title': \"Events for %d\" % year,\n            'events': events,\n        })\n\n    @re_path(r'^year/(\\d+)/count/$')\n    def count_for_year(self, request, year=None):\n        \"\"\"\n        View function that returns a simple JSON response that\n        includes the number of events scheduled for a specific year\n        \"\"\"\n        events = EventPage.objects.live().filter(event_date__year=year)\n\n        # NOTE: The usual template/context rendering process is irrelevant\n        # here, so we'll just return a HttpResponse directly\n        return JsonResponse({'count': events.count()})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Privacy Settings for Pages in Wagtail\nDESCRIPTION: Example implementation of the get_default_privacy_setting method to control page access permissions. This method allows setting default privacy to either public, login-required, password-protected, or restricted to specific user groups.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BreadsIndexPage(Page):\n    #...\n\n    def get_default_privacy_setting(request):\n        from wagtail.models import BaseViewRestriction\n        # if the editor has the foo.add_bar permission set the default to groups with the moderators and editors group checked\n        if request.user.has_perm(\"foo.add_bar\"):\n            moderators = Group.objects.filter(name=\"Moderators\").first()\n            editors = Group.objects.filter(name=\"Editors\").first()\n            return {\"type\": BaseViewRestriction.GROUPS, \"groups\": [moderators,editors]}\n        else:\n            return {\"type\": BaseViewRestriction.NONE}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom User Model in Wagtail\nDESCRIPTION: This snippet shows how to create a custom user model by extending Django's AbstractUser class with additional fields like 'country' and a foreign key to a MembershipStatus model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# myapp/models.py\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    country = models.CharField(verbose_name='country', max_length=255)\n    status = models.ForeignKey(MembershipStatus, on_delete=models.SET_NULL, null=True, default=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Backend for Wagtail\nDESCRIPTION: Sets up Redis as a cache backend for Wagtail using django-redis. This configuration improves performance by providing a fast, persistent cache for the application.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/dbname',\n        # for django-redis < 3.8.0, use:\n        # 'LOCATION': '127.0.0.1:6379',\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hook Registration in Python\nDESCRIPTION: Shows how to register a hook function using the @hooks.register decorator with a hook name and function parameters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('name_of_hook')\ndef my_hook_function(arg1, arg2...)\n    # your code here\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom IP Address FieldBlock in Wagtail\nDESCRIPTION: Example of creating a custom block type by subclassing FieldBlock to handle IP addresses. The implementation wraps Django's GenericIPAddressField and demonstrates proper initialization with required parameters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass IPAddressBlock(FieldBlock):\n    def __init__(self, required=True, help_text=None, **kwargs):\n        self.field = forms.GenericIPAddressField(required=required, help_text=help_text)\n        super().__init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Modifying StreamField Data Programmatically in Python\nDESCRIPTION: Examples of manipulating StreamField data by replacing, deleting, and appending blocks. The code demonstrates how to modify a StreamField's content before saving back to the database.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Replace the first block with a new block of type 'heading'\nmy_page.body[0] = ('heading', \"My story\")\n\n# Delete the last block\ndel my_page.body[-1]\n\n# Append a rich text block to the stream\nmy_page.body.append(('paragraph', \"<p>And they all lived happily ever after.</p>\"))\n\n# Save the updated data back to the database\nmy_page.save()\n```\n\n----------------------------------------\n\nTITLE: Default Page Route Method Implementation in Wagtail\nDESCRIPTION: Shows the default implementation of the route() method in Wagtail's Page class. Handles URL path component routing and delegation to child pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/model_recipes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Page(...):\n    ...\n\n    def route(self, request, path_components):\n        if path_components:\n            # request is for a child of this page\n            child_slug = path_components[0]\n            remaining_components = path_components[1:]\n\n            # find a matching child or 404\n            try:\n                subpage = self.get_children().get(slug=child_slug)\n            except Page.DoesNotExist:\n                raise Http404\n\n            # delegate further routing\n            return subpage.specific.route(request, remaining_components)\n\n        else:\n            # request is for this very page\n            if self.live:\n                # Return a RouteResult that will tell Wagtail to call\n                # this page's serve() method\n                return RouteResult(self)\n            else:\n                # the page matches the request, but isn't published, so 404\n                raise Http404\n```\n\n----------------------------------------\n\nTITLE: Subclassing StructBlock to Create a Reusable Block Definition in Python\nDESCRIPTION: Demonstrates how to subclass StructBlock to create a reusable PersonBlock that can be used in multiple StreamField definitions. Includes field definitions and Meta class configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass PersonBlock(blocks.StructBlock):\n    first_name = blocks.CharBlock()\n    surname = blocks.CharBlock()\n    photo = ImageBlock(required=False)\n    biography = blocks.RichTextBlock()\n\n    class Meta:\n        icon = 'user'\n```\n\n----------------------------------------\n\nTITLE: Registering Snippet with Decorator in Python\nDESCRIPTION: This snippet demonstrates how to use the @register_snippet decorator to register a Django model as a Wagtail snippet. It defines an Advert model with URL and text fields, and specifies the editing panels.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/registering.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nfrom wagtail.admin.panels import FieldPanel\nfrom wagtail.snippets.models import register_snippet\n\n# ...\n\n@register_snippet\nclass Advert(models.Model):\n    url = models.URLField(null=True, blank=True)\n    text = models.CharField(max_length=255)\n\n    panels = [\n        FieldPanel(\"url\"),\n        FieldPanel(\"text\"),\n    ]\n\n    def __str__(self):\n        return self.text\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple ListBlock in Python\nDESCRIPTION: Demonstrates how to define a ListBlock that contains multiple instances of the same block type (CharBlock). This allows editors to add an unlimited number of ingredients to a list.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    # ...\n    ('ingredients_list', blocks.ListBlock(blocks.CharBlock(label=\"Ingredient\"))),\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Blur Filter Operation in Python for Wagtail\nDESCRIPTION: This code snippet demonstrates how to create a custom blur filter operation in Wagtail using the Pillow library. It includes the BlurOperation class and the register_image_operations hook implementation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_image_filters.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import ImageFilter\n\nfrom wagtail import hooks\nfrom wagtail.images.image_operations import FilterOperation\n\n\nclass BlurOperation(FilterOperation):\n    def construct(self, radius):\n        self.radius = int(radius)\n\n    def run(self, willow, image, env):\n        willow.image = willow.image.filter(ImageFilter.GaussianBlur(radius=self.radius))\n        return willow\n\n\n@hooks.register(\"register_image_operations\")\ndef register_image_operations():\n    return [\n        (\"blur\", BlurOperation),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Bulk Action in Python\nDESCRIPTION: Demonstrates how to create a custom bulk action class by subclassing BulkAction and implementing required methods and attributes. It includes the execute_action method for performing the bulk operation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.views.bulk_action import BulkAction\nfrom wagtail import hooks\n\n\n@hooks.register('register_bulk_action')\nclass CustomDeleteBulkAction(BulkAction):\n    display_name = _(\"Delete\")\n    aria_label = _(\"Delete selected objects\")\n    action_type = \"delete\"\n    template_name = \"/path/to/confirm_bulk_delete.html\"\n    models = [...]\n\n    @classmethod\n    def execute_action(cls, objects, **kwargs):\n        for obj in objects:\n            do_something(obj)\n        return num_parent_objects, num_child_objects  # return the count of updated objects\n```\n\n----------------------------------------\n\nTITLE: Generating Responsive Images with Django Picture Tag\nDESCRIPTION: Demonstrates the use of the new 'picture' template tag to generate responsive images in multiple formats and sizes. This creates an HTML <picture> element with multiple <source> tags for different image formats and sizes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% picture page.photo format-{avif,webp,jpeg} width-{400,800} sizes=\"80vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Models in Python for Wagtail\nDESCRIPTION: Creates FormField and FormPage models extending Wagtail's AbstractFormField and AbstractEmailForm. Includes field definitions and panel configurations for the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: StreamField with Block Limits - Python\nDESCRIPTION: Configures StreamField with minimum and maximum block count limitations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('heading', blocks.CharBlock(form_classname=\"title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageBlock()),\n], min_num=2, max_num=5)\n```\n\n----------------------------------------\n\nTITLE: Converting RichTextField to StreamField - Basic Migration\nDESCRIPTION: Python migration script to convert a RichTextField to StreamField on published pages. Includes forward and backward migration functions to convert between text and JSON formats.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.db import migrations\n\nimport wagtail.blocks\nimport wagtail.fields\n\n\ndef convert_to_streamfield(apps, schema_editor):\n    BlogPage = apps.get_model(\"demo\", \"BlogPage\")\n    for page in BlogPage.objects.all():\n        page.body = json.dumps(\n            [{\"type\": \"rich_text\", \"value\": page.body}],\n            cls=DjangoJSONEncoder\n        )\n        page.save()\n\n\ndef convert_to_richtext(apps, schema_editor):\n    BlogPage = apps.get_model(\"demo\", \"BlogPage\")\n    for page in BlogPage.objects.all():\n        if page.body:\n            stream = json.loads(page.body)\n            page.body = \"\".join([\n                child[\"value\"] for child in stream\n                if child[\"type\"] == \"rich_text\"\n            ])\n            page.save()\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        (\"demo\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.RunPython(\n            convert_to_streamfield,\n            convert_to_richtext,\n        ),\n        migrations.AlterField(\n            model_name=\"BlogPage\",\n            name=\"body\",\n            field=wagtail.fields.StreamField(\n                [(\"rich_text\", wagtail.blocks.RichTextBlock())],\n            ),\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Bulk Action in Python\nDESCRIPTION: This snippet demonstrates how to register a custom bulk action using the register_bulk_action hook in Wagtail. It creates a new BulkAction subclass with custom behavior.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.views.bulk_action import BulkAction\nfrom wagtail import hooks\n\n\n@hooks.register(\"register_bulk_action\")\nclass CustomBulkAction(BulkAction):\n    display_name = _(\"Custom Action\")\n    action_type = \"action\"\n    aria_label = _(\"Do custom action\")\n    template_name = \"/path/to/template\"\n    models = [...]  # list of models the action should execute upon\n\n\n    @classmethod\n    def execute_action(cls, objects, **kwargs):\n        for object in objects:\n            do_something(object)\n        return num_parent_objects, num_child_objects  # return the count of updated objects\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Permissions in Wagtail\nDESCRIPTION: Example showing how to restrict visibility of certain panels based on user permissions. Different permission levels are applied to individual fields and multi-field panels to control access to sensitive information.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    content_panels = [\n        FieldPanel(\"notes\"),\n        MultiFieldPanel(\n            [\n                FieldPanel(\"cost\"),\n                FieldPanel(\"details\"),\n            ],\n            heading=\"Budget details\",\n            classname=\"collapsed\",\n            permission=\"submit\"\n        ),\n        FieldPanel(\"budget_approval\", permission=\"superuser\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring StreamField Block Preview with Keyword Arguments in Python\nDESCRIPTION: Example of configuring a StreamField block preview using keyword arguments when instantiating a block. The example shows how to set preview_value, preview_template, and description for a quote block structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n(\"quote\", blocks.StructBlock(\n    [\n        (\"text\", blocks.TextBlock()),\n        (\"source\", blocks.CharBlock()),\n    ],\n    preview_value={\"text\": \"This is the coolest CMS ever.\", \"source\": \"Willie Wagtail\"},\n    preview_template=\"myapp/previews/blocks/quote.html\",\n    description=\"A quote with attribution to the source, rendered as a blockquote.\",\n))\n```\n\n----------------------------------------\n\nTITLE: Creating Footer Text Template Tag in Python\nDESCRIPTION: Django template tag implementation for retrieving and displaying footer text from Wagtail snippets. The code creates a custom inclusion tag that fetches footer text from either the context or the database using the FooterText model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\n\nfrom base.models import FooterText\n\nregister = template.Library()\n\n\n@register.inclusion_tag(\"base/includes/footer_text.html\", takes_context=True)\ndef get_footer_text(context):\n    footer_text = context.get(\"footer_text\", \"\")\n\n    if not footer_text:\n        instance = FooterText.objects.filter(live=True).first()\n        footer_text = instance.body if instance else \"\"\n\n    return {\n        \"footer_text\": footer_text,\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom MemberViewSet\nDESCRIPTION: Custom SnippetViewSet implementation for the Member model with various view customizations including list display, filtering, and edit handler configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/customizing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom wagtail.admin.panels import FieldPanel, ObjectList, TabbedInterface\nfrom wagtail.admin.ui.tables import UpdatedAtColumn\nfrom wagtail.snippets.models import register_snippet\nfrom wagtail.snippets.views.snippets import SnippetViewSet\n\nfrom myapp.models import Member, MemberFilterSet\n\n\nclass MemberViewSet(SnippetViewSet):\n    model = Member\n    icon = \"user\"\n    list_display = [\"name\", \"shirt_size\", \"get_shirt_size_display\", UpdatedAtColumn()]\n    list_per_page = 50\n    copy_view_enabled = False\n    inspect_view_enabled = True\n    admin_url_namespace = \"member_views\"\n    base_url_path = \"internal/member\"\n    filterset_class = MemberFilterSet\n\n    edit_handler = TabbedInterface([\n        ObjectList([FieldPanel(\"name\")], heading=\"Details\"),\n        ObjectList([FieldPanel(\"shirt_size\")], heading=\"Preferences\"),\n    ])\n\nregister_snippet(MemberViewSet)\n```\n\n----------------------------------------\n\nTITLE: Custom Form Implementation in Wagtail\nDESCRIPTION: Shows implementation of a custom form class for an EventPage model with custom validation, geocoding integration, and field processing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/page_editing_interface.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.db import models\nimport geocoder\nfrom wagtail.admin.panels import TitleFieldPanel, FieldPanel\nfrom wagtail.admin.forms import WagtailAdminPageForm\nfrom wagtail.models import Page\n\n\nclass EventPageForm(WagtailAdminPageForm):\n    address = forms.CharField()\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        # Make sure that the event starts before it ends\n        start_date = cleaned_data['start_date']\n        end_date = cleaned_data['end_date']\n        if start_date and end_date and start_date > end_date:\n            self.add_error('end_date', 'The end date must be after the start date')\n\n        return cleaned_data\n\n    def save(self, commit=True):\n        page = super().save(commit=False)\n\n        # Update the duration field from the submitted dates\n        page.duration = (page.end_date - page.start_date).days\n\n        # Fetch the location by geocoding the address\n        page.location = geocoder.arcgis(self.cleaned_data['address'])\n\n        if commit:\n            page.save()\n        return page\n\n\nclass EventPage(Page):\n    start_date = models.DateField()\n    end_date = models.DateField()\n    duration = models.IntegerField()\n    location = models.CharField(max_length=255)\n\n    content_panels = [\n        TitleFieldPanel('title'),\n        FieldPanel('start_date'),\n        FieldPanel('end_date'),\n        FieldPanel('address'),\n    ]\n    base_form_class = EventPageForm\n```\n\n----------------------------------------\n\nTITLE: Using a Custom StructBlock in a StreamField Definition in Python\nDESCRIPTION: Shows how to use a custom StructBlock (PersonBlock) within a StreamField definition, alongside other block types like CharBlock, RichTextBlock, and ImageBlock.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('heading', blocks.CharBlock(form_classname=\"title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageBlock()),\n    ('person', PersonBlock()),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Page Model Database Fields in Wagtail\nDESCRIPTION: Comprehensive documentation of Page model fields for content management in Wagtail CMS, including title, slug, publication status, ownership, and localization properties\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Page:\n    title = models.TextField()\n    draft_title = models.TextField()\n    slug = models.TextField()\n    content_type = models.ForeignKey(ContentType)\n    live = models.BooleanField(default=True)\n    has_unpublished_changes = models.BooleanField()\n    owner = models.ForeignKey(User)\n    first_published_at = models.DateTimeField()\n    last_published_at = models.DateTimeField()\n    seo_title = models.TextField()\n    search_description = models.TextField()\n    show_in_menus = models.BooleanField(default=False)\n    locked = models.BooleanField()\n    locked_by = models.ForeignKey(User)\n    locked_at = models.DateTimeField()\n    alias_of = models.ForeignKey('self')\n    locale = models.ForeignKey(Locale)\n    translation_key = models.UUIDField()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Wagtail Blocks\nDESCRIPTION: Definition of custom block classes including CaptionedImageBlock, HeadingBlock, and BaseStreamBlock for StreamField implementation\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.blocks import (\n    CharBlock,\n    ChoiceBlock,\n    RichTextBlock,\n    StreamBlock,\n    StructBlock,\n)\nfrom wagtail.embeds.blocks import EmbedBlock\nfrom wagtail.images.blocks import ImageBlock\n\n\nclass CaptionedImageBlock(StructBlock):\n    image = ImageBlock(required=True)\n    caption = CharBlock(required=False)\n    attribution = CharBlock(required=False)\n\n    class Meta:\n        icon = \"image\"\n        template = \"base/blocks/captioned_image_block.html\"\n\n\nclass HeadingBlock(StructBlock):\n    heading_text = CharBlock(classname=\"title\", required=True)\n    size = ChoiceBlock(\n        choices=[\n            (\"\", \"Select a heading size\"),\n            (\"h2\", \"H2\"),\n            (\"h3\", \"H3\"),\n            (\"h4\", \"H4\"),\n        ],\n        blank=True,\n        required=False,\n    )\n\n    class Meta:\n        icon = \"title\"\n        template = \"base/blocks/heading_block.html\"\n\n\nclass BaseStreamBlock(StreamBlock):\n    heading_block = HeadingBlock()\n    paragraph_block = RichTextBlock(icon=\"pilcrow\")\n    image_block = CaptionedImageBlock()\n    embed_block = EmbedBlock(\n        help_text=\"Insert a URL to embed. For example, https://www.youtube.com/watch?v=SGJFWirQ3ks\",\n        icon=\"media\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Forcing Image Format with Quality Settings in Wagtail\nDESCRIPTION: Examples of forcing images to specific formats (AVIF, JPEG, WebP) while simultaneously setting quality levels. This approach converts any image type to the specified format with the defined quality setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_11\n\nLANGUAGE: html+Django\nCODE:\n```\n{% image page.photo width-400 format-avif avifquality-40 %}\n{% image page.photo width-400 format-jpeg jpegquality-40 %}\n{% image page.photo width-400 format-webp webpquality-50 %}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Wagtail in Django urls.py\nDESCRIPTION: This snippet shows the URL pattern configuration for integrating Wagtail into a Django project's urls.py. It includes paths for Django admin, Wagtail admin, documents, and a catch-all for Wagtail's serving mechanism.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/add_to_django_project.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom wagtail import urls as wagtail_urls\nfrom wagtail.admin import urls as wagtailadmin_urls\nfrom wagtail.documents import urls as wagtaildocs_urls\n\nurlpatterns = [\n    path('django-admin/', admin.site.urls),\n\n    path('admin/', include(wagtailadmin_urls)),\n    path('documents/', include(wagtaildocs_urls)),\n\n    # Optional URL for including your own vanilla Django urls/views\n    re_path(r'', include('myapp.urls')),\n\n    # For anything not caught by a more specific rule above, hand over to\n    # Wagtail's serving mechanism\n    re_path(r'', include(wagtail_urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Widget Rendering Method Specification\nDESCRIPTION: Defines the required method for JavaScript widget implementations, specifying how widgets should be rendered, initialized, and managed in the client-side interface. Includes detailed requirements for render(), getValue(), and other essential methods.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/widget_api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript widget rendering method specification\nfunction render(placeholder, name, id, initialState) {\n  // Render widget and return bound widget object\n  return {\n    idForLabel: /* HTML ID for label */,\n    getValue: function() { /* Return submittable value */ },\n    getState: function() { /* Return internal widget state */ },\n    setState: function(newState) { /* Optional: Update widget state */ },\n    focus: function(soft) { /* Set browser focus on widget */ }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installed Apps for Wagtail in Django settings.py\nDESCRIPTION: This snippet demonstrates the INSTALLED_APPS configuration required for Wagtail in a Django project's settings.py. It includes Wagtail's core apps, contrib apps, and third-party dependencies.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/add_to_django_project.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n\n  'myapp',  # your own app\n\n  'wagtail.contrib.forms',\n  'wagtail.contrib.redirects',\n  'wagtail.embeds',\n  'wagtail.sites',\n  'wagtail.users',\n  'wagtail.snippets',\n  'wagtail.documents',\n  'wagtail.images',\n  'wagtail.search',\n  'wagtail.admin',\n  'wagtail',\n\n  'taggit',\n  'modelcluster',\n\n  'django.contrib.admin',\n  'django.contrib.auth',\n  'django.contrib.contenttypes',\n  'django.contrib.sessions',\n  'django.contrib.messages',\n  'django.contrib.staticfiles',\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Results Display in Wagtail using Python\nDESCRIPTION: This code snippet shows how to collect and process form submission results in Wagtail. It extends the FormPage model to include a get_context method that aggregates submission data for display.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n\n    def get_context(self, request, *args, **kwargs):\n        context = super().get_context(request, *args, **kwargs)\n\n        # If you need to show results only on landing page,\n        # You may need to check request.method\n\n        results = dict()\n        # Get information about form fields\n        data_fields = [\n            (field.clean_name, field.label)\n            for field in self.get_form_fields()\n        ]\n\n        # Get all submissions for current page\n        submissions = self.get_submission_class().objects.filter(page=self)\n        for submission in submissions:\n            data = submission.get_data()\n\n            # Count results for each question\n            for name, label in data_fields:\n                answer = data.get(name)\n                if answer is None:\n                    # Something wrong with data.\n                    # Probably you have changed questions\n                    # and now we are receiving answers for old questions.\n                    # Just skip them.\n                    continue\n\n                if type(answer) is list:\n                    # Answer is a list if the field type is 'Checkboxes'\n                    answer = u', '.join(answer)\n\n                question_stats = results.get(label, {})\n                question_stats[answer] = question_stats.get(answer, 0) + 1\n                results[label] = question_stats\n\n        context.update({\n            'results': results,\n        })\n        return context\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail API Endpoints\nDESCRIPTION: Set up API endpoints for pages, images, and documents using WagtailAPIRouter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# api.py\n\nfrom wagtail.api.v2.views import PagesAPIViewSet\nfrom wagtail.api.v2.router import WagtailAPIRouter\nfrom wagtail.images.api.v2.views import ImagesAPIViewSet\nfrom wagtail.documents.api.v2.views import DocumentsAPIViewSet\n\n# Create the router. \"wagtailapi\" is the URL namespace\napi_router = WagtailAPIRouter('wagtailapi')\n\n# Add the three endpoints using the \"register_endpoint\" method.\n# The first parameter is the name of the endpoint (such as pages, images). This\n# is used in the URL of the endpoint\n# The second parameter is the endpoint class that handles the requests\napi_router.register_endpoint('pages', PagesAPIViewSet)\napi_router.register_endpoint('images', ImagesAPIViewSet)\napi_router.register_endpoint('documents', DocumentsAPIViewSet)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tagging for BlogPage Model\nDESCRIPTION: Sets up tagging functionality for blog posts by creating a BlogPageTag model that links tags to blog pages. This implementation uses Wagtail's ClusterTaggableManager to manage tags with proper revision history.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.db import models\n\n# New imports added for ClusterTaggableManager, TaggedItemBase\n\nfrom modelcluster.fields import ParentalKey, ParentalManyToManyField\nfrom modelcluster.contrib.taggit import ClusterTaggableManager\nfrom taggit.models import TaggedItemBase\n\nfrom wagtail.models import Page, Orderable\nfrom wagtail.fields import RichTextField\nfrom wagtail.admin.panels import FieldPanel, InlinePanel, MultiFieldPanel\nfrom wagtail.search import index\n\n\n# ... Keep the definition of BlogIndexPage model and add a new BlogPageTag model\nclass BlogPageTag(TaggedItemBase):\n    content_object = ParentalKey(\n        'BlogPage',\n        related_name='tagged_items',\n        on_delete=models.CASCADE\n    )\n```\n\n----------------------------------------\n\nTITLE: Using FormMixin and EmailFormMixin with Wagtail Page Subclasses in Python\nDESCRIPTION: This snippet demonstrates how to use FormMixin and EmailFormMixin to add form functionality to custom Wagtail Page subclasses. It shows the creation of a BasePage and two form page types: FormPage and EmailFormPage.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page\nfrom wagtail.contrib.forms.models import EmailFormMixin, FormMixin\n\n\nclass BasePage(Page):\n    \"\"\"\n    A shared base page used throughout the project.\n    \"\"\"\n\n    # ...\n\nclass FormPage(FormMixin, BasePage):\n    intro = RichTextField(blank=True)\n    # ...\n\nclass EmailFormPage(EmailFormMixin, FormMixin, BasePage):\n    intro = RichTextField(blank=True)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Basic Report Views Implementation in Python\nDESCRIPTION: Example of implementing basic report views for unpublished pages and custom models using ReportView and PageReportView base classes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.views.reports import ReportView, PageReportView\nfrom wagtail.models import Page\n\nfrom .models import MySnippetModel\n\n\nclass UnpublishedChangesReportView(PageReportView):\n    # includes common page fields by default\n\n    def get_queryset(self):\n        return Page.objects.filter(has_unpublished_changes=True)\n\n\nclass CustomModelReport(ReportView):\n    # includes string representation as a single column only\n\n    def get_queryset(self):\n        return MySnippetModel.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Preview Values in StreamField Blocks\nDESCRIPTION: Example of overriding the get_preview_value() method to provide dynamic preview values from a database. This approach fetches content from a database model to use in the preview.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.models import Quote\n\n\nclass QuoteBlock(blocks.StructBlock):\n    ...\n\n    def get_preview_value(self, value):\n        quote = Quote.objects.first()\n        return {\"text\": quote.text, \"source\": quote.source}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Bulk Actions for Snippets in Python\nDESCRIPTION: Demonstrates how to create a custom bulk action for snippets by subclassing SnippetBulkAction, including an example of limiting the action to specific snippet models.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.snippets.bulk_actions.snippet_bulk_action import SnippetBulkAction\nfrom wagtail import hooks\n\n\n@hooks.register('register_bulk_action')\nclass CustomSnippetBulkAction(SnippetBulkAction):\n    # ...\n\n@hooks.register('register_bulk_action')\nclass CustomSnippetBulkAction(SnippetBulkAction):\n    models = [SnippetA, SnippetB]\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Grouping Multiple Snippet ViewSets\nDESCRIPTION: Implementation of SnippetViewSetGroup to organize multiple snippet types under a single menu item in the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/customizing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.snippets.views.snippets import SnippetViewSet, SnippetViewSetGroup\n\n\nclass AdvertViewSet(SnippetViewSet):\n    model = Advert\n    icon = \"crosshairs\"\n    menu_label = \"Advertisements\"\n    menu_name = \"adverts\"\n\n\nclass ProductViewSet(SnippetViewSet):\n    model = Product\n    icon = \"desktop\"\n    menu_label = \"Products\"\n    menu_name = \"banners\"\n\n\nclass MarketingViewSetGroup(SnippetViewSetGroup):\n    items = (AdvertViewSet, ProductViewSet)\n    menu_icon = \"folder-inverse\"\n    menu_label = \"Marketing\"\n    menu_name = \"marketing\"\n\n\nregister_snippet(MarketingViewSetGroup)\n```\n\n----------------------------------------\n\nTITLE: Generating Responsive Images with Srcset in Wagtail\nDESCRIPTION: Demonstrates how to use the srcset_image tag to generate responsive images with srcset attributes for different screen sizes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% srcset_image page.photo width-{400,800} sizes=\"(max-width: 600px) 400px, 80vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Permission in Wagtail Admin\nDESCRIPTION: Code example showing how to create a custom permission that is not tied to a specific model using the Wagtail Admin content type. This allows adding custom permissions that appear in the Wagtail admin Group edit form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom wagtail.admin.models import Admin\n\n\ncontent_type = ContentType.objects.get_for_model(Admin)\npermission = Permission.objects.create(\n    content_type=content_type,\n    codename=\"can_do_something\",\n    name=\"Can do something\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Fields in EventPage Model\nDESCRIPTION: Example showing how to create an EventPage model with searchable description and filterable date fields using Wagtail's search indexing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/indexing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\nfrom django.utils import timezone\n\nclass EventPage(Page):\n    description = models.TextField()\n    date = models.DateField()\n\n    search_fields = Page.search_fields + [ # Inherit search_fields from Page\n        index.SearchField('description'),\n        index.FilterField('date'),\n    ]\n\n\n# Get future events which contain the string \"Christmas\" in the title or description\n>>> EventPage.objects.filter(date__gt=timezone.now()).search(\"Christmas\")\n```\n\n----------------------------------------\n\nTITLE: Generating Single Image Rendition in Python\nDESCRIPTION: Demonstrates how to create a single image rendition using get_rendition() method with quality and size parameters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnewimage = myimage.get_rendition('fill-300x150|jpegquality-60')\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Form Submission Check in Wagtail\nDESCRIPTION: This code shows how to prevent users from submitting a form more than once. It overrides the serve method in the FormPage model to check for existing submissions and includes a custom template for handling different scenarios.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.shortcuts import render\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField, AbstractFormSubmission\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n\n    def serve(self, request, *args, **kwargs):\n        if self.get_submission_class().objects.filter(page=self, user__pk=request.user.pk).exists():\n            return render(\n                request,\n                self.template,\n                self.get_context(request)\n            )\n\n        return super().serve(request, *args, **kwargs)\n\n    def get_submission_class(self):\n        return CustomFormSubmission\n\n    def process_form_submission(self, form):\n        return self.get_submission_class().objects.create(\n            form_data=form.cleaned_data,\n            page=self, user=form.user\n        )\n\n\nclass CustomFormSubmission(AbstractFormSubmission):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('page', 'user')\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable Django Model with Wagtail\nDESCRIPTION: Demonstrates how to create a searchable Book model by inheriting from index.Indexed and configuring search fields with different field types including SearchField, AutocompleteField, and FilterField. Shows example usage of searching through the backend.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/indexing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\n\nclass Book(index.Indexed, models.Model):\n    title = models.CharField(max_length=255)\n    genre = models.CharField(max_length=255, choices=GENRE_CHOICES)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    published_date = models.DateTimeField()\n\n    search_fields = [\n        index.SearchField('title', boost=10),\n        index.AutocompleteField('title', boost=10),\n        index.SearchField('get_genre_display'),\n\n        index.FilterField('genre'),\n        index.FilterField('author'),\n        index.FilterField('published_date'),\n    ]\n\n# As this model doesn't have a search method in its QuerySet, we have to call search directly on the backend\n>>> from wagtail.search.backends import get_search_backend\n>>> s = get_search_backend()\n\n# Run a search for a book by Roald Dahl\n>>> roald_dahl = Author.objects.get(name=\"Roald Dahl\")\n>>> s.search(\"chocolate factory\", Book.objects.filter(author=roald_dahl))\n[<Book: Charlie and the chocolate factory>]\n```\n\n----------------------------------------\n\nTITLE: Overriding the Global StreamField Block Preview Template\nDESCRIPTION: Template example showing how to extend the default block preview template to include custom CSS and JavaScript. This approach allows adding static assets without specifying preview_template for each block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_16\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"wagtailcore/shared/block_preview.html\" %}\n{% load static %}\n\n{% block css %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static 'css/my-styles.css' %}\">\n{% endblock %}\n\n{% block js %}\n    {{ block.super }}\n    <script src=\"{% static 'js/my-script.js' %}\"></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining PersonChooserViewSet in Python for Wagtail\nDESCRIPTION: This snippet demonstrates how to create a PersonChooserViewSet class using ChooserViewSet. It specifies the model, icon, and text options for the chooser interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.viewsets.chooser import ChooserViewSet\n\n\nclass PersonChooserViewSet(ChooserViewSet):\n    # The model can be specified as either the model class or an \"app_label.model_name\" string;\n    # using a string avoids circular imports when accessing the StreamField block class (see below)\n    model = \"myapp.Person\"\n\n    icon = \"user\"\n    choose_one_text = \"Choose a person\"\n    choose_another_text = \"Choose another person\"\n    edit_item_text = \"Edit this person\"\n    form_fields = [\"first_name\", \"last_name\"]  # fields to show in the \"Create\" tab\n\n\nperson_chooser_viewset = PersonChooserViewSet(\"person_chooser\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Step Form in Wagtail using Python\nDESCRIPTION: This code snippet demonstrates how to create a multi-step form in Wagtail. It includes the FormField and FormPage models, along with a custom serve method to handle form submission and progression through steps.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\nfrom django.shortcuts import render\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n\n    def get_form_class_for_step(self, step):\n        return self.form_builder(step.object_list).get_form_class()\n\n    def serve(self, request, *args, **kwargs):\n        \"\"\"\n        Implements a simple multi-step form.\n\n        Stores each step into a session.\n        When the last step is submitted correctly, saves the whole form into a DB.\n        \"\"\"\n\n        session_key_data = 'form_data-%s' % self.pk\n        is_last_step = False\n        step_number = request.GET.get('p', 1)\n\n        paginator = Paginator(self.get_form_fields(), per_page=1)\n        try:\n            step = paginator.page(step_number)\n        except PageNotAnInteger:\n            step = paginator.page(1)\n        except EmptyPage:\n            step = paginator.page(paginator.num_pages)\n            is_last_step = True\n\n        if request.method == 'POST':\n            # The first step will be submitted with step_number == 2,\n            # so we need to get a form from the previous step\n            # Edge case - submission of the last step\n            prev_step = step if is_last_step else paginator.page(step.previous_page_number())\n\n            # Create a form only for submitted step\n            prev_form_class = self.get_form_class_for_step(prev_step)\n            prev_form = prev_form_class(request.POST, page=self, user=request.user)\n            if prev_form.is_valid():\n                # If data for step is valid, update the session\n                form_data = request.session.get(session_key_data, {})\n                form_data.update(prev_form.cleaned_data)\n                request.session[session_key_data] = form_data\n\n                if prev_step.has_next():\n                    # Create a new form for a following step, if the following step is present\n                    form_class = self.get_form_class_for_step(step)\n                    form = form_class(page=self, user=request.user)\n                else:\n                    # If there is no next step, create form for all fields\n                    form = self.get_form(\n                        request.session[session_key_data],\n                        page=self, user=request.user\n                    )\n\n                    if form.is_valid():\n                        # Perform validation again for whole form.\n                        # After successful validation, save data into DB,\n                        # and remove from the session.\n                        form_submission = self.process_form_submission(form)\n                        del request.session[session_key_data]\n                        # render the landing page\n                        return self.render_landing_page(request, form_submission, *args, **kwargs)\n            else:\n                # If data for step is invalid\n                # we will need to display form again with errors,\n                # so restore previous state.\n                form = prev_form\n                step = prev_step\n        else:\n            # Create empty form for non-POST requests\n            form_class = self.get_form_class_for_step(step)\n            form = form_class(page=self, user=request.user)\n\n        context = self.get_context(request)\n        context['form'] = form\n        context['fields_step'] = step\n        return render(\n            request,\n            self.template,\n            context\n        )\n```\n\n----------------------------------------\n\nTITLE: Basic Image Tag Usage in Wagtail Templates\nDESCRIPTION: Demonstrates how to use the image tag to insert and resize images in Wagtail templates. Shows examples of scaling an image to a specific width and creating a square thumbnail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load wagtailimages_tags %}\n...\n\n<!-- Display the image scaled to a width of 400 pixels: -->\n{% image page.photo width-400 %}\n\n<!-- Display it again, but this time as a square thumbnail: -->\n{% image page.photo fill-80x80 %}\n```\n\n----------------------------------------\n\nTITLE: Setting up URL Routing for Wagtail Django Application\nDESCRIPTION: URL pattern configuration for a Wagtail-Django application defining routes for admin interfaces, document handling, and static file serving in debug mode. Includes paths for Django admin, Wagtail admin, and document management.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/add_to_django_project.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path, re_path\nfrom django.conf.urls.static import static\nfrom django.views.generic.base import RedirectView\nfrom django.contrib import admin\nfrom django.conf import settings\nimport os.path\n\nfrom wagtail import urls as wagtail_urls\nfrom wagtail.admin import urls as wagtailadmin_urls\nfrom wagtail.documents import urls as wagtaildocs_urls\n\n\nurlpatterns = [\n    path('django-admin/', admin.site.urls),\n\n    path('admin/', include(wagtailadmin_urls)),\n    path('documents/', include(wagtaildocs_urls)),\n\n    # For anything not caught by a more specific rule above, hand over to\n    # Wagtail's serving mechanism\n    re_path(r'', include(wagtail_urls)),\n]\n\n\nif settings.DEBUG:\n    from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n    urlpatterns += staticfiles_urlpatterns() # tell gunicorn where static files are in dev mode\n    urlpatterns += static(settings.MEDIA_URL + 'images/', document_root=os.path.join(settings.MEDIA_ROOT, 'images'))\n    urlpatterns += [\n        path('favicon.ico', RedirectView.as_view(url=settings.STATIC_URL + 'myapp/images/favicon.ico'))\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining Form Models in Wagtail\nDESCRIPTION: Creates FormField and FormPage models using Wagtail's form functionality. The FormField model handles individual form fields while FormPage provides form-to-email capabilities with customizable fields and email settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_contact_page.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel,\n    FieldRowPanel,\n    InlinePanel,\n    MultiFieldPanel,\n    PublishingPanel,\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.models import (\n    DraftStateMixin,\n    PreviewableMixin,\n    RevisionMixin,\n    TranslatableMixin,\n)\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\nfrom wagtail.contrib.forms.panels import FormSubmissionsPanel\nfrom wagtail.contrib.settings.models import (\n    BaseGenericSetting,\n    register_setting,\n)\nfrom wagtail.snippets.models import register_snippet\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FormSubmissionsPanel(),\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address'),\n                FieldPanel('to_address'),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Page model with a document ForeignKey\nDESCRIPTION: Implementation of a Wagtail Page model that includes a ForeignKey relationship to a document. This allows linking documents to pages via the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom wagtail.admin.panels import FieldPanel\nfrom wagtail.documents import get_document_model\n\n\nclass YourPage(Page):\n    # ...\n    document = models.ForeignKey(\n        get_document_model(),\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n    )\n\n    content_panels = Page.content_panels + [\n        # ...\n        FieldPanel('document'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Form Submission Model in Wagtail\nDESCRIPTION: This code snippet shows how to create a custom form submission model by extending AbstractFormSubmission. It includes overriding get_submission_class and process_form_submission methods to handle the custom submission model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.conf import settings\nfrom django.db import models\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField, AbstractFormSubmission\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n\n    def get_submission_class(self):\n        return CustomFormSubmission\n\n    def process_form_submission(self, form):\n        return self.get_submission_class().objects.create(\n            form_data=form.cleaned_data,\n            page=self, user=form.user\n        )\n\n\nclass CustomFormSubmission(AbstractFormSubmission):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Serve Method in Wagtail\nDESCRIPTION: Example of overriding the serve() method in a Wagtail EventPage to provide iCal format export functionality based on URL parameters. Demonstrates handling different response formats and content types.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/model_recipes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass EventPage(Page):\n    ...\n\n    def serve(self, request):\n        if \"format\" in request.GET:\n            if request.GET['format'] == 'ical':\n                # Export to ical format\n                response = HttpResponse(\n                    export_event(self, 'ical'),\n                    content_type='text/calendar',\n                )\n                response['Content-Disposition'] = 'attachment; filename=' + self.slug + '.ics'\n                return response\n            else:\n                # Unrecognised format error\n                message = 'Could not export event\\n\\nUnrecognised format: ' + request.GET['format']\n                return HttpResponse(message, content_type='text/plain')\n        else:\n            # Display event page as usual\n            return super().serve(request)\n```\n\n----------------------------------------\n\nTITLE: Creating AgendaViewSetGroup in Python for Wagtail Admin\nDESCRIPTION: Defines a ViewSetGroup to combine multiple ViewSets (CalendarViewSet and EventViewSet) under a single top-level menu item in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.viewsets.base import ViewSetGroup\n\n...\n\nclass AgendaViewSetGroup(ViewSetGroup):\n    menu_label = \"Agenda\"\n    menu_icon = \"table\"\n    # You can specify instances or subclasses of `ViewSet` in `items`.\n    items = (CalendarViewSet(), EventViewSet)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequence Validation in a ListBlock\nDESCRIPTION: Example of a custom ListBlock that validates items are in ascending order. It checks each item against the previous one and attaches error messages to specific indexes using ListBlockValidationError.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_validation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\nfrom wagtail.blocks import ListBlock, ListBlockValidationError\n\nclass AscendingListBlock(ListBlock):\n    # example usage:\n    # price_list = AscendingListBlock(FloatBlock())\n\n    def clean(self, value):\n        result = super().clean(value)\n        errors = {}\n        for i in range(1, len(result)):\n            if result[i] < result[i - 1]:\n                errors[i] = ValidationError(\"Values must be in ascending order\")\n\n        if errors:\n            raise ListBlockValidationError(block_errors=errors)\n\n        return result\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Wagtail Page Test Setup in Python\nDESCRIPTION: Demonstrates how to set up a basic test case for Wagtail pages including creating a root page, site configuration, and test page instance. Shows proper page hierarchy setup and basic page testing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page, Site\nfrom wagtail.rich_text import RichText\nfrom wagtail.test.utils import WagtailPageTestCase\n\nfrom home.models import HomePage, MyPage\n\n\nclass MyPageTest(WagtailPageTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        root = Page.get_first_root_node()\n        Site.objects.create(\n            hostname=\"testserver\",\n            root_page=root,\n            is_default_site=True,\n            site_name=\"testserver\",\n        )\n        home = HomePage(title=\"Home\")\n        root.add_child(instance=home)\n        cls.page = MyPage(\n            title=\"My Page\",\n            slug=\"mypage\",\n        )\n        home.add_child(instance=cls.page)\n\n    def test_get(self):\n        response = self.client.get(self.page.url)\n        self.assertEqual(response.status_code, 200)\n```\n\n----------------------------------------\n\nTITLE: Selecting Published EventPages Descendants - Wagtail QuerySet - Python\nDESCRIPTION: This snippet selects EventPages that are live and descendants of a specified 'events_index'. Prerequisite is an 'events_index' Page object. The output is a QuerySet of live EventPages that are structured under the specified index page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/queryset_reference.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nevents = EventPage.objects.live().descendant_of(events_index)\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom IP Address Field Type to Wagtail Forms\nDESCRIPTION: This snippet shows how to create a custom form field type (IP address) in Wagtail forms by extending the built-in field choices and implementing a custom form builder. It includes creating a custom FormField model and implementing the field creation method.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.db import models\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.contrib.forms.forms import FormBuilder\nfrom wagtail.contrib.forms.models import (\n    AbstractEmailForm, AbstractFormField, FORM_FIELD_CHOICES)\n\n\nclass FormField(AbstractFormField):\n    # extend the built-in field type choices\n    # our field type key will be 'ipaddress'\n    CHOICES = FORM_FIELD_CHOICES + (('ipaddress', 'IP Address'),)\n\n    page = ParentalKey('FormPage', related_name='form_fields')\n    # override the field_type field with extended choices\n    field_type = models.CharField(\n        verbose_name='field type',\n        max_length=16,\n        # use the choices tuple defined above\n        choices=CHOICES\n    )\n\n\nclass CustomFormBuilder(FormBuilder):\n    # create a function that returns an instanced Django form field\n    # function name must match create_<field_type_key>_field\n    def create_ipaddress_field(self, field, options):\n        # return `forms.GenericIPAddressField(**options)` not `forms.SlugField`\n        # returns created a form field with the options passed in\n        return forms.GenericIPAddressField(**options)\n\n\nclass FormPage(AbstractEmailForm):\n    # intro, thank_you_text, edit_handlers, etc...\n\n    # use custom form builder defined above\n    form_builder = CustomFormBuilder\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Privacy Settings for Page Types in Wagtail\nDESCRIPTION: Example showing how to override the get_default_privacy_setting method to set default privacy restrictions for specific page types. Demonstrates both group-based and password-based restrictions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    #...\n    def get_default_privacy_setting(self, request):\n        # set default to group\n        from django.contrib.auth.models import Group\n        from wagtail.models import BaseViewRestriction\n        moderators = Group.objects.filter(name=\"Moderators\").first()\n        editors = Group.objects.filter(name=\"Editors\").first()\n        return {\"type\": BaseViewRestriction.GROUPS, \"groups\": [moderators,editors]}\n\nclass SecretPage(Page):\n    #...\n    def get_default_privacy_setting(self, request):\n        # set default to auto-generated password\n        from django.utils.crypto import get_random_string\n        from wagtail.models import BaseViewRestriction\n\n        return {\"type\": BaseViewRestriction.PASSWORD, \"password\": django.utils.crypto.get_random_string(length=32)}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Fields to Wagtail Login Form\nDESCRIPTION: Template code to add additional form fields to the Wagtail login form by extending login.html and overriding the fields block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/login.html\" %}\n\n{% block fields %}\n    {{ block.super }}\n    <li>\n        <div>\n            <label for=\"id_two-factor-auth\">Two factor auth token</label>\n            <input type=\"text\" name=\"two-factor-auth\" id=\"id_two-factor-auth\">\n        </div>\n    </li>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing map_struct_block_value Function for StructBlock Value Mapping in Python\nDESCRIPTION: Function that maps each child block in a StructBlock value. It takes the StructBlock value, definition, and block path as arguments.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef map_struct_block_value(struct_block_value, block_def, block_path,\n                           **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Profile Settings Form in Python\nDESCRIPTION: Demonstrates how to create a custom settings form that operates on the UserProfile model in Wagtail. This form is used to add a new panel to the account settings page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_account_settings.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# forms.py\n\nfrom django import forms\nfrom wagtail.users.models import UserProfile\n\nclass CustomProfileSettingsForm(forms.ModelForm):\n\n    class Meta:\n        model = UserProfile\n        fields = [...]\n```\n\n----------------------------------------\n\nTITLE: Registering Admin URLs Using Wagtail Hooks in Python\nDESCRIPTION: Illustrates how to define additional admin URLs in the Wagtail interface using the register_admin_urls hook. It returns a list of Django URL patterns, requiring Django and Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.urls import path\n\nfrom wagtail import hooks\n\ndef admin_view(request):\n  return HttpResponse(\n    \"I have approximate knowledge of many things!\",\n    content_type=\"text/plain\")\n\n@hooks.register('register_admin_urls')\ndef urlconf_time():\n  return [\n    path('how_did_you_almost_know_my_name/', admin_view, name='frank'),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Related Fields Search in Book Model\nDESCRIPTION: Demonstrates how to index fields from related objects using RelatedFields to enable searching books by author name.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/indexing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\n\nclass Book(models.Model, index.Indexed):\n    ...\n\n    search_fields = [\n        index.SearchField('title'),\n        index.FilterField('published_date'),\n\n        index.RelatedFields('author', [\n            index.SearchField('name'),\n        ]),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Subclassing StaticBlock to Create a Reusable Block in Python\nDESCRIPTION: Demonstrates how to subclass StaticBlock to create a reusable block configuration that maintains the same settings wherever it's used. Includes Meta class configuration for icon, label, admin text, and template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass LatestPostsStaticBlock(blocks.StaticBlock):\n    class Meta:\n        icon = 'user'\n        label = 'Latest posts'\n        admin_text = '{label}: configured elsewhere'.format(label=label)\n        template = 'latest_posts.html'\n```\n\n----------------------------------------\n\nTITLE: Configuring BlogPage with Filtered PersonChooserWidget in Python for Wagtail\nDESCRIPTION: This code shows how to set up a BlogPage model with a country dropdown and a filtered person chooser, using the PersonChooserWidget with linked fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    country = models.ForeignKey(Country, null=True, blank=True, on_delete=models.SET_NULL)\n    author = models.ForeignKey(Person, null=True, blank=True, on_delete=models.SET_NULL)\n\n    content_panels = Page.content_panels + [\n        FieldPanel('country'),\n        FieldPanel('author', widget=PersonChooserWidget(linked_fields={\n            # pass the country selected in the id_country input to the person chooser\n            # as a URL parameter `country`\n            'country': '#id_country',\n        })),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Filters to Page Listing in Wagtail\nDESCRIPTION: Shows how to implement custom filtering options for the page listing by creating a custom FilterSet class. Enables filtering by blog category field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_page_listings.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\nfrom wagtail.admin.viewsets.pages import PageListingViewSet\n\nfrom myapp.models import BlogPage\n\n\nclass BlogPageFilterSet(PageListingViewSet.filterset_class):\n    class Meta:\n        model = BlogPage\n        fields = [\"blog_category\"]\n\n\nclass BlogPageListingViewSet(PageListingViewSet):\n    # ...\n    filterset_class = BlogPageFilterSet\n```\n\n----------------------------------------\n\nTITLE: Using the picture element with Wagtail images to serve multiple formats\nDESCRIPTION: This code demonstrates how to use the HTML picture element with Wagtail's image template tags to serve the same image in multiple formats (AVIF, WebP, PNG). This allows browsers to choose the most suitable format they support.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/image_file_formats.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{% load wagtailimages_tags %}\n\n<picture>\n    {% image myimage width-1000 format-avif as image_avif %}\n    <source srcset=\"{{ image_avif.url }}\" type=\"image/avif\">\n\n    {% image myimage width-1000 format-webp as image_webp %}\n    <source srcset=\"{{ image_webp.url }}\" type=\"image/webp\">\n\n    {% image myimage width-1000 format-png as image_png %}\n    <source srcset=\"{{ image_png.url }}\" type=\"image/png\">\n\n    {% image myimage width-1000 format-png %}\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Implementing PokemonChooserViewSet for Non-Model Data in Python for Wagtail\nDESCRIPTION: This extensive snippet demonstrates how to create a chooser viewset for non-model data using the queryish library. It includes the definition of a Pokemon APIModel and a PokemonChooserViewSet.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# views.py\n\nimport re\nfrom queryish.rest import APIModel\nfrom wagtail.admin.viewsets.chooser import ChooserViewSet\n\n\nclass Pokemon(APIModel):\n    class Meta:\n        base_url = \"https://pokeapi.co/api/v2/pokemon/\"\n        detail_url = \"https://pokeapi.co/api/v2/pokemon/%s/\"\n        fields = [\"id\", \"name\"]\n        pagination_style = \"offset-limit\"\n        verbose_name_plural = \"pokemon\"\n\n    @classmethod\n    def from_query_data(cls, data):\n        return cls(\n            id=int(re.match(r'https://pokeapi.co/api/v2/pokemon/(\\d+)/', data['url']).group(1)),\n            name=data['name'],\n        )\n\n    @classmethod\n    def from_individual_data(cls, data):\n        return cls(\n            id=data['id'],\n            name=data['name'],\n        )\n\n    def __str__(self):\n        return self.name\n\n\nclass PokemonChooserViewSet(ChooserViewSet):\n    model = Pokemon\n\n    choose_one_text = \"Choose a pokemon\"\n    choose_another_text = \"Choose another pokemon\"\n\n\npokemon_chooser_viewset = PokemonChooserViewSet(\"pokemon_chooser\")\n\n\n# wagtail_hooks.py\n\nfrom wagtail import hooks\n\nfrom .views import pokemon_chooser_viewset\n\n\n@hooks.register(\"register_admin_viewset\")\ndef register_pokemon_chooser_viewset():\n    return pokemon_chooser_viewset\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Cache Key for Efficient Caching in Wagtail\nDESCRIPTION: Shows how to use Page.cache_key to create unique cache keys based on page state. This example demonstrates caching expensive operations with proper expiration and includes how to extend the cache key with custom model fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/performance.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.cache import cache\n\nresult = page.expensive_operation()\ncache.set(\"expensive_result_\" + page.cache_key, result, 3600)\n\n# Later...\ncache.get(\"expensive_result_\" + page.cache_key)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Copy Form with Auto-incrementing Slug in Wagtail\nDESCRIPTION: This code snippet demonstrates how to create a custom copy form that auto-increments the slug field when copying a page in Wagtail. It overrides the default CopyForm class and implements logic to generate a unique slug for the copied page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/page_editing_interface.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.db import models\n\nfrom wagtail.admin.forms.pages import CopyForm\nfrom wagtail.admin.panels import FieldPanel\nfrom wagtail.models import Page\n\n\nclass CustomCopyForm(CopyForm):\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Override the default copy form to auto-increment the slug.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        suffix = 2 # set initial_slug as incremented slug\n        parent_page = self.page.get_parent()\n        if self.page.slug:\n            try:\n                suffix = int(self.page.slug[-1])+1\n                base_slug = self.page.slug[:-2]\n\n            except ValueError:\n                base_slug = self.page.slug\n\n        new_slug = base_slug + f\"-{suffix}\"\n        while not Page._slug_is_available(new_slug, parent_page):\n            suffix += 1\n            new_slug = f\"{base_slug}-{suffix}\"\n\n        self.fields[\"new_slug\"].initial = new_slug\n\nclass BlogPage(Page):\n    copy_form_class = CustomCopyForm # Set the custom copy form for all EventPage models\n\n    introduction = models.TextField(blank=True)\n    body = RichTextField()\n\n    content_panels = Page.content_panels + [\n        FieldPanel('introduction'),\n        FieldPanel('body'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Fields in Wagtail CMS Panel - Python\nDESCRIPTION: Shows how to set required_on_save parameter in FieldPanel to enforce field validation when saving drafts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/7.0.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    content_panels = Page.content_panels + [\n        FieldPanel(\"subtitle\", required_on_save=True)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Custom InlinePanel Implementation - Python\nDESCRIPTION: Shows how to create a custom InlinePanel with associated JavaScript media and implement it in a BlogPage model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomInlinePanel(InlinePanel):\n    class BoundPanel(InlinePanel.BoundPanel):\n        class Media:\n            js = [\"js/inline-panel.js\"]\n\n\nclass BlogPage(Page):\n        # .. fields\n\n        content_panels = Page.content_panels + [\n               CustomInlinePanel(\"blog_person_relationship\"),\n              # ... other panels\n        ]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Toolbar Control for Sentence Counting in Wagtail Draftail\nDESCRIPTION: Python code to register a custom sentence counter control feature in Draftail editor through Wagtail hooks. This registers a new editor feature that displays a sentence counter in the editor toolbar by defining a Control Feature.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.rich_text.editors.draftail.features import ControlFeature\nfrom wagtail import hooks\n\n\n@hooks.register('register_rich_text_features')\ndef register_sentences_counter(features):\n    feature_name = 'sentences'\n    features.default_features.append(feature_name)\n\n    features.register_editor_plugin(\n        'draftail',\n        feature_name,\n        ControlFeature({\n            'type': feature_name,\n        },\n        js=['draftail_sentences.js'],\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model with Custom Wagtail Panels in Python\nDESCRIPTION: Shows how to create a Book model with custom form widgets for different field types, demonstrating both variable-based and inline widget configuration. The panels list defines how fields appear in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django import forms            # the default Django widgets live here\nfrom wagtail.admin import widgets   # to use Wagtail's special datetime widget\n\nclass Book(models.Model):\n    title = models.CharField(max_length=256)\n    release_date = models.DateField()\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n\n    # You can create them separately\n    title_widget = forms.TextInput(\n        attrs = {\n            'placeholder': 'Enter Full Title'\n        }\n    )\n    # using the correct widget for your field type and desired effect\n    date_widget = widgets.AdminDateInput(\n        attrs = {\n            'placeholder': 'dd-mm-yyyy'\n        }\n    )\n\n    panels = [\n        TitleFieldPanel('title', widget=title_widget), # then add them as a variable\n        FieldPanel('release_date', widget=date_widget),\n        FieldPanel('price', widget=forms.NumberInput(attrs={'placeholder': 'Retail price on release'})) # or directly inline\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Root-Level Pages in Wagtail\nDESCRIPTION: Example of allowing a page type to be created only under the root page by setting parent_page_types to reference the core Page class, useful for home pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass HomePage(Page):\n    parent_page_types = ['wagtailcore.Page']\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent Page Types in Wagtail\nDESCRIPTION: Example of using the parent_page_types attribute to restrict where a page type can be created. This allows pages to only be created under specific parent page types.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    parent_page_types = ['mysite.BlogIndexPage']\n```\n\n----------------------------------------\n\nTITLE: Adding ParentalManyToManyField for Authors in BlogPage Model\nDESCRIPTION: Updates the BlogPage model to include a many-to-many relationship with authors using ParentalManyToManyField. This connects blog posts with author snippets while maintaining proper revision history.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# New imports added for ParentalManyToManyField, and MultiFieldPanel\nfrom django.db import models\n\nfrom modelcluster.fields import ParentalKey, ParentalManyToManyField\nfrom wagtail.models import Page, Orderable\nfrom wagtail.fields import RichTextField\nfrom wagtail.admin.panels import MultiFieldPanel\nfrom wagtail.search import index\nfrom wagtail.snippets.models import register_snippet\n\nclass BlogPage(Page):\n    date = models.DateField(\"Post date\")\n    intro = models.CharField(max_length=250)\n    body = RichTextField(blank=True)\n\n    # Add this:\n    authors = ParentalManyToManyField('blog.Author', blank=True)\n\n    # ... Keep the main_image method and search_fields definition. Modify your content_panels:\n    content_panels = Page.content_panels + [\n        MultiFieldPanel([\"date\", \"authors\"], heading=\"Blog information\"),\n        \"intro\", \"body\", \"gallery_images\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom clean_name Generation for Wagtail FormFields in Python\nDESCRIPTION: This code snippet shows how to create a custom FormField class that overrides the get_field_clean_name method to generate unique field names using a UUID. It also includes a FormPage class that uses this custom FormField.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom django.db import models\nfrom modelcluster.fields import ParentalKey\n\n# ... other field and edit_handler imports\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n    def get_field_clean_name(self):\n        clean_name = super().get_field_clean_name()\n        id = str(uuid.uuid4())[:8] # short uuid\n        return f\"{id}_{clean_name}\"\n\n\nclass FormPage(AbstractEmailForm):\n    # ... page definitions\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Response with on_serve_page Hook in Wagtail CMS\nDESCRIPTION: Shows how to use the 'on_serve_page' hook to modify the page serving chain. This example adds custom headers to the HTTP response by wrapping the next function in the serving chain.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('on_serve_page')\ndef add_custom_headers(next_serve_page):\n    def wrapper(page, request, args, kwargs):\n        response = next_serve_page(page, request, args, kwargs)\n        response['Custom-Header'] = 'value'\n        return response\n    return wrapper\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Menu Items for Calendar Views in Wagtail Admin\nDESCRIPTION: Demonstrates how to create a group of menu items for multiple calendar views in the Wagtail admin sidebar, using SubmenuMenuItem and Menu classes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, reverse\n\nfrom wagtail.admin.menu import Menu, MenuItem, SubmenuMenuItem\nfrom wagtail import hooks\n\n\nfrom .views import index, month\n\n\n@hooks.register('register_admin_urls')\ndef register_calendar_url():\n    return [\n        path('calendar/', index, name='calendar'),\n        path('calendar/month/', month, name='calendar-month'),\n    ]\n\n\n@hooks.register('register_admin_menu_item')\ndef register_calendar_menu_item():\n    submenu = Menu(items=[\n        MenuItem('Calendar', reverse('calendar'), icon_name='date'),\n        MenuItem('Current month', reverse('calendar-month'), icon_name='date'),\n    ])\n\n    return SubmenuMenuItem('Calendar', submenu, icon_name='date')\n```\n\n----------------------------------------\n\nTITLE: Creating a Page model with document collection integration\nDESCRIPTION: Python code for a Page model that links to a document collection and retrieves all documents within that collection for display.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.documents import get_document_model\n\nclass PageWithCollection(Page):\n    collection = models.ForeignKey(\n        \"wagtailcore.Collection\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+',\n        verbose_name='Document Collection',\n    )\n\n    content_panels = Page.content_panels + [\n        FieldPanel(\"collection\"),\n    ]\n\n    def get_context(self, request):\n        context = super().get_context(request)\n        documents = get_document_model().objects.filter(collection=self.collection)\n        context['documents'] = documents\n        return context\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Redirect with RoutablePageMixin in Wagtail\nDESCRIPTION: This code demonstrates how to extend AbstractEmailForm with RoutablePageMixin to create a form page that redirects to a thank-you route after submission to prevent double submissions. It overrides the render_landing_page method to redirect instead of rendering the response directly, and defines two routes: one for the form itself and another for the thank-you page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/formbuilder_routablepage_redirect.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import redirect\n\nfrom wagtail.contrib.forms.models import AbstractEmailForm\nfrom wagtail.contrib.routable_page.models import RoutablePageMixin, path\n\n\nclass FormPage(RoutablePageMixin, AbstractEmailForm):\n\n    # fields, content_panels, …\n\n    @path(\"\")\n    def index_route(self, request, *args, **kwargs):\n        \"\"\"Serve the form, and validate it on POST\"\"\"\n        return super(AbstractEmailForm, self).serve(request, *args, **kwargs)\n\n    def render_landing_page(self, request, form_submission, *args, **kwargs):\n        \"\"\"Redirect instead to self.thank_you route\"\"\"\n        url = self.reverse_subpage(\"thank_you\")\n        # If a form_submission instance is available, append the ID to URL.\n        if form_submission:\n            url += \"?id=%s\" % form_submission.id\n        return redirect(self.url + url, permanent=False)\n\n    @path(\"thank-you/\")\n    def thank_you(self, request):\n        \"\"\"Return the superclass's landing page, after redirect.\"\"\"\n        form_submission = None\n        try:\n            submission_id = int(request.GET[\"id\"])\n        except (KeyError, TypeError):\n            pass\n        else:\n            submission_class = self.get_submission_class()\n            try:\n                form_submission = submission_class.objects.get(id=submission_id)\n            except submission_class.DoesNotExist:\n                pass\n\n        return super().render_landing_page(request, form_submission)\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Image Extensions for SVG Support in Wagtail\nDESCRIPTION: Python configuration to enable SVG image uploads in Wagtail by adding 'svg' to the list of allowed image extensions. This is required before users can upload and use SVG images in the CMS.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILIMAGES_EXTENSIONS = [\"gif\", \"jpg\", \"jpeg\", \"png\", \"webp\", \"svg\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Attributes to Wagtail Panels\nDESCRIPTION: Shows how to use the attrs parameter to add custom HTML attributes to panels, enabling integration with JavaScript frameworks like Stimulus. This example demonstrates data attributes for controller integration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n    content_panels = [\n        MultiFieldPanel(\n            [\n                FieldPanel('cover'),\n                FieldPanel('book_file'),\n                FieldPanel('publisher', attrs={'data-my-controller-target': 'myTarget'}),\n            ],\n            heading=\"Collection of Book Fields\",\n            classname=\"collapsed\",\n            attrs={'data-controller': 'my-controller'},\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring StreamField Search Indexing in Python\nDESCRIPTION: Example of configuring which block types in a StreamField should be indexed for search. This demonstrates how to exclude specific blocks from the search index with the search_index parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('normal_text', blocks.RichTextBlock()),\n    ('pull_quote', blocks.RichTextBlock(search_index=False)),\n    ('footnotes', blocks.ListBlock(blocks.CharBlock(), search_index=False)),\n])\n```\n\n----------------------------------------\n\nTITLE: Updating Form Submission Processing in Python\nDESCRIPTION: Illustrates the change required when processing form submissions due to the conversion of form_data from TextField to JSONField. The JSON encoding step is removed as the field now accepts Python objects directly.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/3.0.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef process_form_submission(self, form):\n    self.get_submission_class().objects.create(\n        # form_data=json.dumps(form.cleaned_data, cls=DjangoJSONEncoder),\n        form_data=form.cleaned_data, # new\n        page=self, user=form.user\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom 'Mark' Inline Style Feature in Draftail (Python)\nDESCRIPTION: This code snippet demonstrates how to register a custom 'mark' inline style feature for the Draftail editor in Wagtail. It includes configuration for the editor toolbar, content transformation, and database conversion.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport wagtail.admin.rich_text.editors.draftail.features as draftail_features\nfrom wagtail.admin.rich_text.converters.html_to_contentstate import InlineStyleElementHandler\nfrom wagtail import hooks\n\n# 1. Use the register_rich_text_features hook.\n@hooks.register('register_rich_text_features')\ndef register_mark_feature(features):\n    \"\"\"\n    Registering the `mark` feature, which uses the `MARK` Draft.js inline style type,\n    and is stored as HTML with a `<mark>` tag.\n    \"\"\"\n    feature_name = 'mark'\n    type_ = 'MARK'\n    tag = 'mark'\n\n    # 2. Configure how Draftail handles the feature in its toolbar.\n    control = {\n        'type': type_,\n        'label': '☆',\n        'description': 'Mark',\n        # This isn't even required – Draftail has predefined styles for MARK.\n        # 'style': {'textDecoration': 'line-through'},\n    }\n\n    # 3. Call register_editor_plugin to register the configuration for Draftail.\n    features.register_editor_plugin(\n        'draftail', feature_name, draftail_features.InlineStyleFeature(control)\n    )\n\n    # 4.configure the content transform from the DB to the editor and back.\n    db_conversion = {\n        'from_database_format': {tag: InlineStyleElementHandler(type_)},\n        'to_database_format': {'style_map': {type_: tag}},\n    }\n\n    # 5. Call register_converter_rule to register the content transformation conversion.\n    features.register_converter_rule('contentstate', feature_name, db_conversion)\n\n    # 6. (optional) Add the feature to the default features list to make it available\n    # on rich text fields that do not specify an explicit 'features' list\n    features.default_features.append('mark')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Forms for Wagtail Admin\nDESCRIPTION: Implementation of custom user creation and editing forms that extend Wagtail's default forms to include the additional fields from the custom user model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# myapp/forms.py\nfrom django import forms\nfrom django.utils.translation import gettext_lazy as _\n\nfrom wagtail.users.forms import UserEditForm, UserCreationForm\n\nfrom myapp.models import MembershipStatus\n\n\nclass CustomUserEditForm(UserEditForm):\n    status = forms.ModelChoiceField(queryset=MembershipStatus.objects, required=True, label=_(\"Status\"))\n\n    # Use ModelForm's automatic form fields generation for the model's `country` field,\n    # but use an explicit custom form field for `status`.\n    class Meta(UserEditForm.Meta):\n        fields = UserEditForm.Meta.fields | {\"country\", \"status\"}\n\n\nclass CustomUserCreationForm(UserCreationForm):\n    status = forms.ModelChoiceField(queryset=MembershipStatus.objects, required=True, label=_(\"Status\"))\n\n    # Use ModelForm's automatic form fields generation for the model's `country` field,\n    # but use an explicit custom form field for `status`.\n    class Meta(UserCreationForm.Meta):\n        fields = UserCreationForm.Meta.fields | {\"country\", \"status\"}\n```\n\n----------------------------------------\n\nTITLE: Defining AddressBlock and Telepath Adapter in Python\nDESCRIPTION: Demonstrates how to create an AddressBlock and register a custom telepath adapter for it, allowing custom JavaScript behavior.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AddressBlock(StructBlock):\n    street = CharBlock()\n    town = CharBlock()\n    state = CharBlock(required=False)\n    country = ChoiceBlock(choices=[\n        ('us', 'United States'),\n        ('ca', 'Canada'),\n        ('mx', 'Mexico'),\n    ])\n\nclass AddressBlockAdapter(StructBlockAdapter):\n    js_constructor = 'myapp.blocks.AddressBlock'\n\n    @cached_property\n    def media(self):\n        structblock_media = super().media\n        return forms.Media(\n            js=structblock_media._js + ['js/address-block.js'],\n            css=structblock_media._css\n        )\n\nregister(AddressBlockAdapter(), AddressBlock)\n```\n\n----------------------------------------\n\nTITLE: Creating Form Page Template in Wagtail\nDESCRIPTION: Implements the main form page template that displays the contact form. Uses Wagtail template tags and includes CSRF protection for form submission.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_contact_page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n{% load wagtailcore_tags %}\n\n{% block body_class %}template-formpage{% endblock %}\n\n{% block content %}\n    <h1>{{ page.title }}</h1>\n    <div>{{ page.intro|richtext }}</div>\n\n    <form class=\"page-form\" action=\"{% pageurl page %}\" method=\"POST\">\n        {% csrf_token %}\n        {{ form.as_div }}\n        <button type=\"Submit\">Submit</button>\n    </form>\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Page Listing in Wagtail\nDESCRIPTION: Shows how to create a basic custom page listing for blog pages by subclassing PageListingViewSet and registering it with the Wagtail admin. Defines the menu label, icon, and model to be displayed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_page_listings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# myapp/wagtail_hooks.py\nfrom wagtail import hooks\nfrom wagtail.admin.viewsets.pages import PageListingViewSet\n\nfrom myapp.models import BlogPage\n\n\nclass BlogPageListingViewSet(PageListingViewSet):\n    icon = \"globe\"\n    menu_label = \"Blog Pages\"\n    add_to_admin_menu = True\n    model = BlogPage\n\n\nblog_page_listing_viewset = BlogPageListingViewSet(\"blog_pages\")\n@hooks.register(\"register_admin_viewset\")\ndef register_blog_page_listing_viewset():\n    return blog_page_listing_viewset\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ChoiceBlock Subclass in Wagtail\nDESCRIPTION: This snippet shows how to create a reusable ChoiceBlock by subclassing it. The DrinksChoiceBlock class defines a fixed list of choices and sets a cup icon through the Meta class, making it easier to reuse across multiple StreamFields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DrinksChoiceBlock(blocks.ChoiceBlock):\n    choices = [\n        ('tea', 'Tea'),\n        ('coffee', 'Coffee'),\n    ]\n\n    class Meta:\n        icon = 'cup'\n```\n\n----------------------------------------\n\nTITLE: Defining a CharBlock with Custom Template in Python\nDESCRIPTION: Example of creating a custom HeadingBlock that extends CharBlock with a template that wraps content in h1 tags. The Meta class specifies the template path to be used for rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HeadingBlock(blocks.CharBlock):\n    class Meta:\n        template = 'blocks/heading.html'\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Production Settings\nDESCRIPTION: Django production settings including database configuration, security settings, static file handling, and AWS S3 storage setup.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport random\nimport string\nimport dj_database_url\n\nfrom .base import *\n\nDEBUG = False\n\nDATABASES = {\n    \"default\": dj_database_url.config(\n        conn_max_age=600,\n        conn_health_checks=True\n    )\n}\n\nSECRET_KEY = os.environ[\"SECRET_KEY\"]\n\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n\nSECURE_SSL_REDIRECT = True\n\nALLOWED_HOSTS = os.getenv(\"DJANGO_ALLOWED_HOSTS\", \"*\").split(\",\")\n\nCSRF_TRUSTED_ORIGINS = os.getenv(\"DJANGO_CSRF_TRUSTED_ORIGINS\", \"\").split(\",\")\n\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n\nMIDDLEWARE.append(\"whitenoise.middleware.WhiteNoiseMiddleware\")\nSTORAGES[\"staticfiles\"][\"BACKEND\"] = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\n\nif \"AWS_STORAGE_BUCKET_NAME\" in os.environ:\n    AWS_STORAGE_BUCKET_NAME = os.getenv(\"AWS_STORAGE_BUCKET_NAME\")\n    AWS_S3_REGION_NAME = os.getenv(\"AWS_S3_REGION_NAME\")\n    AWS_S3_ENDPOINT_URL = os.getenv(\"AWS_S3_ENDPOINT_URL\")\n    AWS_S3_ACCESS_KEY_ID = os.getenv(\"AWS_S3_ACCESS_KEY_ID\")\n    AWS_S3_SECRET_ACCESS_KEY = os.getenv(\"AWS_S3_SECRET_ACCESS_KEY\")\n\n    INSTALLED_APPS.append(\"storages\")\n\n    STORAGES[\"default\"][\"BACKEND\"] = \"storages.backends.s3boto3.S3Boto3Storage\"\n\n    AWS_S3_OBJECT_PARAMETERS = {\n        'CacheControl': 'max-age=86400',\n    }\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n        },\n    },\n    \"loggers\": {\n        \"django\": {\n            \"handlers\": [\"console\"],\n            \"level\": os.getenv(\"DJANGO_LOG_LEVEL\", \"INFO\"),\n        },\n    },\n}\n\nWAGTAIL_REDIRECTS_FILE_STORAGE = \"cache\"\n\ntry:\n    from .local import *\nexcept ImportError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Disabling free tagging in Wagtail with a custom tag model\nDESCRIPTION: This snippet shows how to prevent users from creating new tags by setting free_tagging=False on a custom tag model. It also registers the tag model as a snippet to allow management through the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/tags.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom taggit.models import TagBase\nfrom wagtail.snippets.models import register_snippet\n\n@register_snippet\nclass BlogTag(TagBase):\n    free_tagging = False\n\n    class Meta:\n        verbose_name = \"blog tag\"\n        verbose_name_plural = \"blog tags\"\n```\n\n----------------------------------------\n\nTITLE: Organizing Page Listings via PageListingViewSet\nDESCRIPTION: Documentation for the PageListingViewSet class, which specializes in managing page listings in Wagtail's admin. Key attributes include the model it operates on, index view class, and various display-related properties. Requires understanding of Wagtail's page model mechanics.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/viewsets.md#2025-04-21_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: wagtail.admin.viewsets.pages.PageListingViewSet\n\n   .. autoattribute:: model\n   .. autoattribute:: index_view_class\n   .. autoattribute:: choose_parent_view_class\n   .. autoattribute:: columns\n   .. autoattribute:: filterset_class\n```\n\n----------------------------------------\n\nTITLE: Registering AgendaViewSetGroup in Wagtail Hooks\nDESCRIPTION: Shows how to register the AgendaViewSetGroup using the register_admin_viewset hook, which groups multiple ViewSets under a single top-level menu item.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom .views import AgendaViewSetGroup\n\n@hooks.register(\"register_admin_viewset\")\ndef register_viewset():\n    return AgendaViewSetGroup()\n```\n\n----------------------------------------\n\nTITLE: Defining Wagtail Admin Model Form in Python\nDESCRIPTION: Demonstrates how to create a Wagtail admin model form using WagtailAdminModelForm as the base class, which automatically selects appropriate widgets for model fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/forms.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nfrom wagtail.admin.forms.models import WagtailAdminModelForm\nfrom wagtail.images.models import Image\n\n\nclass FeaturedImage(models.Model):\n    date = models.DateField()\n    image = models.ForeignKey(Image, on_delete=models.CASCADE)\n\n\nclass FeaturedImageForm(WagtailAdminModelForm):\n    class Meta:\n        model = FeaturedImage\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom UserViewSet for Wagtail\nDESCRIPTION: Custom UserViewSet implementation that connects the custom forms to Wagtail's user management system, ensuring custom fields are properly handled in the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# myapp/viewsets.py\nfrom wagtail.users.views.users import UserViewSet as WagtailUserViewSet\n\nfrom .forms import CustomUserCreationForm, CustomUserEditForm\n\n\nclass UserViewSet(WagtailUserViewSet):\n    def get_form_class(self, for_update=False):\n        if for_update:\n            return CustomUserEditForm\n        return CustomUserCreationForm\n```\n\n----------------------------------------\n\nTITLE: Implementing map_block_value Function for Block Value Mapping in Python\nDESCRIPTION: Function that maps the value of a block based on the given operation. It takes block value, definition, path, and an operation instance as arguments.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef map_block_value(block_value, block_def, block_path, operation, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Grouping ViewSets with ViewSetGroup in Wagtail\nDESCRIPTION: This snippet details the ViewSetGroup class, used to bundle together multiple ViewSet instances or classes as a cohesive unit. It outlines attributes like items and menu-related properties for organizing and presenting groups within the admin menu structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/viewsets.md#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: wagtail.admin.viewsets.base.ViewSetGroup\n\n   .. attribute:: items\n      :value: ()\n\n      A list or tuple of :class:`~wagtail.admin.viewsets.base.ViewSet` classes or instances to be grouped together.\n\n   .. autoattribute:: menu_icon\n   .. autoattribute:: menu_label\n   .. autoattribute:: menu_name\n   .. autoattribute:: menu_order\n   .. autoattribute:: menu_item_class\n   .. autoattribute:: add_to_admin_menu\n   .. automethod:: get_menu_item\n```\n\n----------------------------------------\n\nTITLE: Configuring PersonViewSet with ModelViewSet\nDESCRIPTION: Implementation of a ModelViewSet for managing Person model instances, including configuration for form fields, icon, and view settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.viewsets.model import ModelViewSet\nfrom .models import Person\n\n\nclass PersonViewSet(ModelViewSet):\n    model = Person\n    form_fields = [\"first_name\", \"last_name\"]\n    icon = \"user\"\n    add_to_admin_menu = True\n    copy_view_enabled = False\n    inspect_view_enabled = True\n\n\nperson_viewset = PersonViewSet(\"person\")  # defines /admin/person/ as the base URL\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Input Widget for Form Fields in Wagtail\nDESCRIPTION: This snippet demonstrates how to create a custom email input widget with enhanced attributes for cross-browser compatibility and improved user experience, including autocomplete, placeholder text, and other input attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# myapp/widgets.py\nfrom django import forms\nfrom django.utils.translation import gettext as _\n\n#... other imports\n\nclass CustomEmailInputWidget(forms.EmailInput):\n    \"\"\"\n    This is a custom input type for the email field, with refined\n    extra attributes for cross-browser compatibility.\n    \"\"\"\n\n    def __init__(self, attrs={}):\n\n        attrs = {\n            \"autocapitalize\": \"off\",\n            \"autocomplete\": \"email\",\n            \"autocorrect\": \"off\",\n            \"placeholder\": _(\"email@example.com\"),\n            \"spellcheck\": \"false\",\n            **attrs, # let supplied attrs override the new defaults\n        }\n\n        super().__init__(attrs=attrs)\n```\n\n----------------------------------------\n\nTITLE: Creating a ListBlock with StructBlock Items in Python\nDESCRIPTION: Shows how to create a ListBlock containing StructBlock items, allowing for more complex repeated structures. Each item in the list contains both an ingredient name and optional amount.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    # ...\n    ('ingredients_list', blocks.ListBlock(blocks.StructBlock([\n        ('ingredient', blocks.CharBlock()),\n        ('amount', blocks.CharBlock(required=False)),\n    ]))),\n])\n```\n\n----------------------------------------\n\nTITLE: Updating Block.get_template Method Signature in Wagtail StreamField Blocks\nDESCRIPTION: This snippet demonstrates how to update the signature of the get_template method in Wagtail StreamField blocks to include the new 'value' parameter. The method now accepts both 'value' and 'context' parameters, allowing access to the block's value during template selection.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Old\ndef get_template(self, context=None):\n    ...\n\n# New\ndef get_template(self, value=None, context=None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dropdown Menus for Page Listing Buttons in Wagtail CMS\nDESCRIPTION: Demonstrates how to create a button with a custom dropdown menu by registering two hooks: one for the button itself and another for the dropdown menu contents. This example shows conditional button registration based on user permissions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin import widgets as wagtailadmin_widgets\n\n@hooks.register('register_page_listing_buttons')\ndef page_custom_listing_buttons(page, user, next_url=None):\n    yield wagtailadmin_widgets.ButtonWithDropdownFromHook(\n        'More actions',\n        hook_name='my_button_dropdown_hook',\n        page=page,\n        user=user,\n        next_url=next_url,\n        priority=50\n    )\n\n@hooks.register('my_button_dropdown_hook')\ndef page_custom_listing_more_buttons(page, user, next_url=None):\n    page_perms = page.permissions_for_user(user)\n    if page_perms.can_move():\n        yield wagtailadmin_widgets.Button('Move', reverse('wagtailadmin_pages:move', args=[page.id]), priority=10)\n    if page_perms.can_delete():\n        yield wagtailadmin_widgets.Button('Delete', reverse('wagtailadmin_pages:delete', args=[page.id]), priority=30)\n    if page_perms.can_unpublish():\n        yield wagtailadmin_widgets.Button('Unpublish', reverse('wagtailadmin_pages:unpublish', args=[page.id]), priority=40)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippet Copy View in Python\nDESCRIPTION: Example showing how to disable the new default copy view functionality in SnippetViewSet and ModelViewSet classes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PersonViewSet(SnippetViewSet):\n    model = Person\n    #...\n    copy_view_enabled = False\n\nclass PersonViewSet(ModelViewSet):\n    model = Person\n    #...\n    copy_view_enabled = False\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column Types to TypedTableBlock in Wagtail\nDESCRIPTION: Extend the TypedTableBlock with a custom 'country' column type using a ChoiceBlock with predefined options.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/typed_table_block.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable = TypedTableBlock([\n    ('text', blocks.CharBlock()),\n    ('numeric', blocks.FloatBlock()),\n    ('rich_text', blocks.RichTextBlock()),\n    ('image', ImageChooserBlock()),\n    ('country', ChoiceBlock(choices=[\n        ('be', 'Belgium'),\n        ('fr', 'France'),\n        ('de', 'Germany'),\n        ('nl', 'Netherlands'),\n        ('pl', 'Poland'),\n        ('uk', 'United Kingdom'),\n    ])),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing Bulk Action Execution in Python\nDESCRIPTION: Shows how to override the execute_action method to implement custom logic for the bulk action, including handling user permissions and updating objects.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef execute_action(cls, objects, **kwargs):\n    # the kwargs here is the output of the get_execution_context method\n    user = kwargs.get('user', None)\n    num_parent_objects, num_child_objects = 0, 0\n    # you could run the action per object or run them in bulk using django's bulk update and delete methods\n    for obj in objects:\n        num_child_objects += obj.get_children().count()\n        num_parent_objects += 1\n        obj.delete(user=user)\n        num_parent_objects += 1\n    return num_parent_objects, num_child_objects\n```\n\n----------------------------------------\n\nTITLE: Registering PersonChooserViewSet with Wagtail Hooks\nDESCRIPTION: This code snippet shows how to register the PersonChooserViewSet with Wagtail's admin interface using the register_admin_viewset hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\nfrom .views import person_chooser_viewset\n\n\n@hooks.register(\"register_admin_viewset\")\ndef register_viewset():\n    return person_chooser_viewset\n```\n\n----------------------------------------\n\nTITLE: Handling Page Move Events in Wagtail Cache\nDESCRIPTION: Example showing how to handle pre_page_move signals to clear cache entries when pages are moved to different sections. Demonstrates distinguishing between page moves and reorders.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/signals.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.signals import pre_page_move\nfrom wagtail.contrib.frontend_cache.utils import purge_page_from_cache\n\n# Clear a page's old URLs from the cache when it moves to a different section\ndef clear_page_url_from_cache_on_move(sender, **kwargs):\n\n    if kwargs['url_path_before'] == kwargs['url_path_after']:\n        # No URLs are changing :) nothing to do here!\n        return\n\n    # The page is moving to a new section (possibly even a new site)\n    # so clear old URL(s) from the cache\n    purge_page_from_cache(kwargs['instance'])\n\n# Register a receiver\npre_page_move.connect(clear_old_page_urls_from_cache)\n```\n\n----------------------------------------\n\nTITLE: Changing Default Snippet Action in Python\nDESCRIPTION: This snippet shows how to change the default action in the snippet action menu using the construct_snippet_action_menu hook in Wagtail. It makes the delete action the default by moving it to the top of the list.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_snippet_action_menu')\ndef make_delete_default_action(menu_items, request, context):\n    for (index, item) in enumerate(menu_items):\n        if item.name == 'delete':\n            # move to top of list\n            menu_items.pop(index)\n            menu_items.insert(0, item)\n            break\n```\n\n----------------------------------------\n\nTITLE: Implementing After Bulk Action Hook in Python\nDESCRIPTION: This snippet demonstrates the use of the after_bulk_action hook in Wagtail. It shows how to return a custom HTTP response after a bulk delete action has been executed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register(\"after_bulk_action\")\ndef hook_func(request, action_type, objects, action_class_instance):\n  if action_type == 'delete':\n    return HttpResponse(f\"{len(objects)} objects have been deleted\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Landing Page Redirect in Wagtail Forms\nDESCRIPTION: This snippet demonstrates how to implement a custom landing page redirect after form submission by overriding the render_landing_page method. It adds a thank_you_page field to enable redirects to a selected page, passing the form submission ID as a URL parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import redirect\nfrom wagtail.admin.panels import FieldPanel, FieldRowPanel, InlinePanel, MultiFieldPanel\nfrom wagtail.contrib.forms.models import AbstractEmailForm\n\nclass FormPage(AbstractEmailForm):\n\n    # intro, thank_you_text, ...\n\n    thank_you_page = models.ForeignKey(\n        'wagtailcore.Page',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+',\n    )\n\n    def render_landing_page(self, request, form_submission=None, *args, **kwargs):\n        if self.thank_you_page:\n            url = self.thank_you_page.url\n            # if a form_submission instance is available, append the id to URL\n            # when previewing landing page, there will not be a form_submission instance\n            if form_submission:\n                url += '?id=%s' % form_submission.id\n            return redirect(url, permanent=False)\n        # if no thank_you_page is set, render default landing page\n        return super().render_landing_page(request, form_submission, *args, **kwargs)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields'),\n        FieldPanel('thank_you_text'),\n        FieldPanel('thank_you_page'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname='col6'),\n                FieldPanel('to_address', classname='col6'),\n            ]),\n            FieldPanel('subject'),\n        ], 'Email'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining StructBlock in StreamField\nDESCRIPTION: Example of creating a structured block type for person information within a StreamField.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('person', blocks.StructBlock([\n        ('first_name', blocks.CharBlock()),\n        ('surname', blocks.CharBlock()),\n        ('photo', ImageBlock(required=False)),\n        ('biography', blocks.RichTextBlock()),\n    ])),\n    ('heading', blocks.CharBlock(form_classname=\"title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageBlock()),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Submissions Listing in Wagtail Admin\nDESCRIPTION: This snippet shows how to customize the form submissions listing in Wagtail Admin by creating a custom SubmissionsListView class. It allows modifying pagination, ordering, and CSV filename generation for form submissions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\nfrom wagtail.contrib.forms.views import SubmissionsListView\n\n\nclass CustomSubmissionsListView(SubmissionsListView):\n    paginate_by = 50  # show more submissions per page, default is 20\n    default_ordering = ('submit_time',)  # order submissions by oldest first, normally newest first\n    ordering_csv = ('-submit_time',)  # order csv export by newest first, normally oldest first\n\n    # override the method to generate csv filename\n    def get_csv_filename(self):\n        \"\"\" Returns the filename for CSV file with page slug at start\"\"\"\n        filename = super().get_csv_filename()\n        return self.form_page.slug + '-' + filename\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    \"\"\"Form Page with customized submissions listing view\"\"\"\n\n    # set custom view class as class attribute\n    submissions_list_view_class = CustomSubmissionsListView\n\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    # content_panels = ...\n```\n\n----------------------------------------\n\nTITLE: Using LogContext for Bulk Logging in Wagtail (Python)\nDESCRIPTION: Shows how to use the LogContext context manager to simplify logging multiple actions with a common user and UUID, which is useful for import scripts or bulk operations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/audit_log.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.log_actions import LogContext\n\nwith LogContext(user=User.objects.get(username='admin')):\n    # ...\n    log(page, 'wagtail.edit')\n    # ...\n    log(page, 'wagtail.publish')\n```\n\n----------------------------------------\n\nTITLE: Implementing MultipleChooserPanel for Gallery Images in Wagtail\nDESCRIPTION: This snippet demonstrates how to use MultipleChooserPanel with a BlogPageGalleryImage model to create an image gallery. It shows the model definition with a ParentalKey relationship to BlogPage and how to configure the panel with the proper chooser field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPageGalleryImage(Orderable):\n    page = ParentalKey(BlogPage, on_delete=models.CASCADE, related_name='gallery_images')\n    image = models.ForeignKey(\n        'wagtailimages.Image', on_delete=models.CASCADE, related_name='+'\n    )\n    caption = models.CharField(blank=True, max_length=250)\n\n    panels = [\n        FieldPanel('image'),\n        FieldPanel('caption'),\n    ]\n```\n\nLANGUAGE: python\nCODE:\n```\n        MultipleChooserPanel(\n            'gallery_images', label=\"Gallery images\", chooser_field_name=\"image\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Custom Rich Text Editor Widget Implementation\nDESCRIPTION: Basic implementation of a custom rich text editor widget that supports Wagtail's feature system. Shows how to handle feature configuration and default options.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import widgets\nfrom wagtail.rich_text import features\n\nclass CustomRichTextArea(widgets.TextArea):\n    accepts_features = True\n\n    def __init__(self, *args, **kwargs):\n        self.options = kwargs.pop('options', None)\n\n        self.features = kwargs.pop('features', None)\n        if self.features is None:\n            self.features = features.get_default_features()\n\n        super().__init__(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: DraftStateMixin Database Fields in Wagtail CMS\nDESCRIPTION: Documentation for the database fields of the DraftStateMixin in Wagtail, which allows non-page models to have unpublished changes. Requires RevisionMixin to be applied.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass DraftStateMixin:\n\n    live\n        # (boolean)\n        # A boolean that is set to ``True`` if the object is published.\n        # Note: this field defaults to ``True`` meaning that any objects that are created programmatically will be published by default.\n\n    live_revision\n        # (foreign key to wagtail.models.Revision)\n        # This points to the revision that is currently live.\n\n    has_unpublished_changes\n        # (boolean)\n        # A boolean that is set to ``True`` when the object is either in draft or published with draft changes.\n\n    first_published_at\n        # (date/time)\n        # The date/time when the object was first published.\n\n    last_published_at\n        # (date/time)\n        # The date/time when the object was last published.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Image Model in Wagtail Settings\nDESCRIPTION: Sets the WAGTAILIMAGES_IMAGE_MODEL setting to use the custom image model implementation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/custom_image_model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILIMAGES_IMAGE_MODEL = 'images.CustomImage'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document Form in Wagtail (Python)\nDESCRIPTION: This code defines a CustomDocumentForm that extends BaseDocumentForm. It adds a terms_and_conditions field and custom validation to ensure the document was not created by AI.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/custom_document_upload_form.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# myapp/forms.py\nfrom django import forms\n\nfrom wagtail.documents.forms import BaseDocumentForm\n\nclass CustomDocumentForm(BaseDocumentForm):\n    terms_and_conditions = forms.BooleanField(\n        label=\"I confirm that this document was not created by AI.\",\n        required=True,\n    )\n\n    def clean(self):\n        cleaned_data = super().clean()\n        if not cleaned_data.get(\"terms_and_conditions\"):\n            raise forms.ValidationError(\n                \"You must confirm the document was not created by AI.\"\n            )\n        return cleaned_data\n```\n\n----------------------------------------\n\nTITLE: Restricting Snippet Editing in Wagtail CMS with Python\nDESCRIPTION: Shows how to use the 'before_edit_snippet' hook to potentially block snippet editing based on custom conditions. This example prevents editing of certain snippets that have a 'prevent_edit' flag set.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\n@hooks.register('before_edit_snippet')\ndef block_snippet_edit(request, instance):\n    if isinstance(instance, RestrictedSnippet) and instance.prevent_edit:\n        return HttpResponse(\"Sorry, you can't edit this snippet\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Testing Page Preview in Wagtail - Python\nDESCRIPTION: Example showing how to test page preview functionality with different preview modes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_general_previewability(self):\n    self.assertPageIsPreviewable(self.page)\n\ndef test_archive_previewability(self):\n    self.assertPageIsPreviewable(self.page, mode=\"year-archive\")\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Actions in Wagtail (Python)\nDESCRIPTION: Demonstrates how to use the log function to add custom logging in Wagtail. It shows logging a custom action with additional data and logging a copy action with a custom action name.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/audit_log.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# mypackage/views.py\nfrom wagtail.log_actions import log\n\ndef copy_for_translation(page):\n    # ...\n    page.copy(log_action='mypackage.copy_for_translation')\n\ndef my_method(request, page):\n    # ...\n    # Manually log an action\n    data = {\n        'make': {'it': 'so'}\n    }\n    log(\n        instance=page, action='mypackage.custom_action', data=data\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Listing Columns in Wagtail\nDESCRIPTION: Demonstrates how to customize the columns displayed in a page listing by extending the default columns with additional Column instances. Adds a blog category column to the listing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_page_listings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\nfrom wagtail.admin.ui.tables import Column\nfrom wagtail.admin.viewsets.pages import PageListingViewSet\n\nfrom myapp.models import BlogPage\n\nclass BlogPageListingViewSet(PageListingViewSet):\n    # ...\n    columns = PageListingViewSet.columns + [\n        Column(\"blog_category\", label=\"Category\", sort_key=\"blog_category\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Custom User Creation View in Wagtail Admin\nDESCRIPTION: Example showing how to override the user creation view using the before_create_user hook. Returns a custom response for both GET and POST requests.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\nfrom .models import AwesomePage\nfrom .admin_views import edit_awesome_page\n\n@hooks.register('before_create_user')\ndef do_before_create_user(request):\n    return HttpResponse(\"A user creation form\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Using Optimized Image URL Tag in Wagtail Templates\nDESCRIPTION: Demonstrates the image_url template tag for efficient image URL generation. This approach offloads rendition creation to a separate view, improving page load times by avoiding unnecessary image processing during the main request.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/performance.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n<meta property=\"og:image\" content=\"{% image_url page.hero_image width-600 %}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining StreamChildrenToStreamBlockOperation for StreamBlock Combination in Python\nDESCRIPTION: Class definition for StreamChildrenToStreamBlockOperation, which combines StreamBlock children of given types into a new StreamBlock. The block_path_str should point to the parent StreamBlock containing the blocks to be combined.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass StreamChildrenToStreamBlockOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Authentication for Wagtail API\nDESCRIPTION: Set up Token Authentication to protect access to the Wagtail API using Django REST Framework.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# api.py\n\nfrom rest_framework.permissions import IsAuthenticated\n\n# ...\n\nclass CustomPagesAPIViewSet(PagesAPIViewSet):\n    name = \"pages\"\n    permission_classes = (IsAuthenticated,)\n\n\napi_router.register_endpoint(\"pages\", CustomPagesAPIViewSet)\n```\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n\n    'rest_framework.authtoken',\n\n    ...\n]\n\n...\n\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.TokenAuthentication\"\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Settings Model\nDESCRIPTION: Python model class for managing social media URLs through Wagtail settings. Uses BaseGenericSetting for site-wide configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom wagtail.admin.panels import (\n    FieldPanel,\n    MultiFieldPanel,\n)\nfrom wagtail.contrib.settings.models import (\n    BaseGenericSetting,\n    register_setting,\n)\n\n@register_setting\nclass NavigationSettings(BaseGenericSetting):\n    linkedin_url = models.URLField(verbose_name=\"LinkedIn URL\", blank=True)\n    github_url = models.URLField(verbose_name=\"GitHub URL\", blank=True)\n    mastodon_url = models.URLField(verbose_name=\"Mastodon URL\", blank=True)\n\n    panels = [\n        MultiFieldPanel(\n            [\n                FieldPanel(\"linkedin_url\"),\n                FieldPanel(\"github_url\"),\n                FieldPanel(\"mastodon_url\"),\n            ],\n            \"Social settings\",\n        )\n    ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving StreamField Blocks by Name in a Template\nDESCRIPTION: Template example demonstrating how to use the blocks_by_name method to iterate through all blocks of a specific type. This example shows creating a table of contents from heading blocks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_19\n\nLANGUAGE: html+django\nCODE:\n```\n<h2>Table of contents</h2>\n<ol>\n    {% for heading_block in page.body.blocks_by_name.heading %}\n        <li>{{ heading_block.value }}</li>\n    {% endfor %}\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Detailing SnippetViewSet in Wagtail\nDESCRIPTION: This snippet provides a comprehensive overview of the SnippetViewSet class, which enables CRUD operations for user-defined snippets within the Wagtail admin. It outlines various view classes and template configuration methods. Assumes users have a grasp of Django ORM and Wagtail's templating.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/viewsets.md#2025-04-21_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: wagtail.snippets.views.snippets.SnippetViewSet\n\n   .. autoattribute:: model\n   .. autoattribute:: chooser_per_page\n   .. autoattribute:: admin_url_namespace\n   .. autoattribute:: base_url_path\n   .. autoattribute:: chooser_admin_url_namespace\n   .. autoattribute:: chooser_base_url_path\n   .. autoattribute:: index_view_class\n   .. autoattribute:: add_view_class\n   .. autoattribute:: edit_view_class\n   .. autoattribute:: delete_view_class\n   .. autoattribute:: usage_view_class\n   .. autoattribute:: history_view_class\n   .. autoattribute:: copy_view_class\n   .. autoattribute:: inspect_view_class\n   .. autoattribute:: revisions_view_class\n   .. autoattribute:: revisions_revert_view_class\n   .. autoattribute:: revisions_compare_view_class\n   .. autoattribute:: revisions_unschedule_view_class\n   .. autoattribute:: unpublish_view_class\n   .. autoattribute:: preview_on_add_view_class\n   .. autoattribute:: preview_on_edit_view_class\n   .. autoattribute:: lock_view_class\n   .. autoattribute:: unlock_view_class\n   .. autoattribute:: chooser_viewset_class\n   .. automethod:: get_queryset\n   .. automethod:: get_edit_handler\n   .. automethod:: get_index_template\n   .. automethod:: get_index_results_template\n   .. automethod:: get_create_template\n   .. automethod:: get_edit_template\n   .. automethod:: get_delete_template\n   .. automethod:: get_history_template\n   .. automethod:: get_inspect_template\n   .. automethod:: get_admin_url_namespace\n   .. automethod:: get_admin_base_path\n   .. automethod:: get_chooser_admin_url_namespace\n   .. automethod:: get_chooser_admin_base_path\n```\n\n----------------------------------------\n\nTITLE: Intercepting Page Serving in Wagtail CMS with Python\nDESCRIPTION: Demonstrates how to use the 'before_serve_page' hook to intercept page serving and potentially return a custom response. This example blocks requests from GoogleBot by returning a custom response message.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\n@hooks.register('before_serve_page')\ndef block_googlebot(page, request, serve_args, serve_kwargs):\n    if request.META.get('HTTP_USER_AGENT') == 'GoogleBot':\n        return HttpResponse(\"<h1>bad googlebot no cookie</h1>\")\n```\n\n----------------------------------------\n\nTITLE: Extending StructValue for Custom Link Behavior in Python\nDESCRIPTION: Shows how to create a custom StructValue subclass to add a url method to a LinkBlock, and how to use it in the block's Meta class.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.blocks import StructValue\n\nclass LinkStructValue(StructValue):\n    def url(self):\n        external_url = self.get('external_url')\n        page = self.get('page')\n        return external_url or page.url\n\nclass LinkBlock(StructBlock):\n    text = CharBlock(label=\"link text\", required=True)\n    page = PageChooserBlock(label=\"page\", required=False)\n    external_url = URLBlock(label=\"external URL\", required=False)\n\n    class Meta:\n        value_class = LinkStructValue\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Action Menu Items in Wagtail\nDESCRIPTION: Example demonstrating how to modify the page action menu items by removing the submit to moderator option using the construct_page_action_menu hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_page_action_menu')\ndef remove_submit_to_moderator_option(menu_items, request, context):\n    menu_items[:] = [item for item in menu_items if item.name != 'action-submit']\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Email Content in Wagtail\nDESCRIPTION: This snippet demonstrates how to customize the content of emails sent when a form is submitted by overriding the render_email method. It adds a title, form page URL, and submission date to the email content.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n# ... additional wagtail imports\nfrom wagtail.contrib.forms.models import AbstractEmailForm\n\n\nclass FormPage(AbstractEmailForm):\n    # ... fields, content_panels, etc\n\n    def render_email(self, form):\n        # Get the original content (string)\n        email_content = super().render_email(form)\n\n        # Add a title (not part of the original method)\n        title = '{}: {}'.format('Form', self.title)\n\n        content = [title, '', email_content, '']\n\n        # Add a link to the form page\n        content.append('{}: {}'.format('Submitted Via', self.full_url))\n\n        # Add the date the form was submitted\n        submitted_date_str = date.today().strftime('%x')\n        content.append('{}: {}'.format('Submitted on', submitted_date_str))\n\n        # Content is joined with a new line to separate each text line\n        content = '\\n'.join(content)\n\n        return content\n```\n\n----------------------------------------\n\nTITLE: Implementing Footer Text Snippet Model\nDESCRIPTION: Python model for creating editable footer text using Wagtail snippets with draft, revision, preview, and translation capabilities.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom wagtail.admin.panels import (\n    FieldPanel,\n    MultiFieldPanel,\n    PublishingPanel,\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.models import (\n    DraftStateMixin,\n    PreviewableMixin,\n    RevisionMixin,\n    TranslatableMixin,\n)\nfrom wagtail.contrib.settings.models import (\n    BaseGenericSetting,\n    register_setting,\n)\nfrom wagtail.snippets.models import register_snippet\n\n@register_snippet\nclass FooterText(\n    DraftStateMixin,\n    RevisionMixin,\n    PreviewableMixin,\n    TranslatableMixin,\n    models.Model,\n):\n    body = RichTextField()\n\n    panels = [\n        FieldPanel(\"body\"),\n        PublishingPanel(),\n    ]\n\n    def __str__(self):\n        return \"Footer text\"\n\n    def get_preview_template(self, request, mode_name):\n        return \"base.html\"\n\n    def get_preview_context(self, request, mode_name):\n        return {\"footer_text\": self.body}\n\n    class Meta(TranslatableMixin.Meta):\n        verbose_name_plural = \"Footer Text\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RichTextField with document-link feature\nDESCRIPTION: Code to create a RichTextField that specifically enables document linking functionality along with basic text formatting features.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom wagtail.fields import RichTextField\n\nclass BlogPage(Page):\n    # ...other fields\n    document_footnotes = RichTextField(\n        blank=True,\n        features=[\"bold\", \"italic\", \"ol\", \"document-link\"]\n    )\n\n    panels = [\n        # ...other panels\n        FieldPanel(\"document_footnotes\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Subclassing StreamBlock to Create a Reusable Block Definition in Python\nDESCRIPTION: Shows how to subclass StreamBlock to create a reusable CarouselBlock that can be used in multiple StreamField definitions. Includes field definitions and Meta class configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass CarouselBlock(blocks.StreamBlock):\n    image = ImageBlock()\n    quotation = blocks.StructBlock([\n        ('text', blocks.TextBlock()),\n        ('author', blocks.CharBlock()),\n    ])\n    video = EmbedBlock()\n\n    class Meta:\n        icon='cogs'\n```\n\n----------------------------------------\n\nTITLE: Registering Page Header Buttons in Wagtail Admin (Python)\nDESCRIPTION: This hook adds a custom button to the secondary dropdown menu in the Wagtail page header. It demonstrates how to create and prioritize buttons in the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('register_page_header_buttons')\ndef page_header_buttons(page, user, view_name, next_url=None):\n    yield wagtailadmin_widgets.Button(\n        'A dropdown button',\n        '/goes/to/a/url/',\n        priority=60\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation for TypedTableBlock in Wagtail\nDESCRIPTION: Override the clean method to add custom validation logic for a TypedTableBlock, including cell-specific error handling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/typed_table_block.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\nfrom wagtail.blocks import IntegerBlock\nfrom wagtail.contrib.typed_table_block.blocks import TypedTableBlock, TypedTableBlockValidationError\n\n\nclass LuckyTableBlock(TypedTableBlock):\n    number = IntegerBlock()\n\n    def clean(self, value):\n        result = super().clean(value)\n        errors = {}\n        print(result.row_data)\n        for row_num, row in enumerate(result.row_data):\n            row_errors = {}\n            for col_num, cell in enumerate(row['values']):\n                if cell == 13:\n                    row_errors[col_num] = ValidationError(\"Table cannot contain the number 13\")\n            if row_errors:\n                errors[row_num] = row_errors\n\n        if errors:\n            raise TypedTableBlockValidationError(cell_errors=errors)\n\n        return result\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Invalidation for Blog Index Pages\nDESCRIPTION: This snippet shows how to implement custom cache invalidation for blog index pages. It includes a signal handler that listens for page publish and delete events, and uses the PurgeBatch class to invalidate relevant pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.dispatch import receiver\nfrom django.db.models.signals import pre_delete\n\nfrom wagtail.signals import page_published\nfrom wagtail.contrib.frontend_cache.utils import PurgeBatch\n\ndef blog_page_changed(blog_page):\n    batch = PurgeBatch()\n    for blog_index in BlogIndexPage.objects.live():\n        if blog_page in blog_index.get_blog_items().object_list:\n            batch.add_page(blog_index)\n\n    batch.purge()\n\n@receiver(page_published, sender=BlogPage)\ndef blog_published_handler(instance, **kwargs):\n    blog_page_changed(instance)\n\n@receiver(pre_delete, sender=BlogPage)\ndef blog_deleted_handler(instance, **kwargs):\n    blog_page_changed(instance)\n```\n\n----------------------------------------\n\nTITLE: Word Count Stimulus Controller Implementation\nDESCRIPTION: Advanced Stimulus controller implementation that adds word counting functionality to input elements.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass WordCountController extends window.StimulusModule.Controller {\n    static values = { max: { default: 10, type: Number } };\n\n    connect() {\n        this.setupOutput();\n        this.updateCount();\n    }\n\n    setupOutput() {\n        if (this.output) return;\n        const template = document.createElement('template');\n        template.innerHTML = `<output name='word-count' for='${this.element.id}' class='output-label'></output>`;\n        const output = template.content.firstChild;\n        this.element.insertAdjacentElement('beforebegin', output);\n        this.output = output;\n    }\n\n    updateCount(event) {\n        const value = event ? event.target.value : this.element.value;\n        const words = (value || '').split(' ');\n        this.output.textContent = `${words.length} / ${this.maxValue} words`;\n    }\n\n    disconnect() {\n        this.output && this.output.remove();\n    }\n}\nwindow.wagtail.app.register('word-count', WordCountController);\n```\n\n----------------------------------------\n\nTITLE: Registering Text Decorator for Punctuation Highlighting in Wagtail Draftail\nDESCRIPTION: Python code to register a custom text decorator feature that highlights problematic punctuation in the Draftail editor. This implements the DecoratorFeature to visually mark specific text patterns.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.rich_text.editors.draftail.features import DecoratorFeature\nfrom wagtail import hooks\n\n\n@hooks.register('register_rich_text_features')\ndef register_punctuation_highlighter(features):\n    feature_name = 'punctuation'\n    features.default_features.append(feature_name)\n\n    features.register_editor_plugin(\n        'draftail',\n        feature_name,\n        DecoratorFeature({\n            'type': feature_name,\n        },\n            js=['draftail_punctuation.js'],\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Sentence Counter Component for Draftail Editor\nDESCRIPTION: JavaScript implementation of a sentence counter component for the Draftail editor. This code defines a React component that counts sentences in the editor content and registers it as a control plugin that appears in the meta toolbar.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst countSentences = (str) =>\n  str ? (str.match(/[.?!…]+./g) || []).length + 1 : 0;\n\nconst SentenceCounter = ({ getEditorState }) => {\n  const editorState = getEditorState();\n  const content = editorState.getCurrentContent();\n  const text = content.getPlainText();\n\n  return window.React.createElement('div', {\n    className: 'w-inline-block w-tabular-nums w-help-text w-mr-4',\n  }, `Sentences: ${countSentences(text)}`);\n}\n\nwindow.draftail.registerPlugin({\n  type: 'sentences',\n  meta: SentenceCounter,\n}, 'controls');\n```\n\n----------------------------------------\n\nTITLE: Next Event Route Implementation\nDESCRIPTION: Example of implementing a route that displays the next upcoming event page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/routablepage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@path('next/')\ndef next_event(self, request):\n    \"\"\"\n    Display the page for the next event\n    \"\"\"\n    future_events = EventPage.objects.live().filter(event_date__gt=datetime.date.today())\n    next_event = future_events.order_by('event_date').first()\n\n    return next_event.serve(request)\n```\n\n----------------------------------------\n\nTITLE: Configuring PageChooserPanel with Page Type Filtering in Wagtail\nDESCRIPTION: This snippet demonstrates how to use PageChooserPanel to create a relationship to another Page model. It shows how to filter the chooser to display only specific page types and includes options for allowing the root page to be selected.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page\nfrom wagtail.admin.panels import PageChooserPanel\n\n\nclass BookPage(Page):\n    related_page = models.ForeignKey(\n        'wagtailcore.Page',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+',\n    )\n\n    content_panels = Page.content_panels + [\n        PageChooserPanel('related_page', 'demo.PublisherPage'),\n    ]\n```\n\nLANGUAGE: python\nCODE:\n```\nPageChooserPanel('related_page', ['demo.PublisherPage', 'demo.AuthorPage'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Form Builder with Widget Overrides in Wagtail\nDESCRIPTION: This snippet shows how to create a custom FormBuilder class that overrides the default widget for specific field types. It demonstrates configuring both email fields with a custom widget and singleline fields with custom attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.forms.forms import FormBuilder\n\nfrom myapp.widgets import CustomEmailInputWidget\n\n\nclass CustomFormBuilder(FormBuilder):\n    # Override any of the `create_TYPE_field` to apply to different field types\n    # e.g., create_singleline_field, create_checkboxes_field, create_url_field\n    def create_email_field(self, field, options):\n        options[\"widget\"] = CustomEmailInputWidget\n        return super().create_checkbox_field(field, options)\n\n    # Alternatively, you can instantiate the widget directly with custom attributes\n    def create_singleline_field(self, field, options):\n        options[\"widget\"] = forms.TextInput(attrs={\"class\": \"custom-class\"})\n        return super().create_singleline_field(field, options)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Settings Form for User Model in Python\nDESCRIPTION: Demonstrates how to create a custom settings form that operates on the user model in Wagtail. This form is used to add a new panel to the account settings page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_account_settings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# forms.py\n\nfrom django import forms\nfrom django.contrib.auth import get_user_model\n\nclass CustomSettingsForm(forms.ModelForm):\n\n    class Meta:\n        model = get_user_model()\n        fields = [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Document Model in Settings\nDESCRIPTION: Shows how to configure the WAGTAILDOCS_DOCUMENT_MODEL setting to use the custom document model in your Wagtail project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/custom_document_model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Ensure that you replace app_label with the app you placed your custom\n# model in.\nWAGTAILDOCS_DOCUMENT_MODEL = 'app_label.CustomDocument'\n```\n\n----------------------------------------\n\nTITLE: Overriding Blog Index Page Context in Wagtail\nDESCRIPTION: A method to customize QuerySet for blog index pages, filtering for live published posts and sorting in reverse chronological order\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass BlogIndexPage(Page):\n    intro = RichTextField(blank=True)\n    def get_context(self, request):\n        context = super().get_context(request)\n        blogpages = self.get_children().live().order_by('-first_published_at')\n        context['blogpages'] = blogpages\n        return context\n```\n\n----------------------------------------\n\nTITLE: Testing Wagtail Page Content with StreamField\nDESCRIPTION: Shows how to test page content including StreamField data with different block types like headings and Rich Text paragraphs. Includes setup and assertion examples.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n...\nfrom wagtail.rich_text import RichText\n\nclass MyPageTest(WagtailPageTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        ...\n        # Create page instance here\n        cls.page.body.extend(\n            [\n                (\"heading\", \"Just a CharField Heading\"),\n                (\"paragraph\", RichText(\"<p>First paragraph</p>\")),\n                (\"paragraph\", RichText(\"<p>Second paragraph</p>\")),\n            ]\n        )\n        cls.page.save()\n\n    def test_page_content(self):\n        response = self.client.get(self.page.url)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"Just a CharField Heading\")\n        self.assertContains(response, \"<p>First paragraph</p>\")\n        self.assertContains(response, \"<p>Second paragraph</p>\")\n```\n\n----------------------------------------\n\nTITLE: Registering Rich Text Features in Wagtail\nDESCRIPTION: Python code showing how to register custom rich text features using Wagtail hooks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# my_app/wagtail_hooks.py\n\nfrom wagtail import hooks\n\n@hooks.register('register_rich_text_features')\ndef register_my_feature(features):\n    # add new definitions to 'features' here\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Log Model for Wagtail (Python)\nDESCRIPTION: Demonstrates how to register a custom log model for specific Wagtail objects when ModelLogEntry is not suitable. It involves subclassing BaseLogEntry and using the register_log_actions hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/audit_log.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.models import Sprocket, SprocketLogEntry\n# here SprocketLogEntry is a subclass of BaseLogEntry\n\n@hooks.register('register_log_actions')\ndef sprocket_log_model(actions):\n    actions.register_model(Sprocket, SprocketLogEntry)\n```\n\n----------------------------------------\n\nTITLE: Customizing StructBlock Styling in Python\nDESCRIPTION: Demonstrates how to customize the styling of a StructBlock by specifying a form_classname attribute in the Meta class.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PersonBlock(blocks.StructBlock):\n    first_name = blocks.CharBlock()\n    surname = blocks.CharBlock()\n    photo = ImageChooserBlock(required=False)\n    biography = blocks.RichTextBlock()\n\n    class Meta:\n        icon = 'user'\n        form_classname = 'person-block struct-block'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Features in Wagtail Rich Text Editor Settings\nDESCRIPTION: Python configuration for including custom Draftail features in the WAGTAILADMIN_RICH_TEXT_EDITORS setting. This example shows how to add the 'sentences' feature to the default editor configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILADMIN_RICH_TEXT_EDITORS = {\n    'default': {\n        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',\n        'OPTIONS': {\n            'features': ['bold', 'italic', 'link', 'sentences'],  # Add 'sentences' here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Page-Aware Template Caching\nDESCRIPTION: Examples of page-aware template fragment caching using wagtailpagecache tag, including equivalent wagtailcache implementation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtail_cache %}\n\n{% wagtailpagecache 500 hero %}\n    <!-- hero -->\n{% endwagtailpagecache %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% wagtail_site as current_site %}\n\n{% wagtailcache 500 hero page.cache_key current_site.id %}\n    <!-- hero -->\n{% endwagtailcache %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unpublished Changes Report View in Python\nDESCRIPTION: Defines a custom PageReportView class for displaying pages with unpublished changes. Includes superuser access control and queryset filtering for unpublished pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.auth import permission_denied\nfrom wagtail.admin.views.reports import PageReportView\nfrom wagtail.models import Page\n\nclass UnpublishedChangesReportView(PageReportView):\n    index_url_name = \"unpublished_changes_report\"\n    index_results_url_name = \"unpublished_changes_report_results\"\n    header_icon = 'doc-empty-inverse'\n    results_template_name = 'reports/unpublished_changes_report_results.html'\n    page_title = \"Pages with unpublished changes\"\n\n    list_export = PageReportView.list_export + ['last_published_at']\n    export_headings = dict(last_published_at='Last Published', **PageReportView.export_headings)\n\n    def get_queryset(self):\n        return Page.objects.filter(has_unpublished_changes=True)\n\n    def dispatch(self, request, *args, **kwargs):\n        if not self.request.user.is_superuser:\n            return permission_denied(request)\n        return super().dispatch(request, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating a PersonChooserBlock for StreamField in Python for Wagtail\nDESCRIPTION: This code shows how to create a PersonChooserBlock for use in StreamField definitions by using the get_block_class method of the PersonChooserViewSet.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom .views import person_chooser_viewset\n\nPersonChooserBlock = person_chooser_viewset.get_block_class(\n    name=\"PersonChooserBlock\", module_path=\"myapp.blocks\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing EmbedBlock in StreamField\nDESCRIPTION: Example of creating a StreamField block that supports embedded content with maximum width and height constraints.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.embeds.blocks import EmbedBlock\n\nclass MyStreamField(blocks.StreamBlock):\n    ...\n\n    embed = EmbedBlock(max_width=800, max_height=400)\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarViewSet in Python for Wagtail Admin\nDESCRIPTION: Creates a ViewSet subclass to group calendar-related views into a single menu item. It defines the menu label, icon, and URL patterns for the calendar views.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.viewsets.base import ViewSet\n\n...\n\nclass CalendarViewSet(ViewSet):\n    add_to_admin_menu = True\n    menu_label = \"Calendar\"\n    icon = \"date\"\n    # The `name` will be used for both the URL prefix and the URL namespace.\n    # They can be customized individually via `url_prefix` and `url_namespace`.\n    name = \"calendar\"\n\n    def get_urlpatterns(self):\n        return [\n            # This can be accessed at `/admin/calendar/`\n            # and reverse-resolved with the name `calendar:index`.\n            # This first URL will be used for the menu item, but it can be\n            # customized by overriding the `menu_url` property.\n            path('', index, name='index'),\n\n            # This can be accessed at `/admin/calendar/month/`\n            # and reverse-resolved with the name `calendar:month`.\n            path('month/', month, name='month'),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Custom Page Deletion Hook in Wagtail (Python)\nDESCRIPTION: This hook intercepts the page deletion process for specific page types. It prevents deletion of 'AwesomePage' instances and redirects with a warning message.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('before_delete_page')\ndef before_delete_page(request, page):\n    \"\"\"Block awesome page deletion and show a message.\"\"\"\n\n    if request.method == 'POST' and page.specific_class in [AwesomePage]:\n        messages.warning(request, \"Awesome pages cannot be deleted, only unpublished\")\n        return redirect('wagtailadmin_pages:delete', page.pk)\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Chooser Query in Wagtail\nDESCRIPTION: Shows how to customize document chooser queryset to show only documents uploaded by current user using construct_document_chooser_queryset hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('construct_document_chooser_queryset')\ndef show_my_uploaded_documents_only(documents, request):\n    # Only show uploaded documents\n    documents = documents.filter(uploaded_by_user=request.user)\n\n    return documents\n```\n\n----------------------------------------\n\nTITLE: Prefetching Image Renditions with QuerySets\nDESCRIPTION: Examples of optimizing image rendition queries using prefetch_renditions() method.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_images_uploaded_by_user(user):\n    return ImageModel.objects.filter(uploaded_by_user=user)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_images_uploaded_by_user(user):\n    return ImageModel.objects.filter(uploaded_by_user=user).prefetch_renditions()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_images_uploaded_by_user(user):\n    # Only specify the renditions required for rendering\n    return ImageModel.objects.filter(uploaded_by_user=user).prefetch_renditions(\n        \"fill-700x586\", \"min-600x400\", \"max-940x680\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic StreamField Migration Setup\nDESCRIPTION: Shows the basic structure of a StreamField migration using MigrateStreamData operation, including app name, model name and field configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\nfrom wagtail.blocks.migrations.migrate_operation import MigrateStreamData\n\nclass Migration(migrations.Migration):\n\n    dependencies = [...]\n\n    operations = [\n        MigrateStreamData(\n            app_name=\"blog\",\n            model_name=\"BlogPage\",\n            field_name=\"content\",\n            operations_and_block_paths=[...]\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget Adapter in Python with Telepath\nDESCRIPTION: Demonstrates how to create a custom widget adapter for extending Wagtail's form widget functionality using the Telepath library. This allows defining a mapping between Python widget classes and their corresponding JavaScript implementations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/widget_api.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.telepath import register\nfrom wagtail.widget_adapters import WidgetAdapter\n\nclass FancyInputAdapter(WidgetAdapter):\n    js_constructor = 'myapp.widgets.FancyInput'\n\n    def js_args(self, widget):\n        return [\n            widget.render('__NAME__', None, attrs={'id': '__ID__'}),\n            widget.id_for_label('__ID__'),\n            widget.extra_options,\n        ]\n\n    class Media:\n        js = ['myapp/js/fancy-input-adapter.js']\n\nregister(FancyInputAdapter(), FancyInput)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Blur Filter in Django Template\nDESCRIPTION: This HTML snippet shows how to use the custom blur filter in a Django template. It applies a blur with radius 7 to an image scaled to 400 pixels wide.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_image_filters.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailimages_tags %}\n\n{% image page.photo width-400 blur-7 %}\n```\n\n----------------------------------------\n\nTITLE: Using Image Rendition with Reduced Crop Percentage in Django Template\nDESCRIPTION: Django template tag to render an image with a specific size and reduced crop percentage to encompass more of the head in headshots.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% image page.photo fill-200x200-c0 %}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoFollow External Link Handler\nDESCRIPTION: Custom implementation of an external link handler that adds rel=\"nofollow\" attribute to external links for SEO purposes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.html import escape\nfrom wagtail import hooks\nfrom wagtail.rich_text import LinkHandler\n\nclass NoFollowExternalLinkHandler(LinkHandler):\n    identifier = 'external'\n\n    @classmethod\n    def expand_db_attributes(cls, attrs):\n        href = attrs[\"href\"]\n        return '<a href=\"%s\" rel=\"nofollow\">' % escape(href)\n\n@hooks.register('register_rich_text_features')\ndef register_external_link(features):\n    features.register_link_type(NoFollowExternalLinkHandler)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Log Actions in Python\nDESCRIPTION: This snippet shows how to register custom log actions using the register_log_actions hook in Wagtail. It demonstrates adding a simple log action and a more complex one with a custom LogFormatter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nfrom wagtail import hooks\nfrom wagtail.log_actions import LogFormatter\n\n@hooks.register('register_log_actions')\ndef additional_log_actions(actions):\n    actions.register_action('wagtail_package.echo', _('Echo'), _('Sent an echo'))\n\n    @actions.register_action('wagtail_package.greet_audience')\n    class GreetingActionFormatter(LogFormatter):\n        label = _('Greet audience')\n\n        def format_message(self, log_entry):\n            return _('Hello %(audience)s') % {\n                'audience': log_entry.data['audience'],\n            }\n```\n\n----------------------------------------\n\nTITLE: Using Picture Tag with Multiple Formats\nDESCRIPTION: Demonstrates using the picture tag to provide multiple image formats\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% picture page.photo format-{avif,jpeg} as tmp_photo %}\n\n{{ tmp_photo.formats.avif.0.url }}\n{{ tmp_photo.formats.jpeg.0.url }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UserViewSet in Python\nDESCRIPTION: Shows how to create a custom UserViewSet to replace the deprecated WAGTAIL_USER_EDIT_FORM and WAGTAIL_USER_CREATION_FORM settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# myapp/viewsets.py\nfrom wagtail.users.views.users import UserViewSet as WagtailUserViewSet\n\nfrom .forms import CustomUserCreationForm, CustomUserEditForm\n\n\nclass UserViewSet(WagtailUserViewSet):\n    # This replaces the WAGTAIL_USER_EDIT_FORM and WAGTAIL_USER_CREATION_FORM settings\n    def get_form_class(self, for_update=False):\n        if for_update:\n            return CustomUserEditForm\n        return CustomUserCreationForm\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Action Menu Item in Wagtail Admin\nDESCRIPTION: Example showing how to add a custom Guacamole menu item to Wagtail page action menu using register_page_action_menu_item hook. Creates a new ActionMenuItem subclass with custom URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\nfrom wagtail.admin.action_menu import ActionMenuItem\n\nclass GuacamoleMenuItem(ActionMenuItem):\n    name = 'action-guacamole'\n    label = \"Guacamole\"\n\n    def get_url(self, context):\n        return \"https://www.youtube.com/watch?v=dNJdJIwCF_Y\"\n\n\n@hooks.register('register_page_action_menu_item')\ndef register_guacamole_menu_item():\n    return GuacamoleMenuItem(order=10)\n```\n\n----------------------------------------\n\nTITLE: Enabling Internationalization Settings in Django/Wagtail\nDESCRIPTION: Basic settings required to enable internationalization support in Django and Wagtail, including localization options.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# my_project/settings.py\n\nUSE_I18N = True\nWAGTAIL_I18N_ENABLED = True\n\nUSE_L10N = True\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorWidget in Django/Wagtail\nDESCRIPTION: Creates a custom color picker widget using Coloris.js library. Includes media dependencies and builds necessary attributes for the widget instance.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ColorWidget(TextInput):\n    \"\"\"\n    See https://coloris.js.org/\n    \"\"\"\n\n    def __init__(self, attrs=None, swatches=[], theme='large'):\n        self.swatches = swatches\n        self.theme = theme\n        super().__init__(attrs=attrs);\n\n    def build_attrs(self, *args, **kwargs):\n        attrs = super().build_attrs(*args, **kwargs)\n        attrs['data-controller'] = 'color'\n        attrs['data-color-theme-value'] = self.theme\n        attrs['data-color-swatches-value'] = json.dumps(swatches)\n        return attrs\n\n    @property\n    def media(self):\n        return Media(\n            js=[\n                \"https://cdn.jsdelivr.net/gh/mdbassit/Coloris@latest/dist/coloris.min.js\",\n                \"js/color-controller.js\",\n            ],\n            css={\"all\": [\"https://cdn.jsdelivr.net/gh/mdbassit/Coloris@latest/dist/coloris.min.css\"]},\n        )\n```\n\n----------------------------------------\n\nTITLE: Inserting Custom JavaScript into Wagtail Editor (Python)\nDESCRIPTION: This hook registers custom JavaScript files to be inserted into the Wagtail editor. It includes a fireworks animation script and its initialization code.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register(\"insert_editor_js\")\ndef editor_js():\n    js_files = [\n        'js/fireworks.js', # See https://fireworks.js.org for CDN import URLs\n        'js/init-fireworks.js',\n    ]\n    return format_html_join(\n        '\\n',\n        '<script src=\"{}\"></script>',\n        ((static(filename),) for filename in js_files)\n    )\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Listing Buttons in Wagtail CMS with Python\nDESCRIPTION: Shows how to use the 'construct_page_listing_buttons' hook to modify the final list of page listing buttons. This example removes the last button (typically the 'more' dropdown) from the root page listing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_page_listing_buttons')\ndef remove_page_listing_button_item(buttons, page, user, context=None):\n    if page.is_root:\n        buttons.pop() # removes the last 'more' dropdown button on the root page listing buttons\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data to CSV Export in Wagtail Forms\nDESCRIPTION: This example demonstrates how to add custom data (username) to the CSV export of form submissions. It involves overriding get_data_fields in the FormPage model and get_data in the CustomFormSubmission model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.conf import settings\nfrom django.db import models\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField, AbstractFormSubmission\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n\n    def get_data_fields(self):\n        data_fields = [\n            ('username', 'Username'),\n        ]\n        data_fields += super().get_data_fields()\n\n        return data_fields\n\n    def get_submission_class(self):\n        return CustomFormSubmission\n\n    def process_form_submission(self, form):\n        return self.get_submission_class().objects.create(\n            form_data=form.cleaned_data,\n            page=self, user=form.user\n        )\n\n\nclass CustomFormSubmission(AbstractFormSubmission):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n\n    def get_data(self):\n        form_data = super().get_data()\n        form_data.update({\n            'username': self.user.username,\n        })\n\n        return form_data\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Document Model in Python with Wagtail\nDESCRIPTION: Defines a CustomDocument class that inherits from AbstractDocument and adds a custom 'source' field. Shows how to extend the admin form fields to include custom fields in the document form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/custom_document_model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\n\nfrom wagtail.documents.models import Document, AbstractDocument\n\nclass CustomDocument(AbstractDocument):\n    # Custom field example:\n    source = models.CharField(\n        max_length=255,\n        blank=True,\n        null=True\n    )\n\n    admin_form_fields = Document.admin_form_fields + (\n        # Add all custom fields names to make them appear in the form:\n        'source',\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Models in Wagtail\nDESCRIPTION: Creates custom image and rendition models by extending Wagtail's abstract classes. The CustomImage model allows adding extra fields and customizing alt text behavior, while CustomRendition handles image variations with proper database constraints.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/custom_image_model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\n\nfrom wagtail.images.models import Image, AbstractImage, AbstractRendition\n\n\nclass CustomImage(AbstractImage):\n    # Add any extra fields to image here\n\n    # To add a caption field:\n    # caption = models.CharField(max_length=255, blank=True)\n\n    admin_form_fields = Image.admin_form_fields + (\n        # Then add the field names here to make them appear in the form:\n        # 'caption',\n    )\n\n    @property\n    def default_alt_text(self):\n        # Force editors to add specific alt text if description is empty.\n        # Do not use image title which is typically derived from file name.\n        return getattr(self, \"description\", None)\n\nclass CustomRendition(AbstractRendition):\n    image = models.ForeignKey(CustomImage, on_delete=models.CASCADE, related_name='renditions')\n\n    class Meta:\n       constraints = [\n            models.UniqueConstraint(\n                fields={\"image\", \"filter_spec\", \"focal_point_key\"},\n                name=\"unique_rendition\",\n            )\n        ]\n```\n\n----------------------------------------\n\nTITLE: FieldPanel Required on Save Example - Python\nDESCRIPTION: Example showing how to configure a required field validation when saving drafts by setting the required_on_save attribute on a model field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsubtitle = models.CharField(max_length=255)\nsubtitle.required_on_save = True\n```\n\n----------------------------------------\n\nTITLE: Customizing Group Form in Python for Wagtail Admin\nDESCRIPTION: This code creates a custom GroupForm by inheriting from WagtailGroupForm and adding a new field for AD groups. It overrides the __init__ and save methods to handle the new field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# myapp/forms.py\nfrom django import forms\n\nfrom wagtail.users.forms import GroupForm as WagtailGroupForm\n\nfrom .models import ADGroup\n\n\nclass GroupForm(WagtailGroupForm):\n    adgroups = forms.ModelMultipleChoiceField(\n        label=\"AD groups\",\n        required=False,\n        queryset=ADGroup.objects.order_by(\"name\"),\n    )\n\n    class Meta(WagtailGroupForm.Meta):\n        fields = WagtailGroupForm.Meta.fields + (\"adgroups\",)\n\n    def __init__(self, initial=None, instance=None, **kwargs):\n        if instance is not None:\n            if initial is None:\n                initial = {}\n            initial[\"adgroups\"] = instance.adgroups.all()\n        super().__init__(initial=initial, instance=instance, **kwargs)\n\n    def save(self, commit=True):\n        instance = super().save()\n        instance.adgroups.set(self.cleaned_data[\"adgroups\"])\n        return instance\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Responsive Picture Tag\nDESCRIPTION: Shows the HTML output generated by the 'picture' template tag, including multiple <source> elements for different image formats and sizes, and a fallback <img> tag.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n    <source sizes=\"80vw\" srcset=\"/media/images/pied-wagtail.width-400.avif 400w, /media/images/pied-wagtail.width-800.avif 800w\" type=\"image/avif\">\n    <source sizes=\"80vw\" srcset=\"/media/images/pied-wagtail.width-400.webp 400w, /media/images/pied-wagtail.width-800.webp 800w\" type=\"image/webp\">\n    <img sizes=\"80vw\" srcset=\"/media/images/pied-wagtail.width-400.jpg 400w, /media/images/pied-wagtail.width-800.jpg 800w\" src=\"/media/images/pied-wagtail.width-400.jpg\" alt=\"A pied Wagtail\" width=\"400\" height=\"300\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Bulk Actions for Images in Python\nDESCRIPTION: Shows how to create a custom bulk action for images by subclassing ImageBulkAction.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.images.views.bulk_actions.image_bulk_action import ImageBulkAction\nfrom wagtail import hooks\n\n\n@hooks.register('register_bulk_action')\nclass CustomImageBulkAction(ImageBulkAction):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Image Formats with Picture Tag in Wagtail\nDESCRIPTION: Shows how to use the picture tag to render an image in multiple formats (AVIF, WebP, JPEG) for better browser compatibility and performance.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% picture page.photo format-{avif,webp,jpeg} width-400 %}\n```\n\n----------------------------------------\n\nTITLE: Initializing WagtailPageTestCase Basic Example - Python\nDESCRIPTION: Basic example showing how to extend WagtailPageTestCase to create test cases for Wagtail pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.test.utils import WagtailPageTestCase\nfrom myapp.models import MyPage\n\nclass MyPageTests(WagtailPageTestCase):\n    def test_can_create_a_page(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Image Tag Usage in Templates\nDESCRIPTION: Examples of using Wagtail's image tag for responsive images\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailimages_tags %}\n...\n\n{% image page.photo width-400 %}\n\n<!-- or a square thumbnail: -->\n{% image page.photo fill-80x80 %}\n```\n\n----------------------------------------\n\nTITLE: Using Settings in Python Views\nDESCRIPTION: Examples of accessing both generic and site-specific settings in Python view functions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef view(request):\n    social_media_settings = GenericSocialMediaSettings.load(request_or_site=request)\n    ...\n\ndef view(request):\n    social_media_settings = SiteSpecificSocialMediaSettings.for_request(request=request)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Link Handler in Python\nDESCRIPTION: Example implementation of a custom LinkHandler class that adds support for rich text linking to user email addresses. Converts tags like <a linktype=\"user\" username=\"wagtail\"> to mailto links.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import get_user_model\nfrom wagtail.rich_text import LinkHandler\n\nclass UserLinkHandler(LinkHandler):\n    identifier = 'user'\n\n    @staticmethod\n    def get_model():\n        return get_user_model()\n\n    @classmethod\n    def get_instance(cls, attrs):\n        model = cls.get_model()\n        return model.objects.get(username=attrs['username'])\n\n    @classmethod\n    def expand_db_attributes(cls, attrs):\n        user = cls.get_instance(attrs)\n        return '<a href=\"mailto:%s\">' % user.email\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Bulk Actions for Pages in Python\nDESCRIPTION: Demonstrates how to create a custom bulk action specifically for pages by subclassing PageBulkAction.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.views.pages.bulk_actions.page_bulk_action import PageBulkAction\nfrom wagtail import hooks\n\n\n@hooks.register('register_bulk_action')\nclass CustomPageBulkAction(PageBulkAction):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining StreamField with Block Types and Counts in Python\nDESCRIPTION: This snippet demonstrates how to create a StreamField with multiple block types (CharBlock, RichTextBlock, and ImageBlock) and specify block counts. It shows setting minimum and maximum counts for specific block types.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('heading', blocks.CharBlock(form_classname=\"title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageBlock()),\n], block_counts={\n    'heading': {'min_num': 1},\n    'image': {'max_num': 5},\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Admin URL Route in Wagtail using Hooks\nDESCRIPTION: Demonstrates how to register a custom URL route for the calendar view within the Wagtail admin interface using the 'register_admin_urls' hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom wagtail import hooks\n\nfrom .views import index\n\n\n@hooks.register('register_admin_urls')\ndef register_calendar_url():\n    return [\n        path('calendar/', index, name='calendar'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using AdminURLFinder in Python for Wagtail Admin URLs\nDESCRIPTION: Demonstrates how to use the AdminURLFinder class to find the admin URL for any model instance in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.admin_url_finder import AdminURLFinder\n\nfinder = AdminURLFinder()\n\nfinder.get_edit_url(model_instance)\n```\n\n----------------------------------------\n\nTITLE: Testing Page Creation with Data in Wagtail - Python\nDESCRIPTION: Example demonstrating how to test page creation with specific POST data.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.test.utils.form_data import nested_form_data, streamfield\n\ndef test_can_create_content_page(self):\n    # Get the HomePage\n    root_page = HomePage.objects.get(pk=2)\n\n    # Assert that a ContentPage can be made here, with this POST data\n    self.assertCanCreate(root_page, ContentPage, nested_form_data({\n        'title': 'About us',\n        'body': streamfield([\n            ('text', 'Lorem ipsum dolor sit amet'),\n        ])\n    }))\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveStreamChildrenOperation for StreamBlock Removal in Python\nDESCRIPTION: Class definition for RemoveStreamChildrenOperation, which removes all StreamBlock children of a given type. The block_path_str should point to the parent StreamBlock containing the blocks to be removed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass RemoveStreamChildrenOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Extending Password Reset Form with Custom Submit Buttons in Wagtail\nDESCRIPTION: Example showing how to override the submit_buttons block in a Wagtail password reset form template to add additional buttons or links while preserving the original submit button functionality. Demonstrates template inheritance and URL routing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_15\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"wagtailadmin/account/password_reset/form.html\" %}\n\n{% block submit_buttons %}\n    <a href=\"{% url 'helpdesk' %}\">Contact the helpdesk</a>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Testing Page Editability in Wagtail - Python\nDESCRIPTION: Example demonstrating how to test page editing functionality including form submission.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_editability(self):\n    self.assertPageIsEditable(self.page)\n\ndef test_editability_on_post(self):\n    self.assertPageIsEditable(\n        self.page,\n        post_data={\n            \"title\": \"Fabulous events\",\n            \"slug\": \"events\",\n            \"show_featured\": True,\n            \"show_expired\": False,\n            \"action-publish\": \"\",\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing apply_changes_to_raw_data Function for StreamField Data Modification in Python\nDESCRIPTION: Function that applies changes to raw stream data. It takes raw data, block path, operation, and streamfield as arguments to apply changes to matching block values.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef apply_changes_to_raw_data(raw_data, block_path_str, operation, streamfield,\n                              **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Buttons to Page Listing in Wagtail CMS with Python\nDESCRIPTION: Demonstrates how to register a hook that adds custom buttons to the page listing in Wagtail's admin interface. This example adds a simple button with a specified URL and priority that determines its position in the listing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin import widgets as wagtailadmin_widgets\n\n@hooks.register('register_page_listing_buttons')\ndef page_listing_buttons(page, user, next_url=None):\n    yield wagtailadmin_widgets.PageListingButton(\n        'A page listing button',\n        '/goes/to/a/url/',\n        priority=10\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabbed Interface in Wagtail\nDESCRIPTION: Demonstrates how to customize the tabbed editing interface for a BlogPage model by organizing panels into Content, Sidebar, Promote and Settings tabs using TabbedInterface and ObjectList.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/page_editing_interface.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.panels import TabbedInterface, TitleFieldPanel, ObjectList\n\nclass BlogPage(Page):\n    # field definitions omitted\n\n    content_panels = [\n        TitleFieldPanel('title', classname=\"title\"),\n        FieldPanel('date'),\n        FieldPanel('body'),\n    ]\n    sidebar_content_panels = [\n        FieldPanel('advert'),\n        InlinePanel('related_links', heading=\"Related links\", label=\"Related link\"),\n    ]\n\n    edit_handler = TabbedInterface([\n        ObjectList(content_panels, heading='Content'),\n        ObjectList(sidebar_content_panels, heading='Sidebar content'),\n        ObjectList(Page.promote_panels, heading='Promote'),\n        ObjectList(Page.settings_panels, heading='Settings'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: RoutablePageURL Template Tag Usage\nDESCRIPTION: Example of using the routablepageurl template tag in Django templates to generate URLs for routable pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/routablepage.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailroutablepage_tags %}\n\n{% routablepageurl page \"feed\" %}\n{% routablepageurl page \"archive\" 2014 08 14 %}\n{% routablepageurl page \"food\" foo=\"bar\" baz=\"quux\" %}\n```\n\n----------------------------------------\n\nTITLE: Registering Rich Text Feature for Custom Entity in Python\nDESCRIPTION: This code snippet demonstrates how to register a custom 'stock' entity feature in Wagtail's rich text editor. It sets up the editor plugin, defines the entity type, and configures the database conversion rules.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('register_rich_text_features')\ndef register_stock_feature(features):\n    features.default_features.append('stock')\n    \"\"\"\n    Registering the `stock` feature, which uses the `STOCK` Draft.js entity type,\n    and is stored as HTML with a `<span data-stock>` tag.\n    \"\"\"\n    feature_name = 'stock'\n    type_ = 'STOCK'\n\n    control = {\n        'type': type_,\n        'label': '$',\n        'description': 'Stock',\n    }\n\n    features.register_editor_plugin(\n        'draftail', feature_name, draftail_features.EntityFeature(\n            control,\n            js=['stock.js'],\n            css={'all': ['stock.css']}\n        )\n    )\n\n    features.register_converter_rule('contentstate', feature_name, {\n        # Note here that the conversion is more complicated than for blocks and inline styles.\n        'from_database_format': {'span[data-stock]': StockEntityElementHandler(type_)},\n        'to_database_format': {'entity_decorators': {type_: stock_entity_decorator}},\n    })\n```\n\n----------------------------------------\n\nTITLE: Indexing Related Link Titles in BookPage\nDESCRIPTION: Demonstrates how to index fields from related models using a callable method to concatenate related link titles.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/indexing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BookPage(Page):\n    # ...\n    def get_related_link_titles(self):\n        # Get list of titles and concatenate them\n        return '\\n'.join(self.related_links.all().values_list('name', flat=True))\n\n    search_fields = Page.search_fields + [\n        # ...\n        index.SearchField('get_related_link_titles'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Complete StreamField Migration Example\nDESCRIPTION: Full example of a StreamField migration implementing a rename operation with all required imports and configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\nfrom wagtail.blocks.migrations.migrate_operation import MigrateStreamData\nfrom wagtail.blocks.migrations.operations import RenameStreamChildrenOperation\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ...\n    ]\n\n    operations = [\n        MigrateStreamData(\n            app_name=\"blog\",\n            model_name=\"BlogPage\",\n            field_name=\"content\",\n            operations_and_block_paths=[\n                (RenameStreamChildrenOperation(old_name=\"field1\", new_name=\"block1\"), \"stream1\"),\n            ]\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Customizing Provider List Configuration\nDESCRIPTION: Example of customizing oEmbed providers with a custom video provider and limiting allowed providers.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.embeds.oembed_providers import youtube, vimeo\n\n# Add a custom provider\n# Your custom provider must support oEmbed for this to work. You should be\n# able to find these details in the provider's documentation.\n# - 'endpoint' is the URL of the oEmbed endpoint that Wagtail will call\n# - 'urls' specifies which patterns\nmy_custom_provider = {\n    'endpoint': 'https://customvideosite.com/oembed',\n    'urls': [\n        '^http(?:s)?://(?:www\\.)?customvideosite\\.com/[^#?/]+/videos/.+$',\n    ]\n}\n\nWAGTAILEMBEDS_FINDERS = [\n    {\n        'class': 'wagtail.embeds.finders.oembed',\n        'providers': [youtube, vimeo, my_custom_provider],\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of MigrateStreamData for Renaming StreamField Block in Python\nDESCRIPTION: Demonstrates how to use MigrateStreamData to rename a block named 'field1' to 'block1' in a StreamField called 'content' on the BlogPage model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMigrateStreamData(\n    app_name=\"blog\",\n    model_name=\"BlogPage\",\n    field_name=\"content\",\n    operations_and_block_paths=[\n        (RenameStreamChildrenOperation(old_name=\"field1\", new_name=\"block1\"), \"\"),\n    ],\n    revisions_from=datetime.datetime(2022, 7, 25)\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a StructBlock to StreamField Data in Python\nDESCRIPTION: Example showing how to add a StructBlock to StreamField content by providing a Python dict containing the block's data. This demonstrates working with nested structured content within StreamField.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import blocks\n\nclass UrlWithTextBlock(blocks.StructBlock):\n   url = blocks.URLBlock()\n   text = blocks.TextBlock()\n\n# using this block inside the content\n\ndata = {\n    'url': 'https://github.com/wagtail/',\n    'text': 'A very interesting and useful repo'\n}\n\n# append the new block to the stream as a tuple with the defined index for this block type\nmy_page.body.append(('url', data))\nmy_page.save()\n```\n\n----------------------------------------\n\nTITLE: Defining Wagtail Homepage Model with Hero Section in Python\nDESCRIPTION: Creates a HomePage model with fields for hero image, text, CTA button and body content. Uses ForeignKey relationships to Wagtail's built-in Image and Page models. Includes MultiFieldPanel for organizing edit form fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/customize_homepage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nfrom wagtail.models import Page\nfrom wagtail.fields import RichTextField\n\n# import MultiFieldPanel:\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel\n\n\nclass HomePage(Page):\n    # add the Hero section of HomePage:\n    image = models.ForeignKey(\n        \"wagtailimages.Image\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name=\"+\",\n        help_text=\"Homepage image\",\n    )\n    hero_text = models.CharField(\n        blank=True,\n        max_length=255, help_text=\"Write an introduction for the site\"\n    )\n    hero_cta = models.CharField(\n        blank=True,\n        verbose_name=\"Hero CTA\",\n        max_length=255,\n        help_text=\"Text to display on Call to Action\",\n    )\n    hero_cta_link = models.ForeignKey(\n        \"wagtailcore.Page\",\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name=\"+\",\n        verbose_name=\"Hero CTA link\",\n        help_text=\"Choose a page to link to for the Call to Action\",\n    )\n\n    body = RichTextField(blank=True)\n\n    # modify your content_panels:\n    content_panels = Page.content_panels + [\n        MultiFieldPanel(\n            [\n                FieldPanel(\"image\"),\n                FieldPanel(\"hero_text\"),\n                FieldPanel(\"hero_cta\"),\n                FieldPanel(\"hero_cta_link\"),\n            ],\n            heading=\"Hero section\",\n        ),\n        FieldPanel('body'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Snippet Listing Button in Python\nDESCRIPTION: This snippet demonstrates how to add a custom button to the snippet listing using the register_snippet_listing_buttons hook in Wagtail. It adds a simple button to the listing with a custom URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.snippets import widgets as wagtailsnippets_widgets\n\n@hooks.register('register_snippet_listing_buttons')\ndef snippet_listing_buttons(snippet, user, next_url=None):\n    yield wagtailsnippets_widgets.SnippetListingButton(\n        'A page listing button',\n        '/goes/to/a/url/',\n        priority=10\n    )\n```\n\n----------------------------------------\n\nTITLE: Advanced Editor JavaScript Hook\nDESCRIPTION: Python code demonstrating a more flexible way to register multiple JavaScript files for the editor interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('insert_editor_js')\ndef editor_js():\n    js_files = ['js/word-count-controller.js',]\n    return format_html_join('\\n', '<script src=\"{0}\"></script>',\n        ((static(filename),) for filename in js_files)\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Backend with OPTIONS Dictionary in Wagtail\nDESCRIPTION: Demonstrates the recommended approach for configuring Elasticsearch backend with additional connection options using the new OPTIONS dictionary. This method organizes extra parameters in a dedicated options structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.8.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom elasticsearch import RequestsHttpConnection\n\n    WAGTAILSEARCH_BACKENDS = {\n        'default': {\n            'BACKEND': 'wagtail.wagtailsearch.backends.elasticsearch',\n            'OPTIONS': {\n                'connection_class': RequestsHttpConnection,\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Link Handler in Wagtail\nDESCRIPTION: Shows how to register a custom LinkHandler using Wagtail's register_rich_text_features hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# my_app/wagtail_hooks.py\n\nfrom wagtail import hooks\nfrom my_app.handlers import MyCustomLinkHandler\n\n@hooks.register('register_rich_text_features')\ndef register_link_handler(features):\n    features.register_link_type(MyCustomLinkHandler)\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript for AddressBlock\nDESCRIPTION: Defines a custom JavaScript class for AddressBlock, extending StructBlockDefinition to add custom behavior for disabling the state field based on country selection.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass AddressBlockDefinition extends window.wagtailStreamField.blocks\n    .StructBlockDefinition {\n    render(placeholder, prefix, initialState, initialError) {\n        const block = super.render(\n            placeholder,\n            prefix,\n            initialState,\n            initialError,\n        );\n\n        const stateField = document.getElementById(prefix + '-state');\n        const countryField = document.getElementById(prefix + '-country');\n        const updateStateInput = () => {\n            if (countryField.value == 'us') {\n                stateField.removeAttribute('disabled');\n            } else {\n                stateField.setAttribute('disabled', true);\n            }\n        };\n        updateStateInput();\n        countryField.addEventListener('change', updateStateInput);\n\n        return block;\n    }\n}\nwindow.telepath.register('myapp.blocks.AddressBlock', AddressBlockDefinition);\n```\n\n----------------------------------------\n\nTITLE: Creating a StreamBlock Inline Definition in Python\nDESCRIPTION: Demonstrates defining a StreamBlock directly within a StreamField. This creates a carousel that can contain a mixture of images, quotations, and videos in any order.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    # ...\n    ('carousel', blocks.StreamBlock(\n        [\n            ('image', ImageBlock()),\n            ('quotation', blocks.StructBlock([\n                ('text', blocks.TextBlock()),\n                ('author', blocks.CharBlock()),\n            ])),\n            ('video', EmbedBlock()),\n        ],\n        icon='cogs'\n    )),\n])\n```\n\n----------------------------------------\n\nTITLE: Using BootstrapTranslatableMixin for existing snippet data in Wagtail\nDESCRIPTION: This Python code shows how to use BootstrapTranslatableMixin to prepare an existing snippet model for translation. It's used as an intermediate step when migrating existing data to support translations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# myapp/models.py\n\nfrom django.db import models\n\nfrom wagtail.models import BootstrapTranslatableMixin\nfrom wagtail.snippets.models import register_snippet\n\n\n@register_snippet\nclass Advert(BootstrapTranslatableMixin, models.Model):\n    name = models.CharField(max_length=255)\n\n    # if the model has a Meta class, ensure it inherits from\n    # BootstrapTranslatableMixin.Meta too\n    class Meta(BootstrapTranslatableMixin.Meta):\n        verbose_name = 'adverts'\n```\n\n----------------------------------------\n\nTITLE: Example of Customizing Specific UserViewSet Templates\nDESCRIPTION: Shows how to customize specific templates for create and edit views in the UserViewSet by directly setting the template names, providing more granular control over template selection.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass UserViewSet(WagtailUserViewSet):\n    create_template_name = \"myapp/users/create.html\"\n    edit_template_name = \"myapp/users/edit.html\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelViewSet in Wagtail Admin\nDESCRIPTION: This snippet covers the ModelViewSet class, which handles the interaction with model instances within the Wagtail admin interface. Key functionalities include form field handling and method overrides for custom editing behaviors. Dependencies involve connection to Django models and familiarity with Wagtail's admin structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/viewsets.md#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: wagtail.admin.viewsets.model.ModelViewSet\n\n   .. attribute:: model\n\n   Required; the model class that this viewset will work with. The ``model_name`` will be used\n   as the URL prefix and namespace, unless these are specified explicitly via the :attr:`~.ViewSet.name`, :attr:`~.ViewSet.url_prefix` or\n   :attr:`~.ViewSet.url_namespace` attributes.\n\n   .. attribute:: form_fields\n\n   A list of model field names that should be included in the create / edit forms.\n\n   .. attribute:: exclude_form_fields\n\n   Used in place of :attr:`form_fields` to indicate that all of the model's fields except the ones listed here should appear in the create / edit forms. Either ``form_fields`` or ``exclude_form_fields`` must be supplied (unless :meth:`get_form_class` is being overridden).\n\n   .. automethod:: get_form_class\n   .. automethod:: get_edit_handler\n   .. automethod:: get_permissions_to_register\n\n   .. autoattribute:: menu_label\n\n      Defaults to the title-cased version of the model's\n      :attr:`~django.db.models.Options.verbose_name_plural`.\n\n   .. autoattribute:: add_to_reference_index\n   .. autoattribute:: ordering\n   .. autoattribute:: list_per_page\n   .. autoattribute:: list_display\n   .. autoattribute:: list_export\n   .. autoattribute:: list_filter\n   .. autoattribute:: filterset_class\n   .. autoattribute:: export_headings\n   .. autoattribute:: export_filename\n   .. autoattribute:: search_fields\n   .. autoattribute:: search_backend_name\n   .. autoattribute:: copy_view_enabled\n   .. autoattribute:: inspect_view_enabled\n   .. autoattribute:: inspect_view_fields\n   .. autoattribute:: inspect_view_fields_exclude\n   .. autoattribute:: index_view_class\n   .. autoattribute:: add_view_class\n   .. autoattribute:: edit_view_class\n   .. autoattribute:: delete_view_class\n   .. autoattribute:: usage_view_class\n   .. autoattribute:: history_view_class\n   .. autoattribute:: copy_view_class\n   .. autoattribute:: inspect_view_class\n   .. autoattribute:: template_prefix\n   .. autoattribute:: index_template_name\n   .. autoattribute:: index_results_template_name\n   .. autoattribute:: create_template_name\n   .. autoattribute:: edit_template_name\n   .. autoattribute:: delete_template_name\n   .. autoattribute:: history_template_name\n   .. autoattribute:: inspect_template_name\n```\n\n----------------------------------------\n\nTITLE: Email Notification Implementation\nDESCRIPTION: Implements custom email notifications for task events using Wagtail's notification system\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# <project>/mail.py\n\nfrom wagtail.admin.mail import EmailNotificationMixin, Notifier\nfrom wagtail.models import TaskState\n\nfrom .models import UserApprovalTaskState\n\n\nclass BaseUserApprovalTaskStateEmailNotifier(EmailNotificationMixin, Notifier):\n    \"\"\"A base notifier to send updates for UserApprovalTask events\"\"\"\n\n    def __init__(self):\n        # Allow UserApprovalTaskState and TaskState to send notifications\n        super().__init__((UserApprovalTaskState, TaskState))\n\n    def can_handle(self, instance, **kwargs):\n        if super().can_handle(instance, **kwargs) and isinstance(instance.task.specific, UserApprovalTask):\n            # Don't send notifications if a Task has been canceled and then resumed - when object was updated to a new revision\n            return not TaskState.objects.filter(workflow_state=instance.workflow_state, task=instance.task, status=TaskState.STATUS_CANCELLED).exists()\n        return False\n\n    def get_context(self, task_state, **kwargs):\n        context = super().get_context(task_state, **kwargs)\n        context['object'] = task_state.workflow_state.content_object\n        context['task'] = task_state.task.specific\n        return context\n\n    def get_recipient_users(self, task_state, **kwargs):\n\n        # Send emails to the user assigned to the task\n        approving_user = task_state.task.specific.user\n\n        recipients = {approving_user}\n\n        return recipients\n\n\nclass UserApprovalTaskStateSubmissionEmailNotifier(BaseUserApprovalTaskStateEmailNotifier):\n    \"\"\"A notifier to send updates for UserApprovalTask submission events\"\"\"\n\n    notification = 'submitted'\n```\n\n----------------------------------------\n\nTITLE: Testing Page Rendering in Wagtail - Python\nDESCRIPTION: Example showing how to test page rendering including handling of 404s and redirects.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_default_route_rendering(self):\n    self.assertPageIsRenderable(self.page)\n\ndef test_year_archive_route_with_zero_matches(self):\n    # NOTE: Should raise a 404 when no events exist for the specified year\n    self.assertPageIsRenderable(self.page, \"archive/year/1984/\", accept_404=True)\n\ndef test_month_archive_route_with_zero_matches(self):\n    # NOTE: Should redirect to year-specific view when no events exist for the specified month\n    self.assertPageIsRenderable(self.page, \"archive/year/1984/07/\", accept_redirect=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Redirects Module in Django Settings (Python)\nDESCRIPTION: Adds the necessary configurations to enable the redirects module in a Wagtail project's Django settings file. This includes adding the app to INSTALLED_APPS and the middleware to MIDDLEWARE.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ...\n\n    'wagtail.contrib.redirects',\n]\n\nMIDDLEWARE = [\n    # ...\n    # all other django middleware first\n\n    'wagtail.contrib.redirects.middleware.RedirectMiddleware',\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ChooserViewSet in Wagtail Admin\nDESCRIPTION: Documentation for the ChooserViewSet class, focusing on model-based view handling in administrator page contexts. Attributes covered include view classes for choosing entities and handling related forms. Prerequisites involve knowledge of model configurations and form setups.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/viewsets.md#2025-04-21_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: wagtail.admin.viewsets.chooser.ChooserViewSet\n\n   .. attribute:: model\n\n   Required; the model class that this viewset will work with.\n\n   .. autoattribute:: icon\n   .. autoattribute:: choose_one_text\n   .. autoattribute:: page_title\n   .. autoattribute:: choose_another_text\n   .. autoattribute:: edit_item_text\n   .. autoattribute:: per_page\n   .. autoattribute:: preserve_url_parameters\n   .. autoattribute:: url_filter_parameters\n   .. autoattribute:: choose_view_class\n   .. autoattribute:: choose_results_view_class\n   .. autoattribute:: chosen_view_class\n   .. autoattribute:: chosen_multiple_view_class\n   .. autoattribute:: create_view_class\n   .. autoattribute:: base_widget_class\n   .. autoattribute:: widget_class\n   .. autoattribute:: widget_telepath_adapter_class\n   .. autoattribute:: register_widget\n   .. autoattribute:: base_block_class\n   .. automethod:: get_block_class\n   .. autoattribute:: creation_form_class\n   .. autoattribute:: form_fields\n   .. autoattribute:: exclude_form_fields\n   .. autoattribute:: create_action_label\n   .. autoattribute:: create_action_clicked_label\n   .. autoattribute:: creation_tab_label\n   .. autoattribute:: search_tab_label\n   .. method:: get_object_list\n\n      Returns a queryset of objects that are available to be chosen. By default, all instances of ``model`` are returned.\n```\n\n----------------------------------------\n\nTITLE: Template with Component Tags\nDESCRIPTION: Template example showing different ways to render components using the component template tag\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailadmin_tags %}\n{% for panel in panels %}\n    {% component panel %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Preview Content\nDESCRIPTION: Template code showing how to conditionally render content based on preview status, useful for excluding analytics in preview mode.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n{% if not request.is_preview %}\n    <script>\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        ...\n    </script>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Custom Image Model Implementation with admin_form_fields\nDESCRIPTION: Example of how to create a custom image model by subclassing AbstractImage with the required admin_form_fields property that specifies which fields should appear in the admin form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.wagtailimages.models import AbstractImage, Image\n\nclass MyImage(AbstractImage):\n    photographer = models.CharField(max_length=255)\n    has_legal_approval = models.BooleanField()\n\n    admin_form_fields = Image.admin_form_fields + ['photographer']\n```\n\n----------------------------------------\n\nTITLE: Using a Custom StreamBlock in a StreamField Definition in Python\nDESCRIPTION: Demonstrates how to use a custom StreamBlock (CarouselBlock) within a StreamField definition, with additional configuration parameters like max_num and block_counts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass HomePage(Page):\n    carousel = StreamField(\n        CarouselBlock(max_num=10, block_counts={'video': {'max_num': 2}}),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorBlock for StreamField\nDESCRIPTION: Creates a custom ColorBlock for use in Wagtail StreamFields, utilizing the ColorWidget.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ColorBlock(FieldBlock):\n    def __init__(self, *args, **kwargs):\n        swatches = kwargs.pop('swatches', [])\n        theme = kwargs.pop('theme', 'large')\n        self.field = forms.CharField(widget=ColorWidget(swatches=swatches, theme=theme))\n        super().__init__(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Task Behavior Customization Methods\nDESCRIPTION: Implementation of various methods to customize task behavior including access control and available actions\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef user_can_access_editor(self, obj, user):\n    return user == self.user\n\ndef locked_for_user(self, obj, user):\n    return user != self.user\n\ndef get_actions(self, obj, user):\n    if user == self.user:\n        return [\n            ('approve', \"Approve\", False),\n            ('reject', \"Reject\", False),\n            ('cancel', \"Cancel\", False),\n        ]\n    else:\n        return []\n\ndef on_action(self, task_state, user, action_name):\n    if action_name == 'cancel':\n        return task_state.workflow_state.cancel(user=user)\n    else:\n        return super().on_action(task_state, user, workflow_state)\n\ndef get_task_states_user_can_moderate(self, user, **kwargs):\n    if user == self.user:\n        # get all task states linked to the (base class of) current task\n        return TaskState.objects.filter(status=TaskState.STATUS_IN_PROGRESS, task=self.task_ptr)\n    else:\n        return TaskState.objects.none()\n\n@classmethod\ndef get_description(cls):\n    return _(\"Members of the chosen Wagtail Groups can approve this task\")\n```\n\n----------------------------------------\n\nTITLE: Registering Admin Viewset in Wagtail Using Python\nDESCRIPTION: Shows how to register a ViewSet or ViewSetGroup with Wagtail admin using the register_admin_viewset hook, allowing for a comprehensive admin interface extension. Assumes a Wagtail setup.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom .views import CalendarViewSet\n\n@hooks.register(\"register_admin_viewset\")\ndef register_viewset():\n    return CalendarViewSet()\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom .views import AgendaViewSetGroup, VenueViewSet\n\n@hooks.register(\"register_admin_viewset\")\ndef register_viewsets():\n    return [AgendaViewSetGroup(), VenueViewSet()]\n```\n\n----------------------------------------\n\nTITLE: Displaying tags with links in a Wagtail page template\nDESCRIPTION: This HTML template snippet demonstrates how to display all tags associated with a page and create links back to the index page with the appropriate tag filter. It iterates through all tags on the page and generates a link for each.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/tags.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% for tag in page.tags.all %}\n    <a href=\"{% pageurl page.blog_index %}?tag={{ tag }}\">{{ tag }}</a>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collapsible MultiFieldPanel in Wagtail\nDESCRIPTION: This snippet demonstrates how to use the 'collapsed' class with MultiFieldPanel to create a panel that loads in a collapsed state. This helps improve the UI for complex models with many fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    content_panels = [\n        MultiFieldPanel(\n            [\n                FieldPanel('cover'),\n                FieldPanel('book_file'),\n                FieldPanel('publisher'),\n            ],\n            heading=\"Collection of Book Fields\",\n            classname=\"collapsed\",\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Page Fields to Wagtail API\nDESCRIPTION: Expose custom fields in the Wagtail API by adding them to the api_fields attribute of the page model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# blog/models.py\n\nfrom wagtail.api import APIField\n\nclass BlogPageAuthor(Orderable):\n    page = models.ForeignKey('blog.BlogPage', on_delete=models.CASCADE, related_name='authors')\n    name = models.CharField(max_length=255)\n\n    api_fields = [\n        APIField('name'),\n    ]\n\n\nclass BlogPage(Page):\n    published_date = models.DateTimeField()\n    body = RichTextField()\n    feed_image = models.ForeignKey('wagtailimages.Image', on_delete=models.SET_NULL, null=True, ...)\n    private_field = models.CharField(max_length=255)\n\n    # Export fields over the API\n    api_fields = [\n        APIField('published_date'),\n        APIField('body'),\n        APIField('feed_image'),\n        APIField('authors'),  # This will nest the relevant BlogPageAuthor objects in the API response\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering Permissions with Wagtail Hooks in Python\nDESCRIPTION: Demonstrates how to return a QuerySet of Permission objects for a specific app and model to be shown in the Wagtail Groups administration area using the register_permissions hook. Requires Django and Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.models import Permission\nfrom wagtail import hooks\n\n\n@hooks.register('register_permissions')\ndef register_permissions():\n    app = 'blog'\n    model = 'extramodelset'\n\n    return Permission.objects.filter(content_type__app_label=app, codename__in=[\n        f\"view_{model}\", f\"add_{model}\", f\"change_{model}\", f\"delete_{model}\"\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Portfolio Page Model in Wagtail\nDESCRIPTION: Defines a PortfolioPage model with StreamField integration and content panel configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page\nfrom wagtail.fields import StreamField\nfrom wagtail.admin.panels import FieldPanel\n\nfrom portfolio.blocks import PortfolioStreamBlock\n\n\nclass PortfolioPage(Page):\n    parent_page_types = [\"home.HomePage\"]\n\n    body = StreamField(\n        PortfolioStreamBlock(),\n        blank=True,\n        use_json_field=True,\n        help_text=\"Use this section to list your projects and skills.\",\n    )\n\n    content_panels = Page.content_panels + [\n        FieldPanel(\"body\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using captureOnCommitCallbacks in Django Tests\nDESCRIPTION: Demonstrates how to wrap database updates in tests to ensure background tasks are completed before the test continues, addressing changes in task execution timing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_search(self):\n    home_page = Page.objects.get(slug=\"home\")\n\n    with self.captureOnCommitCallbacks(execute=True):  # Added\n        home_page.add_child(instance=EventPage(title=\"Christmas party\"))\n\n    response = self.client.get(\"/search/?q=Christmas\")\n    self.assertContains(response, \"Christmas party\")\n```\n\n----------------------------------------\n\nTITLE: Example of Customizing UserViewSet Template Locations\nDESCRIPTION: Shows how to customize the location of templates for the UserViewSet by setting the template_prefix attribute, which helps organize templates in a custom directory structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass UserViewSet(WagtailUserViewSet):\n    template_prefix = \"myapp/users/\"\n```\n\n----------------------------------------\n\nTITLE: Defining a StreamBlock with TypedTableBlock in Wagtail\nDESCRIPTION: Create a StreamBlock that includes a TypedTableBlock with various column types such as text, numeric, rich text, and image.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/typed_table_block.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.typed_table_block.blocks import TypedTableBlock\nfrom wagtail import blocks\nfrom wagtail.images.blocks import ImageChooserBlock\n\nclass DemoStreamBlock(blocks.StreamBlock):\n    title = blocks.CharBlock()\n    paragraph = blocks.RichTextBlock()\n    table = TypedTableBlock([\n        ('text', blocks.CharBlock()),\n        ('numeric', blocks.FloatBlock()),\n        ('rich_text', blocks.RichTextBlock()),\n        ('image', ImageChooserBlock())\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering Admin Menu Item Using Wagtail Hooks in Python\nDESCRIPTION: This snippet demonstrates how to add a new item to the Wagtail admin menu using the register_admin_menu_item hook. It includes using the MenuItem class to define the item's label, URL, icon, and display order. This example requires Django and Wagtail installed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import reverse\n\nfrom wagtail import hooks\nfrom wagtail.admin.menu import MenuItem\n\n@hooks.register('register_admin_menu_item')\ndef register_frank_menu_item():\n  return MenuItem('Frank', reverse('frank'), icon_name='folder-inverse', order=10000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Conversion Handlers for Custom Entity in Python\nDESCRIPTION: This snippet shows the implementation of handlers for converting the custom stock entity between database HTML format and Draft.js ContentState. It includes both 'to_database_format' and 'from_database_format' handlers.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom draftjs_exporter.dom import DOM\nfrom wagtail.admin.rich_text.converters.html_to_contentstate import InlineEntityElementHandler\n\ndef stock_entity_decorator(props):\n    \"\"\"\n    Draft.js ContentState to database HTML.\n    Converts the STOCK entities into a span tag.\n    \"\"\"\n    return DOM.create_element('span', {\n        'data-stock': props['stock'],\n    }, props['children'])\n\n\nclass StockEntityElementHandler(InlineEntityElementHandler):\n    \"\"\"\n    Database HTML to Draft.js ContentState.\n    Converts the span tag into a STOCK entity, with the right data.\n    \"\"\"\n    mutability = 'IMMUTABLE'\n\n    def get_attribute_data(self, attrs):\n        \"\"\"\n        Take the `stock` value from the `data-stock` HTML attribute.\n        \"\"\"\n        return { 'stock': attrs['data-stock'] }\n```\n\n----------------------------------------\n\nTITLE: Configuring a StreamBlock with Custom Form Class in Python (Inline Definition)\nDESCRIPTION: Shows how to add a custom form_classname to a StreamBlock defined inline within a StreamField. This applies a CSS class to the block in the editing interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    # ...\n    ('event_promotions', blocks.StreamBlock([\n        ('hashtag', blocks.CharBlock()),\n        ('post_date', blocks.DateBlock()),\n    ], form_classname='event-promotions')),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration with RunPython Operation in Wagtail\nDESCRIPTION: Defines a Django migration class that executes custom Python functions for adding and removing bulk delete permissions. The migration uses RunPython to apply these functions during migrations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.8.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Migration(migrations.Migration):\n\n        dependencies = [\n            # keep the original dependencies line\n        ]\n\n        operations = [\n            migrations.RunPython(add_bulk_delete_permission, remove_bulk_delete_permission),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Embedding Content via Python\nDESCRIPTION: Example of programmatically embedding content using Python code with error handling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.embeds.embeds import get_embed\nfrom wagtail.embeds.exceptions import EmbedException\n\ntry:\n    embed = get_embed('https://www.youtube.com/watch?v=Ffu-2jEdLPw')\n\n    print(embed.html)\nexcept EmbedException:\n    # Cannot find embed\n    pass\n```\n\n----------------------------------------\n\nTITLE: Captioned Image Block Template\nDESCRIPTION: HTML template for rendering captioned images with lazy loading\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailimages_tags %}\n\n<figure>\n    {% image self.image fill-600x338 loading=\"lazy\" %}\n    <figcaption>{{ self.caption }} - {{ self.attribution }}</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Backend Configuration\nDESCRIPTION: Full configuration for Elasticsearch backend including URL, index settings, timeout and additional options.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.search.backends.elasticsearch8',\n        'URLS': ['https://localhost:9200'],\n        'INDEX': 'wagtail',\n        'TIMEOUT': 5,\n        'OPTIONS': {},\n        'INDEX_SETTINGS': {},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Backends with Hostname Filtering\nDESCRIPTION: This snippet shows how to configure multiple frontend cache backends with hostname filtering. It includes examples for an HTTP backend and a Cloudflare backend, each with specific hostnames to handle.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n    'main-site': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.HTTPBackend',\n        'LOCATION': 'http://localhost:8000',\n        'HOSTNAMES': ['example.com']\n    },\n    'cdn': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudflareBackend',\n        'BEARER_TOKEN': 'your cloudflare bearer token',\n        'ZONEID': 'your cloudflare domain zone id',\n        'HOSTNAMES': ['cdn.example.com']\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Link Tags Usage\nDESCRIPTION: Examples of using pageurl and slugurl tags for internal linking\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n...\n<a href=\"{% pageurl page.get_parent %}\">Back to index</a>\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n{% for publication in page.related_publications.all %}\n    <li>\n        <a href=\"{% pageurl publication.detail_page fallback='coming_soon' %}\">\n            {{ publication.title }}\n        </a>\n    </li>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Default TableBlock Configuration Options\nDESCRIPTION: Default configuration dictionary for TableBlock showing all available options\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/table_block.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndefault_table_options = {\n    'minSpareRows': 0,\n    'startRows': 3,\n    'startCols': 3,\n    'colHeaders': False,\n    'rowHeaders': False,\n    'contextMenu': [\n        'row_above',\n        'row_below',\n        '---------',\n        'col_left',\n        'col_right',\n        '---------',\n        'remove_row',\n        'remove_col',\n        '---------',\n        'undo',\n        'redo'\n    ],\n    'editor': 'text',\n    'stretchH': 'all',\n    'height': 108,\n    'language': language,\n    'renderer': 'text',\n    'autoColumnSize': False,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting RichTextField to StreamField - Complete Migration\nDESCRIPTION: Extended migration script that handles both published and draft pages, including page revisions. Includes helper functions for converting data formats and comprehensive error handling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.db import migrations\n\nimport wagtail.blocks\nimport wagtail.fields\n\n\ndef page_to_streamfield(page):\n    changed = False\n    try:\n        json.loads(page.body)\n    except ValueError:\n        page.body = json.dumps(\n            [{\"type\": \"rich_text\", \"value\": page.body}],\n        )\n        changed = True\n    else:\n        pass\n\n    return page, changed\n\n\ndef pagerevision_to_streamfield(revision_data):\n    changed = False\n    body = revision_data.get(\"body\")\n    if body:\n        try:\n            json.loads(body)\n        except ValueError:\n            revision_data[\"body\"] = json.dumps(\n                [{\n                    \"value\": body,\n                    \"type\": \"rich_text\"\n                }],\n                cls=DjangoJSONEncoder)\n            changed = True\n        else:\n            pass\n    return revision_data, changed\n\n\ndef page_to_richtext(page):\n    changed = False\n    if page.body:\n        try:\n            body_data = json.loads(page.body)\n        except ValueError:\n            pass\n        else:\n            page.body = \"\".join([\n                child[\"value\"] for child in body_data\n                if child[\"type\"] == \"rich_text\"\n            ])\n            changed = True\n\n    return page, changed\n\n\ndef pagerevision_to_richtext(revision_data):\n    changed = False\n    body = revision_data.get(\"body\", \"definitely non-JSON string\")\n    if body:\n        try:\n            body_data = json.loads(body)\n        except ValueError:\n            pass\n        else:\n            raw_text = \"\".join([\n                child[\"value\"] for child in body_data\n                if child[\"type\"] == \"rich_text\"\n            ])\n            revision_data[\"body\"] = raw_text\n            changed = True\n    return revision_data, changed\n\n\ndef convert(apps, schema_editor, page_converter, pagerevision_converter):\n    BlogPage = apps.get_model(\"demo\", \"BlogPage\")\n    content_type = ContentType.objects.get_for_model(BlogPage)\n    Revision = apps.get_model(\"wagtailcore\", \"Revision\")\n\n    for page in BlogPage.objects.all():\n\n        page, changed = page_converter(page)\n        if changed:\n            page.save()\n\n        for revision in Revision.objects.filter(\n            content_type_id=content_type.pk, object_id=page.pk\n        ):\n            revision_data = revision.content\n            revision_data, changed = pagerevision_converter(revision_data)\n            if changed:\n                revision.content = revision_data\n                revision.save()\n\n\ndef convert_to_streamfield(apps, schema_editor):\n    return convert(apps, schema_editor, page_to_streamfield, pagerevision_to_streamfield)\n\n\ndef convert_to_richtext(apps, schema_editor):\n    return convert(apps, schema_editor, page_to_richtext, pagerevision_to_richtext)\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        (\"demo\", \"0001_initial\"),\n        (\"wagtailcore\", \"0076_modellogentry_revision\"),\n    ]\n\n    operations = [\n        migrations.RunPython(\n            convert_to_streamfield,\n            convert_to_richtext,\n        ),\n        migrations.AlterField(\n            model_name=\"BlogPage\",\n            name=\"body\",\n            field=wagtail.fields.StreamField(\n                [(\"rich_text\", wagtail.blocks.RichTextBlock())],\n            ),\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering API URLs in Django URL Configuration\nDESCRIPTION: Add the API router URLs to the Django project's URL configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\n\nfrom .api import api_router\n\nurlpatterns = [\n    ...\n\n    path('api/v2/', api_router.urls),\n\n    ...\n\n    # Ensure that the api_router line appears above the default Wagtail page serving route\n    re_path(r'^', include(wagtail_urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Icon with Wagtail's register_icons Hook\nDESCRIPTION: Python code that registers a custom SVG icon using Wagtail's register_icons hook. The hook adds the path to the SVG file to Wagtail's icon registry.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/icons.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register(\"register_icons\")\ndef register_icons(icons):\n    return icons + ['app_name/toucan.svg']\n```\n\n----------------------------------------\n\nTITLE: Creating Data Migration for Custom Image Models\nDESCRIPTION: This snippet provides the steps necessary to create a schema and data migration when using a custom image model under the upcoming Wagtail version 1.8. It includes commands for creating migrations and the required code to handle filtering specifications.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.7.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n      from wagtail.wagtailimages.utils import get_fill_filter_spec_migrations\n\n```\n\nLANGUAGE: python\nCODE:\n```\n      forward, reverse = get_fill_filter_spec_migrations('myapp', 'CustomRendition')\n      operations = [\n          migrations.RunPython(forward, reverse),\n      ]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Header Template with Navigation\nDESCRIPTION: Header template implementation with dynamic navigation menu and Wagtail user bar. Includes site root and child page navigation with menu filtering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/style_your_site.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags navigation_tags wagtailuserbar %}\n\n<header>\n    {% get_site_root as site_root %}\n    <nav>\n        <p>\n          <a href=\"{% pageurl site_root %}\">{{ site_root.title }}</a> |\n          {% for menuitem in site_root.get_children.live.in_menu %}\n            <a href=\"{% pageurl menuitem %}\">{{ menuitem.title }}</a>{% if not forloop.last %} | {% endif %}\n          {% endfor %}\n        </p>\n    </nav>\n\n    {% wagtailuserbar \"top-right\" %}\n</header>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Admin Menu Item in Python\nDESCRIPTION: Example of registering a custom admin menu item using the new 'classname' convention instead of 'classnames'. This snippet demonstrates how to use the register_admin_menu_item hook to add a new menu item to the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse\n\nfrom wagtail import hooks\nfrom wagtail.admin.menu import MenuItem\n\n@hooks.register('register_admin_menu_item')\ndef register_frank_menu_item():\n  return MenuItem(\n    'Frank',\n    reverse('frank'),\n    icon_name='folder-inverse',\n    order=10000,\n    classname=\"highlight-menu\" # not classnames=...\n  )\n```\n\n----------------------------------------\n\nTITLE: Custom TableBlock Configuration Example\nDESCRIPTION: Example of implementing TableBlock with custom configuration options\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/table_block.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnew_table_options = {\n    'minSpareRows': 0,\n    'startRows': 6,\n    'startCols': 4,\n    'colHeaders': False,\n    'rowHeaders': False,\n    'contextMenu': True,\n    'editor': 'text',\n    'stretchH': 'all',\n    'height': 216,\n    'language': 'en',\n    'renderer': 'text',\n    'autoColumnSize': False,\n}\n\nclass DemoStreamBlock(StreamBlock):\n    ...\n    table = TableBlock(table_options=new_table_options)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Template Component in Python\nDESCRIPTION: Example of creating a basic template component by subclassing Component and specifying a template_name\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.ui.components import Component\n\nclass WelcomePanel(Component):\n    template_name = 'my_app/panels/welcome.html'\n\n\nmy_welcome_panel = WelcomePanel()\n```\n\n----------------------------------------\n\nTITLE: Defining Site Root Template Tag in Python for Wagtail\nDESCRIPTION: This snippet defines a template tag 'get_site_root' that retrieves the root page of the site. It uses the Wagtail Site model to find the root page for the current request context.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/set_up_site_menu.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\n\n# import site:\nfrom wagtail.models import Site\n\nfrom base.models import FooterText\n\nregister = template.Library()\n\n\n# ... keep the definition of get_footer_text and add the get_site_root template tag:\n@register.simple_tag(takes_context=True)\ndef get_site_root(context):\n    return Site.find_for_request(context[\"request\"]).root_page\n```\n\n----------------------------------------\n\nTITLE: Registering taggit's Tag model as a Wagtail snippet for management\nDESCRIPTION: This code adds the Django taggit Tag model as a snippet in the Wagtail admin interface. It creates a custom SnippetViewSet with appropriate configuration for displaying and managing tags, including defining which fields to show and customizing the admin menu appearance.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/tags.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.panels import FieldPanel\nfrom wagtail.snippets.models import register_snippet\nfrom wagtail.snippets.views.snippets import SnippetViewSet\nfrom taggit.models import Tag\n\n\nclass TagsSnippetViewSet(SnippetViewSet):\n    panels = [FieldPanel(\"name\")]  # only show the name field\n    model = Tag\n    icon = \"tag\"  # change as required\n    add_to_admin_menu = True\n    menu_label = \"Tags\"\n    menu_order = 200  # will put in 3rd place (000 being 1st, 100 2nd)\n    list_display = [\"name\", \"slug\"]\n    search_fields = (\"name\",)\n\nregister_snippet(TagsSnippetViewSet)\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Translation in Wagtail (Python)\nDESCRIPTION: This code snippet shows how to enable the simple_translation module in Wagtail by adding it to INSTALLED_APPS. It allows users to copy pages and translatable snippets into another language.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\"wagtail.contrib.simple_translation\"\n```\n\n----------------------------------------\n\nTITLE: HTML Data Attributes for Formset Implementation\nDESCRIPTION: HTML data attributes specification for implementing expanding formset functionality in Wagtail admin. These attributes replace the deprecated window.buildExpandingFormset function for handling form insertion and deletion behaviors.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Containing element -->\n<div data-controller=\"w-formset\">\n\n<!-- Element to append new child forms -->\n<div data-w-formset-target=\"forms\">\n\n<!-- Child form element -->\n<div data-w-formset-target=\"child\">\n\n<!-- Deleted form element -->\n<div data-w-formset-target=\"deleted\" hidden>\n\n<!-- Template element for blank form -->\n<template data-w-formset-target=\"template\">\n\n<!-- Management field (total forms) -->\n<input data-w-formset-target=\"totalFormsInput\">\n\n<!-- Management field (min forms) -->\n<input data-w-formset-target=\"minFormsInput\">\n\n<!-- Management field (max forms) -->\n<input data-w-formset-target=\"maxFormsInput\">\n\n<!-- Management field (Delete, within child form) -->\n<input data-w-formset-target=\"deleteInput\">\n\n<!-- Add child button -->\n<button data-action=\"w-formset#add\">\n\n<!-- Delete child button (within child form) -->\n<button data-action=\"w-formset#delete\">\n```\n\n----------------------------------------\n\nTITLE: Using picture() Function in Jinja2 Template\nDESCRIPTION: These snippets show how to use the picture() function to create responsive and multi-format images using the <picture> tag in Jinja2 templates. It includes examples for rendering images in multiple formats and sizes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_6\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ picture(page.photo, \"format-{avif,webp,jpeg}|width-400\") }}\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ picture(page.header_image, \"format-{avif,webp,jpeg}|width-{400,800}\", sizes=\"80vw\") }}\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% set bg=picture(page.background_image, \"format-{avif,jpeg}|max-{512x512,1024x1024}\") %}\n<div class=\"wrapper\" style=\"background-image: image-set(url({{ bg.formats['avif'][0].url }}) 1x type('image/avif'), url({{ bg.formats['avif'][1].url }}) 2x type('image/avif'), url({{ bg.formats['jpeg'][0].url }}) 1x type('image/jpeg'), url({{ bg.formats['jpeg'][1].url }}) 2x type('image/jpeg'));\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail Search Backends in Python\nDESCRIPTION: This code snippet shows how to configure the Wagtail search backend to use the database backend. It replaces deprecated backends like 'wagtail.search.backends.db' and 'wagtail.contrib.postgres_search.backend' with 'wagtail.search.backends.database'. It also suggests removing 'wagtail.contrib.postgres_search' from INSTALLED_APPS if it was previously set.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"WAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.search.backends.database',\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton Pages in Wagtail\nDESCRIPTION: Example of preventing a page type from being created at all by setting parent_page_types to an empty list, useful for unique pages that should only be created programmatically.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass HiddenPage(Page):\n    parent_page_types = []\n```\n\n----------------------------------------\n\nTITLE: Controlling Error Message Placement with StructBlockValidationError\nDESCRIPTION: Example showing how to control where validation errors appear within a StructBlock. The TopicBlock validates that the keyword appears in the description, and attaches the error specifically to the description field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_validation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\nfrom wagtail.blocks import CharBlock, StructBlock, StructBlockValidationError, TextBlock\n\nclass TopicBlock(StructBlock):\n    keyword = CharBlock()\n    description = TextBlock()\n\n    def clean(self, value):\n        result = super().clean(value)\n        if result[\"keyword\"] not in result[\"description\"]:\n            raise StructBlockValidationError(block_errors={\n                \"description\": ValidationError(\"Description must contain the keyword\")\n            })\n        return result\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Handlers for Settings\nDESCRIPTION: Implementation of edit handlers for settings models with field panels and foreign key relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@register_setting\nclass GenericImportantPages(BaseGenericSetting):\n    donate_page = models.ForeignKey(\n        'wagtailcore.Page', null=True, on_delete=models.SET_NULL, related_name='+'\n    )\n    sign_up_page = models.ForeignKey(\n        'wagtailcore.Page', null=True, on_delete=models.SET_NULL, related_name='+'\n    )\n\n    panels = [\n        FieldPanel('donate_page'),\n        FieldPanel('sign_up_page'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Migrating BaseSetting Model to BaseSiteSetting in Wagtail - Python\nDESCRIPTION: Example showing how to update existing setting models that inherit from BaseSetting to use the new BaseSiteSetting base class. The code demonstrates refactoring a SiteSpecificSocialMediaSettings class with a facebook URL field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.0.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.settings.models import BaseSetting, register_setting\n\n@register_setting\nclass SiteSpecificSocialMediaSettings(BaseSetting):\n    facebook = models.URLField()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.settings.models import BaseSiteSetting, register_setting\n\n@register_setting\nclass SiteSpecificSocialMediaSettings(BaseSiteSetting):\n    facebook = models.URLField()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Form Field Override in Python\nDESCRIPTION: Shows how to register a custom form field override for a specific model field type using the register_form_field_override function in an AppConfig's ready method.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/forms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\nfrom django.db.models import ForeignKey\n\n\nclass WagtailVideosAppConfig(AppConfig):\n    name = 'wagtail.videos'\n    label = 'wagtailvideos'\n\n    def ready(self):\n        from wagtail.admin.forms.models import register_form_field_override\n        from .models import Video\n        from .widgets import VideoChooser\n        register_form_field_override(ForeignKey, to=Video, override={'widget': VideoChooser})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail CMS Settings in Django\nDESCRIPTION: Core configuration settings for a Wagtail CMS installation including site name, document extensions, search backend options, and email notification settings. Defines security parameters and system-wide behaviors.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/add_to_django_project.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_SITE_NAME = 'My Project'\n\n#WAGTAILSEARCH_BACKENDS = {\n#  'default': {\n#    'BACKEND': 'wagtail.search.backends.elasticsearch8',\n#    'INDEX': 'myapp'\n#  }\n#}\n\n# Wagtail email notifications from address\n# WAGTAILADMIN_NOTIFICATION_FROM_EMAIL = 'wagtail@myhost.io'\n\n# Wagtail email notification format\n# WAGTAILADMIN_NOTIFICATION_USE_HTML = True\n\nWAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']\n\nTAGGIT_CASE_INSENSITIVE = True\n```\n\n----------------------------------------\n\nTITLE: Implementing Captioned Image Format in Wagtail\nDESCRIPTION: Example implementation showing how to add captions to images by extending the Format class. Uses the alt_text as a caption and demonstrates proper HTML formatting with Django's format_html utility.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/changing_rich_text_representation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.html import format_html\nfrom wagtail.images.formats import Format, register_image_format\n\n\nclass CaptionedImageFormat(Format):\n\n    def image_to_html(self, image, alt_text, extra_attributes=None):\n\n        default_html = super().image_to_html(image, alt_text, extra_attributes)\n\n        return format_html(\"{}<figcaption>{}</figcaption>\", default_html, alt_text)\n\n\nregister_image_format(\n    CaptionedImageFormat('captioned_fullwidth', 'Full width captioned', 'bodytext-image', 'width-750')\n)\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Accessibility Rules in Python\nDESCRIPTION: Implementation of different accessibility rules for development and production environments using custom AccessibilityItem configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/accessibility_considerations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.userbar import AccessibilityItem\n\n\nclass CustomAccessibilityItem(AccessibilityItem):\n    # Run all Axe rules with these tags in the development environment\n    axe_rules_in_dev = [\n        \"wcag2a\",\n        \"wcag2aa\",\n        \"wcag2aaa\",\n        \"wcag21a\",\n        \"wcag21aa\",\n        \"wcag22aa\",\n        \"best-practice\",\n    ]\n    # Except for the color-contrast-enhanced rule\n    axe_rules = {\n        \"color-contrast-enhanced\": {\"enabled\": False},\n    }\n\n    def get_axe_run_only(self, request):\n        if env.bool('DEBUG', default=False):\n            return self.axe_rules_in_dev\n        else:\n            # In production, run Wagtail's default accessibility rules for authored content only\n            return self.axe_run_only\n\n\n@hooks.register('construct_wagtail_userbar')\ndef replace_userbar_accessibility_item(request, items, page):\n    items[:] = [CustomAccessibilityItem() if isinstance(item, AccessibilityItem) else item for item in items]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Wagtail Deployment\nDESCRIPTION: Sets up environment variables in the .env.production file for connecting to Backblaze B2 and configuring Django settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAWS_STORAGE_BUCKET_NAME=\nAWS_S3_ENDPOINT_URL=https://\nAWS_S3_REGION_NAME=\nAWS_S3_ACCESS_KEY_ID=\nAWS_S3_SECRET_ACCESS_KEY=\nDJANGO_ALLOWED_HOSTS=\nDJANGO_CSRF_TRUSTED_ORIGINS=https://\nDJANGO_SETTINGS_MODULE=mysite.settings.production\n```\n\n----------------------------------------\n\nTITLE: Extended StructBlock with Nested StructBlock\nDESCRIPTION: Example of a StructBlock (EventBlock) that contains another StructBlock as a field (guest_speaker). This demonstrates how nested StructBlocks retain their template rendering capabilities.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass EventBlock(blocks.StructBlock):\n    heading = HeadingBlock()\n    description = blocks.TextBlock()\n    guest_speaker = blocks.StructBlock([\n        ('first_name', blocks.CharBlock()),\n        ('surname', blocks.CharBlock()),\n        ('photo', ImageChooserBlock()),\n    ], template='blocks/speaker.html')\n```\n\n----------------------------------------\n\nTITLE: Custom Rendition Model for AMP Images\nDESCRIPTION: Implements a custom rendition model to output AMP-compatible image tags when in AMP mode.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms.utils import flatatt\nfrom django.utils.safestring import mark_safe\n\nfrom wagtail.images.models import AbstractRendition\n\nclass CustomRendition(AbstractRendition):\n    def img_tag(self, extra_attributes):\n        attrs = self.attrs_dict.copy()\n        attrs.update(extra_attributes)\n\n        if amp_mode_active():\n            return mark_safe('<amp-img{}>'.format(flatatt(attrs)))\n        else:\n            return mark_safe('<img{}>'.format(flatatt(attrs)))\n```\n\n----------------------------------------\n\nTITLE: Displaying Promoted Search Results Template\nDESCRIPTION: Django template code for displaying promoted search results using the get_search_promotions template tag, including conditional rendering for both internal pages and external links.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/searchpromotions.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags wagtailsearchpromotions_tags %}\n\n...\n\n{% get_search_promotions search_query as search_promotions %}\n\n<ul>\n    {% for search_promotion in search_promotions %}\n        {% if search_promotion.page %}\n            <li>\n                <a href=\"{% pageurl search_promotion.page %}\">\n                    <h2>{{ search_promotion.page.title }}</h2>\n                    <p>{{ search_promotion.description }}</p>\n                </a>\n            </li>\n        {% else %}\n            <li>\n                <a href=\"{{ search_promotion.external_link_url }}\">\n                    <h2>{{ search_promotion.external_link_text }}</h2>\n                    <p>{{ search_promotion.description }}</p>\n                </a>\n            </li>\n        {% endif %}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting Required Fields in Wagtail CMS Model - Python\nDESCRIPTION: Demonstrates how to enforce required field validation even when saving drafts by setting the required_on_save attribute.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/7.0.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    subtitle = models.CharField(max_length=255)\n    subtitle.required_on_save = True\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveStructChildrenOperation for StructBlock Removal in Python\nDESCRIPTION: Class definition for RemoveStructChildrenOperation, which removes all StructBlock children of a given type. The block_path_str should point to the parent StructBlock containing the blocks to be removed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass RemoveStructChildrenOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Preview-Aware Template Caching\nDESCRIPTION: Implementation of preview-aware template fragment caching using the wagtailcache tag.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtail_cache %}\n\n{% wagtailcache 500 sidebar %}\n    <!-- sidebar -->\n{% endwagtailcache %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor Hash Link Conversion Plugin for Draftail Editor\nDESCRIPTION: JavaScript implementation of a plugin that automatically converts pasted anchor hash references into links in the Draftail editor. This advanced plugin intercepts the paste event and processes text matching a hash pattern.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst anchorifyPlugin = {\n  type: 'anchorify',\n\n  handlePastedText(text, html, editorState, { setEditorState }) {\n    let nextState = editorState;\n\n    if (text.match(/^#[a-zA-Z0-9_-]+$/ig)) {\n      const selection = nextState.getSelection();\n      let content = nextState.getCurrentContent();\n      content = content.createEntity(\"LINK\", \"MUTABLE\", { url: text });\n      const entityKey = content.getLastCreatedEntityKey();\n\n      if (selection.isCollapsed()) {\n        content = window.DraftJS.Modifier.insertText(\n          content,\n          selection,\n          text,\n          undefined,\n          entityKey,\n        )\n        nextState = window.DraftJS.EditorState.push(\n          nextState,\n          content,\n          \"insert-fragment\",\n        );\n      } else {\n        nextState = window.DraftJS.RichUtils.toggleLink(nextState, selection, entityKey);\n      }\n\n      setEditorState(nextState);\n      return \"handled\";\n    }\n\n    return \"not-handled\";\n  },\n};\n\nwindow.draftail.registerPlugin(anchorifyPlugin, 'plugins');\n```\n\n----------------------------------------\n\nTITLE: Customizing PagesAPIViewSet with Custom Renderer\nDESCRIPTION: Subclass PagesAPIViewSet to customize its functionality, such as setting a specific renderer class.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.renderers import JSONRenderer\n\n# ...\n\nclass CustomPagesAPIViewSet(PagesAPIViewSet):\n    renderer_classes = [JSONRenderer]\n    name = \"pages\"\n\napi_router.register_endpoint(\"pages\", CustomPagesAPIViewSet)\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Chooser Query in Wagtail Admin\nDESCRIPTION: Example showing how to customize the page chooser queryset to show only pages owned by current user using construct_page_chooser_queryset hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('construct_page_chooser_queryset')\ndef show_my_pages_only(pages, request):\n    # Only show own pages\n    pages = pages.filter(owner=request.user)\n\n    return pages\n```\n\n----------------------------------------\n\nTITLE: PreviewableMixin Methods and Properties in Wagtail CMS\nDESCRIPTION: Documentation for the methods and properties of the PreviewableMixin in Wagtail, which allows non-page models to be previewed. Pages already include this mixin.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass PreviewableMixin:\n    # Methods and properties\n    \n    preview_modes\n    \n    default_preview_mode\n    \n    preview_sizes\n    \n    default_preview_size\n    \n    is_previewable\n    \n    get_preview_context\n    \n    get_preview_template\n    \n    serve_preview\n```\n\n----------------------------------------\n\nTITLE: Updating URL Registration for Multiple Calendar Views in Wagtail\nDESCRIPTION: Modifies the URL registration to include both the yearly and monthly calendar views in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom wagtail import hooks\n\nfrom .views import index, month\n\n\n@hooks.register('register_admin_urls')\ndef register_calendar_url():\n    return [\n        path('calendar/', index, name='calendar'),\n        path('calendar/month/', month, name='calendar-month'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using include_block Tag in Jinja2 Template\nDESCRIPTION: These snippets show how to use the include_block tag to output the HTML representation of StreamField content in Jinja2 templates. It includes examples with and without context.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_10\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% include_block page.body %}\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% include_block page.body with context %} {# The same as the previous #}\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% include_block page.body without context %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Focal Point-Dependent Blur Filter in Python for Wagtail\nDESCRIPTION: This Python code snippet demonstrates how to create a custom blur filter operation that depends on the image's focal point. It uses the vary_fields property to ensure new renditions are created when the focal point changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_image_filters.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BlurOutsideFocusPointOperation(FilterOperation):\n    vary_fields = (\n        \"focal_point_width\",\n        \"focal_point_height\",\n        \"focal_point_x\",\n        \"focal_point_y\",\n    )\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Calendar View in Python for Wagtail Admin\nDESCRIPTION: Creates a Django view that displays a calendar for the current year using Python's calendar module. This view is intended to be integrated into the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport calendar\n\nfrom django.http import HttpResponse\nfrom django.utils import timezone\n\n\ndef index(request):\n    current_year = timezone.now().year\n    calendar_html = calendar.HTMLCalendar().formatyear(current_year)\n\n    return HttpResponse(calendar_html)\n```\n\n----------------------------------------\n\nTITLE: Defining Member Model and FilterSet\nDESCRIPTION: Example model definition for a Member snippet with shirt size choices and a corresponding WagtailFilterSet class for filtering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/customizing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\nfrom wagtail.admin.filters import WagtailFilterSet\n\n\nclass Member(models.Model):\n    class ShirtSize(models.TextChoices):\n        SMALL = \"S\", \"Small\"\n        MEDIUM = \"M\", \"Medium\"\n        LARGE = \"L\", \"Large\"\n        EXTRA_LARGE = \"XL\", \"Extra Large\"\n\n    name = models.CharField(max_length=255)\n    shirt_size = models.CharField(max_length=5, choices=ShirtSize.choices, default=ShirtSize.MEDIUM)\n\n    def get_shirt_size_display(self):\n        return self.ShirtSize(self.shirt_size).label\n\n    get_shirt_size_display.admin_order_field = \"shirt_size\"\n    get_shirt_size_display.short_description = \"Size description\"\n\n\nclass MemberFilterSet(WagtailFilterSet):\n    class Meta:\n        model = Member\n        fields = [\"shirt_size\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Password Reset Email Content in Django Template\nDESCRIPTION: Template that constructs a password reset email with a secure reset link. Includes conditional logic for base URL configuration and optional username display if username field differs from email.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/account/password_reset/email.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n wagtailadmin_tags %}{% base_url_setting as base_url %}\n{% trans \"Please follow the link below to reset your password:\" %}\n{% if base_url %}{{ base_url }}{% else %}{{ protocol }}://{{ domain }}{% endif %}{% url 'wagtailadmin_password_reset_confirm' uidb64=uid token=token %}\n\n{% if user.USERNAME_FIELD != \"email\" %}\n{% trans \"Your username (in case you've forgotten):\" %} {{ user.get_username }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Responsive Images with Srcset\nDESCRIPTION: Examples of generating responsive images using srcset and picture tags\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailimages_tags %}\n...\n\n{% srcset_image page.photo width-{400,800} sizes=\"(max-width: 600px) 400px, 80vw\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% picture page.photo format-{avif,webp,jpeg} width-{400,800} sizes=\"80vw\" %}\n```\n\n----------------------------------------\n\nTITLE: Testing Page Creation Rules in Wagtail - Python\nDESCRIPTION: Examples showing how to test page creation rules and parent-child relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_can_create_under_home_page(self):\n    # You can create a ContentPage under a HomePage\n    self.assertCanCreateAt(HomePage, ContentPage)\n\ndef test_cant_create_under_event_page(self):\n    # You can not create a ContentPage under an EventPage\n    self.assertCanNotCreateAt(EventPage, ContentPage)\n```\n\n----------------------------------------\n\nTITLE: Blog Page Template with Image Gallery Rendering\nDESCRIPTION: HTML template for displaying blog page content, including dynamic image gallery with captions\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_20\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags wagtailimages_tags %}\n\n{% block content %}\n    <h1>{{ page.title }}</h1>\n    <p class=\"meta\">{{ page.date }}</p>\n\n    <div class=\"intro\">{{ page.intro }}</div>\n\n    {{ page.body|richtext }}\n\n    {% for item in page.gallery_images.all %}\n        <div style=\"float: inline-start; margin: 10px\">\n            {% image item.image fill-320x240 %}\n            <p>{{ item.caption }}</p>\n        </div>\n    {% endfor %}\n\n    <p><a href=\"{{ page.get_parent.url }}\">Return to blog</a></p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining a translatable snippet model in Wagtail\nDESCRIPTION: This Python code demonstrates how to create a translatable snippet in Wagtail by inheriting from TranslatableMixin. It defines an Advert model with a translatable name field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# myapp/models.py\n\nfrom django.db import models\n\nfrom wagtail.models import TranslatableMixin\nfrom wagtail.snippets.models import register_snippet\n\n\n@register_snippet\nclass Advert(TranslatableMixin, models.Model):\n    name = models.CharField(max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Customizing Wagtail Search Template in Django\nDESCRIPTION: Custom search template implementation for Wagtail CMS that includes search form, results display, pagination, and search query information. Features numbered results listing and enhanced pagination controls.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/add_search.md#2025-04-21_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n{% load static wagtailcore_tags %}\n\n{% block body_class %}template-searchresults{% endblock %}\n\n{% block title %}Search{% endblock %}\n\n{% block content %}\n<h1>Search</h1>\n\n<form action=\"{% url 'search' %}\" method=\"get\">\n    <input type=\"text\" name=\"query\"{% if search_query %} value=\"{{ search_query }}\"{% endif %}>\n    <input type=\"submit\" value=\"Search\" class=\"button\">\n</form>\n\n{% if search_results %}\n\n{# Add this paragraph to display the details of results found: #}\n<p>You searched{% if search_query %} for \"{{ search_query }}\"{% endif %}, {{ search_results.paginator.count }} result{{ search_results.paginator.count|pluralize }} found.</p>\n\n{# Replace the <ul> HTML element with the <ol> html element: #}\n<ol>\n    {% for result in search_results %}\n    <li>\n        <h4><a href=\"{% pageurl result %}\">{{ result }}</a></h4>\n        {% if result.search_description %}\n        {{ result.search_description }}\n        {% endif %}\n    </li>\n    {% endfor %}\n</ol>\n\n{# Improve pagination by adding: #}\n{% if search_results.paginator.num_pages > 1 %}\n    <p>Page {{ search_results.number }} of {{ search_results.paginator.num_pages }}, showing {{ search_results|length }} result{{ search_results|pluralize }} out of {{ search_results.paginator.count }}</p>\n{% endif %}\n\n{% if search_results.has_previous %}\n<a href=\"{% url 'search' %}?query={{ search_query|urlencode }}&amp;page={{ search_results.previous_page_number }}\">Previous</a>\n{% endif %}\n\n{% if search_results.has_next %}\n<a href=\"{% url 'search' %}?query={{ search_query|urlencode }}&amp;page={{ search_results.next_page_number }}\">Next</a>\n{% endif %}\n\n{% elif search_query %}\nNo results found\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating GroupPagePermission with Permission Model in Python\nDESCRIPTION: Example of creating a GroupPagePermission object using the Permission model instead of the deprecated permission_type string.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import Permission\nfrom wagtail.models import GroupPagePermission\n\npermission = GroupPagePermission(\n    group=group,\n    page=page,\n    permission=Permission.objects.get(content_type__app_label=\"wagtailcore\", codename=\"change_page\"),\n)\npermission.save()\n```\n\n----------------------------------------\n\nTITLE: Basic Password Required Template for Wagtail\nDESCRIPTION: Example HTML template for a password required page in Wagtail. This template includes a form for submitting the password with appropriate CSRF protection and error handling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n    <head>\n        <title>Password required</title>\n    </head>\n    <body>\n        <h1>Password required</h1>\n        <p>\n            You need a password to access this page.\n            {% if user.is_authenticated %}To proceed, please log in with an account that has access.{% endif %}\n        </p>\n        <form action=\"{{ action_url }}\" method=\"POST\">\n            {% csrf_token %}\n\n            {{ form.non_field_errors }}\n\n            <div>\n                {{ form.password.errors }}\n                {{ form.password.label_tag }}\n                {{ form.password }}\n            </div>\n\n            {% for field in form.hidden_fields %}\n                {{ field }}\n            {% endfor %}\n            <input type=\"submit\" value=\"Continue\" />\n        </form>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Related Fields Search in Author Model\nDESCRIPTION: Shows how to index an author's books to enable searching authors by their book titles.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/indexing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\n\nclass Author(models.Model, index.Indexed):\n    ...\n\n    search_fields = [\n        index.SearchField('name'),\n        index.FilterField('date_of_birth'),\n\n        index.RelatedFields('books', [\n            index.SearchField('title'),\n        ]),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation for Wagtail Admin Form Pages in Python\nDESCRIPTION: This code snippet shows how to create a custom WagtailAdminFormPageForm subclass to add custom validation for Wagtail admin form pages. It includes a FormPage class that uses this custom form for validation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page\nfrom wagtail.contrib.forms.models import FormMixin, WagtailAdminFormPageForm\n\n\nclass CustomWagtailAdminFormPageForm(WagtailAdminFormPageForm):\n    def clean(self):\n        cleaned_data = super().clean()\n        # Insert custom validation here, see `WagtailAdminFormPageForm.clean` for an example\n        return cleaned_data\n\n\nclass FormPage(AbstractForm):\n    base_form_class = CustomWagtailAdminFormPageForm\n```\n\n----------------------------------------\n\nTITLE: AWS OpenSearch Configuration\nDESCRIPTION: Configuration for Amazon OpenSearch Service with IAM authentication using requests-aws4auth package.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom elasticsearch import RequestsHttpConnection\nfrom requests_aws4auth import AWS4Auth\n\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.search.backends.elasticsearch7',\n        'INDEX': 'wagtail',\n        'TIMEOUT': 5,\n        'HOSTS': [{\n            'host': 'YOURCLUSTER.REGION.es.amazonaws.com',\n            'port': 443,\n            'use_ssl': True,\n            'verify_certs': True,\n            'http_auth': AWS4Auth('ACCESS_KEY', 'SECRET_KEY', 'REGION', 'es'),\n        }],\n        'OPTIONS': {\n            'connection_class': RequestsHttpConnection,\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Document Title Pre-filling on Upload in Wagtail\nDESCRIPTION: This JavaScript code prevents the automatic pre-filling of document titles during upload by calling event.preventDefault() on the 'wagtail:documents-upload' event.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/title_generation_on_upload.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// stop_title_prefill.js\nwindow.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('wagtail:documents-upload', function (event) {\n        // Will stop title pre-fill on single file uploads\n        // Will set the multiple upload title to the filename (with extension)\n        event.preventDefault();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using SlugInput Widget for Automatic Slug Generation (Python)\nDESCRIPTION: Example of using the SlugInput widget to automatically convert values into suitable slugs in the browser, respecting the WAGTAIL_ALLOW_UNICODE_SLUGS configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.widgets.slug import SlugInput\n# ... other imports\n\nclass MyPage(Page):\n    promote_panels = [\n        FieldPanel(\"slug\", widget=SlugInput),\n        # ... other panels\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using srcset_image Tag for Responsive Images\nDESCRIPTION: Shows how to generate multiple image renditions for responsive images using srcset\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% srcset_image page.photo width-{200,400} as tmp_photo %}\n\n<img\n    src=\"{{ tmp_photo.renditions.0.url }}\"\n    width=\"{{ tmp_photo.renditions.0.width }}\"\n    height=\"{{ tmp_photo.renditions.0.height }}\"\n    alt=\"{{ tmp_photo.renditions.0.alt }}\"\n    srcset=\"{{ tmp_photo.renditions.0.url }} 200w, {{ tmp_photo.renditions.1.url }} 400w\"\n    sizes=\"100vw\"\n    class=\"my-custom-class\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Page Translations in Wagtail API v2\nDESCRIPTION: This snippet shows how to retrieve translations of a specific page using the '?translation_of=' parameter in the Wagtail API v2. It returns a JSON response containing translated versions of the specified page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v2/pages/?translation_of=10\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 2\n    },\n    \"items\": [\n        {\n            \"id\": 11,\n            \"meta\": {\n                \"type\": \"standard.StandardPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/11/\",\n                \"html_url\": \"http://www.example.com/gb-page/\",\n                \"slug\": \"gb-page\",\n                \"first_published_at\": \"2016-08-30T16:52:00Z\",\n                \"locale\": \"en-gb\"\n            },\n            \"title\": \"British page\"\n        },\n        {\n            \"id\": 12,\n            \"meta\": {\n                \"type\": \"standard.StandardPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/12/\",\n                \"html_url\": \"http://www.example.com/fr-page/\",\n                \"slug\": \"fr-page\",\n                \"first_published_at\": \"2016-08-30T16:52:00Z\",\n                \"locale\": \"fr\"\n            },\n            \"title\": \"French page\"\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenameStructChildrenOperation for StructBlock Renaming in Python\nDESCRIPTION: Class definition for RenameStructChildrenOperation, which renames all StructBlock children of a given type. The block_path_str should point to the parent StructBlock containing the blocks to be renamed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass RenameStructChildrenOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Implementing select_related in Wagtail Settings Models (Python)\nDESCRIPTION: Example showing how to use select_related attribute on a settings model to optimize queries when working with related Page objects. This approach reduces multiple database queries to a single one when accessing foreign key relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@register_setting\nclass GenericImportantPages(BaseGenericSetting):\n\n    # Fetch these pages when looking up GenericImportantPages for or a site\n    select_related = [\"donate_page\", \"sign_up_page\"]\n\n    donate_page = models.ForeignKey(\n        'wagtailcore.Page', null=True, on_delete=models.SET_NULL, related_name='+'\n    )\n    sign_up_page = models.ForeignKey(\n        'wagtailcore.Page', null=True, on_delete=models.SET_NULL, related_name='+'\n    )\n\n    panels = [\n        FieldPanel('donate_page'),\n        FieldPanel('sign_up_page'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar View to Use Wagtail Admin Template\nDESCRIPTION: Modifies the calendar view to render the calendar HTML within a Wagtail admin template, providing proper styling and integration with the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport calendar\nfrom django.shortcuts import render\nfrom django.utils import timezone\n\ndef index(request):\n    current_year = timezone.now().year\n    calendar_html = calendar.HTMLCalendar().formatyear(current_year)\n\n    return render(request, 'wagtailcalendar/index.html', {\n        'current_year': current_year,\n        'calendar_html': calendar_html,\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for Wagtail in Django settings.py\nDESCRIPTION: This snippet shows the required middleware configuration for Wagtail in a Django project's settings.py file. It includes Django's default middleware and Wagtail's RedirectMiddleware.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/add_to_django_project.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n  'django.contrib.sessions.middleware.SessionMiddleware',\n  'django.middleware.common.CommonMiddleware',\n  'django.middleware.csrf.CsrfViewMiddleware',\n  'django.contrib.auth.middleware.AuthenticationMiddleware',\n  'django.contrib.messages.middleware.MessageMiddleware',\n  'django.middleware.clickjacking.XFrameOptionsMiddleware',\n  'django.middleware.security.SecurityMiddleware',\n\n  'wagtail.contrib.redirects.middleware.RedirectMiddleware',\n]\n```\n\n----------------------------------------\n\nTITLE: ListBlock Implementation in StreamField\nDESCRIPTION: Example of implementing a repeating block type for image galleries using ListBlock.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    ('gallery', blocks.ListBlock(ImageBlock())),\n    ('heading', blocks.CharBlock(form_classname=\"title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageBlock()),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Field Related Name in Wagtail\nDESCRIPTION: This snippet demonstrates how to change the related_name for form fields by overriding the get_form_fields method in a custom FormPage class. It also shows how to set up the content panels for the form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom modelcluster.fields import ParentalKey\nfrom wagtail.admin.panels import (\n    FieldPanel, FieldRowPanel,\n    InlinePanel, MultiFieldPanel\n)\nfrom wagtail.fields import RichTextField\nfrom wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField\n\n\nclass FormField(AbstractFormField):\n    page = ParentalKey('FormPage', on_delete=models.CASCADE, related_name='custom_form_fields')\n\n\nclass FormPage(AbstractEmailForm):\n    intro = RichTextField(blank=True)\n    thank_you_text = RichTextField(blank=True)\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FieldPanel('intro'),\n        InlinePanel('custom_form_fields', label=\"Form fields\"),\n        FieldPanel('thank_you_text'),\n        MultiFieldPanel([\n            FieldRowPanel([\n                FieldPanel('from_address', classname=\"col6\"),\n                FieldPanel('to_address', classname=\"col6\"),\n            ]),\n            FieldPanel('subject'),\n        ], \"Email\"),\n    ]\n\n    def get_form_fields(self):\n        return self.custom_form_fields.all()\n```\n\n----------------------------------------\n\nTITLE: Defining ViewSet in Wagtail Admin\nDESCRIPTION: This snippet documents the base ViewSet class in Wagtail, including its key attributes like name, url_prefix, and menu-related properties. It mentions methods such as on_register and get_urlpatterns which are pivotal for setting up routes within Wagtail's admin interface. Dependencies include a basic understanding of Wagtail admin configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/viewsets.md#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: wagtail.admin.viewsets.base.ViewSet\n\n   .. autoattribute:: name\n   .. autoattribute:: url_prefix\n   .. autoattribute:: url_namespace\n   .. automethod:: on_register\n   .. automethod:: get_urlpatterns\n   .. automethod:: get_url_name\n   .. autoattribute:: icon\n   .. autoattribute:: menu_icon\n\n      Defaults to :attr:`icon`.\n\n   .. autoattribute:: menu_label\n   .. autoattribute:: menu_name\n   .. autoattribute:: menu_order\n   .. autoattribute:: menu_url\n\n      Defaults to the first URL returned by :meth:`get_urlpatterns`.\n\n   .. autoattribute:: menu_item_class\n   .. autoattribute:: menu_hook\n   .. autoattribute:: add_to_admin_menu\n   .. autoattribute:: add_to_settings_menu\n   .. automethod:: get_menu_item\n```\n\n----------------------------------------\n\nTITLE: Registering Admin Search Area Using Wagtail Hooks in Python\nDESCRIPTION: This snippet registers a search area in Wagtail's admin using the register_admin_search_area hook, setting attributes like label, URL, and order for the search option. Requires Django and Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import reverse\nfrom wagtail import hooks\nfrom wagtail.admin.search import SearchArea\n\n@hooks.register('register_admin_search_area')\ndef register_frank_search_area():\n    return SearchArea('Frank', reverse('frank'), icon_name='folder-inverse', order=10000)\n```\n\n----------------------------------------\n\nTITLE: Alternative Event Block Template with Explicit HTML\nDESCRIPTION: A more readable approach to the EventBlock template that explicitly includes HTML tags rather than relying on the HeadingBlock's template rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n<div class=\"event {% if value.heading == 'Party!' %}lots-of-balloons{% endif %}\">\n    <h1>{{ value.heading }}</h1>\n    - {% include_block value.description %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Page Type Relationships in Wagtail - Python\nDESCRIPTION: Examples showing how to test allowed parent and subpage type relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_content_page_parent_pages(self):\n    # A ContentPage can only be created under a HomePage\n    # or another ContentPage\n    self.assertAllowedParentPageTypes(\n        ContentPage, {HomePage, ContentPage})\n\n    # An EventPage can only be created under an EventIndex\n    self.assertAllowedParentPageTypes(\n        EventPage, {EventIndex})\n\ndef test_content_page_subpages(self):\n    # A ContentPage can only have other ContentPage children\n    self.assertAllowedSubpageTypes(\n        ContentPage, {ContentPage})\n\n    # A HomePage can have ContentPage and EventIndex children\n    self.assertAllowedSubpageTypes(\n        HomePage, {ContentPage, EventIndex})\n```\n\n----------------------------------------\n\nTITLE: Using wagtailuserbar() Function in Jinja2 Template\nDESCRIPTION: This snippet demonstrates how to use the wagtailuserbar() function to output the Wagtail contextual flyout menu in a Jinja2 template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_9\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ wagtailuserbar() }}\n```\n\n----------------------------------------\n\nTITLE: Implementing WordCount Controller with ES6 Modules\nDESCRIPTION: Shows how to implement a Stimulus controller using ES6 modules and npm dependencies.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus';\n\nclass WordCountController extends Controller {\n    // ... the same as above\n}\n\nwindow.wagtail.app.register('word-count', WordCountController);\n```\n\n----------------------------------------\n\nTITLE: Defining a StructBlock with Nested Blocks\nDESCRIPTION: Example of creating an EventBlock as a StructBlock that contains a HeadingBlock, TextBlock, and other fields. The StructBlock has its own template for rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass EventBlock(blocks.StructBlock):\n    heading = HeadingBlock()\n    description = blocks.TextBlock()\n    # ...\n\n    class Meta:\n        template = 'blocks/event.html'\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Email Recipients to AbstractEmailForm (Python)\nDESCRIPTION: The AbstractEmailForm model in wagtailforms now supports sending form submissions to multiple email recipients.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom wagtailforms.models import AbstractEmailForm\n\nclass MyEmailForm(AbstractEmailForm):\n    # Configure multiple recipients\n    # Exact implementation details not provided in release notes\n```\n\n----------------------------------------\n\nTITLE: Indexing Related Fields in Elasticsearch with Wagtail\nDESCRIPTION: Example of using the new indexed.RelatedFields declaration to index and search fields from related objects in Elasticsearch. This shows how to define searchable fields on related models and query across these relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Book(models.Model, index.Indexed):\n    ...\n\n    search_fields = [\n        index.SearchField('title'),\n        index.FilterField('published_date'),\n\n        index.RelatedFields('author', [\n            index.SearchField('name'),\n            index.FilterField('date_of_birth'),\n        ]),\n    ]\n\n# Search books where their author was born after 1950\n# Both the book title and the author's name will be searched\n>>> Book.objects.filter(author__date_of_birth__gt=date(1950, 1, 1)).search(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Updating WagtailPageTests to WagtailPageTestCase in Python\nDESCRIPTION: Demonstrates how to update test cases from using WagtailPageTests to the recommended WagtailPageTestCase. It includes setting up the test case and logging in the user if needed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# class MyPageTests(WagtailPageTests): # old\nclass MyPageTests(WagtailPageTestCase): # new\n    def setUp(self):\n        # WagtailPageTestCase will not log in during setUp - so add if needed\n        super().setUp()\n        self.login()\n\n    def test_can_create_a_page(self):\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring FormPage to Use Custom Form Builder in Wagtail\nDESCRIPTION: This snippet demonstrates how to set up a FormPage model to use a custom form builder by assigning the form_builder class attribute. This is essential when implementing custom form field types or widget customizations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.forms.models import AbstractEmailForm\n\n\nclass FormPage(AbstractEmailForm):\n    # intro, thank_you_text, edit_handlers, etc...\n\n    # use custom form builder defined above\n    form_builder = CustomFormBuilder\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Bulk Action Hook in Python\nDESCRIPTION: This snippet shows how to use the before_bulk_action hook in Wagtail. It demonstrates returning a custom HTTP response before a bulk delete action is executed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register(\"before_bulk_action\")\ndef hook_func(request, action_type, objects, action_class_instance):\n  if action_type == 'delete':\n    return HttpResponse(f\"{len(objects)} objects would be deleted\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Wagtail Form Page\nDESCRIPTION: Defines a basic HTML template for rendering a Wagtail form page, including the form itself and page content. Uses Django template tags and Wagtail-specific tags.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n<html>\n    <head>\n        <title>{{ page.title }}</title>\n    </head>\n    <body>\n        <h1>{{ page.title }}</h1>\n        {{ page.intro|richtext }}\n        <form action=\"{% pageurl page %}\" method=\"POST\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <input type=\"submit\">\n        </form>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin Page Ordering in Wagtail\nDESCRIPTION: Implementation of the get_admin_default_ordering method to define custom sorting of child pages in the admin interface. This example sorts pages by title when there are fewer than 20 child pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass BreadsIndexPage(Page):\n    def get_admin_default_ordering(self):\n        if Page.objects.child_of(self).count() < 20:\n            return 'title'\n        return self.admin_default_ordering\n```\n\n----------------------------------------\n\nTITLE: Configuring a StreamBlock Subclass with Custom Form Class in Python\nDESCRIPTION: Demonstrates how to add a custom form_classname to a StreamBlock subclass using the Meta class. This applies a CSS class to the block in the editing interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass EventPromotionsBlock(blocks.StreamBlock):\n    hashtag = blocks.CharBlock()\n    post_date = blocks.DateBlock()\n\n    class Meta:\n        form_classname = 'event-promotions'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Document Form in Wagtail Settings (Python)\nDESCRIPTION: This snippet shows how to set the WAGTAILDOCS_DOCUMENT_FORM_BASE setting to use a custom document form in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/custom_document_upload_form.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nWAGTAILDOCS_DOCUMENT_FORM_BASE = 'myapp.forms.CustomDocumentForm'\n```\n\n----------------------------------------\n\nTITLE: Configuring URL patterns for internationalization in Python\nDESCRIPTION: This snippet demonstrates how to set up URL patterns for internationalization using i18n_patterns. It includes the search view and Wagtail URLs, with the prefix_default_language set to False.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += i18n_patterns(\n    path('search/', search_views.search, name='search'),\n    path(\"\", include(wagtail_urls)),\n    prefix_default_language=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Report URL with Results-Only View in Python\nDESCRIPTION: Shows how to register a custom report URL with an additional results-only view for AJAX-based filtering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register(\"register_admin_urls\")\ndef register_unpublished_changes_report_url():\n    return [\n        path(\"reports/unpublished-changes/\", UnpublishedChangesReportView.as_view(), name=\"unpublished_changes_report\"),\n        # Add a results-only view to add support for AJAX-based filtering\n        path(\"reports/unpublished-changes/results/\", UnpublishedChangesReportView.as_view(results_only=True), name=\"unpublished_changes_report_results\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Integrating Header Template in Base HTML for Wagtail\nDESCRIPTION: This snippet shows how to include the header template in the base HTML template of a Wagtail project. It adds the header just after the Wagtail user bar and before the main content block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/set_up_site_menu.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"{% block body_class %}{% endblock %}\">\n    {% wagtailuserbar %}\n\n    {# Add your header template to your base template: #}\n    {% include \"includes/header.html\" %}\n\n    {% block content %}{% endblock %}\n\n    {% include \"includes/footer.html\" %}\n\n    {# Global javascript #}\n\n    <script type=\"text/javascript\" src=\"{% static 'js/mysite.js' %}\"></script>\n\n    {% block extra_js %}\n    {# Override this in templates to add extra javascript #}\n    {% endblock %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Custom TaskState Implementation\nDESCRIPTION: Demonstrates implementation of a custom TaskState with its associated Task model\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# <project>/models.py\n\nfrom django.conf import settings\nfrom django.db import models\nfrom wagtail.models import Task, TaskState\n\n\nclass UserApprovalTaskState(TaskState):\n    pass\n\n\nclass UserApprovalTask(Task):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=False)\n\n    admin_form_fields = Task.admin_form_fields + ['user']\n\n    task_state_class = UserApprovalTaskState\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Login URL for Wagtail Frontend\nDESCRIPTION: Setting to specify a custom login URL for Wagtail's frontend authentication, useful when integrating with existing authentication systems or Django sites with established login views.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_FRONTEND_LOGIN_URL = '/accounts/login/'\n```\n\n----------------------------------------\n\nTITLE: View with Component Media Handling\nDESCRIPTION: Complete view example showing how to handle component media dependencies\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import Media\nfrom django.shortcuts import render\n\ndef welcome_page(request):\n    panels = [\n        WelcomePanel(),\n    ]\n\n    media = Media()\n    for panel in panels:\n        media += panel.media\n\n    render(request, 'my_app/welcome.html', {\n        'panels': panels,\n        'media': media,\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining BlogPage Model with Tags in Python\nDESCRIPTION: This snippet shows how to modify the BlogPage model to include tagging functionality using ClusterTaggableManager. It adds a tags field and updates the content panels to include tag input.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    date = models.DateField(\"Post date\")\n    intro = models.CharField(max_length=250)\n    body = RichTextField(blank=True)\n    authors = ParentalManyToManyField('blog.Author', blank=True)\n\n    # Add this:\n    tags = ClusterTaggableManager(through=BlogPageTag, blank=True)\n\n    # ... Keep the main_image method and search_fields definition. Then modify the content_panels:\n    content_panels = Page.content_panels + [\n        MultiFieldPanel([\n            \"date\",\n            FieldPanel(\"authors\", widget=forms.CheckboxSelectMultiple),\n\n            # Add this:\n            \"tags\",\n        ], heading=\"Blog information\"),\n            \"intro\", \"body\", \"gallery_images\"\n        ]\n```\n\n----------------------------------------\n\nTITLE: StreamField Model Definition Example\nDESCRIPTION: Example Python code showing a basic StreamField definition in a Wagtail page model with a nested StreamBlock structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    content = StreamField([\n        (\"stream1\", blocks.StreamBlock([\n            (\"field1\", blocks.CharBlock())\n        ])),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Document Content Types in Wagtail\nDESCRIPTION: Configures permitted document content types using WAGTAILDOCS_CONTENT_TYPES setting. Specifies mappings between file extensions and their corresponding MIME types.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/storing_and_serving.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_CONTENT_TYPES = {\n    'pdf': 'application/pdf',\n    'txt': 'text/plain',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Block Operation in Python\nDESCRIPTION: Example of creating a custom block operation to truncate CharBlock strings by extending BaseBlockOperation class. Implements required apply() method for transformation and operation_name_fragment property for migration naming.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.blocks.migrations.operations import BaseBlockOperation\n\nclass MyBlockOperation(BaseBlockOperation):\n    def __init__(self, length):\n        super().__init__()\n        # we will need to keep the length as an attribute of the operation\n        self.length = length\n\n    def apply(self, block_value):\n        # block value is the string value of the CharBlock\n        new_block_value = block_value[:self.length]\n        return new_block_value\n\n\n    @property\n    def operation_name_fragment(self):\n        return \"truncate_{}\".format(self.length)\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Model Events in Wagtail Signals\nDESCRIPTION: Example demonstrating how to connect signal handlers to specific page model types rather than all pages. Shows connecting to the page_published signal for a specific BlogPostPage model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/signals.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.signals import page_published\nfrom mysite.models import BlogPostPage\n\n# Do something clever for each model type\ndef receiver(sender, **kwargs):\n    # Do something with blog posts\n    pass\n\n# Register listeners for each page model class\npage_published.connect(receiver, sender=BlogPostPage)\n```\n\n----------------------------------------\n\nTITLE: Implementing map_list_block_value Function for ListBlock Value Mapping in Python\nDESCRIPTION: Function that maps each child block in a ListBlock value. It takes the ListBlock value, definition, and block path as arguments.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef map_list_block_value(list_block_value, block_def, block_path, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: StreamBlock Template Rendering - HTML\nDESCRIPTION: Shows how to render StreamBlock content in a template with conditional block type handling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<article>\n    {% for block in page.body %}\n        {% if block.block_type == 'carousel' %}\n            <ul class=\"carousel\">\n                {% for slide in block.value %}\n                    {% if slide.block_type == 'image' %}\n                        <li class=\"image\">{% image slide.value width-200 %}</li>\n                    {% else %}\n                        <li class=\"video\">{% include_block slide %}</li>\n                    {% endif %}\n                {% endfor %}\n            </ul>\n        {% else %}\n            (rendering for other block types)\n        {% endif %}\n    {% endfor %}\n</article>\n```\n\n----------------------------------------\n\nTITLE: Updating Page Panels with TitleFieldPanel in Python\nDESCRIPTION: Example of how to update content panels for a Wagtail page using the new TitleFieldPanel in version 5.0.2. This snippet shows how to maintain title/slug synchronization with the new panel type.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.0.2.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel, TitleFieldPanel\n\n    # ...\n    content_panels = [\n        MultiFieldPanel([\n            TitleFieldPanel(\"title\"),\n            FieldPanel(\"subtitle\"),\n        ]),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Frontend Cache Backend with v4 API in Wagtail\nDESCRIPTION: Sets up the Cloudflare frontend cache backend using Cloudflare's v4 API. The configuration requires email, API token, and the new ZONEID parameter which is mandatory for the v4 API.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.8.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n        'cloudflare': {\n            'BACKEND': 'wagtail.contrib.wagtailfrontendcache.backends.CloudflareBackend',\n            'EMAIL': 'your-cloudflare-email-address@example.com',\n            'TOKEN': 'your cloudflare api token',\n            'ZONEID': 'your cloudflare domain zone id',\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Pages by Locale in Wagtail API v2\nDESCRIPTION: This snippet demonstrates how to filter pages by locale using the '?locale=' parameter in the Wagtail API v2. It returns a JSON response containing pages in the specified locale.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v2/pages/?locale=en-us\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 5\n    },\n    \"items\": [\n        {\n            \"id\": 10,\n            \"meta\": {\n                \"type\": \"standard.StandardPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/10/\",\n                \"html_url\": \"http://www.example.com/usa-page/\",\n                \"slug\": \"usa-page\",\n                \"first_published_at\": \"2016-08-30T16:52:00Z\",\n                \"locale\": \"en-us\"\n            },\n            \"title\": \"American page\"\n        },\n\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript for Removing URL Unsafe Characters from Image Titles in Wagtail\nDESCRIPTION: This example shows how to register a JavaScript file that removes special characters from automatically generated image titles in Wagtail. It uses the 'insert_global_admin_js' hook to include the JavaScript across the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/title_generation_on_upload.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.templatetags.static import static\nfrom django.utils.html import format_html\n\nfrom wagtail import hooks\n\n@hooks.register(\"insert_global_admin_js\")\ndef get_global_admin_js():\n    script_url = static('js/wagtail_admin.js')\n    return format_html('<script src=\"{}\"></script>', script_url)\n```\n\n----------------------------------------\n\nTITLE: Prefetching Renditions for Non-Image Models\nDESCRIPTION: Examples of prefetching image renditions when working with models that have image relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_events():\n    return EventPage.objects.live().select_related(\"listing_image\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_events():\n    return EventPage.objects.live().select_related(\"listing_image\").prefetch_related(\"listing_image__renditions\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Prefetch\nfrom wagtail.images import get_image_model\n\n\ndef get_events():\n    Image = get_image_model()\n    filters = [\"fill-300x186\", \"fill-600x400\", \"fill-940x680\"]\n\n    # `Prefetch` is used to fetch only the required renditions\n    prefetch_images_and_renditions = Prefetch(\n        \"listing_image\",\n        queryset=Image.objects.prefetch_renditions(*filters)\n    )\n    return EventPage.objects.live().prefetch_related(prefetch_images_and_renditions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Avatar in Wagtail Admin\nDESCRIPTION: Python code hook for providing a custom user avatar from a related Profile model instead of the default UserProfile model or Gravatar.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('get_avatar_url')\ndef get_profile_avatar(user, size):\n    return user.profile.avatar\n```\n\n----------------------------------------\n\nTITLE: InlinePanel Event Handlers - JavaScript\nDESCRIPTION: JavaScript code demonstrating how to handle InlinePanel DOM events for ready, added, and removed states.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('w-formset:ready', function (event) {\n    console.info('ready', event);\n});\n\ndocument.addEventListener('w-formset:added', function (event) {\n    console.info('added', event);\n});\n\ndocument.addEventListener('w-formset:removed', function (event) {\n    console.info('removed', event);\n});\n```\n\n----------------------------------------\n\nTITLE: Using slugurl() Function in Jinja2 Template\nDESCRIPTION: This snippet demonstrates how to use the slugurl() function to generate a URL for a Page with a specific slug in a Jinja2 template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_3\n\nLANGUAGE: html+jinja\nCODE:\n```\n<a href=\"{{ slugurl(\"about\") }}\">About us</a>\n```\n\n----------------------------------------\n\nTITLE: Custom Bulk Action Confirmation Template in HTML\nDESCRIPTION: An example of a confirmation template for a custom bulk action. It extends the base template and includes sections for displaying items with and without access, as well as the confirmation form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends 'wagtailadmin/bulk_actions/confirmation/base.html' %}\n{% load i18n wagtailadmin_tags %}\n\n{% block titletag %}{% blocktranslate trimmed count counter=items|length %}Delete 1 item{% plural %}Delete {{ counter }} items{% endblocktranslate %}{% endblock %}\n\n{% block header %}\n    {% trans \"Delete\" as del_str %}\n    {% include \"wagtailadmin/shared/header.html\" with title=del_str icon=\"doc-empty-inverse\" %}\n{% endblock header %}\n\n{% block items_with_access %}\n        {% if items %}\n        <p>{% trans \"Are you sure you want to delete these items?\" %}</p>\n        <ul>\n            {% for item in items %}\n            <li>\n                <a href=\"\" target=\"_blank\" rel=\"noreferrer\">{{ item.item.title }}</a>\n            </li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n{% endblock items_with_access %}\n\n{% block items_with_no_access %}\n\n{% blocktranslate trimmed asvar no_access_msg count counter=items_with_no_access|length %}You don't have permission to delete this item{% plural %}You don't have permission to delete these items{% endblocktranslate %}\n{% include './list_items_with_no_access.html' with items=items_with_no_access no_access_msg=no_access_msg %}\n\n{% endblock items_with_no_access %}\n\n{% block form_section %}\n{% if items %}\n    {% trans 'Yes, delete' as action_button_text %}\n    {% trans \"No, don't delete\" as no_action_button_text %}\n    {% include 'wagtailadmin/bulk_actions/confirmation/form.html' with action_button_class=\"serious\" %}\n{% else %}\n    {% include 'wagtailadmin/bulk_actions/confirmation/go_back.html' %}\n{% endif %}\n{% endblock form_section %}\n```\n\n----------------------------------------\n\nTITLE: Custom Echo Page Implementation with Route Override\nDESCRIPTION: Example of a custom page type that implements route() and serve() methods to echo back URL path components. Demonstrates custom URL handling and template rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/model_recipes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom wagtail.url_routing import RouteResult\nfrom django.http.response import Http404\nfrom wagtail.models import Page\n\n# ...\n\nclass Echoer(Page):\n\n    def route(self, request, path_components):\n        if path_components:\n            # tell Wagtail to call self.serve() with an additional 'path_components' kwarg\n            return RouteResult(self, kwargs={'path_components': path_components})\n        else:\n            if self.live:\n                # tell Wagtail to call self.serve() with no further args\n                return RouteResult(self)\n            else:\n                raise Http404\n\n    def serve(self, path_components=[]):\n        return render(request, self.template, {\n            'page': self,\n            'echo': ' '.join(path_components),\n            })\n```\n\n----------------------------------------\n\nTITLE: Configuring StreamField Block Preview with Meta Class in Python\nDESCRIPTION: Example of configuring a StreamField block preview using the Meta class within a StructBlock subclass. This method allows defining preview_value, preview_template, and description as class attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass QuoteBlock(blocks.StructBlock):\n    text = blocks.TextBlock()\n    source = blocks.CharBlock()\n\n    class Meta:\n        preview_value = {\"text\": \"This is the coolest CMS ever.\", \"source\": \"Willie Wagtail\"}\n        preview_template = \"myapp/previews/blocks/quote.html\"\n        description = \"A quote with attribution to the source, rendered as a blockquote.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ChoiceBlock in Wagtail StreamField\nDESCRIPTION: This snippet demonstrates how to create a ChoiceBlock with predefined choices for a dropdown selection in a Wagtail StreamField. It includes the block definition with tea and coffee options and sets a cup icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nblocks.ChoiceBlock(choices=[\n    ('tea', 'Tea'),\n    ('coffee', 'Coffee'),\n], icon='cup')\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CloudFront Cache Backend\nDESCRIPTION: Settings configuration for AWS CloudFront cache backend with manual credential specification.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n    'cloudfront': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudfrontBackend',\n        'DISTRIBUTION_ID': 'your-distribution-id',\n        'AWS_ACCESS_KEY_ID': os.environ['FRONTEND_CACHE_AWS_ACCESS_KEY_ID'],\n        'AWS_SECRET_ACCESS_KEY': os.environ['FRONTEND_CACHE_AWS_SECRET_ACCESS_KEY'],\n        'AWS_SESSION_TOKEN': os.environ['FRONTEND_CACHE_AWS_SESSION_TOKEN']\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Monthly Calendar View in Python for Wagtail Admin\nDESCRIPTION: Adds a new view to display the calendar for the current month, complementing the existing yearly calendar view in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport calendar\nfrom django.shortcuts import render\nfrom django.utils import timezone\n\n\ndef index(request):\n    current_year = timezone.now().year\n    calendar_html = calendar.HTMLCalendar().formatyear(current_year)\n\n    return render(request, 'wagtailcalendar/index.html', {\n        'current_year': current_year,\n        'calendar_html': calendar_html,\n    })\n\ndef month(request):\n    current_year = timezone.now().year\n    current_month = timezone.now().month\n    calendar_html = calendar.HTMLCalendar().formatmonth(current_year, current_month)\n\n    return render(request, 'wagtailcalendar/index.html', {\n        'current_year': current_year,\n        'calendar_html': calendar_html,\n    })\n```\n\n----------------------------------------\n\nTITLE: Wagtail QuerySet Modifiers\nDESCRIPTION: Example of various QuerySet modifiers available in Wagtail for navigating page hierarchy.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Given a page object 'somepage':\nMyModel.objects.descendant_of(somepage)\nchild_of(page) / not_child_of(somepage)\nancestor_of(somepage) / not_ancestor_of(somepage)\nparent_of(somepage) / not_parent_of(somepage)\nsibling_of(somepage) / not_sibling_of(somepage)\n```\n\n----------------------------------------\n\nTITLE: Customizing Entire Wagtail Login Form\nDESCRIPTION: Template code to customize the entire login form by extending login.html and overriding the login_form block which wraps the form element.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/login.html\" %}\n\n{% block login_form %}\n    <p>Some extra form content</p>\n    {{ block.super }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Replacing Existing Wagtail Icons Using Hooks\nDESCRIPTION: Python code demonstrating how to replace an existing Wagtail icon using the register_icons hook. The example removes the original time icon and adds a custom version.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/icons.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register(\"register_icons\")\ndef register_icons(icons):\n    icons.remove(\"wagtailadmin/icons/time.svg\")  # Remove the original icon\n    icons.append(\"path/to/time.svg\")  # Add the new icon\n    return icons\n```\n\n----------------------------------------\n\nTITLE: Indexing Django Choice Fields in EventPage\nDESCRIPTION: Example of indexing Django's get_*_display methods for choice fields to enable both searching and filtering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/indexing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\n\nclass EventPage(Page):\n    IS_PRIVATE_CHOICES = (\n        (False, \"Public\"),\n        (True, \"Private\"),\n    )\n\n    is_private = models.BooleanField(choices=IS_PRIVATE_CHOICES)\n\n    search_fields = Page.search_fields + [\n        # Index the human-readable string for searching.\n        index.SearchField('get_is_private_display'),\n\n        # Index the boolean value for filtering.\n        index.FilterField('is_private'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Tag Image Quality in Wagtail Templates\nDESCRIPTION: Examples of setting specific quality levels for different image formats (AVIF, JPEG, WebP) on individual template tags. These quality settings override the default configuration for each specific tag.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{% image page.photo_avif width-400 avifquality-40 %}\n{% image page.photo_jpeg width-400 jpegquality-40 %}\n{% image page.photo_webp width-400 webpquality-50 %}\n```\n\n----------------------------------------\n\nTITLE: Updating Module Paths using Wagtail Command Line\nDESCRIPTION: This snippet demonstrates how to use the Wagtail command line to update module paths within the specified project directory. It includes commands to display the list of changes and to perform the update. Prior backup of the project is advised as it will modify all .py files for affected module paths.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ wagtail updatemodulepaths /path/to/project --list\n$ wagtail updatemodulepaths /path/to/project --diff\n$ wagtail updatemodulepaths /path/to/project\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to Image Tag\nDESCRIPTION: Shows how to add custom HTML attributes to the Wagtail image template tag output\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% image page.photo width-400 class=\"foo\" id=\"bar\" %}\n```\n\n----------------------------------------\n\nTITLE: Complete Example Configuration for settings.py in a Wagtail-Django Project\nDESCRIPTION: This snippet provides a comprehensive example of a settings.py file for a Django project with Wagtail integration. It includes all necessary configurations for apps, middleware, databases, static files, and Wagtail-specific settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/add_to_django_project.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nPROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nBASE_DIR = os.path.dirname(PROJECT_DIR)\n\nDEBUG = True\n\n# Application definition\n\nINSTALLED_APPS = [\n    'myapp',\n\n    'wagtail.contrib.forms',\n    'wagtail.contrib.redirects',\n    'wagtail.embeds',\n    'wagtail.sites',\n    'wagtail.users',\n    'wagtail.snippets',\n    'wagtail.documents',\n    'wagtail.images',\n    'wagtail.search',\n    'wagtail.admin',\n    'wagtail',\n\n    'taggit',\n    'modelcluster',\n\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\n\nMIDDLEWARE = [\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n\n    'wagtail.contrib.redirects.middleware.RedirectMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(PROJECT_DIR, 'templates'),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'myprojectdb',\n        'USER': 'postgres',\n        'PASSWORD': '',\n        'HOST': '',  # Set to empty string for localhost.\n        'PORT': '',  # Set to empty string for default.\n        'CONN_MAX_AGE': 600,  # number of seconds database connections should persist for\n    }\n}\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATICFILES_FINDERS = [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n]\n\nSTATICFILES_DIRS = [\n    os.path.join(PROJECT_DIR, 'static'),\n]\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATIC_URL = '/static/'\n\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n\n\nADMINS = [\n    # ('Your Name', 'your_email@example.com'),\n]\nMANAGERS = ADMINS\n\n# Default to dummy email backend. Configure dev/production/local backend\n# as per https://docs.djangoproject.com/en/stable/topics/email/#email-backends\nEMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'\n\n# Hosts/domain names that are valid for this site; required if DEBUG is False\nALLOWED_HOSTS = []\n\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = 'change-me'\n\nEMAIL_SUBJECT_PREFIX = '[Wagtail] '\n\nINTERNAL_IPS = ('127.0.0.1', '10.0.2.2')\n\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See https://docs.djangoproject.com/en/stable/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'mail_admins': {\n            'level': 'ERROR',\n            'filters': ['require_debug_false'],\n            'class': 'django.utils.log.AdminEmailHandler'\n        }\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    }\n}\n\n\n# WAGTAIL SETTINGS\n\n# This is the human-readable name of your Wagtail install\n```\n\n----------------------------------------\n\nTITLE: Adding Form Fields to Wagtail API\nDESCRIPTION: Expose form fields of a FormBuilder page in the Wagtail API.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.api import APIField\n\nclass FormPage(AbstractEmailForm):\n    #...\n    api_fields = [\n        APIField('form_fields'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Cache with Multiple Backends (New Approach)\nDESCRIPTION: Updated configuration approach for CloudFront frontend cache using multiple backend definitions with HOSTNAMES parameter to specify associated domains for each distribution ID.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n    'mainsite': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudfrontBackend',\n        'DISTRIBUTION_ID': 'your-distribution-id',\n        'HOSTNAMES': ['www.wagtail.org'],\n    },\n    'madewithwagtail': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudfrontBackend',\n        'DISTRIBUTION_ID': 'other-distribution-id',\n        'HOSTNAMES': ['www.madewithwagtail.org'],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: New Approach for Custom Widget with Stimulus Integration in Python\nDESCRIPTION: Demonstrates the recommended way to create a custom widget using Stimulus JS integration, replacing the deprecated WidgetWithScript approach.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import Media, widgets\n\n\nclass CustomRichTextArea(widgets.Textarea):\n    def build_attrs(self, *args, **kwargs):\n        attrs = super().build_attrs(*args, **kwargs)\n        attrs['data-controller'] = 'custom-editor'\n\n    @property\n    def media(self):\n        return Media(js=[\"vendor/custom-editor.js\",\"js/custom-editor-controller.js\"])\n```\n\n----------------------------------------\n\nTITLE: Customizing send_mail Method for Wagtail Form Submissions in Python\nDESCRIPTION: This snippet demonstrates how to override the send_mail method in a Wagtail FormPage to customize email sending behavior. It includes modifying the subject line and using the FormPage's attributes for email composition.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n# ... additional wagtail imports\nfrom wagtail.admin.mail import send_mail\nfrom wagtail.contrib.forms.models import AbstractEmailForm\n\n\nclass FormPage(AbstractEmailForm):\n    # ... fields, content_panels, etc\n\n    def send_mail(self, form):\n        # `self` is the FormPage, `form` is the form's POST data on submit\n\n        # Email addresses are parsed from the FormPage's addresses field\n        addresses = [x.strip() for x in self.to_address.split(',')]\n\n        # Subject can be adjusted (adding submitted date), be sure to include the form's defined subject field\n        submitted_date_str = date.today().strftime('%x')\n        subject = f\"{self.subject} - {submitted_date_str}\"\n\n        send_mail(subject, self.render_email(form), addresses, self.from_address,)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Snippet Action Menu Item in Python\nDESCRIPTION: This snippet shows how to create a custom action menu item for snippets using the register_snippet_action_menu_item hook in Wagtail. It adds a 'Guacamole' menu item to the snippet action menu.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\nfrom wagtail.snippets.action_menu import ActionMenuItem\n\nclass GuacamoleMenuItem(ActionMenuItem):\n    name = 'action-guacamole'\n    label = \"Guacamole\"\n\n    def get_url(self, context):\n        return \"https://www.youtube.com/watch?v=dNJdJIwCF_Y\"\n\n\n@hooks.register('register_snippet_action_menu_item')\ndef register_guacamole_menu_item(model):\n    return GuacamoleMenuItem(order=10)\n```\n\n----------------------------------------\n\nTITLE: Defining Active Directory Group Model in Python\nDESCRIPTION: This snippet defines an ADGroup model to connect Active Directory groups with Django groups. It includes fields for GUID, name, domain, description, and a many-to-many relationship with Django's Group model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# myapp/models.py\nfrom django.contrib.auth.models import Group\nfrom django.db import models\n\n\nclass ADGroup(models.Model):\n    guid = models.CharField(verbose_name=\"GUID\", max_length=64, db_index=True, unique=True)\n    name = models.CharField(verbose_name=\"Group\", max_length=255)\n    domain = models.CharField(verbose_name=\"Domain\", max_length=255, db_index=True)\n    description = models.TextField(verbose_name=\"Description\", blank=True, null=True)\n    roles = models.ManyToManyField(Group, verbose_name=\"Role\", related_name=\"adgroups\", blank=True)\n\nclass Meta:\n    verbose_name = \"AD group\"\n    verbose_name_plural = \"AD groups\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Rendition URL in Python\nDESCRIPTION: Shows how to get the URL of a generated image rendition, useful for API implementations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = myimage.get_rendition('fill-300x186|jpegquality-60').url\n```\n\n----------------------------------------\n\nTITLE: Adjusting Migrations for CustomLogEntry Models in Python\nDESCRIPTION: Shows how to properly adjust Django migrations when changing the data_json TextField to a data JSONField in custom LogEntry models. This ensures data is preserved during the migration process.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/3.0.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noperations = [\n    migrations.AlterField(\n        model_name=\"mycustomlogentry\",\n        name=\"data_json\",\n        field=models.JSONField(blank=True, default=dict),\n    ),\n    migrations.RenameField(\n        model_name=\"mycustomlogentry\",\n        old_name=\"data_json\",\n        new_name=\"data\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Report View Class in Python\nDESCRIPTION: Demonstrates how to update a custom report view class to use the new Universal Listings UI.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass UnpublishedChangesReportView(PageReportView):\n    page_title = \"Pages with unpublished changes\"\n    index_url_name = \"unpublished_changes_report\"\n    index_results_url_name = \"unpublished_changes_report_results\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Stimulus Controller Identifier in JavaScript\nDESCRIPTION: Demonstrates how to reference a Stimulus controller's identifier dynamically within the controller itself. This approach allows for more flexible usage and easier extension of the controller.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/ui_guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.identifier\n```\n\n----------------------------------------\n\nTITLE: New Data Attribute-Driven Approach for Dirty Form Check in HTML\nDESCRIPTION: Demonstrates the new approach for initializing dirty form check functionality using data attributes on the form element. This replaces the deprecated JavaScript initialization method.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form\n  method=\"POST\"\n  data-controller=\"w-unsaved\"\n  data-action=\"w-unsaved#submit beforeunload@window->w-unsaved#confirm change->w-unsaved#check keyup->w-unsaved#check\"\n  data-w-unsaved-confirm-value=\"This page has unsaved changes.\" // equivalent to `confirmationMessage`.\n  data-w-unsaved-force-value=\"true\" // equivalent to `alwaysDirty`.\n  data-w-unsaved-watch-value=\"edits comments\" // can add 'comments' if comments is enabled, defaults to only 'edits'.\n  >\n  ... form contents\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduced Motion Preferences in CSS\nDESCRIPTION: CSS media query implementation to respect users' reduced motion preferences by disabling animations and transitions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/accessibility_considerations.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@media (prefers-reduced-motion) {\n    /* styles to apply if a user's device settings are set to reduced motion */\n    /* for example, disable animations */\n    * {\n        animation: none !important;\n        transition: none !important;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Header Template with Skip Link\nDESCRIPTION: Enhanced header template with skip link implementation for improved accessibility, including dynamic navigation and Wagtail user bar.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/style_your_site.md#2025-04-21_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags navigation_tags wagtailuserbar %}\n<header>\n  <a href=\"#main\" class=\"skip-link\">Skip to content</a>\n\n  {% get_site_root as site_root %}\n  <nav>\n    <p>\n      <a href=\"{% pageurl site_root %}\">{{ site_root.title }}</a> |\n      {% for menuitem in site_root.get_children.live.in_menu %}\n        <a href=\"{% pageurl menuitem %}\">{{ menuitem.title }}</a>{% if not forloop.last %} | {% endif %}\n      {% endfor %}\n    </p>\n  </nav>\n  {% wagtailuserbar \"top-right\" %}\n</header>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Embed Finder in Wagtail Settings\nDESCRIPTION: This code snippet shows how to add a custom embed finder class to the WAGTAILEMBEDS_FINDERS setting in Wagtail. This configuration allows Wagtail to use the custom finder for embed operations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILEMBEDS_FINDERS = [\n    {\n        'class': 'path.to.your.finder.class.here',\n        # Any other options will be passed as kwargs to the __init__ method\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Running convert_mariadb_uuids Management Command in Python\nDESCRIPTION: This command is used to convert existing UUID fields to the new format when upgrading to Django 5.0+ and MariaDB 10.7+. It fixes compatibility issues with CHAR-based UUIDs created on earlier versions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.3.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py convert_mariadb_uuids\n```\n\n----------------------------------------\n\nTITLE: Handling Snippet Deletion in Wagtail CMS with Python\nDESCRIPTION: Demonstrates how to use the 'after_delete_snippet' hook to perform custom actions after snippets are deleted. This example returns a custom HTTP response indicating how many snippets were deleted.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\n@hooks.register('after_delete_snippet')\ndef after_snippet_delete(request, instances):\n    # \"instances\" is a list\n    total = len(instances)\n    return HttpResponse(f\"{total} snippets have been deleted\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Handling Snippet Edit Events in Wagtail CMS with Python\nDESCRIPTION: Demonstrates how to use the 'after_edit_snippet' hook to perform custom actions after a snippet is edited. This example returns a custom HTTP response with a confirmation message.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\n@hooks.register('after_edit_snippet')\ndef after_snippet_update(request, instance):\n    return HttpResponse(f\"Congrats on editing a snippet with id {instance.pk}\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Settings Panel in Wagtail Hooks\nDESCRIPTION: Shows how to register a custom settings panel using Wagtail hooks. This panel uses the previously defined CustomSettingsForm and operates on the user model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_account_settings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\n\nfrom wagtail.admin.views.account import BaseSettingsPanel\nfrom wagtail import hooks\nfrom .forms import CustomSettingsForm\n\n@hooks.register('register_account_settings_panel')\nclass CustomSettingsPanel(BaseSettingsPanel):\n    name = 'custom'\n    title = \"My custom settings\"\n    order = 500\n    form_class = CustomSettingsForm\n    form_object = 'user'\n```\n\n----------------------------------------\n\nTITLE: DraftStateMixin Methods and Properties in Wagtail CMS\nDESCRIPTION: Documentation for the methods and properties of the DraftStateMixin in Wagtail, providing functionality for publishing, unpublishing, and managing draft states of model instances.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass DraftStateMixin:\n    # Methods and properties\n    \n    publish\n    \n    unpublish\n    \n    with_content_json\n```\n\n----------------------------------------\n\nTITLE: Using first_block_by_name in a Template\nDESCRIPTION: Template example showing how to retrieve and display the first block of a specific type from a StreamField using the first_block_by_name method.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_20\n\nLANGUAGE: html+django\nCODE:\n```\n<div class=\"hero-image\">{{ page.body.first_block_by_name.image }}</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Invalid Pages (Pre-Wagtail 1.4) in Python\nDESCRIPTION: Example showing how page creation bypassed validation in versions prior to Wagtail 1.4. This code creates a NewsPage without the required body field, which would be possible in earlier versions but is prevented in 1.4+ due to model-level validation enforcement.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nnews_page = NewsPage(title=\"Hello\", slug='hello')\nparent_page = NewsIndex.objects.get()\nparent_page.add_child(instance=news_page)\n```\n\n----------------------------------------\n\nTITLE: Filtering blog entries by tag in a Wagtail index page\nDESCRIPTION: This code snippet shows how to filter blog pages by tag using a query parameter in the index page's get_context method. It retrieves all live blog entries that are children of the index page and applies an optional tag filter based on the request parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/tags.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\nclass BlogIndexPage(Page):\n    ...\n    def get_context(self, request):\n        context = super().get_context(request)\n\n        # Get blog entries\n        blog_entries = BlogPage.objects.child_of(self).live()\n\n        # Filter by tag\n        tag = request.GET.get('tag')\n        if tag:\n            blog_entries = blog_entries.filter(tags__name=tag)\n\n        context['blog_entries'] = blog_entries\n        return context\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CDN with Custom Credentials\nDESCRIPTION: Settings configuration for Azure CDN cache backend with custom service principal credentials.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.credentials import ServicePrincipalCredentials\n\nWAGTAILFRONTENDCACHE = {\n    'azure_cdn': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.AzureCdnBackend',\n        'RESOURCE_GROUP_NAME': 'MY-WAGTAIL-RESOURCE-GROUP',\n        'CDN_PROFILE_NAME': 'wagtailio',\n        'CDN_ENDPOINT_NAME': 'wagtailio-cdn-endpoint-123',\n        'CREDENTIALS': ServicePrincipalCredentials(\n            client_id='your client id',\n            secret='your client secret',\n        )\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Form Submissions for User in Wagtail Using Python\nDESCRIPTION: Demonstrates the customization of form submission access based on user privileges in Wagtail using the filter_form_submissions_for_user hook, filtering form pages for non-superusers.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom wagtail import hooks\n\n\n@hooks.register('filter_form_submissions_for_user')\ndef construct_forms_for_user(user, queryset):\n    if not user.is_superuser:\n        queryset = queryset.none()\n\n    return queryset\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Redirect Creation (Python)\nDESCRIPTION: Demonstrates how to disable the automatic creation of redirects in Wagtail by adding a configuration to the project settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILREDIRECTS_AUTO_CREATE = False\n```\n\n----------------------------------------\n\nTITLE: Card Block Template\nDESCRIPTION: Template for rendering card blocks with heading, text, and optional image.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags wagtailimages_tags %}\n<div class=\"card\">\n    <h3>{{ self.heading }}</h3>\n    <div>{{ self.text|richtext }}</div>\n    {% if self.image %}\n        {% image self.image width-480 %}\n    {% endif %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering CalendarViewSet in Wagtail Hooks\nDESCRIPTION: Demonstrates how to register the CalendarViewSet using the register_admin_viewset hook in Wagtail. This replaces the need for separate register_admin_urls and register_admin_menu_item hooks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom .views import CalendarViewSet\n\n@hooks.register(\"register_admin_viewset\")\ndef register_viewset():\n    return CalendarViewSet()\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Site in Wagtail API v2\nDESCRIPTION: Examples of using the '?site=' filter to query pages belonging to a specific site, identified by hostname or hostname:port.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?site=demo-site.local\nGET /api/v2/pages/?site=demo-site.local:8080\n```\n\n----------------------------------------\n\nTITLE: Adding Dropdown Menu Buttons to Page Listing in Wagtail CMS with Python\nDESCRIPTION: Shows how to register a hook that adds buttons to the 'More' dropdown menu in the page explorer. Similar to the regular page listing buttons, but appears in the dropdown menu instead of directly in the page listing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin import widgets as wagtailadmin_widgets\n\n@hooks.register('register_page_listing_more_buttons')\ndef page_listing_more_buttons(page, user, next_url=None):\n    yield wagtailadmin_widgets.Button(\n        'A dropdown button',\n        '/goes/to/a/url/',\n        priority=60\n    )\n```\n\n----------------------------------------\n\nTITLE: Page-related URL Templates in Wagtail Admin\nDESCRIPTION: Demonstrates URL templates for various page actions in Wagtail admin, including adding a new page, viewing page usage, editing, deleting, and copying a page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_14\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailadmin_pages:add' content_type_app_name content_type_model_name parent_id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailadmin_pages:usage' page_id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailadmin_pages:edit' page_id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailadmin_pages:delete' page_id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailadmin_pages:copy' page_id }\n```\n\n----------------------------------------\n\nTITLE: Changing Default Page Action in Wagtail Admin\nDESCRIPTION: Shows how to change the default page action to Publish by reordering menu items using the construct_page_action_menu hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_page_action_menu')\ndef make_publish_default_action(menu_items, request, context):\n    for (index, item) in enumerate(menu_items):\n        if item.name == 'action-publish':\n            # move to top of list\n            menu_items.pop(index)\n            menu_items.insert(0, item)\n            break\n```\n\n----------------------------------------\n\nTITLE: Registering a Model for Reference Indexing in Wagtail\nDESCRIPTION: Code to register a custom model for Wagtail's reference indexing by adding to the app's ready() method. This allows Wagtail to track references to objects of this model type.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/reference_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\n\n\nclass SprocketAppConfig(AppConfig):\n    ...\n    def ready(self):\n        from wagtail.models.reference_index import ReferenceIndex\n\n        from .models import SprocketController\n\n        ReferenceIndex.register_model(SprocketController)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search View with Query Tracking\nDESCRIPTION: Django view implementation for handling search requests and recording search query hits using the Query model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/searchpromotions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template.response import TemplateResponse\n\nfrom wagtail.models import Page\nfrom wagtail.contrib.search_promotions.models import Query\n\n\ndef search(request):\n    search_query = request.GET.get(\"query\", None)\n\n    if search_query:\n        search_results = Page.objects.live().search(search_query)\n        query = Query.get(search_query)\n\n        # Record hit\n        query.add_hit()\n    else:\n        search_results = Page.objects.none()\n\n    return TemplateResponse(\n        request,\n        \"search/search.html\",\n        {\n            \"search_query\": search_query,\n            \"search_results\": search_results,\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding FormSubmissionsPanel to Wagtail Form Page in Python\nDESCRIPTION: Demonstrates how to add a FormSubmissionsPanel to a FormPage's content panels, which displays submission information in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.forms.panels import FormSubmissionsPanel\n\nclass FormPage(AbstractEmailForm):\n    # ...\n\n    content_panels = AbstractEmailForm.content_panels + [\n        FormSubmissionsPanel(),\n        FieldPanel('intro'),\n        # ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Running Wagtail updatemodulepaths command in Shell\nDESCRIPTION: Commands to automatically update import paths in project codebase after Wagtail module reorganization. Lists changes, shows diffs, and applies updates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/3.0.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwagtail updatemodulepaths --list  # list the files to be changed without updating them\nwagtail updatemodulepaths --diff  # show the changes to be made, without updating files\nwagtail updatemodulepaths  # actually update the files\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Chooser Query in Wagtail\nDESCRIPTION: Example demonstrating how to customize image chooser queryset to show only images uploaded by current user using construct_image_chooser_queryset hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('construct_image_chooser_queryset')\ndef show_my_uploaded_images_only(images, request):\n    # Only show uploaded images\n    images = images.filter(uploaded_by_user=request.user)\n\n    return images\n```\n\n----------------------------------------\n\nTITLE: Ordered Hook Registration\nDESCRIPTION: Shows how to register hooks with specific execution order using the order parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('name_of_hook', order=1)  # This will run after every hook in the wagtail core\ndef my_hook_function(arg1, arg2...)\n    # your code here\n\n@hooks.register('name_of_hook', order=-1)  # This will run before every hook in the wagtail core\ndef my_other_hook_function(arg1, arg2...)\n    # your code here\n\n@hooks.register('name_of_hook', order=2)  # This will run after `my_hook_function`\ndef yet_another_hook_function(arg1, arg2...)\n    # your code here\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for AMP Support in Django/Wagtail\nDESCRIPTION: Sets up URL patterns to serve AMP pages under the /amp/ prefix while maintaining the default Wagtail URLs.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    # Add this line just before the default ``include(wagtail_urls)`` line\n    path('amp/', include(wagtail_urls)),\n\n    path('', include(wagtail_urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Advertisement ViewSet Configuration\nDESCRIPTION: Example of a SnippetViewSet with custom menu configuration for an Advertisement model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/customizing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.snippets.views.snippets import SnippetViewSet\n\n\nclass AdvertViewSet(SnippetViewSet):\n    model = Advert\n    icon = \"crosshairs\"\n    menu_label = \"Advertisements\"\n    menu_name = \"adverts\"\n    menu_order = 300\n    add_to_admin_menu = True\n```\n\n----------------------------------------\n\nTITLE: Updating ForeignKey to PageRevision for Wagtail 4.0 Compatibility\nDESCRIPTION: This snippet demonstrates how to create a helper function to correctly resolve the Revision model depending on the installed Wagtail version. It's useful for maintaining packages across multiple Wagtail versions that include a model with a ForeignKey to the PageRevision model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.0.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom wagtail import VERSION as WAGTAIL_VERSION\n\n\ndef get_revision_model():\n    if WAGTAIL_VERSION >= (4, 0):\n        return \"wagtailcore.Revision\"\n    return \"wagtailcore.PageRevision\"\n\n\nclass MyModel(models.Model):\n    # Before\n    # revision = models.ForeignKey(\"wagtailcore.PageRevision\")\n    revision = models.ForeignKey(get_revision_model(), on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Using pageurl() Function in Jinja2 Template\nDESCRIPTION: This snippet shows how to use the pageurl() function to generate a URL for a Page instance in a Jinja2 template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_2\n\nLANGUAGE: html+jinja\nCODE:\n```\n<a href=\"{{ pageurl(page.more_information) }}\">More information</a>\n```\n\n----------------------------------------\n\nTITLE: Inserting Global Admin CSS in Wagtail Using Python\nDESCRIPTION: This example inserts additional CSS into all Wagtail admin pages using the insert_global_admin_css hook. The static function is employed to link a stylesheet, requiring Django and Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.utils.html import format_html\nfrom django.templatetags.static import static\n\nfrom wagtail import hooks\n\n@hooks.register('insert_global_admin_css')\ndef global_admin_css():\n    return format_html('<link rel=\"stylesheet\" href=\"{}\">', static('my/wagtail/theme.css'))\n```\n\n----------------------------------------\n\nTITLE: Custom Serve View for AMP Pages\nDESCRIPTION: Implements a custom serve view that wraps Wagtail's default serve view to handle AMP-specific rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template.response import SimpleTemplateResponse\nfrom wagtail.views import serve as wagtail_serve\n\nfrom .amp_utils import activate_amp_mode\n\ndef serve(request, path):\n    with activate_amp_mode():\n        response = wagtail_serve(request, path)\n\n        # Render template responses now while AMP mode is still active\n        if isinstance(response, SimpleTemplateResponse):\n            response.render()\n\n        return response\n```\n\n----------------------------------------\n\nTITLE: Custom Image Format Registration in Wagtail\nDESCRIPTION: Demonstrates how to register a custom thumbnail image format for use in the rich text editor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/page_editing_interface.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# image_formats.py\nfrom wagtail.images.formats import Format, register_image_format\n\nregister_image_format(Format('thumbnail', 'Thumbnail', 'richtext-image thumbnail', 'max-120x120'))\n```\n\n----------------------------------------\n\nTITLE: Locale Model Methods and Properties in Wagtail CMS\nDESCRIPTION: Documentation for the methods and properties of the Locale model in Wagtail, which defines the set of languages and/or locales that can be used on a site.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Locale:\n    # Methods and properties\n    \n    language_code\n    \n    get_default\n    \n    get_active\n    \n    language_name\n    \n    language_name_local\n    \n    language_name_localized\n    \n    is_default\n    \n    is_active\n    \n    is_bidi\n    \n    get_display_name\n```\n\n----------------------------------------\n\nTITLE: Blocking Subpage Creation in Wagtail\nDESCRIPTION: Example of preventing any child pages from being created under a specific page type by setting subpage_types to an empty list.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    subpage_types = []\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Custom Admin Templates in Django\nDESCRIPTION: Configuration example showing how to add a custom app to the INSTALLED_APPS setting before the wagtail.admin app to enable template overriding.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    # ...\n\n    'dashboard',\n\n    'wagtail',\n    'wagtail.admin',\n\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Creating custom tag models in Wagtail\nDESCRIPTION: This code snippet demonstrates how to create a custom tag model for blog pages. It defines a BlogTag model inheriting from TagBase and a TaggedBlog through model, providing an independent pool of tags specifically for blog pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/tags.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom modelcluster.contrib.taggit import ClusterTaggableManager\nfrom modelcluster.fields import ParentalKey\nfrom taggit.models import TagBase, ItemBase\n\nclass BlogTag(TagBase):\n    class Meta:\n        verbose_name = \"blog tag\"\n        verbose_name_plural = \"blog tags\"\n\n\nclass TaggedBlog(ItemBase):\n    tag = models.ForeignKey(\n        BlogTag, related_name=\"tagged_blogs\", on_delete=models.CASCADE\n    )\n    content_object = ParentalKey(\n        to='demo.BlogPage',\n        on_delete=models.CASCADE,\n        related_name='tagged_items'\n    )\n\nclass BlogPage(Page):\n    ...\n    tags = ClusterTaggableManager(through='demo.TaggedBlog', blank=True)\n```\n\n----------------------------------------\n\nTITLE: Python Hook for Removing Accessibility Checker\nDESCRIPTION: Hook implementation to remove the accessibility checker item from the Wagtail userbar by filtering out instances of AccessibilityItem.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.userbar import AccessibilityItem\n\n@hooks.register('construct_wagtail_userbar')\ndef remove_userbar_accessibility_checks(request, items):\n    items[:] = [item for item in items if not isinstance(item, AccessibilityItem)]\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Cache Key Components in Wagtail\nDESCRIPTION: Shows how to override the get_cache_key_components method to include custom model fields in the cache key generation. This ensures cache invalidation when custom fields change.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/performance.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_cache_key_components(self):\n    components = super().get_cache_key_components()\n    components.append(self.external_slug)\n    return components\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Page Model Fixtures in JSON\nDESCRIPTION: Example of creating JSON fixtures for custom Wagtail page models, showing the required structure for both the base page and custom page model entries. Includes necessary Treebeard fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"model\": \"wagtailcore.page\",\n        \"pk\": 3,\n        \"fields\": {\n            \"title\": \"My Customer's Homepage\",\n            \"content_type\": [\"website\", \"homepage\"],\n            \"depth\": 2\n        }\n    },\n    {\n        \"model\": \"website.homepage\",\n        \"pk\": 3,\n        \"fields\": {}\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile for Fly.io Deployment\nDESCRIPTION: Modification to Dockerfile to configure Gunicorn with a single worker for better compatibility with Fly.io's memory constraints.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"gunicorn\", \"--bind\", \":8000\", \"--workers\", \"1\", \"mysite.wsgi\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpage Types in Wagtail\nDESCRIPTION: Example of using the subpage_types attribute to control which page types can be created as children of a specific page type. This allows restricting child pages to only certain models.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BlogIndex(Page):\n    subpage_types = ['mysite.BlogPage', 'mysite.BlogArchivePage']\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Bulk Actions for Users in Python\nDESCRIPTION: Shows how to create a custom bulk action for users by subclassing UserBulkAction.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.users.views.bulk_actions.user_bulk_action import UserBulkAction\nfrom wagtail import hooks\n\n\n@hooks.register('register_bulk_action')\nclass CustomUserBulkAction(UserBulkAction):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Serializers in Wagtail API\nDESCRIPTION: Override the serializer for a field using the serializer keyword argument to customize its output format.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.fields import DateField\n\nclass BlogPage(Page):\n    ...\n\n    api_fields = [\n        # Change the format of the published_date field to \"Thursday 06 April 2017\"\n        APIField('published_date', serializer=DateField(format='%A %d %B %Y')),\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Manually Running Feature Detection on All Images\nDESCRIPTION: Python code to manually run feature detection on all images in the database that don't have a focal point set.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.images import get_image_model\n\nImage = get_image_model()\n\nfor image in Image.objects.all():\n    if not image.has_focal_point():\n        image.set_focal_point(image.get_suggested_focal_point())\n        image.save()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Template Tag for Rendering Adverts in Python\nDESCRIPTION: This snippet demonstrates how to create a custom template tag in Python to render Advert snippets. It includes importing necessary modules, defining the template tag function, and using the register decorator.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\nfrom demo.models import Advert\n\nregister = template.Library()\n\n# ...\n\n# Advert snippets\n@register.inclusion_tag('demo/tags/adverts.html', takes_context=True)\ndef adverts(context):\n    return {\n        'adverts': Advert.objects.all(),\n        'request': context['request'],\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting MariaDB UUIDs for Django 5.0 Compatibility\nDESCRIPTION: Management command to convert existing UUID fields to the new format compatible with Django 5.0 and MariaDB 10.7+. This addresses potential errors when creating or editing pages after upgrading.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./manage.py convert_mariadb_uuids\n```\n\n----------------------------------------\n\nTITLE: Creating a StructBlock Inline Definition in Python\nDESCRIPTION: Shows how to define a StructBlock directly within a StreamField definition. This block consists of a fixed group of sub-blocks (first_name, surname, photo, biography) that will be displayed together.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbody = StreamField([\n    # ...\n    ('person', blocks.StructBlock([\n        ('first_name', blocks.CharBlock()),\n        ('surname', blocks.CharBlock()),\n        ('photo', ImageBlock(required=False)),\n        ('biography', blocks.RichTextBlock()),\n    ], icon='user')),\n])\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Profile Settings Panel in Wagtail Hooks\nDESCRIPTION: Shows how to register a custom settings panel for the UserProfile model using Wagtail hooks. This panel uses the previously defined CustomProfileSettingsForm.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_account_settings.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\n\nfrom wagtail.admin.views.account import BaseSettingsPanel\nfrom wagtail import hooks\nfrom .forms import CustomProfileSettingsForm\n\n@hooks.register('register_account_settings_panel')\nclass CustomSettingsPanel(BaseSettingsPanel):\n    name = 'custom'\n    title = \"My custom settings\"\n    order = 500\n    form_class = CustomProfileSettingsForm\n    form_object = 'profile'\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Media Embeds\nDESCRIPTION: Configuration for Facebook and Instagram embed finders with authentication.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILEMBEDS_FINDERS = [\n    {\n        'class': 'wagtail.embeds.finders.facebook',\n        'app_id': 'YOUR FACEBOOK APP_ID HERE',\n        'app_secret': 'YOUR FACEBOOK APP_SECRET HERE',\n    },\n    {\n        'class': 'wagtail.embeds.finders.instagram',\n        'app_id': 'YOUR INSTAGRAM APP_ID HERE',\n        'app_secret': 'YOUR INSTAGRAM APP_SECRET HERE',\n    },\n\n    # Handles all other oEmbed providers the default way\n    {\n        'class': 'wagtail.embeds.finders.oembed',\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding File Extension to Document Title on Upload in Wagtail\nDESCRIPTION: This JavaScript code listens for the 'wagtail:documents-upload' event and modifies the generated title to include the file extension at the beginning.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/title_generation_on_upload.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// title_with_extension.js\nwindow.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('wagtail:documents-upload', function (event) {\n        const extension = (event.detail.filename.match(\n            /\\.([^.]*?)(?=\\?|#|$)/,\n        ) || [''])[1];\n        const newTitle = `(${extension.toUpperCase()}) ${event.detail.data.title || ''}`;\n        event.detail.data.title = newTitle;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Component with Context Data\nDESCRIPTION: Example of passing context data to a component's template through get_context_data method\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.ui.components import Component\n\nclass WelcomePanel(Component):\n    template_name = 'my_app/panels/welcome.html'\n\n    def get_context_data(self, parent_context):\n        context = super().get_context_data(parent_context)\n        context['username'] = parent_context['request'].user.username\n        return context\n```\n\n----------------------------------------\n\nTITLE: Using ListBlock Child Generator\nDESCRIPTION: Example showing how to use the formatted_list_child_generator utility to handle both old and new ListBlock formats.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n    def apply(self, block_value):\n        for child_block in formatted_list_child_generator(list_block_value):\n            ...\n```\n\n----------------------------------------\n\nTITLE: Using SVG Preservation with Wagtail Image Template Tags\nDESCRIPTION: Example of using the preserve-svg argument in Wagtail image template tags to prevent operations that would require rasterization of SVG images. This allows safely applying supported operations to both SVG and raster images in a loop.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{% for picture in pictures %}\n    {% image picture fill-400x400 format-webp preserve-svg %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing TableBlock in StreamField\nDESCRIPTION: Basic implementation of TableBlock in a StreamField definition\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/table_block.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass DemoStreamBlock(StreamBlock):\n    ...\n    table = TableBlock()\n```\n\n----------------------------------------\n\nTITLE: Registering Editor-Specific JavaScript for Document Upload in Wagtail\nDESCRIPTION: This Python code uses the 'insert_editor_js' hook to include a custom JavaScript file that will only run on Wagtail page editors, not on the Document model itself.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/title_generation_on_upload.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.templatetags.static import static\nfrom django.utils.html import format_html\n\nfrom wagtail import hooks\n\n@hooks.register(\"insert_editor_js\")\ndef get_editor_js():\n    script_url = static('js/remove_dashes_underscores.js')\n    return format_html('<script src=\"{}\"></script>', script_url)\n```\n\n----------------------------------------\n\nTITLE: Subclassing StreamBlock - Python\nDESCRIPTION: Shows how to create a custom StreamBlock subclass with defined block types and metadata.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CarouselBlock(blocks.StreamBlock):\n    image = ImageBlock()\n    video = EmbedBlock()\n\n    class Meta:\n        icon = 'image'\n```\n\n----------------------------------------\n\nTITLE: Using RegexBlock with Custom Validation in Wagtail\nDESCRIPTION: Example of implementing a RegexBlock that validates input against a regular expression pattern. This specific example validates a three-digit number and provides a custom error message for invalid inputs.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nblocks.RegexBlock(regex=r'^[0-9]{3}$', error_messages={\n    'invalid': \"Not a valid library card number.\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Tasks with django-tasks in Python\nDESCRIPTION: Example of how to configure the TASKS setting to use django-tasks for background processing in Wagtail. This allows moving computationally-intensive tasks out of the request-response cycle.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTASKS = {\n    'backend': 'django_tasks.backends.rabbitmq.RabbitMQBackend',\n    'broker_url': 'amqp://guest:guest@localhost:5672/',\n    'result_backend': 'django-db',\n}\n```\n\n----------------------------------------\n\nTITLE: RevisionMixin Database Fields in Wagtail CMS\nDESCRIPTION: Documentation for the database fields of the RevisionMixin in Wagtail, which allows non-page models to have revisions. Pages already include this mixin.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass RevisionMixin:\n\n    latest_revision\n        # (foreign key to wagtail.models.Revision)\n        # This points to the latest revision created for the object. This reference is stored in the database for performance optimization.\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Deployment Settings\nDESCRIPTION: Fly.io deployment configuration specifying release commands, port settings, HTTP service configuration, and static file paths.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n  release_command = \"python manage.py migrate --noinput\"\n\n[env]\n  PORT = \"8000\"\n\n[http_service]\n  internal_port = 8000\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = [\"app\"]\n\n[[statics]]\n  guest_path = \"/code/static\"\n  url_prefix = \"/static/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Document Content Types in Wagtail\nDESCRIPTION: Specifies which document types can be displayed inline within the rich text editor using WAGTAILDOCS_INLINE_CONTENT_TYPES setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/storing_and_serving.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_INLINE_CONTENT_TYPES = ['application/pdf', 'text/plain']\n```\n\n----------------------------------------\n\nTITLE: Configuring Django TEMPLATES Setting for Jinja2 in Python\nDESCRIPTION: This snippet shows how to configure Django's TEMPLATES setting to support both Django and Jinja2 template backends. It includes the necessary Wagtail extensions for Jinja2.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        # ... the rest of the existing Django template configuration ...\n    },\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'extensions': [\n                'wagtail.jinja2tags.core',\n                'wagtail.admin.jinja2tags.userbar',\n                'wagtail.images.jinja2tags.images',\n            ],\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Snippet with Function in Python\nDESCRIPTION: This snippet shows how to register a snippet using the register_snippet function in a wagtail_hooks.py file. It imports the Advert model and registers it as a snippet.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/registering.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# myapp/wagtail_hooks.py\nfrom wagtail.snippets.models import register_snippet\n\nfrom myapp.models import Advert\n\nregister_snippet(Advert)\n```\n\n----------------------------------------\n\nTITLE: Customizing Template for Account Settings Panel in Wagtail\nDESCRIPTION: Shows how to provide a custom template for a settings panel by specifying a template name in the panel class and creating the corresponding HTML template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_account_settings.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\n\nfrom wagtail.admin.views.account import BaseSettingsPanel\nfrom wagtail import hooks\nfrom .forms import CustomSettingsForm\n\n@hooks.register('register_account_settings_panel')\nclass CustomSettingsPanel(BaseSettingsPanel):\n    name = 'custom'\n    title = \"My custom settings\"\n    order = 500\n    form_class = CustomSettingsForm\n    template_name = 'myapp/admin/custom_settings.html'\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{# templates/myapp/admin/custom_settings.html #}\n\n{# This is the default template Wagtail uses, which just renders the form #}\n\n{% block content %}\n    {% for field in form %}\n        {% include \"wagtailadmin/shared/field.html\" with field=field %}\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Cache Module in Wagtail\nDESCRIPTION: Configuration for adding the frontend cache module to INSTALLED_APPS in Django settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    \"wagtail.contrib.frontend_cache\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Page.get_sitemap_urls() Method Signature\nDESCRIPTION: This snippet provides an update on how the Page.get_sitemap_urls() method now accepts an optional request keyword argument. It notes that developers who have overridden this method need to adjust their method signature accordingly.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThe ``Page.get_sitemap_urls()`` method used by the ``wagtail.contrib.sitemaps`` module has been updated to receive an optional ``request`` keyword argument. If you have overridden this method in your page models, you will need to update the method signature to accept this argument (and pass it on when calling ``super``, if applicable).\n```\n\n----------------------------------------\n\nTITLE: Registering Wagtail Admin Hooks for Report\nDESCRIPTION: Registers the report in Wagtail's admin interface by adding menu items and URL patterns using Wagtail hooks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, reverse\n\nfrom wagtail.admin.menu import AdminOnlyMenuItem\nfrom wagtail import hooks\n\nfrom .views import UnpublishedChangesReportView\n\n@hooks.register('register_reports_menu_item')\ndef register_unpublished_changes_report_menu_item():\n    return AdminOnlyMenuItem(\"Pages with unpublished changes\", reverse('unpublished_changes_report'), icon_name=UnpublishedChangesReportView.header_icon, order=700)\n\n@hooks.register('register_admin_urls')\ndef register_unpublished_changes_report_url():\n    return [\n        path('reports/unpublished-changes/', UnpublishedChangesReportView.as_view(), name='unpublished_changes_report'),\n        path('reports/unpublished-changes/results/', UnpublishedChangesReportView.as_view(results_only=True), name='unpublished_changes_report_results'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering Blockquote Feature for Wagtail Rich Text Editor in Python\nDESCRIPTION: Adds support for blockquote elements in Wagtail's rich text editor by registering a converter rule and appending 'blockquote' to the default feature set.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfeatures.register_converter_rule('editorhtml', 'blockquote', [\n    WhitelistRule('blockquote', allow_without_attributes),\n])\n\n# add 'blockquote' to the default feature set\nfeatures.default_features.append('blockquote')\n```\n\n----------------------------------------\n\nTITLE: Custom StructBlock Form Template in HTML\nDESCRIPTION: Provides an example of a custom form template for a StructBlock, replicating the default rendering with added flexibility for customization.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailadmin_tags  %}\n\n<div class=\"{{ classname }}\">\n    {% if help_text %}\n        <span>\n            <div class=\"help\">\n                {% icon name=\"help\" classname=\"default\" %}\n                {{ help_text }}\n            </div>\n        </span>\n    {% endif %}\n\n    {% for child in children.values %}\n        <div class=\"w-field\" data-field data-contentpath=\"{{ child.block.name }}\">\n            {% if child.block.label %}\n                <label class=\"w-field__label\" {% if child.id_for_label %}for=\"{{ child.id_for_label }}\"{% endif %}>{{ child.block.label }}{% if child.block.required %}<span class=\"w-required-mark\">*</span>{% endif %}</label>\n            {% endif %}\n            {{ child.render_form }}\n        </div>\n    {% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting DATA_UPLOAD_MAX_NUMBER_FIELDS in Django Settings\nDESCRIPTION: Configures the maximum number of fields allowed in a form submission to 10000, recommended for complex page models in Wagtail's page editor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom AppConfig for Wagtail Users in Python\nDESCRIPTION: This code defines a custom AppConfig for Wagtail users, specifying the custom GroupViewSet to be used.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# myproject/apps.py\nfrom wagtail.users.apps import WagtailUsersAppConfig\n\n\nclass CustomUsersAppConfig(WagtailUsersAppConfig):\n    group_viewset = \"myapp.viewsets.GroupViewSet\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Results Template in Wagtail using HTML+Django\nDESCRIPTION: This HTML+Django template is used to display the form results. It iterates through the results dictionary to show the count of answers for each question, along with the form itself.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n<html>\n    <head>\n        <title>{{ page.title }}</title>\n    </head>\n    <body>\n        <h1>{{ page.title }}</h1>\n\n        <h2>Results</h2>\n        {% for question, answers in results.items %}\n            <h3>{{ question }}</h3>\n            {% for answer, count in answers.items %}\n                <div>{{ answer }}: {{ count }}</div>\n            {% endfor %}\n        {% endfor %}\n\n        <div>{{ page.intro|richtext }}</div>\n        <form action=\"{% pageurl page %}\" method=\"POST\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <input type=\"submit\">\n        </form>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Main Footer Template Implementation\nDESCRIPTION: Complete footer template implementation that combines social media links and footer text. Uses the custom footer text template tag and conditional rendering for social media links.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{% load navigation_tags %}\n\n<footer>\n    <p>Built with Wagtail</p>\n\n    {% with linkedin_url=settings.base.NavigationSettings.linkedin_url github_url=settings.base.NavigationSettings.github_url mastodon_url=settings.base.NavigationSettings.mastodon_url %}\n        {% if linkedin_url or github_url or mastodon_url %}\n            <p>\n                Follow me on:\n                {% if github_url %}\n                    <a href=\"{{ github_url }}\">GitHub</a>\n                {% endif %}\n                {% if linkedin_url %}\n                    <a href=\"{{ linkedin_url }}\">LinkedIn</a>\n                {% endif %}\n                {% if mastodon_url %}\n                    <a href=\"{{ mastodon_url }}\">Mastodon</a>\n                {% endif %}\n            </p>\n        {% endif %}\n    {% endwith %}\n\n    {% get_footer_text %}\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Configuring HEIC/HEIF Image Support in Wagtail\nDESCRIPTION: Python configuration to enable HEIC/HEIF image uploads in Wagtail by adding 'heic' to the list of allowed image extensions. This allows users to upload images from Apple devices that use this format.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILIMAGES_EXTENSIONS = [\"gif\", \"jpg\", \"jpeg\", \"png\", \"webp\", \"heic\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Appearance\nDESCRIPTION: Customizing settings display in admin interface with icons and verbose names.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@register_setting(icon='placeholder')\nclass GenericSocialMediaSettings(BaseGenericSetting):\n    ...\n    class Meta:\n        verbose_name = \"Social media settings for all sites\"\n\n@register_setting(icon='placeholder')\nclass SiteSpecificSocialMediaSettings(BaseSiteSetting):\n    ...\n    class Meta:\n        verbose_name = \"Site-specific social media settings\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Migration Dependencies for Wagtail Core\nDESCRIPTION: Demonstrates how to set up migration dependencies to ensure Wagtail core migrations are available before running StreamField migrations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    dependencies = [\n        ('wagtailcore', '0069_log_entry_jsonfield'),\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Image Renditions to Wagtail API\nDESCRIPTION: Use ImageRenditionField to add renditions of images to the API, specifying resize operations and source.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.api import APIField\nfrom wagtail.images.api.fields import ImageRenditionField\n\nclass BlogPage(Page):\n    ...\n\n    api_fields = [\n        # Adds information about the source image (eg, title) into the API\n        APIField('feed_image'),\n\n        # Adds a URL to a rendered thumbnail of the image to the API\n        APIField('feed_image_thumbnail', serializer=ImageRenditionField('fill-100x100', source='feed_image')),\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Main Image Method to BlogPage\nDESCRIPTION: Custom method to retrieve the first gallery image for use as a thumbnail or featured image\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    def main_image(self):\n        gallery_item = self.gallery_images.first()\n        if gallery_item:\n            return gallery_item.image\n        else:\n            return None\n```\n\n----------------------------------------\n\nTITLE: Custom Image Format Implementation\nDESCRIPTION: Example of implementing a custom image format with updated classname convention\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# image_formats.py\nfrom django.utils.html import format_html\nfrom wagtail.images.formats import Format, register_image_format\n\n\nclass CustomImageFormat(Format):\n\n    def image_to_html(self, image, alt_text, extra_attributes=None):\n        # contrived example - pull out the class and render on outside element\n        classname = self.classname # not self.classnames\n        self.classname = \"\" # not self.classnames\n        inner_html = super().image_to_html(image, alt_text, extra_attributes)\n        return format_html(\"<custom-image class='{}'>{}</custom-image>\", classname, inner_html)\n\n\ncustom_format = CustomImageFormat('custom_example', 'Custom example', 'example-image object-fit', 'width-750')\n\nregister_image_format(custom_format)\n```\n\n----------------------------------------\n\nTITLE: StreamField Block Definition Example\nDESCRIPTION: Example showing nested StreamBlock definitions with various block types including CharBlock, DateBlock and custom blocks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyDeepNestedBlock(StreamBlock):\n    foo = CharBlock()\n    date = DateBlock()\n\nclass MyNestedBlock(StreamBlock):\n    char1 = CharBlock()\n    deepnested1 = MyDeepNestedBlock()\n\nclass MyStreamBlock(StreamBlock):\n    field1 = CharBlock()\n    nested1 = MyNestedBlock()\n\nclass MyPage(Page):\n    content = StreamField(MyStreamBlock)\n```\n\n----------------------------------------\n\nTITLE: Creating Wagtail Homepage Template with Django Template Language\nDESCRIPTION: HTML template for displaying the homepage content including hero image, text, and CTA button. Uses Django template tags for loading Wagtail components and conditional rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/customize_homepage.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n{% load wagtailcore_tags wagtailimages_tags %}\n\n{% block body_class %}template-homepage{% endblock %}\n\n{% block content %}\n    <div>\n        <h1>{{ page.title }}</h1>\n        {% image page.image fill-480x320 %}\n        <p>{{ page.hero_text }}</p>\n        {% if page.hero_cta_link %}\n            <a href=\"{% pageurl page.hero_cta_link %}\">\n                {% firstof page.hero_cta page.hero_cta_link.title %}\n            </a>\n        {% endif %}\n    </div>\n\n  {{ page.body|richtext }}\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Limiting Locked Pages Report Filter in Python\nDESCRIPTION: This code snippet limits the 'locked by' filter on the Locked pages report to only include users who currently have pages locked. This enhancement improves the usability of the report.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.6.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nOn the Locked pages report, limit the \"locked by\" filter to just users who have locked pages (Stefan Hammer)\n```\n\n----------------------------------------\n\nTITLE: Customizing Wagtail image format conversions in settings\nDESCRIPTION: This code snippet shows how to configure the WAGTAILIMAGES_FORMAT_CONVERSIONS setting to customize how image formats are converted. The example changes the default conversion behavior for AVIF, BMP, and WebP formats.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/image_file_formats.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    WAGTAILIMAGES_FORMAT_CONVERSIONS = {\n        'avif': 'avif',\n        'bmp': 'jpeg',\n        'webp': 'webp',\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Explorer Query in Wagtail\nDESCRIPTION: Shows how to customize page explorer queryset to show only user's profile page in specific section using construct_explorer_page_queryset hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('construct_explorer_page_queryset')\ndef show_my_profile_only(parent_page, pages, request):\n    # If we're in the 'user-profiles' section, only show the user's own profile\n    if parent_page.slug == 'user-profiles':\n        pages = pages.filter(owner=request.user)\n\n    return pages\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack Notifications for Page Publishing in Python\nDESCRIPTION: Example showing how to connect to Wagtail's page_published signal to send Slack notifications when a page is published. Demonstrates setting up a receiver function and connecting it to the signal.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/signals.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.signals import page_published\nimport requests\n\n\n# Let everyone know when a new page is published\ndef send_to_slack(sender, **kwargs):\n    instance = kwargs['instance']\n    url = 'https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX'\n    values = {\n        \"text\" : \"%s was published by %s \" % (instance.title, instance.owner.username),\n        \"channel\": \"#publish-notifications\",\n        \"username\": \"the squid of content\",\n        \"icon_emoji\": \":octopus:\"\n    }\n\n    response = requests.post(url, values)\n\n# Register a receiver\npage_published.connect(send_to_slack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Available Languages in Wagtail\nDESCRIPTION: Configuration of available languages for both frontend display and content authoring in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# my_project/settings.py\n\nWAGTAIL_CONTENT_LANGUAGES = LANGUAGES = [\n    ('en', \"English\"),\n    ('fr', \"French\"),\n    ('es', \"Spanish\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Menu Items - Wagtail QuerySet - Python\nDESCRIPTION: Fetches live child pages of the homepage that are marked to be shown in menus. It's necessary to have a 'homepage' Page instance. The returned QuerySet comprises child pages with the 'show_in_menus' flag set to true.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/queryset_reference.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmenu_items = homepage.get_children().live().in_menu()\n```\n\n----------------------------------------\n\nTITLE: Initializing MigrateStreamData Operation for StreamField Migration in Python\nDESCRIPTION: Constructor for MigrateStreamData class, a subclass of RunPython for StreamField data migration operations. It takes app name, model name, field name, and a list of operations to apply to specified block paths.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(app_name,\n             model_name,\n             field_name,\n             operations_and_block_paths,\n             revisions_from=None,\n             chunk_size=1024,\n             **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Updating Site Retrieval Method in Python\nDESCRIPTION: This code snippet demonstrates the change in how to retrieve the current site from the request object in Python code. Instead of using the deprecated 'request.site', the new method is to utilize 'Site.find_for_request(request)'. This change aims to enhance efficiency by eliminating unnecessary database queries.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.9.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# old version\n\ndef get_menu_items(request):\n    return request.site.root_page.get_children().live()\n\n# new version\n\nfrom wagtail.core.models import Site\n\ndef get_menu_items(request):\n    return Site.find_for_request(request).root_page.get_children().live()\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Wagtail API\nDESCRIPTION: Configuration setting for specifying the base URL used in document file URL generation and frontend cache invalidation. Required when using frontend cache invalidation feature.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILAPI_BASE_URL\n```\n\n----------------------------------------\n\nTITLE: Rendering Moderation Rejection Notification in Django Template\nDESCRIPTION: Template code for displaying a moderation rejection notification, handling both page and generic model objects. Includes logic for showing the rejected item's title, moderation task name, and edit URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/task_state_rejected.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %} {% if page %}\n{% blocktrans trimmed with title=page.get_admin_display_title|safe task=task.name|safe %}The page \"{{ title }}\" has been rejected in moderation stage \"{{ task }}\".{% endblocktrans %}\n{% trans \"You can edit the page here:\"} {{ base_url }}{% url 'wagtailadmin_pages:edit' page.id %} {% else %} {% latest_str object as title %} {% admin_edit_url object user as edit_url %}\n{% blocktrans trimmed with title=title|safe task=task.name|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been rejected in moderation stage \"{{ task }}\".\n{% endblocktrans %}{{ message|capfirst|safe }}\n{% if edit_url %}{% blocktrans trimmed with model_name=model_name|safe asvar edit_message %}\n    You can edit the {{ model_name }} here:\n{% endblocktrans %}{{ edit_message|capfirst|safe }} {{ base_url }}{{ edit_url }}{% endif %}{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Backblaze B2 Environment Variables for Wagtail\nDESCRIPTION: Example of how to fill in the .env.production file with actual Backblaze B2 bucket information and credentials.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAWS_STORAGE_BUCKET_NAME=yourname-wagtail-portfolio\nAWS_S3_ENDPOINT_URL=https://s3.us-east-005.backblazeb2.com\nAWS_S3_REGION_NAME=us-east-005\nAWS_S3_ACCESS_KEY_ID=your Backblaze keyID\nAWS_S3_SECRET_ACCESS_KEY=your Backblaze applicationKey\nDJANGO_ALLOWED_HOSTS=\nDJANGO_CSRF_TRUSTED_ORIGINS=https://\nDJANGO_SETTINGS_MODULE=mysite.settings.production\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Icons to the Wagtail Userbar\nDESCRIPTION: Template override to add custom icons to the Wagtail userbar. This extends the base userbar template and adds additional SVG icons to the icons block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/icons.md#2025-04-21_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{# <yourapp>/templates/wagtailadmin/userbar/base.html #}\n{% extends \"wagtailadmin/userbar/base.html\" %}\n\n{% block icons %}\n    {{ block.super }}\n    {% include \"wagtailadmin/icons/toucan.svg\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Panel with BoundPanel in Python\nDESCRIPTION: Demonstrates how to create a custom panel with initialization logic using the new BoundPanel class in Wagtail. This replaces the previous on_request_bound, on_instance_bound, and on_form_bound methods.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/3.0.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPanel(Panel):\n    class BoundPanel(Panel.BoundPanel):\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n            # The attributes self.panel, self.request, self.instance and self.form\n            # are available here\n```\n\n----------------------------------------\n\nTITLE: Using fullpageurl() Function in Jinja2 Template\nDESCRIPTION: This snippet demonstrates how to use the fullpageurl() function to generate an absolute URL for a Page instance in a Jinja2 template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_1\n\nLANGUAGE: html+jinja\nCODE:\n```\n<meta property=\"og:url\" content=\"{{ fullpageurl(page) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Rich Text Field Configuration in Wagtail\nDESCRIPTION: Example of implementing a rich text field in a BookPage model using RichTextField with basic field panel configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/page_editing_interface.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.fields import RichTextField\nfrom wagtail.admin.panels import FieldPanel\n\n\nclass BookPage(Page):\n    body = RichTextField()\n\n    content_panels = Page.content_panels + [\n        FieldPanel('body'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Embed.ly Integration\nDESCRIPTION: Configuration for using the Embed.ly service as an embed finder.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILEMBEDS_FINDERS = [\n    {\n        'class': 'wagtail.embeds.finders.embedly',\n        'key': 'YOUR EMBED.LY KEY HERE'\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Embed Finder Class in Python for Wagtail\nDESCRIPTION: This code snippet provides a skeleton for creating a custom embed finder class in Wagtail. It includes methods for accepting URLs and finding embed information, which can be customized for specific embed sources.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.embeds.finders.base import EmbedFinder\n\n\nclass ExampleFinder(EmbedFinder):\n    def __init__(self, **options):\n        pass\n\n    def accept(self, url):\n        \"\"\"\n        Returns True if this finder knows how to fetch an embed for the URL.\n\n        This should not have any side effects (no requests to external servers)\n        \"\"\"\n        pass\n\n    def find_embed(self, url, max_width=None):\n        \"\"\"\n        Takes a URL and max width and returns a dictionary of information about the\n        content to be used for embedding it on the site.\n\n        This is the part that may make requests to external APIs.\n        \"\"\"\n        # TODO: Perform the request\n\n        return {\n            'title': \"Title of the content\",\n            'author_name': \"Author name\",\n            'provider_name': \"Provider name (such as YouTube, Vimeo, etc)\",\n            'type': \"Either 'photo', 'video', 'link' or 'rich'\",\n            'thumbnail_url': \"URL to thumbnail image\",\n            'width': width_in_pixels,\n            'height': height_in_pixels,\n            'html': \"<h2>The Embed HTML</h2>\",\n        }\n```\n\n----------------------------------------\n\nTITLE: Main Menu Modification Hook\nDESCRIPTION: Example of modifying the main menu items to hide the explorer menu for a specific user.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\n@hooks.register('construct_main_menu')\ndef hide_explorer_menu_item_from_frank(request, menu_items):\n  if request.user.username == 'frank':\n    menu_items[:] = [item for item in menu_items if item.name != 'explorer']\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Front Door Backend in Wagtail\nDESCRIPTION: This snippet shows how to configure the Azure Front Door backend in Wagtail's WAGTAILFRONTENDCACHE setting. It includes the required backend class, resource group name, and Front Door instance name.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n    'azure_front_door': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.AzureFrontDoorBackend',\n        'RESOURCE_GROUP_NAME': 'MY-WAGTAIL-RESOURCE-GROUP',\n        'FRONT_DOOR_NAME': 'wagtail-io-front-door',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Task Model Definition in Python\nDESCRIPTION: Creates a basic custom task model by inheriting from wagtail.models.Task\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# <project>/models.py\n\nfrom wagtail.models import Task\n\n\nclass UserApprovalTask(Task):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Testing OpenCV Installation in Python\nDESCRIPTION: Python code to test if OpenCV is correctly installed by importing the cv2 module.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3\n>>> import cv2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Comments Relation Name with Backward Compatibility\nDESCRIPTION: Code snippet that retrieves the admin comments relation name with backward compatibility for previous Wagtail versions. This is useful for reusable library code that needs to work across different Wagtail versions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.14.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from wagtail.core.models import COMMENTS_RELATION_NAME\nexcept ImportError:\n    COMMENTS_RELATION_NAME = 'comments'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Entity Source Component in JavaScript\nDESCRIPTION: This JavaScript code defines the source component for the custom stock entity. It creates new entity instances in the editor using the Draft.js API, inserting a random stock symbol when activated.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Not a real React component – just creates the entities as soon as it is rendered.\nclass StockSource extends window.React.Component {\n  componentDidMount() {\n    const { editorState, entityType, onComplete } = this.props;\n\n    const content = editorState.getCurrentContent();\n    const selection = editorState.getSelection();\n\n    const demoStocks = ['AMD', 'AAPL', 'NEE', 'FSLR'];\n    const randomStock = demoStocks[Math.floor(Math.random() * demoStocks.length)];\n\n    // Uses the Draft.js API to create a new entity with the right data.\n    const contentWithEntity = content.createEntity(\n      entityType.type,\n      'IMMUTABLE',\n      { stock: randomStock },\n    );\n    const entityKey = contentWithEntity.getLastCreatedEntityKey();\n\n    // We also add some text for the entity to be activated on.\n    const text = `$${randomStock}`;\n\n    const newContent = window.DraftJS.Modifier.replaceText(\n      content,\n      selection,\n      text,\n      null,\n      entityKey,\n    );\n    const nextState = window.DraftJS.EditorState.push(\n      editorState,\n      newContent,\n      'insert-characters',\n    );\n\n    onComplete(nextState);\n  }\n\n  render() {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Portfolio Page Template\nDESCRIPTION: HTML template for rendering the portfolio page content with Wagtail template tags.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% load wagtailcore_tags wagtailimages_tags %}\n\n{% block body_class %}template-portfolio{% endblock %}\n\n{% block content %}\n    <h1>{{ page.title }}</h1>\n\n    {{ page.body }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Python Hook for Loading Custom JavaScript\nDESCRIPTION: Python code using Wagtail hooks to load custom JavaScript files into the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('insert_global_admin_js')\ndef global_admin_js():\n    return format_html(\n        f'<script src=\"{static(\"js/example.js\")}\"></script>',\n    )\n```\n\n----------------------------------------\n\nTITLE: Image-related URL Templates in Wagtail Admin\nDESCRIPTION: Shows URL templates for image-related actions in Wagtail admin, including listing images, editing, deleting, adding a new image, and viewing image usage.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_15\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailimages:index' %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailimages:edit' image_id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailimages:delete' image_id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailimages:add' %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailimages:image_usage' image_id %}\n```\n\n----------------------------------------\n\nTITLE: Front-end JavaScript for Enhancing Custom Stock Entity Display\nDESCRIPTION: This JavaScript code demonstrates how to enhance the display of stock entities on the front-end by adding links and simple sparkline charts to the stock symbols.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelectorAll('[data-stock]').forEach((elt) => {\n  const link = document.createElement('a');\n  link.href = `https://finance.yahoo.com/quote/${elt.dataset.stock}`;\n  link.innerHTML = `${elt.innerHTML}<svg width=\"50\" height=\"20\" stroke-width=\"2\" stroke=\"blue\" fill=\"rgba(0, 0, 255, .2)\"><path d=\"M4 14.19 L 4 14.19 L 13.2 14.21 L 22.4 13.77 L 31.59 13.99 L 40.8 13.46 L 50 11.68 L 59.19 11.35 L 68.39 10.68 L 77.6 7.11 L 86.8 7.85 L 96 4\" fill=\"none\"></path><path d=\"M4 14.19 L 4 14.19 L 13.2 14.21 L 22.4 13.77 L 31.59 13.99 L 40.8 13.46 L 50 11.68 L 59.19 11.35 L 68.39 10.68 L 77.6 7.11 L 86.8 7.85 L 96 4 V 20 L 4 20 Z\" stroke=\"none\"></path></svg>`;\n\n  elt.innerHTML = '';\n  elt.appendChild(link);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wagtail User Bar in Template\nDESCRIPTION: Example showing proper placement of the wagtailuserbar tag in an HTML template, positioned after skip links but before main content for accessibility.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailuserbar %}\n...\n<body>\n    <a id=\"#content\">Skip to content</a>\n    {% wagtailuserbar %} {# This is a good place for the user bar #}\n    <nav>\n    ...\n    </nav>\n    <main id=\"content\">\n    ...\n    </main>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Checking Django Version Compatibility in Python\nDESCRIPTION: Demonstrates the proper way to handle Django version-specific code using version comparison. Shows how to check Django version explicitly rather than using try-except blocks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/python_guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import VERSION as DJANGO_VERSION\n\nif DJANGO_VERSION >= (1, 9):\n    # Use new attribute\n    related_field = field.rel\nelse:\n    # Use old, deprecated attribute\n    related_field = field.related\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Image Model Migrations for Wagtail 2.4\nDESCRIPTION: Demonstrates how to update migration code in projects with a custom image model created on Wagtail versions before 1.8 to resolve potential errors. Dependencies include Django ORM and understanding of migration processes in Django frameworks. The snippet involves changing a ForeignKey reference to an IntegerField to ensure compatibility with Wagtail 2.4.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n(\"filter\", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Filter')),\n```\n\nLANGUAGE: Python\nCODE:\n```\n(\"filter\", models.IntegerField(blank=True, null=True)),\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Settings Models\nDESCRIPTION: Examples of creating generic and site-specific settings models using BaseGenericSetting and BaseSiteSetting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom wagtail.contrib.settings.models import (\n    BaseGenericSetting,\n    BaseSiteSetting,\n    register_setting,\n)\n\n@register_setting\nclass GenericSocialMediaSettings(BaseGenericSetting):\n    facebook = models.URLField()\n\n@register_setting\nclass SiteSpecificSocialMediaSettings(BaseSiteSetting):\n    facebook = models.URLField()\n```\n\n----------------------------------------\n\nTITLE: Enabling Wagtail API v2 App in Django Settings\nDESCRIPTION: Add the 'wagtail.api.v2' app to INSTALLED_APPS in the Django project settings to enable the Wagtail API.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n\n    'wagtail.api.v2',\n\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Settings UI with TabbedInterface\nDESCRIPTION: Example of customizing settings interface using TabbedInterface and ObjectList for organized editing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.panels import TabbedInterface, ObjectList\n\n@register_setting\nclass MySettings(BaseGenericSetting):\n    # ...\n    first_tab_panels = [\n        FieldPanel('field_1'),\n    ]\n    second_tab_panels = [\n        FieldPanel('field_2'),\n    ]\n\n    edit_handler = TabbedInterface([\n        ObjectList(first_tab_panels, heading='First tab'),\n        ObjectList(second_tab_panels, heading='Second tab'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering View Permission for Snippets Without Inspect View in Python\nDESCRIPTION: Shows how to override get_permissions_to_register to register the 'view' permission for snippets without enabling the inspect view.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.models import ContentType\n\nclass FooViewSet(SnippetViewSet):\n    def get_permissions_to_register(self):\n        content_type = ContentType.objects.get_for_model(self.model)\n        return Permission.objects.filter(content_type=content_type)\n```\n\n----------------------------------------\n\nTITLE: Paginating Query Results in Django\nDESCRIPTION: This snippet replaces Wagtail's deprecated pagination method with Django's Paginator class for paginating query results. It requires the Paginator module from django.core.paginator to make query results pagination compatible with new Django versions. Key parameters include object_list (the items to paginate) and per_page (number of items per page). Expected output is a page object containing paginated results.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.paginator import Paginator\n\npaginator = Paginator(object_list, per_page=25)\npage = paginator.get_page(request.GET.get('p'))\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar View with CSS in Wagtail Admin\nDESCRIPTION: CSS styles to improve the appearance of the calendar view within the Wagtail admin interface, providing proper spacing and layout for the calendar table.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* calendar.css */\ntable.month {\n    margin: 20px;\n}\n\ntable.month td,\ntable.month th {\n    padding: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Form Fields Limit\nDESCRIPTION: Configuration to increase the maximum number of form fields allowed in submissions\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000\n```\n\n----------------------------------------\n\nTITLE: Customizing Accessibility Checker Rules in Python\nDESCRIPTION: Example of how to customize the Wagtail accessibility checker by creating a subclass of AccessibilityItem to modify paragraph-as-heading detection rules.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/accessibility_considerations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.userbar import AccessibilityItem\n\n\nclass CustomAccessibilityItem(AccessibilityItem):\n    def get_axe_custom_checks(self, request):\n        checks = super().get_axe_custom_checks(request)\n        # Flag heading-like paragraphs based only on font weight compared to surroundings.\n        checks.append(\n            {\n                \"id\": \"p-as-heading\",\n                \"options\": {\n                    \"margins\": [\n                        { \"weight\": 150 },\n                    ],\n                    \"passLength\": 1,\n                    \"failLength\": 0.5\n                },\n            },\n        )\n        return checks\n\n\n@hooks.register('construct_wagtail_userbar')\ndef replace_userbar_accessibility_item(request, items, page):\n    items[:] = [CustomAccessibilityItem() if isinstance(item, AccessibilityItem) else item for item in items]\n```\n\n----------------------------------------\n\nTITLE: Running convert_mariadb_uuids Management Command for Django 5.0 Upgrade\nDESCRIPTION: This command is used to convert existing UUID fields used by Wagtail to the new format compatible with Django 5.0+ and MariaDB 10.7+. It should be run after upgrading to resolve potential errors with UUID fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.5.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py convert_mariadb_uuids\n```\n\n----------------------------------------\n\nTITLE: Defining StreamChildrenToStructBlockOperation for StreamBlock to StructBlock Conversion in Python\nDESCRIPTION: Class definition for StreamChildrenToStructBlockOperation, which moves each StreamBlock child of a given type inside a new StructBlock. It creates a new StructBlock for each child block of the given type.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass StreamChildrenToStructBlockOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Site Model Methods and Properties in Wagtail CMS\nDESCRIPTION: Documentation for the methods and properties of the Site model in Wagtail, including functions to find sites for requests and get root URLs.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Site:\n    # Methods and properties\n    \n    find_for_request\n        # Returns the Site object that will handle the given HTTP request\n    \n    root_url\n        # This returns the URL of the site. It is calculated from the hostname and the port fields.\n        # The scheme part of the URL is calculated based on value of the port field:\n        # - 80 = http://\n        # - 443 = https://\n        # - Everything else will use the http:// scheme and the port will be appended to the end of the hostname\n    \n    get_site_root_paths\n```\n\n----------------------------------------\n\nTITLE: Implementing Wagtail RichText Template Tag\nDESCRIPTION: Demonstrates how to load and use Wagtail's richtext filter to render RichTextField content in templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: django\nCODE:\n```\n{% load wagtailcore_tags %}\n{{ page.body|richtext }}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail using pip\nDESCRIPTION: Command to install Wagtail using pip package manager in a virtual environment.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/quick_install.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install wagtail\n```\n\n----------------------------------------\n\nTITLE: Registering API Endpoints with WagtailAPIRouter in Python\nDESCRIPTION: The code illustrates the process of registering API endpoints using the Wagtail API Router. This snippet highlights the transition from the older class structures to new view set classes, which align with the Django REST Framework standards. It requires Wagtail's API and router modules and is used for setting up API endpoints for pages, images, and documents.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.8.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.api.v2.endpoints import PagesAPIEndpoint\nfrom wagtail.api.v2.router import WagtailAPIRouter\nfrom wagtail.images.api.v2.endpoints import ImagesAPIEndpoint\nfrom wagtail.documents.api.v2.endpoints import DocumentsAPIEndpoint\n\napi_router = WagtailAPIRouter('wagtailapi')\napi_router.register_endpoint('pages', PagesAPIEndpoint)\napi_router.register_endpoint('images', ImagesAPIEndpoint)\napi_router.register_endpoint('documents', DocumentsAPIEndpoint)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.api.v2.views import PagesAPIViewSet\nfrom wagtail.api.v2.router import WagtailAPIRouter\nfrom wagtail.images.api.v2.views import ImagesAPIViewSet\nfrom wagtail.documents.api.v2.views import DocumentsAPIViewSet\n\napi_router = WagtailAPIRouter('wagtailapi')\napi_router.register_endpoint('pages', PagesAPIViewSet)\napi_router.register_endpoint('images', ImagesAPIViewSet)\napi_router.register_endpoint('documents', DocumentsAPIViewSet)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Cache with API Key\nDESCRIPTION: Settings configuration for Cloudflare cache backend using account-wide API key authentication.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nWAGTAILFRONTENDCACHE = {\n    'cloudflare': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudflareBackend',\n        'EMAIL': 'your-cloudflare-email-address@example.com',\n        'API_KEY': 'your cloudflare api key',\n        'ZONEID': 'your cloudflare domain zone id',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up URL Patterns for Internationalization\nDESCRIPTION: Configuration of URL patterns to handle both translatable and non-translatable URLs in a Wagtail project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /my_project/urls.py\n\nfrom django.conf.urls.i18n import i18n_patterns\n\n# Non-translatable URLs\nurlpatterns = [\n    path('django-admin/', admin.site.urls),\n    path('admin/', include(wagtailadmin_urls)),\n    path('documents/', include(wagtaildocs_urls)),\n]\n\n# Translatable URLs\nurlpatterns += i18n_patterns(\n    path('search/', search_views.search, name='search'),\n    path(\"\", include(wagtail_urls)),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up a Wagtail project\nDESCRIPTION: Series of commands to set up a new Wagtail project, including installing requirements, running migrations, creating a superuser, and starting the development server.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/quick_install.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Template Context Processor for AMP Mode\nDESCRIPTION: Implements a context processor to make AMP mode state available in templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom .amp_utils import amp_mode_active\n\ndef amp(request):\n    return {\n        'amp_mode_active': amp_mode_active(),\n    }\n```\n\n----------------------------------------\n\nTITLE: HomePage Template\nDESCRIPTION: Django template for rendering the HomePage content\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n<!-- load wagtailcore_tags by adding this: -->\n{% load wagtailcore_tags %}\n\n{% block body_class %}template-homepage{% endblock %}\n\n<!-- replace everything below with: -->\n{% block content %}\n    {{ page.body|richtext }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Callable Messages for Log Actions in Python\nDESCRIPTION: This example shows how to update code that previously used callable messages for audit logging with the register_log_actions hook. It demonstrates the recommended approach of creating a subclass of wagtail.core.log_actions.LogFormatter to define a message that depends on the log entry's data. This update is required because passing callables as messages is deprecated.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n \"from django.utils.translation import gettext_lazy as _\nfrom wagtail.core import hooks\n\n@hooks.register('register_log_actions')\ndef additional_log_actions(actions):\n\n    def greeting_message(data):\n        return _('Hello %(audience)s') % {\n            'audience': data['audience'],\n        }\n    actions.register_action('wagtail_package.greet_audience', _('Greet audience'), greeting_message)\"\n```\n\nLANGUAGE: python\nCODE:\n```\n \"from django.utils.translation import gettext_lazy as _\nfrom wagtail.core import hooks\nfrom wagtail.core.log_actions import LogFormatter\n\n@hooks.register('register_log_actions')\ndef additional_log_actions(actions):\n\n    @actions.register_action('wagtail_package.greet_audience')\n    class GreetingActionFormatter(LogFormatter):\n        label = _('Greet audience')\n\n        def format_message(self, log_entry):\n            return _('Hello %(audience)s') % {\n                'audience': log_entry.data['audience'],\n            }\"\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller for Custom Editor in JavaScript\nDESCRIPTION: Shows the JavaScript implementation of a Stimulus controller for the custom editor widget, which replaces the old WidgetWithScript approach.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// myapp/static/js/custom-editor-controller.js\n\nclass CustomEditorController extends window.StimulusModule.Controller {\n    connect() {\n        window.customEditorInitScript(this.element.id);\n    }\n}\n\nwindow.wagtail.app.register('custom-editor', CustomEditorController);\n```\n\n----------------------------------------\n\nTITLE: Side Panel Implementation - New Pattern\nDESCRIPTION: Updated implementation using individual side panel components with MediaContainer\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.ui.components import MediaContainer\nfrom wagtail.admin.ui.side_panels import PageStatusSidePanel, PreviewSidePanel\n\n\ndef my_view(request):\n    ...\n\n    side_panels = [\n        PageStatusSidePanel(\n            page,\n            request,\n            show_schedule_publishing_toggle=False,\n            live_object=page,\n            scheduled_object=page.get_scheduled_revision_as_object(),\n            locale=page.locale,\n            translations=translations,\n        ),\n        PreviewSidePanel(\n            page,\n            request,\n            preview_url=reverse(\"wagtailadmin_pages:preview_on_edit\", args=[page.id]),\n        ),\n    ]\n    side_panels = MediaContainer(side_panels)\n\n    return render(\n        request,\n        template_name,\n        {\"page\": page, \"side_panels\": side_panels, \"media\": side_panels.media},\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtered PersonChooserViewSet in Python for Wagtail\nDESCRIPTION: This snippet demonstrates how to set up a PersonChooserViewSet with filtering capabilities based on URL parameters, specifically for filtering by country.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass PersonChooserViewSet(ChooserViewSet):\n    model = \"myapp.Person\"\n    url_filter_parameters = [\"country\"]\n    preserve_url_parameters = [\"multiple\", \"country\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Django templates for internationalization context processor\nDESCRIPTION: This Python code snippet shows how to add the django.template.context_processors.i18n context processor to the TEMPLATES setting in Django, which is required for advanced language selection functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# myproject/settings.py\n\nTEMPLATES = [\n    {\n        # ...\n        'OPTIONS': {\n            'context_processors': [\n                # ...\n                'django.template.context_processors.i18n',\n            ],\n        },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Version-Specific Helper Functions in Python\nDESCRIPTION: Shows how to encapsulate Django version checks in a helper function for cleaner code when dealing with version-specific functionality multiple times.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/python_guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport django\n\ndef related_field(field):\n    if DJANGO_VERSION >= (1, 9):\n        return field.rel\n    else:\n        return field.related\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript for Formatting Titles in Page Editor Only\nDESCRIPTION: This example shows how to register a JavaScript file that only runs in the page editor context using the 'insert_editor_js' hook. This ensures the title formatting is only applied when uploading images from within a page editor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/title_generation_on_upload.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.templatetags.static import static\nfrom django.utils.html import format_html\n\nfrom wagtail import hooks\n\n@hooks.register(\"insert_editor_js\")\ndef get_global_admin_js():\ndef insert_remove_dashes_underscores_js():\n    script_url = static('js/remove_dashes_underscores.js')\n    return format_html('<script src=\"{}\"></script>', script_url)\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Step Form Template in Wagtail using HTML+Django\nDESCRIPTION: This HTML+Django template is used to render the multi-step form. It includes the form fields and a submit button, with the action URL set to the next step of the form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n<html>\n    <head>\n        <title>{{ page.title }}</title>\n    </head>\n    <body>\n        <h1>{{ page.title }}</h1>\n\n        <div>{{ page.intro|richtext }}</div>\n        <form action=\"{% pageurl page %}?p={{ fields_step.number|add:\"1\" }}\" method=\"POST\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <input type=\"submit\">\n        </form>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling LocaleMiddleware for language auto-detection in Django settings\nDESCRIPTION: This code snippet shows how to add LocaleMiddleware to the MIDDLEWARE setting in Django to enable automatic language detection based on the user's browser settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# my_project/settings.py\n\nMIDDLEWARE = [\n    # ...\n    'django.middleware.locale.LocaleMiddleware',\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Component with Media Definitions\nDESCRIPTION: Example of adding CSS and JavaScript resources to a component using Media class\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass WelcomePanel(Component):\n    template_name = 'my_app/panels/welcome.html'\n\n    class Media:\n        css = {\n            'all': ('my_app/css/welcome-panel.css',)\n        }\n```\n\n----------------------------------------\n\nTITLE: Purging Old Revisions\nDESCRIPTION: Command to delete old revisions with options for specifying age and type of content to purge.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmanage.py purge_revisions [--days=<number of days>] [--pages] [--non-pages]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Entity Decorator Component in JavaScript\nDESCRIPTION: This JavaScript code defines the decorator component for displaying the custom stock entity within the editor. It renders the entity as a clickable link that opens the stock's Yahoo Finance page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stock = (props) => {\n  const { entityKey, contentState } = props;\n  const data = contentState.getEntity(entityKey).getData();\n\n  return window.React.createElement(\n    'a',\n    {\n      role: 'button',\n      onMouseUp: () => {\n        window.open(`https://finance.yahoo.com/quote/${data.stock}`);\n      },\n    },\n    props.children,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Site Retrieval Method in Django Templates\nDESCRIPTION: This snippet illustrates how to update the template to accommodate the new method of accessing the current site. The old method uses 'request.site', while the new method utilizes the 'wagtail_site' tag. This change improves compatibility with Django's framework and reduces reliance on deprecated components.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.9.rst#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{# old version #}\n<h1>Welcome to the {{ request.site.site_name }} website!</h1>\n\n\n{# new version #}\n{% load wagtailcore_tags %}\n{% wagtail_site as current_site %}\n\n<h1>Welcome to the {{ current_site.site_name }} website!</h1>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Code in Verbatim Tags\nDESCRIPTION: This Django template code snippet illustrates how to wrap code within `{% verbatim %}{% endverbatim %}` tags.  This prevents the template engine from attempting to parse the code, which is useful when the template contains syntax that conflicts with the template engine's syntax, such as when creating custom project templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/project_template.md#2025-04-21_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n\"{% verbatim %}\\n{% extends \\\"base.html\\\" %}\\n\\n{% load wagtailcore_tags %}\\n\\n{% block body_class %}template-blogindexpage{% endblock %}\\n\\n{% block content %}\\n    <h1>{{ page.title }}</h1>\\n    <div class=\\\"intro\\\">{{ page.intro|richtext }}</div>\\n    {% for post in page.get_children %}\\n        <h2><a href=\\\"{% pageurl post %}\\\">{{ post.title }}</a></h2>\\n        {{ post.specific.intro }}\\n        {{ post.specific.body }}\\n    {% endfor %}\\n{% endblock %}\\n{% endverbatim %}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed HTTP Methods in Wagtail Pages\nDESCRIPTION: Example of customizing the allowed_http_methods attribute using Python's HTTPMethod enum to restrict which HTTP methods a page responds to. This shows both the Python 3.11+ approach using the enum and the backward-compatible string approach.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom http import HTTPMethod\n\nclass MyPage(Page):\n    allowed_http_methods = [HTTPMethod.GET, HTTPMethod.OPTIONS]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyPage(Page):\n    allowed_http_methods = [\"GET\", \"OPTIONS\"]\n```\n\n----------------------------------------\n\nTITLE: Updating InlinePanel Definition Syntax in Python\nDESCRIPTION: Example showing old (deprecated) and new syntax for defining InlinePanel in Wagtail. The new format removes the requirement to specify the base model parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nInlinePanel(HomePage, 'carousel_items', label=\"Carousel items\")\n\n# New format:\nInlinePanel('carousel_items', label=\"Carousel items\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Tags in Blog Page Template (Django HTML)\nDESCRIPTION: This HTML template snippet demonstrates how to render tags on a BlogPage. It includes a loop to display all tags associated with the page and links to a tag index page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"{{ page.get_parent.url }}\">Return to blog</a></p>\n\n<!-- Add this: -->\n{% with tags=page.tags.all %}\n    {% if tags %}\n        <div class=\"tags\">\n            <h3>Tags</h3>\n            {% for tag in tags %}\n                <a href=\"{% slugurl 'tags' %}?tag={{ tag }}\"><button type=\"button\">{{ tag }}</button></a>\n            {% endfor %}\n        </div>\n    {% endif %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Removing URL Unsafe Characters from Image Titles in Wagtail\nDESCRIPTION: This JavaScript listens for the 'wagtail:images-upload' event and replaces any non-alphanumeric characters (except spaces and hyphens) from the automatically generated image title.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/title_generation_on_upload.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('wagtail:images-upload', function (event) {\n        const newTitle = (event.detail.data.title || '').replace(\n            /[^a-zA-Z0-9\\s-]/g,\n            '',\n        );\n        event.detail.data.title = newTitle;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Image Format Validator in Django 1.7+ Migrations\nDESCRIPTION: Example of updating a custom image model migration by removing the deprecated validate_image_format validator from the ImageField definition. Shows both the original and corrected code for proper migration in Django 1.7+.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.8.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport wagtail.wagtailimages.utils.validators\n```\n\nLANGUAGE: Python\nCODE:\n```\n('file', models.ImageField(upload_to=wagtail.wagtailimages.models.get_upload_to,\n    width_field='width', height_field='height',\n    validators=[wagtail.wagtailimages.utils.validators.validate_image_format],\n    verbose_name='File'))\n```\n\nLANGUAGE: Python\nCODE:\n```\n('file', models.ImageField(upload_to=wagtail.wagtailimages.models.get_upload_to,\n    width_field='width', height_field='height', verbose_name='File'))\n```\n\n----------------------------------------\n\nTITLE: Permission-Based Panel Access in Wagtail\nDESCRIPTION: Shows how to implement permission-based access control for different panel groups using the permission attribute on ObjectList for a FundingPage model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/page_editing_interface.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.panels import TabbedInterface, TitleFieldPanel, ObjectList\n\nclass FundingPage(Page):\n    # field definitions omitted\n\n    shared_panels = [\n        TitleFieldPanel('title', classname=\"title\"),\n        FieldPanel('date'),\n        FieldPanel('body'),\n    ]\n    private_panels = [\n        FieldPanel('approval'),\n    ]\n\n    edit_handler = TabbedInterface([\n        ObjectList(shared_panels, heading='Details'),\n        ObjectList(private_panels, heading='Admin only', permission=\"superuser\"),\n        ObjectList(Page.promote_panels, heading='Promote'),\n        ObjectList(Page.settings_panels, heading='Settings'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing PagesAPIViewSet with Specific Model\nDESCRIPTION: Subclass PagesAPIViewSet to use a specific model for page results.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.renderers import JSONRenderer\n\n# ...\n\nclass PostPagesAPIViewSet(PagesAPIViewSet):\n    model = models.BlogPage\n\n\napi_router.register_endpoint(\"posts\", PostPagesAPIViewSet)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Edit and Creation Forms in Python\nDESCRIPTION: Demonstrates how to create custom forms for editing and creating users, replacing the deprecated WAGTAIL_USER_CUSTOM_FIELDS setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CustomUserEditForm(UserEditForm):\n    status = forms.ModelChoiceField(queryset=MembershipStatus.objects, required=True, label=_(\"Status\"))\n\n    class Meta(UserEditForm.Meta):\n        fields = UserEditForm.Meta.fields | {\"country\", \"status\"}\n\nclass CustomUserCreationForm(UserCreationForm):\n    status = forms.ModelChoiceField(queryset=MembershipStatus.objects, required=True, label=_(\"Status\"))\n\n    class Meta(UserCreationForm.Meta):\n        fields = UserEditForm.Meta.fields | {\"country\", \"status\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Serving Method in Wagtail\nDESCRIPTION: Sets the method for serving documents in Wagtail using WAGTAILDOCS_SERVE_METHOD setting. The redirect method is used for performance-optimized document serving.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/storing_and_serving.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_SERVE_METHOD = \"redirect\"\n```\n\n----------------------------------------\n\nTITLE: Converting MariaDB UUIDs\nDESCRIPTION: Command for upgrading UUID handling when moving to Django 5.0 and MariaDB 10.7.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py convert_mariadb_uuids\n```\n\n----------------------------------------\n\nTITLE: Installing RoutablePageMixin in Django Settings\nDESCRIPTION: Configuration snippet showing how to add the routable_page app to INSTALLED_APPS in Django settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/routablepage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    \"wagtail.contrib.routable_page\",\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Toucan SVG Icon in Wagtail\nDESCRIPTION: Example of a custom SVG icon that follows Wagtail's icon guidelines. The SVG includes the required id attribute with 'icon-' prefix, xmlns attribute, and viewBox attribute without hardcoded dimensions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/icons.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 800 800\" id=\"icon-toucan\">\n  <!--! CC0 license. https://creativecommons.org/publicdomain/zero/1.0/ -->\n  <path d=\"M321 662v1a41 41 0 1 1-83-2V470c0-129 71-221 222-221 122 0 153-42 153-93 0-34-18-60-53-72v-4c147 23 203 146 203 257 0 107-80 247-277 247v79a41 41 0 1 1-82-1v46a41 41 0 0 1-83 0v-46Z\"/>\n  <path d=\"M555 136a23 23 0 1 0-46 0 23 23 0 0 0 46 0Zm-69-57H175c-60 0-137 36-137 145l9-8 367 6 72 18V79Z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Replacing Pagination Template\nDESCRIPTION: This code snippet adjusts template usage to align with updated pagination practices in Wagtail. It replaces the is_ajax parameter in the pagination_nav.html template with a new ajax_pagination_nav.html template. Key functionality involves changing the template include directive to ensure compatibility with updated asynchronous pagination features.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% include \"wagtailadmin/shared/ajax_pagination_nav.html\" with items=page_obj %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin Comments Relation Name in Python\nDESCRIPTION: This code snippet shows how to access the admin comments relation name in a way that preserves backwards compatibility with previous Wagtail versions. It attempts to import COMMENTS_RELATION_NAME from wagtail.core.models and handles the ImportError if it's not available, indicating an older Wagtail version. This allows reusable library code to dynamically determine the correct relation name.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n \"try:\n    from wagtail.core.models import COMMENTS_RELATION_NAME\nexcept ImportError:\"\n```\n\n----------------------------------------\n\nTITLE: Creating Color Controller with Stimulus\nDESCRIPTION: Implements the Stimulus controller for the color picker widget, handling initialization and configuration of Coloris library.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass ColorController extends window.StimulusModule.Controller {\n    static values = { swatches: Array, theme: String };\n\n    connect() {\n        // create\n        Coloris({ el: `#${this.element.id}` });\n\n        // set options after initial creation\n        setTimeout(() => {\n            Coloris({ swatches: this.swatchesValue, theme: this.themeValue });\n        });\n    }\n}\n\nwindow.wagtail.app.register('color', ColorController);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail Site Name\nDESCRIPTION: Setting to specify the site name displayed in Wagtail admin dashboard\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_SITE_NAME = 'My Example Site'\n```\n\n----------------------------------------\n\nTITLE: Creating a PersonChooserWidget in Python for Wagtail\nDESCRIPTION: This snippet demonstrates how to create a PersonChooserWidget by accessing the widget_class property of the PersonChooserViewSet.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom .views import person_chooser_viewset\n\nPersonChooserWidget = person_chooser_viewset.widget_class\n```\n\n----------------------------------------\n\nTITLE: Defining BookPage Model with Advert Foreign Key in Python\nDESCRIPTION: This Python code defines a BookPage model with a foreign key to the Advert model, allowing a specific advert to be associated with a page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/rendering.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ...\nclass BookPage(Page):\n    advert = models.ForeignKey(\n        'demo.Advert',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+'\n    )\n\n    content_panels = Page.content_panels + [\n        FieldPanel('advert'),\n        # ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding User Listing Buttons in Wagtail Using Python\nDESCRIPTION: This snippet showcases adding buttons to a user list in Wagtail using register_user_listing_buttons, with condition checks like superuser status. This task requires Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom wagtail.users.widgets import UserListingButton\n\n@hooks.register(\"register_user_listing_buttons\")\ndef user_listing_external_profile(user, request_user):\n    if request_user.is_superuser:\n        yield UserListingButton(\n            \"Show profile\",\n            f\"/goes/to/a/url/{user.pk}\",\n            priority=30,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in a StructBlock with Required Fields\nDESCRIPTION: Example of a LinkBlock that requires either a page or URL field to be filled. The clean method is overridden to check if at least one of the fields has a value, raising a ValidationError if both are empty.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_validation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\nfrom wagtail.blocks import StructBlock, PageChooserBlock, URLBlock\n\nclass LinkBlock(StructBlock):\n    page = PageChooserBlock(required=False)\n    url = URLBlock(required=False)\n\n    def clean(self, value):\n        result = super().clean(value)\n        if not(result['page'] or result['url']):\n            raise ValidationError(\"Either page or URL must be specified\")\n        return result\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom AppConfig for Wagtail Users\nDESCRIPTION: Custom Django AppConfig that tells Wagtail to use the custom UserViewSet, allowing the integration of custom user forms and templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# myproject/apps.py\nfrom wagtail.users.apps import WagtailUsersAppConfig\n\n\nclass CustomUsersAppConfig(WagtailUsersAppConfig):\n    user_viewset = \"myapp.viewsets.UserViewSet\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Rich Text Editor in Wagtail\nDESCRIPTION: This Python snippet sets the default rich text editor in Wagtail to the HalloRichTextArea widget. This customization is useful in scenarios where projects rely on the Hallo.js editor specifically.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILADMIN_RICH_TEXT_EDITORS = {\n    'default': {\n        'WIDGET': 'wagtail.admin.rich_text.HalloRichTextArea'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: View with Component Rendering\nDESCRIPTION: Example view function that renders components and handles their media dependencies\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\ndef welcome_page(request):\n    panels = [\n        WelcomePanel(),\n    ]\n\n    render(request, 'my_app/welcome.html', {\n        'panels': panels,\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing before_delete_snippet Hook in Python\nDESCRIPTION: This snippet demonstrates how to use the before_delete_snippet hook in Wagtail. It overrides the default deletion behavior for snippets and returns a custom HTTP response.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\n@hooks.register('before_delete_snippet')\ndef before_snippet_delete(request, instances):\n    # \"instances\" is a list\n    total = len(instances)\n\n    if request.method == 'POST':\n        for instance in instances:\n            # Override the deletion behavior\n            instance.delete()\n\n        return HttpResponse(f\"{total} snippets have been deleted\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Registering Advanced Plugin for Anchor Hash Link Conversion in Wagtail Draftail\nDESCRIPTION: Python code to register a custom plugin feature that converts anchor hash references to links in Draftail. This uses the PluginFeature API for advanced editor customization.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('register_rich_text_features')\ndef register_anchorify(features):\n    feature_name = 'anchorify'\n    features.default_features.append(feature_name)\n\n    features.register_editor_plugin(\n        'draftail',\n        feature_name,\n        PluginFeature({\n            'type': feature_name,\n        },\n            js=['draftail_anchorify.js'],\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering Page Listing Buttons with next_url (Wagtail)\nDESCRIPTION: This snippet demonstrates how to update functions registered with the 'register_page_listing_buttons' hook to accept the new 'next_url' keyword argument. This allows a URL to be specified for redirection after the action is complete, enhancing user experience.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.10.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @hooks.register('register_page_listing_buttons')\n    def page_listing_more_buttons(page, page_perms, is_parent=False):\n        yield wagtailadmin_widgets.Button(\n            'My button', '/goes/to/a/url/', priority=60\n        )\n```\n\n----------------------------------------\n\nTITLE: Installing Search Promotions Module in Django Settings\nDESCRIPTION: Configuration code to enable the search promotions module by adding it to INSTALLED_APPS in Django settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/searchpromotions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    'wagtail.contrib.search_promotions',\n]\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Rendering Adverts in Django\nDESCRIPTION: This HTML+Django template iterates over the adverts passed from the custom template tag and renders each advert's text and URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/rendering.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% for advert in adverts %}\n    <p>\n        <a href=\"{{ advert.url }}\">\n            {{ advert.text }}\n        </a>\n    </p>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Overriding StructBlock Form Template in Python\nDESCRIPTION: Shows how to override the form_template attribute and add custom context variables to a StructBlock.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/streamfield_blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PersonBlock(blocks.StructBlock):\n    first_name = blocks.CharBlock()\n    surname = blocks.CharBlock()\n    photo = ImageChooserBlock(required=False)\n    biography = blocks.RichTextBlock()\n\n    def get_form_context(self, value, prefix='', errors=None):\n        context = super().get_form_context(value, prefix=prefix, errors=errors)\n        context['suggested_first_names'] = ['John', 'Paul', 'George', 'Ringo']\n        return context\n\n    class Meta:\n        icon = 'user'\n        form_template = 'myapp/block_forms/person.html'\n```\n\n----------------------------------------\n\nTITLE: Task Model with Custom Fields\nDESCRIPTION: Extends the basic task model by adding a user field and making it editable in admin\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# <project>/models.py\n\nfrom django.conf import settings\nfrom django.db import models\nfrom wagtail.models import Task\n\n\nclass UserApprovalTask(Task):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=False)\n\n    admin_form_fields = Task.admin_form_fields + ['user']\n```\n\n----------------------------------------\n\nTITLE: Custom User Creation Response in Wagtail Admin\nDESCRIPTION: Shows how to customize the response after user creation using the after_create_user hook. Returns a custom HTTP response instead of default redirect.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom wagtail import hooks\n\n@hooks.register('after_create_user')\ndef do_after_create_user(request, user):\n    return HttpResponse(\"Congrats on creating a new user!\", content_type=\"text/plain\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Wagtail CMS in Python\nDESCRIPTION: This snippet demonstrates the process of installing Wagtail, creating a new project, configuring dependencies, running database migrations, creating an admin user, and starting the development server.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install wagtail\nwagtail start mysite\ncd mysite\npip install -r requirements.txt\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Options for Wagtail Pages\nDESCRIPTION: Examples of customizing the private_page_options attribute to control which privacy options (password, groups, login) are available for a page type in the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass BreadPage(Page):\n    ...\n\n    # default\n    private_page_options = ['password', 'groups', 'login']\n\n    # disable shared password\n    private_page_options = ['groups', 'login']\n\n    # only shared password\n    private_page_options = ['password']\n\n    # no privacy options for this page model\n    private_page_options = []\n```\n\n----------------------------------------\n\nTITLE: Using Logical Properties for RTL Support in CSS\nDESCRIPTION: Shows how to use CSS logical properties for right-to-left language support. This approach ensures that styles are automatically adjusted for different text directions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/ui_guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n--w-direction-factor\n```\n\n----------------------------------------\n\nTITLE: Defining BookPageAdvertPlacement Model for Multiple Adverts in Python\nDESCRIPTION: This Python code defines a BookPageAdvertPlacement model as an inline child object of BookPage, allowing multiple adverts to be associated with a single page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/rendering.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nfrom wagtail.models import Page, Orderable\n\nfrom modelcluster.fields import ParentalKey\n\n# ...\n\nclass BookPageAdvertPlacement(Orderable, models.Model):\n    page = ParentalKey('demo.BookPage', on_delete=models.CASCADE, related_name='advert_placements')\n    advert = models.ForeignKey('demo.Advert', on_delete=models.CASCADE, related_name='+')\n\n    class Meta(Orderable.Meta):\n        verbose_name = \"advert placement\"\n        verbose_name_plural = \"advert placements\"\n\n    panels = [\n        FieldPanel('advert'),\n    ]\n\n    def __str__(self):\n        return self.page.title + \" -> \" + self.advert.text\n\n\nclass BookPage(Page):\n    # ...\n\n    content_panels = Page.content_panels + [\n        InlinePanel('advert_placements', label=\"Adverts\"),\n        # ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Simple Translation in Wagtail\nDESCRIPTION: Add the simple_translation module to the INSTALLED_APPS list in the Django settings file. This is required to enable the Simple Translation feature in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/simple_translation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    \"wagtail.contrib.simple_translation\",\n]\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Replacing Dashes and Underscores with Spaces in Image Titles\nDESCRIPTION: This JavaScript listens for the 'wagtail:images-upload' event and replaces any dashes, underscores, or whitespace with a single space in the automatically generated image title.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/title_generation_on_upload.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('wagtail:images-upload', function (event) {\n        // Replace dashes/underscores with a space\n        const newTitle = (event.detail.data.title || '').replace(\n            /(\\s|_|-)/g,\n            ' ',\n        );\n        event.detail.data.title = newTitle;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Action Menu in Wagtail\nDESCRIPTION: This code snippet demonstrates how to customize the action menu on the page edit view in Wagtail using the `register_page_action_menu_item` or `construct_page_action_menu` hook. It shows how to conditionally reinsert the `<li>` wrapper for backward compatibility with Wagtail versions prior to 2.7.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.7.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.html import format_html\nfrom wagtail import VERSION as WAGTAIL_VERSION\nfrom wagtail.admin.action_menu import ActionMenuItem\n\nclass CustomMenuItem(ActionMenuItem):\n    template = 'myapp/my_menu_item.html'\n\n    def render_html(self, request, parent_context):\n        html = super().render_html(request, parent_context)\n        if WAGTAIL_VERSION < (2, 7):\n            html = format_html('<li>{}</li>', html)\n        return html\n```\n\n----------------------------------------\n\nTITLE: Content Panels with Simple InlinePanel - Python\nDESCRIPTION: Demonstrates the simplified syntax for adding inline panels using string relation names.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontent_panels = Page.content_panels + [\"gallery_images\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Django URL Pattern Usage - Python\nDESCRIPTION: Example showing how to update deprecated URL pattern 'wagtailusers_groups:users' to use 'wagtailusers_users:index' with query parameters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old way\nreverse('wagtailusers_groups:users', args=[group.id])\n\n# New way\nreverse('wagtailusers_users:index') + f'?group={group.id}'\n```\n\n----------------------------------------\n\nTITLE: Default Sitemap XML Output with Localhost\nDESCRIPTION: Example of the generated XML sitemap output when the site's hostname is set to localhost.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/sitemaps.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<url>\n    <loc>http://localhost/about/</loc>\n    <lastmod>2015-09-26</lastmod>\n</url>\n```\n\n----------------------------------------\n\nTITLE: Registering Wagtail Signal Handler for Task Submission Email Notification\nDESCRIPTION: This snippet defines a function to register a signal handler for the task_submitted signal in Wagtail. It connects the user_approval_task_submission_email_notifier to the signal.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# <project>/signal_handlers.py\n\nfrom wagtail.signals import task_submitted\nfrom .mail import UserApprovalTaskStateSubmissionEmailNotifier\n\n\ntask_submission_email_notifier = UserApprovalTaskStateSubmissionEmailNotifier()\n\ndef register_signal_handlers():\n    task_submitted.connect(user_approval_task_submission_email_notifier, dispatch_uid='user_approval_task_submitted_email_notification')\n```\n\n----------------------------------------\n\nTITLE: Defining AlterBlockValueOperation for Block Value Modification in Python\nDESCRIPTION: Class definition for AlterBlockValueOperation, which alters the value of each block to a given value. It takes a new_value attribute to specify the value to change to.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass AlterBlockValueOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Template for displaying documents from a collection\nDESCRIPTION: Django template code for rendering a list of documents from a collection, providing links to each document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n{% load wagtailcore_tags %}\n\n{% block content %}\n    {% if documents %}\n    <h3>Documents:</h3>\n    <ul>\n        {% for document in documents %}\n        <li>\n            <a href=\"{{ document.url }}\" target=\"_blank\">{{ document.title }}</a>\n        </li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Settings\nDESCRIPTION: Configuration to add wagtail.contrib.settings to Django INSTALLED_APPS.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS += [\n    'wagtail.contrib.settings',\n]\n```\n\n----------------------------------------\n\nTITLE: Complete Template with Media Handling\nDESCRIPTION: Complete template example showing how to include component media dependencies\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/base.html\" %}\n{% load wagtailadmin_tags %}\n\n{% block extra_js %}\n    {{ block.super }}\n    {{ media.js }}\n{% endblock %}\n\n{% block extra_css %}\n    {{ block.super }}\n    {{ media.css }}\n{% endblock %}\n\n{% block content %}\n    {% for panel in panels %}\n        {% component panel %}\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Django template to display document links\nDESCRIPTION: HTML template code that handles the display of document links on a Wagtail page, showing document title, file type, and a link to the document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n{% block content %}\n    {% if page.document %}\n        <h2>Document: {{ page.document.title }}</h2>\n        <p>File Type: {{ page.document.file_extension }}</p>\n        <a href=\"{{ page.document.url }}\" target=\"_blank\">View Document</a>\n    {% else %}\n        <p>No document attached to this page.</p>\n    {% endif %}\n    <div>{{ page.body }}</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Base Tag for Live Preview Panel Links in HTML Template\nDESCRIPTION: This snippet adds a conditional base tag to the HTML template to make all links in the live preview panel open in a new tab. This is necessary to prevent issues with iframes and X-Frame-Options headers.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.0.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{% if request.in_preview_panel %}\n    <base target=\"_blank\">\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Workflows in Wagtail Admin\nDESCRIPTION: This snippet outlines how to update user code that relies on the wagtail.admin.modal_workflow module for modal popup interfaces. It specifies the need to eliminate template tags from JS templates and introduces modifications for the ModalWorkflow constructor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* Eliminate template tags from the .js template. Any dynamic data needed by the template can instead be passed in a dict to ``render_modal_workflow``, as a keyword argument ``json_data``; this data will then be available as the second parameter of the JavaScript function.\n* At the point where you call the ``ModalWorkflow`` constructor, add an ``onload`` option - a dictionary of functions to be called on loading each step of the workflow. Move the code from the .js template into this dictionary. Then, on the call to ``render_modal_workflow``, rather than passing the .js template name (which should now be replaced by ``None``), pass a ``step`` item in the ``json_data`` dictionary to indicate the ``onload`` function to be called.\n* Additionally, if your code calls ``loadResponseText`` as part of a jQuery AJAX callback, this should now be passed all three arguments from the callback (the response data, status string and XMLHttpRequest object).\n```\n\n----------------------------------------\n\nTITLE: Defining Page Description in Wagtail Page Model\nDESCRIPTION: This code snippet demonstrates how to add a description to a Wagtail Page model using the 'page_description' attribute, allowing for short descriptions that can be displayed within the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/3.0.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass LandingPage(Page):\n\n    page_description = \"Use this page for converting users\"\n```\n\n----------------------------------------\n\nTITLE: Setting Wagtail Admin Base URL\nDESCRIPTION: Configuration for the base URL used by Wagtail admin site\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILADMIN_BASE_URL = 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Basic Project Structure\nDESCRIPTION: Shows the typical directory structure for Wagtail templates and static files\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname_of_project/\n    name_of_app/\n        templates/\n            name_of_app/\n                blog_page.html\n        models.py\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Bulk Actions for Documents in Python\nDESCRIPTION: Illustrates how to create a custom bulk action for documents by subclassing DocumentBulkAction.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_bulk_actions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.documents.views.bulk_actions.document_bulk_action import DocumentBulkAction\nfrom wagtail import hooks\n\n\n@hooks.register('register_bulk_action')\nclass CustomDocumentBulkAction(DocumentBulkAction):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Django Template Tag with classname Parameter\nDESCRIPTION: Example showing how to use the dialog_toggle template tag with a classname parameter, demonstrating the preferred way to pass HTML classes to Django template tags in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/general_guidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% dialog_toggle classname='button button-primary' %}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for Wagtail Portfolio\nDESCRIPTION: Core CSS styles for the portfolio site including typography, layout grid, and basic theme elements. Implements responsive design and basic styling for header, footer, and main content areas.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/style_your_site.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n*,\n::before,\n::after {\n    box-sizing: border-box;\n}\n\nhtml {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", system-ui, Roboto, \"Helvetica Neue\", Arial, sans-serif, Apple Color Emoji, \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n}\n\nbody {\n    min-height: 100vh;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 10px;\n    display: grid;\n    gap: 3vw;\n    grid-template-rows: min-content 1fr min-content;\n}\n\na {\n    color: currentColor;\n}\n\nfooter {\n    border-top: 2px dotted;\n    text-align: center;\n}\n\nheader {\n    border-bottom: 2px dotted;\n}\n\n.template-homepage main {\n    text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating INSTALLED_APPS for Custom User Management in Python\nDESCRIPTION: Shows how to update the INSTALLED_APPS setting to use the custom WagtailUsersAppConfig.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    # Make sure you have two separate entries for the custom user model's app\n    # and the custom app config for the wagtail.users app\n    \"myapp\",  # an app that contains the custom user model\n    \"myproject.apps.CustomUsersAppConfig\",  # a custom app config for the wagtail.users app\n    # \"wagtail.users\",  # this should be removed in favour of the custom app config\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Redirect Creation in Django Settings\nDESCRIPTION: Configuration option to disable automatic redirect creation for pages with URL-impacting changes in Wagtail projects using the redirects contrib app\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.16.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILREDIRECTS_AUTO_CREATE = False\n```\n\n----------------------------------------\n\nTITLE: Simplified Page Model Configuration without Explicit SlugInput in Python\nDESCRIPTION: Shows the simplified configuration for a Page model's promote_panels in Wagtail 5.0, where SlugInput is now the default and doesn't need to be explicitly specified.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ... imports\n\nclass MyPage(Page):\n    promote_panels = [\n        FieldPanel(\"slug\"),\n        # ... other panels\n    ]\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Image Format Implementation in Python\nDESCRIPTION: Demonstrates how to create a custom Format subclass to modify image HTML representation in Wagtail. Shows the basic structure for overriding image_to_html method and registering a new format.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/changing_rich_text_representation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.images.formats import Format, register_image_format\n\n\nclass SubclassedImageFormat(Format):\n\n    def image_to_html(self, image, alt_text, extra_attributes=None):\n\n        custom_html = # the custom HTML representation of your image here\n                        # in Format, the image's rendition.img_tag(extra_attributes) is used to generate the HTML\n                        # representation\n\n        return custom_html\n\n\nregister_image_format(\n    SubclassedImageFormat('subclassed_format', 'Subclassed Format', 'image-classes object-contain', filter_spec)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing FormSubmissionsPanel in a Contact Form Page\nDESCRIPTION: This snippet shows how to add a FormSubmissionsPanel to a contact form page that extends AbstractForm. This panel provides a read-only section displaying submission count and a link to view submissions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.forms.models import AbstractForm\nfrom wagtail.contrib.forms.panels import FormSubmissionsPanel\n\nclass ContactFormPage(AbstractForm):\n    content_panels = [\n        FormSubmissionsPanel(),\n    ]\n```\n\n----------------------------------------\n\nTITLE: New StreamField Block Initialization with Stimulus (HTML)\nDESCRIPTION: New approach for initializing a StreamField block using Stimulus data attributes, avoiding inline scripts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div\n    id=\"{id}\"\n    data-block\n    data-controller=\"w-block\"\n    data-w-block-data-value=\"{block_json}\"\n    data-w-block-arguments-value=\"[{value_json},{error_json}]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Tree Position in Wagtail API v2\nDESCRIPTION: Example of using '?child_of' filter to get direct children of a specific page. This can be used for constructing menus by filtering children of the homepage.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?child_of=2&show_in_menus=true\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 5\n    },\n    \"items\": [\n        {\n            \"id\": 3,\n            \"meta\": {\n                \"type\": \"blog.BlogIndexPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/3/\",\n                \"html_url\": \"http://www.example.com/blog/\",\n                \"slug\": \"blog\",\n                \"first_published_at\": \"2016-09-21T13:54:00Z\"\n            },\n            \"title\": \"About\"\n        },\n        {\n            \"id\": 10,\n            \"meta\": {\n                \"type\": \"standard.StandardPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/10/\",\n                \"html_url\": \"http://www.example.com/about/\",\n                \"slug\": \"about\",\n                \"first_published_at\": \"2016-08-30T16:52:00Z\"\n            },\n            \"title\": \"About\"\n        },\n\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StreamChildrenToListBlockOperation for StreamBlock to ListBlock Conversion in Python\nDESCRIPTION: Class definition for StreamChildrenToListBlockOperation, which combines StreamBlock children of a given type into a new ListBlock. The block_path_str should point to the parent StreamBlock containing the blocks to be combined.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass StreamChildrenToListBlockOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Updating Template Extension and Block Names for Page Reports\nDESCRIPTION: Shows template changes required for page reports, including updating the parent template and renaming block identifiers to match the new structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n {# <project>/templates/reports/unpublished_changes_report_results.html #}\n\n-{% extends \"wagtailadmin/reports/base_page_report.html\" %}\n+{% extends \"wagtailadmin/reports/base_page_report_results.html\" %}\n\n-{% block listing %}\n+{% block results %}\n     {% include \"reports/include/_list_unpublished_changes.html\" %}\n {% endblock %}\n-{% block no_results %}\n+{% block no_results_message %}\n     <p>No pages with unpublished changes.</p>\n {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Basic StreamField Template Rendering\nDESCRIPTION: Template code showing how to render StreamField content using the include_block tag.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n\n    ...\n\n{% include_block page.body %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Adverts in BookPage Template with Django\nDESCRIPTION: This HTML+Django template snippet demonstrates how to iterate over and render multiple adverts associated with a BookPage using the advert_placements relationship.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/rendering.md#2025-04-21_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% for advert_placement in page.advert_placements.all %}\n    <p>\n        <a href=\"{{ advert_placement.advert.url }}\">\n            {{ advert_placement.advert.text }}\n        </a>\n    </p>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Footer Save Warning Update Function\nDESCRIPTION: JavaScript implementation for handling unsaved changes in the footer\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.updateFooterSaveWarning = (formDirty, commentsDirty) => {\n  if (!formDirty && !commentsDirty) {\n    document.dispatchEvent(new CustomEvent('w-unsaved:clear'));\n  } else {\n    const [type] = [\n      formDirty && commentsDirty && 'all',\n      commentsDirty && 'comments',\n      formDirty && 'edits',\n    ].filter(Boolean);\n    document.dispatchEvent(new CustomEvent('w-unsaved:add', { detail: { type } }));\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating field_as_li.html Template Include\nDESCRIPTION: Shows the change from using field_as_li.html include to using field.html wrapped in li tags\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% include \"wagtailadmin/shared/field_as_li.html\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n<li>\n    {% include \"wagtailadmin/shared/field.html\" %}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Configuring DateField for Draft Saving in Wagtail CMS - Python\nDESCRIPTION: Example showing how to modify a DateField to allow null values when saving drafts while maintaining required status on publish.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/7.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    date_published = models.DateField(\"Date article published\", null=True)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Shared Password Restrictions from Pages\nDESCRIPTION: Django shell code to remove any existing shared password restrictions from pages after disabling the shared password option in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page\n\nfor page in Page.objects.private():\n   page.get_view_restrictions().filter(restriction_type='password').delete()\n```\n\n----------------------------------------\n\nTITLE: Setting up URLs for wagtail.documents\nDESCRIPTION: Code for configuring URL patterns to include the wagtail.documents URLs in a Django project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\n\nfrom wagtail.documents import urls as wagtaildocs_urls\n\nurlpatterns = [\n    # ...\n    path('documents/', include(wagtaildocs_urls)),\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Cache Key Management in Python\nDESCRIPTION: Python code demonstrating how to generate and invalidate template fragment cache keys programmatically.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.cache import cache\nfrom wagtail.coreutils import make_wagtail_template_fragment_key\n\nkey = make_wagtail_template_fragment_key(\"hero\", page, site)\ncache.delete(key)  # invalidates cached template fragment\n```\n\n----------------------------------------\n\nTITLE: Adding run_before Declaration to Initial Homepage Migration in Python\nDESCRIPTION: Code example showing how to modify the initial homepage migration to ensure compatibility with Wagtail 2.11.3. This update adds a run_before directive to ensure the migration runs before the wagtailcore locale_model migration, preventing NOT NULL constraint failures on the new locale_id field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.11.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# ...\n\nclass Migration(migrations.Migration):\n\n    run_before = [\n        ('wagtailcore', '0053_locale_model'),  # added for Wagtail 2.11 compatibility\n    ]\n\n    dependencies = [\n        ('home', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RunPython(create_homepage, remove_homepage),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Featured Posts Block Template\nDESCRIPTION: Template for rendering featured posts with heading, optional text, and a grid of blog posts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n<div>\n    <h2>{{ self.heading }}</h2>\n    {% if self.text %}\n        <p>{{ self.text|richtext }}</p>\n    {% endif %}\n\n    <div class=\"grid\">\n        {% for page in self.posts %}\n            <div class=\"card\">\n                <p><a href=\"{% pageurl page %}\">{{ page.title }}</a></p>\n                <p>{{ page.specific.date }}</p>\n            </div>\n        {% endfor %}\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Userbar Position Customization\nDESCRIPTION: Example showing how to customize the position of the Wagtail userbar using Web Components' shadow DOM parts syntax. Targets the userbar element to adjust its bottom position.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nwagtail-userbar::part(userbar) {\n    bottom: 30px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects API Endpoint (Python)\nDESCRIPTION: Demonstrates how to add a redirects API endpoint to the Wagtail API configuration. This allows retrieving redirects or finding specific redirects by path via API.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.redirects.api import RedirectsAPIViewSet\n\napi_router.register_endpoint('redirects', RedirectsAPIViewSet)\n```\n\n----------------------------------------\n\nTITLE: Custom StructBlock Class Definition\nDESCRIPTION: Example of creating a reusable StructBlock subclass for person information.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PersonBlock(blocks.StructBlock):\n    first_name = blocks.CharBlock()\n    surname = blocks.CharBlock()\n    photo = ImageBlock(required=False)\n    biography = blocks.RichTextBlock()\n```\n\n----------------------------------------\n\nTITLE: Side Panel Implementation - Old Pattern\nDESCRIPTION: Original implementation of page side panels using the now removed PageSidePanels class\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.ui.side_panels import PageSidePanels\n\n\ndef my_view(request):\n    ...\n\n    side_panels = PageSidePanels(\n        request,\n        page.get_latest_revision_as_object(),\n        show_schedule_publishing_toggle=False,\n        live_page=page,\n        scheduled_page=page.get_scheduled_revision_as_object(),\n        in_explorer=False,\n        preview_enabled=True,\n        comments_enabled=False,\n    )\n\n    return render(\n        request,\n        template_name,\n        {\"page\": page, \"side_panels\": side_panels, \"media\": side_panels.media},\n    )\n```\n\n----------------------------------------\n\nTITLE: Including Notification Preferences Link in Wagtail Admin Email\nDESCRIPTION: Adds a translated message with a link to the user's notification preferences page. Uses the base URL setting and Django's URL reversing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/base.txt#2025-04-21_snippet_3\n\nLANGUAGE: Django Template\nCODE:\n```\n{% block preferences %}\n{% trans \"Edit your notification preferences here:\" %} {{ base_url }}{% url 'wagtailadmin_account' %}#tab-notifications\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Embed Template Tags\nDESCRIPTION: Examples of using the embed template tag to insert embedded content in Django templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailembeds_tags %}\n\n{# Embed a YouTube video #}\n{% embed 'https://www.youtube.com/watch?v=Ffu-2jEdLPw' %}\n\n{# This tag can also take the URL from a variable #}\n{% embed page.video_url %}\n```\n\n----------------------------------------\n\nTITLE: Extending Wagtail User Edit Template\nDESCRIPTION: HTML template that extends Wagtail's default user editing template to include the custom fields from the custom user model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"wagtailusers/users/edit.html\" %}\n\n{% block extra_fields %}\n    <li>{% include \"wagtailadmin/shared/field.html\" with field=form.country %}</li>\n    <li>{% include \"wagtailadmin/shared/field.html\" with field=form.status %}</li>\n{% endblock extra_fields %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Preventing Automatic Title Generation in Wagtail\nDESCRIPTION: This JavaScript listens for the 'wagtail:images-upload' event and prevents the default behavior by calling event.preventDefault(), which stops automatic title generation for single uploads and uses the full filename for multiple uploads.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/title_generation_on_upload.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('wagtail:images-upload', function (event) {\n        // Stop title pre-fill on single file uploads\n        // Set the multiple upload title to the filename (with extension)\n        event.preventDefault();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Embed Handler in Wagtail\nDESCRIPTION: Demonstrates how to register a custom EmbedHandler using Wagtail's register_rich_text_features hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# my_app/wagtail_hooks.py\n\nfrom wagtail import hooks\nfrom my_app.handlers import MyCustomEmbedHandler\n\n@hooks.register('register_rich_text_features')\ndef register_embed_handler(features):\n    features.register_embed_type(MyCustomEmbedHandler)\n```\n\n----------------------------------------\n\nTITLE: Updating Tag Field Implementation\nDESCRIPTION: Migration from global window.initTagField utility to data attributes with Stimulus controller\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"id_tags\" type=\"text\" value=\"popular, technology\" hidden />\n<script>\n    window.initTagField('id_tags', 'path/to/url', { autocompleteOnly: true });\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input\n    id=\"id_tags\"\n    type=\"text\"\n    value=\"popular, technology\"\n    hidden\n    data-controller=\"w-tag\"\n    data-w-tag-options-value='{\"autocompleteOnly\": true}'\n    data-w-tag-url-value=\"/path/to/url\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Settings in Jinja2 Templates\nDESCRIPTION: Examples of accessing settings in Jinja2 templates with different syntax options.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_9\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ settings(\"app_label.GenericSocialMediaSettings\").facebook }}\n{{ settings(\"app_label.SiteSpecificSocialMediaSettings\").facebook }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django INSTALLED_APPS\nDESCRIPTION: Required Wagtail app configurations to be added to Django's INSTALLED_APPS setting\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'wagtail.contrib.forms',\n'wagtail.contrib.redirects',\n'wagtail.embeds',\n'wagtail.sites',\n'wagtail.users',\n'wagtail.snippets',\n'wagtail.documents',\n'wagtail.images',\n'wagtail.search',\n'wagtail.admin',\n'wagtail',\n\n'modelcluster',\n'taggit',\n```\n\n----------------------------------------\n\nTITLE: Note Block About Reading Issues in Markdown\nDESCRIPTION: A note directive reminding contributors to thoroughly read issues and related links before commenting or claiming tasks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nTake the time to **read** the issue and links before adding new comments or questions. Remember, it's not time to 'claim' any issues yet either.\n```\n```\n\n----------------------------------------\n\nTITLE: Database and Admin Setup Commands\nDESCRIPTION: Commands for initializing database and creating admin user\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py migrate\n```\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py createsuperuser\n```\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: HTML Rendered Output for Page Links in Wagtail\nDESCRIPTION: Example of how page links are rendered in final HTML after processing through the richtext filter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/contact-us/\">Contact us</a> for more information.</p>\n```\n\n----------------------------------------\n\nTITLE: Overriding Wagtail Admin Logo in Base Template\nDESCRIPTION: Template code to replace the default Wagtail logo in the admin interface by extending the base.html template and overriding the branding_logo block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/base.html\" %}\n{% load static %}\n\n{% block branding_logo %}\n    <img src=\"{% static 'images/custom-logo.svg' %}\" alt=\"Custom Project\" width=\"80\" />\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Moving Pages in Tree Structure\nDESCRIPTION: Command to move pages from one section of the tree to another, specified by page IDs.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmanage.py move_pages from to\n```\n\n----------------------------------------\n\nTITLE: Deprecation of construct_whitelister_element_rules Hook\nDESCRIPTION: This Python snippet shows how to rewrite the deprecated 'construct_whitelister_element_rules' hook by using the new method of registering rich text features for whitelisting HTML elements.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.rich_text.converters.editor_html import WhitelistRule\nfrom wagtail.core import hooks\nfrom wagtail.core.whitelist import allow_without_attributes\n\n@hooks.register('register_rich_text_features')\ndef blockquote_feature(features):\n\n    # register a feature 'blockquote' which whitelists the <blockquote> element\n    features.register_editor_plugin(\n        'draftail', 'blockquote', DraftailFeature(\n            control=Control('blockquote'),\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Site Model Database Fields in Wagtail CMS\nDESCRIPTION: Documentation for the database fields of the Site model in Wagtail, which is used for multi-site installations to configure which part of the page tree to use for each hostname.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Site:\n\n    hostname\n        # (text)\n        # This is the hostname of the site, excluding the scheme, port, and path.\n        # For example: ``www.mysite.com``\n\n    port\n        # (number)\n        # This is the port number that the site responds on.\n\n    site_name\n        # (text - optional)\n        # A human-readable name for the site. This is not used by Wagtail itself, but is suitable for use on the site front-end, such as in ``<title>`` elements.\n        # For example: ``Rod's World of Birds``\n\n    root_page\n        # (foreign key to Page)\n        # This is a link to the root page of the site. This page will be what appears at the ``/`` URL on the site and would usually be a homepage.\n\n    is_default_site\n        # (boolean)\n        # This is set to ``True`` if the site is the default. Only one site can be the default.\n        # The default site is used as a fallback in situations where a site with the required hostname/port couldn't be found.\n```\n\n----------------------------------------\n\nTITLE: Adding Search Link to Wagtail Site Header\nDESCRIPTION: Template modification to add a search link in the site header navigation, making the search functionality accessible from all pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/add_search.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags navigation_tags wagtailuserbar %}\n\n<header>\n    <a href=\"#main\" class=\"skip-link\">Skip to content</a>\n    {% get_site_root as site_root %}\n    <nav>\n        <p>\n          <a href=\"{% pageurl site_root %}\">{{ site_root.title }}</a> |\n          {% for menuitem in site_root.get_children.live.in_menu %}\n            <a href=\"{% pageurl menuitem %}\">{{ menuitem.title }}</a>{% if not forloop.last %} | {% endif %}\n          {% endfor %}\n\n          {# Display your search by adding this: #}\n          | <a href=\"/search/\">Search</a>\n        </p>\n    </nav>\n\n    {% wagtailuserbar \"top-right\" %}\n</header>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Page Fields in Wagtail API v2\nDESCRIPTION: Example of using the '?type' parameter to access custom fields for a specific page type (blog.BlogPage). The response includes custom fields like published_date, body, and authors.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?type=blog.BlogPage&fields=published_date,body,authors(name)\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 10\n    },\n    \"items\": [\n        {\n            \"id\": 1,\n            \"meta\": {\n                \"type\": \"blog.BlogPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/1/\",\n                \"html_url\": \"http://www.example.com/blog/my-blog-post/\",\n                \"slug\": \"my-blog-post\",\n                \"first_published_at\": \"2016-08-30T16:52:00Z\"\n            },\n            \"title\": \"Test blog post\",\n            \"published_date\": \"2016-08-30\",\n            \"authors\": [\n                {\n                    \"id\": 1,\n                    \"meta\": {\n                        \"type\": \"blog.BlogPageAuthor\",\n                    },\n                    \"name\": \"Karl Hobley\"\n                }\n            ]\n        },\n\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a StaticBlock with Custom Admin Text in Python\nDESCRIPTION: Defines a StaticBlock with customized admin text to be displayed in the editor interface. This block type is useful for content that doesn't need configuration within the page editor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nblocks.StaticBlock(\n    admin_text='Latest posts: no configuration needed.',\n    # or admin_text=mark_safe('<b>Latest posts</b>: no configuration needed.'),\n    template='latest_posts.html')\n```\n\n----------------------------------------\n\nTITLE: Registering Page and Site Models in Django Admin with Python\nDESCRIPTION: This snippet demonstrates how to re-register the Page and Site models in the Django admin, after Wagtail has removed these by default from the Django admin backend. This requires access to Django's admin module as well as the Wagtail core models. It is used when project-specific admin access to these models is needed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.8.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# my_app/admin.py\nfrom django.contrib import admin\n\nfrom wagtail.core.models import Page, Site\n\nadmin.site.register(Site)\nadmin.site.register(Page)\n```\n\n----------------------------------------\n\nTITLE: StreamBlock Value Structure Example\nDESCRIPTION: Example showing the structure of block_value when dealing with StreamBlock types in Wagtail block operations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n[\n    { \"type\": \"...\", \"value\": \"...\", \"id\": \"...\" },\n    { \"type\": \"...\", \"value\": \"...\", \"id\": \"...\" },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Wagtail Admin Dashboard Welcome Message\nDESCRIPTION: Template code to replace the default welcome message on the dashboard by extending home.html and overriding the branding_welcome block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/home.html\" %}\n\n{% block branding_welcome %}Welcome to Frank's Site{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring TASKS Setting for Immediate Task Execution\nDESCRIPTION: Sets up the TASKS setting to use the ImmediateBackend and disables task enqueuing on transaction commit, reverting to immediate execution behavior.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nTASKS = {\n    \"default\": {\n        \"BACKEND\": \"django_tasks.backends.immediate.ImmediateBackend\",\n        \"ENQUEUE_ON_COMMIT\": False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AMP Template Mixin Implementation\nDESCRIPTION: Creates a mixin class to handle template selection based on AMP mode.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os.path\n\nclass PageAMPTemplateMixin:\n\n    @property\n    def amp_template(self):\n        # Get the default template name and insert `_amp` before the extension\n        name, ext = os.path.splitext(self.template)\n        return name + '_amp' + ext\n\n    def get_template(self, request):\n        if amp_mode_active():\n            return self.amp_template\n\n        return super().get_template(request)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Model in Python\nDESCRIPTION: Example of a custom User model with additional fields for country and status.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass User(AbstractUser):\n    country = models.CharField(verbose_name='country', max_length=255)\n    status = models.ForeignKey(MembershipStatus, on_delete=models.SET_NULL, null=True, default=1)\n```\n\n----------------------------------------\n\nTITLE: Context Manager Hook Registration\nDESCRIPTION: Shows how to use register_temporarily as a context manager for temporary hook registration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_hook_function():\n    pass\n\nwith hooks.register_temporarily('name_of_hook', my_hook_function):\n    # Hook is registered here\n    ..\n\n# Hook is unregistered here\n```\n\n----------------------------------------\n\nTITLE: Adding expired Field to Wagtail Page Model in Python\nDESCRIPTION: This code block is an example of a migration update necessary due to a backwards-incompatible change in Wagtail. The addition of the 'expired' column to Page records requires this field to be accounted for in South migrations. This snippet should be added to the migration file to avoid migration failures.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.4.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Tag Index Page Template (Django HTML)\nDESCRIPTION: This HTML template is used for rendering the BlogTagIndexPage. It displays a list of blog pages filtered by the selected tag, showing the title and last revision date for each page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n{% load wagtailcore_tags %}\n\n{% block content %}\n\n    {% if request.GET.tag %}\n        <h4>Showing pages tagged \"{{ request.GET.tag }}\"</h4>\n    {% endif %}\n\n    {% for blogpage in blogpages %}\n\n          <p>\n              <strong><a href=\"{% pageurl blogpage %}\">{{ blogpage.title }}</a></strong><br />\n              <small>Revised: {{ blogpage.latest_revision_created_at }}</small><br />\n          </p>\n\n    {% empty %}\n        No pages found with that tag.\n    {% endfor %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Converting search_fields from tuple to list in Page models\nDESCRIPTION: An example showing how to update a Page model's search_fields attribute from using a tuple to using a list, which is required in Wagtail 1.5+. The backwards compatibility for tuples will be removed in Wagtail 1.7.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyPage(Page):\n    ...\n\n    search_fields = Page.search_fields + (\n        indexed.SearchField('body'),\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyPage(Page):\n    ...\n\n    search_fields = Page.search_fields + [\n        indexed.SearchField('body'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript to Prevent Title Pre-filling on Document Upload in Wagtail\nDESCRIPTION: This Python code uses the 'insert_global_admin_js' hook to include a custom JavaScript file that prevents automatic title pre-filling during document uploads.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/title_generation_on_upload.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.templatetags.static import static\nfrom django.utils.html import format_html\n\nfrom wagtail import hooks\n\n@hooks.register(\"insert_global_admin_js\")\ndef insert_stop_prefill_js():\n    script_url = static('js/stop_title_prefill.js')\n    return format_html('<script src=\"{}\"></script>', script_url)\n```\n\n----------------------------------------\n\nTITLE: Styling Wagtail User Bar with CSS\nDESCRIPTION: CSS example for custom positioning of the Wagtail user bar using CSS parts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nwagtail-userbar::part(userbar) {\n    bottom: 30px;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Hooks in Wagtail 0.5 Python\nDESCRIPTION: Registers a custom hook to add menu items to the main menu in Wagtail's admin interface. This allows for easy customization of the menu displayed to users.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_main_menu')\n  def construct_main_menu(request, menu_items):\n      menu_items.append(\n          MenuItem('Kittens!', '/kittens/', classnames='icon icon-folder-inverse', order=1000)\n      )\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Production\nDESCRIPTION: Production environment variables configuration including AWS S3 credentials and Django settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nAWS_STORAGE_BUCKET_NAME=yourname-wagtail-portfolio\nAWS_S3_ENDPOINT_URL=https://s3.us-east-005.backblazeb2.com\nAWS_S3_REGION_NAME=us-east-005\nAWS_S3_ACCESS_KEY_ID=your Backblaze keyID\nAWS_S3_SECRET_ACCESS_KEY=your Backblaze applicationKey\nDJANGO_ALLOWED_HOSTS=yourname-wagtail-portfolio.fly.dev\nDJANGO_CSRF_TRUSTED_ORIGINS=https://yourname-wagtail-portfolio.fly.dev\nDJANGO_SETTINGS_MODULE=mysite.settings.production\n```\n\n----------------------------------------\n\nTITLE: Implementing AMP Mode Utilities\nDESCRIPTION: Creates utility functions for managing AMP mode state using thread-local storage, including activation and state checking functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import contextmanager\nfrom asgiref.local import Local\n\n_amp_mode_active = Local()\n\n@contextmanager\ndef activate_amp_mode():\n    \"\"\"\n    A context manager used to activate AMP mode\n    \"\"\"\n    _amp_mode_active.value = True\n    try:\n        yield\n    finally:\n        del _amp_mode_active.value\n\ndef amp_mode_active():\n    \"\"\"\n    Returns True if AMP mode is currently active\n    \"\"\"\n    return hasattr(_amp_mode_active, 'value')\n```\n\n----------------------------------------\n\nTITLE: Defining Portfolio Stream Block in Python\nDESCRIPTION: Creates a basic PortfolioStreamBlock class that inherits from BaseStreamBlock for portfolio content management.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom base.blocks import BaseStreamBlock\n\nclass PortfolioStreamBlock(BaseStreamBlock):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Customizing Group Editor Permissions Ordering in Python\nDESCRIPTION: This code demonstrates how to customize the order of object types in the group editor's permissions sections by registering the order in an AppConfig.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\n\n\nclass MyProjectAdminAppConfig(AppConfig):\n    name = \"myproject_admin\"\n    verbose_name = \"My Project Admin\"\n\n    def ready(self):\n        from wagtail.users.permission_order import register\n\n        register(\"gadgets.SprocketType\", order=150)\n        register(\"gadgets.ChainType\", order=151)\n        register(\"site_settings.Settings\", order=160)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CDN Cache Backend\nDESCRIPTION: Settings configuration for Azure CDN cache backend with basic setup.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    WAGTAILFRONTENDCACHE = {\n        'azure_cdn': {\n            'BACKEND': 'wagtail.contrib.frontend_cache.backends.AzureCdnBackend',\n            'RESOURCE_GROUP_NAME': 'MY-WAGTAIL-RESOURCE-GROUP',\n            'CDN_PROFILE_NAME': 'wagtailio',\n            'CDN_ENDPOINT_NAME': 'wagtailio-cdn-endpoint-123',\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating INSTALLED_APPS for Custom User Configuration\nDESCRIPTION: Configuration for Django's INSTALLED_APPS setting to use the custom app config instead of the default Wagtail users app, ensuring proper integration of the custom user model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    # Make sure you have two separate entries for the following:\n    \"myapp\",  # an app that contains the custom user model\n    \"myproject.apps.CustomUsersAppConfig\",  # a custom app config for the wagtail.users app\n    # \"wagtail.users\",  # this should be removed in favour of the custom app config\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Using Site Variables in Wagtail Admin Branding\nDESCRIPTION: Example of using site context variables to customize the admin dashboard welcome message, useful for multi-tenanted Wagtail installations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/home.html\" %}\n\n{% block branding_welcome %}Welcome to the Admin Homepage for {{ root_site }}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Blog Index Page Template\nDESCRIPTION: Template for rendering the blog index page with list of blog posts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_13\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% load wagtailcore_tags %}\n\n{% block body_class %}template-blogindexpage{% endblock %}\n\n{% block content %}\n    <h1>{{ page.title }}</h1>\n\n    <div class=\"intro\">{{ page.intro|richtext }}</div>\n\n    {% for post in page.get_children %}\n        <h2><a href=\"{% pageurl post %}\">{{ post.title }}</a></h2>\n        {{ post.specific.intro }}\n        {{ post.specific.body|richtext }}\n    {% endfor %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Including Custom Template Tag in Django Template\nDESCRIPTION: This snippet shows how to load and use the custom template tag for rendering adverts in a Django template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/rendering.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags demo_tags %}\n\n...\n\n{% block content %}\n\n    ...\n\n    {% adverts %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Checklist for Candidate Issues in Markdown\nDESCRIPTION: A markdown checklist for contributors to confirm before working on an issue. It includes verifying that the issue is not already being worked on, reproducing the problem locally, and ensuring confidence in writing unit tests.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n-   [ ] Confirm that there is not someone actively working on it (no recent PR or comments in the last ~2 months)\n-   [ ] Ensure you can reproduce the problem/scenario in your local version of Wagtail\n-   [ ] Ensure that you feel confident to write a unit test (if it's a code change) to validate that the solution **is** implemented\n```\n\n----------------------------------------\n\nTITLE: Customizing Wagtail Admin Title Prefix\nDESCRIPTION: Template code to replace the default 'Wagtail' title prefix in the admin interface by extending admin_base.html and overriding the branding_title block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/admin_base.html\" %}\n\n{% block branding_title %}Frank's CMS{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Migration for Bulk Delete Permission\nDESCRIPTION: A complete Django data migration that finds all groups with add/edit page permissions and assigns them the new 'bulk_delete' permission to restore pre-1.8 behavior for deleting pages with children.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.8.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations\n\n\ndef add_bulk_delete_permission(apps, schema_editor):\n    \"\"\"Find all groups with add/edit page permissions, and assign them bulk_delete permission\"\"\"\n    GroupPagePermission = apps.get_model('wagtailcore', 'GroupPagePermission')\n    for group_id, page_id in GroupPagePermission.objects.filter(\n        permission_type__in=['add', 'edit']\n    ).values_list('group', 'page').distinct():\n        GroupPagePermission.objects.create(\n            group_id=group_id, page_id=page_id, permission_type='bulk_delete'\n        )\n\n\ndef remove_bulk_delete_permission(apps, schema_editor):\n    GroupPagePermission = apps.get_model('wagtailcore', 'GroupPagePermission')\n    GroupPagePermission.objects.filter(permission_type='bulk_delete').delete()\n```\n\n----------------------------------------\n\nTITLE: Field Panel Configuration with Word Count\nDESCRIPTION: Python code showing how to configure a FieldPanel with word count functionality using Stimulus data attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncontent_panels = Page.content_panels + [\n    FieldPanel('subtitle', classname=\"full\"),\n    FieldPanel(\n        'introduction',\n        classname=\"full\",\n        widget=forms.TextInput(\n            attrs={\n                'data-controller': 'word-count',\n                'data-word-count-max-value': 5,\n                'data-action': 'word-count#updateCount paste->word-count#updateCount',\n            }\n        )\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Querying with Elasticsearch PageQuerySet in Python\nDESCRIPTION: This snippet demonstrates how to perform searches using Elasticsearch on Django models within Wagtail, specifically on PageQuerySet objects. It requires the Wagtail and Elasticsearch environment setup. It shows how to filter live pages, search within descendants of a given index, and return matching instances.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n>>> from wagtail.core.models import Page\n>>> Page.objects.live().descendant_of(events_index).search(\"Hello\")\n[<Page: Event 1>, <Page: Event 2>]\n```\n\n----------------------------------------\n\nTITLE: Defining RenameStreamChildrenOperation for StreamField Block Renaming in Python\nDESCRIPTION: Class definition for RenameStreamChildrenOperation, which renames all StreamBlock children of a given type. The block_path_str should point to the parent StreamBlock containing the blocks to be renamed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RenameStreamChildrenOperation(BaseBlockOperation)\n```\n\n----------------------------------------\n\nTITLE: Creating Portfolio App in Django\nDESCRIPTION: Command to create a new Django app for the portfolio functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py startapp portfolio\n```\n\n----------------------------------------\n\nTITLE: Configuring Site-Specific Django Settings for Multi-instance Wagtail\nDESCRIPTION: Example settings file for a multi-instance Wagtail setup that overrides base settings with site-specific configuration. Shows how to configure database, hosts and media directory for a specific site instance.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/multi_site_multi_instance_multi_tenancy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings/acom.py\n\nfrom base import * # noqa\n\nALLOWED_HOSTS = ['a.com']\nDATABASES[\"NAME\"] = \"acom\"\nDATABASES[\"PASSWORD\"] = \"password-for-acom\"\nMEDIA_DIR = BASE_DIR / \"acom-media\"\n```\n\n----------------------------------------\n\nTITLE: StreamField Definition in Page Model\nDESCRIPTION: Example of using the HeadingBlock in a StreamField definition within a BlogPage model. This shows how the custom block is registered as an available block type.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    body = StreamField([\n        # ...\n        ('heading', HeadingBlock()),\n        # ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Properties with 'as' Syntax\nDESCRIPTION: Demonstrates how to assign image data to a variable to access individual properties of the rendition\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% image page.photo width-400 as tmp_photo %}\n\n<img src=\"{{ tmp_photo.url }}\" width=\"{{ tmp_photo.width }}\"\n    height=\"{{ tmp_photo.height }}\" alt=\"{{ tmp_photo.alt }}\" class=\"my-custom-class\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Detection in Wagtail Settings\nDESCRIPTION: Python code to enable automatic feature detection in Wagtail by setting WAGTAILIMAGES_FEATURE_DETECTION_ENABLED to True in the settings file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nWAGTAILIMAGES_FEATURE_DETECTION_ENABLED = True\n```\n\n----------------------------------------\n\nTITLE: Installing Fly.io CLI on macOS\nDESCRIPTION: Command to install the Fly.io command-line interface (flyctl) using Homebrew on macOS.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# If you have the Homebrew package manager installed, run the following command:\nbrew install flyctl\n```\n\n----------------------------------------\n\nTITLE: Extended HomePage Model\nDESCRIPTION: Python code for extending the HomePage model with a RichTextField\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nfrom wagtail.models import Page\nfrom wagtail.fields import RichTextField\n\n\nclass HomePage(Page):\n    body = RichTextField(blank=True)\n\n    content_panels = Page.content_panels + [\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering StreamField Blocks in Django Template\nDESCRIPTION: Template code that iterates through a StreamField, checking for blocks of type 'heading' and rendering them using include_block tag, which will use the block's template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n{% for block in page.body %}\n    {% if block.block_type == 'heading' %}\n        {% include_block block %}  {# This block will output its own <h1>...</h1> tags. #}\n    {% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Settings in Django Templates\nDESCRIPTION: Examples of accessing settings in Django templates using template tags.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_7\n\nLANGUAGE: django\nCODE:\n```\n{{ settings.app_label.GenericSocialMediaSettings.facebook }}\n{{ settings.app_label.SiteSpecificSocialMediaSettings.facebook }}\n```\n\n----------------------------------------\n\nTITLE: Updated StreamField Block get_context Method Implementation\nDESCRIPTION: The updated implementation of a StreamField block's get_context method that properly handles the new parent_context parameter introduced in Wagtail 1.9. The method passes the parent_context to the superclass method call.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.9.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyBlock(Block):\n\n    def get_context(self, value, parent_context=None):\n        context = super(MyBlock, self).get_context(value, parent_context=parent_context)\n        ...\n        return context\n```\n\n----------------------------------------\n\nTITLE: Preventing XSS in StreamField with Autoescaping Off (HTML)\nDESCRIPTION: This code snippet demonstrates how to disable HTML escaping around a StreamField block in a Wagtail template, allowing editors to insert HTML content without autoescaping. Note that this poses a security risk, as it allows arbitrary HTML or scripting to be inserted by users with editor access.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.11.8.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% autoescape off %}\n{% include_block 'your_block_name' %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Creating Header Template with Navigation in HTML for Wagtail\nDESCRIPTION: This HTML template creates a header with navigation using Wagtail template tags. It generates a menu with a link to the homepage and links to child pages that are live and set to appear in the menu.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/set_up_site_menu.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags navigation_tags %}\n\n<header>\n    {% get_site_root as site_root %}\n    <nav>\n        <p>\n        <a href=\"{% pageurl site_root %}\">Home</a> |\n        {% for menuitem in site_root.get_children.live.in_menu %}\n            <a href=\"{% pageurl menuitem %}\">{{ menuitem.title }}</a>\n        {% endfor %}\n        </p>\n    </nav>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Fixing Database Tree Structure\nDESCRIPTION: Command to scan and fix errors in the database tree structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py fixtree\n```\n\n----------------------------------------\n\nTITLE: HTML Template for User-Specific Form Submission in Wagtail\nDESCRIPTION: This HTML template is designed to work with the user-specific form submission check. It displays different content based on user authentication status and whether the form has already been submitted.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/customization.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n<html>\n    <head>\n        <title>{{ page.title }}</title>\n    </head>\n    <body>\n        <h1>{{ page.title }}</h1>\n\n        {% if user.is_authenticated and user.is_active or request.is_preview %}\n            {% if form %}\n                <div>{{ page.intro|richtext }}</div>\n                <form action=\"{% pageurl page %}\" method=\"POST\">\n                    {% csrf_token %}\n                    {{ form.as_p }}\n                    <input type=\"submit\">\n                </form>\n            {% else %}\n                <div>You can fill in the form only one time.</div>\n            {% endif %}\n        {% else %}\n            <div>To fill in the form, you must log in.</div>\n        {% endif %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Development Dependencies\nDESCRIPTION: Command to install Wagtail package in development mode with testing and documentation dependencies using pip.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -e .\"[testing,docs]\" --config-settings editable-mode=strict -U\n```\n\n----------------------------------------\n\nTITLE: Skip Link CSS Styling\nDESCRIPTION: CSS styles for implementing a skip link accessibility feature, allowing keyboard users to jump directly to main content.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/style_your_site.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.skip-link {\n    position: absolute;\n    top: -30px;\n}\n\n.skip-link:focus-visible {\n    top: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Document Extensions in Wagtail\nDESCRIPTION: Defines permitted file extensions for document uploads using WAGTAILDOCS_EXTENSIONS setting. Extensions are validated using Django's FileExtensionValidator.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/storing_and_serving.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_EXTENSIONS = ['pdf', 'docx']\n```\n\n----------------------------------------\n\nTITLE: Configuring SlugInput Widget for Page Model in Python\nDESCRIPTION: Demonstrates how to explicitly add the SlugInput widget to a Page model's promote_panels. This is no longer required as of Wagtail 5.0, but is still valid.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.widgets.slug import SlugInput\n# ... other imports\n\nclass MyPage(Page):\n    promote_panels = [\n        FieldPanel(\"slug\", widget=SlugInput),\n        # ... other panels\n    ]\n```\n\n----------------------------------------\n\nTITLE: Enhanced Base Template for Wagtail\nDESCRIPTION: Modified base template that includes SEO improvements, responsive meta tags, color scheme support, and semantic HTML structure. Implements favicon and improves accessibility.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/style_your_site.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static wagtailcore_tags %}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>\n            {% block title %}\n            {% if page.seo_title %}{{ page.seo_title }}{% else %}{{ page.title }}{% endif %}\n            {% endblock %}\n            {% block title_suffix %}\n            {% wagtail_site as current_site %}\n            {% if current_site and current_site.site_name %}- {{ current_site.site_name }}{% endif %}\n            {% endblock %}\n        </title>\n        {% if page.search_description %}\n        <meta name=\"description\" content=\"{{ page.search_description }}\" />\n        {% endif %}\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n        {% if request.in_preview_panel %}\n        <base target=\"_blank\">\n        {% endif %}\n\n        <meta name=\"color-scheme\" content=\"light dark\">\n\n        <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>🍩</text></svg>\"/>\n\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/mysite.css' %}\">\n\n        {% block extra_css %}\n        {% endblock %}\n    </head>\n\n    <body class=\"{% block body_class %}{% endblock %}\">\n        {% include \"includes/header.html\" %}\n\n        <main>\n            {% block content %}{% endblock %}\n        </main>\n\n        {% include \"includes/footer.html\" %}\n\n        <script type=\"text/javascript\" src=\"{% static 'js/mysite.js' %}\"></script>\n\n        {% block extra_js %}\n        {% endblock %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Package\nDESCRIPTION: Command to install Wagtail package using pip package manager\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install wagtail\n```\n\n----------------------------------------\n\nTITLE: Customizing Wagtail Admin Login Message\nDESCRIPTION: Template code to replace the default login message by extending login.html and overriding the branding_login block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/login.html\" %}\n\n{% block branding_login %}Sign in to Frank's Site{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating Form Landing Page Template in Wagtail\nDESCRIPTION: Implements the thank you page template displayed after successful form submission. Shows the page title and thank you text.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_contact_page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n{% load wagtailcore_tags %}\n\n{% block body_class %}template-formpage{% endblock %}\n\n{% block content %}\n    <h1>{{ page.title }}</h1>\n    <div>{{ page.thank_you_text|richtext }}</div>\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Migrating Settings Menu Item Icons in Wagtail\nDESCRIPTION: Update icon configuration for settings menu items by replacing icon attribute with classnames for custom icons. Supports two migration patterns using register_setting and register_settings_menu_item decorators.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.13.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@register_setting(icon='', classnames='icon icon-custom-cog')\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn SettingMenuItem(CustomSetting, icon='', classnames='icon icon-custom-cog')\n```\n\n----------------------------------------\n\nTITLE: Extending Wagtail User Create Template\nDESCRIPTION: HTML template that extends Wagtail's default user creation template to include the custom fields from the custom user model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"wagtailusers/users/create.html\" %}\n\n{% block extra_fields %}\n    <li>{% include \"wagtailadmin/shared/field.html\" with field=form.country %}</li>\n    <li>{% include \"wagtailadmin/shared/field.html\" with field=form.status %}</li>\n{% endblock extra_fields %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja2 Templates in Wagtail\nDESCRIPTION: Configuration settings required to enable Jinja2 templates in Wagtail 1.3, showing the new location for template tag modules which have moved from 'templatetags' to 'jinja2tags' to support Django 1.9.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.3.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    # ...\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'extensions': [\n                'wagtail.core.jinja2tags.core',\n                'wagtail.wagtailadmin.jinja2tags.userbar',\n                'wagtail.wagtailimages.jinja2tags.images',\n            ],\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Ordering Results in Wagtail API v2\nDESCRIPTION: Examples of using the '?order' parameter to sort results in ascending or descending order by specific fields. Demonstrates single field ordering and multiple field ordering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?order=title\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 50\n    },\n    \"items\": [\n        pages will be listed here in ascending title order (a-z)\n    ]\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?order=-title\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 50\n    },\n    \"items\": [\n        pages will be listed here in descending title order (z-a)\n    ]\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?order=title,-slug\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 50\n    },\n    \"items\": [\n        pages will be ordered by title and for all matching titles (a-z), then sorted by slug (z-a).\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields When Copying Pages in Wagtail\nDESCRIPTION: Example of using the exclude_fields_in_copy attribute to specify fields that should not be copied when duplicating a page, useful for unique identifiers or special relations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPage(Page):\n    exclude_fields_in_copy = ['special_relation', 'custom_uuid']\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Relation Name for Admin Comments in Wagtail\nDESCRIPTION: Configuration setting to rename the admin comments relation to 'wagtail_admin_comments' to avoid conflicts with third-party commenting apps. This allows developers to opt in to the Wagtail 2.15 behavior in version 2.14.2.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.14.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_COMMENTS_RELATION_NAME = 'wagtail_admin_comments'\n```\n\n----------------------------------------\n\nTITLE: Comment Update Notification Template in Django\nDESCRIPTION: A Django template that generates a text notification for various comment updates on a Wagtail page. It handles displaying new comments, resolved comments, deleted comments, and new replies to existing comments, along with a link to edit the page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/updated_comments.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load i18n wagtailadmin_tags %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %}{% blocktrans trimmed with title=page.get_admin_display_title|safe editor=editor|user_display_name|safe %}{{ editor }} has updated comments on \"{{ title }}\".{% endblocktrans %}\n{% spaceless %}\n\n{% endspaceless %}{% if new_comments %}\n\n{% trans \"New comments:\" %}{% for comment in new_comments %}\n - \"{{ comment.text|safe }}\"\n{% endfor %}{% endif %}{% spaceless %}\n\n{% endspaceless %}{% if resolved_comments %}\n\n{% trans \"Resolved comments:\" %}{% for comment in resolved_comments %}\n - \"{{ comment.text|safe }}\"\n{% endfor %}{% endif %}{% spaceless %}\n\n{% endspaceless %}{% if deleted_comments %}\n\n{% trans \"Deleted comments:\" %}{% for comment in deleted_comments %}\n - \"{{ comment.text|safe }}\"\n{% endfor %}{% endif %}{% spaceless %}\n\n{% endspaceless %}{% if replied_comments %}\n\n{% trans \"New replies:\" %}{% for thread in replied_comments %}\n\n  {% trans 'New replies to:' %} \"{{ thread.comment.text|safe }}\"{% for reply in thread.replies %}\n   - \"{{ reply.text|safe }}\"{% endfor %}{% endfor %}{% endif %}\n\n{% trans \"You can edit the page here:\" %} {{ base_url }}{% url 'wagtailadmin_pages:edit' page.id %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Rename Operation Configuration\nDESCRIPTION: Example of configuring a rename operation for StreamField children using RenameStreamChildrenOperation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n(RenameStreamChildrenOperation(old_name=\"field1\", new_name=\"block1\"), \"stream1\")\n```\n\n----------------------------------------\n\nTITLE: Modifying UnpublishedChangesReportView Class for Template Updates\nDESCRIPTION: Shows how to change a PageReportView subclass by replacing the template_name attribute with results_template_name and updating the template path.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n class UnpublishedChangesReportView(PageReportView):\n-    template_name = \"reports/unpublished_changes_report.html\"\n+    results_template_name = \"reports/unpublished_changes_report_results.html\"\n```\n\n----------------------------------------\n\nTITLE: Task Model with Read-only Fields\nDESCRIPTION: Adds configuration to prevent editing of certain fields after task creation\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# <project>/models.py\n\nfrom django.conf import settings\nfrom django.db import models\nfrom wagtail.models import Task\n\n\nclass UserApprovalTask(Task):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=False)\n\n    admin_form_fields = Task.admin_form_fields + ['user']\n\n    # prevent editing of `user` after the task is created\n    # by default, this attribute contains the 'name' field to prevent tasks from being renamed\n    admin_form_readonly_on_edit_fields = Task.admin_form_readonly_on_edit_fields + ['user']\n```\n\n----------------------------------------\n\nTITLE: Custom Index Settings for Elasticsearch\nDESCRIPTION: Example of customizing Elasticsearch index settings including shard configuration and language analyzer settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        ...,\n        'INDEX_SETTINGS': {\n            'settings': {\n                'index': {\n                    'number_of_shards': 1,\n                },\n                'analysis': {\n                    'analyzer': {\n                        'default': {\n                            'type': 'italian'\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Registering Page Listing Buttons with next_url (Wagtail)\nDESCRIPTION: This snippet demonstrates how to update functions registered with the 'register_page_listing_buttons' hook to accept the new 'next_url' keyword argument. This allows a URL to be specified for redirection after the action is complete, enhancing user experience.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.10.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @hooks.register('register_page_listing_buttons')\n    def page_listing_more_buttons(page, page_perms, is_parent=False, next_url=None):\n        yield wagtailadmin_widgets.Button(\n            'My button', '/goes/to/a/url/', priority=60\n        )\n```\n\n----------------------------------------\n\nTITLE: Overriding Default SlugInput with TextInput in Python\nDESCRIPTION: Demonstrates how to override the default SlugInput widget with a plain TextInput widget if the default behavior is not desired.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms.widgets import TextInput\n# ... other imports\n\nclass MyPage(Page):\n    promote_panels = [\n        FieldPanel(\"slug\", widget=TextInput), # use a plain text field\n        # ... other panels\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using image() Function in Jinja2 Template\nDESCRIPTION: These snippets show how to use the image() function to resize images and render them in Jinja2 templates. It includes examples for rendering an <img> tag and retrieving a resized image object.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_4\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ image(page.header_image, \"fill-1024x200\", class=\"header-image\") }}\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% set background=image(page.background_image, \"max-1024x1024\") %}\n<div class=\"wrapper\" style=\"background-image: url({{ background.url }});\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using wagtail_site() Function in Jinja2 Template\nDESCRIPTION: This snippet shows how to use the wagtail_site() function to access the current Site object in a Jinja2 template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_8\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ wagtail_site().site_name }}\n```\n\n----------------------------------------\n\nTITLE: TaskState Methods and Properties Documentation\nDESCRIPTION: Documentation for TaskState class methods and properties including status choices, copy behavior, and task state management functions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_28\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: TaskState\n    :no-index:\n\n    .. attribute:: STATUS_CHOICES\n\n        A tuple of the possible options for the ``status`` field, and their verbose names. Options are ``STATUS_IN_PROGRESS``, ``STATUS_APPROVED``,\n        ``STATUS_CANCELLED``, ``STATUS_REJECTED`` and ``STATUS_SKIPPED``.\n\n    .. attribute:: exclude_fields_in_copy\n\n        A list of fields not to copy when the ``TaskState.copy()`` method is called.\n\n    .. autoattribute:: specific\n\n    .. automethod:: approve\n\n    .. automethod:: reject\n\n    .. autoattribute:: task_type_started_at\n\n    .. automethod:: cancel\n\n    .. automethod:: copy\n\n    .. automethod:: get_comment\n```\n\n----------------------------------------\n\nTITLE: ListBlock Structure Definition\nDESCRIPTION: Example of StreamField definition using ListBlock and StructBlock for complex data structures.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyStructBlock(StructBlock):\n    char1 = CharBlock()\n    char2 = CharBlock()\n\nclass MyStreamBlock(StreamBlock):\n    list1 = ListBlock(MyStructBlock())\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Entity Plugin in JavaScript\nDESCRIPTION: This JavaScript code registers the custom stock entity plugin with Draftail, specifying the entity type, source component, and decorator component.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Register the plugin directly on script execution so the editor loads it when initializing.\nwindow.draftail.registerPlugin({\n  type: 'STOCK',\n  source: StockSource,\n  decorator: Stock,\n}, 'entityTypes');\n```\n\n----------------------------------------\n\nTITLE: Enabling Inspect View for Snippet Permissions in Python\nDESCRIPTION: Demonstrates how to enable the inspect view for a SnippetViewSet to register the 'view' permission for snippets.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FooViewSet(SnippetViewSet):\n    ...\n    inspect_view_enabled = True\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comments Relation Name with Backwards Compatibility in Python\nDESCRIPTION: Code snippet for reusable library code to determine the correct relation name for comments while maintaining backwards compatibility with previous Wagtail versions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.13.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from wagtail.core.models import COMMENTS_RELATION_NAME\nexcept ImportError:\n    COMMENTS_RELATION_NAME = 'comments'\n```\n\n----------------------------------------\n\nTITLE: Search Promotions Garbage Collection Command\nDESCRIPTION: Management command for cleaning out old search query logs using the searchpromotions_garbage_collect command.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/searchpromotions.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py searchpromotions_garbage_collect\n```\n\n----------------------------------------\n\nTITLE: Creating New Wagtail Project\nDESCRIPTION: Command to create a new Wagtail project with default template structure including models, templates, and settings files.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwagtail start mysite\n```\n\n----------------------------------------\n\nTITLE: Inserting Global Admin JavaScript in Wagtail (Python)\nDESCRIPTION: This hook demonstrates how to add a global JavaScript file (Three.js library) to all Wagtail admin pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('insert_global_admin_js')\ndef global_admin_js():\n    return format_html(\n        '<script src=\"{}\"></script>',\n        \"https://cdnjs.cloudflare.com/ajax/libs/three.js/r74/three.js\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript to Prevent Title Pre-filling in Wagtail\nDESCRIPTION: This example shows how to register a JavaScript file that prevents the automatic pre-filling of titles from filenames in Wagtail's image upload interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/title_generation_on_upload.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.templatetags.static import static\nfrom django.utils.html import format_html\n\nfrom wagtail import hooks\n\n@hooks.register(\"insert_global_admin_js\")\ndef get_global_admin_js():\n    script_url = static('js/stop_prefill.js')\n    return format_html('<script src=\"{}\"></script>', script_url)\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Django Templates with Wagtail's icon Template Tag\nDESCRIPTION: Example of how to use Wagtail's icon template tag to render an SVG icon in a Django template. The tag accepts name, classname, and title parameters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/icons.md#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailadmin_tags %}\n{% icon name=\"toucan\" classname=\"...\" title=\"...\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail and Project Dependencies\nDESCRIPTION: Commands for installing Wagtail and project-specific requirements\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install wagtail\n```\n\nLANGUAGE: sh\nCODE:\n```\nwagtail start mysite mysite\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd mysite\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Rendering documents from a StreamField in a template\nDESCRIPTION: Template code for iterating through and displaying document links from a StreamField on a Wagtail page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% for block in page.documents %}\n    <a href=\"{{ block.value.url }}\">{{ block.value.title }}</a>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: HTML Storage Format for Page Links in Wagtail Rich Text\nDESCRIPTION: Example of how page links are stored in the database before rendering. Shows the custom linktype attribute used for identifying rewrite rules.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p><a linktype=\"page\" id=\"3\">Contact us</a> for more information.</p>\n```\n\n----------------------------------------\n\nTITLE: Responsive Embed Styling\nDESCRIPTION: CSS rules for making embedded media and images responsive\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.body img {\n    max-width: 100%;\n    height: auto;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.responsive-object {\n    position: relative;\n}\n\n.responsive-object iframe,\n.responsive-object object,\n.responsive-object embed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating construct_wagtail_userbar Hook Implementation\nDESCRIPTION: Shows the updated signature for the construct_wagtail_userbar hook, which now includes 'page' as a third parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_wagtail_userbar')\ndef construct_wagtail_userbar(request, items, page):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Updating Draftail Chooser URLs Implementation - Python/JavaScript\nDESCRIPTION: Demonstrates the migration from using global window.chooserUrls to using Entity options for Draftail chooser URLs configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Old way - wagtail_hooks.py\n@hooks.register(\"insert_editor_js\")\ndef editor_js():\n    return format_html(\n        \"\"\"\n        <script>\n            window.chooserUrls.myCustomChooser = '{0}';\n        </script>\n        \"\"\",\n        reverse(\"myapp_chooser:choose\"),\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\n# New way - wagtail_hooks.py\nfrom django.urls import reverse_lazy\n\n@hooks.register(\"register_rich_text_features\")\ndef register_my_custom_feature(features):\n    # features.register_link_type...\n\n    features.register_editor_plugin(\n        \"draftail\",\n        \"custom-link\",\n        draftail_features.EntityFeature(\n            {\n                \"type\": \"CUSTOM_ITEM\",\n                \"icon\": \"doc-full-inverse\",\n                \"description\": gettext_lazy(\"Item\"),\n                \"chooserUrls\": {\n                    # Important: `reverse_lazy` must be used unless the URL path is hard-coded\n                    \"myChooser\": reverse_lazy(\"myapp_chooser:choose\")\n                },\n            },\n            js=[\"...\"],\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional StreamField Block Rendering\nDESCRIPTION: Template code showing conditional rendering of different block types with custom HTML structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n\n    ...\n\n<article>\n    {% for block in page.body %}\n        {% if block.block_type == 'heading' %}\n            <h1>{{ block.value }}</h1>\n        {% else %}\n            <section class=\"block-{{ block.block_type }}\">\n                {% include_block block %}\n            </section>\n        {% endif %}\n    {% endfor %}\n</article>\n```\n\n----------------------------------------\n\nTITLE: Permission Restriction Implementation\nDESCRIPTION: Method for adding superuser-only permission restriction to the report view.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    def dispatch(self, request, *args, **kwargs):\n        if not self.request.user.is_superuser:\n            return permission_denied(request)\n        return super().dispatch(request, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Running Wagtail Fixtree Command in Console\nDESCRIPTION: Command to identify and delete orphaned pages that may have been left behind due to a page deletion bug in Wagtail 0.8. The command runs interactively and requires confirmation before deleting orphaned pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.8.6.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./manage.py fixtree\n```\n\n----------------------------------------\n\nTITLE: Rendering TableBlock in Templates\nDESCRIPTION: Django template code showing how to render table blocks using include_block tag\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/table_block.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n\n{% include_block page.body %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n\n{% for block in page.body %}\n    {% if block.block_type == 'table' %}\n        {% include_block block %}\n    {% else %}\n        {# rendering for other block types #}\n    {% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Updating Search Index\nDESCRIPTION: Command to rebuild the search index with options for backend specification and chunk size.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py update_index [--backend <backend name>]\n```\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py update_index --backend default\n```\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py update_index --schema-only\n```\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py update_index --verbosity 0\n```\n\n----------------------------------------\n\nTITLE: Updating GroupPagePermission Fixture in JSON\nDESCRIPTION: Example of updating a GroupPagePermission fixture to use the new Permission model instead of the deprecated permission_type field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pk\": 11,\n  \"model\": \"wagtailcore.grouppagepermission\",\n  \"fields\": {\n    \"group\": [\"Event moderators\"],\n    \"page\": 12,\n    \"permission\": [\"change_page\", \"wagtailcore\", \"page\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Files Tag Usage\nDESCRIPTION: Example of using the static tag to reference static assets\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n...\n<img src=\"{% static \"name_of_app/myimage.jpg\" %}\" alt=\"My image\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap URL Pattern\nDESCRIPTION: URL configuration in urls.py to add the sitemap view from wagtail.contrib.sitemaps.views that generates the XML sitemap.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/sitemaps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.contrib.sitemaps.views import sitemap\n\nurlpatterns = [\n    ...\n\n    path('sitemap.xml', sitemap),\n\n    ...\n\n    # Ensure that the 'sitemap' line appears above the default Wagtail page serving route\n    path(\"\", include(wagtail_urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Content Above Password Reset Form\nDESCRIPTION: Template code to add custom content above the password reset form by extending the form.html template and overriding the above_login block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/account/password_reset/form.html\" %}\n\n{% block above_login %} If you have not received your email within 7 days, call us. {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: New ListBlock Format Example\nDESCRIPTION: Example showing the new format (Wagtail 2.16+) of ListBlock values with type and id metadata.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n[\n    { \"type\": \"item\", \"id\": \"...\", \"value\": value1 },\n    { \"type\": \"item\", \"id\": \"...\", \"value\": value2 },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Managers in Wagtail Page Models (Python)\nDESCRIPTION: This code snippet illustrates how to define a custom manager for Wagtail Page models, specifically showing how to correctly set the objects manager for subclasses to ensure they function correctly with PageManager. It addresses changes in inheritance rules that require explicit assignment of the PageManager in subclasses.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.6.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass EventPage(Page):\n    objects = EventManager()\n\n\nclass SpecialEventPage(EventPage):\n    # Previously SpecialEventPage.objects would be set to a PageManager automatically;\n    # this now needs to be set explicitly\n    objects = PageManager()\n```\n\n----------------------------------------\n\nTITLE: Defining Comments Relation Name Constant in Python\nDESCRIPTION: Sets the constant COMMENTS_RELATION_NAME to 'comments' for use in the Wagtail CMS system to maintain consistent reference to comment relationships.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCOMMENTS_RELATION_NAME = 'comments'\n```\n\n----------------------------------------\n\nTITLE: Selecting Live Pages - Wagtail QuerySet - Python\nDESCRIPTION: This snippet selects pages that are in a 'live' state using the Wagtail QuerySet API. It requires a Wagtail Page model and returns pages that are currently live. Returns a QuerySet containing only live pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/queryset_reference.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlive_pages = Page.objects.live()\n```\n\n----------------------------------------\n\nTITLE: Deprecating window.wagtailConfig.BULK_ACTION_ITEM_TYPE in JavaScript\nDESCRIPTION: Shows the old way of setting BULK_ACTION_ITEM_TYPE using an inline script, which is now deprecated. This approach is being phased out to reduce reliance on inline scripts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% block extra_js %}\n    {{ block.super }}\n    <script>\n        window.wagtailConfig.BULK_ACTION_ITEM_TYPE = 'SOME_ITEM';\n    </script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Homepage Panel Construction\nDESCRIPTION: Shows how to add a custom welcome panel to the Wagtail admin homepage.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.html import format_html\n\nfrom wagtail.admin.ui.components import Component\nfrom wagtail import hooks\n\nclass WelcomePanel(Component):\n    order = 50\n\n    def render_html(self, parent_context):\n        return format_html(\n            \"\"\"\n            <section class=\\\"panel summary nice-padding\\\">\n              <h3>No, but seriously -- welcome to the admin homepage.</h3>\n            </section>\n            \"\"\"\n        )\n\n@hooks.register('construct_homepage_panels')\ndef add_another_welcome_panel(request, panels):\n    panels.append(WelcomePanel())\n```\n\n----------------------------------------\n\nTITLE: Adjusting UI Density in Wagtail Admin\nDESCRIPTION: CSS examples for customizing the information density of the Wagtail admin interface by modifying the density factor CSS variable.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n:root,\n:host {\n    /* Reduce the UI density by 20% for users of the default theme. */\n    --w-density-factor: 0.8;\n}\n\n:root,\n:host {\n    /* Increase the UI density by 20% for users of the default theme. */\n    --w-density-factor: 1.2;\n}\n\n.w-density-snug {\n    /* For snug theme users, set a UI density even lower than vanilla Wagtail. */\n    --w-density-factor: 0.25;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Cache with Bearer Token\nDESCRIPTION: Settings configuration for Cloudflare cache backend using API token authentication.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nWAGTAILFRONTENDCACHE = {\n    'cloudflare': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudflareBackend',\n        'BEARER_TOKEN': 'your cloudflare bearer token',\n        'ZONEID': 'your cloudflare domain zone id',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Event Block Template Using bound_blocks\nDESCRIPTION: Updated template that correctly renders the HeadingBlock by accessing it through the bound_blocks attribute, which preserves the template rendering capabilities.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n<div class=\"event {% if value.heading == 'Party!' %}lots-of-balloons{% endif %}\">\n    {% include_block value.bound_blocks.heading %}\n    - {% include_block value.description %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Wagtail UI Colors with CSS Custom Properties\nDESCRIPTION: A comprehensive set of CSS custom properties that define the color scheme for Wagtail's user interface. The variables use HSL color format with relational calculations to maintain a cohesive color system where colors are mathematically derived from base values.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n:root {--w-color-black-hue: 0;--w-color-black-saturation: 0%;--w-color-black-lightness: 0%;--w-color-black: hsl(var(--w-color-black-hue) var(--w-color-black-saturation) var(--w-color-black-lightness));--w-color-grey-50-hue: calc(var(--w-color-grey-800-hue) + 240);--w-color-grey-50-saturation: calc(var(--w-color-grey-800-saturation) + 12.5%);--w-color-grey-50-lightness: calc(var(--w-color-grey-800-lightness) + 85.5%);--w-color-grey-50: hsl(var(--w-color-grey-50-hue) var(--w-color-grey-50-saturation) var(--w-color-grey-50-lightness));--w-color-grey-100-hue: var(--w-color-grey-800-hue);--w-color-grey-100-saturation: var(--w-color-grey-800-saturation);--w-color-grey-100-lightness: calc(var(--w-color-grey-800-lightness) + 76.4%);--w-color-grey-100: hsl(var(--w-color-grey-100-hue) var(--w-color-grey-100-saturation) var(--w-color-grey-100-lightness));--w-color-grey-150-hue: var(--w-color-grey-800-hue);--w-color-grey-150-saturation: var(--w-color-grey-800-saturation);--w-color-grey-150-lightness: calc(var(--w-color-grey-800-lightness) + 67%);--w-color-grey-150: hsl(var(--w-color-grey-150-hue) var(--w-color-grey-150-saturation) var(--w-color-grey-150-lightness));--w-color-grey-200-hue: var(--w-color-grey-800-hue);--w-color-grey-200-saturation: var(--w-color-grey-800-saturation);--w-color-grey-200-lightness: calc(var(--w-color-grey-800-lightness) + 45.9%);--w-color-grey-200: hsl(var(--w-color-grey-200-hue) var(--w-color-grey-200-saturation) var(--w-color-grey-200-lightness));--w-color-grey-400-hue: var(--w-color-grey-800-hue);--w-color-grey-400-saturation: var(--w-color-grey-800-saturation);--w-color-grey-400-lightness: calc(var(--w-color-grey-800-lightness) + 24.7%);--w-color-grey-400: hsl(var(--w-color-grey-400-hue) var(--w-color-grey-400-saturation) var(--w-color-grey-400-lightness));--w-color-grey-500-hue: var(--w-color-grey-800-hue);--w-color-grey-500-saturation: var(--w-color-grey-800-saturation);--w-color-grey-500-lightness: calc(var(--w-color-grey-800-lightness) + 8.6%);--w-color-grey-500: hsl(var(--w-color-grey-500-hue) var(--w-color-grey-500-saturation) var(--w-color-grey-500-lightness));--w-color-grey-600-hue: var(--w-color-grey-800-hue);--w-color-grey-600-saturation: var(--w-color-grey-800-saturation);--w-color-grey-600-lightness: calc(var(--w-color-grey-800-lightness) + 3.5%);--w-color-grey-600: hsl(var(--w-color-grey-600-hue) var(--w-color-grey-600-saturation) var(--w-color-grey-600-lightness));--w-color-grey-700-hue: var(--w-color-grey-800-hue);--w-color-grey-700-saturation: var(--w-color-grey-800-saturation);--w-color-grey-700-lightness: calc(var(--w-color-grey-800-lightness) + 1.9%);--w-color-grey-700: hsl(var(--w-color-grey-700-hue) var(--w-color-grey-700-saturation) var(--w-color-grey-700-lightness));--w-color-grey-800-hue: 0;--w-color-grey-800-saturation: 0%;--w-color-grey-800-lightness: 11.4%;--w-color-grey-800: hsl(var(--w-color-grey-800-hue) var(--w-color-grey-800-saturation) var(--w-color-grey-800-lightness));--w-color-white-hue: 0;--w-color-white-saturation: 0%;--w-color-white-lightness: 100%;--w-color-white: hsl(var(--w-color-white-hue) var(--w-color-white-saturation) var(--w-color-white-lightness));--w-color-primary-200-hue: calc(var(--w-color-primary-hue) - 0.5);--w-color-primary-200-saturation: calc(var(--w-color-primary-saturation) - 0.4%);--w-color-primary-200-lightness: calc(var(--w-color-primary-lightness) - 4.1%);--w-color-primary-200: hsl(var(--w-color-primary-200-hue) var(--w-color-primary-200-saturation) var(--w-color-primary-200-lightness));--w-color-primary-hue: 254.3;--w-color-primary-saturation: 50.4%;--w-color-primary-lightness: 24.5%;--w-color-primary: hsl(var(--w-color-primary-hue) var(--w-color-primary-saturation) var(--w-color-primary-lightness));--w-color-secondary-50-hue: calc(var(--w-color-secondary-hue) - 0.5);--w-color-secondary-50-saturation: calc(var(--w-color-secondary-saturation) - 37.5%);--w-color-secondary-50-lightness: calc(var(--w-color-secondary-lightness) + 72.2%);--w-color-secondary-50: hsl(var(--w-color-secondary-50-hue) var(--w-color-secondary-50-saturation) var(--w-color-secondary-50-lightness));--w-color-secondary-75-hue: calc(var(--w-color-secondary-hue) + 0.2);--w-color-secondary-75-saturation: calc(var(--w-color-secondary-saturation) - 47%);--w-color-secondary-75-lightness: calc(var(--w-color-secondary-lightness) + 42.8%);--w-color-secondary-75: hsl(var(--w-color-secondary-75-hue) var(--w-color-secondary-75-saturation) var(--w-color-secondary-75-lightness));--w-color-secondary-100-hue: calc(var(--w-color-secondary-hue) - 0.2);--w-color-secondary-100-saturation: var(--w-color-secondary-saturation);--w-color-secondary-100-lightness: calc(var(--w-color-secondary-lightness) + 10%);--w-color-secondary-100: hsl(var(--w-color-secondary-100-hue) var(--w-color-secondary-100-saturation) var(--w-color-secondary-100-lightness));--w-color-secondary-400-hue: calc(var(--w-color-secondary-hue) + 1.4);--w-color-secondary-400-saturation: var(--w-color-secondary-saturation);--w-color-secondary-400-lightness: calc(var(--w-color-secondary-lightness) - 6.3%);--w-color-secondary-400: hsl(var(--w-color-secondary-400-hue) var(--w-color-secondary-400-saturation) var(--w-color-secondary-400-lightness));--w-color-secondary-600-hue: calc(var(--w-color-secondary-hue) + 1.2);--w-color-secondary-600-saturation: var(--w-color-secondary-saturation);--w-color-secondary-600-lightness: calc(var(--w-color-secondary-lightness) - 11.2%);--w-color-secondary-600: hsl(var(--w-color-secondary-600-hue) var(--w-color-secondary-600-saturation) var(--w-color-secondary-600-lightness));--w-color-secondary-hue: 180.5;--w-color-secondary-saturation: 100%;--w-color-secondary-lightness: 24.7%;--w-color-secondary: hsl(var(--w-color-secondary-hue) var(--w-color-secondary-saturation) var(--w-color-secondary-lightness));--w-color-info-50-hue: calc(var(--w-color-info-125-hue) + 2.2);--w-color-info-50-saturation: calc(var(--w-color-info-125-saturation) + 15.1%);--w-color-info-50-lightness: calc(var(--w-color-info-125-lightness) + 65.9%);--w-color-info-50: hsl(var(--w-color-info-50-hue) var(--w-color-info-50-saturation) var(--w-color-info-50-lightness));--w-color-info-75-hue: calc(var(--w-color-info-125-hue) + 0.4);--w-color-info-75-saturation: calc(var(--w-color-info-125-saturation) - 27.4%);--w-color-info-75-lightness: calc(var(--w-color-info-125-lightness) + 36.3%);--w-color-info-75: hsl(var(--w-color-info-75-hue) var(--w-color-info-75-saturation) var(--w-color-info-75-lightness));--w-color-info-100-hue: calc(var(--w-color-info-125-hue) - 0.1);--w-color-info-100-saturation: calc(var(--w-color-info-125-saturation) + 0.7%);--w-color-info-100-lightness: calc(var(--w-color-info-125-lightness) + 6.5%);--w-color-info-100: hsl(var(--w-color-info-100-hue) var(--w-color-info-100-saturation) var(--w-color-info-100-lightness));--w-color-info-125-hue: 194.0;--w-color-info-125-saturation: 66.2%;--w-color-info-125-lightness: 27.8%;--w-color-info-125: hsl(var(--w-color-info-125-hue) var(--w-color-info-125-saturation) var(--w-color-info-125-lightness));--w-color-positive-50-hue: calc(var(--w-color-positive-100-hue) + 2.3);--w-color-positive-50-saturation: calc(var(--w-color-positive-100-saturation) + 10.6%);--w-color-positive-50-lightness: calc(var(--w-color-positive-100-lightness) + 61.5%);--w-color-positive-50: hsl(var(--w-color-positive-50-hue) var(--w-color-positive-50-saturation) var(--w-color-positive-50-lightness));--w-color-positive-100-hue: 162.1;--w-color-positive-100-saturation: 66.5%;--w-color-positive-100-lightness: 31.6%;--w-color-positive-100: hsl(var(--w-color-positive-100-hue) var(--w-color-positive-100-saturation) v\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Settings\nDESCRIPTION: Django template configuration to enable settings context processor for Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            os.path.join(PROJECT_DIR, \"templates\"),\n        ],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n\n                # Add this to register the _settings_ context processor:\n                \"wagtail.contrib.settings.context_processors.settings\",\n            ],\n        },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Language Sets for Content and Interface\nDESCRIPTION: Advanced configuration showing how to set different language options for content management versus frontend display.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# my_project/settings.py\n\nLANGUAGES = [\n    ('en-GB', \"English (Great Britain)\"),\n    ('en-US', \"English (United States)\"),\n    ('en-CA', \"English (Canada)\"),\n    ('fr-FR', \"French (France)\"),\n    ('fr-CA', \"French (Canada)\"),\n]\n\nWAGTAIL_CONTENT_LANGUAGES = [\n    ('en-GB', \"English\"),\n    ('fr-FR', \"French\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Direct HTML Rendering Component\nDESCRIPTION: Example of a component that renders HTML directly through the render_html method without using a template\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.html import format_html\nfrom wagtail.admin.components import Component\n\nclass WelcomePanel(Component):\n    def render_html(self, parent_context):\n        return format_html(\"<h1>{}</h1>\", \"Welcome to my app!\")\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Password Required Template for Specific Page Types\nDESCRIPTION: Example showing how to define a custom password_required_template attribute on a specific page model to use a tailored template for that page type's password protection.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass VideoPage(Page):\n    ...\n\n    password_required_template = 'video/password_required.html'\n```\n\n----------------------------------------\n\nTITLE: Modifying Snippet Action Menu in Python\nDESCRIPTION: This snippet demonstrates how to modify the snippet action menu using the construct_snippet_action_menu hook in Wagtail. It removes the delete option from the menu.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_snippet_action_menu')\ndef remove_delete_option(menu_items, request, context):\n    menu_items[:] = [item for item in menu_items if item.name != 'delete']\n```\n\n----------------------------------------\n\nTITLE: Component Template with Context\nDESCRIPTION: Template example showing how to use context variables passed to a component\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h1>Welcome to my app, {{ username }}!</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch URL with Port\nDESCRIPTION: Example of how to properly configure Elasticsearch connection URL with explicit port number 9200 in Wagtail's search backend settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.8.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nhttp://localhost:9200\n```\n\n----------------------------------------\n\nTITLE: TableBlock Cell Alignment Configuration\nDESCRIPTION: Configuration for enabling cell alignment options in TableBlock\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/table_block.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnew_table_options = {\n    'contextMenu': [\n        'row_above',\n        'row_below',\n        '---------',\n        'col_left',\n        'col_right',\n        '---------',\n        'remove_row',\n        'remove_col',\n        '---------',\n        'undo',\n        'redo',\n        '---------',\n        'copy',\n        'cut',\n        '---------',\n        'alignment',\n    ],\n}\n\nclass DemoStreamBlock(StreamBlock):\n    ...\n    table = TableBlock(table_options=new_table_options)\n```\n\n----------------------------------------\n\nTITLE: Replacing Last Updated Shared Include with Human Readable Date Tag\nDESCRIPTION: Example of replacing the deprecated wagtailadmin/shared/last_updated.html include with the human_readable_date template tag.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailadmin_tags %}\n\n<!-- ... -->\n{% human_readable_date my_model.timestamp %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Workflow Rejection Notification Template in Django\nDESCRIPTION: Django template that generates notification text for rejected workflow items. Handles both page and generic model rejections, includes support for rejection comments, editor attribution, and provides edit links. Uses i18n for internationalization support.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/workflow_state_rejected.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %} {% if page %}\n{% if task_state.finished_by %}\n{% blocktrans trimmed with title=page.get_admin_display_title|safe workflow=workflow.name|safe task=task.name|safe rejector=task_state.finished_by|user_display_name %}The page \"{{ title }}\" has been rejected during \"{{ task }}\" in workflow \"{{ workflow }}\" by {{ rejector }}.{% endblocktrans %}\n{% else %}\n{% blocktrans trimmed with title=page.get_admin_display_title|safe workflow=workflow.name|safe task=task.name|safe %}The page \"{{ title }}\" has been rejected during \"{{ task }}\" in workflow \"{{ workflow }}\".{% endblocktrans %}\n{% endif %}\n{% if comment %}\n{% blocktrans trimmed with comment=comment|safe %}The following comment was left: \"{{ comment }}\"{% endblocktrans %}\n{% endif %}\n{% trans \"You can edit the page here:\"%} {{ base_url }}{% url 'wagtailadmin_pages:edit' page.id %} {% else %} {% latest_str object as title %} {% admin_edit_url object user as edit_url %}\n{% if task_state.finished_by %}{% blocktrans trimmed with title=title|safe workflow=workflow.name|safe task=task.name|safe rejector=task_state.finished_by|user_display_name model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been rejected during \"{{ task }}\" in workflow \"{{ workflow }}\" by {{ rejector }}.\n{% endblocktrans %}{{ message|capfirst|safe }}\n{% else %}\n{% blocktrans trimmed with title=title|safe workflow=workflow.name|safe task=task.name|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been rejected during \"{{ task }}\" in workflow \"{{ workflow }}\".\n{% endblocktrans %}{{ message|capfirst|safe }}\n{% endif %}\n{% if comment %}\n{% blocktrans trimmed with comment=comment|safe %}\n    The following comment was left: \"{{ comment }}\"\n{% endblocktrans %}\n{% endif %}\n{% if edit_url %}{% blocktrans trimmed with model_name=model_name|safe asvar edit_message %}You can edit the {{ model_name }} here: {% endblocktrans %}{{ edit_message|capfirst|safe }} {{ base_url }}{{ edit_url }}{% endif %}{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Testing Page Routability in Wagtail - Python\nDESCRIPTION: Example demonstrating how to test page routing functionality using assertPageIsRoutable, including testing different route paths.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.test.utils import WagtailPageTestCase\nfrom myapp.models import EventListPage\n\nclass EventListPageRoutabilityTests(WagtailPageTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # create page(s) for testing\n        ...\n\n    def test_default_route(self):\n        self.assertPageIsRoutable(self.page)\n\n    def test_year_archive_route(self):\n        # NOTE: Despite this page type raising a 404 when no events exist for\n        # the specified year, routing should still be successful\n        self.assertPageIsRoutable(self.page, \"archive/year/1984/\")\n```\n\n----------------------------------------\n\nTITLE: String Translation in Django Templates\nDESCRIPTION: Shows how to use translate and blocktranslate template tags for translations in Django templates, including translation of string literals passed to tags and filters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/translations.md#2025-04-21_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"wagtailadmin/base.html\" %}\n{% load i18n %}\n<!-- preliminary lines of code -->\n\n<!-- Do this to use the translate tag. -->\n{% translate \"Any string of your choosing\" %}\n\n<!-- Do this to use the blocktranslate tag. -->\n{% blocktranslate %}\n    A multi-line translatable literal.\n{% endblocktranslate %}\n\n<!-- Do these to translate string literals passed to tags and filters. -->\n\n{% some_tag _(\"Any string of your choosing\") %}\n{% some_tag arg_of_some_tag=_(\"Any string of your choosing\") %}\n{% some_tag value_of_some_tag|filter=_(\"Any string of your choosing\") value|yesno:_(\"yes,no\") %}\n\n<!-- A typical example of when to use translation of string literals is -->\n{% translate \"example with literal\" as var_name %}\n{% some_tag arg_of_some_tag=var_name %}\n\n<!-- If the variable is only ever used once, you could do this instead -->\n{% some_tag arg_of_some_tag=_(\"example with literal\") %}\n```\n\n----------------------------------------\n\nTITLE: List Template for Unpublished Changes\nDESCRIPTION: Template partial that extends Wagtail's page report listing template to add a 'Last Published' column to the report.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends 'wagtailadmin/reports/listing/_list_page_report.html' %}\n\n{% block extra_columns %}\n    <th>Last Published</th>\n{% endblock %}\n\n{% block extra_page_data %}\n    <td valign=\"top\">\n        {{ page.last_published_at }}\n    </td>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'redirect' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'redirect' icon used in Wagtail admin interface, based on Font Awesome Pro 6.4.0's 'diamond-turn-right (solid)' icon. The path defines a diamond with right arrow with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_70\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-redirect\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! diamond-turn-right (solid): Font Awesome Pro 6.4.0 --><path d=\"M15.531 6.969 9.031.437C8.72.157 8.344 0 7.97 0c-.375.031-.75.156-1.032.469l-6.5 6.5C.126 7.25 0 7.625 0 8c0 .375.125.75.438 1.031l6.5 6.531c.28.313.656.438 1.062.438.375 0 .75-.156 1.031-.438l6.5-6.53C15.844 8.75 16 8.374 16 8c-.031-.375-.156-.75-.469-1.031Zm-2.719.906-3 2.625c-.343.313-.843.031-.843-.375V8.5h-2V10c0 .563-.438 1-1 1-.594 0-1-.438-1-1V7.5c0-.531.437-1 1-1h2.968V4.875c0-.406.5-.625.813-.375l3 2.625c.188.094.219.25.219.375 0 .156-.031.281-.156.375Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Wagtail StreamField Configuration\nDESCRIPTION: Example of StreamField configuration supporting min_num, max_num and block_counts arguments\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nStreamField(\n    min_num=1,\n    max_num=10,\n    block_counts={'heading': {'min_num': 1, 'max_num': 5}}\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Rendered Output for Images in Wagtail\nDESCRIPTION: Example of how embedded images are rendered in final HTML with computed attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img\n    alt=\"A pied wagtail\"\n    class=\"richtext-image left\"\n    height=\"294\"\n    src=\"/media/images/pied-wagtail.width-500.jpg\"\n    width=\"500\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin Display Title for Wagtail Page Models - Python\nDESCRIPTION: This snippet provides an example of how to override the `get_admin_display_title` method in a Wagtail page model to use the new `draft_title` for displaying titles in the admin interface. It ensures that the page titles reflect the current draft state.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.12.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_admin_display_title(self):\n    return \"%(title)s (%(lang)s)\" % {\n        'title': super(TranslatablePage, self).get_admin_display_title(),\n        'lang': self.language_code,\n    }\n```\n\n----------------------------------------\n\nTITLE: SQLite Full-Text Search Migration Recovery Commands\nDESCRIPTION: Console commands to recover full-text search functionality for SQLite databases without FTS support, involving database migration and index update\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./manage.py migrate wagtailsearch 0005\n./manage.py migrate\n./manage.py update_index\n```\n\n----------------------------------------\n\nTITLE: Importing Django REST Framework for Custom API in Wagtail\nDESCRIPTION: This note suggests using Django REST framework to build a custom API if Wagtail's built-in REST API is not suitable. It emphasizes that Wagtail is built on Django, allowing for such customizations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/headless.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers, viewsets\n\n# Custom API implementation using Django REST framework\n```\n\n----------------------------------------\n\nTITLE: Creating Footer Template\nDESCRIPTION: Django template for displaying social media links in the footer.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<footer>\n    <p>Built with Wagtail</p>\n\n    {% with linkedin_url=settings.base.NavigationSettings.linkedin_url github_url=settings.base.NavigationSettings.github_url mastodon_url=settings.base.NavigationSettings.mastodon_url %}\n        {% if linkedin_url or github_url or mastodon_url %}\n            <p>\n                Follow me on:\n                {% if github_url %}\n                    <a href=\"{{ github_url }}\">GitHub</a>\n                {% endif %}\n                {% if linkedin_url %}\n                    <a href=\"{{ linkedin_url }}\">LinkedIn</a>\n                {% endif %}\n                {% if mastodon_url %}\n                    <a href=\"{{ mastodon_url }}\">Mastodon</a>\n                {% endif %}\n            </p>\n        {% endif %}\n    {% endwith %}\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'regex' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'regex' icon used in Wagtail admin interface, identified as a custom icon. The path defines a unique pattern representing regular expressions with a circle and star-like shape.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_71\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-regex\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><circle cx=\"2.926\" cy=\"13.471\" r=\"1.5\"></circle><path d=\"m13.383 10.22-2.37 1.81-1.939-3.584-1.938 3.583-2.37-1.808 2.64-3.037-3.832-.842.899-2.912 3.573 1.695-.433-4.096h2.923l-.433 4.096 3.573-1.695.898 2.912-3.832.842 2.641 3.037Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Families in Wagtail Admin UI\nDESCRIPTION: CSS code to override the default font families used in the Wagtail admin interface by setting CSS variables.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n:root {\n    --w-font-sans: Papyrus;\n    --w-font-mono: Courier;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TypedTableBlock in Wagtail Templates\nDESCRIPTION: Use the include_block tag to render TypedTableBlock as an HTML table in Django templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/typed_table_block.md#2025-04-21_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n{% include_block page.body %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n{% for block in page.body %}\n    {% if block.block_type == 'table' %}\n        {% include_block block %}\n    {% else %}\n        {# rendering for other block types #}\n    {% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme-Specific Color Variables in CSS\nDESCRIPTION: This snippet demonstrates the declaration of theme-specific color variables for Wagtail's UI. These variables define colors for various surface elements and text in both light and dark themes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n--w-color-surface-page: #FFFFFF;\n--w-color-surface-field: #FFFFFF;\n--w-color-surface-field-inactive: #F2F2F2;\n--w-color-surface-header: #0C322C;\n--w-color-surface-menus: #2E7D70;\n--w-color-surface-menu-item-active: #1F594F;\n--w-color-surface-tooltip: #262626;\n--w-color-surface-button-default: #FFFFFF;\n--w-color-surface-button-hover: #F2F2F2;\n--w-color-surface-button-inactive: #F2F2F2;\n--w-color-surface-button-outline-hover: #EDF7F6;\n--w-color-surface-button-critical-hover: #FEF0F0;\n--w-color-surface-status-label: #F2F2F2;\n--w-color-surface-info-panel: #E2F4FC;\n--w-color-surface-dashboard-panel: #FFFFFF;\n--w-color-text-button: #0C322C;\n--w-color-text-label-menus-default: #FFFFFF;\n--w-color-text-label-menus-active: #B8E0D8;\n--w-color-text-label: #4D4D4D;\n--w-color-text-context: #666666;\n--w-color-text-meta: #808080;\n```\n\n----------------------------------------\n\nTITLE: AMP URL Configuration\nDESCRIPTION: Defines URL patterns specifically for AMP pages using the custom serve view.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import re_path\nfrom wagtail.urls import serve_pattern\n\nfrom . import amp_views\n\nurlpatterns = [\n    re_path(serve_pattern, amp_views.serve, name='wagtail_amp_serve')\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Document Types\nDESCRIPTION: Setting to specify allowed file extensions for document uploads\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']\n```\n\n----------------------------------------\n\nTITLE: Adding CommentPanel to Page Settings\nDESCRIPTION: Integrate CommentPanel into page settings edit handlers to enable commenting functionality. Demonstrates how to include CommentPanel when customizing page settings panels.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.13.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HomePage(Page):\n    settings_panels = [\n        # My existing panels here\n        CommentPanel(),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Updating Page Panels with FieldPanel in Python\nDESCRIPTION: Example of how to define content panels for a Wagtail page using FieldPanel before the 5.0.2 update. This snippet demonstrates the previous method of defining the title field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.0.2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel\n\n    # ...\n    content_panels = [\n        MultiFieldPanel([\n            FieldPanel(\"title\"),\n            FieldPanel(\"subtitle\"),\n        ]),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Enabling Page Tree Synchronization in Wagtail Simple Translation\nDESCRIPTION: Set the WAGTAILSIMPLETRANSLATION_SYNC_PAGE_TREE setting to True to enable automatic creation of page aliases across different locales when a new page is created.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/simple_translation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSIMPLETRANSLATION_SYNC_PAGE_TREE = True\n```\n\n----------------------------------------\n\nTITLE: Migrating Header Search Template\nDESCRIPTION: Converting header search from global JavaScript to data attributes approach\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"wagtailadmin/base.html\" %}\n{% load wagtailadmin_tags %}\n{% block extra_js %}\n    {{ block.super }}\n    <script>\n        window.headerSearch = {\n            url: \"{% url 'myapp:search_results' %}\",\n            termInput: '#id_q',\n            targetOutput: '#my-results',\n        };\n    </script>\n{% endblock %}\n{% block content %}\n    {% include \"wagtailadmin/shared/header.html\" with title=\"my title\" search_url=\"myapp:index\" %}\n    ... other content\n{% endblock %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"wagtailadmin/base.html\" %}\n{% load wagtailadmin_tags %}\n{% block content %}\n    {% url 'myapp:search_results' as search_results_url %}\n    {% include \"wagtailadmin/shared/header.html\" with title=\"my title\" search_url=\"myapp:index\" search_results_url=search_results_url search_target=\"#my-results\" %}\n    ... other content\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using the updatemodulepaths Command in Console\nDESCRIPTION: Shows how to use the new updatemodulepaths command to update module paths in your codebase when upgrading to Wagtail 2.0. The command helps migrate from old paths like wagtail.wagtailcore.models to new paths like wagtail.core.models.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ wagtail updatemodulepaths --list  # list the files to be changed without updating them\n$ wagtail updatemodulepaths --diff  # show the changes to be made, without updating files\n$ wagtail updatemodulepaths  # actually update the files\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Image Properties Through Rendition\nDESCRIPTION: Demonstrates how to access properties of the original image through a rendition object.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    >>> newimage.image.title\n    'Blue Sky'\n    >>> newimage.image.is_landscape()\n    True\n```\n\n----------------------------------------\n\nTITLE: Wagtail Moderation Notification Template Structure\nDESCRIPTION: Django template that generates notification text for content submitted to moderation workflow. Handles both page and generic model objects, including links for preview and editing. Uses translation tags for internationalization support.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/task_state_submitted.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %} {% if page %}\n{% blocktrans trimmed with task=task.name|safe title=page.get_admin_display_title|safe %}The page \"{{ title }}\" has been submitted for approval to moderation stage \"{{ task }}\".{% endblocktrans %}\n\n{% trans \"You can preview the page here:\" %} {{ base_url }}{% url 'wagtailadmin_pages:workflow_preview' page.id task.id %}\n{% trans \"You can edit the page here:\" %} {{ base_url }}{% url 'wagtailadmin_pages:edit' page.id %} {% else %} {% latest_str object as title %} {% admin_edit_url object user as edit_url %} {% admin_url_name object 'workflow_preview' as workflow_preview_url_name %} {% url workflow_preview_url_name object.pk|admin_urlquote as preview_url %}\n{% blocktrans trimmed with title=title|safe task=task.name|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been submitted for approval to moderation stage \"{{ task }}\".\n{% endblocktrans %}{{ message|capfirst|safe }} {% if object.is_previewable %}\n{% blocktrans trimmed with model_name=model_name|safe asvar preview_message %}\n    You can preview the {{ model_name }} here:{% endblocktrans %}{{ preview_message|capfirst|safe }} {{ base_url }}{{ preview_url }}\n{% endif %} {% if edit_url %}\n{% blocktrans trimmed with model_name=model_name|safe asvar edit_message %}\n    You can edit the {{ model_name }} here:{% endblocktrans %}{{ edit_message|capfirst|safe }} {{ base_url }}{{ edit_url }}{% endif %}{% endif %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Workflow Submission Message in Django Template\nDESCRIPTION: A template snippet that displays customized workflow submission messages. It handles both page objects and generic model objects, loading required template tags and providing localization support using blocktrans.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/workflow_state_submitted_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n\n{% if page %}\n    {% blocktrans trimmed with title=page.get_admin_display_title|safe workflow=workflow.name|safe %}The page \"{{ title }}\" has been submitted to workflow \"{{ workflow }}\" {% endblocktrans %}\n{% else %}\n    {% latest_str object as title %}\n    {% blocktrans trimmed with title=title|safe workflow=workflow.name|safe model_name=model_name|safe asvar message %}\n        The {{ model_name }} \"{{ title }}\" has been submitted to workflow \"{{ workflow }}\"\n    {% endblocktrans %}\n    {{ message|capfirst|safe }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Commands to create and apply database migrations after model changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Auto Update Configuration for Search Backend\nDESCRIPTION: Configuration to disable automatic index updates for performance optimization. Requires manual index updates when disabled.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': ...,\n        'AUTO_UPDATE': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SVG H1 Icon Definition (Custom)\nDESCRIPTION: Custom SVG icon for an H1 heading element. Includes a stylized 'H' and '1' character. Located at wagtailadmin/icons/h1.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_52\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-h1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M9.732 11.5a.63.63 0 0 1-.625.625H7.232a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.313V8.062H3.17v2.813h.312c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625H1.607a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.313v-6.25h-.313A.617.617 0 0 1 .982 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625H3.17v2.188h4.375V4.624h-.313A.617.617 0 0 1 6.607 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.312v6.25h.312c.332 0 .625.293.625.625Zm2.487 0h1.606V3.75h-1.611L10.21 5.14v1.44l1.977-1.343h.032V11.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Wagtail Forms in Python\nDESCRIPTION: Adds the wagtail.contrib.forms app to the INSTALLED_APPS list in Django settings to enable form builder functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/forms/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'wagtail.contrib.forms',\n]\n```\n\n----------------------------------------\n\nTITLE: Updated Bulk Actions Footer Template in Django\nDESCRIPTION: Demonstrates the new way to declare the item_type for bulk actions using the wagtailadmin/bulk_actions/footer.html template include. This replaces the deprecated inline script approach.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.md#2025-04-21_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% block bulk_actions %}\n    {% include 'wagtailadmin/bulk_actions/footer.html' ... item_type=\"SOME_ITEM\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Task Class Documentation - Methods and Properties\nDESCRIPTION: Documentation for the Task class showing available methods and properties for workflow tasks including workflow management, user permissions, and task state handling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_26\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: Task\n    :no-index:\n\n    .. autoattribute:: workflows\n\n    .. autoattribute:: active_workflows\n\n    .. attribute:: task_state_class\n\n        The specific task state class to generate to store state information for this task. If not specified, this will be ``TaskState``.\n\n    .. automethod:: get_verbose_name\n\n    .. autoattribute:: specific\n\n    .. automethod:: start\n\n    .. automethod:: on_action\n\n    .. automethod:: user_can_access_editor\n\n    .. automethod:: user_can_lock\n\n    .. automethod:: user_can_unlock\n\n    .. automethod:: locked_for_user\n\n    .. automethod:: get_actions\n\n    .. automethod:: get_task_states_user_can_moderate\n\n    .. automethod:: deactivate\n\n    .. automethod:: get_form_for_action\n\n    .. automethod:: get_template_for_action\n\n    .. automethod:: get_description\n```\n\n----------------------------------------\n\nTITLE: ListBlock Value Comparison Update in Wagtail Tests\nDESCRIPTION: Updated method for comparing ListBlock values in unit tests, adapting to the new ListValue class implementation\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.16.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.assertEqual(page.body[0].value, ['hello', 'goodbye'])\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertEqual(list(page.body[0].value), ['hello', 'goodbye'])\n```\n\n----------------------------------------\n\nTITLE: Executing Wagtail Start Command in Markdown\nDESCRIPTION: Demonstrates the recommended command for creating a new Wagtail site using inline code formatting in Markdown.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/demo_site.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`wagtail start`\n```\n\n----------------------------------------\n\nTITLE: Footer Text Template HTML\nDESCRIPTION: Django template for rendering the footer text content using Wagtail's richtext filter. This template is used by the inclusion tag to display the formatted footer text.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n\n<div>\n    {{ footer_text|richtext }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Content Above Wagtail Login Form\nDESCRIPTION: Template code to add custom content above the login form by extending login.html and overriding the above_login block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/login.html\" %}\n\n{% block above_login %} If you are not Frank you should not be here! {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Overriding Chooser URLs in Wagtail Hooks (Python)\nDESCRIPTION: Example of overriding existing chooser URLs for Draftail editor entities using a Wagtail hook. This is an unsupported monkey patch approach.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# .../wagtail_hooks.py\nfrom django.urls import reverse_lazy\n\nfrom wagtail import hooks\n\n@hooks.register(\"register_rich_text_features\")\ndef override_embed_feature_url(features):\n    features.plugins_by_editor[\"draftail\"][\"embed\"].data[\"chooserUrls\"][\"embedsChooser\"] = reverse_lazy(\"my_embeds:chooser\")\n```\n\n----------------------------------------\n\nTITLE: String Translation in Python using gettext_lazy\nDESCRIPTION: Demonstrates correct and incorrect ways to mark strings for translation in Python code using Django's gettext_lazy. Shows proper use of named placeholders and printf style formatting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/translations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\n# Do this: printf style + named placeholders\n_(\"Page %(page_title)s with status %(status)s\") % {\"page_title\": page.title, \"status\": page.status_string}\n\n# Do not use anonymous placeholders\n_(\"Page %s with status %s\") % (page.title, page.status_string)\n_(\"Page {} with status {}\").format(page.title, page.status_string)\n\n# Do not use positional placeholders\n_(\"Page {0} with status {1}\").format(page.title, page.status_string)\n\n# Do not use new style\n_(\"Page {page_title} with status {status}\").format(page_title=page.title, status=page.status_string)\n\n# Do not interpolate within the gettext call\n_(\"Page %(page_title)s with status %(status)s\" % {\"page_title\": page.title, \"status\": page.status_string})\n_(\"Page {page_title} with status {status}\".format(page_title=page.title, status=page.status_string))\n\n# Do not use f-string\n_(f\"Page {page.title} with status {page.status_string}\")\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests\nDESCRIPTION: Various commands for running Python tests in Wagtail, including full test suite and specific test cases.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython runtests.py\npython runtests.py wagtail\ntox -e py39-dj32-sqlite-noelasticsearch -- wagtail\ntox -l\npython runtests.py wagtail.tests.test_blocks.TestIntegerBlock\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail Settings in INSTALLED_APPS\nDESCRIPTION: Django settings configuration to enable Wagtail settings functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ...\n    # Add this line to install wagtail.contrib.settings:\n    \"wagtail.contrib.settings\",\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Route Name Implementation\nDESCRIPTION: Example showing how to customize route names using the name parameter in path decorators.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/routablepage.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Page\nfrom wagtail.contrib.routable_page.models import RoutablePageMixin, re_path\n\n\nclass EventPage(RoutablePageMixin, Page):\n    ...\n\n    @re_path(r'^year/(\\d+)/$', name='year')\n    def events_for_year(self, request, year):\n        \"\"\"\n        View function for the events for year page\n        \"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: ListBlock Value Structure Example\nDESCRIPTION: Example showing the structure of block_value when dealing with ListBlock types in Wagtail block operations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n[\n    { \"type\": \"item\", \"value\": \"...\", \"id\": \"...\" },\n    { \"type\": \"item\", \"value\": \"...\", \"id\": \"...\" },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: HTML Template for HeadingBlock in Django Template Language\nDESCRIPTION: A simple template file for rendering the HeadingBlock, which wraps the block's value in h1 tags.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n<h1>{{ value }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Snippet URL Templates in Wagtail Admin\nDESCRIPTION: Provides examples of URL templates for various snippet actions (list, edit, inspect, copy, delete) in Wagtail admin, using BreadTypeSnippet as an example.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'wagtailsnippets_breads_breadtype:list' %}\n{% url 'wagtailsnippets_breads_breadtype:edit' object.id %}\n{% url 'wagtailsnippets_breads_breadtype:inspect' object.id %}\n{% url 'wagtailsnippets_breads_breadtype:copy' object.id %}\n{% url 'wagtailsnippets_breads_breadtype:delete' object.id %}\n```\n\n----------------------------------------\n\nTITLE: CustomNonPageReportView Class After Update\nDESCRIPTION: Updated implementation of a non-page report view class, using results_template_name instead of template_name.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass CustomNonPageReportView(ReportView):\n    results_template_name = \"reports/custom_non_page_report_results.html\"\n```\n\n----------------------------------------\n\nTITLE: Creating a data migration for bootstrapping translatable models in Django\nDESCRIPTION: This Python code creates a data migration to bootstrap translatable models in Django. It uses the BootstrapTranslatableModel operation to set up the required fields for existing data.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\nfrom wagtail.models import BootstrapTranslatableModel\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('myapp', '0002_bootstraptranslations'),\n    ]\n\n    # Add one operation for each model to bootstrap here\n    # Note: Only include models that are in the same app!\n    operations = [\n        BootstrapTranslatableModel('myapp.Advert'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Rendering Workflow Submission Notification Content in Django Template\nDESCRIPTION: This snippet generates the content for a workflow submission notification. It handles different scenarios for pages and other objects, including information about the submitter, workflow name, and edit URLs.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/workflow_state_submitted.txt#2025-04-21_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %} {% if page %}\n{% if requested_by %}{% blocktrans trimmed with workflow=workflow.name|safe title=page.get_admin_display_title|safe requester=requested_by|user_display_name|safe %}The page \"{{ title }}\" has been submitted for moderation to workflow \"{{ workflow }}\" by {{ requester }}.{% endblocktrans %}\n{% else %}{% blocktrans trimmed with workflow=workflow.name|safe title=page.get_admin_display_title|safe %}The page \"{{ title }}\" has been submitted for moderation to workflow \"{{ workflow }}\".{% endblocktrans %}\n{% endif %}\n\n{% trans \"You can edit the page here:\" %} {{ base_url }}{% url 'wagtailadmin_pages:edit' page.id %} {% else %} {% latest_str object as title %} {% admin_edit_url object user as edit_url %}\n{% if requested_by %}{% blocktrans trimmed with workflow=workflow.name|safe title=title|safe requester=requested_by|user_display_name|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been submitted for moderation to workflow \"{{ workflow }}\" by {{ requester }}.\n{% endblocktrans %}{{ message|capfirst|safe }}\n{% else %}{% blocktrans trimmed with workflow=workflow.name|safe title=title|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been submitted for moderation to workflow \"{{ workflow }}\".\n{% endblocktrans %}{{ message|capfirst|safe }}\n{% endif %}\n\n{% if edit_url %}{% blocktrans trimmed with model_name=model_name|safe asvar edit_message %}\n    You can edit the {{ model_name }} here:{% endblocktrans %}{{ edit_message|capfirst|safe }} {{ base_url }}{{ edit_url }}{% endif %}{% endif %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Explorer Component in React\nDESCRIPTION: Example of importing and using the Explorer component from the Wagtail package in a React application.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Explorer } from 'wagtail';\n// [...]\n<Explorer />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Localized Page Rejection Message in Django Template\nDESCRIPTION: Template code that loads the i18n translation module and uses blocktrans to create a translatable message showing that a specific page has been rejected. The page title is safely escaped and displayed within the message.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/rejected_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n\n{% blocktrans trimmed with title=revision.content_object.get_admin_display_title|safe %}The page \"{{ title }}\" has been rejected{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Menu Item to Wagtail Admin\nDESCRIPTION: Demonstrates how to add a menu item for the calendar view in the Wagtail admin sidebar using the 'register_admin_menu_item' hook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, reverse\n\nfrom wagtail.admin.menu import MenuItem\nfrom wagtail import hooks\n\nfrom .views import index\n\n\n@hooks.register('register_admin_urls')\ndef register_calendar_url():\n    return [\n        path('calendar/', index, name='calendar'),\n    ]\n\n\n@hooks.register('register_admin_menu_item')\ndef register_calendar_menu_item():\n    return MenuItem('Calendar', reverse('calendar'), icon_name='date')\n```\n\n----------------------------------------\n\nTITLE: Updating Page URL Method Calls in Python\nDESCRIPTION: Example of updating page URL method calls to use the new request-aware versions for improved caching. This change reduces the number of cache or SQL queries generated for a page load.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.11.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npage_url = my_page.url\n```\n\nLANGUAGE: python\nCODE:\n```\npage_url = my_page.get_url(request=request)\n```\n\n----------------------------------------\n\nTITLE: Django S3 Storage Configuration Note\nDESCRIPTION: Configuration note for django-storages Amazon S3 backends regarding duplicate filename handling. AWS_S3_FILE_OVERWRITE must be set to False to prevent issues with duplicate filenames.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/under_the_hood.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe django-storages Amazon S3 backends (storages.backends.s3boto.S3BotoStorage and storages.backends.s3boto3.S3Boto3Storage) do not correctly handle duplicate filenames in their default configuration. When using these backends, AWS_S3_FILE_OVERWRITE must be set to False.\n```\n\n----------------------------------------\n\nTITLE: Legacy RichText HTML Output Example\nDESCRIPTION: Shows the HTML output structure when using the richtext template filter with the legacy wrapper enabled. The content is wrapped in a div with rich-text class.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/legacy_richtext.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"rich-text\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Incomplete Event Block Template with Value Access\nDESCRIPTION: Template for rendering an EventBlock that demonstrates the limitation of accessing child block values directly, which returns plain values instead of BoundBlocks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/boundblocks_and_values.md#2025-04-21_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n\n<div class=\"event {% if value.heading == 'Party!' %}lots-of-balloons{% endif %}\">\n    {% include_block value.heading %}\n    - {% include_block value.description %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Tag Field Set Method\nDESCRIPTION: Updated method for setting tags using django-taggit library, requiring tags to be passed as a list\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.16.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage.tags.set('red', 'blue')\n```\n\nLANGUAGE: python\nCODE:\n```\npage.tags.set(['red', 'blue'])\n```\n\n----------------------------------------\n\nTITLE: Default Embed Finder Configuration\nDESCRIPTION: Default configuration for Wagtail embed finders using oEmbed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/embeds.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILEMBEDS_FINDERS = [\n    {\n        'class': 'wagtail.embeds.finders.oembed'\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Pre-Contribution Checklist in Markdown\nDESCRIPTION: A markdown checklist for tasks to complete before contributing code, including doing the Wagtail tutorial and understanding issue tracking.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- [ ] Do the Wagtail tutorial\n- [ ] Look at the Wagtail organization on GitHub, take note of any interesting projects\n- [ ] Read through the Issue Tracking section in the docs\n- [ ] Give a go at a non-code contribution\n```\n```\n\n----------------------------------------\n\nTITLE: Registering ViewSet with Wagtail Admin\nDESCRIPTION: Hook registration code to add the PersonViewSet to the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\nfrom .views import person_viewset\n\n\n@hooks.register(\"register_admin_viewset\")\ndef register_viewset():\n    return person_viewset\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Buttons to Wagtail Login Form\nDESCRIPTION: Template code to add additional buttons to the login form by extending login.html and overriding the submit_buttons block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/login.html\" %}\n\n{% block submit_buttons %}\n    {{ block.super }}\n    <a href=\"{% url 'signup' %}\"><button type=\"button\" class=\"button\">{% trans 'Sign up' %}</button></a>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Position with Wagtail Image Focal Point\nDESCRIPTION: Demonstrates how to use a Wagtail image as a background element with proper focal point positioning using the background_position_style attribute.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/focal_points.md#2025-04-21_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% image page.image width-1024 as image %}\n\n<div style=\"background-image: url('{{ image.url }}'); {{ image.background_position_style }}\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Empty Django Migration Template\nDESCRIPTION: Basic structure of an empty Django migration file generated using makemigrations command.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('blog', '####_previous_migration'),\n    ]\n\n    operations = [\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Static Assets\nDESCRIPTION: Commands to install Node.js dependencies and compile static assets for Wagtail development.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm ci\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS Settings\nDESCRIPTION: Adding the blog app to INSTALLED_APPS in Django settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    \"blog\", # <- Our new blog app.\n    \"home\",\n    \"search\",\n    \"wagtail.contrib.forms\",\n    \"wagtail.contrib.redirects\",\n    \"wagtail.embeds\",\n    \"wagtail.sites\",\n    \"wagtail.users\",\n    #... other packages\n]\n```\n\n----------------------------------------\n\nTITLE: Monkey-Patching Rendition Model for AMP Support\nDESCRIPTION: Provides a monkey-patch solution for adding AMP image support without a custom image model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/amp.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms.utils import flatatt\nfrom django.utils.safestring import mark_safe\n\nfrom wagtail.images.models import Rendition\n\ndef img_tag(rendition, extra_attributes={}):\n    \"\"\"\n    Replacement implementation for Rendition.img_tag\n\n    When AMP mode is on, this returns an <amp-img> tag instead of an <img> tag\n    \"\"\"\n    attrs = rendition.attrs_dict.copy()\n    attrs.update(extra_attributes)\n\n    if amp_mode_active():\n        return mark_safe('<amp-img{}>'.format(flatatt(attrs)))\n    else:\n        return mark_safe('<img{}>'.format(flatatt(attrs)))\n\nRendition.img_tag = img_tag\n```\n\n----------------------------------------\n\nTITLE: StructBlock Value Structure Example\nDESCRIPTION: Example showing the structure of block_value when dealing with StructBlock types in Wagtail block operations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"type1\": \"...\",\n    \"type2\": \"...\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch backend with SSL verification\nDESCRIPTION: Example of configuring the Elasticsearch backend with the URLS property, which now defaults to verifying SSL certificates for HTTPS connections in Wagtail 1.5.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.wagtailsearch.backends.elasticsearch',\n        'URLS': ['https://example.com/'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Template for Component\nDESCRIPTION: Simple HTML template file for rendering a welcome panel component\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/template_components.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Welcome to my app!</h1>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Content Panels with Shorthand Syntax in Python\nDESCRIPTION: Demonstrates the new shorthand syntax for defining FieldPanel and InlinePanel in Wagtail page models, using plain strings instead of explicit panel imports.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyPage(Page):\n    body = RichTextField()\n    content_panels = [\n        'body',\n    ]\n```\n\n----------------------------------------\n\nTITLE: Pagination in Wagtail API v2\nDESCRIPTION: Example of using '?offset' and '?limit' parameters for pagination in Wagtail API v2. The response includes a subset of items based on the specified offset and limit.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?offset=20&limit=20\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 50\n    },\n    \"items\": [\n        pages 20 - 40 will be listed here.\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating TagSearchable in Custom Models\nDESCRIPTION: This snippet provides instructions for updating custom image and document models by replacing the deprecated TagSearchable mixin class with the Indexed mixin. It specifies the lines of code that need to be modified during migration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.6.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport wagtail.wagtailsearch.index\n```\n\nLANGUAGE: python\nCODE:\n```\nbases=(models.Model, wagtail.wagtailsearch.index.Indexed)\n```\n\n----------------------------------------\n\nTITLE: WorkflowMixin Methods Documentation\nDESCRIPTION: RST documentation defining the methods and properties available in WorkflowMixin.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_23\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: WorkflowMixin\n\n    .. automethod:: get_default_workflow\n\n    .. autoattribute:: has_workflow\n\n    .. automethod:: get_workflow\n\n    .. autoattribute:: workflow_states\n\n    .. autoattribute:: workflow_in_progress\n\n    .. autoattribute:: current_workflow_state\n\n    .. autoattribute:: current_workflow_task_state\n\n    .. autoattribute:: current_workflow_task\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Shared Password Restrictions from Collections\nDESCRIPTION: Django shell code to remove any existing shared password restrictions from collections after disabling the shared password option in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.models import Collection\n\nfor collection in Collection.objects.all():\n    collection.get_view_restrictions().filter(restriction_type='password').delete()\n```\n\n----------------------------------------\n\nTITLE: Generating Personalized Greeting in Wagtail Admin Email\nDESCRIPTION: Creates a greeting block that uses the user's short name or username. Implements internationalization for multi-language support.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/base.txt#2025-04-21_snippet_1\n\nLANGUAGE: Django Template\nCODE:\n```\n{% block greeting %}\n{% blocktrans trimmed with username=user.get_short_name|default:user.get_username %}Hello {{ username }},{% endblocktrans %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Running Wagtail's UI Component Library with Storybook\nDESCRIPTION: Set of commands to run Wagtail's UI component library locally using Storybook and django-pattern-library.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport DJANGO_SETTINGS_MODULE=wagtail.test.settings_ui\n# Assumes the current environment contains a valid installation of Wagtail for local development.\n./wagtail/test/manage.py migrate\n./wagtail/test/manage.py createcachetable\n./wagtail/test/manage.py runserver 0:8000\n# In a separate terminal:\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Selector for Hallo Editor in Wagtail\nDESCRIPTION: Demonstrates the change in selector for targeting the Hallo editor in JavaScript, moving from the '.richtext' class to the '[data-hallo-editor]' attribute selector.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* JS */\n- var widget = $(elem).parent('.richtext').data('IKS-hallo');\n+ var widget = $(elem).parent('[data-hallo-editor]').data('IKS-hallo');\n```\n\n----------------------------------------\n\nTITLE: Updating assertCanCreate Tests for Rich Text in Wagtail\nDESCRIPTION: This snippet illustrates how to update the 'assertCanCreate' method to work with the non-HTML data format used by the Draftail rich text editor. It provides a method for constructing form data using built-in Wagtail helpers.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.assertCanCreate(root_page, ContentPage, {\n    'title': 'About us',\n    'body': rich_text('<p>Lorem ipsum dolor sit amet</p>'),\n})\n```\n\n----------------------------------------\n\nTITLE: Ensuring Upgrade Notification Referrer Origin in Python\nDESCRIPTION: This snippet ensures that when the upgrade notification request for the latest release is made, it includes the referrer origin with the specified policy. This is configured using the WAGTAIL_ENABLE_UPDATE_CHECK setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.6.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEnsure the upgrade notification request for the latest release, which can be disabled via the ``WAGTAIL_ENABLE_UPDATE_CHECK`` sends the referrer origin with ``strict-origin-when-cross-origin`` (Karl Hobley)\n```\n\n----------------------------------------\n\nTITLE: Defining Local Contents for Wagtail\nDESCRIPTION: This snippet defines local contents configuration for Wagtail, specifying the depth of the content tree. It is used in the context of managing local settings for the Wagtail project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.0.1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GroupViewSet in Python for Wagtail\nDESCRIPTION: This snippet defines a custom GroupViewSet by inheriting from WagtailGroupViewSet and overriding the get_form_class method to use the custom GroupForm.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# myapp/viewsets.py\nfrom wagtail.users.views.groups import GroupViewSet as WagtailGroupViewSet\n\nfrom .forms import GroupForm\n\n\nclass GroupViewSet(WagtailGroupViewSet):\n    def get_form_class(self, for_update=False):\n        return GroupForm\n```\n\n----------------------------------------\n\nTITLE: Custom Avatar URL Hook\nDESCRIPTION: Example of implementing a custom avatar URL hook that changes the avatar on Christmas day.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\n@hooks.register('get_avatar_url')\ndef get_profile_avatar(user, size):\n    today = datetime.now()\n    is_christmas_day = today.month == 12 and today.day == 25\n\n    if is_christmas_day:\n      return '/static/images/santa.png'\n\n    return None\n```\n\n----------------------------------------\n\nTITLE: Using srcset_image() Function in Jinja2 Template\nDESCRIPTION: These snippets demonstrate how to use the srcset_image() function to create responsive images with srcset in Jinja2 templates. It includes examples for rendering an <img> tag with srcset and retrieving renditions for custom use.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_5\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ srcset_image(page.photo, \"width-{400,800}\", sizes=\"(max-width: 600px) 400px, 80vw\") }}\n```\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% set bg=srcset_image(page.background_image, \"max-{512x512,1024x1024}\") %}\n<div class=\"wrapper\" style=\"background-image: image-set(url({{ bg.renditions[0].url }}) 1x, url({{ bg.renditions[1].url }}) 2x);\"></div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Approval Template in Django/Wagtail\nDESCRIPTION: Django template snippet that handles displaying approval notifications for both Wagtail pages and generic model objects. Uses i18n translations and safe HTML rendering for display titles and task names.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/task_state_approved_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n\n{% if page %}\n    {% blocktrans trimmed with title=page.get_admin_display_title|safe task=task.name|safe %}The page \"{{ title }}\" has been approved in \"{{ task }}\".{% endblocktrans %}\n{% else %}\n    {% latest_str object as title %}\n    {% blocktrans trimmed with title=title|safe task=task.name|safe model_name=model_name|safe asvar message %}\n        The {{ model_name }} \"{{ title }}\" has been approved in \"{{ task }}\".\n    {% endblocktrans %}\n    {{ message|capfirst|safe }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Compiling Wagtail Documentation with Sphinx\nDESCRIPTION: Steps to install Sphinx and compile the Wagtail documentation, including commands to view the compiled docs and automatically recompile on changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# Starting from the wagtail root directory:\n\n# Install the documentation dependencies\npip install -e .[docs] --config-settings editable-mode=strict\n# or if using zsh as your shell:\n#    pip install -e '.[docs]' -U\n# Compile the docs\ncd docs/\nmake html\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Starting from the wagtail root directory:\n\ncd docs/_build/html/\npython -m http.server 8080\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Starting from the wagtail root directory:\n\ncd docs/\nmake clean\nmake html\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Starting from the wagtail root directory:\n\ncd docs/\nmake livehtml\n```\n\n----------------------------------------\n\nTITLE: Updating Image Renditions\nDESCRIPTION: Command to regenerate image renditions with option to purge existing ones.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py wagtail_update_image_renditions\n```\n\n----------------------------------------\n\nTITLE: Updating unique_together Constraint for Custom Image Rendition Models\nDESCRIPTION: Code showing how to update the unique_together constraint on custom image rendition models when upgrading to Wagtail 1.8. The constraint needs to change from using 'filter' to using 'filter_spec'.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.8.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nunique_together = (\n    ('image', 'filter', 'focal_point_key'),\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nunique_together = (\n    ('image', 'filter_spec', 'focal_point_key'),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating get_url_parts Method Signature in Python\nDESCRIPTION: Example of updating the get_url_parts method signature on custom page models to support the new request keyword argument. This change is necessary for compatibility with the new caching behavior.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.11.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_url_parts(self):\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_url_parts(self, *args, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Fields with AutocompleteField in Wagtail Models\nDESCRIPTION: Example of adding AutocompleteField to a model's search_fields definition to enable partial word matching in chooser interfaces. This configuration ensures continuous search results as users type.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\n# ... other imports\n\n@register_snippet\nclass MySnippet(index.Indexed, models.Model):\n     search_fields = [\n         index.SearchField(\"name\"),\n         index.AutocompleteField(\"name\"),\n     ]\n```\n\n----------------------------------------\n\nTITLE: Implementing error SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of an error icon (circle with X mark) for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_42\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-error\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-xmark (solid): Font Awesome Pro 6.4.0 --><path d=\"M0 8c0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8 0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8Zm5.469-1.469L6.937 8 5.47 9.469c-.313.312-.313.781 0 1.062a.684.684 0 0 0 1.031 0l1.469-1.469 1.5 1.47a.684.684 0 0 0 1.031 0c.313-.282.313-.75 0-1.063L9.031 8 10.5 6.531c.313-.281.313-.75 0-1.062a.736.736 0 0 0-1.031 0l-1.5 1.5-1.469-1.5a.736.736 0 0 0-1.031 0c-.313.312-.313.781 0 1.062Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Results Limit in Wagtail API\nDESCRIPTION: Integer setting to control the maximum number of results that can be requested at once across all endpoints. Defaults to 20. Can be set to None for no limit.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILAPI_LIMIT_MAX\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL-Specific Search Settings in Python\nDESCRIPTION: This code snippet illustrates how to maintain PostgreSQL-specific search configurations using the SEARCH_CONFIG setting with the new database backend. It demonstrates that the SEARCH_CONFIG setting, such as 'english', will continue to work as before with the new backend, but it will be ignored when using a different database.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"WAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.search.backends.database',\n        'SEARCH_CONFIG': 'english',\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Escaping for StreamField Blocks in Wagtail Templates\nDESCRIPTION: Example of how to disable the new HTML escaping behavior in Wagtail 2.13.2 for StreamField blocks. This allows editors to continue inserting HTML content in text blocks, but comes with security risks of potential XSS attacks from untrusted editors.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.13.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% autoescape off %}...{% include_block %}...{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Loading Wagtail Admin Tags and Internationalization in Django Template\nDESCRIPTION: Loads necessary template tags for Wagtail admin functionality and internationalization support. Sets a base URL variable using a custom setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns\nDESCRIPTION: URL configuration for Wagtail admin, documents, and pages\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\n\nfrom wagtail.admin import urls as wagtailadmin_urls\nfrom wagtail import urls as wagtail_urls\nfrom wagtail.documents import urls as wagtaildocs_urls\n\nurlpatterns = [\n    ...\n    path('cms/', include(wagtailadmin_urls)),\n    path('documents/', include(wagtaildocs_urls)),\n    path('pages/', include(wagtail_urls)),\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Stimulus Controller Example\nDESCRIPTION: Examples of HTML markup using Stimulus data-controller attributes to demonstrate basic controller functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"my-controller\">Hi</div>\n<div data-controller=\"my-controller\">\n    Hello <span data-my-controller-target=\"label\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Password Required Template in Wagtail\nDESCRIPTION: Setting to specify a custom template for all 'password required' forms throughout the Wagtail site. This template will receive context variables including the form object and submission URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_PASSWORD_REQUIRED_TEMPLATE = 'myapp/password_required.html'\n```\n\n----------------------------------------\n\nTITLE: JSON Page Detail Response Structure - After Change\nDESCRIPTION: Updated JSON structure for page detail view, showing the parent field moved to the top level and represented as a foreign key object instead of an ID.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"id\": 10,\n    \"meta\": {\n         \"type\": \"demo.BlogPage\"\n    },\n    \"parent\": {\n         \"id\": 2,\n         \"meta\": {\n             \"type\": \"demo.BlogIndexPage\"\n         }\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: LockableMixin Methods Declaration\nDESCRIPTION: RST documentation declaring the available methods for LockableMixin class.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_22\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: LockableMixin\n    :no-index:\n\n    .. automethod:: get_lock\n\n    .. automethod:: with_content_json\n```\n\n----------------------------------------\n\nTITLE: Deprecated WidgetWithScript Class in Python\nDESCRIPTION: Shows the old approach of using the WidgetWithScript class to attach JavaScript to widgets. This method is now deprecated due to security risks and future CSP compliance issues.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import Media, widgets\n\n\nclass CustomRichTextArea(WidgetWithScript, widgets.Textarea):\n    def render_js_init(self, id_, name, value):\n        return f\"window.customEditorInitScript({json.dumps(id_)})\"\n\n    @property\n    def media(self):\n        return Media(js=[\"vendor/custom-editor.js\"])\n```\n\n----------------------------------------\n\nTITLE: Basic Wagtail Search Backend Configuration\nDESCRIPTION: Default configuration for Wagtail search using the database backend. Shows the basic structure of WAGTAILSEARCH_BACKENDS setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.search.backends.database',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Image Attributes\nDESCRIPTION: Shows how to set up custom default attributes for all images using a custom AppConfig\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.images.apps import WagtailImagesAppConfig\n\n\nclass CustomImagesAppConfig(WagtailImagesAppConfig):\n    default_attrs = {\"decoding\": \"async\", \"loading\": \"lazy\"}\n```\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    \"myapplication.apps.CustomImagesAppConfig\",\n    # \"wagtail.images\",\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Approval Notification in Django Template\nDESCRIPTION: Template code that generates a text notification for approved pages in Wagtail CMS. Uses template inheritance, translation tags, and dynamic content to display the page title and URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load i18n %}\n\n{% block content %}\n{% blocktrans trimmed with title=revision.content_object.get_admin_display_title|safe %}The page \"{{ title }}\" has been approved.{% endblocktrans %}\n\n{% trans \"You can view the page here:\" %} {{ revision.content_object.full_url }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Building Wagtail Package from Fork\nDESCRIPTION: Instructions for building a Wagtail package from a fork, including commands to create installable .tar.gz and .whl packages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npython -m build\n```\n\n----------------------------------------\n\nTITLE: Git Alias Configuration for Pull Request Checkout\nDESCRIPTION: Git alias configuration to easily fetch and checkout pull requests locally. This alias adds a 'pr' command that takes a PR number as argument.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/committing.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[alias]\n    pr = !sh -c \\\"git fetch upstream pull/${1}/head:pr/${1} && git checkout pr/${1}\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Password Required Template in Wagtail\nDESCRIPTION: Specifies a custom template for password-protected document access using WAGTAILDOCS_PASSWORD_REQUIRED_TEMPLATE setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/storing_and_serving.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_PASSWORD_REQUIRED_TEMPLATE = 'myapp/document_password_required.html'\n```\n\n----------------------------------------\n\nTITLE: Using inclusive Parameter with sibling_of() Method (Python)\nDESCRIPTION: Example showing how to restore the old exclusive behavior by setting the inclusive parameter to False.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> event_1 = EventPage.objects.get(title='Event 1')\n>>> EventPage.objects.sibling_of(event_1, inclusive=False)\n[<EventPage: Event 2>]  # passing inclusive=False restores the OLD behaviour\n```\n\n----------------------------------------\n\nTITLE: Updating INSTALLED_APPS in Django Settings\nDESCRIPTION: This snippet shows how to replace the default Wagtail users app with the custom AppConfig in the INSTALLED_APPS setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    \"myproject.apps.CustomUsersAppConfig\",\n    # \"wagtail.users\",\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: comment-add-reversed\nDESCRIPTION: This snippet defines a custom icon for adding comments in a reversed style, represented as an SVG element. The icon's ID and path structure are included to visually differentiate it from the standard comment-add icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-comment-add-reversed\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8 1.813C3.84 1.813.5 4.566.5 7.905c0 1.407.557 2.696 1.524 3.721-.41 1.143-1.319 2.139-1.348 2.139-.205.205-.234.498-.147.761.118.264.381.41.674.41 1.787 0 3.194-.732 4.073-1.347.82.264 1.757.41 2.724.41 4.131 0 7.47-2.725 7.47-6.094 0-3.34-3.339-6.093-7.47-6.093Zm0 10.78a7.64 7.64 0 0 1-2.314-.35l-.674-.206-.557.41a6.54 6.54 0 0 1-1.699.85c.234-.352.44-.762.586-1.172l.322-.82-.615-.645c-.527-.556-1.143-1.494-1.143-2.754C1.906 5.328 4.631 3.22 8 3.22c3.34 0 6.094 2.11 6.094 4.687 0 2.608-2.754 4.688-6.094 4.688Z\"></path><path d=\"M10.571 7.357H8.643V5.43A.44.44 0 0 0 8.214 5h-.428c-.241 0-.429.2-.429.429v1.928H5.43c-.242 0-.429.201-.429.429v.428c0 .241.188.429.429.429h1.928v1.928c0 .242.188.429.429.429h.428a.432.432 0 0 0 .429-.429V8.643h1.928A.432.432 0 0 0 11 8.214v-.428a.44.44 0 0 0-.429-.429Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Creating Blog App in Wagtail\nDESCRIPTION: Command to create a new blog app in a Wagtail project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py startapp blog\n```\n\n----------------------------------------\n\nTITLE: Updated Chinese Language Codes in Wagtail Settings\nDESCRIPTION: Shows the transition from regional Chinese language codes to script-based codes. Old codes zh_CN (Simplified) and zh_TW (Traditional) are replaced with zh_Hans and zh_Hant respectively in the LANGUAGE_CODE setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.5.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old format\nLANGUAGE_CODE = 'zh_CN'  # or 'zh_TW'\n\n# New format\nLANGUAGE_CODE = 'zh_Hans'  # or 'zh_Hant'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WagtailUsersAppConfig in Python\nDESCRIPTION: Demonstrates how to create a custom WagtailUsersAppConfig to use the custom UserViewSet.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# myproject/apps.py\nfrom wagtail.users.apps import WagtailUsersAppConfig\n\n\nclass CustomUsersAppConfig(WagtailUsersAppConfig):\n    user_viewset = \"myapp.viewsets.UserViewSet\"\n    # If you have customized the GroupViewSet before\n    group_viewset = \"myapp.viewsets.GroupViewSet\"\n```\n\n----------------------------------------\n\nTITLE: Defining Production Dependencies\nDESCRIPTION: Requirements file listing all production dependencies including Django, Wagtail, Gunicorn, PostgreSQL adapter, and storage utilities.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nDjango>=4.2,<4.3\nwagtail==5.1.1\ngunicorn>=21.2.0,<22.0.0\npsycopg[binary]>=3.1.10,<3.2.0\ndj-database-url>=2.1.0,<3.0.0\nwhitenoise>=5.0,<5.1\ndjango-storages[s3]>=1.14.0,<2.0.0\n```\n\n----------------------------------------\n\nTITLE: RevisionMixin Methods and Properties in Wagtail CMS\nDESCRIPTION: Documentation for the methods and properties of the RevisionMixin in Wagtail, providing functionality for working with revisions of model instances.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass RevisionMixin:\n    # Methods and properties\n    \n    revisions\n    \n    save_revision\n    \n    get_latest_revision_as_object\n    \n    with_content_json\n```\n\n----------------------------------------\n\nTITLE: Fly.io Deployment Commands\nDESCRIPTION: Shell commands for importing secrets and deploying the application to Fly.io.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nflyctl secrets import < .env.production\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly deploy --ha=false\n```\n\nLANGUAGE: sh\nCODE:\n```\nflyctl ssh console\n```\n\nLANGUAGE: sh\nCODE:\n```\nDJANGO_SUPERUSER_USERNAME=username DJANGO_SUPERUSER_EMAIL=mail@example.com DJANGO_SUPERUSER_PASSWORD=password python manage.py createsuperuser --noinput\n```\n\n----------------------------------------\n\nTITLE: Registering Rustface Plugin with Willow\nDESCRIPTION: Python code to register the Rustface plugin with Willow, which should be run on application startup.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom willow.registry import registry\nimport rustface.willow\n\nregistry.register_plugin(rustface.willow)\n```\n\n----------------------------------------\n\nTITLE: Blog Post Template\nDESCRIPTION: Template for rendering individual blog post pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_15\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% load wagtailcore_tags %}\n\n{% block body_class %}template-blogpage{% endblock %}\n\n{% block content %}\n    <h1>{{ page.title }}</h1>\n    <p class=\"meta\">{{ page.date }}</p>\n\n    <div class=\"intro\">{{ page.intro }}</div>\n\n    {{ page.body|richtext }}\n\n    <p><a href=\"{{ page.get_parent.url }}\">Return to blog</a></p>\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Updating Urlconf Entries for Wagtail 0.5 Python\nDESCRIPTION: Shows how to update the urlconf entries in the 'urls.py' file to remove deprecated entries as a result of new URL registration in Wagtail 0.5. This ensures compatibility with the new version.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# TODO: some way of getting wagtailimages to register itself within wagtailadmin so that we\n# don't have to define it separately here\nurl(r'^admin/images/', include(wagtailimages_urls)),\nurl(r'^admin/embeds/', include(wagtailembeds_urls)),\nurl(r'^admin/documents/', include(wagtaildocs_admin_urls)),\nurl(r'^admin/snippets/', include(wagtailsnippets_urls)),\nurl(r'^admin/search/', include(wagtailsearch_admin_urls)),\nurl(r'^admin/users/', include(wagtailusers_urls)),\nurl(r'^admin/redirects/', include(wagtailredirects_urls)),\n```\n\n----------------------------------------\n\nTITLE: Updating StreamField Block Render Methods\nDESCRIPTION: This snippet explains the changes made to the render and render_basic methods of the Block class, which now accept an optional context keyword argument for rendering. It guides developers on how to update their custom StreamField blocks accordingly.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.6.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyBlock(Block):\n\n    def render(self, value):\n        ...\n\n    def render_basic(self, value):\n        ...\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyBlock(Block):\n\n    def render(self, value, context=None):\n        ...\n\n    def render_basic(self, value, context=None):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Version Support Example\nDESCRIPTION: Example showing specific version numbers to illustrate Wagtail's version support timeline and compatibility with Django versions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/release_process.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDjango 4.2 (LTS)\nDjango 5.0\nWagtail 6.2 - Released before Django 5.1 and supports Django 4.2 and 5.0\nDjango 5.1\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure for Wagtail Deployment\nDESCRIPTION: Displays the expected project directory structure after creating the .env.production file for deployment configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmysite/\n├── base\n├── blog\n├── home\n├── media\n├── mysite\n├── portfolio\n├── search\n├── .dockerignore\n├── .gitignore\n├── .env.production\n├── Dockerfile\n├── manage.py\n├── mysite/\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages in Wagtail API v2\nDESCRIPTION: Example of using a filter parameter to find a specific page by its slug. The response includes the matching page details.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?slug=about\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 1\n    },\n    \"items\": [\n        {\n            \"id\": 10,\n            \"meta\": {\n                \"type\": \"standard.StandardPage\",\n                \"detail_url\": \"http://api.example.com/api/v2/pages/10/\",\n                \"html_url\": \"http://www.example.com/about/\",\n                \"slug\": \"about\",\n                \"first_published_at\": \"2016-08-30T16:52:00Z\"\n            },\n            \"title\": \"About\"\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alternative HTML Tags\nDESCRIPTION: Examples of using picture and amp-img tags with Wagtail images\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/images.md#2025-04-21_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n<picture>\n    {% image page.photo width-800 as wide_photo %}\n    <source srcset=\"{{ wide_photo.url }}\" media=\"(min-width: 800px)\">\n    {% image page.photo width-400 %}\n</picture>\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% image image width-550 format-webp as webp_image %}\n{% image image width-550 format-jpeg as jpeg_image %}\n\n<amp-img alt=\"{{ image.alt }}\"\n    width=\"{{ webp_image.width }}\"\n    height=\"{{ webp_image.height }}\"\n    src=\"{{ webp_image.url }}\">\n    <amp-img alt=\"{{ image.alt }}\"\n        fallback\n        width=\"{{ jpeg_image.width }}\"\n        height=\"{{ jpeg_image.height }}\"\n        src=\"{{ jpeg_image.url }}\"></amp-img>\n</amp-img>\n```\n\n----------------------------------------\n\nTITLE: Revision Model Database Fields\nDESCRIPTION: RST documentation defining the database fields for the Revision model including content object references and metadata.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_24\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: Revision\n\n    .. attribute:: content_object\n\n        (generic foreign key)\n\n        The object this revision belongs to. For page revisions, the object is an instance of the specific class.\n\n    .. attribute:: content_type\n\n        (foreign key to :class:`~django.contrib.contenttypes.models.ContentType`)\n\n        The content type of the object this revision belongs to. For page revisions, this means the content type of the specific page type.\n\n    .. attribute:: base_content_type\n\n        (foreign key to :class:`~django.contrib.contenttypes.models.ContentType`)\n\n        The base content type of the object this revision belongs to. For page revisions, this means the content type of the :class:`~wagtail.models.Page` model.\n\n    .. attribute:: object_id\n\n        (string)\n\n        The primary key of the object this revision belongs to.\n\n    .. attribute:: created_at\n\n        (date/time)\n\n        The time the revision was created.\n\n    .. attribute:: user\n\n        (foreign key to user model)\n\n        The user that created the revision.\n\n    .. attribute:: content\n\n        (dict)\n\n        The JSON content for the object at the time the revision was created.\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Rebasing Pull Request\nDESCRIPTION: Shell commands for fetching latest changes, rebasing a pull request onto main branch, and merging the changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/committing.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Get the latest commits from Wagtail\ngit fetch upstream\ngit checkout main\ngit merge --ff-only upstream/main\n# Rebase this pull request on to main\ngit checkout pr/xxxx\ngit rebase main\n# Update main to this commit\ngit checkout main\ngit merge --ff-only pr/xxxx\n```\n\n----------------------------------------\n\nTITLE: Defining Border Color Variables in CSS\nDESCRIPTION: This snippet defines CSS variables for various border colors, providing options for different states such as default, hover, and different UI components. These variables systematize the styling of borders across the Wagtail theme for a unified look.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-furniture\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-button-small-outline-default\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-field-default\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-field-inactive\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-field-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-button-outline-default\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-button-outline-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-interactive-more-contrast\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-interactive-more-contrast-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-interactive-more-contrast-dark-bg\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-interactive-more-contrast-dark-bg-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-border-furniture-more-contrast\n```\n\n----------------------------------------\n\nTITLE: Creating Wagtail Admin Template for Calendar View\nDESCRIPTION: HTML template that extends the Wagtail admin base template to display the calendar view within the admin interface, including custom CSS and proper layout.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/admin_views.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/base.html\" %}\n{% load static %}\n\n{% block titletag %}{{ current_year }} calendar{% endblock %}\n\n{% block extra_css %}\n    {{ block.super }}\n    <link rel=\"stylesheet\" href=\"{% static 'css/calendar.css' %}\">\n{% endblock %}\n\n{% block content %}\n    {% include \"wagtailadmin/shared/header.html\" with title=\"Calendar\" icon=\"date\" %}\n\n    <div class=\"nice-padding\">\n        {{ calendar_html|safe }}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Custom Report Template Implementation\nDESCRIPTION: HTML templates for customizing the report view display with additional columns and styling.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{# <project>/templates/reports/unpublished_changes_report_results.html #}\n\n{% extends 'wagtailadmin/reports/base_page_report_results.html' %}\n\n{% block results %}\n    {% include 'reports/include/_list_unpublished_changes.html' %}\n{% endblock %}\n\n{% block no_results_message %}\n    <p>No pages with unpublished changes.</p>\n{% endblock %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{# <project>/templates/reports/include/_list_unpublished_changes.html #}\n\n{% extends 'wagtailadmin/reports/listing/_list_page_report.html' %}\n\n{% block extra_columns %}\n    <th>Last Published</th>\n{% endblock %}\n\n{% block extra_page_data %}\n    <td valign=\"top\">\n        {{ page.last_published_at }}\n    </td>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using richtext Filter in Jinja2 Template\nDESCRIPTION: This snippet demonstrates how to use the richtext filter to transform Wagtail's internal HTML representation in a Jinja2 template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/jinja2.md#2025-04-21_snippet_7\n\nLANGUAGE: html+jinja\nCODE:\n```\n{{ page.body|richtext }}\n```\n\n----------------------------------------\n\nTITLE: Multiple Cogs Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 gears (solid) icon for advanced settings or system configuration\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/cogs.svg\n```\n\n----------------------------------------\n\nTITLE: Installing TypedTableBlock in Wagtail\nDESCRIPTION: Add the typed_table_block module to the INSTALLED_APPS setting in your Django project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/typed_table_block.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    \"wagtail.contrib.typed_table_block\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Relation Name for Admin Comments in Python\nDESCRIPTION: Sets a custom relation name for Wagtail admin comments to avoid conflicts with third-party commenting apps. This configuration is added to the project settings file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.13.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_COMMENTS_RELATION_NAME = 'wagtail_admin_comments'\n```\n\n----------------------------------------\n\nTITLE: Setting AUTH_USER_MODEL in Django Settings\nDESCRIPTION: Configuration for telling Django to use the custom user model by setting AUTH_USER_MODEL to point to the custom model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/custom_user_models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUTH_USER_MODEL = 'myapp.User'\n```\n\n----------------------------------------\n\nTITLE: Rendering Workflow Rejection Message Template in Django/Wagtail\nDESCRIPTION: Django template that displays a workflow rejection message, handling both page and non-page objects. Uses i18n for translation support and safely displays admin titles and workflow names. Includes special handling for model objects with proper capitalization.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/workflow_state_rejected_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n\n{% if page %}\n    {% blocktrans trimmed with title=page.get_admin_display_title|safe workflow=workflow.name|safe %}The page \"{{ title }}\" has been rejected during \"{{ workflow }}\".{% endblocktrans %}\n{% else %}\n    {% latest_str object as title %}\n    {% blocktrans trimmed with title=title|safe workflow=workflow.name|safe model_name=model_name|safe asvar message %}\n        The {{ model_name }} \"{{ title }}\" has been rejected during \"{{ workflow }}\".\n    {% endblocktrans %}\n    {{ message|capfirst|safe }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: TranslatableMixin Methods and Properties in Wagtail CMS\nDESCRIPTION: Documentation for the methods and properties of the TranslatableMixin in Wagtail, providing functionality for working with translations of model instances.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass TranslatableMixin:\n    # Methods and properties\n    \n    get_translations\n    \n    get_translation\n    \n    get_translation_or_none\n    \n    has_translation\n    \n    copy_for_translation\n    \n    get_translation_model\n    \n    localized\n```\n\n----------------------------------------\n\nTITLE: Handling python3 not available error\nDESCRIPTION: Example of a common installation issue where the 'python3' command is not available, with a suggestion to use 'py' instead on Windows.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/quick_install.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install --upgrade pip\n> command not found: python3\n```\n\n----------------------------------------\n\nTITLE: Configuring BreadPage Model with ColorWidget\nDESCRIPTION: Demonstrates implementation of the ColorWidget and ColorBlock in a Wagtail page model with custom color palette.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nBREAD_COLOR_PALETTE = [\"#CFAC89\", \"#C68C5F\", \"#C47647\", \"#98644F\", \"#42332E\"]\n\nclass BreadPage(Page):\n    body = StreamField([\n        ('color', ColorBlock(swatches=BREAD_COLOR_PALETTE)),\n    ], use_json_field=True)\n    color = models.CharField(blank=True, max_length=50)\n\n    content_panels = Page.content_panels + [\n        FieldPanel(\"body\"),\n        FieldPanel(\"color\", widget=ColorWidget(swatches=BREAD_COLOR_PALETTE)),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Importing Django Functions with Version Fallbacks\nDESCRIPTION: Demonstrates how to handle importing functions that exist in newer Django versions while providing fallback implementations for older versions with proper attribution.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/python_guidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport django\n\nif DJANGO_VERSION >= (1, 9):\n    from django.core.validators import validate_unicode_slug\nelse:\n    # Taken from https://github.com/django/django/blob/1.9/django/core/validators.py#L230\n    def validate_unicode_slug(value):\n        # Code left as an exercise to the reader\n        pass\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deprecated Image.search to QuerySet-based Search (Python)\nDESCRIPTION: Example showing how to update code from the deprecated Image.search method to the new QuerySet-based search mechanism.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nImage.search(\"Hello\", filters={'uploaded_by_user': user})\n```\n\nLANGUAGE: python\nCODE:\n```\nImage.objects.filter(uploaded_by_user=user).search(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Simple Stimulus Controller Implementation\nDESCRIPTION: Basic JavaScript implementation of a Stimulus controller that logs connection events and demonstrates target usage.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_client_side.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyController extends window.StimulusModule.Controller {\n    static targets = ['label'];\n    connect() {\n        console.log(\n            'My controller has connected:',\n            this.element.innerText,\n            this.labelTargets,\n        );\n    }\n}\n\nwindow.wagtail.app.register('my-controller', MyController);\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Generated project structure showing key directories and files\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmysite/\n├── .dockerignore\n├── Dockerfile\n├── home/\n├── manage.py*\n├── mysite/\n├── requirements.txt\n└── search/\n```\n\n----------------------------------------\n\nTITLE: Adding wagtailsites app to INSTALLED_APPS in Django settings (Python)\nDESCRIPTION: To enable the new Sites administration interface, add 'wagtail.wagtailsites' to the INSTALLED_APPS list in the project's Django settings file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.7.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n'wagtail.wagtailsites',\n```\n\n----------------------------------------\n\nTITLE: Setting Table of Contents with Sphinx\nDESCRIPTION: Sphinx directive configuration for generating a local table of contents with depth 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Temporary Hook Registration for Testing\nDESCRIPTION: Example of using register_temporarily as a decorator for unit testing hooks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef my_hook_function():\n    pass\n\nclass MyHookTest(TestCase):\n\n    @hooks.register_temporarily('name_of_hook', my_hook_function)\n    def test_my_hook_function(self):\n        # Test with the hook registered here\n        pass\n```\n\n----------------------------------------\n\nTITLE: Embed Template Filter Conversion to Template Tag\nDESCRIPTION: This snippet illustrates the conversion of the 'embed' template filter into a template tag. It involves changing template code from filter usage to tag usage to properly embed media resources.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.7.rst#2025-04-21_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n    {% load wagtailembeds_tags %}\n    ...\n    {% embed my_media_url %}\n```\n\n----------------------------------------\n\nTITLE: Custom Account Settings Panel\nDESCRIPTION: Demonstrates registering a custom settings panel for the account section using class and function approaches.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.admin.views.account import BaseSettingsPanel\nfrom wagtail import hooks\n\n@hooks.register('register_account_settings_panel')\nclass CustomSettingsPanel(BaseSettingsPanel):\n    name = 'custom'\n    title = \"My custom settings\"\n    order = 500\n    form_class = CustomSettingsForm\n```\n\n----------------------------------------\n\nTITLE: Wagtail Model Configuration - Python\nDESCRIPTION: Example declarations of Wagtail page models and configurations like ProcessFormSubmission and AbstractEmailForm.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nAbstractForm\nget_template\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Pushing Changes to Main\nDESCRIPTION: Shell commands for reviewing and pushing committed changes to the main branch, including dry run verification.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/committing.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Check that everything looks OK\ngit log upstream/main..main --oneline\ngit push --dry-run upstream main\n# Push the commits!\ngit push upstream main\ngit branch -d pr/xxxx\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for circle-check in Wagtail Admin\nDESCRIPTION: SVG definition for the 'circle-check' icon based on Font Awesome Pro's circle-check solid icon. This icon represents a checkmark inside a circle for confirmed or completed states.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_13\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-circle-check\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-check (solid): Font Awesome Pro 6.4.0 --><path d=\"M0 8c0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8 0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8Zm11.594-1.375a.85.85 0 0 0 0-1.219.85.85 0 0 0-1.219 0L7 8.781 5.594 7.406a.85.85 0 0 0-1.219 0 .85.85 0 0 0 0 1.219l2 2a.849.849 0 0 0 1.219 0l4-4Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Content Panels with Explicit FieldPanel - Python\nDESCRIPTION: Shows the more verbose equivalent syntax using explicit FieldPanel instances.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontent_panels = Page.content_panels + [\n    FieldPanel('title'),\n    FieldPanel('body'),\n]\n```\n\n----------------------------------------\n\nTITLE: Heading Block Template\nDESCRIPTION: HTML template for rendering different heading sizes based on user selection\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_portfolio_page.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% if self.size == 'h2' %}\n    <h2>{{ self.heading_text }}</h2>\n{% elif self.size == 'h3' %}\n    <h3>{{ self.heading_text }}</h3>\n{% elif self.size == 'h4' %}\n    <h4>{{ self.heading_text }}</h4>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Publishing Scheduled Content\nDESCRIPTION: Command to publish, update, or unpublish objects that have scheduled actions. Recommended to run hourly.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py publish_scheduled\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch URL without Port\nDESCRIPTION: Example of default HTTP/HTTPS Elasticsearch connection URL that will use standard ports 80/443.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.8.3.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nhttp://localhost/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PageManager.sibling_of() Inclusive Behavior (Python)\nDESCRIPTION: Example showing the new inclusive behavior of PageManager.sibling_of() method where a page is now considered a sibling of itself.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> event_1 = EventPage.objects.get(title='Event 1')\n>>> EventPage.objects.sibling_of(event_1)\n[<EventPage: Event 1>, <EventPage: Event 2>]  # NEW behavior: Event 1 is considered a sibling of itself\n```\n\n----------------------------------------\n\nTITLE: Defining Static Color Variables in CSS\nDESCRIPTION: This snippet shows the declaration of static color variables used in Wagtail's UI. These variables define colors for various UI elements like backgrounds, text, borders, and state indicators.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n--w-color-black: #000000;\n--w-color-grey-800: #262626;\n--w-color-grey-700: #333333;\n--w-color-grey-600: #4D4D4D;\n--w-color-grey-500: #666666;\n--w-color-grey-400: #808080;\n--w-color-grey-200: #CCCCCC;\n--w-color-grey-150: #D9D9D9;\n--w-color-grey-100: #E6E6E6;\n--w-color-grey-50: #F2F2F2;\n--w-color-white: #FFFFFF;\n--w-color-primary: #00B0B1;\n--w-color-primary-200: #007D7E;\n--w-color-secondary: #0C322C;\n--w-color-secondary-600: #1F594F;\n--w-color-secondary-400: #2E7D70;\n--w-color-secondary-100: #B8E0D8;\n--w-color-secondary-75: #DCF0EC;\n--w-color-secondary-50: #EDF7F6;\n--w-color-info-125: #0E7FA7;\n--w-color-info-100: #119BD2;\n--w-color-info-75: #53B4DE;\n--w-color-info-50: #E2F4FC;\n--w-color-positive-100: #1B8750;\n--w-color-positive-50: #E5F4EE;\n--w-color-warning-100: #F9A838;\n--w-color-warning-75: #FBCC8D;\n--w-color-warning-50: #FFF6E8;\n--w-color-critical-200: #CD3F40;\n--w-color-critical-100: #FD5765;\n--w-color-critical-50: #FEF0F0;\n```\n\n----------------------------------------\n\nTITLE: Windows PowerShell Deployment Command\nDESCRIPTION: PowerShell command for importing secrets to Fly.io on Windows systems.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_18\n\nLANGUAGE: doscon\nCODE:\n```\nGet-Content .env.production | flyctl secrets import\n```\n\n----------------------------------------\n\nTITLE: Fixing Wagtail Collection Tree with Management Command\nDESCRIPTION: Django management command to fix the collection tree structure, with a full repair option. Provides an alternative to the Python method for tree maintenance.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.11.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython manage.py fixtree --full\n```\n\n----------------------------------------\n\nTITLE: Replacing XRegExp with Native RegExp (JavaScript)\nDESCRIPTION: Example of replacing the deprecated XRegExp global utility with native JavaScript RegExp for string manipulation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// old\nconst newStr = XRegExp.replace(originalStr, XRegExp('[ab+c]', 'g'), '')\n\n// new (with RegExp)\nconst newStr = originalStr.replace(new RegExp('[ab+c]', 'g'), '')\n// OR\nconst newStr = originalStr.replace(/[ab+c]/g, '')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Credentials for Azure Front Door Backend\nDESCRIPTION: This snippet demonstrates how to set custom credentials for the Azure Front Door backend using the ServicePrincipalCredentials class. It includes client ID and secret configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.common.credentials import ServicePrincipalCredentials\n\nWAGTAILFRONTENDCACHE = {\n    'azure_front_door': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.AzureFrontDoorBackend',\n        'RESOURCE_GROUP_NAME': 'MY-WAGTAIL-RESOURCE-GROUP',\n        'FRONT_DOOR_NAME': 'wagtail-io-front-door',\n        'CREDENTIALS': ServicePrincipalCredentials(\n            client_id='your client id',\n            secret='your client secret',\n        )\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy JavaScript Initialization for Dirty Form Check\nDESCRIPTION: Shows the deprecated method of initializing the dirty form check functionality using a global JavaScript function. This approach will be removed in a future release.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.enableDirtyFormCheck('.my-form', { alwaysDirty: true, confirmationMessage: 'You have unsaved changes'});\n```\n\n----------------------------------------\n\nTITLE: Migrating Changes for AbstractFormField Model\nDESCRIPTION: This snippet describes required migrations for the wagtailforms.models.AbstractFormField model changes after upgrading Wagtail. In particular, the 'choices' field has been modified to a TextField, and the 'to_address' field has updated help text to guide users on specifying multiple addresses.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.6.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Customizing the Login Template for Wagtail Frontend\nDESCRIPTION: Setting to specify a custom login template for Wagtail's frontend authentication. This uses Django's standard LoginView and provides access to its context variables.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_FRONTEND_LOGIN_TEMPLATE = 'myapp/login.html'\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous Color Variables in CSS\nDESCRIPTION: This snippet defines miscellaneous CSS variables for focus colors and box shadows that are used throughout the Wagtail theme. These variables help standardize the non-element-specific colors that enhance interaction and design structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n--w-color-focus\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-box-shadow-md\n```\n\n----------------------------------------\n\nTITLE: Changelog Example Entry\nDESCRIPTION: Example format for adding an entry to the changelog file, showing proper formatting with contributor attribution.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/committing.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* Fix: Tags added on the multiple image uploader are now saved correctly (Alex Smith)\n```\n\n----------------------------------------\n\nTITLE: Referencing Wagtail Package Imports\nDESCRIPTION: Referenced Python package imports in fixes including blocks.MultipleChoiceBlock, forms.CheckboxSelectMultiple, ArrayField, RichText, EmailNotificationMixin\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nblocks.MultipleChoiceBlock\nforms.CheckboxSelectMultiple\nArrayField\nRichText\nEmailNotificationMixin\n```\n\n----------------------------------------\n\nTITLE: Base Template for Unpublished Changes Report\nDESCRIPTION: Main template for the report that extends Wagtail's base page report template and includes the list of unpublished changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends 'wagtailadmin/reports/base_page_report_results.html' %}\n\n{% block results %}\n    {% include 'reports/include/_list_unpublished_changes.html' %}\n{% endblock %}\n\n{% block no_results_message %}\n    <p>No pages with unpublished changes.</p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Template Settings - Python\nDESCRIPTION: Example usage pattern for configuring custom edit handlers and template settings in Wagtail CMS models. Shows common setup approaches.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsave(update_fields=[...])\n```\n\n----------------------------------------\n\nTITLE: Pull Request Checklist in Markdown\nDESCRIPTION: A comprehensive markdown checklist for submitting a pull request. It includes adding a descriptive title, linking to related issues, providing context and assumptions, and including screenshots for visual changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n-   [ ] Small description of the solution, one sentence.\n-   [ ] Link to issue/s that should be resolved if this pull request gets merged.\n-   [ ] Questions or assumptions, maybe you made an assumption we no longer support IE11 with your CSS change, if it's not in the docs - write the assumption down.\n-   [ ] Details - additional details, context or links that help the reviewer understand the pull request.\n-   [ ] Screenshots - added before and after the change has been applied.\n-   [ ] Browser and accessibility checks done, or not done. Added to the description.\n```\n\n----------------------------------------\n\nTITLE: Multiple Hooks Registration\nDESCRIPTION: Demonstrates registering multiple hooks simultaneously using a list of tuples.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef my_hook(...):\n    pass\n\ndef my_other_hook(...):\n    pass\n\nwith hooks.register_temporarily([\n    ('hook_name', my_hook),\n    ('hook_name', my_other_hook),\n]):\n    # All hooks are registered here\n    ..\n\n# All hooks are unregistered here\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Tests\nDESCRIPTION: Commands to set up and run integration tests using Jest and Puppeteer.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport DJANGO_SETTINGS_MODULE=wagtail.test.settings_ui\n./wagtail/test/manage.py migrate\n./wagtail/test/manage.py createcachetable\nDJANGO_SUPERUSER_EMAIL=admin@example.com DJANGO_SUPERUSER_USERNAME=admin DJANGO_SUPERUSER_PASSWORD=changeme ./wagtail/test/manage.py createsuperuser --noinput\n./wagtail/test/manage.py runserver 0:8000\nnpm --prefix client/tests/integration install\nnpm run test:integration\n```\n\n----------------------------------------\n\nTITLE: Configuring .dockerignore for Fly.io\nDESCRIPTION: Additions to .dockerignore file to exclude environment and media files from Docker builds.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n.env*\nmedia\n```\n\n----------------------------------------\n\nTITLE: Auto-rebuilding Wagtail Documentation While Editing\nDESCRIPTION: Command to automatically rebuild the documentation when changes are made. Uses sphinx-autobuild to watch for changes and regenerate the documentation in real-time.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-autobuild . _build\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Environment for Wagtail Client-Side Components\nDESCRIPTION: Command to start the webpack bundler and styles compilation during development from the project root.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/client/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# From the project root, start the webpack + styles compilation.\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Customizing Author Field Widget with CheckboxSelectMultiple\nDESCRIPTION: Enhances the BlogPage model by replacing the default multi-select box for authors with a more user-friendly checkbox interface using FieldPanel with a custom widget.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# New imports added for forms, and FieldPanel\nfrom django import forms\nfrom django.db import models\n\nfrom modelcluster.fields import ParentalKey, ParentalManyToManyField\nfrom wagtail.models import Page, Orderable\nfrom wagtail.fields import RichTextField\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel\nfrom wagtail.search import index\nfrom wagtail.snippets.models import register_snippet\n\nclass BlogPage(Page):\n    date = models.DateField(\"Post date\")\n    intro = models.CharField(max_length=250)\n    body = RichTextField(blank=True)\n\n    authors = ParentalManyToManyField('blog.Author', blank=True)\n\n    content_panels = Page.content_panels + [\n        MultiFieldPanel([\n            \"date\",\n            # Change this:\n            FieldPanel(\"authors\", widget=forms.CheckboxSelectMultiple),\n        ], heading=\"Blog information\"),\n        \"intro\", \"body\", \"gallery_images\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Fixing Wagtail Collection Tree with Python\nDESCRIPTION: Python method to repair and fix the collection tree structure, with option to fix paths. Used after creating collections to ensure proper tree organization.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.11.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.core.models import Collection\nCollection.fix_tree(fix_paths=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Root Setting\nDESCRIPTION: Django setting for static files directory configuration\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Backend with Legacy Approach in Wagtail\nDESCRIPTION: Shows the deprecated method of configuring Elasticsearch backend with extra connection options directly in the backend configuration. This approach passes additional parameters directly to the Elasticsearch constructor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.8.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom elasticsearch import RequestsHttpConnection\n\n    WAGTAILSEARCH_BACKENDS = {\n        'default': {\n            'BACKEND': 'wagtail.wagtailsearch.backends.elasticsearch',\n            'connection_class': RequestsHttpConnection,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting MariaDB UUIDs Command\nDESCRIPTION: Management command to convert existing UUID fields to the new format when upgrading to Django 5.0+ with MariaDB 10.7+.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./manage.py convert_mariadb_uuids\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidBlockDefError Exception for Invalid Block Definitions in Python\nDESCRIPTION: Exception class for invalid block definitions in Wagtail StreamField migrations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass InvalidBlockDefError(Exception)\n```\n\n----------------------------------------\n\nTITLE: Linking to Wagtail Editor's Guide Website in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown format, linking to the Wagtail Editor's Guide website. It uses square brackets for the link text and parentheses for the URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/editor_manual/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[guide.wagtail.org](https://guide.wagtail.org/)\n```\n\n----------------------------------------\n\nTITLE: Mapping Admin Utility Functions\nDESCRIPTION: Migration table showing the relocation of various utility functions from deprecated modules to new module locations within the Wagtail admin framework\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.7.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old import\nfrom wagtail.admin.utils import permission_required\n\n# New import\nfrom wagtail.admin.auth import permission_required\n```\n\n----------------------------------------\n\nTITLE: Django Template Configuration for Settings\nDESCRIPTION: Template configuration for accessing settings in Django templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        ...\n        'OPTIONS': {\n            'context_processors': [\n                ...\n                'wagtail.contrib.settings.context_processors.settings',\n            ]\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Fly.io CLI on macOS/Linux\nDESCRIPTION: Command to install the Fly.io CLI on macOS or Linux systems using curl.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://fly.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Custom Non-Page Report Template Before Update\nDESCRIPTION: Original template for a non-page report showing a single results block that handles both display of results and the no-results message.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_14\n\nLANGUAGE: html+django\nCODE:\n```\n{# <project>/templates/reports/custom_non_page_report.html #}\n{% extends \"wagtailadmin/reports/base_report.html\" %}\n\n{% block results %}\n    {% if object_list %}\n        <table class=\"listing\">\n            <!-- Table markup goes here -->\n        </table>\n    {% else %}\n        <p>No results found.</p>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Rendition Storage Location (Python)\nDESCRIPTION: Added get_upload_to method to AbstractRendition which can be overridden to control where image renditions are stored.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nfrom wagtail.images.models import AbstractRendition\n\nclass CustomRendition(AbstractRendition):\n    def get_upload_to(self, filename):\n        # Custom logic to determine storage location\n        # Exact implementation details not provided in release notes\n```\n\n----------------------------------------\n\nTITLE: Customizing Group Edit/Create Template in Django\nDESCRIPTION: This HTML template extends the default Wagtail group edit template and adds an extra field for AD groups in the form.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/customizing_group_views.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailusers/groups/edit.html\" %}\n{% load wagtailusers_tags wagtailadmin_tags i18n %}\n\n{% block extra_fields %}\n    <li>{% include \"wagtailadmin/shared/field.html\" with field=form.adgroups %}</li>\n{% endblock extra_fields %}\n```\n\n----------------------------------------\n\nTITLE: Overriding Page Permissions Method\nDESCRIPTION: Example of overriding the permissions_for_user() method on specific page types\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPage(Page):\n    def permissions_for_user(self, user):\n        # Custom permission logic here\n        return super().permissions_for_user(user)\n```\n\n----------------------------------------\n\nTITLE: Preventing subpage_urls Property Definition in RoutablePage\nDESCRIPTION: This code snippet represents a change in the RoutablePage class to prevent subpage_urls from being defined as a property, which would cause a memory leak.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.8.7.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nRoutablePage.prevent_property_definition('subpage_urls')\n```\n\n----------------------------------------\n\nTITLE: Alternative Hook Registration Method\nDESCRIPTION: Demonstrates registering a hook by calling hooks.register as a function directly.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhooks.register('name_of_hook', my_hook_function)\n```\n\n----------------------------------------\n\nTITLE: Installing Local Wagtail Instance\nDESCRIPTION: Command to install a local development instance of Wagtail in a virtualenv for a Wagtail site.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -e path/to/wagtail\"[testing, docs]\" --config-settings editable-mode=strict -U\n```\n\n----------------------------------------\n\nTITLE: Preventing a Field from Being Reference Indexed in Wagtail\nDESCRIPTION: Example of how to prevent a specific model field from being included in Wagtail's reference index by setting the wagtail_reference_index_ignore attribute to True.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/reference_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CentralPage(Page):\n    ...\n    reference = models.ForeignKey(\n        \"doc\",\n        on_delete=models.SET_NULL,\n        related_name=\"page_ref\",\n    )\n    reference.wagtail_reference_index_ignore = True\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Development Requirements for Documentation\nDESCRIPTION: Command to install Wagtail's development dependencies needed for building documentation. Uses pip with the testing and docs extras, and configures strict editable mode.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[testing,docs] --config-settings editable-mode=strict\n```\n\n----------------------------------------\n\nTITLE: TranslatableMixin Database Fields in Wagtail CMS\nDESCRIPTION: Documentation for the database fields of the TranslatableMixin in Wagtail, which can be added to models to make them translatable. Pages already include this mixin.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass TranslatableMixin:\n\n    locale\n        # (Foreign Key to wagtail.models.Locale)\n        # For pages, this defaults to the locale of the parent page.\n\n    translation_key\n        # (uuid)\n        # A UUID that is randomly generated whenever a new model instance is created.\n        # This is shared with all translations of that instance so can be used for querying translations.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PageManager.sibling_of() Exclusive Behavior (Python)\nDESCRIPTION: Example showing the old exclusive behavior of PageManager.sibling_of() method where a page was not considered a sibling of itself.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> event_1 = EventPage.objects.get(title='Event 1')\n>>> EventPage.objects.sibling_of(event_1)\n[<EventPage: Event 2>]  # OLD behavior: Event 1 is not considered a sibling of itself\n```\n\n----------------------------------------\n\nTITLE: Fetching Content from Wagtail API v2 Endpoints\nDESCRIPTION: Example of a GET request to a Wagtail API v2 endpoint and the JSON response structure. The response includes metadata and a list of items with their details.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/endpoint_name/\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": \"total number of results\"\n    },\n    \"items\": [\n        {\n            \"id\": 1,\n            \"meta\": {\n                \"type\": \"app_name.ModelName\",\n                \"detail_url\": \"http://api.example.com/api/v2/endpoint_name/1/\"\n            },\n            \"field\": \"value\"\n        },\n        {\n            \"id\": 2,\n            \"meta\": {\n                \"type\": \"app_name.ModelName\",\n                \"detail_url\": \"http://api.example.com/api/v2/endpoint_name/2/\"\n            },\n            \"field\": \"different value\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Block for Local Contents\nDESCRIPTION: A markdown configuration block that specifies local contents settings with a depth parameter of 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.0.5.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Advanced language selector handling shared content in Django templates\nDESCRIPTION: This HTML+Django template code creates an advanced language selector that handles locales sharing the same content. It iterates through all configured languages and uses the page.localized attribute to get the correct URL for each language.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{% for language_code, language_name in LANGUAGES %}\n    {% get_language_info for language_code as lang %}\n\n    {% language language_code %}\n        <a href=\"{% pageurl page.localized %}\" rel=\"alternate\" hreflang=\"{{ language_code }}\">\n            {{ lang.name_local }}\n        </a>\n    {% endlanguage %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Fly.io\nDESCRIPTION: Command to authenticate and log in to Fly.io using the CLI.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfly auth login\n```\n\n----------------------------------------\n\nTITLE: Static Files Structure\nDESCRIPTION: Shows the recommended directory structure for static assets like CSS, JS and images\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nname_of_project/\n    name_of_app/\n        static/\n            name_of_app/\n                css/\n                js/\n                images/\n        models.py\n```\n\n----------------------------------------\n\nTITLE: Tag Library Import Example\nDESCRIPTION: Example showing how to import tag library for focal points feature in Wagtail templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n{% import tag_library %}\n```\n\n----------------------------------------\n\nTITLE: Custom Non-Page Report Template After Update\nDESCRIPTION: Updated template for a non-page report with separate blocks for results and no_results_message, extending the new base_report_results.html template.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_16\n\nLANGUAGE: html+django\nCODE:\n```\n{# <project>/templates/reports/custom_non_page_report_results.html #}\n{% extends \"wagtailadmin/reports/base_report_results.html\" %}\n\n{% block results %}\n    <table class=\"listing\">\n        <!-- Table markup goes here -->\n    </table>\n{% endblock %}\n\n{% block no_results_message %}\n    <p>No results found.</p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Model Methods\nDESCRIPTION: Examples of page model methods mentioned in changelog including copy() and get_admin_display_title()\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Page(models.Model):\n    def copy(self):\n        if not self.id:\n            raise Exception('Page must be saved before copying')\n        # Copy implementation\n\n    def get_admin_display_title(self):\n        return self.title  # Custom admin title implementation\n```\n\n----------------------------------------\n\nTITLE: Starting Wagtail Project with Custom Template\nDESCRIPTION: This shell command demonstrates how to start a Wagtail project using a custom template hosted on a remote repository (e.g., GitHub). The `--template` option specifies the URL of the template's archive file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/project_template.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"wagtail start myproject --template=https://github.com/githubuser/wagtail-awesome-template/archive/main.zip\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Rejection Notification in Django Template\nDESCRIPTION: Django template that extends the base notification template to show a rejection message and edit link. Uses translation tags for internationalization and includes base URL configuration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/rejected.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %}\n{% blocktrans trimmed with title=revision.content_object.get_admin_display_title|safe %}The page \"{{ title }}\" has been rejected.{% endblocktrans %}\n\n{% trans \"You can edit the page here:\"%} {{ base_url }}{% url 'wagtailadmin_pages:edit' revision.object_id %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Cloning Wagtail Repository\nDESCRIPTION: Commands to clone a forked copy of the Wagtail repository and navigate to its directory.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/username/wagtail.git\ncd wagtail\n```\n\n----------------------------------------\n\nTITLE: Field Panel Configuration\nDESCRIPTION: Example showing the recommended way to configure title field panel in Wagtail models.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nTitleFieldPanel('title')\n```\n\n----------------------------------------\n\nTITLE: Wagtail Admin Menu and URL Registration\nDESCRIPTION: Integration code for adding the report to the Wagtail admin menu and registering its URLs using hooks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/adding_reports.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, reverse\n\nfrom wagtail.admin.menu import AdminOnlyMenuItem\nfrom wagtail import hooks\n\nfrom .views import UnpublishedChangesReportView\n\n@hooks.register('register_reports_menu_item')\ndef register_unpublished_changes_report_menu_item():\n    return AdminOnlyMenuItem(\"Pages with unpublished changes\", reverse('unpublished_changes_report'), icon_name=UnpublishedChangesReportView.header_icon, order=700)\n\n@hooks.register('register_admin_urls')\ndef register_unpublished_changes_report_url():\n    return [\n        path('reports/unpublished-changes/', UnpublishedChangesReportView.as_view(), name='unpublished_changes_report'),\n        # Add a results-only view to add support for AJAX-based filtering\n        path('reports/unpublished-changes/results/', UnpublishedChangesReportView.as_view(results_only=True), name='unpublished_changes_report_results'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring fly.toml for Database Migration\nDESCRIPTION: Addition to fly.toml file to specify the release command for running database migrations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[deploy]\n  release_command = \"python manage.py migrate --noinput\"\n```\n\n----------------------------------------\n\nTITLE: Favicon Image Generation Template\nDESCRIPTION: Django template code for generating .ico favicon images using the new format-ico filter\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n<link rel=\"icon\" href=\"{% image favicon_image format-ico %}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Django Model Example\nDESCRIPTION: Example Django model class showing a basic Person model with first and last name fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/generic_views.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return \"%s %s\" % (self.first_name, self.last_name)\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition with classname Parameter\nDESCRIPTION: Example of a Python class definition that includes a classname parameter in its constructor. This demonstrates the preferred way to handle HTML class names in Python class-driven content in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/general_guidelines.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Panel:\n    def __init__(self, heading=\"\", classname=\"\", help_text=\"\", base_form_class=None):\n        self.heading = heading\n        self.classname = classname\n```\n\n----------------------------------------\n\nTITLE: Note Block About Documentation Version in Markdown\nDESCRIPTION: A note directive recommending that developers read the latest version of the documentation rather than the stable version when developing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nWhen developing, it's recommended that you always read the `latest` version of the docs. Not the `stable` version. This is because it will better reflect what's on the `main` code branch.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: date\nDESCRIPTION: This snippet defines a custom date icon, represented as an SVG element from Font Awesome. It visually represents date-picking or calendar functionalities in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-date\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! calendar-day (solid): Font Awesome Pro 6.4.0 --><path d=\"M6 1v1h4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1v1h1.5c.813 0 1.5.688 1.5 1.5V5H1V3.5A1.5 1.5 0 0 1 2.5 2H4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1ZM1 6h14v8.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.48 1.48 0 0 1 1 14.5V6Zm2.5 2c-.281 0-.5.25-.5.5v3c0 .281.219.5.5.5h3c.25 0 .5-.219.5-.5v-3c0-.25-.25-.5-.5-.5h-3Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Positioning Wagtail User Bar\nDESCRIPTION: Examples of positioning the wagtailuserbar in different corners of the screen using template parameters.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n...\n{% wagtailuserbar 'top-left' %}\n{% wagtailuserbar 'top-right' %}\n{% wagtailuserbar 'bottom-left' %}\n{% wagtailuserbar 'bottom-right' %}\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Linux/MacOS\nDESCRIPTION: Commands for creating and activating a virtual environment in Unix-based systems\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv mysite/env\n```\n\nLANGUAGE: sh\nCODE:\n```\nsource mysite/env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Rejection Message in Wagtail CMS\nDESCRIPTION: This Django template snippet generates a localized message for rejected tasks in Wagtail CMS. It handles both page and non-page objects, using conditional logic to format the message appropriately. The template uses internationalization tags for multi-language support.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/task_state_rejected_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n\n{% if page %}\n    {% blocktrans trimmed with title=page.get_admin_display_title|safe task=task.name|safe %}The page \"{{ title }}\" has been rejected during \"{{ task }}\".{% endblocktrans %}\n{% else %}\n    {% latest_str object as title %}\n    {% blocktrans trimmed with title=title|safe task=task.name|safe model_name=model_name|safe asvar message %}\n        The {{ model_name }} \"{{ title }}\" has been rejected during \"{{ task }}\".\n    {% endblocktrans %}\n    {{ message|capfirst|safe }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Updating StreamField Block get_context Method\nDESCRIPTION: Example showing how to update a StreamField block's get_context method to support the new parent_context parameter introduced in Wagtail 1.9. The method now receives a parent_context parameter and should incorporate it in the returned context.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.9.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyBlock(Block):\n\n    def get_context(self, value):\n        context = super(MyBlock, self).get_context(value)\n        ...\n        return context\n```\n\n----------------------------------------\n\nTITLE: StreamBlock with Block Count Limits - Python\nDESCRIPTION: Shows how to set block count limits using StreamBlock class definition.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass CommonContentBlock(blocks.StreamBlock):\n    heading = blocks.CharBlock(form_classname=\"title\")\n    paragraph = blocks.RichTextBlock()\n    image = ImageBlock()\n\n    class Meta:\n        min_num = 2\n        max_num = 5\n```\n\n----------------------------------------\n\nTITLE: Note Block About Development Setup in Markdown\nDESCRIPTION: A note directive emphasizing the importance of having a working local development environment before proceeding with contributions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nDo not try to move past this step until you have a working `bakerydemo` code locally and a clone of the Wagtail repo that you can edit. When editing the Wagtail core code (both HTML and JavaScript) you should be able to refresh the site running locally and see the changes.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Wagtail Project\nDESCRIPTION: Specifies required versions for Django and Wagtail packages. Requires Django 5.2.x and Wagtail 7.0 alpha\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/project_template/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nDjango>=5.2,<5.3\nwagtail==7.0a0\n```\n\n----------------------------------------\n\nTITLE: Creating Base App in Wagtail\nDESCRIPTION: Command to generate a new base app for managing site-wide components.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_footer_for_all_pages.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py startapp base\n```\n\n----------------------------------------\n\nTITLE: Regenerating Image Renditions via CLI\nDESCRIPTION: Command line instruction for regenerating image renditions using Django management command.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py wagtail_update_image_renditions --purge\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Client-Side Components with NPM\nDESCRIPTION: Command to install the Wagtail client-side components library via NPM package manager.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install wagtail\n```\n\n----------------------------------------\n\nTITLE: Registering Global Admin JavaScript for Document Upload in Wagtail\nDESCRIPTION: This Python code snippet demonstrates how to use the 'insert_global_admin_js' hook in Wagtail to include a custom JavaScript file for modifying document upload behavior globally.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/title_generation_on_upload.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\nfrom django.templatetags.static import static\nfrom django.utils.html import format_html\n\nfrom wagtail import hooks\n\n@hooks.register(\"insert_global_admin_js\")\ndef get_global_admin_js():\n    script_url = static('js/title_with_extension.js')\n    return format_html('<script src=\"{}\"></script>', script_url)\n```\n\n----------------------------------------\n\nTITLE: Defining Text Color Variables in CSS\nDESCRIPTION: This snippet defines multiple CSS variables for text colors, including default, placeholder, link, hover, button, highlight, and error states. These color variables help maintain consistent design across different UI elements by using standardized colors throughout the application.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-meta\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-placeholder\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-link-default\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-link-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-button-outline-default\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-button-outline-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-highlight\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-error\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-button-critical-outline-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-status-label\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-text-link-info\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Search Promotions App\nDESCRIPTION: Configuration snippet showing how to add the wagtailsearchpromotions contrib module to Django's INSTALLED_APPS after it was moved out of wagtailsearch.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    'wagtail.contrib.wagtailsearchpromotions',\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Selector for Hallo Editor Styling in Wagtail\nDESCRIPTION: Shows the change in CSS selector for styling the Hallo editor, transitioning from the '.richtext' class to the new '.halloeditor' class.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n/* Styles */\n- .richtext {\n+ .halloeditor {\n    font-family: monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Wagtail Release Notes in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It sets the maximum depth to 1 and lists all the release versions and related documents.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   upgrading\n   release_process\n   7.0\n   6.4.2\n   6.4.1\n   6.4\n   6.3.4\n   6.3.3\n   6.3.2\n   6.3.1\n   6.3\n   6.2.3\n   6.2.2\n   6.2.1\n   6.2\n   6.1.3\n   6.1.2\n   6.1.1\n   6.1\n   6.0.6\n   6.0.5\n   6.0.4\n   6.0.3\n   6.0.2\n   6.0.1\n   6.0\n   5.2.8\n   5.2.7\n   5.2.6\n   5.2.5\n   5.2.4\n   5.2.3\n   5.2.2\n   5.2.1\n   5.2\n   5.1.3\n   5.1.2\n   5.1.1\n   5.1\n   5.0.5\n   5.0.4\n   5.0.3\n   5.0.2\n   5.0.1\n   5.0\n   4.2.4\n   4.2.3\n   4.2.2\n   4.2.1\n   4.2\n   4.1.9\n   4.1.8\n   4.1.7\n   4.1.6\n   4.1.5\n   4.1.4\n   4.1.3\n   4.1.2\n   4.1.1\n   4.1\n   4.0.4\n   4.0.2\n   4.0.1\n   4.0\n   3.0.3\n   3.0.2\n   3.0.1\n   3.0\n   2.16.3\n   2.16.2\n   2.16.1\n   2.16\n   2.15.6\n   2.15.5\n   2.15.4\n   2.15.3\n   2.15.2\n   2.15.1\n   2.15\n   2.14.2\n   2.14.1\n   2.14\n   2.13.5\n   2.13.4\n   2.13.3\n   2.13.2\n   2.13.1\n   2.13\n   2.12.6\n   2.12.5\n   2.12.4\n   2.12.3\n   2.12.2\n   2.12.1\n   2.12\n   2.11.9\n   2.11.8\n   2.11.7\n   2.11.6\n   2.11.5\n   2.11.4\n   2.11.3\n   2.11.2\n   2.11.1\n   2.11\n   2.10.2\n   2.10.1\n   2.10\n   2.9.3\n   2.9.2\n   2.9.1\n   2.9\n   2.8.2\n   2.8.1\n   2.8\n   2.7.4\n   2.7.3\n   2.7.2\n   2.7.1\n   2.7\n   2.6.3\n   2.6.2\n   2.6.1\n   2.6\n   2.5.2\n   2.5.1\n   2.5\n   2.4\n   2.3\n   2.2.2\n   2.2.1\n   2.2\n   2.1.3\n   2.1.2\n   2.1.1\n   2.1\n   2.0.2\n   2.0.1\n   2.0\n   1.13.4\n   1.13.3\n   1.13.2\n   1.13.1\n   1.13\n   1.12.6\n   1.12.5\n   1.12.4\n   1.12.3\n   1.12.2\n   1.12.1\n   1.12\n   1.11.1\n   1.11\n   1.10.1\n   1.10\n   1.9.1\n   1.9\n   1.8.2\n   1.8.1\n   1.8\n   1.7\n   1.6.3\n   1.6.2\n   1.6.1\n   1.6\n   1.5.3\n   1.5.2\n   1.5.1\n   1.5\n   1.4.6\n   1.4.5\n   1.4.4\n   1.4.3\n   1.4.2\n   1.4.1\n   1.4\n   1.3.1\n   1.3\n   1.2\n   1.1\n   1.0\n   0.8.10\n   0.8.8\n   0.8.7\n   0.8.6\n   0.8.5\n   0.8.4\n   0.8.3\n   0.8.1\n   0.8\n   0.7\n   0.6\n   0.5\n   0.4.1\n   0.4\n```\n\n----------------------------------------\n\nTITLE: Sample fly.toml Configuration\nDESCRIPTION: Example of a complete fly.toml configuration file for a Wagtail project deployment on Fly.io.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\napp = \"yourname-wagtail-portfolio\"\nprimary_region = \"lhr\"\nconsole_command = \"/code/manage.py shell\"\n\n[build]\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for arrow-right-full in Wagtail Admin\nDESCRIPTION: SVG definition for the 'arrow-right-full' icon based on Font Awesome Pro's 'right-long' solid icon. This icon represents a full right-pointing arrow.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-arrow-right-full\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 16\"><!--! right-long (solid): Font Awesome Pro 6.4.0 --><path d=\"m15.75 8.563-3.5 3.25c-.219.218-.531.25-.813.156a.78.78 0 0 1-.468-.688V9H1c-.563 0-1-.438-1-1 0-.594.438-1 1-1h9.969V4.75a.78.78 0 0 1 .469-.688c.28-.093.593-.062.812.157l3.5 3.25a.755.755 0 0 1 0 1.093Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Ensuring Python 3.10 Compatibility for Elasticsearch Backend\nDESCRIPTION: This update ensures compatibility with Python 3.10 when using the Elasticsearch backend, allowing Wagtail to leverage new features and performance improvements in the latest Python release.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.15.6.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nEnsure Python 3.10 compatibility when using Elasticsearch backend (Przemysław Buczkowski, Matt Westcott)\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for arrow-left in Wagtail Admin\nDESCRIPTION: SVG definition for the custom 'arrow-left' icon used in the Wagtail admin interface. This icon represents a left-pointing arrow.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-arrow-left\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M9.5 13a.743.743 0 0 1-.54-.21L5.21 9.04a.723.723 0 0 1 0-1.056l3.75-3.75a.723.723 0 0 1 1.056 0 .723.723 0 0 1 0 1.055L6.805 8.5l3.21 3.234a.723.723 0 0 1 0 1.055A.727.727 0 0 1 9.5 13Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Warning About Pull Request Management\nDESCRIPTION: Markdown warning block advising contributors to keep the same PR open rather than creating new ones for fixes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n```{warning}\nAvoid closing the PR only to create a new one, instead keep it open and push your changes/fixes to the same branch. Unless directed to make the PR smaller, keep the same one open and work through items one by one.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring What's New Banner in Python\nDESCRIPTION: Sets the WAGTAIL_ENABLE_WHATS_NEW_BANNER setting to False to disable the new banner feature in Wagtail 4.1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_ENABLE_WHATS_NEW_BANNER = False\n```\n\n----------------------------------------\n\nTITLE: CustomNonPageReportView Class Before Update\nDESCRIPTION: Original implementation of a non-page report view class with template_name attribute.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass CustomNonPageReportView(ReportView):\n    template_name = \"reports/custom_non_page_report.html\"\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Internationalization in Wagtail (Shell)\nDESCRIPTION: These commands generate and apply database migrations for internationalization features in a Wagtail project. It includes creating schema migrations and applying them to the database.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py makemigrations myapp\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Fly.io\nDESCRIPTION: Addition to .gitignore file to exclude environment files from version control.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n.env*\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'pilcrow' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'pilcrow' icon used in Wagtail admin interface, derived from Font Awesome Pro 6.4.0's 'paragraph (solid)' icon. The path defines a paragraph mark with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_64\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-pilcrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! paragraph (solid): Font Awesome Pro 6.4.0 --><path d=\"M15 2c0 .563-.469 1-1 1h-1v11c0 .563-.469 1-1 1-.5 0-1-.438-1-1V3h-1v11c0 .563-.469 1-1 1-.5 0-1-.438-1-1v-3h-.813C4.595 11 2.25 9.094 2 6.5 1.719 3.531 4.063 1 6.969 1h7C14.53 1 15 1.469 15 2Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'site' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'site' icon used in Wagtail admin interface, sourced from Font Awesome Pro 6.4.0's 'earth-americas (solid)' icon. The path defines a globe shape with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_75\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-site\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! earth-americas (solid): Font Awesome Pro 6.4.0 --><path d=\"M16 8c0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8 0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8ZM1.781 6.031l.313.532c.25.437.656.78 1.187.937l1.781.5c.563.156.938.656.938 1.219v1.25c0 .344.188.656.5.781.281.156.5.469.5.813v1.218c0 .5.438.844.906.719a1.476 1.476 0 0 0 1.032-1.063l.093-.343c.125-.531.469-.969.938-1.25l.25-.156c.469-.25.781-.75.781-1.282v-.281c0-.375-.188-.781-.469-1.063l-.094-.093C10.158 8.188 9.75 8 9.376 8H8c-.344 0-.688-.063-.969-.25l-1.093-.625c-.125-.063-.22-.188-.282-.344-.093-.281.032-.625.313-.75l.187-.093a.81.81 0 0 1 .657-.063l.75.25c.25.094.53-.031.687-.25a.615.615 0 0 0-.063-.719l-.406-.5a.993.993 0 0 1 0-1.281l.5-.563a.99.99 0 0 0 .094-1.156l-.063-.125c-.124 0-.218-.031-.312-.031a6.54 6.54 0 0 0-6.219 4.531Zm11.875-1.187-.781.312c-.5.219-.75.75-.594 1.25L12.812 8c.094.313.376.563.72.656l.905.219A7.67 7.67 0 0 0 14.5 8a6.439 6.439 0 0 0-.844-3.156Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Lock Icon SVG Implementation\nDESCRIPTION: SVG icon for lock functionality from Font Awesome Pro 6.4.0, displayed at 32x32 pixels with current color fill\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_61\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-lock\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path d=\"M3.5 6V4.5C3.5 2.031 5.5 0 8 0c2.469 0 4.5 2.031 4.5 4.5V6h.5c1.094 0 2 .906 2 2v6c0 1.125-.906 2-2 2H3c-1.125 0-2-.875-2-2V8c0-1.094.875-2 2-2h.5Zm2 0h5V4.5C10.5 3.125 9.375 2 8 2a2.487 2.487 0 0 0-2.5 2.5V6Z\"></path></svg></svg>\n```\n\n----------------------------------------\n\nTITLE: Updating Migration Dependencies for Django Upgrade\nDESCRIPTION: This snippet shows how to correctly update migration dependencies in the project template's initial migration to avoid InconsistentMigrationHistory errors during upgrade to Django 1.10. The migration dependency should be changed from the '__latest__' version to a specific version number.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.7.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    dependencies = [\n        ('wagtailcore', '0029_unicode_slugfield_dj19'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Loading i18n and Displaying Translated Text in Django Template for Wagtail\nDESCRIPTION: This snippet loads the internationalization (i18n) template tags and uses the trans tag to display the translated text 'Password reset'. It's typically used in Wagtail CMS for password reset pages to ensure proper localization.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/account/password_reset/email_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% trans \"Password reset\" %}\n```\n\n----------------------------------------\n\nTITLE: Task Model with Custom Widget\nDESCRIPTION: Demonstrates how to override the default form widget for a field\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# <project>/models.py\n\nfrom django.conf import settings\nfrom django.db import models\nfrom wagtail.models import Task\n\nfrom .widgets import CustomUserChooserWidget\n\n\nclass UserApprovalTask(Task):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=False)\n\n    admin_form_fields = Task.admin_form_fields + ['user']\n\n    admin_form_widgets = {\n        'user': CustomUserChooserWidget,\n    }\n```\n\n----------------------------------------\n\nTITLE: AWS CloudFront IAM Policy Configuration\nDESCRIPTION: IAM policy JSON configuration for AWS CloudFront cache invalidation permissions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowWagtailFrontendInvalidation\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"cloudfront:CreateInvalidation\",\n            \"Resource\": \"arn:aws:cloudfront::<account id>:distribution/<distribution id>\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Color Variables in CSS\nDESCRIPTION: This snippet creates CSS variables for primary and secondary icon colors, along with their hover states. It ensures that all icons within the Wagtail theme maintain consistency in appearance and behavior when hovered over.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--w-color-icon-primary\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-icon-primary-hover\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-icon-secondary\n```\n\nLANGUAGE: css\nCODE:\n```\n--w-color-icon-secondary-hover\n```\n\n----------------------------------------\n\nTITLE: Rendering Workflow Approval Message in Django Template\nDESCRIPTION: Template logic that displays different approval messages based on whether the content is a page or another model type. Uses i18n translations and safe HTML rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/workflow_state_approved_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n\n{% if page %}\n    {% blocktrans trimmed with title=page.get_admin_display_title|safe workflow=workflow.name|safe %}The page \"{{ title }}\" has been approved in \"{{ workflow }}\".{% endblocktrans %}\n{% else %}\n    {% latest_str object as title %}\n    {% blocktrans trimmed with title=title|safe workflow=workflow.name|safe model_name=model_name|safe asvar message %}\n        The {{ model_name }} \"{{ title }}\" has been approved in \"{{ workflow }}\".\n    {% endblocktrans %}\n    {{ message|capfirst|safe }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Authentication Configuration\nDESCRIPTION: Configuration example showing how to add authentication credentials to Elasticsearch connection URL.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        ...,\n        'URLS': ['https://username:password@localhost:9200'],\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wagtail Documentation Table of Contents in RST\nDESCRIPTION: Sphinx toctree directive that specifies the structure and organization of the Wagtail CMS usage guide documentation. Sets maximum depth of 2 and displays only titles while listing core documentation sections.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/index.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n---\nmaxdepth: 2\ntitlesonly:\n---\npages\nwriting_templates\nimages\nsearch/index\nsnippets/index\nstreamfield\npermissions\n```\n\n----------------------------------------\n\nTITLE: Circle X-Mark Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 circle-xmark (regular) icon implementation with click/close functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/circle-xmark.svg\n```\n\n----------------------------------------\n\nTITLE: JSON Page Detail Response Structure - Before Change\nDESCRIPTION: Example of the previous JSON structure for page detail view, showing the parent field located in the meta section.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"id\": 10,\n    \"meta\": {\n         \"type\": \"demo.BlogPage\",\n         \"parent\": 2\n    },\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Import Redirects Management Command (Shell)\nDESCRIPTION: Shows the command to run the import_redirects management command, which imports and creates redirects from a user-supplied file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py import_redirects\n```\n\n----------------------------------------\n\nTITLE: Basic Table of Contents Block in Markdown\nDESCRIPTION: A contents directive that generates a local table of contents with a depth of 1, providing navigation for the documentation page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a new Wagtail project\nDESCRIPTION: Command to generate a new Wagtail project using the 'wagtail start' command.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/quick_install.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwagtail start mysite\n```\n\n----------------------------------------\n\nTITLE: Adding Sitemaps to Django INSTALLED_APPS\nDESCRIPTION: Configuration required in Django settings.py to enable sitemap functionality by adding django.contrib.sitemaps to INSTALLED_APPS.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/sitemaps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    \"django.contrib.sitemaps\",\n]\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to Others' PRs\nDESCRIPTION: Shell commands for core team members to add commits to another contributor's pull request branch.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/committing.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:wagtail/wagtail.git\ncd wagtail\ngit remote add johndoe git@github.com:johndoe/wagtail.git\ngit fetch johndoe foo\ngit checkout johndoe/foo\n# Make changes\n# Commit changes\ngit push johndoe HEAD:foo\n```\n\n----------------------------------------\n\nTITLE: Sphinx Table of Contents Configuration\nDESCRIPTION: Sphinx configuration block for generating a local table of contents with depth of 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/accessibility_considerations.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This snippet defines a table of contents for the release notes using Markdown syntax. It specifies local depth of 1 for the contents.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Checklist for Contributing a Solution in Markdown\nDESCRIPTION: A markdown checklist for contributors to follow when preparing to submit a solution. It includes creating a new branch, keeping changes focused, and writing unit tests.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] After feeling confident about a solution, add a comment to the issue\n- [ ] Create a new branch off `main` to track your work separate from the main branch\n- [ ] Keep the changes focused towards your goal, asking questions on the issue if direction is needed\n- [ ] Write unit tests\n```\n\n----------------------------------------\n\nTITLE: Account Menu Item Registration\nDESCRIPTION: Shows how to add a custom menu item to the account section's \"More actions\" tab.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse\nfrom wagtail import hooks\n\n@hooks.register('register_account_menu_item')\ndef register_account_delete_account(request):\n    return {\n        'url': reverse('delete-account'),\n        'label': 'Delete account',\n        'help_text': 'This permanently deletes your account.'\n    }\n```\n\n----------------------------------------\n\nTITLE: Settings Cog Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 gear (solid) icon for settings and configuration\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/cog.svg\n```\n\n----------------------------------------\n\nTITLE: Including wagtail.documents in Django's INSTALLED_APPS\nDESCRIPTION: Configuration code for adding the wagtail.documents app to the INSTALLED_APPS list in the Django project settings file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nINSTALLED_APPS = [\n    # ...\n    'wagtail.documents',\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail Update Notifications in Python\nDESCRIPTION: Setting to disable automatic update notifications in Wagtail admin dashboard. This also prevents sending site hostname information to Wagtail team.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_ENABLE_UPDATE_CHECK = False\n```\n\n----------------------------------------\n\nTITLE: Configuring Contents Block in Markdown\nDESCRIPTION: Markdown configuration block for generating local table of contents with specified depth parameter\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the search documentation, including sections on indexing, searching, and backends.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nindexing\nsearching\nbackends\n```\n```\n\n----------------------------------------\n\nTITLE: Custom StreamField Block Rendering\nDESCRIPTION: Template code demonstrating custom HTML markup for StreamField blocks using iteration.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/streamfield.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailcore_tags %}\n\n    ...\n\n<article>\n    {% for block in page.body %}\n        <section>{% include_block block %}</section>\n    {% endfor %}\n</article>\n```\n\n----------------------------------------\n\nTITLE: Copy Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 clone (regular) icon for copy functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/copy.svg\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents\nDESCRIPTION: RST toctree directive that specifies the structure and depth of documentation navigation, linking to key setup and conceptual pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/index.md#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n---\nmaxdepth: 1\n---\ntutorial\nquick_install\ndemo_site\nintegrating_into_django\nthe_zen_of_wagtail\n```\n\n----------------------------------------\n\nTITLE: Sitemap XML Output with Custom Domain\nDESCRIPTION: Example of the generated XML sitemap output when using a custom domain name (mysite.com).\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/sitemaps.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<url>\n    <loc>http://mysite.com/about/</loc>\n    <lastmod>2015-09-26</lastmod>\n</url>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents for the document with a depth of 1, using Markdown syntax specific to the documentation system being used.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TableBlock in Django Settings\nDESCRIPTION: Configuration step to add TableBlock to INSTALLED_APPS in Django settings file\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/table_block.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    \"wagtail.contrib.table_block\",\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Settings Imports in Wagtail 1.5\nDESCRIPTION: In Wagtail 1.5, the default import in settings/__init__.py has been removed. Commands must now explicitly specify environment-specific settings modules instead of using the general settings module.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.5.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmyproject.settings.dev\n```\n\nLANGUAGE: python\nCODE:\n```\nmyproject.settings.production\n```\n\nLANGUAGE: python\nCODE:\n```\nmyproject.settings\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagtail Version and Documentation URLs in JSON\nDESCRIPTION: JSON structure defining the current version (6.4.1) and LTS version (6.3.3) of Wagtail CMS, along with their corresponding documentation URLs. Includes links to both specific version documentation and minor version documentation pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/scripts/latest.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"6.4.1\",\n    \"url\":     \"https://docs.wagtail.org/en/stable/releases/6.4.1.html\",\n    \"minorUrl\": \"https://docs.wagtail.org/en/stable/releases/6.4.html\",\n    \"lts\": {\n        \"version\": \"6.3.3\",\n        \"url\": \"https://docs.wagtail.org/en/stable/releases/6.3.3.html\",\n        \"minorUrl\": \"https://docs.wagtail.org/en/stable/releases/6.3.html\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stability Note in Markdown\nDESCRIPTION: This snippet adds a note about the stability of features described in the section. It mentions that these features are not subject to the same level of stability as described in the deprecation policy.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nThe features described in this section and their corresponding reference\ndocumentation are not subject to the same level of stability described in our\n[](deprecation_policy). Any backwards-incompatible changes to these features\nwill be called out in the upgrade considerations of the [](../releases/index).\n```\n```\n\n----------------------------------------\n\nTITLE: StreamField Table of Contents Configuration\nDESCRIPTION: Markdown configuration for generating a table of contents with a maximum depth of 2 for StreamField-related documentation pages\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nblocks\nwidget_api\ndata_migrations\n```\n```\n\n----------------------------------------\n\nTITLE: Development Environment Checklist in Markdown\nDESCRIPTION: A markdown checklist for setting up a complete development environment for Wagtail, including installing dependencies and verifying changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- [ ] Install `git` (if not on your machine)\n- [ ] Install a code editor/IDE (we recommend VSCode)\n- [ ] Install the dependencies set out in the development guide\n- [ ] Follow the development guide\n- [ ] Make a change to the `wagtail/admin/templates/wagtailadmin/home.html` template file and confirm you can see the changes on the Wagtail dashboard (home) page\n- [ ] Add a `console.log` statement to `client/src/entrypoints/admin/wagtailadmin.js` and confirm you can see the logging in the browser\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: doc-full\nDESCRIPTION: This snippet defines a full document icon, represented as an SVG element from Font Awesome. The icon represents fully completed document statuses or files in the Wagtail UI.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-doc-full\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! file-lines (regular): Font Awesome Pro 6.4.0 --><path d=\"M13.406 2.938 11.062.594A1.988 1.988 0 0 0 9.656 0H4C2.875 0 2 .906 2 2v12c0 1.125.875 2 2 2h8c1.094 0 2-.875 2-2V4.344c0-.532-.219-1.032-.594-1.407ZM12.5 14c0 .281-.25.5-.5.5H4a.494.494 0 0 1-.5-.5V2.031c0-.281.219-.5.5-.5h5V4c0 .563.438 1 1 1h2.469v9h.031ZM5 8.75c0 .438.313.75.75.75h4.5a.74.74 0 0 0 .75-.75.76.76 0 0 0-.75-.75h-4.5a.74.74 0 0 0-.75.75ZM10.25 11h-4.5a.74.74 0 0 0-.75.75c0 .438.313.75.75.75h4.5a.74.74 0 0 0 .75-.75.76.76 0 0 0-.75-.75Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Modifying Snippet Listing Buttons in Python\nDESCRIPTION: This snippet shows how to modify the list of snippet listing buttons using the construct_snippet_listing_buttons hook in Wagtail. It removes the last button (assumed to be the 'delete' button) from the list.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('construct_snippet_listing_buttons')\ndef remove_snippet_listing_button_item(buttons, snippet, user):\n    buttons.pop()  # Removes the 'delete' button\n```\n\n----------------------------------------\n\nTITLE: Adding Wagtail Middleware\nDESCRIPTION: Required middleware configuration for Wagtail redirects functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'wagtail.contrib.redirects.middleware.RedirectMiddleware',\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree for Wagtail Snippets Documentation in Python\nDESCRIPTION: This code snippet defines a toctree directive in a Sphinx documentation file. It specifies the structure and depth of the documentation for Wagtail snippets, including sections on registering, rendering, features, and customizing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/snippets/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nregistering\nrendering\nfeatures\ncustomizing\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Python not found in path error\nDESCRIPTION: Example of a common installation issue where Python is not available in the system path.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/quick_install.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython\n> command not found: python\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Settings\nDESCRIPTION: Django settings for media files handling and URL configuration\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet creates a table of contents for the release notes document, using local depth of 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for bin in Wagtail Admin\nDESCRIPTION: SVG definition for the 'bin' icon based on Font Awesome Pro's trash-can regular icon. This icon represents a trash bin for deletion actions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_6\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-bin\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! trash-can (regular): Font Awesome Pro 6.4.0 --><path d=\"M6 12.5c0 .281-.25.5-.5.5a.494.494 0 0 1-.5-.5V6c0-.25.219-.5.5-.5.25 0 .5.25.5.5v6.5Zm2.5 0c0 .281-.25.5-.5.5a.494.494 0 0 1-.5-.5V6c0-.25.219-.5.5-.5.25 0 .5.25.5.5v6.5Zm2.5 0c0 .281-.25.5-.5.5a.494.494 0 0 1-.5-.5V6c0-.25.219-.5.5-.5.25 0 .5.25.5.5v6.5ZM10.906.781 12.062 2.5h2.188a.76.76 0 0 1 .75.75.74.74 0 0 1-.75.75H14v9.5c0 1.406-1.125 2.5-2.5 2.5h-7A2.468 2.468 0 0 1 2 13.5V4h-.25A.722.722 0 0 1 1 3.25a.74.74 0 0 1 .75-.75h2.156L5.062.781A1.792 1.792 0 0 1 6.532 0h2.905c.594 0 1.157.313 1.47.781ZM5.72 2.5h4.531l-.594-.875a.263.263 0 0 0-.219-.125H6.531a.263.263 0 0 0-.218.125l-.594.875ZM3.5 13.5c0 .563.438 1 1 1h7c.531 0 1-.438 1-1V4h-9v9.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for arrow-right in Wagtail Admin\nDESCRIPTION: SVG definition for the custom 'arrow-right' icon used in the Wagtail admin interface. This icon represents a right-pointing arrow.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_3\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-arrow-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M6.5 13a.743.743 0 0 1-.54-.21.723.723 0 0 1 0-1.056L9.173 8.5 5.96 5.29a.723.723 0 0 1 0-1.056.723.723 0 0 1 1.055 0l3.75 3.75a.723.723 0 0 1 0 1.055l-3.75 3.75A.727.727 0 0 1 6.5 13Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Wagtail 4.0.4 Point Release\nDESCRIPTION: Minor release focusing on panel API improvements, specifically adding support for help_text rendering on various panel types and updating deprecation messages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n4.0.4 (18.10.2022)\n~~~~~~~~~~~~~~~~~~\n\n * Render `help_text` when set on `FieldPanel`, `MultiFieldPanel`, `FieldRowPanel`, and other panel APIs where it previously worked without official support (Matt Westcott)\n * Update special-purpose `FieldPanel` deprecation message to add clarity for developers (Matt Westcott)\n```\n\n----------------------------------------\n\nTITLE: Defining Snippet Icon SVG in HTML for Wagtail Admin\nDESCRIPTION: SVG definition for the 'snippet' icon used in the Wagtail admin interface. It is based on the Font Awesome Pro 6.4.0 solid leaf icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_77\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-snippet\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 16\"><!--! leaf (solid): Font Awesome Pro 6.4.0 --><path d=\"M17 5.188c0 4-2.219 7.343-5.5 8.437a5.414 5.414 0 0 1-2 .375c-2.031 0-3.938-1.125-4.875-2.938-1.688 1.563-2.156 3.344-2.156 3.376A.76.76 0 0 1 1.75 15h-.188A.754.754 0 0 1 1 14.094C1.313 12.844 3.844 7 11.469 7c.281 0 .531-.219.531-.5 0-.25-.25-.5-.5-.5C8.125 6 5.719 7.094 4 8.375c0-.344.031-.688.094-1.031a5.487 5.487 0 0 1 4.125-4.188c.875-.219 1.719-.187 2.531 0 1.75.406 3.688-.25 4.656-1.906.188-.313.625-.313.781 0 .5 1.156.813 2.563.813 3.938Z\"></path></svg> </svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with Sphinx toctree\nDESCRIPTION: Sphinx toctree directive configuration that defines the structure and organization of Wagtail's reference documentation. Sets maximum depth to 2 levels and displays only titles while listing major documentation sections.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n---\nmaxdepth: 2\ntitlesonly:\n---\n\npages/index\nstreamfield/index\ncontrib/index\nmanagement_commands\nmodels\nhooks\nsignals\nsettings\nproject_template\njinja2\npanels\nviewsets\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Chained QuerySet sibling_of() Behavior (Python)\nDESCRIPTION: Example showing how the behavior remains unchanged when sibling_of() is chained after another QuerySet method like all().\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> event_1 = EventPage.objects.get(title='Event 1')\n>>> EventPage.objects.all().sibling_of(event_1)\n[<EventPage: Event 1>, <EventPage: Event 2>]  # OLD and NEW behaviour\n```\n\n----------------------------------------\n\nTITLE: Markdown Contents Configuration\nDESCRIPTION: Configuration block for generating local table of contents with specified depth in markdown documentation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: doc-empty\nDESCRIPTION: This snippet defines an icon for empty documents, represented as an SVG element from Font Awesome. It is used to represent states where files are not filled or written.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-doc-empty\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! file (regular): Font Awesome Pro 6.4.0 --><path d=\"M2 2c0-1.094.875-2 2-2h5.156c.531 0 1.031.219 1.406.594l2.844 2.844c.375.374.594.874.594 1.406V14c0 1.125-.906 2-2 2H4c-1.125 0-2-.875-2-2V2Zm10.5 12V5H10c-.563 0-1-.438-1-1V1.5H4c-.281 0-.5.25-.5.5v12c0 .281.219.5.5.5h8c.25 0 .5-.219.5-.5Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the document using Markdown syntax. It specifies local content with a depth of 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Understanding Wagtail Checklist in Markdown\nDESCRIPTION: A markdown checklist of tasks for new contributors to better understand Wagtail and its place in the CMS ecosystem before contributing.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n-   [ ] Read the Zen of Wagtail\n-   [ ] Read the Django Overview\n-   [ ] Search online for one or two articles that 'compare Wordpress to Wagtail' or 'top ten open source CMS' and read about the CMS landscape\n-   [ ] Read some of the Wagtail Guide\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Inclusion Template Tag with classname Parameter in Python\nDESCRIPTION: Example of a Django inclusion template tag that accepts a classname parameter for HTML class output. This demonstrates the preferred naming convention for HTML class variables in Wagtail.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/general_guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@register.inclusion_tag(\"wagtailadmin/shared/dialog/dialog_toggle.html\")\ndef dialog_toggle(dialog_id, classname=\"\", text=None):\n    return {\n        \"classname\": classname,\n        \"text\": text,\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: doc-full-inverse\nDESCRIPTION: This snippet defines a full document icon in an inverse style, represented as an SVG element from Font Awesome. It symbolizes complete file states within the Wagtail interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-doc-full-inverse\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! file-lines (solid): Font Awesome Pro 6.4.0 --><path d=\"M10 0v4h4l-4-4ZM9 4V0H3.5A1.5 1.5 0 0 0 2 1.5v13c0 .844.656 1.5 1.5 1.5h9a1.5 1.5 0 0 0 1.5-1.5V5h-4c-.563 0-1-.438-1-1Zm1.5 9h-5a.494.494 0 0 1-.5-.5c0-.25.219-.5.5-.5h5c.25 0 .5.25.5.5 0 .281-.25.5-.5.5Zm0-2h-5a.494.494 0 0 1-.5-.5c0-.25.219-.5.5-.5h5c.25 0 .5.25.5.5 0 .281-.25.5-.5.5Zm.5-2.5c0 .281-.25.5-.5.5h-5a.494.494 0 0 1-.5-.5c0-.25.219-.5.5-.5h5c.25 0 .5.25.5.5Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Up pre-commit Hooks for Wagtail Development\nDESCRIPTION: Command to install pre-commit hooks for automatic code linting and formatting on each commit in the Wagtail project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Implementing folder-open-1 SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of an open folder icon variant 1 for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_44\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-folder-open-1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 19 16\"><!--! folder-open (regular): Font Awesome Pro 6.4.0 --><path d=\"m17.875 8.469-3 6c-.156.344-.5.531-.906.531H2c-1.125 0-2-.875-2-2V3c0-1.094.875-2 2-2h3.656c.532 0 1.032.219 1.407.594L8.592 3H13c1.094 0 2 .906 2 2v1h-1.5V5c0-.25-.25-.5-.5-.5H8L6 2.656a.502.502 0 0 0-.344-.156H2c-.281 0-.5.25-.5.5v9l2.219-4.438A.962.962 0 0 1 4.594 7H17c.719 0 1.219.781.875 1.469Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Styling Contact Form with CSS\nDESCRIPTION: Defines CSS styles for the contact form elements including labels, inputs, and help text to improve the visual presentation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/create_contact_page.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.page-form label {\n    display: block;\n    margin-top: 10px;\n    margin-bottom: 5px;\n}\n\n.page-form :is(textarea, input, select) {\n    width: 100%;\n    max-width: 500px;\n    min-height: 40px;\n    margin-top: 5px;\n    margin-bottom: 10px;\n}\n\n.page-form .helptext {\n    font-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Table of Contents in Markdown\nDESCRIPTION: This snippet demonstrates how to add a table of contents in Markdown format, specifying local depth.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/7.0.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for calendar-check in Wagtail Admin\nDESCRIPTION: SVG definition for the 'calendar-check' icon based on Font Awesome Pro's calendar-check solid icon. This icon represents a calendar with a checkmark, indicating a confirmed date.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_11\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-calendar-check\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! calendar-check (solid): Font Awesome Pro 6.4.0 --><path d=\"M6 1v1h4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1v1h1.5c.813 0 1.5.688 1.5 1.5V5H1V3.5A1.5 1.5 0 0 1 2.5 2H4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1ZM1 6h14v8.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.48 1.48 0 0 1 1 14.5V6Zm10.25 3.531c.313-.281.313-.75 0-1.062a.736.736 0 0 0-1.031 0l-2.969 3-1.5-1.5a.736.736 0 0 0-1.031 0c-.313.312-.313.781 0 1.062l2 2a.684.684 0 0 0 1.031 0l3.5-3.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'pick' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'pick' icon used in Wagtail admin interface, based on Font Awesome Pro 6.4.0's 'star (solid)' icon. The path defines a star shape with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_63\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-pick\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! star (solid): Font Awesome Pro 6.4.0 --><path d=\"m10.543 4.879 3.91.574a.892.892 0 0 1 .711.602c.11.3.027.656-.219.875l-2.843 2.816.683 3.992a.86.86 0 0 1-.355.848c-.274.219-.63.219-.93.082L8 12.781l-3.527 1.887c-.274.137-.657.137-.903-.082a.859.859 0 0 1-.355-.848l.656-3.992L1.027 6.93a.812.812 0 0 1-.218-.875.892.892 0 0 1 .71-.602l3.938-.574 1.75-3.637A.852.852 0 0 1 8 .75c.328 0 .629.191.766.492l1.777 3.637Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Building Wagtail Documentation for Local Browsing\nDESCRIPTION: Command to build the Sphinx documentation for local browsing. After running this, the generated HTML files can be accessed at _build/html/index.html.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon Code References in Wagtail Admin\nDESCRIPTION: HTML code displaying icon references for various icons in the Wagtail admin interface. Each row shows the SVG icon, its code reference name, Font Awesome source, and file path in the wagtailadmin directory.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_59\n\nLANGUAGE: HTML\nCODE:\n```\n<td> circle-question (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/help.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-history\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! clock-rotate-left (solid): Font Awesome Pro 6.4.0 --><path d=\"M8 0c4.406 0 8 3.594 8 8 0 4.438-3.594 8-8 8a8.227 8.227 0 0 1-4.594-1.406c-.437-.344-.562-.969-.25-1.406.313-.47.938-.563 1.406-.25C5.532 13.624 6.72 14 8 14c3.313 0 6-2.688 6-6 0-3.313-2.688-6-6-6-1.688 0-3.156.688-4.25 1.781l.969.938c.468.5.125 1.281-.532 1.281H.75A.722.722 0 0 1 0 5.25V1.812c0-.656.781-1 1.25-.53l1.063 1.062C3.78.906 5.78 0 7.968 0H8Zm0 4a.76.76 0 0 1 .75.75v2.969l2 2c.313.312.313.781 0 1.062a.684.684 0 0 1-1.031 0l-2.25-2.25C7.312 8.406 7.25 8.22 7.25 8V4.75A.74.74 0 0 1 8 4Z\"></path></svg> </svg></td>\n<td><code>history</code></td>\n<td> clock-rotate-left (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/history.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-home\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! house (solid): Font Awesome Pro 6.4.0 --><path d=\"M15.848 7.75c0 .492-.41.875-.875.875h-.875L14.125 13v.656a1.08 1.08 0 0 1-1.094 1.094h-2.187a1.063 1.063 0 0 1-1.094-1.094V11.25a.9.9 0 0 0-.875-.875h-1.75a.881.881 0 0 0-.875.875v2.406a1.08 1.08 0 0 1-1.094 1.094H2.97a1.063 1.063 0 0 1-1.094-1.094V8.625H1a.864.864 0 0 1-.875-.875c0-.246.082-.465.273-.656l7-6.098A.823.823 0 0 1 8 .75a.94.94 0 0 1 .574.219l6.973 6.125c.219.191.328.41.3.656Z\"></path></svg> </svg></td>\n<td><code>home</code></td>\n<td> house (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/home.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-image\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 16\"><!--! image (solid): Font Awesome Pro 6.4.0 --><path d=\"M14.969 1h-12c-1.094 0-2 .906-2 2v10c0 1.125.906 2 2 2h12c1.094 0 2-.875 2-2V3c0-1.094-.875-2-2-2Zm-10.5 2c.812 0 1.5.688 1.5 1.5 0 .844-.657 1.5-1.5 1.5-.875 0-1.5-.656-1.5-1.5 0-.813.687-1.5 1.5-1.5Zm10.468 9.75a.539.539 0 0 1-.437.25H3.562a.514.514 0 0 1-.468-.25c-.063-.188-.063-.375.062-.531l2.188-3A.488.488 0 0 1 5.75 9c.156 0 .281.094.375.219l1.031 1.406 2.907-4.375A.499.499 0 0 1 10.5 6c.156 0 .313.094.406.25l4 6c.094.125.094.344.031.5Z\"></path></svg> </svg></td>\n<td><code>image</code></td>\n<td> image (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/image.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-info-circle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-info (solid): Font Awesome Pro 6.4.0 --><path d=\"M8 0C3.562 0 0 3.594 0 8c0 4.438 3.563 8 8 8 4.406 0 8-3.563 8-8 0-4.406-3.594-8-8-8Zm0 4c.531 0 1 .469 1 1 0 .563-.469 1-1 1-.563 0-1-.438-1-1 0-.531.438-1 1-1Zm1.25 8h-2.5a.722.722 0 0 1-.75-.75.74.74 0 0 1 .75-.75h.5v-2H7a.722.722 0 0 1-.75-.75A.74.74 0 0 1 7 7h1a.76.76 0 0 1 .75.75v2.75h.5a.76.76 0 0 1 .75.75.74.74 0 0 1-.75.75Z\"></path></svg> </svg></td>\n<td><code>info-circle</code></td>\n<td> circle-info (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/info-circle.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-italic\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! italic (solid): Font Awesome Pro 6.4.0 --><path d=\"M14 2.031c0 .531-.469 1-1 1h-1.844L7 13.031h2c.531 0 1 .438 1 1 0 .531-.469 1-1 1H3c-.563 0-1-.469-1-1 0-.562.438-1 1-1h1.813l4.156-10H7c-.563 0-1-.469-1-1 0-.562.438-1 1-1h6c.531 0 1 .438 1 1Z\"></path></svg> </svg></td>\n<td><code>italic</code></td>\n<td> italic (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/italic.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-key\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--! key (solid): Font Awesome Pro 6.4.0 --><path d=\"M336 352c97.2 0 176-78.8 176-176S433.2 0 336 0S160 78.8 160 176c0 18.7 2.9 36.8 8.3 53.7L7 391c-4.5 4.5-7 10.6-7 17v80c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V448h40c13.3 0 24-10.7 24-24V384h40c6.4 0 12.5-2.5 17-7l33.3-33.3c16.9 5.4 35 8.3 53.7 8.3zM376 96a40 40 0 1 1 0 80 40 40 0 1 1 0-80z\"></path></svg> </svg></td>\n<td><code>key</code></td>\n<td> key (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/key.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-keyboard\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><!--! keyboard (solid): Font Awesome Free 6.5.1 --><path d=\"M64 64C28.7 64 0 92.7 0 128v256c0 35.3 28.7 64 64 64h448c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zm16 64h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-32zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16zm80-176c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16zm-16 112c0-8.8 7.2-16 16-16h224c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16v-32zm112-208h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16zm-16 112c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32zm112-112h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16zm-16 112c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32zm112-112h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16zm-16 112c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-32c-8.8 0-16-7.2-16-16v-32c0-8.8 7.2-16 16-16z\"/></svg></svg></td>\n<td><code>keyboard</code></td>\n<td> keyboard (solid): Font Awesome Free 6.5.1</td>\n<td><code>wagtailadmin/icons/keyboard.svg</code></td>\n</tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-link\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! link (solid): Font Awesome Pro 6.4.0 --><path d=\"M4.387 4.785a3.537 3.537 0 0 1 4.98 0 3.556 3.556 0 0 1 .39 4.566l-.024.024c-.244.366-.732.44-1.098.195-.342-.268-.44-.757-.171-1.098l.024-.025a1.965 1.965 0 0 0-.22-2.539c-.756-.781-2.001-.781-2.783 0L2.751 8.643c-.781.756-.781 2.002 0 2.783a1.998 1.998 0 0 0 2.539.22l.024-.05c.367-.244.855-.17 1.1.196.243.342.17.83-.172 1.099l-.049.024a3.523 3.523 0 0 1-4.54-.39 3.493 3.493 0 0 1 0-4.981l2.734-2.759Zm7.202 6.055a3.493 3.493 0 0 1-4.98 0 3.523 3.523 0 0 1-.391-4.541l.024-.025c.244-.366.733-.439 1.099-.195a.78.78 0 0 1 .17 1.099l-.024.024a1.968 1.968 0 0 0 .22 2.54c.757.78 2.002.78 2.783 0l2.735-2.735c.78-.781.78-2.027 0-2.783a1.968 1.968 0 0 0-2.54-.22l-.024.024a.779.779 0 0 1-1.098-.17.809.809 0 0 1 .17-1.1l.05-.024a3.523 3.523 0 0 1 4.54.391 3.493 3.493 0 0 1 0 4.98L11.59 10.84Z\"></path></svg> </svg></td>\n<td><code>link</code></td>\n<td> link (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/link.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-link-external\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! up-right-from-square (solid): Font Awesome Pro 6.4.0 --><path d=\"M12 10c-.563 0-1 .469-1 1v3H2V5h3c.531 0 1-.438 1-1 0-.531-.469-1-1-1H2C.875 3 0 3.906 0 5v9c0 1.125.875 2 2 2h9c1.094 0 2-.875 2-2v-3c0-.531-.469-1-1-1Zm3.25-10H11c-.406 0-.781.25-.938.625a1.01 1.01 0 0 0 .22 1.094L11.561 3l-6.28 6.313a.964.964 0 0 0 0 1.406A.99.99 0 0 0 6 11c.25 0 .5-.094.688-.281L13 4.438l1.281 1.28a1.01 1.01 0 0 0 1.094.22C15.75 5.78 16 5.405 16 5V.75a.76.76 0 0 0-.75-.75Z\"></path></svg> </svg></td>\n<td><code>link-external</code></td>\n<td> up-right-from-square (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/link-external.svg</code></td> </tr>\n<tr>\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-list-ol\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! list-ol (solid): Font Awesome Pro 6.4.0 --><path d=\"M1.629 2.309c0-.383.3-.657.656-.657h.875c.383 0 .656.274.656.657v3.253h.438c.383 0 .656.301.656.657a.632.632 0 0 1-.656.656H2.066a.648.648 0 0 1-.656-.656c0-.356.3-.657.656-.657h.438V2.966h-.219a.665.665 0 0 1-.656-.656Zm1.723 7.793c-.164-.22-.493-.192-.657.027l-.3.41c-.22.3-.63.383-.903.164-.3-.219-.383-.629-.164-.902l.3-.438c.657-.902 1.97-.984 2.708-.136.601.656.574 1.668-.027 2.324l-.957 1.011h.93c.355 0 .655.301.655.657 0 .383-.3.656-.656.656H1.875c-.273 0-.52-.137-.602-.383-.109-.246-.082-.52.11-.71l1.969-2.134a.416.416 0 0 0 0-.546ZM14.125 2.5a.9.9 0 0 1 .875.875c0 .492-.41.875-.875.875h-7a.864.864 0 0 1-.875-.875c0-.465.383-.875.875-.875h7Zm0 4.375A.9.9 0 0 1 15 7.75c0 .492-.41.875-.875.875h-7a.864.864 0 0 1-.875-.875c0-.465.383-.875.875-.875h7Zm0 4.375a.9.9 0 0 1 .875.875c0 .492-.41.875-.875.875h-7a.864.864 0 0 1-.875-.875c0-.465.383-.875.875-.875h7Z\"></path></svg> </svg></td>\n<td><code>list-ol</code></td>\n<td> list-ol (solid): Font Awesome Pro 6.4.0 </td>\n<td><code>wagtailadmin/icons/list-ol.svg</code></td> </tr>\n<tr>\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Main Content in Wagtail Admin Email\nDESCRIPTION: Defines an empty content block to be filled with specific email content in child templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/base.txt#2025-04-21_snippet_2\n\nLANGUAGE: Django Template\nCODE:\n```\n{% block content %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Random Ordering in Wagtail API v2\nDESCRIPTION: Example of using '?order=random' to return results in a random order. Each request may return results in a different order if there is no caching.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nGET /api/v2/pages/?order=random\n\nHTTP 200 OK\nContent-Type: application/json\n\n{\n    \"meta\": {\n        \"total_count\": 50\n    },\n    \"items\": [\n        pages will be listed here in random order\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: cross\nDESCRIPTION: This snippet defines a custom icon for a cross (xmark), represented as an SVG element from Font Awesome. It's essential for interactive elements where a close action is needed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-cross\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! xmark (solid): Font Awesome Pro 6.4.0 --><path d=\"M12.688 11.313a.964.964 0 0 1 0 1.406A.97.97 0 0 1 12 13a.99.99 0 0 1-.719-.281L8 9.438l-3.313 3.28A.97.97 0 0 1 4 13a.99.99 0 0 1-.719-.281.964.964 0 0 1 0-1.406L6.562 8l-3.28-3.281a.964.964 0 0 1 0-1.407.964.964 0 0 1 1.405 0L8 6.595l3.281-3.282a.964.964 0 0 1 1.406 0 .964.964 0 0 1 0 1.407L9.408 8.03l3.28 3.281Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Thumbtack Icon SVG Definition\nDESCRIPTION: Solid thumbtack icon from Font Awesome Pro 6.4.0, used for pinning functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_81\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-thumbtack\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path d=\"M3.313 1.313c0-.499.41-.938.937-.938h7.5c.498 0 .938.44.938.938 0 .527-.44.937-.938.937h-.879l.322 4.365a4.951 4.951 0 0 1 2.344 2.754l.03.088a.969.969 0 0 1-.147.85.843.843 0 0 1-.732.38H3.312c-.322 0-.585-.117-.761-.38a.969.969 0 0 1-.147-.85l.03-.088a4.951 4.951 0 0 1 2.343-2.754L5.1 2.25h-.85a.926.926 0 0 1-.938-.938Zm5.624 10.312v2.813c0 .527-.439.937-.937.937a.926.926 0 0 1-.938-.938v-2.812h1.875Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Configuration block for generating local table of contents with depth level 1 in markdown documentation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.6.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Empty Heading CSS Styles for Accessibility\nDESCRIPTION: CSS rules to hide empty heading tags (h1-h6) to improve accessibility by preventing empty headings from being rendered in the document structure\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/accessibility_considerations.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nh1:empty,\nh2:empty,\nh3:empty,\nh4:empty,\nh5:empty,\nh6:empty {\n    display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for bold in Wagtail Admin\nDESCRIPTION: SVG definition for the 'bold' icon based on Font Awesome Pro's bold solid icon. This icon represents the bold text formatting option in rich text editors.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-bold\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! bold (solid): Font Awesome Pro 6.4.0 --><path d=\"M12.031 7.594A3.962 3.962 0 0 0 13 5c0-2.188-1.813-4-4-4l-6 .031c-.563 0-1 .438-1 1 0 .531.438 1 1 1h.5v10H3c-.563 0-1 .438-1 1 0 .531.438 1 1 1h7c2.188 0 4-1.812 4-4 0-1.469-.813-2.75-1.969-3.437ZM5.5 3.03H9c1.094 0 2 .875 2 2 0 1.094-.906 2-2 2H5.5v-4ZM10 13H5.5V9H10c1.094 0 2 .906 2 2 0 1.063-.906 2-2 2Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Renditions\nDESCRIPTION: Shows how to efficiently generate multiple renditions of an image at once using get_renditions() method.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/renditions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimage.get_renditions('width-600', 'height-400', 'fill-300x186|jpegquality-60')\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"width-600\": <Rendition: Rendition object (7)>,\n    \"height-400\": <Rendition: Rendition object (8)>,\n    \"fill-300x186|jpegquality-60\": <Rendition: Rendition object (9)>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: desktop\nDESCRIPTION: This snippet defines a desktop icon, represented as an SVG element from Font Awesome. It symbolizes desktop-related features or functionalities in the Wagtail user interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-desktop\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! desktop (solid): Font Awesome Pro 6.4.0 --><path d=\"M14.563.75H1.437C.7.75.125 1.352.125 2.063v8.75c0 .738.574 1.312 1.313 1.312h5.25l-.438 1.313H4.281c-.383 0-.656.3-.656.656 0 .383.273.656.656.656h7.438a.648.648 0 0 0 .656-.656c0-.356-.3-.656-.656-.656H9.75l-.438-1.313h5.25c.711 0 1.313-.574 1.313-1.313v-8.75A1.33 1.33 0 0 0 14.562.75Zm-.438 7.875H1.875V2.5h12.25v6.125Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Configuration block for generating local table of contents with depth parameter set to 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Legacy RichText\nDESCRIPTION: Shows the required configuration in Django's INSTALLED_APPS setting to enable legacy rich text formatting. The legacy richtext module must be placed before the main wagtail app.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/legacy_richtext.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    \"wagtail.contrib.legacy.richtext\",\n    \"wagtail\",\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents with a depth of 1 for the release notes document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip Implementation\nDESCRIPTION: Converting from Bootstrap tooltip widget to new data attributes syntax\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span data-wagtail-tooltip=\"Tooltip content here\">Label</span>\n```\n\nLANGUAGE: html\nCODE:\n```\n<span data-controller=\"w-tooltip\" data-w-tooltip-content-value=\"Tooltip content here\">Label</span>\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version\nDESCRIPTION: Commands to verify Python version installation across different operating systems\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython --version\n# Or:\npython3 --version\n# **On Windows** (cmd.exe, with the Python Launcher for Windows):\npy --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Wagtail Documentation\nDESCRIPTION: This robots.txt file sets rules for web crawlers accessing the Wagtail documentation site. It disallows crawling of PDF files in any subdirectory and specifies the location of the sitemap.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n\nDisallow: /*/pdf/\n\nSitemap: https://docs.wagtail.org/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Disabling Shared Password Option for Pages in Wagtail CMS\nDESCRIPTION: Configuration to disable the shared password option for private pages in Wagtail CMS by setting the WAGTAIL_PRIVATE_PAGE_OPTIONS setting in your Django settings file.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAIL_PRIVATE_PAGE_OPTIONS = {\"SHARED_PASSWORD\": False}\n```\n\n----------------------------------------\n\nTITLE: Defining Success Icon SVG in HTML for Wagtail Admin\nDESCRIPTION: SVG definition for the 'success' icon used in the Wagtail admin interface. It is based on the Font Awesome Pro 6.4.0 solid circle-check icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_80\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-success\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-check (solid): Font Awesome Pro 6.4.0 --><path d=\"M0 8c0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8 0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8Zm11.594-1.375a.85.85 0 0 0 0-1.219.85.85 0 0 0-1.219 0L7 8.781 5.594 7.406a.85.85 0 0 0-1.219 0 .85.85 0 0 0 0 1.219l2 2a.849.849 0 0 0 1.219 0l4-4Z\"></path></svg> </svg>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth level 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'radio-full' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'radio-full' icon used in Wagtail admin interface, sourced from Font Awesome Pro 6.4.0's 'circle (solid)' icon. The path defines a filled circle with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_69\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-radio-full\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--! circle (solid): Font Awesome Pro 6.4.0 --><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for calendar in Wagtail Admin\nDESCRIPTION: SVG definition for the 'calendar' icon based on Font Awesome Pro's calendar solid icon. This icon represents a calendar for date selection.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_9\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-calendar\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! calendar (solid): Font Awesome Pro 6.4.0 --><path d=\"M4 1c0-.531.438-1 1-1 .531 0 1 .469 1 1v1h4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1v1h1.5c.813 0 1.5.688 1.5 1.5V5H1V3.5A1.5 1.5 0 0 1 2.5 2H4V1Zm11 13.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.48 1.48 0 0 1 1 14.5V6h14v8.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'placeholder' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'placeholder' icon used in Wagtail admin interface, sourced from Font Awesome Pro 6.4.0's 'circle-chevron-down (solid)' icon. The path defines a circular arrow shape with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_65\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-placeholder\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-chevron-down (solid): Font Awesome Pro 6.4.0 --><path d=\"M8 0C3.562 0 0 3.594 0 8c0 4.438 3.563 8 8 8 4.406 0 8-3.563 8-8 0-4.406-3.594-8-8-8Zm4.188 7.719-3.5 3.5A.97.97 0 0 1 8 11.5a.99.99 0 0 1-.719-.281l-3.5-3.5a.964.964 0 0 1 0-1.407.964.964 0 0 1 1.406 0L8 9.095l2.781-2.781a.964.964 0 0 1 1.406 0 .964.964 0 0 1 0 1.406Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Wagtail Image Documentation in Markdown\nDESCRIPTION: This code snippet creates a table of contents using Markdown syntax, specifically for Sphinx documentation. It lists various image-related topics in Wagtail, with a maximum depth of 2 levels.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nrenditions\nanimated_gifs\nimage_file_formats\ncustom_image_model\nchanging_rich_text_representation\nfeature_detection\nimage_serve_view\nfocal_points\ntitle_generation_on_upload\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Grip Icon Definition (Custom)\nDESCRIPTION: SVG markup for a custom grip icon. Contains six circular grip points arranged in two columns. Located at wagtailadmin/icons/grip.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_50\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-grip\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M5.346 4.52a1.435 1.435 0 1 0 0-2.872 1.435 1.435 0 0 0 0 2.871ZM5.346 9.433a1.435 1.435 0 1 0 0-2.87 1.435 1.435 0 0 0 0 2.87ZM5.346 14.351a1.435 1.435 0 1 0 0-2.87 1.435 1.435 0 0 0 0 2.87ZM10.654 4.52a1.435 1.435 0 1 0 0-2.872 1.435 1.435 0 0 0 0 2.871ZM10.654 9.433a1.435 1.435 0 1 0 0-2.87 1.435 1.435 0 0 0 0 2.87ZM10.654 14.351a1.435 1.435 0 1 0 0-2.87 1.435 1.435 0 0 0 0 2.87Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Replacing Wagtail Admin Favicon\nDESCRIPTION: Template code to customize the favicon displayed in the admin interface by extending admin_base.html and overriding the branding_favicon block.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/admin_templates.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"wagtailadmin/admin_base.html\" %}\n{% load static %}\n\n{% block branding_favicon %}\n    <link rel=\"shortcut icon\" href=\"{% static 'images/favicon.ico' %}\" />\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing draft SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a custom draft document icon for the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_39\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-draft\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M2 2c0-1.094.875-2 2-2h5.156c.532 0 1.032.219 1.407.594l2.843 2.844c.375.374.594.874.594 1.406V14c0 1.125-.906 2-2 2H4c-1.125 0-2-.875-2-2V2Zm10.5 12V5H10c-.562 0-1-.438-1-1V1.5H4c-.281 0-.5.25-.5.5v12c0 .281.219.5.5.5h8c.25 0 .5-.219.5-.5Z\"></path><rect width=\"5.458\" height=\"1\" x=\"3.846\" y=\"5.689\" rx=\".5\" transform=\"rotate(-45 3.846 5.69)\"></rect><rect width=\"6.828\" height=\"1\" x=\"3.846\" y=\"9.689\" rx=\".5\" transform=\"rotate(-45 3.846 9.69)\"></rect><rect width=\"10.982\" height=\"1\" x=\"3.83\" y=\"13.705\" rx=\".5\" transform=\"rotate(-45 3.83 13.705)\"></rect><rect width=\"5.192\" height=\"1\" x=\"7.908\" y=\"13.627\" rx=\".5\" transform=\"rotate(-45 7.908 13.627)\"></rect></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Cache with Distribution IDs (Deprecated)\nDESCRIPTION: Example of the deprecated way to configure CloudFront frontend cache with multiple distribution IDs using a dictionary approach in WAGTAILFRONTENDCACHE settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n    'cloudfront': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudfrontBackend',\n        'DISTRIBUTION_ID': {\n            'www.wagtail.org': 'your-distribution-id',\n            'www.madewithwagtail.org': 'other-distribution-id',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing expand-right SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a custom expand-right icon for the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_41\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-expand-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 17\"><!--! Custom icon --><rect width=\"2\" height=\"12\" x=\".5\" y=\"2.5\" rx=\"1\"></rect><path d=\"m15.934 9.209-4.063 4.063a.788.788 0 0 1-.559.228.805.805 0 0 1-.583-.229.783.783 0 0 1 0-1.142l2.666-2.691h-7.77a.802.802 0 0 1-.813-.813c0-.432.356-.813.813-.813h7.77l-2.666-2.666a.783.783 0 0 1 0-1.142.783.783 0 0 1 1.142 0l4.063 4.062c.33.305.33.838 0 1.143Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth level 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Windows\nDESCRIPTION: Commands for creating and activating a virtual environment in Windows\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\npy -m venv mysite\\env\n```\n\nLANGUAGE: doscon\nCODE:\n```\nmysite\\env\\Scripts\\activate.bat\n\n# if mysite\\env\\Scripts\\activate.bat doesn't work, run:\n\nmysite\\env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: Markdown directive for generating a local table of contents with depth parameter set to 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Rebuilding References Index\nDESCRIPTION: Command to populate the cross-references tracking table for usage reports.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py rebuild_references_index\n```\n\nLANGUAGE: sh\nCODE:\n```\npython manage.py rebuild_references_index --verbosity 0\n```\n\n----------------------------------------\n\nTITLE: Defining Wagtail Root Color Variables in CSS\nDESCRIPTION: Sets up the core color variables for Wagtail's theming system using CSS custom properties. Includes primary and secondary colors with HSL component breakdowns for flexible color manipulation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_colors_tables.txt#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --w-color-primary: #2E1F5E;\n  /* Any valid CSS format is supported. */\n  --w-color-primary-200: hsl(253.8 50% 20.4%);\n  /* Set each HSL component separately to change all hues at once. */\n  --w-color-secondary-hue: 180.5;\n  --w-color-secondary-saturation: 100%;\n  --w-color-secondary-lightness: 24.7%;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Configuration block for generating a local table of contents with depth 1 in markdown documentation\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.6.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: SVG H6 Icon Definition (Custom)\nDESCRIPTION: Custom SVG icon for an H6 heading element. Includes a stylized 'H' and '6' character. Located at wagtailadmin/icons/h6.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_57\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-h6\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8.835 11.5a.63.63 0 0 1-.625.625H6.335a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.313V8.062H2.273v2.813h.312c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625H.71a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.313v-6.25H.71A.617.617 0 0 1 .085 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.312v2.188h4.375V4.624h-.313A.617.617 0 0 1 5.71 4a.63.63 0 0 1 .625-.625H8.21c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.312v6.25h.312c.332 0 .625.293.625.625Zm3.674.172c1.73 0 2.987-1.144 2.987-2.75 0-1.456-1.026-2.525-2.525-2.525-1.047 0-1.81.527-2.11 1.247h-.033c-.005-1.698.553-2.788 1.681-2.788.64 0 1.101.322 1.284.875h1.6c-.214-1.278-1.374-2.159-2.878-2.159-2.014 0-3.24 1.547-3.24 4.115 0 2.674 1.381 3.985 3.234 3.985Zm-.021-1.29A1.404 1.404 0 0 1 11.07 8.96c0-.79.612-1.364 1.434-1.364.81 0 1.412.58 1.412 1.397-.005.779-.633 1.39-1.428 1.39Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents for the document, with a depth of 1. It's used to create an easy-to-navigate structure for the release notes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents for the document with a depth of 1. It's used to create an easily navigable structure for the release notes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for bars in Wagtail Admin\nDESCRIPTION: SVG definition for the 'bars' icon based on Font Awesome Pro's bars solid icon. This icon represents a hamburger menu or navigation bars.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-bars\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! bars (solid): Font Awesome Pro 6.4.0 --><path d=\"M1 3c0-.531.438-1 1-1h12c.531 0 1 .469 1 1 0 .563-.469 1-1 1H2c-.563 0-1-.438-1-1Zm0 5c0-.531.438-1 1-1h12c.531 0 1 .469 1 1 0 .563-.469 1-1 1H2c-.563 0-1-.438-1-1Zm13 6H2c-.563 0-1-.438-1-1 0-.531.438-1 1-1h12c.531 0 1 .469 1 1 0 .563-.469 1-1 1Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Icon SVG in HTML for Wagtail Admin\nDESCRIPTION: SVG definition for the 'spinner' icon used in the Wagtail admin interface. It is based on the Font Awesome Pro 6.4.0 solid spinner icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_78\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-spinner\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! spinner (solid): Font Awesome Pro 6.4.0 --><path d=\"M9.5 1.5A1.5 1.5 0 0 1 8 3a1.48 1.48 0 0 1-1.5-1.5A1.5 1.5 0 0 1 8 0c.813 0 1.5.688 1.5 1.5Zm0 13A1.5 1.5 0 0 1 8 16a1.48 1.48 0 0 1-1.5-1.5A1.5 1.5 0 0 1 8 13c.813 0 1.5.688 1.5 1.5ZM0 8a1.5 1.5 0 0 1 1.5-1.5C2.313 6.5 3 7.188 3 8a1.5 1.5 0 0 1-1.5 1.5A1.48 1.48 0 0 1 0 8Zm16 0a1.5 1.5 0 0 1-1.5 1.5A1.48 1.48 0 0 1 13 8a1.5 1.5 0 0 1 1.5-1.5c.813 0 1.5.688 1.5 1.5ZM2.312 13.656c-.562-.562-.562-1.531 0-2.094.594-.593 1.563-.593 2.126 0a1.453 1.453 0 0 1 0 2.094c-.563.594-1.532.594-2.125 0ZM4.438 4.47c-.563.593-1.532.593-2.125 0-.563-.563-.563-1.532 0-2.125.593-.563 1.562-.563 2.124 0 .594.594.594 1.562 0 2.125Zm7.093 7.093c.563-.593 1.531-.593 2.125 0 .563.563.563 1.532 0 2.094-.594.594-1.562.594-2.125 0a1.453 1.453 0 0 1 0-2.094Z\"></path></svg> </svg>\n```\n\n----------------------------------------\n\nTITLE: Wagtail Customization TOC Structure\nDESCRIPTION: Table of contents structure using toctree directive that organizes documentation sections for customizing Wagtail CMS features.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/customization/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n---\nmaxdepth: 2\n---\npage_editing_interface\ncustom_page_listings\nadmin_templates\ncustom_user_models\nstreamfield_blocks\n```\n\n----------------------------------------\n\nTITLE: Implementing folder-open-inverse SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of an open folder icon with inverse styling for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_45\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-folder-open-inverse\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 19 16\"><!--! folder-open (solid): Font Awesome Pro 6.4.0 --><path d=\"M4.594 6H15V4.5c0-.813-.688-1.5-1.5-1.5h-5l-2-2h-5A1.5 1.5 0 0 0 0 2.5v10.281l2.813-5.656A2.003 2.003 0 0 1 4.593 6Zm12.375 1H4.594a.962.962 0 0 0-.875.563L0 15h13.969c.375 0 .719-.188.875-.531l3-6A.986.986 0 0 0 16.969 7Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Documentation\nDESCRIPTION: Imports the essential Storybook addon-docs components (Meta, Story, Canvas) needed to create documentation pages in Storybook.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/client/storybook/Welcome.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Canvas } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Customizing Wagtail User Bar\nDESCRIPTION: Example showing how to add a custom link item to the Wagtail user bar using the construct_wagtail_userbar hook. Creates a new menu item class with custom HTML rendering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail import hooks\n\nclass UserbarPuppyLinkItem:\n    def render(self, request):\n        return '<li><a href=\"http://cuteoverload.com/tag/puppehs/\" ' \\\n            + 'target=\"_parent\" role=\"menuitem\" class=\"action\">Puppies!</a></li>'\n\n@hooks.register('construct_wagtail_userbar')\ndef add_puppy_link_item(request, items, page):\n    return items.append( UserbarPuppyLinkItem() )\n```\n\n----------------------------------------\n\nTITLE: Template Content Escaping - New Pattern\nDESCRIPTION: Updated approach using HTML template element for widget content\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"id_{{ formset.prefix }}-EMPTY_FORM_TEMPLATE\">\n    <div>Widget template content</div>\n    <script src=\"/js/my-widget.js\"></script>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: decimal\nDESCRIPTION: This snippet defines a decimal icon, represented as an SVG element. The icon structure supports numeric input fields in the Wagtail admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-decimal\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M3.5 2.5C1.553 2.5 0 4.088 0 6.08v2.84c0 1.97 1.553 3.58 3.5 3.58 1.925 0 3.5-1.61 3.5-3.58V6.058C7 4.088 5.425 2.5 3.5 2.5Zm2.1 6.42c0 1.186-.962 2.148-2.1 2.148-1.16 0-2.1-.962-2.1-2.147V6.057c0-1.163.94-2.148 2.1-2.148 1.138 0 2.1.985 2.1 2.148v2.864ZM12.5 2.5C10.553 2.5 9 4.088 9 6.08v2.84c0 1.97 1.553 3.58 3.5 3.58 1.925 0 3.5-1.61 3.5-3.58V6.058C16 4.088 14.425 2.5 12.5 2.5Zm2.1 6.42c0 1.186-.963 2.148-2.1 2.148-1.16 0-2.1-.962-2.1-2.147V6.057c0-1.163.94-2.148 2.1-2.148 1.137 0 2.1.985 2.1 2.148v2.864Z\"></path><circle cx=\"8\" cy=\"12.5\" r=\"1\"></circle></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Implementing StreamField with DocumentChooserBlock\nDESCRIPTION: Code to implement a StreamField with a DocumentChooserBlock, allowing for flexible document selection and embedding within page content.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom wagtail.fields import StreamField\nfrom wagtail.documents.blocks import DocumentChooserBlock\n\n\nclass BlogPage(Page):\n    # ... other fields\n\n    documents = StreamField([\n            ('document', DocumentChooserBlock())\n        ],\n        null=True,\n        blank=True,\n        use_json_field=True,\n    )\n\n    panels = [\n        # ... other panels\n        FieldPanel(\"documents\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the release notes, using local depth of 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing download SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a download icon for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_38\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-download\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! download (solid): Font Awesome Pro 6.4.0 --><path d=\"M15 11h-4.188l-1.406 1.438A1.959 1.959 0 0 1 8 13c-.563 0-1.063-.188-1.438-.563L5.157 11H1c-.563 0-1 .469-1 1v3c0 .563.438 1 1 1h14c.531 0 1-.438 1-1v-3c0-.531-.469-1-1-1Zm-1.5 3.25a.722.722 0 0 1-.75-.75.74.74 0 0 1 .75-.75.76.76 0 0 1 .75.75.74.74 0 0 1-.75.75Zm-6.219-2.531A.99.99 0 0 0 8 12c.25 0 .5-.094.688-.281l4-4a.964.964 0 0 0 0-1.407.964.964 0 0 0-1.407 0L9 8.595V1c0-.531-.469-1-1-1-.563 0-1 .469-1 1v7.594L4.687 6.313a.964.964 0 0 0-1.406 0 .964.964 0 0 0 0 1.406l4 4Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents for the document with a depth of 1. It uses a special markdown syntax for content generation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents with a depth of 1 for the Markdown document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.9.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Contents Section in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth of 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.8.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'rotate' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'rotate' icon used in Wagtail admin interface, sourced from Font Awesome Pro 6.4.0's 'rotate (solid)' icon. The path defines rotating arrows with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_73\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-rotate\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! rotate (solid): Font Awesome Pro 6.4.0 --><path d=\"m14.031 1.25-1.5 1.531C11.312 1.687 9.72 1 8 1a6.781 6.781 0 0 0-6.469 4.719c-.156.531.125 1.093.657 1.25.53.156 1.093-.125 1.25-.657C4.061 4.345 5.905 3 8 3c1.156 0 2.281.469 3.125 1.188L9.719 5.563c-.5.53-.156 1.437.594 1.437h4.593c.313 0 .594-.25.594-.594V1.875c0-.781-.938-1.156-1.469-.625Zm-.25 7.813c-.531-.157-1.094.124-1.25.656C11.906 11.688 10.062 13 8 13c-1.188 0-2.281-.438-3.156-1.156l1.406-1.406c.5-.5.156-1.407-.594-1.438H1.063a.617.617 0 0 0-.563.625v4.531c0 .781.906 1.156 1.438.625l1.5-1.531A6.776 6.776 0 0 0 7.968 15a6.743 6.743 0 0 0 6.438-4.688.955.955 0 0 0-.625-1.25Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Markdown Contents Configuration Block\nDESCRIPTION: YAML-style configuration block for generating local table of contents with depth limit of 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.5.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'search' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'search' icon used in Wagtail admin interface, based on Font Awesome Pro 6.4.0's 'magnifying-glass (solid)' icon. The path defines a magnifying glass with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_74\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-search\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 18 18\"><!--! magnifying-glass (solid): Font Awesome Pro 6.4.0 --><path d=\"m16.625 14.875-3.75-3.75a6.489 6.489 0 0 0 1.063-4.5c-.407-2.875-2.75-5.188-5.594-5.563C4.094.532.5 4.126 1.03 8.375c.375 2.844 2.688 5.188 5.563 5.594 1.687.219 3.25-.219 4.531-1.063l3.719 3.75c.5.469 1.281.469 1.781 0 .469-.5.469-1.281 0-1.781ZM3.469 7.5c0-2.188 1.781-4 4-4 2.187 0 4 1.813 4 4 0 2.219-1.813 4-4 4-2.219 0-4-1.781-4-4Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for arrow-down in Wagtail Admin\nDESCRIPTION: SVG definition for the custom 'arrow-down' icon used in the Wagtail admin interface. This icon represents a downward pointing arrow.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-arrow-down\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8 11.5a.743.743 0 0 1-.54-.21L3.71 7.54a.723.723 0 0 1 0-1.056.723.723 0 0 1 1.056 0L8 9.695l3.21-3.21a.723.723 0 0 1 1.056 0 .723.723 0 0 1 0 1.054l-3.75 3.75A.727.727 0 0 1 8 11.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: SVG H5 Icon Definition (Custom)\nDESCRIPTION: Custom SVG icon for an H5 heading element. Includes a stylized 'H' and '5' character. Located at wagtailadmin/icons/h5.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_56\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-h5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8.938 11.5a.63.63 0 0 1-.626.625H6.438a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.312V8.062H2.375v2.813h.313c.332 0 .624.293.624.625a.63.63 0 0 1-.624.625H.812a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.313v-6.25H.812A.617.617 0 0 1 .188 4a.63.63 0 0 1 .625-.625h1.875c.333 0 .626.293.626.625a.63.63 0 0 1-.626.625h-.312v2.188H6.75V4.624h-.313A.617.617 0 0 1 5.813 4a.63.63 0 0 1 .625-.625h1.875c.333 0 .626.293.626.625a.63.63 0 0 1-.626.625H8v6.25h.313c.332 0 .624.293.624.625Zm3.523.172c1.778 0 2.997-1.112 2.997-2.75 0-1.477-1.058-2.54-2.535-2.54-.784 0-1.424.316-1.746.837h-.032l.188-2.18h3.658v-1.29h-4.947L9.689 8.3h1.413c.263-.467.747-.757 1.37-.757.848 0 1.44.585 1.44 1.417 0 .844-.592 1.43-1.446 1.43-.746 0-1.321-.441-1.412-1.113H9.555c.043 1.408 1.246 2.396 2.906 2.396Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Referencing get_latest_revision_as_page Method in Wagtail\nDESCRIPTION: This snippet references the `get_latest_revision_as_page` method used by the Wagtail page editor to retrieve the current page revision for editing. The behavior has changed to only retrieve data from revision history for pages with unpublished changes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_latest_revision_as_page\n```\n\n----------------------------------------\n\nTITLE: Setting Local Depth Configuration in YAML\nDESCRIPTION: This YAML configuration sets the local depth for a specific context within the Wagtail project to 1, enabling modular organization of content. It’s an essential part of project setup in a YAML-based configuration structure, typically needed for local development and testing. The only parameter defined here is 'depth', which indicates the hierarchy level to utilize.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.0.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Fireworks Animation in Wagtail Admin (JavaScript)\nDESCRIPTION: This JavaScript code initializes a fireworks animation in the Wagtail admin interface. It creates a container for the animation and sets up event listeners.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/hooks.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('DOMContentLoaded', (event) => {\n    var container = document.createElement('div');\n    container.style.cssText =\n        'position: fixed; width: 100%; height: 100%; z-index: 100; top: 0; left: 0; pointer-events: none;';\n    container.id = 'fireworks';\n    document.getElementById('main').prepend(container);\n    var options = {\n        acceleration: 1.2,\n        autoresize: true,\n        mouse: { click: true, max: 3 },\n    };\n    var fireworks = new Fireworks(\n        document.getElementById('fireworks'),\n        options,\n    );\n    fireworks.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Contents Section in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth level 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.6.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: comment-add\nDESCRIPTION: This snippet defines a custom icon for adding comments, represented as an SVG element. It specifies an icon ID, view box dimensions, and the path for the shape of the icon, enhancing the user interface in Wagtail's admin panel.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-comment-add\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8 1.813C3.84 1.813.5 4.566.5 7.905c0 1.465.615 2.784 1.64 3.838C1.79 13.238.56 14.527.56 14.557c-.088.058-.088.175-.059.263.03.088.117.117.234.117 1.934 0 3.37-.908 4.102-1.494A9.199 9.199 0 0 0 8 14c4.131 0 7.47-2.725 7.47-6.094 0-3.34-3.339-6.093-7.47-6.093Z\"></path><path fill=\"#fff\" d=\"M10.571 7.357H8.643V5.43A.44.44 0 0 0 8.214 5h-.428c-.241 0-.429.2-.429.429v1.928H5.43c-.242 0-.429.201-.429.429v.428c0 .241.188.429.429.429h1.928v1.928c0 .242.188.429.429.429h.428a.432.432 0 0 0 .429-.429V8.643h1.928A.432.432 0 0 0 11 8.214v-.428a.44.44 0 0 0-.429-.429Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Template Content Escaping - Old Pattern\nDESCRIPTION: Deprecated approach using escapescript template tag for HTML template content\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% load wagtailadmin_tags %}\n<script type=\"text/django-form-template\" id=\"id_{{ formset.prefix }}-EMPTY_FORM_TEMPLATE\">\n    {% escapescript %}\n        <div>Widget template content</div>\n        <script src=\"/js/my-widget.js\"></script>\n    {% endescapescript %}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Circle Plus Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 circle-plus (solid) icon implementation for Wagtail admin\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/circle-plus.svg\n```\n\n----------------------------------------\n\nTITLE: Picture Template Tag Usage Example\nDESCRIPTION: Code example showing usage of the {% picture ... as ... %} template tag in Wagtail templates.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n{% picture ... as ... %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth of 1 for the release notes document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Contents Block Configuration\nDESCRIPTION: Configuration block for local contents with depth parameter\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontents\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings on Windows\nDESCRIPTION: Git configuration command for handling line endings in Windows development environment.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_4\n\nLANGUAGE: doscon\nCODE:\n```\ngit config --global core.autocrlf true\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Configuration in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth level 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing folder SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a standard folder icon for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_46\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-folder\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 16\"><!--! folder (regular): Font Awesome Pro 6.4.0 --><path d=\"M14.969 3H9.594L8.063 1.594A1.988 1.988 0 0 0 6.655 1H2.97c-1.125 0-2 .906-2 2v10c0 1.125.875 2 2 2h12c1.094 0 2-.875 2-2V5c0-1.094-.875-2-2-2Zm.5 10c0 .281-.25.5-.5.5h-12a.494.494 0 0 1-.5-.5V3c0-.25.219-.5.5-.5h3.656c.125 0 .25.063.344.156l2 1.844h6c.25 0 .5.25.5.5v8Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Markdown Contents Configuration\nDESCRIPTION: Configuration block for generating local table of contents with specified depth\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.16.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\n  depth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'radio-empty' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'radio-empty' icon used in Wagtail admin interface, based on Font Awesome Pro 6.4.0's 'circle (regular)' icon. The path defines an empty circle with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_68\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-radio-empty\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle (regular): Font Awesome Pro 6.4.0 --><path d=\"M16 8c0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8 0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8ZM8 1.5C4.406 1.5 1.5 4.438 1.5 8c0 3.594 2.906 6.5 6.5 6.5 3.563 0 6.5-2.906 6.5-6.5 0-3.563-2.938-6.5-6.5-6.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV for Python via pip\nDESCRIPTION: Command to install opencv-python package using pip. This package includes both OpenCV binaries and Python interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install opencv-python\n```\n\n----------------------------------------\n\nTITLE: SVG H4 Icon Definition (Custom)\nDESCRIPTION: Custom SVG icon for an H4 heading element. Includes a stylized 'H' and '4' character. Located at wagtailadmin/icons/h4.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_55\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-h4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8.814 11.5a.63.63 0 0 1-.625.625H6.314a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.312V8.062H2.251v2.813h.313c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625H.689a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.312v-6.25H.69A.617.617 0 0 1 .064 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.313v2.188h4.375V4.624h-.312A.617.617 0 0 1 5.689 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.313v6.25h.313c.332 0 .625.293.625.625Zm4.243 0H14.6v-1.423h1.02V8.782H14.6V3.75H12.31C10.72 6.086 9.877 7.44 9.2 8.723v1.354h3.857V11.5Zm-2.444-2.718c.618-1.155 1.322-2.256 2.444-3.872h.032v3.915h-2.476v-.043Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Wagtail 0.8.1 Release Notes Header - RST\nDESCRIPTION: ReStructuredText markup for the release notes header and table of contents structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.8.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nWagtail 0.8.1 release notes\n===========================\n\n*November 5, 2014*\n\n.. contents::\n    :local:\n    :depth: 1\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents for the release notes, with a depth of 1. It uses a Markdown extension to create an automatically generated table of contents.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.5.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Security Policy Warning in Markdown\nDESCRIPTION: A warning message in Markdown format to ensure users are viewing the latest security policy.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/security.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{warning}\nEnsure you are viewing our [latest security policy](https://docs.wagtail.org/en/latest/contributing/security.html).\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Shared Password Option for Collections in Wagtail CMS\nDESCRIPTION: Configuration to disable the shared password option for collections (which affects document access) in Wagtail CMS using the WAGTAILDOCS_PRIVATE_COLLECTION_OPTIONS setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/privacy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILDOCS_PRIVATE_COLLECTION_OPTIONS = {\"SHARED_PASSWORD\": False}\n```\n\n----------------------------------------\n\nTITLE: Old StreamField Block Initialization (HTML)\nDESCRIPTION: Deprecated approach for initializing a StreamField block using the global window.initBlockWidget function with an inline script.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div\n    id=\"{id}\"\n    data-block=\"{block_json}\"\n    data-value=\"{value_json}\"\n    data-error=\"{error_json}\"\n></div>\n<script>\n    initBlockWidget('{id}');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Welcome Page with Meta Component\nDESCRIPTION: Uses the Meta component from Storybook to configure this file as the 'Welcome' page in the Storybook documentation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/client/storybook/Welcome.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Welcome\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring StreamField Search Index in Python\nDESCRIPTION: Example showing how to control whether a StreamField block is indexed for searching using the search_index option\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyStreamField(blocks.StreamField):\n    search_index = False  # Controls whether block is indexed for searching\n```\n\n----------------------------------------\n\nTITLE: Configuring Contents Block in Markdown\nDESCRIPTION: Markdown configuration block for generating local table of contents with specified depth parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.8.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'plus-inverse' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'plus-inverse' icon used in Wagtail admin interface, based on Font Awesome Pro 6.4.0's 'circle-plus (solid)' icon. The path defines a circular plus symbol with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_66\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-plus-inverse\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-plus (solid): Font Awesome Pro 6.4.0 --><path d=\"M0 8c0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8 0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8Zm8 3.5a.74.74 0 0 0 .75-.75v-2h2A.74.74 0 0 0 11.5 8a.76.76 0 0 0-.75-.75h-2v-2A.76.76 0 0 0 8 4.5a.74.74 0 0 0-.75.75v2h-2A.74.74 0 0 0 4.5 8c0 .438.313.75.75.75h2v2c0 .438.313.75.75.75Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Markdown Contents Configuration Block\nDESCRIPTION: Configuration block for generating local table of contents with depth of 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Note Block About Issue Claims in Markdown\nDESCRIPTION: A note directive advising new contributors against claiming issues before completing the initial preparation steps, emphasizing the abundance of contribution opportunities.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nAvoid 'claiming' any issues before completing Steps 0-6. This helps you not over-promise what you can contribute and helps the community support you when you are actually ready to contribute.\nDo not worry about issues 'running out' - software development is an endless fractal, there is always more to help with.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Manual Header Search Implementation\nDESCRIPTION: Converting manual header search implementation from global JavaScript to data attributes\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    window.headerSearch = {\n        url: '{{ my_async_results_url }}',\n        termInput: '#id_q',\n        targetOutput: '#some-results',\n    };\n</script>\n<form role=\"search\">\n    <input type=\"text\" name=\"q\" id=\"id_q\" />\n</form>\n<div id=\"some-results\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<form\n    role=\"search\"\n    data-controller=\"w-swap\"\n    data-action=\"change->w-swap#searchLazy input->w-swap#searchLazy\"\n    data-w-swap-src-value=\"{{ my_async_results_url }}\"\n    data-w-swap-target-value=\"#some-results\"\n>\n    <input type=\"text\" name=\"q\" id=\"id_q\" data-w-swap-target=\"input\" />\n</form>\n<div id=\"some-results\"></div>\n```\n\n----------------------------------------\n\nTITLE: Custom Crossed Thumbtack Icon SVG Definition\nDESCRIPTION: Custom icon showing a crossed-out thumbtack, likely used to represent unpinning functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_82\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-thumbtack-crossed\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M7.745.568A.944.944 0 0 0 6.464.91a.926.926 0 0 0 .343 1.28l.736.425L6.28 4.472l5.284 3.05.976-2.02.761.44a.944.944 0 0 0 1.28-.344.964.964 0 0 0-.342-1.28L7.745.568Zm3.412 10.014L3.835 6.355a4.907 4.907 0 0 0-2.16 1.094l-.07.061a.969.969 0 0 0-.298.81c.02.316.19.549.47.71l8.118 4.688c.254.146.541.176.825.036a.969.969 0 0 0 .552-.663l.018-.09a4.906 4.906 0 0 0-.133-2.419ZM4.773 15.09l1.406-2.436-1.624-.937-1.406 2.436a.925.925 0 0 0 .343 1.28.944.944 0 0 0 1.28-.343Z\" clip-rule=\"evenodd\"></path><path d=\"m2.822 3.55 11.52 6.652-.5.866-11.52-6.651z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Document Structure\nDESCRIPTION: This snippet defines the main heading and introductory text for the Wagtail documentation, including links to Python and Django.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nWelcome to Wagtail's documentation\n==================================\n\nWagtail is an open source CMS written in `Python <https://www.python.org/>`_ and built on the `Django web framework <https://www.djangoproject.com/>`_.\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Serving in Development\nDESCRIPTION: URL configuration for serving user-uploaded files during development\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/integrating_into_django.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: cut\nDESCRIPTION: This snippet defines a custom icon representing scissors, as an SVG from Font Awesome. This icon is used for cutting or removing elements within the Wagtail UI.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-cut\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! scissors (solid): Font Awesome Pro 6.4.0 --><path d=\"M12.375 1.625a2.245 2.245 0 0 1 3.219 0 .547.547 0 0 1 0 .781L6.75 11.25c.156.406.25.813.25 1.25C7 14.438 5.406 16 3.5 16A3.494 3.494 0 0 1 0 12.5C0 10.594 1.563 9 3.5 9c.438 0 .844.094 1.25.25L5.969 8 4.75 6.781A3.4 3.4 0 0 1 3.5 7 3.494 3.494 0 0 1 0 3.5C0 1.594 1.563 0 3.5 0 5.406 0 7 1.594 7 3.5c0 .469-.094.875-.25 1.281L7.969 6l4.406-4.375ZM5 3.5C5 2.687 4.312 2 3.5 2A1.5 1.5 0 0 0 2 3.5C2 4.344 2.656 5 3.5 5A1.5 1.5 0 0 0 5 3.5ZM3.5 14A1.5 1.5 0 0 0 5 12.5c0-.813-.688-1.5-1.5-1.5A1.5 1.5 0 0 0 2 12.5c0 .844.656 1.5 1.5 1.5Zm5.188-3.281 2-2 4.906 4.906a.547.547 0 0 1 0 .781 2.245 2.245 0 0 1-3.219 0L8.687 10.72Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Adding locked field to Page model in South migration (Python)\nDESCRIPTION: When updating existing South migrations for the new page locking feature, add this line to the 'wagtailcore.page' entry at the bottom of the migration file to include the new 'locked' field.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.7.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n```\n\n----------------------------------------\n\nTITLE: Displaying Security Reporting Note in Markdown\nDESCRIPTION: A note in Markdown format instructing users to report security issues only to a specific email address.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/security.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nPlease report security issues **only** to [security@wagtail.org](mailto:security@wagtail.org).\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for arrow-up in Wagtail Admin\nDESCRIPTION: SVG definition for the custom 'arrow-up' icon used in the Wagtail admin interface. This icon represents an upward pointing arrow.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_4\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-arrow-up\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M11.75 10.75a.743.743 0 0 1-.54-.21L8 7.327 4.766 10.54a.723.723 0 0 1-1.055 0 .723.723 0 0 1 0-1.055l3.75-3.75a.723.723 0 0 1 1.055 0l3.75 3.75a.723.723 0 0 1 0 1.055.727.727 0 0 1-.516.211Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Content Specification in Markdown\nDESCRIPTION: This code snippet sets up a content block for the markdown document, specifying the 'local' setting with a depth of 1. It is used to define the structure of the contents section in the release notes. There are no special dependencies for this setup.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.0.2.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Comment Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 comment-dots (solid) icon for comment functionality\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_24\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/comment.svg\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Label Examples in Markdown\nDESCRIPTION: This snippet demonstrates how to format GitHub labels as inline code within a Markdown list. It shows examples of specific labels used in the Wagtail project for issue classification.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/issue_tracking.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`type:Bug`](https://github.com/wagtail/wagtail/labels/type%3ABug)\n- [`status:Unconfirmed`](https://github.com/wagtail/wagtail/labels/status%3AUnconfirmed)\n```\n\n----------------------------------------\n\nTITLE: Markdown Warning Block\nDESCRIPTION: A warning message formatted in markdown that alerts users about the potential outdated nature of some tutorial links.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/third_party_tutorials.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{warning}\nThe following list is a collection of tutorials and development notes\nfrom third-party developers. Some of the older links may not apply to\nthe latest Wagtail versions.\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for breadcrumb-expand in Wagtail Admin\nDESCRIPTION: SVG definition for the custom 'breadcrumb-expand' icon used in the Wagtail admin interface. This icon represents expandable breadcrumb navigation with dots and an arrow.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_8\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-breadcrumb-expand\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><circle cx=\"1\" cy=\"8\" r=\"1\"></circle><circle cx=\"4\" cy=\"8\" r=\"1\"></circle><circle cx=\"7\" cy=\"8\" r=\"1\"></circle><path d=\"M11.132 12.872a.804.804 0 0 1-.584-.229.783.783 0 0 1 0-1.142l3.479-3.504-3.479-3.479a.783.783 0 0 1 0-1.142.783.783 0 0 1 1.143 0l4.062 4.062c.33.305.33.838 0 1.143l-4.062 4.062a.787.787 0 0 1-.559.229Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Picture Tag for Multiple Formats\nDESCRIPTION: Using the picture tag to generate multiple image formats with fallbacks\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/writing_templates.md#2025-04-21_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailimages_tags %}\n...\n\n{% picture page.photo format-{avif,webp,jpeg} width-400 %}\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'plus' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'plus' icon used in Wagtail admin interface, sourced from Font Awesome Pro 6.4.0's 'plus (solid)' icon. The path defines a plus symbol with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_67\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-plus\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! plus (solid): Font Awesome Pro 6.4.0 --><path d=\"M14.5 8c0 .563-.469 1.031-1 1.031H9v4.5c0 .531-.469.969-1 .969a.98.98 0 0 1-1-.969v-4.5H2.5c-.563 0-1-.469-1-1.031a.98.98 0 0 1 1-.969H7v-4.5C7 1.97 7.438 1.5 8 1.5c.531 0 1 .469 1 1.031v4.5h4.5c.531-.031 1 .438 1 .969Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the release notes document. It uses local depth setting to control the structure of the table.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: doc-empty-inverse\nDESCRIPTION: This snippet defines an icon for empty documents in an inverse style, represented as an SVG element from Font Awesome. This is useful for highlighting empty document states.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-doc-empty-inverse\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! file (solid): Font Awesome Pro 6.4.0 --><path d=\"M2 2c0-1.094.875-2 2-2h5v4c0 .563.438 1 1 1h4v9c0 1.125-.906 2-2 2H4c-1.125 0-2-.875-2-2V2Zm8 2V0l4 4h-4Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File Command for Console\nDESCRIPTION: Provides the console command to generate a migration file that adds new image focal point fields for the custom image model. This is necessary when applying updates in Wagtail 0.5.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/0.5.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./manage.py schemamigration myapp --auto add_image_focal_point_fields\n```\n\n----------------------------------------\n\nTITLE: Installing Rustface for Python\nDESCRIPTION: Commands to install wheel and rustface packages using pip. Rustface is a face detection library with prebuilt wheels for Linux and macOS.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/feature_detection.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install wheel\npip install rustface\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template Configuration\nDESCRIPTION: Configuration for using settings in Jinja2 templates with custom extensions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'extensions': [\n                'wagtail.contrib.settings.jinja2tags.settings',\n            ],\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Django Template Fragment - HTML\nDESCRIPTION: Template tags and filters used in Wagtail CMS templates, including the pageurl and slugurl tags for URL generation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\npageurl / slugurl\n```\n\n----------------------------------------\n\nTITLE: SVG Group Icon Definition (Font Awesome)\nDESCRIPTION: SVG markup for a user group icon derived from Font Awesome Pro 6.4.0. Illustrates a group of people silhouette. Located at wagtailadmin/icons/group.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_51\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-group\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! user-group (solid): Font Awesome Pro 6.4.0 --><path d=\"M5.656 7.813a3.131 3.131 0 0 0 3.125-3.125c0-1.71-1.416-3.125-3.125-3.125a3.131 3.131 0 0 0-3.125 3.125 3.115 3.115 0 0 0 3.125 3.125Zm1.221 1.171H4.41c-2.344 0-4.223 1.905-4.223 4.248 0 .464.366.83.83.83h9.252c.464 0 .855-.366.855-.83a4.251 4.251 0 0 0-4.248-4.248Zm5.005.391h-1.807a5 5 0 0 1 1.831 3.857c0 .318-.097.586-.244.83h3.37a.787.787 0 0 0 .78-.78c0-2.15-1.757-3.907-3.93-3.907Zm-1.148-1.563c1.49 0 2.735-1.22 2.735-2.734 0-1.49-1.245-2.734-2.735-2.734-.634 0-1.196.22-1.635.561.268.537.463 1.148.463 1.783 0 .878-.292 1.684-.78 2.319.488.513 1.171.806 1.952.806Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Contents Configuration in Markdown\nDESCRIPTION: Configuration block for generating a local table of contents with depth 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Collapse Up Icon SVG\nDESCRIPTION: Custom icon for collapsing content upward\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/collapse-up.svg\n```\n\n----------------------------------------\n\nTITLE: Accessing Focal Point Data in Wagtail Templates\nDESCRIPTION: Shows how to access and output focal point coordinates and dimensions in templates using the focal_point attribute of a rendition.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/images/focal_points.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailimages_tags %}\n\n{% image page.image width-800 as myrendition %}\n\n<img\n    src=\"{{ myrendition.url }}\"\n    alt=\"{{ myimage.title }}\"\n    {% if myrendition.focal_point %}\n        data-focus-x=\"{{ myrendition.focal_point.centroid.x }}\"\n        data-focus-y=\"{{ myrendition.focal_point.centroid.y }}\"\n        data-focus-width=\"{{ myrendition.focal_point.width }}\"\n        data-focus-height=\"{{ myrendition.focal_point.height }}\"\n    {% endif %}\n/>\n```\n\n----------------------------------------\n\nTITLE: SVG H2 Icon Definition (Custom)\nDESCRIPTION: Custom SVG icon for an H2 heading element. Includes a stylized 'H' and '2' character. Located at wagtailadmin/icons/h2.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_53\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-h2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M9.056 11.5a.63.63 0 0 1-.625.625H6.556a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.312V8.062H2.493v2.813h.313c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625H.93a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.312v-6.25H.931A.617.617 0 0 1 .306 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.313v2.188h4.375V4.624h-.312A.617.617 0 0 1 5.93 4a.63.63 0 0 1 .625-.625H8.43c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.313v6.25h.313c.332 0 .625.293.625.625Zm.456-5.393h1.504c0-.746.586-1.267 1.359-1.267.698 0 1.176.473 1.176 1.096 0 .537-.22.907-1.203 1.853l-2.744 2.6V11.5h5.634v-1.29h-3.513v-.031l1.627-1.558c1.311-1.251 1.778-1.837 1.778-2.788 0-1.289-1.095-2.255-2.755-2.255-1.681 0-2.863 1.036-2.863 2.53Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Fly.io CLI on Windows\nDESCRIPTION: PowerShell command to install the Fly.io CLI on Windows systems.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_5\n\nLANGUAGE: doscon\nCODE:\n```\npwsh -Command \"iwr https://fly.io/install.ps1 -useb | iex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Functionality in Wagtail API\nDESCRIPTION: Boolean setting to enable or disable full text search functionality across all API endpoints. Defaults to True.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/api/v2/configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILAPI_SEARCH_ENABLED\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Wagtail 1.11\nDESCRIPTION: Comprehensive release notes for Wagtail version 1.11 from June 30, 2017, detailing major features and improvements.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n1.11 (30.06.2017)\n~~~~~~~~~~~~~~~~~\n\n * Added a new page explorer menu built with the admin API and React (Karl Hobley, Josh Barr, Thibaud Colas, Janneke Janssen, Rob Moorman, Maurice Bartnig, Jonny Scholes, Matt Westcott, Sævar Öfjörð Magnússon, Eirikur Ingi Magnusson, Harris Lapiroff, Hugo van den Berg, Olly Willans, Andy Babic, Ben Enright, Bertrand Bordage)\n * Added privacy settings for documents (Ulrich Wagner, Matt Westcott)\n * Optimised page URL generation by caching site paths in the request scope (Tobias McNulty, Matt Westcott)\n```\n\n----------------------------------------\n\nTITLE: SVG Globe Icon Definition (Font Awesome)\nDESCRIPTION: SVG markup for a globe icon derived from Font Awesome Pro 6.4.0. Includes the path data and viewport definition for the icon located at wagtailadmin/icons/globe.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_49\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-globe\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! globe (solid): Font Awesome Pro 6.4.0 --><path d=\"M11 8c0 .719-.063 1.375-.125 2H5.094a19.61 19.61 0 0 1-.125-2c0-.688.062-1.344.125-2h5.781c.063.656.125 1.313.125 2Zm4.719-2c.187.656.281 1.313.281 2 0 .719-.094 1.375-.281 2h-3.844c.063-.625.125-1.313.125-2 0-.688-.063-1.344-.125-2h3.844Zm-.313-1H11.75c-.313-1.969-.938-3.656-1.719-4.719C12.47.937 14.47 2.687 15.406 5ZM10.75 5H5.219c.187-1.125.5-2.125.843-2.938.344-.75.688-1.28 1.063-1.624C7.469.124 7.75 0 8 0c.219 0 .5.125.844.438.375.343.719.875 1.062 1.625.344.812.656 1.812.844 2.937ZM.562 5C1.5 2.687 3.5.937 5.938.281 5.157 1.344 4.532 3.031 4.22 5H.562Zm3.532 1c-.063.656-.125 1.313-.125 2 0 .688.062 1.375.125 2H.25C.062 9.375 0 8.719 0 8c0-.688.063-1.344.25-2h3.844Zm1.968 7.969A12.984 12.984 0 0 1 5.22 11h5.531a12.984 12.984 0 0 1-.844 2.969c-.344.75-.687 1.281-1.062 1.625-.344.312-.625.406-.875.406-.219 0-.5-.094-.844-.406-.375-.344-.719-.875-1.063-1.625Zm-.125 1.781A8.02 8.02 0 0 1 .563 11H4.22c.312 2 .937 3.688 1.718 4.75Zm4.094 0c.781-1.063 1.406-2.75 1.719-4.75h3.656a8.02 8.02 0 0 1-5.375 4.75Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Purging Embed Cache\nDESCRIPTION: Command to delete all cached embed objects from the database.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmanage.py purge_embeds\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Custom Stock Entity\nDESCRIPTION: This HTML snippet shows the output generated by the custom stock entity feature when rendered on the front-end of the website.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/extending_draftail.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>\n    Anyone following NextEra technology <span data-stock=\"NEE\">$NEE</span> should\n    also look into <span data-stock=\"FSLR\">$FSLR</span>.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Extending Base Notification Template with Moderation Approval Content\nDESCRIPTION: Django template that extends the base notification template to display moderation approval messages. Handles both page and generic model objects, includes admin edit URLs and supports internationalization.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/task_state_approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n{% base_url_setting default=\"\" as base_url %}\n\n{% block content %} {% if page %}\n{% blocktrans trimmed with title=page.get_admin_display_title|safe task=task.name|safe %}The page \"{{ title }}\" has been approved in moderation stage \"{{ task }}\".{% endblocktrans %}\n{% trans \"You can edit the page here:\"%} {{ base_url }}{% url 'wagtailadmin_pages:edit' page.id %} {% else %} {% latest_str object as title %} {% admin_edit_url object user as edit_url %}\n{% blocktrans trimmed with title=title|safe task=task.name|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been approved in moderation stage \"{{ task }}\".\n{% endblocktrans %}{{ message|capfirst|safe }}\n{% if edit_url %}{% blocktrans trimmed with model_name=model_name|safe asvar edit_message %}\n    You can edit the {{ model_name }} here:\n{% endblocktrans %}{{ edit_message|capfirst|safe }} {{ base_url }}{{ edit_url }}{% endif %}{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Document URL Access Patterns in Wagtail\nDESCRIPTION: Examples of document URL patterns in Wagtail, showing previously supported shortened formats that have been removed and the full URL format that remains supported for security reasons.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.10.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`/documents/1/your-file-name.pdf`, `/documents/1/you` & `/documents/1/`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`/documents/1/your-file-name.pdf`\n```\n\n----------------------------------------\n\nTITLE: TaskState Database Fields Documentation\nDESCRIPTION: Documentation for TaskState model database fields including workflow state, revision, task references and status tracking fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_27\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: TaskState\n\n    .. attribute:: workflow_state\n\n        (foreign key to :class:`~wagtail.models.WorkflowState`)\n\n        The workflow state which started this task state.\n\n    .. attribute:: revision\n\n        (foreign key to :class:`~wagtail.models.Revision`)\n\n        The revision this task state was created on.\n\n    .. attribute:: task\n\n        (foreign key to :class:`~wagtail.models.Task`)\n\n        The task that this task state is storing state information for.\n\n    .. attribute:: status\n\n        (text)\n\n        The completion status of the task on this revision. Options are available in ``TaskState.STATUS_CHOICES``)\n\n    .. attribute:: content_type\n\n        (foreign key to ``django.contrib.contenttypes.models.ContentType``)\n\n        A foreign key to the :class:`~django.contrib.contenttypes.models.ContentType` object that represents the specific model of this task.\n\n    .. attribute:: started_at\n\n        (date/time)\n\n        When this task state was created.\n\n    .. attribute:: finished_at\n\n        (date/time)\n\n        When this task state was canceled, rejected, or approved.\n\n    .. attribute:: finished_by\n\n        (foreign key to user model)\n\n        The user who completed (canceled, rejected, approved) the task.\n\n    .. attribute:: comment\n\n        (text)\n\n        A text comment is typically added by a user when the task is completed.\n```\n\n----------------------------------------\n\nTITLE: StreamField Class Definition in Python\nDESCRIPTION: This snippet defines the StreamField class with its parameters. It includes options for specifying block types, minimum and maximum number of blocks, and block counts. The collapsed parameter determines the initial state of blocks in the editor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass wagtail.fields.StreamField(blocks, blank=False, min_num=None, max_num=None, block_counts=None, collapsed=False)\n\n   A model field for representing long-form content as a sequence of content blocks of various types. See :ref:`streamfield_topic`.\n\n   :param blocks: A list of block types, passed as either a list of ``(name, block_definition)`` tuples or a ``StreamBlock`` instance.\n   :param blank: When false (the default), at least one block must be provided for the field to be considered valid.\n   :param min_num: Minimum number of sub-blocks that the stream must have.\n   :param max_num: Maximum number of sub-blocks that the stream may have.\n   :param block_counts: Specifies the minimum and maximum number of each block type, as a dictionary mapping block names to dicts with (optional) ``min_num`` and ``max_num`` fields.\n   :param collapsed: When true, all blocks are initially collapsed.\n```\n\n----------------------------------------\n\nTITLE: Installing Wagtail Styleguide Module Configuration\nDESCRIPTION: Code snippet showing how to add the wagtail.contrib.styleguide module to Django's INSTALLED_APPS setting to enable the styleguide functionality.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/styleguide.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    # ...\n    'wagtail.contrib.styleguide',\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch Python Package\nDESCRIPTION: Commands for installing specific versions of elasticsearch-py package compatible with Elasticsearch 7.x and 8.x.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/topics/search/backends.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install \"elasticsearch>=7.0.0,<8.0.0\"  # for Elasticsearch 7.x\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install \"elasticsearch>=8.0.0,<9.0.0\"  # for Elasticsearch 8.x\n```\n\n----------------------------------------\n\nTITLE: Implementing edit SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of an edit/pen icon for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_40\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-edit\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 18 18\"><!--! pen (solid): Font Awesome Pro 6.4.0 --><path d=\"M12.313 1.625a2.018 2.018 0 0 1 2.843 0l1.219 1.219a2.018 2.018 0 0 1 0 2.844l-1.5 1.5-4.063-4.063 1.5-1.5Zm1.843 6.281-7.281 7.282a2.722 2.722 0 0 1-1.156.687l-3.782 1.094a.638.638 0 0 1-.718-.188.708.708 0 0 1-.219-.718l1.125-3.782c.125-.437.375-.844.688-1.156l7.28-7.281 4.063 4.062Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Workflow Approval Notification in Django Template for Wagtail CMS\nDESCRIPTION: This snippet defines the content block of a notification template for workflow approvals in Wagtail. It handles both page and non-page objects, displaying the approved item's title, workflow name, and additional details. For pages, it includes a link to view the page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/workflow_state_approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% extends 'wagtailadmin/notifications/base.txt' %}\n{% load wagtailadmin_tags i18n %}\n\n{% block content %} {% if page %}\n{% blocktrans trimmed with title=page.get_admin_display_title|safe workflow=workflow.name|safe %}The page \"{{ title }}\" has been approved in workflow \"{{ workflow }}\".{% endblocktrans %}\n{% trans \"You can view the page here:\" %} {{ page.full_url }} {% else %} {% latest_str object as title %}\n{% blocktrans trimmed with title=title|safe workflow=workflow.name|safe model_name=model_name|safe asvar message %}\n    The {{ model_name }} \"{{ title }}\" has been approved in workflow \"{{ workflow }}\".\n{% endblocktrans %}{{ message|capfirst|safe }}{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing dots-horizontal SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a horizontal dots (ellipsis) icon for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_37\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-dots-horizontal\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! ellipsis (solid): Font Awesome Pro 6.4.0 --><path d=\"M4.75 8c0 .969-.813 1.75-1.75 1.75-.969 0-1.75-.781-1.75-1.75 0-.938.781-1.75 1.75-1.75.938 0 1.75.813 1.75 1.75Zm5 0c0 .969-.813 1.75-1.75 1.75-.969 0-1.75-.781-1.75-1.75 0-.938.781-1.75 1.75-1.75.938 0 1.75.813 1.75 1.75Zm1.5 0c0-.938.781-1.75 1.75-1.75.938 0 1.75.813 1.75 1.75 0 .969-.813 1.75-1.75 1.75-.969 0-1.75-.781-1.75-1.75Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: LockableMixin Database Fields Definition\nDESCRIPTION: RST documentation defining the database fields for LockableMixin including locked status, timestamp and user reference.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_21\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: LockableMixin\n\n    .. attribute:: locked\n\n        (boolean)\n\n        A boolean that is set to ``True`` if the object is locked.\n\n    .. attribute:: locked_at\n\n        (date/time)\n\n        The date/time when the object was locked.\n\n    .. attribute:: locked_by\n\n        (foreign key to user model)\n\n        The user who locked the object.\n```\n\n----------------------------------------\n\nTITLE: Revision Model Methods Documentation\nDESCRIPTION: RST documentation defining the managers, methods and properties available in the Revision model.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/models.md#2025-04-21_snippet_25\n\nLANGUAGE: rst\nCODE:\n```\n.. class:: Revision\n    :no-index:\n\n    .. automethod:: as_object\n\n        This method retrieves this revision as an instance of its object's specific class. If the revision belongs to a page, it will be an instance of the :class:`~wagtail.models.Page`'s specific subclass.\n\n    .. automethod:: is_latest_revision\n\n        Returns ``True`` if this revision is the object's latest revision.\n\n    .. automethod:: publish\n\n        Calling this will copy the content of this revision into the live object. If the object is in draft, it will be published.\n\n    .. autoattribute:: base_content_object\n\n        This property returns the object this revision belongs to as an instance of the base class.\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for circle-plus in Wagtail Admin\nDESCRIPTION: SVG definition for the 'circle-plus' icon based on Font Awesome Pro's circle-plus solid icon. This icon represents a plus sign inside a circle, typically used for add or create actions.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_14\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-circle-plus\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-plus (solid): Font Awesome Pro 6.4.0 --><path d=\"M0 8c0-4.406 3.563-8 8-8 4.406 0 8 3.594 8 8 0 4.438-3.594 8-8 8-4.438 0-8-3.563-8-8Zm8 3.5a.74.74 0 0 0 .75-.75v-2h2A.74.74 0 0 0 11.5 8a.76.76 0 0 0-.75-.75h-2v-2A.76.76 0 0 0 8 4.5a.74.74 0 0 0-.75.75v2h-2A.74.74 0 0 0 4.5 8c0 .438.313.75.75.75h2v2c0 .438.313.75.75.75Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Default Wagtail Project Directory Structure\nDESCRIPTION: This text snippet shows the default file and directory structure generated when using the `wagtail start` command in Wagtail.  It illustrates the organization of apps, settings, static files, templates, and other essential project components.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/project_template.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"mysite/\\n    home/\\n        migrations/\\n            __init__.py\\n            0001_initial.py\\n            0002_create_homepage.py\\n        templates/\\n            home/\\n                home_page.html\\n        __init__.py\\n        models.py\\n    search/\\n        templates/\\n            search/\\n                search.html\\n        __init__.py\\n        views.py\\n    mysite/\\n        settings/\\n            __init__.py\\n            base.py\\n            dev.py\\n            production.py\\n        static/\\n            css/\\n                mysite.css\\n            js/\\n                mysite.js\\n        templates/\\n            404.html\\n            500.html\\n            base.html\\n        __init__.py\\n        urls.py\\n        wsgi.py\\n    Dockerfile\\n    manage.py\\n    requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon: crosshairs\nDESCRIPTION: This snippet defines a custom icon for crosshairs, represented as an SVG element from Font Awesome. This icon is used contextually for selection and targeting purposes within the UI.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<td><svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-crosshairs\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! crosshairs (solid): Font Awesome Pro 6.4.0 --><path d=\"M7 8c0-.531.438-1 1-1 .531 0 1 .469 1 1 0 .563-.469 1-1 1-.563 0-1-.438-1-1Zm1-8c.531 0 1 .469 1 1v.344A6.764 6.764 0 0 1 14.656 7H15c.531 0 1 .469 1 1 0 .563-.469 1-1 1h-.344c-.437 2.938-2.75 5.25-5.656 5.688V15c0 .563-.469 1-1 1-.563 0-1-.438-1-1v-.313A6.762 6.762 0 0 1 1.312 9H1c-.563 0-1-.438-1-1 0-.531.438-1 1-1h.313C1.75 4.094 4.063 1.781 7 1.344V1c0-.531.438-1 1-1ZM7 12.656V12c0-.531.438-1 1-1 .531 0 1 .469 1 1v.656A4.685 4.685 0 0 0 12.625 9H12c-.563 0-1-.438-1-1 0-.531.438-1 1-1h.625A4.69 4.69 0 0 0 9 3.375V4c0 .563-.469 1-1 1-.563 0-1-.438-1-1v-.625A4.685 4.685 0 0 0 3.344 7H4c.531 0 1 .469 1 1 0 .563-.469 1-1 1h-.656A4.68 4.68 0 0 0 7 12.656Z\"></path></svg> </svg></td>\n```\n\n----------------------------------------\n\nTITLE: Applying RTL-Specific Styles in CSS\nDESCRIPTION: Demonstrates how to apply styles specifically for right-to-left languages using the 'dir' attribute selector. This should be used as a last resort when logical properties are not sufficient.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/ui_guidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n[dir='rtl']\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Escaping in StreamField Blocks in Wagtail Templates\nDESCRIPTION: A code snippet showing how to disable automatic HTML escaping for StreamField blocks when using the include_block template tag. This is provided as an option for developers who deliberately want to allow editors to insert HTML content in text blocks, despite the security risks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/2.12.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% autoescape off %}...{% include_block %}...{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Code Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 code (solid) icon for code/development related functions\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/code.svg\n```\n\n----------------------------------------\n\nTITLE: Setting up basic tagging on a BlogPage model in Wagtail\nDESCRIPTION: This code demonstrates how to add tagging functionality to a Wagtail page model. It creates a through model (BlogPageTag) and adds a ClusterTaggableManager to the BlogPage model for managing tags, along with exposing the tags field in the admin interface.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/tags.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nfrom modelcluster.fields import ParentalKey\nfrom modelcluster.contrib.taggit import ClusterTaggableManager\nfrom taggit.models import TaggedItemBase\n\nclass BlogPageTag(TaggedItemBase):\n    content_object = ParentalKey('demo.BlogPage', on_delete=models.CASCADE, related_name='tagged_items')\n\nclass BlogPage(Page):\n    ...\n    tags = ClusterTaggableManager(through=BlogPageTag, blank=True)\n\n    promote_panels = Page.promote_panels + [\n        ...\n        FieldPanel('tags'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Collapse Down Icon SVG\nDESCRIPTION: Custom icon for collapsing content downward\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/collapse-down.svg\n```\n\n----------------------------------------\n\nTITLE: Removing Dashes and Underscores from Document Titles on Upload in Wagtail\nDESCRIPTION: This JavaScript code listens for the 'wagtail:documents-upload' event and modifies the generated title by replacing dashes and underscores with spaces.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/title_generation_on_upload.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// remove_dashes_underscores.js\nwindow.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('wagtail:documents-upload', function (event) {\n        // Replace dashes/underscores with a space\n        const newTitle = (event.detail.data.title || '').replace(\n            /(\\s|_|-)/g,\n            ' ',\n        );\n        event.detail.data.title = newTitle;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Test App Migrations\nDESCRIPTION: Command to create database migrations for the test application models.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemigrations --settings=wagtail.test.settings\n```\n\n----------------------------------------\n\nTITLE: Defining AutocompleteField for Snippet Search in Python\nDESCRIPTION: This code snippet demonstrates how to add AutocompleteField to a snippet model's search_fields definition to ensure full search functionality in chooser interfaces. It includes importing necessary modules, registering the snippet, and defining the search fields.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wagtail.search import index\n# ... other imports\n\n@register_snippet\nclass MySnippet(index.Indexed, models.Model):\n     search_fields = [\n         index.SearchField(\"name\"),\n         index.AutocompleteField(\"name\"),\n     ]\n```\n\n----------------------------------------\n\nTITLE: Using the page_url Shortcut for Cleaner URL Generation (HTML+Django)\nDESCRIPTION: Template code showing how to use the page_url shortcut to generate page URLs from settings models. This approach is more concise, automatically fetches specific pages, and includes caching for improved efficiency when accessing the same URL multiple times.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{{ settings.app_label.GenericImportantPages.page_url.donate_page }}\n{{ settings.app_label.GenericImportantPages.page_url.sign_up_page }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Table of Contents in Markdown\nDESCRIPTION: Sphinx/MyST markdown configuration block defining the table of contents structure for the Wagtail extended tutorial chapters. Uses toctree directive with maxdepth setting.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/tutorial/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n---\nmaxdepth: 2\n---\ncustomize_homepage\ncreate_footer_for_all_pages\nset_up_site_menu\nstyle_your_site\ncreate_contact_page\ncreate_portfolio_page\nadd_search\ndeployment\n```\n\n----------------------------------------\n\nTITLE: Configuring Django AppConfig for Wagtail Signal Handler Registration\nDESCRIPTION: This snippet shows how to set up a Django AppConfig class that runs the register_signal_handlers() function when the app is loaded. It implements the ready() method to ensure the signal handlers are registered at the appropriate time.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_tasks.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# <project>/apps.py\nfrom django.apps import AppConfig\n\n\nclass MyAppConfig(AppConfig):\n    name = 'myappname'\n    label = 'myapplabel'\n    verbose_name = 'My verbose app name'\n\n    def ready(self):\n        from .signal_handlers import register_signal_handlers\n        register_signal_handlers()\n```\n\n----------------------------------------\n\nTITLE: Adding Icon Licensing Information in HTML\nDESCRIPTION: Shows the format for including licensing information for icons as HTML comments. This is important for maintaining proper attribution for icon sources.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/ui_guidelines.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!--! [icon name] ([icon style]): Font Awesome [version] -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cloudflare Backends with Different Zone IDs\nDESCRIPTION: This snippet demonstrates how to configure multiple Cloudflare backends for different domains, each with its own zone ID and hostname filtering.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE = {\n    'main-site': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudflareBackend',\n        'BEARER_TOKEN': os.environ[\"CLOUDFLARE_BEARER_TOKEN\"],\n        'ZONEID': 'example.com zone id',\n        'HOSTNAMES': ['example.com']\n    },\n    'other-site': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.CloudflareBackend',\n        'BEARER_TOKEN': os.environ[\"CLOUDFLARE_BEARER_TOKEN\"],\n        'ZONEID': 'example.net zone id',\n        'HOSTNAMES': ['example.net']\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Version Number Format Examples\nDESCRIPTION: Examples showing Wagtail's version numbering format using A.B.C notation, where A.B represents feature releases and C represents patch releases.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/release_process.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nA.B\nA.B.C\nA.BrcN\n```\n\n----------------------------------------\n\nTITLE: Building and Running Wagtail Docker Image\nDESCRIPTION: These shell commands are used to build and run a Docker image for a Wagtail project. The `docker build` command creates an image named `mysite` from the Dockerfile. The `docker run` command then runs the image, mapping port 8000 on the host to port 8000 on the container.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/project_template.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"docker build -t mysite .\\ndocker run -p 8000:8000 mysite\"\n```\n\n----------------------------------------\n\nTITLE: Creating a basic language selector in Django templates\nDESCRIPTION: This HTML+Django template code creates a basic language selector that displays links to available translations of the current page. It uses the page.get_translations method and includes proper SEO attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/i18n.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{# make sure these are at the top of the file #}\n{% load wagtailcore_tags %}\n\n{% if page %}\n    {% for translation in page.get_translations.live %}\n        <a href=\"{% pageurl translation %}\" rel=\"alternate\" hreflang=\"{{ translation.locale.language_code }}\">\n            {{ translation.locale.language_name_local }}\n        </a>\n    {% endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx TOC Tree for Wagtail Document Documentation\nDESCRIPTION: A Sphinx toctree directive that organizes the documentation structure for Wagtail's document functionality. It includes sections for overview, custom document models, upload forms, storage and serving, and document title generation.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/documents/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\noverview\ncustom_document_model\ncustom_document_upload_form\nstoring_and_serving\ntitle_generation_on_upload\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents for the document, with a depth of 1. It uses a specific Markdown syntax to create the table of contents.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.1.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet creates a table of contents for the release notes using Markdown syntax. It specifies local content with a depth of 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.4.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Directive in Markdown\nDESCRIPTION: Markdown directive for generating a local table of contents with depth 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Parent Index Page in Python Using Wagtail's Page Model\nDESCRIPTION: This snippet shows how to create a method in a leaf node (EventPage) to find its parent index page. It uses Wagtail's get_ancestors() method and filters by the specific parent page type (EventIndexPage).\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/theory.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass EventPage(Page):\n    # ...\n    def event_index(self):\n        # Find the closest ancestor which is an event index\n        return self.get_ancestors().type(EventIndexPage).last()\n```\n\n----------------------------------------\n\nTITLE: Implementing glasses SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a glasses icon for the Wagtail admin interface, sourced from Font Awesome Pro 6.5.1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_48\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-glasses\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><!--! glasses (classic): Font Awesome Pro 6.5.1 --><path d=\"M118.6 80c-11.5 0-21.4 7.9-24 19.1L57 260.3c20.5-6.2 48.3-12.3 78.7-12.3c32.3 0 61.8 6.9 82.8 13.5c10.6 3.3 19.3 6.7 25.4 9.2c3.1 1.3 5.5 2.4 7.3 3.2c.9 .4 1.6 .7 2.1 1l.6 .3 .2 .1 .1 0 0 0 0 0s0 0-6.3 12.7h0l6.3-12.7c5.8 2.9 10.4 7.3 13.5 12.7h40.6c3.1-5.3 7.7-9.8 13.5-12.7l6.3 12.7h0c-6.3-12.7-6.3-12.7-6.3-12.7l0 0 0 0 .1 0 .2-.1 .6-.3c.5-.2 1.2-.6 2.1-1c1.8-.8 4.2-1.9 7.3-3.2c6.1-2.6 14.8-5.9 25.4-9.2c21-6.6 50.4-13.5 82.8-13.5c30.4 0 58.2 6.1 78.7 12.3L481.4 99.1c-2.6-11.2-12.6-19.1-24-19.1c-3.1 0-6.2 .6-9.2 1.8L416.9 94.3c-12.3 4.9-26.3-1.1-31.2-13.4s1.1-26.3 13.4-31.2l31.3-12.5c8.6-3.4 17.7-5.2 27-5.2c33.8 0 63.1 23.3 70.8 56.2l43.9 188c1.7 7.3 2.9 14.7 3.5 22.1c.3 1.9 .5 3.8 .5 5.7v6.7V352v16c0 61.9-50.1 112-112 112H419.7c-59.4 0-108.5-46.4-111.8-105.8L306.6 352H269.4l-1.2 22.2C264.9 433.6 215.8 480 156.3 480H112C50.1 480 0 429.9 0 368V352 310.7 304c0-1.9 .2-3.8 .5-5.7c.6-7.4 1.8-14.8 3.5-22.1l43.9-188C55.5 55.3 84.8 32 118.6 32c9.2 0 18.4 1.8 27 5.2l31.3 12.5c12.3 4.9 18.3 18.9 13.4 31.2s-18.9 18.3-31.2 13.4L127.8 81.8c-2.9-1.2-6-1.8-9.2-1.8zM64 325.4V368c0 26.5 21.5 48 48 48h44.3c25.5 0 46.5-19.9 47.9-45.3l2.5-45.6c-2.3-.8-4.9-1.7-7.5-2.5c-17.2-5.4-39.9-10.5-63.6-10.5c-23.7 0-46.2 5.1-63.2 10.5c-3.1 1-5.9 1.9-8.5 2.9zM512 368V325.4c-2.6-.9-5.5-1.9-8.5-2.9c-17-5.4-39.5-10.5-63.2-10.5c-23.7 0-46.4 5.1-63.6 10.5c-2.7 .8-5.2 1.7-7.5 2.5l2.5 45.6c1.4 25.4 22.5 45.3 47.9 45.3H464c26.5 0 48-21.5 48-48z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in Markdown\nDESCRIPTION: This snippet creates a table of contents using the toctree directive in Markdown. It lists various topics related to extending Wagtail, such as admin views, generic views, and custom tasks.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nadmin_views\ngeneric_views\ntemplate_components\nforms\nadding_reports\ncustom_tasks\naudit_log\ncustom_account_settings\ncustomizing_group_views\ncustom_image_filters\nextending_client_side\nrich_text_internals\nextending_draftail\ncustom_bulk_actions\n```\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Configuration in Sphinx\nDESCRIPTION: Sphinx toctree configuration for organizing deployment-related documentation pages, specifically for flyio and under_the_hood sections.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\nhidden: True\n---\nflyio\nunder_the_hood\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the release notes, with local depth set to 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.0.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Comment Update Notification in Django Template\nDESCRIPTION: Loads required template tags and renders a translated notification message indicating who updated comments on which page. Uses blocktrans for internationalization and includes safe filters for display names.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/updated_comments_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n wagtailadmin_tags %}\n\n{% blocktrans trimmed with title=page.get_admin_display_title|safe editor=editor|user_display_name|safe %}{{ editor }} has updated comments on \"{{ title }}\"{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding References Index in Python\nDESCRIPTION: Command to rebuild the references index for accurate display of reference counts after upgrading to Wagtail 4.1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrebuild_references_index\n```\n\n----------------------------------------\n\nTITLE: Defining Block Path Syntax for Wagtail StreamField Migrations\nDESCRIPTION: Formal definition of the syntax for block paths used in StreamField data migrations. A block path is either an empty string (for top-level stream operations) or a period-separated sequence of block names that identifies specific blocks in the StreamField structure.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/streamfield/data_migrations.md#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nblock_path = \"\" | block_name (\".\" block_name)*\nblock_name = str\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in ReStructuredText\nDESCRIPTION: A toctree directive that specifies the structure and depth of documentation sections, including theory, model recipes, and queryset reference pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n---\nmaxdepth: 2\n---\ntheory\nmodel_recipes\nqueryset_reference\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'password' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'password' icon used in Wagtail admin interface, sourced from Font Awesome Pro 6.4.0's 'key (solid)' icon. The path defines a key shape with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_62\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-password\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! key (solid): Font Awesome Pro 6.4.0 --><path d=\"M8.813 10.75 7.75 11.781a.622.622 0 0 1-.5.219H6v1.25a.74.74 0 0 1-.75.75H4v1.25a.74.74 0 0 1-.75.75H.75a.722.722 0 0 1-.75-.75v-2.5c0-.188.063-.375.219-.531L5.25 7.188C5.062 6.655 5 6.093 5 5.5 5 2.469 7.438 0 10.5 0 13.531 0 16 2.469 16 5.5c0 3.063-2.469 5.5-5.5 5.5-.594 0-1.156-.063-1.688-.25ZM11.75 5.5c.688 0 1.25-.531 1.25-1.25C13 3.562 12.437 3 11.75 3c-.719 0-1.25.563-1.25 1.25 0 .719.531 1.25 1.25 1.25Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Showing References Index\nDESCRIPTION: Command to display a summary of the references index contents.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/management_commands.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./manage.py show_references_index\n```\n\n----------------------------------------\n\nTITLE: Configuring Contents Section in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth of 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth level 1\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.1.7.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the release notes, with local depth set to 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Page URLs Using Traditional Template Tags (HTML+Django)\nDESCRIPTION: Template code demonstrating the traditional approach to accessing page URLs from settings models using the pageurl template tag. This approach requires multiple database queries when accessing multiple pages.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/settings.md#2025-04-21_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n{% load wagtailcore_tags %}\n{% pageurl settings.app_label.GenericImportantPages.donate_page %}\n{% pageurl settings.app_label.GenericImportantPages.sign_up_page %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch backend with SSL verification disabled\nDESCRIPTION: Example of configuring the Elasticsearch backend with the HOSTS option to disable SSL certificate verification, used to restore the pre-1.5 behavior if needed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/1.5.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.wagtailsearch.backends.elasticsearch',\n        'HOSTS': [{\n            'host': 'example.com'\n            'use_ssl': True,\n            'verify_certs': False,\n        }],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Contents Configuration Block\nDESCRIPTION: Configuration block for generating a local table of contents with depth 1 in the release notes document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/4.2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Community Joining Checklist in Markdown\nDESCRIPTION: A markdown checklist for new contributors to join and engage with the Wagtail community through various platforms like Slack and GitHub.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n-   [ ] Read the community guidelines\n-   [ ] Join GitHub\n-   [ ] Add your preferred name and image to your GitHub profile\n-   [ ] Join Slack\n-   [ ] Add your preferred name, timezone and image to your Slack profile\n-   [ ] Introduce yourself in `#new-contributors` in Slack\n-   [ ] Join the `#support` channel in Slack\n-   [ ] _Optional_ Join StackOverflow\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Depth for Contents in YAML\nDESCRIPTION: This YAML snippet defines a local configuration section for defining the depth parameter which seems to control the depth for a specific content rendering purpose. The 'depth' is set to 1, which might suggest a hierarchy level or limit on the content to be displayed or processed.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/3.0.1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a local table of contents with a depth of 1 for the markdown document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.3.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Note Block About Checklist in Markdown\nDESCRIPTION: A simple note directive introducing the concept of checklists that appear throughout the document for contributors to track their progress.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nBelow is a checklist. There are many like these you can copy for yourself as you progress through this guide.\n```\n```\n\n----------------------------------------\n\nTITLE: Modified Blog Index Template with 'with' Tag\nDESCRIPTION: Optimized version of blog index template using Django's 'with' tag for cleaner code.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_16\n\nLANGUAGE: django\nCODE:\n```\n{% for post in page.get_children %}\n    {% with post=post.specific %}\n        <h2><a href=\"{% pageurl post %}\">{{ post.title }}</a></h2>\n        <p>{{ post.intro }}</p>\n        {{ post.body|richtext }}\n    {% endwith %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Contents Configuration\nDESCRIPTION: Configuration block for generating local table of contents with depth of 1 in the markdown document.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.2.7.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Wagtail\nDESCRIPTION: Configuration setting names referenced in the changelog, including WAGTAILFRONTENDCACHE_LANGUAGES, WAGTAILIMAGES_WEBP_QUALITY, and WAGTAIL_TIME_FORMAT.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nWAGTAILFRONTENDCACHE_LANGUAGES = ['en', 'es']  # List of language codes\nWAGTAILIMAGES_WEBP_QUALITY = 85  # WebP image quality setting\nWAGTAIL_TIME_FORMAT = 'H:i'\n```\n\n----------------------------------------\n\nTITLE: Specifying RTL Mirroring for Icons in HTML\nDESCRIPTION: Demonstrates how to add a class to an icon SVG to enable right-to-left mirroring. This is used for icons that need to be flipped in RTL layouts.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/ui_guidelines.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\nclass=\"icon--directional\"\n```\n\n----------------------------------------\n\nTITLE: Generating Advanced Wagtail Documentation Table of Contents in Markdown\nDESCRIPTION: This code snippet creates a table of contents using Markdown syntax for advanced Wagtail documentation topics. It uses the toctree directive with a maxdepth of 2 and lists various important advanced features and considerations.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nimages/index\ndocuments/index\nicons\nembeds\ntags\nadd_to_django_project\nperformance\ni18n\nprivacy\ncustomization/index\nthird_party_tutorials\ntesting\napi/index\namp\naccessibility_considerations\nsustainability_considerations\nboundblocks_and_values\nmulti_site_multi_instance_multi_tenancy\nformbuilder_routablepage_redirect\nstreamfield_migrations\nstreamfield_validation\nreference_index\nheadless\n```\n```\n\n----------------------------------------\n\nTITLE: Content Panels with Simple FieldPanel - Python\nDESCRIPTION: Demonstrates the simplified syntax for adding field panels to content_panels using string field names instead of explicit FieldPanel instances.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/panels.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontent_panels = Page.content_panels + [\"title\", \"body\"]\n```\n\n----------------------------------------\n\nTITLE: Compiling Static Assets with npm for Wagtail Admin\nDESCRIPTION: Commands to build and watch static assets like JavaScript, CSS, images, and fonts for the Wagtail admin interface using npm.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/developing.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Wagtail 1.11.1\nDESCRIPTION: Release notes documenting changes in Wagtail version 1.11.1 from July 7, 2017, focused on bug fixes and improvements.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n1.11.1 (07.07.2017)\n~~~~~~~~~~~~~~~~~~~\n\n * Fix: Custom display page titles defined with `get_admin_display_title` are now shown within the page explorer menu (Matt Westcott, Janneke Janssen)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the release notes, with local depth set to 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.0.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n---\nlocal:\ndepth: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish/Squid Cache Backend\nDESCRIPTION: Settings configuration for Varnish/Squid cache backend including location and language settings.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/frontendcache.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nWAGTAILFRONTENDCACHE = {\n    'varnish': {\n        'BACKEND': 'wagtail.contrib.frontend_cache.backends.HTTPBackend',\n        'LOCATION': 'http://localhost:8000',\n    },\n}\nWAGTAILFRONTENDCACHE_LANGUAGES = []\n```\n\n----------------------------------------\n\nTITLE: Registering Default Rich Text Features in Wagtail\nDESCRIPTION: Example showing how to register a new default rich text feature (h1) using Wagtail's hook system.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@hooks.register('register_rich_text_features')\ndef make_h1_default(features):\n    features.default_features.append('h1')\n```\n\n----------------------------------------\n\nTITLE: Creating reStructuredText Table of Contents\nDESCRIPTION: This snippet defines the table of contents for the Wagtail documentation, specifying the depth, title-only option, and including various documentation sections.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :titlesonly:\n\n   getting_started/index\n   tutorial/index\n   topics/index\n   advanced_topics/index\n   extending/index\n   reference/index\n   deployment/index\n   support\n   editor_manual/index\n   contributing/index\n   releases/index\n```\n\n----------------------------------------\n\nTITLE: HTML Storage Format for Images in Wagtail Rich Text\nDESCRIPTION: Example of how embedded images are stored in the database using the embedtype attribute.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/rich_text_internals.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<embed embedtype=\"image\" id=\"10\" alt=\"A pied wagtail\" format=\"left\" />\n```\n\n----------------------------------------\n\nTITLE: Defining BlogIndexPage Model\nDESCRIPTION: Implementation of the BlogIndexPage model with RichTextField for intro content.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n# Add these:\nfrom wagtail.models import Page\nfrom wagtail.fields import RichTextField\n\n\nclass BlogIndexPage(Page):\n    intro = RichTextField(blank=True)\n\n    content_panels = Page.content_panels + [\"intro\"]\n```\n\n----------------------------------------\n\nTITLE: Clipboard List Icon SVG\nDESCRIPTION: Font Awesome Pro 6.4.0 clipboard-list (solid) icon for displaying list content\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\nwagtailadmin/icons/clipboard-list.svg\n```\n\n----------------------------------------\n\nTITLE: Customizing StructBlock Form Display in Page Editor (Python)\nDESCRIPTION: Added formal APIs for customizing how StructBlock forms are displayed within the Wagtail page editor.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# Example usage not provided in release notes\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for calendar-alt in Wagtail Admin\nDESCRIPTION: SVG definition for the 'calendar-alt' icon based on Font Awesome Pro's calendar-days solid icon. This icon represents an alternative calendar showing days.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_10\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-calendar-alt\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! calendar-days (solid): Font Awesome Pro 6.4.0 --><path d=\"M6 1v1h4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1v1h1.5c.813 0 1.5.688 1.5 1.5V5H1V3.5A1.5 1.5 0 0 1 2.5 2H4V1c0-.531.438-1 1-1 .531 0 1 .469 1 1ZM1 6h14v8.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.48 1.48 0 0 1 1 14.5V6Zm2 3.5c0 .281.219.5.5.5h1c.25 0 .5-.219.5-.5v-1c0-.25-.25-.5-.5-.5h-1c-.281 0-.5.25-.5.5v1Zm4 0c0 .281.219.5.5.5h1c.25 0 .5-.219.5-.5v-1c0-.25-.25-.5-.5-.5h-1c-.281 0-.5.25-.5.5v1ZM11.5 8c-.281 0-.5.25-.5.5v1c0 .281.219.5.5.5h1c.25 0 .5-.219.5-.5v-1c0-.25-.25-.5-.5-.5h-1ZM3 13.5c0 .281.219.5.5.5h1c.25 0 .5-.219.5-.5v-1c0-.25-.25-.5-.5-.5h-1c-.281 0-.5.25-.5.5v1ZM7.5 12c-.281 0-.5.25-.5.5v1c0 .281.219.5.5.5h1c.25 0 .5-.219.5-.5v-1c0-.25-.25-.5-.5-.5h-1Zm3.5 1.5c0 .281.219.5.5.5h1c.25 0 .5-.219.5-.5v-1c0-.25-.25-.5-.5-.5h-1c-.281 0-.5.25-.5.5v1Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Django Template with classname Variable for HTML Classes\nDESCRIPTION: Example Django template showing how to implement the classname variable in HTML. The template includes a comment documenting the expected variables and their purposes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/general_guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% comment \"text/markdown\" %}\n\n    Variables accepted by this template:\n\n    - `classname` - {string?} if present, adds classname to button\n    - `dialog_id` - {string} unique id to use to reference the modal which will be triggered\n\n{% endcomment %}\n\n<button type=\"button\" class=\"{{ classname }}\" data-a11y-dialog-show=\"{{ dialog_id }}\">\n    {{ text }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL for Fly.io\nDESCRIPTION: Command to set up symbolic link for xdg-open in Microsoft WSL environment.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/deployment/flyio.md#2025-04-21_snippet_7\n\nLANGUAGE: doscon\nCODE:\n```\nln -s /usr/bin/wslview /usr/local/bin/xdg-open\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition for check in Wagtail Admin\nDESCRIPTION: SVG definition for the 'check' icon based on Font Awesome Pro's check solid icon. This icon represents a checkmark for confirmation or selection.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_12\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-check\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! check (solid): Font Awesome Pro 6.4.0 --><path d=\"M14.688 3.313a.964.964 0 0 1 0 1.406l-8 8a.964.964 0 0 1-1.407 0l-4-4a.964.964 0 0 1 0-1.406.964.964 0 0 1 1.407 0l3.28 3.28 7.313-7.28a.964.964 0 0 1 1.406 0Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Old ListBlock Format Example\nDESCRIPTION: Example showing the old format (pre-Wagtail 2.16) of ListBlock values.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/advanced_topics/streamfield_migrations.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n[\n    value1,\n    value2,\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing TranslatableMixin with UniqueConstraint\nDESCRIPTION: Shows how to use Django's UniqueConstraint instead of unique_together with TranslatableMixin\nSOURCE: https://github.com/wagtail/wagtail/blob/main/CHANGELOG.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(TranslatableMixin):\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(fields=['field_name', 'locale'], name='unique_translated_field')\n        ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Contents Block in Markdown\nDESCRIPTION: Markdown configuration block for generating local table of contents with specified depth parameter.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/6.2.3.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Sliders Icon SVG in HTML for Wagtail Admin\nDESCRIPTION: SVG definition for the 'sliders' icon used in the Wagtail admin interface. It is based on the Font Awesome Pro 6.4.0 solid sliders icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_76\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-sliders\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! sliders (solid): Font Awesome Pro 6.4.0 --><path d=\"M0 13C0 12.4688 0.4375 12 1 12H2.6875C3.09375 11.125 3.96875 10.5 5 10.5C6 10.5 6.875 11.125 7.28125 12H15C15.5312 12 16 12.4688 16 13C16 13.5625 15.5312 14 15 14H7.28125C6.875 14.9062 6 15.5 5 15.5C3.96875 15.5 3.09375 14.9062 2.6875 14H1C0.4375 14 0 13.5625 0 13ZM6 13C6 12.4688 5.53125 12 5 12C4.4375 12 4 12.4688 4 13C4 13.5625 4.4375 14 5 14C5.53125 14 6 13.5625 6 13ZM11 5.5C12 5.5 12.875 6.125 13.2812 7H15C15.5312 7 16 7.46875 16 8C16 8.5625 15.5312 9 15 9H13.2812C12.875 9.90625 12 10.5 11 10.5C9.96875 10.5 9.09375 9.90625 8.6875 9H1C0.4375 9 0 8.5625 0 8C0 7.46875 0.4375 7 1 7H8.6875C9.09375 6.125 9.96875 5.5 11 5.5ZM12 8C12 7.46875 11.5312 7 11 7C10.4375 7 10 7.46875 10 8C10 8.5625 10.4375 9 11 9C11.5312 9 12 8.5625 12 8ZM15 2C15.5312 2 16 2.46875 16 3C16 3.5625 15.5312 4 15 4H8.28125C7.875 4.90625 7 5.5 6 5.5C4.96875 5.5 4.09375 4.90625 3.6875 4H1C0.4375 4 0 3.5625 0 3C0 2.46875 0.4375 2 1 2H3.6875C4.09375 1.125 4.96875 0.5 6 0.5C7 0.5 7.875 1.125 8.28125 2H15ZM5 3C5 3.5625 5.4375 4 6 4C6.53125 4 7 3.5625 7 3C7 2.46875 6.53125 2 6 2C5.4375 2 5 2.46875 5 3Z\" /></svg></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Settings\nDESCRIPTION: RST directive to hide the table of contents in the documentation page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/getting_started/index.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:hidetoc: 1\n```\n\n----------------------------------------\n\nTITLE: CI Approval Note for New Contributors\nDESCRIPTION: Markdown note block explaining that CI doesn't automatically run for new contributors and requires approval from core team members.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/first_contribution_guide.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nGitHub will not run the CI automatically for new contributors in some projects. This is an intentional security feature and a core contributor will need to approve your initial CI run.\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing folder-inverse SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a folder icon with inverse styling for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_43\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-folder-inverse\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! folder (solid): Font Awesome Pro 6.4.0 --><path d=\"M16 4.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.48 1.48 0 0 1 0 13.5v-11A1.5 1.5 0 0 1 1.5 1h5l2 2h6c.813 0 1.5.688 1.5 1.5Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Markdown\nDESCRIPTION: Markdown configuration block for generating a local table of contents with depth level 1.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/releases/5.0.4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n---\nlocal:\ndepth: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Path Icon for 'resubmit' in Wagtail Admin\nDESCRIPTION: SVG definition for the 'resubmit' icon used in Wagtail admin interface, based on Font Awesome Pro 6.4.0's 'right-left (solid)' icon. The path defines bidirectional arrows with proper viewBox attributes.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_72\n\nLANGUAGE: HTML\nCODE:\n```\n<svg id=\"icon-resubmit\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 18 18\"><!--! right-left (solid): Font Awesome Pro 6.4.0 --><path d=\"M2 6h9.969v2.25c0 .313.187.594.469.688.28.124.593.093.812-.126l3.5-3.25a.755.755 0 0 0 0-1.093l-3.5-3.25c-.219-.219-.531-.25-.813-.157a.78.78 0 0 0-.468.688V4H2c-.563 0-1 .469-1 1 0 .5.438 1 1 1Zm14 6H6V9.75c0-.313-.188-.594-.469-.688C5.25 8.97 4.938 9 4.72 9.22l-3.5 3.25a.755.755 0 0 0 0 1.094l3.5 3.25c.218.218.531.25.812.125.282-.094.469-.375.469-.688V14h10c.531 0 1-.438 1-1 0-.531-.469-1-1-1Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Formatting GitHub Label as Markdown Link\nDESCRIPTION: This snippet shows how to create a Markdown link for a GitHub label, specifically the 'design decision needed' label used in the Wagtail project.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/contributing/issue_tracking.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[\"design decision needed\"](https://github.com/wagtail/wagtail/labels/status%3ANeeds%20Design%20Decision)\n```\n\n----------------------------------------\n\nTITLE: SVG H3 Icon Definition (Custom)\nDESCRIPTION: Custom SVG icon for an H3 heading element. Includes a stylized 'H' and '3' character. Located at wagtailadmin/icons/h3.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_54\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-h3\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! Custom icon --><path d=\"M8.91 11.5a.63.63 0 0 1-.624.625H6.41a.617.617 0 0 1-.625-.625.63.63 0 0 1 .625-.625h.312V8.062H2.348v2.813h.313c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625H.786A.617.617 0 0 1 .16 11.5a.63.63 0 0 1 .625-.625h.312v-6.25H.786A.617.617 0 0 1 .16 4a.63.63 0 0 1 .625-.625H2.66c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.313v2.188h4.375V4.624h-.312A.617.617 0 0 1 5.786 4a.63.63 0 0 1 .625-.625h1.875c.332 0 .625.293.625.625a.63.63 0 0 1-.625.625h-.313v6.25h.313c.332 0 .625.293.625.625Zm2.423-3.41h.886c.94 0 1.493.418 1.488 1.17 0 .656-.559 1.107-1.37 1.107-.854 0-1.412-.43-1.466-1.064H9.324c.07 1.424 1.262 2.369 3.013 2.369 1.8 0 3.019-.935 3.019-2.342 0-1.063-.752-1.746-1.901-1.853v-.032c.913-.188 1.616-.827 1.616-1.816 0-1.24-1.106-2.051-2.744-2.051-1.622 0-2.75.907-2.83 2.325h1.487c.048-.671.58-1.08 1.343-1.08.773 0 1.208.404 1.208 1.037 0 .634-.526 1.075-1.337 1.075h-.865v1.154Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: Markdown structure defining the table of contents for Wagtail's contrib modules documentation, using toctree directive with maxdepth parameter set to 2.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/reference/contrib/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nsettings\nforms/index\nsitemaps\nfrontendcache\nroutablepage\nsearchpromotions\nsimple_translation\ntable_block\ntyped_table_block\nredirects\nlegacy_richtext\n```\n```\n\n----------------------------------------\n\nTITLE: List Unordered Icon SVG Implementation\nDESCRIPTION: SVG icon for unordered list from Font Awesome Pro 6.4.0, displayed at 32x32 pixels with current color fill\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_60\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-list-ul\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path d=\"M.969 3.188c0-.762.615-1.407 1.406-1.407.762 0 1.406.645 1.406 1.407 0 .79-.644 1.406-1.406 1.406A1.388 1.388 0 0 1 .969 3.187Zm13.594-.938c.497 0 .937.44.937.938 0 .527-.44.937-.938.937H6.126a.926.926 0 0 1-.938-.938c0-.498.41-.937.938-.937h8.438Zm0 4.688c.497 0 .937.439.937.937 0 .527-.44.938-.938.938H6.126a.926.926 0 0 1-.938-.938c0-.498.41-.938.938-.938h8.438Zm0 4.687c.497 0 .937.44.937.938 0 .527-.44.937-.938.937H6.126a.926.926 0 0 1-.938-.938c0-.497.41-.937.938-.937h8.438Zm-13.594.938c0-.762.615-1.407 1.406-1.407.762 0 1.406.645 1.406 1.406 0 .792-.644 1.407-1.406 1.407a1.388 1.388 0 0 1-1.406-1.406ZM3.78 7.875c0 .791-.644 1.406-1.406 1.406A1.388 1.388 0 0 1 .969 7.875c0-.762.615-1.406 1.406-1.406.762 0 1.406.644 1.406 1.406Z\"></path></svg></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Document Settings\nDESCRIPTION: This snippet sets a document-level option to hide the table of contents for this specific page.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:hidetoc: 1\n```\n\n----------------------------------------\n\nTITLE: Wagtail Moderation Submission Notification Template\nDESCRIPTION: Django template that creates notification messages for content submitted to moderation. Handles both page-type content and other model types, displaying the content title, moderation task name, and model type where applicable.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/task_state_submitted_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: django-html\nCODE:\n```\n{% load wagtailadmin_tags i18n %}\n\n{% if page %}\n    {% blocktrans trimmed with title=page.get_admin_display_title|safe task=task.name|safe %}The page \"{{ title }}\" has been submitted for approval in moderation stage \"{{ task }}\" {% endblocktrans %}\n{% else %}\n    {% latest_str object as title %}\n    {% blocktrans trimmed with title=title|safe task=task.name|safe model_name=model_name|safe asvar message %}\n        The {{ model_name }} \"{{ title }}\" has been submitted for approval in moderation stage \"{{ task }}\"\n    {% endblocktrans %}\n    {{ message|capfirst|safe }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Wagtail Page Approval Notification in Django Template\nDESCRIPTION: This snippet loads the internationalization tag and uses blocktrans to create a translatable message for page approval. It includes the page title in the message, which is retrieved from the revision object and sanitized for safe display.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/wagtail/admin/templates/wagtailadmin/notifications/approved_subject.txt#2025-04-21_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n\n{% blocktrans trimmed with title=revision.content_object.get_admin_display_title|safe %}The page \"{{ title }}\" has been approved{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Defining Strikethrough Icon SVG in HTML for Wagtail Admin\nDESCRIPTION: SVG definition for the 'strikethrough' icon used in the Wagtail admin interface. It is based on the Font Awesome Pro 6.4.0 solid strikethrough icon.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_79\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"32\" height=\"32\" fill=\"currentColor\"><svg id=\"icon-strikethrough\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! strikethrough (solid): Font Awesome Pro 6.4.0 --><path d=\"M10.375 10c.531.406.688.844.563 1.531-.094.531-.344.906-.75 1.156-1.126.594-3.407.376-5.813-.624a1 1 0 0 0-1.313.53 1 1 0 0 0 .532 1.313c1 .406 3 1.125 4.937 1.125.938 0 1.844-.187 2.625-.594.969-.562 1.563-1.437 1.75-2.593.125-.719.094-1.313-.094-1.844h-2.437Zm4.875-2.5H9.719c-.5-.156-1-.313-1.469-.438-2.656-.78-3.469-1.218-3.219-2.562.063-.438.313-.813.688-1.063.656-.406 2-.718 4.875.032a1.025 1.025 0 0 0 1.219-.719c.124-.531-.188-1.094-.72-1.219-2.843-.75-5.03-.687-6.437.25a3.397 3.397 0 0 0-1.593 2.407C2.78 5.78 3.343 6.813 4.28 7.5H.75a.734.734 0 0 0-.75.719c0 .437.313.75.75.75h14.5a.76.76 0 0 0 .75-.75c0-.375-.344-.719-.75-.719Z\"></path></svg> </svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Help Icon Definition (Font Awesome)\nDESCRIPTION: SVG markup for a help/question icon derived from Font Awesome Pro 6.4.0. Shows a question mark inside a circle. Located at wagtailadmin/icons/help.svg.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_58\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-help\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! circle-question (solid): Font Awesome Pro 6.4.0 --><path d=\"M8 0C3.562 0 0 3.594 0 8c0 4.438 3.563 8 8 8 4.406 0 8-3.563 8-8 0-4.406-3.594-8-8-8Zm0 12.5c-.563 0-1-.438-1-1 0-.563.406-1 1-1 .531 0 1 .438 1 1 0 .563-.469 1-1 1Zm2.156-4.438-1.406.876V9a.76.76 0 0 1-.75.75.76.76 0 0 1-.75-.75v-.5c0-.25.125-.5.375-.656L9.406 6.78a.67.67 0 0 0 .344-.593c0-.375-.344-.688-.719-.688H7.437a.674.674 0 0 0-.687.688.76.76 0 0 1-.75.75.76.76 0 0 1-.75-.75C5.25 4.968 6.219 4 7.406 4H9c1.281 0 2.25.969 2.25 2.188a2.19 2.19 0 0 1-1.094 1.875Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing form SVG Icon in Wagtail Admin\nDESCRIPTION: SVG implementation of a form icon (rectangle list) for the Wagtail admin interface, sourced from Font Awesome Pro 6.4.0.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/_static/wagtail_icons_table.txt#2025-04-21_snippet_47\n\nLANGUAGE: SVG\nCODE:\n```\n<svg id=\"icon-form\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><!--! rectangle-list (solid): Font Awesome Pro 6.4.0 --><path d=\"M.125 3.375c0-.957.766-1.75 1.75-1.75h12.25c.957 0 1.75.793 1.75 1.75v8.75c0 .984-.793 1.75-1.75 1.75H1.875c-.984 0-1.75-.766-1.75-1.75v-8.75ZM4.5 7.75a.9.9 0 0 0-.875-.875.881.881 0 0 0-.875.875c0 .492.383.875.875.875A.881.881 0 0 0 4.5 7.75Zm0-2.625a.9.9 0 0 0-.875-.875.881.881 0 0 0-.875.875c0 .492.383.875.875.875a.881.881 0 0 0 .875-.875Zm0 5.25a.9.9 0 0 0-.875-.875.881.881 0 0 0-.875.875c0 .492.383.875.875.875a.881.881 0 0 0 .875-.875Zm1.75-5.906c-.383 0-.656.3-.656.656 0 .383.273.656.656.656h6.125a.648.648 0 0 0 .656-.656c0-.355-.3-.656-.656-.656H6.25Zm0 2.625c-.383 0-.656.3-.656.656 0 .383.273.656.656.656h6.125a.648.648 0 0 0 .656-.656c0-.355-.3-.656-.656-.656H6.25Zm0 2.625c-.383 0-.656.3-.656.656 0 .383.273.656.656.656h6.125a.648.648 0 0 0 .656-.656c0-.355-.3-.656-.656-.656H6.25Z\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating New Tab for Account Settings in Wagtail\nDESCRIPTION: Demonstrates how to create a new tab for the account settings page using the SettingsTab class and register a custom panel within that tab.\nSOURCE: https://github.com/wagtail/wagtail/blob/main/docs/extending/custom_account_settings.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# wagtail_hooks.py\n\nfrom wagtail.admin.views.account import BaseSettingsPanel, SettingsTab\nfrom wagtail import hooks\nfrom .forms import CustomSettingsForm\n\ncustom_tab = SettingsTab('custom', \"Custom settings\", order=300)\n\n@hooks.register('register_account_settings_panel')\nclass CustomSettingsPanel(BaseSettingsPanel):\n    name = 'custom'\n    title = \"My custom settings\"\n    tab = custom_tab\n    order = 100\n    form_class = CustomSettingsForm\n```"
  }
]