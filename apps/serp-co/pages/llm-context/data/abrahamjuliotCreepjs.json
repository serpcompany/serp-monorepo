[
  {
    "owner": "abrahamjuliot",
    "repo": "creepjs",
    "content": "TITLE: Browser Fingerprint Data Structure in JavaScript\nDESCRIPTION: Data structure used to identify and track browser visits and activity. Includes fingerprint hashes, scoring data, visit timestamps, and various tracking metrics used to assess browser uniqueness and behavior patterns.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n bot: 0.125,\n botHash: \"00000001\",\n botLevel: \"stranger:csl\",\n crowdBlendingScore: 36,\n fingerprint: \"18ce59ae1e65397c81b38da98e6eed23a8f6d4bd3a2a349ed800f7daebd6f9dc\",\n firstVisit: \"1984-08-01T07:00:00.000Z\",\n fuzzyInit: \"1879e559e5de22c3dceb603775ff8062bb274c41547f9fc0b38e919fc4000000\",\n fuzzyLast: \"1879e559e5de22c3dceb603775ff8062bb274c41547f9fc0b38e919fc4000000\",\n lastVisit: \"1984-08-01T07:00:00.000Z\",\n lastVisitEpoch: 460191600000,\n looseFingerprints: [\n  \"f331fd21a4f8dec8054ffaec88c32723f840f6a6174303cd787fb676a513bbf6\"\n ],\n looseSwitchCount: 0,\n maxErrors: 0,\n maxLies: 0,\n maxTrash: 0,\n score: 100,\n scoreData: `{\n  \"switchCountPointGain\": 5,\n  \"errorsPointGain\": 0,\n  \"trashPointGain\": 0,\n  \"liesPointGain\": 0,\n  \"measuredPointGain\": 0,\n  \"shadowBitsPointGain\": 10,\n  \"supervisedPointGain\": 0,\n  \"tracedPointGain\": 0,  \n  \"grade\": \"A+\"\n }`,\n shadow: \"0000000000000000000000000000000000000000000000000000000000000000\",\n shadowBits: 0,\n signature: \"\",\n timeHoursAlive: 0,\n timeHoursFromLastVisit: 0,\n timeHoursIdleMax: 0,\n timeHoursIdleMin: 0,\n visits: 1,\n benchmark: 565.4,\n resistance: '',\n traced: 0\n supervised: 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Prediction API Data Model Example in JavaScript\nDESCRIPTION: Example data model used by the /decrypt API to learn and predict browser engine, platform version, device, and GPU. This structure shows how fingerprint data is stored, tracked, and scored over multiple visits.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n cleanup: false,\n decrypted: \"Blink\",\n devicePrimary: \"Windows 10 (64-bit)\",\n deviceTrust: `{\n  \"Windows:Windows 10 (64-bit)\": [\"6a9\",\"fe3\",\"bb7\"],\n  \"Windows:Windows 7 (64-bit)\": [\"8a3\"],\n  \"Windows:Windows 11 (64-bit)\": [\"e4a\"]\n }`,\n devices: [\n  \"Windows:Windows 10 (64-bit)\",\n  \"Windows:Windows 7 (64-bit)\",\n  \"Windows:Windows 11 (64-bit)\"\n ],\n gpuBrands: [\n  \"INTEL\"\n ],\n gpus: [\n  \"INTEL:ANGLE (Intel(R) UHD Graphics Direct3D11 vs_5_0 ps_5_0)\",\n  \"INTEL:ANGLE (Intel, Intel(R) UHD Graphics 620 Direct3D11 vs_5_0 ps_5_0, D3D11)\"\n ],\n gpuWatch: [\n  \"INTEL:460191600000:8/2/1984:703722......:18\"\n ],\n healEvents: [],\n highEntropyLossYield: false,\n highEntropyLost: true,\n id: \"01aa0cc74cd124b8985d7e386e5499b34770353cab321e214a2aae122b4c1995\",\n lock: false,\n logger: [\n  \"8eff_75d6295c_345026a9: Blink (2/5/1984, 2:54:02 AM)\"\n ],\n reporter: `{\n  \"dates\": [\"2/5/1984\",\"2/10/1984\",\"2/17/1984\",\"2/22/1984\"],\n  \"ips\": [\"8eff\",\"66fa\",\"6ac2\",\"5887\"]\n }`,\n reporterTrustScore: 100,\n reviewed: true,\n suggested: \"no change\",\n systemCore: \"unknown\",\n systems: [\n  \"Windows\"\n ],\n systemWatch: [\n  \"Windows:Windows:460191600000:8/2/1984:703722......:18\"\n ],\n timestamp: \"1984-08-01T07:00:00.000Z\",\n trash: false,\n type: \"Canvas System\",\n userAgents: [\n  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\"\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fingerprint Hashing Examples in Markdown\nDESCRIPTION: Examples of different fingerprint hashing techniques used by CreepJS, including SHA-256 hashing for stable fingerprints (FP-ID), fuzzy hashing for initial and current loose fingerprints, and shadow hashing for tracking fingerprint changes over time.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFP-ID...: 9368a2b8913acba5633aa8f353bfd546aaaf77fd57c1416580e90fc41666feb2\nFuzzy...: 98fcf569e50680c3dcfb8e53e34874e2b2075c415208a1c05292119ec4000000\nDiffs...: 50ed3569e50680c3dcfb8e00e3387c5fb2075c415408a2006292119ec4000000\nShadow..: 1111100000000000000000110010011100000000010001101000000000000000\n```\n\n----------------------------------------\n\nTITLE: Calculating Shadow Bits Fingerprint Metric\nDESCRIPTION: Demonstrates how the shadow bits calculation works in the fingerprinting system. This calculates the ratio of '1' bits in the shadow fingerprint to determine uniqueness patterns.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbits = 4\ntotalBins = 64\nshadowBits = bits/totalBins // 0.0625\n```\n\n----------------------------------------\n\nTITLE: JavaScript Examples of Browser Fingerprinting 'Trash' Detection\nDESCRIPTION: Examples of what CreepJS considers 'trash' data in browser fingerprinting - unusual results or forgivable lies that can either be restored or used to create a better fingerprint. This helps in identifying spoofed browser attributes.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nplatform = 'Cat OS'\ngpu = '   Cat Adaptor'\n// ¯\\_(ツ)_/¯\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserAgent = 'Chrome 102'\nfeatures = '101' // I disabled a feature\ngpu = '^5zeD4 Cat Titan V' // We can forgive this\n```\n\n----------------------------------------\n\nTITLE: Bot Detection using Timing Behavior Analysis\nDESCRIPTION: Sample code showing a bot detection technique that measures how long a client spends on a page with a 'cute cat' element. Bots typically don't pause to view content, allowing for detection based on timing patterns.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Cute cat trap. Works every time!\nlet clientIsBadBot = false\nlet banned = false\n// How long did the client pause to admire the cute cat?\nconst catTime = await getClientTimeWithCuteCat()\nif (catTime < 10000 /* 10 seconds */) {\n  clientIsBadBot = true\n}\nif (catTime < 1000) {\n  // client should get banned! Proceed with caution\n  // Agent could be extraterrestrial and friendly\n  banned = true\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Web Functionality with Performance.now Override\nDESCRIPTION: Example of how API tampering can break web functionality by throwing an error when Performance.now is called, demonstrating an ungraceful blocking technique that would be detected by CreepJS.\nSOURCE: https://github.com/abrahamjuliot/creepjs/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPerformance.now = function() {\n // break the web\n throw new Error('Crash the code before it starts!')\n}\n```"
  }
]