[
  {
    "owner": "rspack-contrib",
    "repo": "rsbuild-plugin-react-router",
    "content": "TITLE: Configuring Rsbuild with React Router Plugin\nDESCRIPTION: Example configuration for adding the React Router plugin to a Rsbuild project in the rsbuild.config.ts file. Shows how to initialize the plugin with optional parameters.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginReactRouter } from 'rsbuild-plugin-react-router';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      pluginReactRouter({\n        // Optional: Enable custom server mode\n        customServer: false,\n        // Optional: Specify server output format\n        serverOutput: \"commonjs\",\n        //Optional: enable experimental support for module federation\n        federation: false\n      }), \n      pluginReact()\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Options Configuration in rsbuild.config.ts\nDESCRIPTION: Detailed plugin configuration options for rsbuild-plugin-react-router with TypeScript typings and default values for customServer, serverOutput, and federation settings.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npluginReactRouter({\n  /**\n   * Whether to disable automatic middleware setup for custom server implementation.\n   * Enable this when you want to handle server setup manually.\n   * @default false\n   */\n  customServer?: boolean,\n\n  /**\n   * Specify the output format for server-side code.\n   * Options: \"commonjs\" | \"module\"\n   * @default \"module\"\n   */\n  serverOutput?: \"commonjs\" | \"module\"\n  /**\n   * Enable experimental support for module federation\n   * @default false\n   */\n  federation?: boolean\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Timing with React Router in TypeScript\nDESCRIPTION: Complete example demonstrating server timing implementation in a React Router loader function. Shows how to measure database query performance, create timing headers, and combine them with parent headers. Uses prisma for database operations and includes error handling.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/server-timing.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tcombineServerTimings,\n\tmakeTimings,\n\ttime,\n} from '#app/utils/timing.server.ts'\nimport { type Route } from './+types/notes.ts'\n\nexport async function loader({ params }: Route.LoaderArgs) {\n\tconst timings = makeTimings('notes loader') // <-- 1. Setup Timings\n\t// 2. Time functions\n\tconst owner = await time(\n\t\t() =>\n\t\t\tprisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tusername: params.username,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tusername: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\timageId: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find user' },\n\t)\n\tif (!owner) {\n\t\tthrow new Response('Not found', { status: 404 })\n\t}\n\t// 2. Time functions\n\tconst notes = await time(\n\t\t() =>\n\t\t\tprisma.note.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\townerId: owner.id,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find notes' },\n\t)\n\treturn json(\n\t\t{ owner, notes },\n\t\t{ headers: { 'Server-Timing': timings.toString() } }, // <-- 3. Create headers\n\t)\n}\n\n// We have a general headers handler to save you from boilerplating.\nexport const headers: HeadersFunction = pipeHeaders\n// this is basically what it does though\nexport const headers: Route.HeadersFunction = ({ loaderHeaders, parentHeaders }) => {\n\treturn {\n\t\t'Server-Timing': combineServerTimings(parentHeaders, loaderHeaders), // <-- 4. Send headers\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in app/routes.ts\nDESCRIPTION: Example of defining routes using helper functions from @react-router/dev/routes, including index routes, regular routes, layouts, and dynamic segments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type RouteConfig,\n  index,\n  layout,\n  prefix,\n  route,\n} from '@react-router/dev/routes';\n\nexport default [\n  // Index route for the home page\n  index('routes/home.tsx'),\n\n  // Regular route\n  route('about', 'routes/about.tsx'),\n\n  // Nested routes with a layout\n  layout('routes/docs/layout.tsx', [\n    index('routes/docs/index.tsx'),\n    route('getting-started', 'routes/docs/getting-started.tsx'),\n    route('advanced', 'routes/docs/advanced.tsx'),\n  ]),\n\n  // Routes with dynamic segments\n  ...prefix('projects', [\n    index('routes/projects/index.tsx'),\n    layout('routes/projects/layout.tsx', [\n      route(':projectId', 'routes/projects/project.tsx'),\n      route(':projectId/edit', 'routes/projects/edit.tsx'),\n    ]),\n  ]),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Remix Flat Routes\nDESCRIPTION: Shows the file and directory structure used by the Epic Stack application for organizing routes. Demonstrates the hybrid routing approach with nested directories and route files.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/routing.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/routes\n├── _auth+\n│   ├── forgot-password.tsx\n│   ├── login.tsx\n│   ├── logout.tsx\n│   ├── onboarding.tsx\n│   ├── reset-password.tsx\n│   └── signup.tsx\n├── _marketing+\n│   ├── about.tsx\n│   ├── index.tsx\n│   ├── logos\n│   │   ├── logos.ts\n│   │   └── ...\n│   ├── privacy.tsx\n│   ├── support.tsx\n│   └── tos.tsx\n├── admin+\n│   ├── cache.tsx\n│   ├── cache_.lru.$cacheKey.ts\n│   ├── cache_.sqlite.$cacheKey.ts\n│   └── cache_.sqlite.tsx\n├── me.tsx\n├── resources+\n│   ├── delete-image.test.tsx\n│   ├── delete-image.tsx\n│   ├── delete-note.tsx\n│   ├── file.$fileId.tsx\n│   ├── healthcheck.tsx\n│   ├── image-upload.tsx\n│   ├── login.tsx\n│   ├── note-editor.tsx\n│   └── theme.tsx\n├── settings+\n│   ├── profile.photo.tsx\n│   └── profile.tsx\n└── users+\n    ├── $username.tsx\n    └── $username_+\n        ├── notes.$noteId.tsx\n        ├── notes.$noteId_.edit.tsx\n        ├── notes.index.tsx\n        ├── notes.new.tsx\n        └── notes.tsx\n\n9 directories, 54 files\n```\n\n----------------------------------------\n\nTITLE: Remix Route Configuration Using remix-flat-routes\nDESCRIPTION: TSX configuration showing the complete route mapping using remix-flat-routes syntax. Includes nested routes, dynamic parameters, and index routes organized under a root Route component.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/routing.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n\t<Route file=\"root.tsx\">\n\t\t<Route path=\"forgot-password\" file=\"routes/_auth+/forgot-password.tsx\" />\n\t\t<Route path=\"login\" file=\"routes/_auth+/login.tsx\" />\n\t\t<Route path=\"logout\" file=\"routes/_auth+/logout.tsx\" />\n\t\t<Route path=\"onboarding\" file=\"routes/_auth+/onboarding.tsx\" />\n\t\t<Route path=\"reset-password\" file=\"routes/_auth+/reset-password.tsx\" />\n\t\t<Route path=\"signup\" file=\"routes/_auth+/signup.tsx\" />\n\t\t<Route path=\"about\" file=\"routes/_marketing+/about.tsx\" />\n\t\t<Route index file=\"routes/_marketing+/index.tsx\" />\n\t\t<Route path=\"privacy\" file=\"routes/_marketing+/privacy.tsx\" />\n\t\t<Route path=\"support\" file=\"routes/_marketing+/support.tsx\" />\n\t\t<Route path=\"tos\" file=\"routes/_marketing+/tos.tsx\" />\n\t\t<Route path=\"admin/cache\" file=\"routes/admin+/cache.tsx\" />\n\t\t<Route\n\t\t\tpath=\"admin/cache/lru/:cacheKey\"\n\t\t\tfile=\"routes/admin+/cache_.lru.$cacheKey.ts\"\n\t\t/>\n\t\t<Route path=\"admin/cache/sqlite\" file=\"routes/admin+/cache_.sqlite.tsx\">\n\t\t\t<Route path=\":cacheKey\" file=\"routes/admin+/cache_.sqlite.$cacheKey.ts\" />\n\t\t</Route>\n\t\t<Route path=\"me\" file=\"routes/me.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/delete-image\"\n\t\t\tfile=\"routes/resources+/delete-image.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/delete-note\"\n\t\t\tfile=\"routes/resources+/delete-note.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/file/:fileId\"\n\t\t\tfile=\"routes/resources+/file.$fileId.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/healthcheck\"\n\t\t\tfile=\"routes/resources+/healthcheck.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/image-upload\"\n\t\t\tfile=\"routes/resources+/image-upload.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/login\" file=\"routes/resources+/login.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/note-editor\"\n\t\t\tfile=\"routes/resources+/note-editor.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/theme\" file=\"routes/resources+/theme.tsx\" />\n\t\t<Route path=\"settings/profile\" file=\"routes/settings+/profile.tsx\">\n\t\t\t<Route path=\"photo\" file=\"routes/settings+/profile.photo.tsx\" />\n\t\t</Route>\n\t\t<Route path=\"users/:username\" file=\"routes/users+/$username.tsx\" />\n\t\t<Route\n\t\t\tpath=\"users/:username/notes\"\n\t\t\tfile=\"routes/users+/$username_+/notes.tsx\"\n\t\t>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId.tsx\"\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId/edit\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId_.edit.tsx\"\n\t\t\t/>\n\t\t\t<Route path=\"new\" file=\"routes/users+/$username_+/notes.new.tsx\" />\n\t\t\t<Route index file=\"routes/users+/$username_+/notes.index.tsx\" />\n\t\t</Route>\n\t</Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: React Router Configuration in react-router.config.ts\nDESCRIPTION: Configuration options for React Router in a separate react-router.config.ts file, including settings for SSR, build directory, app directory, and URL basename.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from '@react-router/dev/config';\n\nexport default {\n  /**\n   * Whether to enable Server-Side Rendering (SSR) support.\n   * @default true\n   */\n  ssr: true,\n\n  /**\n   * Build directory for output files\n   * @default 'build'\n   */\n  buildDirectory: 'dist',\n\n  /**\n   * Application source directory\n   * @default 'app'\n   */\n  appDirectory: 'app',\n\n  /**\n   * Base URL path\n   * @default '/'\n   */\n  basename: '/my-app',\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Timing in React Router Route Handler\nDESCRIPTION: Demonstrates a complete implementation of server timing in a React Router route handler, including timing setup, function wrapping, header creation, and header combining. Shows how to measure database query performance for user and notes retrieval.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/server-timing.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tcombineServerTimings,\n\tmakeTimings,\n\ttime,\n} from '#app/utils/timing.server.ts'\nimport { type Route } from './+types/notes.ts'\n\nexport async function loader({ params }: Route.LoaderArgs) {\n\tconst timings = makeTimings('notes loader') // <-- 1. Setup Timings\n\t// 2. Time functions\n\tconst owner = await time(\n\t\t() =>\n\t\t\tprisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tusername: params.username,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tusername: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\timageId: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find user' },\n\t)\n\tif (!owner) {\n\t\tthrow new Response('Not found', { status: 404 })\n\t}\n\t// 2. Time functions\n\tconst notes = await time(\n\t\t() =>\n\t\t\tprisma.note.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\townerId: owner.id,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find notes' },\n\t)\n\treturn json(\n\t\t{ owner, notes },\n\t\t{ headers: { 'Server-Timing': timings.toString() } }, // <-- 3. Create headers\n\t)\n}\n\n// We have a general headers handler to save you from boilerplating.\nexport const headers: HeadersFunction = pipeHeaders\n// this is basically what it does though\nexport const headers: Route.HeadersFunction = ({\n\tloaderHeaders,\n\tparentHeaders,\n}) => {\n\treturn {\n\t\t'Server-Timing': combineServerTimings(parentHeaders, loaderHeaders), // <-- 4. Send headers\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cachified for API Requests in Epic Stack (TSX)\nDESCRIPTION: Example code demonstrating how to use the cachified utility to cache API requests to Tito. This implementation includes time-to-live (TTL) and stale-while-revalidate settings to optimize data fetching while reducing external API calls.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/caching.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cachified, cache } from '#app/utils/cache.server.ts'\nimport { type Timings } from '#app/utils/timing.server.ts'\n\nconst eventSchema = z.object({\n\t/* the schema for events */\n})\n\nexport async function getScheduledEvents({\n\ttimings,\n}: {\n\ttimings?: Timings\n} = {}) {\n\tconst scheduledEvents = await cachified({\n\t\tkey: 'tito:scheduled-events',\n\t\tcache,\n\t\ttimings,\n\t\tgetFreshValue: () => {\n\t\t\t// do a fetch request to the tito API and stuff here\n\t\t\treturn [\n\t\t\t\t/* the events you got from tito */\n\t\t\t]\n\t\t},\n\t\tcheckValue: eventSchema.array(),\n\t\t// Time To Live (ttl) in milliseconds: the cached value is considered valid for 24 hours\n\t\tttl: 1000 * 60 * 60 * 24,\n\t\t// Stale While Revalidate (swr) in milliseconds: if the cached value is less than 30 days\n\t\t// expired, return it while fetching a fresh value in the background\n\t\tstaleWhileRevalidate: 1000 * 60 * 60 * 24 * 30,\n\t})\n\treturn scheduledEvents\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Server Entry Point Implementation\nDESCRIPTION: Complete example of a server.js file that handles both development and production server setup with Express, including static file serving and integration with Rsbuild.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRsbuild, loadConfig } from '@rsbuild/core';\nimport express from 'express';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\nconst isDev = process.env.NODE_ENV !== 'production';\n\nasync function startServer() {\n  if (isDev) {\n    const config = await loadConfig();\n    const rsbuild = await createRsbuild({\n      rsbuildConfig: config.content,\n    });\n    const devServer = await rsbuild.createDevServer();\n    app.use(devServer.middlewares);\n\n    app.use(async (req, res, next) => {\n      try {\n        const bundle = await devServer.environments.node.loadBundle('app');\n        await bundle.app(req, res, next);\n      } catch (e) {\n        next(e);\n      }\n    });\n\n    const port = Number.parseInt(process.env.PORT || '3000', 10);\n    const server = app.listen(port, () => {\n      console.log(`Development server is running on http://localhost:${port}`);\n      devServer.afterListen();\n    });\n    devServer.connectWebSocket({ server });\n  } else {\n    // Production mode\n    app.use(express.static(path.join(__dirname, 'build/client'), {\n      index: false\n    }));\n\n    // Load the server bundle\n    const serverBundle = await import('./build/server/static/js/app.js');\n    // Mount the server app after static file handling\n    app.use(async (req, res, next) => {\n      try {\n        await serverBundle.default.app(req, res, next);\n      } catch (e) {\n        next(e);\n      }\n    });\n\n    const port = Number.parseInt(process.env.PORT || '3000', 10);\n    app.listen(port, () => {\n      console.log(`Production server is running on http://localhost:${port}`);\n    });\n  }\n}\n\nstartServer().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Client-side Permission Checks in TypeScript\nDESCRIPTION: Shows UI utility functions for checking user permissions and roles in the frontend. Demonstrates how to verify user permissions and roles using the useUser hook.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = useUser()\nconst userCanCreateTheirOwnNotes = userHasPermission(user, 'create:note:own')\nconst userIsUser = userHasRole(user, 'user')\n```\n\n----------------------------------------\n\nTITLE: Installing rsbuild-plugin-react-router with package managers\nDESCRIPTION: Command-line instructions for installing the rsbuild-plugin-react-router package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install rsbuild-plugin-react-router\n# or\nyarn add rsbuild-plugin-react-router\n# or\npnpm add rsbuild-plugin-react-router\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Sitemap Entries for Blog Routes in Remix\nDESCRIPTION: Example of implementing dynamic sitemap generation for blog routes using @nasa-gcn/remix-seo. The code demonstrates how to generate sitemap entries from database content while ensuring server-side only execution using vite-env-only/macros.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/seo.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/blog/_layout.tsx\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { serverOnly$ } from 'vite-env-only/macros'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: serverOnly$(async (request) => {\n\t\tconst blogs = await db.blog.findMany()\n\t\treturn blogs.map((blog) => {\n\t\t\treturn { route: `/blog/${blog.slug}`, priority: 0.7 }\n\t\t})\n\t}),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsbuild for Cloudflare Workers Deployment\nDESCRIPTION: Rsbuild configuration specialized for Cloudflare Workers deployment, with settings for module output, chunk splitting, and worker-specific resolution.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport { pluginReactRouter } from 'rsbuild-plugin-react-router';\n\nexport default defineConfig({\n  environments: {\n    node: {\n      performance: {\n        chunkSplit: { strategy: 'all-in-one' },\n      },\n      tools: {\n        rspack: {\n          experiments: { outputModule: true },\n          externalsType: 'module',\n          output: {\n            chunkFormat: 'module',\n            chunkLoading: 'import',\n            workerChunkLoading: 'import',\n            wasmLoading: 'fetch',\n            library: { type: 'module' },\n            module: true,\n          },\n          resolve: {\n            conditionNames: ['workerd', 'worker', 'browser', 'import', 'require'],\n          },\n        },\n      },\n    },\n  },\n  plugins: [pluginReactRouter({customServer: true}), pluginReact()],\n});\n```\n\n----------------------------------------\n\nTITLE: Server-side Permission Check Implementation in TypeScript\nDESCRIPTION: Demonstrates server-side utility functions for checking user permissions and roles. Shows how to verify if a user can perform specific actions or has particular roles.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// server-side only utilities\nconst userCanDeleteAnyUser = await requireUserWithPermission(\n\trequest,\n\t'delete:user:any',\n)\nconst userIsAdmin = await requireUserWithRole(request, 'admin')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cachified for API Data Retrieval in TypeScript React\nDESCRIPTION: This code demonstrates how to use the cachified utility to cache data from a slow third-party API (Tito). It implements a stale-while-revalidate strategy with a 24-hour TTL and 30-day grace period for stale content, allowing for efficient data retrieval without making users wait for fresh data.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/caching.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cachified, cache } from '#app/utils/cache.server.ts'\nimport { type Timings } from '#app/utils/timing.server.ts'\n\nconst eventSchema = z.object({\n\t/* the schema for events */\n})\n\nexport async function getScheduledEvents({\n\ttimings,\n}: {\n\ttimings?: Timings\n} = {}) {\n\tconst scheduledEvents = await cachified({\n\t\tkey: 'tito:scheduled-events',\n\t\tcache,\n\t\ttimings,\n\t\tgetFreshValue: () => {\n\t\t\t// do a fetch request to the tito API and stuff here\n\t\t\treturn [\n\t\t\t\t/* the events you got from tito */\n\t\t\t]\n\t\t},\n\t\tcheckValue: eventSchema.array(),\n\t\t// Time To Live (ttl) in milliseconds: the cached value is considered valid for 24 hours\n\t\tttl: 1000 * 60 * 60 * 24,\n\t\t// Stale While Revalidate (swr) in milliseconds: if the cached value is less than 30 days\n\t\t// expired, return it while fetching a fresh value in the background\n\t\tstaleWhileRevalidate: 1000 * 60 * 60 * 24 * 30,\n\t})\n\treturn scheduledEvents\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions and Roles (Server-side TypeScript)\nDESCRIPTION: Demonstrates server-side utilities for checking user permissions and roles. It shows how to require a user with a specific permission or role.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// server-side only utilities\nconst userCanDeleteAnyUser = await requireUserWithPermission(\n\trequest,\n\t'delete:user:any',\n)\nconst userIsAdmin = await requireUserWithRole(request, 'admin')\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Cloudflare Workers\nDESCRIPTION: Wrangler.toml configuration file for deploying a React Router application to Cloudflare Workers, including worker settings, asset paths, and environment variables.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nworkers_dev = true\nname = \"my-react-router-worker\"\ncompatibility_date = \"2024-11-18\"\nmain = \"./build/server/static/js/app.js\"\nassets = { directory = \"./build/client/\" }\n\n[vars]\nVALUE_FROM_CLOUDFLARE = \"Hello from Cloudflare\"\n\n# Optional build configuration\n# [build]\n# command = \"npm run build\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP to HTTPS Redirect in Express\nDESCRIPTION: Express middleware that forces all traffic to HTTPS by checking the X-Forwarded-Proto header and redirecting HTTP requests. This doesn't affect localhost and uses Fly's request headers for redirect determination.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst proto = req.get('X-Forwarded-Proto')\n\tconst host = getHost(req)\n\tif (proto === 'http') {\n\t\tres.set('X-Forwarded-Proto', 'https')\n\t\tres.redirect(`https://${host}${req.originalUrl}`)\n\t\treturn\n\t}\n\tnext()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Request Handler for Custom Server\nDESCRIPTION: Example of creating a server request handler for React Router with customizable context for loaders and actions.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRequestHandler } from '@react-router/express';\n\nexport const app = createRequestHandler({\n  build: () => import('virtual/react-router/server-build'),\n  getLoadContext() {\n    // Add custom context available to your loaders/actions\n    return {\n      // ... your custom context\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cachified for API Data in TypeScript React\nDESCRIPTION: Example of using the cachified utility to cache API responses from Tito. This implementation demonstrates setting TTL (Time To Live) and SWR (Stale While Revalidate) parameters to manage cache freshness and user experience.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/caching.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cachified, cache } from '#app/utils/cache.server.ts'\nimport { type Timings } from '#app/utils/timing.server.ts'\n\nconst eventSchema = z.object({\n\t/* the schema for events */\n})\n\nexport async function getScheduledEvents({\n\ttimings,\n}: {\n\ttimings?: Timings\n} = {}) {\n\tconst scheduledEvents = await cachified({\n\t\tkey: 'tito:scheduled-events',\n\t\tcache,\n\t\ttimings,\n\t\tgetFreshValue: () => {\n\t\t\t// do a fetch request to the tito API and stuff here\n\t\t\treturn [\n\t\t\t\t/* the events you got from tito */\n\t\t\t]\n\t\t},\n\t\tcheckValue: eventSchema.array(),\n\t\t// Time To Live (ttl) in milliseconds: the cached value is considered valid for 24 hours\n\t\tttl: 1000 * 60 * 60 * 24,\n\t\t// Stale While Revalidate (swr) in milliseconds: if the cached value is less than 30 days\n\t\t// expired, return it while fetching a fresh value in the background\n\t\tstaleWhileRevalidate: 1000 * 60 * 60 * 24 * 30,\n\t})\n\treturn scheduledEvents\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced RBAC Schema Implementation in Prisma\nDESCRIPTION: The new RBAC database schema featuring granular permissions with action, entity, and access level controls, plus enhanced role definitions with descriptions.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/decisions/028-permissions-rbac.md#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Permission {\n  id          String @id @default(cuid())\n  action      String // e.g. create, read, update, delete\n  entity      String // e.g. note, user, etc.\n  access      String // e.g. own or any\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n\n  @@unique([action, entity, access])\n}\n\nmodel Role {\n  id          String @id @default(cuid())\n  name        String @unique\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare Worker with React Router\nDESCRIPTION: TypeScript configuration for setting up a Cloudflare Worker entry point with React Router integration. Includes type declarations for Cloudflare environment and React Router context.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRequestHandler } from 'react-router';\n\ndeclare global {\n  interface CloudflareEnvironment extends Env {}\n  interface ImportMeta {\n    env: {\n      MODE: string;\n    };\n  }\n}\n\ndeclare module 'react-router' {\n  export interface AppLoadContext {\n    cloudflare: {\n      env: CloudflareEnvironment;\n      ctx: ExecutionContext;\n    };\n  }\n}\n\n// @ts-expect-error - virtual module provided by React Router at build time\nimport * as serverBuild from 'virtual:react-router/server-build';\n\nconst requestHandler = createRequestHandler(serverBuild, import.meta.env.MODE);\n\nexport default {\n  fetch(request, env, ctx) {\n    return requestHandler(request, {\n      cloudflare: { env, ctx },\n    });\n  },\n} satisfies ExportedHandler<CloudflareEnvironment>;\n```\n\n----------------------------------------\n\nTITLE: Initial Limited Role-Permission Model in Prisma\nDESCRIPTION: The original schema design showing a basic role and permission model with limited functionality. Each role can have multiple users and permissions, and each permission can be associated with multiple roles.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/decisions/028-permissions-rbac.md#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Role {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n\nmodel Permission {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n}\n```\n\n----------------------------------------\n\nTITLE: Improved RBAC Permissions Model in Prisma\nDESCRIPTION: The new RBAC schema implementation with more fine-grained control. Permissions now have action, entity, and access fields allowing for more specific access control rules, while maintaining the many-to-many relationship with roles.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/decisions/028-permissions-rbac.md#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Permission {\n  id          String @id @default(cuid())\n  action      String // e.g. create, read, update, delete\n  entity      String // e.g. note, user, etc.\n  access      String // e.g. own or any\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n\n  @@unique([action, entity, access])\n}\n\nmodel Role {\n  id          String @id @default(cuid())\n  name        String @unique\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Schema for Multi-Provider Auth in Prisma\nDESCRIPTION: Prisma schema definition for the Connection model that enables multiple authentication providers. The schema includes fields for provider identification, timestamps, and establishes relationships with the User model along with unique constraints for data integrity.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/decisions/030-github-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Connection {\n  id           String @id @default(cuid())\n  providerName String\n  providerId   String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  userId String\n\n  @@unique([providerName, providerId])\n  @@unique([providerId, userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Permission Checks in TypeScript\nDESCRIPTION: Demonstrates server-side utility functions for checking user permissions and roles. Shows how to verify if a user has specific permissions or roles using async functions.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userCanDeleteAnyUser = await requireUserWithPermission(\n\trequest,\n\t'delete:user:any',\n)\nconst userIsAdmin = await requireUserWithRole(request, 'admin')\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Model Schema in Prisma\nDESCRIPTION: Database schema definition for the Connection model that enables multiple auth provider support. The model includes fields for provider identification, timestamps, and relationships with the User model. It establishes unique constraints for provider-specific IDs and user associations.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/decisions/030-github-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Connection {\n  id           String @id @default(cuid())\n  providerName String\n  providerId   String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  userId String\n\n  @@unique([providerName, providerId])\n  @@unique([providerId, userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Sitemap Generation for Blog Routes in Remix\nDESCRIPTION: Example of configuring sitemap entries for blog routes using @nasa-gcn/remix-seo. Uses vite-env-only/macros for server-side only execution and generates sitemap entries from database blog entries.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/seo.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/blog/_layout.tsx\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { serverOnly$ } from 'vite-env-only/macros'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: serverOnly$(async (request) => {\n\t\tconst blogs = await db.blog.findMany()\n\t\treturn blogs.map((blog) => {\n\t\t\treturn { route: `/blog/${blog.slug}`, priority: 0.7 }\n\t\t})\n\t}),\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Toast Notification in Epic Stack\nDESCRIPTION: Demonstrates how to use the redirectWithToast utility to redirect users with a toast notification. This example shows creating or updating a note with a success message.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/toasts.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nreturn redirectWithToast(`/users/${note.owner.username}/notes/${note.id}`, {\n\tdescription: id ? 'Note updated' : 'Note created',\n})\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions and Roles (UI TypeScript)\nDESCRIPTION: Illustrates UI utilities for checking user permissions and roles. It demonstrates how to check if a user has a specific permission or role in the user interface context.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// UI utilities\nconst user = useUser()\nconst userCanCreateTheirOwnNotes = userHasPermission(user, 'create:note:own')\nconst userIsUser = userHasRole(user, 'user')\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Playwright Test\nDESCRIPTION: Example of using a login fixture in Playwright tests to test authenticated features without going through the login flow. The fixture automatically handles user cleanup after the test.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('my test', async ({ page, login }) => {\n\tconst user = await login()\n\t// you are now logged in\n})\n```\n\n----------------------------------------\n\nTITLE: Client-side Permission Check Implementation in TypeScript\nDESCRIPTION: Shows UI utility functions for checking user permissions and roles in the frontend. Demonstrates how to verify user capabilities and role assignments in the client interface.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// UI utilities\nconst user = useUser()\nconst userCanCreateTheirOwnNotes = userHasPermission(user, 'create:note:own')\nconst userIsUser = userHasRole(user, 'user')\n```\n\n----------------------------------------\n\nTITLE: Modifying Content Security Policy in server/index.ts\nDESCRIPTION: This code snippet demonstrates how to adjust the Content Security Policy to allow additional resources, specifically adding 'https://*.example.com' to the 'img-src' directive.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\t\tcontentSecurityPolicy: {\n\t\t\tdirectives: {\n\t\t\t\t'connect-src': [\n\t\t\t\t\tMODE === 'development' ? 'ws:' : null,\n\t\t\t\t\tprocess.env.SENTRY_DSN ? '*.sentry.io' : null,\n\t\t\t\t\t\"'self'\",\n\t\t\t\t].filter(Boolean),\n\t\t\t\t'font-src': [\"'self'\"],\n\t\t\t\t'frame-src': [\"'self'\"],\n-\t\t\t\t'img-src': [\"'self'\", 'data:'],\n+\t\t\t\t'img-src': [\"'self'\", 'data:', 'https://*.example.com']\n```\n\n----------------------------------------\n\nTITLE: Combining Toast Headers with Custom Headers in Epic Stack\nDESCRIPTION: Demonstrates how to use combineHeaders utility to merge toast headers with custom headers in a JSON response. This example combines a success toast for note update with an additional custom header.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/toasts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: combineHeaders(\n\t\t\tawait createToastHeaders({\n\t\t\t\ttoast: {\n\t\t\t\t\tdescription: 'Note updated',\n\t\t\t\t\ttype: 'success',\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{ 'x-foo': 'bar' },\n\t\t),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: New RBAC Model Schema Implementation in Prisma\nDESCRIPTION: The improved Role-Based Access Control schema with fine-grained permissions. This model introduces action, entity, and access fields for more detailed control, along with a unique constraint to prevent duplicates.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/decisions/028-permissions-rbac.md#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Permission {\n  id          String @id @default(cuid())\n  action      String // e.g. create, read, update, delete\n  entity      String // e.g. note, user, etc.\n  access      String // e.g. own or any\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n\n  @@unique([action, entity, access])\n}\n\nmodel Role {\n  id          String @id @default(cuid())\n  name        String @unique\n  description String @default(\"\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating User in Playwright Test for React Router Plugin\nDESCRIPTION: This code snippet demonstrates how to use a login fixture in Playwright tests to authenticate a user without going through the login flow. The fixture automatically deletes the user at the end of the test to keep the local database clean and tests isolated.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('my test', async ({ page, login }) => {\n\tconst user = await login()\n\t// you are now logged in\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Timing in React Router Route\nDESCRIPTION: This example demonstrates how to implement server timing in a React Router route for measuring database query performance. It shows the complete flow of creating timings, wrapping functions to time them, and sending the results via Server-Timing headers.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/server-timing.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tcombineServerTimings,\n\tmakeTimings,\n\ttime,\n} from '#app/utils/timing.server.ts'\nimport { type Route } from './+types/notes.ts'\n\nexport async function loader({ params }: Route.LoaderArgs) {\n\tconst timings = makeTimings('notes loader') // <-- 1. Setup Timings\n\t// 2. Time functions\n\tconst owner = await time(\n\t\t() =>\n\t\t\tprisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tusername: params.username,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\tusername: true,\n\t\t\t\t\tname: true,\n\t\t\t\t\timageId: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find user' },\n\t)\n\tif (!owner) {\n\t\tthrow new Response('Not found', { status: 404 })\n\t}\n\t// 2. Time functions\n\tconst notes = await time(\n\t\t() =>\n\t\t\tprisma.note.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\townerId: owner.id,\n\t\t\t\t},\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t{ timings, type: 'find notes' },\n\t)\n\treturn json(\n\t\t{ owner, notes },\n\t\t{ headers: { 'Server-Timing': timings.toString() } }, // <-- 3. Create headers\n\t)\n}\n\n// We have a general headers handler to save you from boilerplating.\nexport const headers: HeadersFunction = pipeHeaders\n// this is basically what it does though\nexport const headers: Route.HeadersFunction = ({ loaderHeaders, parentHeaders }) => {\n\treturn {\n\t\t'Server-Timing': combineServerTimings(parentHeaders, loaderHeaders), // <-- 4. Send headers\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Timezone via Client Hints API\nDESCRIPTION: Example code patterns for accessing user timezone through client hints, both on server-side and in UI components. Uses getHints() for server-side access and useHints() hook for client-side components.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/timezone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetHints(request).timeZone // server-side access\nuseHints().timeZone // client-side access\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Model Schema in Prisma\nDESCRIPTION: Prisma schema definition for the Connection model that handles third-party authentication relationships. The model includes fields for provider details, timestamps, and user relationships with unique constraints to prevent duplicate connections.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/decisions/030-github-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Connection {\n  id           String @id @default(cuid())\n  providerName String\n  providerId   String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  userId String\n\n  @@unique([providerName, providerId])\n  @@unique([providerId, userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Toast Headers with Custom Headers in Epic Stack\nDESCRIPTION: Illustrates how to combine toast headers with other custom headers using the combineHeaders utility when returning a JSON response.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/toasts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: combineHeaders(\n\t\t\tawait createToastHeaders({\n\t\t\t\ttoast: {\n\t\t\t\t\tdescription: 'Note updated',\n\t\t\t\t\ttype: 'success',\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{ 'x-foo': 'bar' },\n\t\t),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Remix Flat Routes\nDESCRIPTION: Demonstrates the TSX route configuration generated from the file structure. Shows how routes are nested and organized using the remix-flat-routes convention.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/routing.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n\t<Route file=\"root.tsx\">\n\t\t<Route path=\"forgot-password\" file=\"routes/_auth+/forgot-password.tsx\" />\n\t\t<Route path=\"login\" file=\"routes/_auth+/login.tsx\" />\n\t\t<Route path=\"logout\" file=\"routes/_auth+/logout.tsx\" />\n\t\t<Route path=\"onboarding\" file=\"routes/_auth+/onboarding.tsx\" />\n\t\t<Route path=\"reset-password\" file=\"routes/_auth+/reset-password.tsx\" />\n\t\t<Route path=\"signup\" file=\"routes/_auth+/signup.tsx\" />\n\t\t<Route path=\"about\" file=\"routes/_marketing+/about.tsx\" />\n\t\t<Route index file=\"routes/_marketing+/index.tsx\" />\n\t\t<Route path=\"privacy\" file=\"routes/_marketing+/privacy.tsx\" />\n\t\t<Route path=\"support\" file=\"routes/_marketing+/support.tsx\" />\n\t\t<Route path=\"tos\" file=\"routes/_marketing+/tos.tsx\" />\n\t\t<Route path=\"admin/cache\" file=\"routes/admin+/cache.tsx\" />\n\t\t<Route\n\t\t\tpath=\"admin/cache/lru/:cacheKey\"\n\t\t\tfile=\"routes/admin+/cache_.lru.$cacheKey.ts\"\n\t\t/>\n\t\t<Route path=\"admin/cache/sqlite\" file=\"routes/admin+/cache_.sqlite.tsx\">\n\t\t\t<Route path=\":cacheKey\" file=\"routes/admin+/cache_.sqlite.$cacheKey.ts\" />\n\t\t</Route>\n\t\t<Route path=\"me\" file=\"routes/me.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/delete-image\"\n\t\t\tfile=\"routes/resources+/delete-image.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/delete-note\"\n\t\t\tfile=\"routes/resources+/delete-note.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/file/:fileId\"\n\t\t\tfile=\"routes/resources+/file.$fileId.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/healthcheck\"\n\t\t\tfile=\"routes/resources+/healthcheck.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/image-upload\"\n\t\t\tfile=\"routes/resources+/image-upload.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/login\" file=\"routes/resources+/login.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/note-editor\"\n\t\t\tfile=\"routes/resources+/note-editor.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/theme\" file=\"routes/resources+/theme.tsx\" />\n\t\t<Route path=\"settings/profile\" file=\"routes/settings+/profile.tsx\">\n\t\t\t<Route path=\"photo\" file=\"routes/settings+/profile.photo.tsx\" />\n\t\t</Route>\n\t\t<Route path=\"users/:username\" file=\"routes/users+/$username.tsx\" />\n\t\t<Route\n\t\t\tpath=\"users/:username/notes\"\n\t\t\tfile=\"routes/users+/$username_+/notes.tsx\"\n\t\t>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId.tsx\"\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId/edit\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId_.edit.tsx\"\n\t\t\t/>\n\t\t\t<Route path=\"new\" file=\"routes/users+/$username_+/notes.new.tsx\" />\n\t\t\t<Route index file=\"routes/users+/$username_+/notes.index.tsx\" />\n\t\t</Route>\n\t</Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Slashes in Express URLs\nDESCRIPTION: Express middleware that removes trailing slashes from URLs for SEO optimization. Implements a 301 redirect to the non-trailing slash version while preserving query parameters.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tif (req.path.endsWith('/') && req.path.length > 1) {\n\t\tconst query = req.url.slice(req.path.length)\n\t\tconst safepath = req.path.slice(0, -1).replace(/\\/+/g, '/')\n\t\tres.redirect(301, safepath + query)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Environment Variables in Epic Stack\nDESCRIPTION: Environment variable configuration for GitHub OAuth authentication. Includes client ID and secret variables required for setting up GitHub OAuth integration in the Epic Stack application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# some other secrets and env vars\n...\n\nGITHUB_CLIENT_ID=\"72fa***************a\"\nGITHUB_CLIENT_SECRET=\"b2c6d323b**************************eae016\"\n```\n\n----------------------------------------\n\nTITLE: Updating Content Security Policy Directives in React\nDESCRIPTION: Shows how to modify Content Security Policy directives to allow additional image sources. The example demonstrates adding a new domain to the img-src directive.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\t\tcontentSecurityPolicy: {\n\t\t\tdirectives: {\n\t\t\t\t'connect-src': [\n\t\t\t\t\tMODE === 'development' ? 'ws:' : null,\n\t\t\t\t\tprocess.env.SENTRY_DSN ? '*.sentry.io' : null,\n\t\t\t\t\t\"'self'\",\n\t\t\t\t].filter(Boolean),\n\t\t\t\t'font-src': [\"'self'\"],\n\t\t\t\t'frame-src': [\"'self'\"],\n-\t\t\t\t'img-src': [\"'self'\", 'data:'],\n+\t\t\t\t'img-src': [\"'self'\", 'data:', 'https://*.example.com']\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP to HTTPS Redirect in Express\nDESCRIPTION: Express middleware that forces HTTPS by checking X-Forwarded-Proto header and redirecting HTTP requests to HTTPS. This implementation specifically works with Fly.io's request headers.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst proto = req.get('X-Forwarded-Proto')\n\tconst host = getHost(req)\n\tif (proto === 'http') {\n\t\tres.set('X-Forwarded-Proto', 'https')\n\t\tres.redirect(`https://${host}${req.originalUrl}`)\n\t\treturn\n\t}\n\tnext()\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Remix Routes\nDESCRIPTION: File system organization showing the route structure using remix-flat-routes convention. Demonstrates nested routing with folders like _auth+, _marketing+, admin+, and resources+.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/routing.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/routes\n├── _auth+\n│   ├── forgot-password.tsx\n│   ├── login.tsx\n│   ├── logout.tsx\n│   ├── onboarding.tsx\n│   ├── reset-password.tsx\n│   └── signup.tsx\n├── _marketing+\n│   ├── about.tsx\n│   ├── index.tsx\n│   ├── logos\n│   │   ├── logos.ts\n│   │   └── ...\n│   ├── privacy.tsx\n│   ├── support.tsx\n│   └── tos.tsx\n├── admin+\n│   ├── cache.tsx\n│   ├── cache_.lru.$cacheKey.ts\n│   ├── cache_.sqlite.$cacheKey.ts\n│   └── cache_.sqlite.tsx\n├── me.tsx\n├── resources+\n│   ├── delete-image.test.tsx\n│   ├── delete-image.tsx\n│   ├── delete-note.tsx\n│   ├── file.$fileId.tsx\n│   ├── healthcheck.tsx\n│   ├── image-upload.tsx\n│   ├── login.tsx\n│   ├── note-editor.tsx\n│   └── theme.tsx\n├── settings+\n│   ├── profile.photo.tsx\n│   └── profile.tsx\n└── users+\n    ├── $username.tsx\n    └── $username_+\n        ├── notes.$noteId.tsx\n        ├── notes.$noteId_.edit.tsx\n        ├── notes.index.tsx\n        ├── notes.new.tsx\n        └── notes.tsx\n\n9 directories, 54 files\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Slashes in Express URLs\nDESCRIPTION: Middleware that automatically removes trailing slashes from URLs for SEO optimization. This prevents search engines from treating URLs like '/foo/' and '/foo' as separate pages with duplicate content by implementing a 301 redirect.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tif (req.path.endsWith('/') && req.path.length > 1) {\n\t\tconst query = req.url.slice(req.path.length)\n\t\tconst safepath = req.path.slice(0, -1).replace(/\\/+/g, '/')\n\t\tres.redirect(301, safepath + query)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Redirecting WWW to Non-WWW in Express\nDESCRIPTION: Express middleware that redirects www traffic to the root domain using 301 redirects. Alternative implementation for websites preferring non-www URLs as their canonical domain.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://${host.slice(4)}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Fly.io Database and Consul Configuration\nDESCRIPTION: Commands for setting up persistent storage and Consul attachment for database management.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]-staging\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly consul attach --app [YOUR_APP_NAME]\nfly consul attach --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Excluding Routes from Sitemap in Remix\nDESCRIPTION: Example showing how to exclude specific routes from the sitemap generation by returning null in the getSitemapEntries handler.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/seo.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// in your routes/url-that-doesnt-need-sitemap\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { type Route } from './+types/sitemap[.]xml.ts'\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\t/**/\n}\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Non-WWW to WWW in Express\nDESCRIPTION: Express middleware that redirects non-www traffic to www subdomain using 301 redirects. Designed for use with Fly.io hosting where DNS level redirects are not supported.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (!host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://www.${host}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Redirecting WWW to Non-WWW Domains in Express\nDESCRIPTION: Middleware that redirects traffic from the www subdomain to the root domain. This approach is used with Fly.io deployments and requires registering SSL certificates for both domains to handle traffic before the redirect.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://${host.slice(4)}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Redirecting Non-WWW to WWW Domain in Express\nDESCRIPTION: Express middleware that redirects non-www traffic to www subdomain using a 301 redirect. Requires SSL certificates for both www and root domains to be configured in Fly.io.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (!host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://www.${host}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Redirecting WWW to Non-WWW Domain in Express\nDESCRIPTION: Express middleware that redirects www traffic to the root domain using a 301 redirect. Requires SSL certificates for both www and root domains to be configured in Fly.io.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://${host.slice(4)}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io App Secrets\nDESCRIPTION: Commands for setting up session and honeypot secrets in both staging and production environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]-staging\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set ALLOW_INDEXING=false --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Font Stylesheet in React\nDESCRIPTION: These TypeScript React snippets show how to import a custom font stylesheet and add it to the links array in the root component.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\nimport fontStyleSheetUrl from './styles/yourfont.css?url'\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\n...\n{ rel: 'preload', href: fontStyleSheetUrl, as: 'style' },\n{ rel: 'stylesheet', href: fontStyleSheetUrl },\n```\n\n----------------------------------------\n\nTITLE: Creating Toast Headers without Redirection in Epic Stack\nDESCRIPTION: Shows how to use createToastHeaders directly to add a toast notification to a JSON response without redirecting. This example sets a success message for updating a note.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/toasts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: await createToastHeaders({\n\t\t\tdescription: 'Note updated',\n\t\t\ttype: 'success',\n\t\t}),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS variables for custom fonts in Tailwind\nDESCRIPTION: Sets the custom font in CSS variables within the Tailwind CSS base layer, which allows for easy font management throughout the application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Environment Variables in Epic Stack\nDESCRIPTION: Example of environment variable configuration for GitHub OAuth authentication. Shows the required variables GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET with redacted values.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# some other secrets and env vars\n...\n\nGITHUB_CLIENT_ID=\"72fa***************a\"\nGITHUB_CLIENT_SECRET=\"b2c6d323b**************************eae016\"\n```\n\n----------------------------------------\n\nTITLE: Docker Entry Point Script\nDESCRIPTION: Shell script for initializing the database and starting the application in Docker container.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh -ex\n\nnpx prisma migrate deploy\nsqlite3 /litefs/data/sqlite.db \"PRAGMA journal_mode = WAL;\"\nsqlite3 /litefs/data/cache.db \"PRAGMA journal_mode = WAL;\"\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Font Stylesheet in React Router\nDESCRIPTION: Imports and configures custom font stylesheet in the root route component.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\nimport fontStyleSheetUrl from './styles/yourfont.css?url'\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\n...\n{ rel: 'preload', href: fontStyleSheetUrl, as: 'style' },\n{ rel: 'stylesheet', href: fontStyleSheetUrl },\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Remix Flat Routes\nDESCRIPTION: Shows the file and directory structure used by remix-flat-routes in the Epic Stack application. Demonstrates how routes are organized into different sections like _auth, _marketing, admin, resources, settings, and users.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/routing.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/routes\n├── _auth+\n│   ├── forgot-password.tsx\n│   ├── login.tsx\n│   ├── logout.tsx\n│   ├── onboarding.tsx\n│   ├── reset-password.tsx\n│   └── signup.tsx\n├── _marketing+\n│   ├── about.tsx\n│   ├── index.tsx\n│   ├── logos\n│   │   ├── logos.ts\n│   │   └── ...\n│   ├── privacy.tsx\n│   ├── support.tsx\n│   └── tos.tsx\n├── admin+\n│   ├── cache.tsx\n│   ├── cache_.lru.$cacheKey.ts\n│   ├── cache_.sqlite.$cacheKey.ts\n│   └── cache_.sqlite.tsx\n├── me.tsx\n├── resources+\n│   ├── delete-image.test.tsx\n│   ├── delete-image.tsx\n│   ├── delete-note.tsx\n│   ├── file.$fileId.tsx\n│   ├── healthcheck.tsx\n│   ├── image-upload.tsx\n│   ├── login.tsx\n│   ├── note-editor.tsx\n│   └── theme.tsx\n├── settings+\n│   ├── profile.photo.tsx\n│   └── profile.tsx\n└── users+\n    ├── $username.tsx\n    └── $username_+\n        ├── notes.$noteId.tsx\n        ├── notes.$noteId_.edit.tsx\n        ├── notes.index.tsx\n        ├── notes.new.tsx\n        └── notes.tsx\n\n9 directories, 54 files\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key in Fly.io Environment\nDESCRIPTION: Commands to set the RESEND_API_KEY secret for both production and staging environments in Fly.io deployment platform\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/email.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands for building and running the Docker container with proper environment variables and volume mounting.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# builds the docker container\ndocker build -t epic-stack . -f other/Dockerfile --build-arg COMMIT_SHA=`git rev-parse --short HEAD`\n\n# mountpoint for your sqlite databases\nmkdir ~/litefs\n\n# Runs the docker container.\ndocker run -d -p 8081:8081 -e SESSION_SECRET='somesecret' -e HONEYPOT_SECRET='somesecret' -e FLY='false' -v ~/litefs:/litefs epic-stack\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Font Caching\nDESCRIPTION: This TypeScript snippet shows how to configure server-side caching for font files using Express.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// server/index.ts\n...\napp.use(\n   '/fonts',\n   // Can aggressively cache fonts as they don't change often\n   express.static('public/fonts', { immutable: true, maxAge: '1y' }),\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Slashes in Express URLs\nDESCRIPTION: Express middleware that automatically removes trailing slashes from URLs for SEO optimization. Redirects URLs with trailing slashes to their non-trailing slash equivalents using a 301 redirect.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tif (req.path.endsWith('/') && req.path.length > 1) {\n\t\tconst query = req.url.slice(req.path.length)\n\t\tconst safepath = req.path.slice(0, -1).replace(/\\/+/g, '/')\n\t\tres.redirect(301, safepath + query)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Manual project setup commands\nDESCRIPTION: A sequence of shell commands to manually set up the project including cloning, environment setup, dependency installation, database migration, and validation steps.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <your-fork>\ncd ./epic-stack\n\n# copy the .env.example to .env\n#   everything's mocked out during development so you shouldn't need to\n#   change any of these values unless you want to hit real environments.\ncp .env.example .env\n\n# Install deps\nnpm install\n\n# setup database\nprisma migrate reset --force\n\n# Install playwright browsers\nnpm run test:e2e:install\n\n# run build, typecheck, linting\nnpm run validate\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Theme with Custom Font\nDESCRIPTION: This TypeScript snippet demonstrates how to import the default Tailwind theme and extend it with a custom font family.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport defaultTheme from 'tailwindcss/defaultTheme.js'\n// tailwind.config.ts\nextend: {\n\t...extendedTheme,\n\tfontFamily: {\n\t\tsans: ['var(--font-sans)', ...defaultTheme.fontFamily.sans],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands for building and running the Docker container locally with necessary environment variables and volume mounting.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t epic-stack . -f other/Dockerfile --build-arg COMMIT_SHA=`git rev-parse --short HEAD`\nmkdir ~/litefs\ndocker run -d -p 8081:8081 -e SESSION_SECRET='somesecret' -e HONEYPOT_SECRET='somesecret' -e FLY='false' -v ~/litefs:/litefs epic-stack\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Static Font Serving\nDESCRIPTION: Sets up Express static file serving for font files with aggressive caching.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// server/index.ts\n...\napp.use(\n   '/fonts',\n   // Can aggressively cache fonts as they don't change often\n   express.static('public/fonts', { immutable: true, maxAge: '1y' }),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Entry Point Script\nDESCRIPTION: Shell script for Docker entry point, handling database migrations and application startup.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh -ex\n\nnpx prisma migrate deploy\nsqlite3 /litefs/data/sqlite.db \"PRAGMA journal_mode = WAL;\"\nsqlite3 /litefs/data/cache.db \"PRAGMA journal_mode = WAL;\"\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Font Metric Override CSS Example\nDESCRIPTION: This CSS snippet shows an example of font metric overrides generated by fontpie for a custom font.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n\tfont-family: 'NunitoSans Fallback';\n\tfont-style: normal;\n\tfont-weight: 200;\n\tsrc: local('Arial');\n\tascent-override: 103.02%;\n\tdescent-override: 35.97%;\n\tline-gap-override: 0%;\n\tsize-adjust: 98.13%;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Primary Instance Status with Fly CLI\nDESCRIPTION: Command to check the status of all instances and identify the primary instance in a Fly.io deployment.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly status --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring font variables with fallback fonts\nDESCRIPTION: Updates the CSS variables to include both the custom font and its metric-overridden fallback font to prevent layout shifts during font loading.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n/* tailwind.css */\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont> <YourFontFallback>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Routes from Sitemap in Remix\nDESCRIPTION: Example showing how to exclude specific routes from the sitemap by returning null in the getSitemapEntries handler using @nasa-gcn/remix-seo.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/seo.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// in your routes/url-that-doesnt-need-sitemap\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { type Route } from './+types/sitemap[.]xml.ts'\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\t/**/\n}\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n```\n\n----------------------------------------\n\nTITLE: Original Limited Role and Permission Model Schema in Prisma\nDESCRIPTION: The initial schema design with a simple Role and Permission model, which was limited in its capabilities and not based on real-world scenarios. This model only had basic name fields without specific access controls.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/decisions/028-permissions-rbac.md#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Role {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n\nmodel Permission {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container\nDESCRIPTION: Commands for building the Docker container, creating a mount point for SQLite databases, and running the container.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t epic-stack . -f other/Dockerfile --build-arg COMMIT_SHA=`git rev-parse --short HEAD`\n\nmkdir ~/litefs\n\ndocker run -d -p 8081:8081 -e SESSION_SECRET='somesecret' -e HONEYPOT_SECRET='somesecret' -e FLY='false' -v ~/litefs:/litefs epic-stack\n```\n\n----------------------------------------\n\nTITLE: Generating Font Metric Overrides from CSS with Fontpie\nDESCRIPTION: This bash command shows how to use fontpie-from-css to generate font metric overrides from a CSS file containing multiple font definitions.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie-from-css ./public/fonts/yourfont/yourfont.css\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Port Proxy for Prisma Studio\nDESCRIPTION: Command to establish a proxy connection between local port 5556 and remote Prisma Studio port 5555.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfly proxy 5556:5555 --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Typescript Server Configuration Reference\nDESCRIPTION: Reference to server/index.ts file where security configurations like CSP and rate limiting are managed. This file contains key security settings including Content Security Policy configuration and express-rate-limit implementation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/security.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nserver/index.ts\n```\n\n----------------------------------------\n\nTITLE: Combining Toast Headers with Additional Headers\nDESCRIPTION: Shows how to combine toast notification headers with other custom headers using the combineHeaders utility.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/toasts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: combineHeaders(\n\t\t\tawait createToastHeaders({\n\t\t\t\ttoast: {\n\t\t\t\t\tdescription: 'Note updated',\n\t\t\t\t\ttype: 'success',\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{ 'x-foo': 'bar' },\n\t\t),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Sentry DSN Secret in Fly.io for Runtime Use\nDESCRIPTION: This command sets the Sentry DSN secret in Fly.io to be used as an environment variable during runtime. The DSN is a unique identifier that authenticates the connection between your application and Sentry.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SENTRY_DSN=<your_dsn>\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Setup Commands\nDESCRIPTION: Series of commands for setting up and executing database seeding in a production environment.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncp prisma/seed.ts ./prod-seed.local.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx prisma migrate reset --skip-seed --force\n```\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx tsx ./prod-seed.local.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Imports Field\nDESCRIPTION: Configuration example showing the imports field syntax in package.json for setting up root-level path aliases. The pattern '#*' maps to './*' allowing imports from the root directory.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/decisions/031-imports.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"#*\": \"./*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Toast Notification in Epic Stack\nDESCRIPTION: Demonstrates how to use redirectWithToast utility to redirect users with a toast notification. This is commonly used after creating or updating a note.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/toasts.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nreturn redirectWithToast(`/users/${note.owner.username}/notes/${note.id}`, {\n\tdescription: id ? 'Note updated' : 'Note created',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Toast Headers without Redirect\nDESCRIPTION: Demonstrates how to create toast notifications using createToastHeaders utility when returning a JSON response without redirecting.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/toasts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: await createToastHeaders({\n\t\t\tdescription: 'Note updated',\n\t\t\ttype: 'success',\n\t\t}),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Production Secrets with Fly.io CLI\nDESCRIPTION: Commands for setting secret environment variables in both production and staging environments using the Fly.io CLI. Shows how to set the TITO_API_SECRET for both environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set TITO_API_SECRET=some_secret_value\nfly secrets set TITO_API_SECRET=some_secret_value --app [YOUR_STAGING_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Resetting Production Database Migration\nDESCRIPTION: Command to reset and reapply migrations on a production database instance.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npx prisma migrate reset --skip-seed --force\" --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Creating Swap File Commands for Linux Container\nDESCRIPTION: Commands required to create and enable a swap file on a mounted volume in a Linux container environment. The process involves allocating space with fallocate, setting up the swap area with mkswap, and enabling it with swapon.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/decisions/010-memory-swap.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfallocate\nmkswap\nswapon\n```\n\n----------------------------------------\n\nTITLE: Updating All Patch Versions of NPM Packages\nDESCRIPTION: Commands to update all patch versions of packages at once, which should be backward-compatible bug fixes, followed by installing the updated versions and running tests.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u --target patch\n...\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Toast Headers without Redirect in Epic Stack\nDESCRIPTION: Shows how to use createToastHeaders directly to add toast notifications to a JSON response without redirecting the user.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/toasts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn json(\n\t{ success: true },\n\t{\n\t\theaders: await createToastHeaders({\n\t\t\tdescription: 'Note updated',\n\t\t\ttype: 'success',\n\t\t}),\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Testing After Package Updates\nDESCRIPTION: Commands to run unit and end-to-end tests after updating packages to ensure the updates don't break existing functionality.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test -- run\nnpm run test:e2e:run\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Removing Failed Migration\nDESCRIPTION: SQL query to remove a faulty migration entry from the _prisma_migrations table.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM _prisma_migrations WHERE name = 'migration_name';\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio on Primary Instance\nDESCRIPTION: Commands to list app instances and run Prisma Studio specifically on the primary instance. This ensures database write access for Prisma Studio operations.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfly status --app [YOUR_APP_NAME]\nfly ssh console -C \"npm run prisma:studio\" -s --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Accessing Timezone in React Components\nDESCRIPTION: Example demonstrating how to access user timezone within React components using the useHints hook\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/timezone.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseHints().timeZone\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Sitemap Entries for Blog Posts in Remix\nDESCRIPTION: This code snippet demonstrates how to create dynamic sitemap entries for blog posts using the @nasa-gcn/remix-seo package in a Remix application. It uses the serverOnly$ macro to ensure the function runs only on the server.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/seo.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/blog/_layout.tsx\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { serverOnly$ } from 'vite-env-only/macros'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: serverOnly$(async (request) => {\n\t\tconst blogs = await db.blog.findMany()\n\t\treturn blogs.map((blog) => {\n\t\t\treturn { route: `/blog/${blog.slug}`, priority: 0.7 }\n\t\t})\n\t}),\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Primary Instance Status in Fly.io\nDESCRIPTION: Command to determine which instance is the primary in a Fly.io deployment. This is useful for understanding the current database write access configuration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly status --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Font Configuration\nDESCRIPTION: Extends the Tailwind configuration to include custom font families with fallbacks.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport defaultTheme from 'tailwindcss/defaultTheme.js'\n// tailwind.config.ts\nextend: {\n\t...extendedTheme,\n\tfontFamily: {\n\t\tsans: ['var(--font-sans)', ...defaultTheme.fontFamily.sans],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Package Updates\nDESCRIPTION: Git commands to commit the changes after successfully updating and testing package updates.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"Updated patch versions\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP to HTTPS Redirection in Express\nDESCRIPTION: Middleware that forces all traffic to use HTTPS for security by checking the X-Forwarded-Proto header and redirecting HTTP requests. This improves security by preventing request interception and doesn't affect localhost development.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst proto = req.get('X-Forwarded-Proto')\n\tconst host = getHost(req)\n\tif (proto === 'http') {\n\t\tres.set('X-Forwarded-Proto', 'https')\n\t\tres.redirect(`https://${host}${req.originalUrl}`)\n\t\treturn\n\t}\n\tnext()\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Production Database via Fly.io SSH\nDESCRIPTION: Command to connect to the production database CLI using Fly.io's SSH console. This provides direct access to the database for administrative tasks.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C database-cli\n```\n\n----------------------------------------\n\nTITLE: Importing Playwright Test Utilities\nDESCRIPTION: Example of importing required Playwright test utilities for writing end-to-end tests. Shows how to import the test and expect functions from the Playwright test library.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/custom-node-server/tests/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Adding Font Fallback to CSS Variables\nDESCRIPTION: This CSS snippet demonstrates how to add a font fallback to the CSS variables in the Tailwind configuration file.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* tailwind.css */\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont> <YourFontFallback>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Font Metric Overrides\nDESCRIPTION: Command line examples for generating font metric overrides using fontpie utility.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./local/font/location.woff2 -w font-weight -s normal/italic -n YourFont\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./public/fonts/nunito-sans/nunito-sans-v12-latin_latin-ext-200.woff2 -w 200 -s normal -n NunitoSans\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie-from-css ./public/fonts/yourfont/yourfont.css\n```\n\n----------------------------------------\n\nTITLE: Checking Primary Instance Status with Fly CLI\nDESCRIPTION: Command to check the status of Fly.io instances and identify the primary instance by its role.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly status --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring Font CSS Variables in Tailwind\nDESCRIPTION: Sets up the base font variables in the Tailwind CSS configuration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Fly.io Instances Across Regions\nDESCRIPTION: Commands to scale the number of instances in different regions for a Fly.io deployment. This allows for configuring multi-region setups with specific instance counts.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly scale count 2 --region sjc\nfly scale count 1 --region ams\n```\n\n----------------------------------------\n\nTITLE: Font Metric Override CSS Configuration\nDESCRIPTION: CSS configuration for font metric overrides to prevent layout shift.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n\tfont-family: 'NunitoSans Fallback';\n\tfont-style: normal;\n\tfont-weight: 200;\n\tsrc: local('Arial');\n\tascent-override: 103.02%;\n\tdescent-override: 35.97%;\n\tline-gap-override: 0%;\n\tsize-adjust: 98.13%;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio on Fly.io Instance\nDESCRIPTION: Command to start Prisma Studio on a Fly.io application instance for database management.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npm run prisma:studio\" --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Fallback in Tailwind\nDESCRIPTION: Sets up font fallback configuration in Tailwind CSS root variables.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/fonts.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* tailwind.css */\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont> <YourFontFallback>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio on Fly.io Deployment\nDESCRIPTION: Command to start Prisma Studio on a Fly.io deployed application. This allows for remote database management through Prisma's GUI.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npm run prisma:studio\" --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Adding custom fonts to Tailwind configuration\nDESCRIPTION: Imports the default theme and extends the fontFamily configuration to use the custom font defined in CSS variables, with fallback to default sans fonts.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport defaultTheme from 'tailwindcss/defaultTheme.js'\n// tailwind.config.ts\nextend: {\n\t...extendedTheme,\n\tfontFamily: {\n\t\tsans: ['var(--font-sans)', ...defaultTheme.fontFamily.sans],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using fontpie-from-css to generate overrides from a CSS file\nDESCRIPTION: Shows how to use the fontpie-from-css tool to generate metric overrides for multiple fonts defined in a CSS file, which is useful for batch processing.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie-from-css ./public/fonts/yourfont/yourfont.css\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Database for Seeding\nDESCRIPTION: Command to create a temporary database file for seeding data. This is part of the process for preparing production database seeding.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx prisma migrate reset --skip-seed --force\n```\n\n----------------------------------------\n\nTITLE: Importing custom font stylesheet in root route\nDESCRIPTION: Imports the custom font stylesheet in the root route component to make it available across the application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\nimport fontStyleSheetUrl from './styles/yourfont.css?url'\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations to Production Database\nDESCRIPTION: Command to apply migrations to a production database on Fly.io. This is used when changes to the migration.sql file need to be applied to an existing deployment.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npx prisma migrate reset --skip-seed --force\" --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Failed Prisma Migration Error Message\nDESCRIPTION: Error message displayed when Prisma encounters failed migrations in the target database.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmigrate found failed migrations in the target database, new migrations will not be applied. Read more about how to resolve migration issues in a production database: https://pris.ly/d/migrate-resolve\n```\n\n----------------------------------------\n\nTITLE: Scaling Fly.io Instances Across Regions\nDESCRIPTION: Commands to scale application instances across multiple regions, specifically deploying two instances in sjc and one in ams.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly scale count 2 --region sjc\nfly scale count 1 --region ams\n```\n\n----------------------------------------\n\nTITLE: Running Custom Seed Script Locally\nDESCRIPTION: Command to execute a custom seed script on a local temporary database. This generates the data intended for production seeding.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx tsx ./prod-seed.local.ts\n```\n\n----------------------------------------\n\nTITLE: Adding font stylesheet links to the document head\nDESCRIPTION: Adds the font stylesheet to the links array in the root route, with both preload and regular stylesheet links to optimize font loading.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/root.tsx\n...\n{ rel: 'preload', href: fontStyleSheetUrl, as: 'style' },\n{ rel: 'stylesheet', href: fontStyleSheetUrl },\n```\n\n----------------------------------------\n\nTITLE: Scaling Instance Counts Across Regions\nDESCRIPTION: Commands to scale application instances across multiple regions, specifically setting up 2 instances in SJC and 1 in AMS.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly scale count 2 --region sjc\nfly scale count 1 --region ams\n```\n\n----------------------------------------\n\nTITLE: Redirecting Non-WWW to WWW Domains in Express\nDESCRIPTION: Middleware that redirects traffic from the root domain to the www subdomain. This works with Fly.io deployments where DNS level redirects aren't available, requiring SSL certificates for both domains.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n\tconst host = getHost(req)\n\tif (!host.startsWith('www.')) {\n\t\treturn res.redirect(301, `https://www.${host}${req.url}`)\n\t} else {\n\t\tnext()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Port Proxy for Prisma Studio\nDESCRIPTION: Command to proxy local port 5556 to Prisma Studio running on a Fly.io instance.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfly proxy 5556:5555 --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Database Restoration Commands\nDESCRIPTION: Commands for uploading and importing a database backup using LiteFS.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh sftp shell --app [YOUR_APP_NAME]\nput backup-2023-10-10.db\n```\n\n----------------------------------------\n\nTITLE: Example of fontpie usage with specific font parameters\nDESCRIPTION: Shows a concrete example of using fontpie to generate metric overrides for a specific font file (Nunito Sans) with weight and style parameters.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./public/fonts/nunito-sans/nunito-sans-v12-latin_latin-ext-200.woff2 -w 200 -s normal -n NunitoSans\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Volumes for SQLite Database\nDESCRIPTION: Commands to create persistent volumes for SQLite databases in both staging and production environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Commands\nDESCRIPTION: Series of commands for seeding a production database, including migration reset and data generation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=file:./seed.local.db npx prisma migrate reset --skip-seed --force\nDATABASE_URL=file:./seed.local.db npx tsx ./prod-seed.local.ts\n```\n\n----------------------------------------\n\nTITLE: Downloading Database Backup via SFTP\nDESCRIPTION: Command to download the database backup file using Fly.io's SFTP functionality.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh sftp get /backups/backup-2023-10-10.db --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Font to CSS Variables in Tailwind\nDESCRIPTION: This snippet shows how to add a custom font to the CSS variables in the Tailwind configuration file.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n\t:root {\n\t\t--font-sans: <YourFont>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git and Adding Remote\nDESCRIPTION: Commands to initialize a Git repository and add a remote GitHub repository.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit init\ngit remote add origin <ORIGIN_URL>\n```\n\n----------------------------------------\n\nTITLE: LiteFS Configuration Restore\nDESCRIPTION: YAML configuration for re-enabling exec commands in LiteFS\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\nexec:\n  - cmd: npx prisma migrate deploy\n    if-candidate: true\n\n  - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Custom Server Configuration in rsbuild.config.ts\nDESCRIPTION: Configuration for enabling custom server mode in the React Router plugin, which allows for manual server setup instead of using the automatic middleware.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginReactRouter } from 'rsbuild-plugin-react-router';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      pluginReactRouter({\n        customServer: true\n      }), \n      pluginReact()\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Fly Instance\nDESCRIPTION: Command to establish SSH connection to a Fly.io application instance.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: LiteFS Configuration Restoration\nDESCRIPTION: YAML configuration for re-enabling automatic Prisma migrations in LiteFS.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\nexec:\n  - cmd: npx prisma migrate deploy\n    if-candidate: true\n\n  - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Generating Font Metric Overrides with Fontpie\nDESCRIPTION: This bash command demonstrates how to use the fontpie utility to generate font metric overrides for a custom font file.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/fonts.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./public/fonts/nunito-sans/nunito-sans-v12-latin_latin-ext-200.woff2 -w 200 -s normal -n NunitoSans\n```\n\n----------------------------------------\n\nTITLE: Setting Fly Secrets for Session and Honeypot\nDESCRIPTION: Commands to set SESSION_SECRET and HONEYPOT_SECRET as Fly secrets for both staging and production apps.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Database Backup Creation\nDESCRIPTION: Commands for creating and retrieving a LiteFS database backup.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /backups\nlitefs export -name sqlite.db /backups/backup-2023-10-10.db\nexit\n```\n\n----------------------------------------\n\nTITLE: LiteFS Configuration Modification\nDESCRIPTION: YAML configuration showing how to disable exec commands in LiteFS configuration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\n# exec:\n#   - cmd: npx prisma migrate deploy\n#     if-candidate: true\n\n#   - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Windows Setup with Skip Parameters\nDESCRIPTION: Windows-specific command for creating Epic Stack project with environment variables to skip setup steps\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nset SKIP_SETUP=true && set SKIP_FORMAT=true && set SKIP_DEPLOYMENT=true && npx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Secrets\nDESCRIPTION: Commands for setting up necessary secrets in Fly.io including session and honeypot secrets for both production and staging environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) HONEYPOT_SECRET=$(openssl rand -hex 32) --app [YOUR_APP_NAME]-staging\nfly secrets set ALLOW_INDEXING=false --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Running Playwright E2E Tests Commands\nDESCRIPTION: npm commands for running end-to-end tests in different modes including standard, UI mode, and debug mode.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/tests/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\nnpm run test:e2e\n\n# Run tests with the Playwright UI\nnpm run test:e2e:ui\n\n# Run tests in debug mode\nnpm run test:e2e:debug\n```\n\n----------------------------------------\n\nTITLE: SFTP Backup Download\nDESCRIPTION: Command to download database backup via SFTP from Fly.io instance.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh sftp get /backups/backup-2023-10-10.db --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: LiteFS Configuration Update\nDESCRIPTION: YAML configuration for disabling exec commands in LiteFS\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\n# exec:\n#   - cmd: npx prisma migrate deploy\n#     if-candidate: true\n\n#   - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server which rebuilds assets on file changes.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Production Secrets with Fly.io CLI\nDESCRIPTION: Commands to set secret environment variables for both production and staging environments using the Fly.io CLI. This example shows how to set the TITO_API_SECRET for both environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set TITO_API_SECRET=some_secret_value\nfly secrets set TITO_API_SECRET=some_secret_value --app [YOUR_STAGING_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Remove Failed Migration SQL\nDESCRIPTION: SQL query to remove a failed migration entry from the Prisma migrations table.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM _prisma_migrations WHERE name = 'migration_name';\n```\n\n----------------------------------------\n\nTITLE: Installing and Authenticating with Fly CLI\nDESCRIPTION: Commands for installing Fly CLI and authenticating the user account.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly auth signup\n```\n\n----------------------------------------\n\nTITLE: Docker Entry Point Script\nDESCRIPTION: Shell script for Docker container initialization, handling database migrations and application startup.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh -ex\n\nnpx prisma migrate deploy\nsqlite3 /litefs/data/sqlite.db \"PRAGMA journal_mode = WAL;\"\nsqlite3 /litefs/data/cache.db \"PRAGMA journal_mode = WAL;\"\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Import Example\nDESCRIPTION: Example of importing required Playwright test utilities in TypeScript test files.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/tests/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Port Proxy for Prisma Studio\nDESCRIPTION: Command to set up a local port proxy to access Prisma Studio running on a Fly.io deployment. This enables local access to the remote Prisma Studio instance.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfly proxy 5556:5555 --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Creating Fly Apps for Staging and Production\nDESCRIPTION: Commands to create separate Fly apps for staging and production environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfly apps create [YOUR_APP_NAME]\nfly apps create [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Specifying Node.js Version in package.json\nDESCRIPTION: This snippet shows how to set the specific Node.js version in the package.json file's engines section. The document emphasizes using an exact version rather than a range because this is used in the build server compilation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"engines\": {\n\t\t\"node\": \"20.3.1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile for Local Deployment\nDESCRIPTION: Dockerfile modifications required for local deployment using Docker/Podman, including volume setup and entry point configuration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\n# prepare for litefs\nVOLUME /litefs\nADD . .\n\nEXPOSE ${PORT}\nENTRYPOINT [\"/myapp/other/docker-entry-point.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Creating LiteFS Database Backup\nDESCRIPTION: Commands for creating a backup directory and exporting the database using LiteFS.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /backups\nlitefs export -name sqlite.db /backups/backup-2023-10-10.db\nexit\n```\n\n----------------------------------------\n\nTITLE: Setting ALLOW_INDEXING Secret for Staging\nDESCRIPTION: Command to set ALLOW_INDEXING secret to false for the staging environment to prevent search engine indexing.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set ALLOW_INDEXING=false --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Listing Available npm Package Updates\nDESCRIPTION: This command uses npm-check-updates to display a list of packages that can be updated, showing which packages have major, minor, or patch versions available.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates\n```\n\n----------------------------------------\n\nTITLE: Manual Project Setup Commands\nDESCRIPTION: Step-by-step commands for manually setting up the project, including cloning, environment setup, dependency installation, database migration, and validation steps.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <your-fork>\ncd ./epic-stack\n\n# copy the .env.example to .env\n#   everything's mocked out during development so you shouldn't need to\n#   change any of these values unless you want to hit real environments.\ncp .env.example .env\n\n# Install deps\nnpm install\n\n# setup database\nprisma migrate reset --force\n\n# Install playwright browsers\nnpm run test:e2e:install\n\n# run build, typecheck, linting\nnpm run validate\n```\n\n----------------------------------------\n\nTITLE: Configuring server to cache and serve font files\nDESCRIPTION: Sets up an Express route to serve font files from the public directory with aggressive caching, since fonts rarely change.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// server/index.ts\n...\napp.use(\n   '/fonts',\n   // Can aggressively cache fonts as they don't change often\n   express.static('public/fonts', { immutable: true, maxAge: '1y' }),\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio on Fly.io\nDESCRIPTION: Command to launch Prisma Studio on a Fly.io application instance for database management.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console -C \"npm run prisma:studio\" --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Attaching Consul to Fly Apps\nDESCRIPTION: Commands to attach Consul, a fly-managed service for data replication, to both staging and production apps.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfly consul attach --app [YOUR_APP_NAME]\nfly consul attach --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Updating Patch Versions of npm Packages\nDESCRIPTION: This command updates all patch versions of packages at once, followed by installing the updated packages. It targets only patch updates since these should be backward-compatible bug fixes.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u --target patch\n...\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting Sentry DSN Secret in Fly.io\nDESCRIPTION: This command sets the Sentry DSN as a secret environment variable in Fly.io for runtime use in your application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SENTRY_DSN=<your_dsn>\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Version in Dockerfile\nDESCRIPTION: Shows how to update the Node.js version in the Dockerfile to match the version specified in package.json, ensuring consistency across development and deployment environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- FROM node:18-bookworm-slim as base\n+ FROM node:20.3.1-bookworm-slim as base\n```\n\n----------------------------------------\n\nTITLE: Deploying Locally Using Fly CLI\nDESCRIPTION: Command to deploy the application locally using Fly CLI.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/deployment.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Running Tests After Package Updates\nDESCRIPTION: These commands run both unit and end-to-end tests to verify that the project still works after updating packages, ensuring that no breaking changes were introduced.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test -- run\nnpm run test:e2e:run\n```\n\n----------------------------------------\n\nTITLE: Setting Sentry DSN in Fly.io\nDESCRIPTION: Command to set the Sentry DSN as a secret environment variable in Fly.io deployment platform. This DSN is used to authenticate and route data to the correct Sentry project.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SENTRY_DSN=<your_dsn>\n```\n\n----------------------------------------\n\nTITLE: Generated font-face with metric overrides\nDESCRIPTION: Shows the CSS output from fontpie, which creates a fallback font with metric overrides that match the dimensions of the target font to prevent layout shifts.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n\tfont-family: 'NunitoSans Fallback';\n\tfont-style: normal;\n\tfont-weight: 200;\n\tsrc: local('Arial');\n\tascent-override: 103.02%;\n\tdescent-override: 35.97%;\n\tline-gap-override: 0%;\n\tsize-adjust: 98.13%;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Package with Minor Version Changes\nDESCRIPTION: Commands to update a specific package with minor version changes, which should add new features in a backward-compatible way.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u --filter <package-with-cyan-minor-update>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Initial Fly.io Setup Commands\nDESCRIPTION: Basic commands for setting up and authenticating with Fly.io, including app creation and git initialization.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly auth signup\nfly apps create [YOUR_APP_NAME]\nfly apps create [YOUR_APP_NAME]-staging\ngit init\ngit remote add origin <ORIGIN_URL>\n```\n\n----------------------------------------\n\nTITLE: Updating Patch Versions of NPM Packages\nDESCRIPTION: Commands to update patch versions of packages and verify changes through testing.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/managing-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u --target patch\n...\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Epic Stack using create-epic-app\nDESCRIPTION: Command to initialize a new project using the Epic Stack via the create-epic-app CLI tool. This installs the latest version of the starter template.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Version in Dockerfile\nDESCRIPTION: Shows how to update the Node.js version in the Dockerfile to match package.json specifications.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/managing-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- FROM node:18-bookworm-slim as base\n+ FROM node:20.3.1-bookworm-slim as base\n```\n\n----------------------------------------\n\nTITLE: Modified Dockerfile Configuration\nDESCRIPTION: Docker configuration for local deployment without litefs, including volume setup and entrypoint configuration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# prepare for litefs\nVOLUME /litefs\nADD . .\n\nEXPOSE ${PORT}\nENTRYPOINT [\"/myapp/other/docker-entry-point.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Checking for Available NPM Package Updates\nDESCRIPTION: Command to list all NPM packages that can be updated, showing available major, minor, and patch versions using npm-check-updates tool.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates\n```\n\n----------------------------------------\n\nTITLE: Initializing Epic Stack Project with npx\nDESCRIPTION: Command to create a new Epic Stack project using npx. This launches the setup process which prompts for a project name and sets up the project structure.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Generating font metric overrides using fontpie\nDESCRIPTION: Uses the fontpie CLI tool to generate font metric overrides for custom fonts, which helps prevent layout shifts by providing accurate font dimensions before the font is loaded.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/fonts.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx fontpie ./local/font/location.woff2 -w font-weight -s normal/italic -n YourFont\n```\n\n----------------------------------------\n\nTITLE: Checking Available NPM Package Updates\nDESCRIPTION: Command to list all available package updates using npm-check-updates tool.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/managing-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates\n```\n\n----------------------------------------\n\nTITLE: Installing Epic Stack using Create Epic App\nDESCRIPTION: Command to initialize a new Epic Stack project using the create-epic-app package. This is the recommended way to get started with the Epic Stack.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases\nDESCRIPTION: TypeScript configuration in tsconfig.json showing the paths field setup to match the package.json imports configuration for IDE support and type checking.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/decisions/031-imports.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"#*\": [\".*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Setup Steps with Environment Variables\nDESCRIPTION: Command to create Epic Stack project while skipping setup, format, and deployment steps using environment variables\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_SETUP=true SKIP_FORMAT=true SKIP_DEPLOYMENT=true npx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Running Tests After Updates\nDESCRIPTION: Commands to run test suites to verify package updates haven't broken anything.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/managing-updates.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test -- run\nnpm run test:e2e:run\n```\n\n----------------------------------------\n\nTITLE: Running Initial Project Setup\nDESCRIPTION: Command to run the initial setup for an Epic Stack project after creation. This typically sets up dependencies, database, and other required configurations.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Setting Production Secrets using Fly.io CLI\nDESCRIPTION: Commands to set secret environment variables for production and staging environments using the Fly.io CLI. Shows how to set the TITO_API_SECRET for both main and staging applications.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set TITO_API_SECRET=some_secret_value\nfly secrets set TITO_API_SECRET=some_secret_value --app [YOUR_STAGING_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Setting Git Upstream Remote Commands\nDESCRIPTION: Commands to configure git remote upstream for syncing with the original repository and managing pull requests from fork branches.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/epicweb-dev/epic-stack.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/main main\n```\n\n----------------------------------------\n\nTITLE: Excluding a Route from Sitemap Generation in Remix\nDESCRIPTION: This code snippet shows how to exclude a specific route from sitemap generation using the @nasa-gcn/remix-seo package in a Remix application. It sets the getSitemapEntries function to return null for the route.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/seo.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// in your routes/url-that-doesnt-need-sitemap\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { type Route } from './+types/sitemap[.]xml.ts'\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\t/**/\n}\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Remix Build Command with Source Maps Enabled\nDESCRIPTION: Example of running the Remix build command with the --sourcemap flag enabled, which generates source maps for production builds. This command triggers a warning about exposing server-side code.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/decisions/016-source-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> remix build --sourcemap\n\nBuilding Remix app in production mode...\n\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\nYou have enabled source maps in production. This will make your server-side code visible to the public and is highly discouraged! If you insist, please ensure you are using environment variables for secrets and not hard-coding them into your source!\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with HMR\nDESCRIPTION: Command to start the development server with Hot Module Replacement (HMR) enabled. The application will be available at http://localhost:5173.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/cloudflare/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Package with Major Version Changes\nDESCRIPTION: Commands to update a package with major version changes, which might include breaking changes that require additional code modifications.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u -f <package-with-red-version-update>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Building Remix App with Source Maps Enabled in Production\nDESCRIPTION: Terminal output showing the warning message that appears when building a Remix application with source maps enabled in production mode. The warning emphasizes that server-side code will be visible to the public.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/decisions/016-source-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> remix build --sourcemap\n\nBuilding Remix app in production mode...\n\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\nYou have enabled source maps in production. This will make your server-side code visible to the public and is highly discouraged! If you insist, please ensure you are using environment variables for secrets and not hard-coding them into your source!\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n```\n\n----------------------------------------\n\nTITLE: Skipping Setup Steps with Environment Variables\nDESCRIPTION: Command demonstrating how to skip optional setup steps using environment variables SKIP_SETUP, SKIP_FORMAT, and SKIP_DEPLOYMENT.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_SETUP=true SKIP_FORMAT=true SKIP_DEPLOYMENT=true npx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Promoting a Version to Production with Wrangler\nDESCRIPTION: Command to deploy a previously uploaded version to production after verification using Wrangler CLI.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/cloudflare/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler versions deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Major Version Packages\nDESCRIPTION: This command updates a specific package with a major version update, which could introduce breaking changes. It's recommended to update major versions one package at a time after reviewing release notes.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u -f <package-with-red-version-update>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration\nDESCRIPTION: Package.json dependencies configuration showing required React Router and Cloudflare Workers packages with their versions.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@react-router/node\": \"^7.1.3\",\n    \"@react-router/serve\": \"^7.1.3\",\n    \"react-router\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"@cloudflare/workers-types\": \"^4.20241112.0\",\n    \"@react-router/cloudflare\": \"^7.1.3\",\n    \"@react-router/dev\": \"^7.1.3\",\n    \"wrangler\": \"^3.106.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referenced API Endpoints in Rate Limiting Context\nDESCRIPTION: Example endpoints that are particularly vulnerable to abuse and require rate limiting protection\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/decisions/025-rate-limiting.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/signup\"\n\"/settings/profile/change-email\"\n```\n\n----------------------------------------\n\nTITLE: Windows Setup with Skip Options\nDESCRIPTION: Windows-specific command for creating an Epic Stack application while skipping optional setup steps.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nset SKIP_SETUP=true && set SKIP_FORMAT=true && set SKIP_DEPLOYMENT=true && npx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with HMR\nDESCRIPTION: Command to start the development server with Hot Module Replacement for local development.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Version in package.json\nDESCRIPTION: Example of how to specify the Node.js version in the package.json file's engines field. This must be an exact version rather than a range, as it's used for server code compilation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/managing-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"engines\": {\n\t\t\"node\": \"20.3.1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icons with Sly CLI in Shell\nDESCRIPTION: This command uses the Sly CLI tool to add new icons from the @radix-ui/icons collection to the project. It specifically adds the 'trash', 'pencil-1', and 'avatar' icons.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/icons.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sly add @radix-ui/icons trash pencil-1 avatar\n```\n\n----------------------------------------\n\nTITLE: Initial Project Setup\nDESCRIPTION: Command to run the initial setup process for an Epic Stack project after installation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Building React Router App for Production\nDESCRIPTION: Command to create an optimized production build of the React Router application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Remix App with Source Maps Warning\nDESCRIPTION: Example of the warning message displayed when building a Remix application with source maps enabled in production. Shows the security warning about server-side code visibility.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/decisions/016-source-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> remix build --sourcemap\n\nBuilding Remix app in production mode...\n\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\nYou have enabled source maps in production. This will make your server-side code visible to the public and is highly discouraged! If you insist, please ensure you are using environment variables for secrets and not hard-coding them into your source!\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n```\n\n----------------------------------------\n\nTITLE: Deployment Scripts Configuration\nDESCRIPTION: Package.json scripts configuration for building and deploying the application using RSBuild and Wrangler.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"rsbuild build\",\n    \"deploy\": \"npm run build && wrangler deploy\",\n    \"dev\": \"rsbuild dev\",\n    \"start\": \"wrangler dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Setup Steps with Environment Variables (Windows)\nDESCRIPTION: Windows-specific command for skipping setup steps when initializing an Epic Stack project by setting environment variables using the Windows command syntax.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nset SKIP_SETUP=true && set SKIP_FORMAT=true && set SKIP_DEPLOYMENT=true && npx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Epic Stack Project\nDESCRIPTION: Command to create a new Epic Stack project using npx\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Running Playwright End-to-End Tests with npm\nDESCRIPTION: Commands for running Playwright end-to-end tests using npm scripts. Includes options for running all tests, using the Playwright UI, or running in debug mode.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/custom-node-server/tests/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\nnpm run test:e2e\n\n# Run tests with the Playwright UI\nnpm run test:e2e:ui\n\n# Run tests in debug mode\nnpm run test:e2e:debug\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Fly Instance\nDESCRIPTION: Command to establish SSH connection to a Fly.io application instance.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server for an Epic Stack project. This launches the application in development mode with hot-reloading for asset changes.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initial Project Setup\nDESCRIPTION: Command to run the initial setup for the Epic Stack project\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Screenshots for Visual Testing\nDESCRIPTION: Command for generating baseline screenshots for visual comparison testing in Playwright. Uses the --update-snapshots flag to create or update reference images.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/custom-node-server/tests/e2e/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Prisma Migration Error Example\nDESCRIPTION: Example error message when Prisma migration fails in production.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmigrate found failed migrations in the target database, new migrations will not be applied. Read more about how to resolve migration issues in a production database: https://pris.ly/d/migrate-resolve\n```\n\n----------------------------------------\n\nTITLE: Development Commands\nDESCRIPTION: Bash commands for local development and production deployment workflow.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Start local development server\nnpm run dev\n# or\nnpm start\n\n# Build and deploy\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to start the development server after completing the setup process.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server with hot reload functionality\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating Playwright Base Screenshots\nDESCRIPTION: Command to generate baseline screenshots for visual comparison testing in Playwright.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/tests/e2e/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: LiteFS Configuration Modification\nDESCRIPTION: YAML configuration for disabling automatic Prisma migrations in LiteFS.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/database.md#2025-04-21_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\n# exec:\n#   - cmd: npx prisma migrate deploy\n#     if-candidate: true\n\n#   - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Development Server Start Command\nDESCRIPTION: Command to start the development server on localhost:3000.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Git remotes for project contribution\nDESCRIPTION: Commands for setting up your Git repository to keep your main branch in sync with the upstream repository when contributing to the project.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream https://github.com/epicweb-dev/epic-stack.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/main main\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset using pnpm\nDESCRIPTION: This command initiates the process of creating a changeset, which documents the changes made to the project. It prompts the user for the type of change and a summary, then creates a new file in the .changeset directory.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: LiteFS Configuration Restoration\nDESCRIPTION: YAML configuration showing the restored exec commands in LiteFS configuration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/database.md#2025-04-21_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nexec:\n  - cmd: npx prisma migrate deploy\n    if-candidate: true\n\n  - cmd: npm start\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Fly.io Deployment\nDESCRIPTION: Basic Fly.io authentication and app creation commands for setting up staging and production environments.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly auth signup\n```\n\nLANGUAGE: sh\nCODE:\n```\nfly apps create [YOUR_APP_NAME]\nfly apps create [YOUR_APP_NAME]-staging\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit init\ngit remote add origin <ORIGIN_URL>\n```\n\n----------------------------------------\n\nTITLE: Creating a Production Build\nDESCRIPTION: Command to create an optimized production build of the React Router application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/cloudflare/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting development server\nDESCRIPTION: Command to start the development server after project setup is complete.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Remove Failed Migration SQL\nDESCRIPTION: SQL query to remove a failed migration from the Prisma migrations table\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM _prisma_migrations WHERE name = 'migration_name';\n```\n\n----------------------------------------\n\nTITLE: Generated React Router Configuration\nDESCRIPTION: Shows the React Router configuration that is generated from the remix-flat-routes file structure. Demonstrates how the file paths are converted into routes with nested hierarchies and URL parameters.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/routing.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Routes>\n\t<Route file=\"root.tsx\">\n\t\t<Route path=\"forgot-password\" file=\"routes/_auth+/forgot-password.tsx\" />\n\t\t<Route path=\"login\" file=\"routes/_auth+/login.tsx\" />\n\t\t<Route path=\"logout\" file=\"routes/_auth+/logout.tsx\" />\n\t\t<Route path=\"onboarding\" file=\"routes/_auth+/onboarding.tsx\" />\n\t\t<Route path=\"reset-password\" file=\"routes/_auth+/reset-password.tsx\" />\n\t\t<Route path=\"signup\" file=\"routes/_auth+/signup.tsx\" />\n\t\t<Route path=\"about\" file=\"routes/_marketing+/about.tsx\" />\n\t\t<Route index file=\"routes/_marketing+/index.tsx\" />\n\t\t<Route path=\"privacy\" file=\"routes/_marketing+/privacy.tsx\" />\n\t\t<Route path=\"support\" file=\"routes/_marketing+/support.tsx\" />\n\t\t<Route path=\"tos\" file=\"routes/_marketing+/tos.tsx\" />\n\t\t<Route path=\"admin/cache\" file=\"routes/admin+/cache.tsx\" />\n\t\t<Route\n\t\t\tpath=\"admin/cache/lru/:cacheKey\"\n\t\t\tfile=\"routes/admin+/cache_.lru.$cacheKey.ts\"\n\t\t/>\n\t\t<Route path=\"admin/cache/sqlite\" file=\"routes/admin+/cache_.sqlite.tsx\">\n\t\t\t<Route path=\":cacheKey\" file=\"routes/admin+/cache_.sqlite.$cacheKey.ts\" />\n\t\t</Route>\n\t\t<Route path=\"me\" file=\"routes/me.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/delete-image\"\n\t\t\tfile=\"routes/resources+/delete-image.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/delete-note\"\n\t\t\tfile=\"routes/resources+/delete-note.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/file/:fileId\"\n\t\t\tfile=\"routes/resources+/file.$fileId.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/healthcheck\"\n\t\t\tfile=\"routes/resources+/healthcheck.tsx\"\n\t\t/>\n\t\t<Route\n\t\t\tpath=\"resources/image-upload\"\n\t\t\tfile=\"routes/resources+/image-upload.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/login\" file=\"routes/resources+/login.tsx\" />\n\t\t<Route\n\t\t\tpath=\"resources/note-editor\"\n\t\t\tfile=\"routes/resources+/note-editor.tsx\"\n\t\t/>\n\t\t<Route path=\"resources/theme\" file=\"routes/resources+/theme.tsx\" />\n\t\t<Route path=\"settings/profile\" file=\"routes/settings+/profile.tsx\">\n\t\t\t<Route path=\"photo\" file=\"routes/settings+/profile.photo.tsx\" />\n\t\t</Route>\n\t\t<Route path=\"users/:username\" file=\"routes/users+/$username.tsx\" />\n\t\t<Route\n\t\t\tpath=\"users/:username/notes\"\n\t\t\tfile=\"routes/users+/$username_+/notes.tsx\"\n\t\t>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId.tsx\"\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath=\":noteId/edit\"\n\t\t\t\tfile=\"routes/users+/$username_+/notes.$noteId_.edit.tsx\"\n\t\t\t/>\n\t\t\t<Route path=\"new\" file=\"routes/users+/$username_+/notes.new.tsx\" />\n\t\t\t<Route index file=\"routes/users+/$username_+/notes.index.tsx\" />\n\t\t</Route>\n\t</Route>\n</Routes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote Setup for Contributing\nDESCRIPTION: Commands to set up git remote configuration for maintaining a clean fork and easy synchronization with the upstream repository.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/epicweb-dev/epic-stack.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/main main\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Configuration\nDESCRIPTION: Dockerfile modifications for local deployment using Docker/Podman with volume mounting for SQLite databases.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# prepare for litefs\nVOLUME /litefs\nADD . .\n\nEXPOSE ${PORT}\nENTRYPOINT [\"/myapp/other/docker-entry-point.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Server Scripts to package.json\nDESCRIPTION: Package.json script configuration for running development server, building the application, and starting the production server.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"rsbuild build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database and Consul Setup\nDESCRIPTION: Commands for creating persistent volumes and attaching Consul for data replication management.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]\nfly volumes create data --region sjc --size 1 --app [YOUR_APP_NAME]-staging\nfly consul attach --app [YOUR_APP_NAME]\nfly consul attach --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Fly Instance\nDESCRIPTION: Command to establish SSH connection to a Fly.io application instance\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh console --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Database Backup Creation Commands\nDESCRIPTION: Series of commands to create and retrieve a LiteFS database backup\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /backups\nlitefs export -name sqlite.db /backups/backup-2023-10-10.db\nexit\n```\n\n----------------------------------------\n\nTITLE: SFTP Backup Download Command\nDESCRIPTION: Command to download the database backup file using SFTP\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfly ssh sftp get /backups/backup-2023-10-10.db --app [YOUR_APP_NAME]\n```\n\n----------------------------------------\n\nTITLE: Database Restoration Commands\nDESCRIPTION: Commands for restoring a database from a backup file using LiteFS\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nlitefs import -name sqlite.db /backup-2023-10-10.db\nexit\n```\n\n----------------------------------------\n\nTITLE: Failed Prisma Migration Error\nDESCRIPTION: Error message displayed when Prisma encounters failed migrations\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/database.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmigrate found failed migrations in the target database, new migrations will not be applied. Read more about how to resolve migration issues in a production database: https://pris.ly/d/migrate-resolve\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Router Template\nDESCRIPTION: Command to install the necessary dependencies for the React Router template project.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/cloudflare/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying to Production using Wrangler\nDESCRIPTION: Command to build and deploy the application directly to production using the Wrangler CLI.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/cloudflare/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying a Preview URL using Wrangler\nDESCRIPTION: Command to upload a version of the application as a preview URL using Wrangler CLI for testing before production deployment.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/cloudflare/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler versions upload\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Router Project\nDESCRIPTION: Command to install the required dependencies for the React Router template project.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands for Multiple Package Managers\nDESCRIPTION: Commands for building Docker images with different package managers (npm, pnpm, bun) and running the containerized application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/default-template/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\ndocker build -t my-app .\n\n# For pnpm\ndocker build -f Dockerfile.pnpm -t my-app .\n\n# For bun\ndocker build -f Dockerfile.bun -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```\n\n----------------------------------------\n\nTITLE: Initial Basic Role-Permission Schema in Prisma\nDESCRIPTION: The original database schema showing a simple role and permission model with basic relationships between users, roles, and permissions.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/decisions/028-permissions-rbac.md#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Role {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  users       User[]\n  permissions Permission[]\n}\n\nmodel Permission {\n  id   String @id @unique @default(cuid())\n  name String @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  roles Role[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authentication Fixture in Playwright Tests\nDESCRIPTION: Example showing how to utilize the login fixture in Playwright tests to test authenticated features without going through the login flow. The user is automatically deleted at the end of the test to maintain test isolation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('my test', async ({ page, login }) => {\n\tconst user = await login()\n\t// you are now logged in\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Version in Dockerfile\nDESCRIPTION: This diff shows how to update the Node.js version in the Dockerfile to match the version specified in package.json. It illustrates changing from Node 18 to Node 20.3.1 using the bookworm-slim base image.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- FROM node:18-bookworm-slim as base\n+ FROM node:20.3.1-bookworm-slim as base\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Release Process\nDESCRIPTION: These commands manually trigger the versioning and release process for the project. The 'version' command updates the package version, while the 'release' command publishes the new version to npm.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm version\npnpm release\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Environment Variables in Bash\nDESCRIPTION: Environment variable configuration for GitHub OAuth authentication showing client ID and secret setup. These credentials are required for enabling GitHub authentication in the Epic Stack application.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# some other secrets and env vars\n...\n\nGITHUB_CLIENT_ID=\"72fa***************a\"\nGITHUB_CLIENT_SECRET=\"b2c6d323b**************************eae016\"\n```\n\n----------------------------------------\n\nTITLE: Manual Project Setup Commands\nDESCRIPTION: A series of commands for manually setting up the project when the automated setup script fails, including cloning, environment setup, dependency installation, and database migration.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <your-fork>\ncd ./epic-stack\n\n# copy the .env.example to .env\n#   everything's mocked out during development so you shouldn't need to\n#   change any of these values unless you want to hit real environments.\ncp .env.example .env\n\n# Install deps\nnpm install\n\n# setup database\nprisma migrate reset --force\n\n# Install playwright browsers\nnpm run test:e2e:install\n\n# run build, typecheck, linting\nnpm run validate\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Minor Version Packages\nDESCRIPTION: This command updates a specific package with a minor version update, followed by installing the updated package. The approach is to update minor versions one by one rather than all at once.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx npm-check-updates -u --filter <package-with-cyan-minor-update>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Epic Stack Application\nDESCRIPTION: Command to create a new Epic Stack application using npx, which will prompt for a project name and initiate the setup process.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Committing Package Update Changes\nDESCRIPTION: Git commands for committing changes after successfully updating and testing package updates. This example shows committing patch version updates.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/managing-updates.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"Updated patch versions\"\n```\n\n----------------------------------------\n\nTITLE: React Hydration Warning Suppression\nDESCRIPTION: Example showing how to suppress hydration warnings when dealing with timezone mismatches during server-side rendering\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/timezone.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsuppressHydrationWarning={true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Version in package.json\nDESCRIPTION: Specifies the exact Node.js version requirement in package.json. Must use a specific version number rather than a range for compatibility with express server compilation.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/managing-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"engines\": {\n\t\t\"node\": \"20.3.1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Timezone in Server Code\nDESCRIPTION: Example showing how to access user timezone from server-side code using the getHints utility function\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/timezone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetHints(request).timeZone\n```\n\n----------------------------------------\n\nTITLE: Installing Epic Stack via CLI\nDESCRIPTION: Command to create a new Epic Stack application using the npx create-epic-app CLI tool.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Committing Package Updates\nDESCRIPTION: Git commands to commit package version updates to the repository.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/managing-updates.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"Updated patch versions\"\n```\n\n----------------------------------------\n\nTITLE: Adding Icons with Sly CLI in Bash\nDESCRIPTION: Command to add new SVG icons from the Radix UI collection using the Sly CLI. This example adds the trash, pencil-1, and avatar icons to the project's SVG icon system.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/icons.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sly add @radix-ui/icons trash pencil-1 avatar\n```\n\n----------------------------------------\n\nTITLE: Adding Icons with Sly CLI Command\nDESCRIPTION: Command to add specific Radix UI icons (trash, pencil-1, and avatar) to the project using the Sly CLI tool. The icons are automatically added to the ./other/svg-icons directory and the build:icons script is run.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/icons.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sly add @radix-ui/icons trash pencil-1 avatar\n```\n\n----------------------------------------\n\nTITLE: Skipping Setup Steps with Environment Variables (Unix/Linux/Mac)\nDESCRIPTION: Command that demonstrates how to skip various setup steps when initializing an Epic Stack project by setting environment variables. This allows for a more customized setup process.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_SETUP=true SKIP_FORMAT=true SKIP_DEPLOYMENT=true npx create-epic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key for Production and Staging in Fly.io\nDESCRIPTION: This snippet demonstrates how to set the RESEND_API_KEY secret for both production and staging environments using the Fly.io CLI. Replace [YOUR_APP_NAME] with your actual application name.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/epic-stack/docs/email.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key as Secret in Fly.io Applications\nDESCRIPTION: Commands to set the Resend API key as a secret environment variable in both production and staging environments on Fly.io. This configuration enables email functionality in deployed applications.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/email.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]\nfly secrets set RESEND_API_KEY=\"re_blAh_blaHBlaHblahBLAhBlAh\" --app [YOUR_APP_NAME]-staging\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Toast Notification in React\nDESCRIPTION: Example of using redirectWithToast utility to redirect users while displaying a toast notification about note creation or updates.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack-remote/docs/toasts.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nreturn redirectWithToast(`/users/${note.owner.username}/notes/${note.id}`, {\n\tdescription: id ? 'Note updated' : 'Note created',\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Content Security Policy Directives in diff format\nDESCRIPTION: Shows how to modify the Content Security Policy configuration to allow additional image sources by updating the img-src directive to include external domains.\nSOURCE: https://github.com/rspack-contrib/rsbuild-plugin-react-router/blob/main/examples/federation/epic-stack/docs/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\t\tcontentSecurityPolicy: {\n\t\t\tdirectives: {\n\t\t\t\t'connect-src': [\n\t\t\t\t\tMODE === 'development' ? 'ws:' : null,\n\t\t\t\t\tprocess.env.SENTRY_DSN ? '*.sentry.io' : null,\n\t\t\t\t\t\"'self'\",\n\t\t\t\t].filter(Boolean),\n\t\t\t\t'font-src': [\"'self'\"],\n\t\t\t\t'frame-src': [\"'self'\"],\n-\t\t\t\t'img-src': [\"'self'\", 'data:'],\n+\t\t\t\t'img-src': [\"'self'\", 'data:', 'https://*.example.com']\n```"
  }
]