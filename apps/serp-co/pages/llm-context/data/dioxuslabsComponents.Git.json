[
  {
    "owner": "dioxuslabs",
    "repo": "components.git",
    "content": "TITLE: Implementing Portals in Dioxus\nDESCRIPTION: This code snippet demonstrates a proposed implementation of portals in Dioxus. It shows how components can be rendered in a different part of the DOM while maintaining their original context.\nSOURCE: https://github.com/dioxuslabs/components.git/blob/main/complaints.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[component]\npub fn App() -> Element {\n    let portal = use_portal();\n\n    rsx! {\n        div {\n            // ... nested stuff\n            PortalIn {\n                portal,\n\n                // Children of PortalIn becomes children of PortalOut.\n                div {\n                    h1 { \"Alert Dialog!\" }\n                    p { \"alert!!\" }\n                }\n            }\n        }\n\n        div {\n            // ... other nested stuff\n            PortalOut { portal }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposing Props Extension Syntax for Dioxus Components\nDESCRIPTION: This code snippet suggests a syntax for extending props in Dioxus components, allowing attributes to be passed through to child components more easily.\nSOURCE: https://github.com/dioxuslabs/components.git/blob/main/complaints.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn MyComp1(#[props(extends = MyComp2)] comp2_attr: Vec<Attribute>) -> Element {\n    rsx! {\n        MyComp2 {\n            ..comp2_attr\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Verbose Signal Prop Default Values in Rust\nDESCRIPTION: This snippet illustrates the verbose nature of setting default values for Signal and ReadOnlySignal props in Dioxus. It shows different approaches and their limitations.\nSOURCE: https://github.com/dioxuslabs/components.git/blob/main/complaints.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Props, Clone, PartialEq)]\npub struct SomeProps {\n\n    // This sets bool to be false\n    #[props(default)] \n    value: ReadOnlySignal<bool>,\n\n    // This is what I'd like, except it wants a ReadOnlySignal\n    #[props(default = true)] \n    value: ReadOnlySignal<bool>,\n\n    // Instead you have to do this:\n    #[props(default = ReadOnlySignal::new(Signal::new(true)))]\n    value: ReadOnlySignal<bool>,\n\n    // Same for a regular signal:\n    #[props(default = Signal::new(true))]\n    value: Signal<bool>,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Attribute Insertion Limitations on Elements in Dioxus\nDESCRIPTION: This snippet illustrates a limitation in Dioxus where attributes cannot be easily added to Elements, especially when conditionally rendering components.\nSOURCE: https://github.com/dioxuslabs/components.git/blob/main/complaints.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nrsx! {\n\n    if as_child {\n        p {\n            aria_something: \"abc\",\n            {children}\n        }\n    } else {\n        {children} // Can't add `aria_something`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference Issues with Number Props in Dioxus\nDESCRIPTION: This snippet shows a type inference issue in Dioxus where number props don't automatically infer their type when used with signals, requiring explicit type annotation.\nSOURCE: https://github.com/dioxuslabs/components.git/blob/main/complaints.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nSomeComponent {\n    index: 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dioxus Primitives Preview Application\nDESCRIPTION: Command to serve the preview application for Dioxus Primitives components using the dx CLI tool on the preview port.\nSOURCE: https://github.com/dioxuslabs/components.git/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndx serve -p preview\n```"
  }
]