[
  {
    "owner": "rabbitmq",
    "repo": "rabbitmq-website",
    "content": "TITLE: Binding Queue to Exchange\nDESCRIPTION: Creates a binding between the named exchange and queue, enabling message flow from the exchange to the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.bindQueue(queue_name, 'logs', '');\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version in .NET RabbitMQ Client\nDESCRIPTION: Example showing how to configure TLS version settings when establishing a connection. Demonstrates setting up connection factory parameters including certificate path, passphrase, and explicit TLS version selection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Security.Authentication;\n\n// ...\n\nConnectionFactory cf = new ConnectionFactory();\n\ncf.Ssl.Enabled = true;\ncf.Ssl.ServerName = System.Net.Dns.GetHostName();\ncf.Ssl.CertPath = \"/path/to/client_key.p12\";\ncf.Ssl.CertPassphrase = \"MySecretPassword\";\n\n// Use TLSv1.2 for this connection\ncf.Ssl.Version = SslProtocols.Tls12;\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from a RabbitMQ Queue\nDESCRIPTION: Code to set up a consumer that listens for messages on the 'hello' queue. The consumer subscribes to the queue and specifies a callback function to be invoked whenever a message is received. The auto_ack parameter indicates that messages should be automatically acknowledged.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_consume(queue='hello',\n                      auto_ack=True,\n                      on_message_callback=callback)\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from a RabbitMQ Queue\nDESCRIPTION: Code to set up a consumer that listens for messages on the 'hello' queue. The consumer subscribes to the queue and specifies a callback function to be invoked whenever a message is received. The auto_ack parameter indicates that messages should be automatically acknowledged.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_consume(queue='hello',\n                      auto_ack=True,\n                      on_message_callback=callback)\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ Remote Node Configuration with rabbitmq-diagnostics\nDESCRIPTION: Command for checking the effective configuration of a specific RabbitMQ node, including nodes running remotely, using the -n parameter to specify the node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics environment -n [node name]\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Rebalance Queues in RabbitMQ\nDESCRIPTION: A cURL command example for rebalancing all queues in all vhosts via the RabbitMQ Management API. This operation is asynchronous and its progress can be monitored in the RabbitMQ logs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl -4u 'guest:guest' -XPOST localhost:15672/api/rebalance/queues/\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Using ConnectionFactory\nDESCRIPTION: Demonstrates how to create a connection to a RabbitMQ node using ConnectionFactory. It shows setting various connection parameters like username, password, virtual host, hostname, and port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// \"guest\"/\"guest\" by default, limited to localhost connections\nfactory.setUsername(userName);\nfactory.setPassword(password);\nfactory.setVirtualHost(virtualHost);\nfactory.setHost(hostName);\nfactory.setPort(portNumber);\n\nConnection conn = factory.newConnection();\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Metrics Endpoint\nDESCRIPTION: Command to verify RabbitMQ is exposing metrics in Prometheus format\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s localhost:15692/metrics | head -n 3\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation\nDESCRIPTION: Full implementation of a program that receives logs filtered by severity levels using RabbitMQ direct exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='direct_logs', exchange_type='direct')\n\nresult = channel.queue_declare(queue='', exclusive=True)\nqueue_name = result.method.queue\n\nseverities = sys.argv[1:]\nif not severities:\n    sys.stderr.write(\"Usage: %s [info] [warning] [error]\\n\" % sys.argv[0])\n    sys.exit(1)\n\nfor severity in severities:\n    channel.queue_bind(\n        exchange='direct_logs', queue=queue_name, routing_key=severity)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] {method.routing_key}:{body}\")\n\n\nchannel.basic_consume(\n    queue=queue_name, on_message_callback=callback, auto_ack=True)\n\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Listing Users in RabbitMQ (Bash and PowerShell)\nDESCRIPTION: This snippet demonstrates how to list users in a RabbitMQ cluster using the rabbitmqctl command in both Bash and PowerShell. It also shows how to change the output format to JSON.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_users\n\nrabbitmqctl list_users --formatter=json\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_users\n\nrabbitmqctl.bat list_users --formatter=json\n```\n\n----------------------------------------\n\nTITLE: Complete Worker Implementation for RabbitMQ Work Queue in Objective-C\nDESCRIPTION: Complete implementation of a worker consumer for RabbitMQ work queues in Objective-C. It establishes a connection, creates a durable queue, sets prefetch count, and processes messages with acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_9\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)workerNamed:(NSString *)name {\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n\n    RMQQueue *q = [ch queue:@\"task_queue\" options:RMQQueueDeclareDurable];\n\n    [ch basicQos:@1 global:NO];\n    NSLog(@\"%@: Waiting for messages\", name);\n\n    RMQBasicConsumeOptions manualAck = RMQBasicConsumeNoOptions;\n    [q subscribe:manualAck handler:^(RMQMessage * _Nonnull message) {\n        NSString *messageText = [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding];\n        NSLog(@\"%@: Received %@\", name, messageText);\n        // imitate some work\n        unsigned int sleepTime = (unsigned int)[messageText componentsSeparatedByString:@\".\"].count - 1;\n        NSLog(@\"%@: Sleeping for %u seconds\", name, sleepTime);\n        sleep(sleepTime);\n\n        [ch ack:message.deliveryTag];\n    }];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default User Tags in RabbitMQ\nDESCRIPTION: Default configuration for the tags assigned to the default user, which grants administrator privileges by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\ndefault_user_tags.administrator = true\n```\n\n----------------------------------------\n\nTITLE: Starting a Continuous Consumer Loop\nDESCRIPTION: Code to start the consumer in a continuous loop, waiting for messages and processing them as they arrive. This loop will continue until interrupted by the user with CTRL+C.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with TLS 1.3\nDESCRIPTION: A secure TLS 1.3 configuration for RabbitMQ that passes key security tests. Includes settings for certificates, cipher suites, and peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.3\n\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n\nssl_options.honor_cipher_order   = true\nssl_options.honor_ecc_order      = true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Emitter with Direct Exchange in RabbitMQ using Java\nDESCRIPTION: This class implements a log emitter that uses a direct exchange to publish log messages with different severities. It demonstrates how to set up the connection, declare the exchange, and publish messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\npublic class EmitLogDirect {\n\n  private static final String EXCHANGE_NAME = \"direct_logs\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    try (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n        channel.exchangeDeclare(EXCHANGE_NAME, \"direct\");\n\n        String severity = getSeverity(argv);\n        String message = getMessage(argv);\n\n        channel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes(\"UTF-8\"));\n        System.out.println(\" [x] Sent '\" + severity + \"':'\" + message + \"'\");\n    }\n  }\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in Batches with Confirms in RabbitMQ using Java\nDESCRIPTION: This snippet shows how to publish messages in batches and wait for confirmations, improving throughput compared to individual confirmations. It publishes a batch of 100 messages before waiting for confirms, handling any remaining messages at the end.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nint batchSize = 100;\nint outstandingMessageCount = 0;\nwhile (thereAreMessagesToPublish()) {\n    byte[] body = ...;\n    BasicProperties properties = ...;\n    channel.basicPublish(exchange, queue, properties, body);\n    outstandingMessageCount++;\n    if (outstandingMessageCount == batchSize) {\n        channel.waitForConfirmsOrDie(5_000);\n        outstandingMessageCount = 0;\n    }\n}\nif (outstandingMessageCount > 0) {\n    channel.waitForConfirmsOrDie(5_000);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ User\nDESCRIPTION: Command to remove a user from the RabbitMQ system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user janeway\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client in Spring AMQP\nDESCRIPTION: Client implementation that sends RPC requests to the server and processes responses. It uses Spring's RabbitTemplate to handle the communication details and schedules regular requests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-spring-amqp.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\n\npublic class Tut6Client {\n\n\t@Autowired\n\tprivate RabbitTemplate template;\n\n\t@Autowired\n\tprivate DirectExchange exchange;\n\n\tint start = 0;\n\n\t@Scheduled(fixedDelay = 1000, initialDelay = 500)\n\tpublic void send() {\n\t\tSystem.out.println(\" [x] Requesting fib(\" + start + \")\");\n\t\tInteger response = (Integer) template.convertSendAndReceive\n\t\t    (exchange.getName(), \"rpc\", start++);\n\t\tSystem.out.println(\" [.] Got '\" + response + \"'\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Config Files Section in rabbitmq-diagnostics Output\nDESCRIPTION: Example output from rabbitmq-diagnostics showing the configuration files section that lists the paths to the active configuration files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nConfig files\n\n * /etc/rabbitmq/advanced.config\n * /etc/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Message Consumption in RabbitMQ with Java\nDESCRIPTION: This snippet shows how to set up an asynchronous message consumer using a DeliverCallback. It processes incoming messages and prints them to the console.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nDeliverCallback deliverCallback = (consumerTag, delivery) -> {\n    String message = new String(delivery.getBody(), \"UTF-8\");\n    System.out.println(\" [x] Received '\" + message + \"'\");\n};\nchannel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Management Plugin via Command Line\nDESCRIPTION: This command enables the RabbitMQ management plugin using the rabbitmq-plugins tool. No node restart is required after activation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Message Consumer with RabbitMQ in Java\nDESCRIPTION: Demonstrates how to set up a message consumer using the DefaultConsumer class. It shows manual message acknowledgement and handling of delivery details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"myConsumerTag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             String routingKey = envelope.getRoutingKey();\n             String contentType = properties.getContentType();\n             long deliveryTag = envelope.getDeliveryTag();\n             <i>// (process the message components here ...)</i>\n             channel.basicAck(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Persistence in AMQP 0-9-1\nDESCRIPTION: Shows how to set message persistence in AMQP 0-9-1 protocol using the delivery_mode property. This determines whether messages survive broker restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/queues.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>delivery_mode</code> or, in some clients, <code>persistent</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Publisher Confirms with ConfirmCallback in RabbitMQ Java Client\nDESCRIPTION: This code references the Java client interfaces used for handling publisher confirms in RabbitMQ. It shows that confirm handlers are exposed via the ConfirmCallback and ConfirmListener interfaces, which must be added to a channel to receive confirmations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/publishers/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// For RabbitMQ Java client, confirm handlers are exposed via:\nConfirmCallback confirmCallback; // Interface for handling confirms\nConfirmListener confirmListener; // Interface for listening to confirms\n\n// One or more listeners need to be added to a channel\nchannel.addConfirmListener(confirmCallback, confirmCallback);\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv4 with TLS Support\nDESCRIPTION: Demonstrates how to configure RabbitMQ to listen on IPv4 interfaces with both plain AMQP and TLS-enabled ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 192.168.1.99:5672 # Plain AMQP\nlisteners.ssl.1 = 192.168.1.99:5671 # TLS (AMQPS)\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ Connection with Custom Thread Pool in Java\nDESCRIPTION: This snippet demonstrates how to create a RabbitMQ connection with a custom ExecutorService thread pool for consumer operations. It uses a fixed thread pool of 20 threads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nExecutorService es = Executors.newFixedThreadPool(20);\nConnection conn = factory.newConnection(es);\n```\n\n----------------------------------------\n\nTITLE: Removing an Unresponsive Node from RabbitMQ Cluster in Bash\nDESCRIPTION: This code snippet shows how to remove an unresponsive node (rabbit@rabbit2) from a RabbitMQ cluster using the forget_cluster_node command on another node (rabbit@rabbit1).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# Tell rabbit@rabbit1 to permanently remove rabbit@rabbit2\nrabbitmqctl forget_cluster_node -n rabbit@rabbit1 rabbit@rabbit2\n# => Removing node rabbit@rabbit1 from cluster ...\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Expiration in RabbitMQ Java Client\nDESCRIPTION: Publishes a message with an expiration time (TTL - Time To Live) set to 60 seconds. The message will be removed from the queue if not consumed within the specified time period.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(exchangeName, routingKey,\n             new AMQP.BasicProperties.Builder()\n               .expiration(\"60000\")\n               .build(),\n               messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Status\nDESCRIPTION: This command displays all nodes in the cluster grouped by node type, along with the currently running nodes. It provides an overview of the cluster's current state and membership.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl cluster_status\n```\n\n----------------------------------------\n\nTITLE: Establishing RabbitMQ Connection in PHP\nDESCRIPTION: Creating a connection and channel to RabbitMQ server using AMQPStreamConnection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Shutdown Cause in RabbitMQ Java Client\nDESCRIPTION: This code snippet shows how to analyze the cause of a shutdown in a RabbitMQ connection or channel. It demonstrates checking if it's a hard error, if it was initiated by the application, and how to access the shutdown reason.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npublic void shutdownCompleted(ShutdownSignalException cause)\n{\n  if (cause.isHardError())\n  {\n    Connection conn = (Connection)cause.getReference();\n    if (!cause.isInitiatedByApplication())\n    {\n      Method reason = cause.getReason();\n      ...\n    }\n    ...\n  } else {\n    Channel ch = (Channel)cause.getReference();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Micrometer Metrics Collection in RabbitMQ Java Client\nDESCRIPTION: Shows how to enable metric collection using Micrometer in the RabbitMQ Java client. It demonstrates creating a MicrometerMetricsCollector and setting it on the ConnectionFactory. The example also includes how to retrieve specific metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory connectionFactory = new ConnectionFactory();\nMicrometerMetricsCollector metrics = new MicrometerMetricsCollector();\nconnectionFactory.setMetricsCollector(metrics);\n...\nmetrics.getPublishedMessages(); // get Micrometer's Counter object\n```\n\n----------------------------------------\n\nTITLE: Complete Task Producer Implementation with RabbitMQ in Swift\nDESCRIPTION: This is the complete implementation of a task producer that creates a durable queue and publishes persistent messages to it. The method establishes a connection, creates a channel, declares a durable queue, and then publishes a message with persistence enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfunc newTask(_ msg: String) {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let q = ch.queue(\"task_queue\", options: .durable)\n    let msgData = msg.data(using: .utf8)\n    ch.defaultExchange().publish(msgData, routingKey: q.name, persistent: true)\n    print(\"Sent \\(msg)\")\n    conn.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue and Sending a Message in RabbitMQ with JavaScript\nDESCRIPTION: Declares a queue named 'hello' and sends a message to it. The queue is set as non-durable, meaning it won't survive a broker restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = 'hello';\n    var msg = 'Hello world';\n\n    channel.assertQueue(queue, {\n      durable: false\n    });\n\n    channel.sendToQueue(queue, Buffer.from(msg));\n    console.log(\" [x] Sent %s\", msg);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a RabbitMQ Stream using STOMP\nDESCRIPTION: This snippet demonstrates how to subscribe to a RabbitMQ stream using the STOMP protocol. It includes headers for specifying the destination, acknowledgement mode, prefetch count, and stream offset.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nSUBSCRIBE\ndestination:/amq/queue/my-stream\nack:client\nprefetch-count:10\nx-stream-offset:next\n```\n\n----------------------------------------\n\nTITLE: Declaring and Publishing to a RabbitMQ Stream in Python\nDESCRIPTION: This snippet shows how to declare a stream with a retention policy and publish a message to it using the RabbitMQ stream producer in Python.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSTREAM_NAME = \"hello-python-stream\"\n# 5GB\nSTREAM_RETENTION = 5000000000\n\nawait producer.create_stream(\n            STREAM_NAME, exists_ok=True, arguments={\"MaxLengthBytes\": STREAM_RETENTION})\n\nawait producer.send(stream=STREAM_NAME, message=b\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Consumer (Receiver)\nDESCRIPTION: Complete Python script for a RabbitMQ consumer that connects to the server, declares a queue, sets up a callback for processing messages, and starts consuming from the queue. The script includes proper error handling for graceful shutdown when interrupted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika, sys, os\n\ndef main():\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))\n    channel = connection.channel()\n\n    channel.queue_declare(queue='hello')\n\n    def callback(ch, method, properties, body):\n        print(f\" [x] Received {body}\")\n\n    channel.basic_consume(queue='hello', on_message_callback=callback, auto_ack=True)\n\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        print('Interrupted')\n        try:\n            sys.exit(0)\n        except SystemExit:\n            os._exit(0)\n```\n\n----------------------------------------\n\nTITLE: Negative Acknowledgement without Requeue in Java RabbitMQ Client\nDESCRIPTION: Demonstrates how to negatively acknowledge a delivery without requeueing using the Java client for RabbitMQ. The message will be discarded or sent to a Dead Letter Exchange if configured.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// this example assumes an existing channel instance\n\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // negatively acknowledge, the message will\n             // be discarded\n             channel.basicReject(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Declaring Fanout Exchange in Python\nDESCRIPTION: Creates a fanout exchange named 'logs' that will broadcast messages to all bound queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-python.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nchannel.exchange_declare(exchange='logs',\n                         exchange_type='fanout')\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Consumer Implementation (Java)\nDESCRIPTION: This is the complete implementation of a RabbitMQ consumer (Worker.java) that processes messages from a durable queue with manual acknowledgment and fair dispatch.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class Worker {\n\n  private static final String TASK_QUEUE_NAME = \"task_queue\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    final Connection connection = factory.newConnection();\n    final Channel channel = connection.createChannel();\n\n    channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);\n    System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\");\n\n    channel.basicQos(1);\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n        String message = new String(delivery.getBody(), \"UTF-8\");\n\n        System.out.println(\" [x] Received '\" + message + \"'\");\n        try {\n            doWork(message);\n        } finally {\n            System.out.println(\" [x] Done\");\n            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n        }\n    };\n    channel.basicConsume(TASK_QUEUE_NAME, false, deliverCallback, consumerTag -> { });\n  }\n\n  private static void doWork(String task) {\n    for (char ch : task.toCharArray()) {\n        if (ch == '.') {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException _ignored) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Java TLS Client with Certificate Authentication and Peer Verification\nDESCRIPTION: Complete Java example showing how to connect to RabbitMQ with TLS, using both client and server certificate authentication. This configures key stores and trust stores, sets up TLS 1.2, and enables hostname verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      Connection conn = factory.newConnection();\n      Channel channel = conn.createChannel();\n\n      channel.queueDeclare(\"rabbitmq-java-test\", false, true, true, null);\n      channel.basicPublish(\"\", \"rabbitmq-java-test\", null, \"Hello, World\".getBytes());\n\n      GetResponse chResponse = channel.basicGet(\"rabbitmq-java-test\", false);\n      if (chResponse == null) {\n          System.out.println(\"No message retrieved\");\n      } else {\n          byte[] body = chResponse.getBody();\n          System.out.println(\"Received: \" + new String(body));\n      }\n\n      channel.close();\n      conn.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Statistics Database using rabbitmqctl\nDESCRIPTION: Command-line approaches to reset the statistics database on a single node or all nodes in a RabbitMQ cluster using the rabbitmqctl utility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'rabbit_mgmt_storage:reset().'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'rabbit_mgmt_storage:reset_all().'\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in RabbitMQ Consumer (Java)\nDESCRIPTION: This code snippet demonstrates how to implement manual message acknowledgment in a RabbitMQ consumer. It sets the Quality of Service (QoS) to 1, processes the message, and sends an acknowledgment after completion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(1); // accept only one unack-ed message at a time (see below)\n\nDeliverCallback deliverCallback = (consumerTag, delivery) -> {\n  String message = new String(delivery.getBody(), \"UTF-8\");\n\n  System.out.println(\" [x] Received '\" + message + \"'\");\n  try {\n    doWork(message);\n  } finally {\n    System.out.println(\" [x] Done\");\n    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n  }\n};\nboolean autoAck = false;\nchannel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Connection and Channel in Java\nDESCRIPTION: This code establishes a connection to RabbitMQ and creates a channel for communication. It uses a try-with-resources statement to ensure proper resource management.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setHost(\"localhost\");\ntry (Connection connection = factory.newConnection();\n     Channel channel = connection.createChannel()) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ using ConnectionFactory in C#\nDESCRIPTION: This snippet demonstrates how to connect to a RabbitMQ node using a ConnectionFactory with explicit configuration of hostname, credentials, and other parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// \"guest\"/\"guest\" by default, limited to localhost connections\nfactory.UserName = user;\nfactory.Password = pass;\nfactory.VirtualHost = vhost;\nfactory.HostName = hostName;\n\nIConnection conn = await factory.CreateConnectionAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in RabbitMQ Consumer with Python\nDESCRIPTION: This code demonstrates how to properly acknowledge messages after processing in a RabbitMQ consumer. It ensures that if a worker dies during processing, the message will be requeued and sent to another worker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body.decode()}\")\n    time.sleep(body.count(b'.') )\n    print(\" [x] Done\")\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n\nchannel.basic_consume(queue='hello', on_message_callback=callback)\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration with Environment Variable Interpolation\nDESCRIPTION: Examples of how to use environment variable interpolation in rabbitmq.conf to set user credentials and cluster name dynamically from environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# environment variable interpolation\ndefault_user = $(SEED_USERNAME)\ndefault_pass = $(SEED_USER_PASSWORD)\n```\n\n----------------------------------------\n\nTITLE: Configuring Yum Repository for Modern Erlang and RabbitMQ\nDESCRIPTION: Configuration for the Yum repository file to install RabbitMQ and its Erlang dependency. This configuration is specific to modern Fedora releases, Red Hat 9, CentOS Stream 9, Rocky Linux 9, Amazon Linux 2023, Oracle Linux 9, and Alma Linux 9.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# In /etc/yum.repos.d/rabbitmq.repo\n\n##\n## Zero dependency Erlang RPM\n##\n\n[modern-erlang]\nname=modern-erlang-el9\n# Use a set of mirrors maintained by the RabbitMQ core team.\n# The mirrors have significantly higher bandwidth quotas.\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/$basearch\n        https://yum2.rabbitmq.com/erlang/el/9/$basearch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[modern-erlang-noarch]\nname=modern-erlang-el9-noarch\n# Use a set of mirrors maintained by the RabbitMQ core team.\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Config Peer Discovery Backend in RabbitMQ\nDESCRIPTION: Configuration example for the classic config peer discovery backend which reads cluster nodes from the config file. This method is used when cluster members are known at deployment time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ User\nDESCRIPTION: Command to remove a user from the RabbitMQ system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user janeway\n```\n\n----------------------------------------\n\nTITLE: Implementing Publisher Confirms with ConfirmCallback in RabbitMQ Java Client\nDESCRIPTION: This code references the Java client interfaces used for handling publisher confirms in RabbitMQ. It shows that confirm handlers are exposed via the ConfirmCallback and ConfirmListener interfaces, which must be added to a channel to receive confirmations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/publishers/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// For RabbitMQ Java client, confirm handlers are exposed via:\nConfirmCallback confirmCallback; // Interface for handling confirms\nConfirmListener confirmListener; // Interface for listening to confirms\n\n// One or more listeners need to be added to a channel\nchannel.addConfirmListener(confirmCallback, confirmCallback);\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Producer in Python for RabbitMQ\nDESCRIPTION: This code snippet shows how to create a task producer (new_task.py) that sends messages to a RabbitMQ queue. It accepts command-line arguments to form the message body, with a default of 'Hello World!' if no arguments are provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nmessage = ' '.join(sys.argv[1:]) or \"Hello World!\"\nchannel.basic_publish(exchange='',\n                      routing_key='hello',\n                      body=message)\nprint(f\" [x] Sent {message}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Paging Threshold Using VM Memory Watermark Settings\nDESCRIPTION: This configuration example shows how to adjust the paging ratio and relative high watermark in RabbitMQ. It sets the paging to begin at 75% of the way to the high watermark (30% of memory) and blocks publishers when 40% of memory is used.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/memory.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark_paging_ratio = 0.75\nvm_memory_high_watermark.relative = 0.4\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Work Queue in Java\nDESCRIPTION: This code snippet shows how to publish messages to a RabbitMQ queue in Java. It takes command-line arguments, joins them into a single message, and publishes it to the 'hello' queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString message = String.join(\" \", argv);\n\nchannel.basicPublish(\"\", \"hello\", null, message.getBytes());\nSystem.out.println(\" [x] Sent '\" + message + \"'\");\n```\n\n----------------------------------------\n\nTITLE: Configuring At-Least-Once Dead Lettering in RabbitMQ\nDESCRIPTION: Configuration settings required to enable at-least-once dead lettering for a quorum queue. This includes setting the dead-letter-strategy, overflow behavior, and dead-letter-exchange configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndead-letter-strategy=at-least-once\noverflow=reject-publish\ndead-letter-exchange=<exchange-name>\nstream_queue=true\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ CLI with TOML\nDESCRIPTION: This TOML configuration file example shows how to set up connection settings for different environments (local, staging, production) for use with the rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[local]\nhostname = \"localhost\"\nport = 15672\nusername = \"lolz\"\npassword = \"lolz\"\nvhost = '/'\n\n[staging]\nhostname = \"192.168.20.31\"\nport = 15672\nusername = \"staging-2387a72329\"\npassword = \"staging-1d20cfbd9d\"\n\n[production]\nhostname = \"(redacted)\"\nport = 15671\nusername = \"user-2ca6bae15ff6b79e92\"\npassword = \"user-92ee4c479ae604cc72\"\n```\n\n----------------------------------------\n\nTITLE: Opening a Channel in Java with RabbitMQ\nDESCRIPTION: This code demonstrates how to open a new channel with an automatically allocated channel ID after establishing a connection to RabbitMQ using the Java client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\nConnection conn = cf.createConnection();\n\nChannel ch = conn.createChannel();\n\n// ... use the channel to declare topology, publish, consume\n```\n\n----------------------------------------\n\nTITLE: Verifying RabbitMQ Configuration File Location in Log File\nDESCRIPTION: This snippet shows how to find the active configuration file location by inspecting the RabbitMQ log file. It displays the node name, home directory, and config file paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /etc/rabbitmq/advanced.config\n               : /etc/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Import to Skip if Definitions are Unchanged\nDESCRIPTION: Configuration that enables skipping definition import if the file contents haven't changed. This optimizes the boot process by avoiding unnecessary import operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/defs.json\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Active Consumer in RabbitMQ Queue Declaration\nDESCRIPTION: Demonstrates how to enable Single Active Consumer when declaring a queue using the Java client. The code sets the x-single-active-consumer argument to true during queue declaration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumers.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = ...;\nMap<String, Object> arguments = new HashMap<String, Object>();\narguments.put(\"x-single-active-consumer\", true);\nch.queueDeclare(\"my-queue\", false, false, false, arguments);\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Server with RabbitMQ in Python\nDESCRIPTION: This code sets up an RPC server using RabbitMQ. It declares an 'rpc_queue', defines a Fibonacci function, and handles incoming requests by computing the Fibonacci number and sending the response back to the client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-python.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\n\nchannel = connection.channel()\n\nchannel.queue_declare(queue='rpc_queue')\n\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef on_request(ch, method, props, body):\n    n = int(body)\n\n    print(f\" [.] fib({n})\")\n    response = fib(n)\n\n    ch.basic_publish(exchange='',\n                     routing_key=props.reply_to,\n                     properties=pika.BasicProperties(correlation_id = \\\n                                                         props.correlation_id),\n                     body=str(response))\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue='rpc_queue', on_message_callback=on_request)\n\nprint(\" [x] Awaiting RPC requests\")\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Connection Recovery in RabbitMQ Client\nDESCRIPTION: Demonstrates how to explicitly enable automatic connection recovery in the RabbitMQ Java client. This feature allows connections to automatically recover after network failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setUsername(userName);\nfactory.setPassword(password);\nfactory.setVirtualHost(virtualHost);\nfactory.setHost(hostName);\nfactory.setPort(portNumber);\nfactory.setAutomaticRecoveryEnabled(true);\n// connection that will recover automatically\nConnection conn = factory.newConnection();\n```\n\n----------------------------------------\n\nTITLE: Verifying RabbitMQ Configuration File Location in Log File\nDESCRIPTION: This snippet shows how to find the active configuration file location by inspecting the RabbitMQ log file. It displays the node name, home directory, and config file paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /etc/rabbitmq/advanced.config\n               : /etc/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Message Acknowledgment in RabbitMQ Consumer with JavaScript\nDESCRIPTION: Code demonstrating how to implement manual message acknowledgment in a RabbitMQ consumer. The consumer processes messages with a simulated delay based on the message content and acknowledges the message only after processing is complete. This ensures messages aren't lost if the worker terminates during processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.consume(queue, function(msg) {\n  var secs = msg.content.toString().split('.').length - 1;\n\n  console.log(\" [x] Received %s\", msg.content.toString());\n  setTimeout(function() {\n    console.log(\" [x] Done\");\n    channel.ack(msg);\n  }, secs * 1000);\n}, {\n  // manual acknowledgment mode,\n  // see /docs/confirms for details\n  noAck: false\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring default loopback user behavior in RabbitMQ\nDESCRIPTION: Setting to control whether the guest user can connect from remote hosts. When set to true, the guest user can only connect from localhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nloopback_users.guest = true\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 JWKS URI in RabbitMQ (INI)\nDESCRIPTION: Sample configuration for setting up OAuth 2.0 authorization in RabbitMQ using the JWKS URI. This approach is an alternative to using the issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.jwks_uri = \"https://my-jwt-issuer/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Basic Message Publishing in RabbitMQ Java Client\nDESCRIPTION: Publishes a simple text message to an exchange with a routing key. This is the most basic form of publishing a message without any special properties or flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nbyte[] messageBodyBytes = \"Hello, world!\".getBytes();\nchannel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer with RabbitMQ in Python\nDESCRIPTION: Illustrates how to create a consumer in Python using a custom message handler class. It shows how to set up the consumer, process messages, and settle them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass MyMessageHandler(AMQPMessagingHandler):\n\n    def __init__(self):\n        super().__init__()\n\n    def on_message(self, event: Event):\n        # ...\n        \n        self.delivery_context.accept(event)# settle the message\n        \nqueue_address = AddressHelper.queue_address(\"some-queue\")\nconsumer = connection.consumer(queue_address, message_handler=MyMessageHandler())\nconsumer.run()\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation with RabbitMQ in Java\nDESCRIPTION: A full implementation of a log message consumer that connects to RabbitMQ, declares the 'logs' fanout exchange, creates a temporary queue, binds it to the exchange, and consumes messages. This allows receiving all broadcast log messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class ReceiveLogs {\n  private static final String EXCHANGE_NAME = \"logs\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n    String queueName = channel.queueDeclare().getQueue();\n    channel.queueBind(queueName, EXCHANGE_NAME, \"\");\n\n    System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\");\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n        String message = new String(delivery.getBody(), \"UTF-8\");\n        System.out.println(\" [x] Received '\" + message + \"'\");\n    };\n    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache as a Reverse Proxy for RabbitMQ Management UI\nDESCRIPTION: This Apache configuration makes the RabbitMQ management web UI available through an Apache proxy. It properly handles URL encoding and routes requests to the management interface running on port 15672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\nAllowEncodedSlashes      NoDecode\nProxyPass         \"/api\" http://localhost:15672/api nocanon\nProxyPass         \"/\"    http://localhost:15672/\nProxyPassReverse  \"/\"    http://localhost:15672/\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Consumer Prefetch Limit in Java\nDESCRIPTION: This code sets a prefetch limit of 10 unacknowledged messages for a single consumer. The basicQos method with the default global=false applies the limit to each consumer on the channel independently.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-prefetch.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nchannel.basicQos(10); // Per consumer limit\nchannel.basicConsume(\"my-queue\", false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Stream Client\nDESCRIPTION: Command to install the RabbitMQ Stream JavaScript client library as a dependency for the project.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install rabbitmq-stream-js-client\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ and Erlang Repositories for RHEL 9+ Systems\nDESCRIPTION: Repository configuration for installing RabbitMQ and Erlang on RHEL 9, Rocky Linux 9, Alma Linux 9, and modern Fedora releases. It sets up repositories for Erlang and RabbitMQ packages, including GPG key verification and SSL settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[modern-erlang]\nname=modern-erlang-el9\n# Use a set of mirrors maintained by the RabbitMQ core team.\n# The mirrors have significantly higher bandwidth quotas.\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/$basearch\n        https://yum2.rabbitmq.com/erlang/el/9/$basearch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[modern-erlang-noarch]\nname=modern-erlang-el9-noarch\n# Use a set of mirrors maintained by the RabbitMQ core team.\n# The mirrors have significantly higher bandwidth quotas.\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/noarch\n        https://yum2.rabbitmq.com/erlang/el/9/noarch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\n       https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[modern-erlang-source]\nname=modern-erlang-el9-source\n# Use a set of mirrors maintained by the RabbitMQ core team.\n# The mirrors have significantly higher bandwidth quotas.\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/SRPMS\n        https://yum2.rabbitmq.com/erlang/el/9/SRPMS\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\n       https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\n\n\n##\n## RabbitMQ Server\n##\n\n[rabbitmq-el9]\nname=rabbitmq-el9\nbaseurl=https://yum2.rabbitmq.com/rabbitmq/el/9/$basearch\n        https://yum1.rabbitmq.com/rabbitmq/el/9/$basearch\nrepo_gpgcheck=1\nenabled=1\n# Cloudsmith's repository key and RabbitMQ package signing key\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key\n       https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[rabbitmq-el9-noarch]\nname=rabbitmq-el9-noarch\nbaseurl=https://yum2.rabbitmq.com/rabbitmq/el/9/noarch\n        https://yum1.rabbitmq.com/rabbitmq/el/9/noarch\nrepo_gpgcheck=1\nenabled=1\n# Cloudsmith's repository key and RabbitMQ package signing key\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key\n       https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[rabbitmq-el9-source]\nname=rabbitmq-el9-source\nbaseurl=https://yum2.rabbitmq.com/rabbitmq/el/9/SRPMS\n        https://yum1.rabbitmq.com/rabbitmq/el/9/SRPMS\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key\ngpgcheck=0\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n```\n\n----------------------------------------\n\nTITLE: Performing RabbitMQ Alarm Health Check\nDESCRIPTION: Executes a health check that fails if there are any alarms in effect on any cluster nodes. This is useful for automated monitoring and alerting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_alarms\n```\n\n----------------------------------------\n\nTITLE: Enabling Publisher Confirms on a RabbitMQ Channel in Java\nDESCRIPTION: This snippet shows how to enable publisher confirms on a RabbitMQ channel using the Java client. It demonstrates the use of the confirmSelect method, which must be called once for each channel that requires publisher confirms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = connection.createChannel();\nchannel.confirmSelect();\n```\n\n----------------------------------------\n\nTITLE: AMQP Basic QoS Method Example\nDESCRIPTION: The basic.qos method sets the prefetch count to limit unacknowledged messages on a channel. A value of 0 means no limit, while positive integers specify the maximum number of unacknowledged messages allowed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_10\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.qos\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Acceptors in RabbitMQ\nDESCRIPTION: Default configuration for the number of Erlang processes that will accept TLS connections from clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.ssl = 10\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ using ConnectionFactory with URI in C#\nDESCRIPTION: This snippet shows how to connect to a RabbitMQ node using a ConnectionFactory with a URI that includes all connection parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.Uri = new Uri(\"amqp://user:pass@hostName:port/vhost\");\n\nIConnection conn = await factory.CreateConnectionAsync();\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Active Consumer in RabbitMQ with Java\nDESCRIPTION: Demonstrates how to enable Single Active Consumer (SAC) when declaring a queue using the x-single-active-consumer argument set to true with the Java client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumers.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = ...;\nMap<String, Object> arguments = new HashMap<String, Object>();\narguments.put(\"x-single-active-consumer\", true);\nch.queueDeclare(\"my-queue\", false, false, false, arguments);\n```\n\n----------------------------------------\n\nTITLE: Closing a Consumer Gracefully with RabbitMQ in C#\nDESCRIPTION: Demonstrates the process of gracefully closing a consumer in C# by pausing message delivery, checking for unsettled messages, and then closing the consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n// pause the delivery of messages\nconsumer.pause();\n// ensure the number of unsettled messages reaches 0\nlong unsettledMessageCount = consumer.UnsettledMessageCount();\n// close the consumer\nconsumer.close();\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection with a Custom Name in RabbitMQ Java Client\nDESCRIPTION: Creates a connection to a RabbitMQ broker with a custom client-provided connection name to make the connection more identifiable in logs and management UI. The connection name helps identify the application or component making the connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setUri(\"amqp://userName:password@hostName:portNumber/virtualHost\");\n// provides a custom connection name\nConnection conn = factory.newConnection(\"app:audit component:event-consumer\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Cancel Notification Handler in Java\nDESCRIPTION: Example showing how to implement a consumer cancel notification handler using RabbitMQ Java client. The code demonstrates queue declaration, consumer creation with a custom cancellation handler by extending DefaultConsumer class.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumer-cancel.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDeclare(queue, false, true, false, null);\nConsumer consumer = new DefaultConsumer(channel) {\n    @Override\n    public void handleCancel(String consumerTag) throws IOException {\n        // consumer has been cancelled unexpectedly\n    }\n};\nchannel.basicConsume(queue, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Endpoints for RabbitMQ Cluster Formation\nDESCRIPTION: Basic configuration for setting up etcd endpoints in RabbitMQ's cluster formation. This snippet shows how to specify the peer discovery backend and define multiple etcd endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Maximum in RabbitMQ\nDESCRIPTION: Default configuration for the maximum permissible number of channels to negotiate with clients, excluding channel 0 used in the protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 2047\n```\n\n----------------------------------------\n\nTITLE: Complete Task Producer Implementation in RabbitMQ with JavaScript\nDESCRIPTION: Full implementation of a task producer (new_task.js) that sends messages to a durable RabbitMQ queue with persistence enabled. The producer connects to RabbitMQ, creates a channel, declares a durable queue, and sends a persistent message before closing the connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = 'task_queue';\n    var msg = process.argv.slice(2).join(' ') || \"Hello World!\";\n\n    channel.assertQueue(queue, {\n      durable: true\n    });\n    channel.sendToQueue(queue, Buffer.from(msg), {\n      persistent: true\n    });\n    console.log(\" [x] Sent '%s'\", msg);\n  });\n  setTimeout(function() {\n    connection.close();\n    process.exit(0)\n  }, 500);\n});\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Channel Configuration\nDESCRIPTION: Channel limit and timeout configurations\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 2047\n```\n\nLANGUAGE: ini\nCODE:\n```\nchannel_operation_timeout = 15000\n```\n\n----------------------------------------\n\nTITLE: Changing a RabbitMQ User's Password\nDESCRIPTION: This command changes the password for the user 'janeway' to 'newpass' in the RabbitMQ broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl change_password janeway newpass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Individual Messages with RabbitMQ in Java\nDESCRIPTION: Demonstrates the use of the basicGet method to retrieve individual messages on demand, including handling of the GetResponse and manual acknowledgement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nboolean autoAck = false;\nGetResponse response = channel.basicGet(queueName, autoAck);\nif (response == null) {\n    // No message retrieved.\n} else {\n    AMQP.BasicProperties props = response.getProps();\n    byte[] body = response.getBody();\n    long deliveryTag = response.getEnvelope().getDeliveryTag();\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Sending RPC Request and Receiving Response with Spring AMQP in Java\nDESCRIPTION: This code snippet demonstrates how to send an RPC request and receive a response using Spring AMQP's RabbitTemplate. It sends a request to calculate a Fibonacci number and prints the response.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-spring-amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nInteger response = (Integer) template.convertSendAndReceive\n    (exchange.getName(), \"rpc\", start++);\nSystem.out.println(\" [.] Got '\" + response + \"'\");\n```\n\n----------------------------------------\n\nTITLE: Initializing RabbitMQ Connection in Ruby\nDESCRIPTION: Establishes a connection to RabbitMQ server using the Bunny client. It demonstrates connecting to a local server and optionally specifying a remote host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new\nconnection.start\n\n# Optionally connect to a remote host\n# connection = Bunny.new(hostname: 'rabbit.local')\n# connection.start\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from RabbitMQ\nDESCRIPTION: Shows how to properly close a channel and connection when disconnecting from RabbitMQ. Closing connections is important for releasing resources on both client and server sides.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nchannel.close();\nconn.close();\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Consumer Prefetch Limit in Java\nDESCRIPTION: This snippet demonstrates how to set a prefetch limit of 10 unacknowledged messages for a single consumer using the basicQos method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-prefetch.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nchannel.basicQos(10); // Per consumer limit\nchannel.basicConsume(\"my-queue\", false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Prefetch Limit in Java\nDESCRIPTION: This snippet demonstrates how to set a prefetch limit of 10 unacknowledged messages for a single consumer using the basicQos method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumer-prefetch.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nchannel.basicQos(10); // Per consumer limit\nchannel.basicConsume(\"my-queue\", false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 with JWKS URL in RabbitMQ\nDESCRIPTION: Sample configuration that explicitly specifies the JWKS URL rather than using the issuer discovery approach. This can be used when direct JWKS endpoint configuration is preferred.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.jwks_url = \"https://my-jwt-issuer/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Creating and Running RabbitMQ Stream Consumer in Rust\nDESCRIPTION: This snippet demonstrates how to create a RabbitMQ stream consumer, set its starting offset to the first message, and continuously consume messages from the stream. It uses async programming to handle message consumption in a separate task.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet mut consumer = environment\n        .consumer()\n        .offset(OffsetSpecification::First)\n        .build(stream)\n        .await\n        .unwrap();\n\nlet handle = consumer.handle();\ntask::spawn(async move {\n        while let Some(delivery) = consumer.next().await {\n            let d = delivery.unwrap();\n            println!(\"Got message: {:#?} with offset: {}\",\n                     d.message().data().map(|data| String::from_utf8(data.to_vec()).unwrap()),\n                     d.offset(),);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Message TTL in Java\nDESCRIPTION: This Java code snippet demonstrates how to declare a queue with a 60-second message TTL using the x-message-ttl argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-message-ttl\", 60000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Emitting Log Messages with Topic Exchange in JavaScript\nDESCRIPTION: This script connects to RabbitMQ, creates a topic exchange, and publishes messages with routing keys. It allows specifying the routing key and message content via command-line arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = 'topic_logs';\n    var args = process.argv.slice(2);\n    var key = (args.length > 0) ? args[0] : 'anonymous.info';\n    var msg = args.slice(1).join(' ') || 'Hello World!';\n\n    channel.assertExchange(exchange, 'topic', {\n      durable: false\n    });\n    channel.publish(exchange, key, Buffer.from(msg));\n    console.log(\" [x] Sent %s:'%s'\", key, msg);\n  });\n\n  setTimeout(function() {\n    connection.close();\n    process.exit(0)\n  }, 500);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue and Publishing Message in RabbitMQ with Java\nDESCRIPTION: This snippet demonstrates how to declare a queue and publish a message to it using the RabbitMQ Java client. It includes error handling and message confirmation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nchannel.queueDeclare(QUEUE_NAME, false, false, false, null);\nString message = \"Hello World!\";\nchannel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\nSystem.out.println(\" [x] Sent '\" + message + \"'\");\n```\n\n----------------------------------------\n\nTITLE: Handling Unroutable Messages in C#\nDESCRIPTION: This snippet shows how to subscribe to the BasicReturn event of an IChannel to handle messages that cannot be routed when published with the 'mandatory' flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.BasicReturn += (sender, ea) => {\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple RabbitMQ Nodes on a Single Machine in Bash\nDESCRIPTION: This snippet demonstrates how to start multiple RabbitMQ nodes on a single machine by setting different node names, ports, and data directories. It also shows how to cluster these nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached\nRABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=hare rabbitmq-server -detached\nrabbitmqctl -n hare stop_app\nrabbitmqctl -n hare join_cluster rabbit@`hostname -s`\nrabbitmqctl -n hare start_app\n```\n\n----------------------------------------\n\nTITLE: Requiring the amqp.node Library in JavaScript\nDESCRIPTION: Imports the amqp.node client library to enable RabbitMQ connectivity in a Node.js application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Endpoints for RabbitMQ Cluster Formation\nDESCRIPTION: Basic configuration for setting up etcd endpoints in RabbitMQ's cluster formation. This snippet shows how to specify the peer discovery backend and define multiple etcd endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n```\n\n----------------------------------------\n\nTITLE: Consuming Filtered Messages from RabbitMQ Stream in Java\nDESCRIPTION: Java code example demonstrating how to consume messages from a stream with a specific filter. This uses the 'x-stream-filter' argument to receive primarily messages matching the filter value, requiring client-side verification due to the probabilistic nature of server filtering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-filter\", \"california\"), // set filter\n  (consumerTag, message) -> {\n    Map<String, Object> headers = message.getProperties().getHeaders();\n    // there must be some client-side filter logic\n    if (\"california\".equals(headers.get(\"x-stream-filter-value\"))) {\n      // message processing\n      // ...\n    }\n    channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Complete Producer Implementation for RabbitMQ Stream\nDESCRIPTION: Full code for a producer that connects to RabbitMQ, creates a stream if it doesn't exist, and publishes a message to it. The stream has a size-based retention policy of 5 GiB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst streamName = \"hello-nodejs-stream\";\n\nconsole.log(\"Connecting...\");\nconst client = await rabbit.connect({\n        vhost: \"/\",\n        port: 5552,\n        hostname: \"localhost\",\n        username: \"guest\",\n        password: \"guest\",\n    });\n\nconsole.log(\"Making sure the stream exists...\");\nconst streamSizeRetention = 5 * 1e9\nawait client.createStream({ stream: streamName, arguments: { \"max-length-bytes\": streamSizeRetention } });\n\nconst publisher = await client.declarePublisher({ stream: streamName });\n\nconsole.log(\"Sending a message...\");\nawait publisher.send(Buffer.from(\"Test message\"));\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stream with Java AMQP 0.9.1 Client\nDESCRIPTION: Code example showing how to create a basic stream using the Java AMQP 0.9.1 client library. This snippet demonstrates setting the required 'x-queue-type' argument to 'stream' to create a stream instead of a regular queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nConnection connection = factory.newConnection();\nChannel channel = connection.createChannel();\nchannel.queueDeclare(\n  \"my-stream\",\n  true,         // durable\n  false, false, // not exclusive, not auto-delete\n  Collections.singletonMap(\"x-queue-type\", \"stream\")\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming Filtered Messages from RabbitMQ Stream in Java\nDESCRIPTION: Shows how to consume messages from a stream with a specific filter value, including client-side filtering logic for handling probabilistic server-side filtering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-filter\", \"california\"), // set filter\n  (consumerTag, message) -> {\n    Map<String, Object> headers = message.getProperties().getHeaders();\n    // there must be some client-side filter logic\n    if (\"california\".equals(headers.get(\"x-stream-filter-value\"))) {\n      // message processing\n      // ...\n    }\n    channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Scope Aliases with Complex Names\nDESCRIPTION: Configuration example for scope aliases that contain special characters or separators, using a more structured approach with numbered aliases and separate alias/scope properties.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.scope_aliases.1.alias = api://admin\nauth_oauth2.scope_aliases.1.scope = rabbitmq.tag:administrator rabbitmq.read:*/\nauth_oauth2.scope_aliases.2.alias = api://developer.All\nauth_oauth2.scope_aliases.2.scope = rabbitmq.tag:management rabbitmq.read:*/* rabbitmq.write:*/* rabbitmq.configure:*/*\n# ...\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ with Chocolatey in PowerShell\nDESCRIPTION: Commands to install the RabbitMQ package using the Chocolatey package manager. This is the recommended installation method for many use cases as it manages all required dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nchoco install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Receiver with Multiple Listeners\nDESCRIPTION: Message receiver implementation with two separate listener methods to consume messages from different queues bound to the same fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.util.StopWatch;\n\npublic class Tut3Receiver {\n\n\t@RabbitListener(queues = \"#{autoDeleteQueue1.name}\")\n\tpublic void receive1(String in) throws InterruptedException {\n\t\treceive(in, 1);\n\t}\n\n\t@RabbitListener(queues = \"#{autoDeleteQueue2.name}\")\n\tpublic void receive2(String in) throws InterruptedException {\n\t\treceive(in, 2);\n\t}\n\n\tpublic void receive(String in, int receiver) throws InterruptedException {\n\t\tStopWatch watch = new StopWatch();\n\t\twatch.start();\n\t\tSystem.out.println(\"instance \" + receiver + \" [x] Received '\" + in + \"'\");\n\t\tdoWork(in);\n\t\twatch.stop();\n\t\tSystem.out.println(\"instance \" + receiver + \" [x] Done in \"\n\t\t    + watch.getTotalTimeSeconds() + \"s\");\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Issuer URL in RabbitMQ\nDESCRIPTION: Sample configuration using the issuer URL to automatically download OpenID Provider configuration, which includes the JWKS endpoint. This approach is recommended in RabbitMQ 3.13+.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.issuer = https://my-idp-provider/somerealm\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Custom Headers in RabbitMQ .NET Client\nDESCRIPTION: Demonstrates how to publish a message with custom headers. The example adds latitude and longitude values as headers to the message, which can be used for message filtering or routing logic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\n\nvar props = new BasicProperties();\nprops.ContentType = \"text/plain\";\nprops.DeliveryMode = 2;\nprops.Headers = new Dictionary<string, object>();\nprops.Headers.Add(\"latitude\",  51.5252949);\nprops.Headers.Add(\"longitude\", -0.0905493);\n\nawait channel.BasicPublishAsync(exchangeName, routingKey, true, props, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Offset Tracking in RabbitMQ Stream Consumer\nDESCRIPTION: This Java code demonstrates how to configure a RabbitMQ stream consumer with manual offset tracking. It shows setting the initial offset, naming the consumer, activating manual tracking strategy, and periodically storing offsets during message processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// start consuming at the beginning of the stream\nOffsetSpecification offsetSpecification = OffsetSpecification.first();\nAtomicLong messageCount = new AtomicLong(0);\nenvironment.consumerBuilder()\n    .stream(stream)\n    .offset(offsetSpecification)\n    .name(\"offset-tracking-tutorial\") // the consumer must a have name\n    .manualTrackingStrategy().builder() // activate manual offset tracking\n    .messageHandler((ctx, msg) -> {\n        if (firstOffset.compareAndSet(-1, ctx.offset())) {\n            System.out.println(\"First message received.\");\n        }\n        if (messageCount.incrementAndGet() % 10 == 0) {\n            ctx.storeOffset(); // store offset every 10 messages\n        }\n        String body = new String(msg.getBodyAsBinary(), StandardCharsets.UTF_8);\n        if (body.equals(\"marker\")) {\n            lastOffset.set(ctx.offset());\n            ctx.storeOffset(); // store the offset on consumer closing\n            ctx.consumer().close();\n            consumedLatch.countDown();\n        }\n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing a RabbitMQ Work Queue Consumer in Go\nDESCRIPTION: A Go function that creates a RabbitMQ connection, sets up a durable work queue, configures message prefetching, and processes incoming messages with acknowledgments. The worker simulates work by sleeping for a time proportional to the number of dots in the message body.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        q, err := ch.QueueDeclare(\n                \"task_queue\", // name\n                true,         // durable\n                false,        // delete when unused\n                false,        // exclusive\n                false,        // no-wait\n                nil,          // arguments\n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        err = ch.Qos(\n                1,     // prefetch count\n                0,     // prefetch size\n                false, // global\n        )\n        failOnError(err, \"Failed to set QoS\")\n\n        msgs, err := ch.Consume(\n                q.Name, // queue\n                \"\",     // consumer\n                false,  // auto-ack\n                false,  // exclusive\n                false,  // no-local\n                false,  // no-wait\n                nil,    // args\n        )\n        failOnError(err, \"Failed to register a consumer\")\n\n        var forever chan struct{}\n\n        go func() {\n                for d := range msgs {\n                        log.Printf(\"Received a message: %s\", d.Body)\n                        dotCount := bytes.Count(d.Body, []byte(\".\"))\n                        t := time.Duration(dotCount)\n                        time.Sleep(t * time.Second)\n                        log.Printf(\"Done\")\n                        d.Ack(false)\n                }\n        }()\n\n        log.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n        <-forever\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Options in RabbitMQ using ini-like Format\nDESCRIPTION: This snippet demonstrates how to configure SSL options in the modern ini-like format used in rabbitmq.conf files. It sets the paths for CA certificate, server certificate, and server key, as well as specifying peer verification settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# A new style format snippet. This format is used by rabbitmq.conf files.\nssl_options.cacertfile           = /path/to/ca_certificate.pem\nssl_options.certfile             = /path/to/server_certificate.pem\nssl_options.keyfile              = /path/to/server_key.pem\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TCP Acceptors Configuration\nDESCRIPTION: Number of Erlang processes that accept TCP connections\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.tcp = 10\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host with rabbitmqctl\nDESCRIPTION: Creates a virtual host named 'qa1' using the rabbitmqctl command-line tool. This is the most basic form of virtual host creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1\n```\n\n----------------------------------------\n\nTITLE: Listing Permissions with rabbitmqctl in Bash\nDESCRIPTION: These commands use rabbitmqctl to list permissions for users in different virtual hosts. They demonstrate how to inspect user permissions for troubleshooting purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_permissions --vhost /\n# => Listing permissions for vhost \"/\" ...\n# => user\tconfigure\twrite\tread\n# => user2\t.*\t.*\t.*\n# => guest\t.*\t.*\t.*\n# => temp-user\t.*\t.*\t.*\n\nrabbitmqctl list_permissions --vhost gw1\n# => Listing permissions for vhost \"gw1\" ...\n# => user\tconfigure\twrite\tread\n# => guest\t.*\t.*\t.*\n# => user2\t^user2\t^user2\t^user2\n```\n\n----------------------------------------\n\nTITLE: Complete Message Publishing Loop for RabbitMQ Streams\nDESCRIPTION: Complete Java code for creating and publishing a million messages to a RabbitMQ stream with confirmation handling. Each message includes properties and a simple text payload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nint messageCount = 1_000_000;\nCountDownLatch confirmLatch = new CountDownLatch(messageCount);\nIntStream.range(0, messageCount).forEach(i -> {\n    Message message = producer.messageBuilder()\n        .properties()\n            .creationTime(System.currentTimeMillis())\n            .messageId(i)\n        .messageBuilder()\n        .addData(\"hello world\".getBytes(StandardCharsets.UTF_8))\n        .build();\n    producer.send(message, confirmationStatus -> confirmLatch.countDown());\n});\nboolean done = confirmLatch.await(1, TimeUnit.MINUTES);\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ Stream Producer Connection in Python\nDESCRIPTION: This code demonstrates how to create a connection to a RabbitMQ server using the Producer class from the rstream library. It sets up the connection with default credentials on localhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with Producer(\n        host=\"localhost\",\n        username=\"guest\",\n        password=\"guest\",\n    ) as producer\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Channel Configuration\nDESCRIPTION: Channel limit and timeout configurations\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 2047\n```\n\nLANGUAGE: ini\nCODE:\n```\nchannel_operation_timeout = 15000\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Message Consumer in RabbitMQ with JavaScript\nDESCRIPTION: Creates a channel and declares the same queue that the publisher uses, ensuring it exists before attempting to consume messages from it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = 'hello';\n\n    channel.assertQueue(queue, {\n      durable: false\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Interactive Overview Display in RabbitMQ\nDESCRIPTION: Displays essential node information in interactive tabular format\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin show overview\n```\n\n----------------------------------------\n\nTITLE: AMQP Basic Get Operation\nDESCRIPTION: AMQP 0-9-1 method for individual message retrieval from a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/queues.md#2025-04-09_snippet_4\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.get\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client with RabbitMQ in PHP\nDESCRIPTION: This code implements an RPC client using RabbitMQ in PHP. It sets up a connection, declares a callback queue, and provides methods to send RPC requests and handle responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-php.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nclass FibonacciRpcClient\n{\n    private $connection;\n    private $channel;\n    private $callback_queue;\n    private $response;\n    private $corr_id;\n\n    public function __construct()\n    {\n        $this->connection = new AMQPStreamConnection(\n            'localhost',\n            5672,\n            'guest',\n            'guest'\n        );\n        $this->channel = $this->connection->channel();\n        list($this->callback_queue, ,) = $this->channel->queue_declare(\n            \"\",\n            false,\n            false,\n            true,\n            false\n        );\n        $this->channel->basic_consume(\n            $this->callback_queue,\n            '',\n            false,\n            true,\n            false,\n            false,\n            array(\n                $this,\n                'onResponse'\n            )\n        );\n    }\n\n    public function onResponse($rep)\n    {\n        if ($rep->get('correlation_id') == $this->corr_id) {\n            $this->response = $rep->body;\n        }\n    }\n\n    public function call($n)\n    {\n        $this->response = null;\n        $this->corr_id = uniqid();\n\n        $msg = new AMQPMessage(\n            (string) $n,\n            array(\n                'correlation_id' => $this->corr_id,\n                'reply_to' => $this->callback_queue\n            )\n        );\n        $this->channel->basic_publish($msg, '', 'rpc_queue');\n        while (!$this->response) {\n            $this->channel->wait();\n        }\n        return intval($this->response);\n    }\n}\n\n$fibonacci_rpc = new FibonacciRpcClient();\n$response = $fibonacci_rpc->call(30);\necho ' [.] Got ', $response, \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Message TTL in Java\nDESCRIPTION: This Java code snippet creates a queue with a 60-second message TTL using the x-message-ttl argument during queue declaration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-message-ttl\", 60000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Readahead Value for RabbitMQ Storage Device\nDESCRIPTION: Configures the Linux readahead parameter for the block device hosting RabbitMQ data. Increasing readahead (typically to values between 256 and 4096) can improve performance for workloads with high message rates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# This is JUST AN EXAMPLE.\n# The name of the block device in your environment will be different.\n# Values between 256 and 4096 in steps of 256 are most commonly used.\n#\n# Sets readahead for device /dev/sda to 4096.\nsudo blockdev --setra 4096 /dev/sda\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ RPC Client Implementation\nDESCRIPTION: Client implementation that sends RPC requests and handles responses asynchronously. Includes correlation ID management and response synchronization using mutex and condition variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\nrequire 'thread'\n\nclass FibonacciClient\n  attr_accessor :call_id, :response, :lock, :condition, :connection,\n                :channel, :server_queue_name, :reply_queue, :exchange\n\n  def initialize(server_queue_name)\n    @connection = Bunny.new(automatically_recover: false)\n    @connection.start\n\n    @channel = connection.create_channel\n    @exchange = channel.default_exchange\n    @server_queue_name = server_queue_name\n\n    setup_reply_queue\n  end\n\n  def call(n)\n    @call_id = generate_uuid\n\n    exchange.publish(n.to_s,\n                     routing_key: server_queue_name,\n                     correlation_id: call_id,\n                     reply_to: reply_queue.name)\n\n    # wait for the signal to continue the execution\n    lock.synchronize { condition.wait(lock) }\n\n    response\n  end\n\n  def stop\n    channel.close\n    connection.close\n  end\n\n  private\n\n  def setup_reply_queue\n    @lock = Mutex.new\n    @condition = ConditionVariable.new\n    that = self\n    @reply_queue = channel.queue('', exclusive: true)\n\n    reply_queue.subscribe do |_delivery_info, properties, payload|\n      if properties[:correlation_id] == that.call_id\n        that.response = payload.to_i\n\n        # sends the signal to continue the execution of #call\n        that.lock.synchronize { that.condition.signal }\n      end\n    end\n  end\n\n  def generate_uuid\n    # very naive but good enough for code examples\n    \"#{rand}#{rand}#{rand}\"\n  end\nend\n\nclient = FibonacciClient.new('rpc_queue')\n\nputs ' [x] Requesting fib(30)'\nresponse = client.call(30)\n\nputs \" [.] Got #{response}\"\n\nclient.stop\n```\n\n----------------------------------------\n\nTITLE: Declaring Exchange and Server-Named Queue in RabbitMQ Java Client\nDESCRIPTION: Declares a direct exchange and a server-named queue, then binds them together. This demonstrates how to create a queue when only one client needs to work with it, as it's exclusive and will be auto-deleted when the connection closes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(exchangeName, \"direct\", true);\nString queueName = channel.queueDeclare().getQueue();\nchannel.queueBind(queueName, exchangeName, routingKey);\n```\n\n----------------------------------------\n\nTITLE: Message Rejection in .NET\nDESCRIPTION: Demonstrates how to reject messages using RabbitMQ .NET client. Shows message rejection with IModel#BasicReject.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // negatively acknowledge, the message will\n                    // be discarded\n                    channel.BasicReject(ea.DeliveryTag, false);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Single Message Rejection in RabbitMQ using Java\nDESCRIPTION: Demonstrates how to reject a single message retrieved via basic.get using basicNack. The message will be requeued to its original position in the queue if possible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/nack.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nGetResponse gr = channel.basicGet(\"some.queue\", false);\nchannel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Policy in PowerShell\nDESCRIPTION: Command to set an operator policy for queues with names starting with 'amq.' to expire after 1800000 milliseconds using rabbitmqctl in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_operator_policy transient-queue-ttl ^\n    \"^amq\\.\" \"{\"\"expires\"\": 1800000}\" ^\n    --priority 1 ^\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Message Requeuing in Java\nDESCRIPTION: Shows how to requeue messages for later processing using RabbitMQ Java client. Demonstrates usage of Channel#basicReject with requeue flag set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // requeue the delivery\n             channel.basicReject(deliveryTag, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Setting statistics collection interval in RabbitMQ\nDESCRIPTION: Configuration for how frequently statistics are collected in milliseconds, which is primarily relevant for the management plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\ncollect_statistics_interval = 5000\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with OAuth 2.0 Token in RabbitMQ\nDESCRIPTION: This command publishes an MQTT message to RabbitMQ using a JWT token for authentication, generated from a scope definition file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake start-mqtt-publish TOKEN=$(bin/jwt_token scopes-for-mqtt.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Chain Verification Depth in RabbitMQ with Erlang Format\nDESCRIPTION: Classic configuration format (Erlang) example for setting certificate validation depth in RabbitMQ. Configures SSL listeners on port 5671 with a verification depth of 2 for intermediate CA validation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                    {certfile,\"/path/to/server_certificate.pem\"},\n                    {keyfile,\"/path/to/server_key.pem\"},\n                    {depth, 2},\n                    {verify,verify_peer},\n                    {fail_if_no_peer_cert,false}]}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Topic Exchange and Bindings\nDESCRIPTION: Spring configuration class that sets up the topic exchange, anonymous queues, and bindings with routing patterns. Implements both sender and receiver profiles with corresponding beans.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-spring-amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Profile({\"tut5\",\"topics\"})\n@Configuration\npublic class Tut5Config {\n\n\t@Bean\n\tpublic TopicExchange topic() {\n\t\treturn new TopicExchange(\"tut.topic\");\n\t}\n\n\t@Profile(\"receiver\")\n\tprivate static class ReceiverConfig {\n\n\t\t@Bean\n\t\tpublic Tut5Receiver receiver() {\n\t \t \treturn new Tut5Receiver();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Queue autoDeleteQueue1() {\n\t\t\treturn new AnonymousQueue();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Queue autoDeleteQueue2() {\n\t\t\treturn new AnonymousQueue();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding1a(TopicExchange topic,\n\t\t    Queue autoDeleteQueue1) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue1)\n\t\t\t    .to(topic)\n\t\t\t    .with(\"*.orange.*\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding1b(TopicExchange topic,\n\t\t    Queue autoDeleteQueue1) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue1)\n\t\t\t    .to(topic)\n\t\t\t    .with(\"*.*.rabbit\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding2a(TopicExchange topic,\n\t\t    Queue autoDeleteQueue2) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue2)\n\t\t\t    .to(topic)\n\t\t\t    .with(\"lazy.#\");\n\t\t}\n\n\t}\n\n\t@Profile(\"sender\")\n\t@Bean\n\tpublic Tut5Sender sender() {\n\t\treturn new Tut5Sender();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak OAuth Server with Docker\nDESCRIPTION: Command to start a pre-configured Keycloak server with the required scopes, users, and clients for OAuth 2.0 authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Named Exchange in RabbitMQ with Java\nDESCRIPTION: Sends a message to the 'logs' exchange with an empty routing key. For fanout exchanges, the routing key is ignored as messages are broadcast to all bound queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish( \"logs\", \"\", null, message.getBytes());\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in Bash\nDESCRIPTION: Command to set federation policy for exchanges using rabbitmqctl in bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy --apply-to exchanges federate-me \"^amq\\.\" \\\n    '{\"federation-upstream-set\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Producer (Sender)\nDESCRIPTION: Complete Python script for a RabbitMQ producer that connects to the server, declares a queue, and sends a 'Hello World!' message. This script demonstrates the full message sending workflow, from connecting to the server to publishing a message and closing the connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='hello')\n\nchannel.basic_publish(exchange='', routing_key='hello', body='Hello World!')\nprint(\" [x] Sent 'Hello World!\")\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Consumer in Java\nDESCRIPTION: This code sets up a RabbitMQ consumer in Java, establishing a connection, creating a channel, and declaring the queue to consume from.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class Recv {\n\n  private final static String QUEUE_NAME = \"hello\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n    System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\");\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loopback Users in RabbitMQ (INI)\nDESCRIPTION: This snippet demonstrates how to configure loopback users in RabbitMQ. It shows examples of disabling loopback users entirely, restricting a specific user to localhost-only connections, and the default configuration for the guest user.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\n# awful security practice,\n# consider creating a new\n# user with secure generated credentials!\nloopback_users = none\n```\n\nLANGUAGE: ini\nCODE:\n```\nloopback_users.monitoring = true\n```\n\nLANGUAGE: ini\nCODE:\n```\n# guest uses well known\n# credentials and can only\n# log in from localhost\n# by default\nloopback_users.guest = true\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Connection Failures in RabbitMQ .NET Client\nDESCRIPTION: Example of handling initial connection failures with retry logic, as automatic recovery doesn't handle initial connection attempts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// configure various connection settings\n\ntry {\n  IConnection conn = await factory.CreateConnectionAsync();\n} catch (RabbitMQ.Client.Exceptions.BrokerUnreachableException e) {\n  await Task.Delay(5000);\n  // apply retry logic\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Message Acknowledgement in .NET\nDESCRIPTION: Shows how to acknowledge multiple messages at once using RabbitMQ .NET client. Uses IModel#BasicAck with multiple parameter set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // positively acknowledge all deliveries up to\n                    // this delivery tag\n                    channel.BasicAck(ea.DeliveryTag, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for RabbitMQ Management Plugin in INI Format\nDESCRIPTION: This snippet demonstrates how to configure HTTPS for the RabbitMQ Management plugin using the INI configuration format. It specifies the SSL port, certificate files, and optional password for the private key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n## This key must only be used if private key is password protected\n# management.ssl.password   = bunnies\n```\n\n----------------------------------------\n\nTITLE: Rejecting Multiple Messages with RabbitMQ in Java\nDESCRIPTION: Shows how to reject multiple messages in bulk using a single basicNack call. Uses the multiple flag set to true to reject all unacknowledged messages up to the specified delivery tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/nack.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGetResponse gr1 = channel.basicGet(\"some.queue\", false);\nGetResponse gr2 = channel.basicGet(\"some.queue\", false);\nchannel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Worker Implementation in Ruby\nDESCRIPTION: Full implementation of a durable task queue worker with manual acknowledgments, prefetch limit, and proper error handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new(automatically_recover: false)\nconnection.start\n\nchannel = connection.create_channel\nqueue = channel.queue('task_queue', durable: true)\n\nchannel.prefetch(1)\nputs ' [*] Waiting for messages. To exit press CTRL+C'\n\nbegin\n  queue.subscribe(manual_ack: true, block: true) do |delivery_info, _properties, body|\n    puts \" [x] Received '#{body}'\"\n    # imitate some work\n    sleep body.count('.').to_i\n    puts ' [x] Done'\n    channel.ack(delivery_info.delivery_tag)\n  end\nrescue Interrupt => _\n  connection.close\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Core RabbitMQ Java Client Classes\nDESCRIPTION: Imports the main Connection and Channel classes from the RabbitMQ Java client library. These classes are fundamental for establishing connections and performing channel operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Producer in Node.js with RabbitMQ\nDESCRIPTION: Code for creating and sending messages to a durable work queue. The script accepts command line arguments as the message content and ensures messages are persistent.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar queue = 'task_queue';\nvar msg = process.argv.slice(2).join(' ') || \"Hello World!\";\n\nchannel.assertQueue(queue, {\n  durable: true\n});\nchannel.sendToQueue(queue, Buffer.from(msg), {\n  persistent: true\n});\nconsole.log(\" [x] Sent '%s'\", msg);\n```\n\n----------------------------------------\n\nTITLE: Advanced HTTPS Configuration for RabbitMQ Management Plugin\nDESCRIPTION: Extended HTTPS configuration with TLS version restrictions, cipher suite selection, and security options. Includes settings for controlling client renegotiation and cipher ordering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n## This key must only be used if private key is password protected\n# management.ssl.password   = bunnies\n\nmanagement.ssl.honor_cipher_order   = true\nmanagement.ssl.honor_ecc_order      = true\nmanagement.ssl.client_renegotiation = false\nmanagement.ssl.secure_renegotiate   = true\n\nmanagement.ssl.versions.1 = tlsv1.2\nmanagement.ssl.versions.2 = tlsv1.1\n\nmanagement.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\nmanagement.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\nmanagement.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\nmanagement.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\nmanagement.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n\n## Usually RabbitMQ nodes do not perform peer verification of HTTP API clients\n## but it can be enabled if needed. Clients then will have to be configured with\n## a certificate and private key pair.\n##\n## See ./ssl#peer-verification for details.\n# management.ssl.verify = verify_peer\n# management.ssl.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Using Multiple Endpoints\nDESCRIPTION: Illustrates how to specify multiple endpoints when connecting to RabbitMQ. This approach is useful for high availability setups where the client can try multiple nodes in case of connection failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nAddress[] addrArr = new Address[]{ new Address(hostname1, portnumber1)\n                                 , new Address(hostname2, portnumber2)};\nConnection conn = factory.newConnection(addrArr);\n```\n\n----------------------------------------\n\nTITLE: Deleting Queues in RabbitMQ .NET Client\nDESCRIPTION: Shows different ways to delete a queue: unconditional deletion, deletion only if the queue is empty, or deletion only if the queue has no consumers. Also demonstrates how to purge all messages from a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueDeleteAsync(\"queue-name\", false, false);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueDeleteAsync(\"queue-name\", false, true);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueDeleteAsync(\"queue-name\", true, false);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueuePurgeAsync(\"queue-name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Versions in RabbitMQ Server\nDESCRIPTION: Example of RabbitMQ server configuration to limit TLS versions to TLSv1.3 only. Shows how to set SSL options including certificate paths and protocol versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.3\n\n# Limits enable cipher suites to only those used by TLSv1.3.\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from a RabbitMQ Queue in JavaScript\nDESCRIPTION: Sets up a consumer that listens for messages on the specified queue and processes them using a callback function. The noAck option means automatic acknowledgment of message delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\" [*] Waiting for messages in %s. To exit press CTRL+C\", queue);\nchannel.consume(queue, function(msg) {\n  console.log(\" [x] Received %s\", msg.content.toString());\n}, {\n    noAck: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Mono Trust Store on Linux\nDESCRIPTION: Bash command to add a certificate to the Mono Trust certificate store on Linux. This allows the .NET client running under Mono to trust the RabbitMQ server certificate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -add -c Trust /path/to/cacert.cer\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Stream Consumer in Python\nDESCRIPTION: This code demonstrates how to set up a RabbitMQ stream consumer, including creating a connection and declaring the stream to consume from.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconsumer = Consumer(host=\"localhost\", username=\"guest\", password=\"guest\")\nawait consumer.create_stream(\n    STREAM_NAME, exists_ok=True, arguments={\"MaxLengthBytes\": STREAM_RETENTION}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Beans for RabbitMQ Hello World Example\nDESCRIPTION: Java configuration class that defines Spring beans for the RabbitMQ tutorial. It creates a queue named 'hello' and configures sender and receiver beans based on active profiles.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut1;\n\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Profile({\"tut1\",\"hello-world\"})\n@Configuration\npublic class Tut1Config {\n\n    @Bean\n    public Queue hello() {\n        return new Queue(\"hello\");\n    }\n\n    @Profile(\"receiver\")\n    @Bean\n    public Tut1Receiver receiver() {\n        return new Tut1Receiver();\n    }\n\n    @Profile(\"sender\")\n    @Bean\n    public Tut1Sender sender() {\n        return new Tut1Sender();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Rich Authorization Request JWT Token for RabbitMQ\nDESCRIPTION: Example of a JWT token using the Rich Authorization Request format to define fine-grained permissions. Shows permissions for specific vhosts, clusters, and actions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    {\n      \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:production-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    {\n      \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\" ],\n      \"actions\": [\"administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream from Specific Numeric Offset in Java\nDESCRIPTION: Java code example showing how to start consuming messages from a stream at a specific numeric offset (5000). This allows precise positioning within the stream's message log.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", 5000), // offset value\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Two-Node RabbitMQ Cluster on a Single Machine\nDESCRIPTION: Commands to create a two-node RabbitMQ cluster on a single machine by running nodes with different ports and names, then joining them into a cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached\nRABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=hare rabbitmq-server -detached\nrabbitmqctl -n hare stop_app\nrabbitmqctl -n hare join_cluster rabbit@`hostname -s`\nrabbitmqctl -n hare start_app\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSv1.2 with Secure Ciphers in RabbitMQ\nDESCRIPTION: This configuration disables client renegotiation, enables secure renegotiation, and specifies a prioritized list of strong cipher suites for TLSv1.2. Note that these settings are incompatible with TLSv1.3 and must be removed if TLSv1.3 is enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.client_renegotiation = false\nssl_options.secure_renegotiate   = true\n\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n```\n\n----------------------------------------\n\nTITLE: Illustrating AMQP Message Requeue Commands\nDESCRIPTION: This code snippet demonstrates the AMQP methods used for requeueing messages, including basic.recover, basic.reject, and basic.nack. These commands are crucial for understanding message ordering and requeue behavior in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/semantics.md#2025-04-09_snippet_1\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.recover\nbasic.reject\nbasic.nack\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resource Servers in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to set up multiple resource servers (prod and dev) with the same identity provider. This allows different resources to be managed by the same OAuth 2.0 provider.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = https://my-idp.com/\nauth_oauth2.resource_servers.1.id = prod\nauth_oauth2.resource_servers.2.id = dev\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from RabbitMQ in C#\nDESCRIPTION: This snippet demonstrates the proper way to disconnect from RabbitMQ by closing and disposing both the channel and connection objects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nawait channel.CloseAsync();\nawait conn.CloseAsync();\nawait channel.DisposeAsync();\nawait conn.DisposeAsync();\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Environment and Creation in Java\nDESCRIPTION: Creates the RabbitMQ stream environment and establishes a new stream with 1GB capacity limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ntry (Environment environment = Environment.builder().build()) {\n    String stream = \"stream-offset-tracking-java\";\n    environment.streamCreator()\n      .stream(stream)\n      .maxLengthBytes(ByteCapacity.GB(1))\n      .create();\n\n     // publishing code to come\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ TLS Support in INI Format\nDESCRIPTION: Example configuration in INI format to enable TLS in RabbitMQ, specifying the TLS listener port and required certificate files. This configuration also enables peer verification for client certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\n# If the private key file is password protected, set this value:\n# ssl_options.password = PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Setting authentication backends in RabbitMQ\nDESCRIPTION: Configuration for which authentication and authorization backends to use. Additional backends are available through plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = internal\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Host Metadata with rabbitmqctl\nDESCRIPTION: Updates the metadata for an existing virtual host, including description, default queue type, and tags. This allows for modification of virtual host properties after creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl update_vhost_metadata qa1 --description \"QA environment for issue 1662\" --default-queue-type quorum --tags qa,project-a,qa-1662\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Event Exchange Plugin\nDESCRIPTION: Command to enable the rabbitmq-event-exchange plugin in RabbitMQ server. This plugin requires no additional configuration and allows applications to consume internal RabbitMQ events.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/event-exchange.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_event_exchange\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages to Topic Exchange in RabbitMQ with Swift\nDESCRIPTION: Function that creates a connection to RabbitMQ, declares a topic exchange named 'topic_logs', and publishes a message with a specified routing key. The routing key follows a dot-delimited pattern to support hierarchical routing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-swift.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc emitLogTopic(_ msg: String, routingKey: String) {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let x = ch.topic(\"topic_logs\")\n    x.publish(msg.data(using: .utf8), routingKey: routingKey)\n    print(\"Sent '\\(msg)'\")\n    conn.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Message Acknowledgement in Java\nDESCRIPTION: Demonstrates batch acknowledgement of multiple messages using RabbitMQ Java client. Uses Channel#basicAck with multiple flag set to true to acknowledge all messages up to specified delivery tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge all deliveries up to\n             // this delivery tag\n             channel.basicAck(deliveryTag, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Parameters in RabbitMQ\nDESCRIPTION: Sets a parameter for a specific component. The example configures a federation upstream named 'node01' with connection URI and acknowledgment mode settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream node01 '{\"uri\":\"amqp://user:password@server/%2F\",\"ack-mode\":\"on-publish\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Consumer Prefetch in Erlang\nDESCRIPTION: This snippet shows how to configure a default consumer prefetch limit in RabbitMQ's advanced configuration file, setting a default of 250 messages if the consumer doesn't specify a limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumer-prefetch.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config file\n[\n {rabbit, [\n       {default_consumer_prefetch, {false,250}}\n     ]\n }.\n].\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Receiver with Direct Exchange in RabbitMQ using Java\nDESCRIPTION: This class implements a log receiver that uses a direct exchange to consume log messages of specified severities. It demonstrates how to set up the connection, declare the exchange, create bindings, and consume messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.*;\n\npublic class ReceiveLogsDirect {\n\n  private static final String EXCHANGE_NAME = \"direct_logs\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.exchangeDeclare(EXCHANGE_NAME, \"direct\");\n    String queueName = channel.queueDeclare().getQueue();\n\n    if (argv.length < 1) {\n        System.err.println(\"Usage: ReceiveLogsDirect [info] [warning] [error]\");\n        System.exit(1);\n    }\n\n    for (String severity : argv) {\n        channel.queueBind(queueName, EXCHANGE_NAME, severity);\n    }\n    System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\");\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n        String message = new String(delivery.getBody(), \"UTF-8\");\n        System.out.println(\" [x] Received '\" +\n            delivery.getEnvelope().getRoutingKey() + \"':'\" + message + \"'\");\n    };\n    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Content Type Header Example\nDESCRIPTION: Example of the required content type header format for RabbitMQ HTTP API responses\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\napplication/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Cancellation on Failover in Java\nDESCRIPTION: Example showing how to set up a consumer that will be notified when a mirrored queue fails over, using the x-cancel-on-ha-failover argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-cancel-on-ha-failover\", true);\nchannel.basicConsume(\"my-queue\", false, args, consumer);\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback Queue and Publishing RPC Request in Go\nDESCRIPTION: This snippet shows how to declare a callback queue and publish an RPC request message using the RabbitMQ Go client. It sets up a temporary exclusive queue for receiving the response and includes the necessary properties in the published message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-go.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // noWait\n  nil,   // arguments\n)\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nerr = ch.PublishWithContext(ctx,\n  \"\",          // exchange\n  \"rpc_queue\", // routing key\n  false,       // mandatory\n  false,       // immediate\n  amqp.Publishing{\n    ContentType:   \"text/plain\",\n    CorrelationId: corrId,\n    ReplyTo:       q.Name,\n    Body:          []byte(strconv.Itoa(n)),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Support for MQTT in RabbitMQ\nDESCRIPTION: Enables TLS for MQTT connections by configuring SSL options and specifying TLS-enabled listener ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert  = true\n\n# default TLS-enabled port for MQTT connections\nmqtt.listeners.ssl.default = 8883\nmqtt.listeners.tcp.default = 1883\n```\n\n----------------------------------------\n\nTITLE: Complete Message Consumer with Direct Exchange in Elixir\nDESCRIPTION: Full implementation of a log message consumer that receives messages from a direct exchange based on specified severity levels. The code creates bindings for each requested severity and processes incoming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ReceiveLogsDirect do\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, meta} ->\n        IO.puts \" [x] Received [#{meta.routing_key}] #{payload}\"\n\n        wait_for_messages(channel)\n    end\n  end\nend\n\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\n{severities, _, _} =\n  System.argv\n  |> OptionParser.parse(strict: [info:    :boolean,\n                                 warning: :boolean,\n                                 error:   :boolean])\n\nAMQP.Exchange.declare(channel, \"direct_logs\", :direct)\n\n{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, \"\", exclusive: true)\n\nfor {severity, true} <- severities do\n  binding_key = severity |> to_string\n  AMQP.Queue.bind(channel, queue_name, \"direct_logs\", routing_key: binding_key)\nend\n\nAMQP.Basic.consume(channel, queue_name, nil, no_ack: true)\n\nIO.puts \" [*] Waiting for messages. To exit press CTRL+C, CTRL+C\"\n\nReceiveLogsDirect.wait_for_messages(channel)\n```\n\n----------------------------------------\n\nTITLE: Viewing RabbitMQ Configuration File Information in Logs\nDESCRIPTION: Example log output showing configuration file locations when files are properly found by RabbitMQ, including both the advanced.config and rabbitmq.conf files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /etc/rabbitmq/advanced.config\n               : /etc/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Negative Acknowledgement with Requeue in Java RabbitMQ Client\nDESCRIPTION: Shows how to negatively acknowledge a delivery with requeueing using the Java client for RabbitMQ. The message will be requeued for another consumer to process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// this example assumes an existing channel instance\n\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // requeue the delivery\n             channel.basicReject(deliveryTag, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Complete Task Producer Implementation in Go\nDESCRIPTION: Full implementation of a task producer (new_task.go) that creates durable queues and sends persistent messages to RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n        \"os\"\n        \"strings\"\n        \"time\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        q, err := ch.QueueDeclare(\n                \"task_queue\", // name\n                true,         // durable\n                false,        // delete when unused\n                false,        // exclusive\n                false,        // no-wait\n                nil,          // arguments\n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n\n        body := bodyFrom(os.Args)\n        err = ch.PublishWithContext(ctx,\n                \"\",           // exchange\n                q.Name,       // routing key\n                false,        // mandatory\n                false,\n                amqp.Publishing{\n                        DeliveryMode: amqp.Persistent,\n                        ContentType:  \"text/plain\",\n                        Body:         []byte(body),\n                })\n        failOnError(err, \"Failed to publish a message\")\n        log.Printf(\" [x] Sent %s\", body)\n}\n\nfunc bodyFrom(args []string) string {\n        var s string\n        if (len(args) < 2) || os.Args[1] == \"\" {\n                s = \"hello\"\n        } else {\n                s = strings.Join(args[1:], \" \")\n        }\n        return s\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Custom Headers in RabbitMQ Java Client\nDESCRIPTION: Publishes a message with custom headers containing application-specific values. This example adds latitude and longitude coordinates as message headers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> headers = new HashMap<String, Object>();\nheaders.put(\"latitude\",  51.5252949);\nheaders.put(\"longitude\", -0.0905493);\n\nchannel.basicPublish(exchangeName, routingKey,\n             new AMQP.BasicProperties.Builder()\n               .headers(headers)\n               .build(),\n               messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth2 Resources in RabbitMQ\nDESCRIPTION: Basic OAuth2 plugin configuration defining four different resource servers with unique IDs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = http://some_idp_url\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.3.id = rabbit_qa\nauth_oauth2.resource_servers.4.id = rabbit_internal\n```\n\n----------------------------------------\n\nTITLE: Complete Example Configuration for RabbitMQ Management Plugin\nDESCRIPTION: A comprehensive example configuration that includes TCP/SSL settings, request logging, statistics intervals, retention policies, and other relevant parameters for the RabbitMQ Management plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.default = 5672\n\ncollect_statistics_interval = 10000\n\n## Note: this uses the core `load_definitions` key over\n## now deprecated `management.load_definitions`\n# load_definitions = /path/to/exported/definitions.json\n\nmanagement.tcp.port = 15672\nmanagement.tcp.ip   = 0.0.0.0\n\nmanagement.ssl.port       = 15671\nmanagement.ssl.ip         = 0.0.0.0\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n\nmanagement.http_log_dir = /path/to/rabbit/logs/http\n\nmanagement.rates_mode = basic\n\n# Configure how long aggregated data (such as message rates and queue\n# lengths) is retained.\n# Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)\nmanagement.sample_retention_policies.global.minute    = 5\nmanagement.sample_retention_policies.global.hour  = 60\nmanagement.sample_retention_policies.global.day = 1200\n\nmanagement.sample_retention_policies.basic.minute   = 5\nmanagement.sample_retention_policies.basic.hour = 60\n\nmanagement.sample_retention_policies.detailed.10 = 5\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Authorization Request in RabbitMQ OAuth 2.0\nDESCRIPTION: Example of a Rich Authorization Request JWT token supported by RabbitMQ. This format allows for fine-grained permissions and moves away from simple scope text labels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    {\n      \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:production-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    {\n      \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\" ],\n      \"actions\": [\"administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Worker Implementation for RabbitMQ Work Queue in Elixir\nDESCRIPTION: Complete implementation of a worker that processes messages from a durable queue with proper acknowledgment, fair dispatch, and simulated work. It uses message acknowledgment to ensure no tasks are lost if the worker crashes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Worker do\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, meta} ->\n        IO.puts \" [x] Received #{payload}\"\n        payload\n        |> to_char_list\n        |> Enum.count(fn x -> x == ?. end)\n        |> Kernel.*(1000)\n        |> :timer.sleep\n        IO.puts \" [x] Done.\"\n        AMQP.Basic.ack(channel, meta.delivery_tag)\n\n        wait_for_messages(channel)\n    end\n  end\nend\n\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\nAMQP.Queue.declare(channel, \"task_queue\", durable: true)\nAMQP.Basic.qos(channel, prefetch_count: 1)\n\nAMQP.Basic.consume(channel, \"task_queue\")\nIO.puts \" [*] Waiting for messages. To exit press CTRL+C, CTRL+C\"\n\nWorker.wait_for_messages(channel)\n```\n\n----------------------------------------\n\nTITLE: Handling Unroutable Messages with RabbitMQ in Java\nDESCRIPTION: Demonstrates how to set up a ReturnListener to handle messages that cannot be routed when published with the 'mandatory' flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nchannel.addReturnListener(new ReturnListener() {\n    public void handleReturn(int replyCode,\n                                  String replyText,\n                                  String exchange,\n                                  String routingKey,\n                                  AMQP.BasicProperties properties,\n                                  byte[] body)\n    throws IOException {\n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Connection Acceptance Log Example\nDESCRIPTION: Example log entry showing a successful AMQP connection acceptance with client and server connection details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n2018-11-22 10:44:33.654 [info] <0.620.0> accepting AMQP connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Basic Health Check for Node Status\nDESCRIPTION: Shows two different health check commands: one that requires a fully booted node and another that works with nodes awaiting schema sync.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_running\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics ping\n```\n\n----------------------------------------\n\nTITLE: Declaring a Temporary Queue in Go\nDESCRIPTION: This snippet shows how to declare a temporary queue with a server-generated name. The queue is non-durable and exclusive, meaning it will be deleted when the connection closes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // no-wait\n  nil,   // arguments\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to RabbitMQ\nDESCRIPTION: Code that publishes a message to the 'hello' queue through the default exchange with a routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Basic.publish(channel, \"\", \"hello\", \"Hello World!\")\nIO.puts \" [x] Sent 'Hello World!'\"\n```\n\n----------------------------------------\n\nTITLE: Consuming and Processing Messages from a Work Queue in Go\nDESCRIPTION: Worker code that consumes messages from a RabbitMQ queue and simulates task processing. It counts the number of dots in the message body and sleeps for that many seconds, simulating a time-consuming task.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmsgs, err := ch.Consume(\n  q.Name, // queue\n  \"\",     // consumer\n  true,   // auto-ack\n  false,  // exclusive\n  false,  // no-local\n  false,  // no-wait\n  nil,    // args\n)\nfailOnError(err, \"Failed to register a consumer\")\n\nvar forever chan struct{}\n\ngo func() {\n  for d := range msgs {\n    log.Printf(\"Received a message: %s\", d.Body)\n    dotCount := bytes.Count(d.Body, []byte(\".\"))\n    t := time.Duration(dotCount)\n    time.Sleep(t * time.Second)\n    log.Printf(\"Done\")\n  }\n}()\n\nlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n<-forever\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in Erlang Format in RabbitMQ\nDESCRIPTION: Command to list cipher suites in Erlang format, which is only accepted in the classic config format. This format differs from the OpenSSL format used in the new config style.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format erlang -q\n```\n\n----------------------------------------\n\nTITLE: Opening a Channel in Java\nDESCRIPTION: This snippet demonstrates how to open a new channel after establishing a connection using the RabbitMQ Java client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\nConnection conn = cf.createConnection();\n\nChannel ch = conn.createChannel();\n\n// ... use the channel to declare topology, publish, consume\n```\n\n----------------------------------------\n\nTITLE: RPC Server Implementation in C#\nDESCRIPTION: Complete RPC server implementation that handles incoming requests, calculates Fibonacci numbers, and sends responses back to clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text;\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\n\nvar factory = new ConnectionFactory { HostName = \"localhost\" };\nusing var connection = factory.CreateConnection();\nusing var channel = connection.CreateModel();\n\nchannel.QueueDeclare(queue: \"rpc_queue\",\n                     durable: false,\n                     exclusive: false,\n                     autoDelete: false,\n                     arguments: null);\nchannel.BasicQos(0, 1, false);\nvar consumer = new EventingBasicConsumer(channel);\nchannel.BasicConsume(queue: \"rpc_queue\",\n                     autoAck: false,\n                     consumer: consumer);\nConsole.WriteLine(\" [x] Awaiting RPC requests\");\n\nconsumer.Received += (model, ea) =>\n{\n    string response = null;\n\n    var body = ea.Body.ToArray();\n    var props = ea.BasicProperties;\n    var replyProps = channel.CreateBasicProperties();\n    replyProps.CorrelationId = props.CorrelationId;\n\n    try\n    {\n        var message = Encoding.UTF8.GetString(body);\n        int n = int.Parse(message);\n        Console.WriteLine($\" [.] Fib({message})\");\n        response = FibonacciRpc(n).ToString();\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine($\" [.] {e.Message}\");\n        response = \"\";\n    }\n    finally\n    {\n        var responseBytes = Encoding.UTF8.GetBytes(response);\n        channel.BasicPublish(exchange: \"\",\n                           routingKey: props.ReplyTo,\n                           basicProperties: replyProps,\n                           body: responseBytes);\n        channel.BasicAck(deliveryTag: ea.DeliveryTag,\n                       multiple: false);\n    }\n};\n\nConsole.WriteLine(\" Press [enter] to exit.\");\nConsole.ReadLine();\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ Node Effective Configuration with rabbitmq-diagnostics\nDESCRIPTION: Commands for inspecting the effective configuration of a running RabbitMQ node using the rabbitmq-diagnostics tool. Includes commands for local and remote node inspection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# inspect effective configuration on a node\nrabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Configuring hosts for OAuth 2.0 Authentication\nDESCRIPTION: Required host entries in /etc/hosts file for setting up OAuth 2.0 authentication with RabbitMQ and UAA\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n127.0.0.1 localhost uaa rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in RabbitMQ with Java\nDESCRIPTION: Creates a binding relationship between the 'logs' exchange and a queue. This binding instructs the exchange to send messages to the specified queue when messages are published to the exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueBind(queueName, \"logs\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Passive Queue Declaration in RabbitMQ Java Client\nDESCRIPTION: Performs a passive queue declaration to check if a queue exists and get information about it without modifying it. Returns the message count and consumer count if the queue exists, or throws an exception if it doesn't.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nQueue.DeclareOk response = channel.queueDeclarePassive(\"queue-name\");\n// returns the number of messages in Ready state in the queue\nresponse.getMessageCount();\n// returns the number of consumers the queue has\nresponse.getConsumerCount();\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Emitter with Direct Exchange in JavaScript\nDESCRIPTION: Complete implementation of a log emitter using a direct exchange and severity-based routing keys with the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = 'direct_logs';\n    var args = process.argv.slice(2);\n    var msg = args.slice(1).join(' ') || 'Hello World!';\n    var severity = (args.length > 0) ? args[0] : 'info';\n\n    channel.assertExchange(exchange, 'direct', {\n      durable: false\n    });\n    channel.publish(exchange, severity, Buffer.from(msg));\n    console.log(\" [x] Sent %s: '%s'\", severity, msg);\n  });\n\n  setTimeout(function() {\n    connection.close();\n    process.exit(0)\n  }, 500);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Required Classes for RabbitMQ Java Client\nDESCRIPTION: These are the necessary imports for using the RabbitMQ Java client to create a connection and channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\n```\n\n----------------------------------------\n\nTITLE: Check SSL Versions in Erlang Shell\nDESCRIPTION: Command to check SSL versions directly in the Erlang shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\nssl:versions().\n```\n\n----------------------------------------\n\nTITLE: Batch Message Rejection in Java\nDESCRIPTION: Demonstrates batch rejection of multiple messages using RabbitMQ Java client. Uses Channel#basicNack to reject and requeue multiple messages at once.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // requeue all unacknowledged deliveries up to\n             // this delivery tag\n             channel.basicNack(deliveryTag, true, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Asynchronous Confirm Callbacks in RabbitMQ with Java\nDESCRIPTION: This code demonstrates a complete implementation of asynchronous confirm callbacks that manage a map of outstanding messages. It handles both single and multiple confirmations, and includes error handling for nack-ed messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nConcurrentNavigableMap<Long, String> outstandingConfirms = new ConcurrentSkipListMap<>();\nConfirmCallback cleanOutstandingConfirms = (sequenceNumber, multiple) -> {\n    if (multiple) {\n        ConcurrentNavigableMap<Long, String> confirmed = outstandingConfirms.headMap(\n          sequenceNumber, true\n        );\n        confirmed.clear();\n    } else {\n        outstandingConfirms.remove(sequenceNumber);\n    }\n};\n\nchannel.addConfirmListener(cleanOutstandingConfirms, (sequenceNumber, multiple) -> {\n    String body = outstandingConfirms.get(sequenceNumber);\n    System.err.format(\n      \"Message with body %s has been nack-ed. Sequence number: %d, multiple: %b%n\",\n      body, sequenceNumber, multiple\n    );\n    cleanOutstandingConfirms.handle(sequenceNumber, multiple);\n});\n// ... publishing code\n```\n\n----------------------------------------\n\nTITLE: Configuring Balanced Queue Leader Distribution in RabbitMQ\nDESCRIPTION: Sets the queue_leader_locator setting in rabbitmq.conf to ensure a balanced distribution of queue leaders across cluster nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nqueue_leader_locator = balanced\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with AMQP 0.9.1 Java Client\nDESCRIPTION: This snippet shows how to publish messages using the RabbitMQ AMQP 0.9.1 Java client with custom message properties like message ID, timestamp, and content type. The routing key is selected from an array of regions in round-robin fashion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(\n  \"events\",  // exchange\n  REGIONS[i % REGIONS.length], // routing key, round robin across regions\n  new AMQP.BasicProperties.Builder()\n    .messageId(String.valueOf(i)) // message ID\n    .timestamp(new Date()) // creation time\n    .contentType(\"text/plain\") // content type\n    .build(),\n  (\"message \" + i).getBytes(StandardCharsets.UTF_8) // body\n);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Client Certificate Verification in RabbitMQ with TLS\nDESCRIPTION: YAML configuration to enforce client certificate verification in RabbitMQ by setting the ssl_options.fail_if_no_peer_cert option to true in the additional configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  rabbitmq:\n    additionalConfig: |\n      ssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Setting up RabbitMQ apt repositories on Ubuntu 24.04 (Noble)\nDESCRIPTION: This bash script adds RabbitMQ repositories to an Ubuntu 24.04 system. It installs prerequisite packages, imports GPG keys for repository verification, configures both Erlang and RabbitMQ apt sources with redundant mirrors, and updates package indices to prepare for installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nsudo apt-get install curl gnupg apt-transport-https -y\n\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null\n## Community mirror of Cloudsmith: modern Erlang repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null\n## Community mirror of Cloudsmith: RabbitMQ repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n\n## Add apt repositories maintained by Team RabbitMQ\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\n\n## Provides RabbitMQ\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\nEOF\n\n## Update package indices\nsudo apt-get update -y\n\n## Install Erlang packages\n##\n## For versions not compatible with the latest available Erlang series, which is the case\n## for 3.13.x, apt must be instructed to install specifically Erlang 26.\n```\n\n----------------------------------------\n\nTITLE: Listing All Deprecated Features with Shell Command\nDESCRIPTION: Command to list all deprecated features (whether in use or not) within the RabbitMQ cluster using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin deprecated_features list\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Command to set a custom name for the RabbitMQ cluster\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q set_cluster_name testing-prometheus\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Limits for RabbitMQ\nDESCRIPTION: systemd configuration file for setting OS kernel limits for RabbitMQ server, specifically setting the maximum number of open file handles to 64000.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_60\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=64000\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Modified Outcome Configuration Documentation\nDESCRIPTION: Documentation explaining how message modification outcomes work in AMQP 1.0 for different queue types, including behavior for undeliverable messages and dead lettering\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Modified Outcome\nModifying message annotations with the [modified](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-modified) outcome is supported in [quorum queues](./quorum-queues), but not in [classic queues](./classic-queues).\nModifying a message in a [stream](./streams) doesn't make sense given that a stream is an immutable log.\n\nIf field `undeliverable-here` is\n\n* `true`, classic queues and quorum queues will [dead letter](./dlx) the message. If dead lettering is not configured, the message will be discarded.\n* `false`, classic queues and quorum queues will requeue the message.\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic-based Log Reception in Ruby with RabbitMQ\nDESCRIPTION: This code snippet shows how to receive messages from a topic exchange in RabbitMQ using Ruby. It creates a connection, declares a topic exchange, creates a queue, binds the queue to the exchange with specified routing keys, and consumes messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nabort \"Usage: #{$PROGRAM_NAME} [binding key]\" if ARGV.empty?\n\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nexchange = channel.topic('topic_logs')\nqueue = channel.queue('', exclusive: true)\n\nARGV.each do |severity|\n  queue.bind(exchange, routing_key: severity)\nend\n\nputs ' [*] Waiting for logs. To exit press CTRL+C'\n\nbegin\n  queue.subscribe(block: true) do |delivery_info, _properties, body|\n    puts \" [x] #{delivery_info.routing_key}:#{body}\"\n  end\nrescue Interrupt => _\n  channel.close\n  connection.close\n\n  exit(0)\nend\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions to a User in RabbitMQ (Bash and PowerShell)\nDESCRIPTION: This snippet demonstrates how to grant permissions to a user in a specific virtual host in RabbitMQ using the rabbitmqctl command in both Bash and PowerShell. It grants configure, write, and read permissions on all entities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# First \".*\" for configure permission on every entity\n# Second \".*\" for write permission on every entity\n# Third \".*\" for read permission on every entity\nrabbitmqctl set_permissions -p \"custom-vhost\" \"username\" \".*\" \".*\" \".*\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n# First \".*\" for configure permission on every entity\n# Second \".*\" for write permission on every entity\n# Third \".*\" for read permission on every entity\nrabbitmqctl.bat set_permissions -p 'custom-vhost' 'username' '.*' '.*' '.*'\n```\n\n----------------------------------------\n\nTITLE: Opening a Channel in Erlang\nDESCRIPTION: Opens a channel on an established RabbitMQ connection using the amqp_connection:open_channel/1 function. The channel is used for defining topology, publishing, and consuming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{ok, Channel} = amqp_connection:open_channel(Connection)\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Handling and Subscription for RabbitMQ Stream Consumer in Python\nDESCRIPTION: This snippet shows how to implement a message handling callback and subscribe to a RabbitMQ stream using the consumer in Python. It sets up the consumer to start from the first available message in the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def on_message(msg: AMQPMessage, message_context: MessageContext):\n    stream = message_context.consumer.get_stream(message_context.subscriber_name)\n    print(\"Got message: {} from stream {}\".format(msg, stream))\n\nawait consumer.start()\nawait consumer.subscribe(\n    stream=STREAM_NAME,\n    callback=on_message,\n    offset_specification=ConsumerOffsetSpecification(OffsetType.FIRST, None),\n)\nawait consumer.run()\n```\n\n----------------------------------------\n\nTITLE: Declaring Shared Queue with Well-Known Name in RabbitMQ Java Client\nDESCRIPTION: Declares a durable exchange and queue with a well-known name, then binds them together. This approach is suitable when multiple clients need to share the same queue with a known name and the queue should persist.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(exchangeName, \"direct\", true);\nchannel.queueDeclare(queueName, true, false, false, null);\nchannel.queueBind(queueName, exchangeName, routingKey);\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Node Data Directory Path\nDESCRIPTION: This command retrieves the data directory path of a running RabbitMQ node using the rabbitmq-diagnostics tool. It filters the output to show the relevant section containing the node data directory information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/backup.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status | grep -A 2 -B 2 \"Node data directory\"\n```\n\n----------------------------------------\n\nTITLE: Connection Acceptance Log Example\nDESCRIPTION: Example log entry showing a successful AMQP connection acceptance with client and server connection details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n2018-11-22 10:44:33.654 [info] <0.620.0> accepting AMQP connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Triggering NoMajorityOfNodesReady Alert\nDESCRIPTION: Commands to stop the rabbit application on two nodes to trigger an alert condition.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-05-03-alerting/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec myrabbit-server-0 --container rabbitmq -- rabbitmqctl stop_app\nkubectl exec myrabbit-server-1 --container rabbitmq -- rabbitmqctl stop_app\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions Using rabbitmqctl CLI\nDESCRIPTION: Command to export RabbitMQ definitions to a JSON file using rabbitmqctl, which doesn't require the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Does not require management plugin to be enabled\nrabbitmqctl export_definitions /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Disabling a RabbitMQ Plugin using CLI\nDESCRIPTION: Shows how to disable a RabbitMQ plugin using the rabbitmq-plugins command line tool. The example demonstrates disabling the rabbitmq-top plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable rabbitmq_top\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client Call Method in C#\nDESCRIPTION: Definition of the CallAsync method that sends RPC requests and awaits responses. Takes a number parameter and returns the calculated Fibonacci number.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<int> CallAsync(int n)\n{\n    var tcs = new TaskCompletionSource<int>();\n    var correlationId = Guid.NewGuid().ToString();\n    _callbackMapper.TryAdd(correlationId, tcs);\n    PublishMessage(n, correlationId);\n    return await tcs.Task;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RabbitMQ Stream Environment and Creating Stream in Rust\nDESCRIPTION: This code sets up the RabbitMQ stream environment, declares a stream with a 5GB max length, and handles potential errors during stream creation. It allows either the producer or consumer to start first by declaring the stream in both parts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse rabbitmq_stream_client::Environment;\nlet environment = Environment::builder().build().await?;\nlet stream = \"hello-rust-stream\";\nlet create_response = environment\n        .stream_creator()\n        .max_length(ByteCapacity::GB(5))\n        .create(stream)\n        .await;\n\nif let Err(e) = create_response {\n    if let StreamCreateError::Create { stream, status } = e {\n            match status {\n                // we can ignore this error because the stream already exists\n                ResponseCode::StreamAlreadyExists => {}\n                err => {\n                    println!(\"Error creating stream: {:?} {:?}\", stream, err);\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Multiple Deliveries in .NET RabbitMQ Client\nDESCRIPTION: Shows how to acknowledge multiple deliveries at once using the .NET client for RabbitMQ. This method reduces network traffic by batching acknowledgements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// this example assumes an existing channel (IModel) instance\n\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // positively acknowledge all deliveries up to\n                    // this delivery tag\n                    channel.BasicAck(ea.DeliveryTag, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions using rabbitmqctl\nDESCRIPTION: Command to export RabbitMQ definitions using rabbitmqctl, which doesn't require the management plugin to be enabled. This exports all schema metadata to a JSON file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Does not require management plugin to be enabled\nrabbitmqctl export_definitions /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Message TTL When Publishing in C#\nDESCRIPTION: This C# example demonstrates how to publish a message with an expiration time of 60 seconds. The TTL is specified by setting the Expiration property on the IBasicProperties object to '60000'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\n\nIBasicProperties props = model.CreateBasicProperties();\nprops.ContentType = \"text/plain\";\nprops.DeliveryMode = 2;\nprops.Expiration = \"60000\";\n\nmodel.BasicPublish(exchangeName,\n                   routingKey, props,\n                   messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-only Listeners for RabbitMQ Stream Protocol\nDESCRIPTION: Disables all non-TLS listeners for the Stream protocol and sets up only a TLS listener on port 5551. This configuration ensures that all Stream protocol connections must use TLS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp   = none\nstream.listeners.ssl.1 = 5551\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream in RabbitMQ using Java\nDESCRIPTION: Java code to create a new stream named 'first-application-stream' with default settings using the Environment API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nenvironment.streamCreator().stream(\"first-application-stream\").create();\n```\n\n----------------------------------------\n\nTITLE: Basic TLS Connection in Java Client without Certificate Verification\nDESCRIPTION: Java example demonstrating a simple client connecting to RabbitMQ over TLS without validating the server certificate. The client establishes a secure connection, creates a temporary queue, and performs a basic publish and get operation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example1 {\n\n    public static void main(String[] args) throws Exception {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"localhost\");\n        factory.setPort(5671);\n\n        factory.useSslProtocol();\n        // Tells the library to setup the default Key and Trust managers for you\n        // which do not do any form of remote server trust verification\n\n        Connection conn = factory.newConnection();\n        Channel channel = conn.createChannel();\n\n        // non-durable, exclusive, auto-delete queue\n        channel.queueDeclare(\"rabbitmq-java-test\", false, true, true, null);\n        channel.basicPublish(\"\", \"rabbitmq-java-test\", null, \"Hello, World\".getBytes());\n\n        GetResponse chResponse = channel.basicGet(\"rabbitmq-java-test\", false);\n        if (chResponse == null) {\n            System.out.println(\"No message retrieved\");\n        } else {\n            byte[] body = chResponse.getBody();\n            System.out.println(\"Received: \" + new String(body));\n        }\n\n        channel.close();\n        conn.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Length Limit in Java\nDESCRIPTION: Java code example showing how to declare a queue with a maximum length of 10 messages using queue arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/maxlength/index.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-max-length\", 10);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions via RabbitMQ CLI\nDESCRIPTION: Commands for exporting RabbitMQ definitions using rabbitmqctl and rabbitmqadmin CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Does not require management plugin to be enabled\nrabbitmqctl export_definitions /path/to/definitions.file.json\n\n# Requires management plugin to be enabled\nrabbitmqadmin export /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Direct Exchange Sender with Maven\nDESCRIPTION: Command to run the Spring AMQP sender application that publishes messages to the direct exchange with various routing keys. This uses the 'routing' and 'sender' Spring profiles.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rabbitmq-tutorials.jar \\\n    --spring.profiles.active=routing,sender \\\n    --tutorial.client.duration=60000\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in Elixir RabbitMQ Consumer\nDESCRIPTION: This code shows how to implement message acknowledgment in a RabbitMQ consumer. The worker processes messages, simulates work by sleeping based on the number of dots in the message, and then acknowledges the message when done, ensuring no messages are lost if the worker fails.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Worker do\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, meta} ->\n        IO.puts \" [x] Received #{payload}\"\n        payload\n        |> to_char_list\n        |> Enum.count(fn x -> x == ?. end)\n        |> Kernel.*(1000)\n        |> :timer.sleep\n        IO.puts \" [x] Done.\"\n        AMQP.Basic.ack(channel, meta.delivery_tag)\n\n        wait_for_messages(channel)\n    end\n  end\nend\n\nAMQP.Basic.consume(channel, \"hello\")\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Cluster Configuration Settings\nDESCRIPTION: Configuration settings for adjusting node restart timeout and retry behavior during cluster synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n# wait for 60 seconds instead of 30\nmnesia_table_loading_retry_timeout = 60000\n\n# retry 15 times instead of 10\nmnesia_table_loading_retry_limit = 15\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Container with Stream Support\nDESCRIPTION: Docker command to start a RabbitMQ instance with stream plugin support and proper host advertisement configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-09-13-rabbitmq-streams-offset-tracking/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5552:5552 \\\n    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \\\n    rabbitmq:3.9\n```\n\n----------------------------------------\n\nTITLE: Increasing TCP Connection Backlog in RabbitMQ with INI-Style Config\nDESCRIPTION: Configuration to increase the TCP connection backlog, allowing more pending connections during connection spikes or high connection churn scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 4096\ntcp_listen_options.nodelay = true\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Topic Exchange in RabbitMQ with Swift\nDESCRIPTION: Function that creates a connection to RabbitMQ, declares a topic exchange, creates an exclusive queue, and binds it to the exchange with specified routing keys. It then subscribes to the queue to receive and process messages that match the routing patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-swift.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc receiveLogsTopic(_ routingKeys: [Any]) {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let x = ch.topic(\"topic_logs\")\n    let q = ch.queue(\"\", options: .exclusive)\n    for routingKey: String in routingKeys {\n        q.bind(x, routingKey: routingKey)\n    }\n    print(\"Waiting for logs.\")\n    q.subscribe({(_ message: RMQMessage) -> Void in\n        print(\"\\(message.routingKey):\\(String(data: message.body,\n                                              encoding: .utf8))\")\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages in RabbitMQ (Java)\nDESCRIPTION: This code demonstrates how to publish persistent messages in RabbitMQ using Java. It uses MessageProperties.PERSISTENT_TEXT_PLAIN to ensure messages are saved to disk.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.MessageProperties;\n\nchannel.basicPublish(\"\", \"task_queue\",\n            MessageProperties.PERSISTENT_TEXT_PLAIN,\n            message.getBytes());\n```\n\n----------------------------------------\n\nTITLE: Enabling Forced Node Removal in RabbitMQ Cluster\nDESCRIPTION: This configuration enables automatic forceful removal of unknown nodes from the RabbitMQ cluster. This setting should be used with extreme caution as it can lead to data loss and cluster instability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.node_cleanup.only_log_warning = false\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for RabbitMQ API\nDESCRIPTION: Nginx configuration for proxying requests to RabbitMQ HTTP API with proper handling of encoded slashes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_18\n\nLANGUAGE: nginxconf\nCODE:\n```\nlocation / {\n    proxy_pass http://rabbitmq-host:15672;\n}\n\nlocation ~* /rabbitmq/api/(.*?)/(.*) {\n    proxy_pass http://rabbitmq-host:15672/api/$1/%2F/$2?$query_string;\n}\n\nlocation ~* /rabbitmq/(.*) {\n    rewrite ^/rabbitmq/(.*)$ /$1 break;\n    proxy_pass http://rabbitmq-host:15672;\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking in C#\nDESCRIPTION: This snippet shows how to create a Consumer that starts from a specified offset, processes messages, and stops when it receives a marker message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIOffsetType offsetSpecification = new OffsetTypeFirst();\nulong initialValue = UInt64.MaxValue;\nulong firstOffset = initialValue;\nulong lastOffset = initialValue;\nvar consumedCde = new CountdownEvent(1);\nvar consumer = await Consumer.Create(new ConsumerConfig(streamSystem, stream)\n{\n    OffsetSpec = offsetSpecification,\n    MessageHandler = async (_, consumer, context, message) => {\n        if (Interlocked.CompareExchange(ref firstOffset, context.Offset, initialValue) == initialValue) {\n            Console.WriteLine(\"First message received.\");\n        }\n        if (\"marker\".Equals(Encoding.UTF8.GetString(message.Data.Contents))) {\n            Interlocked.Exchange(ref lastOffset, context.Offset);\n            await consumer.Close();\n            consumedCde.Signal();\n        }\n        await Task.CompletedTask;\n    }\n});\nConsole.WriteLine(\"Started consuming...\");\n\nconsumedCde.Wait();\nConsole.WriteLine(\"Done consuming, first offset {0}, last offset {1}.\", firstOffset, lastOffset);\nawait streamSystem.Close();\n```\n\n----------------------------------------\n\nTITLE: Inter-node TLS Configuration File for RabbitMQ (Linux)\nDESCRIPTION: This snippet shows the content of an inter_node_tls.config file that configures both server and client TLS settings for RabbitMQ inter-node communication. It includes certificate paths, verification settings, and security options for both server and client endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {server, [\n    {cacertfile, \"/full/path/to/ca_certificate.pem\"},\n    {certfile,   \"/full/path/to/server_certificate.pem\"},\n    {keyfile,    \"/full/path/to/server_key.pem\"},\n    {password,   \"password-if-keyfile-is-encrypted\"},\n    {secure_renegotiate, true},\n    {verify, verify_peer},\n    {fail_if_no_peer_cert, true}\n  ]},\n  {client, [\n    {cacertfile, \"/full/path/to/ca_certificate.pem\"},\n    {certfile,   \"/full/path/to/client_certificate.pem\"},\n    {keyfile,    \"/full/path/to/client_key.pem\"},\n    {password,   \"password-if-keyfile-is-encrypted\"},\n    {secure_renegotiate, true},\n    {verify, verify_peer}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Cluster Operator with kubectl\nDESCRIPTION: Installs the latest version of the RabbitMQ Cluster Operator using kubectl apply. This creates necessary Kubernetes resources including a namespace, custom resource definition, and RBAC roles.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f \"https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml\"\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Service with systemctl\nDESCRIPTION: These commands demonstrate how to start, stop, and check the status of the RabbitMQ service using systemctl on systemd-based Linux distributions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# stop the local node\nsudo systemctl stop rabbitmq-server\n\n# start it back\nsudo systemctl start rabbitmq-server\n\n# check on service status as observed by service manager\nsudo systemctl status rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fanout Exchange in Go\nDESCRIPTION: This snippet shows how to declare a fanout exchange named 'logs' using the RabbitMQ Go client. A fanout exchange broadcasts all messages it receives to all queues it knows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nerr = ch.ExchangeDeclare(\n  \"logs\",   // name\n  \"fanout\", // type\n  true,     // durable\n  false,    // auto-deleted\n  false,    // internal\n  false,    // no-wait\n  nil,      // arguments\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts\nDESCRIPTION: Shows how to list all virtual hosts in the RabbitMQ cluster. Virtual hosts serve as logical groupings and security domains within RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list vhosts\n```\n\n----------------------------------------\n\nTITLE: Configuring Web STOMP TLS Settings\nDESCRIPTION: INI configuration for TLS/SSL settings including certificates and port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ssl.port       = 15673\nweb_stomp.ssl.backlog    = 1024\nweb_stomp.ssl.cacertfile = /path/to/ca_certificate.pem\nweb_stomp.ssl.certfile   = /path/to/server_certificate.pem\nweb_stomp.ssl.keyfile    = /path/to/server_key.pem\nweb_stomp.ssl.password   = changeme\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Program in Go\nDESCRIPTION: This is the full implementation of the emit_log.go program. It connects to RabbitMQ, declares the 'logs' exchange, and publishes messages to it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n        \"os\"\n        \"strings\"\n        \"time\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                \"logs\",   // name\n                \"fanout\", // type\n                true,     // durable\n                false,    // auto-deleted\n                false,    // internal\n                false,    // no-wait\n                nil,      // arguments\n        )\n        failOnError(err, \"Failed to declare an exchange\")\n\n        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n\n        body := bodyFrom(os.Args)\n        err = ch.PublishWithContext(ctx,\n                \"logs\", // exchange\n                \"\",     // routing key\n                false,  // mandatory\n                false,  // immediate\n                amqp.Publishing{\n                        ContentType: \"text/plain\",\n                        Body:        []byte(body),\n                })\n        failOnError(err, \"Failed to publish a message\")\n\n        log.Printf(\" [x] Sent %s\", body)\n}\n\nfunc bodyFrom(args []string) string {\n        var s string\n        if (len(args) < 2) || os.Args[1] == \"\" {\n                s = \"hello\"\n        } else {\n                s = strings.Join(args[1:], \" \")\n        }\n        return s\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Delivery Limit for Quorum Queues in Bash\nDESCRIPTION: Configures a policy that sets a delivery limit of 50 for quorum queues whose names begin with 'qq'. Uses the rabbitmqctl command with set_policy to apply the configuration with a specified priority.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy qq-overrides \\\n    \"^qq\\.\" '{\"delivery-limit\": 50}' \\\n    --priority 123 \\\n    --apply-to \"quorum_queues\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Private Key Password in RabbitMQ (Classic Format)\nDESCRIPTION: This snippet shows how to configure TLS listeners and options in RabbitMQ using the classic configuration format. It sets up the SSL port, specifies certificate files, and provides a password for the private key. This format allows for config value encryption for enhanced security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                          {certfile,  \"/path/to/server_certificate.pem\"},\n                          {keyfile,   \"/path/to/server_key.pem\"},\n                          {password,  \"t0p$3kRe7\"}\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Fair Dispatch with Prefetch Count\nDESCRIPTION: Code to configure RabbitMQ to not give more than one message to a worker at a time by setting the prefetch count to 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nerr = ch.Qos(\n  1,     // prefetch count\n  0,     // prefetch size\n  false, // global\n)\nfailOnError(err, \"Failed to set QoS\")\n```\n\n----------------------------------------\n\nTITLE: Emitting Logs with Topic Exchange in PHP\nDESCRIPTION: This script declares a topic exchange and publishes messages with routing keys. It allows specifying the routing key and message content as command-line arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-php.md#2025-04-09_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->exchange_declare('topic_logs', 'topic', false, false, false);\n\n$routing_key = isset($argv[1]) && !empty($argv[1]) ? $argv[1] : 'anonymous.info';\n$data = implode(' ', array_slice($argv, 2));\nif (empty($data)) {\n    $data = \"Hello World!\";\n}\n\n$msg = new AMQPMessage($data);\n\n$channel->basic_publish($msg, 'topic_logs', $routing_key);\n\necho ' [x] Sent ', $routing_key, ':', $data, \"\\n\";\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Checking System Limits on Linux\nDESCRIPTION: This command displays the current system limits for the user, including the maximum number of open files (ulimit -n) which is crucial for RabbitMQ performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-generic-unix.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nulimit -a\n```\n\n----------------------------------------\n\nTITLE: Configuring NIO Parameters in RabbitMQ Client\nDESCRIPTION: Shows how to configure NIO parameters for RabbitMQ connections. This example sets the number of IO threads to 4.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_33\n\nLANGUAGE: java\nCODE:\n```\n  connectionFactory.setNioParams(new NioParams().setNbIoThreads(4));\n```\n\n----------------------------------------\n\nTITLE: Establishing RabbitMQ Connection in Go\nDESCRIPTION: Code to connect to a RabbitMQ server using the default guest credentials and localhost address. It includes error handling and connection cleanup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n  failOnError(err, \"Failed to connect to RabbitMQ\")\n  defer conn.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ and Erlang Packages\nDESCRIPTION: Comprehensive installation command for RabbitMQ server and its Erlang dependencies using apt-get.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a RabbitMQ Queue\nDESCRIPTION: Code that registers the current process as a consumer for the 'hello' queue with the no_ack option enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Basic.consume(channel,\n                   \"hello\",\n                   nil, # consumer process, defaults to self()\n                   no_ack: true)\n```\n\n----------------------------------------\n\nTITLE: RPC Server Implementation\nDESCRIPTION: Complete RPC server implementation that listens for requests, processes Fibonacci calculations, and sends responses back to clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = 'rpc_queue';\n\n    channel.assertQueue(queue, {\n      durable: false\n    });\n    channel.prefetch(1);\n    console.log(' [x] Awaiting RPC requests');\n    channel.consume(queue, function reply(msg) {\n      var n = parseInt(msg.content.toString());\n\n      console.log(\" [.] fib(%d)\", n);\n\n      var r = fibonacci(n);\n\n      channel.sendToQueue(msg.properties.replyTo,\n        Buffer.from(r.toString()), {\n          correlationId: msg.properties.correlationId\n        });\n\n      channel.ack(msg);\n    });\n  });\n});\n\nfunction fibonacci(n) {\n  if (n == 0 || n == 1)\n    return n;\n  else\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Queue with Self as Consumer in Erlang\nDESCRIPTION: Demonstrates how to subscribe to a RabbitMQ queue using the push API with the current process as the consumer. In this approach, the calling process will receive the message deliveries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n%% A consumer process is not provided so the calling\n%% process (`self()`) will be the consumer\n#'basic.consume_ok'{consumer_tag = Tag} =\n  amqp_channel:call(Channel, #'basic.consume'{queue = Q})\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking in Go\nDESCRIPTION: Creates a consumer that starts at a specified offset position in the stream. It tracks the first and last offsets processed and stops when it encounters the marker message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar firstOffset int64 = -1\nvar lastOffset atomic.Int64\nch := make(chan bool)\nmessagesHandler := func(consumerContext stream.ConsumerContext, message *amqp.Message) {\n    if atomic.CompareAndSwapInt64(&firstOffset, -1, consumerContext.Consumer.GetOffset()) {\n        fmt.Println(\"First message received.\")\n    }\n    if string(message.GetData()) == \"marker\" {\n        lastOffset.Store(consumerContext.Consumer.GetOffset())\n        _ = consumerContext.Consumer.Close()\n        ch <- true\n    }\n}\n\noffsetSpecification := stream.OffsetSpecification{}.First()\n_, _ = env.NewConsumer(streamName, messagesHandler,\n    stream.NewConsumerOptions().\n        SetOffset(offsetSpecification))\n\nfmt.Println(\"Started consuming...\")\n_ = <-ch\n\nfmt.Printf(\"Done consuming, first offset %d, last offset %d.\\n\", firstOffset, lastOffset.Load())\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with TTL in C#\nDESCRIPTION: This C# code example shows how to publish a message with a 60-second TTL using the expiration property.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\n\nIBasicProperties props = model.CreateBasicProperties();\nprops.ContentType = \"text/plain\";\nprops.DeliveryMode = 2;\nprops.Expiration = \"60000\";\n\nmodel.BasicPublish(exchangeName,\n                   routingKey, props,\n                   messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates with tls-gen Tool\nDESCRIPTION: Commands for generating a self-signed CA and certificate/key pairs using the tls-gen tool. This creates the necessary certificate components for testing TLS in RabbitMQ environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/tls-gen tls-gen\ncd tls-gen/basic\n# private key password\nmake PASSWORD=bunnies\nmake verify\nmake info\nls -l ./result\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Resource Servers for OAuth 2.0 in RabbitMQ\nDESCRIPTION: This configuration demonstrates how to set up multiple resource servers for OAuth 2.0 in RabbitMQ, allowing for different audience values and scope prefixes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = http//some_idp_url\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.\n```\n\n----------------------------------------\n\nTITLE: Enabling Forced Node Removal in RabbitMQ Cluster\nDESCRIPTION: This configuration enables automatic forceful removal of unknown nodes from the RabbitMQ cluster. This setting should be used with extreme caution as it can lead to data loss and cluster instability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.node_cleanup.only_log_warning = false\n```\n\n----------------------------------------\n\nTITLE: Recording CPU Profile with Linux perf\nDESCRIPTION: Command to record a CPU profile of the RabbitMQ server process using Linux perf, sampling at 999 Hz for 30 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo perf record --pid $(cat \"test-rabbit/rabbit@$(hostname --short)/rabbit@$(hostname --short).pid\") --freq 999 -g -- sleep 30\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Worker Implementation in C#\nDESCRIPTION: This is the complete implementation of a RabbitMQ worker (consumer) in C#. It includes queue declaration, fair dispatch, message processing, and acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text;\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\n\nclass Worker\n{\n    public static void Main()\n    {\n        var factory = new ConnectionFactory() { HostName = \"localhost\" };\n        using (var connection = factory.CreateConnection())\n        using (var channel = connection.CreateModel())\n        {\n            channel.QueueDeclare(queue: \"task_queue\",\n                                 durable: true,\n                                 exclusive: false,\n                                 autoDelete: false,\n                                 arguments: null);\n\n            channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n\n            Console.WriteLine(\" [*] Waiting for messages.\");\n\n            var consumer = new EventingBasicConsumer(channel);\n            consumer.Received += (model, ea) =>\n            {\n                var body = ea.Body.ToArray();\n                var message = Encoding.UTF8.GetString(body);\n                Console.WriteLine($\" [x] Received {message}\");\n\n                int dots = message.Split('.').Length - 1;\n                Thread.Sleep(dots * 1000);\n\n                Console.WriteLine(\" [x] Done\");\n\n                channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);\n            };\n            channel.BasicConsume(queue: \"task_queue\",\n                                 autoAck: false,\n                                 consumer: consumer);\n\n            Console.WriteLine(\" Press [enter] to exit.\");\n            Console.ReadLine();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Memory Breakdown with rabbitmq-diagnostics Command\nDESCRIPTION: This snippet demonstrates how to use the rabbitmq-diagnostics CLI tool to get a memory breakdown with custom output units (MB). This command provides a formatted view of memory usage by category with percentages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q memory_breakdown --unit \"MB\"\n# => connection_other: 50.18 mb (22.1%)\n# => allocated_unused: 43.7058 mb (19.25%)\n# => other_proc: 26.1082 mb (11.5%)\n# => other_system: 26.0714 mb (11.48%)\n# => connection_readers: 22.34 mb (9.84%)\n# => code: 20.4311 mb (9.0%)\n# => queue_procs: 17.687 mb (7.79%)\n# => other_ets: 4.3429 mb (1.91%)\n# => connection_writers: 4.068 mb (1.79%)\n# => connection_channels: 4.012 mb (1.77%)\n# => metrics: 3.3802 mb (1.49%)\n# => binary: 1.992 mb (0.88%)\n# => mnesia: 1.6292 mb (0.72%)\n# => atom: 1.0826 mb (0.48%)\n# => msg_index: 0.0317 mb (0.01%)\n# => plugins: 0.0119 mb (0.01%)\n# => mgmt_db: 0.0 mb (0.0%)\n# => reserved_unallocated: 0.0 mb (0.0%)\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Node Status in Bash\nDESCRIPTION: This command retrieves the status of a RabbitMQ node using the rabbitmq-diagnostics tool. It provides essential system information and is useful for more comprehensive health checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q status\n# => [output elided for brevity]\n```\n\n----------------------------------------\n\nTITLE: Enabling Publisher Confirms on a RabbitMQ Channel in C#\nDESCRIPTION: This snippet shows how to enable publisher confirms on a RabbitMQ channel using the CreateChannelOptions class.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar channel = await connection.CreateChannelAsync(\n    new CreateChannelOptions\n    {\n        PublisherConfirms = true\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Fair Dispatch with Prefetch in RabbitMQ\nDESCRIPTION: Sets up fair message dispatch using the prefetch setting to ensure workers only receive new messages after processing previous ones.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nn = 1;\nchannel.prefetch(n);\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream from First Offset in Java\nDESCRIPTION: Java code example showing how to consume messages from a stream starting from the first available message using the 'first' offset specification. The consumer must set QoS and acknowledge messages after processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", \"first\"), // \"first\" offset specification\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Alarms\nDESCRIPTION: Command to list resource alarms in the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics alarms\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Management Plugin Settings\nDESCRIPTION: Basic configuration settings for RabbitMQ management plugin including TCP/SSL ports, log directories, and sample retention policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.port = 15672\nmanagement.tcp.ip   = 0.0.0.0\n\nmanagement.ssl.port       = 15671\nmanagement.ssl.ip         = 0.0.0.0\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n\nmanagement.http_log_dir = /path/to/rabbit/logs/http\n\nmanagement.rates_mode = basic\n\nmanagement.sample_retention_policies.global.minute    = 5\nmanagement.sample_retention_policies.global.hour  = 60\nmanagement.sample_retention_policies.global.day = 1200\n\nmanagement.sample_retention_policies.basic.minute   = 5\nmanagement.sample_retention_policies.basic.hour = 60\n\nmanagement.sample_retention_policies.detailed.10 = 5\n```\n\n----------------------------------------\n\nTITLE: Starting JMS Subscriber with OAuth 2.0\nDESCRIPTION: Command to start a JMS subscriber application that authenticates using OAuth 2.0 and subscribes to a queue called q-test-queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake start-jms-subscriber\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions using rabbitmqadmin\nDESCRIPTION: Command to import RabbitMQ definitions using rabbitmqadmin, which requires the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Requires management plugin to be enabled\nrabbitmqadmin import /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Plugins\nDESCRIPTION: Commands to list available plugins in different formats including standard output, silent mode, and JSON format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list\nrabbitmq-plugins list -s\nrabbitmq-plugins list --formatter=json\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Server in Elixir with RabbitMQ\nDESCRIPTION: This snippet demonstrates the server-side implementation of an RPC system using RabbitMQ in Elixir. It defines a Fibonacci function and sets up a message listener to process incoming RPC requests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-elixir.md#2025-04-09_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule FibServer do\n  def fib(0), do: 0\n  def fib(1), do: 1\n  def fib(n) when n > 1, do: fib(n-1) + fib(n-2)\n\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, meta} ->\n        {n, _} = Integer.parse(payload)\n        IO.puts \" [.] fib(#{n})\"\n        response = fib(n)\n\n        AMQP.Basic.publish(channel,\n                           \"\",\n                           meta.reply_to,\n                           \"#{response}\",\n                           correlation_id: meta.correlation_id)\n        AMQP.Basic.ack(channel, meta.delivery_tag)\n\n        wait_for_messages(channel)\n    end\n  end\nend\n\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\nAMQP.Queue.declare(channel, \"rpc_queue\")\nAMQP.Basic.qos(channel, prefetch_count: 1)\nAMQP.Basic.consume(channel, \"rpc_queue\")\nIO.puts \" [x] Awaiting RPC requests\"\n\nFibServer.wait_for_messages(channel)\n```\n\n----------------------------------------\n\nTITLE: Creating User with Password Hash in RabbitMQ API\nDESCRIPTION: JSON payload example for the PUT /api/users/{name} endpoint that creates a user with a pre-hashed password and administrator tag. The password_hash must be generated using the algorithm described in the Passwords guide.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\"password_hash\":\"2lmoth8l4H0DViLaK9Fxi6l9ds8=\", \"tags\":[\"administrator\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication with Internal Authorization in RabbitMQ\nDESCRIPTION: This configuration uses the LDAP backend for authentication and the internal backend for authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = ldap\nauth_backends.1.authz = internal\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream from Timestamp in Java\nDESCRIPTION: Demonstrates consuming messages from a stream starting from a specific timestamp (one hour ago). Includes QoS settings and message acknowledgment handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// an hour ago\nDate timestamp = new Date(System.currentTimeMillis() - 60 * 60 * 1_000)\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", timestamp), // timestamp offset\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Shovel using curl and HTTP API\nDESCRIPTION: This curl command sends a PUT request to the RabbitMQ HTTP API to create a dynamic shovel named 'my-shovel' in the default virtual host, transferring messages between two local queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-dynamic.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\": \"amqp://localhost\",\n    \"src-queue\": \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqp://localhost\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Message TTL Using Queue Arguments in Java\nDESCRIPTION: This Java example shows how to create a queue with a message TTL of 60 seconds using the x-message-ttl argument during queue declaration. Messages in this queue will expire after 60 seconds if not consumed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-message-ttl\", 60000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Super Stream using CLI\nDESCRIPTION: Shows how to create a super stream named 'invoices' with 3 partitions using the rabbitmq-streams command line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_super_stream invoices --partitions 3\n```\n\n----------------------------------------\n\nTITLE: Advanced TLS Configuration with Cipher Suites\nDESCRIPTION: Extended TLS configuration that specifies TLS versions, cipher suites, and additional security options for the Web MQTT plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.ssl.port       = 15676\\nweb_mqtt.ssl.backlog    = 1024\\nweb_mqtt.ssl.certfile   = /path/to/server_certificate.pem\\nweb_mqtt.ssl.keyfile    = /path/to/server_key.pem\\nweb_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem\\nweb_mqtt.ssl.password   = changeme\\n\\nweb_mqtt.ssl.honor_cipher_order   = true\\nweb_mqtt.ssl.honor_ecc_order      = true\\nweb_mqtt.ssl.client_renegotiation = false\\nweb_mqtt.ssl.secure_renegotiate   = true\\n\\nweb_mqtt.ssl.versions.1 = tlsv1.2\\nweb_mqtt.ssl.versions.2 = tlsv1.1\\nweb_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\\nweb_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\\nweb_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\\nweb_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\\nweb_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\\nweb_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\\nweb_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\\nweb_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\\nweb_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n```\n\n----------------------------------------\n\nTITLE: Implementing a Topic Exchange Message Publisher in Go\nDESCRIPTION: This code implements a publisher that sends log messages to a topic exchange with routing keys in the format '<facility>.<severity>'. It connects to RabbitMQ, declares a topic exchange, and publishes messages with appropriate routing keys provided as command-line arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-go.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n        \"os\"\n        \"strings\"\n        \"time\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                \"logs_topic\", // name\n                \"topic\",      // type\n                true,         // durable\n                false,        // auto-deleted\n                false,        // internal\n                false,        // no-wait\n                nil,          // arguments\n        )\n        failOnError(err, \"Failed to declare an exchange\")\n\n        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n\n        body := bodyFrom(os.Args)\n        err = ch.PublishWithContext(ctx,\n                \"logs_topic\",          // exchange\n                severityFrom(os.Args), // routing key\n                false, // mandatory\n                false, // immediate\n                amqp.Publishing{\n                        ContentType: \"text/plain\",\n                        Body:        []byte(body),\n                })\n        failOnError(err, \"Failed to publish a message\")\n\n        log.Printf(\" [x] Sent %s\", body)\n}\n\nfunc bodyFrom(args []string) string {\n        var s string\n        if (len(args) < 3) || os.Args[2] == \"\" {\n                s = \"hello\"\n        } else {\n                s = strings.Join(args[2:], \" \")\n        }\n        return s\n}\n\nfunc severityFrom(args []string) string {\n        var s string\n        if (len(args) < 2) || os.Args[1] == \"\" {\n                s = \"anonymous.info\"\n        } else {\n                s = os.Args[1]\n        }\n        return s\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a channel from a RabbitMQ connection in C#\nDESCRIPTION: This snippet shows how to create a channel from an established RabbitMQ connection, which can be used for sending and receiving messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIChannel channel = await conn.CreateChannelAsync();\n```\n\n----------------------------------------\n\nTITLE: Listing Exchanges in RabbitMQ Virtual Host\nDESCRIPTION: Command to display name and type for each exchange in a specified virtual host. Uses the -p flag to specify the virtual host name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_exchanges -p my-vhost name type\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Signing Key for Debian Bookworm\nDESCRIPTION: Downloads and adds the RabbitMQ signing key for the Cloudsmith mirror repository on Debian Bookworm. This allows apt to verify package signatures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Configuration in Erlang Format\nDESCRIPTION: Configuration example using the classic Erlang term format for RabbitMQ. It configures TLS listeners and options including certificate paths and verification settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                    {certfile,   \"/path/to/server_certificate.pem\"},\n                    {keyfile,    \"/path/to/server_key.pem\"},\n                    {verify,     verify_peer},\n                    {fail_if_no_peer_cert, true}]}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Publisher Confirms in RabbitMQ Using Java\nDESCRIPTION: This snippet demonstrates the publisher confirms mechanism in RabbitMQ which provides asynchronous acknowledgments of message processing. It maintains a set of unconfirmed message sequence numbers and removes them as confirms are received from the broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-02-10-introducing-publisher-confirms/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate volatile SortedSet<Long> unconfirmedSet =\n    Collections.synchronizedSortedSet(new TreeSet());\n\n...\n\nch.setConfirmListener(new ConfirmListener() {\n    public void handleAck(long seqNo, boolean multiple) {\n        if (multiple) {\n            unconfirmedSet.headSet(seqNo+1).clear();\n        } else {\n            unconfirmedSet.remove(seqNo);\n        }\n    }\n    public void handleNack(long seqNo, boolean multiple) {\n        // handle the lost messages somehow\n    }\n});\nch.confirmSelect();\nfor (long i = 0; i < MSG_COUNT; ++i) {\n     unconfirmedSet.add(ch.getNextPublishSeqNo());\n     ch.basicPublish(\"\", QUEUE_NAME, MessageProperties.PERSISTENT_BASIC,\n                       \"nop\".getBytes());\n }\nwhile (unconfirmedSet.size() > 0)\n     Thread.sleep(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Buffer Size for STOMP Connections in RabbitMQ\nDESCRIPTION: Configuration settings to optimize TCP buffers for STOMP connections to 32 KiB, reducing per-connection memory usage at the cost of throughput.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nstomp.tcp_listen_options.backlog = 128\nstomp.tcp_listen_options.nodelay = true\nstomp.tcp_listen_options.linger.on      = true\nstomp.tcp_listen_options.linger.timeout = 0\nstomp.tcp_listen_options.sndbuf  = 32768\nstomp.tcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation\nDESCRIPTION: Full implementation of the log emitter program using direct exchange\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n        \"os\"\n        \"strings\"\n        \"time\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                \"logs_direct\", // name\n                \"direct\",      // type\n                true,          // durable\n                false,         // auto-deleted\n                false,         // internal\n                false,         // no-wait\n                nil,           // arguments\n        )\n        failOnError(err, \"Failed to declare an exchange\")\n\n        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n\n        body := bodyFrom(os.Args)\n        err = ch.PublishWithContext(ctx,\n                \"logs_direct\",         // exchange\n                severityFrom(os.Args), // routing key\n                false,                 // mandatory\n                false,                 // immediate\n                amqp.Publishing{\n                        ContentType: \"text/plain\",\n                        Body:        []byte(body),\n                })\n        failOnError(err, \"Failed to publish a message\")\n\n        log.Printf(\" [x] Sent %s\", body)\n}\n\nfunc bodyFrom(args []string) string {\n        var s string\n        if (len(args) < 3) || os.Args[2] == \"\" {\n                s = \"hello\"\n        } else {\n                s = strings.Join(args[2:], \" \")\n        }\n        return s\n}\n\nfunc severityFrom(args []string) string {\n        var s string\n        if (len(args) < 2) || os.Args[1] == \"\" {\n                s = \"info\"\n        } else {\n                s = os.Args[1]\n        }\n        return s\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol for AMQP in RabbitMQ Configuration\nDESCRIPTION: This configuration snippet shows how to enable the Proxy Protocol for AMQP 0-9-1 and AMQP 1.0 clients in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nproxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Non-built-in Type in Java\nDESCRIPTION: Shows how to create an exchange of a non-built-in type (x-delayed-message) with custom arguments using the Java client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nmanagement.exchange()\n    .name(\"my-exchange\")\n    .type(\"x-delayed-message\") // non-built-in type\n    .autoDelete(false)\n    .argument(\"x-delayed-type\", \"direct\")\n    .declare();\n```\n\n----------------------------------------\n\nTITLE: Enabling Dropwizard Metrics Collection in RabbitMQ Java Client\nDESCRIPTION: Demonstrates how to enable metric collection using Dropwizard Metrics in the RabbitMQ Java client. It shows the creation of a StandardMetricsCollector and setting it on the ConnectionFactory, as well as how to retrieve specific metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory connectionFactory = new ConnectionFactory();\nStandardMetricsCollector metrics = new StandardMetricsCollector();\nconnectionFactory.setMetricsCollector(metrics);\n...\nmetrics.getPublishedMessages(); // get Metrics' Meter object\n```\n\n----------------------------------------\n\nTITLE: Positive Message Acknowledgement in Java\nDESCRIPTION: Demonstrates how to positively acknowledge a single message delivery using RabbitMQ Java client. Uses Channel#basicAck to acknowledge messages with autoAck disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge a single delivery, the message will\n             // be discarded\n             channel.basicAck(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Session Timeout in RabbitMQ Management\nDESCRIPTION: Sets the web UI login session timeout to 60 minutes (1 hour), after which the user will be automatically signed out.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.login_session_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation\nDESCRIPTION: Full implementation of a log message producer that publishes messages to the 'logs' exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-php.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->exchange_declare('logs', 'fanout', false, false, false);\n\n$data = implode(' ', array_slice($argv, 1));\nif (empty($data)) {\n    $data = \"info: Hello World!\";\n}\n$msg = new AMQPMessage($data);\n\n$channel->basic_publish($msg, 'logs');\n\necho ' [x] Sent ', $data, \"\\n\";\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Setting Heartbeat Timeout in .NET Client\nDESCRIPTION: This code example shows how to configure the heartbeat timeout to 60 seconds using the .NET client for RabbitMQ. It uses the ConnectionFactory class to set the RequestedHeartbeat property before creating a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/heartbeats.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\n\n// set the heartbeat timeout to 60 seconds\ncf.RequestedHeartbeat = TimeSpan.FromSeconds(60);\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Java Client Dependency with Maven\nDESCRIPTION: XML snippet for adding the RabbitMQ Java client library dependency to a Maven project's POM file. It specifies the groupId, artifactId, and version (5.24.0) of the library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-client.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.rabbitmq</groupId>\n  <artifactId>amqp-client</artifactId>\n  <version>5.24.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host via HTTP API with curl\nDESCRIPTION: Creates a virtual host named 'vh1' using the RabbitMQ HTTP API. This example uses curl to send a PUT request to the API endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/vh1\n```\n\n----------------------------------------\n\nTITLE: Checking Erlang Version in RabbitMQ (Bash)\nDESCRIPTION: Reports the target node's Erlang/OTP version. This command is useful for verifying the Erlang environment of the RabbitMQ installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_version -q\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer with Message Handler\nDESCRIPTION: Go code that creates a message handler function and a consumer that starts from the first available message in the stream. The handler prints received messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmessagesHandler := func(consumerContext stream.ConsumerContext, message *amqp.Message) {\n\tfmt.Printf(\"Stream: %s - Received message: %s\\n\", consumerContext.Consumer.GetStreamName(),\n\t\t\tmessage.Data)}\n\nconsumer, err := env.NewConsumer(streamName, messagesHandler, \n        stream.NewConsumerOptions().SetOffset(stream.OffsetSpecification{}.First()))\nif err != nil {\n    log.Fatalf(\"Failed to create consumer: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple OAuth 2.0 Providers and Resource Servers Configuration in RabbitMQ\nDESCRIPTION: This advanced configuration demonstrates how to set up multiple OAuth providers and resource servers, where each resource server points to its corresponding OAuth provider with appropriate TLS certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.1.oauth_provider_id = prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.2.oauth_provider_id = dev\nauth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.\n\nauth_oauth2.oauth_providers.prod.issuer = https://rabbit_prod:8080\nauth_oauth2.oauth_providers.prod.https.cacertfile = /opts/certs/prod.pem\nauth_oauth2.oauth_providers.dev.issuer = https://rabbit_dev:8080\nauth_oauth2.oauth_providers.dev.https.cacertfile = /opts/certs/dev.pem\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions to RabbitMQ Users\nDESCRIPTION: Shows how to grant permissions to users for specific virtual hosts in RabbitMQ using the rabbitmqctl set_permissions command in both Bash and PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# First \".*\" for configure permission on every entity\n# Second \".*\" for write permission on every entity\n# Third \".*\" for read permission on every entity\nrabbitmqctl set_permissions -p \"custom-vhost\" \"username\" \".*\" \".*\" \".*\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n# First \".*\" for configure permission on every entity\n# Second \".*\" for write permission on every entity\n# Third \".*\" for read permission on every entity\nrabbitmqctl.bat set_permissions -p 'custom-vhost' 'username' '.*' '.*' '.*'\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Server with RabbitListener in Spring AMQP\nDESCRIPTION: Server implementation that listens for RPC requests on a specific queue and processes Fibonacci calculations. It uses the @RabbitListener annotation to connect to the RabbitMQ queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-spring-amqp.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut6;\n\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\n\npublic class Tut6Server {\n\n\t@RabbitListener(queues = \"tut.rpc.requests\")\n\t// @SendTo(\"tut.rpc.replies\") used when the\n\t// client doesn't set replyTo.\n\tpublic int fibonacci(int n) {\n\t\tSystem.out.println(\" [x] Received request for \" + n);\n\t\tint result = fib(n);\n\t\tSystem.out.println(\" [.] Returned \" + result);\n\t\treturn result;\n\t}\n\n\tpublic int fib(int n) {\n\t\treturn n == 0 ? 0 : n == 1 ? 1 : (fib(n - 1) + fib(n - 2));\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Federation in rabbitmq.config\nDESCRIPTION: Configuration example for setting up federation between RabbitMQ brokers in London, Paris, and New York. Demonstrates how to configure federated exchanges, upstream sets, and connection parameters including SSL and authentication options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-06-22-federation-plugin-preview-release/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_federation,\n   [{exchanges, [[{exchange,     \"stocks\"},\n                  {virtual_host, \"/\"},\n                  {type,         \"topic\"},\n                  {durable,      true},\n                  {auto_delete,  false},\n                  {internal,     false},\n                  {upstream_set, \"common-upstreams\"}]]},\n    {upstream_sets, [{\"common-upstreams\", [[{connection, \"newyork\"}],\n                                           [{connection, \"paris\"}]]}\n                    ]},\n    {connections, [{\"newyork\", [{host, \"newyork.mycompany.com\"}]},\n                   {\"paris\",   [{host, \"paris.mycompany.com\"}, {protocol, \"amqps\"},\n                                {username, \"my-user\"}, {password, \"secret\"}]}\n                  ]},\n    {local_username, \"my-user\"}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Emission with Direct Exchange in Objective-C\nDESCRIPTION: This function demonstrates how to emit logs with different severities using a direct exchange in RabbitMQ with Objective-C.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_4\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)emitLogDirect:(NSString *)msg severity:(NSString *)severity {\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n    RMQExchange *x    = [ch direct:@\"direct_logs\"];\n\n    [x publish:[msg dataUsingEncoding:NSUTF8StringEncoding] routingKey:severity];\n    NSLog(@\"Sent '%@'\", msg);\n\n    [conn close];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version in Java Client\nDESCRIPTION: Example showing how to specify the TLS version when connecting to RabbitMQ. This sets the protocol to TLS 1.2, which is important for security and compatibility reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setHost(\"localhost\");\nfactory.setPort(5671);\n\nfactory.useSslProtocol(\"TLSv1.2\");\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Task Producer Implementation in Python\nDESCRIPTION: Complete implementation of a task producer that publishes persistent messages to a durable queue. This ensures reliable task distribution even if RabbitMQ restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='task_queue', durable=True)\n\nmessage = ' '.join(sys.argv[1:]) or \"Hello World!\"\nchannel.basic_publish(\n    exchange='',\n    routing_key='task_queue',\n    body=message,\n    properties=pika.BasicProperties(\n        delivery_mode=pika.DeliveryMode.Persistent\n    ))\nprint(f\" [x] Sent {message}\")\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Consul Warning State Node Configuration\nDESCRIPTION: Configuration to include nodes in warning state in discovery results.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\ncluster_formation.consul.svc_ttl = 30\n# include node in the warning state into discovery result set\ncluster_formation.consul.include_nodes_with_warnings = true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple RabbitMQ Nodes with Address List\nDESCRIPTION: Demonstrates how to connect to multiple RabbitMQ nodes by providing a list of addresses. When connection recovery is triggered, the client will try each address in the shuffled list.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n\nAddress[] addresses = {new Address(\"192.168.1.4\"), new Address(\"192.168.1.5\")};\nfactory.newConnection(addresses);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple RabbitMQ Nodes with Address List\nDESCRIPTION: Demonstrates how to connect to multiple RabbitMQ nodes by providing a list of addresses. When connection recovery is triggered, the client will try each address in the shuffled list.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n\nAddress[] addresses = {new Address(\"192.168.1.4\"), new Address(\"192.168.1.5\")};\nfactory.newConnection(addresses);\n```\n\n----------------------------------------\n\nTITLE: Running TLS Security Test with testssl.sh for RabbitMQ\nDESCRIPTION: Command to evaluate TLS setup security using the testssl.sh tool. This tool performs extensive tests on TLS-enabled endpoints to detect vulnerabilities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n./testssl.sh localhost:5671\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in RabbitMQ (Bash)\nDESCRIPTION: This command sets permissions for a user on a specific virtual host. It requires the virtual host name, username, and regular expressions for configure, write, and read permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions -p my-vhost janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Generating and Using JWT Token with curl\nDESCRIPTION: Bash command to generate a JWT token and use it to access the RabbitMQ management API, demonstrating token-based authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=http://localhost:15672/api/overview TOKEN=$(bin/jwt_token scope-and-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Configuration in New Style Format\nDESCRIPTION: Example configuration in the new style format that enables TLS on port 5671 with peer verification. Includes settings for CA certificate, server certificate, and private key file paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Managing Quorum Queue Members via CLI\nDESCRIPTION: Command line operations for managing quorum queue replicas, including adding/removing members and growing/shrinking queue membership across nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues add_member [-p <vhost>] <queue-name> <node>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues delete_member [-p <vhost>] <queue-name> <node>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues grow <node> <all | even> [--vhost-pattern <pattern>] [--queue-pattern <pattern>]\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues shrink <node> [--errors-only]\n```\n\n----------------------------------------\n\nTITLE: Starting Independent RabbitMQ Nodes for Clustering\nDESCRIPTION: Demonstrates how to start three independent RabbitMQ nodes in detached mode, which is the first step in setting up a cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmq-server -detached\n# on rabbit2\nrabbitmq-server -detached\n# on rabbit3\nrabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: Disabling Client Connections for a Virtual Host in RabbitMQ\nDESCRIPTION: Command to disable all client connections to the 'qa_env' virtual host by setting the max-connections limit to 0. This effectively blocks all new connections to the virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Signing the RabbitMQ Key to Avoid Trust Warnings\nDESCRIPTION: Signs the RabbitMQ key with your personal GPG key to avoid \"untrusted key\" warnings during verification. You must have created your own GPG key first.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngpg --sign-key 0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with TLS 1.2\nDESCRIPTION: A secure TLS 1.2 configuration for RabbitMQ that passes key security tests. Includes basic settings for certificates and peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default  = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = false\n\nssl_options.honor_cipher_order   = true\nssl_options.honor_ecc_order      = true\n```\n\n----------------------------------------\n\nTITLE: Creating Bindings for Multiple Severities\nDESCRIPTION: Setting up queue bindings for different message severity levels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = channel.queue_declare(queue='', exclusive=True)\nqueue_name = result.method.queue\n\nfor severity in severities:\n    channel.queue_bind(exchange='direct_logs',\n                       queue=queue_name,\n                       routing_key=severity)\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ with STOMP over WebSocket\nDESCRIPTION: JavaScript code showing how to establish a STOMP connection to RabbitMQ with authentication, including success and error callbacks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nvar on_connect = function() {\n    console.log('connected');\n};\nvar on_error =  function() {\n    console.log('error');\n};\nclient.connect('guest', 'guest', on_connect, on_error, '/');\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer with Filter Values in Java Stream Client\nDESCRIPTION: This code demonstrates how to create a consumer that only receives messages with specific filter values. It includes both broker-side filtering (specifying desired values) and client-side post-filtering to handle false positives from the Bloom filter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = environment.consumerBuilder()\n  .stream(\"invoices\")\n  .filter()\n    .values(\"emea\")  \n    .postFilter(msg -> \"emea\".equals(msg.getApplicationProperties().get(\"region\")))  \n  .builder()\n  .messageHandler((ctx, msg) -> {\n    // message processing code\n  })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Consumer Implementation in PHP\nDESCRIPTION: This is the full implementation of a RabbitMQ consumer in PHP. It declares a durable queue, sets up message acknowledgment, implements fair dispatch, and processes messages from the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->queue_declare('task_queue', false, true, false, false);\n\necho \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n$callback = function ($msg) {\n    echo ' [x] Received ', $msg->getBody(), \"\\n\";\n    sleep(substr_count($msg->getBody(), '.'));\n    echo \" [x] Done\\n\";\n    $msg->ack();\n};\n\n$channel->basic_qos(null, 1, false);\n$channel->basic_consume('task_queue', '', false, false, false, false, $callback);\n\ntry {\n    $channel->consume();\n} catch (\\Throwable $exception) {\n    echo $exception->getMessage();\n}\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Complete Spring Configuration for RabbitMQ Direct Exchange Tutorial\nDESCRIPTION: Complete configuration class for the RabbitMQ Direct Exchange tutorial. This includes the exchange declaration, queue definitions, and bindings with various routing keys for demonstration purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Profile({\"tut4\",\"routing\"})\n@Configuration\npublic class Tut4Config {\n\n\t@Bean\n\tpublic DirectExchange direct() {\n\t\treturn new DirectExchange(\"tut.direct\");\n\t}\n\n\t@Profile(\"receiver\")\n\tprivate static class ReceiverConfig {\n\n\t\t@Bean\n\t\tpublic Queue autoDeleteQueue1() {\n\t\t\treturn new AnonymousQueue();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Queue autoDeleteQueue2() {\n\t\t\treturn new AnonymousQueue();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding1a(DirectExchange direct,\n\t\t    Queue autoDeleteQueue1) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue1)\n\t\t\t    .to(direct)\n\t\t\t    .with(\"orange\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding1b(DirectExchange direct,\n\t\t    Queue autoDeleteQueue1) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue1)\n\t\t\t    .to(direct)\n\t\t\t    .with(\"black\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding2a(DirectExchange direct,\n\t\t    Queue autoDeleteQueue2) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue2)\n\t\t\t    .to(direct)\n\t\t\t    .with(\"green\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding2b(DirectExchange direct,\n\t\t    Queue autoDeleteQueue2) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue2)\n\t\t\t    .to(direct)\n\t\t\t    .with(\"black\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Tut4Receiver receiver() {\n\t \t \treturn new Tut4Receiver();\n\t\t}\n\t}\n\n\t@Profile(\"sender\")\n\t@Bean\n\tpublic Tut4Sender sender() {\n\t\treturn new Tut4Sender();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-service.bat for RabbitMQ Windows Service Management\nDESCRIPTION: rabbitmq-service.bat is a command-line tool for managing the RabbitMQ broker service on Windows. It supports various commands such as install, remove, start, stop, disable, and enable. The tool also respects several environment variables for configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-service.8.md#2025-04-09_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmq-service.bat [command]\n```\n\n----------------------------------------\n\nTITLE: Adding a User in RabbitMQ (Bash)\nDESCRIPTION: This snippet demonstrates different ways to add a user in RabbitMQ using the rabbitmqctl command in Bash. It includes interactive password prompt, providing password via standard input, and as a command line argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# will prompt for password, only use this option interactively\nrabbitmqctl add_user \"username\"\n\n# Password is provided via standard input.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\necho '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b' | rabbitmqctl add_user 'username'\n\n# Password is provided as a command line argument.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\nrabbitmqctl add_user 'username' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key from Ubuntu Keyserver with GPG\nDESCRIPTION: Retrieves and imports the RabbitMQ signing key from the Ubuntu key server using GPG. This is an alternative to keys.openpgp.org.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"keyserver.ubuntu.com\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\n----------------------------------------\n\nTITLE: Clearing RabbitMQ User Permissions for a Virtual Host\nDESCRIPTION: This command denies access for the user 'janeway' to the virtual host 'my-vhost' in the RabbitMQ broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_permissions -p my-vhost janeway\n```\n\n----------------------------------------\n\nTITLE: Ubuntu 22.04 RabbitMQ Installation Script\nDESCRIPTION: Complete installation script for RabbitMQ on Ubuntu 22.04 (Jammy). Configures package repositories, installs signing keys, sets up Erlang dependencies, and installs RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nsudo apt-get install curl gnupg apt-transport-https -y\n\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null\n## Community mirror of Cloudsmith: modern Erlang repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null\n## Community mirror of Cloudsmith: RabbitMQ repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n\n## Add apt repositories maintained by Team RabbitMQ\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\n## Provides RabbitMQ\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\nEOF\n\n## Update package indices\nsudo apt-get update -y\n\n## Install Erlang packages\n##\n## For versions not compatible with the latest available Erlang series, which is the case\n## for 3.13.x, apt must be instructed to install specifically Erlang 26.\n## Alternatively this can be done via version pinning, documented further in this guide.\nsupported_erlang_version=\"1:26.2.5.6-1\"\nsudo apt-get install -y erlang-base=$supported_erlang_version \\\n                        erlang-asn1=$supported_erlang_version \\\n                        erlang-crypto=$supported_erlang_version \\\n                        erlang-eldap=$supported_erlang_version \\\n                        erlang-ftp=$supported_erlang_version \\\n                        erlang-inets=$supported_erlang_version \\\n                        erlang-mnesia=$supported_erlang_version \\\n                        erlang-os-mon=$supported_erlang_version \\\n                        erlang-parsetools=$supported_erlang_version \\\n                        erlang-public-key=$supported_erlang_version \\\n                        erlang-runtime-tools=$supported_erlang_version \\\n                        erlang-snmp=$supported_erlang_version \\\n                        erlang-ssl=$supported_erlang_version \\\n                        erlang-syntax-tools=$supported_erlang_version \\\n                        erlang-tftp=$supported_erlang_version \\\n                        erlang-tools=$supported_erlang_version \\\n                        erlang-xmerl=$supported_erlang_version\n\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation in Elixir\nDESCRIPTION: A complete implementation of a log message producer that connects to RabbitMQ, declares a fanout exchange, and publishes messages to it. It accepts message content from command line arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\nmessage =\n  case System.argv do\n    []    -> \"Hello World!\"\n    words -> Enum.join(words, \" \")\n  end\n\nAMQP.Exchange.declare(channel, \"logs\", :fanout)\nAMQP.Basic.publish(channel, \"logs\", \"\", message)\nIO.puts \" [x] Sent '#{message}'\"\n\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-Only Listeners\nDESCRIPTION: Deactivates non-TLS listeners and configures TLS settings for secure connections only.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# deactivates non-TLS listeners, only TLS-enabled (activated) clients will be able to connect\nlisteners.tcp = none\n\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = false\n```\n\n----------------------------------------\n\nTITLE: Declaring a DirectExchange Bean in Spring AMQP\nDESCRIPTION: Definition of a DirectExchange bean in Spring configuration. This creates a direct exchange named 'tut.direct' that will route messages based on their routing keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic DirectExchange direct() {\n    return new DirectExchange(\"tut.direct\");\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Node\nDESCRIPTION: Command to stop the Erlang node running RabbitMQ. Can optionally wait for a specific process to terminate if a PID file is specified.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl stop\n```\n\n----------------------------------------\n\nTITLE: Managing Quorum Queue Members via CLI\nDESCRIPTION: Command line operations for managing quorum queue replicas, including adding/removing members and growing/shrinking queue membership across nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues add_member [-p <vhost>] <queue-name> <node>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues delete_member [-p <vhost>] <queue-name> <node>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues grow <node> <all | even> [--vhost-pattern <pattern>] [--queue-pattern <pattern>]\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues shrink <node> [--errors-only]\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in RabbitMQ (Bash)\nDESCRIPTION: This command sets permissions for a user on a specific virtual host. It requires the virtual host name, username, and regular expressions for configure, write, and read permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions -p my-vhost janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Prefetch Limits for Multiple Consumers in Java\nDESCRIPTION: This example shows how to set both per-consumer and per-channel prefetch limits, resulting in a shared limit between two consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-prefetch.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer1 = ...;\nConsumer consumer2 = ...;\nchannel.basicQos(10, false); // Per consumer limit\nchannel.basicQos(15, true);  // Per channel limit\nchannel.basicConsume(\"my-queue1\", false, consumer1);\nchannel.basicConsume(\"my-queue2\", false, consumer2);\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Client Dependencies\nDESCRIPTION: Commands to add the RabbitMQ.Client NuGet package to both projects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-dotnet.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ncd Send\ndotnet add package RabbitMQ.Client\ncd ../Receive\ndotnet add package RabbitMQ.Client\n```\n\n----------------------------------------\n\nTITLE: Setting File Descriptor Limits on Older Linux Distributions\nDESCRIPTION: Command to set soft file descriptor limits on older Linux distributions without systemd. This can be added to /etc/default/rabbitmq-server or rabbitmq-env.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 64000\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in PHP RabbitMQ\nDESCRIPTION: This code snippet demonstrates how to declare a durable queue in RabbitMQ using PHP. The third parameter is set to true to ensure the queue survives server restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$channel->queue_declare('task_queue', false, true, false, false);\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth Configuration\nDESCRIPTION: Commands to start RabbitMQ with OAuth provider settings using environment variables and make command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-idp-initiated.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=portal\nOAUTH_PROVIDER=uaa make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Cluster Operator with Helm\nDESCRIPTION: Commands to install the RabbitMQ Cluster Operator using the Bitnami Helm chart, which deploys the operator to the Kubernetes cluster with default configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install my-release bitnami/rabbitmq-cluster-operator\n```\n\n----------------------------------------\n\nTITLE: Shutting Down RabbitMQ Node\nDESCRIPTION: Command to shut down both RabbitMQ and its runtime. Blocks until the runtime process exits and returns non-zero if shutdown fails. Can only be used for nodes on the same host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Workers and Task Publishers in Shell\nDESCRIPTION: Terminal commands demonstrating how to run the worker and task publisher applications. These commands show how to start multiple workers and publish various messages with different processing times.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\ngo run worker.go\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\ngo run worker.go\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 3\ngo run new_task.go First message.\ngo run new_task.go Second message..\ngo run new_task.go Third message...\ngo run new_task.go Fourth message....\ngo run new_task.go Fifth message.....\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\ngo run worker.go\n# => [*] Waiting for messages. To exit press CTRL+C\n# => [x] Received 'First message.'\n# => [x] Received 'Third message...'\n# => [x] Received 'Fifth message.....'\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\ngo run worker.go\n# => [*] Waiting for messages. To exit press CTRL+C\n# => [x] Received 'Second message..'\n```\n\n----------------------------------------\n\nTITLE: Fetching Messages on Demand in AMQP 0-9-1\nDESCRIPTION: Messages can be fetched on demand using the basic.get method, which also allows specifying the acknowledgement mode for the fetched message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_3\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.get\n```\n\n----------------------------------------\n\nTITLE: Binding Exchanges Using RabbitMQ Java Client\nDESCRIPTION: Demonstrates how to bind a destination exchange to a source exchange with a routing key using the RabbitMQ Java client. The exchangeBind method creates a unidirectional binding where messages will flow from the source exchange to the destination exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/e2e.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = conn.createChannel();\nch.exchangeBind(\"destination\", \"source\", \"routingKey\");\n```\n\n----------------------------------------\n\nTITLE: Shutting Down RabbitMQ Node\nDESCRIPTION: Command to shut down both RabbitMQ and its runtime. Blocks until the runtime process exits and returns non-zero if shutdown fails. Can only be used for nodes on the same host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Batch Message Acknowledgement in Java\nDESCRIPTION: Demonstrates how to acknowledge multiple messages at once using RabbitMQ Java client. Uses Channel#basicAck with multiple flag set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge all deliveries up to\n             // this delivery tag\n             channel.basicAck(deliveryTag, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel from a Connection\nDESCRIPTION: Demonstrates how to create a channel from an established connection. Channels are used for performing most operations in AMQP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nChannel channel = conn.createChannel();\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Consumer in RabbitMQ Java Client\nDESCRIPTION: Shows how to explicitly cancel a consumer using the basicCancel method with a consumer tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nchannel.basicCancel(consumerTag);\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation in Elixir\nDESCRIPTION: A complete implementation of a log message consumer that connects to RabbitMQ, declares a fanout exchange, creates an exclusive queue, binds it to the exchange, and consumes messages. It continuously listens for and prints received messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ReceiveLogs do\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, _meta} ->\n        IO.puts \" [x] Received #{payload}\"\n\n        wait_for_messages(channel)\n    end\n  end\nend\n\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\nAMQP.Exchange.declare(channel, \"logs\", :fanout)\n{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, \"\", exclusive: true)\nAMQP.Queue.bind(channel, queue_name, \"logs\")\nAMQP.Basic.consume(channel, queue_name, nil, no_ack: true)\nIO.puts \" [*] Waiting for messages. To exit press CTRL+C, CTRL+C\"\n\nReceiveLogs.wait_for_messages(channel)\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in PowerShell\nDESCRIPTION: PowerShell command to set up a federation upstream named 'origin' pointing to a remote RabbitMQ host using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federated-queues/index.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream origin '\"{\"\"uri\"\":\"\"amqp://remote-host.local:5672\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Batch Message Rejection in .NET\nDESCRIPTION: Shows how to reject multiple messages at once using RabbitMQ .NET client. Uses IModel#BasicNack with multiple and requeue parameters set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // requeue all unacknowledged deliveries up to\n                    // this delivery tag\n                    channel.BasicNack(ea.DeliveryTag, true, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Enabling Federation Plugins with rabbitmq-plugins (Bash)\nDESCRIPTION: Commands to enable the federation plugin and its management UI extension using the rabbitmq-plugins CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_federation\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_federation_management\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Cookie via Environment Variable in Bash\nDESCRIPTION: Sets the RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable to override the Erlang cookie value used by a RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-setcookie cookie-value\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Offset Tracking in RabbitMQ Streams with Go\nDESCRIPTION: This code demonstrates how to track consumer progress in a RabbitMQ Stream using server-side offset tracking. It retrieves the last stored offset before creating a consumer, sets up a named consumer with manual commit mode, stores offsets every 10 messages, and handles consumer resumption after restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar firstOffset int64 = -1\nvar messageCount int64 = -1 // number of received messages\nvar lastOffset atomic.Int64\nch := make(chan bool)\nmessagesHandler := func(consumerContext stream.ConsumerContext, message *amqp.Message) {\n    if atomic.CompareAndSwapInt64(&firstOffset, -1, consumerContext.Consumer.GetOffset()) {\n        fmt.Println(\"First message received.\")\n    }\n    if atomic.AddInt64(&messageCount, 1)%10 == 0 {\n        consumerContext.Consumer.StoreOffset() // store offset every 10 messages\n    }\n    if string(message.GetData()) == \"marker\" {\n        lastOffset.Store(consumerContext.Consumer.GetOffset())\n        consumerContext.Consumer.StoreOffset() // store the offset on consumer closing\n        consumerContext.Consumer.Close()\n        ch <- true\n    }\n}\n\nvar offsetSpecification stream.OffsetSpecification\nconsumerName := \"offset-tracking-tutorial\" // name of the consumer\nstoredOffset, err := env.QueryOffset(consumerName, streamName) // get last stored offset\nif errors.Is(err, stream.OffsetNotFoundError) {\n    // start consuming at the beginning of the stream if no stored offset\n    offsetSpecification = stream.OffsetSpecification{}.First()\n} else {\n    // start just after the last stored offset\n    offsetSpecification = stream.OffsetSpecification{}.Offset(storedOffset + 1)\n}\n\n_, err = env.NewConsumer(streamName, messagesHandler,\n    stream.NewConsumerOptions().\n        SetManualCommit(). // activate manual offset tracking\n        SetConsumerName(consumerName). // the consumer must a have name\n        SetOffset(offsetSpecification))\nfmt.Println(\"Started consuming...\")\n_ = <-ch\n\nfmt.Printf(\"Done consuming, first offset %d, last offset %d.\\n\", firstOffset, lastOffset.Load())\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Interpolation in RabbitMQ Configuration\nDESCRIPTION: This snippet demonstrates how to use environment variable interpolation in the rabbitmq.conf file. It shows examples of setting default user credentials and cluster name using environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# environment variable interpolation\ndefault_user = $(SEED_USERNAME)\ndefault_pass = $(SEED_USER_PASSWORD)\n\ncluster_name = deployment-$(DEPLOYMENT_ID)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ Prometheus Endpoint\nDESCRIPTION: Configuration example for securing the Prometheus metrics endpoint with TLS. This setup specifies SSL port, certificate files, and optional encryption password. The commented line shows how to disable the non-TLS port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.ssl.port       = 15691\nprometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem\nprometheus.ssl.certfile   = /full/path/to/server_certificate.pem\nprometheus.ssl.keyfile    = /full/path/to/server_key.pem\nprometheus.ssl.password   = password-if-keyfile-is-encrypted\n## To enforce TLS (disable the non-TLS port):\n# prometheus.tcp.listener = none\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Severity in Objective-C\nDESCRIPTION: This snippet demonstrates how to publish a message to a direct exchange with a severity routing key using the RabbitMQ Objective-C client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQExchange *x = [ch direct:@\"logs\"];\n[x publish:[msg dataUsingEncoding:NSUTF8StringEncoding] routingKey:severity];\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Prometheus Metrics Endpoint\nDESCRIPTION: Command to access the metrics endpoint exposed by the Prometheus plugin on port 15692, which serves metrics in Prometheus-compatible format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl {hostname}:15692/metrics\n```\n\n----------------------------------------\n\nTITLE: Creating Channel and Queue for Sending Messages in Ruby\nDESCRIPTION: Creates a channel and declares a queue for sending messages. This snippet is part of the producer (sender) script.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nchannel = connection.create_channel\nqueue = channel.queue('hello')\n\nchannel.default_exchange.publish('Hello World!', routing_key: queue.name)\nputs \" [x] Sent 'Hello World!'\"\n\nconnection.close\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSv1.3 in RabbitMQ (INI)\nDESCRIPTION: Configuration snippet for enabling TLSv1.3 in RabbitMQ. Specifies the SSL listener, certificate files, TLS version, and cipher suites compatible with TLSv1.3.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.3\n\n# Limits enable cipher suites to only those used by TLSv1.3.\n# There are no cipher suites supported by both TLSv1.3 and TLSv1.2.\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Protocol Heartbeat Timeout\nDESCRIPTION: Configuration to adjust the heartbeat timeout for stream protocol connections. The example shows how to reduce it from the default 60 seconds to 20 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# use a lower heartbeat timeout value\nstream.heartbeat = 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Relaxed Property Equivalence Checks for Quorum Queues in RabbitMQ\nDESCRIPTION: This configuration option allows ignoring the 'x-queue-type' header during queue redeclaration, which can simplify upgrades for applications that explicitly set this property to 'classic' for historical reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nquorum_queue.property_equivalence.relaxed_checks_on_redeclaration = true\n```\n\n----------------------------------------\n\nTITLE: Message Requeuing in .NET\nDESCRIPTION: Shows how to requeue messages using RabbitMQ .NET client. Uses IModel#BasicReject with requeue parameter set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // requeue the delivery\n                    channel.BasicReject(ea.DeliveryTag, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Micrometer with JMX for RabbitMQ Java Client Metrics\nDESCRIPTION: Illustrates how to set up Micrometer metrics with JMX reporting for the RabbitMQ Java client. It shows the creation of a JmxMeterRegistry, passing it to the MicrometerMetricsCollector, and setting the collector on the ConnectionFactory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nJmxMeterRegistry registry = new JmxMeterRegistry();\nMicrometerMetricsCollector metrics = new MicrometerMetricsCollector(registry);\nConnectionFactory connectionFactory = new ConnectionFactory();\nconnectionFactory.setMetricsCollector(metrics);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in RabbitMQ\nDESCRIPTION: Code to declare a queue that will survive RabbitMQ restarts by setting the durable flag to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nq, err := ch.QueueDeclare(\n  \"hello\",      // name\n  true,         // durable\n  false,        // delete when unused\n  false,        // exclusive\n  false,        // no-wait\n  nil,          // arguments\n)\nfailOnError(err, \"Failed to declare a queue\")\n```\n\n----------------------------------------\n\nTITLE: Receiver Output for First Run in Shell\nDESCRIPTION: Shell output showing the first run of the offset-tracking consumer. It starts from the beginning of the stream (offset 0) and processes messages until it finds the marker at offset 99.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nConnecting...\nStart consuming...\nFirst message received\nMarker found\nDone consuming, first offset was 0, last offset was 99\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ using multiple endpoints in C#\nDESCRIPTION: This snippet demonstrates how to connect to RabbitMQ using a list of endpoints, allowing for connection to alternate nodes in case of failure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.UserName = \"username\";\nfactory.Password = \"s3Kre7\";\n\nvar endpoints = new System.Collections.Generic.List<AmqpTcpEndpoint> {\n  new AmqpTcpEndpoint(\"hostname\"),\n  new AmqpTcpEndpoint(\"localhost\")\n};\nIConnection conn = await factory.CreateConnectionAsync(endpoints);\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Verification in RabbitMQ with ini Format\nDESCRIPTION: Server configuration example showing how to enable TLS with peer verification, requiring client certificates. This configuration listens on port 5671 and specifies paths to CA certificate, server certificate, and server key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile = /path/to/server_certificate.pem\nssl_options.keyfile = /path/to/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat Timeout in Java RabbitMQ Client\nDESCRIPTION: Example showing how to set the heartbeat timeout to 60 seconds using the ConnectionFactory in Java client before creating a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/heartbeats.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\n\n// set the heartbeat timeout to 60 seconds\ncf.setRequestedHeartbeat(60);\n```\n\n----------------------------------------\n\nTITLE: Setting Queue TTL via RabbitMQ Policy (Windows PowerShell)\nDESCRIPTION: Command to set a policy that makes all queues expire after 30 minutes (1,800,000 milliseconds) of inactivity using rabbitmqctl in Windows environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy expiry \".*\" \"{\"\"expires\"\":1800000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Backend Authentication in RabbitMQ\nDESCRIPTION: Complex configuration for checking LDAP first and then falling back to the internal database. Users in LDAP must exist in the internal database for authorization but don't need a password there.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = ldap\nauth_backends.1.authz = internal\nauth_backends.2       = internal\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Peer Discovery for RabbitMQ Cluster Formation\nDESCRIPTION: This snippet shows how to configure RabbitMQ to use AWS for peer discovery, including setting the region, access keys, and other AWS-specific options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Consumer with OAuth Client\nDESCRIPTION: This command starts a PerfTest consumer application authenticated using the OAuth client 'consumer_with_roles', which has read permissions mapped from custom scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-consumer CONSUMER=consumer_with_roles\n```\n\n----------------------------------------\n\nTITLE: Clearing Global Parameter in RabbitMQ\nDESCRIPTION: Command to clear a global runtime parameter named 'mqtt_default_vhosts'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_global_parameter mqtt_default_vhosts\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Pika OAuth Testing\nDESCRIPTION: Commands to set up a Python environment and install the required packages for testing OAuth authentication with the Pika AMQP client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\npip install pika\npip install requests\npython3 pika-client/producer.py producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Cluster Node Restart and Status Verification\nDESCRIPTION: Commands to restart RabbitMQ nodes and verify their cluster status after restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmq-server -detached\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmq-server -detached\n\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in RabbitMQ\nDESCRIPTION: The set_log_level command adjusts the logging level of the running RabbitMQ node. Supported levels include debug, info, warning, error, critical, and none.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_log_level debug\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment for RabbitMQ Streams in Java\nDESCRIPTION: Java code to create an Environment instance, which is the entry point for the RabbitMQ Stream Java client. It handles stream management and the creation of publisher and consumer instances.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntry (Environment environment = Environment.builder()\n        .uri(\"rabbitmq-stream://localhost:5552\").build()) {\n\n // ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Direct Exchange in Elixir\nDESCRIPTION: Code to create a direct exchange named 'direct_logs'. Direct exchanges route messages to queues based on the message routing key matching exactly with the queue binding key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Exchange.declare(channel, \"direct_logs\", :direct)\n```\n\n----------------------------------------\n\nTITLE: Emitting a Critical Kernel Log with Topic Exchange in Bash\nDESCRIPTION: This command runs the emit_log_topic.js script to send a log message with the routing key 'kern.critical' and a specified message content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./emit_log_topic.js \"kern.critical\" \"A critical kernel error\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with TTL Using Java Client\nDESCRIPTION: Creates a RabbitMQ queue with a 30-minute expiration time using x-arguments during queue declaration in Java. The queue will be automatically deleted after 30 minutes of inactivity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-expires\", 1800000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Using the rabbitmq-upgrade command with options\nDESCRIPTION: The basic syntax for the rabbitmq-upgrade command, showing available options including node specification, quiet mode, silent mode, timeout settings, and long name support.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade [-q] [-s] [-l] [-n node] [-t timeout] command [command_options]\n```\n\n----------------------------------------\n\nTITLE: Checking Local Alarms in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if there are alarms in effect on the target node. Used to monitor resource alarms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_local_alarms\n```\n\n----------------------------------------\n\nTITLE: LDAP Certificate Chain Verification Depth\nDESCRIPTION: Sets the certificate chain verification depth for LDAP TLS connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.ssl_options.depth = 5\n```\n\n----------------------------------------\n\nTITLE: Adding a Quorum Queue Member in RabbitMQ (Bash)\nDESCRIPTION: Adds a replica (member) to a specific quorum queue on a given node. Requires specifying the virtual host, queue name, and target node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues add_member --vhost \"a-vhost\" \"a-queue\" \"rabbit@new-node\"\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang Packages on Debian\nDESCRIPTION: Installs specific versions of Erlang packages required for RabbitMQ 3.13.x on Debian. This ensures compatibility with the latest available Erlang series.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupported_erlang_version=\"1:26.2.5.6-1\"\nsudo apt-get install -y erlang-base=$supported_erlang_version \\\n                        erlang-asn1=$supported_erlang_version \\\n                        erlang-crypto=$supported_erlang_version \\\n                        erlang-eldap=$supported_erlang_version \\\n                        erlang-ftp=$supported_erlang_version \\\n                        erlang-inets=$supported_erlang_version \\\n                        erlang-mnesia=$supported_erlang_version \\\n                        erlang-os-mon=$supported_erlang_version \\\n                        erlang-parsetools=$supported_erlang_version \\\n                        erlang-public-key=$supported_erlang_version \\\n                        erlang-runtime-tools=$supported_erlang_version \\\n                        erlang-snmp=$supported_erlang_version \\\n                        erlang-ssl=$supported_erlang_version \\\n                        erlang-syntax-tools=$supported_erlang_version \\\n                        erlang-tftp=$supported_erlang_version \\\n                        erlang-tools=$supported_erlang_version \\\n                        erlang-xmerl=$supported_erlang_version\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Messages with RabbitMQ Stream in Java\nDESCRIPTION: This example demonstrates how to create a message with custom properties in RabbitMQ Streams using the Java client. It sets creation time and message ID properties before adding the message body data.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMessage message = producer.messageBuilder()\n  .properties()\n    .creationTime(System.currentTimeMillis()) // Unix time, with a precision of milliseconds\n    .messageId(i) // long, string, binary, or UUID\n  .messageBuilder()\n    .addData(\"hello world\".getBytes(StandardCharsets.UTF_8))\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in Erlang Format with RabbitMQ Diagnostics\nDESCRIPTION: This command lists cipher suites in Erlang format, which is only accepted in the classic config format of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format erlang -q\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat Timeout in Java RabbitMQ Client\nDESCRIPTION: Example showing how to set the heartbeat timeout to 60 seconds using the ConnectionFactory in Java client before creating a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/heartbeats.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\n\n// set the heartbeat timeout to 60 seconds\ncf.setRequestedHeartbeat(60);\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver with Direct Exchange in Swift RabbitMQ Client\nDESCRIPTION: Full implementation of a function that receives log messages of various severities. It binds a queue to a direct exchange with multiple routing keys and subscribes to messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc receiveLogsDirect() {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let x = ch.direct(\"direct_logs\")\n    let q = ch.queue(\"\", options: .exclusive)\n    let severities = [\"error\", \"warning\", \"info\"]\n    for severity: String in severities {\n        q.bind(x, routingKey: severity)\n    }\n    print(\"Waiting for logs.\")\n    q.subscribe({(_ message: RMQMessage) -> Void in\n        print(\"\\(message.routingKey):\\(String(data: message.body,\n                                       encoding: .utf8))\")\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User and Permissions for MQTT Connections in RabbitMQ\nDESCRIPTION: Command sequence for setting up a new user with appropriate permissions for MQTT connections. These commands create a user with full access to the default virtual host and assign management tags for UI access.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# username and password are both \"mqtt-test\"\nrabbitmqctl add_user mqtt-test mqtt-test\nrabbitmqctl set_permissions -p \"/\" mqtt-test \".*\" \".*\" \".*\"\nrabbitmqctl set_user_tags mqtt-test management\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Delayed Message Exchange Plugin\nDESCRIPTION: Command to enable the rabbitmq_delayed_message_exchange plugin after downloading and copying it to RabbitMQ's plugin folder.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2015-04-16-scheduling-messages-with-rabbitmq/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_delayed_message_exchange\n```\n\n----------------------------------------\n\nTITLE: MQTT Retained Message Store Configuration\nDESCRIPTION: Complete configuration example for MQTT plugin including retained message store settings, anonymous access, vhost configuration, and listener ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.allow_anonymous                     = true\nmqtt.vhost                               = /\nmqtt.exchange                            = amq.topic\nmqtt.max_session_expiry_interval_seconds = 1800\nmqtt.prefetch                            = 10\n\n## use DETS (disk-based) store for retained messages\nmqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets\n## only used by DETS store\nmqtt.retained_message_store_dets_sync_interval = 2000\n\nmqtt.listeners.ssl = none\nmqtt.listeners.tcp.default = 1883\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Ruby\nDESCRIPTION: Establishes a binding between a queue and the 'logs' exchange. This relationship determines how messages flow from the exchange to the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nqueue.bind('logs')\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Endpoint for RabbitMQ Peer Discovery\nDESCRIPTION: Specifies Consul host, port, and URI scheme for RabbitMQ peer discovery. This enables RabbitMQ nodes to communicate with Consul for service discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# 8500 is used by default\ncluster_formation.consul.port = 8500\n# http is used by default\ncluster_formation.consul.scheme = http\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy for RabbitMQ Peer Discovery\nDESCRIPTION: This snippet shows how to configure HTTP and HTTPS proxy servers for RabbitMQ peer discovery mechanisms that use HTTP. It sets the cluster_formation.proxy.http_proxy and cluster_formation.proxy.https_proxy options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.proxy.http_proxy = 192.168.0.98\ncluster_formation.proxy.https_proxy = 192.168.0.98\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Version Upgrade Compatibility Table\nDESCRIPTION: Markdown table showing compatibility between RabbitMQ versions for rolling upgrades, including specific version requirements and feature flag considerations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| From     | To     | Notes                                                         |\n|----------|--------|-------------------------------------------------------------|\n| 3.12.x   | 3.13.x |                                                               |\n| 3.11.18  | 3.12.x | All feature flags **must** be enabled **before** the upgrade  |\n| 3.10.x   | 3.11.x | Some feature flags **must** be enabled **before** the upgrade |\n| 3.9.x    | 3.10.x |                                                               |\n| 3.8.x    | 3.9.x  |                                                               |\n| 3.7.18   | 3.8.x  |                                                               |\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions using rabbitmqctl\nDESCRIPTION: Command to import RabbitMQ definitions using rabbitmqctl, which doesn't require the management plugin to be enabled. This applies schema metadata from the specified JSON file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled\nrabbitmqctl import_definitions /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Maximum Length in Java\nDESCRIPTION: This Java code snippet declares a queue with a maximum length of 10 messages using the x-max-length argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/maxlength/index.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-max-length\", 10);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Enabling the RabbitMQ Prometheus Plugin\nDESCRIPTION: Command to enable the rabbitmq_prometheus plugin which exposes RabbitMQ metrics in Prometheus format for monitoring.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_prometheus\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Cipher Suites in RabbitMQ with Bash\nDESCRIPTION: Lists all cipher suites supported by encoding commands in RabbitMQ. This command helps identify available encryption options for secure communications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_ciphers\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Limits for RabbitMQ on Linux\nDESCRIPTION: This snippet shows how to set the maximum open file handle limit (nofile) to 64000 for RabbitMQ using systemd on modern Linux distributions. The configuration is done in a file located at /etc/systemd/system/rabbitmq-server.service.d/limits.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_53\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=64000\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation\nDESCRIPTION: Full implementation of a consumer that receives and processes log messages from the fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-python.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='logs', exchange_type='fanout')\n\nresult = channel.queue_declare(queue='', exclusive=True)\nqueue_name = result.method.queue\n\nchannel.queue_bind(exchange='logs', queue=queue_name)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] {body}\")\n\nchannel.basic_consume(\n    queue=queue_name, on_message_callback=callback, auto_ack=True)\n\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Policy in Bash\nDESCRIPTION: This snippet demonstrates how to set a policy for an Alternate Exchange using the rabbitmqctl command in Bash. It applies an AE named 'my-ae' to an exchange called 'my-direct'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ae.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy AE \"^my-direct$\" '{\"alternate-exchange\":\"my-ae\"}' --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Managing Stream Replicas in RabbitMQ using CLI\nDESCRIPTION: Commands for adding and removing stream replicas using the rabbitmq-streams CLI tool. Includes options for specifying virtual hosts and stream names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_replica [-p <vhost>] <stream-name> <node>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams delete_replica [-p <vhost>] <stream-name> <node>\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel in RabbitMQ with JavaScript\nDESCRIPTION: Creates a channel after connecting to RabbitMQ, which is necessary for performing operations like declaring queues and sending messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {});\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Stream in Rust\nDESCRIPTION: Publishes a series of messages to a stream with a marker message at the end, using async confirmation callbacks to ensure delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-rust-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet producer = environment.producer().build(stream).await?;\n\nprintln!(\"Publishing {:?} messages\", message_count);\n\nfor i in 0..message_count {\n    let msg;\n    if i < message_count - 1 {\n        msg = Message::builder().body(format!(\"hello{}\", i)).build();\n    } else {\n        msg = Message::builder().body(format!(\"marker{}\", i)).build();\n    };\n\n    let counter = confirmed_messages.clone();\n    let notifier = notify_on_send.clone();\n    producer\n        .send(msg, move |_| {\n            let inner_counter = counter.clone();\n            let inner_notifier = notifier.clone();\n            async move {\n                if inner_counter.fetch_add(1, Ordering::Relaxed) == message_count - 1 {\n                    inner_notifier.notify_one();\n                }\n            }\n        })\n        .await?;\n}\n\nnotify_on_send.notified().await;\nprintln!(\"Messages confirmed: True\");\nproducer.close().await?\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Tracking in RabbitMQ Stream Consumer\nDESCRIPTION: Python implementation of a RabbitMQ Stream consumer with offset tracking functionality. The code handles message processing, stores offsets every 10 messages, and implements recovery logic to resume from the last stored position. Key features include named consumers, periodic offset storage, and offset querying on startup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def on_message(msg: AMQPMessage, message_context: MessageContext):\n    # variable to keep track of the number of received messages\n    global message_count\n    global first_offset\n    global last_offset\n\n    offset = message_context.offset\n    if first_offset == -1:\n        print(\"First message received\")\n        first_offset = offset\n\n    consumer = message_context.consumer\n    stream = message_context.consumer.get_stream(message_context.subscriber_name)\n\n    # store the offset after every 10 messages received\n    message_count = message_count + 1\n\n    if message_count % 10 == 0:\n        # store_message needs to take a subscriber_name parameter\n        await consumer.store_offset(\n            stream=stream,\n            offset=offset,\n            subscriber_name=message_context.subscriber_name,\n        )\n\n    # store the offset after receiving the marker message\n    if \"marker\" in str(msg):\n        await consumer.store_offset(\n            stream=stream,\n            offset=offset,\n            subscriber_name=message_context.subscriber_name,\n        )\n        last_offset = offset\n        await consumer.close()\n\nasync def consume():\n    # the offset to start consuming from\n    stored_offset = -1\n    global first_offset\n    global last_offset\n\n    # start a consumer and creates the stream is not exist (same as before...)\n\n    try:\n        await consumer.start()\n        print(\"Started consuming: Press control +C to close\")\n        try:\n            # query_offset must take a subscriber_name as parameter\n            stored_offset = await consumer.query_offset(\n                stream=STREAM_NAME, subscriber_name=\"subscriber_1\"\n            )\n        except OffsetNotFound as offset_exception:\n            print(f\"Offset not previously stored. {offset_exception}\")\n\n        except ServerError as server_error:\n            print(f\"Server error: {server_error}\")\n            exit(1)\n\n        # if no offset was previously stored start from the first offset\n        stored_offset = stored_offset + 1\n        await consumer.subscribe(\n            stream=STREAM_NAME,\n             # We explicitely need to assign a name to the consumer\n            subscriber_name=\"subscriber_1\",       \n            callback=on_message,\n            decoder=amqp_decoder,\n            offset_specification=ConsumerOffsetSpecification(\n                OffsetType.OFFSET, stored_offset\n            ),\n        )\n        await consumer.run()\n\n    except (KeyboardInterrupt, asyncio.exceptions.CancelledError):\n        await consumer.close()\n```\n\n----------------------------------------\n\nTITLE: Viewing PerfTest Producer Logs\nDESCRIPTION: Command to view the logs of the running producer application to debug OAuth 2.0 authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs producer -f\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queue Only if Unused in RabbitMQ Java Client\nDESCRIPTION: Deletes a queue only if it has no consumers. The operation will fail if the queue has active consumers, leaving it intact.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDelete(\"queue-name\", true, false)\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Server in Background Mode\nDESCRIPTION: This command starts the RabbitMQ AMQP server in detached (background) mode. When run with the -detached flag, the server process runs in the background and does not write to the PID file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-server.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: Verifying Erlang Cookie Configuration in RabbitMQ\nDESCRIPTION: Command that displays comprehensive information about the Erlang cookie configuration used by RabbitMQ CLI tools, including the effective user, home directory, cookie file path and access permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_cookie_sources\n```\n\n----------------------------------------\n\nTITLE: Complete Worker Implementation in RabbitMQ with JavaScript\nDESCRIPTION: Full implementation of a worker (worker.js) that consumes and processes messages from a RabbitMQ queue with durability, manual acknowledgment and fair dispatch. The worker connects to RabbitMQ, sets up a channel with prefetch limit, and processes messages with simulated work time before acknowledging them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = 'task_queue';\n\n    channel.assertQueue(queue, {\n      durable: true\n    });\n    channel.prefetch(1);\n    console.log(\" [*] Waiting for messages in %s. To exit press CTRL+C\", queue);\n    channel.consume(queue, function(msg) {\n      var secs = msg.content.toString().split('.').length - 1;\n\n      console.log(\" [x] Received %s\", msg.content.toString());\n      setTimeout(function() {\n        console.log(\" [x] Done\");\n        channel.ack(msg);\n      }, secs * 1000);\n    }, {\n      // manual acknowledgment mode,\n      // see /docs/confirms for details\n      noAck: false\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ with Docker Management Plugin\nDESCRIPTION: Example Docker command to run the latest RabbitMQ 3.13 with the management plugin enabled, exposing ports 5672 (AMQP) and 15672 (management interface).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/download.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# latest RabbitMQ 3.13\ndocker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions to Users in RabbitMQ\nDESCRIPTION: Shows how to grant permissions to a user in a specific virtual host using the rabbitmqctl command. Examples are provided for both Bash and PowerShell, demonstrating how to set configure, write, and read permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# First \".*\" for configure permission on every entity\n# Second \".*\" for write permission on every entity\n# Third \".*\" for read permission on every entity\nrabbitmqctl set_permissions -p \"custom-vhost\" \"username\" \".*\" \".*\" \".*\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# First \".*\" for configure permission on every entity\n# Second \".*\" for write permission on every entity\n# Third \".*\" for read permission on every entity\nrabbitmqctl.bat set_permissions -p 'custom-vhost' 'username' '.*' '.*' '.*'\n```\n\n----------------------------------------\n\nTITLE: Complete Producer Implementation for RabbitMQ Work Queue in Objective-C\nDESCRIPTION: Complete implementation of a task producer for RabbitMQ work queues in Objective-C. It establishes a connection, creates a durable queue, and publishes persistent messages to the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_8\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)newTask:(NSString *)msg {\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n\n    RMQQueue *q = [ch queue:@\"task_queue\" options:RMQQueueDeclareDurable];\n\n    NSData *msgData = [msg dataUsingEncoding:NSUTF8StringEncoding];\n    [ch.defaultExchange publish:msgData routingKey:q.name persistent:YES];\n    NSLog(@\"Sent %@\", msg);\n\n    [conn close];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ etcd Discovery\nDESCRIPTION: This snippet shows how to configure TLS for secure connections between RabbitMQ and etcd in the peer discovery process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ TLS Connection Example in .NET\nDESCRIPTION: Full example demonstrating how to establish a TLS connection to RabbitMQ, create a channel, and perform basic queue operations using the .NET client with async/await pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Text;\n\nusing RabbitMQ.client;\n\nnamespace RabbitMQ.client.Examples\n{\n  public class TestSSL\n  {\n    public static async Task<int> Main(string[] args)\n    {\n      ConnectionFactory cf = new ConnectionFactory();\n\n      cf.Ssl.Enabled = true;\n      cf.Ssl.ServerName = System.Net.Dns.GetHostName();\n      cf.Ssl.CertPath = \"/path/to/client_key.p12\";\n      cf.Ssl.CertPassphrase = \"MySecretPassword\";\n\n      using (IConnection conn = await cf.CreateConnectionAsync())\n      {\n        using (IChannel ch = await conn.CreateChannelAsync())\n        {\n          Console.WriteLine(\"Successfully connected and opened a channel\");\n          await ch.QueueDeclareAsync(\"rabbitmq-dotnet-test\", false, false, false, null);\n          Console.WriteLine(\"Successfully declared a queue\");\n          await ch.QueueDeleteAsync(\"rabbitmq-dotnet-test\");\n          Console.WriteLine(\"Successfully deleted the queue\");\n        }\n      }\n      return 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream Messages with Specific Offset\nDESCRIPTION: Shows how to consume messages from a specific offset position in a RabbitMQ stream using a numerical offset value. Includes required QoS configuration and acknowledgment handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", 5000), // offset value\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Subset of Quorum Queues by Name in RabbitMQ\nDESCRIPTION: CLI command to rebalance a subset of quorum queues selected by name pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance quorum --queue-pattern \"orders.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ TLS Support in Erlang Format\nDESCRIPTION: Example configuration in classic Erlang term format for enabling TLS in RabbitMQ, specifying the TLS listener port, certificate files, and peer verification settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                    {certfile,   \"/path/to/server_certificate.pem\"},\n                    {keyfile,    \"/path/to/server_key.pem\"},\n                    {verify,     verify_peer},\n                    {fail_if_no_peer_cert, true}]}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Log Level Configuration\nDESCRIPTION: Logging granularity configuration\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Log Level Configuration\nDESCRIPTION: Logging granularity configuration\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream Replica using RabbitMQ CLI\nDESCRIPTION: This command removes a replica from a specified stream on a given node. It requires the virtual host, stream name, and target node as parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams delete_replica [-p <vhost>] <stream-name> <node>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a RabbitMQ Queue for Message Consumption\nDESCRIPTION: Subscribes to the 'hello' queue to asynchronously receive messages pushed by the RabbitMQ server. When a message is received, it prints the message body content to the console.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-swift.md#2025-04-09_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nprint(\"Waiting for messages.\")\nq.subscribe({(_ message: RMQMessage) -> Void in\n    print(\"Received \\(String(data: message.body, encoding: .utf8))\")\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Acceptors in RabbitMQ (INI)\nDESCRIPTION: Default setting for the number of Erlang processes that will accept connections for TCP listeners.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.tcp = 10\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with RabbitMQ in Go\nDESCRIPTION: Shows how to create a publisher and publish messages to an exchange with a routing key or directly to a queue using the RabbitMQ Go client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\n// // no target defined on publisher creation (nil)\npublisher, err := connection.NewPublisher(context.Background(), nil,\n                 nil)\n\n// create message with an exchange with a routing key\nmsg, err = NewMessageWithAddress([]byte(\"hello\"), &ExchangeAddress{\n            Exchange: \"foo\",\n            Key:      \"bar\",\n        })\n\n// create a message with a queue \nmsg, err = NewMessageWithAddress([]byte(\"hello\"), &QueueAddress{\n    Queue: \"some-queue\"})\n\n\n// use the publish\npublishResult, err = publisher.Publish(context.Background(), msg)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Erlang Repository for Ubuntu 22.04 (Jammy)\nDESCRIPTION: Adds the Launchpad PPA repository for Erlang packages produced by the RabbitMQ team to /etc/apt/sources.list.d/erlang.list for Ubuntu 22.04 (Jammy). This repository is specifically for amd64 architecture and uses GPG key verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# This Launchpad PPA repository provides Erlang packages produced by the RabbitMQ team\n#\n# Replace $distribution with the name of the Ubuntu release used\ndeb [arch=amd64 signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu jammy main\n```\n\n----------------------------------------\n\nTITLE: Java Publisher Confirms Code Example\nDESCRIPTION: Interface references for implementing publisher confirms in RabbitMQ Java client. Shows how to handle confirmation callbacks for published messages using ConfirmCallback and ConfirmListener interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/publishers/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Add confirm listeners to a channel\nchannel.addConfirmListener(confirmCallback, confirmCallback);\n\n// Interfaces used:\n// ConfirmCallback\n// ConfirmListener\n```\n\n----------------------------------------\n\nTITLE: Setting Up Consumer for Receiving Messages in Ruby\nDESCRIPTION: Initializes a consumer that listens for messages from a specified queue. This snippet is part of the consumer (receiver) script.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nqueue = channel.queue('hello')\n\nbegin\n  puts ' [*] Waiting for messages. To exit press CTRL+C'\n  queue.subscribe(block: true) do |_delivery_info, _properties, body|\n    puts \" [x] Received #{body}\"\n  end\nrescue Interrupt => _\n  connection.close\n\n  exit(0)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener Options for MQTT in RabbitMQ\nDESCRIPTION: Sets various TCP listener options including buffer sizes, connection queue length, TCP keepalives, and timeouts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.listeners.tcp.1 = 127.0.0.1:1883\nmqtt.listeners.tcp.2 = ::1:1883\n\nmqtt.tcp_listen_options.backlog = 4096\nmqtt.tcp_listen_options.buffer  = 131072\nmqtt.tcp_listen_options.recbuf  = 131072\nmqtt.tcp_listen_options.sndbuf  = 131072\n\nmqtt.tcp_listen_options.keepalive = true\nmqtt.tcp_listen_options.nodelay   = true\n\nmqtt.tcp_listen_options.exit_on_close = true\nmqtt.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Status\nDESCRIPTION: Commands to verify cluster status across all three nodes, showing both disc nodes and running nodes in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit2,rabbit@rabbit1]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Verification in RabbitMQ with Erlang Format\nDESCRIPTION: Classic configuration format (Erlang) for enabling TLS with peer verification in RabbitMQ. Sets up SSL listeners on port 5671 and configures certificate paths along with verification settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n[\n{rabbit, [\n   {ssl_listeners, [5671]},\n   {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                  {certfile,\"/path/to/server_certificate.pem\"},\n                  {keyfile,\"/path/to/server_key.pem\"},\n                  {verify, verify_peer},\n                  {fail_if_no_peer_cert, true}]}\n ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Multi-Backend Authentication in RabbitMQ\nDESCRIPTION: This advanced configuration checks LDAP first for authentication, uses internal database for authorization, and falls back to internal database for both if the user is not found in LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = ldap\nauth_backends.1.authz = internal\nauth_backends.2       = internal\n```\n\n----------------------------------------\n\nTITLE: Pinging a RabbitMQ Node\nDESCRIPTION: Checks if a specific RabbitMQ node is up, registered with EPMD, and accessible for CLI tool authentication. The command uses the 'ping' action and specifies the target node using the '-n' flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl ping -n rabbit@hostname\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Stream Publisher in Java\nDESCRIPTION: Command to compile and run the Send class which publishes messages to a RabbitMQ stream. This can be run multiple times to send additional messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n ./mvnw -q compile exec:java '-Dexec.mainClass=Send'\n```\n\n----------------------------------------\n\nTITLE: Complete Log Publisher Implementation with RabbitMQ in Java\nDESCRIPTION: A full implementation of a log message publisher that connects to RabbitMQ, declares a fanout exchange named 'logs', and publishes messages to it. Messages are broadcast to all consumers listening on queues bound to this exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class EmitLog {\n\n  private static final String EXCHANGE_NAME = \"logs\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    try (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n\n        String message = argv.length < 1 ? \"info: Hello World!\" :\n                            String.join(\" \", argv);\n\n        channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes(\"UTF-8\"));\n        System.out.println(\" [x] Sent '\" + message + \"'\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Basic Message Flow using Mermaid\nDESCRIPTION: This diagram illustrates the fundamental messaging pattern in RabbitMQ with a producer sending messages to a queue named 'hello', which are then consumed by a consumer. The diagram uses Mermaid's flowchart syntax with custom styling for the producer, queue, and consumer elements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T1DiagramHello.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    Q[[hello]]\n    C((C))\n\n    P --> Q --> C\n\n    class P mermaid-producer\n    class Q mermaid-queue\n    class C mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Positive Message Acknowledgement in .NET\nDESCRIPTION: Shows positive message acknowledgement implementation using RabbitMQ .NET client. Uses IModel#BasicAck with EventingBasicConsumer to handle individual message acknowledgement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // positively acknowledge a single delivery, the message will\n                    // be discarded\n                    channel.BasicAck(ea.DeliveryTag, false);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropwizard Metrics with JMX for RabbitMQ Java Client\nDESCRIPTION: Shows how to set up Dropwizard Metrics with JMX reporting for the RabbitMQ Java client. It demonstrates creating a MetricRegistry, passing it to the StandardMetricsCollector, setting the collector on the ConnectionFactory, and configuring a JMX reporter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nMetricRegistry registry = new MetricRegistry();\nStandardMetricsCollector metrics = new StandardMetricsCollector(registry);\n\nConnectionFactory connectionFactory = new ConnectionFactory();\nconnectionFactory.setMetricsCollector(metrics);\n\nJmxReporter reporter = JmxReporter\n  .forRegistry(registry)\n  .inDomain(\"com.rabbitmq.client.jmx\")\n  .build();\nreporter.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Function in PHP\nDESCRIPTION: A recursive implementation of the Fibonacci sequence in PHP. This function is used as the core computation for the RPC example.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-php.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction fib($n)\n{\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib($n-1) + fib($n-2);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Issuer in RabbitMQ (Erlang)\nDESCRIPTION: This snippet demonstrates how to configure the OAuth 2.0 issuer URL in RabbitMQ using the Erlang format. It sets the resource server ID and the issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"my_rabbit_server\">>},\n    {issuer, <<\"https://my-idp-provider/somerealm\">>}\n  ]},\n].\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitoring-Only User in RabbitMQ (Windows CMD)\nDESCRIPTION: This snippet demonstrates how to create a user with monitoring-only access to the RabbitMQ management UI using Windows CMD commands. It includes steps to add a user with different password examples and grant empty permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nrem See the Access Control guide to learn about user management.\n\nrem password is provided as a command line argument\nrabbitmqctl.bat add_user \"monitoring\" \"9a55f70a841f18b97c3a7db939b7adc9e34a0f1d\"\n\nrem passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user \"monitoring\" \"w63pnZ&LnYMO(t\"\n\nrem grant the user empty permissions\nrabbitmqctl set_permissions --vhost \"vhost-name\" \"monitoring\" \"^$\" \"^$\" \"^$\"\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host Using RabbitMQ CLI\nDESCRIPTION: Creates a new virtual host named 'qa1' using the rabbitmqctl command line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1\n```\n\n----------------------------------------\n\nTITLE: Basic RabbitMQ Upgrade Command Usage\nDESCRIPTION: Basic command syntax for rabbitmq-upgrade showing the main command structure with optional flags for quiet mode, silent mode, long names, node specification, and timeout settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmq-upgrade [-q] [-s] [-l] [-n node] [-t timeout] command [command_options]\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Server on Debian\nDESCRIPTION: Installs the RabbitMQ server package and its dependencies using apt. The --fix-missing flag is used to handle any potential missing dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Java Client with TLS Peer Verification\nDESCRIPTION: Java example demonstrating a complete RabbitMQ client implementation with TLS peer verification. The code configures key stores, trust stores, TLS context, and establishes a secure connection to RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      Connection conn = factory.newConnection();\n      Channel channel = conn.createChannel();\n\n      channel.queueDeclare(\"rabbitmq-java-test\", false, true, true, null);\n      channel.basicPublish(\"\", \"rabbitmq-java-test\", null, \"Hello, World\".getBytes());\n\n      GetResponse chResponse = channel.basicGet(\"rabbitmq-java-test\", false);\n      if (chResponse == null) {\n          System.out.println(\"No message retrieved\");\n      } else {\n          byte[] body = chResponse.getBody();\n          System.out.println(\"Received: \" + new String(body));\n      }\n\n      channel.close();\n      conn.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Callback Queue Implementation - Elixir\nDESCRIPTION: Demonstrates how to create a callback queue for RPC responses and publish a request message with the callback queue address. Shows the basic pattern for RPC communication in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-elixir.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, %{queue: callback_queue}} = AMQP.Queue.declare(channel,\n                                                     \"\",\n                                                     exclusive: true)\n\nAMQP.Basic.publish(channel,\n                   \"\",\n                   \"rpc_queue\",\n                   request,\n                   reply_to: callback_queue)\n# ... and some code to read a response message from the callback_queue ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Definition Import from HTTPS URL on Node Boot\nDESCRIPTION: Configuration settings to import definitions from a URL accessible over HTTPS when a RabbitMQ node starts, including TLS version specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled.\ndefinitions.import_backend = https\ndefinitions.https.url = https://raw.githubusercontent.com/rabbitmq/sample-configs/main/queues/5k-queues.json\n# client-side TLS options for definition import\ndefinitions.tls.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: Handling Publisher Confirms Asynchronously in PHP\nDESCRIPTION: This code shows how to set up asynchronous handling of publisher confirms. It registers callbacks for both confirmed and nack-ed messages, providing the most flexible approach to handling confirmations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-php.md#2025-04-09_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$channel = $connection->channel();\n$channel->confirm_select();\n\n$channel->set_ack_handler(\n    function (AMQPMessage $message){\n        // code when message is confirmed\n    }\n);\n\n$channel->set_nack_handler(\n    function (AMQPMessage $message){\n        // code when message is nack-ed\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Memory Limit in RabbitMQ\nDESCRIPTION: Examples of setting an absolute memory limit for RabbitMQ using different memory units in the configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1073741824\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1024MiB\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 4Gi\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1Ti\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ MQTT Plugin via Command Line\nDESCRIPTION: Command to enable the MQTT plugin on all RabbitMQ cluster nodes using rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_mqtt\n```\n\n----------------------------------------\n\nTITLE: Deleting a RabbitMQ User\nDESCRIPTION: This command deletes the user 'janeway' from the RabbitMQ broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user janeway\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to a Direct Exchange in PHP\nDESCRIPTION: This snippet shows how to publish a message to a direct exchange with a specific routing key (severity) in PHP using the php-amqplib library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-php.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$channel->exchange_declare('direct_logs', 'direct', false, false, false);\n$channel->basic_publish($msg, 'direct_logs', $severity);\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Components in JSX\nDESCRIPTION: React/JSX imports for tutorial components including help documentation, direct exchange diagrams, multiple bindings diagrams, and full routing diagrams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TutorialsHelp from '@site/src/components/Tutorials/TutorialsHelp.md';\nimport T4DiagramDirectX from '@site/src/components/Tutorials/T4DiagramDirectX.md';\nimport T4DiagramMultipleBindings from '@site/src/components/Tutorials/T4DiagramMultipleBindings.md';\nimport T4DiagramFull from '@site/src/components/Tutorials/T4DiagramFull.md';\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy for All Queues in RabbitMQ\nDESCRIPTION: This snippet shows how to create a policy that applies federation to all queues, using the previously defined 'blue' upstream. It uses the rabbitmqctl command to set a policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/blue-green-upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy --apply-to queues blue-green-migration \".*\" \\\n  '{\"federation-upstream\":\"blue\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Parameters in RabbitMQ (PowerShell)\nDESCRIPTION: Commands for setting, clearing, and listing virtual host-scoped parameters using rabbitmqctl in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# sets a runtime parameter in a virtual host\nrabbitmqctl.bat set_parameter [-p vhost] <component_name> <name> <value>\n\n# clears (unsets) a runtime parameter in a virtual host\nrabbitmqctl.bat clear_parameter [-p vhost] <component_name> <name>\n\n# lists runtime parameters in a virtual host\nrabbitmqctl.bat list_parameters [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Executing Basic RabbitMQ Node Health Check in Bash\nDESCRIPTION: This command performs a basic health check on a RabbitMQ node using the rabbitmq-diagnostics tool. It pings the node and returns a success code if the node is running and accessible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q ping\n# => Ping succeeded if exit code is 0\n```\n\n----------------------------------------\n\nTITLE: Executing Basic RabbitMQ Node Health Check in Bash\nDESCRIPTION: This command performs a basic health check on a RabbitMQ node using the rabbitmq-diagnostics tool. It pings the node and returns a success code if the node is running and accessible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q ping\n# => Ping succeeded if exit code is 0\n```\n\n----------------------------------------\n\nTITLE: Complete Log Message Consumer Implementation in Ruby\nDESCRIPTION: Full implementation of a log message consumer using RabbitMQ with the Bunny client. It creates a temporary queue, binds it to the 'logs' exchange, and processes incoming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nexchange = channel.fanout('logs')\nqueue = channel.queue('', exclusive: true)\n\nqueue.bind(exchange)\n\nputs ' [*] Waiting for logs. To exit press CTRL+C'\n\nbegin\n  queue.subscribe(block: true) do |_delivery_info, _properties, body|\n    puts \" [x] #{body}\"\n  end\nrescue Interrupt => _\n  channel.close\n  connection.close\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching an Event to ChangeState in C#\nDESCRIPTION: Shows how to attach an event listener to the ChangeState event of a RabbitMQ connection in C#. The listener receives information about state changes and potential failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_65\n\nLANGUAGE: csharp\nCODE:\n```\nconnection.ChangeState += ( \n     sender, // the sender instance ( in this case the connection)\n     fromState, // the previous state\n     toState, // the current (new) state\n     e // the cause of the failure (in case of failure)\n     ) =>\n{\n  \n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Discovery Retry Settings in RabbitMQ\nDESCRIPTION: Configuration for controlling the number of retries and delay between retry attempts for peer discovery operations in RabbitMQ clusters. These settings help handle temporary failures in discovery services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\n# These are the default values\n\n# Retry peer discovery operations up to ten times\ncluster_formation.discovery_retry_limit = 10\n\n# 500 milliseconds\ncluster_formation.discovery_retry_interval = 500\n```\n\n----------------------------------------\n\nTITLE: Delete Virtual Host via HTTP API\nDESCRIPTION: Example of using curl to delete a virtual host named 'vh1' through RabbitMQ's HTTP API\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X DELETE http://rabbitmq.local:15672/api/vhosts/vh1\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags in RabbitMQ\nDESCRIPTION: Shows how to list all feature flags in a RabbitMQ cluster using the rabbitmqctl command-line tool, displaying their names and current states.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags\n\n# => Listing feature flags ...\n# => name\tstate\n# => empty_basic_get_metric\tenabled\n# => implicit_default_bindings\tenabled\n# => quorum_queue\tenabled\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking in JavaScript\nDESCRIPTION: This code demonstrates how to create a consumer that reads messages from a RabbitMQ stream, tracks offsets, and stops when it encounters a marker message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst startFrom = rabbit.Offset.first();\nlet firstOffset = startFrom.value;\nlet lastOffset = startFrom.value;\nlet messageCount = 0;\nconst consumer = await client.declareConsumer({ stream: streamName, offset: startFrom }, (message) => {\n  messageCount++;\n  if (messageCount === 1) {\n    console.log(\"First message received\");\n    firstOffset = message.offset;\n  }\n  if (message.content.toString() === \"marker\") {\n    console.log(\"Marker found\");\n    lastOffset = message.offset;\n    console.log(`Done consuming, first offset was ${firstOffset}, last offset was ${lastOffset}`);\n  }\n});\n\nconsole.log(`Start consuming...`);\nawait sleep(2000);\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in RabbitMQ (Bash)\nDESCRIPTION: Grants a user access to a specific virtual host with configure, write, and read permissions based on regular expressions. This command is essential for setting up fine-grained access control for users in a RabbitMQ environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions -p my-vhost janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Restricting Specific RabbitMQ User to Localhost Connections\nDESCRIPTION: This configuration restricts a specific user named 'monitoring' to localhost-only connections. Other users' connection permissions are not affected by this setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nloopback_users.monitoring = true\n```\n\n----------------------------------------\n\nTITLE: Setting Message Prefetch Count in RabbitMQ with Swift\nDESCRIPTION: This code sets the prefetch count to 1, instructing RabbitMQ not to give more than one message to a worker at a time. This ensures fair workload distribution among multiple workers by only dispatching a new message after the previous one is acknowledged.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nch.basicQos(1, global: false)\n```\n\n----------------------------------------\n\nTITLE: Creating an AMQP 1.0 Publisher in C#\nDESCRIPTION: Sets up a Publisher to send messages to a specific exchange and routing key in C#.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// The publisher can use exchange (optionally with a key) or queue to publish messages. \nIPublisher publisher = await connection.PublisherBuilder().Exchange(\"foo\").Key(\"bar\")\n    .BuildAsync();\n\n// ...\n// close the publisher when it is no longer necessary \nawait publisher.CloseAsync();\npublisher.Dispose();\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for TLS 1.2 Connections with Restricted Ciphers\nDESCRIPTION: This configuration sets up RabbitMQ to accept TLSv1.2 connections with restricted cipher suites. It specifies the SSL port, certificate files, and enables peer verification without requiring client certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default  = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = false\n\nssl_options.honor_cipher_order   = true\nssl_options.honor_ecc_order      = true\n\n# These are highly recommended for TLSv1.2 but cannot be used\n```\n\n----------------------------------------\n\nTITLE: Downloading RabbitMQ-Web-Stomp Plugin Files\nDESCRIPTION: This shell command downloads the necessary Erlang plugin files for RabbitMQ-Web-Stomp. It retrieves the cowboy, sockjs, rabbitmq_web_stomp, and rabbitmq_web_stomp_examples plugin files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-05-14-introducing-rabbitmq-web-stomp/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwget \\\n  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/cowboy-0.5.0-rmq2.8.2-git4b93c2d.ez \\\n  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/sockjs-0.2.1-rmq2.8.2-gitfa1db96.ez \\\n  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/rabbitmq_web_stomp-2.8.2.ez \\\n  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/rabbitmq_web_stomp_examples-2.8.2.ez\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages in RabbitMQ\nDESCRIPTION: Shows how to publish messages with persistence enabled to ensure they survive broker restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nexchange.publish(message, persistent: true)\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Management Plugin\nDESCRIPTION: Command to enable the RabbitMQ management plugin and its dependencies while disabling all other plugins. This is used for configuring which plugins are active in a RabbitMQ installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins set rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Opening a Channel in C#\nDESCRIPTION: This snippet shows how to open a new channel (called 'model' in the .NET client) after establishing a connection using the RabbitMQ .NET client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\nvar conn = cf.newConnection();\n\n// the .NET client calls channels \"models\"\nvar ch = conn.CreateModel();\n\n// ... use the channel to declare topology, publish, consume\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Plugin Configuration\nDESCRIPTION: Basic configuration for using Kubernetes peer discovery backend\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n```\n\n----------------------------------------\n\nTITLE: Defining Message TTL Using Queue Arguments in C#\nDESCRIPTION: This C# example demonstrates how to create a queue with a message TTL of 60 seconds using the x-message-ttl argument. The queue is declared with the TTL parameter in the arguments dictionary.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar args = new Dictionary<string, object>();\nargs.Add(\"x-message-ttl\", 60000);\nmodel.QueueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Plugin Configuration\nDESCRIPTION: Basic configuration for using Kubernetes peer discovery backend\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutual TLS for RabbitMQ Cluster on Kubernetes\nDESCRIPTION: YAML configuration for a RabbitMQ cluster with mutual TLS enabled. It references both the server TLS secret and the CA secret for client certificate verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: mtls\nspec:\n  replicas: 1\n  tls:\n    secretName: tls-secret\n    caSecretName: ca-secret\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Function in Java\nDESCRIPTION: A recursive implementation of the Fibonacci sequence calculator. This function takes an integer parameter and returns the corresponding Fibonacci number. Note that this implementation is not efficient for large numbers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic int fib(int n) {\n    return n == 0 ? 0 : n == 1 ? 1 : (fib(n - 1) + fib(n - 2));\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Permissions in RabbitMQ Virtual Host (Bash)\nDESCRIPTION: This command lists all users who have been granted access to a specific virtual host and their permissions. It requires the virtual host name as a parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_permissions -p my-vhost\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions Across Multiple Virtual Hosts in RabbitMQ (Bash and PowerShell)\nDESCRIPTION: This snippet demonstrates how to grant permissions to a user across all virtual hosts in RabbitMQ using a script in both Bash and PowerShell. It uses rabbitmqctl to list all virtual hosts and then applies permissions for each.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Assumes a Linux shell.\n# Grants a user permissions to all virtual hosts.\nfor v in $(rabbitmqctl list_vhosts --silent); do rabbitmqctl set_permissions -p $v \"a-user\" \".*\" \".*\" \".*\"; done\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_vhosts --silent | %{ rabbitmqctl.bat set_permissions -p $_ 'a-user' '.*' '.*' '.*' }\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Feature Flags\nDESCRIPTION: Command to enable all feature flags on a running RabbitMQ node, which is important for feature access and future compatibility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/opt/homebrew/sbin/rabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Basic HTTPS Configuration for RabbitMQ Management Plugin\nDESCRIPTION: Configures the management plugin to use HTTPS with TLS certificates. Requires specifying the port, CA certificate, server certificate, and private key file paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n## This key must only be used if private key is password protected\n# management.ssl.password   = bunnies\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ Instance in Kubernetes\nDESCRIPTION: Commands to delete a RabbitMQ cluster instance using either the instance name or YAML configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete rabbitmqcluster INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f INSTANCE.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a Member from a Quorum Queue in RabbitMQ\nDESCRIPTION: CLI command to remove a member (replica) from a specified quorum queue in a given virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues delete_member [-p <vhost>] <queue-name> <node>\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Server with RabbitMQ in PHP\nDESCRIPTION: This code sets up an RPC server using RabbitMQ in PHP. It declares a queue, defines a callback function to process requests, and continuously listens for incoming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-php.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->queue_declare('rpc_queue', false, false, false, false);\n\nfunction fib($n)\n{\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return fib($n-1) + fib($n-2);\n}\n\necho \" [x] Awaiting RPC requests\\n\";\n$callback = function ($req) {\n    $n = intval($req->getBody());\n    echo ' [.] fib(', $n, \")\\n\";\n\n    $msg = new AMQPMessage(\n        (string) fib($n),\n        array('correlation_id' => $req->get('correlation_id'))\n    );\n\n    $req->getChannel()->basic_publish(\n        $msg,\n        '',\n        $req->get('reply_to')\n    );\n    $req->ack();\n};\n\n$channel->basic_qos(null, 1, false);\n$channel->basic_consume('rpc_queue', '', false, false, false, false, $callback);\n\ntry {\n    $channel->consume();\n} catch (\\Throwable $exception) {\n    echo $exception->getMessage();\n}\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Active Consumer on Queues in RabbitMQ with Java\nDESCRIPTION: This code snippet demonstrates how to enable the Single Active Consumer feature when declaring a queue in RabbitMQ using the Java client. The x-single-active-consumer argument is set to true in the queue declaration arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumers.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = ...;\nMap<String, Object> arguments = new HashMap<String, Object>();\narguments.put(\"x-single-active-consumer\", true);\nch.queueDeclare(\"my-queue\", false, false, false, arguments);\n```\n\n----------------------------------------\n\nTITLE: Minimal OAuth 2.0 Configuration\nDESCRIPTION: Essential configuration settings for OAuth 2.0 authentication including resource server ID and issuer URL\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Closing a Consumer Gracefully with RabbitMQ in Java\nDESCRIPTION: Shows how to properly close a consumer in Java by pausing message delivery, ensuring all messages are settled, and then closing the consumer to avoid duplicate message processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n// pause the delivery of messages\nconsumer.pause();\n// ensure the number of unsettled messages reaches 0\nlong unsettledMessageCount = consumer.unsettledMessageCount();\n// close the consumer\nconsumer.close();\n```\n\n----------------------------------------\n\nTITLE: Displaying ssl Property in RabbitMQ\nDESCRIPTION: A boolean property indicating whether the RabbitMQ connection is secured with SSL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\nssl\n```\n\n----------------------------------------\n\nTITLE: Setting Prefetch Count for Flow Control in Erlang\nDESCRIPTION: Demonstrates how to set the prefetch buffer size for a channel to implement flow control. This limits how many unacknowledged messages the server will deliver to consumers on a channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_24\n\nLANGUAGE: erlang\nCODE:\n```\namqp_channel:call(Channel, #'basic.qos'{prefetch_count = Prefetch})\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Queue in Ruby with Bunny\nDESCRIPTION: Creates a non-durable, exclusive queue with a server-generated name. The queue will be automatically deleted when the connection closes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nqueue = channel.queue('', exclusive: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Auth in Erlang Terms\nDESCRIPTION: Erlang configuration to enable HTTP Basic Authentication for Web STOMP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_web_stomp,\n      [{use_http_auth, true}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Tools for Server Diagnostics\nDESCRIPTION: A set of diagnostic commands using RabbitMQ CLI tools to check node status, connectivity, cluster status, and effective configuration. These commands require administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Stream Consumer with Offset Tracking\nDESCRIPTION: Shell command to compile and execute the OffsetTrackingReceive Java class, which demonstrates the offset tracking functionality in RabbitMQ Streams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java '-Dexec.mainClass=OffsetTrackingReceive'\n```\n\n----------------------------------------\n\nTITLE: Configuring HashiCorp Vault for RabbitMQ Admin Credentials\nDESCRIPTION: YAML configuration snippet to configure a RabbitMQ cluster to read admin credentials from HashiCorp Vault instead of generating them in Kubernetes secrets. This supports credential rotation without RabbitMQ restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  secretBackend:\n    vault:\n      role: rabbitmq\n      # Optionally, set Vault annotations as listed in\n      # https://www.vaultproject.io/docs/platform/k8s/injector/annotations\n      annotations:\n        vault.hashicorp.com/template-static-secret-render-interval: \"15s\"\n      defaultUserPath: secret/data/rabbitmq/config\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Cipher Suites in RabbitMQ (Classic Config Format)\nDESCRIPTION: This snippet shows how to configure TLS cipher suites and other SSL options in RabbitMQ using the classic configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_34\n\nLANGUAGE: erlang\nCODE:\n```\n%% list allowed ciphers\n[\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                          {certfile,  \"/path/to/server_certificate.pem\"},\n                          {keyfile,   \"/path/to/server_key.pem\"},\n                          {versions, ['tlsv1.2', 'tlsv1.1']},\n                          %% This list is just an example!\n                          %% Not all cipher suites are available on all machines.\n                          %% Cipher suite order is important: preferred suites\n                          %% should be listed first.\n                          %% Different suites have different security and CPU load characteristics.\n                          {ciphers,  [\n                            \"ECDHE-ECDSA-AES256-GCM-SHA384\",\n                            \"ECDHE-RSA-AES256-GCM-SHA384\",\n                            \"ECDH-ECDSA-AES256-GCM-SHA384\",\n                            \"ECDH-RSA-AES256-GCM-SHA384\",\n                            \"DHE-RSA-AES256-GCM-SHA384\",\n                            \"DHE-DSS-AES256-GCM-SHA384\",\n                            \"ECDHE-ECDSA-AES128-GCM-SHA256\",\n                            \"ECDHE-RSA-AES128-GCM-SHA256\",\n                            \"ECDH-ECDSA-AES128-GCM-SHA256\",\n                            \"ECDH-RSA-AES128-GCM-SHA256\",\n                            \"DHE-RSA-AES128-GCM-SHA256\",\n                            \"DHE-DSS-AES128-GCM-SHA256\"\n                            ]}\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameter in RabbitMQ (Bash)\nDESCRIPTION: Sets a global runtime parameter 'mqtt_default_vhosts' with a JSON value. Global parameters are not tied to a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_global_parameter mqtt_default_vhosts '{\"O=client,CN=guest\":\"/\"}'\n```\n\n----------------------------------------\n\nTITLE: Requeueing Messages with Custom Annotations in AMQP 1.0\nDESCRIPTION: Demonstrates how to requeue a message with custom annotations using the RabbitMQ AMQP 1.0 Java Client. The code shows setting specific message annotations like requeue reason, time, and consumer identity before requeueing the message at the head of a quorum queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-10-11-modified-outcome/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = connection.consumerBuilder()\n    .queue(ordersQueue)\n    .messageHandler((context, message) -> {\n        Map<String, Object> annotations = new HashMap<>();\n        annotations.put(\"x-opt-requeue-reason\", \"external_service_unavailable\");\n        annotations.put(\"x-opt-requeue-time\", System.currentTimeMillis());\n        annotations.put(\"x-opt-requeued-by\", \"consumer_1\");\n        context.requeue(annotations);\n    }).build();\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Connection Failures in RabbitMQ Client\nDESCRIPTION: Shows how to handle initial connection failures to RabbitMQ, which aren't automatically recovered. This example implements basic retry logic with a sleep interval between attempts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// configure various connection settings\n\ntry {\n  Connection conn = factory.newConnection();\n} catch (java.net.ConnectException e) {\n  Thread.sleep(5000);\n  // apply retry logic\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages to RabbitMQ\nDESCRIPTION: Code to mark messages as persistent so they survive RabbitMQ restarts by setting DeliveryMode to amqp.Persistent.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nerr = ch.PublishWithContext(ctx,\n  \"\",           // exchange\n  q.Name,       // routing key\n  false,        // mandatory\n  false,\n  amqp.Publishing {\n    DeliveryMode: amqp.Persistent,\n    ContentType:  \"text/plain\",\n    Body:         []byte(body),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Credentials Provider in RabbitMQ Java\nDESCRIPTION: Sets up OAuth2 authentication using client credentials grant flow with example configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.impl.OAuth2ClientCredentialsGrantCredentialsProvider.\n        OAuth2ClientCredentialsGrantCredentialsProviderBuilder;\n...\nCredentialsProvider credentialsProvider =\n  new OAuth2ClientCredentialsGrantCredentialsProviderBuilder()\n    .tokenEndpointUri(\"http://localhost:8080/uaa/oauth/token/\")\n    .clientId(\"rabbit_client\").clientSecret(\"rabbit_secret\")\n    .grantType(\"password\")\n    .parameter(\"username\", \"rabbit_super\")\n    .parameter(\"password\", \"rabbit_super\")\n    .build();\n\nconnectionFactory.setCredentialsProvider(credentialsProvider);\n```\n\n----------------------------------------\n\nTITLE: Filtering Queues by Virtual Host\nDESCRIPTION: API endpoint example demonstrating queue filtering for a specific virtual host with pagination parameters and name filtering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_41\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:15672/api/queues/my-vhost?page=1&page_size=100&name=&use_regex=false&pagination=true\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Binding in RabbitMQ with Python\nDESCRIPTION: Example of creating a basic binding between a queue and an exchange without a routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nchannel.queue_bind(exchange=exchange_name,\n                   queue=queue_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Signing Keys in RabbitMQ (INI)\nDESCRIPTION: Example of statically configuring OAuth 2.0 signing keys in RabbitMQ using a PEM file. This is typically used in edge cases where automatic key download is not possible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.signing_keys.a-key-ID = /path-to-signing-key-pem-file\n```\n\n----------------------------------------\n\nTITLE: Discovering Peers in RabbitMQ Cluster (Bash)\nDESCRIPTION: Runs a peer discovery on the target node and prints the discovered nodes. This command is useful for verifying cluster formation and node discovery in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics discover_peers --timeout 60\n```\n\n----------------------------------------\n\nTITLE: TLS Versions Check\nDESCRIPTION: Command to list supported TLS versions on the target node\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics tls_versions -q\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Peer Discovery Backend (INI)\nDESCRIPTION: Configuration examples showing how to specify the peer discovery mechanism using either the shortened name or full module name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# The backend can also be specified using its module name. Note that\n# module names do not necessarily match plugin names exactly.\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n```\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.registration.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Plugin Port in RabbitMQ\nDESCRIPTION: Sets the TCP port for the RabbitMQ management plugin HTTP API. The default port is 15672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.port = 15672\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Tools for Server Diagnostics\nDESCRIPTION: A set of diagnostic commands using RabbitMQ CLI tools to check node status, connectivity, cluster status, and effective configuration. These commands require administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages to RabbitMQ in Swift\nDESCRIPTION: This code shows how to publish a message with the persistent flag set to true, which tells RabbitMQ to save the message to disk, providing better durability guarantees in case of server restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nch.defaultExchange().publish(msgData, routingKey: q.name, persistent: true)\n```\n\n----------------------------------------\n\nTITLE: Setting Independent Prefetch Limits for Multiple Consumers in Java\nDESCRIPTION: This code shows how to set up two consumers on the same channel, each with an independent prefetch limit of 10 unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-prefetch.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer1 = ...;\nConsumer consumer2 = ...;\nchannel.basicQos(10); // Per consumer limit\nchannel.basicConsume(\"my-queue1\", false, consumer1);\nchannel.basicConsume(\"my-queue2\", false, consumer2);\n```\n\n----------------------------------------\n\nTITLE: Establishing a Connection to RabbitMQ\nDESCRIPTION: Code to establish a connection to a RabbitMQ server running on localhost and create a channel for communication. This is the first step required for any RabbitMQ operation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web STOMP Plugin with rabbitmq-plugins\nDESCRIPTION: Command to enable the rabbitmq_web_stomp plugin using the rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_stomp\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Active Consumer on Queues in RabbitMQ with Java\nDESCRIPTION: This code snippet demonstrates how to enable the Single Active Consumer feature when declaring a queue in RabbitMQ using the Java client. The x-single-active-consumer argument is set to true in the queue declaration arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumers.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = ...;\nMap<String, Object> arguments = new HashMap<String, Object>();\narguments.put(\"x-single-active-consumer\", true);\nch.queueDeclare(\"my-queue\", false, false, false, arguments);\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web STOMP Plugin with rabbitmq-plugins\nDESCRIPTION: Command to enable the rabbitmq_web_stomp plugin using the rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_stomp\n```\n\n----------------------------------------\n\nTITLE: Checking Alarms on a Specific RabbitMQ Node\nDESCRIPTION: Example showing how to specify a target node when running the rabbitmq-diagnostics check_alarms command. This demonstrates using the -n option with a node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -n rabbit@warp10 check_alarms\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Memory Threshold in RabbitMQ\nDESCRIPTION: Example of setting a relative memory threshold for RabbitMQ in the configuration file. This sets the threshold to 60% of available RAM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.relative = 0.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Stream Consumer with Single Active Consumer in Java\nDESCRIPTION: Shows how to create a consumer for a Super Stream with single active consumer enabled for coordinated consumption across partitions. Includes message handler setup and consumer naming.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-13-rabbitmq-3-11-feature-preview-super-streams/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = environment.consumerBuilder()\n    .superStream(\"invoices\") // set the super stream name \n    .name(\"application-1\") // set the consumer name (mandatory) \n    .singleActiveConsumer() // enable single active consumer\n    .messageHandler((context, message) -> {\n        // message processing\n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Publishing to a Named Exchange in Swift\nDESCRIPTION: Publishes a message to the 'logs' fanout exchange using the RabbitMQ Swift client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-swift.md#2025-04-09_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nvar x = ch.fanout(\"logs\")\nx.publish(msg.data(using: .utf8))\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Schema Information\nDESCRIPTION: Command to list schema database table names and their active replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl schema_info name active_replicas\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Schema Information\nDESCRIPTION: Command to list schema database table names and their active replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl schema_info name active_replicas\n```\n\n----------------------------------------\n\nTITLE: Creating a Passwordless User in RabbitMQ\nDESCRIPTION: Bash commands to create a passwordless user using rabbitmqctl. This involves creating a user with a temporary password and then clearing it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/passwords.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user passwordless-user \"pa$$wordless\"\nrabbitmqctl clear_password passwordless-user\n```\n\n----------------------------------------\n\nTITLE: Stopping All OAuth 2.0 Test Applications\nDESCRIPTION: This command stops all running OAuth 2.0 test applications for RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-all-apps\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Schema Information\nDESCRIPTION: Command to list schema database table names and their active replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl schema_info name active_replicas\n```\n\n----------------------------------------\n\nTITLE: Listing Permissions in RabbitMQ Virtual Host (Bash)\nDESCRIPTION: Displays all users who have been granted access to a specific virtual host and their associated permissions. This command is useful for auditing and managing access control within a RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_permissions -p my-vhost\n```\n\n----------------------------------------\n\nTITLE: JavaScript MQTT WebSocket Client Initialization\nDESCRIPTION: JavaScript code that initializes the Paho MQTT client and sets up event handlers for connection loss and message reception.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\\nvar wsbroker = location.hostname;  // mqtt websocket enabled broker\\nvar wsport = 15675; // port for above\\nvar client = new Paho.MQTT.Client(wsbroker, wsport, \"/ws\",\\n    \"myclientid_\" + parseInt(Math.random() * 100, 10));\\nclient.onConnectionLost = function (responseObject) {\\n    debug(\"CONNECTION LOST - \" + responseObject.errorMessage);\\n};\\nclient.onMessageArrived = function (message) {\\n    debug(\"RECEIVE ON \" + message.destinationName + \" PAYLOAD \" + message.payloadString);\\n    print_first(message.payloadString);\\n};\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Monitoring User Access in Bash\nDESCRIPTION: Commands to create a monitoring user with read-only access in RabbitMQ using bash. Includes creating user, setting monitoring tag, and configuring empty permissions for security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# See the Access Control guide to learn about user management.\n#\n# Password is provided as a command line argument.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\nrabbitmqctl add_user 'monitoring' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n\n# tag user 'monitoring' with a tag of the same name\nrabbitmqctl set_user_tags 'monitoring' 'monitoring'\n\n# grant the user empty permissions\nrabbitmqctl set_permissions --vhost 'vhost-name' 'monitoring' '^$' '^$' '^$'\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Message Sender with Direct Exchange and Routing Keys\nDESCRIPTION: Implementation of a message sender that publishes messages to a direct exchange with different routing keys. The sender rotates through 'orange', 'black', and 'green' routing keys to demonstrate message routing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut4;\n\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Tut4Sender {\n\n\t@Autowired\n\tprivate RabbitTemplate template;\n\n\t@Autowired\n\tprivate DirectExchange direct;\n\n\tAtomicInteger index = new AtomicInteger(0);\n\n\tAtomicInteger count = new AtomicInteger(0);\n\n\tprivate final String[] keys = {\"orange\", \"black\", \"green\"};\n\n\t@Scheduled(fixedDelay = 1000, initialDelay = 500)\n\tpublic void send() {\n\t\tStringBuilder builder = new StringBuilder(\"Hello to \");\n\t\tif (this.index.incrementAndGet() == 3) {\n\t\t\tthis.index.set(0);\n\t\t}\n\t\tString key = keys[this.index.get()];\n\t\tbuilder.append(key).append(' ');\n\t\tbuilder.append(this.count.get());\n\t\tString message = builder.toString();\n\t\ttemplate.convertAndSend(direct.getName(), key, message);\n\t\tSystem.out.println(\" [x] Sent '\" + message + \"'\");\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using the rabbitmqctl wait Command\nDESCRIPTION: Example of the rabbitmqctl wait command which waits for the RabbitMQ application to start on the target node. This command can only be run locally on the same host as the target node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl wait\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener Port in RabbitMQ using ini-like Format\nDESCRIPTION: This snippet demonstrates how to change the default TCP listener port for AMQP 0-9-1 and AMQP 1.0 client connections from 5672 to 5673 using the modern ini-like format in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# this is a comment\nlisteners.tcp.default = 5673\n```\n\n----------------------------------------\n\nTITLE: Declaring a Consumer for RabbitMQ Stream\nDESCRIPTION: Code to create a consumer that starts from the first available message in the stream and processes incoming messages using a callback function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.declareConsumer({ stream: streamName, offset: rabbit.Offset.first() }, (message) => {\n        console.log(`Received message ${message.content.toString()}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Queues with RabbitMQ API using cURL\nDESCRIPTION: Example of how to rebalance all queues across all vhosts using the RabbitMQ Management API. This asynchronous operation requires authentication and uses a POST request to the rebalance endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl -4u 'guest:guest' -XPOST localhost:15672/api/rebalance/queues/\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for TLS 1.3 Connections\nDESCRIPTION: This configuration sets up RabbitMQ to accept TLSv1.3 connections. It specifies the SSL port, certificate files, and cipher suites. The configuration also enables peer verification and enforces client certificate presentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.3\n\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n\nssl_options.honor_cipher_order   = true\nssl_options.honor_ecc_order      = true\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth 2.0 and Forward Proxy Configuration\nDESCRIPTION: Bash commands to set up environment variables for the Tanzu RabbitMQ image and start RabbitMQ with forward proxy and Keycloak OAuth provider settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-forward-proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport IMAGE=<Tanzu RabbitMQ OCI image name>\nexport IMAGE_TAG=<Tanzu RabbitMQ OCI image tag>\nMODE=forward-proxy OAUTH_PROVIDER=keycloak make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Message Sender\nDESCRIPTION: Message sender class that publishes messages to the topic exchange using different routing keys. Includes scheduled sending of messages with various patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-spring-amqp.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut5;\n\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Tut5Sender {\n\n\t@Autowired\n\tprivate RabbitTemplate template;\n\n\t@Autowired\n\tprivate TopicExchange topic;\n\n\tAtomicInteger index = new AtomicInteger(0);\n\n\tAtomicInteger count = new AtomicInteger(0);\n\n\tprivate final String[] keys = {\"quick.orange.rabbit\", \"lazy.orange.elephant\", \"quick.orange.fox\",\n\t\t\t\"lazy.brown.fox\", \"lazy.pink.rabbit\", \"quick.brown.fox\"};\n\n\t@Scheduled(fixedDelay = 1000, initialDelay = 500)\n\tpublic void send() {\n\t\tStringBuilder builder = new StringBuilder(\"Hello to \");\n\t\tif (this.index.incrementAndGet() == keys.length) {\n\t\t\tthis.index.set(0);\n\t\t}\n\t\tString key = keys[this.index.get()];\n\t\tbuilder.append(key).append(' ');\n\t\tbuilder.append(this.count.incrementAndGet());\n\t\tString message = builder.toString();\n\t\ttemplate.convertAndSend(topic.getName(), key, message);\n\t\tSystem.out.println(\" [x] Sent '\" + message + \"'\");\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Server\nDESCRIPTION: Command to install the RabbitMQ server package with automatic dependency resolution and missing package handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Setting Independent Consumer Prefetch Limits in Java\nDESCRIPTION: This snippet demonstrates how to set independent prefetch limits for two consumers on the same channel, each receiving a maximum of 10 unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumer-prefetch.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer1 = ...;\nConsumer consumer2 = ...;\nchannel.basicQos(10); // Per consumer limit\nchannel.basicConsume(\"my-queue1\", false, consumer1);\nchannel.basicConsume(\"my-queue2\", false, consumer2);\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Length Limit in Java\nDESCRIPTION: Java code example showing how to declare a queue with a maximum length of 10 messages using queue arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-max-length\", 10);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-diagnostics to Check Configuration File Location\nDESCRIPTION: This snippet demonstrates how to use the rabbitmq-diagnostics CLI tool to check the configuration file location for a local or remote RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# displays key\nrabbitmq-diagnostics status\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status -n [node name]\n```\n\n----------------------------------------\n\nTITLE: JavaScript MQTT Connection Establishment\nDESCRIPTION: JavaScript code showing how to establish an MQTT connection with the broker, including connection options, SSL detection, and subscription setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\\n\\nvar options = {\\n    timeout: 3,\\n    keepAliveInterval: 30,\\n    onSuccess: function () {\\n        debug(\"CONNECTION SUCCESS\");\\n        client.subscribe('/topic/test', {qos: 1});\\n    },\\n    onFailure: function (message) {\\n        debug(\"CONNECTION FAILURE - \" + message.errorMessage);\\n    }\\n};\\nif (location.protocol == \"https:\") {\\n    options.useSSL = true;\\n}\\ndebug(\"CONNECT TO \" + wsbroker + \":\" + wsport);\\nclient.connect(options);\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Client ID Extraction from Certificates in RabbitMQ\nDESCRIPTION: This configuration snippet demonstrates how to extract the username from a certificate's distinguished name and the client_id from the first Subject Alternative Name (SAN) of type URI in RabbitMQ's MQTT plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nssl_cert_login_from = distinguished_name\nmqtt.ssl_cert_client_id_from = subject_alternative_name\nmqtt.ssl_cert_login_san_type = uri\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul ACL Token for RabbitMQ Peer Discovery\nDESCRIPTION: Sets the Consul ACL token for authentication. This token is required when Consul ACLs are enabled to authorize access to service registration and discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\ncluster_formation.consul.acl_token = acl-token-value\n```\n\n----------------------------------------\n\nTITLE: Disabling Topology Recovery in RabbitMQ Client\nDESCRIPTION: Demonstrates how to disable topology recovery while keeping automatic connection recovery enabled. Topology recovery involves the recovery of exchanges, queues, bindings, and consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n\nConnection conn = factory.newConnection();\n// enable automatic recovery (e.g. Java client prior 4.0.0)\nfactory.setAutomaticRecoveryEnabled(true);\n// disable topology recovery\nfactory.setTopologyRecoveryEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Enabling Publisher Confirms on a Channel in PHP\nDESCRIPTION: This snippet demonstrates how to enable publisher confirms on a RabbitMQ channel using the php-amqplib library. It should be called once per channel where confirms are needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-php.md#2025-04-09_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$channel = $connection->channel();\n$channel->confirm_select();\n```\n\n----------------------------------------\n\nTITLE: Starting Independent RabbitMQ Nodes for Cluster Setup\nDESCRIPTION: Commands for starting RabbitMQ in detached mode on three separate nodes (rabbit1, rabbit2, rabbit3) as the first step in manual cluster configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmq-server -detached\n# on rabbit2\nrabbitmq-server -detached\n# on rabbit3\nrabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Backend Caching in RabbitMQ\nDESCRIPTION: Configuration example showing how to set up the cache plugin to cache requests to the HTTP authentication backend. The auth_backends.1 parameter sets cache as the primary backend, while auth_cache.cached_backend specifies HTTP as the actual backend to cache.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-cache-backend.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = cache\nauth_cache.cached_backend = http\n\nauth_http.http_method = post\n```\n\n----------------------------------------\n\nTITLE: Equivalent classic format configuration for changing listener port\nDESCRIPTION: The same port configuration shown in the classic Erlang terms format used in advanced.config, demonstrating the difference in syntax and verbosity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n%% this is a comment\n[\n  {rabbit, [\n      {tcp_listeners, [5673]}\n    ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in OpenSSL Format with RabbitMQ Diagnostics\nDESCRIPTION: This command lists cipher suites supported by the Erlang runtime of a running RabbitMQ node in OpenSSL format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl -q\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with TTL Using Java Client\nDESCRIPTION: Java code example showing how to declare a queue with a 30-minute expiration time using x-arguments during queue declaration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-expires\", 1800000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Adding Third Node to RabbitMQ Cluster\nDESCRIPTION: Commands to add rabbit3 node to the existing cluster by joining through rabbit2, demonstrating that any online node can be used as an entry point.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit3\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit3 ...done.\n\n# on rabbit3\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit3 ...\n\nrabbitmqctl join_cluster rabbit@rabbit2\n# => Clustering node rabbit@rabbit3 with rabbit@rabbit2 ...done.\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit3 ...done.\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Verification in RabbitMQ (INI Format)\nDESCRIPTION: Configuration example for enabling TLS peer verification on RabbitMQ server using the modern INI-style format. Sets up SSL listeners, certificate paths, and peer verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile = /path/to/server_certificate.pem\nssl_options.keyfile = /path/to/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread-Safe Channel Access in C#\nDESCRIPTION: This snippet demonstrates how to implement mutual exclusion when sharing an IChannel instance between multiple threads using a semaphore.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nIChannel ch = RetrieveSomeSharedIChannelInstance();\nawait _channelSemaphore.WaitAsync();\ntry\n{\n  ch.BasicPublishAsync(...);\n}\nfinally\n{\n  _channelSemaphore.Release();\n}\n```\n\n----------------------------------------\n\nTITLE: Using on-publish Mode for AMQP 0-9-1 Shovel Acknowledgments\nDESCRIPTION: The on-publish acknowledgment mode acknowledges messages to the source broker immediately after publishing to the destination, without waiting for confirmation. This offers better throughput but may lose messages during network or broker failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\non-publish\n```\n\n----------------------------------------\n\nTITLE: Creating Publishers with Different Targets in Python\nDESCRIPTION: Examples of creating publishers in Python with different target types using the AddressHelper utility class: publishing to an exchange with a routing key, to an exchange without a routing key, and directly to a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# publish to an exchange with a routing key\n# You can use the AddressHelper utility class to get the addr from the exchange name and the key\nexchange_address = AddressHelper.exchange_address(\"foo\", \"bar\")\npublisher = connection.publisher(addr)\n\n\n# publish to an exchange without a routing key\nexchange_address = AddressHelper.exchange_address(\"foo\")\npublisher = connection.publisher(addr)\n\n# publish to a queue\nqueue_address = AddressHelper.queue_address(\"some-queue\")\npublisher = connection.publisher(queue_address)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Message Producer in Swift\nDESCRIPTION: Creates a connection, declares a fanout exchange, and publishes a log message using the RabbitMQ Swift client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-swift.md#2025-04-09_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\nconn.start()\nlet ch = conn.createChannel()\nlet x = ch.fanout(\"logs\")\nlet msg = \"Hello World!\"\nx.publish(msg.data(using: .utf8))\nprint(\"Sent \\(msg)\")\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listeners for Localhost Only\nDESCRIPTION: Configuration that restricts the stream protocol to only listen on localhost for both IPv4 and IPv6 addresses, improving security by preventing external connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n```\n\n----------------------------------------\n\nTITLE: Publishing to a Named Fanout Exchange in Ruby\nDESCRIPTION: Shows how to publish a message to a specific named fanout exchange instead of the default exchange. This is used in the publish/subscribe pattern implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexchange = channel.fanout('logs')\nexchange.publish(message)\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions with Formatting using jq\nDESCRIPTION: Command to export RabbitMQ definitions via HTTP API and format them using jq for better readability. This requires the management plugin and the jq tool to be installed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\n#\n# jq is a 3rd party tool that must be available in PATH\ncurl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions | jq\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ RPC Server Implementation\nDESCRIPTION: Server implementation that listens for RPC requests on a queue, processes Fibonacci calculations, and returns results. Uses Bunny gem for RabbitMQ communication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nclass FibonacciServer\n  def initialize\n    @connection = Bunny.new\n    @connection.start\n    @channel = @connection.create_channel\n  end\n\n  def start(queue_name)\n    @queue = channel.queue(queue_name)\n    @exchange = channel.default_exchange\n    subscribe_to_queue\n  end\n\n  def stop\n    channel.close\n    connection.close\n  end\n\n  def loop_forever\n    # This loop only exists to keep the main thread\n    # alive. Many real world apps won't need this.\n    loop { sleep 5 }\n  end\n\n  private\n\n  attr_reader :channel, :exchange, :queue, :connection\n\n  def subscribe_to_queue\n    queue.subscribe do |_delivery_info, properties, payload|\n      result = fibonacci(payload.to_i)\n\n      exchange.publish(\n        result.to_s,\n        routing_key: properties.reply_to,\n        correlation_id: properties.correlation_id\n      )\n    end\n  end\n\n  def fibonacci(value)\n    return value if value.zero? || value == 1\n\n    fibonacci(value - 1) + fibonacci(value - 2)\n  end\nend\n\nbegin\n  server = FibonacciServer.new\n\n  puts ' [x] Awaiting RPC requests'\n  server.start('rpc_queue')\n  server.loop_forever\nrescue Interrupt => _\n  server.stop\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Queues with RabbitMQ CLI v2\nDESCRIPTION: This command demonstrates how to declare a queue using the rabbitmqadmin v2 CLI tool, showcasing the new --snake-case format for command arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# Note: --auto-delete\nrabbitmqadmin --vhost \"vh-2\" declare queue --name \"qq.1\" --type \"quorum\" --durable true --auto-delete false\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Diagnostics CLI Tool\nDESCRIPTION: Basic syntax for running the rabbitmq-diagnostics command with options and commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics [-q] [-s] [-l] [-n node] [-t timeout] command [command_options]\n```\n\n----------------------------------------\n\nTITLE: Enabling All RabbitMQ Feature Flags in Bash\nDESCRIPTION: Command to enable all feature flags in RabbitMQ using the rabbitmqctl utility. This is recommended before upgrading to ensure compatibility with newer versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Setting Delivery Limit for Quorum Queues via HTTP API\nDESCRIPTION: HTTP API request to set a policy that configures a delivery limit of 50 for quorum queues whose names begin with 'qq'. Uses a PUT request to the policies endpoint with the appropriate JSON payload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/qq-overrides\n    {\"pattern\": \"^qq\\.\",\n     \"definition\": {\"delivery-limit\": 50},\n     \"priority\": 1,\n    \"apply-to\": \"quorum_queues\"}\n```\n\n----------------------------------------\n\nTITLE: Equivalent classic format configuration for changing listener port\nDESCRIPTION: The same port configuration shown in the classic Erlang terms format used in advanced.config, demonstrating the difference in syntax and verbosity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n%% this is a comment\n[\n  {rabbit, [\n      {tcp_listeners, [5673]}\n    ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocked Connection Listener in Java\nDESCRIPTION: Example of adding a BlockedListener to handle connection blocked/unblocked notifications in Java. Uses ConnectionFactory to create a connection and implements the BlockedListener interface with handlers for both blocked and unblocked states.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/connection-blocked.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nConnection connection = factory.newConnection();\nconnection.addBlockedListener(new BlockedListener() {\n    public void handleBlocked(String reason) throws IOException {\n        // Connection is now blocked\n    }\n\n    public void handleUnblocked() throws IOException {\n        // Connection is now unblocked\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Joining RabbitMQ Cluster as RAM Node\nDESCRIPTION: Command to join a RabbitMQ cluster as a RAM node. The node will join the cluster that 'hare@elena' is part of.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl join_cluster hare@elena --ram\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to a Named Exchange in Elixir\nDESCRIPTION: Sends a message to the 'logs' exchange with an empty routing key. In a fanout exchange, the routing key is ignored as messages are broadcast to all bound queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Basic.publish(channel, \"logs\", \"\", message)\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with HTTP Fallback in RabbitMQ\nDESCRIPTION: Configuration for using LDAP as the primary authentication backend with fallback to the HTTP backend. Includes HTTP backend path configuration for various authentication endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1 = ldap\n# uses module name instead of a short alias, \"http\"\nauth_backends.2 = rabbit_auth_backend_http\n\n# See HTTP backend docs for details\nauth_http.user_path = http://my-authenticator-app/auth/user\nauth_http.vhost_path = http://my-authenticator-app/auth/vhost\nauth_http.resource_path = http://my-authenticator-app/auth/resource\nauth_http.topic_path = http://my-authenticator-app/auth/topic\n```\n\n----------------------------------------\n\nTITLE: Declaring Queues with RabbitMQ CLI v2\nDESCRIPTION: This command demonstrates how to declare a queue using the rabbitmqadmin v2 CLI tool, showcasing the new --snake-case format for command arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# Note: --auto-delete\nrabbitmqadmin --vhost \"vh-2\" declare queue --name \"qq.1\" --type \"quorum\" --durable true --auto-delete false\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Limits in RabbitMQ\nDESCRIPTION: Examples of setting various virtual host limits including max connections and queues for 'qa_env' vhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": 64}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-queues\": 256}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": -1}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Removing Certificate from Windows Trust Store\nDESCRIPTION: PowerShell command to remove a certificate from the Windows Root certificate store using its unique hash. This allows cleanup of certificates that are no longer needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\ncertmgr -del -c -sha1 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E -s Root\n\n# … snip …\n\nCertificate removed from store.\n```\n\n----------------------------------------\n\nTITLE: Content Security Policy Configuration\nDESCRIPTION: Sets CSP header values for HTTP API responses\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = default-src https://rabbitmq.eng.example.local\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = default-src 'self' *.eng.example.local\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = frame-ancestors 'none'\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ 4.x with Management Plugin in Docker\nDESCRIPTION: This command runs the latest RabbitMQ 4.x version with the management plugin enabled in a Docker container. It exposes ports 5672 for AMQP and 15672 for the management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/download.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4-management\n```\n\n----------------------------------------\n\nTITLE: Setting Delivery Limit for Quorum Queues via HTTP API\nDESCRIPTION: HTTP API request to set a policy that configures a delivery limit of 50 for quorum queues whose names begin with 'qq'. Uses a PUT request to the policies endpoint with the appropriate JSON payload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/qq-overrides\n    {\"pattern\": \"^qq\\.\",\n     \"definition\": {\"delivery-limit\": 50},\n     \"priority\": 1,\n    \"apply-to\": \"quorum_queues\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Verification in RabbitMQ (INI Format)\nDESCRIPTION: Configuration example for enabling TLS peer verification on RabbitMQ server using the modern INI-style format. Sets up SSL listeners, certificate paths, and peer verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile = /path/to/server_certificate.pem\nssl_options.keyfile = /path/to/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Priority in RabbitMQ using Java\nDESCRIPTION: This code snippet demonstrates how to set the priority of a consumer when subscribing to a queue in RabbitMQ using Java. It creates a new consumer with a priority of 10 using the 'x-priority' argument in the basicConsume method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-priority.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-priority\", 10);\nchannel.basicConsume(\"my-queue\", false, args, consumer);\n```\n\n----------------------------------------\n\nTITLE: Basic Help Command in RabbitMQ CLI\nDESCRIPTION: Shows available command groups in rabbitmqadmin\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin help\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Limits for a User in RabbitMQ\nDESCRIPTION: Command to limit the maximum number of channels a user 'limited_user' can open on a connection to 16. This helps prevent a single user from consuming too many server resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-channels\": 16}'\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple RabbitMQ Plugins\nDESCRIPTION: Enables the shovel and management plugins along with their dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_shovel rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Processing Tasks from RabbitMQ Queue in Ruby\nDESCRIPTION: This code snippet shows how to consume messages from a RabbitMQ queue and process them. It simulates work by sleeping for a duration based on the number of dots in the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nqueue.subscribe(block: true) do |delivery_info, _properties, body|\n  puts \" [x] Received #{body}\"\n  # imitate some work\n  sleep body.count('.').to_i\n  puts ' [x] Done'\nend\n```\n\n----------------------------------------\n\nTITLE: Getting the Management Object in Python\nDESCRIPTION: Illustrates how to obtain the management object from a RabbitMQ connection using the Python client library. This object is used for managing RabbitMQ topology.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nmanagement = connection.management()\n # ...\n # close the management instance when it is no longer needed\nmanagement.close()\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Admin Username from Kubernetes Secret\nDESCRIPTION: Command to retrieve and decode the base64-encoded username for the RabbitMQ admin user from the default-user Kubernetes secret created by the RabbitMQ Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n NAMESPACE get secret INSTANCE-default-user -o jsonpath=\"{.data.username}\" | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Disabling Scheduler Busy Waiting in RabbitMQ\nDESCRIPTION: Disables speculative busy waiting for runtime schedulers using sbwt flags to reduce CPU usage during idle periods.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+sbwt none +sbwtdcpu none +sbwtdio none\"\n```\n\n----------------------------------------\n\nTITLE: Compiling RabbitMQ Federation Plugin\nDESCRIPTION: Commands for compiling the RabbitMQ Federation plugin in the secondary umbrella environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd secondary-umbrella/deps/rabbitmq_federation\nmake dist\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Plugin with Mismatched Enabled Plugins File (Bash)\nDESCRIPTION: This snippet shows an attempt to enable a RabbitMQ plugin when the CLI tool and server are using different enabled plugins files. It demonstrates the error message received in such cases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_top\nEnabling plugins on node rabbit@warp10:\n# =>  rabbitmq_top\n# =>  The following plugins have been configured:\n# =>    rabbitmq_management\n# =>    rabbitmq_management_agent\n# =>    rabbitmq_shovel\n# =>    rabbitmq_shovel_management\n# =>    rabbitmq_top\n# =>    rabbitmq_web_dispatch\n# =>  Applying plugin configuration to rabbit@warp10...\n# =>  Error:\n# =>  {:enabled_plugins_mismatch, '/path/to/installation1/etc/rabbitmq/enabled_plugins', '/path/to/installation2/etc/rabbitmq/enabled_plugins'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Message Acknowledgment in RabbitMQ Consumer\nDESCRIPTION: This snippet shows how to set up a consumer with manual message acknowledgment by setting auto-ack to false and explicitly acknowledging messages after processing with d.Ack(false).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmsgs, err := ch.Consume(\n  q.Name, // queue\n  \"\",     // consumer\n  false,  // auto-ack\n  false,  // exclusive\n  false,  // no-local\n  false,  // no-wait\n  nil,    // args\n)\nfailOnError(err, \"Failed to register a consumer\")\n\nvar forever chan struct{}\n\ngo func() {\n  for d := range msgs {\n    log.Printf(\"Received a message: %s\", d.Body)\n    dotCount := bytes.Count(d.Body, []byte(\".\"))\n    t := time.Duration(dotCount)\n    time.Sleep(t * time.Second)\n    log.Printf(\"Done\")\n    d.Ack(false)\n  }\n}()\n\nlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n<-forever\n```\n\n----------------------------------------\n\nTITLE: Creating a Direct Exchange in Swift RabbitMQ Client\nDESCRIPTION: Initializing a direct exchange named 'logs'. A direct exchange delivers messages to queues based on the exact match between routing keys and binding keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nch.direct(\"logs\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Stream with Confirmations\nDESCRIPTION: Demonstrates how to create a Producer that publishes 100 messages to a stream with a marker message at the end. Uses confirmation callbacks and async/await pattern to ensure message delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSTREAM = \"stream-offset-tracking-python\"\nMESSAGES = 100\n# 2GB\nSTREAM_RETENTION = 2000000000\nconfirmed_messages = 0\nall_confirmed_messages_cond = asyncio.Condition()\n\nasync def _on_publish_confirm_client(confirmation: ConfirmationStatus) -> None:\n    global confirmed_messages\n    if confirmation.is_confirmed:\n        confirmed_messages = confirmed_messages + 1\n        if confirmed_messages == 100:\n            async with all_confirmed_messages_cond:\n                all_confirmed_messages_cond.notify()\n\nasync def publish():\n    async with Producer(\"localhost\", username=\"guest\", password=\"guest\") as producer:\n        # create a stream if it doesn't already exist\n        await producer.create_stream(\n            STREAM, exists_ok=True, arguments={\"max-length-bytes\": STREAM_RETENTION}\n        )\n\n        print(\"Publishing {} messages\".format(MESSAGES))\n        # Send 99 hello message\n        for i in range(MESSAGES - 1):\n            amqp_message = AMQPMessage(\n                body=bytes(\"hello: {}\".format(i), \"utf-8\"),\n            )\n\n            await producer.send(\n                stream=STREAM,\n                message=amqp_message,\n                on_publish_confirm=_on_publish_confirm_client,\n            )\n        # Send a final marker message\n        amqp_message = AMQPMessage(\n            body=bytes(\"marker: {}\".format(i + 1), \"utf-8\"),\n        )\n\n        await producer.send(\n            stream=STREAM,\n            message=amqp_message,\n            on_publish_confirm=_on_publish_confirm_client,\n        )\n\n        async with all_confirmed_messages_cond:\n            await all_confirmed_messages_cond.wait()\n\n        print(\"Messages confirmed.\")\n\n\nasyncio.run(publish())\n```\n\n----------------------------------------\n\nTITLE: Cluster Node Restart Example\nDESCRIPTION: Shows the process of restarting nodes and verifying cluster status after restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmq-server -detached\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmq-server -detached\n\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Restarting Virtual Host in RabbitMQ\nDESCRIPTION: Command to restart a failed virtual host named 'test' including its data stores and queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl restart_vhost test\n```\n\n----------------------------------------\n\nTITLE: Displaying ssl_protocol Property in RabbitMQ\nDESCRIPTION: Shows the TLS protocol version (e.g., \"tlsv1\") used for a secure RabbitMQ connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\nssl_protocol\n```\n\n----------------------------------------\n\nTITLE: Custom LDAP Port in classic config Format\nDESCRIPTION: Erlang format configuration for connecting to LDAP servers on a non-standard port. This specifies both servers and a custom port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    {servers, [\"ldap.eng.megacorp.local\", \"192.168.0.100\"]},\n    {port,    6389}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Group Consumers in RabbitMQ (Bash)\nDESCRIPTION: This command lists consumers of a specific stream consumer group in a vhost for RabbitMQ. It requires specifying the stream and reference (group name), and allows optional parameters to customize the output, such as connection_name and state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_group_consumers --stream stream-1 --reference stream-1 connection_name state\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Private Key Password in RabbitMQ (New Format)\nDESCRIPTION: This snippet demonstrates how to configure TLS listeners and options in RabbitMQ using the new configuration format. It includes setting up the SSL port, specifying certificate files, and providing a password for the private key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.password   = t0p$3kRe7\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client with RabbitMQ in Python\nDESCRIPTION: This code implements an RPC client using RabbitMQ. It creates a FibonacciRpcClient class that establishes a connection, declares a callback queue, and provides methods for sending RPC requests and handling responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-python.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport uuid\n\n\nclass FibonacciRpcClient(object):\n\n    def __init__(self):\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host='localhost'))\n\n        self.channel = self.connection.channel()\n\n        result = self.channel.queue_declare(queue='', exclusive=True)\n        self.callback_queue = result.method.queue\n\n        self.channel.basic_consume(\n            queue=self.callback_queue,\n            on_message_callback=self.on_response,\n            auto_ack=True)\n\n        self.response = None\n        self.corr_id = None\n\n    def on_response(self, ch, method, props, body):\n        if self.corr_id == props.correlation_id:\n            self.response = body\n\n    def call(self, n):\n        self.response = None\n        self.corr_id = str(uuid.uuid4())\n        self.channel.basic_publish(\n            exchange='',\n            routing_key='rpc_queue',\n            properties=pika.BasicProperties(\n                reply_to=self.callback_queue,\n                correlation_id=self.corr_id,\n            ),\n            body=str(n))\n        while self.response is None:\n            self.connection.process_data_events(time_limit=None)\n        return int(self.response)\n\n\nfibonacci_rpc = FibonacciRpcClient()\n\nprint(\" [x] Requesting fib(30)\")\nresponse = fibonacci_rpc.call(30)\nprint(f\" [.] Got {response}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd as Peer Discovery Backend for RabbitMQ\nDESCRIPTION: This snippet sets etcd as the peer discovery backend for RabbitMQ cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host with Metadata using rabbitmqctl\nDESCRIPTION: Creates a virtual host with additional metadata including description, default queue type set to quorum queues, and tags. This shows how to set virtual host properties during creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1 --description \"QA env 1\" --default-queue-type quorum\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Import on Boot\nDESCRIPTION: Configuration that enables automatic import of definitions from a URL over HTTPS during node startup. This allows for remote definition storage and retrieval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled.\ndefinitions.import_backend = https\ndefinitions.https.url = https://raw.githubusercontent.com/rabbitmq/sample-configs/main/queues/5k-queues.json\n# client-side TLS options for definition import\ndefinitions.tls.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: Creating Callback Queue for RPC in PHP\nDESCRIPTION: This code snippet shows how to create a callback queue for RPC, publish a message with the reply-to property set, and prepare for reading the response. It demonstrates the setup required for handling RPC responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-php.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nlist($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n$msg = new AMQPMessage(\n    $payload,\n    array('reply_to' => $queue_name)\n);\n\n$channel->basic_publish($msg, '', 'rpc_queue');\n\n# ... then code to read a response message from the callback_queue ...\n```\n\n----------------------------------------\n\nTITLE: Batch Message Rejection in Java\nDESCRIPTION: Demonstrates how to reject multiple messages at once using RabbitMQ Java client. Uses Channel#basicNack with multiple and requeue flags set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // requeue all unacknowledged deliveries up to\n             // this delivery tag\n             channel.basicNack(deliveryTag, true, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Deactivating Topology Recovery in Java\nDESCRIPTION: Demonstrates how to deactivate topology recovery while keeping connection recovery active in Java. It also shows setting a listener to restore application state when the connection is recovered.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_75\n\nLANGUAGE: java\nCODE:\n```\nConnection connection = environment.connectionBuilder()\n    .recovery()\n    .topology(false) // deactivate topology recovery\n    .connectionBuilder()\n    .listeners(context -> {\n        // set listener that restores application state when connection is recovered\n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ and Erlang on Ubuntu Jammy\nDESCRIPTION: Shell script for installing RabbitMQ and Erlang on Ubuntu 22.04 (Jammy). The script adds package repositories, imports signing keys, and installs required Erlang packages along with RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null\n\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\n\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\nEOF\n\nsudo apt-get update -y\n\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Plugins Using CLI\nDESCRIPTION: Commands to enable plugins using the rabbitmq-plugins CLI tool, with specific example for Kubernetes peer discovery plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable <plugin-name>\nrabbitmq-plugins enable rabbitmq_peer_discovery_k8s\n```\n\n----------------------------------------\n\nTITLE: Basic TLS Connection in Java RabbitMQ Client\nDESCRIPTION: Java example demonstrating a basic TLS connection to RabbitMQ without certificate verification. Creates a connection, publishes a message and retrieves it back.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example1 {\n\n    public static void main(String[] args) throws Exception {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"localhost\");\n        factory.setPort(5671);\n\n        factory.useSslProtocol();\n        // Tells the library to setup the default Key and Trust managers for you\n        // which do not do any form of remote server trust verification\n\n        Connection conn = factory.newConnection();\n        Channel channel = conn.createChannel();\n\n        // non-durable, exclusive, auto-delete queue\n        channel.queueDeclare(\"rabbitmq-java-test\", false, true, true, null);\n        channel.basicPublish(\"\", \"rabbitmq-java-test\", null, \"Hello, World\".getBytes());\n\n        GetResponse chResponse = channel.basicGet(\"rabbitmq-java-test\", false);\n        if (chResponse == null) {\n            System.out.println(\"No message retrieved\");\n        } else {\n            byte[] body = chResponse.getBody();\n            System.out.println(\"Received: \" + new String(body));\n        }\n\n        channel.close();\n        conn.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Feature Flag in Erlang for RabbitMQ\nDESCRIPTION: This snippet demonstrates how to declare a feature flag as a module attribute in Erlang for RabbitMQ. It includes the flag name, description, documentation URL, stability status, and migration function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n-rabbit_feature_flag(\n   {quorum_queue,\n    #{desc          => \"Support queues of type quorum\",\n      doc_url       => \"https://www.rabbitmq.com/docs/quorum-queues\",\n      stability     => stable,\n      migration_fun => {?MODULE, quorum_queue_migration}\n     }}).\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Stream Consumer in Java\nDESCRIPTION: Command to compile and run the Receive class which consumes messages from a RabbitMQ stream. The consumer will continuously listen for incoming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n ./mvnw -q compile exec:java '-Dexec.mainClass=Receive'\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Mirror Status in RabbitMQ\nDESCRIPTION: Command to list queues with their name, policy, pid and mirror PIDs to check mirroring status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues name policy pid mirror_pids\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Management UI with OAuth 2.0\nDESCRIPTION: Basic configuration entries required in rabbitmq.conf to enable OAuth 2.0 authentication for the Management UI with service-provider initiated login\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_client_code\nmanagement.oauth_provider_url = https://uaa:8443\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication Backend in RabbitMQ (Erlang format)\nDESCRIPTION: This configuration snippet sets up LDAP as the sole authentication and authorization backend in RabbitMQ using the Erlang-style advanced.config format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  {auth_backends, [rabbit_auth_backend_ldap]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Queue for Shovel\nDESCRIPTION: Shows how to specify the source queue for a shovel using an Erlang binary value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{queue, <<\"queue.1\">>}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Message TTL in C#\nDESCRIPTION: This C# code snippet creates a queue with a 60-second message TTL using the x-message-ttl argument during queue declaration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar args = new Dictionary<string, object>();\nargs.Add(\"x-message-ttl\", 60000);\nmodel.QueueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Basic Shovel Definition Structure in RabbitMQ\nDESCRIPTION: Shows the top-level structure of a shovel definition, including source, destination, acknowledgement mode, and reconnect delay settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{shovel_name, [\n  {source, [\n    %% protocol-specific source configuration goes here\n  ]},\n  {destination, [\n    %% protocol-specific destination configuration goes here\n  ]},\n  %% 'confirm' is the default acknowledgement mode\n  {ack_mode, confirm},\n  %% reconnect with a 5 second delay\n  {reconnect_delay, 5}\n]}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Message Receiver with Multiple Queue Listeners\nDESCRIPTION: Implementation of a message receiver that listens to multiple queues. Each queue is bound to different routing keys, allowing the receiver to handle messages based on their color routing keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.util.StopWatch;\n\npublic class Tut4Receiver {\n\n\t@RabbitListener(queues = \"#{autoDeleteQueue1.name}\")\n\tpublic void receive1(String in) throws InterruptedException {\n\t\treceive(in, 1);\n\t}\n\n\t@RabbitListener(queues = \"#{autoDeleteQueue2.name}\")\n\tpublic void receive2(String in) throws InterruptedException {\n\t\treceive(in, 2);\n\t}\n\n\tpublic void receive(String in, int receiver) throws InterruptedException {\n\t\tStopWatch watch = new StopWatch();\n\t\twatch.start();\n\t\tSystem.out.println(\"instance \" + receiver + \" [x] Received '\" + in + \"'\");\n\t\tdoWork(in);\n\t\twatch.stop();\n\t\tSystem.out.println(\"instance \" + receiver + \" [x] Done in \" +\n\t\t    watch.getTotalTimeSeconds() + \"s\");\n\t}\n\n\tprivate void doWork(String in) throws InterruptedException {\n\t\tfor (char ch : in.toCharArray()) {\n\t\t\tif (ch == '.') {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Queue TTL via RabbitMQ Policy (Windows PowerShell)\nDESCRIPTION: Command to set a policy that makes all queues expire after 30 minutes (1,800,000 milliseconds) of inactivity using rabbitmqctl in Windows environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy expiry \".*\" \"{\"\"expires\"\":1800000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Creating a Durable Topic Subscription with STOMP\nDESCRIPTION: STOMP frame example showing how to create a durable subscription to a topic destination. The subscription specifies durable:true and auto-delete:false to ensure the subscription persists when clients disconnect.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_11\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/topic/my-durable\nid:1234\ndurable:true\nauto-delete:false\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Discovery Backend\nDESCRIPTION: Configuration example showing how to specify the peer discovery mechanism in RabbitMQ config file using either the shorthand name or full module name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# The backend can also be specified using its module name. Note that\n# module names do not necessarily match plugin names exactly.\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n```\n\n----------------------------------------\n\nTITLE: Negative Acknowledgement of Multiple Deliveries in Java RabbitMQ Client\nDESCRIPTION: Demonstrates how to negatively acknowledge multiple deliveries at once with requeueing using the Java client for RabbitMQ. This method allows for batch processing of unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// this example assumes an existing channel instance\n\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // requeue all unacknowledged deliveries up to\n             // this delivery tag\n             channel.basicNack(deliveryTag, true, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Consul Health Check Configuration\nDESCRIPTION: Configuration for health check intervals and TTL settings in Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\n# default: 30\ncluster_formation.consul.svc_ttl = 40\n```\n\n----------------------------------------\n\nTITLE: Listing Policies in RabbitMQ (Bash)\nDESCRIPTION: Lists all policies in the default virtual host of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_policies\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP as Exclusive Authentication Backend\nDESCRIPTION: Configuration that sets LDAP as the only authentication and authorization backend, ignoring the internal database. This forces all user authentication to go through LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# use LDAP exclusively for authentication and authorisation\nauth_backends.1 = ldap\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ\nDESCRIPTION: Sets up a federation upstream parameter on the 'green' cluster pointing to the 'blue' cluster. This establishes the connection path for federated queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/blue-green-upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream blue \\\n  '{\"uri\":\"amqp://node-in-blue-cluster\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard RabbitMQ LDAP Authentication Settings\nDESCRIPTION: Example of standard configuration (rabbitmq.conf) for LDAP authentication. It configures authentication backends and LDAP connection parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_27\n\nLANGUAGE: erlang\nCODE:\n```\nauth_backends.1 = ldap\n\nauth_ldap.servers.1  = my-ldap-server\nauth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com\nauth_ldap.use_ssl    = false\nauth_ldap.port       = 389\nauth_ldap.log        = false\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions for a User in RabbitMQ with Bash\nDESCRIPTION: Grants a user permission to publish and consume messages through a specific topic exchange with a routing key pattern. This example gives user 'janeway' permissions on the 'amq.topic' exchange in 'my-vhost' with routing keys that start with 'janeway-'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic \"^janeway-.*\" \"^janeway-.*\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Configuration in Classic Format\nDESCRIPTION: Example configuration in the classic Erlang format that enables TLS on port 5671 with peer verification settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                    {certfile,   \"/path/to/server_certificate.pem\"},\n                    {keyfile,    \"/path/to/server_key.pem\"},\n                    {verify,     verify_peer},\n                    {fail_if_no_peer_cert, true}]}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stream with Java AMQP 0.9.1 Client\nDESCRIPTION: Code snippet showing how to declare a stream using the RabbitMQ Java client with the x-queue-type argument set to 'stream'. This creates a persistent stream with replicas across the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nConnection connection = factory.newConnection();\nChannel channel = connection.createChannel();\nchannel.queueDeclare(\n  \"my-stream\",\n  true,         // durable\n  false, false, // not exclusive, not auto-delete\n  Collections.singletonMap(\"x-queue-type\", \"stream\")\n);\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Stream Plugin Activation - Shell\nDESCRIPTION: Command to enable the RabbitMQ stream plugin in the running container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 with Symmetric Signing Key in RabbitMQ\nDESCRIPTION: Configuration for using a symmetric signing key (MAC/HS256) instead of asymmetric keys like RSA. This setup uses the advanced Erlang configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"my_rabbit_server\">>},\n    {key_config, [\n      {signing_keys, #{\n        <<\"a-key-ID\">> => {map, #{<<\"kty\">> => <<\"MAC\">>,\n                                  <<\"alg\">> => <<\"HS256\">>,\n                                  <<\"value\">> => <<\"my_signing_key\">>}}\n      }}\n    ]}\n  ]},\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Authentication with IP Range Authorization\nDESCRIPTION: Configuration example for using the internal database for authentication and the source IP range backend for authorisation, showing how to specify different backends for authentication and authorisation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = internal\n# uses module name because this backend is from a 3rd party\nauth_backends.1.authz = rabbit_auth_backend_ip_range\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Publisher Confirms Example in Java\nDESCRIPTION: This bash snippet shows how to compile and run the PublisherConfirms.java example that demonstrates the performance of different publisher confirm strategies. The example compares individual, batch, and asynchronous handling approaches.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njavac -cp $CP PublisherConfirms.java\njava -cp $CP PublisherConfirms\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication Backend in RabbitMQ\nDESCRIPTION: This example configures RabbitMQ to use the LDAP backend for both authentication and authorization. The internal database will not be consulted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = ldap\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Readahead Value\nDESCRIPTION: Command to configure the readahead value for a block device on Linux systems, typically set between 256 and 4096 in steps of 256.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo blockdev --setra 4096 /dev/sda\n```\n\n----------------------------------------\n\nTITLE: Consuming Event Stream in RabbitMQ (Bash)\nDESCRIPTION: Streams internal events from a running node with output compatible with jq. This command allows filtering events by pattern and specifying the duration of the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream -n rabbit@hostname --duration 20 --pattern queue_.*\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Publisher in Swift with RabbitMQ\nDESCRIPTION: Method to publish new tasks to a RabbitMQ queue. Creates a durable queue named 'task_queue' and publishes messages with persistence enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc newTask(_ msg: String) {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let q = ch.queue(\"task_queue\", options: .durable)\n    let msgData = msg.data(using: .utf8)\n    ch.defaultExchange().publish(msgData, routingKey: q.name, persistent: true)\n    print(\"Sent \\(msg)\")\n    conn.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Apt Sources\nDESCRIPTION: This command updates the list of apt sources after adding the new Erlang repository. It's necessary to run this before installing packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n```\n\n----------------------------------------\n\nTITLE: Putting a Node into Maintenance Mode in RabbitMQ (Bash)\nDESCRIPTION: This command puts a RabbitMQ node into maintenance mode, suspending client connections, transferring primary replicas, and preparing the node for shutdown or upgrade with minimal disruption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade drain\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ User with Password Hash\nDESCRIPTION: Kubernetes manifests for creating a RabbitMQ user with a SHA-512 password hash. The credentials are stored in a Secret that is referenced by the User resource. The user is assigned the 'administrator' tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-user-credentials # IMPORTANT: this Secret name must match .spec.importCredentialsSecret.name field in User object\ntype: Opaque\nstringData:\n  username: my-user\n  passwordHash: tLXSw48rCJO5gc8zu2UJRxR+RfbmNIJMWA6udRQlb6zVWwZg # SHA-512 hash of \"foobarbaz\"\n---\napiVersion: rabbitmq.com/v1beta1\nkind: User\nmetadata:\n  name: my-admin-user\nspec:\n  tags:\n  - administrator\n  rabbitmqClusterReference:\n    name: test # rabbitmqCluster must exist in the same namespace as this resource\n  importCredentialsSecret:\n    name: my-user-credentials # must match the name of the Secret\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Messaging Architecture with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates a RabbitMQ messaging pattern with a producer (P) sending messages to an exchange (X) which routes to two queues (Q₁ and Q₂) based on different binding patterns. Each queue has a dedicated consumer (C₁ and C₂). The diagram shows topic-based routing with patterns like '#.a.#', '#.#.b', and 'c.#'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T5DiagramToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X -- #42;.a.#42; --> Q1\n    X -- #42;.#42;.b --> Q2\n    X -- c.# --> Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Discovery Backend\nDESCRIPTION: Configuration example showing how to specify the peer discovery mechanism in RabbitMQ config file using either the shorthand name or full module name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# The backend can also be specified using its module name. Note that\n# module names do not necessarily match plugin names exactly.\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Cancel Notification Handler in Java with RabbitMQ\nDESCRIPTION: This code demonstrates how to implement a handler for unexpected consumer cancellations in the RabbitMQ Java client. The example creates a queue, defines a consumer that overrides the handleCancel method from DefaultConsumer to handle unexpected cancellations, and starts consuming from the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-cancel.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDeclare(queue, false, true, false, null);\nConsumer consumer = new DefaultConsumer(channel) {\n    @Override\n    public void handleCancel(String consumerTag) throws IOException {\n        // consumer has been cancelled unexpectedly\n    }\n};\nchannel.basicConsume(queue, consumer);\n```\n\n----------------------------------------\n\nTITLE: Adding Stream Replica Command Example\nDESCRIPTION: Example command showing how to add a stream replica to a specific node and virtual host using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_replica --vhost \"a-vhost\" \"a-queue\" \"rabbit@new-node\"\n```\n\n----------------------------------------\n\nTITLE: Listing Policies in RabbitMQ (Bash)\nDESCRIPTION: Lists all policies in the default virtual host of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_policies\n```\n\n----------------------------------------\n\nTITLE: Displaying log location in RabbitMQ (Bash)\nDESCRIPTION: Command to show log file location(s) on the target RabbitMQ node. It supports flags for showing all locations and setting a timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nlog_location [--all | -a] [--timeout milliseconds]\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_location -a\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation\nDESCRIPTION: Full implementation of a program that connects to RabbitMQ and emits log messages to a fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = 'logs';\n    var msg = process.argv.slice(2).join(' ') || 'Hello World!';\n\n    channel.assertExchange(exchange, 'fanout', {\n      durable: false\n    });\n    channel.publish(exchange, '', Buffer.from(msg));\n    console.log(\" [x] Sent %s\", msg);\n  });\n\n  setTimeout(function() {\n    connection.close();\n    process.exit(0);\n  }, 500);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Formatting for Console Logging in RabbitMQ\nDESCRIPTION: This configuration enables JSON formatting for console logging output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth 2.0 Plugin in RabbitMQ\nDESCRIPTION: Command to enable the OAuth 2.0 authentication backend plugin in RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_auth_backend_oauth2\n```\n\n----------------------------------------\n\nTITLE: Enabling a RabbitMQ Plugin using CLI\nDESCRIPTION: Demonstrates how to enable a RabbitMQ plugin using the rabbitmq-plugins command line tool. The example shows enabling the Kubernetes peer discovery plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_peer_discovery_k8s\n```\n\n----------------------------------------\n\nTITLE: Declaring AMQP 0-9-1 Resources for Shovel\nDESCRIPTION: Example of declaring AMQP 0-9-1 resources (queue and binding) in a shovel configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n  {declarations, [\n                   'queue.declare',\n                   {'queue.bind', [\n                                    {exchange, <<\"my_exchange\">>},\n                                    {queue,    <<>>}\n                                  ]}\n                 ]}\n```\n\n----------------------------------------\n\nTITLE: Checking Shovel Status via CLI\nDESCRIPTION: Demonstrates how to query the status of all shovels using the rabbitmqctl command-line tool. This command returns information about each shovel including its name, type, status, and last state change timestamp.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# use the -n switch to target a remote node\\nrabbitmqctl shovel_status\n```\n\n----------------------------------------\n\nTITLE: Checking If Node Is Quorum Critical in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent of the command that checks if shutting down the target node would leave any quorum queues or streams without an online majority. Used during grow-then-shrink upgrades to ensure safe node removal.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# exits with a non-zero status if shutting down target node would leave some quorum queues\n# or streams without an online majority\nrabbitmq-diagnostics.bat check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Exchange Subscriber in Java\nDESCRIPTION: Java implementation of a subscriber that receives log messages from a topic exchange. It configures bindings with pattern-matching keys that can include wildcards (* and #) to filter messages based on multiple criteria.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-java.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class ReceiveLogsTopic {\n\n  private static final String EXCHANGE_NAME = \"topic_logs\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n\n    channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n    String queueName = channel.queueDeclare().getQueue();\n\n    if (argv.length < 1) {\n        System.err.println(\"Usage: ReceiveLogsTopic [binding_key]...\");\n        System.exit(1);\n    }\n\n    for (String bindingKey : argv) {\n        channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);\n    }\n\n    System.out.println(\" [*] Waiting for messages. To exit press CTRL+C\");\n\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n        String message = new String(delivery.getBody(), \"UTF-8\");\n        System.out.println(\" [x] Received '\" +\n            delivery.getEnvelope().getRoutingKey() + \"':'\" + message + \"'\");\n    };\n    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Endpoint for RabbitMQ Peer Discovery\nDESCRIPTION: Sets up Kubernetes API endpoint configuration including host, port, and URI scheme. This enables RabbitMQ nodes to communicate with the Kubernetes API for cluster member discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n# 443 is used by default\ncluster_formation.k8s.port = 443\n# https is used by default\ncluster_formation.k8s.scheme = https\n```\n\n----------------------------------------\n\nTITLE: Declaring an Exchange in Erlang\nDESCRIPTION: Demonstrates how to declare an exchange using the #'exchange.declare'{} record and amqp_channel:call/2 function. This example creates a direct exchange named 'my_exchange'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\nDeclare = #'exchange.declare'{exchange = <<\"my_exchange\">>},\n#'exchange.declare_ok'{} = amqp_channel:call(Channel, Declare)\n```\n\n----------------------------------------\n\nTITLE: Checking Node Quorum Criticality with RabbitMQ CLI in Bash\nDESCRIPTION: Command that checks if there are queues with minimum online quorum that would lose their quorum if the target node is shut down. The command exits with a non-zero code if any such queues are found.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-queues.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 JWKS Endpoint in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to set up a JWKS endpoint for downloading signing keys. It includes TLS configuration options like CA certificate, peer verification settings, and allowed algorithms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.jwks_url = https://my-jwt-issuer/jwks.json\nauth_oauth2.https.cacertfile = test/config_schema_SUITE_data/certs/cacert.pem\nauth_oauth2.https.peer_verification = verify_peer\nauth_oauth2.https.depth = 5\nauth_oauth2.https.fail_if_no_peer_cert = true\nauth_oauth2.https.hostname_verification = wildcard\nauth_oauth2.algorithms.1 = HS256\nauth_oauth2.algorithms.2 = RS256\n```\n\n----------------------------------------\n\nTITLE: Clearing Topic Permissions in RabbitMQ (Bash)\nDESCRIPTION: This command clears topic permissions for a specific user on a given exchange in a virtual host. It requires the virtual host name, username, and optionally the exchange name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_topic_permissions -p my-vhost janeway amq.topic\n```\n\n----------------------------------------\n\nTITLE: Changing RabbitMQ User Password\nDESCRIPTION: Command to modify an existing user's password in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl change_password janeway newpass\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stream with Additional Arguments in Java\nDESCRIPTION: Example showing how to declare a stream with additional configuration arguments such as maximum stream size, maximum age, and segment size. These arguments control stream retention and storage characteristics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> arguments = new HashMap<>();\narguments.put(\"x-queue-type\", \"stream\");\narguments.put(\"x-max-length-bytes\", 20_000_000_000); // maximum stream size: 20 GB\narguments.put(\"x-stream-max-segment-size-bytes\", 100_000_000); // size of segment files: 100 MB\nchannel.queueDeclare(\n  \"my-stream\",\n  true,         // durable\n  false, false, // not exclusive, not auto-delete\n  arguments\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering RabbitMQ Plugins by Name Pattern\nDESCRIPTION: Command to list RabbitMQ plugins whose names contain the specified pattern (in this case 'management'). This allows for filtering the plugin list to find specific plugins more easily.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-plugins.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -v management\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Environment and Declaring Stream in Go\nDESCRIPTION: Initializes a RabbitMQ stream environment with connection parameters and declares a stream with a 2GB capacity limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nenv, _ := stream.NewEnvironment(\n    stream.NewEnvironmentOptions().\n        SetHost(\"localhost\").\n        SetPort(5552).\n        SetUser(\"guest\").\n        SetPassword(\"guest\"))\n\nstreamName := \"stream-offset-tracking-go\"\nenv.DeclareStream(streamName,\n    &stream.StreamOptions{\n        MaxLengthBytes: stream.ByteCapacity{}.GB(2),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling the RabbitMQ Auth Cache Plugin with rabbitmqctl\nDESCRIPTION: Command to enable the rabbitmq_auth_backend_cache plugin using the rabbitmqctl CLI tool. This must be done before the plugin can be used.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-cache-backend.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_auth_backend_cache\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Application with rabbitmqctl\nDESCRIPTION: Stops the RabbitMQ application while leaving the Erlang VM running. This command is typically run before performing other management actions that require the RabbitMQ application to be stopped, such as reset.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl stop_app\n```\n\n----------------------------------------\n\nTITLE: Using AddressResolver for Service Discovery in RabbitMQ Java Client\nDESCRIPTION: This code shows how to use an AddressResolver implementation for custom service discovery when creating a RabbitMQ connection. It allows for dynamic endpoint resolution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nConnection conn = factory.newConnection(addressResolver);\n```\n\nLANGUAGE: java\nCODE:\n```\npublic interface AddressResolver {\n\n  List<Address> getAddresses() throws IOException;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication Backend in RabbitMQ (INI format)\nDESCRIPTION: This configuration snippet sets up LDAP as the sole authentication and authorization backend in RabbitMQ using the INI-style configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# use LDAP exclusively for authentication and authorisation\nauth_backends.1 = ldap\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Message TTL When Publishing in Java\nDESCRIPTION: This Java example shows how to publish a message with an expiration time of 60 seconds. The TTL is set by adding the 'expiration' property to the AMQP.BasicProperties object.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nbyte[] messageBodyBytes = \"Hello, world!\".getBytes();\nAMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()\n                               .expiration(\"60000\")\n                               .build();\nchannel.basicPublish(\"my-exchange\", \"routing-key\", properties, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Setting Policies in RabbitMQ\nDESCRIPTION: Sets a policy that applies to resources matching a pattern. The example creates a federation policy named 'federate-me' that applies to all built-in exchanges (names starting with 'amq.').\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me ^amq. '{\"federation-upstream-set\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in PowerShell\nDESCRIPTION: PowerShell command to create a policy that controls exchange federation. The policy matches exchanges with names starting with 'federated.' and applies federation to all configured upstreams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy exchange-federation `\n    \"^federated\\.\" `\n    '\"{\"\"federation-upstream-set\":\"\"all\"\"}\"' `\n    --priority 10 `\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Shovel Using CLI Tools in Bash\nDESCRIPTION: Command to create a dynamic shovel named 'my-shovel' that moves messages from a source queue to a target queue on a remote server using the RabbitMQ CLI tool in Bash. The shovel is configured with AMQP 0-9-1 protocol and includes queue type specifications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# my-shovel here is the name of the shovel\nrabbitmqctl set_parameter shovel my-shovel \\\n  '{\"src-protocol\": \"amqp091\", \"src-uri\": \"amqp://\", \"src-queue\": \"source-queue\", \"dest-protocol\": \"amqp091\", \"dest-uri\": \"amqp://remote-server\", \"dest-queue\": \"target-queue\", \"dest-queue-args\": {\"x-queue-type\": \"quorum\"}}'\n```\n\n----------------------------------------\n\nTITLE: Adding a Shutdown Listener to a RabbitMQ Connection in Java\nDESCRIPTION: This snippet demonstrates how to add a shutdown listener to a RabbitMQ connection. The listener's shutdownCompleted method is called when the connection transitions to the closed state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.ShutdownSignalException;\nimport com.rabbitmq.client.ShutdownListener;\n\nconnection.addShutdownListener(new ShutdownListener() {\n    public void shutdownCompleted(ShutdownSignalException cause)\n    {\n        ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding with Routing Key in PHP\nDESCRIPTION: This snippet shows how to create a binding between a queue and an exchange with a specific routing key in PHP using the php-amqplib library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-php.md#2025-04-09_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$binding_key = 'black';\n$channel->queue_bind($queue_name, $exchange_name, $binding_key);\n```\n\n----------------------------------------\n\nTITLE: Checking for Deprecated Features Usage with RabbitMQ CLI\nDESCRIPTION: Command to check if any deprecated features are being used in a RabbitMQ deployment. The command exits with code 0 if no deprecated features are used, or non-zero if any are in use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/deprecated-features/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmq-diagnostics check_if_any_deprecated_features_are_used\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Authentication Backend\nDESCRIPTION: Basic configuration to enable OAuth 2.0 as an authentication backend in RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = rabbit_auth_backend_oauth2\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Node to Listen on Specific Interface in INI\nDESCRIPTION: INI configuration for rabbitmq.conf that instructs the node to only listen for inter-node communication on a local interface. This is particularly useful for single-node clusters to improve security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n# Instructs the node to only listen for inter-node communication connections on a local interface.\n# This affects both connections from cluster peers and CLI tools.\n#\n# This particular configuration only makes sense for single-node clusters.\n# For multi-node clusters, nodes must listen on an \"internal network-local\" interface\n# that would allow cluster peers to connect but not be exposed to the public Internet\ndistribution.listener.interface = ::1\n```\n\n----------------------------------------\n\nTITLE: Running RPC Server and Client in Bash\nDESCRIPTION: Commands to run the RPC server and client applications from the command line.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd RPCServer\ndotnet run\n# => [x] Awaiting RPC requests\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd RPCClient\ndotnet run\n# => [x] Requesting fib(30)\n```\n\n----------------------------------------\n\nTITLE: Setting Dead Letter Routing Key in Java\nDESCRIPTION: Shows how to set a specific routing key for dead-lettered messages using the 'x-dead-letter-routing-key' argument when declaring a queue in Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/dlx.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nargs.put(\"x-dead-letter-routing-key\", \"some-routing-key\");\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX via Queue Arguments in Java\nDESCRIPTION: Demonstrates how to declare a queue with dead letter exchange configuration using queue arguments in Java client code.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/dlx.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(\"some.exchange.name\", \"direct\");\n\n// Important: prefer using policies over hardcoded x-arguments\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-dead-letter-exchange\", \"some.exchange.name\");\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ RPC Components in Spring\nDESCRIPTION: Configuration class that sets up the necessary RabbitMQ components for RPC, including exchanges, queues, and bindings. It defines both client and server profiles with their respective beans.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-spring-amqp.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Profile({\"tut6\",\"rpc\"})\n@Configuration\npublic class Tut6Config {\n\n\t@Profile(\"client\")\n\tprivate static class ClientConfig {\n\n\t\t@Bean\n\t\tpublic DirectExchange exchange() {\n\t\t\treturn new DirectExchange(\"tut.rpc\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Tut6Client client() {\n\t \t \treturn new Tut6Client();\n\t\t}\n\n\t}\n\n\t@Profile(\"server\")\n\tprivate static class ServerConfig {\n\n\t\t@Bean\n\t\tpublic Queue queue() {\n\t\t\treturn new Queue(\"tut.rpc.requests\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic DirectExchange exchange() {\n\t\t\treturn new DirectExchange(\"tut.rpc\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding(DirectExchange exchange,\n\t\t    Queue queue) {\n\t\t\treturn BindingBuilder.bind(queue)\n\t\t\t    .to(exchange)\n\t\t\t    .with(\"rpc\");\n\t\t}\n\n\t\t@Bean\n\t\tpublic Tut6Server server() {\n\t\t\treturn new Tut6Server();\n\t\t}\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in PowerShell\nDESCRIPTION: PowerShell command to create a policy that controls exchange federation. The policy matches exchanges with names starting with 'federated.' and applies federation to all configured upstreams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy exchange-federation `\n    \"^federated\\.\" `\n    '\"{\"\"federation-upstream-set\":\"\"all\"\"}\"' `\n    --priority 10 `\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key Password in RabbitMQ (INI Format)\nDESCRIPTION: This configuration snippet shows how to protect a private key with a password in RabbitMQ using the modern INI-style configuration format. It sets up an SSL listener on port 5671 and specifies the paths to the certificate files along with the password for the private key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.password   = t0p$3kRe7\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Shovel Configuration in RabbitMQ\nDESCRIPTION: Example JSON document structure for configuring a shovel between two queues using the HTTP API. Specifies source and destination protocols, URIs, and queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\":  \"amqp://localhost\",\n    \"src-queue\":  \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqp://remote.rabbitmq.local\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Vhost-Scoped Parameters in RabbitMQ (Bash)\nDESCRIPTION: Commands for setting, clearing, and listing vhost-scoped parameters using rabbitmqctl in a Bash environment. These parameters are tied to a specific virtual host and consist of a component name, name, and value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# sets a runtime parameter in a virtual host\nrabbitmqctl set_parameter [-p vhost] <component_name> <name> <value>\n\n# clears (unsets) a runtime parameter in a virtual host\nrabbitmqctl clear_parameter [-p vhost] <component_name> <name>\n\n# lists runtime parameters in a virtual host\nrabbitmqctl list_parameters [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Waiting for RabbitMQ Node with rabbitmqctl in Bash\nDESCRIPTION: Example of using rabbitmqctl wait command, which waits for a RabbitMQ node to start. This command must be run on the same host as the target node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl wait\n```\n\n----------------------------------------\n\nTITLE: Handling RabbitMQ Publisher Confirms Asynchronously in C#\nDESCRIPTION: This code demonstrates how to handle publisher confirms asynchronously by registering callbacks for confirmed, nack-ed, and returned messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.BasicAcks += (sender, ea) =>\n{\n    HandleAck(ea.DeliveryTag, ea.Multiple);\n};\n\nchannel.BasicNacks += (sender, ea) =>\n{\n    HandleNack(ea.DeliveryTag, ea.Multiple);\n};\n\nchannel.BasicReturn += (sender, ea) =>\n{\n    HandleReturn(ea.ReplyCode, ea.ReplyText, ea.Exchange, ea.RoutingKey, ea.BasicProperties, ea.Body);\n};\n\nfor (int i = 0; i < MESSAGE_COUNT; i++)\n{\n    long sequenceNumber = await channel.GetNextPublishSequenceNumberAsync();\n    outstandingConfirms.TryAdd(sequenceNumber, string.Empty);\n    byte[] body = Encoding.UTF8.GetBytes(i.ToString());\n    await channel.BasicPublishAsync(\"\", \"queue-name\", null, body);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP Implicit Connect\nDESCRIPTION: INI configuration to enable implicit connect feature for STOMP, allowing clients to omit the CONNECT frame.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_user = guest\nstomp.default_pass = guest\nstomp.implicit_connect = true\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: Command to verify Docker and Docker Compose installation status\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker info && docker-compose version\n```\n\n----------------------------------------\n\nTITLE: Setting operation timeout in rabbitmq-upgrade\nDESCRIPTION: Command option to specify operation timeout in seconds for commands that support timeouts. Default is infinity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-t timeout, --timeout timeout\n```\n\n----------------------------------------\n\nTITLE: Decoding Encrypted Values in RabbitMQ\nDESCRIPTION: Command to decrypt an encrypted value using a passphrase in RabbitMQ configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode '{encrypted, <<\"...\">>}' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Basic TCP Port Configuration\nDESCRIPTION: INI configuration example for changing the Web MQTT listener port\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-mqtt.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.tcp.port = 9001\n```\n\n----------------------------------------\n\nTITLE: JWT Token Example with Variable Expansion for Topics\nDESCRIPTION: Example JWT token that demonstrates variable expansion when checking permissions on topics. This token grants a user named 'bob' write permissions on exchanges with names matching a specific pattern in the 'prod' vhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\" : \"bob\",\n  \"scope\" : [ \"rabbitmq.write:*/x-{vhost}-*/u-{sub}-*\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting a RabbitMQ Node in Bash\nDESCRIPTION: This snippet demonstrates how to reset a running RabbitMQ node using rabbitmqctl commands. It stops the application, resets the node, and starts it again.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit2\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit2 ...done.\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit2 ...done.\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit2 ...done.\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue for Message Consumption\nDESCRIPTION: Creating connection and declaring queue for consuming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->queue_declare('hello', false, false, false, false);\n\necho \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP Implicit Connect\nDESCRIPTION: INI configuration to enable implicit connect feature for STOMP, allowing clients to omit the CONNECT frame.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_user = guest\nstomp.default_pass = guest\nstomp.implicit_connect = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in C# RabbitMQ Consumer\nDESCRIPTION: This snippet shows how to implement message acknowledgment in a RabbitMQ consumer using C#. It demonstrates manually acknowledging messages and setting autoAck to false.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\" [x] Done\");\n\n// here channel could also be accessed as ((AsyncEventingBasicConsumer)sender).Channel\nawait channel.BasicAckAsync(deliveryTag: ea.DeliveryTag, multiple: false);\n};\n\nawait channel.BasicConsumeAsync(\"hello\", autoAck: false, consumer: consumer);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream Replica in RabbitMQ using Bash\nDESCRIPTION: This command removes a stream replica from a specified node within a given virtual host. It requires the queue name, node name, and virtual host to be provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams delete_replica --vhost \"a-vhost\" \"a-queue\" \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Predeclared Topology Setting\nDESCRIPTION: Configuration setting to enable predeclared topology for all shovels on a node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nshovel.topology.predeclared = true\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Dependencies for RabbitMQ on Debian\nDESCRIPTION: Installs essential dependencies required for setting up RabbitMQ repositories and packages on Debian systems. This includes curl for downloading and gnupg for package verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\nsudo apt-get install curl gnupg -y\n```\n\n----------------------------------------\n\nTITLE: Checking Node Quorum Status in RabbitMQ\nDESCRIPTION: Command to check if shutting down a node would cause loss of quorum for any components or queues. Returns non-zero exit code if quorum would be lost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_if_node_is_quorum_critical\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Message TTL in Java\nDESCRIPTION: Sets a Time-To-Live (TTL) of 60 seconds for an individual message during publishing. This provides more granular control over message expiration compared to per-queue TTL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nbyte[] messageBodyBytes = \"Hello, world!\".getBytes();\nAMQP.BasicProperties properties = new AMQP.BasicProperties();\nproperties.setExpiration(\"60000\");\nchannel.basicPublish(\"my-exchange\", \"routing-key\", properties, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Setting Message Persistence in PHP RabbitMQ Producer\nDESCRIPTION: This snippet shows how to mark messages as persistent when publishing to RabbitMQ using PHP. The delivery_mode is set to DELIVERY_MODE_PERSISTENT to ensure messages survive server restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$msg = new AMQPMessage(\n    $data,\n    array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Port Connectivity with rabbitmq-diagnostics in Bash\nDESCRIPTION: Command to verify TCP connectivity to all configured RabbitMQ listener ports. This is useful for validating network configuration and accessibility of the node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# This check will try to open a TCP connection to the discovered listener ports.\n# Since nodes can be configured to listen to specific interfaces, an --address should\n# be provided, or CLI tools will have to rely on the configured hostname resolver to know where to connect.\nrabbitmq-diagnostics -q check_port_connectivity --node rabbit@target-hostname --address <ip-address-to-connect-to>\n# If the check succeeds, the exit code will be 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue TTL in Java\nDESCRIPTION: Sets a queue expiration time of 15 minutes using the Java client. If the queue remains unused for this period, RabbitMQ will automatically delete it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-expires\", 900000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Relative Memory Breakdown via HTTP API in JSON\nDESCRIPTION: This curl command retrieves the relative memory breakdown for a RabbitMQ node using the HTTP API and formats the output as JSON. It shows the percentage of memory used by different components, rounded to integers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncurl -s -u guest:guest http://127.0.0.1:15672/api/nodes/rabbit@mercurio/memory/relative | python -m json.tool\n\n{\n    \"memory\": {\n        \"allocated_unused\": 32,\n        \"atom\": 1,\n        \"binary\": 5,\n        \"code\": 22,\n        \"connection_channels\": 2,\n        \"connection_other\": 1,\n        \"connection_readers\": 1,\n        \"connection_writers\": 1,\n        \"metrics\": 1,\n        \"mgmt_db\": 1,\n        \"mnesia\": 1,\n        \"msg_index\": 1,\n        \"other_ets\": 2,\n        \"other_proc\": 21,\n        \"other_system\": 19,\n        \"plugins\": 3,\n        \"queue_procs\": 4,\n        \"reserved_unallocated\": 0,\n        \"total\": 100\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Hash Functions in RabbitMQ\nDESCRIPTION: Command to display all supported hash functions for encoding commands in RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_hashes\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 with TLS in RabbitMQ Java\nDESCRIPTION: Demonstrates OAuth2 setup with TLS configuration for secure token endpoint communication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nSSLContext sslContext = ... // create and initialise SSLContext\n\nCredentialsProvider credentialsProvider =\n  new OAuth2ClientCredentialsGrantCredentialsProviderBuilder()\n    .tokenEndpointUri(\"http://localhost:8080/uaa/oauth/token/\")\n    .clientId(\"rabbit_client\").clientSecret(\"rabbit_secret\")\n    .grantType(\"password\")\n    .parameter(\"username\", \"rabbit_super\")\n    .parameter(\"password\", \"rabbit_super\")\n    .tls()                    // configure TLS\n      .sslContext(sslContext) // set SSLContext\n      .builder()              // back to main configuration\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Registering a Channel for StateChanged in Go\nDESCRIPTION: Illustrates how to register a channel to receive state change notifications for a RabbitMQ connection in Go. The code sets up a goroutine to handle state change events.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_66\n\nLANGUAGE: go\nCODE:\n```\nstateChanged := make(chan *rmq.StateChanged, 1)\ngo func(ch chan *rmq.StateChanged) {\n        for statusChanged := range ch {\n            // statusChanged.From from status\n            // statusChanged.To to status \n            // StateClosed has the func GetError() in case of error \n\n        }\n    }(stateChanged)\n\nconnection.NotifyStatusChange(stateChanged)\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags in RabbitMQ (Bash)\nDESCRIPTION: This command lists feature flags in RabbitMQ. It allows specifying columns to display and setting a timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nlist_feature_flags [column ...] [--timeout milliseconds]\n```\n\n----------------------------------------\n\nTITLE: Abrupt Connection Closure Log Example\nDESCRIPTION: Example log entry showing an unexpectedly closed AMQP connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n2018-06-17 06:28:40.868 [warning] <0.646.0> closing AMQP connection <0.646.0> (127.0.0.1:58667 -> 127.0.0.1:5672, vhost: '/', user: 'guest'):\\nclient unexpectedly closed TCP connection\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Discovery Retries in RabbitMQ\nDESCRIPTION: This configuration sets the number of retries and delay interval for peer discovery operations in RabbitMQ. It uses the default values for cluster_formation.discovery_retry_limit and cluster_formation.discovery_retry_interval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.discovery_retry_limit = 10\ncluster_formation.discovery_retry_interval = 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Peer Discovery in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to configure the classic peer discovery backend in RabbitMQ. It demonstrates setting up a cluster with two specific nodes on first boot.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Interval for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for the health check interval (TTL) that RabbitMQ nodes will use when registering with Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\n# default: 30\ncluster_formation.consul.svc_ttl = 40\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Exchange Message Publisher in Elixir\nDESCRIPTION: Creates a topic exchange publisher that sends messages with routing keys in the format <facility>.<severity>. The code establishes a connection, declares a topic exchange, and publishes messages with customizable routing keys and content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-elixir.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\n{topic, message} =\n  System.argv\n  |> case do\n    []            -> {\"anonymous.info\", \"Hello World!\"}\n    [message]     -> {\"anonymous.info\", message}\n    [topic|words] -> {topic, Enum.join(words, \" \")}\n  end\n\nAMQP.Exchange.declare(channel, \"topic_logs\", :topic)\n\nAMQP.Basic.publish(channel, \"topic_logs\", topic, message)\nIO.puts \" [x] Sent '[#{topic}] #{message}'\"\n\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for OAuth 2.0 in RabbitMQ (Erlang)\nDESCRIPTION: This snippet demonstrates how to configure TLS settings for OAuth 2.0 in RabbitMQ using the Erlang format. It sets the CA certificate file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_oauth2, [\n    ...\n    {key_config, [\n      {cacertfile, <<\"/opts/certs/cacert.pem\">>}\n    ]}\n  ]},\n].\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Host Protection Status Using HTTP API\nDESCRIPTION: Example showing how to check if a virtual host is protected from deletion using the HTTP API GET request, with the protection status shown in the response JSON.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL -u guest:guest -X GET http://localhost:15672/api/vhosts/vh1\n# => {\n# =>   \"name\": \"vh1\",\n# =>   \"description\": \"\",\n# =>   \"tags\": [],\n# =>   \"default_queue_type\": \"classic\",\n# =>   \"protected_from_deletion\": true,\n# =>   \"metadata\": {\n# =>     \"description\": \"\",\n# =>     \"tags\": [],\n# =>     \"default_queue_type\": \"classic\",\n# =>     \"protected_from_deletion\": true\n# =>   },\n# =>   \"tracing\": false,\n# =>   \"cluster_state\": {\n# =>     \"rabbit@sunnyside\": \"running\"\n# =>   }\n# => }\n```\n\n----------------------------------------\n\nTITLE: Restarting a Stream using RabbitMQ CLI\nDESCRIPTION: This command restarts a specified stream. It requires the virtual host and stream name as parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams restart_stream [-p <vhost>] <stream-name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Constant Authorization Query in Erlang\nDESCRIPTION: A constant query that always returns true or false, used to unconditionally grant or deny access. The example grants all users the ability to use the management plugin but makes none of them administrators.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\n{constant, Bool}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{tag_queries, [{administrator, {constant, false}},\n {management,    {constant, true}}]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Advertised Host and Port\nDESCRIPTION: Configuration to specify what host and port information a broker node returns when clients request stream topology information, which is useful in containerized environments or when proxies are involved.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nstream.advertised_host = rabbitmq-1\nstream.advertised_port = 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Username Claims in RabbitMQ OAuth 2.0\nDESCRIPTION: Configuration snippet that sets up RabbitMQ to look for user-friendly username claims in JWT tokens. It defines a resource server ID and a prioritized list of claims to check before falling back to sub or client_id.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n...\\nauth_oauth2.resource_server_id = rabbitmq\\nauth_oauth2.preferred_username_claims.1 = user_name\\nauth_oauth2.preferred_username_claims.2 = email\\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Limits for a User in RabbitMQ\nDESCRIPTION: Command to limit the maximum number of concurrent connections for the 'limited_user' to 64. This restricts how many connections this specific user can establish.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-connections\": 64}'\n```\n\n----------------------------------------\n\nTITLE: Setting Scheduler Binding Type in RabbitMQ\nDESCRIPTION: Configures how Erlang runtime schedulers are bound to CPU cores using the stbt flag or environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+stbt nnts\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SCHEDULER_BIND_TYPE=\"nnts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for Entra ID OAuth 2.0 Authentication (INI)\nDESCRIPTION: This INI configuration snippet sets up RabbitMQ to use Entra ID as an OAuth 2.0 authentication backend. It includes settings for authentication backends, OAuth client details, and JWT verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-entra-id/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = rabbit_auth_backend_oauth2\nauth_backends.2 = rabbit_auth_backend_internal\n\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = {PUT YOUR AZURE AD APPLICATION ID}\nmanagement.oauth_provider_url = https://login.microsoftonline.com/{YOUR_ENTRA_ID_TENANT_ID}\n\nauth_oauth2.resource_server_id = {PUT YOUR AZURE AD APPLICATION ID}\nauth_oauth2.additional_scopes_key = roles\nauth_oauth2.jwks_url = {PUT YOUR ENTRA ID JWKS URI VALUE}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Connection in RabbitMQ Java\nDESCRIPTION: Basic TLS setup for encrypted communication between client and broker. Note: This example doesn't include peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setHost(\"localhost\");\nfactory.setPort(5671);\n\n// Only suitable for development.\n// This code will not perform peer certificate chain verification and prone\n// to man-in-the-middle attacks.\n// See the main TLS guide to learn about peer verification and how to enable it.\nfactory.useSslProtocol();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Exchange using Queue Arguments in Java\nDESCRIPTION: Demonstrates how to declare an exchange and a queue with a dead-letter exchange specified using the 'x-dead-letter-exchange' argument in Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/dlx.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(\"some.exchange.name\", \"direct\");\n\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-dead-letter-exchange\", \"some.exchange.name\");\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to RabbitMQ Streams with Confirmation\nDESCRIPTION: Java code to send a message to a stream using a Producer, with a confirmation callback that decrements a CountDownLatch when the publish confirmation arrives asynchronously.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nproducer.send(message, confirmationStatus -> confirmLatch.countDown());\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Cluster Operator with kubectl-rabbitmq plugin\nDESCRIPTION: Uses the kubectl-rabbitmq plugin to install the RabbitMQ Cluster Operator, which creates the necessary Kubernetes resources in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq install-cluster-operator\n# namespace/rabbitmq-system created\n# customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com created\n# serviceaccount/rabbitmq-cluster-operator created\n# role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role created\n# clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role created\n# rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding created\n# clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding created\n# deployment.apps/rabbitmq-cluster-operator created\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Calculator in C#\nDESCRIPTION: Server-side implementation of the Fibonacci number calculator using recursive approach.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static int FibonacciRpc(int n)\n{\n    if (n == 0 || n == 1)\n    {\n        return n;\n    }\n\n    return FibonacciRpc(n - 1) + FibonacciRpc(n - 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Port Connectivity in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if any listener ports on the target node cannot accept a new TCP connection. This check only validates if a new TCP connection is accepted, without performing messaging protocol handshake or authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_port_connectivity\n```\n\n----------------------------------------\n\nTITLE: Configuring Mix Dependencies for AMQP\nDESCRIPTION: Elixir mix.exs configuration that adds the AMQP library as a dependency and ensures it's loaded when the application starts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef application do\n  [applications: [:amqp]]\nend\ndefp deps() do\n  [\n    {:amqp, \"~> 3.3\"},\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Statistics Database using HTTP API\nDESCRIPTION: HTTP API endpoint for resetting the statistics database on a specific node or all nodes in the cluster. The database is stored in memory and all statistics are transient.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_44\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/reset/:node\n```\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/reset\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy with All Upstreams in RabbitMQ\nDESCRIPTION: Command to apply all federation upstreams to resources matching a pattern using RabbitMQ policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream-set\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Clearing Permissions of a User in RabbitMQ (Bash and PowerShell)\nDESCRIPTION: This snippet shows how to revoke permissions from a user in a specific virtual host in RabbitMQ using the rabbitmqctl command in both Bash and PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Revokes permissions in a virtual host\nrabbitmqctl clear_permissions -p \"custom-vhost\" \"username\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Revokes permissions in a virtual host\nrabbitmqctl.bat clear_permissions -p 'custom-vhost' 'username'\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Connection Handshake Timeout\nDESCRIPTION: This configuration snippet demonstrates how to set the RabbitMQ connection handshake timeout to 20 seconds (20000 milliseconds). This may be necessary for clients running in constrained environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 20000\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 for RabbitMQ Management UI\nDESCRIPTION: Configuration snippet for enabling OAuth 2.0 in the RabbitMQ management UI, defining multiple resources with different client IDs and scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.1.id = rabbit_prod\nmanagement.oauth_resource_servers.1.client_id = rabbit_prod_mgt_ui\nmanagement.oauth_resource_servers.1.label = RabbitMQ Production\nmanagement.oauth_resource_servers.1.scopes = openid profile rabbitmq.tag:administrator\n\nmanagement.oauth_resource_servers.2.id = rabbit_dev\nmanagement.oauth_resource_servers.2.client_id = rabbit_dev_mgt_ui\nmanagement.oauth_resource_servers.2.label = RabbitMQ Development\nmanagement.oauth_resource_servers.2.scopes = openid profile rabbitmq.tag:management\n```\n\n----------------------------------------\n\nTITLE: Closing Specific Connection in RabbitMQ\nDESCRIPTION: Command to close a specific connection identified by its Erlang process ID with an explanation message\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_connection \"<rabbit@tanto.4262.0>\" \"go away\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Peer Discovery in RabbitMQ\nDESCRIPTION: Initial configuration for the AWS peer discovery backend, specifying the backend type and preparing for AWS credentials configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\n# the backend can also be specified using its module name\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Exchange Consumer in Elixir\nDESCRIPTION: Creates a topic exchange consumer that can subscribe to messages using pattern-based routing keys. The code sets up a connection, declares an exclusive queue, binds it to the topic exchange with specified routing patterns, and processes incoming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-elixir.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ReceiveLogsTopic do\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, meta} ->\n      IO.puts \" [x] Received [#{meta.routing_key}] #{payload}\"\n\n      wait_for_messages(channel)\n    end\n  end\nend\n\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\nAMQP.Exchange.declare(channel, \"topic_logs\", :topic)\n\n{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, \"\", exclusive: true)\n\nif length(System.argv) == 0 do\n  IO.puts \"Usage: mix run receive_logs_topic.exs [binding_key]...\"\n  System.halt(1)\nend\nfor binding_key <- System.argv do\n  AMQP.Queue.bind(channel, queue_name, \"topic_logs\", routing_key: binding_key)\nend\n\nAMQP.Basic.consume(channel, queue_name, nil, no_ack: true)\n\nIO.puts \" [*] Waiting for messages. To exit press CTRL+C, CTRL+C\"\n\nReceiveLogsTopic.wait_for_messages(channel)\n```\n\n----------------------------------------\n\nTITLE: Checking Port Connectivity in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if any listener ports on the target node cannot accept a new TCP connection. This check only validates if a new TCP connection is accepted, without performing messaging protocol handshake or authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_port_connectivity\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Hosts Health with rabbitmq-diagnostics\nDESCRIPTION: This snippet shows how to verify that all virtual hosts are healthy using the rabbitmq-diagnostics CLI tool. This check verifies that no virtual host dependencies have failed across all configured virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q check_virtual_hosts --node rabbit@target-hostname\n# if the check succeeded, exit code will be 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Cleanup to Only Log Warnings in RabbitMQ Cluster\nDESCRIPTION: Configuration for setting RabbitMQ to only log warnings about unknown cluster members rather than forcefully removing them. This is the default behavior and requires a compatible peer discovery plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\n# Don't remove cluster members unknown to the peer discovery backend but log\n# warnings.\n#\n# This setting can only be used if a compatible peer discovery plugin is enabled.\ncluster_formation.node_cleanup.only_log_warning = true\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages with Specific Routing Keys in RabbitMQ with Swift\nDESCRIPTION: Example showing how to emit a message with a specific composite routing key ('kern.critical') that will be routed to queues with matching binding patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-swift.md#2025-04-09_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nself.emitLogTopic(\"A critical kernel error\", routingKey: \"kern.critical\")\n```\n\n----------------------------------------\n\nTITLE: Removing RabbitMQ User Tags\nDESCRIPTION: This command removes all tags from the user 'janeway' in the RabbitMQ broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_tags janeway\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Stream TCP Listener Options Configuration\nDESCRIPTION: Complete example showing how to configure TCP listener options for the stream protocol including buffer sizes, connection backlog, TCP keepalives, and timeouts to optimize network performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n\nstream.tcp_listen_options.backlog = 4096\nstream.tcp_listen_options.recbuf  = 131072\nstream.tcp_listen_options.sndbuf  = 131072\n\nstream.tcp_listen_options.keepalive = true\nstream.tcp_listen_options.nodelay   = true\n\nstream.tcp_listen_options.exit_on_close = true\nstream.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Diagram for OAuth2 Proxy with RabbitMQ\nDESCRIPTION: A text-based diagram illustrating the OAuth 2.0 authentication flow between the browser, OAuth2 Proxy, Keycloak, and RabbitMQ. It shows the step-by-step process from initial access to token forwarding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n                    [ Keycloak ] 3. authenticate\n                      /|\\  |\n                       |   | 4. token\n        2.redirect     |  \\|/                                        [ RabbitMQ ]\n                [ Oauth2-Proxy ]       ----5. forward with token-->  [  http    ]\n                      /|\\\n                       |\n            1. rabbit_admin from a browser\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Console Logging\nDESCRIPTION: Configuration to enable JSON formatting for console logging.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener with Specific IP\nDESCRIPTION: Configures AMQP listener to use a specific IP address and the standard port 5672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 192.168.1.99:5672\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Callback Queue in RabbitMQ with Java\nDESCRIPTION: This code shows how to create a callback queue for receiving RPC responses and how to publish a message with the necessary properties. It demonstrates setting the replyTo property to tell the server where to send the response.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-java.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncallbackQueueName = channel.queueDeclare().getQueue();\n\nBasicProperties props = new BasicProperties\n                            .Builder()\n                            .replyTo(callbackQueueName)\n                            .build();\n\nchannel.basicPublish(\"\", \"rpc_queue\", props, message.getBytes());\n\n// ... then code to read a response message from the callback_queue ...\n```\n\n----------------------------------------\n\nTITLE: Memory Breakdown Analysis\nDESCRIPTION: Command to display node's memory usage by category with configurable units\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics memory_breakdown --unit gigabytes\n```\n\n----------------------------------------\n\nTITLE: Applying a Single Upstream Using Policy in RabbitMQ Federation\nDESCRIPTION: Sets a RabbitMQ policy that applies a single federation upstream named 'up-1' to exchanges or queues with names starting with 'federated.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream\":\"up-1\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Publishing Properties\nDESCRIPTION: Sets or overrides AMQP message properties when republishing messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\n{publish_properties, [\n  {delivery_mode, 2}\n]}\n```\n\n----------------------------------------\n\nTITLE: Sample OAuth 2.0 Token with Custom Scope Fields\nDESCRIPTION: Example of a JWT token with custom scope fields that can be used with the additional_scopes_key configuration. Shows both string and list formats for scope representation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n{\n \"exp\": 1618592626,\n \"iat\": 1618578226,\n \"aud\" : [\"my_id\"],\n ...\n \"scope_as_string\": \"my_id.configure:*/* my_id.read:*/* my_id.write:*/*\",\n \"scope_as_list\": [\"my_id.configure:*/*\", \"my_id.read:*/*\", \"my_id.write:*/*\"],\n ...\n }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Information for RabbitMQ on Kubernetes\nDESCRIPTION: This snippet demonstrates how to retrieve information about the RabbitMQ service on Kubernetes, including the external IP address. It uses the 'kubectl get svc' command to display details of all services in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc\n```\n\n----------------------------------------\n\nTITLE: Declaring Exchanges and Queues in RabbitMQ .NET Client\nDESCRIPTION: Demonstrates how to declare an exchange and queue, then bind them together with a routing key. This example creates a non-durable, non-autodelete direct exchange and a non-durable, non-autodelete, non-exclusive queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.ExchangeDeclareAsync(exchangeName, ExchangeType.Direct);\nawait channel.QueueDeclareAsync(queueName, false, false, false, null);\nawait channel.QueueBindAsync(queueName, exchangeName, routingKey, null);\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Name Suffixes with Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for appending a domain suffix to node names retrieved from Consul, useful in environments with DNS conventions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using node name\ncluster_formation.consul.svc_addr_use_nodename = true\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n# append a suffix (node.rabbitmq.example.local) to node names retrieved from Consul\ncluster_formation.consul.domain_suffix = example.local\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue in RabbitMQ\nDESCRIPTION: Code to declare a queue named 'hello' in RabbitMQ. This ensures the queue exists before attempting to publish or consume messages. Queue declaration is idempotent, meaning it can be executed multiple times safely.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchannel.queue_declare(queue='hello')\n```\n\n----------------------------------------\n\nTITLE: Growing Queue Replicas in RabbitMQ\nDESCRIPTION: Command to add a new replica on a specified node for matching quorum queues. Can target all or even-numbered replicas using selectors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-queues.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues grow \"rabbit@newhost\" \"all\" --vhost-pattern \"a-vhost\" --queue-pattern \".*\"\n```\n\n----------------------------------------\n\nTITLE: Running Topic Exchange Consumer Commands\nDESCRIPTION: Example commands for running the topic exchange consumer with different routing patterns. Shows how to receive all logs, logs from specific facilities, and logs with specific severity levels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-elixir.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs_topic.exs \"#\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs_topic.exs \"kern.*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs_topic.exs \"*.critical\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs_topic.exs \"kern.*\" \"*.critical\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix run emit_log_topic.exs \"kern.critical\" \"A critical kernel error\"\n```\n\n----------------------------------------\n\nTITLE: Bulk Permission Operations in RabbitMQ\nDESCRIPTION: Shows how to perform bulk permission operations across multiple virtual hosts in RabbitMQ. Examples are provided for both Bash and PowerShell, demonstrating how to grant a user permissions to all virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Assumes a Linux shell.\n# Grants a user permissions to all virtual hosts.\nfor v in $(rabbitmqctl list_vhosts --silent); do rabbitmqctl set_permissions -p $v \"a-user\" \".*\" \".*\" \".*\"; done\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_vhosts --silent | %{ rabbitmqctl.bat set_permissions -p $_ 'a-user' '.*' '.*' '.*' }\n```\n\n----------------------------------------\n\nTITLE: Entering maintenance mode in rabbitmq-upgrade\nDESCRIPTION: Command to put a node in maintenance mode where it won't serve client traffic or host queue leader replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndrain\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Queue Mirror Addition Log\nDESCRIPTION: Example log entry showing when a new queue mirror is added to a mirrored queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-03-01 07:26:33.121 [info] <0.1360.0> Mirrored queue 'two.replicas' in vhost '/': Adding mirror on node hare@warp10: <37324.1148.0>\n```\n\n----------------------------------------\n\nTITLE: Configuring Durable Queues in RabbitMQ with Ruby\nDESCRIPTION: Demonstrates how to declare durable queues that survive RabbitMQ restarts, including proper queue naming and configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nchannel.queue('hello', durable: true)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nchannel.queue('task_queue', durable: true)\n```\n\n----------------------------------------\n\nTITLE: Checking If Node Is Quorum Critical in RabbitMQ (Bash)\nDESCRIPTION: This command checks if shutting down the target node would leave any quorum queues or streams without an online majority. It exits with a non-zero status if there are quorum-critical resources on the node, signaling it shouldn't be removed from the cluster yet.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# exits with a non-zero status if shutting down target node would leave some quorum queues\n# or streams without an online majority\nrabbitmq-diagnostics check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Limit in Java\nDESCRIPTION: Configures a maximum length of 10 messages for a queue using the Java client. When the queue reaches this limit, older messages at the front of the queue will be dropped to make room for new ones.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-max-length\", 10);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Event Exchange Plugin\nDESCRIPTION: This command enables the rabbitmq_event_exchange plugin, which allows clients to consume internal RabbitMQ events. The plugin requires no additional configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/event-exchange.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_event_exchange\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connections Limit via CLI in RabbitMQ\nDESCRIPTION: This command sets the maximum number of connections a user can open to 10 using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/user-limits.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits user1 '{\"max-connections\": 10}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Receiver with Direct Exchange in JavaScript\nDESCRIPTION: Complete implementation of a log receiver that subscribes to specific severities using a direct exchange with the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-javascript.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\nvar args = process.argv.slice(2);\n\nif (args.length == 0) {\n  console.log(\"Usage: receive_logs_direct.js [info] [warning] [error]\");\n  process.exit(1);\n}\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = 'direct_logs';\n\n    channel.assertExchange(exchange, 'direct', {\n      durable: false\n    });\n\n    channel.assertQueue('', {\n      exclusive: true\n      }, function(error2, q) {\n        if (error2) {\n          throw error2;\n        }\n      console.log(' [*] Waiting for logs. To exit press CTRL+C');\n\n      args.forEach(function(severity) {\n        channel.bindQueue(q.queue, exchange, severity);\n      });\n\n      channel.consume(q.queue, function(msg) {\n        console.log(\" [x] %s: '%s'\", msg.fields.routingKey, msg.content.toString());\n      }, {\n        noAck: true\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client in Elixir with RabbitMQ\nDESCRIPTION: This snippet shows the client-side implementation of an RPC system using RabbitMQ in Elixir. It sets up a connection, publishes RPC requests, and waits for responses using correlation IDs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-elixir.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule FibonacciRpcClient do\n  def wait_for_messages(_channel, correlation_id) do\n    receive do\n      {:basic_deliver, payload, %{correlation_id: ^correlation_id}} ->\n        {n, _} = Integer.parse(payload)\n        n\n    end\n  end\n  def call(n) do\n    {:ok, connection} = AMQP.Connection.open\n    {:ok, channel} = AMQP.Channel.open(connection)\n\n    {:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel,\n                                                     \"\",\n                                                     exclusive: true)\n    AMQP.Basic.consume(channel, queue_name, nil, no_ack: true)\n    correlation_id =\n      :erlang.unique_integer\n      |> :erlang.integer_to_binary\n      |> Base.encode64\n\n    request = to_string(n)\n    AMQP.Basic.publish(channel,\n                       \"\",\n                       \"rpc_queue\",\n                       request,\n                       reply_to: queue_name,\n                       correlation_id: correlation_id)\n\n    FibonacciRpcClient.wait_for_messages(channel, correlation_id)\n  end\nend\n\nnum =\n  case System.argv do\n    []    -> 30\n    param ->\n      {x, _} =\n        param\n        |> Enum.join(\" \")\n        |> Integer.parse\n      x\n  end\n\nIO.puts \" [x] Requesting fib(#{num})\"\nresponse = FibonacciRpcClient.call(num)\nIO.puts \" [.] Got #{response}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Access Token for RabbitMQ Cluster Formation\nDESCRIPTION: Specifies the path to the Kubernetes API access token file. This token is used for authenticating RabbitMQ with the Kubernetes API for peer discovery operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n# default value is /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Encoded Slashes for RabbitMQ HTTP API\nDESCRIPTION: Apache configuration to enable encoded slashes in URIs when using the default RabbitMQ virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_24\n\nLANGUAGE: apacheconf\nCODE:\n```\n# required only if default RabbitMQ virtual host is used\nAllowEncodedSlashes On\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Cluster and Running perf-test in Kubernetes\nDESCRIPTION: This snippet demonstrates how to retrieve connection credentials and address for a RabbitMQ cluster in Kubernetes, and then run the perf-test application to perform load testing. It uses kubectl commands to extract information from Kubernetes secrets and services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nusername=\"$(kubectl get secret hello-world-default-user -o jsonpath='{.data.username}' | base64 --decode)\"\npassword=\"$(kubectl get secret hello-world-default-user -o jsonpath='{.data.password}' | base64 --decode)\"\nservice=\"$(kubectl get service hello-world -o jsonpath='{.spec.clusterIP}')\"\nkubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri amqp://$username:$password@$service\n\n# pod/perf-test created\n```\n\n----------------------------------------\n\nTITLE: Setting Up Message Sending and Receiving in viewDidLoad\nDESCRIPTION: Calls the send and receive methods from the viewDidLoad lifecycle method to initiate the messaging process when the view controller loads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-swift.md#2025-04-09_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.send()\n    self.receive()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval\nDESCRIPTION: Configuration setting for adjusting the statistics collection interval to reduce CPU and memory usage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 30 seconds\ncollect_statistics_interval = 30000\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Service Status\nDESCRIPTION: Command to check the status of the RabbitMQ service as reported by the system service manager. This displays detailed information about the running service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# check on service status as observed by service manager\nsudo service rabbitmq-server status\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication with rabbitmqctl in Bash\nDESCRIPTION: This command uses rabbitmqctl to test authentication for a given username and password pair. It's useful for troubleshooting authentication issues from the command line.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl authenticate_user \"a-username\" \"a/password\"\n```\n\n----------------------------------------\n\nTITLE: Etcd Backend Configuration\nDESCRIPTION: Basic configuration for using etcd as peer discovery backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Memory Threshold with Units\nDESCRIPTION: Configures an absolute memory limit using memory units. The examples show how to set limits using MiB, Gi, and Ti units, providing a more readable configuration format than raw bytes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1024MiB\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 4Gi\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1Ti\n```\n\n----------------------------------------\n\nTITLE: Emitting a Log with Specific Routing Key using Topic Exchange in RabbitMQ with Objective-C\nDESCRIPTION: This snippet demonstrates how to emit a log with a specific routing key (in this case, 'kern.critical') using a topic exchange in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n[self emitLogTopic:@\"A critical kernel error\" routingKey:@\"kern.critical\"];\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scope Field in RabbitMQ\nDESCRIPTION: This configuration sets a custom JWT field to look for RabbitMQ scopes instead of using the standard scope field. The example sets 'extra_scope' as the additional key to search for scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.additional_scopes_key = extra_scope\n...\n```\n\n----------------------------------------\n\nTITLE: Disabling Basic Auth for Management HTTP API\nDESCRIPTION: Configuration to disable basic authentication for the management HTTP API, forcing the use of OAuth 2.0 token-based authentication only.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n...\nmanagement.disable_basic_auth = true\n...\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Node Data Directory Location using rabbitmq-diagnostics\nDESCRIPTION: Command to retrieve the node data directory path from a running RabbitMQ instance using the rabbitmq-diagnostics tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/backup.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status | grep -A 2 -B 2 \"Node data directory\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Reverse Proxy for RabbitMQ Management UI\nDESCRIPTION: This snippet shows the minimum necessary Apache directives to set up a reverse proxy for the RabbitMQ management web UI, assuming it's running on the default port 15672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\nAllowEncodedSlashes      NoDecode\nProxyPass         \"/api\" http://localhost:15672/api nocanon\nProxyPass         \"/\"    http://localhost:15672/\nProxyPassReverse  \"/\"    http://localhost:15672/\n```\n\n----------------------------------------\n\nTITLE: Check for Global QoS Channels in Bash\nDESCRIPTION: Command to list channels with global prefetch count greater than zero, which identifies channels using global QoS - a feature not supported by quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels pid name global_prefetch_count | sed -n '/\\t0$/!p'\n```\n\n----------------------------------------\n\nTITLE: Inter-node TLS Configuration File Example on Linux\nDESCRIPTION: Example of an inter_node_tls.config file that defines TLS settings for both server and client connections. It specifies certificate paths, enables peer verification, and requires peers to present certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {server, [\n    {cacertfile, \"/full/path/to/ca_certificate.pem\"},\n    {certfile,   \"/full/path/to/server_certificate.pem\"},\n    {keyfile,    \"/full/path/to/server_key.pem\"},\n    {password,   \"password-if-keyfile-is-encrypted\"},\n    {secure_renegotiate, true},\n    {verify, verify_peer},\n    {fail_if_no_peer_cert, true}\n  ]},\n  {client, [\n    {cacertfile, \"/full/path/to/ca_certificate.pem\"},\n    {certfile,   \"/full/path/to/client_certificate.pem\"},\n    {keyfile,    \"/full/path/to/client_key.pem\"},\n    {password,   \"password-if-keyfile-is-encrypted\"},\n    {secure_renegotiate, true},\n    {verify, verify_peer}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Node Data Directory Location using rabbitmq-diagnostics\nDESCRIPTION: Command to retrieve the node data directory path from a running RabbitMQ instance using the rabbitmq-diagnostics tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/backup.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status | grep -A 2 -B 2 \"Node data directory\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous Membership Reconciliation in rabbitmq.conf\nDESCRIPTION: Configuration parameters in rabbitmq.conf that control the behavior of continuous membership reconciliation for quorum queues, including enabling the feature, setting target group size, enabling auto-removal of members, and configuring intervals.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquorum_queue.continuous_membership_reconciliation.enabled = false\nquorum_queue.continuous_membership_reconciliation.target_group_size = 3\nquorum_queue.continuous_membership_reconciliation.auto_remove = false\nquorum_queue.continuous_membership_reconciliation.interval = 3600000\nquorum_queue.continuous_membership_reconciliation.trigger_interval = 10000\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fanout Exchange in RabbitMQ with Java\nDESCRIPTION: Creates a fanout exchange named 'logs' which will broadcast all messages to all bound queues. The fanout exchange type is used for implementing publish/subscribe patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(\"logs\", \"fanout\");\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Variable Expansion for Topic Permissions\nDESCRIPTION: Example JWT token that demonstrates variable expansion in scope permissions. This token grants user 'bob' write permissions on exchanges with names starting with 'x-prod-' and routing keys starting with 'u-bob-' in the 'prod' vhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\" : \"bob\",\n  \"scope\" : [ \"rabbitmq.write:*/x-{vhost}-*/u-{sub}-*\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing RabbitMQ Cluster Node Type\nDESCRIPTION: This command changes the type of a cluster node between 'disc' and 'ram'. The node must be stopped for this operation to succeed, and when converting to a RAM node, it must not be the only disc node in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl change_cluster_node_type disc\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Maximum in .NET Client\nDESCRIPTION: Example of setting maximum channel limit using RabbitMQ .NET client's ConnectionFactory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\n// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured\n// to use a higher limit, otherwise the server's limit will be used.\ncf.RequestedChannelMax = 32;\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Buffer Size for MQTT Connections\nDESCRIPTION: Configuration settings for optimizing TCP buffer size for MQTT connections, setting buffers to 32 KiB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.linger.on      = true\nmqtt.tcp_listen_options.linger.timeout = 0\nmqtt.tcp_listen_options.sndbuf  = 32768\nmqtt.tcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Implementing a Topic Exchange Message Consumer in Python\nDESCRIPTION: This script sets up a RabbitMQ consumer that binds to a topic exchange with specified pattern-based binding keys. It demonstrates how to receive messages filtered by topic patterns using wildcards (* and #).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-python.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='topic_logs', exchange_type='topic')\n\nresult = channel.queue_declare('', exclusive=True)\nqueue_name = result.method.queue\n\nbinding_keys = sys.argv[1:]\nif not binding_keys:\n    sys.stderr.write(\"Usage: %s [binding_key]...\\n\" % sys.argv[0])\n    sys.exit(1)\n\nfor binding_key in binding_keys:\n    channel.queue_bind(\n        exchange='topic_logs', queue=queue_name, routing_key=binding_key)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] {method.routing_key}:{body}\")\n\n\nchannel.basic_consume(\n    queue=queue_name, on_message_callback=callback, auto_ack=True)\n\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol for Web MQTT\nDESCRIPTION: Configuration to enable the proxy protocol support for Web MQTT clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Top-Level Shovel Definition Structure\nDESCRIPTION: Demonstrates the structure of an individual shovel definition including source, destination, acknowledgement mode and reconnection delay settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{shovel_name, [\n  {source, [\n    %% protocol-specific source configuration goes here\n  ]},\n  {destination, [\n    %% protocol-specific destination configuration goes here\n  ]},\n  %% 'confirm' is the default acknowledgement mode\n  {ack_mode, confirm},\n  %% reconnect with a 5 second delay\n  {reconnect_delay, 5}\n]}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 with Static Signing Keys in RabbitMQ\nDESCRIPTION: Configuration for using a static signing key file instead of dynamically retrieving keys from a JWKS endpoint. This approach is useful in environments where dynamic key retrieval is not possible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.signing_keys.a-key-ID = /path-to-signing-key-pem-file\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts with Metadata using rabbitmqctl\nDESCRIPTION: Lists all virtual hosts with their metadata including name, description, tags, and default queue type. The formatter is set to 'pretty_table' for better readability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter=pretty_table list_vhosts name description tags default_queue_type\n```\n\n----------------------------------------\n\nTITLE: Waiting for RabbitMQ Startup Using rabbitmqctl\nDESCRIPTION: Command to wait for the RabbitMQ application to start on the target node. Used to ensure the node is fully operational before proceeding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl await_startup\n```\n\n----------------------------------------\n\nTITLE: Optimized RabbitMQ Stream Publisher with Deduplication (Java)\nDESCRIPTION: This Java code snippet shows an optimized publisher that uses the last publishing ID to avoid re-publishing existing messages. It demonstrates how to query the broker for the last publishing ID and use it as a starting point for new messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment.producerBuilder()\n  .stream(\"deduplication-stream\")\n  .name(\"app-1\") // provide a name for the producer\n  .confirmTimeout(Duration.ZERO) // to never stop retrying\n  .build();\nlong start = producer.getLastPublishingId() + 1; // get last publishing ID and add 1\nint messageCount = 20;\nrecords(start, messageCount).forEach(record -> {\n  Message message = producer.messageBuilder()\n    .publishingId(record.id()) // set the publishing ID\n    .addData(record.content().getBytes(StandardCharsets.UTF_8))\n    .build();\n  producer.send(message, confirmationStatus -> latch.countDown());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Binding for Authorization Queries in RabbitMQ\nDESCRIPTION: Configuration for specifying username and password for LDAP binding used during authorization queries in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.other_bind.user_dn = a-username\nauth_ldap.other_bind.password = a-password\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocked Connection Notifications in .NET\nDESCRIPTION: Shows how to implement connection blocking event handlers in .NET using the RabbitMQ client. The code demonstrates registering event handlers for both ConnectionBlocked and ConnectionUnblocked events.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/connection-blocked.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n  public void HandleBlocked(object sender, ConnectionBlockedEventArgs args)\n  {\n      // Connection is now blocked\n  }\n\n  public void HandleUnblocked(object sender, EventArgs args)\n  {\n      // Connection is now unblocked\n  }\n\nConn.ConnectionBlocked   += HandleBlocked;\nConn.ConnectionUnblocked += HandleUnblocked;\n```\n\n----------------------------------------\n\nTITLE: Removing Node from Cluster\nDESCRIPTION: Demonstrates the process of removing a node from a RabbitMQ cluster, including stopping the node and using forget_cluster_node command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit3\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit3 ...done.\n\n# on rabbit2\nrabbitmqctl forget_cluster_node rabbit@rabbit3\n# => Removing node rabbit@rabbit3 from cluster ...\n\n# on rabbit3\nrabbitmqctl reset\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit3 ...\n\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n# => [{nodes,[{disc,[rabbit@rabbit3]}]},{running_nodes,[rabbit@rabbit3]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for TLS-only Connections\nDESCRIPTION: This example shows how to deactivate non-TLS connections and configure RabbitMQ to accept only TLS-enabled client connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# deactivates non-TLS listeners, only TLS-enabled (activated) clients will be able to connect\nlisteners.tcp = none\n\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Reverse DNS Lookups in RabbitMQ\nDESCRIPTION: This snippet shows how to explicitly disable reverse DNS lookups for client IP addresses in RabbitMQ. This can be beneficial if reverse DNS lookups are causing increased latency when accepting client connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nreverse_dns_lookups = false\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for STOMP Connections\nDESCRIPTION: Configuration for enabling TLS-secured STOMP connections. This sets up both a standard TCP listener on port 61613 and a TLS-enabled listener on port 61614.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile = /path/to/tls/ca_certificate.pem\nssl_options.certfile   = /path/to/tls/server_certificate.pem\nssl_options.keyfile    = /path/to/tls/server_key.pem\nssl_options.verify     =  verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nstomp.listeners.tcp.1 = 61613\n# default TLS-enabled port for STOMP connections\nstomp.listeners.ssl.1 = 61614\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Global Runtime Parameter in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/global-parameters/{name} endpoint to set a complex global runtime parameter. This example sets cluster tags with multiple properties.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cluster_tags\",\n  \"value\": {\n    \"environment\": \"production\",\n    \"az\": \"us-east-3\",\n    \"region\": \"us-east\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Partition Handling Configuration\nDESCRIPTION: Example configuration for pause_if_all_down partition handling mode with specific node settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/partitions.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncluster_partition_handling = pause_if_all_down\n\n## Recovery strategy. Can be either 'autoheal' or 'ignore'\ncluster_partition_handling.pause_if_all_down.recover = ignore\n\n## Node names to check\ncluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@myhost1\ncluster_partition_handling.pause_if_all_down.nodes.2 = rabbit@myhost2\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Stream Projects using .NET CLI\nDESCRIPTION: These shell commands create new console projects for the sender and receiver, and add the RabbitMQ.Stream.Client package dependency.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new console --name OffsetTrackingSend\nmv OffsetTrackingSend/Program.cs OffsetTrackingSend/OffsetTrackingSend.cs\ndotnet new console --name OffsetTrackingReceive\nmv OffsetTrackingReceive/Program.cs OffsetTrackingReceive/OffsetTrackingReceive.cs\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd OffsetTrackingSend\ndotnet add package RabbitMQ.Stream.Client \ncd ../OffsetTrackingReceive\ndotnet add package RabbitMQ.Stream.Client \ncd ..\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with TTL in Java\nDESCRIPTION: This Java code example demonstrates how to publish a message with a 60-second TTL using the expiration property.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nbyte[] messageBodyBytes = \"Hello, world!\".getBytes();\nAMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()\n                                   .expiration(\"60000\")\n                                   .build();\nchannel.basicPublish(\"my-exchange\", \"routing-key\", properties, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Resource Servers in RabbitMQ OAuth 2.0\nDESCRIPTION: This snippet demonstrates how to configure two resource servers ('prod' and 'dev') using the same identity provider in RabbitMQ's OAuth 2.0 setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = https://my-idp.com/\nauth_oauth2.resource_servers.1.id = prod\nauth_oauth2.resource_servers.2.id = dev\n```\n\n----------------------------------------\n\nTITLE: Advanced Value Encoding with RabbitMQ CLI\nDESCRIPTION: Example of encoding a value with custom cipher, hash and iteration settings for enhanced security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '<<\"guest\">>' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Cipher Suites in RabbitMQ (New Config Format)\nDESCRIPTION: This snippet demonstrates how to configure TLS cipher suites, versions, and other SSL options in RabbitMQ using the new configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = false\n\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n\n# these MUST be disabled if TLSv1.3 is used\nssl_options.honor_cipher_order = true\nssl_options.honor_ecc_order    = true\n```\n\n----------------------------------------\n\nTITLE: Advanced Authentication Backend Configuration in RabbitMQ\nDESCRIPTION: This advanced configuration checks LDAP first for authentication, uses internal database for authorization, and falls back to internal database for both if LDAP fails.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = ldap\nauth_backends.1.authz = internal\nauth_backends.2       = internal\n```\n\n----------------------------------------\n\nTITLE: Awaiting Cluster Node Count\nDESCRIPTION: Waits for a specified number of nodes to join the RabbitMQ cluster before proceeding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl await_online_nodes 2\n```\n\n----------------------------------------\n\nTITLE: Stopping Performance Test Applications\nDESCRIPTION: Commands to stop the producer and consumer performance test applications running with OAuth authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-perftest-producer PRODUCER=producer_with_roles\nmake stop-perftest-consumer CONSUMER=consumer_with_roles\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 5672 with lsof (IPv4)\nDESCRIPTION: Uses lsof to display OS processes that listen on port 5672 using IPv4. This command helps identify if RabbitMQ or any other process is listening on the standard AMQP port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i4TCP:5672 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Positive Acknowledgement in Java RabbitMQ Client\nDESCRIPTION: Demonstrates how to positively acknowledge a single delivery using the Java client for RabbitMQ. The message will be discarded after acknowledgement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// this example assumes an existing channel instance\n\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge a single delivery, the message will\n             // be discarded\n             channel.basicAck(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Endpoint for RabbitMQ Cluster Formation\nDESCRIPTION: Sets up the Kubernetes API endpoint for RabbitMQ cluster formation, including the host, port, and scheme. This allows RabbitMQ to communicate with the Kubernetes API for peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n# 443 is used by default\ncluster_formation.k8s.port = 443\n# https is used by default\ncluster_formation.k8s.scheme = https\n```\n\n----------------------------------------\n\nTITLE: Creating User with Password in RabbitMQ API\nDESCRIPTION: JSON payload example for the PUT /api/users/{name} endpoint that creates a user with a plaintext password and administrator tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"password\":\"secret\",\"tags\":\"administrator\"}\n```\n\n----------------------------------------\n\nTITLE: Streaming RabbitMQ Logs for a Specific Duration\nDESCRIPTION: Streams logs from a running RabbitMQ node for a specified period of time in seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_tail_stream --duration 60\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Connection and Queue for Consumer\nDESCRIPTION: Establishes connection to RabbitMQ server and declares the same queue as the producer for message consumption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nconn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\nfailOnError(err, \"Failed to connect to RabbitMQ\")\ndefer conn.Close()\n\nch, err := conn.Channel()\nfailOnError(err, \"Failed to open a channel\")\ndefer ch.Close()\n\nq, err := ch.QueueDeclare(\n  \"hello\", // name\n  false,   // durable\n  false,   // delete when unused\n  false,   // exclusive\n  false,   // no-wait\n  nil,     // arguments\n)\nfailOnError(err, \"Failed to declare a queue\")\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management API with RAR Token (Bash)\nDESCRIPTION: This command demonstrates how to use curl to access the RabbitMQ Management API with a Rich Authorization Request token. It uses a custom script to generate the token from a JSON file and signing keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=http://localhost:15672/api/overview TOKEN=$(bin/jwt_token rar-token.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Parameters for RabbitMQ Node Communication (Linux)\nDESCRIPTION: Basic configuration for enabling TLS encryption between RabbitMQ nodes using direct command line arguments. Sets up SSL path and configures server TLS options including certificate paths and security settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nERL_SSL_PATH=\"/usr/lib64/erlang/lib/ssl-9.4/ebin\"\n\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n\nRABBITMQ_CTL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Maximum in Java Client\nDESCRIPTION: Example of setting maximum channel limit using RabbitMQ Java client's ConnectionFactory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\n// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured\n// to use a higher limit, otherwise the server's limit will be used.\ncf.setRequestedChannelMax(32);\n```\n\n----------------------------------------\n\nTITLE: Running Log Receiver with Severity Filters\nDESCRIPTION: Command line examples for running the receiver with different severity level filters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-dotnet.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ReceiveLogsDirect\ndotnet run warning error > logs_from_rabbit.log\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ReceiveLogsDirect\ndotnet run info warning error\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd EmitLogDirect\ndotnet run error \"Run. Run. Or it will explode.\"\n```\n\n----------------------------------------\n\nTITLE: Querying Log Location with rabbitmq-diagnostics in CMD\nDESCRIPTION: Command to find the current log file location using the rabbitmq-diagnostics CLI tool in Windows Command Prompt.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmq-diagnostics.bat -q log_location\n```\n\n----------------------------------------\n\nTITLE: Declaring Delayed Message Exchange in Java\nDESCRIPTION: Java code to declare an exchange with the x-delayed-message type, specifying the underlying exchange routing type using the x-delayed-type argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2015-04-16-scheduling-messages-with-rabbitmq/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// ... elided code ...\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-delayed-type\", \"direct\");\nchannel.exchangeDeclare(\"my-exchange\", \"x-delayed-message\", true, false, args);\n// ... more code ...\n```\n\n----------------------------------------\n\nTITLE: Querying Shovel Status via RabbitMQ CLI\nDESCRIPTION: Command to check the status of all Shovels using the rabbitmqctl CLI tool. Returns information about name, type, status, and last state change timestamp for each Shovel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# use the -n switch to target a remote node\\nrabbitmqctl shovel_status\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Priority in RabbitMQ using Java\nDESCRIPTION: This code snippet demonstrates how to set a priority for a consumer when consuming messages from a RabbitMQ queue. It uses the 'x-priority' argument in the basicConsume method to assign a priority of 10 to the consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-priority.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-priority\", 10);\nchannel.basicConsume(\"my-queue\", false, args, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener Port\nDESCRIPTION: Basic configuration for changing the default Stream plugin listener port from 5552 to 12345 using rabbitmq.conf configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 12345\n```\n\n----------------------------------------\n\nTITLE: Protocol Listener Check Command - Bash\nDESCRIPTION: Validates if the node has a listener for a specified protocol\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_protocol_listener mqtt\n```\n\n----------------------------------------\n\nTITLE: Implementing a Topic Exchange Message Producer in Python\nDESCRIPTION: This script creates a connection to RabbitMQ, declares a topic exchange, and publishes messages with topic-based routing keys. It accepts command-line arguments to specify the routing key and message content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-python.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='topic_logs', exchange_type='topic')\n\nrouting_key = sys.argv[1] if len(sys.argv) > 2 else 'anonymous.info'\nmessage = ' '.join(sys.argv[2:]) or 'Hello World!'\nchannel.basic_publish(\n    exchange='topic_logs', routing_key=routing_key, body=message)\nprint(f\" [x] Sent {routing_key}:{message}\")\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shovel for Message Draining in RabbitMQ\nDESCRIPTION: Sets up a dynamic shovel to move messages from a queue in the 'blue' cluster to the same queue in the 'green' cluster. This actively drains the backlog rather than just federating consumption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/blue-green-upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter shovel drain-blue \\\n'{\"src-protocol\": \"amqp091\", \"src-uri\": \"amqp://node-in-blue-cluster\", \\\n\"src-queue\": \"queue1\", \"dest-protocol\": \"amqp091\", \\\n\"dest-uri\": \"amqp://\", \"dest-queue\": \"queue1\"}'\n```\n\n----------------------------------------\n\nTITLE: Checking Linux Readahead Value\nDESCRIPTION: Command to inspect the current readahead value for a block device on Linux systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo blockdev --getra /dev/sda\n```\n\n----------------------------------------\n\nTITLE: Listing Unacknowledged Messages in RabbitMQ with rabbitmqctl\nDESCRIPTION: Command to debug missing acknowledgments by showing the number of unacknowledged messages in RabbitMQ queues. Useful for identifying when messages aren't being properly acknowledged by consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Advertised Host and Port\nDESCRIPTION: Configuration for specifying what host and port information nodes return when clients request stream topology. This is essential for deployments with proxies or when running in containerized environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nstream.advertised_host = rabbitmq-1\nstream.advertised_port = 12345\n```\n\n----------------------------------------\n\nTITLE: Updating APT Package Cache\nDESCRIPTION: Updates the local package cache to ensure the latest package information is available.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n```\n\n----------------------------------------\n\nTITLE: Joining a Node to a RabbitMQ Cluster in Bash\nDESCRIPTION: Commands to stop a RabbitMQ node, reset its data, join it to an existing cluster, and restart it. This process removes all existing data from the joining node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit2\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit2 ...done.\n\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit2 ...\n\nrabbitmqctl join_cluster rabbit@rabbit1\n# => Clustering node rabbit@rabbit2 with [rabbit@rabbit1] ...done.\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit2 ...done.\n```\n\n----------------------------------------\n\nTITLE: Boot Status Check Command - Bash\nDESCRIPTION: Reports if RabbitMQ application is currently in booting state\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics is_booting\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Status Before Node Shutdown in PowerShell\nDESCRIPTION: PowerShell command to check if shutting down the node would cause any quorum loss for internal components, quorum queues or stream queues. Exits with a non-zero code if shutting down the node would be problematic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# exits with a non-zero code if any of the internal components, quorum queues or stream queues\n# will lose online quorum should the target node be shut down;\n# additionally, it will print which components and/or queues are affected\nrabbitmq-diagnostics.bat check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Configuring Scope Aliases in RabbitMQ\nDESCRIPTION: This configuration maps custom OAuth scopes to RabbitMQ-compliant scopes. The example maps 'api://rabbitmq:Read.All' to 'rabbitmq.read:*/*', allowing the use of custom scope formats from authorization servers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_20\n\nLANGUAGE: erl\nCODE:\n```\n{rabbitmq_auth_backend_oauth2, [\n %%...,\n\t{scope_aliases, #{\n\t\t<<\"api://rabbitmq:Read.All\">>      => [<<\"rabbitmq.read:*/*\">>],\n\t  ...\n\t},\n\t%%...\n]}\n```\n\n----------------------------------------\n\nTITLE: Disabling Operator Policy Changes in Configuration\nDESCRIPTION: Configuration setting to disable modification of operator policies via the HTTP API and Web UI, making operator policies read-only for all users.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.restrictions.operator_policy_changes.disabled = true\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Statistics Database on All Nodes\nDESCRIPTION: This command resets the entire statistics database on all nodes in the cluster using the rabbitmqctl command-line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'rabbit_mgmt_storage:reset_all().'\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connection Limit in RabbitMQ Virtual Host\nDESCRIPTION: Command to limit the total number of concurrent client connections in a specific virtual host. Uses rabbitmqctl with a JSON configuration to set the max-connections parameter to a specific value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-connections\": 256}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Worker Process in Elixir for RabbitMQ\nDESCRIPTION: This module defines a worker that processes messages from a RabbitMQ queue. It simulates work by sleeping for a time proportional to the number of dots in the message (1 second per dot). The worker recursively waits for messages in a receive loop.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Worker do\n  def wait_for_messages(channel) do\n    receive do\n      {:basic_deliver, payload, meta} ->\n        IO.puts \" [x] Received #{payload}\"\n        payload\n        |> to_char_list\n        |> Enum.count(fn x -> x == ?. end)\n        |> Kernel.*(1000)\n        |> :timer.sleep\n        IO.puts \" [x] Done.\"\n\n        wait_for_messages(channel)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Service with service Command\nDESCRIPTION: Commands to start, stop, and check status of the RabbitMQ service using the service command. These are standard service management commands for Linux systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# stop the local node\nsudo service rabbitmq-server stop\n\n# start it back\nsudo service rabbitmq-server start\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitmqCluster Replicas\nDESCRIPTION: This YAML snippet demonstrates how to specify the number of replicas for a RabbitmqCluster. It's recommended to use odd numbers for the replica count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  replicas: 3\n```\n\n----------------------------------------\n\nTITLE: Implementing a Worker Consumer in Python for RabbitMQ\nDESCRIPTION: This code snippet defines a callback function for a RabbitMQ worker (worker.py) that processes messages from a queue. It simulates work by sleeping for one second per dot in the message, demonstrating how time-consuming tasks can be handled by worker processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body.decode()}\")\n    time.sleep(body.count(b'.'))\n    print(\" [x] Done\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding between Exchange and Queue in RabbitMQ\nDESCRIPTION: Kubernetes manifest for creating a binding between an existing exchange named 'test' and an existing queue named 'test' using the RabbitMQ Messaging Topology Operator. The binding is associated with a RabbitMQ cluster named 'example-rabbit'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Binding\nmetadata:\n  name: binding\n  namespace: rabbitmq-system\nspec:\n  source: test # an existing exchange\n  destination: test # an existing queue\n  destinationType: queue # can be 'queue' or 'exchange'\n  rabbitmqClusterReference:\n    name: example-rabbit\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue using PUT /api/queues/{vhost}/{name}\nDESCRIPTION: This JSON payload is used to declare a queue. It specifies the auto-delete flag, durability, additional arguments, and the node where the queue should be created.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_delete\": false,\n  \"durable\": true,\n  \"arguments\": {},\n  \"node\": \"rabbit@node.hostname\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests for Consumer Priority and Single Active Consumer in RabbitMQ\nDESCRIPTION: This bash script demonstrates how to use perf-test to set up and test the new consumer priority feature with single active consumer in RabbitMQ 4.0. It publishes messages, starts consumers with different priorities, and observes the behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-28-quorum-queues-in-4.0/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Publish 5000 messages to have a backlog (perf-test will declare a quorum queue `qq-sac`)\nperf-test --quorum-queue --queue qq-sac --pmessages 5000 --confirm 100 -qa x-single-active-consumer=true --consumers 0\n# Start a consumer with the default priority and prefetch of 1000; consume ~10 msgs/s\nperf-test --producers 0 --predeclared --queue qq-sac --consumer-latency 100000 --qos 1000\n# In another window, some time after starting the first consumer, start a higher priority consumer\nperf-test --producers 0 --predeclared --queue qq-sac --consumer-latency 100000 --qos 1000 --consumer-args x-priority=10\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message in Java\nDESCRIPTION: Example of creating and publishing a message in Java with the RabbitMQ client. It demonstrates how to handle the asynchronous feedback from the broker about message delivery status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n// create the message\nMessage message = publisher\n    .message(\"hello\".getBytes(StandardCharsets.UTF_8))\n    .messageId(1L);\n\n// publish the message and deal with broker feedback\npublisher.publish(message, context -> {\n    // asynchronous feedback from the broker\n    if (context.status() == Publisher.Status.ACCEPTED) {\n        // the broker accepted (confirmed) the message\n    } else {\n        // deal with possible failure\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Publisher Flow Control Settings\nDESCRIPTION: Configuration for publisher flow control parameters that determine when fast publishers are blocked and unblocked to prevent overwhelming the broker, adjusting the balance between throughput and memory consumption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nstream.initial_credits = 100000\nstream.credits_required_for_unblocking = 25000\n```\n\n----------------------------------------\n\nTITLE: Deploying a 3-node RabbitMQ Cluster\nDESCRIPTION: This YAML configuration deploys a 3-node RabbitMQ cluster using the RabbitMQ Cluster Operator. It specifies the cluster name, number of replicas, and the RabbitMQ image to use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: my-rabbit\nspec:\n  replicas: 3\n  image: rabbitmq:3.10.0-management\n```\n\n----------------------------------------\n\nTITLE: Deleting Virtual Host\nDESCRIPTION: Removes a virtual host and all its associated resources including exchanges, queues, and permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost a-vhost\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions Globally in RabbitMQ (Bash)\nDESCRIPTION: This command sets permissions for a user on all virtual hosts. It requires the username and regular expressions for configure, write, and read permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions_globally janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Stream Plugin\nDESCRIPTION: Command to enable the RabbitMQ stream plugin in a running container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-09-13-rabbitmq-streams-offset-tracking/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates Using tls-gen Tool\nDESCRIPTION: Commands to clone the tls-gen repository and generate CA and certificate/key pairs for RabbitMQ server and clients using the basic profile. Sets a password and verifies the generated certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/tls-gen tls-gen\ncd tls-gen/basic\n# private key password\nmake PASSWORD=bunnies\nmake verify\nmake info\nls -l ./result\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queue Settings in RabbitMQ (Erlang)\nDESCRIPTION: Example advanced.config file for modifying quorum queue settings such as default cluster size and command soft limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n[\n %% five replicas by default, only makes sense for nine node clusters\n {rabbit, [{quorum_cluster_size, 5},\n           {quorum_commands_soft_limit, 512}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Deleting Stream Replica in RabbitMQ\nDESCRIPTION: Command to remove a stream replica from a specified node within a virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams delete_replica --vhost \"a-vhost\" \"a-queue\" \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Virtual Host using PUT /api/vhosts/{name}\nDESCRIPTION: This JSON payload is used to create a virtual host or update its metadata. It includes optional fields for description, tags, default queue type, and protection from deletion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"virtual host description\",\n  \"tags\": \"accounts,production\",\n  \"default_queue_type\": \"quorum\",\n  \"protected_from_deletion\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Memory Breakdown in Bytes using rabbitmqadmin\nDESCRIPTION: Command to show a detailed breakdown of memory usage in bytes for a specific RabbitMQ node. This helps with analyzing memory consumption patterns and troubleshooting memory-related issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# displays a breakdown in bytes\nrabbitmqadmin show memory_breakdown_in_bytes --node 'rabbit@hostname'\n```\n\n----------------------------------------\n\nTITLE: Concatenating CA Certificates for RabbitMQ TLS\nDESCRIPTION: This bash command shows how to create a CA certificate bundle by concatenating multiple certificate files. This is useful when configuring RabbitMQ to trust multiple Certificate Authorities for TLS peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat rootca/ca_certificate.pem otherca/ca_certificate.pem > all_cacerts.pem\n```\n\n----------------------------------------\n\nTITLE: Disabling Delivery Limit for Quorum Queues in PowerShell\nDESCRIPTION: PowerShell command to disable the delivery limit for quorum queues whose names begin with 'qq.unlimited' by setting the delivery-limit to -1 using rabbitmqctl.bat.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy qq-overrides ^\n    \"^qq\\.unlimited\" \"{\"\"delivery-limit\"\": -1}\" ^\n    --priority 123 ^\n    --apply-to \"quorum_queues\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS Firewall for Erlang Server Nodes\nDESCRIPTION: Commands to allow Erlang server nodes (beam.smp processes) to bind to ports and accept inbound connections through the MacOS Application Firewall. These commands configure the firewall for the Erlang VM executable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ AMQP 0-9-1 Implementation of queue.delete Method\nDESCRIPTION: Documentation of RabbitMQ's implementation of the queue.delete method, which has been modified to be an idempotent assertion that a queue must not exist, similar to how queue.declare asserts that it must exist.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_partial\">partial</td>\n<td>queue.delete</td>\n<td>\n    We have made queue.delete into an idempotent assertion that the queue must not exist, in the same way that queue.declare asserts that it must.\n</td>\n```\n\n----------------------------------------\n\nTITLE: Constant Query Example for RabbitMQ LDAP Authorization\nDESCRIPTION: Demonstrates constant query syntax that unconditionally grants or denies access. Example shows granting management plugin access while denying administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_32\n\nLANGUAGE: erlang\nCODE:\n```\n{constant, Bool}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{tag_queries, [{administrator, {constant, false}},\n {management,    {constant, true}}]}\n```\n\n----------------------------------------\n\nTITLE: Rich Authorization Request Token Structure (JavaScript)\nDESCRIPTION: This example demonstrates the structure of a Rich Authorization Request (RAR) token for RabbitMQ. It includes authorization details specifying permissions for different clusters and actions, including administrative privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:primary-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\", ],\n      \"actions\": [\"tag:administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ and Erlang Signing Keys\nDESCRIPTION: Commands to import the signing keys for RabbitMQ and Erlang repositories. These keys are used to verify the authenticity of the packages during installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## primary RabbitMQ signing key\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc'\n## modern Erlang repository\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key'\n## RabbitMQ server repository\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key'\n```\n\n----------------------------------------\n\nTITLE: Reinstalling RabbitMQ Windows Service After Erlang Upgrade\nDESCRIPTION: Commands to remove, reinstall, and restart the RabbitMQ Windows service after upgrading Erlang. This ensures RabbitMQ uses the newly installed Erlang version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/windows-configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\rabbitmq-service.bat remove\n.\\rabbitmq-service.bat install\n.\\rabbitmq-service.bat start\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with Internal Fallback in RabbitMQ\nDESCRIPTION: This setup configures RabbitMQ to check LDAP first for authentication, and then fall back to the internal database if the user cannot be authenticated through LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = ldap\nauth_backends.2 = internal\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Plugins Basic\nDESCRIPTION: Lists all plugins with basic output format showing enabled status and running state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings in RabbitMQ with Bash\nDESCRIPTION: Displays exchange name and queue name of bindings in a specific virtual host. This command lists binding information for the 'my-vhost' virtual host, showing only the exchange and queue names involved in the bindings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_bindings -p my-vhost exchange_name queue_name\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for a Virtual Host using PUT /api/vhosts/{name}\nDESCRIPTION: This JSON payload is used to enable or disable tracing for a virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"tracing\":true}\n```\n\n----------------------------------------\n\nTITLE: Rich Authorization Request JWT Token Structure for RabbitMQ\nDESCRIPTION: Example of a JWT token payload that implements the Rich Authorization Request (RAR) extension. It defines fine-grained permissions for different cluster and vhost combinations, with specific actions allowed for each.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  \"authorization_details\": [\\n    { \"type\" : \"rabbitmq\",\\n      \"locations\": [\"cluster:finance/vhost:primary-*\"],\\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\\n    },\\n    { \"type\" : \"rabbitmq\",\\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\", ],\\n      \"actions\": [\"tag:administrator\" ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Unacknowledged Messages in RabbitMQ Queue\nDESCRIPTION: This bash command uses rabbitmqctl to list queues and display the number of ready and unacknowledged messages, which is useful for debugging acknowledgment issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: Bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Handling Strategy in RabbitMQ\nDESCRIPTION: Example configuration snippet for setting up the pause_if_all_down partition handling strategy in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/partitions.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncluster_partition_handling = pause_if_all_down\n\n## Recovery strategy. Can be either 'autoheal' or 'ignore'\ncluster_partition_handling.pause_if_all_down.recover = ignore\n\n## Node names to check\ncluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@myhost1\ncluster_partition_handling.pause_if_all_down.nodes.2 = rabbit@myhost2\n```\n\n----------------------------------------\n\nTITLE: Rich Authorization Request Token Structure (JavaScript)\nDESCRIPTION: This example demonstrates the structure of a Rich Authorization Request (RAR) token for RabbitMQ. It includes authorization details specifying permissions for different clusters and actions, including administrative privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:primary-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\", ],\n      \"actions\": [\"tag:administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Signing Keys via CLI\nDESCRIPTION: Command to dynamically add a new OAuth signing key to a running RabbitMQ instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it rabbitmq rabbitmqctl add_signing_key legacy-token-2-key --pem-file=/conf/public-2.pem\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration for HOP Client\nDESCRIPTION: Shows how to include the HOP HTTP client dependency in a Gradle build configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-10-18-new-reactive-client-for-rabbitmq-http-api/index.md#2025-04-09_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncompile 'com.rabbitmq:http-client:2.0.0.RELEASE'\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ PerfTest Producer with OAuth (Bash)\nDESCRIPTION: Command to launch a RabbitMQ PerfTest producer application using OAuth authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Based Peer Discovery\nDESCRIPTION: Configuration example for the DNS-based peer discovery backend, showing how to specify the discovery mechanism and seed hostname.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = dns\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns\n\ncluster_formation.dns.hostname = discovery.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Message Rejection in .NET\nDESCRIPTION: Implements message rejection patterns using RabbitMQ .NET client. Demonstrates using IModel#BasicReject to discard messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // negatively acknowledge, the message will\n                    // be discarded\n                    channel.BasicReject(ea.DeliveryTag, false);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Channels per Connection in RabbitMQ\nDESCRIPTION: INI configuration snippet showing how to limit the maximum number of channels allowed per connection in RabbitMQ. This can help reduce memory usage by preventing applications from creating too many channels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 16\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Exchange using RabbitMQ Policy (Bash)\nDESCRIPTION: Sets a policy named 'DLX' that applies a dead-letter exchange 'my-dlx' to all queues using the rabbitmqctl command in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/dlx.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy DLX \".*\" '{\"dead-letter-exchange\":\"my-dlx\"}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 in RabbitMQ Cluster with Erlang INET\nDESCRIPTION: YAML configuration for enabling IPv6 support in RabbitMQ cluster using Erlang INET settings. Includes both the inet6 configuration and required environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  rabbitmq:\n    erlangInetConfig: |\n      {inet6, true}.\n    envConfig: |\n        SERVER_ADDITIONAL_ERL_ARGS=\"-kernel inetrc '/etc/rabbitmq/erl_inetrc'  -proto_dist inet6_tcp\"\n        RABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions with Variable Expansion in RabbitMQ with Bash\nDESCRIPTION: Sets user topic permissions using variable expansion. This example uses the {username} variable which will be replaced with the actual username, making the permission pattern more generic and reusable across different users.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic \"^{username}-.*\" \"^{username}-.*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RabbitMQ Message Receiver with Spring AMQP\nDESCRIPTION: This code implements the receiver for the Work Queues tutorial. It simulates processing time based on the number of dots in the received message and demonstrates message acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-spring-amqp.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.util.StopWatch;\n\n@RabbitListener(queues = \"hello\")\npublic class Tut2Receiver {\n\n    private final int instance;\n\n    public Tut2Receiver(int i) {\n        this.instance = i;\n    }\n\n    @RabbitHandler\n    public void receive(String in) throws InterruptedException {\n        StopWatch watch = new StopWatch();\n        watch.start();\n        System.out.println(\"instance \" + this.instance +\n            \" [x] Received '\" + in + \"'\");\n        doWork(in);\n        watch.stop();\n        System.out.println(\"instance \" + this.instance +\n            \" [x] Done in \" + watch.getTotalTimeSeconds() + \"s\");\n    }\n\n    private void doWork(String in) throws InterruptedException {\n        for (char ch : in.toCharArray()) {\n            if (ch == '.') {\n                Thread.sleep(500);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages Individually with Confirms in RabbitMQ using Java\nDESCRIPTION: This example demonstrates how to publish messages individually and wait for confirmation using the waitForConfirmsOrDie method. It publishes a message and waits synchronously for its confirmation with a 5-second timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nwhile (thereAreMessagesToPublish()) {\n    byte[] body = ...;\n    BasicProperties properties = ...;\n    channel.basicPublish(exchange, queue, properties, body);\n    // uses a 5 second timeout\n    channel.waitForConfirmsOrDie(5_000);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fair Dispatch in PHP RabbitMQ Consumer\nDESCRIPTION: This code sets the prefetch count to 1, ensuring that RabbitMQ doesn't give more than one message to a worker at a time, implementing fair dispatch among multiple consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$channel->basic_qos(null, 1, false);\n```\n\n----------------------------------------\n\nTITLE: Closing a Connection in RabbitMQ Erlang Client\nDESCRIPTION: Shows how to close a RabbitMQ connection. Closing a connection will automatically close all channels on that connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_23\n\nLANGUAGE: erlang\nCODE:\n```\namqp_connection:close(Connection)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Heartbeat Timeout\nDESCRIPTION: Configuration for setting a custom heartbeat timeout for stream connections. This determines when a peer TCP connection is considered unreachable, defaulting to 60 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# use a lower heartbeat timeout value\nstream.heartbeat = 20\n```\n\n----------------------------------------\n\nTITLE: Example TOML Configuration File for rabbitmqadmin v2\nDESCRIPTION: Sample TOML configuration file for rabbitmqadmin v2 with connection settings for different environments (local, staging, production). Each section defines connection parameters under an alias.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_28\n\nLANGUAGE: toml\nCODE:\n```\n[local]\nhostname = \"localhost\"\nport = 15672\nusername = \"lolz\"\npassword = \"lolz\"\nvhost = '/'\n\n[staging]\nhostname = \"192.168.20.31\"\nport = 15672\nusername = \"staging-2387a72329\"\npassword = \"staging-1d20cfbd9d\"\n\n[production]\nhostname = \"(redacted)\"\nport = 15671\nusername = \"user-2ca6bae15ff6b79e92\"\npassword = \"user-92ee4c479ae604cc72\"\n```\n\n----------------------------------------\n\nTITLE: HTTP GET/DELETE Endpoints: Connection Management\nDESCRIPTION: Endpoints for managing and monitoring connections, including listing and closing connections\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /api/connections\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/vhosts/{vhost}/connections\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/connections/{name}\n```\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/connections/{name}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/connections/username/{username}\n```\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/connections/username/{username}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/connections/{name}/channels\n```\n\n----------------------------------------\n\nTITLE: Message Properties Configuration\nDESCRIPTION: Configuration for setting or overriding message properties during republishing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\n{publish_properties, [\n  {delivery_mode, 2}\n]}\n```\n\n----------------------------------------\n\nTITLE: Adding a RabbitMQ User with Actual Values\nDESCRIPTION: Practical example of adding a user to RabbitMQ with specific username and password values. This demonstrates how to provide actual values for the positional arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Resource Servers Configuration in RabbitMQ OAuth 2.0\nDESCRIPTION: This configuration example shows how to set up multiple resource servers with different IDs and scope prefixes, sharing a single Identity Provider. This allows for different audiences targeting the same RabbitMQ installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = http//some_idp_url\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-diagnostics to Check Configuration File Location\nDESCRIPTION: This bash command uses the rabbitmq-diagnostics tool to display the status of a RabbitMQ node, including the location of configuration files used.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Syslog Output\nDESCRIPTION: Configuration to enable JSON formatting for Syslog output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\n\nlog.syslog.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific Commands\nDESCRIPTION: Shows how to get detailed help for specific commands using the --help flag or help subcommand. These examples demonstrate two equivalent ways to access command documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin declare queue --help\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin declare help queue\n```\n\n----------------------------------------\n\nTITLE: Setting silent mode in rabbitmq-upgrade\nDESCRIPTION: Command option to suppress informational messages and table headers during command execution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-s, --silent\n```\n\n----------------------------------------\n\nTITLE: Clearing a RabbitMQ Global Parameter\nDESCRIPTION: Removes a global runtime parameter from RabbitMQ. This example clears the 'mqtt_default_vhosts' parameter using the 'clear_global_parameter' action.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_global_parameter mqtt_default_vhosts\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth 2.0 Authentication in Management UI\nDESCRIPTION: Minimum configuration required to enable OAuth 2.0 authentication in the RabbitMQ management UI, including client ID and scope settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_user_client\nmanagement.oauth_scopes = <SPACE-SEPARATED LIST OF SCOPES. See below>\n```\n\n----------------------------------------\n\nTITLE: Running AMQP Producer with OAuth 2.0 Token\nDESCRIPTION: Commands to start AMQP producers with OAuth 2.0 tokens for different resources (prod and dev).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=prod_producer TOKEN=$(bin/keycloak/token prod_producer PdLHb1w8RH1oD5bpppgy8OF9G6QeRpL9)\n\nmake start-perftest-producer-with-token PRODUCER=dev_producer TOKEN=$(bin/keycloak/token dev_producer z1PNm47wfWyulTnAaDOf1AggTy3MxX2H)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to a Task Queue in Elixir\nDESCRIPTION: This code snippet shows how to send messages to a RabbitMQ task queue. It accepts command line arguments as the message content or defaults to 'Hello World!' if no arguments are provided. Messages are published with the persistent flag set to true to ensure they survive broker restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nmessage =\n  case System.argv do\n    []    -> \"Hello World!\"\n    words -> Enum.join(words, \" \")\n  end\n\nAMQP.Basic.publish(channel, \"\", \"task_queue\", message, persistent: true)\n\nIO.puts \" [x] Send '#{message}'\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple Nodes to Join a RabbitMQ Cluster\nDESCRIPTION: Waits for a specified number of nodes to join the RabbitMQ cluster. This example waits for two nodes to start and join the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl await_online_nodes 2\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Timeout Policy in RabbitMQ (Bash)\nDESCRIPTION: This command sets a policy to override the consumer timeout for a group of queues. The timeout is specified in milliseconds and applied to classic queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumers.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy queue_consumer_timeout \"with_delivery_timeout\\.*\" '{\"consumer-timeout\":3600000}' --apply-to classic_queues\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Callback Function\nDESCRIPTION: Code to define a callback function that processes messages received from a RabbitMQ queue. This function is called by the Pika library whenever a message is received, with parameters providing information about the channel, delivery method, message properties, and body.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body}\")\n```\n\n----------------------------------------\n\nTITLE: Starting RPC Producers with Different Publishing Rates\nDESCRIPTION: Commands to start two producers on different nodes with varying message rates to demonstrate message distribution across the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/local-random-exchange.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nperf-test -H amqp://localhost:5672 --consumers 0 --exchange rpc -t x-local-random --rate 100\nperf-test -H amqp://localhost:5673 --consumers 0 --exchange rpc -t x-local-random --rate 20\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Import with TLS and Skip-if-Unchanged\nDESCRIPTION: Configuration for importing definitions from HTTPS with TLS verification and skip-if-unchanged optimization. This provides secure remote definition retrieval with client certificate authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = https\ndefinitions.https.url = https://some.endpoint/path/to/rabbitmq.definitions.json\n\ndefinitions.tls.verify     = verify_peer\ndefinitions.tls.fail_if_no_peer_cert = true\n\ndefinitions.tls.cacertfile = /path/to/ca_certificate.pem\ndefinitions.tls.certfile   = /path/to/client_certificate.pem\ndefinitions.tls.keyfile    = /path/to/client_key.pem\n```\n\n----------------------------------------\n\nTITLE: Testing Faster Recovery of Long Queues in RabbitMQ 4.0\nDESCRIPTION: This bash script demonstrates how to test the improved startup time for quorum queues with large message backlogs in RabbitMQ 4.0. It uses perf-test to publish messages, restarts the RabbitMQ node, and checks queue status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-28-quorum-queues-in-4.0/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Publish 10 million 12-byte messages (feel free to play with other values)\nperf-test --quorum-queue --queue qq --consumers 0 --pmessages 5000000 --confirm 1000 --producers 2\n# restart the node\nrabbitmqctl stop_app && rabbitmqctl start_app\n# list the queues (repeat this command until the number of messages is 10 million instead of 0)\nrabbitmqctl list_queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Fields for AMQP 0-9-1 Destination in RabbitMQ Shovel\nDESCRIPTION: Optional configuration that controls the publishing settings such as exchange name and routing key used when republishing messages through a Shovel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\n{publish_fields, [\n                    {exchange, <<\"my_exchange\">>},\n                    {routing_key, <<\"from_shovel\">>}\n                  ]}\n```\n\n----------------------------------------\n\nTITLE: Complete Message Producer with Direct Exchange in Elixir\nDESCRIPTION: Full implementation of a log message producer that sends messages to a direct exchange with different severity levels. The code parses command line arguments to determine which severity levels to use for the messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\n{severities, raw_message, _} =\n  System.argv\n  |> OptionParser.parse(strict: [info:    :boolean,\n                                 warning: :boolean,\n                                 error:   :boolean])\n  |> case do\n    {[], msg, _} -> {[info: true], msg, []}\n    other -> other\n  end\n\nmessage =\n  case raw_message do\n    []    -> \"Hello World!\"\n    words -> Enum.join(words, \" \")\n  end\n\nAMQP.Exchange.declare(channel, \"direct_logs\", :direct)\n\nfor {severity, true} <- severities do\n  severity = severity |> to_string\n  AMQP.Basic.publish(channel, \"direct_logs\", severity, message)\n  IO.puts \" [x] Sent '[#{severity}] #{message}'\"\nend\n\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus TCP Interface in RabbitMQ\nDESCRIPTION: Configures the network interface that the Prometheus plugin API endpoint will use in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.tcp.ip = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Cluster with Second Node\nDESCRIPTION: Commands to stop, reset, and join rabbit2 node to an existing cluster with rabbit1. Includes verification of cluster status after joining.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit2\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit2 ...done.\n\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit2 ...\n\nrabbitmqctl join_cluster rabbit@rabbit1\n# => Clustering node rabbit@rabbit2 with [rabbit@rabbit1] ...done.\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit2 ...done.\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Virtual Host Information via HTTP API\nDESCRIPTION: Endpoints for retrieving information about virtual hosts in RabbitMQ. These provide data from rabbitmqctl list_vhosts plus additional message statistics for the virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_37\n\nLANGUAGE: http\nCODE:\n```\n/api/vhosts/\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/vhosts/(name)\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ Listeners Configuration\nDESCRIPTION: Example output of RabbitMQ listener configuration showing various protocol endpoints including AMQP, MQTT, and management interface ports with their respective interfaces and purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nInterface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication\nInterface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0\nInterface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\nInterface: [::], port: 15672, protocol: http, purpose: HTTP API\nInterface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\nInterface: [::], port: 1883, protocol: mqtt, purpose: MQTT\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listeners for localhost\nDESCRIPTION: INI configuration to set STOMP listeners for localhost on both IPv4 and IPv6.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 127.0.0.1:61613\nstomp.listeners.tcp.2 = ::1:61613\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Connection to RabbitMQ Node\nDESCRIPTION: Tests TLS connection establishment directly to a RabbitMQ node on port 5671 using client certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect localhost:5671 -cert client_certificate.pem -key client_key.pem -CAfile ca_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Logging in RabbitMQ\nDESCRIPTION: Basic configuration to enable console logging output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags in RabbitMQ\nDESCRIPTION: Command to list all feature flags in a RabbitMQ installation. This lists each feature flag along with its current state (enabled, disabled, or unsupported).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener to Listen on Localhost Only\nDESCRIPTION: Configuration settings to make the Stream plugin listen only on localhost interfaces for both IPv4 and IPv6, improving security by not exposing the service to external networks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages from a Queue via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to get messages from a queue using the POST /api/queues/{vhost}/{name}/get endpoint. It specifies the number of messages to retrieve, acknowledgement mode, and encoding options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 5,\n  \"ackmode\": \"ack_requeue_true\",\n  \"encoding\": \"auto\",\n  \"truncate\": 50000\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying TLSv1.3 Connection with OpenSSL\nDESCRIPTION: Command to verify TLSv1.3 configuration by attempting to connect to RabbitMQ using the OpenSSL client tool with the TLSv1.3 flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# connect using TLSv1.3\nopenssl s_client -connect 127.0.0.1:5671 -tls1_3\n```\n\n----------------------------------------\n\nTITLE: Create New Virtual Host with Default Queue Type in PowerShell\nDESCRIPTION: PowerShell commands to create a new virtual host with quorum as the default queue type and set permissions for a user as part of the migration process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat add_vhost NEW_VHOST --default-queue-type quorum\nrabbitmqctl.bat set_permissions -p NEW_VHOST USERNAME '.*' '.*' '.*'\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Connection to RabbitMQ with Telnet\nDESCRIPTION: This snippet demonstrates using telnet to test TCP connectivity to a RabbitMQ node on localhost port 5672. It shows a successful connection and the server's response to invalid input.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 5672\n# => Trying ::1...\n# => Connected to localhost.\n# => Escape character is '^]'.\n12345 # enter this and hit Enter to send\n# => AMQP\tConnection closed by foreign host.\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ AMQP 0-9-1 Implementation of basic.consume Method\nDESCRIPTION: Documentation of RabbitMQ's implementation of the basic.consume method, noting that the no-local parameter is not implemented and is ignored, with no attempt to prevent a consumer from receiving messages published on the same connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_partial\">partial</td>\n<td>basic.consume</td>\n<td>The no-local parameter is not implemented. The value of this parameter is ignored and no attempt is made to prevent a consumer from receiving messages that were published on the same connection.</td>\n```\n\n----------------------------------------\n\nTITLE: Setting ulimit for RabbitMQ on Older Linux Distributions\nDESCRIPTION: Command to set the soft limit for maximum open files to 64000 on distributions that don't use systemd. This should be added to the RabbitMQ environment configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 64000\n```\n\n----------------------------------------\n\nTITLE: Declaring Priority Queue in RabbitMQ using Java\nDESCRIPTION: Demonstrates how to declare a priority queue in RabbitMQ using Java client with x-max-priority optional argument. The example sets a maximum priority of 10 for the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/priority.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = ...;\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-max-priority\", 10);\nch.queueDeclare(\"my-priority-queue\", true, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak for OAuth 2.0 Authentication\nDESCRIPTION: Command to deploy and start Keycloak, which serves as the OAuth 2.0 authorization server. This command uses make to execute the necessary deployment steps.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-proxy.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\n----------------------------------------\n\nTITLE: LDAP Hostname Verification Settings\nDESCRIPTION: Configures hostname verification options for LDAP TLS connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n# take wildcards into account when performing hostname verification\nauth_ldap.ssl_options.hostname_verification = wildcard\n```\n\nLANGUAGE: ini\nCODE:\n```\n# disables hostname verification\nauth_ldap.ssl_options.hostname_verification = none\n```\n\n----------------------------------------\n\nTITLE: Closing Multiple Connections in RabbitMQ\nDESCRIPTION: Command to close 10 connections on a specific vhost with an explanation message\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_all_connections -p qa_env --limit 10 'Please close'\n```\n\n----------------------------------------\n\nTITLE: Binding Exchange to Exchange in RabbitMQ\nDESCRIPTION: Demonstrates how to create exchange-to-exchange bindings using the management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_62\n\nLANGUAGE: java\nCODE:\n```\nmanagement.binding()\n    .sourceExchange(\"my-exchange\")\n    .destinationExchange(\"my-other-exchange\")\n    .key(\"foo\")\n    .bind();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIBindingSpecification bindingSpec = management.Binding()\n    .SourceExchange(\"my-exchange\")\n    .DestinationExchange(\"my-other-exchange\")\n    .Key(\"foo\");\nawait bindingSpec.BindAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nbinding_exchange_queue_path = management.bind(\n    ExchangeToExchangeBindingSpecification(\n        source_exchange=\"my-exchange\",\n        destination_exchange=\"my-other-exchange\",\n     )\n)\n```\n\nLANGUAGE: go\nCODE:\n```\n// ExchangeToExchangeBindingSpecification implements BindingSpecification interface \nbindingPath, err := management.Bind(context.TODO(), &rmq.ExchangeToExchangeBindingSpecification{\n        SourceExchange:   \"my-exchange\",\n        DestinationExchange: \"my-other-exchange\",\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Peer Discovery for RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure RabbitMQ to use Kubernetes for peer discovery by setting the appropriate backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Feature Flags\nDESCRIPTION: Command to list feature flags with specified columns\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags name state\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth Provider Configuration in INI\nDESCRIPTION: Basic configuration example for OAuth 2.0 provider using issuer URL and TLS settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.https.cacertfile = /opts/certs/prodcacert.pem\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Queue Status in RabbitMQ\nDESCRIPTION: Command to check the quorum status of a specific queue, showing the state of queue replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues -n rabbit@to-be-stopped quorum_status <queue name>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-queues.bat -n rabbit@to-be-stopped quorum_status <queue name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Stream Options with Java AMQP 0.9.1 Client\nDESCRIPTION: Example showing how to declare a stream with advanced configuration options including maximum size, segment size, and bloom filter size using the Java AMQP 0.9.1 client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> arguments = new HashMap<>();\narguments.put(\"x-queue-type\", \"stream\");\n// maximum stream size: 20 GB\narguments.put(\"x-max-length-bytes\", 20_000_000_000);\n// size of segment files: 100 MB\narguments.put(\"x-stream-max-segment-size-bytes\", 100_000_000);\n// size of stream bloom filter: 32\narguments.put(\"x-stream-filter-size-bytes\", 32);\n\nchannel.queueDeclare(\n  \"my-stream\",\n  true,         // durable\n  false, false, // not exclusive, not auto-delete\n  arguments\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Memory Threshold\nDESCRIPTION: Configures a relative memory threshold as a fraction of available RAM. The example sets the threshold to 0.6, meaning RabbitMQ will trigger an alarm when memory usage exceeds 60% of available RAM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# new style config format, recommended\nvm_memory_high_watermark.relative = 0.6\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host with Metadata Using HTTP API\nDESCRIPTION: Creates a virtual host with metadata using the HTTP API and curl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \\\n                           -H \"content-type: application/json\" \\\n                           --data-raw '{\"description\": \"QA environment 1\", \"tags\": \"qa,project-a\", \"default_queue_type\": \"quorum\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring end_session_endpoint for OAuth 2.0 in RabbitMQ\nDESCRIPTION: This configuration shows how to set the end_session_endpoint for an OAuth 2.0 provider in RabbitMQ, which is used for Single Logout functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.end_session_endpoint = https://prodkeycloak:8080/realm/prod/logout\n```\n\n----------------------------------------\n\nTITLE: Clearing SSL Certificate Cache in RabbitMQ (PowerShell)\nDESCRIPTION: Command for clearing the PEM certificate and private key store cache in RabbitMQ using rabbitmqctl in PowerShell. This is useful when certificates are rotated and the server needs to reload them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_46\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Memory Breakdown in Percentage with Shell Command\nDESCRIPTION: Command to show a detailed breakdown of memory usage as percentages for a specific RabbitMQ node using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# displays a breakdown in percent\nrabbitmqadmin show memory_breakdown_in_percent --node 'rabbit@hostname'\n```\n\n----------------------------------------\n\nTITLE: AWS Instance Tags Configuration\nDESCRIPTION: Configuration for using EC2 instance tags for peer discovery\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.instance_tags.region = us-east-1\ncluster_formation.aws.instance_tags.service = rabbitmq\ncluster_formation.aws.instance_tags.environment = staging\n```\n\n----------------------------------------\n\nTITLE: Listing Consumers of a Stream Consumer Group in RabbitMQ\nDESCRIPTION: This command lists consumers of a specific stream consumer group in a vhost. It requires specifying the stream and group reference, and allows choosing which consumer information items to display, such as subscription_id, connection_name, and state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_group_consumers --stream stream-1 --reference stream-1 connection_name state\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Channels per Node\nDESCRIPTION: Sets the maximum number of channels that can be opened on each node in a cluster to 500 using the channel_max_per_node parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# no more than 500 channels can be opened on each node at the same time\nchannel_max_per_node = 500\n```\n\n----------------------------------------\n\nTITLE: Declaring a Priority Queue in RabbitMQ using Java Client\nDESCRIPTION: This code demonstrates how to declare a priority queue in RabbitMQ by setting the x-max-priority optional queue argument. The example creates a queue with a maximum priority of 10, enabling prioritized message delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/priority.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = ...;\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-max-priority\", 10);\nch.queueDeclare(\"my-priority-queue\", true, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Creating Queue with Non-Operator Managed RabbitMQ in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a queue using credentials stored in a Kubernetes secret for a non-operator managed RabbitMQ. It includes the secret definition and the queue resource declaration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-rabbit-creds\ntype: Opaque\nstringData:\n  # has to be an existing user\n  username: a-user\n  password: a-secure-password\n  # uri for the management api; when no scheme is provided in the uri, 'http' will be used by default\n  uri: https://my.rabbit:15672\n---\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: qq-example\nspec:\n  name: my-queue\n  rabbitmqClusterReference:\n    connectionSecret:\n      # has to be an existing secret in the same namespace as this Queue object\n      name: my-rabbit-creds\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX Using Bash CLI\nDESCRIPTION: Command to set a Dead Letter Exchange policy using rabbitmqctl in bash. Configures 'my-dlx' as the DLX for all queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/dlx.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy DLX \".*\" '{\"dead-letter-exchange\":\"my-dlx\"}' --apply-to queues --priority 7\n```\n\n----------------------------------------\n\nTITLE: Setting Prefetch Count in Spring AMQP\nDESCRIPTION: This code snippet shows how to set the prefetch count for a message listener container in Spring AMQP. The prefetch count determines how many messages can be sent to a consumer before requiring acknowledgments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-spring-amqp.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nAbstractMessageListenerContainer.setPrefetchCount(int prefetchCount)\n```\n\n----------------------------------------\n\nTITLE: Direct Exchange Declaration in Go\nDESCRIPTION: Creating a durable direct exchange for routing logs based on severity\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr = ch.ExchangeDeclare(\n  \"logs_direct\", // name\n  \"direct\",      // type\n  true,          // durable\n  false,         // auto-deleted\n  false,         // internal\n  false,         // no-wait\n  nil,           // arguments\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Exchange in Erlang\nDESCRIPTION: Demonstrates how to delete an exchange using the #'exchange.delete'{} record and amqp_channel:call/2 function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\nDelete = #'exchange.delete'{exchange = <<\"my_exchange\">>},\n#'exchange.delete_ok'{} = amqp_channel:call(Channel, Delete)\n```\n\n----------------------------------------\n\nTITLE: Listing Exchange Information with RabbitMQ CLI\nDESCRIPTION: Command for displaying exchange information (name and type) for a specific virtual host in RabbitMQ using the rabbitmqctl utility with the -p flag to specify the virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_exchanges -p my-vhost name type\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Cluster in Kubernetes with Operator Configuration\nDESCRIPTION: YAML configuration for deploying a RabbitMQ cluster using the Kubernetes Operator. Specifies resource requirements and advanced configurations including disabled credit flow for benchmarking purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: ...\nspec:\n  replicas: 1 # or 3\n  image: rabbitmq:3.10.1-management # or rabbitmq:3.9.0-management\n  resources:\n    requests:\n      cpu: 8\n      memory: 16Gi\n    limits:\n      cpu: 8\n      memory: 16Gi\n  persistence:\n    storageClassName: premium-rwo\n    storage: \"3000Gi\"\n  rabbitmq:\n    advancedConfig: |\n      [\n      {rabbit, [\n          {credit_flow_default_credit,{0,0}}\n      ]}\n      ].\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Prefetch Limits for Multiple Consumers in Java\nDESCRIPTION: This example shows how to set both per-consumer and per-channel prefetch limits, demonstrating RabbitMQ's interpretation of multiple basicQos calls with different global values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumer-prefetch.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer1 = ...;\nConsumer consumer2 = ...;\nchannel.basicQos(10, false); // Per consumer limit\nchannel.basicQos(15, true);  // Per channel limit\nchannel.basicConsume(\"my-queue1\", false, consumer1);\nchannel.basicConsume(\"my-queue2\", false, consumer2);\n```\n\n----------------------------------------\n\nTITLE: Handling Application Shutdown\nDESCRIPTION: Code to properly handle application shutdown when user interrupts the consumer with CTRL+C. This ensures clean exit by catching the KeyboardInterrupt exception and performing a proper system exit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        print('Interrupted')\n        try:\n            sys.exit(0)\n        except SystemExit:\n            os._exit(0)\n```\n\n----------------------------------------\n\nTITLE: HTML Table Comparing Federation/Shovel vs Clustering in RabbitMQ\nDESCRIPTION: A detailed comparison table that contrasts the key differences between Federation/Shovel and Clustering approaches in RabbitMQ, including aspects like broker relationships, version compatibility, network requirements, topology, CAP theorem characteristics, and client access patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/distributed.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Federation and/or Shovel</th>\n    <th>Clustering</th>\n  </tr>\n  <tr>\n    <td>\n      Brokers are logically separate and may have different owners.\n    </td>\n    <td>\n      A cluster forms a single logical broker.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Brokers can run different (and incompatible in certain ways) versions of RabbitMQ and Erlang.\n    </td>\n    <td>\n      Nodes must run compatible versions of RabbitMQ and Erlang.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Brokers can be connected via unreliable WAN\n      links. Communication is via AMQP 0-9-1 (optionally secured by\n      <a href=\"./ssl\">TLS</a>), requiring appropriate users and permissions to be set up.\n    </td>\n    <td>\n      Brokers must be connected via reasonably reliable LAN\n      links. Nodes will authenticate to each other using a shared secret\n      and optionally <a href=\"./clustering-ssl\">use TLS-enabled links</a>.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Brokers can be connected in whatever topology you\n      arrange. Links can be one- or two-way.\n    </td>\n    <td>\n      All nodes connect to all other nodes in both directions.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Emphasizes Availability and Partition Tolerance (AP) from\n      the <a href=\"http://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a>.\n    </td>\n    <td>\n      Emphasizes Consistency and Partition Tolerance (CP)\n      from the <a href=\"http://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a>.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Some exchanges in a broker may be federated while some may be local.\n    </td>\n    <td>\n      Clustering is all-or-nothing.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      A client connecting to any broker can only use non-exclusive queues in that broker.\n    </td>\n    <td>\n      A client connecting to any node can use non-exclusive queues on all nodes.\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions in RabbitMQ API\nDESCRIPTION: JSON payload for granting topic exchange permissions to a user. The payload specifies the exchange name and permission patterns for write, read, and configure operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exchange\": \"amq.topic\",\n  \"write\": \"^a\",\n  \"read\":\".*\",\n  \"configure\":\".*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Queue Leader Policy in RabbitMQ\nDESCRIPTION: Commands to set and clear policies for moving queue leaders between nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy --apply-to queues --priority 100 move-my-queue '^<queue>$;' '{\"ha-mode\":\"nodes\", \"ha-params\":[\"<new-leader-node>\"]}'\nrabbitmqctl clear_policy move-my-queue\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy --apply-to queues --priority 100 move-my-queue '^<queue>$;' '{\"ha-mode\":\"nodes\", \"ha-params\":[\"<new-leader-node>\"]}'\nrabbitmqctl.bat clear_policy move-my-queue\n```\n\n----------------------------------------\n\nTITLE: Starting Producer Application with OAuth Client\nDESCRIPTION: Command to start a performance test producer using the 'producer_with_roles' OAuth client for authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer PRODUCER=producer_with_roles\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ TLS Connection without Peer Verification\nDESCRIPTION: Example of an encrypted AMQP connection URI with TLS enabled but peer verification disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/uri-query-parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\namqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none&server_name_indication=myhost\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Multiple Severities in JavaScript\nDESCRIPTION: Shows how to bind a queue to multiple severities in the direct exchange using the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nargs.forEach(function(severity) {\n  channel.bindQueue(q.queue, exchange, severity);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Server\nDESCRIPTION: Installs the RabbitMQ server package and its dependencies with apt.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Server\nDESCRIPTION: Installs the RabbitMQ server package and its dependencies with apt.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for Two Nodes in PowerShell\nDESCRIPTION: PowerShell command to set a policy that mirrors queues with names starting with \"two.\" to exactly two nodes in the cluster, with automatic synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy ha-two \"^two\\.\" ^\n   \"{\"\"ha-mode\"\":\"\"exactly\"\",\"\"ha-params\"\":2,\"\"ha-sync-mode\"\":\"\"automatic\"\"}\"\n```\n\n----------------------------------------\n\nTITLE: Default Exchange Identifier\nDESCRIPTION: The default exchange identifier used when publishing reply messages in Direct Reply-to pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/direct-reply-to.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Callback Queue in Ruby\nDESCRIPTION: Demonstrates setting up a callback queue for receiving RPC responses. Creates an exclusive queue and publishes a message with the reply_to property set to the callback queue name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nqueue = channel.queue('', exclusive: true)\nexchange = channel.default_exchange\n\nexchange.publish(message, routing_key: 'rpc_queue', reply_to: queue.name)\n\n# ... then code to read a response message from the callback_queue ...\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Mnesia Node Directory in Markdown\nDESCRIPTION: Specifies the default path for the RabbitMQ Mnesia node-specific directory in a generic binary build. This path includes the node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME`\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stream and Creating a Producer\nDESCRIPTION: Go code that declares a stream with a 2GB size limit, creates a producer, and sends a \"Hello world\" message to the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstreamName := \"hello-go-stream\"\nenv.DeclareStream(streamName,\n    &stream.StreamOptions{\n        MaxLengthBytes: stream.ByteCapacity{}.GB(2),\n    },\n)\n\nproducer, err := env.NewProducer(streamName, stream.NewProducerOptions())\nif err != nil {\n    log.Fatalf(\"Failed to create producer: %v\", err)\n}\n\nerr = producer.Send(amqp.NewMessage([]byte(\"Hello world\")))\nif err != nil {\n    log.Fatalf(\"Failed to send message: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Clean Connection Closure Log\nDESCRIPTION: Log entry showing a graceful AMQP connection closure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-06-17 06:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel with AMQP 1.0 Source and AMQP 0.9.1 Destination in Erlang\nDESCRIPTION: This snippet shows a shovel configuration between an AMQP 1.0 source and an AMQP 0.9.1 destination. It defines a shovel named 'my_first_shovel' with specific source and destination settings, including protocol versions, connection URIs, and message handling parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n [ {shovels, [ {my_first_shovel,\n                [ {source,\n                   [ {protocol, amqp10},\n                     {uris, [ \"amqp://fred:secret@host1.domain/my_vhost\",\n                            ]},\n                     {source_address, <<\"my-source\">>},\n                     {prefetch_count, 10}\n                   ]},\n                  {destination,\n                     [ {protocol, amqp091},\n                       {uris, [\"amqp://\"]},\n                       {declarations, [ {'exchange.declare',\n                                         [ {exchange, <<\"my_direct\">>},\n                                           {type, <<\"direct\">>},\n                                           durable\n                                         ]}\n                                      ]},\n                       {publish_properties, [ {delivery_mode, 2} ]},\n                       {add_forward_headers, true},\n                       {publish_fields, [ {exchange, <<\"my_direct\">>},\n                                          {routing_key, <<\"from_shovel\">>}\n                                        ]}\n                     ]},\n                  {ack_mode, on_confirm},\n                  {reconnect_delay, 5}\n                ]}\n             ]}\n ]}\n```\n\n----------------------------------------\n\nTITLE: Go Code for Testing AMQP 0.9.1 Connection Scalability\nDESCRIPTION: Go program that creates 40,000 AMQP 0.9.1 connections with two channels each to test connection memory efficiency. This code serves as a comparison point to the AMQP 1.0 version for measuring protocol memory usage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc main() {\n\tfor i := 0; i < 40_000; i++ {\n\t\tif i%1000 == 0 {\n\t\t\tlog.Printf(\"opened %d connections\", i)\n\t\t}\n\t\tconn, err := amqp.Dial(\"amqp://guest:guest@localhost\")\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"open connection:\", err)\n\t\t}\n\t\t_, err = conn.Channel()\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"open channel:\", err)\n\t\t}\n\t\t_, err = conn.Channel()\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"open channel:\", err)\n\t\t}\n\t}\n\tlog.Println(\"opened all connections\")\n\ttime.Sleep(5 * time.Hour)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stream Consumer in RabbitMQ\nDESCRIPTION: Java code for setting up a RabbitMQ stream consumer that starts from the first message and prints received messages. This code demonstrates how to configure and start a consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = environment.consumerBuilder()\n            .stream(stream)\n            .offset(OffsetSpecification.first())\n            .messageHandler((unused, message) -> {\n                System.out.println(\"Received message: \" + new String(message.getBodyAsBinary()));\n            }).build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefetch Count for AMQP 1.0 Link in RabbitMQ Shovel Plugin\nDESCRIPTION: Optional configuration that sets the link credit amount granted to the receiving link. Credit is automatically renewed when it falls below 10% of this value, with a default of 1000.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n  {prefetch_count, 10}\n```\n\n----------------------------------------\n\nTITLE: Shrinking Quorum Queue Replicas in RabbitMQ\nDESCRIPTION: CLI command to shrink quorum queue replicas from a specific node, with an option to only remove replicas with errors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues shrink <node> [--errors-only]\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Console Logging with File Disabled\nDESCRIPTION: Configuration for JSON console output with file logging disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\nlog.console.formatter = json\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Firehose Tracing in RabbitMQ\nDESCRIPTION: Command to enable Firehose tracing for a specific virtual host. This activates the message tracing feature which publishes copies of all messages to the amq.rabbitmq.trace exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/firehose.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl trace_on -p [virtual host]\n```\n\n----------------------------------------\n\nTITLE: Configuring epmd IPv6 Binding in Bash\nDESCRIPTION: Sets the epmd daemon to listen only on a local IPv6 interface using environment variable configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# instructs epmd to only listen on a local interface\nexport ERL_EPMD_ADDRESS=\"::1\"\n```\n\n----------------------------------------\n\nTITLE: Opening an AMQP 1.0 Connection in Go\nDESCRIPTION: Creates a connection to an AMQP 1.0 broker using the Environment instance in Go.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// open a connection from the environment setting   \nconnection, err := env.NewConnection(context.Background())\n\n// close the connection when it is no longer necessary\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Console Logging with File Disabled\nDESCRIPTION: Configuration for JSON console output with file logging disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\nlog.console.formatter = json\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Authentication for RabbitMQ Cluster Formation\nDESCRIPTION: Configuration for etcd-based peer discovery with authentication credentials. This is required when the etcd service has authentication enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\ncluster_formation.etcd.username = rabbitmq\ncluster_formation.etcd.password = s3kR37\n```\n\n----------------------------------------\n\nTITLE: Running perf-test using kubectl rabbitmq plugin\nDESCRIPTION: This snippet shows an alternative method to run the perf-test using the kubectl rabbitmq plugin. This simplified command automates the process of connecting to the RabbitMQ cluster and running the performance test.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq perf-test hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Username Claims in RabbitMQ OAuth 2.0\nDESCRIPTION: Example configuration for setting preferred username claims in RabbitMQ's OAuth 2.0 setup. This allows RabbitMQ to use specific claims for user identification in the Management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.preferred_username_claims.1 = user_name\nauth_oauth2.preferred_username_claims.2 = email\n# ...\n```\n\n----------------------------------------\n\nTITLE: Detecting Network Partition Error Log\nDESCRIPTION: Example of an error log entry that appears when RabbitMQ detects a network partition between nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/partitions.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2020-05-18 06:55:37.324 [error] <0.341.0> Mnesia(rabbit@warp10): ** ERROR ** mnesia_event got {inconsistent_database, running_partitioned_network, rabbit@hostname2}\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions from Users in RabbitMQ\nDESCRIPTION: Demonstrates how to revoke permissions from a user in a specific virtual host using the rabbitmqctl command. Examples are provided for both Bash and PowerShell environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Revokes permissions in a virtual host\nrabbitmqctl clear_permissions -p \"custom-vhost\" \"username\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Revokes permissions in a virtual host\nrabbitmqctl.bat clear_permissions -p 'custom-vhost' 'username'\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Policy for STOMP Queues on Windows\nDESCRIPTION: Windows-specific command to create a policy that limits the length of all STOMP-created queues to 1000 messages. Uses rabbitmqctl.bat with properly escaped JSON.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_16\n\nLANGUAGE: stomp\nCODE:\n```\nrabbitmqctl.bat set_policy stomp-queues \"^stomp-\" \"{\\\"max-length\\\":1000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Basic RabbitMQ Node Health Check\nDESCRIPTION: A simple health check command that succeeds for nodes waiting for peer sync.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics ping\n```\n\n----------------------------------------\n\nTITLE: Standard Configuration Example\nDESCRIPTION: Example of standard RabbitMQ LDAP authentication configuration using rabbitmq.conf format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\nauth_backends.1 = ldap\n\nauth_ldap.servers.1  = my-ldap-server\nauth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com\nauth_ldap.use_ssl    = false\nauth_ldap.port       = 389\nauth_ldap.log        = false\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with RabbitMQ in Python\nDESCRIPTION: Demonstrates how to publish a message to a queue using the RabbitMQ Python client library. It creates a message, sets the queue address, and publishes the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# publish to a queue\nmessage = Message(body=\"Hello!\")\nqueue_address = AddressHelper.queue_address(\"some-queue\")\nmessage = AddressHelper.message_to_address_helper(message, queue_address)\npublisher = publisher.publish(message)\n```\n\n----------------------------------------\n\nTITLE: Log Exchange Level Configuration\nDESCRIPTION: Configuration settings to set the log level for the system log exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nlog.exchange = true\\nlog.exchange.level = warning\n```\n\n----------------------------------------\n\nTITLE: Combining Certificate and Private Key for RabbitMQ TLS\nDESCRIPTION: This snippet shows how to combine the public certificate and private key into a single file for use with RabbitMQ TLS configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat server_certificate.pem server_key.pem > combined_keys.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificate Authentication with DN and SAN URI\nDESCRIPTION: Configuration example for extracting username from certificate's distinguished name and client_id from the URI Subject Alternative Name in MQTT connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nssl_cert_login_from = distinguished_name\nmqtt.ssl_cert_client_id_from = subject_alternative_name\nmqtt.ssl_cert_login_san_type = uri\n```\n\n----------------------------------------\n\nTITLE: Clearing RabbitMQ User Password\nDESCRIPTION: Command to remove a user's password, preventing password-based authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_password janeway\n```\n\n----------------------------------------\n\nTITLE: Initializing RabbitMQ Workers and Tasks in Swift\nDESCRIPTION: Example setup demonstrating how to initialize multiple workers and publish several tasks to test round-robin dispatching.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.workerNamed(\"Jack\")\n    self.workerNamed(\"Jill\")\n    self.newTask(\"Hello World...\")\n    self.newTask(\"Just one this time.\")\n    self.newTask(\"Five.....\")\n    self.newTask(\"None\")\n    self.newTask(\"Two..dots\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth 2.0 Scopes for MQTT in RabbitMQ\nDESCRIPTION: This JSON snippet defines the OAuth 2.0 scopes required for publishing messages to MQTT topics in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scope\": [\n    \"rabbitmq.write:*/*/*\",\n    \"rabbitmq.configure:*/*/*\",\n    \"rabbitmq.read:*/*/*\"\n\n  ],\n  \"extra_scope\": \"rabbitmq.tag:management\",\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building AMQP 1.0 Client Docker Image\nDESCRIPTION: Command to build a local Docker image for the AMQP 1.0 client application that will be used for OAuth 2.0 authentication testing with AMQP 1.0.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmake build-amqp1_0-client\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions with rabbitmqctl in PowerShell\nDESCRIPTION: These PowerShell commands demonstrate how to use rabbitmqctl to list user permissions for different virtual hosts in a Windows environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_permissions --vhost /\nrabbitmqctl.bat list_permissions --vhost gw1\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Policy in Bash\nDESCRIPTION: Command to set an operator policy named 'transient-queue-ttl' that applies an 1800000ms expiration to queues matching the pattern '^amq\\.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_operator_policy transient-queue-ttl \\\n    \"^amq\\.\" '{\"expires\":1800000}' \\\n    --priority 1 \\\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Threshold CLI Commands\nDESCRIPTION: Command-line examples for updating memory thresholds on a running RabbitMQ node using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/memory.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0.6\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark absolute \"4G\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0\n```\n\n----------------------------------------\n\nTITLE: IPv6 DNS Resolution Configuration\nDESCRIPTION: Configuration for the erl_inetrc file to instruct RabbitMQ nodes and CLI tools to resolve hostnames to IPv6 addresses in IPv6-only environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n%% Tells DNS client on RabbitMQ nodes and CLI tools to resolve hostnames to IPv6 addresses.\n%% The trailing dot is not optional.\n{inet6,true}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key Password in RabbitMQ (Erlang Format)\nDESCRIPTION: This snippet shows how to provide a password for a protected private key using the classic Erlang-term configuration format. It includes SSL listener setup and paths to certificate files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                          {certfile,  \"/path/to/server_certificate.pem\"},\n                          {keyfile,   \"/path/to/server_key.pem\"},\n                          {password,  \"t0p$3kRe7\"}\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Alternative TLS Version Check (Windows)\nDESCRIPTION: Alternative command to check TLS support using rabbitmqctl eval on Windows\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat eval 'ssl:versions().'\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Memory Breakdown in Percentage using rabbitmqadmin\nDESCRIPTION: Command to show a detailed breakdown of memory usage as percentages for a specific RabbitMQ node. This provides a relative view of how memory is distributed across different components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# displays a breakdown in percent\nrabbitmqadmin show memory_breakdown_in_percent --node 'rabbit@hostname'\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Tags for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for defining Consul service tags when registering RabbitMQ nodes with Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# Define tags for the RabbitMQ service: \"qa\" and \"3.8\"\ncluster_formation.consul.svc_tags.1 = qa\ncluster_formation.consul.svc_tags.2 = 3.8\n```\n\n----------------------------------------\n\nTITLE: Creating Stream System and Declaring Stream in C#\nDESCRIPTION: This snippet shows how to create a StreamSystem instance and declare a stream for offset tracking.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar streamSystem = await StreamSystem.Create(new StreamSystemConfig());\n\nvar stream = \"stream-offset-tracking-dotnet\";\nawait streamSystem.CreateStream(new StreamSpec(stream));\n```\n\n----------------------------------------\n\nTITLE: Checking Port Connectivity with rabbitmq-diagnostics\nDESCRIPTION: This snippet demonstrates how to use the rabbitmq-diagnostics tool to verify TCP connectivity to listener ports on a specific node. This is useful for validating that network connectivity is properly established.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# This check will try to open a TCP connection to the discovered listener ports.\n# Since nodes can be configured to listen to specific interfaces, an --address should\n# be provided, or CLI tools will have to rely on the configured hostname resolver to know where to connect.\nrabbitmq-diagnostics -q check_port_connectivity --node rabbit@target-hostname --address <ip-address-to-connect-to>\n# If the check succeeds, the exit code will be 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing Fields\nDESCRIPTION: Controls the publishing settings including exchange and routing key for message republishing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\n{publish_fields, [\n                    {exchange, <<\"my_exchange\">>},\n                    {routing_key, <<\"from_shovel\">>}\n                  ]}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Topic Receiver Output Example\nDESCRIPTION: Sample output showing messages received by multiple instances based on topic routing patterns, including processing duration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-spring-amqp.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninstance 1 [x] Received 'Hello to lazy.orange.elephant 1'\ninstance 2 [x] Received 'Hello to lazy.orange.elephant 1'\ninstance 2 [x] Done in 2.005s\ninstance 1 [x] Done in 2.005s\ninstance 1 [x] Received 'Hello to quick.orange.fox 2'\ninstance 2 [x] Received 'Hello to lazy.brown.fox 3'\ninstance 1 [x] Done in 2.003s\ninstance 2 [x] Done in 2.003s\ninstance 1 [x] Received 'Hello to lazy.pink.rabbit 4'\ninstance 2 [x] Received 'Hello to lazy.pink.rabbit 4'\ninstance 1 [x] Done in 2.006s\ninstance 2 [x] Done in 2.006s\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ User Tags\nDESCRIPTION: This command sets the 'administrator' tag for the user 'janeway' in the RabbitMQ broker. Tags can be used to grant management privileges when using alternative login methods.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_tags janeway administrator\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP TCP Buffer Settings\nDESCRIPTION: Configuration for TCP buffer settings specific to AMQP 0-9-1 connections, setting buffer sizes to 32 KiB and configuring connection behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on      = true\ntcp_listen_options.linger.timeout = 0\ntcp_listen_options.sndbuf  = 32768\ntcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth Signing Key Dynamically to RabbitMQ\nDESCRIPTION: This command demonstrates how to dynamically add a second signing key to a running RabbitMQ node without requiring a restart. It uses rabbitmqctl to add the key with its corresponding public key file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it rabbitmq rabbitmqctl add_signing_key legacy-token-2-key --pem-file=/conf/public-2.pem\nAdding OAuth signing key \"legacy-token-2-key\" filename: \"/conf/public-2.pem\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Recovery Interval in RabbitMQ Client\nDESCRIPTION: Shows how to configure the network recovery interval for RabbitMQ connections. This determines how long to wait between recovery attempts after a connection failure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// attempt recovery every 10 seconds\nfactory.setNetworkRecoveryInterval(10000);\n```\n\n----------------------------------------\n\nTITLE: Defining a Constant Query in RabbitMQ LDAP Authentication\nDESCRIPTION: A constant query that always returns a fixed boolean value to either grant or deny access unconditionally. Used to define fixed permissions in RabbitMQ LDAP authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\n{constant, Bool}\n```\n\n----------------------------------------\n\nTITLE: Registering Asynchronous Publisher Confirms in RabbitMQ with Java\nDESCRIPTION: This snippet demonstrates how to set up asynchronous publisher confirms by registering callbacks for confirmed and nack-ed messages. It shows the basic structure with two callback functions that handle successful confirmations and negative acknowledgments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = connection.createChannel();\nchannel.confirmSelect();\nchannel.addConfirmListener((sequenceNumber, multiple) -> {\n    // code when message is confirmed\n}, (sequenceNumber, multiple) -> {\n    // code when message is nack-ed\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Message Flow Diagram with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates a simple RabbitMQ message flow. It shows a producer (P) sending messages to a queue named 'hello'. The diagram uses custom CSS classes to style the producer and queue elements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T1DiagramSending.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P)) --> Q[[hello]]\n\n    class P mermaid-producer\n    class Q mermaid-queue\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol Support for STOMP\nDESCRIPTION: Configuration to enable support for the proxy protocol, which allows proxies to forward client connection information to RabbitMQ STOMP plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nstomp.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Certificate Expiration Check Command - Bash\nDESCRIPTION: Checks expiration dates of TLS certificates on all listeners with configurable time units and thresholds\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Cipher Suite Order in New Style Format for RabbitMQ\nDESCRIPTION: Configuration example for enforcing server's TLS cipher suite preference using the new style config format. This helps prevent malicious clients from negotiating weak cipher suites.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1        = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.honor_cipher_order = true\nssl_options.honor_ecc_order    = true\n```\n\n----------------------------------------\n\nTITLE: Management Agent Feature Flags Table Structure\nDESCRIPTION: HTML table structure showing RabbitMQ management agent plugin feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n   <th>Required</th>\n   <th>Stable</th>\n   <th>Feature flag name</th>\n   <th>Description</th>\n  </tr>\n  <tr>\n    <td>3.12.0</td>\n    <td>3.8.10</td>\n    <td>drop_unroutable_metric</td>\n    <td>\n      Count unroutable publishes to be dropped in stats\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Reception with Direct Exchange in Objective-C\nDESCRIPTION: This function shows how to receive logs of different severities using a direct exchange and multiple bindings in RabbitMQ with Objective-C.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)receiveLogsDirect {\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n    RMQExchange *x    = [ch direct:@\"direct_logs\"];\n    RMQQueue *q       = [ch queue:@\"\" options:RMQQueueDeclareExclusive];\n\n    NSArray *severities = @[@\"error\", @\"warning\", @\"info\"];\n    for (NSString *severity in severities) {\n        [q bind:x routingKey:severity];\n    }\n\n    NSLog(@\"Waiting for logs.\");\n\n    [q subscribe:^(RMQMessage * _Nonnull message) {\n        NSLog(@\"%@:%@\", message.routingKey, [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);\n    }];\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Parameters in RabbitMQ (Bash)\nDESCRIPTION: Lists all parameters for the default virtual host using the rabbitmqctl command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_parameters\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server\nDESCRIPTION: Command to start the RabbitMQ server using systemctl on Debian-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Log Level\nDESCRIPTION: Command to set the logging level for the running RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_log_level debug\n```\n\n----------------------------------------\n\nTITLE: Adding Users in RabbitMQ using Bash\nDESCRIPTION: Demonstrates how to add users in RabbitMQ using the rabbitmqctl command in Bash. It shows two methods: providing the password via standard input and as a command line argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Password is provided via standard input.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\necho '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b' | rabbitmqctl add_user 'username'\n\n# Password is provided as a command line argument.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\nrabbitmqctl add_user 'username' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queue in Erlang\nDESCRIPTION: Shows how to delete a queue using the #'queue.delete'{} record and amqp_channel:call/2 function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\nDelete = #'queue.delete'{queue = <<\"my_queue\">>},\n#'queue.delete_ok'{} = amqp_channel:call(Channel, Delete)\n```\n\n----------------------------------------\n\nTITLE: Closing a Channel in RabbitMQ Erlang Client\nDESCRIPTION: Demonstrates how to properly close a channel when it's no longer needed. This is an important cleanup step in RabbitMQ client applications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\namqp_channel:close(Channel)\n```\n\n----------------------------------------\n\nTITLE: Disabling Consumer Timeout in RabbitMQ (Erlang)\nDESCRIPTION: This snippet demonstrates how to disable the consumer timeout using the advanced.config file in Erlang syntax. However, this practice is not recommended.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumers.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config\n[\n  {rabbit, [\n    {consumer_timeout, undefined}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions for a User in RabbitMQ with Bash\nDESCRIPTION: Sets user topic permissions in RabbitMQ. This command allows the user 'janeway' to publish and consume messages through the 'amp.topic' exchange in 'my-vhost' virtual host with routing keys starting with 'janeway-'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic \"^janeway-.*\" \"^janeway-.*\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Direct Exchange in Elixir\nDESCRIPTION: Code to publish a message to the 'direct_logs' exchange with a severity routing key. The severity parameter routes the message to the appropriate queues based on their binding keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Basic.publish(channel, \"direct_logs\", severity, message)\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Connection Limit with curl in RabbitMQ API\nDESCRIPTION: Shell command that uses curl to set a maximum connection limit for a specific virtual host. The command sends a PUT request with a JSON payload to the vhost-limits endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncurl -4u 'guest:guest' -H 'content-type:application/json' -X PUT localhost:15672/api/vhost-limits/my-vhost/max-connections -d '{\"value\": 50}'\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Classic Queues with perf-test in High Throughput Scenario\nDESCRIPTION: Shell command using perf-test to benchmark classic queues performance with multiple message sizes. Tests use persistent messages with 2 producers and 2 consumers, configured for high throughput with confirmation batches.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# classic queues (with an exactly=3 mirroring policy where applicable)\nperf-test --producers 2 --consumers 2 --confirm 3000 --multi-ack-every 3000 --qos 3000 \\\n          --variable-size 10:900 --variable-size 100:900 --variable-size 1000:900 --variable-size 5000:900 \\\n          --auto-delete false --flag persistent --queue cq\n```\n\n----------------------------------------\n\nTITLE: Displaying frame_max Property in RabbitMQ\nDESCRIPTION: Represents the maximum frame size in bytes for a RabbitMQ connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\nframe_max\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking in Rust\nDESCRIPTION: Implements a consumer that tracks first and last message offsets and stops when encountering a marker message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-rust-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet mut first_offset: Option<u64> = None;\nlet mut last_offset: Option<u64> = None;\nlet mut consumer = environment\n    .consumer()\n    .offset(OffsetSpecification::First)\n    .build(stream)\n    .await\n    .unwrap();\n\nwhile let Some(delivery) = consumer.next().await {\n    let d = delivery.unwrap();\n\n    if !first_offset.is_some()  {\n        println!(\"First message received\");\n        first_offset = Some(d.offset());\n    }\n\n    if  String::from_utf8_lossy(d.message().data().unwrap()).contains(\"marker\")\n    {\n        last_offset = Some(d.offset());\n        let handle = consumer.handle();\n        _ = handle.close().await;\n        break;\n    }\n}\n\nif first_offset.is_some() {\n    println!(\n        \"Done consuming first_offset: {:?} last_offset: {:?}  \", first_offset.unwrap(), last_offset.unwrap())\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Host Parameters in RabbitMQ\nDESCRIPTION: Command to list all parameters for the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_parameters\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Upstream Set in Bash\nDESCRIPTION: These commands create a named set of upstreams called 'location-1' and apply it to exchanges or queues with names starting with 'federated.'\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream-set location-1 '[{\"upstream\": \"up-1\"}, {\"upstream\": \"up-2\"}]'\n\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream-set\":\"location-1\"}'\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Host Metadata using rabbitmqctl\nDESCRIPTION: Updates the metadata of an existing virtual host, including description, default queue type, and tags. This allows modifying virtual host properties after creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl update_vhost_metadata qa1 --description \"QA environment for issue 1662\" --default-queue-type quorum --tags qa,project-a,qa-1662\n```\n\n----------------------------------------\n\nTITLE: Stopping the EPMD Process\nDESCRIPTION: Command to terminate the EPMD process after shutting down RabbitMQ, typically used when reconfiguring EPMD settings that require a restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Stops local epmd process.\n# Use after shutting down RabbitMQ.\nepmd -kill\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key from keys.openpgp.org for apt\nDESCRIPTION: Retrieves the RabbitMQ signing key from keys.openpgp.org and imports it into the system keyrings for apt package manager on Debian/Ubuntu systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg\n```\n\n----------------------------------------\n\nTITLE: Forcing Garbage Collection and Finding Binary Memory Leaks\nDESCRIPTION: Bash commands to force garbage collection in RabbitMQ and identify processes that are holding onto large amounts of binary data. This is useful for troubleshooting memory issues related to binary data that isn't being properly garbage collected.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'recon:bin_leak(10).'\n\nrabbitmqctl force_gc\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in RabbitMQ\nDESCRIPTION: Sets user permissions for a specific virtual host. This command grants the user 'janeway' access to the 'my-vhost' virtual host with specific configure, write, and read permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions -p my-vhost janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Setting up OAuth2 Token Refresh Service in RabbitMQ Java\nDESCRIPTION: Configures automatic token refresh service to handle OAuth2 token expiration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.impl.DefaultCredentialsRefreshService.\n        DefaultCredentialsRefreshServiceBuilder;\n...\nCredentialsRefreshService refreshService =\n  new DefaultCredentialsRefreshServiceBuilder().build();\ncf.setCredentialsRefreshService(refreshService);\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Keycloak Configuration\nDESCRIPTION: Commands to start RabbitMQ with OAuth 2.0 authentication configured to use the Keycloak server. Sets the MODE environment variable to keycloak before starting RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=keycloak\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Adding Users in RabbitMQ using Bash\nDESCRIPTION: Demonstrates how to add users in RabbitMQ using the rabbitmqctl command in Bash. It shows two methods: providing the password via standard input and as a command line argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Password is provided via standard input.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\necho '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b' | rabbitmqctl add_user 'username'\n\n# Password is provided as a command line argument.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\nrabbitmqctl add_user 'username' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Management Plugin\nDESCRIPTION: Command to enable the built-in management plugin for RabbitMQ monitoring through UI and HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Clearing RabbitMQ Certificate Cache\nDESCRIPTION: Commands to clear the PEM certificate cache across different shells using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] \"ssl:clear_pem_cache().\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Delivery Limit for Quorum Queues in Bash\nDESCRIPTION: Disables the delivery limit for quorum queues whose names begin with 'qq.unlimited' by setting the delivery-limit to -1 using rabbitmqctl with set_policy in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy qq-overrides \\\n    \"^qq\\.unlimited\" '{\"delivery-limit\": -1}' \\\n    --priority 123 \\\n    --apply-to \"quorum_queues\"\n```\n\n----------------------------------------\n\nTITLE: Cloning RabbitMQ Server Repository\nDESCRIPTION: Command to clone the RabbitMQ server source code from GitHub repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/build-server.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server.git rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Enabling All Stable Feature Flags with Shell Command\nDESCRIPTION: Command to enable all stable feature flags at once in a RabbitMQ cluster using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin feature_flags enable_all\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Service\nDESCRIPTION: Commands to start, stop, and check the status of the RabbitMQ service using systemctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# stop the local node\nsudo systemctl stop rabbitmq-server\n\n# start it back\nsudo systemctl start rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: LDAP Logging Configuration in Erlang Format\nDESCRIPTION: Classic config format example for setting LDAP logging level\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    %% ...\n    {log, network}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener Port in RabbitMQ\nDESCRIPTION: This snippet shows how to change the default Stream Plugin TCP listener port to 12345 using the rabbitmq.conf configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 12345\n```\n\n----------------------------------------\n\nTITLE: Checking Node Quorum Criticality in RabbitMQ (Bash)\nDESCRIPTION: This command checks if a node is quorum critical for any internal components, quorum queues, or stream queues. It exits with a non-zero code and prints affected components/queues if the node's shutdown would cause a loss of online quorum.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/grow-then-shrink-upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host After Removing Protection Using HTTP API\nDESCRIPTION: Example showing a successful deletion of a virtual host after its protection has been removed, resulting in a 204 No Content response from the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -vv -sL -u guest:guest -X DELETE http://localhost:15672/api/vhosts/\n# ...\n# => < HTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Getting help for specific command with --help option in PowerShell\nDESCRIPTION: Shows how to get detailed usage information for a specific command using the --help flag in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-diagnostics.bat status --help\n```\n\n----------------------------------------\n\nTITLE: Disabling Non-TLS Listeners for RabbitMQ Stream\nDESCRIPTION: Demonstrates how to disable all non-TLS listeners while keeping only TLS-enabled listeners for Stream connections, enhancing security by forcing all connections to use TLS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp   = none\nstream.listeners.ssl.1 = 5551\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener Port in RabbitMQ\nDESCRIPTION: This snippet shows how to change the default Stream Plugin TCP listener port to 12345 using the rabbitmq.conf configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Node Address Type for RabbitMQ Cluster Formation in Kubernetes\nDESCRIPTION: Sets whether hostnames or IP addresses should be used for peer nodes in Kubernetes. This affects how RabbitMQ nodes identify and connect to each other in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# should result set use hostnames or IP addresses\n# of Kubernetes API-reported containers?\n# supported values are \"hostname\" and \"ip\"\ncluster_formation.k8s.address_type = hostname\n```\n\n----------------------------------------\n\nTITLE: Clearing RabbitMQ Certificate Cache\nDESCRIPTION: Commands to clear the PEM certificate cache across different shells using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] \"ssl:clear_pem_cache().\"\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listener Options\nDESCRIPTION: INI configuration for various TCP listener options including buffer sizes and keepalives.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 127.0.0.1:61613\nstomp.listeners.tcp.2 = ::1:61613\n\nstomp.tcp_listen_options.backlog = 4096\nstomp.tcp_listen_options.recbuf  = 131072\nstomp.tcp_listen_options.sndbuf  = 131072\n\nstomp.tcp_listen_options.keepalive = true\nstomp.tcp_listen_options.nodelay   = true\n\nstomp.tcp_listen_options.exit_on_close = true\nstomp.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Event Stream with JSON Processing\nDESCRIPTION: Command to consume and process event stream using jq JSON processor.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream | jq\n```\n\n----------------------------------------\n\nTITLE: Waiting for RabbitMQ Application to Start\nDESCRIPTION: Waits for the RabbitMQ application to start by monitoring a PID file. This command returns when the RabbitMQ node has fully started up.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl wait /var/run/rabbitmq/pid\n```\n\n----------------------------------------\n\nTITLE: Setting Max Queue Length Policy with rabbitmqctl (Bash)\nDESCRIPTION: This command sets a policy named 'my-pol' that limits the 'one-meg' queue to 1MiB of message data using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/maxlength/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy my-pol \"^one-meg$\" \\\n  '{\"max-length-bytes\":1048576}' \\\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod Hostname Suffix\nDESCRIPTION: Settings for adding a suffix to peer hostnames returned by Kubernetes\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# no suffix is appended by default\ncluster_formation.k8s.hostname_suffix = rmq.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple LDAP Servers\nDESCRIPTION: Configuration for connecting to multiple LDAP servers. The servers will be tried in order until a connection succeeds, providing high availability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n```\n\n----------------------------------------\n\nTITLE: Displaying IPv4 TCP Listening Sockets with ss\nDESCRIPTION: Uses ss to display listening TCP sockets that use IPv4 and their associated OS processes. Shows listening state sockets with numeric output rather than resolving service names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nsudo ss --tcp -f inet --listening --numeric --processes\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Auth Backend in Advanced Config\nDESCRIPTION: Configure LDAP as the authentication backend using the advanced.config Erlang format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  {auth_backends, [rabbit_auth_backend_ldap]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Cloning RabbitMQ Server Repository\nDESCRIPTION: Command to clone the RabbitMQ server source code from GitHub repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/build-server.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server.git rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Checking Federation Status with RabbitMQ CLI\nDESCRIPTION: This command displays the status of all federation links running on the target node. It provides details such as the federated resource type, name, virtual host, upstream connection, and current status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# This command will be available only if federation plugin is enabled\nrabbitmqctl federation_status\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Port Range Minimum in RabbitMQ\nDESCRIPTION: Default configuration for the lower bound of server port range used for communication with other cluster members and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.port_range.min = 25672\n```\n\n----------------------------------------\n\nTITLE: Reducing Statistics Collection Frequency in RabbitMQ\nDESCRIPTION: Configuration to increase the statistics collection interval to reduce CPU consumption with many connections. This affects metrics refresh rate in the management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 60 seconds\ncollect_statistics_interval = 60000\n```\n\n----------------------------------------\n\nTITLE: Opening Channel in Java\nDESCRIPTION: Example showing how to open a new channel after establishing a connection using the Java client\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\nConnection conn = cf.createConnection();\n\nChannel ch = conn.createChannel();\n\n// ... use the channel to declare topology, publish, consume\n```\n\n----------------------------------------\n\nTITLE: Opening Channel in .NET\nDESCRIPTION: Example showing how to open a new channel (called 'model' in .NET client) after establishing a connection using the .NET client\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\nvar conn = cf.newConnection();\n\n// the .NET client calls channels \"models\"\nvar ch = conn.CreateModel();\n\n// ... use the channel to declare topology, publish, consume\n```\n\n----------------------------------------\n\nTITLE: LDAP DN Lookup Configuration Example in INI Format\nDESCRIPTION: Basic configuration for LDAP DN lookup using userPrincipalName attribute for email-based authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.dn_lookup_attribute = userPrincipalName\nauth_ldap.dn_lookup_base = DC=gopivotal,DC=com\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Type for RabbitmqCluster in YAML\nDESCRIPTION: Specifies the Kubernetes Service type for the RabbitmqCluster Service. Available types are ClusterIP, NodePort, and LoadBalancer. The example sets the service type to LoadBalancer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  service:\n    type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Clearing a RabbitMQ User's Password\nDESCRIPTION: This command clears the password for the user 'janeway' in the RabbitMQ broker. After this, the user cannot log in with a password but may be able to authenticate through other means if configured.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_password janeway\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Connection Acceptance Log\nDESCRIPTION: Example log entry showing a successful AMQP connection acceptance, including client and server IP addresses and ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-11-22 10:44:33.654 [info] <0.620.0> accepting AMQP connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web STOMP Plugin\nDESCRIPTION: Command to enable the RabbitMQ Web STOMP plugin using rabbitmq-plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_stomp\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions with Variable Expansion in RabbitMQ\nDESCRIPTION: Sets user topic permissions using variable expansion. This command uses the {username} variable to create a more generic permission setting for the 'amq.topic' exchange in 'my-vhost'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic \"^{username}-.*\" \"^{username}-.*\"\n```\n\n----------------------------------------\n\nTITLE: Getting the Management Object in Go\nDESCRIPTION: Shows how to get the management object from a RabbitMQ connection using the Go client library. This object is used for topology management operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\nmanagement = connection.management()\n  // ...\n  // close the management instance when it is no longer needed\nmanagement.close()\n```\n\n----------------------------------------\n\nTITLE: Joining RabbitMQ Cluster Using CLI\nDESCRIPTION: Command to join a node to an existing RabbitMQ cluster using the rabbitmqctl command line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/clustering.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl join_cluster rabbit@remote-host\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream and Producer in RabbitMQ using Rust\nDESCRIPTION: This code creates a stream with a specified name and max length, handles potential errors, and then creates a producer for that stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet stream = \"hello-rust-stream\";\nlet create_response = environment\n    .stream_creator()\n    .max_length(ByteCapacity::GB(5))\n    .create(stream)\n    .await;\n\nif let Err(e) = create_response {\n    if let StreamCreateError::Create { stream, status } = e {\n        match status {\n            // we can ignore this error because the stream already exists\n            ResponseCode::StreamAlreadyExists => {}\n            err => {\n                println!(\"Error creating stream: {:?} {:?}\", stream, err);\n            }\n        }\n    }\n}\nlet producer = environment.producer().build(stream).await?;\nproducer\n    .send_with_confirm(Message::builder().body(\"Hello, World!\").build())\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Setting Global User Permissions in RabbitMQ\nDESCRIPTION: Sets user permissions across all virtual hosts. This command grants the user 'janeway' access to all virtual hosts with specific configure, write, and read permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions_globally janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Restart Stream Command Example\nDESCRIPTION: Example command showing how to restart a stream with an optional preferred leader node specification using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams restart_stream --vhost \"a-vhost\" \"a-stream\" --preferred-leader-node \"node\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode Feature Flag in RabbitMQ (Bash)\nDESCRIPTION: This command enables the maintenance mode feature flag required for mixed-version cluster compatibility. Must be run after all cluster nodes have been upgraded to a version supporting maintenance mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag maintenance_mode_status\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts in rabbitmqadmin\nDESCRIPTION: This command shows how to list virtual hosts using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list vhosts\n```\n\n----------------------------------------\n\nTITLE: Sample Entra ID Access Token for RabbitMQ Authentication\nDESCRIPTION: Example of an Entra ID access token used for RabbitMQ authentication. The permissions are managed in the 'roles' claim, which RabbitMQ uses to define permissions for logged-in users.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-entra-id/index.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"aud\": \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88\",\n  \"iss\": \"https://sts.windows.net/1ffc6121-590e-4aa5-bf47-c348674069cb/\",\n  \"iat\": 1655740039,\n  \"nbf\": 1655740039,\n  \"exp\": 1655744211,\n  \"acr\": \"1\",\n  \"aio\": \"AUQAu/8TAAAAjvwucwL4nZe83vNZvg6A7sAPscI9zsGvRs8EuT7aVhubpmhRnxJ+X7nbkISoP5eBBMxoi2yiCclnH2Ocjjzsqw==\",\n  \"amr\": [\n    \"wia\"\n  ],\n  \"appid\": \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88\",\n  \"appidacr\": \"1\",\n  \"email\": \"baptiste.daroit@company.com\",\n  \"idp\": \"https://sts.windows.net/b3f4f7c2-72ce-4192-aba4-d6c7719b5766/\",\n  \"in_corp\": \"true\",\n  \"ipaddr\": \"xxx.xxx.xxx.xxx\",\n  \"name\": \"Baptiste DA ROIT\",\n  \"oid\": \"cf2df3b4-03df-4e1e-b5c0-f232932aaead\",\n  \"rh\": \"0.AR8AgCG80x7L90C1mhVBBXQzQjgoklctsdBMtgYVWFwc4tgfAMQ.\",\n  \"roles\": [\n    \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.tag:monitoring\",\n    \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.configure:*/*\"\n  ],\n  \"scp\": \"User.Read\",\n  \"sub\": \"6aBzW3a1FOTTrnlZEuC1SmwG0sRjVgQU49DvrYK6Rqg\",\n  \"tid\": \"1ffc6121-590e-4aa5-bf47-c348674069cb\",\n  \"unique_name\": \"baptiste.daroit@company.com\",\n  \"uti\": \"QHqwThTqQEK9iMdnRuD_AA\",\n  \"ver\": \"1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Alternate Exchanges in Markdown\nDESCRIPTION: This snippet demonstrates how to reference alternate exchanges in Markdown. It's used to introduce the concept of alternate exchanges in RabbitMQ for handling unroutable messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/exchanges.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Alternate Exchanges {#ae}\n```\n\n----------------------------------------\n\nTITLE: Restart Stream Command Example\nDESCRIPTION: Example command showing how to restart a stream with an optional preferred leader node specification using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams restart_stream --vhost \"a-vhost\" \"a-stream\" --preferred-leader-node \"node\"\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ on Ubuntu 22.04 (Partial Script)\nDESCRIPTION: Beginning of shell script for setting up RabbitMQ on Ubuntu 22.04 (Jammy), showing initial steps for installing prerequisites and importing Team RabbitMQ's signing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nsudo apt-get install curl gnupg apt-transport-https -y\n\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions using HTTP API\nDESCRIPTION: Command to import RabbitMQ definitions directly using the HTTP API. This requires the management plugin and properly formatted JSON definition file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\ncurl -u {username}:{password} -H \"Content-Type: application/json\" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions\n```\n\n----------------------------------------\n\nTITLE: Listing Cluster Nodes in rabbitmqadmin\nDESCRIPTION: This command demonstrates how to list cluster nodes using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list nodes\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Handler in RabbitMQ Java Client\nDESCRIPTION: Demonstrates how to set a custom exception handler for a ConnectionFactory. The exception handler is used for all connections created by the factory and is responsible for handling unhandled exceptions related to connection, channel, recovery, and consumer lifecycle.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\ncf.setExceptionHandler(customHandler);\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Server-Generated Names and Default Exchange in RabbitMQ\nDESCRIPTION: This regular expression pattern grants a user access to server-generated names and the default exchange in RabbitMQ. It matches strings that start with 'amq.gen' or exactly match 'amq.default'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_12\n\nLANGUAGE: regex\nCODE:\n```\n'^(amq\\.gen.*|amq\\.default)$'\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Users\nDESCRIPTION: Command to display all users defined in the RabbitMQ broker's internal database. The output shows each username followed by a list of tags set for that user.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_users\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Sender with Fanout Exchange\nDESCRIPTION: Message sender implementation that publishes messages to a fanout exchange at regular intervals. Uses Spring's scheduling to send messages every second.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut3;\n\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Tut3Sender {\n\n\t@Autowired\n\tprivate RabbitTemplate template;\n\n\t@Autowired\n\tprivate FanoutExchange fanout;\n\n\tAtomicInteger dots = new AtomicInteger(0);\n\n\tAtomicInteger count = new AtomicInteger(0);\n\n\t@Scheduled(fixedDelay = 1000, initialDelay = 500)\n\tpublic void send() {\n\t\tStringBuilder builder = new StringBuilder(\"Hello\");\n\t\tif (dots.getAndIncrement() == 3) {\n\t\t\tdots.set(1);\n\t\t}\n\t\tfor (int i = 0; i < dots.get(); i++) {\n\t\t\tbuilder.append('.');\n\t\t}\n\t\tbuilder.append(count.incrementAndGet());\n\t\tString message = builder.toString();\n\t\ttemplate.convertAndSend(fanout.getName(), \"\", message);\n\t\tSystem.out.println(\" [x] Sent '\" + message + \"'\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Discovering Peers in RabbitMQ Cluster (Bash)\nDESCRIPTION: Runs a peer discovery on the target node and prints the discovered nodes. Useful for cluster formation and troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics discover_peers --timeout 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced HTTP Options for RabbitMQ Management Plugin\nDESCRIPTION: This snippet shows how to configure advanced HTTP options such as response compression and client inactivity timeouts for the RabbitMQ Management plugin using the INI configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.compress = true\n\n# Configures HTTP (non-encrypted) listener timeouts\nmanagement.tcp.idle_timeout       = 120000\nmanagement.tcp.inactivity_timeout = 120000\nmanagement.tcp.request_timeout    = 10000\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Stream Plugin Enablement - Shell\nDESCRIPTION: Docker command to start RabbitMQ broker and enable the stream plugin for testing the deduplication features.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5552:5552 \\\n    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \\\n    rabbitmq:3.9\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ Publisher in Go\nDESCRIPTION: Example of creating a publisher in Go that sends messages to an exchange with a routing key. The publisher must be closed when no longer needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n// you can use ExchangeAddress and QueueAddress to publish to the queue\npublisher, err := amqpConnection.NewPublisher(context.Background(), &rmq.ExchangeAddress{\n        Exchange: \"foo\",\n        Key:      \"bar\",\n    }, nil)\n\n// close the publisher when it is no longer necessary \npublisher.close()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Memory Metric with cURL and jq in Bash\nDESCRIPTION: Command to extract a single memory value from the API response using jq. This retrieves just the allocated memory total instead of the full breakdown.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -u guest:guest -X GET http://127.0.0.1:15672/api/nodes/rabbit@hostname/memory | jq \".memory.total.allocated\"\n# => 397365248\n```\n\n----------------------------------------\n\nTITLE: Configuring Config File Peer Discovery Backend in RabbitMQ\nDESCRIPTION: Configuration settings for the classic config peer discovery backend, which uses a predefined list of nodes specified in the config file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in RabbitMQ\nDESCRIPTION: This command enables either a specific feature flag or all currently disabled flags. It's crucial for activating new features after an upgrade or ensuring all nodes have consistent feature sets.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag <all | name>\n```\n\n----------------------------------------\n\nTITLE: Enabling the RabbitMQ Stream Plugin via CLI\nDESCRIPTION: Command to enable the RabbitMQ Stream plugin using the rabbitmq-plugins tool. This is required before clients can successfully connect to use the stream functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Callback for MQ#queue in Ruby AMQP 0.7\nDESCRIPTION: This snippet shows how to use the new callback feature for MQ#queue, which exposes the synchronous API for Queue.Declare/Queue.Declare-Ok as an asynchronous callback. It provides information about the declared queue, including message and consumer counts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-01-19-ruby-amqp-0-7-released/index.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nchannel = MQ.new\nfanout  = channel.fanout(:task_fanout)\nchannel.queue(:tasks) do |queue, message_count, consumer_count|\n  puts \"Queue #{queue.name} declared!\"\n  puts \"Message count: #{message_count}\"\n  puts \"Consumer count: #{consumer_count}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Passive Queue Declaration in RabbitMQ .NET Client\nDESCRIPTION: Demonstrates passive declaration of a queue that checks if a queue exists without creating it. Returns information about the queue such as message count and consumer count if the queue exists, or throws an exception if it doesn't.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await channel.QueueDeclarePassiveAsync(\"queue-name\");\n// returns the number of messages in Ready state in the queue\nresponse.MessageCount;\n// returns the number of consumers the queue has\nresponse.ConsumerCount;\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Metrics Collection in RabbitMQ Java Client\nDESCRIPTION: Shows how to enable metrics collection using StandardMetricsCollector with the ConnectionFactory. This allows tracking of published messages and other metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2016-11-30-metrics-support-in-rabbitmq-java-client-4-0/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory connectionFactory = new ConnectionFactory();\nStandardMetricsCollector metrics = new StandardMetricsCollector();\nconnectionFactory.setMetricsCollector(metrics);    \n// later in the code\nlong publishedMessagesCount = metrics.getPublishedMessages().getCount();\n```\n\n----------------------------------------\n\nTITLE: Computing Password Hash via HTTP API\nDESCRIPTION: cURL command to compute a password hash using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/passwords.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -4su guest:guest -X GET localhost:15672/api/auth/hash_password/foobarbaz\n```\n\n----------------------------------------\n\nTITLE: Accessing System Service Logs with journalctl\nDESCRIPTION: Command to inspect system service logs using journalctl, which requires superuser privileges\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n```\n\n----------------------------------------\n\nTITLE: Suspending Listeners on a Specific RabbitMQ Node\nDESCRIPTION: Command to suspend listeners on a named RabbitMQ node, preventing the node from accepting any new client connections while maintaining existing ones.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# suspends listeners on node rabbit@node2.cluster.rabbitmq.svc: it won't accept any new client connections\nrabbitmqctl suspend_listeners -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: Checking Port Listener in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if the target node is not listening on the specified port. This command is useful for verifying if a specific port is being used by RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_port_listener 5672\n```\n\n----------------------------------------\n\nTITLE: Configuring Delivery Limit with Dead-Lettering in PowerShell\nDESCRIPTION: PowerShell command to set up both a delivery limit and dead-lettering for quorum queues. Messages exceeding the delivery limit of 50 will be sent to the 'redeliveries.limit.dlx' exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy qq-overrides ^\n    \"^qq\\.\" \"{\"\"delivery-limit\"\": 50, \"\"dead-letter-exchange\"\": \"\"redeliveries.limit.dlx\"\"}\" ^\n    --priority 123 ^\n    --apply-to \"quorum_queues\"\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Message Flow Diagram with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the basic RabbitMQ message flow pattern. It shows a producer (P) sending messages to an exchange (X), which routes them to two auto-generated queues (Q1, Q2), which are then consumed by different consumers (C₁, C₂). The diagram also includes proper styling using CSS classes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T3DiagramFull.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[amq.gen-RQ6…]]\n    Q2[[amq.gen-As8…]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X --> Q1\n    X --> Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Updating APT and Installing RabbitMQ Packages\nDESCRIPTION: This bash script updates the APT package list and installs RabbitMQ server along with its Erlang dependencies. It uses apt-get to perform the installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\n## Install Erlang packages\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Queue Leaders in RabbitMQ (Bash)\nDESCRIPTION: Rebalances queue leader replicas across cluster nodes. Supports different queue types (all, quorum, classic, stream) and allows filtering by vhost and queue name patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance \"all\" --vhost-pattern \"a-vhost\" --queue-pattern \".*\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host using rabbitmqctl\nDESCRIPTION: Deletes a virtual host named 'qa1' using the rabbitmqctl command line tool. This permanently removes the virtual host and all entities within it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost qa1\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in PHP RabbitMQ Consumer\nDESCRIPTION: This snippet shows how to implement message acknowledgment in a RabbitMQ consumer using PHP. It sets the 'no_ack' parameter to false and manually acknowledges messages after processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$callback = function ($msg) {\n  echo ' [x] Received ', $msg->getBody(), \"\\n\";\n  sleep(substr_count($msg->getBody(), '.'));\n  echo \" [x] Done\\n\";\n  $msg->ack();\n};\n\n$channel->basic_consume('task_queue', '', false, false, false, false, $callback);\n```\n\n----------------------------------------\n\nTITLE: Disabling File Logging in RabbitMQ\nDESCRIPTION: Configuration setting to deactivate logging to a file in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Enabling the STOMP Plugin in RabbitMQ\nDESCRIPTION: Command to enable the STOMP plugin using the rabbitmq-plugins CLI tool. This is required before clients can connect using the STOMP protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Adding Required Host Entries for OAuth 2.0 Setup\nDESCRIPTION: Required host entries that need to be added to the /etc/hosts file to enable proper DNS resolution for the OAuth 2.0 components. Without these entries, DNS errors will occur in the browser.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-proxy.md#2025-04-09_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n127.0.0.1  localhost keycloak rabbitmq oauth2-proxy\n```\n\n----------------------------------------\n\nTITLE: Deactivating Federation Policy in RabbitMQ\nDESCRIPTION: Removes the federation policy to stop federation for previously matching exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-exchanges/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy exchange-federation\n```\n\n----------------------------------------\n\nTITLE: Including STOMP JavaScript Client Library\nDESCRIPTION: HTML script tag to include the STOMP JavaScript client library in a web page.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"stomp.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Shutting Down RabbitMQ Node\nDESCRIPTION: Command to shut down both RabbitMQ and its runtime on the local node. Returns after runtime process exits and provides non-zero exit code if shutdown fails.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions Using rabbitmqadmin CLI\nDESCRIPTION: Command to export RabbitMQ definitions to a JSON file using rabbitmqadmin, which requires the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled\nrabbitmqadmin export /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Authentication for MQTT in RabbitMQ\nDESCRIPTION: Sets up TLS certificate-based authentication for MQTT connections, including options for extracting the username from the certificate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.ssl_cert_login = true\n```\n\nLANGUAGE: ini\nCODE:\n```\nssl_cert_login_from = common_name\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in RabbitMQ API\nDESCRIPTION: JSON payload for granting permissions to a user in a specific virtual host. The payload includes configure, write, and read permissions using regular expression patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container Limits for RabbitMQ\nDESCRIPTION: JSON configuration for setting default ulimits in Docker containers. This configuration should be added to the Docker daemon configuration file at /etc/docker/daemon.json to set the maximum number of open file handles to 64000.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration Settings\nDESCRIPTION: INI configuration for enabling TLS (WSS) with essential SSL parameters\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-mqtt.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.ssl.port       = 15676\nweb_mqtt.ssl.backlog    = 1024\nweb_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem\nweb_mqtt.ssl.certfile   = /path/to/server_certificate.pem\nweb_mqtt.ssl.keyfile    = /path/to/server_key.pem\n# needed when private key has a passphrase\n# web_mqtt.ssl.password   = changeme\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Consumer Prefetch in RabbitMQ\nDESCRIPTION: This Erlang configuration sets a default prefetch count of 250 for all consumers that don't explicitly specify one. This is set in the advanced.config file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-prefetch.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config file\n[\n {rabbit, [\n       {default_consumer_prefetch, {false,250}}\n     ]\n }\n].\n```\n\n----------------------------------------\n\nTITLE: Locating RabbitMQ plugin directories\nDESCRIPTION: Shows how to use the rabbitmq-plugins directories command to locate the plugin archives directory, plugin expansion directory, and enabled plugins file path.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins directories -s\n# => Plugin archives directory: /path/to/rabbitmq/plugins\n# => Plugin expansion directory: /path/to/node/node-plugins-expand\n# => Enabled plugins file: /path/to/enabled_plugins\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ SSL Acceptors Configuration\nDESCRIPTION: Number of Erlang processes that accept TLS connections\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.ssl = 10\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Application\nDESCRIPTION: Stops the RabbitMQ application while keeping the Erlang VM running. Typically used before performing management actions that require the application to be stopped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl stop_app\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Mechanisms in RabbitMQ\nDESCRIPTION: Configuration for specifying which authentication mechanisms are offered to connecting clients. This example shows the default configuration with PLAIN, AMQPLAIN, and ANONYMOUS mechanisms enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nauth_mechanisms.1 = PLAIN\nauth_mechanisms.2 = AMQPLAIN\nauth_mechanisms.3 = ANONYMOUS\n```\n\n----------------------------------------\n\nTITLE: Configuring System Limits for RabbitMQ with systemd\nDESCRIPTION: Sets the maximum number of open file handles for the RabbitMQ service using systemd configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=64000\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions Using HTTP API\nDESCRIPTION: Command to export RabbitMQ definitions using the HTTP API directly, which requires the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\ncurl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Listener Configuration Output\nDESCRIPTION: Example output showing RabbitMQ listener configuration including TLS-enabled ports for various protocols.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nInterface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication\nInterface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0\nInterface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\nInterface: [::], port: 15672, protocol: http, purpose: HTTP API\nInterface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\nInterface: [::], port: 1883, protocol: mqtt, purpose: MQTT\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumer Groups in RabbitMQ\nDESCRIPTION: This command lists groups of stream single active consumers for a vhost. It allows specifying which group information items to include in the results, such as stream, reference, partition_index, and number of consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumer_groups stream reference consumers\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth 2.0 Authentication for RabbitMQ Management UI (INI)\nDESCRIPTION: Configuration to enable OAuth 2.0 authentication in the RabbitMQ management UI. It sets the OAuth client ID and scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_user_client\nmanagement.oauth_scopes = <SPACE-SEPARATED LIST OF SCOPES. See below>\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Queue Using Java QueueingConsumer\nDESCRIPTION: This code shows how to consume messages from a RabbitMQ queue using the QueueingConsumer class. It sets up a consumer that acknowledges messages automatically (auto-ack) and processes them sequentially.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-02-10-introducing-publisher-confirms/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nQueueingConsumer qc = new QueueingConsumer(ch);\nch.basicConsume(QUEUE_NAME, true, qc);\nfor (int i = 0; i < MSG_COUNT; ++i) {\n        qc.nextDelivery();\n        System.out.printf(\"Consumed %d\\n\", i);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the RabbitMQ Java Client Repository\nDESCRIPTION: Bash command for cloning the RabbitMQ Java client source code repository from GitHub using git.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-client.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-java-client.git\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Non-built-in Type in Go\nDESCRIPTION: Shows how to create an exchange of a non-built-in type (x-delayed-message) with custom arguments using the Go client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_51\n\nLANGUAGE: go\nCODE:\n```\n_, err := management.DeclareExchange(context.TODO(), &CustomExchangeSpecification{\n        Name:             \"myExchange\",\n        ExchangeTypeName: \"x-delayed-message\",\n            Arguments: map[string]any{\n                \"x-delayed-type\": \"direct\",\n            },\n        })\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple RabbitMQ Plugins\nDESCRIPTION: Command to enable the 'shovel' and 'management' plugins along with all their dependencies. This demonstrates how to activate multiple plugins in a single command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-plugins.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_shovel rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Setting Up Federation Policy for All Queues in RabbitMQ\nDESCRIPTION: Command to create a policy that applies federation to all queues in the 'green' cluster, using the previously defined 'blue' upstream. This ensures messages published to the blue cluster can be consumed from the green cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/blue-green-upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy --apply-to queues blue-green-migration \".*\" \\\n  '{\"federation-upstream\":\"blue\"}'\n```\n\n----------------------------------------\n\nTITLE: Disabling Publishing by Setting Memory Watermark to Zero in RabbitMQ\nDESCRIPTION: Command to effectively block all publishing in a RabbitMQ cluster by setting the memory high watermark to 0, which triggers a resource alarm immediately.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/publishers/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0\n```\n\n----------------------------------------\n\nTITLE: Managing Vhost-Scoped Parameters in RabbitMQ (PowerShell)\nDESCRIPTION: Commands for setting, clearing, and listing vhost-scoped parameters using rabbitmqctl in a PowerShell environment. These parameters are specific to a virtual host and include a component name, name, and value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# sets a runtime parameter in a virtual host\nrabbitmqctl.bat set_parameter [-p vhost] <component_name> <name> <value>\n\n# clears (unsets) a runtime parameter in a virtual host\nrabbitmqctl.bat clear_parameter [-p vhost] <component_name> <name>\n\n# lists runtime parameters in a virtual host\nrabbitmqctl.bat list_parameters [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Feature Flags\nDESCRIPTION: Command to enable all feature flags on a running RabbitMQ node, which is important for feature access and future compatibility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-homebrew.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/opt/homebrew/sbin/rabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Including MQTT WebSocket Client Library\nDESCRIPTION: HTML script tag to include the Paho MQTT client library\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-mqtt.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- include the client library -->\n<script src=\"mqttws31.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Limit in RabbitMQ .NET Client\nDESCRIPTION: Shows how to set the channel limit to 32 using the ConnectionFactory in the RabbitMQ .NET client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\n// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured\n// to use a higher limit, otherwise the server's limit will be used.\ncf.RequestedChannelMax = 32;\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Parameters for OAuth 2.0 Endpoints in RabbitMQ (INI)\nDESCRIPTION: Example configuration to add extra parameters to the OAuth 2.0 authorization and token endpoints in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_authorization_endpoint_params.audience = some-audience-id\nmanagement.oauth_token_endpoint_params.audience = some-audience-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Authentication Backend in RabbitMQ\nDESCRIPTION: This example demonstrates how to configure a third-party authentication backend plugin in RabbitMQ using the full module name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n# note that the module name begins with a \"rabbit_\", not \"rabbitmq_\", like plugin\n# names usually do\nauth_backends.1 = rabbit_auth_backend_ip_range\n```\n\n----------------------------------------\n\nTITLE: Setting Disk Free Limit in RabbitMQ\nDESCRIPTION: The set_disk_free_limit command configures the minimum free disk space threshold. When free disk space falls below this limit, a disk alarm is triggered. The limit can be specified as an absolute value with memory unit symbol (e.g., 512M or 1G) or as a fraction relative to total RAM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nset_disk_free_limit disk_limit\n```\n\nLANGUAGE: bash\nCODE:\n```\nset_disk_free_limit mem_relative fraction\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Listener Configuration Sample\nDESCRIPTION: Example output showing RabbitMQ listener configuration including TLS-enabled ports for various protocols\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nInterface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication\nInterface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0\nInterface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\nInterface: [::], port: 15672, protocol: http, purpose: HTTP API\nInterface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\nInterface: [::], port: 1883, protocol: mqtt, purpose: MQTT\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang Packages for RabbitMQ\nDESCRIPTION: Installs the recommended Erlang packages for RabbitMQ. This command installs specific Erlang components required for RabbitMQ operation, avoiding the use of metapackages which do not pin dependency versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# This is recommended. Metapackages such as erlang and erlang-nox must only be used\n# with apt version pinning. They do not pin their dependency versions.\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions using HTTP API\nDESCRIPTION: Command to export RabbitMQ definitions directly using the HTTP API. This requires the management plugin to be enabled and proper authentication credentials.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\ncurl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Components in JSX\nDESCRIPTION: React/JSX import statements for tutorial-related components including diagrams and help text for the RabbitMQ Publish/Subscribe pattern documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TutorialsHelp from '@site/src/components/Tutorials/TutorialsHelp.md';\nimport T3DiagramExchange from '@site/src/components/Tutorials/T3DiagramExchange.md';\nimport T3DiagramBinding from '@site/src/components/Tutorials/T3DiagramBinding.md';\nimport T3DiagramFull from '@site/src/components/Tutorials/T3DiagramFull.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Options for RabbitMQ Web STOMP\nDESCRIPTION: Configuration options for fine-tuning the HTTP server behavior of the Web STOMP plugin, including timeouts and request limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# connection inactivity timeout\nweb_stomp.cowboy_opts.idle_timeout = 60000\n# max number of pending requests allowed on a connection\nweb_stomp.cowboy_opts.max_keepalive = 200\n# max number of headers in a request\nweb_stomp.cowboy_opts.max_headers   = 100\n# max number of empty lines before request body\nweb_stomp.cowboy_opts.max_empty_lines = 5\n# max request line length allowed in requests\nweb_stomp.cowboy_opts.max_request_line_length\n```\n\n----------------------------------------\n\nTITLE: Inspecting etcd Keys for RabbitMQ Peer Discovery\nDESCRIPTION: This bash command demonstrates how to list all keys used by the etcd-based peer discovery mechanism for RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\netcdctl get --prefix=true \"/rabbitmq\"\n```\n\n----------------------------------------\n\nTITLE: Changing a User's Password in RabbitMQ\nDESCRIPTION: Command to update the password for an existing RabbitMQ user. This only works for users in the internal RabbitMQ database, not for users from external authentication sources like LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl change_password janeway newpass\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation\nDESCRIPTION: Full implementation of a log message consumer that receives and processes messages from the 'logs' exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-php.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->exchange_declare('logs', 'fanout', false, false, false);\n\nlist($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n$channel->queue_bind($queue_name, 'logs');\n\necho \" [*] Waiting for logs. To exit press CTRL+C\\n\";\n\n$callback = function ($msg) {\n    echo ' [x] ', $msg->getBody(), \"\\n\";\n};\n\n$channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\ntry {\n    $channel->consume();\n} catch (\\Throwable $exception) {\n    echo $exception->getMessage();\n}\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Setting Management Plugin DB Cache Multiplier in RabbitMQ (INI)\nDESCRIPTION: This snippet demonstrates how to configure the database cache multiplier for the RabbitMQ management plugin. The default value is set to 5.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.db_cache_multiplier = 5\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TLS Support\nDESCRIPTION: INI configuration for enabling TLS support for STOMP connections, including certificate paths and verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile = /path/to/tls/ca_certificate.pem\nssl_options.certfile   = /path/to/tls/server_certificate.pem\nssl_options.keyfile    = /path/to/tls/server_key.pem\nssl_options.verify     =  verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nstomp.listeners.tcp.1 = 61613\n# default TLS-enabled port for STOMP connections\nstomp.listeners.ssl.1 = 61614\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Stream Client with Load Balancer\nDESCRIPTION: This snippet demonstrates how to configure the RabbitMQ stream Java client to always use a load balancer as the entry point, regardless of the metadata returned by the server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-23-connecting-to-streams/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAddress entryPoint = new Address(\"my-load-balancer\", 5552);\nEnvironment environment = Environment.builder()\n    .host(entryPoint.host())\n    .port(entryPoint.port())\n    .addressResolver(address -> entryPoint)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for RabbitMQ Cluster Formation with etcd\nDESCRIPTION: Advanced configuration using the advanced.config file for RabbitMQ cluster formation with etcd. This snippet shows how to encrypt the password and configure various etcd-related settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_40\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config file\n[\n {rabbit,\n     [{cluster_formation,\n          [{peer_discovery_etcd, [\n                {endpoints, [\n                  \"one.etcd.eng.example.local:2379\",\n                  \"two.etcd.eng.example.local:2479\",\n                  \"three.etcd.eng.example.local:2579\"\n                ]},\n\n                {etcd_prefix,   \"rabbitmq\"},\n                {cluster_name,  \"default\"},\n\n                {etcd_username, \"etcd user\"},\n                {etcd_password, {encrypted, <<\"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==\">>}\n                }]\n           }]\n      }]\n },\n\n  {config_entry_decoder, [\n             {passphrase, <<\"decryption key passphrase\">>}\n         ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel and Declaring a Queue in Objective-C\nDESCRIPTION: Creates a channel and declares a queue for sending messages in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-objectivec.md#2025-04-09_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\nid<RMQChannel> ch = [conn createChannel];\nRMQQueue *q = [ch queue:@\"hello\"];\n```\n\n----------------------------------------\n\nTITLE: Adding a Member to a Quorum Queue in RabbitMQ\nDESCRIPTION: CLI command to add a new member (replica) to a specified quorum queue in a given virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues add_member [-p <vhost>] <queue-name> <node>\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status in RabbitMQ\nDESCRIPTION: Command to verify cluster status after a node upgrade. This helps ensure the node has successfully rejoined the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/rolling-upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl cluster_status\n```\n\n----------------------------------------\n\nTITLE: Specifying Requeue Parameter in Markdown\nDESCRIPTION: These snippets show how to reference the requeue parameter for the basic.reject method in markdown. They are used to explain the different behaviors of the method based on this parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-08-03-well-ill-let-you-go-basicreject-in-rabbitmq/index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`requeue=false`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`requeue=true`\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Directory Structure Configuration\nDESCRIPTION: Default path configurations for RabbitMQ installation, including locations for configuration files, logs, plugins, and data storage. All paths are relative to $RABBITMQ_HOME, which represents the root directory created when extracting the binary archive.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/relocate.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$RABBITMQ_HOME/etc/rabbitmq/rabbitmq\n$RABBITMQ_HOME/var/lib/rabbitmq/mnesia\n$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME\n$RABBITMQ_HOME/var/log/rabbitmq\n$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log\n$RABBITMQ_HOME/plugins\n$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand\n$RABBITMQ_MNESIA_DIR.pid\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Statistics Collection Interval\nDESCRIPTION: This configuration snippet sets the interval for collecting statistics to 30 seconds, which can help reduce CPU and memory usage in systems with many connections, channels, and queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 30 seconds\ncollect_statistics_interval = 30000\n```\n\n----------------------------------------\n\nTITLE: Increasing Erlang Process Limit via Environment Variable\nDESCRIPTION: Setting a higher limit (2 million) for the maximum number of Erlang processes using the environment variable approach for high-connection environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_MAX_NUMBER_OF_PROCESSES=2000000\n```\n\n----------------------------------------\n\nTITLE: Setting Combined Federation and TTL Policy in RabbitMQ via HTTP API\nDESCRIPTION: Uses the RabbitMQ HTTP API to set a policy named 'ttl-fed' in the root virtual host that applies to queues with names starting with 'tf.' and configures both federation upstreams and a 60-second message TTL with priority 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/ttl-fed\n    {\"pattern\": \"^tf\\.\",\n    \"definition\": {\"federation-upstream-set\":\"all\", \"message-ttl\":60000},\n    \"priority\": 1,\n    \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Closing Multiple Connections in RabbitMQ with Limit\nDESCRIPTION: Command to close a limited number of connections on a specific vhost in RabbitMQ. This example closes 10 connections on the 'qa_env' vhost with an explanation message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_all_connections -p qa_env --limit 10 'Please close'\n```\n\n----------------------------------------\n\nTITLE: Growing Quorum Queue Replicas in RabbitMQ\nDESCRIPTION: CLI command to grow quorum queue replicas on a specific node, with options to target all or even queues and filter by vhost or queue patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues grow <node> <all | even> [--vhost-pattern <pattern>] [--queue-pattern <pattern>]\n```\n\n----------------------------------------\n\nTITLE: Configuring APT Repository for RabbitMQ on Debian Bookworm\nDESCRIPTION: This bash script configures the APT repository for installing RabbitMQ and Erlang on Debian Bookworm. It adds the necessary repository sources for both RabbitMQ server and Erlang packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in Foreground\nDESCRIPTION: Command to start a RabbitMQ node in the foreground, specifying the configuration file location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCONF_ENV_FILE=\"/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf\" /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Closing All Global Connections in RabbitMQ\nDESCRIPTION: Command to close all connections to a RabbitMQ node by using the global flag. This affects all vhosts on the node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_all_connections --global\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Password Length Validator\nDESCRIPTION: Configuration for setting up minimum password length validation with a 30-character requirement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/passwords.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncredential_validator.validation_backend = rabbit_credential_validator_min_password_length\ncredential_validator.min_length = 30\n```\n\n----------------------------------------\n\nTITLE: Managing Global Parameters in RabbitMQ (PowerShell)\nDESCRIPTION: Commands for setting, clearing, and listing global parameters using rabbitmqctl in a PowerShell environment. These parameters are not specific to any virtual host and include a name and value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# sets a global (virtual-host-independent) runtime parameter\nrabbitmqctl.bat set_global_parameter <name> <value>\n\n# clears (unsets) a global (virtual-host-independent) runtime parameter\nrabbitmqctl.bat clear_global_parameter <name>\n\n# lists global (virtual-host-independent) runtime parameters\nrabbitmqctl.bat list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic RabbitmqCluster Resource in YAML\nDESCRIPTION: This YAML snippet defines a basic RabbitmqCluster resource named 'definition' using the rabbitmq.com/v1beta1 API version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: definition\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Timeout for RabbitMQ etcd Peer Discovery\nDESCRIPTION: Configuration for setting the lock acquisition timeout in RabbitMQ's etcd-based peer discovery. This determines how long a node will wait to acquire a lock during cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# lock acquisition timeout in seconds\n# default: 300\n# cluster_formation.consul.lock_wait_time is an alias\ncluster_formation.etcd.lock_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: Enabling Federation Plugin in RabbitMQ\nDESCRIPTION: Commands to enable the RabbitMQ federation plugin and its management UI extension using rabbitmq-plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_federation\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_federation_management\n```\n\n----------------------------------------\n\nTITLE: Starting CLI Observer Interface for RabbitMQ\nDESCRIPTION: Launches a CLI observer interface on the target RabbitMQ node with a specified refresh interval in seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics observer --interval 10\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Shovel Using RabbitMQ CLI on Windows\nDESCRIPTION: This snippet shows how to declare a dynamic shovel using the rabbitmqctl.bat command on Windows. It sets up the same shovel configuration as the previous example, but with Windows-specific command line escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter shovel my-shovel ^\n  \"{\"\"src-protocol\"\": \"\"amqp091\"\", \"\"src-uri\"\":\"\"amqp://localhost\"\", \"\"src-queue\"\": \"\"source-queue\"\", ^\n   \"\"dest-protocol\"\": \"\"amqp091\"\", \"\"dest-uri\"\": \"\"amqp://remote.rabbitmq.local\"\", ^\n   \"\"dest-queue\"\": \"\"target-queue\"\", \"\"dest-queue-args\"\": {\"\"x-queue-type\"\": \"\"quorum\"\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Producer for RabbitMQ Streams in Java\nDESCRIPTION: Java code to create a Producer instance for publishing messages to a specific stream using the Environment API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment\n    .producerBuilder()\n    .stream(\"first-application-stream\") // stream to publish to\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Listener Timeouts for RabbitMQ Management\nDESCRIPTION: Sets timeout values for the HTTP listener, including idle timeout, inactivity timeout, and request timeout. All values are in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\n# Configures HTTP (non-encrypted) listener timeouts\nmanagement.tcp.idle_timeout       = 120000\nmanagement.tcp.inactivity_timeout = 120000\nmanagement.tcp.request_timeout    = 10000\n```\n\n----------------------------------------\n\nTITLE: Computing Password Hash using HTTP API\nDESCRIPTION: cURL command to compute a password hash using the RabbitMQ HTTP API. This method can be used as an alternative to rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/passwords.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -4su guest:guest -X GET localhost:15672/api/auth/hash_password/foobarbaz\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Tracing Plugin in Erlang\nDESCRIPTION: Illustrates how to configure the rabbitmq-tracing plugin using Erlang syntax. It shows how to set the log file directory and specify the username for creating tracing queues and bindings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-09-09-rabbitmq-tracing-a-ui-for-the-firehose/index.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n[{rabbitmq_tracing, [{directory, \"/my/log/file/location\"},\n                     {username,  \"guest\"}]}].\n```\n\n----------------------------------------\n\nTITLE: Filtering Exchanges with Regex Pattern\nDESCRIPTION: API endpoint example showing how to filter exchanges using a regular expression pattern with pagination enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:15672/api/exchanges?page=1&page_size=100&name=%5Eamq&use_regex=true&pagination=true\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS-based Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for DNS-based peer discovery which uses a seed hostname with DNS records and reverse DNS lookups to discover cluster peers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = dns\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns\n\ncluster_formation.dns.hostname = discovery.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Displaying epmd Connection Errors in Bash\nDESCRIPTION: Shows an example error message that appears when epmd is configured to use IPv6 exclusively but RabbitMQ nodes are not properly configured for IPv6 communication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nProtocol 'inet_tcp': register/listen error: econnrefused\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Calculation Strategy in RabbitMQ\nDESCRIPTION: Configuration examples for setting the memory calculation strategy in RabbitMQ. Shows how to configure either the 'rss' strategy (which queries the OS kernel) or the 'allocated' strategy (which queries runtime memory allocator information).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = rss\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = allocated\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with Entra ID OAuth 2.0 Authentication Backend\nDESCRIPTION: Sample RabbitMQ configuration (rabbitmq.conf) that enables Entra ID as an OAuth 2.0 authentication backend. Requires Tenant ID, Application ID, and jwks_uri value from Entra ID.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-entra-id/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = rabbit_auth_backend_oauth2\nauth_backends.2 = rabbit_auth_backend_internal\n\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = {PUT YOUR AZURE AD APPLICATION ID}\nmanagement.oauth_provider_url = https://login.microsoftonline.com/{YOUR_ENTRA_ID_TENANT_ID}\n\nauth_oauth2.resource_server_id = {PUT YOUR AZURE AD APPLICATION ID}\nauth_oauth2.additional_scopes_key = roles\nauth_oauth2.jwks_url = {PUT YOUR ENTRA ID JWKS URI VALUE}\n```\n\n----------------------------------------\n\nTITLE: Configuring queue leader locator strategy in RabbitMQ\nDESCRIPTION: Setting to control the queue leader location strategy. Available strategies are 'balanced' and 'client-local'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\nqueue_leader_locator = client-local\n```\n\n----------------------------------------\n\nTITLE: Waiting for RabbitMQ Startup Using rabbitmqctl\nDESCRIPTION: Command to wait for the RabbitMQ application to start on the target node. Used to ensure the RabbitMQ service is fully operational before proceeding with other operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl await_startup\n```\n\n----------------------------------------\n\nTITLE: Updating apt Sources and Installing RabbitMQ Packages\nDESCRIPTION: This bash script updates the apt sources and installs the necessary Erlang and RabbitMQ packages. It specifies a supported Erlang version and installs individual Erlang components before installing the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\n## Install Erlang packages\n##\n## For versions not compatible with the latest available Erlang series, which is the case\n## for 3.13.x, apt must be instructed to install specifically Erlang 26.\n## Alternatively this can be done via version pinning, documented further in this guide.\nsupported_erlang_version=\"1:26.2.5.6-1\"\nsudo apt-get install -y erlang-base=$supported_erlang_version \\\n                        erlang-asn1=$supported_erlang_version \\\n                        erlang-crypto=$supported_erlang_version \\\n                        erlang-eldap=$supported_erlang_version \\\n                        erlang-ftp=$supported_erlang_version \\\n                        erlang-inets=$supported_erlang_version \\\n                        erlang-mnesia=$supported_erlang_version \\\n                        erlang-os-mon=$supported_erlang_version \\\n                        erlang-parsetools=$supported_erlang_version \\\n                        erlang-public-key=$supported_erlang_version \\\n                        erlang-runtime-tools=$supported_erlang_version \\\n                        erlang-snmp=$supported_erlang_version \\\n                        erlang-ssl=$supported_erlang_version \\\n                        erlang-syntax-tools=$supported_erlang_version \\\n                        erlang-tftp=$supported_erlang_version \\\n                        erlang-tools=$supported_erlang_version \\\n                        erlang-xmerl=$supported_erlang_version\n\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Shovel using HTTP API (JSON)\nDESCRIPTION: This JSON payload is used with the HTTP API to declare a dynamic shovel. It specifies source and destination protocols, URIs, and queues for message transfer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-dynamic.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\":  \"amqp://localhost\",\n    \"src-queue\":  \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqp://remote.rabbitmq.local\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions Using HTTP API with jq Formatting\nDESCRIPTION: Command to export RabbitMQ definitions using the HTTP API and pipe the output to jq for more human-friendly formatting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\n#\n# jq is a 3rd party tool that must be available in PATH\ncurl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions | jq\n```\n\n----------------------------------------\n\nTITLE: Checking Certificate Expiration in RabbitMQ (Bash)\nDESCRIPTION: Checks the expiration date on certificates for TLS-configured listeners. Supports time units like days, weeks, months, and years.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Free Limit in RabbitMQ (INI)\nDESCRIPTION: Sets an absolute disk free space limit, which when reached, triggers flow control. This example sets it to 2GB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 2GB\n```\n\n----------------------------------------\n\nTITLE: Using Temp Queue in STOMP Send Frame\nDESCRIPTION: Example of using temporary queue destinations in STOMP SEND frame with reply-to header.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nSEND\ndestination:/queue/reply-test\nreply-to:/temp-queue/foo\n\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Memory Threshold in RabbitMQ Configuration\nDESCRIPTION: Configuration examples for setting absolute memory limits using different memory units (bytes, MiB, GiB, TiB).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/memory.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1073741824\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1024MiB\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 4Gi\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1Ti\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management UI\nDESCRIPTION: Sets up port forwarding and retrieves credentials to access the RabbitMQ Management UI. This allows for web-based management and monitoring of the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nusername=\"$(kubectl get secret hello-world-default-user -o jsonpath='{.data.username}' | base64 --decode)\"\necho \"username: $username\"\npassword=\"$(kubectl get secret hello-world-default-user -o jsonpath='{.data.password}' | base64 --decode)\"\necho \"password: $password\"\n\nkubectl port-forward \"service/hello-world\" 15672\n```\n\n----------------------------------------\n\nTITLE: Logging Node Unavailability in RabbitMQ\nDESCRIPTION: Example log message when a RabbitMQ node detects that another node has gone down due to net tick timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/nettick.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n2018-11-22 10:44:33.654 [info] node rabbit@peer-hostname down: net_tick_timeout\n```\n\n----------------------------------------\n\nTITLE: Binding Queue and Consuming Messages with RabbitMQ in Go\nDESCRIPTION: This code snippet shows how to bind a queue to a 'logs' exchange and consume messages from it using RabbitMQ Go client. It handles declaring a queue with a server-generated name, binding it to the exchange, and processing incoming messages in a goroutine.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n        true,  // exclusive\n        false, // no-wait\n        nil,   // arguments\n)\nfailOnError(err, \"Failed to declare a queue\")\n\nerr = ch.QueueBind(\n        q.Name, // queue name\n        \"\",     // routing key\n        \"logs\", // exchange\n        false,\n        nil,\n)\nfailOnError(err, \"Failed to bind a queue\")\n\nmsgs, err := ch.Consume(\n        q.Name, // queue\n        \"\",     // consumer\n        true,   // auto-ack\n        false,  // exclusive\n        false,  // no-local\n        false,  // no-wait\n        nil,    // args\n)\nfailOnError(err, \"Failed to register a consumer\")\n\nvar forever chan struct{}\n\ngo func() {\n        for d := range msgs {\n                log.Printf(\" [x] %s\", d.Body)\n        }\n}()\n\nlog.Printf(\" [*] Waiting for logs. To exit press CTRL+C\")\n<-forever\n```\n\n----------------------------------------\n\nTITLE: Queue Binding with Routing Key in RabbitMQ\nDESCRIPTION: Creating a binding between a queue and an exchange with a specific routing key 'black'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchannel.queue_bind(exchange=exchange_name,\n                   queue=queue_name,\n                   routing_key='black')\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Memory Threshold in RabbitMQ Configuration\nDESCRIPTION: Configuration example for setting relative memory threshold as a fraction of available RAM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/memory.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.relative = 0.4\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Shovel Plugin via CLI\nDESCRIPTION: Command to enable the RabbitMQ Shovel plugin using rabbitmq-plugins command line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_shovel\n```\n\n----------------------------------------\n\nTITLE: Running post-upgrade tasks in rabbitmq-upgrade\nDESCRIPTION: Command to execute tasks after upgrading, such as rebalancing mirrored and quorum queues across all nodes in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npost_upgrade\n```\n\n----------------------------------------\n\nTITLE: Importing Server Certificate to Java Trust Store\nDESCRIPTION: Command for importing a server certificate into a Java trust store using the keytool utility. This creates a trust store that will be used by the Java client to verify the server's identity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -import -alias server1 -file /path/to/server_certificate.pem -keystore /path/to/rabbitstore\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits via CLI in RabbitMQ\nDESCRIPTION: These commands demonstrate how to clear specific or all user limits using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/user-limits.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits user1 'max-connections'\n\nrabbitmqctl clear_user_limits user1 'max-channels'\n\nrabbitmqctl clear_user_limits user1 all\n```\n\n----------------------------------------\n\nTITLE: Prometheus RBAC Configuration\nDESCRIPTION: YAML configuration for setting up RBAC permissions for Prometheus in Kubernetes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/operator-monitoring.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources:\n  - configmaps\n  verbs: [\"get\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus-k8s\n  namespace: monitoring\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for installing RabbitMQ and its dependencies using DNF package manager on RHEL-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndnf update -y\n```\n\nLANGUAGE: bash\nCODE:\n```\ndnf install -y logrotate\n```\n\nLANGUAGE: bash\nCODE:\n```\ndnf install -y erlang rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Log File Path in RabbitMQ\nDESCRIPTION: Configuration setting to specify a custom file path for RabbitMQ logs in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = /opt/custom/var/log/rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Basic LDAP DN Lookup Configuration in INI Format\nDESCRIPTION: Simple configuration example for setting up DN lookup attributes and base DN in LDAP\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.dn_lookup_attribute = userPrincipalName\nauth_ldap.dn_lookup_base = DC=gopivotal,DC=com\n```\n\n----------------------------------------\n\nTITLE: Publishing Tasks to RabbitMQ Queue in Ruby\nDESCRIPTION: This code snippet demonstrates how to publish messages (tasks) to a RabbitMQ queue. It allows for command-line input of messages and sets the message as persistent.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmessage = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')\n\nqueue.publish(message, persistent: true)\nputs \" [x] Sent #{message}\"\n```\n\n----------------------------------------\n\nTITLE: Launching Keycloak and RabbitMQ for OAuth 2.0 Testing\nDESCRIPTION: Bash commands to start Keycloak and RabbitMQ containers for testing OAuth 2.0 configuration with multiple resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-multiresource.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\nMODE=\"multi-keycloak\" CONF=\"rabbitmq.scenario1.conf\" make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Enabling STOMP Plugin in RabbitMQ\nDESCRIPTION: Command to enable the STOMP plugin using rabbitmq-plugins CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Message Consumer in Swift\nDESCRIPTION: Creates a connection, declares a fanout exchange, creates a temporary queue, binds it to the exchange, and subscribes to log messages using the RabbitMQ Swift client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-swift.md#2025-04-09_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\nconn.start()\nlet ch = conn.createChannel()\nlet x = ch.fanout(\"logs\")\nlet q = ch.queue(\"\", options: .exclusive)\nq.bind(x)\nprint(\"Waiting for logs.\")\nq.subscribe({(_ message: RMQMessage) -> Void in\n    print(\"Received \\(String(data: message.body, encoding: .utf8))\")\n})\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Application Status (Bash)\nDESCRIPTION: Health check that fails if the RabbitMQ application is not running on the target node. Useful for basic service availability checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_running\n```\n\n----------------------------------------\n\nTITLE: Configuring Cipher Suite Order in Classic Config Format for RabbitMQ\nDESCRIPTION: Example showing how to enforce server-provided cipher suite order using the classic Erlang term config format. This configuration helps mitigate attacks involving weak cipher suites.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_40\n\nLANGUAGE: erlang\nCODE:\n```\n%% Enforce server-provided cipher suite order (preference)\n[\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                          {certfile,   \"/path/to/server_certificate.pem\"},\n                          {keyfile,    \"/path/to/server_key.pem\"},\n                          {versions,   ['tlsv1.2', 'tlsv1.1']},\n\n                          %% ...\n\n\n                          {honor_cipher_order,   true},\n                          {honor_ecc_order,      true},\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Queues Sequentially in Puka\nDESCRIPTION: This snippet demonstrates how to declare 1000 queues one by one in a sequential manner using Puka. Each queue declaration is completed before the next one begins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-07-08-puka-rethinking-amqp-clients/index.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(1000):\n    promise = client.queue_declare(queue='a%04i' % i)\n    client.wait(promise)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocked Connection Events in .NET\nDESCRIPTION: Shows how to register event handlers for ConnectionBlocked and ConnectionUnblocked events in the RabbitMQ .NET client. The implementation uses event handlers to manage connection state changes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/connection-blocked.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n  public void HandleBlocked(object sender, ConnectionBlockedEventArgs args)\n  {\n      // Connection is now blocked\n  }\n\n  public void HandleUnblocked(object sender, EventArgs args)\n  {\n      // Connection is now unblocked\n  }\n\nConn.ConnectionBlocked   += HandleBlocked;\nConn.ConnectionUnblocked += HandleUnblocked;\n```\n\n----------------------------------------\n\nTITLE: Querying Log Location in RabbitMQ with bash\nDESCRIPTION: Command to find the current log file location using rabbitmq-diagnostics CLI tool in a bash shell environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q log_location\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication with Internal Authorization\nDESCRIPTION: Configuration example for using the LDAP backend for authentication and the internal backend for authorisation, demonstrating how to use mixed backends for different aspects of the authentication process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = ldap\nauth_backends.1.authz = internal\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP 1.0 Prefetch Count\nDESCRIPTION: Sets the link credit amount for receiving messages in AMQP 1.0 connections. Credit is automatically renewed when it falls below 10% of this value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n{prefetch_count, 10}\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host with Metadata using rabbitmqctl\nDESCRIPTION: Creates a virtual host with a description and default queue type. This example sets 'quorum' as the default queue type for the virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1 --description \"QA env 1\" --default-queue-type quorum\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues on Unix/Linux\nDESCRIPTION: Command to list all the queues in RabbitMQ and see how many messages they contain, requires administrator privileges on Unix/Linux systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Listeners with rabbitmq-diagnostics in Bash\nDESCRIPTION: Command to inspect all network listeners enabled on a RabbitMQ node. This information helps verify that all expected protocols and ports are properly configured.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q listeners --node rabbit@target-hostname\n# => Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication\n# => Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0\n# => Interface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\n# => Interface: [::], port: 15672, protocol: http, purpose: HTTP API\n# => Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\n```\n\n----------------------------------------\n\nTITLE: Tuning TCP Settings for High Connection Churn in Linux\nDESCRIPTION: This configuration reduces TCP FIN timeout, enables socket reuse, and adjusts TCP keepalive settings to better handle high connection churn scenarios in RabbitMQ deployments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_fin_timeout = 30\n\nnet.ipv4.tcp_keepalive_time=30\nnet.ipv4.tcp_keepalive_intvl=10\nnet.ipv4.tcp_keepalive_probes=4\n\nnet.ipv4.tcp_tw_reuse = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Proxy for RabbitMQ HTTP API\nDESCRIPTION: Apache proxy configuration for RabbitMQ HTTP API with required nocanon setting for default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_25\n\nLANGUAGE: apacheconf\nCODE:\n```\nProxyPassReverse / http://rabbitmq-host:15672/\n# \"nocanon\" is required only if default RabbitMQ virtual host is used\nProxyPass / http://rabbitmq-host:15672/ nocanon\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ Listeners with rabbitmq-diagnostics\nDESCRIPTION: This snippet shows the output of the 'rabbitmq-diagnostics listeners' command, which displays all the TCP listeners on a RabbitMQ node, including their ports, protocols, and purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nInterface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication\nInterface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0\nInterface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\nInterface: [::], port: 15672, protocol: http, purpose: HTTP API\nInterface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\nInterface: [::], port: 1883, protocol: mqtt, purpose: MQTT\n```\n\n----------------------------------------\n\nTITLE: Closing Channel in .NET\nDESCRIPTION: Example showing how to properly close a channel when it's no longer needed using the .NET client\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar ch = await conn.CreateChannelAsync();\n\n// do some work\n\n// close the channel when it is no longer needed\n\nch.Close();\n```\n\n----------------------------------------\n\nTITLE: LDAP TLS Certificate Configuration\nDESCRIPTION: Configures CA certificate, client certificate and private key file paths for LDAP TLS connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n# local filesystem path to a CA certificate bundle file\nauth_ldap.ssl_options.cacertfile = /path/to/ca_certificate.pem\n\n# local filesystem path to a client certificate file\nauth_ldap.ssl_options.certfile = /path/to/client_certfile.pem\n\n# local filesystem path to a client private key file\nauth_ldap.ssl_options.keyfile = /path/to/client_key.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Server as a Service with systemctl\nDESCRIPTION: Command to enable RabbitMQ server to start automatically on system boot. This makes the service persistent across system restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Listing cipher suites supported by RabbitMQ\nDESCRIPTION: Command to list all cipher suites supported by RabbitMQ encoding commands. This is useful for understanding encryption options available for secure connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_ciphers\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts in RabbitMQ (Bash)\nDESCRIPTION: Displays a list of virtual hosts with specified information items. This command allows customization of output to include various details about each virtual host, such as name, tracing status, and default queue type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_vhosts name tracing\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Handshake Timeout in RabbitMQ\nDESCRIPTION: Default configuration for the TLS handshake timeout in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nssl_handshake_timeout = 5000\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval in RabbitMQ\nDESCRIPTION: Configuration for setting the statistics collection interval in RabbitMQ. Increasing this value reduces CPU and memory usage but makes metrics refresh less frequently.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 30 seconds\ncollect_statistics_interval = 30000\n```\n\n----------------------------------------\n\nTITLE: Verifying TLS Version with OpenSSL (Bash)\nDESCRIPTION: Uses openssl s_client to verify the TLS version and cipher suite negotiated with a RabbitMQ server. Shows examples for both TLSv1.3 and TLSv1.2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# connect using TLSv1.3\nopenssl s_client -connect 127.0.0.1:5671 -tls1_3\n```\n\nLANGUAGE: bash\nCODE:\n```\n# connect using TLSv1.2\nopenssl s_client -connect 127.0.0.1:5671 -tls1_2\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Filter Size with Java Client\nDESCRIPTION: Demonstrates how to set the stream filter size using the Java client's streamCreator method. The filter size can be set between 16 and 255 bytes, with a default of 16 bytes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-24-stream-filtering-internals/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nenvironment.streamCreator()\n  .stream(\"invoices\")\n  .filterSize(32)\n  .create()\n```\n\n----------------------------------------\n\nTITLE: Configuring Priority Queue in RabbitMQ using STOMP\nDESCRIPTION: This example shows how to subscribe to a priority queue using STOMP protocol. It includes the destination and the x-max-priority header to set the maximum priority level for the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nSUBSCRIBE\ndestination:/queue/my-priority-queue\nx-max-priority:5\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Parameters in Bash\nDESCRIPTION: Command to set federation upstream parameters using rabbitmqctl in bash, including URI and expiry configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream my-upstream \\\n    '{\"uri\":\"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none\",\"expires\":3600000}'\n```\n\n----------------------------------------\n\nTITLE: Listing Global Parameters in RabbitMQ\nDESCRIPTION: Command to list all global runtime parameters in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Starting MQTT Publisher with OAuth 2.0\nDESCRIPTION: Command to start an MQTT publisher using a handcrafted JWT token with the appropriate scopes for MQTT publishing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake start-mqtt-publish TOKEN=$(bin/jwt_token scopes-for-mqtt.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Setting up a Shovel in RabbitMQ\nDESCRIPTION: Kubernetes manifest for creating a dynamic Shovel named 'my-shovel' that transfers messages from 'the-source-queue' to 'the-destination-queue'. The shovel URIs are stored in a Secret and the shovel is associated with a RabbitMQ cluster named 'example-rabbit'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Shovel\nmetadata:\n  name: shovel-example\n  namespace: rabbitmq-system\nspec:\n  name: \"my-shovel\"\n  uriSecret:\n    # secret must be created in the same namespace as this Shovel object; in this case 'rabbitmq-system'\n    name: {secret-name}\n  srcQueue: \"the-source-queue\"\n  destQueue: \"the-destination-queue\"\n  rabbitmqClusterReference:\n    name: example-rabbit\n```\n\n----------------------------------------\n\nTITLE: Setting Security Headers in RabbitMQ Management\nDESCRIPTION: Examples of configuring additional security-related HTTP headers for the RabbitMQ Management UI, including X-Frame-Options, X-XSS-Protection, and X-Content-Type-Options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.headers.content_type_options = nosniff\nmanagement.headers.xss_protection = 1; mode=block\nmanagement.headers.frame_options = DENY\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.hsts.policy = max-age=31536000; includeSubDomains\nmanagement.csp.policy = default-src 'self'; script-src 'self' 'unsafe-eval'\n\nmanagement.headers.content_type_options = nosniff\nmanagement.headers.xss_protection = 1; mode=block\nmanagement.headers.frame_options = DENY\n```\n\n----------------------------------------\n\nTITLE: Cluster Resource Listing Commands\nDESCRIPTION: Various commands for listing RabbitMQ resources like nodes, vhosts, users, queues, exchanges, and bindings\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list nodes\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list vhosts\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list users\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list queues\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"monitoring\" list queues\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list exchanges\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" list exchanges\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list bindings\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" list bindings\n```\n\n----------------------------------------\n\nTITLE: Detecting Network Partitions in RabbitMQ Logs\nDESCRIPTION: This snippet shows a log entry that indicates a network partition has been detected between RabbitMQ nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/partitions.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2020-05-18 06:55:37.324 [error] <0.341.0> Mnesia(rabbit@warp10): ** ERROR ** mnesia_event got {inconsistent_database, running_partitioned_network, rabbit@hostname2}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connections Limit for User via CLI\nDESCRIPTION: This command sets the maximum number of connections a specific user can open using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits user1 '{\"max-connections\": 10}'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Namespace for kubectl Commands\nDESCRIPTION: Commands to set the 'test-rabbitmq' namespace as the default context for kubectl operations and verify the configuration, making subsequent commands target this namespace by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# set the namespace to be the current (default) one\nkubectl config set-context --current --namespace=test-rabbitmq\n# verify\nkubectl config view --minify | grep namespace:\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Prefetch Count Configuration\nDESCRIPTION: Optional configuration for setting the link credit amount for the receiving link.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n  {prefetch_count, 10}\n```\n\n----------------------------------------\n\nTITLE: AMQP Protocol Methods for Acknowledgements\nDESCRIPTION: Lists the AMQP protocol methods used for positive and negative acknowledgements in RabbitMQ. These methods are used by consumers to confirm message delivery and processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_0\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.ack   # Used for positive acknowledgements\nbasic.nack  # Used for negative acknowledgements (RabbitMQ extension)\nbasic.reject # Used for negative acknowledgements (with limitations)\n```\n\n----------------------------------------\n\nTITLE: Setting Message Persistence in C# RabbitMQ Producer\nDESCRIPTION: This code demonstrates how to mark messages as persistent in a RabbitMQ producer using C#. It sets the IBasicProperties.Persistent property to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar body = Encoding.UTF8.GetBytes(message);\nvar properties = channel.CreateBasicProperties();\nproperties.Persistent = true;\n\nchannel.BasicPublish(exchange: string.Empty,\n                     routingKey: \"task_queue\",\n                     basicProperties: properties,\n                     body: body);\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Limits for RabbitMQ\nDESCRIPTION: Example configuration file for setting file handle limits in systemd. This file should be placed at /etc/systemd/system/rabbitmq-server.service.d/limits.conf to increase the maximum number of open file handles to 64000.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\n[Service]\nLimitNOFILE=64000\n```\n\n----------------------------------------\n\nTITLE: Removing All Tags from a RabbitMQ User\nDESCRIPTION: Command to remove all tags from a RabbitMQ user. This will revoke any special privileges associated with tags like 'administrator' while keeping the user account intact.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_tags janeway\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-AMQPLIB Dependency with Composer\nDESCRIPTION: Composer configuration file that specifies the php-amqplib dependency required for RabbitMQ integration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"require\": {\n        \"php-amqplib/php-amqplib\": \"^3.2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required PHP-AMQPLIB Classes\nDESCRIPTION: Required imports for establishing RabbitMQ connection and creating messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval in RabbitMQ\nDESCRIPTION: Changes the statistics collection interval from the default of 5 seconds to 15 seconds. Increasing this value reduces CPU consumption in environments with many connections, channels, or queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n# 15s\ncollect_statistics_interval = 15000\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions Using HTTP API\nDESCRIPTION: Command to import RabbitMQ definitions using the HTTP API directly, which requires the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\ncurl -u {username}:{password} -H \"Content-Type: application/json\" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions\n```\n\n----------------------------------------\n\nTITLE: Configuring SASL Authentication Mechanisms in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to configure the SASL authentication mechanisms offered to clients in RabbitMQ. The default configuration enables PLAIN and AMQPLAIN mechanisms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\n# see the Access Control guide to learn more\nauth_mechanisms.1 = PLAIN\nauth_mechanisms.2 = AMQPLAIN\n```\n\n----------------------------------------\n\nTITLE: Configuring net_ticktime in Windows Environment\nDESCRIPTION: Creates a configuration file that sets the net_ticktime kernel parameter for RabbitMQ. This controls the frequency of heartbeat checks between distributed Erlang nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/windows-configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n@echo off\nset SERVER_ADDITIONAL_ERL_ARGS=-kernel net_ticktime 120\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocked Connection Notifications in Java\nDESCRIPTION: Demonstrates how to implement a BlockedListener interface in Java to handle RabbitMQ connection blocking notifications. The code shows how to register listeners for both blocked and unblocked events on a RabbitMQ connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/connection-blocked.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nConnection connection = factory.newConnection();\nconnection.addBlockedListener(new BlockedListener() {\n    public void handleBlocked(String reason) throws IOException {\n        // Connection is now blocked\n    }\n\n    public void handleUnblocked() throws IOException {\n        // Connection is now unblocked\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling Helper Function for RabbitMQ Operations\nDESCRIPTION: A utility function that checks for errors in RabbitMQ operations and panics with a descriptive message if an error is encountered.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc failOnError(err error, msg string) {\n  if err != nil {\n    log.Panicf(\"%s: %s\", msg, err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key from Key Server (Bash)\nDESCRIPTION: Imports the RabbitMQ signing key from keys.openpgp.org using GPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"hkps://keys.openpgp.org\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth Providers for RabbitMQ Resources\nDESCRIPTION: This example shows how to configure two resources ('prod' and 'dev') managed by two distinct identity providers in RabbitMQ's OAuth 2.0 setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.resource_servers.1.id = prod\nauth_oauth2.resource_servers.1.oauth_provider_id = idp_prod\nauth_oauth2.resource_servers.2.id = dev\nauth_oauth2.resource_servers.2.oauth_provider_id = idp_dev\nauth_oauth2.oauth_providers.idp_prod.issuer = https://idp_prod.com\nauth_oauth2.oauth_providers.idp_dev.issuer = https://idp_dev.com\n```\n\n----------------------------------------\n\nTITLE: Setting Syslog Identity and Facility in RabbitMQ\nDESCRIPTION: This snippet configures custom identity and facility values for Syslog logging in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.identity = my_rabbitmq\nlog.syslog.facility = user\n```\n\n----------------------------------------\n\nTITLE: Creating Source and Target Queues\nDESCRIPTION: These commands create a source quorum queue with dead-lettering configuration and a target classic queue using the rabbitmqadmin tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin declare queue name=my-source-queue \\\n    durable=true queue_type=quorum arguments='{\"x-dead-letter-exchange\" : \"\",\n    \"x-dead-letter-routing-key\" : \"my-target-queue\" , \"x-overflow\" : \"reject-publish\"}'\n\nkubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin declare queue name=my-target-queue \\\n    durable=true queue_type=classic\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Cluster Node Restart and Status Check\nDESCRIPTION: A series of commands demonstrating how to stop, start, and check the status of RabbitMQ cluster nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl stop\n# => Stopping and halting node rabbit@rabbit1 ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit3]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl stop\n# => Stopping and halting node rabbit@rabbit3 ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management API with OAuth Token (Bash)\nDESCRIPTION: Command to launch a browser with a JWT token to access the RabbitMQ management API using the mgt_api_client OAuth client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-uaa url=http://localhost:15672/api/overview client_id=mgt_api_client secret=mgt_api_client\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key from Key Server (Bash)\nDESCRIPTION: Imports the RabbitMQ signing key from keys.openpgp.org using GPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"hkps://keys.openpgp.org\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\n----------------------------------------\n\nTITLE: Basic Static Shovel Configuration Structure in Erlang\nDESCRIPTION: Shows the basic structure of configuring static shovels in the RabbitMQ advanced configuration file. Defines the rabbitmq_shovel application configuration with a shovels list.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  %% ...\n]},\n\n{rabbitmq_shovel, [\n  {shovels, [\n    {shovel_one, [\n      %% shovel_one properties ...\n    ]},\n    %% ...\n  ]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Frame Size for RabbitMQ Stream Protocol in INI\nDESCRIPTION: Sets the maximum frame size for the RabbitMQ Stream protocol. The default is 1 MiB, but this example increases it to 2 MiB (2097152 bytes).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n# in bytes\nstream.frame_max = 2097152\n```\n\n----------------------------------------\n\nTITLE: Checking Classic Queue Mirroring Policy in RabbitMQ Cluster (Bash)\nDESCRIPTION: This command checks if the RabbitMQ cluster has a classic queue mirroring policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncheck_if_cluster_has_classic_queue_mirroring_policy\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Console Output\nDESCRIPTION: Configures console output to use JSON format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Setting Stream Heartbeat Timeout in RabbitMQ\nDESCRIPTION: This configuration sets a custom heartbeat timeout value of 20 seconds for stream protocol connections, which determines when a peer connection is considered unreachable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nstream.heartbeat = 20\n```\n\n----------------------------------------\n\nTITLE: Erlang Cookie Hash Display - Bash\nDESCRIPTION: Outputs hashed value of the shared authentication secret\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_cookie_hash -q\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Epoch Timestamp Format in RabbitMQ Logs\nDESCRIPTION: Configuration settings to use microseconds since UNIX epoch for timestamp format instead of RFC 3339.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = true\nlog.file.level = info\n\n# use microseconds since UNIX epoch for timestamp format\nlog.file.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Specific Version\nDESCRIPTION: Command to start RabbitMQ with a specific version tag while using portal mode and UAA OAuth provider\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-idp-initiated.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMODE=portal OAUTH_PROVIDER=uaa IMAGE=rabbitmq IMAGE_TAG=<YourVersion> make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Discovery Retries in RabbitMQ\nDESCRIPTION: This configuration sets the number of retries and delay interval for peer discovery operations in RabbitMQ. These settings help improve resilience during cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.discovery_retry_limit = 10\ncluster_formation.discovery_retry_interval = 500\n```\n\n----------------------------------------\n\nTITLE: Setting Default Log Level Format in RabbitMQ\nDESCRIPTION: Configuration showing the default log level format setting, which uses full value lowercase (e.g., 'info', 'warning').\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\n# full value, lower case is the default format\nlog.file.formatter.level_format = lc\n```\n\n----------------------------------------\n\nTITLE: Verifying a Three-Node RabbitMQ Cluster\nDESCRIPTION: Commands to check the status of a three-node RabbitMQ cluster from each of the member nodes, showing complete cluster membership.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit2,rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit1,rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n# => [{nodes,[{disc,[rabbit@rabbit3,rabbit@rabbit2,rabbit@rabbit1]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1,rabbit@rabbit3]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Receiving All Messages from Topic Exchange in RabbitMQ with Swift\nDESCRIPTION: Example showing how to receive all messages from a topic exchange by using the '#' wildcard, which matches zero or more words in the routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-swift.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nself.receiveLogsTopic([\"#\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Policy Using rabbitmqctl\nDESCRIPTION: Sets a policy to limit queue size to 1MiB using rabbitmqctl command line tool. When the limit is reached, oldest messages are discarded.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/maxlength/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy my-pol \"^one-meg$\" \\\n  '{\"max-length-bytes\":1048576}' \\\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Keys for OAuth 2.0 in RabbitMQ (Erlang)\nDESCRIPTION: This snippet shows how to configure signing keys for OAuth 2.0 in RabbitMQ using the Erlang format. It sets up an RSA public key for token verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  %% ...\n  %% backend configuration\n  {rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"my_rabbit_server\">>},\n    %% UAA signing key configuration\n    {key_config, [\n      {signing_keys, #{\n        <<\"a-key-ID\">> => {pem, <<\"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2dP+vRn+Kj+S/oGd49kq\n6+CKNAduCC1raLfTH7B3qjmZYm45yDl+XmgK9CNmHXkho9qvmhdksdzDVsdeDlhK\nIdcIWadhqDzdtn1hj/22iUwrhH0bd475hlKcsiZ+oy/sdgGgAzvmmTQmdMqEXqV2\nB9q9KFBmo4Ahh/6+d4wM1rH9kxl0RvMAKLe+daoIHIjok8hCO4cKQQEw/ErBe4SF\n2cr3wQwCfF1qVu4eAVNVfxfy/uEvG3Q7x005P3TcK+QcYgJxav3lictSi5dyWLgG\nQAvkknWitpRK8KVLypEj5WKej6CF8nq30utn15FQg0JkHoqzwiCqqeen8GIPteI7\nVwIDAQAB\n-----END PUBLIC KEY-----\">>}\n          }}\n      ]}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with TLS-Only Listeners in INI Format\nDESCRIPTION: Configuration example that disables regular TCP listeners and only enables TLS listeners, forcing all clients to connect using TLS on the specified port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# disables non-TLS listeners, only TLS-enabled clients will be able to connect\nlisteners.tcp = none\n\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Classic Queues with Multiple Queue Scenario\nDESCRIPTION: Shell command for testing classic queues in a distributed load scenario with 500 queues, each with a publisher and consumer. Tests total throughput of 5,000 messages per second across all queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# classic queues (with an exactly=3 mirroring policy where applicable)\nperf-test --producers 500 --consumers 500 --publishing-interval 0.1 --confirm 10 --multi-ack-every 100 --qos 100 \\\n          --variable-size 10:900 --variable-size 100:900 --variable-size 1000:900 --variable-size 5000:900 \\\n          --queue-pattern cq-%d --queue-pattern-from 1 --queue-pattern-to 500 \\\n          --auto-delete false --flag persistent\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Remote RabbitMQ Broker\nDESCRIPTION: Demonstrates how to connect to a RabbitMQ broker on a different machine by specifying its URI in the connection initialization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-swift.md#2025-04-09_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet conn = RMQConnection(uri: \"amqp://myrabbitserver.com:1234\",\n                         delegate: RMQConnectionDelegateLogger())\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Loopback Users\nDESCRIPTION: Configuration to allow remote connections for the guest user by setting loopback_users to none. This is discouraged for security reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# DANGER ZONE!\n#\n# allowing remote connections for default user is highly discouraged\n# as it dramatically decreases the security of the system. Delete the default user\n# instead and create a new one with generated secure credentials, or use JWT tokens,\n# or x.509 certificates for clients to authenticate themselves\nloopback_users = none\n```\n\n----------------------------------------\n\nTITLE: Using help command with RabbitMQ CLI tools in bash\nDESCRIPTION: Demonstrates how to view available commands and usage information for RabbitMQ CLI tools using the help command in bash shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl help\n\nrabbitmq-diagnostics help\n```\n\n----------------------------------------\n\nTITLE: Getting help for specific commands in PowerShell\nDESCRIPTION: Shows how to get detailed usage information for specific RabbitMQ CLI commands using the help subcommand in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat help add_vhost\n\nrabbitmq-diagnostics.bat help status\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth2 Portal Configuration\nDESCRIPTION: Commands to start RabbitMQ with portal mode and UAA OAuth provider settings\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-idp-initiated.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=portal\nOAUTH_PROVIDER=uaa make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Tools for Diagnostics\nDESCRIPTION: These bash commands show how to use various RabbitMQ CLI tools for diagnostics and status checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Building and Running the RPC Server in Spring AMQP\nDESCRIPTION: Commands for compiling the application and starting the RPC server. The server will listen for RPC requests and execute the Fibonacci calculation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-spring-amqp.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rabbitmq-tutorials.jar \\\n    --spring.profiles.active=rpc,server \\\n    --tutorial.client.duration=60000\n```\n\n----------------------------------------\n\nTITLE: Starting RPC Consumers with PerfTest across Cluster Nodes\nDESCRIPTION: Commands to start 5 consumers across a 3-node RabbitMQ cluster using PerfTest, demonstrating the setup of exclusive queues bound to a local random exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/local-random-exchange.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nperf-test -H amqp://localhost:5672 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5672 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5673 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5673 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5674 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with TLS-Only Listeners in INI Format\nDESCRIPTION: Configuration example that disables regular TCP listeners and only enables TLS listeners, forcing all clients to connect using TLS on the specified port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# disables non-TLS listeners, only TLS-enabled clients will be able to connect\nlisteners.tcp = none\n\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS EC2 Instance Tags for RabbitMQ Peer Discovery\nDESCRIPTION: This configuration demonstrates how to use EC2 instance tags for RabbitMQ peer discovery on AWS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.instance_tags.region = us-east-1\ncluster_formation.aws.instance_tags.service = rabbitmq\ncluster_formation.aws.instance_tags.environment = staging\n```\n\n----------------------------------------\n\nTITLE: Running Topic-based Log Receiver with Various Bindings\nDESCRIPTION: These bash commands demonstrate how to run the log receiver with different binding keys to receive specific types of logs based on facility and severity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-dotnet.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ReceiveLogsTopic\ndotnet run \"#\"\n\ncd ReceiveLogsTopic\ndotnet run \"kern.*\"\n\ncd ReceiveLogsTopic\ndotnet run \"*.critical\"\n\ncd ReceiveLogsTopic\ndotnet run \"kern.*\" \"*.critical\"\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Server Package\nDESCRIPTION: This snippet installs the RabbitMQ server package and its dependencies. The --fix-missing flag helps handle any potential package resolution issues during installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Retrieving Virtual Host Metadata via HTTP API\nDESCRIPTION: Retrieves metadata for a specific virtual host using the HTTP API. This example uses curl to send a GET request to the API endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X GET http://rabbitmq.local:15672/api/vhosts/qa1\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Host Permissions in RabbitMQ\nDESCRIPTION: Command to list all users and their permissions in a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_permissions -p my-vhost\n```\n\n----------------------------------------\n\nTITLE: Customizing Channel Listing Output with RabbitMQ CLI\nDESCRIPTION: Demonstrates how to customize the output of the rabbitmqctl list_channels command to display specific columns of interest.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels -q --no-table-headers vhost connection number  prefetch_count messages_unconfirmed\n# => /\t<rabbit@mercurio.3.799.0>\t1\t0\t0\n# => /\t<rabbit@mercurio.3.802.0>\t1\t0\t0\n# => /\t<rabbit@mercurio.3.799.0>\t2\t0\t0\n# => /\t<rabbit@mercurio.3.799.0>\t3\t0\t0\n# => /\t<rabbit@mercurio.3.802.0>\t2\t0\t0\n# => /\t<rabbit@mercurio.3.802.0>\t3\t0\t0\n# => /\t<rabbit@mercurio.3.799.0>\t4\t0\t0\n# => /\t<rabbit@mercurio.3.802.0>\t4\t0\t0\n# => /\t<rabbit@mercurio.3.799.0>\t5\t0\t0\n# => /\t<rabbit@mercurio.3.799.0>\t6\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Access with Pattern Matching in RabbitMQ LDAP\nDESCRIPTION: Example of a resource access query using pattern matching. This allows users to configure, read, and write any object whose name begins with their username followed by a hyphen.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_24\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query, {match, {string, \"${name}\"},\n                      {string, \"^${username}-\"}}}\n```\n\n----------------------------------------\n\nTITLE: Preparing and Starting Stunnel\nDESCRIPTION: Commands to prepare certificate files and start stunnel for TLS connection testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-ssl.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat client_key.pem client_certificate.pem > client/key-cert.pem\nstunnel stunnel.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Global TLS Options in RabbitMQ Using advanced.config\nDESCRIPTION: Example of setting global TLS options for the Erlang client using the advanced.config file. These settings affect all outgoing connections and will be merged with any URI-specific TLS parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/uri-query-parameters.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{amqp_client, [\n    {ssl_options, [\n        {cacertfile, \"path-to-ca-certificate\"},\n        {certfile, \"path-to-certificate\"},\n        {keyfile, \"path-to-keyfile\"},\n        {verify, verify_peer}\n    ]}\n]}.\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Set in RabbitMQ\nDESCRIPTION: Command to create a federation upstream set named 'location-1' containing two previously declared upstreams 'up-1' and 'up-2'. The federation-upstream-set parameter allows grouping multiple upstream connections together.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation-reference.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream-set location-1 '[{\"upstream\": \"up-1\"}, {\"upstream\": \"up-2\"}]'\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Aliases in Bash\nDESCRIPTION: Examples of using the defined CLI aliases with rabbitmqctl and rabbitmq-diagnostics commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl env\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl environment\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl lq\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues --quiet\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cs\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --openssl-format --quiet\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics env\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Declaring Topic Exchange in RabbitMQ with Shell Command\nDESCRIPTION: Command to declare a durable topic exchange named 'events.all_types.topic' in the 'events' virtual host using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare exchange --name \"events.all_types.topic\" --type \"topic\" --durable true\n```\n\n----------------------------------------\n\nTITLE: Creating a User for MQTT Connections with RabbitMQ CLI\nDESCRIPTION: This bash script demonstrates how to create a new user specifically for MQTT connections with full access permissions to the default virtual host and management privileges using rabbitmqctl commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# username and password are both \"mqtt-test\"\nrabbitmqctl add_user mqtt-test mqtt-test\nrabbitmqctl set_permissions -p \"/\" mqtt-test \".*\" \".*\" \".*\"\nrabbitmqctl set_user_tags mqtt-test management\n```\n\n----------------------------------------\n\nTITLE: Configuring Comprehensive Security Headers in RabbitMQ Management\nDESCRIPTION: Sets a complete set of security headers including HSTS, CSP, and legacy headers to provide a robust security posture for the management UI and API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.hsts.policy = max-age=31536000; includeSubDomains\nmanagement.csp.policy = default-src 'self'; script-src 'self' 'unsafe-eval'\n\nmanagement.headers.content_type_options = nosniff\nmanagement.headers.xss_protection = 1; mode=block\nmanagement.headers.frame_options = DENY\n```\n\n----------------------------------------\n\nTITLE: Enabling Management Plugin in Bash\nDESCRIPTION: Command to enable the RabbitMQ management plugin using the rabbitmq-plugins tool in Bash. This plugin provides a web UI that can be used to enable Khepri.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Enabling Sparkplug Support for MQTT in RabbitMQ Configuration\nDESCRIPTION: This configuration enables Sparkplug support in the RabbitMQ MQTT plugin. When enabled, the plugin will not translate the spAvM.N/spBvM.N part of topic names, allowing compatibility with Sparkplug specifications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.sparkplug = true\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Channels and Connections Limit via CLI in RabbitMQ\nDESCRIPTION: This command sets both the maximum number of connections (10) and channels (20) a user can open using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/user-limits.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits guest '{\"max-connections\": 10, \"max-channels\": 20}'\n```\n\n----------------------------------------\n\nTITLE: Handling Blocked Connection Events in .NET\nDESCRIPTION: Implementation of blocked connection event handlers in .NET using the IConnection interface. Demonstrates registration of event handlers for ConnectionBlocked and ConnectionUnblocked events.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/connection-blocked.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n  public void HandleBlocked(object sender, ConnectionBlockedEventArgs args)\n  {\n      // Connection is now blocked\n  }\n\n  public void HandleUnblocked(object sender, EventArgs args)\n  {\n      // Connection is now unblocked\n  }\n\nConn.ConnectionBlocked   += HandleBlocked;\nConn.ConnectionUnblocked += HandleUnblocked;\n```\n\n----------------------------------------\n\nTITLE: Setting Scheduler Binding Type using Runtime Flag\nDESCRIPTION: Configures how Erlang schedulers are bound to CPU cores using the +stbt flag. This example uses the 'nnts' binding strategy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+stbt nnts\"\n```\n\n----------------------------------------\n\nTITLE: Mixed Authentication Setup in advanced.config Format\nDESCRIPTION: Erlang format configuration for using LDAP for authentication with internal database for authorization, plus a complete fallback to the internal database.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit,[{auth_backends, [{rabbit_auth_backend_ldap, rabbit_auth_backend_internal},\n                           rabbit_auth_backend_internal]}]}\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Queue Status in RabbitMQ (Bash)\nDESCRIPTION: Displays the quorum status of a specific quorum queue, showing information about replicas and their states.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues quorum_status --vhost \"a-vhost\" \"a-queue\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default TCP Listeners in RabbitMQ\nDESCRIPTION: Default configuration for TCP listeners in RabbitMQ, which specifies the port on which the server listens for plain AMQP 0-9-1 and AMQP 1.0 connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.default = 5672\n```\n\n----------------------------------------\n\nTITLE: Listing Queues in rabbitmqadmin\nDESCRIPTION: These commands show how to list queues, including listing queues in a specific virtual host using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list queues\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"monitoring\" list queues\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer with RabbitMQ in Go\nDESCRIPTION: Demonstrates how to create a consumer, receive messages, and settle them in Go using the RabbitMQ client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\n// create the consumer\nconsumer, err := connection.NewConsumer(context.Background(), \"some-queue\", nil)\n// receive the message\ndeliveryContext, err := consumer.Receive(context.Background())\n// ....\ndeliveryContext.Accept(context.Background()) // settle the message\n```\n\n----------------------------------------\n\nTITLE: Attaching to the Beginning of a Stream in Python\nDESCRIPTION: Illustrates how to create a consumer that attaches to the beginning of a RabbitMQ stream using the Python client library. It defines a message handler and sets the offset to the first message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass MyMessageHandler(AMQPMessagingHandler):\n\n    def __init__(self):\n        super().__init__()\n\n    def on_message(self, event: Event):\n        # accepting\n        self.delivery_context.accept(event)\n        # deal with the message\n\nstream_address = AddressHelper.queue_address(\"some-stream\")\nconsumer = consumer_connection.consumer(\n    stream_address,\n    message_handler=MyMessageHandler(),\n    # can be first, last, next or an offset long\n    # you can also specify stream filters with methods: apply_filters and filter_match_unfiltered\n    stream_filter_options=StreamOptions(offset_specification=OffsetSpecification.first),\n)\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Component Flow Visualization in Mermaid\nDESCRIPTION: A mermaid flowchart showing message flow in RabbitMQ from Producer (P) through Exchange (X) to two Queues (Q₁,Q₂) and their Consumers (C₁,C₂). Uses custom CSS classes to style different component types.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T3DiagramToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X --> Q1 & Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Definition Import from Local File on Node Boot\nDESCRIPTION: Configuration settings to import definitions from a local JSON file when a RabbitMQ node starts, not requiring the management plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled.\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/defs.json\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumer Groups in RabbitMQ (Bash)\nDESCRIPTION: This command lists groups of stream single active consumers for a vhost in RabbitMQ. It allows specifying which group information items to include in the results, such as stream, reference, partition_index, and consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumer_groups stream reference consumers\n```\n\n----------------------------------------\n\nTITLE: Checking Erlang Port Usage with epmd\nDESCRIPTION: Command to verify which ports are being used for Erlang inter-node and CLI tool communication after configuring a custom distribution port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nepmd -names\n```\n\n----------------------------------------\n\nTITLE: Closing a Channel in C#\nDESCRIPTION: This example shows how to close a channel (called 'model' in the .NET client) when it's no longer needed using the RabbitMQ .NET client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// the .NET client calls channels \"models\"\nvar ch = conn.CreateModel();\n\n// do some work\n\n// close the channel when it is no longer needed\n\nch.Close();\n```\n\n----------------------------------------\n\nTITLE: Deactivating Console Logging\nDESCRIPTION: Disables logging to console.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = false\n```\n\n----------------------------------------\n\nTITLE: Filtering Exchanges with Regex in RabbitMQ API (HTTP)\nDESCRIPTION: This HTTP GET request fetches the first page of exchanges, filtered by a regular expression. It demonstrates the use of 'name' parameter with 'use_regex=true' to filter exchanges whose names start with 'amq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:15672/api/exchanges?page=1&page_size=100&name=%5Eamq&use_regex=true&pagination=true\n```\n\n----------------------------------------\n\nTITLE: Setting a Federation Policy in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set a policy named 'federate-me' that applies to exchanges with names starting with 'federated.'. The policy sets the federation-upstream-set to 'all' with a priority of 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me \\\n    \"^federated\\.\" '{\"federation-upstream-set\":\"all\"}' \\\n    --priority 1 \\\n    --apply-to exchanges\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy federate-me ^\n    \"^federated\\.\" \"{\"\"federation-upstream-set\"\":\"\"all\"\"}\" ^\n    --priority 1 ^\n    --apply-to exchanges\n```\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/federate-me\n    {\"pattern\": \"^federated\\.\",\n     \"definition\": {\"federation-upstream-set\":\"all\"},\n     \"priority\": 1,\n    \"apply-to\": \"exchanges\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags with Shell Command\nDESCRIPTION: Command to list all feature flags and their current state in a RabbitMQ cluster using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin feature_flags list\n```\n\n----------------------------------------\n\nTITLE: Initializing RPC Client in RabbitMQ Java\nDESCRIPTION: Creates an RPC client instance for request-reply pattern communication using a temporary reply queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.RpcClient;\n\nRpcClient rpc = new RpcClient(channel, exchangeName, routingKey);\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Cluster Operations\nDESCRIPTION: Various commands for managing RabbitMQ clusters including viewing secrets, managing UI, debugging, and log viewing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq secrets INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq manage INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq debug INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq tail INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listeners in RabbitMQ (INI)\nDESCRIPTION: Default configuration for the TCP port on which RabbitMQ listens for 'plain' AMQP 0-9-1 and AMQP 1.0 connections without TLS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.default = 5672\n```\n\n----------------------------------------\n\nTITLE: Modifying Shell Script Shebang for Solaris Compatibility\nDESCRIPTION: Instructions for modifying the shell script interpreter line to use Solaris POSIX-compliant shell instead of the default shell. This change is required for proper script execution on Solaris systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-solaris.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/xpg4/bin/sh\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Global Parameters\nDESCRIPTION: Displays all global runtime parameters in RabbitMQ. The command uses the 'list_global_parameters' action without any additional arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions after Node Boot with CLI\nDESCRIPTION: Commands to import definitions after node startup by first waiting for the node to be ready and then importing the definitions. Useful for older RabbitMQ versions or scripted deployments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# await startup for up to 5 minutes\nrabbitmqctl await_startup --timeout 300\n\n# import definitions using rabbitmqctl\nrabbitmqctl import_definitions /path/to/definitions.file.json\n\n# OR, import using rabbitmqadmin\n# Requires management plugin to be enabled\nrabbitmqadmin import /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions Using rabbitmqctl CLI\nDESCRIPTION: Command to import RabbitMQ definitions from a JSON file using rabbitmqctl, which doesn't require the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled\nrabbitmqctl import_definitions /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Windows System-Wide Trust Store\nDESCRIPTION: PowerShell command to add a certificate to the Windows system-wide (machine) Root certificate store. This makes the certificate available to all users on the machine.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows\ncertmgr -add -all \\path\\to\\cacert.cer -s -r localMachine Root\n```\n\n----------------------------------------\n\nTITLE: Encrypting Configuration Values with RabbitMQ CLI (PowerShell)\nDESCRIPTION: Shows how to use the rabbitmqctl encode command to encrypt configuration values on Windows using PowerShell. It includes examples for encoding both Erlang binary and string values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_47\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl encode \"<<\"\"guest\"\">>\" mypassphrase\n{encrypted,<<\"... long encrypted value...\">>\nrabbitmqctl encode '\"amqp://fred:secret@host1.domain/my_vhost\"' mypassphrase\n{encrypted,<<\"... long encrypted value...\">>\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Log Rotation at Midnight\nDESCRIPTION: Configuration settings for daily log rotation at midnight with compression and retention of 5 archived files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every night at midnight\nlog.file.rotation.date = $D0\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n\n# archived log files will be compressed\nlog.file.rotation.compress = true\n```\n\n----------------------------------------\n\nTITLE: Enforcing Cipher Suite Order (Classic Config Format)\nDESCRIPTION: This configuration snippet shows how to enforce server-preferred cipher suite ordering in the classic RabbitMQ configuration format using Erlang syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_39\n\nLANGUAGE: erlang\nCODE:\n```\n%% Enforce server-provided cipher suite order (preference)\n[\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                          {certfile,   \"/path/to/server_certificate.pem\"},\n                          {keyfile,    \"/path/to/server_key.pem\"},\n                          {versions,   ['tlsv1.2', 'tlsv1.1']},\n\n                          %% ...\n\n\n                          {honor_cipher_order,   true},\n                          {honor_ecc_order,      true},\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Message TTL in C#\nDESCRIPTION: This C# code snippet shows how to declare a queue with a 60-second message TTL using the x-message-ttl argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar args = new Dictionary<string, object>();\nargs.Add(\"x-message-ttl\", 60000);\nmodel.QueueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Provider in RabbitMQ using Issuer URL\nDESCRIPTION: This configuration snippet shows how to set up an OAuth 2.0 provider in RabbitMQ using the issuer URL. It includes settings for resource server ID, scope prefix, and TLS certificate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.https.cacertfile = /opts/certs/prodcacert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in Bash\nDESCRIPTION: Command to set up a federation upstream parameter with URI and expiration settings using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream my-upstream \\\n    '{\"uri\":\"amqp://target.hostname\",\"expires\":3600000}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fibonacci Function in Go\nDESCRIPTION: A recursive implementation of the Fibonacci sequence calculation in Go. This function takes an integer as input and returns the corresponding Fibonacci number. Note that this is an inefficient implementation for large numbers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-go.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc fib(n int) int {\n        if n == 0 {\n                return 0\n        } else if n == 1 {\n                return 1\n        } else {\n                return fib(n-1) + fib(n-2)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Free Disk Space Monitoring Log Entry in RabbitMQ\nDESCRIPTION: Example log entries showing the initialization of RabbitMQ's disk space monitoring system, displaying the configured free disk space limit of 950MB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/disk-alarms.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n2019-04-01 12:02:11.564 [info] <0.329.0> Enabling free disk space monitoring\n2019-04-01 12:02:11.564 [info] <0.329.0> Disk free limit set to 950MB\n```\n\n----------------------------------------\n\nTITLE: Consul Node Deregistration Configuration\nDESCRIPTION: Settings for automatic deregistration of failed nodes in Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\ncluster_formation.consul.svc_ttl = 30\n# how soon should nodes that fail their health checks be unregistered by Consul?\n# this value is in seconds and must not be lower than 60 (a Consul requirement)\ncluster_formation.consul.deregister_after = 90\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Worker Consumer Implementation - PHP\nDESCRIPTION: Worker implementation that consumes messages from the queue and processes them. Simulates work by sleeping for one second per dot in the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$callback = function ($msg) {\n  echo ' [x] Received ', $msg->getBody(), \"\\n\";\n  sleep(substr_count($msg->getBody(), '.'));\n  echo \" [x] Done\\n\";\n};\n\n$channel->basic_consume('hello', '', false, true, false, false, $callback);\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Disk Free Limit Configuration\nDESCRIPTION: Disk space limit configuration for flow control triggering\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 2GB\n```\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 50MB\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Provider in RabbitMQ using oauth_providers\nDESCRIPTION: This configuration demonstrates how to set up an OAuth 2.0 provider in RabbitMQ using the oauth_providers variable. It allows for more detailed provider configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.default_oauth_provider = prodkeycloak\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /opts/certs/prodcacert.pem\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Benchmark for AMQP 1.0 and 0.9.1\nDESCRIPTION: Instructions for running a benchmark to compare AMQP 1.0 and AMQP 0.9.1 performance in RabbitMQ. It includes steps to start the RabbitMQ server, execute a Go program, and list the number of messages in each queue after the benchmark.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/rabbitmqctl --silent list_queues name type messages --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Node\nDESCRIPTION: Command to stop the Erlang node running RabbitMQ. Can optionally wait for a specified process to terminate if pid_file is provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl stop\n```\n\n----------------------------------------\n\nTITLE: Configuring UNIX Epoch Timestamp Format for Console Logging in RabbitMQ\nDESCRIPTION: This configuration sets up console logging with 'info' level, disables file logging, and uses microseconds since UNIX epoch for timestamp format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n\n# use microseconds since UNIX epoch for timestamp format\nlog.console.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Runtime Thread Statistics\nDESCRIPTION: Command to sample and report runtime thread activity statistics\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics runtime_thread_stats --sample-interval 15\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Binding List Command\nDESCRIPTION: Command to list the bindings in RabbitMQ, showing the exchange-to-queue bindings created by the tutorial application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_bindings\ntut.fanout\texchange\t8b289c9c-a1eb-4a3a-b6a9-163c4fdcb6c2\tqueue\t\t[]\ntut.fanout\texchange\td7e7d193-65b1-4128-a532-466a5256fd31\tqueue\t\t[]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Server-Preferred Cipher Suite Order in RabbitMQ (New Config Format)\nDESCRIPTION: This configuration enforces the server's preferred cipher suite order during TLS negotiation, which is recommended for security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1        = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.honor_cipher_order = true\nssl_options.honor_ecc_order    = true\n```\n\n----------------------------------------\n\nTITLE: Setting User Connection Limit via HTTP API using curl\nDESCRIPTION: This curl command demonstrates how to set the maximum connections limit for a user using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-connections \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": 20\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Referencing RabbitMQ MQTT Plugin in Web MQTT Context\nDESCRIPTION: Code reference showing how to reference the rabbitmq_mqtt plugin when discussing the Web MQTT bridge.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nrabbitmq_mqtt\n```\n\n----------------------------------------\n\nTITLE: Basic Static Shovel Configuration in Erlang\nDESCRIPTION: Shows the basic structure of a static shovel configuration in the RabbitMQ advanced config file, including the rabbit and rabbitmq_shovel application settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  %% ...\n]},\n\n{rabbitmq_shovel, [\n  {shovels, [\n    {shovel_one, [\n      %% shovel_one properties ...\n    ]},\n    %% ...\n  ]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Listing Policies with rabbitmqctl\nDESCRIPTION: This command lists all policies with their details using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/maxlength/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_policies --formatter=pretty_table --silent\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Docker Container with Entra ID Configuration (Bash)\nDESCRIPTION: This Bash command starts a RabbitMQ Docker container configured to use Entra ID as the OAuth 2.0 authentication backend. It uses environment variables and a Makefile to simplify the process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-entra-id/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=entra\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Docker Container with Entra ID Authentication\nDESCRIPTION: Bash commands to start a RabbitMQ Docker container configured to use Entra ID as an OAuth 2.0 authentication backend. Sets the mode to 'entra' and uses make to start the container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-entra-id/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=entra\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Analyzing Authentication Failure Logs in RabbitMQ\nDESCRIPTION: This snippet shows what a failed authentication attempt looks like in the RabbitMQ server logs. The log shows a connection attempt with invalid credentials, resulting in a 'PLAIN login refused' error.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n2019-03-25 12:28:19.047 [info] <0.1613.0> accepting AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)\n2019-03-25 12:28:19.056 [error] <0.1613.0> Error on AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672, state: starting):\nPLAIN login refused: user 'user2' - invalid credentials\n2019-03-25 12:28:22.057 [info] <0.1613.0> closing AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node TTL for etcd Peer Discovery\nDESCRIPTION: Configuration for setting the Time-To-Live (TTL) value for node registration keys in etcd. This determines how frequently nodes must refresh their presence in etcd.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\n# node TTL in seconds\n# default: 30\ncluster_formation.etcd.node_ttl = 40\n```\n\n----------------------------------------\n\nTITLE: Configuring network partition handling in RabbitMQ\nDESCRIPTION: Setting to control how the node handles network partitions. Available modes include ignore, autoheal, pause_minority, and pause_if_all_down.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\ncluster_partition_handling = ignore\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Federation Upstream Set in RabbitMQ\nDESCRIPTION: Commands to create a named upstream set with multiple upstreams and apply it via policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream-set location-1 '[{\"upstream\": \"up-1\"}, {\"upstream\": \"up-2\"}]'\n\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream-set\":\"location-1\"}'\n```\n\n----------------------------------------\n\nTITLE: Removing Queue Limits in RabbitMQ Virtual Host\nDESCRIPTION: Command to lift the queue limit on a specific virtual host by setting max-queues to a negative value. Uses rabbitmqctl with a JSON configuration parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-queues\": -1}'\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple RabbitMQ Nodes with Management Plugin in Bash\nDESCRIPTION: This code snippet shows how to start two RabbitMQ nodes on the same machine with different management plugin ports to avoid conflicts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_NODE_PORT=5672 RABBITMQ_SERVER_START_ARGS=\"-rabbitmq_management listener [{port,15672}]\" RABBITMQ_NODENAME=rabbit rabbitmq-server -detached\nRABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS=\"-rabbitmq_management listener [{port,15673}]\" RABBITMQ_NODENAME=hare rabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Username Claims for OAuth 2.0 in RabbitMQ (INI)\nDESCRIPTION: This snippet demonstrates how to configure preferred username claims for OAuth 2.0 in RabbitMQ using the INI format. It sets up a priority list of claims to use for the username.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.preferred_username_claims.1 = user_name\nauth_oauth2.preferred_username_claims.2 = email\n# ...\n```\n\n----------------------------------------\n\nTITLE: Basic HTTPS Configuration for RabbitMQ Management Plugin\nDESCRIPTION: Configuration for enabling HTTPS with SSL/TLS certificates and key files for the management plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n## This key must only be used if private key is password protected\n# management.ssl.password   = bunnies\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Streams Offset Tracking Example\nDESCRIPTION: Shell commands to run the offset tracking example and observe how the consumer resumes from where it left off between executions. The first run starts at offset 0, while the second run starts at offset 100 because it uses the stored offset from the previous run.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-rust-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin receive_offset_tracking\n```\n\nLANGUAGE: shell\nCODE:\n```\nStarted consuming: Press control +C to close\nFirst message received.\nDone consuming, first offset 0, last offset 99.\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin receive_offset_tracking\n```\n\nLANGUAGE: shell\nCODE:\n```\nStarted consuming\nFirst message received.\nDone consuming first_offset: 100 last_offset: 199\n```\n\n----------------------------------------\n\nTITLE: Implementing In Group Query for LDAP Authorization in Erlang\nDESCRIPTION: An in_group query that returns true if the logged-in user is a member of a specified group. The query checks membership either against the 'member' attribute or any named attribute.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group, Pattern, AttributeName}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{vhost_access_query, {in_group, \"cn=${vhost}-users,ou=vhosts,dc=example,dc=com\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Channels Limit via HTTP API in RabbitMQ\nDESCRIPTION: This curl command demonstrates how to set a user limit (max-channels) to 20 using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/user-limits.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-channels \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": 20\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Building AMQP 1.0 Client for OAuth Testing (Bash)\nDESCRIPTION: Command to build a local Docker image for a basic AMQP 1.0 application that uses OAuth tokens for authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake build-amqp1_0-client\n```\n\n----------------------------------------\n\nTITLE: Setting Unlimited Prefetch for a Consumer in Java\nDESCRIPTION: This example demonstrates setting an unlimited prefetch count (0) for a consumer, allowing any number of unacknowledged messages to be delivered to the consumer at once.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-prefetch.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nchannel.basicQos(0); // No limit for this consumer\nchannel.basicConsume(\"my-queue\", false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Rate Mode\nDESCRIPTION: Sets the message rate mode to control level of detail in statistics collection\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\n# supported values: basic, detailed, none\nmanagement.rates_mode = basic\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Stream Consumer Application\nDESCRIPTION: Command to run the consumer application which will wait for and process messages from the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run receive\n```\n\n----------------------------------------\n\nTITLE: Viewing RabbitMQ Missing Configuration File in Logs\nDESCRIPTION: Example log output showing when a configuration file cannot be found or read by RabbitMQ, which can help troubleshoot configuration issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /var/lib/rabbitmq/hare.conf (not found)\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Service in PowerShell\nDESCRIPTION: This command installs RabbitMQ as a Windows service. It should be run from an elevated Command Prompt or PowerShell window. The service name is defined by the RABBITMQ_SERVICENAME environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows-manual.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-service.bat install\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Built-in Type in Python\nDESCRIPTION: Illustrates how to create an exchange of a built-in type (topic) using the Python client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nexchange_name = \"my-exchange\"\nmanagement.declare_exchange(ExchangeSpecification(name=exchange_name, exchange_type=ExchangeType.topic))\n```\n\n----------------------------------------\n\nTITLE: Setting Message Prefetch Count in RabbitMQ with JavaScript\nDESCRIPTION: Code showing how to set the prefetch count for a RabbitMQ consumer channel. Setting prefetch to 1 ensures fair dispatch by telling RabbitMQ not to give more than one message to a worker at a time, only sending a new message after the previous one is acknowledged.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.prefetch(1);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Erlang Process Limit in RabbitMQ\nDESCRIPTION: These examples demonstrate how to increase the Erlang process limit to 2 million using either an environment variable or a VM flag. This can be necessary for environments with a high number of concurrent connections or queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_MAX_NUMBER_OF_PROCESSES=2000000\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+P 2000000\"\n```\n\n----------------------------------------\n\nTITLE: Toggling Tracing in RabbitMQ with trace_off Command\nDESCRIPTION: The trace_off command stops tracing for a specified virtual host. It accepts an optional -p parameter to specify the virtual host name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ntrace_off [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Swift RabbitMQ Client\nDESCRIPTION: Basic binding of a queue to an exchange without specifying a routing key. This creates a simple relationship where the queue receives all messages from the exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nq.bind(exchange)\n```\n\n----------------------------------------\n\nTITLE: Deactivating Recovery in Go\nDESCRIPTION: Illustrates how to deactivate automatic recovery in Go by setting ActiveRecovery to false in the RecoveryConfiguration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_80\n\nLANGUAGE: go\nCODE:\n```\nenv := NewEnvironment(\"amqp://\", &AmqpConnOptions{\n        RecoveryConfiguration: &RecoveryConfiguration{\n            ActiveRecovery:           false,\n        },\n    })\n```\n\n----------------------------------------\n\nTITLE: Declaring a Direct Exchange in Objective-C\nDESCRIPTION: This code creates a direct exchange named 'logs' using the RabbitMQ Objective-C client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n[ch direct:@\"logs\"];\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP TLS Options in RabbitMQ\nDESCRIPTION: Examples of configuring various TLS options for LDAP authentication in RabbitMQ, including CA certificates, client certificates, SNI, hostname verification, and peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# local filesystem path to a CA certificate bundle file\nauth_ldap.ssl_options.cacertfile = /path/to/ca_certificate.pem\n\n# local filesystem path to a client certificate file\nauth_ldap.ssl_options.certfile = /path/to/client_certfile.pem\n\n# local filesystem path to a client private key file\nauth_ldap.ssl_options.keyfile = /path/to/client_key.pem\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Sets Server Name Indication for LDAP connections.\n# If an LDAP server host is available via multiple domain names, set this value\n# to the preferred domain name target LDAP server\nauth_ldap.ssl_options.sni = ldap.identity.eng.megacorp.local\n```\n\nLANGUAGE: ini\nCODE:\n```\n# take wildcards into account when performing hostname verification\nauth_ldap.ssl_options.hostname_verification = wildcard\n```\n\nLANGUAGE: ini\nCODE:\n```\n# disables hostname verification\nauth_ldap.ssl_options.hostname_verification = none\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Enables peer certificate chain verification.\n# This behavior is the default starting with Erlang 26 (and thus RabbitMQ 3.13+)/\nauth_ldap.ssl_options.verify = verify_peer\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Disables peer certificate chain verification.\n#\n# Doing so loses one of the key benefits of TLS and make the setup less secure\n# but also simplifies node configuration.\nauth_ldap.ssl_options.verify = verify_none\n```\n\nLANGUAGE: ini\nCODE:\n```\n# if target LDAP server does not present a certificate, should the connection be aborted?\nauth_ldap.ssl_options.fail_if_no_peer_cert = true\n```\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.ssl_options.depth = 5\n```\n\nLANGUAGE: ini\nCODE:\n```\n# use TLSv1.2 only\nssl_options.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: Setting Mnesia table loading retry timeout in RabbitMQ\nDESCRIPTION: Configuration for the timeout used when waiting for Mnesia tables in a cluster to become available.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\nmnesia_table_loading_retry_timeout = 30000\n```\n\n----------------------------------------\n\nTITLE: Starting UAA Server for RabbitMQ Authentication\nDESCRIPTION: Command to start the UAA (User Account and Authentication) server using Docker via Make\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-idp-initiated.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake start-uaa\n```\n\n----------------------------------------\n\nTITLE: Publishing Second Wave of Messages to RabbitMQ Stream\nDESCRIPTION: This snippet demonstrates how to publish a second wave of 100,000 messages to a RabbitMQ stream using a Java application. It shows the process of connecting, creating a producer, sending messages, and confirming their delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-09-13-rabbitmq-streams-offset-tracking/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.OffsetTracking$PublishSecondWave'\n```\n\n----------------------------------------\n\nTITLE: Testing Failed TCP Connection with Telnet\nDESCRIPTION: This snippet shows the output of a failed telnet connection attempt to localhost on port 5673, demonstrating how connection refusal appears when the port is not open.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 5673\n# => Trying ::1...\n# => telnet: connect to address ::1: Connection refused\n# => Trying 127.0.0.1...\n# => telnet: connect to address 127.0.0.1: Connection refused\n```\n\n----------------------------------------\n\nTITLE: Busy Distribution Port Warning Log Example\nDESCRIPTION: Example of a warning log entry that indicates the inter-node communication buffer is operating at full capacity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n2019-04-06 22:48:19.031 [warning] <0.242.0> rabbit_sysmon_handler busy_dist_port <0.1401.0>\n```\n\n----------------------------------------\n\nTITLE: Testing Port Connectivity with Telnet - Failure Case\nDESCRIPTION: Example of using telnet to test connectivity to an unused port 5673, demonstrating connection failure when the port is not in use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 5673\n# => Trying ::1...\n# => telnet: connect to address ::1: Connection refused\n# => Trying 127.0.0.1...\n# => telnet: connect to address 127.0.0.1: Connection refused\n```\n\n----------------------------------------\n\nTITLE: Listing Policies in RabbitMQ (Bash)\nDESCRIPTION: Lists all policies for the default virtual host using the rabbitmqctl command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_policies\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ Cluster using CLI\nDESCRIPTION: Example command to join a node to an existing RabbitMQ cluster using the rabbitmqctl CLI tool. This command connects the local node to a remote host's RabbitMQ instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/clustering.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl join_cluster rabbit@remote-host\n```\n\n----------------------------------------\n\nTITLE: Using long node names in rabbitmq-upgrade\nDESCRIPTION: Command option required when the cluster is configured to use fully qualified domain names (FQDN) as node names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-l, --longnames\n```\n\n----------------------------------------\n\nTITLE: Querying Log Location in RabbitMQ with cmd\nDESCRIPTION: Command to find the current log file location using rabbitmq-diagnostics CLI tool in Windows command prompt.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmq-diagnostics.bat -q log_location\n```\n\n----------------------------------------\n\nTITLE: Message Processing Worker Method in Java\nDESCRIPTION: A worker method that simulates message processing by adding delays when encountering periods in the input string. The method sleeps for 1 second for each period character found.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void doWork(String in) throws InterruptedException {\n\tfor (char ch : in.toCharArray()) {\n\t\tif (ch == '.') {\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS Application Firewall for Erlang Server Nodes\nDESCRIPTION: Commands to allow Erlang server nodes (beam.smp) to bind to ports and accept inbound connections through the MacOS Application Firewall. This is essential for RabbitMQ nodes to function properly.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# allow server nodes (Erlang VM) to bind to ports and accept inbound connections\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP DN Lookup Binds in INI Format\nDESCRIPTION: Configuration example showing how to set up DN lookup binding credentials, lookup attribute and base DN for LDAP authentication\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.dn_lookup_bind.user_dn = CN=myuser,OU=users,DC=gopivotal,DC=com\nauth_ldap.dn_lookup_bind.password = test1234\nauth_ldap.dn_lookup_attribute = userPrincipalName\nauth_ldap.dn_lookup_base = DC=gopivotal,DC=com\n```\n\n----------------------------------------\n\nTITLE: Setting Global User Permissions in RabbitMQ (Bash)\nDESCRIPTION: Grants a user access to all virtual hosts with specified configure, write, and read permissions based on regular expressions. This command is useful for setting up permissions that apply across all virtual hosts in a RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_permissions_globally janeway \"^janeway-.*\" \".*\" \".*\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running RabbitMQ Publish/Subscribe Example in Java\nDESCRIPTION: Command line instructions for compiling and running the log publisher and consumer examples. Shows how to save logs to a file or display them on screen by running multiple instances of the receiver.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njavac -cp $CP EmitLog.java ReceiveLogs.java\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP ReceiveLogs > logs_from_rabbit.log\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP ReceiveLogs\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP EmitLog\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_bindings\n# => Listing bindings ...\n# => logs    exchange        amq.gen-JzTY20BRgKO-HjmUJj0wLg  queue           []\n# => logs    exchange        amq.gen-vso0PVvyiRIL2WoV3i48Yg  queue           []\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication with rabbitmqctl in Bash\nDESCRIPTION: This command uses rabbitmqctl to test authentication for a username and password pair in a Bash environment. It demonstrates how to use the authenticate_user command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl authenticate_user \"a-username\" \"a/password\"\n```\n\n----------------------------------------\n\nTITLE: Overriding OAuth Logon Type for Specific Resource\nDESCRIPTION: Configuration to override default logon type for a specific resource (QA) and set custom provider URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.3.id = rabbit_qa\nmanagement.oauth_resource_servers.3.label = RabbitMQ QA\nmanagement.oauth_resource_servers.3.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_resource_servers.3.oauth_provider_url = http://qa_url\n```\n\n----------------------------------------\n\nTITLE: Configuring Frame Ancestors Content Security Policy in RabbitMQ Management\nDESCRIPTION: Sets a Content Security Policy (CSP) header with frame-ancestors directive to prevent iframe embedding of the management UI, mitigating cross-frame scripting attacks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\n# prohibits iframe embedding of the UI\nmanagement.csp.policy = frame-ancestors 'none'\n```\n\n----------------------------------------\n\nTITLE: Consul Service Tags Configuration\nDESCRIPTION: Example of adding service tags to RabbitMQ service registration in Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# Define tags for the RabbitMQ service: \"qa\" and \"3.8\"\ncluster_formation.consul.svc_tags.1 = qa\ncluster_formation.consul.svc_tags.2 = 3.8\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Active Consumer in C#\nDESCRIPTION: This snippet shows how to cancel an active consumer using the BasicCancelAsync method of the IChannel interface. The consumer is identified by its tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.BasicCancelAsync(consumerTag);\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags Status in RabbitMQ\nDESCRIPTION: Command for listing all feature flags and their current state (enabled/disabled) in RabbitMQ with formatted output as a table.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter pretty_table list_feature_flags\n```\n\n----------------------------------------\n\nTITLE: AWS Instance Tags Configuration\nDESCRIPTION: Configuration for using EC2 instance tags for peer discovery\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.instance_tags.region = us-east-1\ncluster_formation.aws.instance_tags.service = rabbitmq\ncluster_formation.aws.instance_tags.environment = staging\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Limits\nDESCRIPTION: Docker daemon configuration JSON for setting container-wide kernel limits, specifically configuring the maximum number of open file handles (nofile) to 64000 for both soft and hard limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linux TCP Buffer Configuration\nDESCRIPTION: Reference to Linux kernel TCP buffer configuration parameters recbuf and sndbuf that control kernel-level network buffers. These remain configurable separately from the user-space auto-tuning feature.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2025-04-08-4.1-performance-improvements/index.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nrecbuf / sndbuf\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Topic Exchange Consumers with Different Binding Patterns\nDESCRIPTION: These bash commands demonstrate how to run the topic exchange consumer with different binding patterns. Examples include receiving all logs, logs from a specific facility, logs with a specific severity, or multiple binding patterns simultaneously.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-go.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs_topic.go \"#\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs_topic.go \"kern.*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs_topic.go \"*.critical\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs_topic.go \"kern.*\" \"*.critical\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run emit_log_topic.go \"kern.critical\" \"A critical kernel error\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Critical Logs with Topic Exchange in RabbitMQ using Objective-C\nDESCRIPTION: This snippet demonstrates how to receive only critical logs using a topic exchange in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\n[self receiveLogsTopic:@[@\"*.critical\"]];\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Prefix for HTTP Requests in RabbitMQ Management\nDESCRIPTION: Sets a custom path prefix for all HTTP requests to the management plugin, making the API available at host:port/my-prefix/api/ and the UI login page at host:port/my-prefix/.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.path_prefix = /my-prefix\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration\nDESCRIPTION: Shows how to specify the source queue name in a shovel configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n{queue, <<\"queue.1\">>}\n```\n\n----------------------------------------\n\nTITLE: Listing Connections and Channel Counts with RabbitMQ CLI\nDESCRIPTION: Demonstrates how to use rabbitmqctl to list connections and their associated channel counts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_connections name channels -q\n# => name\tchannels\n# => 127.0.0.1:52956 -> 127.0.0.1:5672\t10\n# => 127.0.0.1:52964 -> 127.0.0.1:5672\t33\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration Parameters in RabbitMQ\nDESCRIPTION: SSL/TLS related configuration parameters including protocol, key exchange, cipher, and hash settings for secure connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_82\n\nLANGUAGE: markup\nCODE:\n```\n<code class=\"Cm\">ssl</code>\n<code class=\"Cm\">ssl_protocol</code>\n<code class=\"Cm\">ssl_key_exchange</code>\n<code class=\"Cm\">ssl_cipher</code>\n<code class=\"Cm\">ssl_hash</code>\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Auth Cache Plugin\nDESCRIPTION: Command to enable the rabbitmq_auth_backend_cache plugin using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_auth_backend_cache\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Scope Aliases Configuration\nDESCRIPTION: This command starts RabbitMQ with the advanced scope aliases configuration, which enables mapping of custom scopes to RabbitMQ-compliant scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nADVANCED=advanced-scope-aliases.config make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Displaying Log Locations in RabbitMQ (Bash)\nDESCRIPTION: This command shows log file locations on the target RabbitMQ node. It supports flags for displaying all locations and setting a timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nlog_location [--all | -a] [--timeout milliseconds]\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_location -a\n```\n\n----------------------------------------\n\nTITLE: Overriding RabbitMQ Configuration File Locations with Environment Variables in INI format\nDESCRIPTION: Environment variables that can be used to override the default locations of RabbitMQ configuration files, including the primary config file, advanced config file, and environment variable file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# overrides primary config file location\nRABBITMQ_CONFIG_FILE=/path/to/a/custom/location/rabbitmq.conf\n\n# overrides advanced config file location\nRABBITMQ_ADVANCED_CONFIG_FILE=/path/to/a/custom/location/advanced.config\n\n# overrides environment variable file location\nRABBITMQ_CONF_ENV_FILE=/path/to/a/custom/location/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Built-in Type in C#\nDESCRIPTION: Shows how to create an exchange of a built-in type (topic) using the C# client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nIExchangeSpecification exchangeSpec = management\n        .Exchange(exchangeName)\n        .Type(ExchangeType.TOPIC);\nawait exchangeSpec.DeclareAsync();\n```\n\n----------------------------------------\n\nTITLE: Cluster Partition Handling\nDESCRIPTION: Default configuration for handling network partitions in cluster\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\ncluster_partition_handling = ignore\n```\n\n----------------------------------------\n\nTITLE: Creating a Passwordless RabbitMQ User\nDESCRIPTION: Kubernetes manifest for creating a passwordless RabbitMQ user by providing an empty string as the passwordHash value in the credentials Secret. This creates a user that can only authenticate through other means like x509 certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-user-credentials\ntype: Opaque\nstringData:\n  username: my-user\n  passwordHash: \"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings in RabbitMQ with Bash\nDESCRIPTION: Lists exchange and queue name bindings for a specific virtual host in RabbitMQ. This command displays the source exchange name and destination queue name for all bindings in the 'my-vhost' virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_bindings -p my-vhost exchange_name queue_name\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Policy for STOMP Queues Using rabbitmqctl\nDESCRIPTION: Command to create a policy that limits the length of all STOMP-created queues to 1000 messages. This uses the pattern matching of queue names prefixed with 'stomp-'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy stomp-queues \"^stomp-\" '{\"max-length\":1000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitoring-Only User in RabbitMQ (PowerShell)\nDESCRIPTION: This snippet shows how to create a user with monitoring-only access to the RabbitMQ management UI using PowerShell commands. It includes steps to add a user with different password examples and grant empty permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat add_user 'monitoring' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'\n\nrabbitmqctl.bat add_user 'monitoring' '\"w63pnZ&LnYMO(t\"'\n\nrabbitmqctl.bat set_permissions --vhost 'vhost-name' 'monitoring' '^$' '^$' '^$'\n```\n\n----------------------------------------\n\nTITLE: Configuring Frame Ancestors Content Security Policy in RabbitMQ Management\nDESCRIPTION: Sets a Content Security Policy (CSP) header with frame-ancestors directive to prevent iframe embedding of the management UI, mitigating cross-frame scripting attacks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\n# prohibits iframe embedding of the UI\nmanagement.csp.policy = frame-ancestors 'none'\n```\n\n----------------------------------------\n\nTITLE: Example rabbitmq-env.conf Configuration for Unix Systems\nDESCRIPTION: Example of a rabbitmq-env.conf file that configures node name and config file locations on Unix-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\n# Example rabbitmq-env.conf file entries. Note that the variables\n# do not have the RABBITMQ_ prefix.\n#\n# Overrides node name\nNODENAME=bunny@myhost\n\n# Specifies new style config file location\nCONFIG_FILE=/etc/rabbitmq/rabbitmq.conf\n\n# Specifies advanced config file location\nADVANCED_CONFIG_FILE=/etc/rabbitmq/advanced.config\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode in RabbitMQ\nDESCRIPTION: Command to revive a node from maintenance mode and restore normal operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade revive\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-upgrade.bat revive\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS (WSS) for RabbitMQ Web STOMP\nDESCRIPTION: Configuration for enabling secure WebSocket connections (WSS) with TLS, including port, certificate files, and other security settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ssl.port       = 15673\nweb_stomp.ssl.backlog    = 1024\nweb_stomp.ssl.cacertfile = /path/to/ca_certificate.pem\nweb_stomp.ssl.certfile   = /path/to/server_certificate.pem\nweb_stomp.ssl.keyfile    = /path/to/server_key.pem\nweb_stomp.ssl.password   = changeme\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Log Level in RabbitMQ Messaging Topology Operator\nDESCRIPTION: YAML configuration to set the log level to 'debug' for the Messaging Topology Operator by modifying the deployment manifest with the '--zap-log-level=debug' argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: messaging-topology-operator\n  namespace: rabbitmq-system\nspec:\n  template:\n    spec:\n      containers:\n      - args:\n        - --zap-log-level=debug\n        command:\n        - /manager\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Configuration File Path in RabbitMQ Environment\nDESCRIPTION: Example configuration that specifies a custom path for the RabbitMQ configuration file. Sets the configuration file location to a specific path in the data directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-env.conf.5.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# I am a complete rabbitmq-env.conf file.\n# Comment lines start with a hash character.\n# This is a /bin/sh script file - use ordinary envt var syntax\nCONFIG_FILE=/data/services/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Listing Users in RabbitMQ\nDESCRIPTION: Shows how to list users in a RabbitMQ cluster using the rabbitmqctl command. It includes examples for both Bash and PowerShell, as well as how to output the list in JSON format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_users\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_users --formatter=json\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_users\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_users --formatter=json\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Stream with Environment Setup in Rust\nDESCRIPTION: Creates a new stream with 2GB max length capacity and handles potential stream creation errors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-rust-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet create_response = environment\n    .stream_creator()\n    .max_length(ByteCapacity::GB(2))\n    .create(stream)\n    .await;\n\nif let Err(e) = create_response {\n    if let StreamCreateError::Create { stream, status } = e {\n        match status {\n            // we can ignore this error because the stream already exists\n            ResponseCode::StreamAlreadyExists => {}\n            err => {\n                println!(\"Error creating stream: {:?} {:?}\", stream, err);\n                std::process::exit(1);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Enabled Plugins File Format\nDESCRIPTION: Example of the enabled_plugins file format showing enabled plugins list in Erlang term format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[rabbitmq_management,rabbitmq_management_agent,rabbitmq_shovel].\n```\n\n----------------------------------------\n\nTITLE: Establishing TLS Connection to RabbitMQ with Java Client and Certificate Verification\nDESCRIPTION: Java implementation that sets up a secure TLS connection to RabbitMQ with certificate-based authentication. The code configures both a KeyManager for client authentication and a TrustManager for server verification, then creates a connection to send and receive a message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      Connection conn = factory.newConnection();\n      Channel channel = conn.createChannel();\n\n      channel.queueDeclare(\"rabbitmq-java-test\", false, true, true, null);\n      channel.basicPublish(\"\", \"rabbitmq-java-test\", null, \"Hello, World\".getBytes());\n\n      GetResponse chResponse = channel.basicGet(\"rabbitmq-java-test\", false);\n      if (chResponse == null) {\n          System.out.println(\"No message retrieved\");\n      } else {\n          byte[] body = chResponse.getBody();\n          System.out.println(\"Received: \" + new String(body));\n      }\n\n      channel.close();\n      conn.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Channels per Connection in RabbitMQ\nDESCRIPTION: Configuration to limit the maximum number of channels per connection, which can help reduce overall memory consumption in environments with many connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 16\n```\n\n----------------------------------------\n\nTITLE: Advanced Cluster Management Commands\nDESCRIPTION: Commands for advanced cluster management including node observation, feature flags, and reconciliation control.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq observe INSTANCE INDEX\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq enable-all-feature-flags INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq pause-reconciliation INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq resume-reconciliation INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Listing Channel Information in RabbitMQ with Bash\nDESCRIPTION: Displays connection process ID and count of unacknowledged messages for each channel. This command provides channel-level metrics that can be useful for monitoring AMQP channel performance and status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels connection messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Disabling Delivery Limit for Quorum Queues via HTTP API\nDESCRIPTION: HTTP API request to disable the delivery limit for quorum queues by setting delivery-limit to -1. Uses a PUT request to the policies endpoint with a pattern matching quorum queues that should have unlimited delivery attempts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/qq-overrides\n    {\"pattern\": \"^qq\\.unlimited\",\n     \"definition\": {\"delivery-limit\": -1},\n     \"priority\": 1,\n    \"apply-to\": \"quorum_queues\"}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration\nDESCRIPTION: Configures Cross-origin Resource Sharing settings including allowed origins and cache timeout\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = https://origin1.org\nmanagement.cors.allow_origins.2 = https://origin2.org\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = *\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = https://origin1.org\nmanagement.cors.allow_origins.2 = https://origin2.org\nmanagement.cors.max_age         = 3600\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Configuration\nDESCRIPTION: Sets custom prefix for all HTTP requests to the management plugin\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.path_prefix = /my-prefix\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration for Web MQTT\nDESCRIPTION: Configuration example for enabling TLS (WSS) connections for the Web MQTT plugin, including port, certificate paths, and key settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.ssl.port       = 15676\\nweb_mqtt.ssl.backlog    = 1024\\nweb_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem\\nweb_mqtt.ssl.certfile   = /path/to/server_certificate.pem\\nweb_mqtt.ssl.keyfile    = /path/to/server_key.pem\\n# needed when private key has a passphrase\\n# web_mqtt.ssl.password   = changeme\n```\n\n----------------------------------------\n\nTITLE: Deleting Users in RabbitMQ\nDESCRIPTION: Demonstrates how to delete a user in RabbitMQ using the rabbitmqctl command. Examples are provided for both Bash and PowerShell environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user 'username'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat delete_user 'username'\n```\n\n----------------------------------------\n\nTITLE: Setting AMQP 1.0 Source Address\nDESCRIPTION: Configures the source address for an AMQP 1.0 link connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{source_address, <<\"my-address\">>}\n```\n\n----------------------------------------\n\nTITLE: JSON Log Configuration in RabbitMQ\nDESCRIPTION: Configuration for customizing JSON logging output with field mapping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter = json\nlog.file.formatter.json.field_map = 'time:ts level:lvl msg:message *:-'\n```\n\n----------------------------------------\n\nTITLE: Clearing a RabbitMQ Vhost-Scoped Parameter\nDESCRIPTION: Removes a vhost-scoped parameter from RabbitMQ. This example clears the 'node01' parameter for the 'federation-upstream' component in the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_parameter federation-upstream node01\n```\n\n----------------------------------------\n\nTITLE: Setting Reconnection Delay for RabbitMQ Shovel Destination\nDESCRIPTION: Configuration that specifies how long (in seconds) the Shovel should wait before attempting to reconnect after a connection failure. Default is 1 second, and 0 means no reconnection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\n{reconnect_delay, 5}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Authentication and Authorization Backends in RabbitMQ\nDESCRIPTION: This example shows how to configure RabbitMQ to use the internal database for authentication and a third-party IP range backend for authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = internal\n# uses module name because this backend is from a 3rd party\nauth_backends.1.authz = rabbit_auth_backend_ip_range\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AMQP Transaction Commands in RabbitMQ\nDESCRIPTION: This snippet showcases the AMQP commands used in transactions, including basic.publish, basic.ack, and basic.reject. It highlights the transactional nature of these commands across different versions of RabbitMQ and AMQP specifications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/semantics.md#2025-04-09_snippet_0\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.publish\nbasic.ack\nbasic.reject\ntx.commit\ntx.commit-ok\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang Packages\nDESCRIPTION: This command installs the recommended Erlang packages for use with RabbitMQ. It includes the base Erlang package and several additional modules required for RabbitMQ functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# This is recommended. Metapackages such as erlang and erlang-nox must only be used\n# with apt version pinning. They do not pin their dependency versions.\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Log Base Directory in Markdown\nDESCRIPTION: Specifies the default base directory for RabbitMQ logs in a generic binary build.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_HOME/var/log/rabbitmq`\n```\n\n----------------------------------------\n\nTITLE: Installing vcprompt using Homebrew\nDESCRIPTION: This command installs vcprompt, a tool for displaying version control information in the command prompt, using the Homebrew package manager.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-10-02-prompt-a-licious/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install vcprompt\n```\n\n----------------------------------------\n\nTITLE: Check TLS Versions in RabbitMQ (Windows)\nDESCRIPTION: Command to verify TLS version support in RabbitMQ's Erlang runtime on Windows\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat --silent tls_versions\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Listen on a Specific IPv6 Interface\nDESCRIPTION: This example shows how to configure RabbitMQ to listen on a specific IPv6 interface only.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = fe80::2acf:e9ff:fe17:f97b:5672\n```\n\n----------------------------------------\n\nTITLE: Enabling Syslog Output\nDESCRIPTION: Basic configuration to enable Syslog output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\n```\n\n----------------------------------------\n\nTITLE: Listing User Topic Permissions in RabbitMQ\nDESCRIPTION: Command to list all topic permissions for a specific user across all virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_user_topic_permissions janeway\n```\n\n----------------------------------------\n\nTITLE: Publishing Tasks to RabbitMQ Queue - PHP\nDESCRIPTION: Code showing how to publish messages as tasks to a RabbitMQ queue. Takes command line input as the task message, defaulting to 'Hello World!' if no input is provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$data = implode(' ', array_slice($argv, 1));\nif (empty($data)) {\n    $data = \"Hello World!\";\n}\n$msg = new AMQPMessage($data);\n\n$channel->basic_publish($msg, '', 'hello');\n\necho ' [x] Sent ', $data, \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Mnesia table loading retry limit in RabbitMQ\nDESCRIPTION: Setting to control the number of retries when waiting for Mnesia tables during cluster startup. This does not apply to Mnesia upgrades or node deletions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\nmnesia_table_loading_retry_limit = 10\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Tools for Diagnostics\nDESCRIPTION: These commands show how to use various RabbitMQ CLI tools for diagnostics and status checking, including ping, status, cluster status, and environment checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmq-diagnostics ping\n\nsudo rabbitmq-diagnostics status\n\nsudo rabbitmq-diagnostics cluster_status\n\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Running Status (Bash)\nDESCRIPTION: Reports if the RabbitMQ application is fully booted and running on the target node. Essential for service availability checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics is_running\n```\n\n----------------------------------------\n\nTITLE: Running the RPC Server in Go with RabbitMQ\nDESCRIPTION: Command to run the RPC server implementation. This starts the server process which will listen for incoming RPC requests on the 'rpc_queue'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-go.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo run rpc_server.go\n# => [x] Awaiting RPC requests\n```\n\n----------------------------------------\n\nTITLE: Combined Running and Alarm Check\nDESCRIPTION: Combines checks for running status and local alarms. Verifies both that RabbitMQ is running normally and no local alarms are in effect.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resources in RabbitMQ\nDESCRIPTION: Basic OAuth 2.0 plugin configuration defining four resource servers with different IDs for production, development, QA and internal use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = http://some_idp_url\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.3.id = rabbit_qa\nauth_oauth2.resource_servers.4.id = rabbit_internal\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Function in Java\nDESCRIPTION: A recursive implementation of the Fibonacci sequence calculation that will be used as the RPC service task. This function takes an integer input and returns the corresponding Fibonacci number.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-java.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate static int fib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n-1) + fib(n-2);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Service Annotations for RabbitmqCluster in YAML\nDESCRIPTION: Specifies Kubernetes Service annotations for the RabbitmqCluster Service. The example adds an annotation for an internal AWS load balancer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  service:\n    annotations:\n      service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0\n```\n\n----------------------------------------\n\nTITLE: Growing Quorum Queue Replicas in RabbitMQ (Bash)\nDESCRIPTION: Adds a new replica on the specified node for all or a subset of matching quorum queues. This command can target queues in a specific virtual host using patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues grow \"rabbit@newhost\" \"all\" --vhost-pattern \"a-vhost\" --queue-pattern \".*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA-512 Password Hashing in RabbitMQ\nDESCRIPTION: Example configuration to use SHA-512 as the password hashing algorithm in RabbitMQ. This is set in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/passwords.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\npassword_hashing_module = rabbit_password_hashing_sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Origin Resource Sharing in RabbitMQ Management\nDESCRIPTION: Configuration examples for setting up Cross-Origin Resource Sharing (CORS) in RabbitMQ Management. This includes whitelisting specific origins and configuring pre-flight request caching.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = https://origin1.org\nmanagement.cors.allow_origins.2 = https://origin2.org\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = *\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = https://origin1.org\nmanagement.cors.allow_origins.2 = https://origin2.org\nmanagement.cors.max_age         = 3600\n```\n\n----------------------------------------\n\nTITLE: Deactivating Recovery in Python\nDESCRIPTION: Shows how to deactivate automatic recovery in Python by setting active_recovery to False in the RecoveryConfiguration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nenvironment = Environment(\n    \"amqp://guest:guest@localhost:5672/\",\n    recovery_configuration=RecoveryConfiguration(active_recovery=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Independent Prefetch Limits for Multiple Consumers in Java\nDESCRIPTION: This snippet demonstrates how to set independent prefetch limits of 10 unacknowledged messages for two consumers on the same channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-prefetch.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer1 = ...;\nConsumer consumer2 = ...;\nchannel.basicQos(10); // Per consumer limit\nchannel.basicConsume(\"my-queue1\", false, consumer1);\nchannel.basicConsume(\"my-queue2\", false, consumer2);\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Syslog Logging in RabbitMQ\nDESCRIPTION: This configuration sets up TLS for Syslog logging in RabbitMQ, including specifying certificate files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.transport = tls\nlog.syslog.protocol = rfc5424\n\nlog.syslog.ssl_options.cacertfile = /path/to/ca_certificate.pem\nlog.syslog.ssl_options.certfile = /path/to/client_certificate.pem\nlog.syslog.ssl_options.keyfile = /path/to/client_key.pem\n```\n\n----------------------------------------\n\nTITLE: List Federation Parameters via CLI\nDESCRIPTION: Command to list federation parameters using the diagnostics tool with pretty table formatting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics list_parameters --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Fetching the New RabbitMQ Signing Key Using GnuPG\nDESCRIPTION: Command to download the new RabbitMQ nightly signing key from a public key server using GnuPG. This retrieves the key with ID 0xD441A9DDBA058EF7.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/static/key-transition-0x0697F46E2DF405B6.txt#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --recv-key 0xD441A9DDBA058EF7\n```\n\n----------------------------------------\n\nTITLE: Listing User Topic Permissions in RabbitMQ\nDESCRIPTION: Command to list all topic permissions for a specific user across all virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_user_topic_permissions janeway\n```\n\n----------------------------------------\n\nTITLE: Basic Log File Configuration\nDESCRIPTION: Configuration settings for specifying log file name and location in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = rabbit.log\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = /opt/custom/var/log/rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP socket closing behavior in RabbitMQ\nDESCRIPTION: Setting to control whether RabbitMQ tries to immediately close TCP sockets when clients disconnect. This cannot guarantee immediate resource release by the kernel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.exit_on_close = false\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status for Network Partitions in RabbitMQ\nDESCRIPTION: This bash command uses rabbitmq-diagnostics to check the cluster status and detect network partitions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/partitions.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cluster_status\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL Policy using rabbitmqctl in Bash\nDESCRIPTION: This command sets a policy that applies a 60-second TTL to all queues using rabbitmqctl in a Bash environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" '{\"message-ttl\":60000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Defining the available field in AMQP 1.0 flow frame\nDESCRIPTION: XML definition of the available field in AMQP 1.0 flow frame. The available field is an unsigned integer that RabbitMQ uses to inform consumers about the approximate number of messages available in a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"available\" type=\"uint\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Import from Directory\nDESCRIPTION: Configuration settings to only import definitions if the file contents in a directory have changed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/conf.d/\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Server as Detached Application in PowerShell\nDESCRIPTION: Command to start a RabbitMQ broker node as a detached process running in the background, not attached to the Command Prompt window.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows-manual.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-server.bat -detached\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitoring-Only User in RabbitMQ using PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to create a user with monitoring-only access to the RabbitMQ management UI. It creates a user with a regular or complex password and grants empty permissions which allow viewing but not modifying resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# See the Access Control guide to learn about user management.\n#\n# password is provided as a command line argument\nrabbitmqctl.bat add_user 'monitoring' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'\n\n# passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user 'monitoring' '\"w63pnZ&LnYMO(t\"'\n\n# grant the user empty permissions\nrabbitmqctl.bat set_permissions --vhost 'vhost-name' 'monitoring' '^$' '^$' '^$'\n```\n\n----------------------------------------\n\nTITLE: Shovel Definition Structure\nDESCRIPTION: Demonstrates the top-level structure of a single shovel definition, including source, destination, acknowledgment mode, and reconnection delay settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{shovel_name, [\n  {source, [\n    %% protocol-specific source configuration goes here\n  ]},\n  {destination, [\n    %% protocol-specific destination configuration goes here\n  ]},\n  %% 'confirm' is the default acknowledgement mode\n  {ack_mode, confirm},\n  %% reconnect with a 5 second delay\n  {reconnect_delay, 5}\n]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in Ruby with RabbitMQ\nDESCRIPTION: Shows how to implement manual message acknowledgment in a RabbitMQ consumer to ensure messages aren't lost if a worker dies. Uses the manual_ack option and explicitly acknowledges messages after processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nqueue.subscribe(manual_ack: true, block: true) do |delivery_info, _properties, body|\n  puts \" [x] Received '#{body}'\"\n  # imitate some work\n  sleep body.count('.').to_i\n  puts ' [x] Done'\n  channel.ack(delivery_info.delivery_tag)\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Global Parameters in RabbitMQ (Bash)\nDESCRIPTION: Lists all global runtime parameters using the rabbitmqctl command. Global parameters are not tied to any specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Setting Console Logging via Environment Variable\nDESCRIPTION: Bash environment variable setting to instruct RabbitMQ to log to standard I/O streams instead of a file, which takes precedence over configuration file settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Instructs the node to log to standard streams.\n# IMPORTANT: the environment variable takes precedence over the configuration file.\n# When it is set, all logging-related rabbitmq.conf settings will be\n# effectively ignored.\nRABBITMQ_LOGS=-\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for TLSv1.2 with SSL Options\nDESCRIPTION: Example configuration that disables TLS versions older than TLSv1.2, specifying the listener port, certificate paths, and allowed TLS version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Policies in a Single Command\nDESCRIPTION: Sets multiple queue constraints (max-length, expiration, and message-ttl) in a single policy using the RabbitMQ management CLI. This policy applies to queues with names starting with 'capped.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl set_policy capped_queues \"^capped\\.\" \\\n  '{\"max-length\":10, \"expires\":900000, \"message-ttl\":60000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Consuming Stream Messages with the RabbitMQ Stream Java Client\nDESCRIPTION: This code demonstrates how to consume messages from a RabbitMQ stream using the Stream Java client. It retrieves the original message properties from AMQP 0.9.1 messages including message ID, creation time, content type, exchange, and routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nenvironment.consumerBuilder()\n  .stream(\"world\")\n  .offset(OffsetSpecification.first())\n  .messageHandler((context, message) -> {\n    String body = new String(message.getBodyAsBinary());\n    log(\n      \"Message #%s, creation time %tF %tT, content type '%s', from exchange %s with routing key %s\",\n      message.getProperties().getMessageId(),\n      message.getProperties().getCreationTime(),\n      message.getProperties().getCreationTime(),\n      message.getProperties().getContentType(),\n      message.getMessageAnnotations().get(\"x-exchange\"),\n      message.getMessageAnnotations().get(\"x-routing-key\"));\n  })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Deleting Virtual Host in RabbitMQ\nDESCRIPTION: Command to delete a virtual host named 'a-vhost' including all its exchanges, queues, bindings, user permissions, parameters, and policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost a-vhost\n```\n\n----------------------------------------\n\nTITLE: Establishing a WebSocket Connection with STOMP\nDESCRIPTION: JavaScript code to create a WebSocket connection to the RabbitMQ STOMP endpoint and initialize the STOMP client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nvar ws = new WebSocket('ws://127.0.0.1:15674/ws');\nvar client = Stomp.over(ws);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Sample RabbitMQ Log Output from journalctl\nDESCRIPTION: Example of what the filtered journalctl output for RabbitMQ logs looks like, showing the startup sequence and log file locations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##  ##\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##  ##      RabbitMQ 4.0.8. Copyright (c) 2005-2025 Broadcom. All Rights Reserved. The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##########  Licensed under the MPL 2.0. Website: https://www.rabbitmq.com/\nAug 26 11:03:04 localhost rabbitmq-server[968]: ######  ##\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##########  Logs: /var/log/rabbitmq/rabbit@localhost.log\nAug 26 11:03:04 localhost rabbitmq-server[968]: /var/log/rabbitmq/rabbit@localhost_upgrade.log\nAug 26 11:03:04 localhost rabbitmq-server[968]: Starting broker...\nAug 26 11:03:05 localhost rabbitmq-server[968]: systemd unit for activation check: \"rabbitmq-server.service\"\nAug 26 11:03:06 localhost rabbitmq-server[968]: completed with 6 plugins.\n```\n\n----------------------------------------\n\nTITLE: Configuring Default User in RabbitMQ (INI)\nDESCRIPTION: Default username to create when RabbitMQ initializes a new database from scratch.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\ndefault_user = guest\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Stream Filter Value\nDESCRIPTION: Shows how to publish messages to a RabbitMQ stream with a filter value using the x-stream-filter-value header.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(\n  \"\", // default exchange\n  \"my-stream\",\n  new AMQP.BasicProperties.Builder()\n    .headers(Collections.singletonMap(\n      \"x-stream-filter-value\", \"california\" // set filter value\n    ))\n    .build(),\n  body\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizing TCP Settings for High Connection Churn in Linux\nDESCRIPTION: This configuration snippet demonstrates how to optimize various TCP settings in Linux to handle high connection churn. It includes settings for FIN timeout, keepalive parameters, and TIME_WAIT socket reuse.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_fin_timeout = 30\n\nnet.ipv4.tcp_keepalive_time=30\nnet.ipv4.tcp_keepalive_intvl=10\nnet.ipv4.tcp_keepalive_probes=4\n\nnet.ipv4.tcp_tw_reuse = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Node Name Based Service Address\nDESCRIPTION: Settings for computing service address using node name in Consul\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using node name\ncluster_formation.consul.svc_addr_use_nodename = true\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Basic MQTT Plugin Configuration for RabbitMQ\nDESCRIPTION: Demonstrates various MQTT plugin settings including TCP port, TLS port, anonymous connections, virtual host, exchange, and session expiry.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.listeners.tcp.default = 1883\n## Default MQTT with TLS port is 8883\n# mqtt.listeners.ssl.default = 8883\n\n# anonymous connections, if allowed, will use the default\n# credentials specified here\nmqtt.allow_anonymous  = true\n\nmqtt.vhost            = /\nmqtt.exchange         = amq.topic\nmqtt.prefetch         = 10\n# 24 hours by default\nmqtt.max_session_expiry_interval_seconds = 86400\n```\n\n----------------------------------------\n\nTITLE: Channel Limit Exceeded Error Message\nDESCRIPTION: Displays the error message when the configured channel limit is exceeded, closing the connection with a fatal error.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n2019-02-11 16:04:06.296 [error] <0.887.0> Error on AMQP connection <0.887.0> (127.0.0.1:49956 -> 127.0.0.1:5672, vhost: '/', user: 'guest', state: running), channel 23:\n operation none caused a connection exception not_allowed: \"number of channels opened (22) has reached the negotiated channel_max (22)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Delivery Limit with Dead-Lettering in Bash\nDESCRIPTION: Sets up both a delivery limit of 50 and configures dead-lettering for quorum queues using rabbitmqctl in Bash. Messages that exceed the delivery limit will be republished to the 'redeliveries.limit.dlx' exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy qq-overrides \\\n    \"^qq\\.\" '{\"delivery-limit\": 50, \"dead-letter-exchange\": \"redeliveries.limit.dlx\"}' \\\n    --priority 123 \\\n    --apply-to \"quorum_queues\"\n```\n\n----------------------------------------\n\nTITLE: Getting Messages from a Queue using POST /api/queues/{vhost}/{name}/get\nDESCRIPTION: This JSON payload is used to get messages from a queue. It specifies the number of messages to fetch, acknowledgment mode, encoding, and truncation limit for long messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 5,\n  \"ackmode\": \"ack_requeue_true\",\n  \"encoding\": \"auto\",\n  \"truncate\": 50000\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Objective-C\nDESCRIPTION: This snippet shows how to bind a queue to an exchange using a routing key in RabbitMQ with Objective-C.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_0\n\nLANGUAGE: objectivec\nCODE:\n```\n[q bind:exchange routingKey:@\"black\"];\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Broker and Sending a Message\nDESCRIPTION: Establishes a connection to a local RabbitMQ broker, creates a channel, declares a queue named 'hello', and publishes a 'Hello World!' message to it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-swift.md#2025-04-09_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc send() {\n    print(\"Attempting to connect to local RabbitMQ broker\")\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let q = ch.queue(\"hello\")\n    ch.defaultExchange().publish(\"Hello World!\".data(using: .utf8), routingKey: q.name)\n    conn.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ Stream Protocol with Both TCP and SSL Listeners\nDESCRIPTION: Sets up TLS for stream connections by configuring SSL certificates and creating both standard TCP and TLS listeners. The example configures a TCP listener on port 5552 and a TLS listener on port 5551.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile = /path/to/tls/ca_certificate.pem\nssl_options.certfile   = /path/to/tls/server_certificate.pem\nssl_options.keyfile    = /path/to/tls/server_key.pem\nssl_options.verify     =  verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nstream.listeners.tcp.1 = 5552\n# default TLS-enabled port for stream connections\nstream.listeners.ssl.1 = 5551\n```\n\n----------------------------------------\n\nTITLE: HTTP API Authentication with Bearer Token\nDESCRIPTION: Example of using an OAuth 2.0 Bearer token for authentication against the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# swap <token> for an actual token\ncurl -i --header \"authorization: Bearer <token>\" http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Queue Consumer Count Metrics Table\nDESCRIPTION: Documents metrics related to queue consumer counts, which help in detecting consumer-related issues\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                            | Description          |\n|-----------------------------------|----------------------|\n| rabbitmq_detailed_queue_consumers | Consumers on a queue |\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity Rules for RabbitmqCluster in YAML\nDESCRIPTION: Sets affinity and anti-affinity rules for RabbitmqCluster. The example demonstrates node affinity to schedule pods on a specific node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: In\n            values:\n            - node-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Service Port for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Example of overriding the default service port (5672) for RabbitMQ when registering with Consul for peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# 5672 is used by default\ncluster_formation.consul.svc_port = 6674\n```\n\n----------------------------------------\n\nTITLE: Clearing Federation Policy\nDESCRIPTION: Removes the federation policy to deactivate federation for previously matching exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federated-exchanges/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy exchange-federation\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret for Erlang Cookie in Kubernetes\nDESCRIPTION: Example YAML structure for an Erlang cookie Secret, which is required for RabbitMQ nodes to authenticate to each other in a cluster. The cookie value should be unique and secure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncookie: {value}\n```\n\n----------------------------------------\n\nTITLE: Closing a Channel in .NET with RabbitMQ\nDESCRIPTION: This example shows how to properly close a channel (model) when it is no longer needed using the .NET client. Closing channels is important for freeing up resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// the .NET client calls channels \"models\"\nvar ch = conn.CreateModel();\n\n// do some work\n\n// close the channel when it is no longer needed\n\nch.Close();\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceAccount for RabbitMQ Cluster Operator\nDESCRIPTION: YAML definition for creating a ServiceAccount that the RabbitMQ Cluster Operator will use to run and pull images from a private registry.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: rabbitmq-cluster-operator\n  namespace: rabbitmq-system\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Path Prefix for RabbitMQ Management UI\nDESCRIPTION: Configuration for setting a custom path prefix for all HTTP requests to the RabbitMQ Management plugin, useful in environments requiring custom URL structures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.path_prefix = /my-prefix\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Policies\nDESCRIPTION: CLI command to list all defined policies and their configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_policies --formatter=pretty_table --silent\n```\n\n----------------------------------------\n\nTITLE: Basic Web MQTT Port Configuration\nDESCRIPTION: Configuration example that changes the default listener port for the Web MQTT plugin from 15675 to 9001.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.tcp.port = 9001\n```\n\n----------------------------------------\n\nTITLE: Enabling Syslog Logging in RabbitMQ\nDESCRIPTION: This configuration snippet enables logging to Syslog in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\n```\n\n----------------------------------------\n\nTITLE: Configuring queue index message embedding in RabbitMQ\nDESCRIPTION: Setting to control the size threshold in bytes below which messages will be embedded directly in the queue index rather than stored separately.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\nqueue_index_embed_msgs_below = 4096\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for LDAP Connections\nDESCRIPTION: Basic configuration for enabling TLS encryption for LDAP server connections. This example disables peer verification, which is not recommended for production environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\n# enables TLS for connections to the LDAP server\nauth_ldap.use_ssl   = true\n\n# Disables peer certificate chain verification. See the section on Peer Verification\n# below.\n#\n# Doing so loses one of the key benefits of TLS and make the setup less secure\n# but also simplifies node configuration.\nauth_ldap.ssl_options.verify = verify_none\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Running Status (Bash)\nDESCRIPTION: Reports if the RabbitMQ application is fully booted and running (not stopped) on the target node. This command is useful for verifying the operational status of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics is_running\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Status\nDESCRIPTION: Displays all nodes in the RabbitMQ cluster grouped by node type (disc or ram), along with the currently running nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl cluster_status\n```\n\n----------------------------------------\n\nTITLE: Filtering journalctl Output for RabbitMQ Entries\nDESCRIPTION: Command to filter journalctl system output to show only RabbitMQ-related log entries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in RabbitMQ with Python\nDESCRIPTION: Initial attempt to make a queue durable, which would fail if the queue already exists with different parameters. This ensures the queue survives RabbitMQ restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchannel.queue_declare(queue='hello', durable=True)\n```\n\n----------------------------------------\n\nTITLE: Declaring Durable Queues in RabbitMQ (Java)\nDESCRIPTION: This code snippet shows how to declare a durable queue in RabbitMQ using Java. Durable queues survive server restarts, ensuring message persistence.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nboolean durable = true;\nchannel.queueDeclare(\"task_queue\", durable, false, false, null);\n```\n\n----------------------------------------\n\nTITLE: Disabling Node Registration\nDESCRIPTION: Configuration to opt-out of automatic node registration in peer discovery process\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.registration.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Queue Message Count Field Name\nDESCRIPTION: Shows the specific field name in the AMQP 0-9-1 queue.declare-ok response that contains the queue length information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/queues.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<code>message_count</code>\n```\n\n----------------------------------------\n\nTITLE: Binding Exchanges Using .NET Client in AMQP 0-9-1\nDESCRIPTION: This snippet shows how to bind one exchange to another using the RabbitMQ .NET client. It creates a model (channel) and uses the ExchangeBind method to create a binding between a source and destination exchange with a specified routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/e2e.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar ch = conn.CreateModel();\nch.ExchangeBind(\"destination\", \"source\", \"routingKey\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode Feature Flag in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent for enabling the maintenance mode feature flag in RabbitMQ. Required before using maintenance mode in a cluster where all nodes support this feature.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat enable_feature_flag maintenance_mode_status\n```\n\n----------------------------------------\n\nTITLE: Computing Password Hash using HTTP API\nDESCRIPTION: Demonstrates how to compute a password hash using RabbitMQ's HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -4su guest:guest -X GET localhost:15672/api/auth/hash_password/foobarbaz\n```\n\n----------------------------------------\n\nTITLE: Updating apt Package Lists for Erlang Installation\nDESCRIPTION: This command updates the local package index after adding new apt sources. It ensures that the system has the latest information about available packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n```\n\n----------------------------------------\n\nTITLE: Changing RabbitMQ Cluster Node Type\nDESCRIPTION: Changes a RabbitMQ node type between disc and ram. The node must be stopped for this operation to succeed. This example changes a node to disc type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl change_cluster_node_type disc\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Installation Information\nDESCRIPTION: Command to display information about the RabbitMQ installation including paths and versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew info rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Checking Memory Usage with RabbitMQ HTTP API and jq\nDESCRIPTION: This snippet demonstrates how to use the RabbitMQ HTTP API to retrieve detailed memory information for a node. The output is piped to jq for improved readability and shows the breakdown of memory usage across different components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -u guest:guest -X GET http://127.0.0.1:15672/api/nodes/rabbit@hostname/memory | jq\n# => {\n# =>     \"memory\": {\n# =>         \"connection_readers\": 24100480,\n# =>         \"connection_writers\": 1452000,\n# =>         \"connection_channels\": 3924000,\n# =>         \"connection_other\": 79830276,\n# =>         \"queue_procs\": 17642024,\n# =>         \"plugins\": 63119396,\n# =>         \"other_proc\": 18043684,\n# =>         \"metrics\": 7272108,\n# =>         \"mgmt_db\": 21422904,\n# =>         \"mnesia\": 1650072,\n# =>         \"other_ets\": 5368160,\n# =>         \"binary\": 4933624,\n# =>         \"msg_index\": 31632,\n# =>         \"code\": 24006696,\n# =>         \"atom\": 1172689,\n# =>         \"other_system\": 26788975,\n# =>         \"allocated_unused\": 82315584,\n# =>         \"reserved_unallocated\": 0,\n# =>         \"strategy\": \"rss\",\n# =>         \"total\": {\n# =>             \"erlang\": 300758720,\n# =>             \"rss\": 342409216,\n# =>             \"allocated\": 383074304\n# =>         }\n# =>     }\n# => }\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Authentication Success Log\nDESCRIPTION: Log entry showing successful user authentication and virtual host access grant.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-11-22 10:44:33.663 [info] <0.620.0> connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to RabbitMQ in Objective-C\nDESCRIPTION: Publishes a \"Hello World!\" message to the default exchange with the queue name as the routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-objectivec.md#2025-04-09_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n[ch.defaultExchange publish:[@\"Hello World!\" dataUsingEncoding:NSUTF8StringEncoding] routingKey:q.name];\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Object Metrics on /metrics Endpoint\nDESCRIPTION: Configures RabbitMQ to return per-object (unaggregated) metrics on the /metrics endpoint instead of aggregated metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.return_per_object_metrics = true\n```\n\n----------------------------------------\n\nTITLE: Deactivating Console Logging in RabbitMQ\nDESCRIPTION: This configuration snippet disables logging to the console in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = false\n```\n\n----------------------------------------\n\nTITLE: Using Cuts with Lists in Erlang\nDESCRIPTION: Demonstrates the use of cuts with list expressions in Erlang, including nested lists.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\ndbl_cons(List) -> [_, _ | List].\n\ntest() ->\n    F = dbl_cons([33]),\n    [7, 8, 33] = F(7, 8).\n```\n\n----------------------------------------\n\nTITLE: Check RabbitMQ Cluster Alarms\nDESCRIPTION: Lists any active alarms across the RabbitMQ cluster. Part of Stage 3 health checks to verify no resource alarms are present.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q alarms\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags in RabbitMQ\nDESCRIPTION: The list_feature_flags command displays information about RabbitMQ feature flags. It accepts optional column parameters to filter the output, including name, state, stability, provided_by, desc, and doc_url.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags name state\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream with PowerShell\nDESCRIPTION: Sets federation upstream parameters using PowerShell, including URI and expiration time\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream my-upstream `\n    '\"{\"\"uri\"\":\"\"amqp://target.hostname\"\",\"\"expires\"\":3600000}\"'\n```\n\n----------------------------------------\n\nTITLE: Closing Channel in Java\nDESCRIPTION: Example showing how to properly close a channel when it's no longer needed using the Java client\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = conn.createChannel();\n\n// do some work\n\n// close the channel when it is no longer needed\n\nch.close();\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host using rabbitmqctl\nDESCRIPTION: Creates a new virtual host named 'qa1' using the rabbitmqctl command line tool. This is the simplest form of virtual host creation with no additional metadata.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1\n```\n\n----------------------------------------\n\nTITLE: Configuring Loopback Users Access Control in RabbitMQ\nDESCRIPTION: Configuration to control which users can only connect from localhost. Setting to 'none' allows all users to connect from any host, which is noted as an insecure practice.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\nloopback_users = none\n```\n\n----------------------------------------\n\nTITLE: Setting Reconnect Delay for Shovel\nDESCRIPTION: Shows how to set the reconnect delay for a shovel, which determines how long to wait before attempting to reconnect after a failure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n{reconnect_delay, 5}\n```\n\n----------------------------------------\n\nTITLE: List Consumers Command\nDESCRIPTION: Command to list all consumers in a specified virtual host\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nlist_consumers [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Disabling Scheduler Busy Waiting in RabbitMQ\nDESCRIPTION: Configures the Erlang runtime to disable speculative busy waiting for schedulers, which can reduce CPU usage on systems with limited resources or prolonged periods of inactivity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+sbwt none +sbwtdcpu none +sbwtdio none\"\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Producer in Ruby\nDESCRIPTION: Command to run the Ruby script that acts as a producer, sending a message to RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nruby send.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Rate Display Mode in RabbitMQ Management\nDESCRIPTION: Sets the message rate display mode in the management UI. Options are 'basic' (default), 'detailed' (shows all combinations but uses more memory), and 'none' (disables rates to save CPU).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\n# supported values: basic, detailed, none\nmanagement.rates_mode = basic\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options for RabbitMQ\nDESCRIPTION: This snippet shows the configuration of TLS options for RabbitMQ, including client renegotiation settings and cipher suite preferences. It sets up a secure TLS 1.2 configuration with strong encryption methods.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.client_renegotiation = false\nssl_options.secure_renegotiate   = true\n\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n```\n\n----------------------------------------\n\nTITLE: Configuring and Applying Named Upstream Sets in RabbitMQ Federation\nDESCRIPTION: Creates a named set of federation upstreams called 'location-1' containing two upstream connections, then applies this set to exchanges or queues with names starting with 'federated.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream-set location-1 '[{\"upstream\": \"up-1\"}, {\"upstream\": \"up-2\"}]'\n\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream-set\":\"location-1\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Monitoring User Access in PowerShell\nDESCRIPTION: Commands to create a monitoring user with read-only access in RabbitMQ using PowerShell. Shows examples with both simple and special character passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# See the Access Control guide to learn about user management.\n#\n# password is provided as a command line argument\nrabbitmqctl.bat add_user 'monitoring' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'\n\n# passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user 'monitoring' '\"w63pnZ&LnYMO(t\"'\n\n# grant the user empty permissions\nrabbitmqctl.bat set_permissions --vhost 'vhost-name' 'monitoring' '^$' '^$' '^$'\n```\n\n----------------------------------------\n\nTITLE: Listing Connection Properties with RabbitMQ CLI\nDESCRIPTION: Command for displaying specific connection properties (send queue size and server port) for all connections in RabbitMQ using the rabbitmqctl utility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_connections send_pend port\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Direct Exchange in RabbitMQ with Java\nDESCRIPTION: This snippet shows how to publish a message to a direct exchange in RabbitMQ, specifying the exchange name, severity (as routing key), and the message content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes());\n```\n\n----------------------------------------\n\nTITLE: Example TOML Configuration File for rabbitmqadmin v2 (Second Example)\nDESCRIPTION: Another sample TOML configuration file for rabbitmqadmin v2, demonstrating how to define connection parameters for multiple environments including credentials and connection details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\n[local]\nhostname = \"localhost\"\nport = 15672\nusername = \"lolz\"\npassword = \"lolz\"\nvhost = '/'\n\n[staging]\nhostname = \"192.168.20.31\"\nport = 15672\nusername = \"staging-2387a72329\"\npassword = \"staging-1d20cfbd9d\"\n\n[production]\nhostname = \"(redacted)\"\nport = 15671\nusername = \"user-efe1f4d763f6\"\npassword = \"(redacted)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Individual User Loopback Restrictions\nDESCRIPTION: Configuration to restrict specific users to localhost-only connections, demonstrated with a 'monitoring' user.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nloopback_users.monitoring = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer with Offset Tracking in Java\nDESCRIPTION: Demonstrates how to create a consumer with manual offset tracking in RabbitMQ Streams. The consumer starts from the beginning of the stream, processes messages, and stores offsets every 10,000 messages using a tracking reference.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-09-13-rabbitmq-streams-offset-tracking/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAtomicInteger messageConsumed = new AtomicInteger(0);\nConsumer consumer = environment.consumerBuilder()\n    .stream(\"offset-tracking-stream\") // the stream to consume from\n    .offset(OffsetSpecification.first()) // start consuming at the beginning\n    .name(\"my-application\") // the name (reference) of the consumer\n    .manualTrackingStrategy() // tracking is done in application code\n    .builder()\n    .messageHandler((context, message) -> {\n        // ... message processing ...\n\n        // condition to store the offset: every 10,000 messages\n        if (messageConsumed.incrementAndGet() % 10_000 == 0) {\n           context.storeOffset(); // store the message offset\n        }\n        // ... \n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Executing Thread Statistics Command in RabbitMQ\nDESCRIPTION: Command to generate a breakdown of thread activity statistics in RabbitMQ, showing percentages of different thread states like emulator, port, gc, check_io, and sleep states.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics runtime_thread_stats\n```\n\n----------------------------------------\n\nTITLE: Application Running Check Command - Bash\nDESCRIPTION: Checks if the RabbitMQ application is running on the target node\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_running\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queue\nDESCRIPTION: Demonstrates how to delete a queue, with an option for idempotent deletion. The idempotent flag ensures the command doesn't error when deleting a queue that doesn't exist.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" delete queue --name \"target.queue.name\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" delete queue --name \"target.queue.name\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Setting Delivery Limit for Quorum Queues in PowerShell\nDESCRIPTION: PowerShell equivalent for configuring a policy that sets a delivery limit of 50 for quorum queues whose names begin with 'qq'. Uses rabbitmqctl.bat with set_policy and proper PowerShell string escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy qq-overrides ^\n    \"^qq\\.\" \"{\"\"delivery-limit\"\": 50}\" ^\n    --priority 123 ^\n    --apply-to \"quorum_queues\"\n```\n\n----------------------------------------\n\nTITLE: Forgetting Cluster Node\nDESCRIPTION: Removes an offline node from the cluster. Can be run with --offline flag when removing from an offline node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer\n```\n\n----------------------------------------\n\nTITLE: List Active Mirrored Queues in RabbitMQ\nDESCRIPTION: Bash script to list all currently mirrored queues across all virtual hosts, displaying vhost, queue name and mirrors. Uses queue metadata to identify classic mirrored queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-02-quorum-queues-migration/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nprintf \"%s\\t%s\\t%s\\n\" vhost queue_name mirrors\nfor vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do\n  rabbitmqctl -q list_queues -p \"$vhost\" name durable policy effective_policy_definition arguments mirror_pids type |\n\tsed -n '/\\t\\[[^\\t]\\+\\tclassic$/{s/\\t\\[[^\\t]\\+\\tclassic$//; p}' |\n\txargs -x -r -L1 -d '\\n' printf \"%s\\t%s\\n\" \"$vhost\"\ndone\n```\n\n----------------------------------------\n\nTITLE: List Consumers Command\nDESCRIPTION: Command to list all consumers in a specified virtual host\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nlist_consumers [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Compression for RabbitMQ Management HTTP API\nDESCRIPTION: Explicitly enables response compression for the HTTP API, which is enabled by default. This can reduce network bandwidth usage for API responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.compress = true\n```\n\n----------------------------------------\n\nTITLE: Configuring StartTLS for LDAP Connections\nDESCRIPTION: Configuration for using StartTLS instead of TLS for LDAP connections. This method is less secure and generally not recommended for modern LDAP servers that support direct TLS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\n# Enables StartTLS for connections to the LDAP server.\n# Prefer auth_ldap.use_ssl with reasonably modern LDAP servers!\nauth_ldap.use_starttls   = true\n\n# Disables peer certificate chain verification. See the section on Peer Verification\n# below.\n#\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Custom Location Proxy for RabbitMQ HTTP API\nDESCRIPTION: Nginx configuration with URI rewrite rules for proxying RabbitMQ HTTP API requests through a custom location path.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_23\n\nLANGUAGE: nginxconf\nCODE:\n```\n# these rewrites are only if default RabbitMQ virtual host is used\nlocation ~* /rabbitmq/api/(.*?)/(.*) {\n    proxy_pass http://rabbitmq-host:15672/api/$1/%2F/$2?$query_string;\n}\n\nlocation ~* /rabbitmq/(.*) {\n    rewrite ^/rabbitmq/(.*)$ /$1 break;\n    proxy_pass http://rabbitmq-host:15672;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SockJS Connection in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of SockJS to create a single WebSocket connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-02-23-how-to-compose-apps-using-websockets/index.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sockjs = new SockJS('/echo');\n```\n\n----------------------------------------\n\nTITLE: Listing Unresponsive Queue Leaders with RabbitMQ CLI\nDESCRIPTION: Command to identify unresponsive queue leaders on the local node. This is useful for troubleshooting queues that might be experiencing problems or performance issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_unresponsive_queues --local name\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Name for RabbitMQ Kubernetes Peer Discovery\nDESCRIPTION: Overrides the default Kubernetes service name used for RabbitMQ node discovery. The default value is \"rabbitmq\" but can be customized with this setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# overrides Kubernetes service name. Default value is \"rabbitmq\".\ncluster_formation.k8s.service_name = rmq-qa\n```\n\n----------------------------------------\n\nTITLE: Defining a RabbitMQ Queue with Cluster Reference\nDESCRIPTION: This YAML defines a RabbitMQ queue that references a specific RabbitMQ cluster. It shows how to specify queue properties and link it to a cluster, which can result in authentication errors if the cluster's default user credentials are incorrectly configured.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-topology-operator.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: my-queue\nspec:\n  name: qq # name of the queue\n  type: quorum\n  durable: true\n  rabbitmqClusterReference:\n    name: custom-configuration\n```\n\n----------------------------------------\n\nTITLE: Disabling RabbitMQ Plugins Using CLI\nDESCRIPTION: Commands to disable plugins using the rabbitmq-plugins CLI tool, with specific example for rabbitmq-top plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable <plugin-name>\nrabbitmq-plugins disable rabbitmq_top\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Name for RabbitMQ Kubernetes Peer Discovery\nDESCRIPTION: Overrides the default Kubernetes service name used for RabbitMQ node discovery. The default value is \"rabbitmq\" but can be customized with this setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# overrides Kubernetes service name. Default value is \"rabbitmq\".\ncluster_formation.k8s.service_name = rmq-qa\n```\n\n----------------------------------------\n\nTITLE: Create Federation Upstream for Migration in PowerShell\nDESCRIPTION: PowerShell command to set up a federation upstream in the new virtual host pointing to the old virtual host for migration purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream quorum-migration-upstream ^\n    --vhost NEW_VHOST ^\n    \"{\\\"uri\\\":\\\"amqp:///OLD_VHOST\\\", \\\"trust-user-id\\\":true}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Quorum Queue for Benchmarking\nDESCRIPTION: Command to declare a durable quorum queue using rabbitmqadmin tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeps/rabbitmq_management/bin/rabbitmqadmin declare queue \\\n    name=my-quorum-queue queue_type=quorum durable=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in RabbitMQ\nDESCRIPTION: Configuration to disable console logging output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = false\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Server for TLS Inter-node Communication\nDESCRIPTION: This configuration sets up the RabbitMQ server to use TLS for inter-node communication, specifying the certificate file and enabling secure renegotiation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n```\n\n----------------------------------------\n\nTITLE: Exists Query Example for RabbitMQ LDAP Authorization\nDESCRIPTION: Shows how to check for object existence in LDAP using pattern matching and variable substitution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_33\n\nLANGUAGE: erlang\nCODE:\n```\n{exists, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{vhost_access_query, {exists, \"ou=${vhost},ou=vhosts,dc=example,dc=com\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Message Flow Diagram with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates a RabbitMQ message routing system. It shows a producer (P) sending messages to a direct exchange (X), which then routes messages to two queues (Q1 and Q2) based on routing keys. The queues are consumed by two consumers (C1 and C2) respectively.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T4DiagramFull.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{direct}}\n    Q1[[amq.gen-S9b…]]\n    Q2[[amq.gen-Ag1…]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X -- error --> Q1\n    X -- info --> Q2\n    X -- warn --> Q2\n    X -- error --> Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring SASL authentication mechanisms in RabbitMQ\nDESCRIPTION: Configuration for which SASL authentication mechanisms to offer to connecting clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nauth_mechanisms.1 = PLAIN\nauth_mechanisms.2 = AMQPLAIN\n```\n\n----------------------------------------\n\nTITLE: Federation HTTP API Configuration\nDESCRIPTION: HTTP API PUT request for configuring federation upstream parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/parameters/federation-upstream/%2f/my-upstream\n{\"value\":{\"uri\":\"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none\",\"expires\":3600000}}\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Diagnostics Alarms Check\nDESCRIPTION: Executes the rabbitmq-diagnostics command to list resource alarms in the cluster. This command is used for monitoring and health checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics alarms\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connections Limit with curl\nDESCRIPTION: This curl command demonstrates how to set a maximum connections limit of 20 for user1 using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-connections \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": 20\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Parsing Requesting Party Token (RPT) in RabbitMQ OAuth 2.0\nDESCRIPTION: Example of a Requesting Party Token (RPT) structure supported by RabbitMQ. This token format is used in the User-Managed Access (UMA) 2.0 framework and contains permissions under the 'authorization' claim.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authorization\": {\n    \"permissions\": [\n      {\n        \"scopes\": [\n          \"rabbitmq-resource.read:*/*\"\n        ],\n        \"rsid\": \"2c390fe4-02ad-41c7-98a2-cebb8c60ccf1\",\n        \"rsname\": \"allvhost\"\n      },\n      {\n        \"scopes\": [\n          \"rabbitmq-resource:vhost1/*\"\n        ],\n        \"rsid\": \"e7f12e94-4c34-43d8-b2b1-c516af644cee\",\n        \"rsname\": \"vhost1\"\n      },\n      {\n        \"rsid\": \"12ac3d1c-28c2-4521-8e33-0952eff10bd9\",\n        \"scopes\": [\n          \"rabbitmq-resource.tag:administrator\"\n        ]\n      }\n    ]\n  },\n  \"scope\": \"email profile\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Level in RabbitMQ\nDESCRIPTION: Default configuration for the log granularity level, which determines what types of messages are logged (errors, warnings, info, or debug).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Non-built-in Type in Python\nDESCRIPTION: Illustrates how to create an exchange of a non-built-in type (x-delayed-message) with custom arguments using the Python client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n    exchange_arguments = {}\n    exchange_arguments[\"x-delayed-type\"] = \"direct\"\n\n    exchange_info = management.declare_exchange(\n        ExchangeCustomSpecification(\n            name=\"myExchange\",\n            exchange_type=\"x-delayed-message\",\n            arguments=exchange_arguments,\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Status\nDESCRIPTION: Command to verify the plugin's status in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Policies via HTTP API\nDESCRIPTION: Example of defining an operator policy using RabbitMQ's HTTP API by making a PUT request to the operator-policies endpoint. Sets an expiration time of 30 minutes for queues matching the specified pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/operator-policies/%2f/transient-queue-ttl\n                {\"pattern\": \"^amq\\.\",\n                 \"definition\": {\"expires\": 1800000},\n                 \"priority\": 1,\n                 \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Single Federation Upstream in Bash\nDESCRIPTION: This command sets a policy to apply a single federation upstream named 'up-1' to exchanges or queues with names starting with 'federated.'\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream\":\"up-1\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Password in RabbitMQ (INI)\nDESCRIPTION: Default password for the default user when RabbitMQ initializes a new database.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\ndefault_pass = guest\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Endpoint for RabbitMQ Cluster Formation\nDESCRIPTION: Sets up the Consul API endpoint for RabbitMQ cluster formation, including the host, port, and scheme. This allows RabbitMQ to communicate with Consul for peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# 8500 is used by default\ncluster_formation.consul.port = 8500\n# http is used by default\ncluster_formation.consul.scheme = http\n```\n\n----------------------------------------\n\nTITLE: Checking Protocol Listener in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if the target node does not have a listener for the specified protocol. This command helps verify if a specific protocol is supported and active on the RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_protocol_listener mqtt\n```\n\n----------------------------------------\n\nTITLE: Combining Certificate and Private Key Files in Bash\nDESCRIPTION: Concatenates the server certificate and private key files into a single combined keys file for use with RabbitMQ's TLS configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat server_certificate.pem server_key.pem > combined_keys.pem\n```\n\n----------------------------------------\n\nTITLE: Disable Node Registration Configuration\nDESCRIPTION: Configuration to opt-out of automatic node registration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.registration.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Sets in RabbitMQ\nDESCRIPTION: Creates a federation upstream set called 'location-1' that includes two previously defined upstreams 'up-1' and 'up-2'. Federation upstream sets allow grouping multiple upstreams together for federated exchanges or queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream-set location-1 '[{\"upstream\": \"up-1\"}, {\"upstream\": \"up-2\"}]'\n```\n\n----------------------------------------\n\nTITLE: Clearing User Permissions in RabbitMQ\nDESCRIPTION: Demonstrates how to revoke user permissions in a specific virtual host using the rabbitmqctl clear_permissions command in both Bash and PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Revokes permissions in a virtual host\nrabbitmqctl clear_permissions -p \"custom-vhost\" \"username\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Revokes permissions in a virtual host\nrabbitmqctl.bat clear_permissions -p 'custom-vhost' 'username'\n```\n\n----------------------------------------\n\nTITLE: Sample Federation Status Command Output in RabbitMQ\nDESCRIPTION: An example output of the federation_status command showing a running exchange federation link. The output includes the exchange type, name, virtual host, connection details, status indicating the link is running, and a timestamp.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# This command will be available only if federation plugin is enabled\nrabbitmqctl federation_status\n# => [[{type,<<\"exchange\">>},\n# =>   {name,<<\"my-exchange\">>},\n# =>   {vhost,<<\"/\">>},\n# =>   {connection,<<\"upstream-server\">>},\n# =>   {upstream_name,<<\"my-upstream-x\">>},\n# =>   {status,{running,<<\"<rabbit@my-server.1.281.0>\">>}},\n# =>   {timestamp,{{2020,3,1},{12,3,28}}}]]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Dependencies for Erlang Installation\nDESCRIPTION: These commands update the package list and install curl and gnupg, which are required for downloading signing keys and packages over HTTPS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\nsudo apt-get install curl gnupg -y\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-diagnostics for Local Status Check\nDESCRIPTION: Basic example of running the rabbitmq-diagnostics status command without specifying a node, which will target the default local node (rabbit@hostname).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameters in RabbitMQ (PowerShell)\nDESCRIPTION: Commands for setting, clearing, and listing global parameters using rabbitmqctl in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# sets a global (virtual-host-independent) runtime parameter\nrabbitmqctl.bat set_global_parameter <name> <value>\n\n# clears (unsets) a global (virtual-host-independent) runtime parameter\nrabbitmqctl.bat clear_global_parameter <name>\n\n# lists global (virtual-host-independent) runtime parameters\nrabbitmqctl.bat list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 JWKS URL in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to configure the OAuth 2.0 JWKS URL in RabbitMQ using the INI format. It sets the resource server ID and the JWKS URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.jwks_url = \"https://my-jwt-issuer/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host in RabbitMQ Using rabbitmqctl\nDESCRIPTION: Command to delete a virtual host named 'a-vhost' from RabbitMQ. Deleting a virtual host removes all its exchanges, queues, bindings, user permissions, parameters, and policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost a-vhost\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Message Severities in Elixir\nDESCRIPTION: Code snippet that creates a queue and binds it to the exchange for each severity level requested. This allows selective message reception based on the specified severity levels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, \"\", exclusive: true)\n\nfor {severity, true} <- severities do\n  binding_key = severity |> to_string\n  AMQP.Queue.bind(channel, queue_name, \"direct_logs\", routing_key: binding_key)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Connection Pool Size\nDESCRIPTION: Configuration for setting the size of the LDAP connection pool. The connection pool reduces connection churn and LDAP server load by reusing connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\nauth_ldap.connection_pool_size = 256\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Strict Transport Security in RabbitMQ Management\nDESCRIPTION: Sets the Strict Transport Security (HSTS) header value for HTTP API responses to enforce secure connections for one year, including subdomains.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.hsts.policy = max-age=31536000; includeSubDomains\n```\n\n----------------------------------------\n\nTITLE: Fetching Paginated Queues with Size Limit\nDESCRIPTION: API endpoint example for retrieving the first page of queues with a custom page size of 50 elements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:15672/api/queues?page=1&page_size=50\n```\n\n----------------------------------------\n\nTITLE: Minimal OAuth 2.0 Configuration in RabbitMQ\nDESCRIPTION: Basic configuration required to support OAuth 2.0 authentication in RabbitMQ. It sets the resource server ID and OAuth 2.0 provider's issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Minimal OAuth 2.0 Configuration in RabbitMQ\nDESCRIPTION: Basic configuration required to support OAuth 2.0 authentication in RabbitMQ. It sets the resource server ID and OAuth 2.0 provider's issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring Cipher Suites in New Style Config Format for RabbitMQ\nDESCRIPTION: Example configuration for TLS cipher suites using the new style config format in RabbitMQ. Demonstrates how to set specific cipher suites and enforce server-preferred cipher suite ordering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = false\n\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n\n# these MUST be disabled if TLSv1.3 is used\nssl_options.honor_cipher_order = true\nssl_options.honor_ecc_order    = true\n```\n\n----------------------------------------\n\nTITLE: Listing Users\nDESCRIPTION: Demonstrates how to list all users configured in the RabbitMQ cluster. This displays information about user accounts registered with the server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list users\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API CA Certificate for RabbitMQ Peer Discovery\nDESCRIPTION: Specifies the file path for the Kubernetes API CA certificate bundle. This certificate is used when making HTTPS requests to the Kubernetes API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\n# Where to load the K8S API access token from.\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\n\n# Where to load K8S API CA bundle file from. It will be used when issuing requests\n# to the K8S API using HTTPS.\n#\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Removing a Quorum Queue Member in RabbitMQ (Bash)\nDESCRIPTION: Removes a replica (member) from a specific quorum queue on a given node. Useful when decommissioning a node or reducing queue redundancy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues delete_member --vhost \"a-vhost\" \"a-queue\" \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Force Booting Node\nDESCRIPTION: Forces a node to start without waiting for other cluster nodes, used when normal cluster startup order cannot be maintained.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl force_boot\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host Using HTTP API\nDESCRIPTION: Creates a virtual host named 'vh1' using the RabbitMQ HTTP API with curl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/vh1\n```\n\n----------------------------------------\n\nTITLE: Publishing Initial Messages with Deduplication in RabbitMQ (Shell)\nDESCRIPTION: This snippet demonstrates how to publish the first 10 messages to the RabbitMQ stream with deduplication enabled. It uses Maven to run the publishing application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Deduplication$PublishDedupFirstDay'\nConnecting...\nConnected.\nPublishing 10 messages with deduplication enabled.\nMessages confirmed? yes\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Multiplexing with SockJS in JavaScript\nDESCRIPTION: This code shows how to use a multiplexer to create multiple 'fake' WebSocket connections from a single real SockJS connection on the client side.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-02-23-how-to-compose-apps-using-websockets/index.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar real_sockjs = new SockJS('/echo');\n\nvar multiplexer = new WebSocketMultiplex(real_sockjs);\nvar fake_sockjs_1 = multiplexer.channel('ann');\nvar fake_sockjs_2 = multiplexer.channel('bob');\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with Lambda Callbacks in RabbitMQ Java Client 5.0\nDESCRIPTION: Example of using the new lambda-oriented method for consuming messages from a RabbitMQ queue. This approach provides a more concise way to define message handling and consumer cancellation callbacks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-09-29-rabbitmq-java-client-5-0-is-released/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconsumingChannel.basicConsume(queue,\n    (consumerTag, delivery) -> businessService.handle(delivery),\n    consumerTag -> LOGGER.info(\"Consumer {} has been cancelled\")\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Installation\nDESCRIPTION: Command to verify Git version installation on the system\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit version\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Binding for Authorization with Classic Config Format\nDESCRIPTION: Example showing how to configure LDAP binding for authorization queries using RabbitMQ's classic configuration format with Erlang syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    {other_bind, {\"a-username\", \"a-password\"}}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fanout Exchange in RabbitMQ using Messaging Topology Operator\nDESCRIPTION: Kubernetes manifest for creating a durable fanout exchange named 'fanout-exchange' using the RabbitMQ Messaging Topology Operator. The exchange is configured as non-auto-delete and is associated with a RabbitMQ cluster named 'example-rabbit'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Exchange\nmetadata:\n  name: fanout\n  namespace: rabbitmq-system\nspec:\n  name: fanout-exchange # name of the exchange\n  type: fanout # default to 'direct' if not provided; can be set to 'direct', 'fanout', 'headers', and 'topic'\n  autoDelete: false\n  durable: true\n  rabbitmqClusterReference:\n    name: example-rabbit\n```\n\n----------------------------------------\n\nTITLE: Basic API Health Check with cURL and jq in Bash\nDESCRIPTION: Example of using the HTTP API to check node memory usage and parse the results with jq. This command retrieves detailed memory breakdown information from a specific RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -u guest:guest -X GET http://127.0.0.1:15672/api/nodes/rabbit@hostname/memory | jq\n# => {\n# =>     \"memory\": {\n# =>         \"connection_readers\": 24100480,\n# =>         \"connection_writers\": 1452000,\n# =>         \"connection_channels\": 3924000,\n# =>         \"connection_other\": 79830276,\n# =>         \"queue_procs\": 17642024,\n# =>         \"queue_slave_procs\": 0,\n# =>         \"plugins\": 63119396,\n# =>         \"other_proc\": 18043684,\n# =>         \"metrics\": 7272108,\n# =>         \"mgmt_db\": 21422904,\n# =>         \"mnesia\": 1650072,\n# =>         \"other_ets\": 5368160,\n# =>         \"binary\": 4933624,\n# =>         \"msg_index\": 31632,\n# =>         \"code\": 24006696,\n# =>         \"atom\": 1172689,\n# =>         \"other_system\": 26788975,\n# =>         \"allocated_unused\": 82315584,\n# =>         \"reserved_unallocated\": 0,\n# =>         \"strategy\": \"rss\",\n# =>         \"total\": {\n# =>             \"erlang\": 300758720,\n# =>             \"rss\": 342409216,\n# =>             \"allocated\": 383074304\n# =>         }\n# =>     }\n# => }\n```\n\n----------------------------------------\n\nTITLE: Rebalancing All Quorum Queues in RabbitMQ\nDESCRIPTION: CLI command to rebalance all quorum queues across the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance quorum\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP parameters to reduce TIME_WAIT duration for RabbitMQ\nDESCRIPTION: This snippet shows how to configure the net.ipv4.tcp_fin_timeout setting to reduce the time connections spend in the TIME_WAIT state, which helps mitigate connection buildup issues in high-churn scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_fin_timeout = 30\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Transport for apt\nDESCRIPTION: This bash command installs the apt-transport-https package, allowing apt to download RabbitMQ and Erlang packages from HTTPS sources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apt-transport-https\n```\n\n----------------------------------------\n\nTITLE: Deleting an Exchange in RabbitMQ with Shell Command\nDESCRIPTION: Command to delete an exchange named 'target.exchange.name' from the 'events' virtual host using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" delete exchange --name \"target.exchange.name\"\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumers with Specific Fields in RabbitMQ CLI\nDESCRIPTION: This command displays the connection PID, subscription ID, and stream for each RabbitMQ stream consumer. It shows how to use the list_stream_consumers command with specific consumer info items.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumers connection_pid subscription_id stream\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Set in RabbitMQ\nDESCRIPTION: Command to configure a federation upstream set named 'location-1' with two previously declared upstreams 'up-1' and 'up-2'. The configuration is done using rabbitmqctl and accepts a JSON array of upstream definitions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation-reference.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream-set location-1 '[{\"upstream\": \"up-1\"}, {\"upstream\": \"up-2\"}]'\n```\n\n----------------------------------------\n\nTITLE: Defining a Federation Upstream in RabbitMQ\nDESCRIPTION: Command template for defining a federation upstream parameter using rabbitmqctl. The command takes an upstream name and a JSON object containing the upstream configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream 'name' 'json-object'\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Peer Discovery with NIC-based Service Address in RabbitMQ\nDESCRIPTION: Configuration for Consul peer discovery that computes service address using the IP address of a specified network interface (en0).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using the IP address of a NIC, en0\ncluster_formation.consul.svc_addr_nic = en0\ncluster_formation.consul.svc_addr_use_nodename = false\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Computing Password Hash via rabbitmqctl\nDESCRIPTION: Command to compute a password hash using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/passwords.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl hash_password foobarbaz\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Password Length Validator in RabbitMQ\nDESCRIPTION: Configuration example for setting up a credential validator that enforces a minimum password length of 30 characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/passwords.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncredential_validator.validation_backend = rabbit_credential_validator_min_password_length\ncredential_validator.min_length = 30\n```\n\n----------------------------------------\n\nTITLE: Setting Default Classic Queue Version in RabbitMQ Configuration\nDESCRIPTION: Configures the default version for classic queues to use the more efficient version 2 implementation, which improves stability under high memory pressure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/persistence-conf.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# makes classic queues use a more efficient message storage\n# and queue index implementations\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Name-based Service Address for RabbitMQ Consul Peer Discovery\nDESCRIPTION: Sets up auto-computation of service address using RabbitMQ node name. The node name (minus the 'rabbit@' prefix) will be used to register with Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using node name\ncluster_formation.consul.svc_addr_use_nodename = true\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer for RabbitMQ Streams in Java\nDESCRIPTION: Java code to create a Consumer instance for reading messages from a RabbitMQ stream. Specifies the stream to consume from, the offset to start from, and a message handler that increments a counter for each message received.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nAtomicInteger messageConsumed = new AtomicInteger(0); // just a counter\nConsumer consumer = environment.consumerBuilder()\n    .stream(\"first-application-stream\") // stream to consume from\n    .offset(OffsetSpecification.first()) // where to start consuming\n    .messageHandler((context, message) -> messageConsumed.incrementAndGet()) // behavior\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Distribution Port in Windows Environment Configuration\nDESCRIPTION: Creates a configuration file that sets a custom port for Erlang distribution. This is required when the default port needs to be changed for network configuration or security reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nset DIST_PORT=44556\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Distribution Port in Windows Environment Configuration\nDESCRIPTION: Creates a configuration file that sets a custom port for Erlang distribution. This is required when the default port needs to be changed for network configuration or security reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nset DIST_PORT=44556\n```\n\n----------------------------------------\n\nTITLE: Configuring max-hops Parameter for Symmetric Pair Topology in RabbitMQ Federation\nDESCRIPTION: Configuration parameter for a symmetric pair of federated exchanges to ensure messages are copied only once between brokers. This prevents message duplication between consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nmax-hops=1\n```\n\n----------------------------------------\n\nTITLE: Setting Statistics Collection Interval\nDESCRIPTION: Configuration to adjust the statistics collection interval to reduce CPU usage with many connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\ncollect_statistics_interval = 60000\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternate Exchange Using Policy in Bash\nDESCRIPTION: Sets a policy to define 'my-ae' as an alternate exchange for the 'my-direct' exchange using the RabbitMQ CLI in Bash. This is the recommended approach for configuring alternate exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ae.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy AE \"^my-direct$\" '{\"alternate-exchange\":\"my-ae\"}' --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Basic LDAP TLS Verification Configuration in INI format\nDESCRIPTION: Configures basic TLS verification settings for LDAP authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.ssl_options.verify = verify_none\n```\n\n----------------------------------------\n\nTITLE: Polling for Messages with Auto-Ack in Erlang (Discouraged)\nDESCRIPTION: Demonstrates how to fetch individual messages on demand using the polling approach with automatic acknowledgment. This approach is highly inefficient and discouraged in favor of the push API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_26\n\nLANGUAGE: erlang\nCODE:\n```\nGet = #'basic.get'{queue = Q, no_ack = true},\n{#'basic.get_ok'{}, Content} = amqp_channel:call(Channel, Get),\n#amqp_msg{payload = Payload} = Content\n```\n\n----------------------------------------\n\nTITLE: Closing a RabbitMQ Connection\nDESCRIPTION: Code that properly closes the connection to RabbitMQ, ensuring all messages are delivered.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Checking Port Connectivity in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if any listener ports on the target node cannot accept a new TCP connection. Does not perform protocol handshake or authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_port_connectivity\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Command to set the cluster name which is announced to clients and used by federation and shovel plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name london\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Server Version Components in React/JSX\nDESCRIPTION: Imports React components used to display the current RabbitMQ server version and release branch information dynamically in the documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/index.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n    RabbitMQServerReleaseBranch,\n    RabbitMQServerVersion,\n} from '@site/src/components/RabbitMQServer';\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternate Exchange Using Policy in Bash\nDESCRIPTION: Sets a policy to define 'my-ae' as an alternate exchange for the 'my-direct' exchange using the RabbitMQ CLI in Bash. This is the recommended approach for configuring alternate exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ae.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy AE \"^my-direct$\" '{\"alternate-exchange\":\"my-ae\"}' --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Environment variable interpolation in rabbitmq.conf\nDESCRIPTION: An example showing how to use environment variables in the configuration file to set credentials and cluster name, allowing for more dynamic configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# environment variable interpolation\ndefault_user = $(SEED_USERNAME)\ndefault_pass = $(SEED_USER_PASSWORD)\n```\n\nLANGUAGE: ini\nCODE:\n```\ncluster_name = deployment-$(DEPLOYMENT_ID)\n```\n\n----------------------------------------\n\nTITLE: Using Long Node Names with RabbitMQ CLI Tools\nDESCRIPTION: Example showing how to use the --longnames option when working with fully qualified domain names (FQDNs) as hostnames in node names. This is necessary when the system uses long hostnames.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -n rabbit@host1.messaging.eng.coolcorporation.banana check_alarms --longnames\n```\n\n----------------------------------------\n\nTITLE: Implementing GetMessage Method in NewTask\nDESCRIPTION: C# method to handle message retrieval in the NewTask application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static string GetMessage(string[] args)\n{\n    return ((args.Length > 0) ? string.Join(\" \", args) : \"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Federation Status\nDESCRIPTION: Commands to check federation exchange policy and status\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_exchanges name policy | grep federate-me\n\n# This command will be available only if federation plugin is enabled\nrabbitmqctl federation_status\n```\n\n----------------------------------------\n\nTITLE: Using Long Node Names with RabbitMQ CLI Tools\nDESCRIPTION: Example showing how to use the --longnames option when working with fully qualified domain names (FQDNs) as hostnames in node names. This is necessary when the system uses long hostnames.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -n rabbit@host1.messaging.eng.coolcorporation.banana check_alarms --longnames\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token with HTTP API\nDESCRIPTION: Example of accessing the RabbitMQ HTTP API using an OAuth 2.0 token in the Bearer authentication format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# swap <token> for an actual token\ncurl -i --header \"authorization: Bearer <token>\" http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions with rabbitmqctl in Bash\nDESCRIPTION: These commands use rabbitmqctl to list user permissions for different virtual hosts. They are useful for inspecting and verifying user permissions when troubleshooting authorization issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_permissions --vhost /\n# => Listing permissions for vhost \"/\" ...\n# => user\tconfigure\twrite\tread\n# => user2\t.*\t.*\t.*\n# => guest\t.*\t.*\t.*\n# => temp-user\t.*\t.*\t.*\n\nrabbitmqctl list_permissions --vhost gw1\n# => Listing permissions for vhost \"gw1\" ...\n# => user\tconfigure\twrite\tread\n# => guest\t.*\t.*\t.*\n# => user2\t^user2\t^user2\t^user2\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Plugins with Verbose Output\nDESCRIPTION: Lists all plugins with detailed information including versions, dependencies, and descriptions in verbose mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-plugins.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -v\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX with Routing Key in Java\nDESCRIPTION: Java code example showing how to declare a queue with both Dead Letter Exchange and routing key configuration using queue arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/dlx.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Important: prefer using policies over hardcoded x-arguments.\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-dead-letter-exchange\", \"some.exchange.name\");\nargs.put(\"x-dead-letter-routing-key\", \"some-routing-key\");\n```\n\n----------------------------------------\n\nTITLE: Setting and Managing Vhost-Scoped Parameters in RabbitMQ\nDESCRIPTION: Commands for setting, clearing, and listing vhost-scoped parameters using rabbitmqctl. These parameters are tied to a specific virtual host and consist of a component name, name, and value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# sets a runtime parameter in a virtual host\nrabbitmqctl set_parameter [-p vhost] <component_name> <name> <value>\n\n# clears (unsets) a runtime parameter in a virtual host\nrabbitmqctl clear_parameter [-p vhost] <component_name> <name>\n\n# lists runtime parameters in a virtual host\nrabbitmqctl list_parameters [-p vhost]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# sets a runtime parameter in a virtual host\nrabbitmqctl.bat set_parameter [-p vhost] <component_name> <name> <value>\n\n# clears (unsets) a runtime parameter in a virtual host\nrabbitmqctl.bat clear_parameter [-p vhost] <component_name> <name>\n\n# lists runtime parameters in a virtual host\nrabbitmqctl.bat list_parameters [-p vhost]\n```\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/parameters/{component_name}/{vhost}/{name}\nDELETE /api/parameters/{component_name}/{vhost}/{name}\nGET /api/parameters\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Node with rabbitmqctl on Windows\nDESCRIPTION: This command uses rabbitmqctl.bat to stop the RabbitMQ broker. It should be run from the sbin directory with administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows-manual.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat stop\n```\n\n----------------------------------------\n\nTITLE: JSON Console Logging Configuration\nDESCRIPTION: Enables JSON-formatted console logging while disabling file output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\nlog.console.formatter = json\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Creating a Durable STOMP Subscription\nDESCRIPTION: Example STOMP frame for creating a durable subscription to a topic destination. This configuration ensures messages aren't missed when clients disconnect and reconnect, with auto-delete set to false to preserve the backing queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nSUBSCRIBE\ndestination:/topic/my-durable\nid:1234\ndurable:true\nauto-delete:false\n```\n\n----------------------------------------\n\nTITLE: Querying Stream Replication Status using RabbitMQ CLI\nDESCRIPTION: This command retrieves the replication status of a specified stream. It requires the virtual host and stream name as parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams stream_status [-p <vhost>] <stream-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Durable Topic Subscription in STOMP\nDESCRIPTION: STOMP frame example showing how to create a durable topic subscription with required headers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nSUBSCRIBE\ndestination:/topic/my-durable\nid:1234\ndurable:true\nauto-delete:false\n```\n\n----------------------------------------\n\nTITLE: Clearing Policy in RabbitMQ (Bash)\nDESCRIPTION: Clears the policy 'federate-me' in the default virtual host using the rabbitmqctl command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy federate-me\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags with Improved Formatting\nDESCRIPTION: This command lists feature flags with enhanced readability using the pretty_table formatter. It displays additional columns like the providing component, description, and documentation URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter pretty_table list_feature_flags \\\n  name state provided_by desc doc_url\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listeners for Localhost in RabbitMQ\nDESCRIPTION: This configuration sets up the Stream Plugin TCP listeners to only listen on localhost for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Exchange for Logging in JavaScript\nDESCRIPTION: Shows how to create a direct exchange for the logging system using the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar exchange = 'direct_logs';\n\nchannel.assertExchange(exchange, 'direct', {\n  durable: false\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Statistics Database Using rabbitmqctl\nDESCRIPTION: This command resets the statistics database on a single node using the rabbitmqctl command-line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'rabbit_mgmt_storage:reset().'\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Management UI with IdP-initiated OAuth 2.0\nDESCRIPTION: Configuration entries required in rabbitmq.conf to enable OAuth 2.0 authentication with identity-provider initiated login mode\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_provider_url = http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific RabbitMQ Commands in PowerShell\nDESCRIPTION: Command to get detailed help for a specific RabbitMQ CLI command by passing its name as an argument to the help command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat help add_user\n```\n\n----------------------------------------\n\nTITLE: Starting Worker Processes in RabbitMQ\nDESCRIPTION: Commands to start worker processes that consume messages from the RabbitMQ task queue. Multiple workers can be started to distribute the workload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix run worker.exs\n# => [*] Waiting for messages. To exit press CTRL+C, CTRL+C\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings\nDESCRIPTION: Shows how to list bindings across all virtual hosts or in a specific virtual host. Bindings are rules that determine how messages are routed from exchanges to queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list bindings\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" list bindings\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Token Path\nDESCRIPTION: Settings for specifying the Kubernetes API token path used for authentication\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n# default value is /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: Finding Mirroring Policies in RabbitMQ\nDESCRIPTION: Shell script to identify all policies across virtual hosts that include the 'ha-mode' parameter, which enables mirroring. These policies need to be modified during migration to quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nprintf \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\" vhost policy_name pattern apply_to definition priority\nfor vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do\n  rabbitmqctl -q list_policies -p \"$vhost\" |\n    grep 'ha-mode'\ndone\n```\n\n----------------------------------------\n\nTITLE: Managing Global Parameters via RabbitMQ HTTP API\nDESCRIPTION: HTTP API endpoints for setting, deleting, and retrieving global parameters in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/global-parameters/name\nDELETE /api/global-parameters/name\nGET /api/global-parameters\n```\n\n----------------------------------------\n\nTITLE: HTTP API Authentication with Basic Auth\nDESCRIPTION: Example of using HTTP basic authentication with encoded credentials against the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i --header \"authorization: Basic <encoded credentials>\" http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Timeout for etcd Peer Discovery\nDESCRIPTION: Configuration for setting the lock acquisition timeout when forming a cluster. This determines how long a node will wait for a lock to become available during cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# lock acquisition timeout in seconds\n# default: 300\n# cluster_formation.consul.lock_wait_time is an alias\ncluster_formation.etcd.lock_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Atom Limit\nDESCRIPTION: Commands to set the maximum number of atoms in RabbitMQ using environment variable or runtime argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+t 9000000\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_MAX_NUMBER_OF_ATOMS=9000000\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Non-built-in Type in C#\nDESCRIPTION: Demonstrates how to create an exchange of a non-built-in type (x-delayed-message) with custom arguments using the C# client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nawait _management.Exchange(\"myExchange\")\n    .Type(\"x-delayed-message\")\n    .Argument(\"x-delayed-type\", \"direct\")\n    .DeclareAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Peer Verification for RabbitMQ Prometheus\nDESCRIPTION: Enhanced TLS configuration that enables peer verification for the Prometheus metrics endpoint, including verification depth and mandatory peer certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.ssl.port       = 15691\nprometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem\nprometheus.ssl.certfile   = /full/path/to/server_certificate.pem\nprometheus.ssl.keyfile    = /full/path/to/server_key.pem\nprometheus.ssl.password   = password-if-keyfile-is-encrypted\nprometheus.ssl.verify     = verify_peer\nprometheus.ssl.depth      = 2\nprometheus.ssl.fail_if_no_peer_cert = true\n## To enforce TLS (disable the non-TLS port):\n# prometheus.tcp.listener = none\n```\n\n----------------------------------------\n\nTITLE: Publishing to Default Exchange\nDESCRIPTION: Example of publishing a message to the default exchange using a routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.BasicPublish(exchange: \"\",\n                     routingKey: \"hello\",\n                     basicProperties: null,\n                     body: body);\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX via HTTP API\nDESCRIPTION: Creates a dead letter exchange policy using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/dlx.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/DLX\n    {\"pattern\": \".*\",\n     \"definition\": {\"dead-letter-exchange\":\"my-dlx\"},\n     \"priority\": 7,\n     \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Exchange using RabbitMQ Policy (PowerShell)\nDESCRIPTION: Sets a policy named 'DLX' that applies a dead-letter exchange 'my-dlx' to all queues using the rabbitmqctl command in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/dlx.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl set_policy DLX \".*\" \"{\"\"dead-letter-exchange\":\"\"my-dlx\"\"}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages Individually with Confirms in PHP\nDESCRIPTION: This code shows how to publish messages individually and wait for confirmation synchronously. It uses a 5-second timeout for waiting for acknowledgments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-php.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nwhile (thereAreMessagesToPublish()) {\n    $data = \"Hello World!\";\n    $msg = new AMQPMessage($data);\n    $channel->basic_publish($msg, 'exchange');\n    // uses a 5 second timeout\n    $channel->wait_for_pending_acks(5.000);\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Linux Readahead Value for RabbitMQ Storage Device\nDESCRIPTION: Uses the blockdev command to check the current readahead value set on the block device that hosts the RabbitMQ data directory. The readahead parameter affects how the Linux kernel prefetches data from storage devices.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# This is JUST AN EXAMPLE.\n# The name of the block device in your environment will be different.\n#\n# Displays effective readahead value device /dev/sda.\nsudo blockdev --getra /dev/sda\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for RabbitMQ CLI Tools in Bash\nDESCRIPTION: Shows how to use the help command to get information about available commands for rabbitmqctl and rabbitmq-diagnostics in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl help\n\nrabbitmq-diagnostics help\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Connections with Specific Fields in RabbitMQ CLI\nDESCRIPTION: This command displays the connection name and user for each RabbitMQ stream connection. It demonstrates how to use the list_stream_connections command with specific info items.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_connections conn_name user\n```\n\n----------------------------------------\n\nTITLE: OAuth RAR Permission Example in JavaScript\nDESCRIPTION: Example of Rich Authorization Request (RAR) permissions showing how locations and actions are specified for different clusters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:primary-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\" ],\n      \"actions\": [\"administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Consumer in Objective-C\nDESCRIPTION: Establishes a connection, creates a channel, and declares a queue for receiving messages from RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-objectivec.md#2025-04-09_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSLog(@\"Attempting to connect to local RabbitMQ broker\");\nRMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n[conn start];\n\nid<RMQChannel> ch = [conn createChannel];\n\nRMQQueue *q = [ch queue:@\"hello\"];\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Bearer Token in RabbitMQ HTTP API (Bash)\nDESCRIPTION: Example of using a Bearer token to authenticate against the RabbitMQ HTTP API using curl when basic auth is disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# swap <token> for an actual token\ncurl -i --header \"authorization: Bearer <token>\" http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Policies in PowerShell\nDESCRIPTION: Example of creating an operator policy named 'transient-queue-ttl' with PowerShell, which sets an expiration time of 30 minutes (1,800,000 ms) for queues matching the pattern '^amq\\.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_operator_policy transient-queue-ttl ^\n    \"^amq\\.\" \"{\"\"expires\"\": 1800000}\" ^\n    --priority 1 ^\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Listing Queue Information in a Specific Virtual Host with RabbitMQ CLI\nDESCRIPTION: Command to display the number of messages and consumers for each queue in the specified virtual host 'my-vhost'. This helps operators monitor queue depth and consumer connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues -p my-vhost messages consumers\n```\n\n----------------------------------------\n\nTITLE: Setting soft file limit for RabbitMQ on non-systemd Linux distributions\nDESCRIPTION: Command to set the soft open file limit to 4096 for RabbitMQ server. This should be added to the /etc/default/rabbitmq-server file or rabbitmq-env.conf to be applied before the service starts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 4096\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scope Field for OAuth 2.0 in RabbitMQ (Erlang)\nDESCRIPTION: This snippet shows how to configure a custom field for scopes in OAuth 2.0 tokens for RabbitMQ using the Erlang format. It sets the 'extra_scopes_source' to look for scopes in a custom field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"my_rabbit_server\">>},\n    {extra_scopes_source, <<\"my_custom_scope_key\">>},\n    ...\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Shovel Status with HTTP API\nDESCRIPTION: Example curl command for checking status of a specific shovel by name in a virtual host using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/vhost/%2f/my-shovel\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection to RabbitMQ Stream Server\nDESCRIPTION: Go code that creates a new Environment, which is the entry point for the RabbitMQ stream Go client. This handles connection setup and protocol negotiation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nenv, err := stream.NewEnvironment(\n\t\tstream.NewEnvironmentOptions())\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for Entra ID OAuth 2.0 Authentication\nDESCRIPTION: This configuration snippet sets up RabbitMQ to use Entra ID as an OAuth 2.0 authentication backend. It includes settings for the management plugin, OAuth client ID, scopes, and issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-entra-id/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = {Application(client) ID}\nmanagement.oauth_scopes = openid profile api://{Application(client) ID}/rabbitmq\n\nauth_oauth2.resource_server_id = {Application(client) ID}\nauth_oauth2.additional_scopes_key = roles\nauth_oauth2.issuer = https://login.microsoftonline.com/{Directory (tenant) ID}/v2.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom RabbitMQ Image for RabbitmqCluster\nDESCRIPTION: This YAML example shows how to specify a custom RabbitMQ image reference for a RabbitmqCluster, which is necessary when using a private registry.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  image: my-private-registry/rabbitmq:my-custom-tag\n```\n\n----------------------------------------\n\nTITLE: LDAP Group Lookup Configuration in Classic Format\nDESCRIPTION: Configuration for LDAP group membership lookup base DN using classic configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    %% ...\n    {group_lookup_base, \"ou=groups,dc=example,dc=com\"}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Erlang Cookie Hash in RabbitMQ (Bash)\nDESCRIPTION: Outputs a hashed value of the shared secret used by the target node for authentication. Useful for troubleshooting authentication issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_cookie_hash -q\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Stream Support in Docker\nDESCRIPTION: Shell commands to start a RabbitMQ 3.9 container with management interface and stream protocol support. It sets up the necessary ports and configures the advertised host for the RabbitMQ stream protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5552:5552 -p 5672:5672 -p 15672:15672 \\\n    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \\\n    rabbitmq:3.9-management\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom LDAP Port\nDESCRIPTION: Configuration for connecting to LDAP servers on a non-standard port. By default, LDAP uses port 389, but this can be overridden with the port setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\nauth_ldap.port      = 6389\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Blog Post in Markdown\nDESCRIPTION: YAML front matter defining metadata for the blog post, including title, tags, and authors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-11-17-rabbitmq-kubernetes-operator-reaches-1-0/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"RabbitMQ Kubernetes Operator reaches 1.0\"\ntags: [\"New Features\", \"Kubernetes\", ]\nauthors: [yparasol]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding with DirectExchange and Routing Key in Spring AMQP\nDESCRIPTION: Example of creating a binding between a queue and a direct exchange with a specific routing key. This binding ensures the queue will only receive messages with the matching routing key 'orange'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic Binding binding1a(DirectExchange direct,\n    Queue autoDeleteQueue1) {\n    return BindingBuilder.bind(autoDeleteQueue1)\n        .to(direct)\n        .with(\"orange\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling rabbitmq-top Plugin for Process Analysis\nDESCRIPTION: This command enables the rabbitmq-top plugin, which helps identify runtime processes that consume the most memory or CPU time in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] rabbitmq-plugins enable rabbitmq_top\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled RabbitMQ Plugins\nDESCRIPTION: Command to list all enabled RabbitMQ plugins (both explicitly and implicitly enabled) that match the 'rabbit' pattern. This helps identify which plugins are currently active in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-plugins.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -e rabbit\n```\n\n----------------------------------------\n\nTITLE: Setting User Tags in RabbitMQ\nDESCRIPTION: Commands to set administrative tags for RabbitMQ users. The first example grants administrator privileges, while the second removes all tags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_tags janeway administrator\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_tags janeway\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval in RabbitMQ\nDESCRIPTION: This configuration snippet shows how to set the statistics collection interval to 60 seconds in RabbitMQ. Increasing this interval reduces CPU and memory consumption on systems with many connections at the cost of less frequent metric updates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/connections/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 60 seconds\ncollect_statistics_interval = 60000\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host with Metadata using HTTP API\nDESCRIPTION: Creates a virtual host with additional metadata through the HTTP API, including description, tags, and default queue type. This demonstrates the JSON payload format for virtual host creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \\\n                           -H \"content-type: application/json\" \\\n                           --data-raw '{\"description\": \"QA environment 1\", \"tags\": \"qa,project-a\", \"default_queue_type\": \"quorum\"}'\n```\n\n----------------------------------------\n\nTITLE: Federation HTTP API Endpoint\nDESCRIPTION: HTTP API endpoint for retrieving federation parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nGET /api/parameters\n```\n\n----------------------------------------\n\nTITLE: Rejecting Single Message with RabbitMQ in Java\nDESCRIPTION: Example demonstrating how to reject a single message consumed via basic.get polling method, with requeuing enabled. Uses channel.basicNack with single message delivery tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/nack.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nGetResponse gr = channel.basicGet(\"some.queue\", false);\nchannel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);\n```\n\n----------------------------------------\n\nTITLE: Defining Location Format for OAuth 2.0 Authorization in RabbitMQ\nDESCRIPTION: This snippet demonstrates the format for defining locations in RabbitMQ's OAuth 2.0 authorization. It shows how to specify cluster, vhost, queue/exchange, and routing key patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncluster:<resource_server_id_pattern>[/vhost:<vhost_pattern>][/queue:<queue_name_pattern>|/exchange:<exchange_name_pattern>][/routing-key:<routing_key_pattern>]\n```\n\n----------------------------------------\n\nTITLE: Checking Federation Status via CLI in RabbitMQ\nDESCRIPTION: Command to check the status of federation links running on the target node. This command is only available when the federation plugin is enabled and returns details about each federation link including type, name, virtual host, and status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl federation_status\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of RabbitMQ using DPKG\nDESCRIPTION: Demonstrates the process of manually installing RabbitMQ by downloading the package and using dpkg, including installing dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# sync package metadata\nsudo apt-get update\n# install dependencies manually\nsudo apt-get -y install logrotate init-system-helpers adduser\n\n# download the package\nsudo apt-get -y install wget\nwget ${RabbitMQServerPackageURL({packageType: 'debian'})}\n\n# install the package with dpkg\nsudo dpkg -i ${RabbitMQServerPackageFilename({packageType: 'debian'})}\n\nrm ${RabbitMQServerPackageFilename({packageType: 'debian'})}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Health Check Interval for RabbitMQ\nDESCRIPTION: This snippet sets the health check interval (TTL) for RabbitMQ nodes in Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\n# default: 30\ncluster_formation.consul.svc_ttl = 40\n```\n\n----------------------------------------\n\nTITLE: Logging Successful AMQP Connection in RabbitMQ\nDESCRIPTION: Example log entry for a successful AMQP connection, showing the client and server IP addresses and ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-11-22 10:44:33.654 [info] <0.620.0> accepting AMQP connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Queue\nDESCRIPTION: Declares a temporary queue with a server-generated name that is non-durable, exclusive, and auto-deleted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-dotnet.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar queueName = channel.QueueDeclare().QueueName;\n```\n\n----------------------------------------\n\nTITLE: Referencing RabbitMQ Consumer Prefetch with HTML Span Element\nDESCRIPTION: HTML code showing how the 'global' flag is referenced in the basic.qos documentation with special formatting. This span element applies code styling to highlight the flag name in the documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/specification.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"code\">global</span>\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management API with OAuth Token\nDESCRIPTION: Command to access the RabbitMQ management API using OAuth 2.0 authentication. It utilizes a client ID and secret to obtain and use an access token from Keycloak.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-keycloak url=http://localhost:15672/api/overview client_id=mgt_api_client secret=LWOuYqJ8gjKg3D2U8CJZDuID3KiRZVDa\n```\n\n----------------------------------------\n\nTITLE: Creating Role and RoleBinding for Pod Security Policies in Kubernetes\nDESCRIPTION: These commands create a Role and RoleBinding to enable Pods to be scheduled when pod security policies are enabled in the Kubernetes cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create role rabbitmq:psp:unprivileged \\\n    --verb=use \\\n    --resource=podsecuritypolicy \\\n    --resource-name=some-pod-security-policy\n\nkubectl create rolebinding rabbitmq-mycluster:psp:unprivileged \\\n    --role=rabbitmq:psp:unprivileged \\\n    --serviceaccount=some-namespace:mycluster-server\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP socket options in RabbitMQ\nDESCRIPTION: Default socket options for TCP connections. These settings can be adjusted when troubleshooting network issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on = true\ntcp_listen_options.linger.timeout = 0\n```\n\n----------------------------------------\n\nTITLE: Inspecting Queue Arguments and Policies\nDESCRIPTION: CLI command to list queues with their arguments and applied policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues name durable arguments policy --formatter=pretty_table --silent\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Server with systemctl Commands\nDESCRIPTION: Basic systemctl commands for starting, checking status, and stopping the RabbitMQ server. These are the standard service management commands for systemd-based Linux distributions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start rabbitmq-server\n\nsystemctl status  rabbitmq-server\n\nsystemctl stop rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Enabling All Stable Feature Flags in RabbitMQ\nDESCRIPTION: Command for enabling all stable feature flags in RabbitMQ using rabbitmqctl. This command only enables stable feature flags and not experimental ones.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol for STOMP\nDESCRIPTION: Configuration to enable proxy protocol support for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nstomp.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Verifying TLSv1.3 Connection with OpenSSL\nDESCRIPTION: Command to verify TLSv1.3 connection to a RabbitMQ server using openssl s_client tool with the appropriate TLS version flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# connect using TLSv1.3\nopenssl s_client -connect 127.0.0.1:5671 -tls1_3\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Service in PowerShell\nDESCRIPTION: Command to start the RabbitMQ service after it has been installed. This initiates the broker process under the service context defined by RABBITMQ_SERVICENAME.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-windows-manual.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-service.bat start\n```\n\n----------------------------------------\n\nTITLE: Optimizing RabbitMQ for Reduced CPU Usage on Moderately Loaded Systems\nDESCRIPTION: Configures Erlang VM settings to reduce CPU usage on moderately loaded systems. It disables speculative scheduler busy waiting, which can significantly decrease CPU footprint for certain workloads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+sbwt none +sbwtdcpu none +sbwtdio none\"\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Management Stats Database\nDESCRIPTION: This command resets the management stats database for a RabbitMQ node. It includes an optional flag to reset the stats for all nodes in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_75\n\nLANGUAGE: shell\nCODE:\n```\nreset_stats_db [--all]\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Custom Properties in RabbitMQ Java Client\nDESCRIPTION: Publishes a message with multiple custom properties using the BasicProperties.Builder. This example sets content type, delivery mode, priority, and user ID for the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(exchangeName, routingKey,\n             new AMQP.BasicProperties.Builder()\n               .contentType(\"text/plain\")\n               .deliveryMode(2)\n               .priority(1)\n               .userId(\"bob\")\n               .build(),\n               messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Memory Usage with HTTP API and JSON Output\nDESCRIPTION: Example of using the RabbitMQ HTTP API to retrieve memory usage information for a specific queue, showing both the queue process memory usage and message bytes in RAM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -u guest:guest http://127.0.0.1:15672/api/queues/%2f/queue-name |\n  python -m json.tool\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    ..\n    \"memory\": 97921904,\n    ...\n    \"message_bytes_ram\": 2153429941,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Worker Prefetch in RabbitMQ Kubernetes Deployment\nDESCRIPTION: YAML configuration for a RabbitMQ cluster in Kubernetes that increases the dead letter worker consumer prefetch value. This setting controls how many messages the dead letter consumer will buffer while waiting for publisher confirmations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: my-rabbit\nspec:\n  replicas: 3\n  rabbitmq:\n    advancedConfig: |\n      [\n          {rabbit, [\n              {dead_letter_worker_consumer_prefetch, 512}\n          ]}\n      ].\n```\n\n----------------------------------------\n\nTITLE: Declaring Queues with Different Types\nDESCRIPTION: Demonstrates how to create queues of different types (quorum, stream, classic) with various properties. These examples show queue creation in a specific virtual host with durability settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.quorum.queue.name\" --type \"quorum\" --durable true\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.stream.name\" --type \"stream\" --durable true\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.classic.queue.name\" --type \"classic\" --durable true --auto-delete false\n```\n\n----------------------------------------\n\nTITLE: Specifying Network Partition Handling Modes in RabbitMQ Configuration\nDESCRIPTION: These code snippets demonstrate how to specify different network partition handling modes in RabbitMQ configuration. The modes include 'ignore' for highest network reliability, 'pause_minority' for clustering across racks or availability zones, and 'autoheal' for prioritizing service continuity over data consistency.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/partitions.md#2025-04-09_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nignore\n```\n\nLANGUAGE: plain\nCODE:\n```\npause_minority\n```\n\nLANGUAGE: plain\nCODE:\n```\nautoheal\n```\n\n----------------------------------------\n\nTITLE: Starting RPC Producers with PerfTest for Local Random Exchange in RabbitMQ\nDESCRIPTION: Commands to start 2 producers with different publishing rates (100 and 20 messages per second) on different nodes of a RabbitMQ cluster using the x-local-random exchange type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/local-random-exchange.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nperf-test -H amqp://localhost:5672 --consumers 0 --exchange rpc -t x-local-random --rate 100\nperf-test -H amqp://localhost:5673 --consumers 0 --exchange rpc -t x-local-random --rate 20\n```\n\n----------------------------------------\n\nTITLE: Setting a Federation Policy in RabbitMQ via PowerShell\nDESCRIPTION: Uses rabbitmqctl.bat in PowerShell to set a policy named 'federate-me' that applies to exchanges with names starting with 'federated.' and configures them to use all federation upstreams with priority 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy federate-me ^\n    \"^federated\\.\" \"{\"\"federation-upstream-set\"\":\"\"all\"\"}\" ^\n    --priority 1 ^\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Frame Size in RabbitMQ Stream Protocol\nDESCRIPTION: Sets the maximum frame size for the RabbitMQ Stream protocol. The default is 1 MiB (1048576 bytes), but this can be increased to 2 MiB (2097152 bytes) or another value as needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# in bytes\nstream.frame_max = 2097152\n```\n\n----------------------------------------\n\nTITLE: Applying ytt Overlay During RabbitMQ Cluster Operator Upgrade\nDESCRIPTION: Bash command to apply a ytt overlay during the upgrade of the RabbitMQ Cluster Operator, ensuring custom configuration is maintained.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/configure-operator-defaults.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nytt -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml -f values.yaml | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Declaring a RabbitMQ Queue\nDESCRIPTION: Code that declares a queue named 'hello' to ensure it exists before sending messages to it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Queue.declare(channel, \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message in Python\nDESCRIPTION: Example of creating and publishing a message in Python using the RabbitMQ client. It demonstrates how to handle the synchronous response containing the outcome of the publish operation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# create the message\nmessage = Message(body=\"Hello\")\n# publish the message and deal with broker feedback\n# The result is synchronous\nstatus = publisher.publish(Message(message)\nmatch status.remote_state:\n    case OutcomeState.ACCEPTED:\n        # the broker accepted (confirmed) the message\n    case OutcomeState.RELEASED:\n        # the broker could not route the message anywhere \n    case OutcomeState.REJECTED:\n        # at least one queue rejected the message\n```\n\n----------------------------------------\n\nTITLE: Docker Environment Verification\nDESCRIPTION: Commands to verify Docker and Docker Compose installation\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker info && docker-compose version\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Peer Discovery Backend in RabbitMQ\nDESCRIPTION: Configuration example for the AWS peer discovery backend, showing how to specify the backend and AWS region/credentials information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\n# the backend can also be specified using its module name\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Shovel acknowledgment modes\nDESCRIPTION: The acknowledgment modes available for AMQP 1.0 shovels: on-confirm, on-publish, and no-ack, affecting how messages are acknowledged to the source broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_19\n\nLANGUAGE: text\nCODE:\n```\non-confirm\n```\n\nLANGUAGE: text\nCODE:\n```\non-publish\n```\n\nLANGUAGE: text\nCODE:\n```\nno-ack\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host with Metadata using HTTP API\nDESCRIPTION: Creates a virtual host with additional metadata through the HTTP API, including description, tags, and default queue type. This demonstrates the JSON payload format for virtual host creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \\\n                           -H \"content-type: application/json\" \\\n                           --data-raw '{\"description\": \"QA environment 1\", \"tags\": \"qa,project-a\", \"default_queue_type\": \"quorum\"}'\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web MQTT Plugin\nDESCRIPTION: Command to enable the RabbitMQ Web MQTT plugin using rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-mqtt.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_mqtt\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Exchange with Routing Key in JavaScript\nDESCRIPTION: Demonstrates how to bind a queue to an exchange with a specific routing key using the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.bindQueue(queue_name, exchange_name, 'black');\n```\n\n----------------------------------------\n\nTITLE: Complete AWS Peer Discovery Configuration with Tags\nDESCRIPTION: Full configuration example for AWS peer discovery including region, credentials, and instance tag filtering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.instance_tags.region = us-east-1\ncluster_formation.aws.instance_tags.service = rabbitmq\ncluster_formation.aws.instance_tags.environment = staging\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoints: Node Management\nDESCRIPTION: Endpoints for retrieving cluster node information and memory usage metrics\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/nodes\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/nodes/{name}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/nodes/{name}/memory\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ System Service Logs with journalctl\nDESCRIPTION: Command to inspect system service logs using journalctl, which requires superuser privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Stream Consumer and Producer in Shell\nDESCRIPTION: These shell commands demonstrate how to run the RabbitMQ stream consumer and producer examples using Cargo. The consumer is started first to ensure it's ready to receive messages when the producer starts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin receive\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin send\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File Entry for OAuth 2.0 Setup\nDESCRIPTION: Required host file entries for local development environment to map localhost to UAA and RabbitMQ services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n127.0.0.1  localhost uaa rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream (Shell)\nDESCRIPTION: This shell command demonstrates how to consume and display messages from the RabbitMQ stream. It shows the result of the optimized publishing process, confirming that only new messages were added to the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Deduplication$Consume'\nConnecting...\nConnected.\nStarting consuming, press Enter to exit...\nmessage 0\nmessage 1\nmessage 2\n...\nmessage 9\nmessage 10\nmessage 11\nmessage 12\n...\nmessage 19\n```\n\n----------------------------------------\n\nTITLE: Minimal OAuth 2.0 Configuration in RabbitMQ\nDESCRIPTION: Basic configuration for OAuth 2.0 authentication in RabbitMQ, including resource server ID and issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Client with OpenSSL s_client\nDESCRIPTION: Initiates a TLS connection to test server using client certificates and performs hostname verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect localhost:8443 \\\n  -cert client_certificate.pem -key client_key.pem -CAfile ca_certificate.pem \\\n  -verify 8 -verify_hostname CN_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP TLS Options in RabbitMQ Advanced Config\nDESCRIPTION: This snippet demonstrates how to configure LDAP TLS options using the advanced.config format in RabbitMQ. It includes settings for servers, SSL options, and server name indication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n     {servers, [\"ldap1.eng.megacorp.local\", \"ldap2.eng.megacorp.local\"]},\n\n     {use_ssl,     true},\n     {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                    {certfile,   \"/path/to/server_certificate.pem\"},\n                    {keyfile,    \"/path/to/server_key.pem\"},\n                    {verify,               verify_peer},\n                    {fail_if_no_peer_cert, true}]},\n                    {server_name_indication, \"ldap.identity.eng.megacorp.local\"},\n                    {ssl_hostname_verification, wildcard}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: MQTT Plugin Feature Flags Table Structure\nDESCRIPTION: HTML table structure showing RabbitMQ MQTT plugin feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n   <th>Required</th>\n   <th>Stable</th>\n   <th>Feature flag name</th>\n   <th>Description</th>\n  </tr>\n  <tr>\n    <td></td>\n    <td>3.13.0</td>\n    <td>mqtt_v5</td>\n    <td>\n      Support MQTT 5.0\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Inter-node Communication Buffer Size\nDESCRIPTION: Commands to configure the inter-node communication buffer size using either environment variable or VM flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+zdbbl 192000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL Policy Using rabbitmqctl (Windows)\nDESCRIPTION: This PowerShell command sets a policy that applies a 60-second message TTL to all queues on Windows systems. Note the double quotes are escaped differently in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" \"{\"\"message-ttl\"\":60000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Auth0 Configuration\nDESCRIPTION: Commands to start RabbitMQ with Auth0 integration mode enabled using environment variables and make command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-auth0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=auth0\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-service.bat for RabbitMQ Windows Service Management\nDESCRIPTION: rabbitmq-service.bat is a command-line tool for managing the RabbitMQ service on Windows. It allows installation, removal, starting, stopping, and configuring the RabbitMQ broker as a Windows service. The tool accepts various commands and can be influenced by several environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-service.8.md#2025-04-09_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmq-service.bat [command]\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest for RabbitMQ Publish Rate Peak Scenario\nDESCRIPTION: This command runs a PerfTest to simulate a publish rate peak scenario in RabbitMQ. It configures various parameters such as connection details, test duration, message persistence, queue patterns, and variable rates to model changing publish rates over time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-06-20-cluster-sizing-case-study-mirrored-queues-part-2/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/runjava com.rabbitmq.perf.PerfTest \\\n-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \\\n-z 1800 \\\n-f persistent \\\n-q 1000 \\\n-ct -1 \\\n-c 1000 \\\n--size 1024 \\\n--queue-pattern 'perf-test-%d' \\\n--queue-pattern-from 1 \\\n--queue-pattern-to 100 \\\n--producers 200 \\\n--consumers 200 \\\n--producer-random-start-delay 30 \\\n--consumer-latency 10000 \\\n-vr 100:300 \\\n-vr 102:60 -vr 104:60 -vr 106:60 -vr 108:60 -vr 110:60 -vr 112:60 -vr 114:60 -vr 116:60 -vr 118:60 -vr 120:60 \\\n-vr 122:60 -vr 124:60 -vr 126:60 -vr 128:60 -vr 130:60 -vr 132:60 -vr 134:60 -vr 136:60 -vr 138:60 -vr 140:60 \\\n-vr 142:60 -vr 144:60 -vr 146:60 -vr 148:60 -vr 150:60 \\\n-vr 148:60 -vr 146:60 -vr 144:60 -vr 142:60 -vr 140:60 -vr 138:60 -vr 136:60 -vr 134:60 -vr 132:60 -vr 130:60 \\\n-vr 128:60 -vr 126:60 -vr 124:60 -vr 122:60 -vr 120:60 -vr 118:60 -vr 116:60 -vr 114:60 -vr 112:60 -vr 110:60 \\\n-vr 108:60 -vr 106:60 -vr 104:60 -vr 102:60 -vr 100:60 \\\n-vr 100:3000\n```\n\n----------------------------------------\n\nTITLE: End Session Endpoint Configuration in INI\nDESCRIPTION: Configuration examples for setting up the OAuth 2.0 provider's end session endpoint for single logout functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.end_session_endpoint = https://prodkeycloak:8080/realm/prod/logout\n```\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.default_oauth_provider = prodkeycloak\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.oauth_providers.prodkeycloak.end_session_endpoint = https://prodkeycloak:8080/realm/prod/logout\n```\n\n----------------------------------------\n\nTITLE: LDAP Group Lookup Configuration in Erlang Format\nDESCRIPTION: Configuration for group membership lookup base DN setting\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_31\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    %% ...\n    {group_lookup_base, \"ou=groups,dc=example,dc=com\"}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Prefetch Count Configuration\nDESCRIPTION: Demonstrates how to set the maximum number of unacknowledged messages copied over a shovel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n{prefetch_count, 1000}\n```\n\n----------------------------------------\n\nTITLE: AMQP Exchange Class Methods\nDESCRIPTION: Core protocol methods for the exchange class in AMQP 0-9-1, used for exchange operations like declaring and deleting exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/amqp-concepts/index.md#2025-04-09_snippet_1\n\nLANGUAGE: AMQP\nCODE:\n```\nexchange.declare\nexchange.declare-ok\nexchange.delete\nexchange.delete-ok\n```\n\n----------------------------------------\n\nTITLE: Updating and Installing RabbitMQ via Homebrew\nDESCRIPTION: Commands to update Homebrew taps and install RabbitMQ server with its dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Adding a User in RabbitMQ (PowerShell)\nDESCRIPTION: This snippet shows how to add a user in RabbitMQ using the rabbitmqctl command in PowerShell. It demonstrates providing the password as a command line argument and handling passwords with special characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n# password is provided as a command line argument\nrabbitmqctl.bat add_user 'username' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'\n\n# passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user 'username' '\"w63pnZ&LnYMO(t\"'\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in RabbitMQ (Bash)\nDESCRIPTION: Lists cipher suites enabled by default or all available cipher suites if the --all argument is added. This command is useful for reviewing the encryption capabilities of the RabbitMQ installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl --all\n```\n\n----------------------------------------\n\nTITLE: Declaring Direct Exchange in RabbitMQ\nDESCRIPTION: Setting up a direct exchange for routing messages based on severity levels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchannel.exchange_declare(exchange='direct_logs',\n                         exchange_type='direct')\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Routing Key\nDESCRIPTION: Publishing messages to a direct exchange with severity-based routing keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_publish(exchange='direct_logs',\n                      routing_key=severity,\n                      body=message)\n```\n\n----------------------------------------\n\nTITLE: LDAP Logging Configuration in INI Format\nDESCRIPTION: Setting the LDAP logging level for troubleshooting and debugging\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.log = network\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration with Value Escaping (Modern Format)\nDESCRIPTION: An example showing how to escape values that contain special characters (like #) using single quotes in the modern configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# this is a comment\ndefault_user = '40696e180b610ed9'\ndefault_pass = 'efd3!53a9@_2#a08'\n```\n\n----------------------------------------\n\nTITLE: Getting the Management Object in C#\nDESCRIPTION: Demonstrates how to get the management object from a RabbitMQ connection using the C# client library. This object is used for topology management tasks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nIManagement management = connection.Management();\n// ...\n// close the management instance when it is no longer needed\nawait management.CloseAsync()\n```\n\n----------------------------------------\n\nTITLE: Disabling Connections for a User in RabbitMQ\nDESCRIPTION: Command to disable all connections for the user 'limited_user' by setting max-connections to 0. This prevents the user from establishing any new connections to the broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Installing Pika Python Client for RabbitMQ\nDESCRIPTION: Command to install the Pika Python client, which is the recommended library for interacting with RabbitMQ from Python applications. The command uses pip package manager to install the latest version of Pika.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install pika --upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Logging in RabbitMQ\nDESCRIPTION: Sets up HTTP API access logging by specifying the log directory path\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.http_log_dir = /path/to/a/writeable/directory\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Instance Status in Kubernetes\nDESCRIPTION: This bash command retrieves the status of all resources in a specific namespace, useful for checking the state of a RabbitMQ cluster instance after troubleshooting steps.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n NAMESPACE get all\n```\n\n----------------------------------------\n\nTITLE: Configuring Web STOMP TCP Port\nDESCRIPTION: INI configuration for changing the Web STOMP listener port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.tcp.port = 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Tools for IPv6 Communication\nDESCRIPTION: Environment variable setting to configure RabbitMQ CLI tools to use IPv6 for communication with RabbitMQ nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in RabbitMQ with Objective-C\nDESCRIPTION: Code to declare a durable queue in RabbitMQ using Objective-C. Durable queues survive server restarts, preserving the queue definition even if the RabbitMQ node restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQQueue *q = [ch queue:@\"hello\" options:AMQQueueDeclareDurable];\n```\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQQueue *q = [ch queue:@\"task_queue\" options:AMQQueueDeclareDurable];\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple RabbitMQ Nodes to Join a Cluster\nDESCRIPTION: This command waits for a specified number of nodes to join the RabbitMQ cluster. It's useful when setting up or expanding a cluster and need to ensure all nodes are available.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl await_online_nodes 2\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version in Java Client\nDESCRIPTION: Java code demonstrating how to specify a particular TLS version when connecting to RabbitMQ. This is useful when specific TLS versions need to be enforced for security or compatibility reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setHost(\"localhost\");\nfactory.setPort(5671);\n\nfactory.useSslProtocol(\"TLSv1.2\");\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Policy for STOMP Queues in RabbitMQ\nDESCRIPTION: Command to create a policy that limits the length of all STOMP-created queues to 1000 messages. Uses rabbitmqctl to apply the policy to all queues with names starting with 'stomp-'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_15\n\nLANGUAGE: stomp\nCODE:\n```\nrabbitmqctl set_policy stomp-queues \"^stomp-\" '{\"max-length\":1000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Parameter in RabbitMQ (Bash)\nDESCRIPTION: Sets a runtime parameter 'node01' for the 'federation-upstream' component with a JSON value specifying URI and ack-mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream node01 '{\"uri\":\"amqp://user:password@server/%2F\",\"ack-mode\":\"on-publish\"}'\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Bindings with rabbitmqctl Command\nDESCRIPTION: This command lists all bindings in RabbitMQ, showing source and destination exchanges and queues along with routing keys. It uses the pretty_table formatter to display results in a tabular format for better readability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/rabbitmqctl list_bindings --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Example TLSv1.3 Connection Success Output\nDESCRIPTION: The expected output when successfully connecting to a RabbitMQ server using TLSv1.3, showing the negotiated cipher suite.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\n```\n\n----------------------------------------\n\nTITLE: Java TLS Client with Hostname Verification\nDESCRIPTION: Java example demonstrating how to enable hostname verification when connecting to RabbitMQ with TLS. This verifies that the server certificate was issued for the hostname the client is connecting to.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      // this connection will both perform peer verification\n      // and server hostname verification\n      Connection conn = factory.newConnection();\n\n      // snip ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including the STOMP JavaScript Client Library\nDESCRIPTION: HTML script tag to include the STOMP JavaScript client library in a web page.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- include the client library -->\n<script src=\"stomp.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version for RabbitMQ .NET Client\nDESCRIPTION: Sets up a ConnectionFactory with TLS enabled and configures it to use TLSv1.2. Starting with .NET client 6.0, the default TLS version changes to SslProtocols.None which delegates the selection to the .NET framework.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Security.Authentication;\n\n// ...\n\nConnectionFactory cf = new ConnectionFactory();\n\ncf.Ssl.Enabled = true;\ncf.Ssl.ServerName = System.Net.Dns.GetHostName();\ncf.Ssl.CertPath = \"/path/to/client_key.p12\";\ncf.Ssl.CertPassphrase = \"MySecretPassword\";\n\n// Use TLSv1.2 for this connection\ncf.Ssl.Version = SslProtocols.Tls12;\n```\n\n----------------------------------------\n\nTITLE: Disabling Nagle's Algorithm in RabbitMQ with INI-Style Config\nDESCRIPTION: Configuration example showing how to disable Nagle's algorithm to reduce latency using the rabbitmq.conf file format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 4096\ntcp_listen_options.nodelay = true\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection with Basic Parameters (INI)\nDESCRIPTION: Example of a RabbitMQ connection URI with TLS disabled, setting heartbeat and connection timeout parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-query-parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\namqp://myhost?heartbeat=5&connection_timeout=10000\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Object Metrics on /metrics Endpoint\nDESCRIPTION: This configuration setting enables the return of per-object (unaggregated) metrics on the /metrics endpoint, which can be resource-intensive for environments with many objects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.return_per_object_metrics = true\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel from AMQP 1.0 to AMQP 0.9.1\nDESCRIPTION: Configuration for a shovel that transfers messages from an AMQP 1.0 source to an AMQP 0.9.1 destination. Includes source address configuration and destination broker settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n [ {shovels, [ {my_first_shovel,\n                [ {source,\n                   [ {protocol, amqp10},\n                     {uris, [ \"amqp://fred:secret@host1.domain/my_vhost\",\n                            ]},\n                     {source_address, <<\"my-source\">>},\n                     {prefetch_count, 10}\n                   ]},\n                  {destination,\n                     [ {protocol, amqp091},\n                       {uris, [\"amqp://\"]},\n                       {declarations, [ {'exchange.declare',\n                                         [ {exchange, <<\"my_direct\">>},\n                                           {type, <<\"direct\">>},\n                                           durable\n                                         ]}\n                                      ]},\n                       {publish_properties, [ {delivery_mode, 2} ]},\n                       {add_forward_headers, true},\n                       {publish_fields, [ {exchange, <<\"my_direct\">>},\n                                          {routing_key, <<\"from_shovel\">>}\n                                        ]}\n                     ]},\n                  {ack_mode, on_confirm},\n                  {reconnect_delay, 5}\n                ]}\n             ]}\n ]}\n```\n\n----------------------------------------\n\nTITLE: Overriding RabbitMQ Configuration File Locations using Environment Variables in INI format\nDESCRIPTION: This snippet demonstrates how to use environment variables to override the default locations of RabbitMQ configuration files. It includes variables for the primary config file, advanced config file, and environment variable file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# overrides primary config file location\nRABBITMQ_CONFIG_FILE=/path/to/a/custom/location/rabbitmq.conf\n\n# overrides advanced config file location\nRABBITMQ_ADVANCED_CONFIG_FILE=/path/to/a/custom/location/advanced.config\n\n# overrides environment variable file location\nRABBITMQ_CONF_ENV_FILE=/path/to/a/custom/location/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Overriding RabbitMQ Configuration File Locations using Environment Variables in INI format\nDESCRIPTION: This snippet demonstrates how to use environment variables to override the default locations of RabbitMQ configuration files. It includes variables for the primary config file, advanced config file, and environment variable file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# overrides primary config file location\nRABBITMQ_CONFIG_FILE=/path/to/a/custom/location/rabbitmq.conf\n\n# overrides advanced config file location\nRABBITMQ_ADVANCED_CONFIG_FILE=/path/to/a/custom/location/advanced.config\n\n# overrides environment variable file location\nRABBITMQ_CONF_ENV_FILE=/path/to/a/custom/location/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Acceptors in RabbitMQ (INI)\nDESCRIPTION: Default setting for the number of Erlang processes that will accept TLS connections from clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.ssl = 10\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Exchange Information via HTTP API\nDESCRIPTION: Endpoints for retrieving information about exchanges in RabbitMQ. These provide similar data to the rabbitmqctl list_exchanges command plus message statistics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_35\n\nLANGUAGE: http\nCODE:\n```\n/api/exchanges\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/exchanges/(vhost)\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/exchanges/(vhost)/(name)\n```\n\n----------------------------------------\n\nTITLE: For Query Example for RabbitMQ LDAP Authorization\nDESCRIPTION: Demonstrates conditional query handling based on variable values, useful for implementing complex authorization rules.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_36\n\nLANGUAGE: erlang\nCODE:\n```\n{for, [{Name, Value, SubQuery}, ...]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{resource, exchange, {for, [{permission, configure,\n                                     {in_group, \"cn=wheel,dc=example,dc=com\"}\n                                    },\n                                    {permission, write, {constant, true}},\n                                    {permission, read,  {constant, true}}\n                                   ]}},\n                                   {resource, queue,    {constant, true}}]}}\n```\n\n----------------------------------------\n\nTITLE: Erlang 24 Support Announcement Reference in HTML\nDESCRIPTION: HTML code snippet showing a link to the Erlang 24 support announcement for RabbitMQ, referenced in the compatibility matrix for versions 3.9.0 through 3.9.14.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/which-erlang.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/blog/2021/03/23/erlang-24-support-roadmap\">Erlang/OTP <code>24</code> support announcement</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP 1.0 Protocol for Event Exchange\nDESCRIPTION: Configuration option that enables the Event Exchange plugin to publish events using the AMQP 1.0 protocol format instead of the default AMQP 0.9.1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/event-exchange.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nevent_exchange.protocol = amqp_1_0\n```\n\n----------------------------------------\n\nTITLE: Deleting Queue in RabbitMQ\nDESCRIPTION: Demonstrates how to delete a queue from RabbitMQ using the management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nmanagement.queueDelete(\"my-queue\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait management.Queue(\"myqueue\").DeleteAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nmanagement.delete_queue(name=\"myqueue\")\n```\n\nLANGUAGE: go\nCODE:\n```\nmanagement.DeleteExchange(context.TODO(),\"myqueue\")\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Federation Policy in PowerShell\nDESCRIPTION: PowerShell command to create a policy that enables federation for queues with names starting with 'federated.' prefix, applying to all configured upstreams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federated-queues/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy queue-federation '^federated\\.' '\"{\"\"federation-upstream-set\":\"\"all\"\"}\"' --priority 10 --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Server Version Components in JSX\nDESCRIPTION: Imports React components that display RabbitMQ server version information. These components are used in the documentation to dynamically show the current server release branch and version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/index.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    RabbitMQServerReleaseBranch,\n    RabbitMQServerVersion,\n} from '@site/src/components/RabbitMQServer';\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Stream in Go\nDESCRIPTION: Creates a producer that publishes 100 messages to a stream, with the last message marked as a sentinel. Uses a channel to wait for publish confirmations before completing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nproducer, _ := env.NewProducer(streamName, stream.NewProducerOptions())\n\nmessageCount := 100\nch := make(chan bool)\nchPublishConfirm := producer.NotifyPublishConfirmation()\nhandlePublishConfirm(chPublishConfirm, messageCount, ch)\n\nfmt.Printf(\"Publishing %d messages\\n\", messageCount)\nfor i := 0; i < messageCount; i++ {\n    var body string\n    if i == messageCount-1 {\n        body = \"marker\"\n    } else {\n        body = \"hello\"\n    }\n    producer.Send(amqp.NewMessage([]byte(body)))\n}\n_ = <-ch\nfmt.Println(\"Messages confirmed\")\n\nproducer.Close()\n```\n\n----------------------------------------\n\nTITLE: Java TLS Client with Hostname Verification\nDESCRIPTION: Java example demonstrating how to enable hostname verification when connecting to RabbitMQ with TLS. This verifies that the server certificate was issued for the hostname the client is connecting to.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      // this connection will both perform peer verification\n      // and server hostname verification\n      Connection conn = factory.newConnection();\n\n      // snip ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Properties for AMQP 1.0 Destination in RabbitMQ Shovel\nDESCRIPTION: Optional configuration that declares additional application properties to be added when republishing messages to an AMQP 1.0 destination. Keys and values should be binary strings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n{application_properties, [\n  {<<\"application-key-1\">>, <<\"value-1\">>},\n  {<<\"application-key-2\">>, <<\"value-2\">>}\n]}\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Name in RabbitMQ\nDESCRIPTION: The set_cluster_name command assigns a name to the RabbitMQ cluster. The cluster name is announced to clients on connection and used by federation and shovel plugins to record message origin. By default, the cluster name is derived from the hostname of the first node in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name london\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Broker with Custom Node Name\nDESCRIPTION: Command to run RabbitMQ broker with a custom Erlang node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/build-server.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker RABBITMQ_NODENAME=rmq\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web STOMP Examples Plugin\nDESCRIPTION: Command to enable the RabbitMQ Web STOMP examples plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_stomp_examples\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Cipher Suites in RabbitMQ with Bash\nDESCRIPTION: Lists all cipher suites supported by encoding commands in RabbitMQ. This can be useful for security auditing and configuration of secure connections to the broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_ciphers\n```\n\n----------------------------------------\n\nTITLE: Setting Console Code Page for UTF-8 Support\nDESCRIPTION: Command to change the Windows console code page to 65001 (UTF-8), allowing proper display and parsing of non-ASCII characters in RabbitMQ CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/windows-configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nchcp 65001\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Configuration File (Linux)\nDESCRIPTION: Detailed TLS configuration file specifying certificate paths, verification settings, and security options for both server and client sides.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {server, [\n    {cacertfile, \"/full/path/to/ca_certificate.pem\"},\n    {certfile,   \"/full/path/to/server_certificate.pem\"},\n    {keyfile,    \"/full/path/to/server_key.pem\"},\n    {password,   \"password-if-keyfile-is-encrypted\"},\n    {secure_renegotiate, true},\n    {verify, verify_peer},\n    {fail_if_no_peer_cert, true}\n  ]},\n  {client, [\n    {cacertfile, \"/full/path/to/ca_certificate.pem\"},\n    {certfile,   \"/full/path/to/client_certificate.pem\"},\n    {keyfile,    \"/full/path/to/client_key.pem\"},\n    {password,   \"password-if-keyfile-is-encrypted\"},\n    {secure_renegotiate, true},\n    {verify, verify_peer}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Docker Commands for Environment Setup\nDESCRIPTION: Commands to start Keycloak and RabbitMQ services with specific configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\nMODE=\"multi-keycloak\" CONF=\"rabbitmq.scenario1.conf\" make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Clearing Global Parameter in RabbitMQ (Bash)\nDESCRIPTION: Clears the global runtime parameter 'mqtt_default_vhosts' using the rabbitmqctl command. Global parameters are not tied to a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_global_parameter mqtt_default_vhosts\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue with a Server-Generated Name in Elixir\nDESCRIPTION: Creates a new queue with a server-generated name by not providing a queue name parameter. Returns the generated queue name which can be used for binding to exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel)\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Listen on Localhost for IPv4 and IPv6\nDESCRIPTION: This example shows how to configure RabbitMQ to listen on localhost for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 127.0.0.1:5672\nlisteners.tcp.2 = ::1:5672\n```\n\n----------------------------------------\n\nTITLE: Batch Message Rejection in .NET\nDESCRIPTION: Shows batch rejection implementation using RabbitMQ .NET client. Uses IModel#BasicNack to reject multiple messages simultaneously.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // requeue all unacknowledged deliveries up to\n                    // this delivery tag\n                    channel.BasicNack(ea.DeliveryTag, true, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Cache TTL Configuration\nDESCRIPTION: Configuration example for setting cache TTL and backend type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nauth_cache.cached_backend = ldap\nauth_cache.cache_ttl = 5000\n```\n\n----------------------------------------\n\nTITLE: Configuring Net Tick Time in RabbitMQ Advanced Config\nDESCRIPTION: Sample advanced.config configuration to double the default net_ticktime from 60 to 120 seconds for all nodes in a RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/nettick.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [{net_ticktime,  120}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Stopping All Publishing\nDESCRIPTION: Command to immediately trigger the memory alarm by setting the threshold to 0, which blocks all publishing connections. This can be used as a mechanism to temporarily stop all publishing activity across the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Net Tick Time in RabbitMQ Advanced Config\nDESCRIPTION: Sample advanced.config configuration to double the default net_ticktime from 60 to 120 seconds for all nodes in a RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/nettick.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [{net_ticktime,  120}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Workload Containers in Bash\nDESCRIPTION: Command to stop and remove all containers used by monitoring workloads\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngmake down\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra OAuth Parameters for Authorization Endpoints\nDESCRIPTION: Configuration for adding custom parameters to OAuth authorization and token endpoint requests. This allows sending provider-specific parameters like 'audience' that some OAuth providers require.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.2.id = some-resource-id\nmanagement.oauth_resource_servers.2.oauth_authorization_endpoint_params.audience = some-resource-id\nmanagement.oauth_resource_servers.2.oauth_token_endpoint_params.audience = some-resource-id\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Event Stream\nDESCRIPTION: Command to consume internal event stream in JSON format using rabbitmq-diagnostics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream\n```\n\n----------------------------------------\n\nTITLE: Enabling MQTT Plugin in RabbitMQ\nDESCRIPTION: Command to enable the MQTT plugin using rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-09-12-mqtt-adapter/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo rabbitmq-plugins enable rabbitmq_mqtt\n```\n\n----------------------------------------\n\nTITLE: Enabling Reverse DNS Lookups in RabbitMQ Configuration\nDESCRIPTION: This configuration snippet shows how to explicitly enable reverse DNS lookups in RabbitMQ. When set to true, RabbitMQ will perform reverse DNS lookups for client IP addresses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nreverse_dns_lookups = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Exclusions for RabbitMQ Peer Discovery\nDESCRIPTION: This configuration sets up HTTP and HTTPS proxies for RabbitMQ peer discovery and specifies exclusions for certain hosts. It uses cluster_formation.proxy.proxy_exclusions to list IPs and hostnames that should bypass the proxy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.proxy.http_proxy = 192.168.0.98\ncluster_formation.proxy.https_proxy = 192.168.0.98\n\ncluster_formation.proxy.proxy_exclusions.1 = 169.254.169.254\ncluster_formation.proxy.proxy_exclusions.2 = excluded.example.local\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ and Erlang Packages on RPM-based Systems\nDESCRIPTION: Commands for updating package metadata, installing dependencies, and installing RabbitMQ and Erlang packages using dnf (yum) on RPM-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndnf update -y\n\n## install these dependencies from standard OS repositories\ndnf install -y logrotate\n\n## install RabbitMQ and zero dependency Erlang\ndnf install -y erlang rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listener Port\nDESCRIPTION: INI configuration to change the STOMP listener port to 12345.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 12345\n```\n\n----------------------------------------\n\nTITLE: Reinstalling RabbitMQ Formula\nDESCRIPTION: Complete sequence of commands to properly uninstall, clean up, and reinstall RabbitMQ via Homebrew.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop rabbitmq\n\nbrew uninstall rabbitmq\n\nrm -rf /opt/homebrew/etc/rabbitmq/\nrm -rf /opt/homebrew/opt/rabbitmq/\nrm -rf /opt/homebrew/var/lib/rabbitmq/\nrm -f $HOME/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist\n\nbrew install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual Host Details using HTTP API\nDESCRIPTION: Retrieves information about a specific virtual host, including its metadata, using the HTTP API GET endpoint. This allows inspecting the current configuration of a virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X GET http://rabbitmq.local:15672/api/vhosts/qa1\n```\n\n----------------------------------------\n\nTITLE: Match Query Syntax\nDESCRIPTION: Shows the syntax for match queries used with regular expressions in LDAP authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_41\n\nLANGUAGE: erlang\nCODE:\n```\n{match, StringSubQuery, RESubQuery}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking\nDESCRIPTION: This snippet shows how to consume messages from a RabbitMQ stream using offset tracking. It demonstrates restarting a consumer that picks up from where it left off, consuming only the new messages added since the last run.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-09-13-rabbitmq-streams-offset-tracking/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.OffsetTracking$Consume'\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags in RabbitMQ using Bash\nDESCRIPTION: This command lists all feature flags and their states in RabbitMQ using the rabbitmqctl CLI tool. It uses the pretty_table formatter for readable output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter pretty_table list_feature_flags\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ User Permissions\nDESCRIPTION: Kubernetes manifest for assigning permissions to an existing RabbitMQ user named 'rabbit-user-1' in the root virtual host. The permissions grant full read, write, and configure access using wildcard patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Permission\nmetadata:\n  name: rabbit-user-1-permission\n  namespace: rabbitmq-system\nspec:\n  vhost: \"/\"\n  user: \"rabbit-user-1\" # name of the RabbitMQ user\n  permissions:\n    write: \".*\"\n    configure: \".*\"\n    read: \".*\"\n  rabbitmqClusterReference:\n    name: sample\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listener Port\nDESCRIPTION: INI configuration to change the STOMP listener port to 12345.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 12345\n```\n\n----------------------------------------\n\nTITLE: Verifying the RabbitMQ Key Transition Statement\nDESCRIPTION: Command to download and verify the integrity of the key transition statement. This uses wget to fetch the statement and pipes it to gpg for signature verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/static/key-transition-0x0697F46E2DF405B6.txt#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget -q -O- https://www.rabbitmq.com/key-transition-0x0697F46E2DF405B6.txt | gpg --verify\n```\n\n----------------------------------------\n\nTITLE: Emitting an Error Log Message with RabbitMQ\nDESCRIPTION: This bash command shows how to run the EmitLogDirect program to send an error log message to the RabbitMQ exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP EmitLogDirect error \"Run. Run. Or it will explode.\"\n# => [x] Sent 'error':'Run. Run. Or it will explode.'\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6-Only Listener\nDESCRIPTION: Example of configuring RabbitMQ to listen only on an IPv6 interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = fe80::2acf:e9ff:fe17:f97b:5672\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Schema Information\nDESCRIPTION: Lists schema database tables and their properties. This example uses the 'schema_info' action to display the table names and their active replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl schema_info name active_replicas\n```\n\n----------------------------------------\n\nTITLE: Preparing and Starting Stunnel\nDESCRIPTION: Commands to prepare certificate files and start stunnel for TLS connection testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncat client_key.pem client_certificate.pem > client/key-cert.pem\nstunnel stunnel.conf\n```\n\n----------------------------------------\n\nTITLE: Blocking Client Connections to a RabbitMQ Virtual Host\nDESCRIPTION: Command to block all client connections to a specific virtual host by setting the max-connections limit to zero. Uses rabbitmqctl with a JSON configuration parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 JWKS URL in RabbitMQ (Erlang)\nDESCRIPTION: This snippet demonstrates how to configure the OAuth 2.0 JWKS URL in RabbitMQ using the Erlang format. It sets the resource server ID and the JWKS URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"my_rabbit_server\">>},\n    {key_config, [\n      {jwks_url, <<\"https://my-jwt-issuer/jwks.json\">>}\n    ]}\n  ]},\n].\n```\n\n----------------------------------------\n\nTITLE: Putting a Remote Node into Maintenance Mode in RabbitMQ (Bash)\nDESCRIPTION: This command puts a specific remote RabbitMQ node into maintenance mode by using the -n flag to target it. Useful for managing maintenance mode across a cluster from a single control point.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# puts node rabbit@node2.cluster.rabbitmq.svc into maintenance mode\nrabbitmq-upgrade drain -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: Publishing MQTT Message with OAuth Token (Bash)\nDESCRIPTION: Command to publish an MQTT message using a JWT token for authentication, demonstrating OAuth usage with MQTT protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake start-mqtt-publish TOKEN=$(bin/jwt_token scopes-for-mqtt.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listener Port\nDESCRIPTION: INI configuration to change the STOMP listener port to 12345.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Pause-If-All-Down Partition Handling in RabbitMQ\nDESCRIPTION: This configuration snippet sets up the pause-if-all-down partition handling strategy, specifying nodes to check and the recovery action.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/partitions.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncluster_partition_handling = pause_if_all_down\n\n## Recovery strategy. Can be either 'autoheal' or 'ignore'\ncluster_partition_handling.pause_if_all_down.recover = ignore\n\n## Node names to check\ncluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@myhost1\ncluster_partition_handling.pause_if_all_down.nodes.2 = rabbit@myhost2\n```\n\n----------------------------------------\n\nTITLE: Clearing Policies in RabbitMQ\nDESCRIPTION: Removes a policy by name. The example demonstrates how to clear the 'federate-me' policy from the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy federate-me\n```\n\n----------------------------------------\n\nTITLE: Querying Log Location with rabbitmq-diagnostics in PowerShell\nDESCRIPTION: Command to find the current log file location using the rabbitmq-diagnostics CLI tool in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-diagnostics.bat -q log_location\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 JWKS URL in RabbitMQ (Erlang)\nDESCRIPTION: This snippet demonstrates how to configure the OAuth 2.0 JWKS URL in RabbitMQ using the Erlang format. It sets the resource server ID and the JWKS URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"my_rabbit_server\">>},\n    {key_config, [\n      {jwks_url, <<\"https://my-jwt-issuer/jwks.json\">>}\n    ]}\n  ]},\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Cache TTL for RabbitMQ Auth Cache\nDESCRIPTION: Configuration example showing how to set the time-to-live (TTL) for cache items in milliseconds. In this example, LDAP is the cached backend and the cache TTL is set to 5000 milliseconds (5 seconds).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-cache-backend.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nauth_cache.cached_backend = ldap\nauth_cache.cache_ttl = 5000\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Stream Environment\nDESCRIPTION: Java code for creating a RabbitMQ stream Environment instance. The Environment is the main entry point of the stream Java client and handles connection details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nEnvironment environment = Environment.builder().build();\n```\n\n----------------------------------------\n\nTITLE: RPC Client Implementation with RabbitMQ in Go\nDESCRIPTION: Complete implementation of an RPC client using RabbitMQ in Go. The client creates an exclusive callback queue, sends a request with a correlation ID, and waits for the response matching that ID. It includes utilities for generating random strings and processing command-line arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-go.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n        \"math/rand\"\n        \"os\"\n        \"strconv\"\n        \"strings\"\n        \"time\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc randomString(l int) string {\n        bytes := make([]byte, l)\n        for i := 0; i < l; i++ {\n                bytes[i] = byte(randInt(65, 90))\n        }\n        return string(bytes)\n}\n\nfunc randInt(min int, max int) int {\n        return min + rand.Intn(max-min)\n}\n\nfunc fibonacciRPC(n int) (res int, err error) {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        q, err := ch.QueueDeclare(\n                \"\",    // name\n                false, // durable\n                false, // delete when unused\n                true,  // exclusive\n                false, // noWait\n                nil,   // arguments\n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        msgs, err := ch.Consume(\n                q.Name, // queue\n                \"\",     // consumer\n                true,   // auto-ack\n                false,  // exclusive\n                false,  // no-local\n                false,  // no-wait\n                nil,    // args\n        )\n        failOnError(err, \"Failed to register a consumer\")\n\n        corrId := randomString(32)\n\n        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n        defer cancel()\n\n        err = ch.PublishWithContext(ctx,\n                \"\",          // exchange\n                \"rpc_queue\", // routing key\n                false,       // mandatory\n                false,       // immediate\n                amqp.Publishing{\n                        ContentType:   \"text/plain\",\n                        CorrelationId: corrId,\n                        ReplyTo:       q.Name,\n                        Body:          []byte(strconv.Itoa(n)),\n                })\n        failOnError(err, \"Failed to publish a message\")\n\n        for d := range msgs {\n                if corrId == d.CorrelationId {\n                        res, err = strconv.Atoi(string(d.Body))\n                        failOnError(err, \"Failed to convert body to integer\")\n                        break\n                }\n        }\n\n        return\n}\n\nfunc main() {\n        rand.Seed(time.Now().UTC().UnixNano())\n\n        n := bodyFrom(os.Args)\n\n        log.Printf(\" [x] Requesting fib(%d)\", n)\n        res, err := fibonacciRPC(n)\n        failOnError(err, \"Failed to handle RPC request\")\n\n        log.Printf(\" [.] Got %d\", res)\n}\n\nfunc bodyFrom(args []string) int {\n        var s string\n        if (len(args) < 2) || os.Args[1] == \"\" {\n                s = \"30\"\n        } else {\n                s = strings.Join(args[1:], \" \")\n        }\n        n, err := strconv.Atoi(s)\n        failOnError(err, \"Failed to convert arg to integer\")\n        return n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for OAuth 2.0 Endpoints in RabbitMQ\nDESCRIPTION: Configuration of TLS variables like cacertfile for the issuer or JWKS URL. This is needed to establish secure connections to the OAuth provider endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.https.cacertfile = /opts/certs/cacert.pem\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Entries for Local Development\nDESCRIPTION: Host file entries that need to be added to /etc/hosts for proper DNS resolution in the OAuth 2.0 setup with forward proxy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-forward-proxy.md#2025-04-09_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nlocalhost keycloak rabbitmq forward-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Java Client Arguments\nDESCRIPTION: Java code demonstrating how to set up an alternate exchange using client-provided arguments during exchange declaration. Creates a direct exchange with an alternate fanout exchange and sets up routing queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ae.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"alternate-exchange\", \"my-ae\");\nchannel.exchangeDeclare(\"my-direct\", \"direct\", false, false, args);\nchannel.exchangeDeclare(\"my-ae\", \"fanout\");\nchannel.queueDeclare(\"routed\");\nchannel.queueBind(\"routed\", \"my-direct\", \"key1\");\nchannel.queueDeclare(\"unrouted\");\nchannel.queueBind(\"unrouted\", \"my-ae\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Java Client Arguments\nDESCRIPTION: Java code demonstrating how to set up an alternate exchange using client-provided arguments during exchange declaration. Creates a direct exchange with an alternate fanout exchange and sets up routing queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ae.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"alternate-exchange\", \"my-ae\");\nchannel.exchangeDeclare(\"my-direct\", \"direct\", false, false, args);\nchannel.exchangeDeclare(\"my-ae\", \"fanout\");\nchannel.queueDeclare(\"routed\");\nchannel.queueBind(\"routed\", \"my-direct\", \"key1\");\nchannel.queueDeclare(\"unrouted\");\nchannel.queueBind(\"unrouted\", \"my-ae\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Setting Source Address for AMQP 1.0 Link in RabbitMQ Shovel Plugin\nDESCRIPTION: Mandatory configuration that specifies the source address of the AMQP 1.0 link for a Shovel connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n{source_address, <<\"my-address\">>}\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange-to-Exchange Binding using POST /api/bindings/{vhost}/e/{source}/e/{destination}\nDESCRIPTION: This JSON payload is used to create an exchange-to-exchange binding. It includes an optional routing key and additional arguments for the binding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routing_key\": \"my_routing_key\",\n  \"arguments\": {\n    \"x-arg\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Peer Verification Configuration\nDESCRIPTION: Configures peer verification settings for LDAP TLS connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n# Enables peer certificate chain verification.\n# This behavior is the default starting with Erlang 26 (and thus RabbitMQ 3.13+)/\nauth_ldap.ssl_options.verify = verify_peer\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Disables peer certificate chain verification.\n#\n# Doing so loses one of the key benefits of TLS and make the setup less secure\n# but also simplifies node configuration.\nauth_ldap.ssl_options.verify = verify_none\n```\n\nLANGUAGE: ini\nCODE:\n```\n# if target LDAP server does not present a certificate, should the connection be aborted?\nauth_ldap.ssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Providers with Resource Servers in RabbitMQ\nDESCRIPTION: This configuration demonstrates how to set up multiple OAuth 2.0 providers (prod and dev) with corresponding resource servers in RabbitMQ. Each provider has its own issuer URL and certificate file, and the dev resource server uses a custom scope prefix.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.1.oauth_provider_id = prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.2.oauth_provider_id = dev\nauth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.\n\nauth_oauth2.oauth_providers.prod.issuer = https://rabbit_prod:8080\nauth_oauth2.oauth_providers.prod.https.cacertfile = /opts/certs/prod.pem\nauth_oauth2.oauth_providers.dev.issuer = https://rabbit_dev:8080\nauth_oauth2.oauth_providers.dev.https.cacertfile = /opts/certs/dev.pem\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest with High Confirm Count for AMQP 0.9.1 Quorum Queue Benchmark\nDESCRIPTION: Java command for benchmarking a quorum queue with AMQP 0.9.1 protocol, using a high confirm count (3000) to allow for a maximum of 3,000 unconfirmed messages in the publisher. The benchmark sends 1 million persistent messages of 12 bytes each.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar target/perf-test.jar \\\n    --predeclared --exchange amq.default \\\n    --routing-key my-quorum-queue --queue my-quorum-queue \\\n    --flag persistent --flag mandatory \\\n    --pmessages 1000000 --size 12 --confirm 3000 --qos 5000 --multi-ack-every 5000\n\nid: test-085526-136, sending rate avg: 70067 msg/s\nid: test-085526-136, receiving rate avg: 70067 msg/s\nid: test-085526-136, consumer latency min/median/75th/95th/99th 8803/33127/40424/53407/62883 µs\nid: test-085526-136, confirm latency min/median/75th/95th/99th 8551/30323/38317/52103/63131 µs\n```\n\n----------------------------------------\n\nTITLE: Subscribing to RabbitMQ Queue in Objective-C\nDESCRIPTION: Subscribes to the declared queue and sets up a callback to handle received messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-objectivec.md#2025-04-09_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSLog(@\"Waiting for messages.\");\n[q subscribe:^(RMQMessage * _Nonnull message) {\n    NSLog(@\"Received %@\", [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);\n}];\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length Policy with rabbitmqctl on Windows\nDESCRIPTION: Windows-specific command for setting a 1MiB queue size limit using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy my-pol \"^one-meg$\" ^\n  \"{\"\"max-length-bytes\"\":1048576}\" ^\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Reinstalling RabbitMQ Windows Service\nDESCRIPTION: PowerShell commands to remove, reinstall, and start the RabbitMQ Windows service. Used when upgrading Erlang or when environment variables have changed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/windows-configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\rabbitmq-service.bat remove\n.\\rabbitmq-service.bat install\n.\\rabbitmq-service.bat start\n```\n\n----------------------------------------\n\nTITLE: Configuring Advertised Hosts and Ports for RabbitMQ Stream Protocol\nDESCRIPTION: Sets up separate advertised hosts and ports for both regular and TLS connections. This is useful when the internal network addresses differ from those that should be advertised to clients.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stream.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nstream.advertised_host = private-rabbitmq-1\nstream.advertised_port = 12345\nstream.advertised_tls_host = public-rabbitmq-1\nstream.advertised_tls_port = 12344\n```\n\n----------------------------------------\n\nTITLE: Removing Certificate from Mono Trust Store\nDESCRIPTION: Bash command for removing a certificate from the Mono Trust store on Linux using its unique hash. This is useful for removing certificates that are no longer needed or trusted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -del -c Trust 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n\n# … snip …\n\nCertificate removed from store.\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Status\nDESCRIPTION: Command to perform a basic health check and display information about the running RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# A basic health check of both the node and CLI tool connectivity/authentication\nrabbitmqctl.bat status\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Application\nDESCRIPTION: Command to start the RabbitMQ application on a node. Typically used after performing management actions that require the application to be stopped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl start_app\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in Background\nDESCRIPTION: Command to start the RabbitMQ AMQP server in detached mode (background). When run with the -detached flag, the process runs in the background and the PID is not written to the PID file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-server.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameter with String Value in RabbitMQ API\nDESCRIPTION: JSON payload for setting a global runtime parameter with a string value. This example sets the cluster_name parameter to 'prod-456'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cluster_name\",\n  \"value\": \"prod-456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive TCP configuration for RabbitMQ high connection churn scenarios\nDESCRIPTION: This configuration combines TCP fin timeout, keepalive settings, and TIME_WAIT socket reuse to optimize connection handling in RabbitMQ under high connection churn. The settings reduce connection detection time and allow socket reuse when safe.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_fin_timeout = 30\n\nnet.ipv4.tcp_keepalive_time=30\nnet.ipv4.tcp_keepalive_intvl=10\nnet.ipv4.tcp_keepalive_probes=4\n\nnet.ipv4.tcp_tw_reuse = 1\n```\n\n----------------------------------------\n\nTITLE: Manual Queue Synchronization Commands\nDESCRIPTION: Commands to manually synchronize a queue or cancel ongoing synchronization\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl sync_queue \"{name}\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat sync_queue '{name}'\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat sync_queue \"{name}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl cancel_sync_queue \"{name}\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat cancel_sync_queue '{name}'\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat cancel_sync_queue \"{name}\"\n```\n\n----------------------------------------\n\nTITLE: Viewing PerfTest Producer Logs (Bash)\nDESCRIPTION: This command shows how to view the logs of the PerfTest producer application running in a Docker container. It uses the docker logs command with the -f flag to follow the log output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs producer_with_roles -f\n```\n\n----------------------------------------\n\nTITLE: Setting Administrator Tag for a RabbitMQ User\nDESCRIPTION: Command to grant administrative privileges to a RabbitMQ user by adding the 'administrator' tag. This allows the user to manage other users, virtual hosts, and permissions through management interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_tags janeway administrator\n```\n\n----------------------------------------\n\nTITLE: Checking Federation Status via CLI\nDESCRIPTION: Command to check federation status of links running on the target node. The output includes details like type, name, vhost, upstream name, status, connection and timestamp.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl federation_status\n```\n\n----------------------------------------\n\nTITLE: Batch Message Acknowledgement in .NET\nDESCRIPTION: Shows batch acknowledgement implementation using RabbitMQ .NET client. Uses IModel#BasicAck with multiple flag to acknowledge multiple messages simultaneously.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // positively acknowledge all deliveries up to\n                    // this delivery tag\n                    channel.BasicAck(ea.DeliveryTag, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Core Feature Flags Table Structure\nDESCRIPTION: HTML table structure showing core RabbitMQ feature flags with their required versions, stability status, names and descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n   <th>Required</th>\n   <th>Stable</th>\n   <th>Feature flag name</th>\n   <th>Description</th>\n  </tr>\n  <tr>\n    <td></td>\n    <td>4.0</td>\n    <td>rabbitmq_4.0.0</td>\n    <td>\n      Enables multiple features and changes introduced in RabbitMQ 4.0.\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining MQTT 5.0 to AMQP 1.0 Type Conversion Table in Markdown\nDESCRIPTION: This markdown table outlines the conversion of MQTT 5.0 data types to AMQP 1.0 types. It includes the original MQTT type, any specific conditions, the corresponding AMQP type, and additional comments for clarity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/conversions.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| MQTT 5.0 Type        | Condition    | AMQP 1.0 Type | Comment                               |\n| -------------------- | -------------| ------------- | ------------------------------------- |\n| Bits                 |              | boolean       | only selected flags are converted     |\n| ushort               |              | ushort        |                                       |\n| uint                 |              | uint          |                                       |\n| utf8                 |              | utf8          |                                       |\n| binary data          | utf8         | utf8          |                                       |\n| binary data          |              | binary        |                                       |\n| utf8 string pairs    |              | map           | de-duplicate keys, but maintains order|\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Publishing with Puka\nDESCRIPTION: This example shows synchronous message publishing using Puka. The code waits for confirmation from the broker that the message has been received before proceeding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-07-08-puka-rethinking-amqp-clients/index.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npromise = client.basic_publish(exchange='', routing_key='test',\n                              body=\"Hello world!\")\nclient.wait(promise)\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Maximum in RabbitMQ Configuration\nDESCRIPTION: Configuration setting to limit the maximum number of channels that can be opened on a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 100\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Operator Installation in Kubernetes\nDESCRIPTION: Command to verify if Prometheus Operator custom resource definitions are installed in the Kubernetes cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/operator-monitoring.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get customresourcedefinitions.apiextensions.k8s.io servicemonitors.monitoring.coreos.com\n```\n\n----------------------------------------\n\nTITLE: Adding a Stream Replica in RabbitMQ using Bash\nDESCRIPTION: This command adds a stream replica on a specified node within a given virtual host. It requires the queue name, node name, and virtual host to be provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_replica --vhost \"a-vhost\" \"a-queue\" \"rabbit@new-node\"\n```\n\n----------------------------------------\n\nTITLE: Event Stream Consumer Command - Bash\nDESCRIPTION: Streams internal events with configurable duration and pattern matching\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream -n rabbit@hostname --duration 20 --pattern queue_.*\n```\n\n----------------------------------------\n\nTITLE: SslContextFactory Interface for Flexible Client Certificate Management\nDESCRIPTION: Definition of the SslContextFactory interface that allows dynamic selection of client certificates based on connection names. This enables multiple client connections with different certificates in a single JVM process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-09-29-rabbitmq-java-client-5-0-is-released/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface SslContextFactory {\n\n    SSLContext create(String name);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sender-selected Distribution with CC Headers in Java\nDESCRIPTION: This Java code demonstrates how to use the CC header with multiple routing keys in RabbitMQ. It creates a list of routing keys, adds them to a headers map, and then sets this map on the message properties before publishing the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-03-23-sender-selected-distribution/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBasicProperties props  = new BasicProperties();\nMap<String, Object> headers = new HashMap<String, Object>();\nList<String> ccList = new ArrayList<String>();\nccList.add(\"routingkey2\");\nccList.add(\"routingkey3\");\nheaders.put(\"CC\", ccList);\nprops.setHeaders(headers);\nchannel.basicPublish(exchange, \"routingkey1\", props, payload);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host using HTTP API\nDESCRIPTION: Deletes a virtual host named 'vh1' using the HTTP API DELETE endpoint. This performs the same operation as the CLI command but through the REST API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X DELETE http://rabbitmq.local:15672/api/vhosts/vh1\n```\n\n----------------------------------------\n\nTITLE: Server Version Check\nDESCRIPTION: Command to display the target node's version information\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics server_version -q\n```\n\n----------------------------------------\n\nTITLE: Receiving Multiple Log Types with Topic Exchange in Bash\nDESCRIPTION: This command runs the receive_logs_topic.js script to receive both kernel logs and critical logs by specifying multiple routing key patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./receive_logs_topic.js \"kern.*\" \"*.critical\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Non-Interactive Output for Scripting\nDESCRIPTION: Shows how to use the --non-interactive flag to get output suitable for parsing in scripts. This produces output without table formatting that is easier to parse programmatically.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --non-interactive show overview\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ APT Repositories\nDESCRIPTION: APT repository configuration for RabbitMQ and Erlang packages. Includes primary and redundant mirror sources for both RabbitMQ server and Erlang packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\n\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\n```\n\n----------------------------------------\n\nTITLE: Adding Users in PowerShell with Password as Command Line Argument\nDESCRIPTION: Demonstrates how to add a RabbitMQ user using PowerShell by providing the password as a command line argument, including handling special characters in passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# password is provided as a command line argument\nrabbitmqctl.bat add_user 'username' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'\n\n# passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user 'username' '\"w63pnZ&LnYMO(t\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Web MQTT Examples Plugin\nDESCRIPTION: Command to enable the Web MQTT examples plugin which provides sample implementations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_mqtt_examples\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream from Specific Offset in Java\nDESCRIPTION: Shows how to consume messages from a stream starting from a specific numerical offset value. Includes required QoS configuration and message acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", 5000), // offset value\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Disabling Basic Authentication for Management HTTP API\nDESCRIPTION: Configuration to disable HTTP basic authentication for the management HTTP API, enforcing OAuth 2.0 token-based authentication only.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n...\nmanagement.disable_basic_auth = true\n...\n```\n\n----------------------------------------\n\nTITLE: Example Output for Successful TLSv1.3 Connection\nDESCRIPTION: Sample output from OpenSSL showing successful TLSv1.3 connection negotiation with the TLS_AES_256_GCM_SHA384 cipher suite.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\n```\n\n----------------------------------------\n\nTITLE: Setting a Combined Federation and TTL Policy in RabbitMQ\nDESCRIPTION: This example shows how to set a policy named 'ttl-fed' that applies to queues with names starting with 'tf.'. The policy combines federation settings with a message TTL of 60000 milliseconds and has a priority of 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy ttl-fed \\\n    \"^tf\\.\" '{\"federation-upstream-set\":\"all\", \"message-ttl\":60000}' \\\n    --priority 1 \\\n    --apply-to queues\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl set_policy ttl-fed ^\n    \"^tf\\.\" \"{\"\"federation-upstream-set\"\":\"\"all\"\", \"\"message-ttl\"\":60000}\" ^\n    --priority 1 ^\n    --apply-to queues\n```\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/ttl-fed\n    {\"pattern\": \"^tf\\.\",\n    \"definition\": {\"federation-upstream-set\":\"all\", \"message-ttl\":60000},\n    \"priority\": 1,\n    \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Status in PowerShell\nDESCRIPTION: Shows how to check the status of a RabbitMQ node using the rabbitmq-diagnostics tool in PowerShell, with an optional node specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics .bat status\n\nrabbitmq-diagnostics .bat status --node rabbit@target-hostname.local\n```\n\n----------------------------------------\n\nTITLE: Customizing Syslog Service IP and Port in RabbitMQ\nDESCRIPTION: This snippet shows how to configure a custom IP address and port for Syslog logging in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.ip = 10.10.10.10\nlog.syslog.port = 1514\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Using URI\nDESCRIPTION: Shows an alternative method of connecting to RabbitMQ using a URI string. This approach allows specifying connection details in a single string format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.setUri(\"amqp://userName:password@hostName:portNumber/virtualHost\");\nConnection conn = factory.newConnection();\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration File Location in RabbitMQ Log\nDESCRIPTION: This snippet shows how the active configuration file location appears in the RabbitMQ log file. It includes examples of successful and failed configuration file loading.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /etc/rabbitmq/advanced.config\n               : /etc/rabbitmq/rabbitmq.conf\n```\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /var/lib/rabbitmq/hare.conf (not found)\n```\n\n----------------------------------------\n\nTITLE: Adding a RabbitMQ User with Special Password Handling in Bash\nDESCRIPTION: Example showing how to add a user with a password that starts with dashes by using the double hyphen separator to prevent option parsing confusion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"--!a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Encryption Settings in RabbitMQ (Erlang)\nDESCRIPTION: Shows how to customize encryption settings in RabbitMQ's configuration, including cipher, hash function, and iteration count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_58\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n      ...\n      {config_entry_decoder, [\n             {passphrase, \"mypassphrase\"},\n             {cipher, blowfish_cfb64},\n             {hash, sha256},\n             {iterations, 10000}\n         ]}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Clearing Virtual Host Limits\nDESCRIPTION: Removes all configured limits from a specified virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_vhost_limits -p qa_env\n```\n\n----------------------------------------\n\nTITLE: Message Acknowledgement Modes\nDESCRIPTION: Available acknowledgement modes for AMQP 1.0 Shovel including on-confirm, on-publish, and no-ack.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_15\n\nLANGUAGE: code\nCODE:\n```\non-confirm\non-publish\nno-ack\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Plugin Interface in RabbitMQ\nDESCRIPTION: Specifies which network interface the RabbitMQ management plugin will bind to. Using 0.0.0.0 makes it listen on all available interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.ip = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Name\nDESCRIPTION: Configuration for overriding the default Kubernetes service name for RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# overrides Kubernetes service name. Default value is \"rabbitmq\".\ncluster_formation.k8s.service_name = rmq-qa\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX via Policy using Bash\nDESCRIPTION: Sets up a dead letter exchange policy named 'DLX' that applies to all queues using rabbitmqctl in bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/dlx.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy DLX \".*\" '{\"dead-letter-exchange\":\"my-dlx\"}' --apply-to queues --priority 7\n```\n\n----------------------------------------\n\nTITLE: Parsing AMQP URLs in Ruby AMQP 0.7\nDESCRIPTION: This code demonstrates the new AMQP URL parsing feature, which allows users to provide a URL instead of an option hash when connecting to an AMQP server. It shows examples of parsing both SSL and non-SSL URLs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-01-19-ruby-amqp-0-7-released/index.md#2025-04-09_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nAMQP.start(\"amqps:/\")\n\n# Will resolve to: {vhost: \"/\", port: 5671, ssl: true}\n\nAMQP.start(\"amqp://botanicus@localhost:1111/\")\n\n# Will resolve to: {user: \"botanicus\", vhost: \"/\", host: \"localhost\", port: 1111, ssl: false}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Shovel using rabbitmqctl (Bash)\nDESCRIPTION: This command uses rabbitmqctl to set up a dynamic shovel named 'my-shovel' that transfers messages from a source queue to a target queue on a remote server using AMQP 0-9-1 protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-dynamic.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter shovel my-shovel \\\n  '{\"src-protocol\": \"amqp091\", \"src-uri\": \"amqp://\", \"src-queue\": \"source-queue\", \"dest-protocol\": \"amqp091\", \"dest-uri\": \"amqp://remote-server\", \"dest-queue\": \"target-queue\", \"dest-queue-args\": {\"x-queue-type\": \"quorum\"}}'\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ RPC Server and Client\nDESCRIPTION: Command line instructions for running the RPC server and client components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nruby rpc_server.rb\n# => [x] Awaiting RPC requests\n```\n\nLANGUAGE: bash\nCODE:\n```\nruby rpc_client.rb\n# => [x] Requesting fib(30)\n```\n\n----------------------------------------\n\nTITLE: Error Log for Guest User Remote Connection Rejection\nDESCRIPTION: Example log message showing rejection of remote connection attempt using the default guest user account.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[error] <0.918.0> PLAIN login refused: user 'guest' can only connect via localhost\n```\n\n----------------------------------------\n\nTITLE: Analyzing Memory Usage in RabbitMQ\nDESCRIPTION: Displays a breakdown of memory usage by category on the node, with the option to specify the memory unit (bytes, megabytes, gigabytes, terabytes).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics memory_breakdown --unit gigabytes\n```\n\n----------------------------------------\n\nTITLE: Decoding Encrypted Values with rabbitmqctl on Unix Systems\nDESCRIPTION: Examples of decoding encrypted values using rabbitmqctl on Unix-based systems with the same passphrase used for encryption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode '{encrypted, <<\"...\">>}' mypassphrase\n# => <<\"guest\">>\nrabbitmqctl decode '{encrypted, <<\"...\">>}' mypassphrase\n# => \"amqp://fred:secret@host1.domain/my_vhost\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Formatting for File Logging in RabbitMQ\nDESCRIPTION: This snippet sets up file logging with 'info' level and JSON formatting in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\nlog.file.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Listener with Specific IP and Port in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure the AMQP 0-9-1 and AMQP 1.0 listener to use a specific IP address and the standard port in RabbitMQ configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 192.168.1.99:5672\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Listener with Specific IP and Port in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure the AMQP 0-9-1 and AMQP 1.0 listener to use a specific IP address and the standard port in RabbitMQ configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 192.168.1.99:5672\n```\n\n----------------------------------------\n\nTITLE: Setting Default Queue Type for a Virtual Host using rabbitmqctl\nDESCRIPTION: Creates a virtual host with quorum queues as the default queue type along with additional metadata. This affects how queues are created when clients don't specify a queue type explicitly.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1 --description \"QA environment 1\" --default-queue-type quorum --tags qa,project-a\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits with curl\nDESCRIPTION: These curl commands demonstrate how to clear maximum channels and connections limits for user1 using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-channels\n\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-connections\n```\n\n----------------------------------------\n\nTITLE: Channel Negotiation Error Message\nDESCRIPTION: Displays the error message when a client attempts to negotiate a higher channel limit than the server's configured maximum.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n2019-02-11 16:03:16.543 [error] <0.882.0> closing AMQP connection <0.882.0> (127.0.0.1:49911 -> 127.0.0.1:5672):\nfailed to negotiate connection parameters: negotiated channel_max = 2047 is higher than the maximum allowed value (32)\n```\n\n----------------------------------------\n\nTITLE: Running Basic RabbitMQ Alarms Check Command in Bash\nDESCRIPTION: Command to list resource alarms in a RabbitMQ cluster. This can be used to identify resource-related issues that might affect node or cluster performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics alarms\n```\n\n----------------------------------------\n\nTITLE: Defining the echo field in AMQP 1.0 flow frame\nDESCRIPTION: XML definition of the echo field in AMQP 1.0 flow frame. The echo field is a boolean that defaults to false and is used by the consumer to request the sender to reply with a flow frame, useful for confirming flow state changes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"echo\" type=\"boolean\" default=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking Local Alarms in RabbitMQ (Bash)\nDESCRIPTION: Health check that fails if there are alarms in effect on the target node. This command is useful for monitoring the health status of a RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_local_alarms\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for RabbitMQ API\nDESCRIPTION: Nginx configuration for proxying requests to RabbitMQ HTTP API with proper URI handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_18\n\nLANGUAGE: nginxconf\nCODE:\n```\nlocation / {\n    proxy_pass http://rabbitmq-host:15672;\n}\n\nlocation ~* /rabbitmq/api/(.*?)/(.*) {\n    proxy_pass http://rabbitmq-host:15672/api/$1/%2F/$2?$query_string;\n}\n\nlocation ~* /rabbitmq/(.*) {\n    rewrite ^/rabbitmq/(.*)$ /$1 break;\n    proxy_pass http://rabbitmq-host:15672;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Stream\nDESCRIPTION: Code to establish a connection to a RabbitMQ Stream server with authentication details and connection parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = await rabbit.connect({\n    hostname: \"localhost\",\n    port: 5552,\n    username: \"guest\",\n    password: \"guest\",\n    vhost: \"/\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Advertised Host and Port for Stream Protocol in RabbitMQ\nDESCRIPTION: This configuration specifies the advertised host and port information that a broker node returns when asked about the topology of streams, useful for deployments with proxies or containers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nstream.advertised_host = rabbitmq-1\nstream.advertised_port = 12345\n```\n\n----------------------------------------\n\nTITLE: Example Output for Successful TLSv1.2 Connection\nDESCRIPTION: Sample output from OpenSSL showing successful TLSv1.2 connection negotiation with the ECDHE-RSA-AES256-GCM-SHA384 cipher suite.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-AES256-GCM-SHA384\n```\n\n----------------------------------------\n\nTITLE: Listing Certificates in Windows Trust Store\nDESCRIPTION: PowerShell command to list all certificates in the Windows Root certificate store. This allows verification that certificates were correctly imported.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncertmgr -all -s Root\n\n# … snip …\n\nSelf-signed X.509 v3 Certificate\n  Serial Number: AC3F2B74ECDD9EEA00\n  Issuer Name:   CN=MyTestCA\n  Subject Name:  CN=MyTestCA\n  valid From:    25/08/2018 14:03:01\n  valid Until:   24/09/2018 14:03:01\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n```\n\n----------------------------------------\n\nTITLE: Pinging RabbitMQ Node\nDESCRIPTION: Command to check if a RabbitMQ node is up and responsive at a specific hostname.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl ping -n rabbit@hostname\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Log Rotation at a Specific Hour\nDESCRIPTION: Configuration example showing how to set up daily log file rotation at 11:00 PM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every day at 23:00 (11:00 p.m.)\nlog.file.rotation.date = $D23\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Queue Replicas in RabbitMQ\nDESCRIPTION: Command to rebalance queue leader replicas across cluster nodes. Supports different queue types (all, quorum, classic, stream) with vhost and queue pattern matching.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-queues.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance \"all\" --vhost-pattern \"a-vhost\" --queue-pattern \".*\"\n```\n\n----------------------------------------\n\nTITLE: Shrinking Quorum Queue Clusters in RabbitMQ\nDESCRIPTION: Command to remove queue members (replicas) from a specified node in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-queues.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues shrink \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Forced Removal of Unknown Nodes in RabbitMQ Cluster\nDESCRIPTION: Configuration setting to forcefully remove cluster members that are unknown to the peer discovery backend. This setting should be used with great care as removed nodes won't be able to rejoin the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\n# Forcefully remove cluster members unknown to the peer discovery backend. Once removed,\n# the nodes won't be able to rejoin. Use this mode with great care!\n#\n# This setting can only be used if a compatible peer discovery plugin is enabled.\ncluster_formation.node_cleanup.only_log_warning = false\n```\n\n----------------------------------------\n\nTITLE: Displaying ssl_hash Property in RabbitMQ\nDESCRIPTION: Shows the SSL hash function (e.g., \"sha\") used for a secure RabbitMQ connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\nssl_hash\n```\n\n----------------------------------------\n\nTITLE: Checking and Enabling Feature Flags in RabbitMQ\nDESCRIPTION: Command to enable all stable feature flags in RabbitMQ. This should be run both before and after upgrades to ensure all features are active.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/rolling-upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Handshake Timeout in RabbitMQ\nDESCRIPTION: Configuration for setting the TLS handshake timeout in milliseconds when TLS is enabled. This helps prevent connection failures during TLS negotiation in slower networks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nssl_handshake_timeout = 10000\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for Two Nodes via HTTP API\nDESCRIPTION: HTTP API request to set a policy that mirrors queues with names starting with \"two.\" to exactly two nodes in the cluster, with automatic synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/ha-two\n{\n  \"pattern\":\"^two\\.\",\n  \"definition\": {\n    \"ha-mode\":\"exactly\",\n    \"ha-params\":2,\n    \"ha-sync-mode\":\"automatic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Hash Functions in RabbitMQ\nDESCRIPTION: Command to list all hash functions supported by RabbitMQ encoding commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_hashes\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication with rabbitmqctl in PowerShell\nDESCRIPTION: This PowerShell command demonstrates how to use rabbitmqctl to test authentication, showing the proper syntax for handling special characters in passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat authenticate_user 'a-username' '\"a/p&assword\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Keepalives in sysctl for RabbitMQ\nDESCRIPTION: This snippet shows sysctl configuration for TCP keepalives to detect dead or unreachable TCP connections after 70 seconds. It sets the idle time, interval, and number of probes for TCP keepalive checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_keepalive_time=30\nnet.ipv4.tcp_keepalive_intvl=10\nnet.ipv4.tcp_keepalive_probes=4\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Aliases File Environment Variable in Bash\nDESCRIPTION: Sets the RABBITMQ_CLI_ALIASES_FILE environment variable to specify the location of the CLI aliases configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nexport RABBITMQ_CLI_ALIASES_FILE=/path/to/cli_aliases.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-enabled Shovel with Curl in Bash\nDESCRIPTION: This snippet demonstrates how to use curl to configure a Shovel with TLS-enabled destination URI. It sets up a connection from a non-TLS source to a TLS-enabled destination with peer verification disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note: this user's access is limited to localhost.\n#\n# In the following example, the source URI connects to `localhost` and does not use TLS\n# while the destination URI is modified to use TLS with peer verification disabled\n# for simplicity\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\": \"amqp://localhost\",\n    \"src-queue\": \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Peer Discovery Plugin\nDESCRIPTION: Command to enable a peer discovery plugin in offline mode before first node boot\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable <plugin name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s\n```\n\n----------------------------------------\n\nTITLE: Peeking Queue Messages in RabbitMQ\nDESCRIPTION: Command to view message details at a specific position in a quorum queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-queues.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues peek --vhost \"a-vhost\" \"a-queue\" \"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging Level in RabbitMQ\nDESCRIPTION: Configuration examples for enabling debug logging to file and console output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = debug\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = debug\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = debug\n\nlog.connection.level = info\nlog.channel.level = info\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing Algorithm in Erlang for RabbitMQ\nDESCRIPTION: To add a new password hashing algorithm to RabbitMQ, implement the rabbit_password_hashing.erl behavior. This requires defining a hash/1 function to provide custom password hashing functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2015-12-28-whats-new-in-rabbitmq-3-6-0/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nrabbit_password_hashing.erl\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Virtual Host in RabbitMQ\nDESCRIPTION: This snippet shows how to configure the default virtual host in the rabbitmq.conf file. It sets the default_vhost to the root ('/') virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndefault_vhost = /\n```\n\n----------------------------------------\n\nTITLE: Classic Format LDAP Configuration\nDESCRIPTION: Complete LDAP configuration using classic config format combining authentication and authorization settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_37\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},\n  {rabbitmq_auth_backend_ldap,\n   [ {servers,               [\"my-ldap-server\"]},\n     {user_dn_pattern,       \"cn=${username},ou=People,dc=example,dc=com\"},\n     {use_ssl,               false},\n     {port,                  389},\n     {log,                   false},\n     {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}\n            ]\n     }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n   ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ Server\nDESCRIPTION: Command to build the RabbitMQ server and all included plugins using GNU Make after changing to the rabbitmq directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/build-server.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rabbitmq\nmake\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions in RabbitMQ\nDESCRIPTION: Sets user topic permissions for a specific exchange in a virtual host. This command allows user 'janeway' to publish and consume messages with routing keys starting with 'janeway-' on the 'amq.topic' exchange in 'my-vhost'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic \"^janeway-.*\" \"^janeway-.*\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Hostname Verification with Java RabbitMQ Client\nDESCRIPTION: Java example demonstrating how to enable hostname verification when connecting to RabbitMQ via TLS. This ensures the server certificate was issued for the hostname the client is connecting to, providing an additional layer of security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      // this connection will both perform peer verification\n      // and server hostname verification\n      Connection conn = factory.newConnection();\n\n      // snip ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-origin Resource Sharing with Specific Origins in RabbitMQ Management\nDESCRIPTION: Sets up Cross-Origin Resource Sharing (CORS) by whitelisting specific origins that are allowed to access the management UI API from different domains.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = https://origin1.org\nmanagement.cors.allow_origins.2 = https://origin2.org\n```\n\n----------------------------------------\n\nTITLE: Applying Federation Policy for All Upstreams in Bash\nDESCRIPTION: This command sets a policy to apply all federation upstreams to exchanges or queues with names starting with 'federated.'\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream-set\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP FIN Timeout in Linux\nDESCRIPTION: This snippet shows how to set the TCP FIN timeout to 30 seconds in Linux. This can help reduce the amount of time connections spend in the TIME_WAIT state, which is beneficial in high connection churn scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_fin_timeout = 30\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queue Statistics\nDESCRIPTION: This command provides detailed statistics about RabbitMQ queues, including their type, message counts, and state. It's useful for monitoring the health and status of queues after operations or troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_11\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet \\\n    name type messages messages_ready messages_unacknowledged state\n```\n\n----------------------------------------\n\nTITLE: Activating Console Logging in RabbitMQ\nDESCRIPTION: This configuration snippet enables logging to the console (standard output) in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\n```\n\n----------------------------------------\n\nTITLE: Clean Connection Closure Log Example\nDESCRIPTION: Example log entry showing a gracefully closed AMQP connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n2018-06-17 06:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')\n```\n\n----------------------------------------\n\nTITLE: LDAP as Exclusive Auth Backend in advanced.config Format\nDESCRIPTION: Erlang format configuration for using LDAP as the only authentication and authorization backend. This is the equivalent of the ini-style configuration but using advanced.config format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  {auth_backends, [rabbit_auth_backend_ldap]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Managing Vhost-Scoped Parameters via RabbitMQ HTTP API\nDESCRIPTION: HTTP API endpoints for managing vhost-scoped parameters in RabbitMQ. These endpoints allow setting, deleting, and retrieving parameters tied to specific virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/parameters/{component_name}/{vhost}/{name}\nDELETE /api/parameters/{component_name}/{vhost}/{name}\nGET /api/parameters\n```\n\n----------------------------------------\n\nTITLE: Deleting Durable Subscription in STOMP\nDESCRIPTION: STOMP frame example demonstrating how to permanently delete a durable subscription.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nUNSUBSCRIBE\nid:1234\ndurable:true\nauto-delete:false\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Mono System-Wide Trust Store on Linux\nDESCRIPTION: Bash command to add a certificate to the Mono system-wide Trust certificate store on Linux. This makes the certificate available to all users on the machine.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -add -c -m Trust /path/to/cacert.cer\n```\n\n----------------------------------------\n\nTITLE: Force Resetting Node\nDESCRIPTION: Deprecated command that forcefully returns a RabbitMQ node to its virgin state, regardless of current database state and cluster configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl force_reset\n```\n\n----------------------------------------\n\nTITLE: Executing cURL Request with JWT Token for RabbitMQ Management API\nDESCRIPTION: This command launches a browser with the mgt_api_client credentials and a JWT token to access the RabbitMQ management API overview.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-uaa url=http://localhost:15672/api/overview client_id=mgt_api_client secret=mgt_api_client\n```\n\n----------------------------------------\n\nTITLE: LDAP Other Bind Configuration in INI Format\nDESCRIPTION: Configuration for LDAP binding credentials used in authorization queries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.other_bind.user_dn = a-username\nauth_ldap.other_bind.password = a-password\n```\n\n----------------------------------------\n\nTITLE: Secure OAuth2 Authentication with TLS in RabbitMQ .NET Client\nDESCRIPTION: Shows how to configure OAuth2 authentication with TLS support for production environments, including custom HTTP client handler configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nHttpClientHandler httpClientHandler = buildHttpClientHandlerWithTLSEnabled();\n\nvar tokenEndpointUri = new Uri(\"https://somedomain.com/token\");\n\nvar oAuth2ClientBuilder = new OAuth2ClientBuilder(\"client_id\", \"client_secret\", tokenEndpointUri)\noAuth2ClientBuilder.SetHttpClientHandler(httpClientHandler);\nvar oAuth2Client = await oAuth2ClientBuilder.BuildAsync();\n\nICredentialsProvider credentialsProvider = new OAuth2ClientCredentialsProvider(\"prod-uaa-1\", oAuth2Client);\n\nvar connectionFactory = new ConnectionFactory\n{\n  CredentialsProvider = credentialsProvider\n};\nvar connection = await connectionFactory.CreateConnectionAsync();\n```\n\n----------------------------------------\n\nTITLE: Listing Queues\nDESCRIPTION: Shows how to list queues across all virtual hosts or in a specific virtual host. These commands display information about existing queues in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list queues\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"monitoring\" list queues\n```\n\n----------------------------------------\n\nTITLE: Using RPC Client in Ruby with RabbitMQ\nDESCRIPTION: Example showing how to use a simple RPC client class to request Fibonacci calculations. The client exposes a call method that sends the request and waits for the response.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclient = FibonacciClient.new('rpc_queue')\n\nputs ' [x] Requesting fib(30)'\nresponse = client.call(30)\n\nputs \" [.] Got #{response}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Stack IPv4/IPv6 Listeners\nDESCRIPTION: Sets up RabbitMQ to listen on both IPv4 and IPv6 localhost interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 127.0.0.1:5672\nlisteners.tcp.2 = ::1:5672\n```\n\n----------------------------------------\n\nTITLE: Publishing to a Named Exchange in Objective-C\nDESCRIPTION: Demonstrates how to publish a message to a named fanout exchange instead of the default exchange. This allows for broadcasting messages to multiple consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-objectivec.md#2025-04-09_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQExchange *x = [ch fanout:@\"logs\"];\n[x publish:[msg dataUsingEncoding:NSUTF8StringEncoding]];\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Queue Leaders in Bash\nDESCRIPTION: Command to redistribute queue and stream leader replicas across all cluster nodes. Useful after a rolling upgrade to ensure even distribution of load.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance all\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Work Queue in Go\nDESCRIPTION: This code snippet demonstrates how to publish messages to a RabbitMQ work queue with a persistent delivery mode. The message body is obtained from command line arguments, allowing for arbitrary task descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nbody := bodyFrom(os.Args)\nerr = ch.PublishWithContext(ctx,\n  \"\",           // exchange\n  q.Name,       // routing key\n  false,        // mandatory\n  false,\n  amqp.Publishing {\n    DeliveryMode: amqp.Persistent,\n    ContentType:  \"text/plain\",\n    Body:         []byte(body),\n  })\nfailOnError(err, \"Failed to publish a message\")\nlog.Printf(\" [x] Sent %s\", body)\n```\n\n----------------------------------------\n\nTITLE: Checking Log Location in Shell\nDESCRIPTION: Command to query the current log file location using rabbitmq-diagnostics CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q log_location\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat -q log_location\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmq-diagnostics.bat -q log_location\n```\n\n----------------------------------------\n\nTITLE: Listing Exchanges in rabbitmqadmin\nDESCRIPTION: These commands demonstrate how to list exchanges, including listing exchanges in a specific virtual host using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list exchanges\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" list exchanges\n```\n\n----------------------------------------\n\nTITLE: Removing Node from RabbitMQ Cluster\nDESCRIPTION: Series of commands to safely remove a node from a RabbitMQ cluster by stopping the application, resetting the node, and restarting it as a standalone instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/clustering.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Stop RabbitMQ without stopping the runtime (its OS process).\nrabbitmqctl stop_app\n\n# Reset it.\nrabbitmqctl reset\n\n# Restart the node as a blank one.\nrabbitmqctl start_app\n```\n\n----------------------------------------\n\nTITLE: Setting Combined Federation and TTL Policy in RabbitMQ via Bash\nDESCRIPTION: Uses rabbitmqctl to set a policy that combines federation and message TTL settings for queues with names starting with 'tf.', setting both federation upstreams and a 60-second message TTL with priority 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy ttl-fed \\\n    \"^tf\\.\" '{\"federation-upstream-set\":\"all\", \"message-ttl\":60000}' \\\n    --priority 1 \\\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Setting User Limits via HTTP API\nDESCRIPTION: This HTTP API endpoint is used to set user limits. It requires the username and limit type in the URL, with the limit value in the request body.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/user-limits/{username}/{limit}\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Expression Password Validator in RabbitMQ\nDESCRIPTION: Configuration example for setting up a credential validator that uses a regular expression to validate passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/passwords.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ncredential_validator.validation_backend = rabbit_credential_validator_password_regexp\ncredential_validator.regexp = ^[a-bA-Z0-9$]{20,100}\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding using POST /api/bindings/{vhost}/e/{exchange}/q/{queue}\nDESCRIPTION: This JSON payload is used to bind a queue to an exchange. It includes an optional routing key and additional arguments for the binding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routing_key\": \"my_routing_key\",\n  \"arguments\": {\"x-optional-arg\": \"optional-value\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the properties field in AMQP 1.0 flow frame\nDESCRIPTION: XML definition of the properties field in AMQP 1.0 flow frame. The properties field allows carrying application-specific link state properties, providing extensibility to the flow control mechanism.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"properties\" type=\"fields\"/>\n```\n\n----------------------------------------\n\nTITLE: Login Session Timeout Configuration\nDESCRIPTION: Sets the web UI login session timeout duration in minutes\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.login_session_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 SASL Authentication Options\nDESCRIPTION: Valid SASL authentication options for AMQP 1.0 connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_14\n\nLANGUAGE: code\nCODE:\n```\nanon\nnone\nplain\n```\n\n----------------------------------------\n\nTITLE: Running the Producer\nDESCRIPTION: Command to run the send.exs script using Mix with expected output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmix run send.exs\n# => [x] Sent 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener with Specific IP\nDESCRIPTION: Demonstrates how to configure AMQP listener to use a specific IP address and the standard port 5672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 192.168.1.99:5672\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Mono Trust Certificate Store\nDESCRIPTION: Bash command to add a CA certificate to the Mono Trust certificate store using the certmgr tool on Linux systems. This enables .NET applications on Mono to trust servers presenting certificates signed by this CA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -add -c Trust /path/to/cacert.cer\n```\n\n----------------------------------------\n\nTITLE: Viewing RabbitMQ Service Logs\nDESCRIPTION: Commands for inspecting RabbitMQ service logs using journalctl on systemd-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Setting queue-length Delete Mode for AMQP 0-9-1 Shovel Auto-deletion\nDESCRIPTION: The queue-length delete mode causes the shovel to measure the initial source queue length and delete itself after transferring that exact number of messages. Useful for one-time queue transfers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nqueue-length\n```\n\n----------------------------------------\n\nTITLE: Queue Declaration Example with rabbitmqadmin v2\nDESCRIPTION: Example of declaring a queue using rabbitmqadmin v2 with its --snake-case argument format. This shows the current syntax for creating a durable quorum queue in a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n# Note: --auto-delete\nrabbitmqadmin --vhost \"vh-2\" declare queue --name \"qq.1\" --type \"quorum\" --durable true --auto-delete false\n```\n\n----------------------------------------\n\nTITLE: Manual Package Installation with Dependencies\nDESCRIPTION: Script for manually installing RabbitMQ using dpkg, including dependency installation and package download.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# sync package metadata\nsudo apt-get update\n# install dependencies manually\nsudo apt-get -y install logrotate init-system-helpers adduser\n\n# download the package\nsudo apt-get -y install wget\nwget ${RabbitMQServerPackageURL({packageType: 'debian'})}\n\n# install the package with dpkg\nsudo dpkg -i ${RabbitMQServerPackageFilename({packageType: 'debian'})}\n\nrm ${RabbitMQServerPackageFilename({packageType: 'debian'})}\n```\n\n----------------------------------------\n\nTITLE: Displaying TLS Certificates in RabbitMQ with Bash\nDESCRIPTION: Command to display TLS certificates for every listener on the target RabbitMQ node that is configured to use TLS. This helps with troubleshooting SSL/TLS configuration issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics certificates\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Configuration - Classic Erlang Format\nDESCRIPTION: Example of TLS configuration using the classic Erlang terms format, showing SSL version and certificate settings configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-05-whats-new-in-rabbitmq-3-7/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n[\n    {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\n    {rabbit, [\n            {ssl_listeners, [5671]},\n            {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                            {certfile,  \"/path/to/server_certificate.pem\"},\n                            {keyfile,   \"/path/to/server_key.pem\"},\n                            {versions, ['tlsv1.2', 'tlsv1.1']}\n                            ]}\n            ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Increasing Initial Frame Size in rabbitmq.conf for OAuth 2.0 JWT Tokens\nDESCRIPTION: Configuration example that increases the initial frame size limit to 8192 bytes (from the default of 4096 bytes) to accommodate larger JWT tokens in the AMQP connection handshake.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-oauth2.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ninitial_frame_max = 8192\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Connection Idle Timeout\nDESCRIPTION: Configuration for setting the idle timeout of LDAP connections in the pool. Connections without activity will be closed after this period to free up resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\nauth_ldap.connection_pool_size = 256\n# 300 seconds in milliseconds\nauth_ldap.idle_timeout = 300000\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell version of the federation upstream configuration command with proper escaping for Windows environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-exchanges/index.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream origin '\"{\"\"uri\":\"\"amqp://remote-host.local:5672\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cipher Suites (New Style Config)\nDESCRIPTION: This snippet demonstrates how to configure TLS options including cipher suites in the new style RabbitMQ configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.versions.1 = tlsv1.2\n\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = false\n\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n\n# these MUST be disabled if TLSv1.3 is used\nssl_options.honor_cipher_order = true\nssl_options.honor_ecc_order    = true\n```\n\n----------------------------------------\n\nTITLE: Setting Reconnection Delay\nDESCRIPTION: Configures the delay duration in seconds before attempting to reconnect after a connection failure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n{reconnect_delay, 5}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raft Segment File Entry Count for Small Messages in RabbitMQ\nDESCRIPTION: This configuration increases the number of Raft log entries allowed in a segment file, which can be beneficial for workloads with small messages and higher message rates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n# Positive values up to 65535 are allowed, the default is 4096.\n# This value is reasonable for workloads with small (say, smaller than 8 kiB) messages\nraft.segment_max_entries = 32768\n```\n\n----------------------------------------\n\nTITLE: Stream Status Check Command Example\nDESCRIPTION: Example command showing how to check the status of a stream in a specific virtual host using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams stream_status --vhost \"a-vhost\" \"a-stream\"\n```\n\n----------------------------------------\n\nTITLE: Running MQTT Latency Benchmark for QoS 0\nDESCRIPTION: Command to run the mqtt-bm-latency benchmark tool for QoS 0 messages. It simulates 100 publisher-subscriber pairs sending 10,000 messages each with no delivery guarantees.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-21-native-mqtt/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./mqtt-bm-latency -clients 100 -count 10000 -pubqos 0 -subqos 0 -size 100 -keepalive 120 -topic t\n```\n\n----------------------------------------\n\nTITLE: Running the Consumer Example for RabbitMQ Streams\nDESCRIPTION: Shell command to run the consumer application using Maven. This will read all messages from the RabbitMQ stream without removing them, allowing for multiple reads of the same data.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.FirstApplication$Consume'\n```\n\n----------------------------------------\n\nTITLE: Stream Status Check Command Example\nDESCRIPTION: Example command showing how to check the status of a stream in a specific virtual host using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams stream_status --vhost \"a-vhost\" \"a-stream\"\n```\n\n----------------------------------------\n\nTITLE: Stream Status Check Command Example\nDESCRIPTION: Example command showing how to check the status of a stream in a specific virtual host using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams stream_status --vhost \"a-vhost\" \"a-stream\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS Firewall for Erlang CLI Tools\nDESCRIPTION: Commands to allow Erlang CLI tools and shell to bind to ports and accept inbound connections through the MacOS Application Firewall. These commands add and unblock the Erlang runtime in the firewall rules.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Virtual Host Definitions\nDESCRIPTION: Command to import modified definitions into a new virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-02-quorum-queues-migration/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqadmin import -V NEW_VHOST NEW_VHOST.json\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics for Authentication Attempts (Plaintext)\nDESCRIPTION: Example Prometheus metrics output for authentication attempts in RabbitMQ. This includes total attempts, successful attempts, and failed attempts for the AMQP 0-9-1 protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-03-01-auth-attempts-metrics/index.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE rabbitmq_auth_attempts_total counter\n# HELP rabbitmq_auth_attempts_total Total number of authorization attempts\nrabbitmq_auth_attempts_total{protocol=\"amqp091\"} 2\n# TYPE rabbitmq_auth_attempts_succeeded_total counter\n# HELP rabbitmq_auth_attempts_succeeded_total Total number of successful authentication attempts\nrabbitmq_auth_attempts_succeeded_total{protocol=\"amqp091\"} 0\n# TYPE rabbitmq_auth_attempts_failed_total counter\n# HELP rabbitmq_auth_attempts_failed_total Total number of failed authentication attempts\nrabbitmq_auth_attempts_failed_total{protocol=\"amqp091\"} 2\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Queue Name for Topic Subscription\nDESCRIPTION: STOMP frame example showing how to provide a custom queue name when subscribing to a topic destination by using the x-queue-name header. This overrides the default generated queue name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_14\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/topic/alarms\nx-queue-name:my-alarms-queue\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Handshake Timeout Configuration\nDESCRIPTION: AMQP handshake timeout configuration in milliseconds\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 10000\n```\n\nLANGUAGE: ini\nCODE:\n```\nssl_handshake_timeout = 5000\n```\n\n----------------------------------------\n\nTITLE: Opening a Channel in .NET with RabbitMQ\nDESCRIPTION: This code shows how to open a new channel (called 'model' in the .NET client) after establishing a connection to RabbitMQ using the .NET client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\nvar conn = cf.newConnection();\n\n// the .NET client calls channels \"models\"\nvar ch = conn.CreateModel();\n\n// ... use the channel to declare topology, publish, consume\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Prometheus Metrics Endpoint\nDESCRIPTION: cURL command to fetch metrics from the RabbitMQ Prometheus plugin's HTTP endpoint. The plugin serves metrics on port 15692 by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl {hostname}:15692/metrics\n```\n\n----------------------------------------\n\nTITLE: Querying Queue Information in RabbitMQ using list_queues\nDESCRIPTION: Example command showing how to list messages and consumers for queues in a specific virtual host. The command displays queue metrics for the virtual host 'my-vhost'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues -p my-vhost messages consumers\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Log Rotation\nDESCRIPTION: Configuration settings for log rotation based on file size (10 MiB) with retention of 5 archived files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# rotate when the file reaches 10 MiB\nlog.file.rotation.size = 10485760\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n```\n\n----------------------------------------\n\nTITLE: Setting up a Publishing Loop with Confirmations in RabbitMQ Streams\nDESCRIPTION: Java code skeleton for publishing messages to a stream in a loop, using a CountDownLatch to wait for publish confirmations before proceeding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nint messageCount = 1_000_000;\nCountDownLatch confirmLatch = new CountDownLatch(messageCount);\nIntStream.range(0, messageCount).forEach(i -> {\n    // send one message\n});\nboolean done = confirmLatch.await(1, TimeUnit.MINUTES);\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Overflow Policy on Windows\nDESCRIPTION: Windows-specific command to set queue overflow policy using rabbitmqctl.bat with proper escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/maxlength/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy my-pol \"^two-messages$\" ^\n  \"{\"\"max-length\"\":2,\"\"overflow\"\":\"\"reject-publish\"\"}\" ^\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for OAuth 2.0 in RabbitMQ (INI)\nDESCRIPTION: Example of configuring TLS options for OAuth 2.0 connections in RabbitMQ, such as specifying a CA certificate file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.https.cacertfile = /opts/certs/cacert.pem\n```\n\n----------------------------------------\n\nTITLE: Setting a Federation Policy in RabbitMQ via Bash\nDESCRIPTION: Uses rabbitmqctl to set a policy named 'federate-me' that applies to exchanges with names starting with 'federated.' and configures them to use all federation upstreams with priority 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me \\\n    \"^federated\\.\" '{\"federation-upstream-set\":\"all\"}' \\\n    --priority 1 \\\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Partial Installation Script for RabbitMQ on Ubuntu 22.04\nDESCRIPTION: The beginning of a shell script for installing RabbitMQ on Ubuntu 22.04 (Jammy). This snippet shows the first steps of adding GPG keys but is incomplete in the original content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nsudo apt-get install curl gnupg apt-transport-https -y\n\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Acceptors in RabbitMQ\nDESCRIPTION: Default configuration for the number of Erlang processes that will accept connections for TCP listeners.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.tcp = 10\n```\n\n----------------------------------------\n\nTITLE: JSON File Logging Configuration\nDESCRIPTION: Configures file logging to use JSON format with info level.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\nlog.file.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Implementing Semaphore Access in RabbitMQ with Java\nDESCRIPTION: This code shows how a process can access a semaphore in RabbitMQ. It sets up a consumer with a prefetch count of 1, consumes messages from the semaphore queue without acknowledging, and implements a mechanism to release the semaphore when needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-02-19-distributed-semaphores-with-rabbitmq/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nQueueingConsumer consumer = new QueueingConsumer(channel);\nchannel.basicQos(1);\nchannel.basicConsume(\"resource.semaphore\", false, consumer);\n\nwhile (true) {\n  QueueingConsumer.Delivery delivery = consumer.nextDelivery();\n\n  // here we access the resource controlled by the semaphore.  \n\n  if(shouldStopProcessing()) {\n    channel.basicReject(delivery.getEnvelope().getDeliveryTag(), true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in OpenSSL Format (RabbitMQ CLI)\nDESCRIPTION: This command uses rabbitmq-diagnostics to list cipher suites supported by the Erlang runtime in OpenSSL format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl -q\n```\n\n----------------------------------------\n\nTITLE: Clearing Connection Limits for a Virtual Host in RabbitMQ\nDESCRIPTION: Command to clear (remove) the maximum number of connections limit for the 'qa_env' virtual host by setting it to -1, which means 'no limit'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": -1}'\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Configuration File Environment Variables\nDESCRIPTION: Environment variable declarations to override default configuration file locations for rabbitmq.conf, advanced.config, and rabbitmq-env.conf files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n# overrides primary config file location\nRABBITMQ_CONFIG_FILE=/path/to/a/custom/location/rabbitmq.conf\n\n# overrides advanced config file location\nRABBITMQ_ADVANCED_CONFIG_FILE=/path/to/a/custom/location/advanced.config\n\n# overrides environment variable file location\nRABBITMQ_CONF_ENV_FILE=/path/to/a/custom/location/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Removing an Unresponsive Node from RabbitMQ Cluster\nDESCRIPTION: Command to permanently remove an unresponsive node (rabbit2) from a RabbitMQ cluster using the forget_cluster_node command from another node (rabbit1).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Tell rabbit@rabbit1 to permanently remove rabbit@rabbit2\nrabbitmqctl forget_cluster_node -n rabbit@rabbit1 rabbit@rabbit2\n# => Removing node rabbit@rabbit1 from cluster ...\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Stream Plugins\nDESCRIPTION: Docker exec command to enable the RabbitMQ stream and stream management plugins in a running container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/TutorialsStreamHelp.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream rabbitmq_stream_management\n```\n\n----------------------------------------\n\nTITLE: Declaring a Feature Flag in Erlang\nDESCRIPTION: Example of how to declare a feature flag as a module attribute in Erlang. This declaration includes a description, documentation URL, stability status, and migration function reference.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n-rabbit_feature_flag(\n   {quorum_queue,\n    #{desc          => \"Support queues of type quorum\",\n      doc_url       => \"https://www.rabbitmq.com/docs/quorum-queues\",\n      stability     => stable,\n      migration_fun => {?MODULE, quorum_queue_migration}\n     }}).\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for AMQP Protocol Requirements\nDESCRIPTION: HTML table structure documenting AMQP protocol requirements and their implementation status in RabbitMQ server. Includes status indicators, requirement levels (MUST, SHOULD, etc.), and detailed descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/specification.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"statusCell status_ok\">ok</td>\n    <td>MUST</td>\n    <td>server</td>\n    <td>basic / recover-async / 01</td>\n    <td>\n        <div>\n            The server MUST set the redelivered flag on all messages that are resent.\n        </div>\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Shovels via HTTP API\nDESCRIPTION: cURL commands to interact with RabbitMQ Shovel HTTP API endpoints for listing and inspecting shovels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-dynamic.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/%2f\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/vhost/%2f/my-shovel\n```\n\n----------------------------------------\n\nTITLE: Declaring a Direct Exchange in PHP\nDESCRIPTION: This code demonstrates how to declare a direct exchange in RabbitMQ using PHP and the php-amqplib library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-php.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$channel->exchange_declare('direct_logs', 'direct', false, false, false);\n```\n\n----------------------------------------\n\nTITLE: TCP Buffer Configuration for AMQP\nDESCRIPTION: TCP listener options configuration for AMQP connections with optimized buffer sizes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on      = true\ntcp_listen_options.linger.timeout = 0\ntcp_listen_options.sndbuf = 196608\ntcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Queue Name for Topic Subscription\nDESCRIPTION: STOMP frame example showing how to provide a custom queue name when subscribing to a topic destination by using the x-queue-name header. This overrides the default generated queue name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_14\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/topic/alarms\nx-queue-name:my-alarms-queue\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Acceptors in RabbitMQ\nDESCRIPTION: Default configuration for the number of Erlang processes that will accept connections for TCP listeners.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nnum_acceptors.tcp = 10\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Enabled Plugins File Content\nDESCRIPTION: Shows the content of the RabbitMQ enabled_plugins file, which lists the names of currently enabled plugins. This file is typically managed by RabbitMQ or rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[rabbitmq_management,rabbitmq_management_agent,rabbitmq_shovel].\n```\n\n----------------------------------------\n\nTITLE: Allowing Basic Auth alongside OAuth 2.0 in Management UI\nDESCRIPTION: Configuration to allow both basic authentication and OAuth 2.0 authentication methods in the RabbitMQ management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n...\nmanagement.oauth_disable_basic_auth = false\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queues for MQTT Durable Subscriptions in RabbitMQ\nDESCRIPTION: A configuration example for enabling quorum queues to handle MQTT client durable subscriptions. This setting must only be enabled for new clusters before any clients declare durable subscriptions to prevent failures due to queue type mismatches.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# must ONLY be enabled for new clusters before any clients declare durable subscriptions\nmqtt.durable_queue_type = quorum\n```\n\n----------------------------------------\n\nTITLE: Security Headers Configuration\nDESCRIPTION: Sets various security-related HTTP headers including content type options, XSS protection, and frame options\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.headers.content_type_options = nosniff\nmanagement.headers.xss_protection = 1; mode=block\nmanagement.headers.frame_options = DENY\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.hsts.policy = max-age=31536000; includeSubDomains\nmanagement.csp.policy = default-src 'self'; script-src 'self' 'unsafe-eval'\n\nmanagement.headers.content_type_options = nosniff\nmanagement.headers.xss_protection = 1; mode=block\nmanagement.headers.frame_options = DENY\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Policy via HTTP API\nDESCRIPTION: HTTP API request to set an operator policy for queues with names starting with 'amq.' to expire after 1800000 milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/operator-policies/%2f/transient-queue-ttl\n                {\"pattern\": \"^amq\\.\",\n                 \"definition\": {\"expires\": 1800000},\n                 \"priority\": 1,\n                 \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Setting User Limits via HTTP API in RabbitMQ\nDESCRIPTION: This curl command demonstrates how to set a user limit (max-connections) to 20 using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/user-limits.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-connections \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": 20\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory-based Import with Skip-if-Unchanged\nDESCRIPTION: Configuration for importing definitions from a directory with the optimization to skip import if contents haven't changed. This allows for organizing definitions in multiple files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/conf.d/\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Namespace for RabbitMQ Cluster Formation\nDESCRIPTION: Sets the path to the file containing the Kubernetes namespace. This allows RabbitMQ to operate within the correct namespace for peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\n# ...\n\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/namespace\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Asynchronous Notification in AMQP 1.0\nDESCRIPTION: ASCII diagram illustrating asynchronous notification in AMQP 1.0. The receiver grants multiple credits, allowing the sender to transfer multiple messages without waiting for each individual acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nReceiver                                          Sender\n=====================================================================\n                                      ...\n                                  <----------     transfer(...)\n                                  <----------     transfer(...)\nflow(link-credit=delta)           ---+   +---     transfer(...)\n                                      \\ /\n                                       x\n                                      / \\\n                                  <--+   +-->\n                                  <----------     transfer(...)\n                                  <----------     transfer(...)\nflow(link-credit=delta)           ---+   +---     transfer(...)\n                                      \\ /\n                                       x\n                                      / \\\n                                  <--+   +-->\n                                      ...\n---------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Domain Content Security Policy in RabbitMQ Management\nDESCRIPTION: Sets a Content Security Policy (CSP) header with a wildcard domain pattern, allowing resources from any subdomain within the specified domain.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = default-src 'self' *.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Running MQTT Latency Benchmark for QoS 1\nDESCRIPTION: Command to run the mqtt-bm-latency benchmark tool for QoS 1 messages. It simulates 100 publisher-subscriber pairs sending 10,000 messages each.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-21-native-mqtt/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mqtt-bm-latency -clients 100 -count 10000 -pubqos 1 -subqos 1 -size 100 -keepalive 120 -topic t\n```\n\n----------------------------------------\n\nTITLE: Sample Text Log Format for RabbitMQ Tracing\nDESCRIPTION: Demonstrates the human-readable 'text' log format produced by the rabbitmq-tracing plugin. It shows examples of message publishing and receiving events, including details like node, exchange, routing keys, and payload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-09-09-rabbitmq-tracing-a-ui-for-the-firehose/index.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\n2011-9-9 10:57:24: Message published\n\nNode:         rabbit@smacmullen\nExchange:     direct\nRouting keys: [<<\"5d07bff4-1708-4a5d-87f9-a14177d6681b\">>]\nProperties:   []\nPayload: \nHello world\n\n================================================================================\n2011-9-9 10:57:24: Message received\n\nNode:         rabbit@smacmullen\nExchange:     direct\nQueue:        amq.gen-PJfnaKdg7AmsWmYTUeuApw==\nRouting keys: [<<\"5d07bff4-1708-4a5d-87f9-a14177d6681b\">>]\nProperties:   []\nPayload: \nHello world\n\n================================================================================\n```\n\n----------------------------------------\n\nTITLE: Set Federation Policy in PowerShell\nDESCRIPTION: Command to set a federation policy that matches queues with a specific prefix and configures them to use all declared upstreams in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-queues/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy queue-federation '^federated\\.' `\n    '\"{\"\"federation-upstream-set\":\"\"all\"\"}\"' `\n    --priority 10 `\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Plugin Settings in RabbitMQ\nDESCRIPTION: This configuration snippet demonstrates various MQTT plugin settings in RabbitMQ, including anonymous access, vhost, exchange, session expiry, prefetch, and retained message store configuration. It uses the DETS (disk-based) store for retained messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.allow_anonymous                     = true\nmqtt.vhost                               = /\nmqtt.exchange                            = amq.topic\nmqtt.max_session_expiry_interval_seconds = 1800\nmqtt.prefetch                            = 10\n\n## use DETS (disk-based) store for retained messages\nmqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets\n## only used by DETS store\nmqtt.retained_message_store_dets_sync_interval = 2000\n\nmqtt.listeners.ssl = none\nmqtt.listeners.tcp.default = 1883\n```\n\n----------------------------------------\n\nTITLE: HTTP API Request Body for Setting User Limits\nDESCRIPTION: This JSON object represents the request body for setting a user limit via the HTTP API. The 'value' field contains the limit value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\"value\": 20}\n```\n\n----------------------------------------\n\nTITLE: AMQP Message Requeue Commands\nDESCRIPTION: Commands related to message requeuing functionality in AMQP, including basic.recover, basic.reject, and basic.nack. These methods feature a requeue parameter for message handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/semantics.md#2025-04-09_snippet_1\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.recover\nbasic.reject\nbasic.nack\n```\n\n----------------------------------------\n\nTITLE: Listing All Deprecated Features in RabbitMQ\nDESCRIPTION: Command to list all deprecated features in RabbitMQ, regardless of whether they are in use. This provides a complete view of features that may be removed in future versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin deprecated_features list\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queues for MQTT Durable Subscriptions in RabbitMQ\nDESCRIPTION: A configuration example for enabling quorum queues to handle MQTT client durable subscriptions. This setting must only be enabled for new clusters before any clients declare durable subscriptions to prevent failures due to queue type mismatches.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# must ONLY be enabled for new clusters before any clients declare durable subscriptions\nmqtt.durable_queue_type = quorum\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol for Web STOMP\nDESCRIPTION: INI configuration to enable the proxy protocol for the Web STOMP plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Match Query in RabbitMQ LDAP Authentication\nDESCRIPTION: Structure for match query that compares a string with a regular expression. Both the string and regular expression are subqueries that can include variable substitutions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_23\n\nLANGUAGE: erlang\nCODE:\n```\n{match, StringSubQuery, RESubQuery}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple User Limits via CLI\nDESCRIPTION: This command sets both the maximum connections and maximum channels limits for a user using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits guest '{\"max-connections\": 10, \"max-channels\": 20}'\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Analysis for AMQP 1.0 in RabbitMQ 3.13\nDESCRIPTION: Erlang shell output showing memory statistics and process count for RabbitMQ 3.13's AMQP 1.0 implementation. Demonstrates higher memory usage of 12GB with approximately 1.48M processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n1> erlang:memory().\n[{total,12066294144},\n {processes,11156497904},\n {processes_used,11156461208},\n {system,909796240},\n {atom,1089809},\n {atom_used,1062780},\n {binary,192784464},\n {code,22068126},\n {ets,318872128}]\n\n2> erlang:system_info(process_count).\n1480318\n```\n\n----------------------------------------\n\nTITLE: Cloning RabbitMQ Repositories for Java Client Development\nDESCRIPTION: Commands to clone the RabbitMQ code generation repository and Java client repository. The code generation repository is a dependency required for building the Java client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-java-client.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-codegen.git rabbitmq_codegen\ngit clone https://github.com/rabbitmq/rabbitmq-java-client.git\n```\n\n----------------------------------------\n\nTITLE: Console Logging with Unix Epoch Timestamps\nDESCRIPTION: Configures console logging with Unix epoch microseconds timestamp format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n\n# use microseconds since UNIX epoch for timestamp format\nlog.console.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Providers in RabbitMQ\nDESCRIPTION: This configuration snippet demonstrates how to set up multiple OAuth 2.0 providers for RabbitMQ authentication. It defines two resource servers (prod and dev) with their respective OAuth providers, including issuer URLs and certificate files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.1.oauth_provider_id = prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.2.oauth_provider_id = dev\nauth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.\n\nauth_oauth2.oauth_providers.prod.issuer = https://rabbit_prod:8080\nauth_oauth2.oauth_providers.prod.https.cacertfile = /opts/certs/prod.pem\nauth_oauth2.oauth_providers.dev.issuer = https://rabbit_dev:8080\nauth_oauth2.oauth_providers.dev.https.cacertfile = /opts/certs/dev.pem\n```\n\n----------------------------------------\n\nTITLE: Verifying TLSv1.2 Connection with OpenSSL\nDESCRIPTION: Command to verify TLSv1.2 connection to a RabbitMQ server using openssl s_client tool with the appropriate TLS version flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# connect using TLSv1.2\nopenssl s_client -connect 127.0.0.1:5671 -tls1_2\n```\n\n----------------------------------------\n\nTITLE: Console Logging with Unix Epoch Timestamps\nDESCRIPTION: Configures console logging with Unix epoch microseconds timestamp format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n\n# use microseconds since UNIX epoch for timestamp format\nlog.console.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Renegotiation for RabbitMQ TLS Connections\nDESCRIPTION: This snippet demonstrates how to enable secure renegotiation for RabbitMQ TLS connections, which is highly recommended for enhanced security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Disk Free Limit in RabbitMQ\nDESCRIPTION: Configuration for the disk free space limit of the partition on which RabbitMQ is storing data. When available disk space falls below this limit, flow control is triggered.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 2GB\n```\n\n----------------------------------------\n\nTITLE: Encoding Values with RabbitMQ CLI\nDESCRIPTION: Basic command for encrypting values with a passphrase\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode '<<\"guest\">>' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in RabbitMQ with Swift\nDESCRIPTION: This code shows how to declare a durable queue in RabbitMQ using Swift. The .durable option ensures the queue will survive RabbitMQ node restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet q = ch.queue(\"hello\", options: .durable)\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Configuration File Path in rabbitmq-env.conf\nDESCRIPTION: Example configuration that specifies a custom path for the RabbitMQ configuration file. Shows how to set the CONFIG_FILE variable to point to a non-default location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-env.conf.5.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# I am a complete rabbitmq-env.conf file.\n# Comment lines start with a hash character.\n# This is a /bin/sh script file - use ordinary envt var syntax\nCONFIG_FILE=/data/services/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Starting OAuth2 Proxy\nDESCRIPTION: Command to start the OAuth2 Proxy service that handles authentication flow\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-proxy.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake start-oauth2-proxy\n```\n\n----------------------------------------\n\nTITLE: Positive Acknowledgement in .NET RabbitMQ Client\nDESCRIPTION: Shows how to positively acknowledge a single delivery using the .NET client for RabbitMQ. The message will be discarded after acknowledgement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// this example assumes an existing channel (IModel) instance\n\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // positively acknowledge a single delivery, the message will\n                    // be discarded\n                    channel.BasicAck(ea.DeliveryTag, false);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Connection Architecture for Two Senders Benchmark in ASCII Diagram\nDESCRIPTION: ASCII diagram illustrating the connection architecture used in the two_senders benchmark program, showing how a single program connects to RabbitMQ using both AMQP 0.9.1 and AMQP 1.0 protocols simultaneously, with publishers sending to both classic and quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n    main.go                                                      RabbitMQ\n+-------------+                                     +----------------------------------+\n|             |        AMQP 0.9.1 connection        |                                  |\n|             |#####################################|                                  |\n|    +---+    |-------------------------------------|    +------------------------+    |\n|    | P |                                               | classic-queue-amqp-091 |    |\n|    +---+                                               +------------------------+    |\n|                        AMQP 0.9.1 channel                                            |\n|    +---+                                               +------------------------+    |\n|    | P |                                               | quorum-queue-amqp-091  |    |\n|    +---+    |-------------------------------------|    +------------------------+    |\n|             |#####################################|                                  |\n|             |                                     |                                  |\n|             |                                     |                                  |\n|             |                                     |                                  |\n|             |#####################################|                                  |\n|    +---+    |-------------------------------------|    +-----------------------+     |\n|    | P |O============================================>O| classic-queue-amqp-10 |     |\n|    +---+                                               +-----------------------+     |\n|                        AMQP 1.0 session                                              |\n|    +---+                                               +-----------------------+     |\n|    | P |O======================================+=====>O| quorum-queue-amqp-10  |     |\n|    +-+-+    |----------------------------------|--|    +-----------------------+     |\n|      |      |##################################|##|                                  |\n|      |      |        AMQP 1.0 connection       |  |                                  |\n+------|------+                                  |  +----------------------------------+\n       |                                         |\n       |                                         |\n   Publisher                               AMQP 1.0 link\n   goroutine\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP TIME_WAIT Timeout in Linux\nDESCRIPTION: This snippet shows how to reduce the TCP FIN timeout to 30 seconds to decrease the time connections spend in the TIME_WAIT state. This can help handle high connection churn.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_fin_timeout = 30\n```\n\n----------------------------------------\n\nTITLE: Publishing to Named Exchange\nDESCRIPTION: Publishes a message to the named 'logs' exchange with an empty routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-dotnet.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.BasicPublish(exchange: \"logs\",\n                     routingKey: \"\",\n                     basicProperties: null,\n                     body: body);\n```\n\n----------------------------------------\n\nTITLE: Repository Clone and Directory Navigation\nDESCRIPTION: Commands to clone the RabbitMQ server repository and navigate to the Prometheus docker directory\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server.git\ncd rabbitmq-server/deps/rabbitmq_prometheus/docker\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX Using Java Client\nDESCRIPTION: Java code example showing how to declare a queue with Dead Letter Exchange configuration using queue arguments. Sets up exchange and queue with DLX settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/dlx.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(\"some.exchange.name\", \"direct\");\n\n// Important: prefer using policies over hardcoded x-arguments\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-dead-letter-exchange\", \"some.exchange.name\");\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: TLS Versions Check\nDESCRIPTION: Command to list all supported TLS versions on the target node in quiet mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics tls_versions -q\n```\n\n----------------------------------------\n\nTITLE: Clearing Connection Limits for a User in RabbitMQ\nDESCRIPTION: Command to clear the maximum connection limit for the user 'limited_user'. This removes the specific connection limit while leaving any other limits intact.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits limited_user 'max-connections'\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Parameters in RabbitMQ (Bash)\nDESCRIPTION: Commands for setting, clearing, and listing virtual host-scoped parameters using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# sets a runtime parameter in a virtual host\nrabbitmqctl set_parameter [-p vhost] <component_name> <name> <value>\n\n# clears (unsets) a runtime parameter in a virtual host\nrabbitmqctl clear_parameter [-p vhost] <component_name> <name>\n\n# lists runtime parameters in a virtual host\nrabbitmqctl list_parameters [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Enabling rabbitmq-top Plugin for Process Monitoring\nDESCRIPTION: Command to enable the rabbitmq-top plugin, which adds functionality to monitor and identify processes that consume the most memory or CPU time. This plugin is useful for diagnosing performance issues in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] rabbitmq-plugins enable rabbitmq_top\n```\n\n----------------------------------------\n\nTITLE: Complete Classic Format Config for Network Optimization in RabbitMQ\nDESCRIPTION: Comprehensive configuration using the classic Erlang term format to optimize both kernel settings and TCP listen options for better network performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_28\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [\n    {inet_default_connect_options, [{nodelay, true}]},\n    {inet_default_listen_options,  [{nodelay, true}]}\n  ]},\n  {rabbit, [\n    {tcp_listen_options, [\n                          {backlog,       4096},\n                          {nodelay,       true},\n                          {linger,        {true,0}},\n                          {exit_on_close, false}\n                         ]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Check TLS Versions in RabbitMQ (Windows)\nDESCRIPTION: Command to check supported TLS versions in RabbitMQ on Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat --silent tls_versions\n```\n\n----------------------------------------\n\nTITLE: Running Basic RabbitMQ Diagnostics Status Command in Bash\nDESCRIPTION: Simple example of running the status command with rabbitmq-diagnostics against a default node without specifying target.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Reverse Lookup Settings\nDESCRIPTION: Configuration options for enabling or disabling reverse DNS lookups for client IP addresses in RabbitMQ. This affects how connection information is displayed in management interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nreverse_dns_lookups = true\nreverse_dns_lookups = false\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Sample Project\nDESCRIPTION: These shell commands clone the RabbitMQ Stream Single Active Consumer sample project from GitHub into the /tmp directory and navigate to the project directory for preparation to run the examples.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd /tmp\ngit clone https://github.com/acogoluegnes/rabbitmq-stream-single-active-consumer.git\ncd rabbitmq-stream-single-active-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus TCP Timeouts in RabbitMQ\nDESCRIPTION: Configuration snippet showing how to modify TCP timeouts for the Prometheus plugin in RabbitMQ. Sets idle, inactivity and request timeouts to 120 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.tcp.idle_timeout = 120000\nprometheus.tcp.inactivity_timeout = 120000\nprometheus.tcp.request_timeout = 120000\n```\n\n----------------------------------------\n\nTITLE: Changing RabbitMQ Statistics Interval at Runtime\nDESCRIPTION: This command changes the statistics collection interval to 60 seconds at runtime using rabbitmqctl. This change only affects new stats-emitting entities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'application:set_env(rabbit, collect_statistics_interval, 60000).'\n```\n\n----------------------------------------\n\nTITLE: IPv6 Configuration for RabbitMQ\nDESCRIPTION: Environment variables and configuration settings for enabling IPv6 support in RabbitMQ for inter-node communication and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# these flags will be used by RabbitMQ nodes\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-kernel inetrc '/etc/rabbitmq/erl_inetrc' -proto_dist inet6_tcp\"\n# these flags will be used by CLI tools\nRABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n%% Tells DNS client on RabbitMQ nodes and CLI tools to resolve hostnames to IPv6 addresses.\n%% The trailing dot is not optional.\n{inet6,true}.\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Installing Elixir using kiex\nDESCRIPTION: Commands to install Elixir version 1.12.3 using the kiex tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkiex install 1.12.3\nkiex use 1.12.3\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Keycloak OAuth Configuration\nDESCRIPTION: Commands to start RabbitMQ with pre-configured OAuth 2.0 settings pointing to the Keycloak server. The MODE environment variable specifies the configuration to use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=keycloak\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Clearing Connection Limits for a User in RabbitMQ\nDESCRIPTION: Command to clear the maximum connection limit for the user 'limited_user'. This removes the specific connection limit while leaving any other limits intact.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits limited_user 'max-connections'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Feature Flag Migration Function in Erlang\nDESCRIPTION: Example of a migration function for a feature flag in Erlang. This function handles both enabling the feature and checking if it's enabled, performing necessary database schema migrations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\nquorum_queue_migration(FeatureName, _FeatureProps, enable) ->\n    Tables = ?quorum_queue_tables,\n    rabbit_table:wait(Tables),\n    Fields = amqqueue:fields(amqqueue_v2),\n    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);\nquorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->\n    Tables = ?quorum_queue_tables,\n    rabbit_table:wait(Tables),\n    Fields = amqqueue:fields(amqqueue_v2),\n    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso\n    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.\n```\n\n----------------------------------------\n\nTITLE: Creating the AMQP 1.0 Environment in Java\nDESCRIPTION: Creates an Environment instance to manage connections and shared resources for AMQP 1.0 communication in Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.amqp.*;\nimport com.rabbitmq.client.amqp.impl.AmqpEnvironmentBuilder;\n\n// ...\n\n// create the environment instance\nEnvironment environment = new AmqpEnvironmentBuilder()\n    .build();\n// ...\n// close the environment when the application stops\nenvironment.close();\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Configuration File Path with Shell Command\nDESCRIPTION: Command that overrides the default configuration file path and uses a named connection profile to execute a command against a specific RabbitMQ environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n# will use the settings from the section called [staging]\nrabbitmqadmin --config $HOME/.configuration/rabbitmqadmin.conf --node staging show churn\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Message Flow with Mermaid\nDESCRIPTION: A flowchart representing a RabbitMQ setup with one producer (P) sending messages to a queue named 'hello', which is consumed by two consumers (C1 and C2) each with a prefetch value of 1. The diagram uses Mermaid syntax to define nodes, connections, and styling classes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T2DiagramPrefetch.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P)) --> Q[[hello]]\n    Q -- prefetch=1 --> C1((C1))\n    Q -- prefetch=1 --> C2((C2))\n\n    class P mermaid-producer\n    class Q mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Tracking in RabbitMQ Stream Consumer\nDESCRIPTION: C# implementation of a RabbitMQ Stream consumer with offset tracking. The consumer stores its progress every 10 messages and before closing, allowing it to resume from the last processed message when restarted. It includes offset lookup, consumer configuration, and message handling logic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumerName = \"offset-tracking-tutorial\"; // name of the consumer\nIOffsetType offsetSpecification;\ntry {\n    // get last stored offset\n    ulong storedOffset = await streamSystem.QueryOffset(consumerName, stream).ConfigureAwait(false);\n    // start just after the last stored offset\n    offsetSpecification = new OffsetTypeOffset(storedOffset + 1);\n} catch (OffsetNotFoundException) {\n    // start consuming at the beginning of the stream if no stored offset\n    offsetSpecification = new OffsetTypeFirst();\n}\nulong initialValue = UInt64.MaxValue;\nulong firstOffset = initialValue;\nint messageCount = 0; // number of received messages\nulong lastOffset = initialValue;\nvar consumedCde = new CountdownEvent(1);\nvar consumer = await Consumer.Create(new ConsumerConfig(streamSystem, stream)\n{\n    OffsetSpec = offsetSpecification,\n    Reference =  consumerName,  // the consumer must a have name\n    MessageHandler = async (_, consumer, context, message) => {\n        if (Interlocked.CompareExchange(ref firstOffset, context.Offset, initialValue) == initialValue) {\n            Console.WriteLine(\"First message received.\");\n        }\n        if (Interlocked.Increment(ref messageCount) % 10 == 0) {\n            // store offset every 10 messages\n            await consumer.StoreOffset(context.Offset).ConfigureAwait(false);\n        }\n        if (\"marker\".Equals(Encoding.UTF8.GetString(message.Data.Contents))) {\n            Interlocked.Exchange(ref lastOffset, context.Offset);\n            // store the offset on consumer closing\n            await consumer.StoreOffset(context.Offset).ConfigureAwait(false);\n            await consumer.Close();\n            consumedCde.Signal();\n        }\n        await Task.CompletedTask;\n    }\n});\nConsole.WriteLine(\"Started consuming...\");\n\nconsumedCde.Wait();\nConsole.WriteLine(\"Done consuming, first offset {0}, last offset {1}.\", firstOffset, lastOffset);\nawait streamSystem.Close();\n```\n\n----------------------------------------\n\nTITLE: Configuring an Alternate Exchange Using Java Client Arguments\nDESCRIPTION: Java code example showing how to create a direct exchange with an alternate exchange using client-provided arguments. This approach is discouraged in favor of using policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ae.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"alternate-exchange\", \"my-ae\");\nchannel.exchangeDeclare(\"my-direct\", \"direct\", false, false, args);\nchannel.exchangeDeclare(\"my-ae\", \"fanout\");\nchannel.queueDeclare(\"routed\");\nchannel.queueBind(\"routed\", \"my-direct\", \"key1\");\nchannel.queueDeclare(\"unrouted\");\nchannel.queueBind(\"unrouted\", \"my-ae\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Pika\nDESCRIPTION: Optional commands to create and activate a Python virtual environment if pip is not directly available in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Using Auto-named Queues in Ruby AMQP 0.7\nDESCRIPTION: This code demonstrates the new support for auto-named queues in AMQP 0.7. When a queue is declared with an empty name, the broker generates a random name. The callback provides access to the generated queue name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-01-19-ruby-amqp-0-7-released/index.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nchannel = MQ.new\nchannel.queue(\"\") do |queue|\n  puts \"Queue with name #{queue.name} declared!\"\nend\n\n# OUTPUT: Queue with name amq.gen-PfCGdyBA4Sr4rkZg3IN3Kw== declared!\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Plugin Not Found Error with RabbitMQ\nDESCRIPTION: Demonstrates a common error when trying to enable a plugin with a typo in its name. The error message shows the plugin not being found due to the misspelling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# note the typo\nrabbitmq-plugins enable rabbitmq_managemenr\n# => Error:\n# => {:plugins_not_found, [:rabbitmq_managemenr]}\n```\n\n----------------------------------------\n\nTITLE: Signing the RabbitMQ Key (Bash)\nDESCRIPTION: Signs the RabbitMQ key using your own GPG key to avoid trust warnings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngpg --sign-key 0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Node TLS Certificates\nDESCRIPTION: Runs the rabbitmq-diagnostics command to display TLS certificates for all listeners on the target node configured to use TLS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics certificates\n```\n\n----------------------------------------\n\nTITLE: Starting AMQP 1.0 Publisher with OAuth (Bash)\nDESCRIPTION: Command to start an AMQP 1.0 publisher application that authenticates using an OAuth token obtained from UAA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmake start-amqp1_0-publisher\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Status on Independent Nodes\nDESCRIPTION: Shows how to use the rabbitmqctl cluster_status command to verify the status of each independent node before clustering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1]}]},{running_nodes,[rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit2]}]},{running_nodes,[rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Service Address and Node Names for RabbitMQ Clustering\nDESCRIPTION: This snippet demonstrates how to configure Consul-based peer discovery for RabbitMQ, including settings for service address computation and node naming.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using the IP address of a NIC, en0\ncluster_formation.consul.svc_addr_nic = en0\ncluster_formation.consul.svc_addr_use_nodename = false\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Permissions in RabbitMQ\nDESCRIPTION: Default configuration for the permissions assigned to the default user, allowing full access to all resources by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\ndefault_permissions.configure = .*\ndefault_permissions.read = .*\ndefault_permissions.write = .*\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Routing Keys in AMQP 0.9.1\nDESCRIPTION: To use multiple routing keys in AMQP 0.9.1, the publisher sets the 'CC' and 'BCC' header keys. The value for 'CC' and 'BCC' must be an array of strings (longstr values). The message will be routed using both the routing key supplied as a parameter to the basic.publish method and the routing keys provided in the 'CC' and 'BCC' headers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/sender-selected.md#2025-04-09_snippet_1\n\nLANGUAGE: AMQP\nCODE:\n```\nheaders:\n  CC: [\"routing_key_1\", \"routing_key_2\"]\n  BCC: [\"routing_key_3\", \"routing_key_4\"]\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Service on Linux\nDESCRIPTION: This command stops the RabbitMQ server service on a Linux system. It's used before performing symlink operations for storage configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ec2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo service rabbitmq-server stop\n```\n\n----------------------------------------\n\nTITLE: Bulk Message Rejection in RabbitMQ using Java\nDESCRIPTION: Shows how to reject multiple messages with a single basicNack call by setting the multiple flag to true. This will reject all unacknowledged messages up to and including the specified delivery tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/nack.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGetResponse gr1 = channel.basicGet(\"some.queue\", false);\nGetResponse gr2 = channel.basicGet(\"some.queue\", false);\nchannel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);\n```\n\n----------------------------------------\n\nTITLE: Check Cipher Suites (Windows)\nDESCRIPTION: Command to list available cipher suites in OpenSSL format on Windows\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat cipher_suites --format openssl --silent\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Allow Remote Connections for All Users\nDESCRIPTION: This configuration disables the loopback users restriction, allowing all users (including ones with generated secure credentials) to connect from any host, not just localhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\n# user with secure generated credentials!\nloopback_users = none\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Application with rabbitmqctl\nDESCRIPTION: This command stops the RabbitMQ application while leaving the Erlang VM running. It's typically used before performing other management actions that require the RabbitMQ application to be stopped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl stop_app\n```\n\n----------------------------------------\n\nTITLE: Disabling Non-TLS Listeners for STOMP\nDESCRIPTION: Configuration to disable standard TCP listeners and only enable TLS-secured STOMP connections on port 61614, providing enhanced security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp   = none\nstomp.listeners.ssl.1 = 61614\n```\n\n----------------------------------------\n\nTITLE: Illustrating Message Flow in RabbitMQ Erlang Processes\nDESCRIPTION: This code snippet demonstrates the chain of message passing between Erlang processes within RabbitMQ when publishing messages. It shows how messages flow from the reader process through the channel and queue processes to the message store.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nreader -> channel -> queue process -> message store.\n```\n\n----------------------------------------\n\nTITLE: Clearing Parameter in RabbitMQ (Bash)\nDESCRIPTION: Clears the parameter 'node01' for the 'federation-upstream' component in the default virtual host using the rabbitmqctl command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_parameter federation-upstream node01\n```\n\n----------------------------------------\n\nTITLE: Configuring APT Preferences for Erlang Packages (Launchpad)\nDESCRIPTION: Sets up APT preferences to prioritize Erlang packages from the Launchpad repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n# /etc/apt/preferences.d/erlang\nPackage: erlang*\nPin: origin ppa.launchpad.net\n# Note: priority of 1001 (greater than 1000) allows for downgrading.\n# To make package downgrading impossible, use a value of 999\nPin-Priority: 1001\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Queue Default Version in RabbitMQ\nDESCRIPTION: This configuration setting in rabbitmq.conf sets the default version for new classic queues to version 2. Classic queues v2 are recommended for improved performance and functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-03-11-rabbitmq-3.13.0-announcement/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Enabling Peer Discovery Plugin Using RabbitMQ CLI\nDESCRIPTION: Commands demonstrating how to enable a peer discovery plugin in offline mode before first node boot using rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable <plugin name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for RabbitMQ CLI Tools in PowerShell\nDESCRIPTION: Demonstrates how to use the help command to get information about available commands for rabbitmqctl and rabbitmq-diagnostics in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat help\n\nrabbitmq-diagnostics.bat help\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Plugin Directories\nDESCRIPTION: Shows how to use the rabbitmq-plugins command to list plugin directories, including the archives directory, expansion directory, and enabled plugins file location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins directories -s\n# => Plugin archives directory: /path/to/rabbitmq/plugins\n# => Plugin expansion directory: /path/to/node/node-plugins-expand\n# => Enabled plugins file: /path/to/enabled_plugins\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits via HTTP API in RabbitMQ\nDESCRIPTION: These curl commands demonstrate how to clear user limits (max-channels and max-connections) using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/user-limits.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-channels\n\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-connections\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Service with Homebrew\nDESCRIPTION: Commands to start and stop the RabbitMQ service using Homebrew services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-homebrew.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# starts a local RabbitMQ node\nbrew services start rabbitmq\n\n# stops the locally running RabbitMQ node\nbrew services stop rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Cache Refusals Configuration\nDESCRIPTION: Configuration to enable caching of negative authentication/authorization decisions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_cache.cache_refusals = true\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Connection to RabbitMQ with Telnet (Successful Attempt)\nDESCRIPTION: Example of using telnet to test TCP connectivity to a RabbitMQ server on the standard AMQP port 5672. The connection succeeds, but the server closes it after receiving invalid protocol data. This demonstrates how to verify basic port accessibility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 5672\n# => Trying ::1...\n# => Connected to localhost.\n# => Escape character is '^]'.\n12345 # enter this and hit Enter to send\n# => AMQP\tConnection closed by foreign host.\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Client with Mix (Elixir)\nDESCRIPTION: Dependency declaration for installing the rabbit_common package using Mix package manager in Elixir projects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n{:rabbit_common, \"~> 3.11\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Firehose Tracing in RabbitMQ with CLI\nDESCRIPTION: Command to enable the Firehose tracing feature for a specified virtual host in RabbitMQ. This allows tracking of all published and delivered messages, which is useful for debugging and development.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/firehose.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl trace_on -p [virtual host]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options in RabbitMQ 3.7 (INI-like Format)\nDESCRIPTION: This snippet demonstrates how to configure TLS options using the new format. It sets paths for CA certificate, server certificate, and key file, as well as verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile           = /path/to/testca/cacert.pem\nssl_options.certfile             = /path/to/server/cert.pem\nssl_options.keyfile              = /path/to/server/key.pem\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Identifying TLS Bad Record MAC Errors in Erlang\nDESCRIPTION: This error occurs when the server fails to verify the integrity of received data. It can be caused by network issues, unintentional socket sharing in the client, or bugs in the client's TLS implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n{tls_alert,\"bad record mac\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web STOMP Examples Plugin\nDESCRIPTION: Command to enable the rabbitmq_web_stomp_examples plugin which provides demonstration applications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_stomp_examples\n```\n\n----------------------------------------\n\nTITLE: Stopping Keycloak OAuth Server\nDESCRIPTION: Command to stop the running Keycloak server after completing the OAuth authentication testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-keycloak\n```\n\n----------------------------------------\n\nTITLE: Emitting an Error Log Message in Objective-C\nDESCRIPTION: This snippet shows how to call the emitLogDirect function to send an error log message using the RabbitMQ Objective-C client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_6\n\nLANGUAGE: objectivec\nCODE:\n```\n[self emitLogDirect:@\"Hi there!\" severity:@\"error\"];\n```\n\n----------------------------------------\n\nTITLE: Using pprof Tool to Analyze Memory Allocations\nDESCRIPTION: Command demonstrating how to use the go tool pprof to capture and analyze memory heap profile data from the operator. This fetches the profile over HTTP and saves it for visualization and analysis.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/debug-operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go tool pprof \"localhost:9782/debug/pprof/heap\"\nFetching profile over HTTP from http://localhost:9782/debug/pprof/heap\nSaved profile in /home/pprof/pprof.manager.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz\n```\n\n----------------------------------------\n\nTITLE: systemd epmd Socket Configuration\nDESCRIPTION: Configuration for epmd socket service in systemd to use IPv6.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nListenStream=[::1]:4369\n```\n\n----------------------------------------\n\nTITLE: Reconnection Delay Configuration\nDESCRIPTION: Demonstrates how to configure the reconnection delay for a shovel after connection failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{reconnect_delay, 5}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Monitoring Tools\nDESCRIPTION: Commands to set up port forwarding for accessing Prometheus and Alertmanager UIs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-05-03-alerting/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-prometheus port-forward svc/prom-kube-prometheus-stack-prometheus 9090\nkubectl -n kube-prometheus port-forward svc/prom-kube-prometheus-stack-alertmanager 9093\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell version of the federation policy configuration with proper Windows-specific syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-exchanges/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy exchange-federation `\n    \"^federated\\.\" `\n    '\"{\"\"federation-upstream-set\":\"\"all\"\"}\"' `\n    --priority 10 `\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to set the statistics collection interval in RabbitMQ. The default configuration sets the interval to 5000 milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\ncollect_statistics_interval = 5000\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Command Line Arguments (Bash)\nDESCRIPTION: Displays the target node's command-line arguments and flags as reported by the runtime. Helpful for debugging and configuration verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics command_line_arguments -n rabbit@hostname\n```\n\n----------------------------------------\n\nTITLE: Runtime Thread Statistics\nDESCRIPTION: Command to sample and report runtime thread activity statistics over a specified interval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics runtime_thread_stats --sample-interval 15\n```\n\n----------------------------------------\n\nTITLE: Server Version Check\nDESCRIPTION: Command to display the RabbitMQ server version information in quiet mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics server_version -q\n```\n\n----------------------------------------\n\nTITLE: Checking if Node is Quorum Critical in RabbitMQ (Bash)\nDESCRIPTION: This command checks if a node is quorum critical in the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncheck_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Listing feature flags in RabbitMQ (Bash)\nDESCRIPTION: Command to list feature flags in RabbitMQ. It allows specifying columns to display and setting a timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nlist_feature_flags [column ...] [--timeout milliseconds]\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in RabbitMQ (Bash)\nDESCRIPTION: Lists cipher suites enabled by default or all available cipher suites. Useful for security audits and configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl --all\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Options for AMQP Connections in INI\nDESCRIPTION: INI configuration that optimizes TCP settings for AMQP 0-9-1 connections to maximize throughput. This increases TCP buffer sizes to 192 KiB and configures important TCP socket options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on      = true\ntcp_listen_options.linger.timeout = 0\ntcp_listen_options.sndbuf = 196608\ntcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Process Limit\nDESCRIPTION: Commands to configure the maximum number of Erlang processes using environment variable or VM flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_MAX_NUMBER_OF_PROCESSES=2000000\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+P 2000000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ TLS Handshake Timeout\nDESCRIPTION: This snippet shows how to set the TLS handshake timeout for RabbitMQ to 10 seconds (10000 milliseconds). This may be necessary when TLS is enabled and the default timeout is insufficient.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nssl_handshake_timeout = 10000\n```\n\n----------------------------------------\n\nTITLE: Cloning the RabbitMQ Streams Sample Project\nDESCRIPTION: Shell commands to clone the GitHub repository containing the RabbitMQ Streams example code and navigate to the project directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/acogoluegnes/rabbitmq-streams-blog-posts.git\ncd rabbitmq-streams-blog-posts\n```\n\n----------------------------------------\n\nTITLE: TCP Listen Options Configuration\nDESCRIPTION: Network socket configuration options including backlog, nodelay, linger settings, and keepalive flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on = true\ntcp_listen_options.linger.timeout = 0\n```\n\n----------------------------------------\n\nTITLE: Queue Declaration Response with Message Count\nDESCRIPTION: Shows the AMQP 0-9-1 response to queue.declare which includes the message_count field that indicates the current queue length.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/queues.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<code>queue.declare-ok</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Config File Based Peer Discovery\nDESCRIPTION: Configuration example for the classic config file peer discovery backend, showing how to specify the peer discovery mechanism and list cluster member nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Config File Based Peer Discovery\nDESCRIPTION: Configuration example for the classic config file peer discovery backend, showing how to specify the peer discovery mechanism and list cluster member nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = classic_config\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to declare a queue using the PUT /api/queues/{vhost}/{name} endpoint. It specifies queue properties such as durability and node placement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_delete\": false,\n  \"durable\": true,\n  \"arguments\": {},\n  \"node\": \"rabbit@node.hostname\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Permissions with Variable Expansion in RabbitMQ with Bash\nDESCRIPTION: Sets user topic permissions using variable expansion in RabbitMQ. This command uses the {username} variable to create a more generic permission pattern that adapts to the specific user.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic \"^{username}-.*\" \"^{username}-.*\"\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Server Using CLI\nDESCRIPTION: Command to stop a running RabbitMQ node using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/opt/homebrew/sbin/rabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host in rabbitmqadmin\nDESCRIPTION: This command demonstrates how to create a virtual host with specific settings using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin declare vhost --name \"vh-789\" --default-queue-type \"quorum\" --description \"Used to reproduce issue #789\"\n```\n\n----------------------------------------\n\nTITLE: Empty Permission Regular Expression\nDESCRIPTION: Regular expression pattern that matches nothing but the empty string, effectively stopping the user from performing any operation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_11\n\nLANGUAGE: regex\nCODE:\n```\n^$\n```\n\n----------------------------------------\n\nTITLE: Concatenating CA Certificates for RabbitMQ TLS Configuration\nDESCRIPTION: This bash command demonstrates how to concatenate multiple CA certificates into a single Certificate Authority bundle file. This is useful when configuring RabbitMQ to trust multiple CA certificates for TLS peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat rootca/ca_certificate.pem otherca/ca_certificate.pem > all_cacerts.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 for Inter-node Communication\nDESCRIPTION: Environment variable settings to configure RabbitMQ nodes and CLI tools to use IPv6 for inter-node communication and management operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# these flags will be used by RabbitMQ nodes\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-kernel inetrc '/etc/rabbitmq/erl_inetrc' -proto_dist inet6_tcp\"\n# these flags will be used by CLI tools\nRABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Custom Scope Field in JSON\nDESCRIPTION: Example JWT token with an empty standard scope field and permissions defined in a custom 'extra_scope' field for RabbitMQ management access.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": [\n\n  ],\n  \"extra_scope\": [\n    \"rabbitmq.tag:management\"\n  ],\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Kernel Logs with Topic Exchange in Bash\nDESCRIPTION: This command runs the receive_logs_topic.js script to receive all logs from the 'kern' facility by using the 'kern.*' routing key pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./receive_logs_topic.js \"kern.*\"\n```\n\n----------------------------------------\n\nTITLE: Consul Service with NIC-based Address\nDESCRIPTION: Configuration for Consul service using a specific network interface (en0) for service address computation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using the IP address of a NIC, en0\ncluster_formation.consul.svc_addr_nic = en0\ncluster_formation.consul.svc_addr_use_nodename = false\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Publishers with RabbitMQ Streams CLI\nDESCRIPTION: Command example for listing stream publishers with specific fields. This command displays the connection PID, publisher ID and stream for each producer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_publishers connection_pid publisher_id stream\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Limit Per Channel in RabbitMQ INI\nDESCRIPTION: Configuration example for setting maximum number of consumers per channel in rabbitmq.conf to prevent consumer leaks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumers.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nconsumer_max_per_channel = 100\n```\n\n----------------------------------------\n\nTITLE: Starting AMQP 1.0 Publisher with OAuth 2.0 Authentication\nDESCRIPTION: This command starts an AMQP 1.0 publisher application that uses OAuth 2.0 for authentication with RabbitMQ, using the jms_producer client ID.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake start-amqp1_0-publisher\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Workers and Task Publisher\nDESCRIPTION: Shell commands demonstrating how to run multiple workers and publish tasks to test the work queue system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\n./worker.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\n./worker.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 3\n./new_task.js First message.\n./new_task.js Second message..\n./new_task.js Third message...\n./new_task.js Fourth message....\n./new_task.js Fifth message.....\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Plugin Directories in Linux/Unix\nDESCRIPTION: Example of configuring multiple plugin directories in rabbitmq-env.conf file using colon-separated paths on Linux/Unix systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example rabbitmq-env.conf file that features a colon-separated list of plugin directories\nPLUGINS_DIR=\"/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.11.6/plugins\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple etcd Endpoints for RabbitMQ Cluster Formation\nDESCRIPTION: Configuration for etcd-based peer discovery with multiple endpoints. The plugin will randomly choose one of the available endpoints that it can successfully connect to.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Chain Verification Depth (INI Format)\nDESCRIPTION: Example showing how to configure certificate chain verification depth in RabbitMQ using INI-style format. Includes SSL options and depth settings for intermediate CA certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile = /path/to/server_certificate.pem\nssl_options.keyfile = /path/to/server_key.pem\nssl_options.verify = verify_peer\nssl_options.depth  = 2\nssl_options.fail_if_no_peer_cert = false\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for HOP Client\nDESCRIPTION: Shows how to include the HOP HTTP client dependency in a Maven project configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-10-18-new-reactive-client-for-rabbitmq-http-api/index.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.rabbitmq</groupId>\n    <artifactId>http-client</artifactId>\n    <version>2.0.0.RELEASE</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Reverse DNS Lookups in RabbitMQ\nDESCRIPTION: This configuration snippet demonstrates how to explicitly enable reverse DNS lookups for client IP addresses in RabbitMQ. This can be useful for listing hostnames in connection information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nreverse_dns_lookups = true\n```\n\n----------------------------------------\n\nTITLE: Delivering Messages with Delivery Tags in AMQP 0-9-1\nDESCRIPTION: When a consumer is registered, RabbitMQ delivers messages using the basic.deliver method, which includes a delivery tag to uniquely identify the delivery on a channel. Delivery tags are scoped per channel and are monotonically growing positive integers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_0\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.deliver\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Logging for RabbitMQ Management\nDESCRIPTION: Configures HTTP request logging for the management plugin by specifying a directory where access logs will be stored. Requires plugin or node restart to take effect.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.http_log_dir = /path/to/a/writeable/directory\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Topic Permissions and Variable Expansion\nDESCRIPTION: Example JWT token demonstrating variable expansion for topic permissions, where {vhost} and {sub} claims are interpolated into the permission patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\" : \"bob\",\n  \"scope\" : [ \"rabbitmq.write:*/q-{vhost}-*/u-{sub}-*\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Basic Authentication for Web STOMP\nDESCRIPTION: Erlang configuration to enable HTTP Basic Authentication for the Web STOMP plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_web_stomp,\n      [{use_http_auth, true}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Calculation Strategy in RabbitMQ using INI Format\nDESCRIPTION: Configuration examples for setting the vm_memory_calculation_strategy in RabbitMQ to either 'rss' or 'allocated' strategies. The 'rss' strategy is more precise and used by default on Linux, MacOS, BSD and Solaris.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = rss\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = allocated\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Log Locations with rabbitmq-diagnostics\nDESCRIPTION: Example command that shows how to use the log_location command with the -a (--all) flag to display all log file locations on the target RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_location -a\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options in RabbitMQ (Classic Erlang Format)\nDESCRIPTION: This snippet shows the same TLS configuration as above, but using the classic Erlang term format for comparison. It demonstrates the increased complexity and nesting in the old format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [{ssl_options, [{cacertfile,           \"/path/to/testca/cacert.pem\"},\n                           {certfile,             \"/path/to/server/cert.pem\"},\n                           {keyfile,              \"/path/to/server/key.pem\"},\n                           {verify,               verify_peer},\n                           {fail_if_no_peer_cert, true}]}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL Policy Using rabbitmqctl (Linux/Unix)\nDESCRIPTION: This command uses rabbitmqctl to set a policy that applies a 60-second message TTL to all queues. The policy is defined with the key 'message-ttl' and applies to any queue matching the '.*' pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" '{\"message-ttl\":60000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Running Plugin Tests\nDESCRIPTION: Command to execute the Common Test test suites for the plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake tests\n```\n\n----------------------------------------\n\nTITLE: Relocating RabbitMQ Cluster Operator image to private registry\nDESCRIPTION: Commands to pull the Cluster Operator image from Docker Hub, tag it for a private registry, and push it to the private registry for environments that can't directly access Docker Hub.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull rabbitmqoperator/cluster-operator:{some-version}\ndocker tag rabbitmqoperator/cluster-operator:{some-version} {someregistry}/cluster-operator:{some-version}\ndocker push {someregistry}/cluster-operator:{some-version}\n```\n\n----------------------------------------\n\nTITLE: Defining STOMP Protocol Versions in Erlang\nDESCRIPTION: This code snippet defines the available STOMP protocol versions for RabbitMQ connections. It includes three tuple representations for different STOMP versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_74\n\nLANGUAGE: erlang\nCODE:\n```\n{'STOMP', 0}\n{'STOMP', 1}\n{'STOMP', 2}\n```\n\n----------------------------------------\n\nTITLE: Combining Federation and TTL Policies in RabbitMQ\nDESCRIPTION: This example shows how to set a policy named 'ttl-fed' that applies to queues with names starting with 'tf.'. The policy combines federation settings with a message TTL of 60000 milliseconds and has a priority of 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy ttl-fed \\\n    \"^tf\\.\" '{\"federation-upstream-set\":\"all\", \"message-ttl\":60000}' \\\n    --priority 1 \\\n    --apply-to queues\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl set_policy ttl-fed ^\n    \"^tf\\.\" \"{\"\"federation-upstream-set\"\":\"\"all\"\", \"\"message-ttl\"\":60000}\" ^\n    --priority 1 ^\n    --apply-to queues\n```\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/ttl-fed\n    {\"pattern\": \"^tf\\.\",\n    \"definition\": {\"federation-upstream-set\":\"all\", \"message-ttl\":60000},\n    \"priority\": 1,\n    \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key via Direct Download (Bash)\nDESCRIPTION: Downloads the RabbitMQ release signing key from GitHub and imports it using GPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc --output rabbitmq-release-signing-key.asc\ngpg --import rabbitmq-release-signing-key.asc\n```\n\n----------------------------------------\n\nTITLE: Enabling STOMP Proxy Protocol\nDESCRIPTION: INI configuration to enable proxy protocol support for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nstomp.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Queue Declaration with No Wait Option in RabbitMQ Java Client\nDESCRIPTION: Declares a queue using the 'no wait' version which doesn't wait for a server response. This is more efficient for high-churn scenarios but offers lower safety guarantees as it depends more on the heartbeat mechanism.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDeclareNoWait(queueName, true, false, false, null);\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Activity Logging Level in RabbitMQ\nDESCRIPTION: Configuration example for setting the LDAP activity logging level to 'network' in RabbitMQ, which enables logging of LDAP network traffic with credentials scrubbed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.log = network\n```\n\n----------------------------------------\n\nTITLE: Importing Cloudsmith Signing Key for RabbitMQ Repositories\nDESCRIPTION: Downloads and imports the Cloudsmith signing key used for RabbitMQ repositories. Cloudsmith is a hosted package distribution service used by RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# import the Cloudsmith key\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key -o cloudsmith-rabbitmq-key.asc\ngpg --import cloudsmith-rabbitmq-key.asc\n```\n\n----------------------------------------\n\nTITLE: Nested Cuts in Erlang\nDESCRIPTION: Demonstrates that cuts can be applied to the results of previous cuts, as they produce standard fun expressions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\ntest() ->\n    Equals12 = assert_sum_3(_, _, _, 12),\n    Equals5 = Equals12(_, _, 7),\n    ok = Equals5(2, 3).\n```\n\n----------------------------------------\n\nTITLE: Authentication Mechanisms Basic Config\nDESCRIPTION: Basic configuration for authentication mechanisms in RabbitMQ using anonymous auth.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\nauth_mechanisms.3 = ANONYMOUS\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in RabbitMQ Erlang Client\nDESCRIPTION: Example code showing how to configure TLS options for a secure connection using the RabbitMQ Erlang client. Demonstrates setting up certificate files, verification options, and server name indication (SNI) for proper TLS handshaking.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_48\n\nLANGUAGE: erlang\nCODE:\n```\nSslOpts = [{cacertfile, \"/path/to/ca_certificate.pem\"},\n           {certfile, \"/path/to/client/certificate.pem\"},\n           {keyfile, \"/path/to/client/private_key.pem\"},\n\n           %% only necessary with intermediate CAs\n           %% {depth, 2},\n\n           %% Note: it is recommended to set 'verify' to\n           %% to 'verify_peer' to ensure that X509\n           %% certificate chain validation is enabled\n           %%\n           %% Do not set 'verify' or set it to verify_none\n           %% if x509 certificate chain validation is\n           %% not desired\n           {verify, verify_peer},\n\n           %% If Server Name Indication validation is desired,\n           %% set the following option to the host name to which\n           %% the connection is made. If necessary, this option\n           %% may be set to another host name to match the server\n           %% certificate's CN= value.\n           %% Do not set this option or set it to the atom 'disable'\n           %% to disable SNI validation\n           {server_name_indication, \"my.rmq-server.net\"}],\n\nParams = #amqp_params_network{host = \"my.rmq-server.net\",\n                              port = 5671,\n                              ssl_options = SslOpts}\n\n{ok, Conn} = amqp_connection:start(Params),\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoints: Feature and Deprecation Management\nDESCRIPTION: Endpoints for checking feature flags and deprecated features status\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/feature-flags\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/deprecated-features\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/deprecated-features/used\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Pika OAuth Testing\nDESCRIPTION: Alternative commands for setting up a Python virtual environment before installing the required packages for the Pika OAuth testing example.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Computing Password Hash using rabbitmqctl\nDESCRIPTION: Shows how to compute a password hash using the rabbitmqctl command-line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl hash_password foobarbaz\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Classic Queues with Fixed Rate Throughput\nDESCRIPTION: Shell command for perf-test configured to benchmark classic queues at a fixed rate of 10,000 messages per second. This configuration focuses on measuring latency rather than maximum throughput.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# classic queues (with an exactly=3 mirroring policy where applicable)\nperf-test --rate 10000 --confirm 3000 --multi-ack-every 3000 --qos 3000 \\\n          --variable-size 10:900 --variable-size 100:900 --variable-size 1000:900 --variable-size 5000:900 \\\n          --auto-delete false --flag persistent --queue cq\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Listen on Specific IPv4 Interfaces\nDESCRIPTION: This snippet demonstrates how to configure RabbitMQ to listen on specific IPv4 interfaces for both plain AMQP and TLS connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 192.168.1.99:5672 # Plain AMQP\nlisteners.ssl.1 = 192.168.1.99:5671 # TLS (AMQPS)\n```\n\n----------------------------------------\n\nTITLE: Defining a Federation Policy in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set a policy named 'federate-me' that applies to exchanges with names starting with 'federated.'. The policy sets the federation-upstream-set to 'all' with a priority of 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me \\\n    \"^federated\\.\" '{\"federation-upstream-set\":\"all\"}' \\\n    --priority 1 \\\n    --apply-to exchanges\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy federate-me ^\n    \"^federated\\.\" \"{\"\"federation-upstream-set\"\":\"\"all\"\"}\" ^\n    --priority 1 ^\n    --apply-to exchanges\n```\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/federate-me\n    {\"pattern\": \"^federated\\.\",\n     \"definition\": {\"federation-upstream-set\":\"all\"},\n     \"priority\": 1,\n    \"apply-to\": \"exchanges\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Kernel Parameters with sysctl\nDESCRIPTION: This bash command demonstrates how to set the maximum number of file handles the kernel will allocate using sysctl. This is important for systems handling many concurrent connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w fs.file-max 200000\n```\n\n----------------------------------------\n\nTITLE: Setting Queue TTL Using RabbitMQ Policy (Bash)\nDESCRIPTION: Sets a policy that makes all queues expire after 30 minutes (1,800,000 milliseconds) of inactivity using rabbitmqctl command in bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy expiry \".*\" '{\"expires\":1800000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Windows User Root Certificate Store\nDESCRIPTION: PowerShell command to add a CA certificate to the Windows user Root certificate store using the certmgr tool. This enables client applications to trust servers presenting certificates signed by this CA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows\ncertmgr -add -all \\path\\to\\cacert.cer -s Root\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Command to set a custom cluster name for RabbitMQ federation identification. The cluster name is important for distinguishing between different nodes in the federation graph, especially when DNS names might not be distinct.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name \"east1-production\"\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 End Session Endpoint Configuration in RabbitMQ\nDESCRIPTION: This configuration example shows how to set up an end session endpoint for Single Logout functionality, which enables users logging out of the management UI to also log out from the OAuth provider.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.end_session_endpoint = https://prodkeycloak:8080/realm/prod/logout\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus TCP Port in RabbitMQ\nDESCRIPTION: Sets the TCP port for the Prometheus plugin API endpoint in RabbitMQ configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.tcp.port = 15692\n```\n\n----------------------------------------\n\nTITLE: Using no-ack Mode for AMQP 0-9-1 Shovel Acknowledgments\nDESCRIPTION: The no-ack acknowledgment mode uses automatic message acknowledgments for highest throughput, but is not safe as it will lose messages during network or broker failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nno-ack\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Make\nDESCRIPTION: Alternative command using Make to start the RabbitMQ cluster with metrics\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake metrics overview\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Listeners with rabbitmq-diagnostics\nDESCRIPTION: Uses the rabbitmq-diagnostics command to check what interface and port is being used by a running RabbitMQ node for Prometheus metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -s listeners\n```\n\n----------------------------------------\n\nTITLE: Minimal RabbitMQ Configuration Example (Classic Format)\nDESCRIPTION: The same port configuration as above but using the classic Erlang terms format, demonstrating the difference in complexity between the two formats.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n%% this is a comment\n[\n  {rabbit, [\n      {tcp_listeners, [5673]}\n    ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ on Ubuntu 24.04 using Cloudsmith mirror repositories\nDESCRIPTION: A shell script for installing RabbitMQ on Ubuntu 24.04 (Noble) using Cloudsmith mirror repositories. The script adds necessary apt repositories, imports GPG keys, installs required Erlang packages, and then installs the RabbitMQ server package.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nsudo apt-get install curl gnupg apt-transport-https -y\n\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null\n## Community mirror of Cloudsmith: modern Erlang repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null\n## Community mirror of Cloudsmith: RabbitMQ repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n\n## Add apt repositories maintained by Team RabbitMQ\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\n\n## Provides RabbitMQ\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\nEOF\n\n## Update package indices\nsudo apt-get update -y\n\n## Install Erlang packages\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Commands for starting a local development server with optional browser selection for testing the RabbitMQ website.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nBROWSER=\"Brave Beta\" npm start\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions in RabbitMQ\nDESCRIPTION: Command to list all virtual hosts and permissions for a specific user.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_user_permissions janeway\n```\n\n----------------------------------------\n\nTITLE: Example of For Query for Resource Access in RabbitMQ LDAP\nDESCRIPTION: Complex example that allows members of the 'wheel' group to configure (declare/delete) exchanges, while allowing all users to write and read exchanges and perform all operations on queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_26\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{resource, exchange, {for, [{permission, configure,\n                                     {in_group, \"cn=wheel,dc=example,dc=com\"}\n                                    },\n                                    {permission, write, {constant, true}},\n                                    {permission, read,  {constant, true}}\n                                   ]}},\n                                   {resource, queue,    {constant, true}}]}}\n```\n\n----------------------------------------\n\nTITLE: Listing Permissions in RabbitMQ with Bash\nDESCRIPTION: This command shows how to use rabbitmqctl to inspect a user's permissions in a given virtual host. The example displays permissions for both the root vhost and a custom vhost 'gw1'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_permissions --vhost /\n# => Listing permissions for vhost \"/\" ...\n# => user\tconfigure\twrite\tread\n# => user2\t.*\t.*\t.*\n# => guest\t.*\t.*\t.*\n# => temp-user\t.*\t.*\t.*\n\nrabbitmqctl list_permissions --vhost gw1\n# => Listing permissions for vhost \"gw1\" ...\n# => user\tconfigure\twrite\tread\n# => guest\t.*\t.*\t.*\n# => user2\t^user2\t^user2\t^user2\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with TTL in C#\nDESCRIPTION: This C# code example publishes a message with a 60-second TTL using the expiration property.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\n\nIBasicProperties props = model.CreateBasicProperties();\nprops.ContentType = \"text/plain\";\nprops.DeliveryMode = 2;\nprops.Expiration = \"60000\";\n\nmodel.BasicPublish(exchangeName,\n                   routingKey, props,\n                   messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Server with systemctl Commands\nDESCRIPTION: Basic systemctl commands for starting, checking status, and stopping the RabbitMQ server. These commands should be run with administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start rabbitmq-server\n\nsystemctl status  rabbitmq-server\n\nsystemctl stop rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging Level in RabbitMQ\nDESCRIPTION: Configuration settings for enabling debug level logging to file and console output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = debug\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = debug\n```\n\n----------------------------------------\n\nTITLE: Logging Authorization Failure for Insufficient Permissions in RabbitMQ\nDESCRIPTION: This log entry shows an authorization failure where a user has permissions but they are insufficient for the specific operation being attempted (in this case, queue declaration).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\n2019-03-25 12:30:05.209 [error] <0.1627.0> Channel error on connection <0.1618.0> (127.0.0.1:63881 -> 127.0.0.1:5672, vhost: 'gw1', user: 'user2'), channel 1:\noperation queue.declare caused a channel exception access_refused: access to queue 'user3.q1' in vhost 'gw1' refused for user 'user2'\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Users\nDESCRIPTION: This command lists all users in the RabbitMQ broker, including their tags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_users\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with UAA OAuth 2.0 Configuration\nDESCRIPTION: This command starts RabbitMQ configured to use UAA as its OAuth 2.0 authorization server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Topic Exchange Example\nDESCRIPTION: Command-line instructions for building and running the topic exchange example using Maven and Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-spring-amqp.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n\n# shell 1\njava -jar target/rabbitmq-tutorials.jar \\\n    --spring.profiles.active=topics,receiver \\\n    --tutorial.client.duration=60000\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus TCP Port in RabbitMQ\nDESCRIPTION: Sets the TCP port for the Prometheus plugin API endpoint in RabbitMQ configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.tcp.port = 15692\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Messaging Topology Operator with cert-manager\nDESCRIPTION: Command to install the latest version of RabbitMQ Messaging Topology Operator using cert-manager for certificate management.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-topology-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/rabbitmq/messaging-topology-operator/releases/latest/download/messaging-topology-operator-with-certmanager.yaml\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Header-based Routing Configuration\nDESCRIPTION: Explains how CC and BCC headers can be used to route messages to additional destinations beyond the routing key. CC values are preserved in delivered messages while BCC values are removed before delivery. Headers must contain arrays of strings (longstr values) and are case-sensitive.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/sender-selected.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe values associated with the \"CC\" and \"BCC\" header keys will\\nbe added to the routing key if they are present. The message\\nwill be routed to all destinations matching the routing key\\nsupplied as a parameter to the `basic.publish`\\nmethod, as well as the routes supplied in the \"CC\" and \"BCC\"\\nheaders.\n```\n\n----------------------------------------\n\nTITLE: Setting Combined Per-Consumer and Channel-Wide Prefetch Limits in Java\nDESCRIPTION: This example sets both a per-consumer limit (10) and a channel-wide limit (15) that applies across all consumers on the channel. Both limits must be satisfied for message delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-prefetch.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer1 = ...;\nConsumer consumer2 = ...;\nchannel.basicQos(10, false); // Per consumer limit\nchannel.basicQos(15, true);  // Per channel limit\nchannel.basicConsume(\"my-queue1\", false, consumer1);\nchannel.basicConsume(\"my-queue2\", false, consumer2);\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Bindings Using diagnostics CLI\nDESCRIPTION: Command to list all bindings in a specific virtual host using rabbitmq-diagnostics. Note that implicit default exchange bindings are not listed in RabbitMQ 3.8 and later versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/publishers/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# note that the implicit default exchange bindings won't\n# be listed as of RabbitMQ 3.8\nrabbitmq-diagnostics list_bindings --vhost \"/\"\n=> Listing bindings for vhost /...\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Key Prefix for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for customizing the prefix used for lock keys in Consul when using it for peer discovery in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\ncluster_formation.consul.lock_timeout = 60\n# should the Consul key used for locking be prefixed with something\n# other than \"rabbitmq\"?\ncluster_formation.consul.lock_prefix = environments-qa\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Listener Interface in RabbitMQ (INI)\nDESCRIPTION: Default network interface configuration used for communication with other cluster members and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.interface = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: MQTT WebSocket Client Setup in JavaScript\nDESCRIPTION: JavaScript code showing how to initialize and configure a Paho MQTT client for WebSocket connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-mqtt.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar wsbroker = location.hostname;  // mqtt websocket enabled broker\nvar wsport = 15675; // port for above\nvar client = new Paho.MQTT.Client(wsbroker, wsport, \"/ws\",\n    \"myclientid_\" + parseInt(Math.random() * 100, 10));\nclient.onConnectionLost = function (responseObject) {\n    debug(\"CONNECTION LOST - \" + responseObject.errorMessage);\n};\nclient.onMessageArrived = function (message) {\n    debug(\"RECEIVE ON \" + message.destinationName + \" PAYLOAD \" + message.payloadString);\n    print_first(message.payloadString);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Key Prefix for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for customizing the prefix used for lock keys in Consul when using it for peer discovery in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\ncluster_formation.consul.lock_timeout = 60\n# should the Consul key used for locking be prefixed with something\n# other than \"rabbitmq\"?\ncluster_formation.consul.lock_prefix = environments-qa\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Port Range Minimum in RabbitMQ (INI)\nDESCRIPTION: Default setting for the lower bound of a server port range used for communication with other cluster members and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.port_range.min = 25672\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values in RabbitMQ with decode Command\nDESCRIPTION: The decode command decrypts values that were previously encrypted with the encode command. It requires the encrypted value and the passphrase used for encryption, with optional parameters to specify cipher, hash algorithm, and iteration count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode '{encrypted, <<\"...\">>}' mypassphrase\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '{encrypted,<<\"...\">>} mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Plugin Directory Configuration\nDESCRIPTION: Examples of configuring plugin directories in both bash and PowerShell environments using environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPLUGINS_DIR=\"/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.11.6/plugins\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPLUGINS_DIR=\"C:\\Example\\RabbitMQ\\plugins;C:\\Example\\RabbitMQ\\rabbitmq_server-3.11.6\\plugins\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set the statistics collection interval in RabbitMQ to 60 seconds. Increasing this interval can reduce CPU footprint and peak memory consumption, especially useful for systems with a large number of connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/connections/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 60 seconds\ncollect_statistics_interval = 60000\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Node Log Entry for TLS Connection\nDESCRIPTION: Example log entries showing a successful TLS connection and authentication to a RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n2018-09-27 15:46:20 [info] <0.1082.0> accepting AMQP connection <0.1082.0> (127.0.0.1:50915 -> 127.0.0.1:5671)\n2018-09-27 15:46:20 [info] <0.1082.0> connection <0.1082.0> (127.0.0.1:50915 -> 127.0.0.1:5671): user 'user' authenticated and granted access to vhost 'virtual_host'\n```\n\n----------------------------------------\n\nTITLE: Listing Exchange Bindings Using RabbitMQ Diagnostics CLI\nDESCRIPTION: This command shows how to use rabbitmq-diagnostics to list all bindings for a specific virtual host, which can help diagnose routing issues when messages aren't being delivered to any queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/publishers/index.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# note that the implicit default exchange bindings won't\n# be listed as of RabbitMQ 3.8\nrabbitmq-diagnostics list_bindings --vhost \"/\"\n=> Listing bindings for vhost /...\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream from Timestamp Offset in Java\nDESCRIPTION: Java code example demonstrating how to consume messages from a stream starting from a specific timestamp (in this case, one hour ago). The stream will start delivering messages from the closest offset to the specified time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// an hour ago\nDate timestamp = new Date(System.currentTimeMillis() - 60 * 60 * 1_000)\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", timestamp), // timestamp offset\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Dependencies for RabbitMQ Erlang Repository\nDESCRIPTION: These bash commands update the package lists and install essential dependencies needed to download signing keys and packages over HTTPS for the RabbitMQ Erlang repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\nsudo apt-get install curl gnupg -y\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Prometheus Plugin in Bash\nDESCRIPTION: Command to enable the rabbitmq_prometheus plugin on all RabbitMQ nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_prometheus\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Java Client with JMX Metrics using Micrometer\nDESCRIPTION: This snippet demonstrates how to set up the RabbitMQ Java client with Micrometer to collect metrics and expose them through JMX. It includes creating a connection, channel, and simulating message publishing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\nConnectionFactory connectionFactory = new ConnectionFactory();\nMicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\n    jmxRegistry, \"rabbitmq.client\"\n);\nconnectionFactory.setMetricsCollector(metricsCollector);\n\nConnection connection = connectionFactory.newConnection();\nChannel channel = connection.createChannel();\nString queue = channel.queueDeclare().getQueue();\nchannel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\nexecutor.submit(() -> {\n    Random random = new Random();\n    while (true) {\n        Thread.sleep(random.nextInt(100));\n        channel.basicPublish(\"\", queue, null, \"\".getBytes());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Pinging a RabbitMQ Node for Health Check\nDESCRIPTION: Command to verify that a specific RabbitMQ node is running, registered with EPMD, and accessible for CLI authentication. Useful for basic node health verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl ping -n rabbit@hostname\n```\n\n----------------------------------------\n\nTITLE: Clearing Topic Permissions in RabbitMQ\nDESCRIPTION: Command to remove topic permissions for a specific user and exchange in a virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_topic_permissions -p my-vhost janeway amq.topic\n```\n\n----------------------------------------\n\nTITLE: Testing Port Connectivity with Telnet - Success Case\nDESCRIPTION: Example of using telnet to test connectivity to RabbitMQ's AMQP port 5672, showing a successful connection attempt and subsequent closure due to invalid protocol data.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 5672\n# => Trying ::1...\n# => Connected to localhost.\n# => Escape character is '^]'.\n12345 # enter this and hit Enter to send\n# => AMQP\tConnection closed by foreign host.\n```\n\n----------------------------------------\n\nTITLE: Creating a Runtime Parameter in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/parameters/{component}/{vhost}/{name} endpoint to create or update a runtime parameter. This example sets a policy for queues with names starting with 'cq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vhost\": \"vh-2\",\n  \"name\": \"policies.1\",\n  \"pattern\": \"^cq\",\n  \"apply-to\": \"queues\",\n  \"definition\": {\n    \"max-length\": 1000000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Management Commands\nDESCRIPTION: Commands for creating and deleting virtual hosts with various options\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin declare vhost --name \"vh-789\" --default-queue-type \"quorum\" --description \"Used to reproduce issue #789\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin delete vhost --name \"vh-789\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin delete vhost --name \"vh-789\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Vhost Parameters\nDESCRIPTION: Shows all parameters for a specific virtual host in RabbitMQ. This example lists parameters for the default virtual host using the 'list_parameters' action.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_parameters\n```\n\n----------------------------------------\n\nTITLE: Setting up Kubernetes Namespace and RBAC Rules for RabbitMQ\nDESCRIPTION: Commands to apply the namespace and RBAC (Role-Based Access Control) configurations for RabbitMQ deployment, creating a dedicated namespace called 'test-rabbitmq' with appropriate permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f namespace.yaml\nkubectl apply -f rbac.yaml\n```\n\n----------------------------------------\n\nTITLE: Building and Running the RabbitMQ Tutorial Application\nDESCRIPTION: Commands for building the Java application with Maven and running both the consumer and producer components using Spring profiles.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n```\n\nLANGUAGE: bash\nCODE:\n```\n# consumer\njava -jar target/rabbitmq-tutorials.jar --spring.profiles.active=hello-world,receiver\n```\n\n----------------------------------------\n\nTITLE: Starting OpenSSL Server for TLS Testing\nDESCRIPTION: Command to start an OpenSSL s_server instance with specified certificates and keys on port 8443 for TLS connection testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server -accept 8443 \\\n  -cert server_certificate.pem -key server_key.pem -CAfile ca_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Management Commands\nDESCRIPTION: Commands for creating and deleting virtual hosts with various options\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin declare vhost --name \"vh-789\" --default-queue-type \"quorum\" --description \"Used to reproduce issue #789\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin delete vhost --name \"vh-789\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin delete vhost --name \"vh-789\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Plugins with rabbitmq-plugins\nDESCRIPTION: This command enables the 'rabbitmq_management' plugin and its dependencies while disabling all other plugins. The 'set' command differs from 'enable' as it overwrites any existing enabled plugins configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-plugins.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins set rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory High Watermark (Absolute) in RabbitMQ (INI)\nDESCRIPTION: Sets an absolute value for the memory threshold at which flow control is triggered, specified in bytes or units like GB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 2GB\n```\n\n----------------------------------------\n\nTITLE: Receiving Logs with Topic Exchange in RabbitMQ using Objective-C\nDESCRIPTION: This snippet shows how to receive logs using a topic exchange in RabbitMQ. It creates a connection, declares a topic exchange, creates an exclusive queue, binds the queue to the exchange with specified routing keys, and sets up a message consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)receiveLogsTopic:(NSArray *)routingKeys {\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n    RMQExchange *x    = [ch topic:@\"topic_logs\"];\n    RMQQueue *q       = [ch queue:@\"\" options:RMQQueueDeclareExclusive];\n\n    for (NSString *routingKey in routingKeys) {\n        [q bind:x routingKey:routingKey];\n    }\n\n    NSLog(@\"Waiting for logs.\");\n\n    [q subscribe:^(RMQMessage * _Nonnull message) {\n        NSLog(@\"%@:%@\", message.routingKey, [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);\n    }];\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Status API Call\nDESCRIPTION: HTTP API request to configure federation policy\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/federate-me\n{\"pattern\":\"^amq\\.\", \"definition\":{\"federation-upstream-set\":\"all\"}, \"apply-to\":\"exchanges\"}\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Sender with Spring AMQP\nDESCRIPTION: Command to execute the RabbitMQ sender application using Spring profiles. This command runs the sender part of the hello-world example from the compiled jar file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rabbitmq-tutorials.jar --spring.profiles.active=hello-world,sender\n```\n\n----------------------------------------\n\nTITLE: Adding Users in RabbitMQ using PowerShell\nDESCRIPTION: Shows how to add users in RabbitMQ using the rabbitmqctl.bat command in PowerShell. It includes examples of adding users with regular passwords and passwords containing special characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# password is provided as a command line argument\nrabbitmqctl.bat add_user 'username' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'\n\n# passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user 'username' '\"w63pnZ&LnYMO(t\"'\n```\n\n----------------------------------------\n\nTITLE: Custom Discovery Endpoint Configuration\nDESCRIPTION: Configuration for custom OpenID discovery endpoint path and additional parameters\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.discovery_endpoint_path = my/custom/path\nauth_oauth2.discovery_endpoint_params.appid = some-app-id\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management API with OAuth 2.0 Token\nDESCRIPTION: Bash command to access the RabbitMQ Management API using OAuth 2.0 authentication with Keycloak. Uses a specific client ID and secret to obtain an access token.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-forward-proxy.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-keycloak url=https://localhost:15671/api/overview client_id=mgt_api_client secret=LWOuYqJ8gjKg3D2U8CJZDuID3KiRZVDa realm=test\n```\n\n----------------------------------------\n\nTITLE: Failed Cluster Join Example - PowerShell\nDESCRIPTION: PowerShell version of the failed cluster join example, showing the same error when attempting to join a cluster lacking quorum.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/clustering.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat -n rabbit@host-5 join_cluster rabbit@host-4\n\n# => Error:\n# => Khepri has timed out on node rabbit@host-5.\n# => Khepri cluster could be in minority.\n```\n\n----------------------------------------\n\nTITLE: LDAP Other Bind Configuration in INI Format\nDESCRIPTION: Configuration for specifying binding credentials for authorization queries\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.other_bind.user_dn = a-username\nauth_ldap.other_bind.password = a-password\n```\n\n----------------------------------------\n\nTITLE: Updating the RabbitMQ Cluster Operator Manifest with kubectl\nDESCRIPTION: This command applies the latest version of the RabbitMQ Cluster Operator manifest from the GitHub repository. It updates the Custom Resource Definitions and the Operator Pod to use the newest version of the operator container image.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/upgrade-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f \"https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml\"\n# namespace/rabbitmq-system unchanged\n# customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com configured\n# serviceaccount/rabbitmq-cluster-operator unchanged\n# role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role unchanged\n# clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role unchanged\n# rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding unchanged\n# clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding unchanged\n# deployment.apps/rabbitmq-cluster-operator configured\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 5672 using lsof (IPv6)\nDESCRIPTION: Similar to the previous command, but for IPv6. This helps verify RabbitMQ's listening status on IPv6 interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i6TCP:5672 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for Specific Nodes in PowerShell\nDESCRIPTION: PowerShell command to set a policy that mirrors queues with names starting with \"nodes.\" to specific nodes (nodeA and nodeB) in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy ha-nodes \"^nodes\\.\" ^\n  \"{\"\"ha-mode\"\":\"\"nodes\"\",\"\"ha-params\"\":[\"\"rabbit@nodeA\"\", \"\"rabbit@nodeB\"\"]}\"\n```\n\n----------------------------------------\n\nTITLE: TCP Buffer Configuration for STOMP\nDESCRIPTION: TCP listener options configuration for STOMP connections with optimized buffer sizes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nstomp.tcp_listen_options.backlog = 128\nstomp.tcp_listen_options.nodelay = true\nstomp.tcp_listen_options.linger.on      = true\nstomp.tcp_listen_options.linger.timeout = 0\nstomp.tcp_listen_options.sndbuf = 196608\nstomp.tcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugins with rabbitmq-plugins Command\nDESCRIPTION: Demonstrates how to enable a plugin using the rabbitmq-plugins CLI tool. The example shows enabling the Kubernetes peer discovery plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable <plugin-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_peer_discovery_k8s\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Address for RabbitMQ Cluster Formation with Consul\nDESCRIPTION: Sets a hardcoded service address for RabbitMQ nodes in Consul. This address will be used by other nodes to connect to this RabbitMQ instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do not compute service address, it will be specified below\ncluster_formation.consul.svc_addr_auto = false\n# service address, will be communicated to other nodes\ncluster_formation.consul.svc_addr = hostname1.rmq.eng.example.local\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level for Console Output in RabbitMQ\nDESCRIPTION: This snippet sets the logging level to 'debug' for console output in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.level = debug\n```\n\n----------------------------------------\n\nTITLE: Locating RabbitMQ Plugin Directories (Bash)\nDESCRIPTION: This command shows how to use rabbitmq-plugins to locate the plugin directories and enabled plugins file. It's useful for troubleshooting plugin installation and activation issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins directories -s\n# => Plugin archives directory: /path/to/rabbitmq/plugins\n# => Plugin expansion directory: /path/to/node/node-plugins-expand\n# => Enabled plugins file: /path/to/enabled_plugins\n```\n\n----------------------------------------\n\nTITLE: Minimal RabbitMQ Configuration Example (Modern Format)\nDESCRIPTION: A simple example showing how to change the default TCP listener port from 5672 to 5673 using the modern configuration format in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n# this is a comment\nlisteners.tcp.default = 5673\n```\n\n----------------------------------------\n\nTITLE: Receiving Logs from Specific Facility with Topic Exchange in RabbitMQ using Objective-C\nDESCRIPTION: This snippet shows how to receive logs from a specific facility (in this case, 'kern') using a topic exchange in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n[self receiveLogsTopic:@[@\"kern.*\"]];\n```\n\n----------------------------------------\n\nTITLE: Forcing RabbitMQ Node to Boot\nDESCRIPTION: This command ensures that a node will start the next time, even if it was not the last to shut down. Used in situations where all nodes lost power simultaneously and normal startup order cannot be determined.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl force_boot\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel Between AMQP 0.9.1 Endpoints\nDESCRIPTION: Complete static shovel configuration for transferring messages between AMQP 0.9.1 endpoints. Includes source and destination broker configurations, exchange declarations, queue bindings, and message handling parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n  [ {shovels, [ {my_first_shovel,\n                  [ {source,\n                      [ {protocol, amqp091},\n                        {uris, [ \"amqp://fred:secret@host1.domain/my_vhost\",\n                                  \"amqp://john:secret@host2.domain/my_vhost\" ]},\n                        {declarations, [ {'exchange.declare',\n                                            [ {exchange, <<\"my_fanout\">>},\n                                              {type, <<\"fanout\">>},\n                                              durable\n                                            ]},\n                                          {'queue.declare',\n                                            [{arguments,\n                                                [{<<\"x-message-ttl\">>, long, 60000}]}]},\n                                          {'queue.bind',\n                                            [ {exchange, <<\"my_fanout\">>},\n                                              {queue,    <<>>}\n                                            ]}\n                                          ]},\n                        {queue, <<>>},\n                        {prefetch_count, 10}\n                      ]},\n                    {destination,\n                      [ {protocol, amqp091},\n                        {uris, [\"amqp://\"]},\n                        {declarations, [ {'exchange.declare',\n                                            [ {exchange, <<\"my_direct\">>},\n                                              {type, <<\"direct\">>},\n                                              durable\n                                            ]}\n                                        ]},\n                        {publish_properties, [ {delivery_mode, 2} ]},\n                        {add_forward_headers, true},\n                        {publish_fields, [ {exchange, <<\"my_direct\">>},\n                                          {routing_key, <<\"from_shovel\">>}\n                                          ]}\n                          ]},\n                    {ack_mode, on_confirm},\n                    {reconnect_delay, 5}\n                  ]}\n              ]}\n  ]}\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ LDAP Plugin\nDESCRIPTION: Use rabbitmq-plugins to enable the LDAP authentication backend plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_auth_backend_ldap\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Renegotiation for Inter-node TLS in RabbitMQ\nDESCRIPTION: Extends the previous configuration to enable secure renegotiation for inter-node TLS connections, which is highly recommended for security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Client in Swift\nDESCRIPTION: Imports the RabbitMQ Objective-C client library as a module in Swift, which is required to use RabbitMQ messaging functionality in an iOS application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-swift.md#2025-04-09_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport RMQClient\n```\n\n----------------------------------------\n\nTITLE: Increasing Inter-node Communication Buffer Size via VM Flag\nDESCRIPTION: Alternative approach to increase the inter-node communication buffer size to 192MB using the direct Erlang VM flag for heavy inter-node traffic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+zdbbl 192000\"\n```\n\n----------------------------------------\n\nTITLE: Listing User Permissions in RabbitMQ (Bash)\nDESCRIPTION: Displays all virtual hosts to which a specific user has been granted access, along with their permissions for operations on resources in these virtual hosts. This command is useful for auditing a user's access across the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_user_permissions janeway\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 5672 using lsof (IPv6)\nDESCRIPTION: Similar to the previous command, but for IPv6. This helps verify RabbitMQ's listening status on IPv6 interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i6TCP:5672 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Updating apt Sources\nDESCRIPTION: Updates the list of apt sources after adding the new Erlang repository. This step is necessary before installing packages from the newly added repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Prefix and Cluster Name for RabbitMQ etcd Peer Discovery\nDESCRIPTION: Configuration for customizing the key prefix and cluster name in RabbitMQ's etcd-based peer discovery. This allows for multiple RabbitMQ clusters to share an etcd installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\n# rabbitmq is used by default\ncluster_formation.etcd.key_prefix = rabbitmq_discovery\n\n# default name: \"default\"\ncluster_formation.etcd.cluster_name = staging\n```\n\n----------------------------------------\n\nTITLE: Example TOML Configuration File for RabbitMQ Admin\nDESCRIPTION: TOML-formatted configuration file for rabbitmqadmin v2 that stores connection settings for different environments (local, staging, production) under named aliases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[local]\nhostname = \"localhost\"\nport = 15672\nusername = \"lolz\"\npassword = \"lolz\"\nvhost = '/'\n\n[staging]\nhostname = \"192.168.20.31\"\nport = 15672\nusername = \"staging-2387a72329\"\npassword = \"staging-1d20cfbd9d\"\n\n[production]\nhostname = \"(redacted)\"\nport = 15671\nusername = \"user-2ca6bae15ff6b79e92\"\npassword = \"user-92ee4c479ae604cc72\"\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts in RabbitMQ\nDESCRIPTION: Command to list virtual hosts with specific information items (name and tracing status).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_vhosts name tracing\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Host Protection from Deletion Using HTTP API\nDESCRIPTION: Example showing how to remove deletion protection from a RabbitMQ virtual host using the HTTP API with curl, allowing it to be deleted again.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X POST http://rabbitmq.local:15672/api/vhosts/vh1/deletion/protection\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy for Queue Migration in RabbitMQ\nDESCRIPTION: Creates a policy that applies federation to all queues, enabling messages from the 'blue' cluster to be consumed by clients connected to the 'green' cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/blue-green-upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy --apply-to queues blue-green-migration \".*\" \\\n  '{\"federation-upstream\":\"blue\"}'\n```\n\n----------------------------------------\n\nTITLE: Overriding RabbitMQ Cluster Resource Properties\nDESCRIPTION: YAML configuration showing how to customize StatefulSet and Service properties with additional ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: additional-port\nspec:\n  replicas: 1\n  override:\n    service:\n      spec:\n        ports:\n          - name: additional-port # adds an additional port on the service\n            protocol: TCP\n            port: 12345\n    statefulSet:\n      spec:\n        template:\n          spec:\n            containers:\n              - name: rabbitmq\n                ports:\n                  - containerPort: 12345 # opens an additional port on the rabbitmq server container\n                    name: additional-port\n                    protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Listing Certificates in Mono Trust Store\nDESCRIPTION: Bash command to list all certificates in the Mono Trust certificate store. This allows verification that certificates were correctly imported.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncertmgr -list -c Trust\n\n# … snip …\n\nSelf-signed X.509 v3 Certificate\n  Serial Number: AC3F2B74ECDD9EEA00\n  Issuer Name:   CN=MyTestCA\n  Subject Name:  CN=MyTestCA\n  valid From:    25/08/2018 14:03:01\n  valid Until:   24/09/2018 14:03:01\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Chain Verification Depth (New Format)\nDESCRIPTION: Example showing how to configure certificate chain verification depth in RabbitMQ using the new style configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile = /path/to/server_certificate.pem\nssl_options.keyfile = /path/to/server_key.pem\nssl_options.verify = verify_peer\nssl_options.depth  = 2\nssl_options.fail_if_no_peer_cert = false\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in Bash\nDESCRIPTION: Command to start a new RabbitMQ node using the rabbitmq-server command in bash shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul ACL Token\nDESCRIPTION: Settings for specifying the Consul ACL token for authentication\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\ncluster_formation.consul.acl_token = acl-token-value\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Flow Control Settings in RabbitMQ\nDESCRIPTION: This snippet shows how to adjust the flow control settings for stream connections, including the initial credits and credits required for unblocking.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nstream.initial_credits = 100000\nstream.credits_required_for_unblocking = 25000\n```\n\n----------------------------------------\n\nTITLE: Computing Password Hash using rabbitmqctl\nDESCRIPTION: Command to compute a password hash using the rabbitmqctl utility. This is useful for updating passwords via the HTTP API or generating definitions files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/passwords.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl hash_password foobarbaz\n```\n\n----------------------------------------\n\nTITLE: Filtering RabbitMQ Plugins by Name Pattern\nDESCRIPTION: Lists plugins whose names contain the specified pattern (e.g., \"management\") with verbose output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-plugins.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -v management\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation with PowerShell\nDESCRIPTION: Command to verify that the Node.js toolchain is properly installed and available in PATH by displaying the npm help message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Username Claims in RabbitMQ OAuth2\nDESCRIPTION: Configuration snippet showing how to set up preferred username claims in RabbitMQ. It configures the resource server ID and defines a sequence of claims to check for usernames.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.preferred_username_claims.1 = user_name\nauth_oauth2.preferred_username_claims.2 = email\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Signing Keys in RabbitMQ\nDESCRIPTION: Configuration example showing how to set up multiple signing keys, preferred username claims, and supported algorithms for OAuth 2.0 authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.additional_scopes_key = my_custom_scope_key\nauth_oauth2.preferred_username_claims.1 = username\nauth_oauth2.preferred_username_claims.2 = user_name\nauth_oauth2.default_key = id1\nauth_oauth2.signing_keys.id1 = test/config_schema_SUITE_data/certs/key.pem\nauth_oauth2.signing_keys.id2 = test/config_schema_SUITE_data/certs/cert.pem\nauth_oauth2.algorithms.1 = HS256\nauth_oauth2.algorithms.2 = RS256\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue with a Routing Key in Elixir\nDESCRIPTION: Code showing how to bind a queue to an exchange with a specific routing key. The routing key (called binding key here) determines which messages the queue will receive.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Queue.bind(channel, queue_name, exchange_name, routing_key: \"black\")\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Server Version\nDESCRIPTION: Reports the target node's version with quiet mode enabled using the -q flag to display only the version information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics server_version -q\n```\n\n----------------------------------------\n\nTITLE: Launching Erlang Crash Dump Viewer\nDESCRIPTION: Command to launch the Erlang Crash Dump Viewer (cdv) tool for visualizing and analyzing crash dump files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/lib/erlang/lib/observer-2.9.1/priv/bin/cdv ./erl_crash.dump\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts in RabbitMQ (Bash)\nDESCRIPTION: This command lists all virtual hosts in RabbitMQ. It can include additional information items such as name and tracing status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_vhosts name tracing\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Policy in PowerShell\nDESCRIPTION: This snippet shows how to set a policy for an Alternate Exchange using the rabbitmqctl command in PowerShell. It applies an AE named 'my-ae' to an exchange called 'my-direct'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ae.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy AE '^my-direct$' '\"{\"\"alternate-exchange\":\"\"my-ae\"\"}\"' --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Retention Policies in RabbitMQ Management Plugin\nDESCRIPTION: Sets the retention periods for different types of monitoring data in the management plugin. Global data is retained at varying resolutions up to a day, basic data for up to an hour, and detailed data for only 10 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.sample_retention_policies.global.minute  = 5\nmanagement.sample_retention_policies.global.hour    = 60\nmanagement.sample_retention_policies.global.day = 1200\n\nmanagement.sample_retention_policies.basic.minute = 5\nmanagement.sample_retention_policies.basic.hour   = 60\n\nmanagement.sample_retention_policies.detailed.10 = 5\n```\n\n----------------------------------------\n\nTITLE: Inspecting All TCP Connections using netstat\nDESCRIPTION: This command uses netstat to list all TCP connection sockets, displaying IP addresses as numbers and showing program names. It's useful for a comprehensive view of all TCP connections on the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo netstat --all --numeric --tcp --programs\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ Inter-node Communication Using Command Line Arguments (Linux)\nDESCRIPTION: This snippet shows how to configure TLS encryption for RabbitMQ inter-node communication by specifying Erlang runtime parameters directly in rabbitmq-env.conf. It sets the SSL path, enables TLS protocol, specifies certificate locations, and configures secure renegotiation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# change depending on the Erlang version, distribution,\n# and installation method used). Please double check it before proceeding!\nERL_SSL_PATH=\"/usr/lib64/erlang/lib/ssl-9.4/ebin\"\n\n# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\n# -ssl_dist_opt server_certfile /path/to/combined_keys.pem tells the runtime\n#                               where to find the combined certificate/key file\n# -ssl_dist_opt server_password password   required if the private key is encrypted\n# -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true enables an additional TLS setting: secure renegotiation\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n\n# Same settings as above but for CLI tools\nRABBITMQ_CTL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Receiver in Terminal\nDESCRIPTION: Command to run the receive_logs.go program to display incoming log messages on the console. This is used to monitor messages in real-time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Identity and Facility\nDESCRIPTION: Configuration for custom Syslog identity and facility values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.identity = my_rabbitmq\nlog.syslog.facility = user\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Suffix for RabbitMQ Cluster Formation in Kubernetes\nDESCRIPTION: Adds a suffix to peer hostnames returned by Kubernetes. This can be useful for domain name completeness or to distinguish between different environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# no suffix is appended by default\ncluster_formation.k8s.hostname_suffix = rmq.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Listing Used Deprecated Features with Shell Command\nDESCRIPTION: Command to list all deprecated features that are currently in use within the RabbitMQ cluster using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin deprecated_features list_used\n```\n\n----------------------------------------\n\nTITLE: Listing Exchanges with RabbitMQ CLI\nDESCRIPTION: Command-line instruction to list all exchanges currently defined on the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_exchanges\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ Server and Plugins\nDESCRIPTION: Commands to change into the rabbitmq directory and build the server along with all plugins using GNU Make.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/build-server.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rabbitmq\nmake\n```\n\n----------------------------------------\n\nTITLE: Disabling Resource Exposure in Management UI\nDESCRIPTION: Configuration to disable a resource from being exposed in the management UI interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.4.id = rabbit_internal\nmanagement.oauth_resource_servers.4.disabled = true\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel for RabbitMQ Operations\nDESCRIPTION: Creates a channel from the RabbitMQ connection, which is the primary interface for API operations. Includes error handling and channel cleanup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nch, err := conn.Channel()\nfailOnError(err, \"Failed to open a channel\")\ndefer ch.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Global TLS Options in RabbitMQ Erlang Client\nDESCRIPTION: Example of setting global TLS options in the advanced.config file for the RabbitMQ Erlang client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/uri-query-parameters.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{amqp_client, [\n    {ssl_options, [\n        {cacertfile, \"path-to-ca-certificate\"},\n        {certfile, \"path-to-certificate\"},\n        {keyfile, \"path-to-keyfile\"},\n        {verify, verify_peer}\n    ]}\n]}.\n```\n\n----------------------------------------\n\nTITLE: Forcing Garbage Collection and Analyzing Binary Heap in RabbitMQ\nDESCRIPTION: These commands force garbage collection and report the top processes that released the most binary heap references in RabbitMQ. This can be useful for managing memory usage, especially for binaries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'recon:bin_leak(10).'\n\nrabbitmqctl force_gc\n```\n\n----------------------------------------\n\nTITLE: Resource Name Match Example\nDESCRIPTION: Example of matching resource names against username patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_32\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query, {match, {string, \"${name}\"},\n                      {string, \"^${username}-\"}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Buffer Size for AMQP Connections\nDESCRIPTION: Configuration settings for optimizing TCP buffer size for AMQP 0-9-1 connections, setting buffers to 32 KiB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on      = true\ntcp_listen_options.linger.timeout = 0\ntcp_listen_options.sndbuf  = 32768\ntcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Installing Tail Plugin\nDESCRIPTION: Command to install the tail plugin for log viewing functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl krew install tail\n```\n\n----------------------------------------\n\nTITLE: Disabling Firehose Tracing in RabbitMQ with CLI\nDESCRIPTION: Command to turn off the Firehose tracing feature for a specified virtual host in RabbitMQ. This should be done after debugging is complete to restore normal performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/firehose.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl trace_off -p [virtual host]\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Buffer Size for STOMP Connections\nDESCRIPTION: Configuration settings for optimizing TCP buffer size for STOMP connections, setting buffers to 32 KiB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nstomp.tcp_listen_options.backlog = 128\nstomp.tcp_listen_options.nodelay = true\nstomp.tcp_listen_options.linger.on      = true\nstomp.tcp_listen_options.linger.timeout = 0\nstomp.tcp_listen_options.sndbuf  = 32768\nstomp.tcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connections and Channels Limits with rabbitmqctl\nDESCRIPTION: This command sets both maximum connections (10) and maximum channels (20) limits for the guest user using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits guest '{\"max-connections\": 10, \"max-channels\": 20}'\n```\n\n----------------------------------------\n\nTITLE: Setting Per-User Limit in RabbitMQ (Shell)\nDESCRIPTION: cURL command to set a per-user limit using the RabbitMQ Management API. This example sets the max-connections limit for the 'guest' user to 100.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -4u 'guest:guest' -H 'content-type:application/json' -X PUT localhost:15672/api/user-limits/guest/max-connections -d '{\"value\": 100}'\n```\n\n----------------------------------------\n\nTITLE: Setting Topic Exchange Permissions in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/topic-permissions/{vhost}/{user} endpoint to grant or update a user's topic exchange permissions. This example sets permissions for the 'amq.topic' exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exchange\": \"amq.topic\",\n  \"write\": \"^a\",\n  \"read\":\".*\",\n  \"configure\":\".*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Node Restart Settings\nDESCRIPTION: Configuration settings to adjust the timeout and retry parameters for RabbitMQ nodes when rejoining a cluster after restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# wait for 60 seconds instead of 30\nmnesia_table_loading_retry_timeout = 60000\n\n# retry 15 times instead of 10\nmnesia_table_loading_retry_limit = 15\n```\n\n----------------------------------------\n\nTITLE: Proxy Protocol Configuration\nDESCRIPTION: Configuration to enable proxy protocol support for AMQP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nproxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Updating Package Indices\nDESCRIPTION: Updates the local package index after adding new repository sources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Disk Free Limit in RabbitMQ (INI)\nDESCRIPTION: Default disk free space threshold (50MB) below which flow control is triggered. This should be increased for production environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 50MB\n```\n\n----------------------------------------\n\nTITLE: Analyzing RabbitMQ Dead Letter Confirmed Metrics\nDESCRIPTION: Sample metrics showing confirmed dead-lettered messages in RabbitMQ. These metrics represent messages that were successfully acknowledged by dead letter consumers, confirming proper routing and delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_16\n\nLANGUAGE: zsh\nCODE:\n```\nrabbitmq_global_messages_dead_lettered_confirmed_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_least_once\"} 1\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_least_once\"} 1\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_most_once\"} 1\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server as a Detached Application in PowerShell\nDESCRIPTION: This command starts the RabbitMQ server as a detached application, running in the background. It assumes the RabbitMQ sbin directory is in the system PATH.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows-manual.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-server.bat -detached\n```\n\n----------------------------------------\n\nTITLE: Using curl with JWT Token for RabbitMQ API\nDESCRIPTION: This command demonstrates how to use curl to hit a RabbitMQ management endpoint with a JWT token. It uses a make target that calls a Python script to build and sign the token.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=http://localhost:15672/api/overview TOKEN=$(bin/jwt_token scope-and-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Setting Inter-node Communication Buffer Size in RabbitMQ\nDESCRIPTION: These examples show how to increase the inter-node communication buffer size to 192MB using either an environment variable or a VM flag. This can help with heavy inter-node traffic or large message transfers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+zdbbl 192000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in Advanced Config\nDESCRIPTION: Example of setting specific feature flags in the RabbitMQ advanced.config file using the forced_feature_flags_on_init setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  {forced_feature_flags_on_init, [\n      maintenance_mode_status,\n      direct_exchange_routing_v2,\n      user_limits,\n      transient_nonexcl_queues,\n      amqp_address_v1,stream_filtering,\n      implicit_default_bindings,\n      quorum_queue_non_voters,\n      'rabbitmq_4.0.0',\n      tracking_records_in_ets,\n      delete_ra_cluster_mqtt_node,\n      classic_queue_type_delivery_support,\n      restart_streams,\n      message_containers_deaths_v2,\n      feature_flags_v2,empty_basic_get_metric,\n      classic_queue_mirroring,\n      rabbit_exchange_type_local_random,\n      detailed_queues_endpoint,\n      stream_queue,\n      classic_mirrored_queue_version,\n      quorum_queue,\n      management_metrics_collection,\n      message_containers,\n      ram_node_type,\n      stream_sac_coordinator_unblock_group,\n      drop_unroutable_metric,\n      stream_single_active_consumer,\n      virtual_host_metadata,\n      listener_records_in_ets,\n      stream_update_config_command,\n      global_qos,\n      queue_master_locator,\n      rabbit_mqtt_qos0_queue,mqtt_v5\n  ]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Failed Cluster Join Operation with Khepri in Minority State\nDESCRIPTION: Example of an error when attempting to join a node to a RabbitMQ cluster where Khepri can't establish a quorum. Shows both Bash and PowerShell variants of the command and resulting error message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/clustering.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@host-5 join_cluster rabbit@host-4\n\n# => Error:\n# => Khepri has timed out on node rabbit@host-5.\n# => Khepri cluster could be in minority.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat -n rabbit@host-5 join_cluster rabbit@host-4\n\n# => Error:\n# => Khepri has timed out on node rabbit@host-5.\n# => Khepri cluster could be in minority.\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Consumer in Ruby\nDESCRIPTION: Command to run the Ruby script that acts as a consumer, receiving messages from RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nruby receive.rb\n```\n\n----------------------------------------\n\nTITLE: Enabling Web STOMP Examples Plugin\nDESCRIPTION: Command to enable the RabbitMQ Web STOMP examples plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_stomp_examples\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat Timeout in .NET RabbitMQ Client\nDESCRIPTION: Example showing how to set the heartbeat timeout to 60 seconds using the ConnectionFactory in .NET client before creating a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/heartbeats.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\n\n// set the heartbeat timeout to 60 seconds\ncf.RequestedHeartbeat = TimeSpan.FromSeconds(60);\n```\n\n----------------------------------------\n\nTITLE: TLS Data Integrity Check Failure in RabbitMQ Connections\nDESCRIPTION: Error pattern indicating that the TLS server detected a data integrity issue. This can be caused by network equipment problems, socket sharing in clients, or bugs in TLS client implementations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n{tls_alert,\"bad record mac\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Operator Policy Changes in RabbitMQ Configuration\nDESCRIPTION: Configuration setting to disable modification of operator policies via the HTTP API and Web UI, making them read-only for all users through these interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.restrictions.operator_policy_changes.disabled = true\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy\nDESCRIPTION: IAM policy for allowing EC2 instances to use metadata service and autoscaling group member discovery\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n              {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                         \"autoscaling:DescribeAutoScalingInstances\",\n                         \"ec2:DescribeInstances\"\n                         ],\n              \"Resource\": [\n                           \"*\"\n                           ]\n              }\n              ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Encrypted Values with RabbitMQ CLI\nDESCRIPTION: Command for decrypting values using specified cipher, hash algorithm and iteration count\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '{encrypted,<<\"...\">>} mypassphrase'\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server with MQTT Plugin\nDESCRIPTION: Command to start the RabbitMQ server with the MQTT plugin and 4 scheduler threads. This is used for running latency benchmarks on a single node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-21-native-mqtt/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker PLUGINS=\"rabbitmq_mqtt\" RABBITMQ_CONFIG_FILE=\"rabbitmq.conf\" RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+S 4\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameter in RabbitMQ (Bash)\nDESCRIPTION: Sets the global runtime parameter 'mqtt_default_vhosts' with a JSON value using the rabbitmqctl command. Global parameters are not tied to a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_global_parameter mqtt_default_vhosts '{\"O=client,CN=guest\":\"/\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-origin Resource Sharing with Custom Cache Timeout in RabbitMQ Management\nDESCRIPTION: Sets up Cross-Origin Resource Sharing (CORS) with specific origins and a custom pre-flight request cache timeout of 1 hour (3600 seconds).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.cors.allow_origins.1 = https://origin1.org\nmanagement.cors.allow_origins.2 = https://origin2.org\nmanagement.cors.max_age         = 3600\n```\n\n----------------------------------------\n\nTITLE: Enabling Management Plugin in PowerShell\nDESCRIPTION: Command to enable the RabbitMQ management plugin using PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-plugins.bat enable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Reconciliation in Kubernetes\nDESCRIPTION: Commands to pause and resume reconciliation for a RabbitMQ cluster instance using Kubernetes labels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label rabbitmqclusters INSTANCE-NAME rabbitmq.com/pauseReconciliation=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label rabbitmqclusters INSTANCE-NAME rabbitmq.com/pauseReconciliation-\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shovel Status with HTTP API\nDESCRIPTION: Example curl command for checking status of all shovels using the RabbitMQ HTTP API. Requires the shovel management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host with Metadata Using CLI\nDESCRIPTION: Creates a virtual host with description, default queue type and tags using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1 --description \"QA env 1\" --default-queue-type quorum\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host with Metadata Using CLI\nDESCRIPTION: Creates a virtual host with description, default queue type and tags using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1 --description \"QA env 1\" --default-queue-type quorum\n```\n\n----------------------------------------\n\nTITLE: Using Configuration Files with RabbitMQ CLI\nDESCRIPTION: These commands demonstrate how to use configuration files with the rabbitmqadmin CLI tool, including specifying a custom configuration file path.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n# will use the settings from the section called [staging]\nrabbitmqadmin --node staging show churn\n```\n\nLANGUAGE: shell\nCODE:\n```\n# will use the settings from the section called [staging]\nrabbitmqadmin --config $HOME/.configuration/rabbitmqadmin.conf --node staging show churn\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Node Restart Settings\nDESCRIPTION: Configuration settings to adjust the timeout and retry parameters for RabbitMQ nodes when rejoining a cluster after restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# wait for 60 seconds instead of 30\nmnesia_table_loading_retry_timeout = 60000\n\n# retry 15 times instead of 10\nmnesia_table_loading_retry_limit = 15\n```\n\n----------------------------------------\n\nTITLE: Setting Inter-node Communication Buffer Size in RabbitMQ\nDESCRIPTION: These examples show how to increase the inter-node communication buffer size to 192MB using either an environment variable or a VM flag. This can help with heavy inter-node traffic or large message transfers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+zdbbl 192000\"\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Mono System-wide Trust Store on Linux\nDESCRIPTION: Bash command for adding a certificate to the system-wide Trust store on Linux systems using Mono. This makes the certificate trusted by all users on the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -add -c -m Trust /path/to/cacert.cer\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Web MQTT Plugin\nDESCRIPTION: Command to enable the RabbitMQ Web MQTT plugin using rabbitmq-plugins tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-mqtt.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_mqtt\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Queue in Go\nDESCRIPTION: Sets up asynchronous message consumption from the queue using a goroutine. Messages are printed to the log as they arrive.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmsgs, err := ch.Consume(\n  q.Name, // queue\n  \"\",     // consumer\n  true,   // auto-ack\n  false,  // exclusive\n  false,  // no-local\n  false,  // no-wait\n  nil,    // args\n)\nfailOnError(err, \"Failed to register a consumer\")\n\nvar forever chan struct{}\n\ngo func() {\n  for d := range msgs {\n    log.Printf(\"Received a message: %s\", d.Body)\n  }\n}()\n\nlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n<-forever\n```\n\n----------------------------------------\n\nTITLE: Implementing RabbitMQ Message Sender with Spring AMQP\nDESCRIPTION: Message sender class that uses Spring AMQP's RabbitTemplate to send \"Hello World!\" messages to a RabbitMQ queue at scheduled intervals using Spring's scheduling capabilities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Sender\npackage org.springframework.amqp.tutorials.tut1;\n\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\n\npublic class Tut1Sender {\n\n    @Autowired\n    private RabbitTemplate template;\n\n    @Autowired\n    private Queue queue;\n\n    @Scheduled(fixedDelay = 1000, initialDelay = 500)\n    public void send() {\n        String message = \"Hello World!\";\n        this.template.convertAndSend(queue.getName(), message);\n        System.out.println(\" [x] Sent '\" + message + \"'\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a RabbitMQ User with Basic Command Structure\nDESCRIPTION: Example showing the basic structure of the rabbitmqctl add_user command, which requires username and password as positional arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user <username> <password>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host with rabbitmqctl\nDESCRIPTION: Deletes a virtual host named 'qa1' using the rabbitmqctl command-line tool. This permanently removes the virtual host and all entities it contains.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost qa1\n```\n\n----------------------------------------\n\nTITLE: Adding a New User to RabbitMQ\nDESCRIPTION: This command creates a new non-administrative user named 'janeway' with the initial password 'changeit' in the RabbitMQ broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user janeway changeit\n```\n\n----------------------------------------\n\nTITLE: Default User Definition Example\nDESCRIPTION: JSON example showing how to define a default administrator user in the definitions file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    \"users\": [\n        {\n            \"name\": \"guest\",\n            \"password_hash\": \"9/1i+jKFRpbTRV1PtRnzFFYibT3cEpP92JeZ8YKGtflf4e/u\",\n            \"tags\": [\"administrator\"]\n        }\n    ],\n    \"permissions\":[\n        {\n            \"user\":\"guest\",\n            \"vhost\":\"/\",\n            \"configure\":\".*\",\n            \"read\":\".*\",\n            \"write\":\".*\"}\n    ]\n```\n\n----------------------------------------\n\nTITLE: Starting Stunnel for Client Connection Validation\nDESCRIPTION: Commands to prepare the certificate file and start stunnel for validating TLS-enabled client connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncat client_key.pem client_certificate.pem > client/key-cert.pem\nstunnel stunnel.conf\n```\n\n----------------------------------------\n\nTITLE: Listing Connection Properties in RabbitMQ\nDESCRIPTION: Command to display specific connection properties (send queue size and server port) for all connections in RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_connections send_pend port\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP Default User Credentials\nDESCRIPTION: Configuration to set default login and passcode for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_user = guest\nstomp.default_pass = guest\n```\n\n----------------------------------------\n\nTITLE: Creating CA Secret for Mutual TLS in RabbitMQ\nDESCRIPTION: Command to create a Kubernetes secret containing the Certificate Authority (CA) certificate used to sign client certificates for mutual TLS authentication in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic ca-secret --from-file=ca.crt=ca.pem\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Message Flow with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the basic structure of a RabbitMQ messaging system. It shows a producer (P) sending messages to an exchange (X), which then routes the messages to two queues (Q₁ and Q₂) based on bindings. The diagram uses custom CSS classes to distinguish between different components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T3DiagramBinding.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n\n    P --> X -- binding --> Q1 & Q2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for All Nodes in Bash\nDESCRIPTION: Bash command to set a policy that mirrors queues with names starting with \"ha.\" to all nodes in the cluster. This approach is generally not recommended for larger clusters due to resource waste.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy ha-all \"^ha\\.\" '{\"ha-mode\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Authentication for RabbitMQ Cluster Formation\nDESCRIPTION: Configuration for using authentication with etcd in RabbitMQ's cluster formation. This snippet demonstrates how to set up username and password for etcd access.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\ncluster_formation.etcd.username = rabbitmq\ncluster_formation.etcd.password = s3kR37\n```\n\n----------------------------------------\n\nTITLE: Defining Link-Credit Field in AMQP 1.0 Flow Frame\nDESCRIPTION: XML definition of the link-credit field in AMQP 1.0 flow frames. This field is used to grant credits to the sender, allowing it to send a specific number of messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"link-credit\" type=\"uint\"/>\n```\n\n----------------------------------------\n\nTITLE: Referencing Exchange-to-Exchange Bindings in Markdown\nDESCRIPTION: This snippet shows how to reference exchange-to-exchange bindings (E2E) in Markdown. It's used to introduce the concept of binding one exchange to another in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/exchanges.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Exchange-to-Exchange Bindings {#e2e}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenID Discovery Endpoint Path in RabbitMQ\nDESCRIPTION: This commented configuration line shows how to specify a custom discovery endpoint path for OAuth2 in RabbitMQ. By default, RabbitMQ uses the standard .well-known/openid-configuration path, but this can be changed to the Okta-specific path if needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-okta.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n#auth_oauth2.discovery_endpoint_path = .well-known/oauth-authorization-server\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Peer Discovery Plugin (Bash)\nDESCRIPTION: Commands demonstrating how to enable a peer discovery plugin in offline mode before first node boot. Uses rabbitmq-plugins CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable <plugin name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s\n```\n\n----------------------------------------\n\nTITLE: Location Format Pattern in Bash\nDESCRIPTION: Defines the format pattern for location fields in RabbitMQ OAuth 2.0 configuration. Shows the structure for cluster, vhost, queue/exchange, and routing-key patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncluster:<resource_server_id_pattern>[/vhost:<vhost_pattern>][/queue:<queue_name_pattern>|/exchange:<exchange_name_pattern>][/routing-key:<routing_key_pattern>]\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to RabbitMQ Queue\nDESCRIPTION: Code to publish a 'Hello World!' message to the 'hello' queue through the default exchange. In RabbitMQ, messages are always sent through an exchange, which then routes them to queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_publish(exchange='',\n                      routing_key='hello',\n                      body='Hello World!')\nprint(\" [x] Sent 'Hello World!\")\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth2 Authentication Setup in RabbitMQ .NET Client\nDESCRIPTION: Demonstrates how to set up OAuth2 authentication using the Client Credentials flow with the RabbitMQ .NET client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing RabbitMQ.Client.OAuth2;\n\nvar tokenEndpointUri = new Uri(\"http://somedomain.com/token\");\nvar oAuth2Client = new OAuth2ClientBuilder(\"client_id\", \"client_secret\", tokenEndpointUri).Build();\nICredentialsProvider credentialProvider = new OAuth2ClientCredentialsProvider(\"prod-uaa-1\", oAuth2Client);\n\nvar connectionFactory = new ConnectionFactory\n{\n  CredentialsProvider = credentialsProvider\n};\nvar connection = await connectionFactory.CreateConnectionAsync();\n```\n\n----------------------------------------\n\nTITLE: Verifying Erlang Distribution Port Configuration\nDESCRIPTION: Command to verify which port is being used for inter-node and CLI tool communication after configuring a custom distribution port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/windows-configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nepmd -names\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Service Status\nDESCRIPTION: Command to check the status of the RabbitMQ service as reported by the system service manager. This shows detailed information about the running process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# check on service status as observed by service manager\nsudo service rabbitmq-server status\n```\n\n----------------------------------------\n\nTITLE: Set Federation Policy in Bash\nDESCRIPTION: Command to set a federation policy that matches queues with a specific prefix and configures them to use all declared upstreams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-queues/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy queue-federation \"^federated\\.\" \\\n    '{\"federation-upstream-set\":\"all\"}' \\\n    --priority 10 \\\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Connection Pool\nDESCRIPTION: Configure the LDAP connection pool size and idle timeout for RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\nauth_ldap.connection_pool_size = 256\n# 300 seconds in milliseconds\nauth_ldap.idle_timeout = 300000\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Cluster\nDESCRIPTION: Command to create a new RabbitMQ cluster instance with basic configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq create INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Rotating RabbitMQ Log Files\nDESCRIPTION: Command to trigger internal log rotation for RabbitMQ logs. The rotation is performed asynchronously based on logging settings in the configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl rotate_logs\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Producer Implementation in PHP\nDESCRIPTION: This is the full implementation of a RabbitMQ producer in PHP. It declares a durable queue, creates a persistent message, and publishes it to the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->queue_declare('task_queue', false, true, false, false);\n\n$data = implode(' ', array_slice($argv, 1));\nif (empty($data)) {\n    $data = \"Hello World!\";\n}\n$msg = new AMQPMessage(\n    $data,\n    array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)\n);\n\n$channel->basic_publish($msg, '', 'task_queue');\n\necho ' [x] Sent ', $data, \"\\n\";\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Inspecting Messaging Topology Operator Logs in Kubernetes\nDESCRIPTION: This command retrieves the logs of the Messaging Topology Operator pods in the rabbitmq-system namespace, which can provide valuable information for troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-topology-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system logs -l app.kubernetes.io/name=messaging-topology-operator\n```\n\n----------------------------------------\n\nTITLE: Setting User Limits via HTTP API\nDESCRIPTION: This snippet shows the HTTP API endpoint and request body format for setting user limits. It sets a limit of 20 for the specified limit type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/user-limits/{username}/{limit}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"value\": 20}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Connection Settings in rabbitmq.conf\nDESCRIPTION: Basic TCP connection settings including backlog and nodelay options in the new style configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 4096\ntcp_listen_options.nodelay = true\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream and Publishing a Message\nDESCRIPTION: Java code for creating a RabbitMQ stream with a 5GB size limit and publishing a 'Hello, World!' message to it. This is the core functionality of the producer application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString stream = \"hello-java-stream\";\nenvironment.streamCreator().stream(stream).maxLengthBytes(ByteCapacity.GB(5)).create();\nProducer producer = environment.producerBuilder().stream(stream).build();\nproducer.send(producer.messageBuilder().addData(\"Hello, World!\".getBytes()).build(), null);\nSystem.out.println(\" [x] 'Hello, World!' message sent\");\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Metric Tables in Markdown\nDESCRIPTION: Collection of markdown tables documenting RabbitMQ metrics across different categories including queue metrics, exchange metrics, connection metrics, and channel metrics. Each table contains metric names and their descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                            | Description          |\n|-----------------------------------|----------------------|\n| rabbitmq_detailed_queue_consumers | Consumers on a queue |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                            | Description                                                |\n|---------------------------------------------------|------------------------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                                        | Description                                                                                                  |\n|---------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                                | Description                                    |\n|-------------------------------------------------------|------------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                              | Description                                          |\n|-----------------------------------------------------|------------------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                         | Description                                                           |\n|------------------------------------------------|-----------------------------------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                             | Description                                |\n|----------------------------------------------------|--------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Analysis for AMQP 1.0 in RabbitMQ 4.0\nDESCRIPTION: Erlang shell output showing memory statistics and process count for RabbitMQ 4.0's AMQP 1.0 implementation. Shows total memory usage of 5.3GB with approximately 360K processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n1> erlang:memory().\n[{total,5330809208},\n {processes,4788022888},\n {processes_used,4787945960},\n {system,542786320},\n {atom,999681},\n {atom_used,974364},\n {binary,194810368},\n {code,19328950},\n {ets,94161808}]\n\n2> erlang:system_info(process_count).\n360312\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Buffer Size for MQTT Connections in RabbitMQ\nDESCRIPTION: Configuration settings to optimize TCP buffers for MQTT connections to 32 KiB, reducing per-connection memory usage at the cost of throughput.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.linger.on      = true\nmqtt.tcp_listen_options.linger.timeout = 0\nmqtt.tcp_listen_options.sndbuf  = 32768\nmqtt.tcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Feature Flag with Shell Command\nDESCRIPTION: Command to enable a specific feature flag (rabbitmq_4.0.0) in a RabbitMQ cluster using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin feature_flags enable rabbitmq_4.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow Behavior Policy with rabbitmqctl (Windows PowerShell)\nDESCRIPTION: This command sets a policy named 'my-pol' that limits the 'two-messages' queue to 2 messages and sets the overflow behavior to reject new publishes using rabbitmqctl in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/maxlength/index.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy my-pol \"^two-messages$\" ^\n  \"{\"\"max-length\"\":2,\"\"overflow\"\":\"\"reject-publish\"\"}\" ^\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Parameter in Bash\nDESCRIPTION: Command to define a federation upstream connection parameter using rabbitmqctl. This configures a connection to a remote node with a one-hour message buffer expiration time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# target.hostname is just an example, replace it with a URI\n# of the target node (usually a member of a remote node/cluster,\n# or a URI that connects to a different virtual host within the same cluster)\nrabbitmqctl set_parameter federation-upstream my-upstream \\\n    '{\"uri\":\"amqp://target.hostname\",\"expires\":3600000}'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Transport and RFC 5424 Protocol for Syslog Logging in RabbitMQ\nDESCRIPTION: This snippet configures Syslog logging to use TCP transport and the RFC 5424 protocol in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.transport = tcp\nlog.syslog.protocol = rfc5424\n```\n\n----------------------------------------\n\nTITLE: Resulting Effective Allocator Settings After Override\nDESCRIPTION: The combined allocator settings that result from applying a specific override to the default allocator settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"+MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 8192 +MMmcs 30\"\n```\n\n----------------------------------------\n\nTITLE: Adding amqp_client Dependency with Rebar 3 for Erlang\nDESCRIPTION: Specifies how to add the rabbit_common dependency to an Erlang project using Rebar 3. This is required for using the Erlang RabbitMQ client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit_common, \"&version-erlang-client;\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Configuration\nDESCRIPTION: Default authentication backend configuration for RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = internal\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Keepalives for RabbitMQ in sysctl\nDESCRIPTION: This snippet shows an example sysctl configuration for TCP keepalives. It sets up TCP connections to be considered dead or unreachable after 70 seconds (4 attempts every 10 seconds after connection idle for 30 seconds).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_keepalive_time=30\nnet.ipv4.tcp_keepalive_intvl=10\nnet.ipv4.tcp_keepalive_probes=4\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key for apt (Bash)\nDESCRIPTION: Downloads and imports the RabbitMQ signing key for Debian-based systems using apt.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg\n```\n\n----------------------------------------\n\nTITLE: Analyzing Channel Memory Usage with RabbitMQ Diagnostics\nDESCRIPTION: Uses the rabbitmq-diagnostics command to display memory breakdown, focusing on the memory used by connection channels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics memory_breakdown -q --unit mb\n# => [elided for brevity]\n# ...\n# => connection_channels: 3.596 mb (2.27%)\n# ...\n# => [elided for brevity]\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from a RabbitMQ Cluster using CLI\nDESCRIPTION: Series of commands to remove the current node from a RabbitMQ cluster. This process stops the application without terminating the Erlang runtime, resets the node configuration, and starts it again as a standalone node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/clustering.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Stop RabbitMQ without stopping the runtime (its OS process).\nrabbitmqctl stop_app\n\n# Reset it.\nrabbitmqctl reset\n\n# Restart the node as a blank one.\nrabbitmqctl start_app\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Patterns in Erlang\nDESCRIPTION: Demonstrates the basic boolean query patterns (not, and, or) used in LDAP authorization queries. These patterns can be combined to create complex authorization rules.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_27\n\nLANGUAGE: erlang\nCODE:\n```\n{'not', SubQuery}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{'and', [SubQuery1, SubQuery2, SubQuery3, ...]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{'or', [SubQuery1, SubQuery2, SubQuery3, ...]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in RabbitMQ advanced.config\nDESCRIPTION: Erlang configuration snippet for the advanced.config file that specifies which feature flags should be enabled when a new RabbitMQ node initializes for the first time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n%% ...\n{rabbit, [\n  %% this is just an example, in practice this list will be much longer\n  {forced_feature_flags_on_init, [quorum_queue, implicit_default_bindings]}\n]},\n%% ...\n```\n\n----------------------------------------\n\nTITLE: Query Parameters Example\nDESCRIPTION: Examples of supported query parameters for sorting and filtering API responses\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nsort\nsort_reverse\ncolumns\ndisable_stats\n```\n\n----------------------------------------\n\nTITLE: Logging Graceful AMQP Connection Closure in RabbitMQ\nDESCRIPTION: Example log entry for a gracefully closed AMQP connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-06-17 06:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in PowerShell\nDESCRIPTION: Configures a federation policy for exchanges with name pattern '^amq\\.' using PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy --apply-to exchanges federate-me \"^amq\\.\" `\n    '\"{\"\"federation-upstream-set\"\":\"\"all\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to RabbitMQ Cluster Operator Deployment\nDESCRIPTION: YAML snippet showing how to modify the RabbitMQ Cluster Operator deployment manifest to add the OPERATOR_SCOPE_NAMESPACE environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/configure-operator-defaults.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/component: rabbitmq-operator\n    app.kubernetes.io/name: rabbitmq-cluster-operator\n    app.kubernetes.io/part-of: rabbitmq\n  name: rabbitmq-cluster-operator\n  namespace: rabbitmq-system\nspec:\n  template:\n    spec:\n      containers:\n      - command:\n        - /manager\n        env:\n        - name: OPERATOR_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OPERATOR_SCOPE_NAMESPACE\n          value: \"custom-namespace,my-namespace\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Log Exchange Configuration\nDESCRIPTION: Configuration settings to enable and configure the system log exchange feature.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\n# activate log forwarding to amq.rabbitmq.log, a topic exchange\\nlog.exchange = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat Timeout in RabbitMQ\nDESCRIPTION: Default configuration for the heartbeat timeout suggested by the server during connection parameter negotiation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nheartbeat = 60\n```\n\n----------------------------------------\n\nTITLE: Stopping the RabbitMQ Node\nDESCRIPTION: This command stops the Erlang node on which RabbitMQ is running. It can optionally wait for a specified process to terminate if a pid_file is provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Import on Boot\nDESCRIPTION: Configuration that enables automatic import of definitions from a local file during node startup. This doesn't require the management plugin to be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled.\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/defs.json\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Custom Scopes\nDESCRIPTION: Example JWT token structure using custom scopes in the scope field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"producer\",\n  \"scope\": [\n    \"api://rabbitmq:producer\",\n    \"api://rabbitmq:Administrator\"\n  ],\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Log Message Format Configuration in RabbitMQ\nDESCRIPTION: Configuration showing the default log message format pattern. This controls how log entries are structured, including timestamp, level, process ID, and message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\n# '$time [$level] $pid $msg' is the default format\nlog.console.formatter.plaintext.format = $time [$level] $pid $msg\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration for Web MQTT\nDESCRIPTION: INI configuration showing TLS/SSL settings for secure WebSocket connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-mqtt.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.ssl.port       = 15676\nweb_mqtt.ssl.backlog    = 1024\nweb_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem\nweb_mqtt.ssl.certfile   = /path/to/server_certificate.pem\nweb_mqtt.ssl.keyfile    = /path/to/server_key.pem\n# needed when private key has a passphrase\n# web_mqtt.ssl.password   = changeme\n```\n\n----------------------------------------\n\nTITLE: Creating a New Durable Queue in RabbitMQ with Python\nDESCRIPTION: Creating a new durable queue with a different name to avoid conflicts with existing queues that have different parameters. This approach ensures queue durability without causing errors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nchannel.queue_declare(queue='task_queue', durable=True)\n```\n\n----------------------------------------\n\nTITLE: Purging a Queue\nDESCRIPTION: Shows how to purge all messages from a queue in a specific virtual host. This removes all messages without deleting the queue itself.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" purge queue --name \"target.queue.name\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Plugin Network Interface in RabbitMQ\nDESCRIPTION: This code demonstrates how to set the network interface for the Prometheus plugin API endpoint using the prometheus.tcp.ip key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.tcp.ip = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Logging Node Unavailability in RabbitMQ\nDESCRIPTION: This snippet shows a log message generated when a RabbitMQ node detects that another node has gone down due to a net tick timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/nettick.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n2018-11-22 10:44:33.654 [info] node rabbit@peer-hostname down: net_tick_timeout\n```\n\n----------------------------------------\n\nTITLE: Enable Virtual Host Deletion Protection\nDESCRIPTION: Command to enable deletion protection for a RabbitMQ virtual host using rabbitmqctl\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_vhost_protection_from_deletion \"vhost-name\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Category Log Level\nDESCRIPTION: Configures the default category to only log error or higher severity messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nlog.default.level = error\n```\n\n----------------------------------------\n\nTITLE: Logging Node Unavailability in RabbitMQ\nDESCRIPTION: This snippet shows a log message generated when a RabbitMQ node detects that another node has gone down due to a net tick timeout.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/nettick.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n2018-11-22 10:44:33.654 [info] node rabbit@peer-hostname down: net_tick_timeout\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication with rabbitmqctl in PowerShell\nDESCRIPTION: This command uses rabbitmqctl to test authentication for a username and password pair in a PowerShell environment. It shows how to handle special characters in the password.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n# note that double quotes are required due to the & character\nrabbitmqctl.bat authenticate_user 'a-username' '\"a/p&assword\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Address Type for RabbitMQ Kubernetes Peer Discovery\nDESCRIPTION: Controls whether to use hostnames or IP addresses when discovering peer nodes through Kubernetes. Using hostnames requires stateful sets and headless services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# should result set use hostnames or IP addresses\n# of Kubernetes API-reported containers?\n# supported values are \"hostname\" and \"ip\"\ncluster_formation.k8s.address_type = hostname\n```\n\n----------------------------------------\n\nTITLE: Removing RabbitMQ Data Directory for Clean Test Environment\nDESCRIPTION: This command recursively removes the test-rabbit directory which contains RabbitMQ data. This is done to prepare for testing a different version of RabbitMQ with the same test scenario.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf test-rabbit\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for All Nodes in PowerShell\nDESCRIPTION: PowerShell command to set a policy that mirrors queues with names starting with \"ha.\" to all nodes in the cluster. This approach is generally not recommended for larger clusters due to resource waste.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy ha-all \"^ha\\.\" \"{\"\"ha-mode\"\":\"\"all\"\"}\"\n```\n\n----------------------------------------\n\nTITLE: Clearing DNF Package Cache\nDESCRIPTION: Commands for cleaning local DNF package manager cache to force metadata refresh from repositories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf clean metadata\n\ndnf clean dbcache\n\ndnf clean all\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Message Flow with Mermaid\nDESCRIPTION: This Mermaid flowchart diagram illustrates a basic RabbitMQ messaging pattern. It shows a producer (P) sending messages to a central queue (Q), which are then received by two consumers (C₁ and C₂). Custom CSS classes are used to style each component in the visualization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T2DiagramToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    Q[[Queue]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> Q --> C1 & C2\n\n    class P mermaid-producer\n    class Q mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Cluster Port Configuration\nDESCRIPTION: Lists the essential ports used for RabbitMQ cluster communication, including epmd (4369), stream replication (6000-6500), inter-node communication (25672), and CLI tools (35672-35682).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n4369: epmd\n6000-6500: stream replication\n25672: inter-node communication\n35672-35682: CLI tools\n```\n\n----------------------------------------\n\nTITLE: Initializing RabbitMQ Workers and Tasks in Objective-C\nDESCRIPTION: This viewDidLoad implementation demonstrates how to start workers and send multiple tasks to a RabbitMQ queue. It shows how the round-robin dispatching works by starting two workers and sending five tasks with different processing times.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self workerNamed:@\"Jack\"];\n    [self workerNamed:@\"Jill\"];\n    [self newTask:@\"Hello World...\"];\n    [self newTask:@\"Just one this time.\"];\n    [self newTask:@\"Five.....\"];\n    [self newTask:@\"None\"];\n    [self newTask:@\"Two..dots\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Erlang Repository for Ubuntu 20.04\nDESCRIPTION: This snippet shows the configuration for adding the Launchpad PPA repository for Erlang packages on Ubuntu 20.04 (Focal). It specifies the repository URL, architecture, and signing key location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# This Launchpad PPA repository provides Erlang packages produced by the RabbitMQ team\n#\n# Replace $distribution with the name of the Ubuntu release used\ndeb [arch=amd64 signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Policy in PowerShell\nDESCRIPTION: PowerShell command to set an operator policy named 'transient-queue-ttl' that applies an 1800000ms expiration to queues matching the pattern '^amq\\.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_operator_policy transient-queue-ttl ^\n    \"^amq\\.\" \"{\"\"\npires\"\": 1800000}\" ^\n    --priority 1 ^\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Referencing RabbitMQ Web STOMP Examples Plugin\nDESCRIPTION: Code reference showing how to mention the rabbitmq_web_stomp_examples plugin that provides examples for the Web STOMP functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nrabbitmq_web_stomp_examples\n```\n\n----------------------------------------\n\nTITLE: Setting Fair Dispatch with Prefetch Count in RabbitMQ with Python\nDESCRIPTION: Setting the prefetch count to 1 ensures that RabbitMQ doesn't dispatch more than one message to a worker at a time, enabling fair distribution of workload among multiple workers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_qos(prefetch_count=1)\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Queue\nDESCRIPTION: Creates a temporary queue with a server-generated name that will be deleted when the connection closes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-python.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = channel.queue_declare(queue='', exclusive=True)\n```\n\n----------------------------------------\n\nTITLE: Defining a For Query in RabbitMQ LDAP Authentication\nDESCRIPTION: A complex query that allows different subqueries to be executed based on variable values. Enables conditional authorization logic depending on resource type, permission type, or other variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_25\n\nLANGUAGE: erlang\nCODE:\n```\n{for, [{Name, Value, SubQuery}, ...]}\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Status using PowerShell\nDESCRIPTION: Command to perform basic node health check and display information about the running RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows-manual.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat status\n```\n\n----------------------------------------\n\nTITLE: Displaying Process Limits\nDESCRIPTION: Command to show the effective limits of the RabbitMQ process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/$RABBITMQ_BEAM_PROCESS_PID/limits\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to an Exchange via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to publish a message to an exchange using the PUT /api/exchanges/{vhost}/{name}/publish endpoint. It includes message properties, routing key, payload, and encoding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {},\n  \"routing_key\": \"my key\",\n  \"payload\": \"my body\",\n  \"payload_encoding\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Erlang Repository for Ubuntu 20.04 (Focal)\nDESCRIPTION: Adds the Launchpad PPA repository for Erlang packages produced by the RabbitMQ team to /etc/apt/sources.list.d/erlang.list for Ubuntu 20.04 (Focal). This repository is specifically for amd64 architecture and uses GPG key verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# This Launchpad PPA repository provides Erlang packages produced by the RabbitMQ team\n#\n# Replace $distribution with the name of the Ubuntu release used\ndeb [arch=amd64 signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main\n```\n\n----------------------------------------\n\nTITLE: Changing Cluster Node Type\nDESCRIPTION: Changes a node's type between disc and ram while the node is stopped. Cannot convert the only disc node to a RAM node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl change_cluster_node_type disc\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queue Only if Empty in RabbitMQ Java Client\nDESCRIPTION: Deletes a queue only if it has no messages. The operation will fail if the queue contains messages, leaving it intact.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDelete(\"queue-name\", false, true)\n```\n\n----------------------------------------\n\nTITLE: Advanced TLS Configuration for RabbitMQ etcd Peer Discovery\nDESCRIPTION: Advanced TLS configuration for RabbitMQ's etcd-based peer discovery. This snippet demonstrates how to set up secure renegotiation and specify cipher suites.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n\n# use secure session renegotiation\ncluster_formation.etcd.ssl_options.secure_renegotiate   = true\n\n# Explicitly list enabled cipher suites. This can break connectivity\n# and is not necessary most of the time.\ncluster_formation.etcd.ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n```\n\n----------------------------------------\n\nTITLE: Setting up RabbitMQ Stream Client Dependency with Maven\nDESCRIPTION: Maven dependency configuration for including the RabbitMQ Stream Java client in a project. This XML snippet should be added to the project's pom.xml file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.rabbitmq</groupId>\n    <artifactId>stream-client</artifactId>\n    <version>0.16.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Executing RabbitMQ Stream Programs via Maven\nDESCRIPTION: Shell commands to run the sender and receiver programs using Maven.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java '-Dexec.mainClass=OffsetTrackingSend'\n```\n\n----------------------------------------\n\nTITLE: Overriding Memory Allocator Settings\nDESCRIPTION: Example of overriding specific memory allocator settings using RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+MHlmbcs 8192\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Verification in RabbitMQ (New Format)\nDESCRIPTION: Configuration example for enabling TLS peer verification in RabbitMQ using the new style configuration format. Sets up the SSL listener, certificate paths, and peer verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile = /path/to/server_certificate.pem\nssl_options.keyfile = /path/to/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: List Mirrored Queue Policies in RabbitMQ\nDESCRIPTION: Bash script to list all policies that apply ha-mode (mirroring) across all virtual hosts in RabbitMQ. Outputs vhost, policy name, pattern, apply_to, definition and priority.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-02-quorum-queues-migration/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nprintf \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\" vhost policy_name pattern apply_to definition priority\nfor vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do\n  rabbitmqctl -q list_policies -p \"$vhost\" |\n    grep 'ha-mode'\ndone\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags in RabbitMQ\nDESCRIPTION: This command lists all feature flags in RabbitMQ, showing their names and current states. It's useful for understanding which features are enabled or disabled in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Value in RabbitMQ CLI Tool\nDESCRIPTION: Example of passing an Erlang cookie value directly to a RabbitMQ CLI command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status --erlang-cookie \"cookie-value\"\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Parameters in Bash\nDESCRIPTION: This command demonstrates how to set parameters for a federation upstream using rabbitmqctl. The 'name' placeholder should be replaced with the actual upstream name, and 'json-object' with the upstream configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream 'name' 'json-object'\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Message Routing with Topic Exchange in Mermaid\nDESCRIPTION: This Mermaid flowchart depicts a RabbitMQ messaging topology with a producer (P), exchange (X), two queues (Q₁, Q₂), and two consumers (C₁, C₂). It shows different routing patterns using topic-style binding keys including '#42;.orange.#42;', '#42;.#42;.rabbit', and 'lazy.#' to demonstrate message routing flexibility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T5DiagramTopicX.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X -- #42;.orange.#42; --> Q1\n    X -- #42;.#42;.rabbit --> Q2\n    X -- lazy.# --> Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Listing Channel Details\nDESCRIPTION: Uses rabbitmqctl to list individual channel details including user, consumer count, and unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels -q\n# => pid\tuser\tconsumer_count\tmessages_unacknowledged\n# => <rabbit@mercurio.3.815.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.820.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.824.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.828.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.832.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.839.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.840.0>\tguest\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name in Bash\nDESCRIPTION: Command to set a new name for the RabbitMQ cluster using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q set_cluster_name testing-prometheus\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Custom Scopes in Roles Field\nDESCRIPTION: This JWT token example shows custom scopes in the 'roles' field instead of the standard 'scope' field. This format would be used when RabbitMQ is configured with 'additional_scopes_key = roles'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"rabbitmq-client-code\",\n  \"roles\": \"api://rabbitmq:Administrator.All\",\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP DN Lookup Bindings in INI Format\nDESCRIPTION: Configuration example for LDAP DN lookup binding settings, including user DN, password, lookup attribute and base DN.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.dn_lookup_bind.user_dn = CN=myuser,OU=users,DC=gopivotal,DC=com\nauth_ldap.dn_lookup_bind.password = test1234\nauth_ldap.dn_lookup_attribute = userPrincipalName\nauth_ldap.dn_lookup_base = DC=gopivotal,DC=com\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth 2.0 Plugin in RabbitMQ\nDESCRIPTION: Command to enable the OAuth 2.0 authentication backend plugin in RabbitMQ. This must be done before the plugin can be used for authentication and authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_auth_backend_oauth2\n```\n\n----------------------------------------\n\nTITLE: Configuring EPMD Interface and Port\nDESCRIPTION: These environment variable settings configure the EPMD (Erlang Port Mapping Daemon) to listen on specific interfaces and ports. This affects how RabbitMQ nodes discover each other in a cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# makes epmd listen on loopback IPv6 and IPv4 interfaces\nexport ERL_EPMD_ADDRESS=\"::1\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Stops local epmd process.\n# Use after shutting down RabbitMQ.\nepmd -kill\n```\n\nLANGUAGE: bash\nCODE:\n```\n# makes epmd bind to port 4369\nexport ERL_EPMD_PORT=\"4369\"\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key via Key Server\nDESCRIPTION: Imports the RabbitMQ signing key from various key servers using GPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/signatures.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"hkps://keys.openpgp.org\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"keyserver.ubuntu.com\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"pgp.surfnet.nl\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"pgp.mit.edu\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Epoch Timestamp Format\nDESCRIPTION: Configuration to use Unix epoch microseconds for timestamp formatting in console output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n\n# use microseconds since UNIX epoch for timestamp format\nlog.console.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Declaring an Exchange via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to declare an exchange using the PUT /api/exchanges/{vhost}/{name} endpoint. It specifies the exchange type, durability, and other properties.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"direct\",\n  \"auto_delete\": false,\n  \"durable\": true,\n  \"internal\": false,\n  \"arguments\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP API Authentication with OAuth 2.0 Token\nDESCRIPTION: Example of using an OAuth token with HTTP basic authentication syntax against the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# swap <token> for an actual token\ncurl -i -u ignored:<token> http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Setting Unlimited Prefetch in Java\nDESCRIPTION: This example shows how to set an unlimited prefetch by passing 0 to the basicQos method, allowing any number of unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-prefetch.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nchannel.basicQos(0); // No limit for this consumer\nchannel.basicConsume(\"my-queue\", false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Name in RabbitMQ\nDESCRIPTION: Configuration setting to override the default log file name in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Enabling Federation Plugin in RabbitMQ\nDESCRIPTION: Commands to enable the RabbitMQ federation plugin and its management UI extension using rabbitmq-plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_federation\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_federation_management\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Connection to RabbitMQ with Telnet (Failed Attempt)\nDESCRIPTION: Example of a failed telnet connection attempt to port 5673, which is not in use by RabbitMQ. This demonstrates how connection failures appear when a port is not accessible or not bound by any service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 5673\n# => Trying ::1...\n# => telnet: connect to address ::1: Connection refused\n# => Trying 127.0.0.1...\n# => telnet: connect to address 127.0.0.1: Connection refused\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Broker Version Requirements\nDESCRIPTION: Example of specifying RabbitMQ broker version requirements in a plugin's application environment configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{application, my_plugin,[\n    %% ...\n    {broker_version_requirements, [\"3.11.15\", \"3.10.22\"]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Transport for apt\nDESCRIPTION: This command installs the apt-transport-https package, which is necessary for apt to download RabbitMQ and Erlang packages from Cloudsmith.io mirror or Launchpad.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apt-transport-https\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Allocator Settings in RabbitMQ\nDESCRIPTION: Example of overriding a specific memory allocator setting (high-level carrier size) while keeping other defaults intact.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+MHlmbcs 8192\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Virtual Host in RabbitMQ\nDESCRIPTION: Default configuration for the virtual host created when RabbitMQ initializes a new database from scratch.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ndefault_vhost = /\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS Application Firewall for Erlang CLI Tools\nDESCRIPTION: Commands to allow Erlang CLI tools to bind to ports and accept inbound connections through the MacOS Application Firewall. These commands add the Erlang runtime to the firewall's allowed applications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n# allow CLI tools and shell to bind to ports and accept inbound connections\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\n```\n\n----------------------------------------\n\nTITLE: Cut Example with Mathematical Function in Erlang\nDESCRIPTION: Illustrates how cuts are applied to the shallowest enclosing expression, in this case creating a fun for the pow function call.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\nlist_to_binary([1, 2, math:pow(2, _)]).\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for STOMP Connections\nDESCRIPTION: Configuration to enable TLS for STOMP connections, including certificate paths and verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile = /path/to/tls/ca_certificate.pem\nssl_options.certfile   = /path/to/tls/server_certificate.pem\nssl_options.keyfile    = /path/to/tls/server_key.pem\nssl_options.verify     =  verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nstomp.listeners.tcp.1 = 61613\n# default TLS-enabled port for STOMP connections\nstomp.listeners.ssl.1 = 61614\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation\nDESCRIPTION: Full implementation of a program that emits logs with different severity levels using RabbitMQ direct exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='direct_logs', exchange_type='direct')\n\nseverity = sys.argv[1] if len(sys.argv) > 1 else 'info'\nmessage = ' '.join(sys.argv[2:]) or 'Hello World!'\nchannel.basic_publish(\n    exchange='direct_logs', routing_key=severity, body=message)\nprint(f\" [x] Sent {severity}:{message}\")\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Bindings with rabbitmqctl\nDESCRIPTION: Command to list all bindings in the RabbitMQ server and its sample output. This shows how the 'logs' exchange is connected to multiple queues with server-generated names, confirming the publish/subscribe setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_bindings\n# => Listing bindings ...\n# => logs    exchange        amq.gen-JzTY20BRgKO-HjmUJj0wLg  queue           []\n# => logs    exchange        amq.gen-vso0PVvyiRIL2WoV3i48Yg  queue           []\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Memory Threshold in Bytes\nDESCRIPTION: Configures an absolute memory limit of 1024 MiB (1073741824 bytes) for the RabbitMQ node. When memory usage exceeds this limit, a resource alarm will be triggered and publishers will be blocked.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 1073741824\n```\n\n----------------------------------------\n\nTITLE: AMQP 0-9-1 Operation Permissions Table in Markdown\nDESCRIPTION: This table shows the required permissions (configure, write, read) for various AMQP 0-9-1 operations on different resource types in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <tr>\n    <th>AMQP 0-9-1 Operation</th>\n    <th></th>\n    <th>configure</th>\n    <th>write</th>\n    <th>read</th>\n  </tr>\n  <tr>\n    <td>exchange.declare</td><td>(passive=false)</td><td>exchange</td><td/><td/>\n  </tr>\n  <tr>\n    <td>exchange.declare</td><td>(passive=true)</td><td></td><td/><td/>\n  </tr>\n  <tr>\n    <td>exchange.declare</td><td>(with <a href=\"./ae\">AE</a>)</td><td>exchange</td><td>exchange (AE)</td><td>exchange</td>\n  </tr>\n  <tr>\n    <td>exchange.delete</td><td/><td>exchange</td><td/><td/>\n  </tr>\n  <tr>\n    <td>queue.declare</td><td>(passive=false)</td><td>queue</td><td/><td/>\n  </tr>\n  <tr>\n    <td>queue.declare</td><td>(passive=true)</td><td></td><td/><td/>\n  </tr>\n  <tr>\n    <td>queue.declare</td><td>(with <a href=\"./dlx\">DLX</a>)</td><td>queue</td><td>exchange (DLX)</td><td>queue</td>\n  </tr>\n  <tr>\n    <td>queue.delete</td><td/><td>queue</td><td/><td/>\n  </tr>\n  <tr>\n    <td>exchange.bind</td><td/><td/><td>exchange (destination)</td><td>exchange (source)</td>\n  </tr>\n  <tr>\n    <td>exchange.unbind</td><td/><td/><td>exchange (destination)</td><td>exchange (source)</td>\n  </tr>\n  <tr>\n    <td>queue.bind</td><td/><td/><td>queue</td><td>exchange</td>\n  </tr>\n  <tr>\n    <td>queue.unbind</td><td/><td/><td>queue</td><td>exchange</td>\n  </tr>\n  <tr>\n    <td>basic.publish</td><td/><td/><td>exchange</td><td/>\n  </tr>\n  <tr>\n    <td>basic.get</td><td/><td/><td/><td>queue</td>\n  </tr>\n  <tr>\n    <td>basic.consume</td><td/><td/><td/><td>queue</td>\n  </tr>\n  <tr>\n    <td>queue.purge</td><td/><td/><td/><td>queue</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Listing Consumers in a Specific Stream Group using CLI\nDESCRIPTION: This command lists all consumers in a specific stream group, providing details such as subscription ID, connection name, and state of each consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmqctl list_stream_group_consumers --stream single-active-consumer --reference my-app\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ User with Auto-generated Credentials\nDESCRIPTION: Kubernetes manifest for creating a RabbitMQ user with auto-generated username and password using the Messaging Topology Operator. The user is assigned the 'policymaker' tag and is associated with a RabbitMQ cluster named 'example-rabbitmq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: User\nmetadata:\n  name: user-example\n  namespace: rabbitmq-system\nspec:\n  tags:\n  - policymaker\n  rabbitmqClusterReference:\n    name: example-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Listing Queue Statistics\nDESCRIPTION: This command lists the statistics of the queues, including their names, types, and message counts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet \\\n    name type messages messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Signatures (Bash)\nDESCRIPTION: Demonstrates how to verify the signature of a downloaded RabbitMQ package using GPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify [filename].asc [filename]\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Java Client with Micrometer for JMX and Datadog\nDESCRIPTION: This code snippet showcases how to configure the RabbitMQ Java client to send metrics to both JMX and Datadog using Micrometer. It uses a CompositeMeterRegistry to combine JMX and Datadog registries, and simulates instances across different data centers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfor (String dc : new String[] {\"us\", \"europe\", \"asia\"}) {\n    CompositeMeterRegistry compositeMeterRegistry = new CompositeMeterRegistry();\n    MeterRegistry datadogRegistry = new DatadogMeterRegistry(config, Clock.SYSTEM);\n    MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\n\n    Tags tags = Tags.of(\"host\", hostname, \"dc\", dc);\n    new ClassLoaderMetrics(tags).bindTo(compositeMeterRegistry);\n    new JvmMemoryMetrics(tags).bindTo(compositeMeterRegistry);\n    new JvmGcMetrics(tags).bindTo(compositeMeterRegistry);\n    new ProcessorMetrics(tags).bindTo(compositeMeterRegistry);\n    new JvmThreadMetrics(tags).bindTo(compositeMeterRegistry);\n\n    compositeMeterRegistry.add(datadogRegistry);\n    compositeMeterRegistry.add(jmxRegistry);\n\n    ConnectionFactory connectionFactory = new ConnectionFactory();\n    MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\n        compositeMeterRegistry, \"rabbitmq.client\", tags\n    );\n    connectionFactory.setMetricsCollector(metricsCollector);\n\n    Connection connection = connectionFactory.newConnection();\n    Channel channel = connection.createChannel();\n    String queue = channel.queueDeclare().getQueue();\n    channel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\n    executor.submit(() -> {\n        Random random = new Random();\n        int offset = dc.length() * 10;\n        while (true) {\n            Thread.sleep(random.nextInt(100) + offset);\n            channel.basicPublish(\"\", queue, null, \"\".getBytes());\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Policy Error Message\nDESCRIPTION: Browser console error message indicating that the OpenID endpoint access is blocked by CORS policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAccess to fetch at 'https://<the_issuer_url>>/.well-known/openid-configuration' from origin\n'<rabbitmq_url_to_management_ui>' has been blocked by CORS policy\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Policy in Bash\nDESCRIPTION: Command to set an operator policy for queues with names starting with 'amq.' to expire after 1800000 milliseconds using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_operator_policy transient-queue-ttl \\\n    \"^amq\\.\" '{\"expires\":1800000}' \\\n    --priority 1 \\\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Asserting Fanout Exchange in RabbitMQ\nDESCRIPTION: Creates a fanout exchange named 'logs' that broadcasts all messages to connected queues. The exchange is not durable, meaning it won't survive broker restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nch.assertExchange('logs', 'fanout', {durable: false})\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Objective-C\nDESCRIPTION: Binds a queue to an exchange, establishing the relationship for message routing. In this case, it's binding to a fanout exchange for broadcast messaging.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-objectivec.md#2025-04-09_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\n[q bind:x];\n```\n\n----------------------------------------\n\nTITLE: Checking Classic Queue Mirroring Policy in RabbitMQ\nDESCRIPTION: Health check command to verify if any policies enable classic queue mirroring, which has been deprecated.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-queues.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues check_if_cluster_has_classic_queue_mirroring_policy\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags Environment Variable in Bash\nDESCRIPTION: Command to start RabbitMQ with Khepri enabled via environment variable in bash shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv RABBITMQ_FEATURE_FLAGS=\"khepri_db,...\" rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key for RPM-based Systems\nDESCRIPTION: Downloads and imports the RabbitMQ signing key for RPM-based systems (RHEL, Fedora, CentOS) using the rpm command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrpm --import https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\n```\n\n----------------------------------------\n\nTITLE: TLS Versions Output Example\nDESCRIPTION: Sample output showing supported TLS versions\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ntlsv1.2\ntlsv1.1\ntlsv1\nsslv3\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Receiver with Direct Exchange in PHP\nDESCRIPTION: This snippet provides a complete implementation of a log receiver using a direct exchange in RabbitMQ with PHP and the php-amqplib library. It allows subscribing to specific log severities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-php.md#2025-04-09_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n$channel = $connection->channel();\n\n$channel->exchange_declare('direct_logs', 'direct', false, false, false);\n\nlist($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n$severities = array_slice($argv, 1);\nif (empty($severities)) {\n    file_put_contents('php://stderr', \"Usage: $argv[0] [info] [warning] [error]\\n\");\n    exit(1);\n}\n\nforeach ($severities as $severity) {\n    $channel->queue_bind($queue_name, 'direct_logs', $severity);\n}\n\necho \" [*] Waiting for logs. To exit press CTRL+C\\n\";\n\n$callback = function ($msg) {\n    echo ' [x] ', $msg->getRoutingKey(), ':', $msg->getBody(), \"\\n\";\n};\n\n$channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\ntry {\n    $channel->consume();\n} catch (\\Throwable $exception) {\n    echo $exception->getMessage();\n}\n\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-Based Message Retrieval in C#\nDESCRIPTION: This snippet demonstrates how to retrieve individual messages on demand using the BasicGetAsync method. It includes error handling for when no message is available and manual acknowledgement of received messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nbool autoAck = false;\nBasicGetResult result = await channel.BasicGetAsync(queueName, autoAck);\nif (result == null) {\n    // No message available at this time.\n} else {\n    var props = result.BasicProperties;\n    ReadOnlyMemory<byte> body = result.Body;\n    ...\n```\n\n----------------------------------------\n\nTITLE: Exporting RabbitMQ Definitions for a Specific Virtual Host\nDESCRIPTION: This command exports the definitions of a specific virtual host in RabbitMQ to a JSON file. It's used to capture the current configuration before migration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat export_definitions --vhost='{original_vhost}' \\path\\to\\original_vhost.json\n```\n\n----------------------------------------\n\nTITLE: Defining an Exists Query in RabbitMQ LDAP Authentication\nDESCRIPTION: An exists query that checks if an object with a specified DN pattern exists in LDAP. Returns true if such an object exists.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n{exists, Pattern}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Channels in RabbitMQ (INI)\nDESCRIPTION: Default maximum number of channels allowed per connection (excluding channel 0), setting it to 0 means unlimited which can be dangerous.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 2047\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Severity\nDESCRIPTION: Demonstrates publishing messages to a direct exchange with severity routing key\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexchange = channel.direct('logs')\nexchange.publish(message, routing_key: severity)\n```\n\n----------------------------------------\n\nTITLE: Default Event Exchange Configuration\nDESCRIPTION: Default configuration for the rabbitmq_event_exchange plugin, which publishes events to the default virtual host using AMQP 0.9.1 protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/event-exchange.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nevent_exchange.vhost = /\nevent_exchange.protocol = amqp_0_9_1\n```\n\n----------------------------------------\n\nTITLE: Sample systemd Status Output for RabbitMQ\nDESCRIPTION: This snippet shows a sample output of the systemd status command for the RabbitMQ service. It includes details about the service state, process information, and recent log entries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nRedirecting to /bin/systemctl status rabbitmq-server.service\n● rabbitmq-server.service - RabbitMQ broker\n   Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: disabled)\n  Drop-In: /etc/systemd/system/rabbitmq-server.service.d\n           └─limits.conf\n   Active: active (running) since Wed 2021-05-07 10:21:32 UTC; 25s ago\n Main PID: 957 (beam.smp)\n   Status: \"Initialized\"\n   CGroup: /system.slice/rabbitmq-server.service\n           ├─ 957 /usr/lib/erlang/erts-10.2/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -MBlmbcs 512 -MHlmbcs 512 -MMmcs 30 -P 1048576 -t 5000000 -stbt db -zdbbl 128000 -K true -- -root /usr/lib/erlang -progname erl -- -home /var/lib/rabbitmq -- ...\n           ├─1411 /usr/lib/erlang/erts-10.2/bin/epmd -daemon\n           ├─1605 erl_child_setup 400000\n           ├─2860 inet_gethost 4\n           └─2861 inet_gethost 4\n\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: ##  ##\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: ##  ##      RabbitMQ 3.13.7. Copyright (c) 2005-2025 Broadcom. All Rights Reserved. The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: ##########  Licensed under the MPL 2.0. Website: https://www.rabbitmq.com/\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: ######  ##\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: ##########  Logs: /var/log/rabbitmq/rabbit@localhost.log\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: /var/log/rabbitmq/rabbit@localhost_upgrade.log\nAug 26 10:21:30 localhost.localdomain rabbitmq-server[957]: Starting broker...\nAug 26 10:21:32 localhost.localdomain rabbitmq-server[957]: systemd unit for activation check: \"rabbitmq-server.service\"\nAug 26 10:21:32 localhost.localdomain systemd[1]: Started RabbitMQ broker.\nAug 26 10:21:32 localhost.localdomain rabbitmq-server[957]: completed with 6 plugins.\n```\n\n----------------------------------------\n\nTITLE: Shutting Down a RabbitMQ Node\nDESCRIPTION: Example of the rabbitmqctl shutdown command which can only be run on the same host as the target node. This command gracefully shuts down the RabbitMQ service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Alternative Option Value Format with Equals Sign\nDESCRIPTION: Example demonstrating an alternative way to provide option values using the equals sign format (--option=value) which is useful when the value itself begins with a hyphen.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node=rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OAuth 2.0 Token in RabbitMQ HTTP API (Bash)\nDESCRIPTION: Example of using an OAuth 2.0 token to authenticate against the RabbitMQ HTTP API using curl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# swap <token> for an actual token\ncurl -i -u ignored:<token> http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Authentication Backend in RabbitMQ\nDESCRIPTION: Configuration example for setting up RabbitMQ to use only the internal authentication backend, which is the default configuration. The example uses the 'internal' alias for 'rabbit_auth_backend_internal'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\n# 1 here is a backend name. It can be anything.\n# Since we only really care about backend\n# ordering, we use numbers throughout this guide.\n#\n# \"internal\" is an alias for rabbit_auth_backend_internal\nauth_backends.1 = internal\n```\n\n----------------------------------------\n\nTITLE: Configuring Producer with Filter Value in Java Stream Client\nDESCRIPTION: This snippet shows how to create a producer that associates messages with filter values extracted from message application properties. The filter value logic is provided during producer creation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment.producerBuilder()\n  .stream(\"invoices\")\n  .filterValue(msg -> msg.getApplicationProperties().get(\"region\").toString())  \n  .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Consumer with Filtering in Java\nDESCRIPTION: Example demonstrating how to set up a RabbitMQ stream consumer with both broker-side filter values and client-side post-filtering logic using the stream Java client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-24-stream-filtering-internals/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = environment.consumerBuilder()\n  .stream(\"invoices\")\n  .filter()\n    .values(\"AMER\")  \n    .postFilter(msg -> \"AMER\".equals(msg.getApplicationProperties().get(\"region\")))\n  .builder()\n  .messageHandler((ctx, msg) -> {\n    // message processing code\n  })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Increasing Atom Limit via VM Flag\nDESCRIPTION: Setting a higher limit (9 million) for the maximum number of atoms using the VM flag approach for environments with large numbers of quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+t 9000000\"\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Stream Queue Flow Diagram in Mermaid\nDESCRIPTION: Mermaid flowchart demonstrating a basic RabbitMQ stream queue topology. Shows message flow from producer (P) through a stream queue (Q) to a consumer (C), with appropriate styling classes applied.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T1DiagramStreamToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    Q[[Stream-Queue]]\n    C((C))\n\n    P --> Q --> C\n\n    class P mermaid-producer\n    class Q mermaid-queue\n    class C mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Inter-node Communication for IPv6\nDESCRIPTION: This configuration snippet demonstrates how to set up RabbitMQ's inter-node communication listener to use only a local IPv6 interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n# Instructs the node to only listen for inter-node communication connections on a local interface.\n# This affects both connections from cluster peers and CLI tools.\n#\n# This particular configuration only makes sense for single-node clusters.\n# For multi-node clusters, nodes must listen on an \"internal network-local\" interface\n# that would allow cluster peers to connect but not be exposed to the public Internet\ndistribution.listener.interface = ::1\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ Clusters\nDESCRIPTION: Commands to delete one or multiple RabbitMQ cluster instances.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq delete INSTANCE\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq delete rmq1 rmq2 rmq3\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Maximum Limit\nDESCRIPTION: Configuration to limit the maximum number of channels per connection to optimize RAM usage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 16\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Peer Discovery Plugin\nDESCRIPTION: Command to enable the AWS peer discovery plugin before first node boot.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_aws\n```\n\n----------------------------------------\n\nTITLE: Authenticating a RabbitMQ User\nDESCRIPTION: Command to verify a user's credentials against the RabbitMQ broker authentication system. This can be used to test if a username and password combination is valid.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl authenticate_user janeway verifyit\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Service on Windows\nDESCRIPTION: Command to stop the RabbitMQ service using the CLI tool. Must be run with administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat stop\n```\n\n----------------------------------------\n\nTITLE: Alternative Option Value Format with Equals Sign\nDESCRIPTION: Example demonstrating an alternative way to provide option values using the equals sign format (--option=value) which is useful when the value itself begins with a hyphen.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node=rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Setting ERL_SSL_PATH in RabbitMQ Environment Configuration\nDESCRIPTION: Infers the Erlang TLS library path and sets it as ERL_SSL_PATH in the RabbitMQ environment configuration file. This is necessary for loading the inet_tls_dist module for encrypted inter-node communication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nerl -noinput -eval 'io:format(\"ERL_SSL_PATH=~s~n\", [filename:dirname(code:which(inet_tls_dist))])' -s init stop > /tmp/ssl-path.txt\ncat /tmp/ssl-path.txt /etc/rabbitmq/rabbitmq-env.conf > /tmp/new-rabbitmq-env.conf\nmv -f /tmp/new-rabbitmq-env.conf /etc/rabbitmq/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Queue Response in Polling with Erlang\nDESCRIPTION: Shows how to handle the case when polling a queue that is empty. The server returns a basic.get_empty response when no messages are available.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_27\n\nLANGUAGE: erlang\nCODE:\n```\n#'basic.get_empty'{} = amqp_channel:call(Channel, Get)\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits via HTTP API\nDESCRIPTION: This snippet shows the HTTP API endpoint for clearing user limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nDELETE /api/user-limits/{username}/{limit}\n```\n\n----------------------------------------\n\nTITLE: Opening an AMQP 1.0 Connection in Python\nDESCRIPTION: Establishes a connection to an AMQP 1.0 broker using the Environment instance in Python.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# open a connection from the environment setting   \nconnection = environment.connection()\n\n# close the connection when it is no longer necessary\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Overriding Default OAuth Logon Type for Specific Resource\nDESCRIPTION: Configuration showing how to override the default OAuth logon type for a specific resource. This example configures a QA environment resource to use idp_initiated logon instead of the default sp_initiated type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.3.id = rabbit_qa\nmanagement.oauth_resource_servers.3.label = RabbitMQ QA\nmanagement.oauth_resource_servers.3.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_resource_servers.3.oauth_provider_url = http://qa_url\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Tracking in RabbitMQ Streams Consumer in JavaScript\nDESCRIPTION: This code demonstrates how to implement server-side offset tracking in a RabbitMQ Streams consumer. It uses queryOffset to retrieve previously stored offsets and storeOffset to save the current position periodically and before closing. The consumer can resume from its last position after restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// start consuming at the beginning of the stream\nconst consumerRef = \"offset-tracking-tutorial\"; // the consumer must a have name\nlet firstOffset = undefined;\nlet offsetSpecification = rabbit.Offset.first();\ntry {\n  const offset = await client.queryOffset({ reference: consumerRef, stream: streamName }); // take the offset stored on the server if it exists\n  offsetSpecification = rabbit.Offset.offset(offset + 1n); // start from the message after 'marker'\n} catch (e) {}\n\nlet lastOffset = offsetSpecification.value;\nlet messageCount = 0;\nconst consumer = await client.declareConsumer(\n  { stream: streamName, offset: offsetSpecification, consumerRef },\n  async (message) => {\n    messageCount++;\n    if (!firstOffset && messageCount === 1) {\n      firstOffset = message.offset;\n      console.log(\"First message received\");\n    }\n    if (messageCount % 10 === 0) {\n      await consumer.storeOffset(message.offset); // store offset every 10 messages\n    }\n    if (message.content.toString() === \"marker\") {\n      console.log(\"Marker found\");\n      lastOffset = message.offset;\n      await consumer.storeOffset(message.offset); // store the offset on consumer closing\n      await consumer.close(true);\n    }\n  }\n);\n\nconsole.log(`Start consuming...`);\nawait sleep(2000);\nconsole.log(`Done consuming, first offset was ${firstOffset}, last offset was ${lastOffset}`);\nprocess.exit(0);\n```\n\n----------------------------------------\n\nTITLE: Using OAuth Token with HTTP API via Basic Auth Format\nDESCRIPTION: Example of accessing the RabbitMQ HTTP API using a token in the basic authentication format. This uses the 'ignored:token' format where the username is ignored.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# swap <token> for an actual token\ncurl -i -u ignored:<token> http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Deleting a PerfTest Pod in Kubernetes\nDESCRIPTION: Command to delete a RabbitMQ performance test instance pod from Kubernetes cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod perf-test\n```\n\n----------------------------------------\n\nTITLE: Forcing Single Line Log Messages in RabbitMQ\nDESCRIPTION: Configuration for forcing multi-line log messages to be truncated to a single line. This should only be used when required by log collection tools, as it can lead to incomplete log messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\n# Accepted values are 'on' and 'off'.\n# The default is 'off'.\nlog.console.formatter.single_line = on\n```\n\n----------------------------------------\n\nTITLE: Listing User Topic Permissions in RabbitMQ (Bash)\nDESCRIPTION: Shows all virtual hosts to which a specific user has been granted access, along with their topic permissions in these virtual hosts. This command helps in reviewing a user's topic-based access control settings across the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_user_topic_permissions janeway\n```\n\n----------------------------------------\n\nTITLE: Configuring URIs for Shovel Connections\nDESCRIPTION: Demonstrates how to specify multiple URIs for shovel connections, allowing for fallback options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{uris, [\n        \"amqp://fred:secret@host1.domain/my_vhost\",\n        \"amqp://john:secret@host2.domain/my_vhost\"\n       ]}\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Connection to RabbitMQ Node\nDESCRIPTION: Command to test TLS connection establishment to a RabbitMQ node using OpenSSL s_client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect localhost:5671 -cert client_certificate.pem -key client_key.pem -CAfile ca_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Resource Access Query Example\nDESCRIPTION: Example of a complex resource access query combining boolean operators to control access based on username and resource name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_28\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {'or',\n  [{'and',\n    [{equals, \"${name}\", \"test1\"},\n     {equals, \"${username}\", \"user1\"}]},\n   {'and',\n    [{equals, \"${name}\", \"test2\"},\n     {'not', {equals, \"${username}\", \"user1\"}}]}\n  ]}}\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts with Metadata using rabbitmqctl\nDESCRIPTION: Lists all virtual hosts along with their metadata including name, description, tags, and default queue type. The formatter option makes the output more readable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter=pretty_table list_vhosts name description tags default_queue_type\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Cluster with Custom Default User Configuration\nDESCRIPTION: This YAML defines a RabbitMQ cluster with custom default user credentials. It demonstrates how setting default_user and default_pass can lead to authentication issues with the Topology Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-topology-operator.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: custom-configuration\nspec:\n  replicas: 1\n  rabbitmq:\n    additionalConfig: |\n      default_user = some-user\n      default_pass = some-pass\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Classic Configuration Format Example (advanced.config)\nDESCRIPTION: An example of the classic Erlang terms configuration format used in advanced.config files. This shows the same SSL configuration as the previous example but in the more complex Erlang format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n%% A classic format snippet, now used by advanced.config files.\n[\n  {rabbit, [{ssl_options, [{cacertfile,           \"/path/to/ca_certificate.pem\"},\n                           {certfile,             \"/path/to/server_certificate.pem\"},\n                           {keyfile,              \"/path/to/server_key.pem\"},\n                           {verify,               verify_peer},\n                           {fail_if_no_peer_cert, true}]}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Log File Path in Markdown\nDESCRIPTION: Specifies the default path for the RabbitMQ log file in a generic binary build. The path includes the node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log`\n```\n\n----------------------------------------\n\nTITLE: Configuring Erlang Scheduler Count in RabbitMQ\nDESCRIPTION: Sets the number of Erlang runtime schedulers to 4 using the +S flag, overriding automatic core detection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+S 4:4\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Definition Import Configuration\nDESCRIPTION: Configuration options for skipping definition import when content hasn't changed, with examples for local and HTTPS sources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/defs.json\n\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = https\ndefinitions.https.url = https://some.endpoint/path/to/rabbitmq.definitions.json\n\ndefinitions.tls.verify     = verify_peer\ndefinitions.tls.fail_if_no_peer_cert = true\n\ndefinitions.tls.cacertfile = /path/to/ca_certificate.pem\ndefinitions.tls.certfile   = /path/to/client_certificate.pem\ndefinitions.tls.keyfile    = /path/to/client_key.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Bindings for Different Severities in PHP\nDESCRIPTION: This code demonstrates how to create multiple bindings for different log severities in PHP using the php-amqplib library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-php.md#2025-04-09_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nforeach ($severities as $severity) {\n    $channel->queue_bind($queue_name, 'direct_logs', $severity);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy in RabbitMQ API\nDESCRIPTION: JSON payload for declaring or updating a policy. This example creates a federation policy that applies to queues with names starting with 'amq.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\"pattern\":\"^amq.\", \"definition\": {\"federation-upstream-set\":\"all\"}, \"priority\": 10, \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest Producer with RAR Token (Bash)\nDESCRIPTION: This command starts a PerfTest producer application using a Rich Authorization Request token for authentication and authorization. It demonstrates how to use OAuth 2.0 tokens with the AMQP protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer_with_roles TOKEN=$(bin/jwt_token rar-token.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Mechanisms in RabbitMQ Server\nDESCRIPTION: This configuration specifies which authentication mechanisms are offered to connecting clients by the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nauth_mechanisms.1 = PLAIN\nauth_mechanisms.2 = AMQPLAIN\nauth_mechanisms.3 = ANONYMOUS\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length Policy with rabbitmqctl\nDESCRIPTION: Sets a policy to limit queue size to 1MiB using rabbitmqctl command line tool. When the limit is reached, oldest messages are discarded.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy my-pol \"^one-meg$\" \\\n  '{\"max-length-bytes\":1048576}' \\\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Deleting Virtual Host Using CLI\nDESCRIPTION: Deletes a virtual host and all its resources using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost qa1\n```\n\n----------------------------------------\n\nTITLE: Referencing RabbitMQ Web MQTT Plugin\nDESCRIPTION: Code reference showing how to mention the rabbitmq_web_mqtt plugin in documentation context.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nrabbitmq_web_mqtt\n```\n\n----------------------------------------\n\nTITLE: Setting At-Least-Once Dead Letter Strategy\nDESCRIPTION: This command sets a policy to enable at-least-once dead letter strategy for the source queue, ensuring messages are not lost when the target queue is unavailable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqctl set_policy --apply-to queues \\\n    my-policy my-source-queue '{\"dead-letter-strategy\" : \"at-least-once\"}'\n```\n\n----------------------------------------\n\nTITLE: Exiting maintenance mode in rabbitmq-upgrade\nDESCRIPTION: Command to return a node to regular operating mode after maintenance, allowing it to serve client traffic and host queue leader replicas again.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrevive\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Access with String Comparison in RabbitMQ LDAP\nDESCRIPTION: Example of a resource access query using string comparison. It grants permissions to declare and delete exchanges and queues based on specific strings in the user's description field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{permission, configure, {equals, {attribute, \"${user_dn}\", \"description\"},\n                                         {string, \"can-declare-${resource}s\"}\n                                }\n        },\n        {permission, write, {constant, true}},\n        {permission, read,  {constant, true}}\n       ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Attributes in Elixir for RabbitMQ Boot Steps\nDESCRIPTION: Code snippet demonstrating how to declare module attributes in Elixir, which is necessary for RabbitMQ's boot steps functionality that enables the server to automatically pick up plugins at startup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RabbitExchangeTypeRecentHistory do\n\n  Module.register_attribute __MODULE__,\n       :rabbit_boot_step,\n       accumulate: true, persist: true\n\n  @rabbit_boot_step { __MODULE__,\n                     [{:description, \"exchange type x-recent-history\"},\n                      {:mfa, {:rabbit_registry, :register,\n                              [:exchange, <<\"x-recent-history\">>, __MODULE__]}},\n                      {:requires, :rabbit_registry},\n                      {:enables, :kernel_ready}]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in Bash\nDESCRIPTION: Command to set up a federation upstream parameter using rabbitmqctl in Bash shell. Defines connection details and message expiration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream my-upstream \\\n    '{\"uri\":\"amqp://target.hostname\",\"expires\":3600000}'\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Advanced Configuration in Erlang\nDESCRIPTION: Erlang configuration that disables loopback users and metrics collection for benchmark testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit, [\n  {loopback_users, []}\n ]},\n\n {rabbitmq_management_agent, [\n  {disable_metrics_collector, true}\n ]}\n].\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Queue-Exchange Metrics Table\nDESCRIPTION: Metrics for monitoring message flow between queues and exchanges\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                                        | Description                                                                                                  |\n|---------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|\\n| rabbitmq_detailed_queue_exchange_messages_published_total     | Total number of messages published into a queue through an exchange                                          |\n```\n\n----------------------------------------\n\nTITLE: Publishing Delayed Messages in Java\nDESCRIPTION: Java code demonstrating how to publish a message with the x-delay header, which specifies how many milliseconds the message should be delayed before being routed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2015-04-16-scheduling-messages-with-rabbitmq/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// ... elided code ...\nbyte[] messageBodyBytes = \"delayed payload\".getBytes();\nAMQP.BasicProperties.Builder props = new AMQP.BasicProperties.Builder();\nheaders = new HashMap<String, Object>();\nheaders.put(\"x-delay\", 5000);\nprops.headers(headers);\nchannel.basicPublish(\"my-exchange\", \"\", props.build(), messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Using Cuts with Case Expressions in Erlang\nDESCRIPTION: Shows how cuts can be applied to case expressions in Erlang, creating functions that perform pattern matching.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\nF = case _ of\n        N when is_integer(N) -> N + N;\n        N                    -> N\n    end,\n10 = F(5),\nok = F(ok).\n```\n\n----------------------------------------\n\nTITLE: Basic Sequential Erlang Code Example\nDESCRIPTION: A simple example of sequential code in Erlang with three consecutive statements, which will be used to demonstrate how monads can control execution flow between statements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\nA = foo(),\nB = bar(A, dog),\nok.\n```\n\n----------------------------------------\n\nTITLE: Resetting a RabbitMQ Node to Virgin State\nDESCRIPTION: This command returns a RabbitMQ node to its initial state by removing it from any cluster, clearing management database data, and deleting persistent messages. The RabbitMQ application must be stopped before running this command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl reset\n```\n\n----------------------------------------\n\nTITLE: Resetting a RabbitMQ Node to Virgin State\nDESCRIPTION: This command returns a RabbitMQ node to its initial state by removing it from any cluster, clearing management database data, and deleting persistent messages. The RabbitMQ application must be stopped before running this command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl reset\n```\n\n----------------------------------------\n\nTITLE: Initializing Web STOMP Client in HTML\nDESCRIPTION: HTML script tag to include the STOMP client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- include the client library -->\n<script src=\"stomp.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Message Receiver\nDESCRIPTION: Message receiver class that handles messages from multiple topic queues using @RabbitListener annotations. Includes processing logic and timing measurements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.util.StopWatch;\n\npublic class Tut5Receiver {\n\n\t@RabbitListener(queues = \"#{autoDeleteQueue1.name}\")\n\tpublic void receive1(String in) throws InterruptedException {\n\t\treceive(in, 1);\n\t}\n\n\t@RabbitListener(queues = \"#{autoDeleteQueue2.name}\")\n\tpublic void receive2(String in) throws InterruptedException {\n\t\treceive(in, 2);\n\t}\n\n\tpublic void receive(String in, int receiver) throws\n\t    InterruptedException {\n\t\tStopWatch watch = new StopWatch();\n\t\twatch.start();\n\t\tSystem.out.println(\"instance \" + receiver + \" [x] Received '\"\n\t\t    + in + \"'\");\n\t\tdoWork(in);\n\t\twatch.stop();\n\t\tSystem.out.println(\"instance \" + receiver + \" [x] Done in \"\n\t\t    + watch.getTotalTimeSeconds() + \"s\");\n\t}\n\n\tprivate void doWork(String in) throws InterruptedException {\n\t\tfor (char ch : in.toCharArray()) {\n\t\t\tif (ch == '.') {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Service\nDESCRIPTION: Commands to stop a running RabbitMQ node using either brew services or direct shutdown.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop rabbitmq\n/opt/homebrew/sbin/rabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Activity Logging in RabbitMQ with Classic Config Format\nDESCRIPTION: Example showing how to set LDAP logging level using RabbitMQ's classic configuration format, which uses Erlang terms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    %% ...\n    {log, network}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Publishing a Persistent Message in Erlang\nDESCRIPTION: Shows how to publish a persistent message by setting the delivery_mode to 2 in the #'P_basic'{} properties record.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\nPayload = <<\"foobar\">>,\nPublish = #'basic.publish'{exchange = X, routing_key = Key},\nProps = #'P_basic'{delivery_mode = 2}, %% persistent message\nMsg = #amqp_msg{props = Props, payload = Payload},\namqp_channel:cast(Channel, Publish, Msg)\n```\n\n----------------------------------------\n\nTITLE: Waiting for RabbitMQ Application to Start\nDESCRIPTION: This command waits for the RabbitMQ application to start using a specified PID file. It will wait for the PID file to be created, then for the process to start, and finally for the RabbitMQ application to start in that process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl wait /var/run/rabbitmq/pid\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Java Client Dependency with Gradle\nDESCRIPTION: Groovy snippet for adding the RabbitMQ Java client library dependency to a Gradle project. It adds the compile dependency for com.rabbitmq:amqp-client version 5.24.0.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-client.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  compile 'com.rabbitmq:amqp-client:5.24.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS 1.3 for RabbitMQ\nDESCRIPTION: This snippet shows a RabbitMQ configuration that accepts TLSv1.3 connections. It includes settings for SSL listeners, certificate files, and cipher suites. This configuration passes key testssl.sh tests on Erlang 26.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.3\n\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n\nssl_options.honor_cipher_order   = true\nssl_options.honor_ecc_order      = true\n```\n\n----------------------------------------\n\nTITLE: Decoding Encrypted Values with RabbitMQ CLI\nDESCRIPTION: Example of using rabbitmqctl decode command with custom cipher, hash and iteration settings for decryption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '{encrypted,<<\"...\">>}' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Granting User Permissions in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/permissions/{vhost}/{user} endpoint to grant or update user permissions in a given virtual host. This example grants full permissions for configure, write, and read operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\"configure\":\".*\",\"write\":\".*\",\"read\":\".*\"}\n```\n\n----------------------------------------\n\nTITLE: Identity-Provider Initiated OAuth 2.0 Configuration\nDESCRIPTION: Configuration entries in rabbitmq.conf for enabling Identity-Provider initiated OAuth 2.0 authentication in the RabbitMQ Management UI\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_provider_url = http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Service Tags for RabbitMQ\nDESCRIPTION: This snippet shows how to add tags to the RabbitMQ service when registering with Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# Define tags for the RabbitMQ service: \"qa\" and \"3.8\"\ncluster_formation.consul.svc_tags.1 = qa\ncluster_formation.consul.svc_tags.2 = 3.8\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API CA Certificate for RabbitMQ Cluster Formation\nDESCRIPTION: Specifies the path to the Kubernetes API CA certificate bundle. This certificate is used for secure communication with the Kubernetes API over HTTPS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\n# Where to load the K8S API access token from.\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\n\n# Where to load K8S API CA bundle file from. It will be used when issuing requests\n# to the K8S API using HTTPS.\n#\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for IPv6 Inter-node Communication\nDESCRIPTION: These environment variable settings and configuration file contents demonstrate how to configure RabbitMQ nodes and CLI tools to use IPv6 for inter-node communication and related tasks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# these flags will be used by RabbitMQ nodes\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-kernel inetrc '/etc/rabbitmq/erl_inetrc' -proto_dist inet6_tcp\"\n# these flags will be used by CLI tools\nRABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n%% Tells DNS client on RabbitMQ nodes and CLI tools to resolve hostnames to IPv6 addresses.\n%% The trailing dot is not optional.\n{inet6,true}.\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_CTL_ERL_ARGS=\"-proto_dist inet6_tcp\"\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ PerfTest Pod from Kubernetes\nDESCRIPTION: This bash command shows how to remove the RabbitMQ PerfTest pod from a Kubernetes cluster after testing is complete.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod perf-test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages from RabbitMQ Queue\nDESCRIPTION: This command fetches messages from a specific RabbitMQ queue using the rabbitmqadmin tool. It's used to verify the contents of queues and confirm successful message routing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_12\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin get queue=my-target-queue count=2\n```\n\n----------------------------------------\n\nTITLE: Decommissioning MQTT Node in RabbitMQ using rabbitmqctl\nDESCRIPTION: This command decommissions an MQTT node in RabbitMQ using the rabbitmqctl CLI tool. It should be used before disabling the plugin on a node or removing a node from the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decommission_mqtt_node <node>;\n```\n\n----------------------------------------\n\nTITLE: Make Deployment Alternative\nDESCRIPTION: Alternative command using make to deploy the monitoring stack\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake metrics overview\n```\n\n----------------------------------------\n\nTITLE: Defining a RabbitMQ Queue Resource in Kubernetes\nDESCRIPTION: An example of a Queue Custom Resource that defines a quorum queue named 'my-queue' on vhost 'my-vhost' connected to the RabbitMQ cluster 'my-rabbit-cluster'. This demonstrates the declarative management of RabbitMQ resources in Kubernetes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-02-21-gatekeeper-validation/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: my-queue\nspec:\n  name: my-queue\n  vhost: my-vhost\n  type: quorum\n  rabbitmqClusterReference:\n    name: my-rabbit-cluster\n```\n\n----------------------------------------\n\nTITLE: Compiling RabbitMQ Java Client Applications\nDESCRIPTION: Command-line instructions for compiling Java applications that use the RabbitMQ client library. The classpath parameter is required to include the necessary dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-java.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njavac -cp $CP ReceiveLogsTopic.java EmitLogTopic.java\n```\n\n----------------------------------------\n\nTITLE: Restarting epmd Service After Configuration Changes in Bash\nDESCRIPTION: Commands to reload systemd configuration and restart the epmd socket and service after updating its unit file. This is necessary to apply the new network configuration settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl restart epmd.socket epmd.service\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Application\nDESCRIPTION: Command to start the RabbitMQ application on a node. Typically used after performing management actions that required the application to be stopped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl start_app\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel from AMQP 0.9.1 to AMQP 1.0\nDESCRIPTION: Configuration for a shovel that transfers messages from an AMQP 0.9.1 source to an AMQP 1.0 destination. Includes detailed source broker configuration and AMQP 1.0 specific destination settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n [{shovels, [{my_first_shovel,\n              {source,\n               [{protocol, amqp091},\n                {uris, [\"amqp://fred:secret@host1.domain/my_vhost\",\n                        \"amqp://john:secret@host2.domain/my_vhost\"]},\n                {declarations, [{'exchange.declare',\n                                   [{exchange, <<\"my_fanout\">>},\n                                    {type, <<\"fanout\">>},\n                                    durable]},\n                                {'queue.declare',\n                                   [{arguments,\n                                      [{<<\"x-message-ttl\">>, long, 60000}]}]},\n                                {'queue.bind',\n                                   [{exchange, <<\"my_fanout\">>},\n                                    {queue,    <<>>}\n                                    ]}\n                               ]},\n                {queue, <<>>},\n                {prefetch_count, 10}\n               ]},\n              {destination,\n               [{protocol, amqp10},\n                {uris, [\"amqp://host:5672\"]},\n                {properties, [{user_id, <<\"my-user\">>}]},\n                {application_properties, [{<<\"my-prop\">>, <<\"my-prop-value\">>}]},\n                {add_forward_headers, true},\n                {target_address, <<\"destination-queue\">>}\n               ]},\n              {ack_mode, on_confirm},\n              {reconnect_delay, 5}\n             }]}\n ]}\n}\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Configuration for CA\nDESCRIPTION: Configuration file for setting up a test Certificate Authority, including policies and extensions for client and server certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\n[ ca ]\ndefault_ca = testca\n\n[ testca ]\ndir = .\ncertificate = $dir/ca_certificate.pem\ndatabase = $dir/index.txt\nnew_certs_dir = $dir/certs\nprivate_key = $dir/private/ca_private_key.pem\nserial = $dir/serial\n\ndefault_crl_days = 7\ndefault_days = 365\ndefault_md = sha256\n\npolicy = testca_policy\nx509_extensions = certificate_extensions\n\n[ testca_policy ]\ncommonName = supplied\nstateOrProvinceName = optional\ncountryName = optional\nemailAddress = optional\norganizationName = optional\norganizationalUnitName = optional\ndomainComponent = optional\n\n[ certificate_extensions ]\nbasicConstraints = CA:false\n\n[ req ]\ndefault_bits = 2048\ndefault_keyfile = ./private/ca_private_key.pem\ndefault_md = sha256\nprompt = yes\ndistinguished_name = root_ca_distinguished_name\nx509_extensions = root_ca_extensions\n\n[ root_ca_distinguished_name ]\ncommonName = hostname\n\n[ root_ca_extensions ]\nbasicConstraints = CA:true\nkeyUsage = keyCertSign, cRLSign\n\n[ client_ca_extensions ]\nbasicConstraints = CA:false\nkeyUsage = digitalSignature,keyEncipherment\nextendedKeyUsage = 1.3.6.1.5.5.7.3.2\n\n[ server_ca_extensions ]\nbasicConstraints = CA:false\nkeyUsage = digitalSignature,keyEncipherment\nextendedKeyUsage = 1.3.6.1.5.5.7.3.1\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host using HTTP API with curl\nDESCRIPTION: Creates a virtual host named 'vh1' using the RabbitMQ HTTP API with curl. This demonstrates how to perform the same operation via the REST API instead of the CLI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/vh1\n```\n\n----------------------------------------\n\nTITLE: Advanced Config Backing Queue Module\nDESCRIPTION: Setting the implementation module for queue contents in the advanced config file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_50\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n{backing_queue_module, rabbit_variable_queue}\n]}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Application\nDESCRIPTION: Command to start the RabbitMQ application on a node. Typically used after performing management actions that required the application to be stopped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl start_app\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue with a Routing Key in Swift RabbitMQ Client\nDESCRIPTION: Creating a binding between a queue and an exchange with a specific routing key. This allows messages to be filtered based on the routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nq.bind(exchange, routingKey: \"black\")\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits via HTTP API using curl\nDESCRIPTION: These curl commands demonstrate how to clear the maximum channels and connections limits for a user using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-channels\n\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-connections\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Kubernetes Operator Configuration\nDESCRIPTION: YAML configuration for deploying RabbitMQ cluster using Kubernetes Operator with specific resource allocations and advanced settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: ...\nspec:\n  replicas: 1 # or 3 for mirrored and quorum queues\n  image: rabbitmq:3.11.7-management # or rabbitmq:3.12.0-rc.2-management\n  resources:\n    requests:\n      cpu: 14\n      memory: 12Gi\n    limits:\n      cpu: 14\n      memory: 12Gi\n  persistence:\n    storageClassName: premium-rwo\n    storage: \"150Gi\"\n  rabbitmq:\n    advancedConfig: |\n      [\n      {rabbit, [\n          {credit_flow_default_credit,{0,0}}\n      ]}\n      ].\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ Management Plugin from Source\nDESCRIPTION: Shell commands to build the RabbitMQ management plugin from source code by cloning the appropriate repositories. This process requires specific version checkouts to ensure compatibility between components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-09-07-management-plugin-preview-release/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhg clone http://hg.rabbitmq.com/rabbitmq-public-umbrella\ncd rabbitmq-public-umbrella\nmake checkout\nhg update -r rabbitmq_v2_0_0 -R rabbitmq-server\nhg update -r rabbitmq_v2_0_0 -R rabbitmq-codegen\nhg update -r rabbitmq_v2_0_0 -R rabbitmq-erlang-client\nhg clone http://hg.rabbitmq.com/rabbitmq-management\nmake\ncd rabbitmq-management\nmake\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Protocol Requirements HTML Structure\nDESCRIPTION: HTML table structure containing protocol requirements for RabbitMQ implementation including connection handling, channel management, and exchange configuration. Contains specifications for both server and client behaviors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/specification.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_ok\">ok</td>\n<td>MUST</td>\n<td></td>\n<td>exchange / required-types</td>\n<td>\n    <div>\n        The server MUST implement these standard exchange types: fanout, direct.\n    </div>\n</td>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Array in AMQP 0-9-1 Grammar\nDESCRIPTION: Shows the production rule for field-array in the AMQP 0-9-1 protocol grammar, highlighting the ambiguity in the long-int value representation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/amqp-0-9-1-errata.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfield-array = long-int *field-value\n```\n\n----------------------------------------\n\nTITLE: Configuring Predeclared Topology for All Shovels in RabbitMQ\nDESCRIPTION: Configuration setting that makes all shovels started on a node use pre-declared topology instead of declaring it themselves.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# all shovels started on this node will use pre-declared topology\nshovel.topology.predeclared = true\n```\n\n----------------------------------------\n\nTITLE: Verification Success Output Example\nDESCRIPTION: Example output showing successful TLS certificate verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nVerify return code: 0 (ok)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Cleanup Warning Logging in RabbitMQ\nDESCRIPTION: This snippet shows how to configure RabbitMQ to log warnings for unknown nodes in the cluster without removing them. It sets the cluster_formation.node_cleanup.only_log_warning option to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.node_cleanup.only_log_warning = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Topic Exchange in RabbitMQ STOMP Adapter\nDESCRIPTION: Configuration setting to specify a different default exchange than amq.topic for STOMP topic destinations. This allows customization of the routing behavior for STOMP topic messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_topic_exchange = some.exchange\n```\n\n----------------------------------------\n\nTITLE: Message Requeuing in Java\nDESCRIPTION: Shows how to requeue messages using RabbitMQ Java client. Uses Channel#basicReject with requeue flag set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // requeue the delivery\n             channel.basicReject(deliveryTag, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Advanced Config Backing Queue Module\nDESCRIPTION: Setting the implementation module for queue contents in the advanced config file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_50\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n{backing_queue_module, rabbit_variable_queue}\n]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Hostname\nDESCRIPTION: Specifies Syslog server using hostname instead of IP address.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.host = my.syslog-server.local\nlog.syslog.port = 1514\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Rotation Compression\nDESCRIPTION: Enables compression for archived log files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.rotation.compress = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Upgrade Logs\nDESCRIPTION: Deactivates logging for upgrade-related events.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nlog.upgrade.level = none\n```\n\n----------------------------------------\n\nTITLE: Creating a Callback Queue for RPC Response in RabbitMQ with Python\nDESCRIPTION: Implementation of how to create a callback queue for receiving RPC responses. The client creates an exclusive queue, sends a request with the callback queue specified in the reply_to property, and then waits for a response on that queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-python.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = channel.queue_declare(queue='', exclusive=True)\ncallback_queue = result.method.queue\n\nchannel.basic_publish(exchange='',\n                      routing_key='rpc_queue',\n                      properties=pika.BasicProperties(\n                            reply_to = callback_queue,\n                            ),\n                      body=request)\n\n# ... and some code to read a response message from the callback_queue ...\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for RabbitMQ Website\nDESCRIPTION: This code imports necessary React components for the RabbitMQ website documentation, including a component for displaying RabbitMQ server version tags and Docusaurus tab components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  RabbitMQServerGitTag,\n} from '@site/src/components/RabbitMQServer';\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Example Entra ID Access Token for RabbitMQ Authentication\nDESCRIPTION: This JavaScript object represents an example of an access token issued by Entra ID for RabbitMQ authentication. It includes claims such as audience, issuer, roles, and user information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-entra-id/index.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"aud\": \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88\",\n  \"iss\": \"https://sts.windows.net/1ffc6121-590e-4aa5-bf47-c348674069cb/\",\n  \"iat\": 1655740039,\n  \"nbf\": 1655740039,\n  \"exp\": 1655744211,\n  \"acr\": \"1\",\n  \"aio\": \"AUQAu/8TAAAAjvwucwL4nZe83vNZvg6A7sAPscI9zsGvRs8EuT7aVhubpmhRnxJ+X7nbkISoP5eBBMxoi2yiCclnH2Ocjjzsqw==\",\n  \"amr\": [\n    \"wia\"\n  ],\n  \"appid\": \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88\",\n  \"appidacr\": \"1\",\n  \"email\": \"baptiste.daroit@company.com\",\n  \"idp\": \"https://sts.windows.net/b3f4f7c2-72ce-4192-aba4-d6c7719b5766/\",\n  \"in_corp\": \"true\",\n  \"ipaddr\": \"xxx.xxx.xxx.xxx\",\n  \"name\": \"Baptiste DA ROIT\",\n  \"oid\": \"cf2df3b4-03df-4e1e-b5c0-f232932aaead\",\n  \"rh\": \"0.AR8AgCG80x7L90C1mhVBBXQzQjgoklctsdBMtgYVWFwc4tgfAMQ.\",\n  \"roles\": [\n    \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.tag:monitoring\",\n    \"30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.configure:*/*\"\n  ],\n  \"scp\": \"User.Read\",\n  \"sub\": \"6aBzW3a1FOTTrnlZEuC1SmwG0sRjVgQU49DvrYK6Rqg\",\n  \"tid\": \"1ffc6121-590e-4aa5-bf47-c348674069cb\",\n  \"unique_name\": \"baptiste.daroit@company.com\",\n  \"uti\": \"QHqwThTqQEK9iMdnRuD_AA\",\n  \"ver\": \"1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Default User Connection Refusal in RabbitMQ\nDESCRIPTION: This snippet shows the server log output when a default user attempts to connect from a remote host, which is refused for security reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n2024-08-24 17:28:32.153698-04:00 [error] <0.1567.0> PLAIN login refused: user 'guest' can only connect via localhost\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP keepalives in RabbitMQ\nDESCRIPTION: Configuration to enable TCP keepalives for connections. When set to true, TCP keepalives will be enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.keepalive = false\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Definition with Protection\nDESCRIPTION: JSON definition for creating a protected virtual host via definition file import\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"protected\",\n  \"description\": \"\",\n  \"metadata\": {\n    \"description\": \"This virtual host is protected from deletion with a special metadata key\",\n    \"tags\": [],\n    \"default_queue_type\": \"classic\",\n    \"protected_from_deletion\": true\n  },\n  \"tags\": [],\n  \"default_queue_type\": \"classic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling VT/ANSI Escape Sequences in PowerShell\nDESCRIPTION: PowerShell command to enable VT/ANSI escape sequences globally, fixing issues with RabbitMQ CLI tools displaying ANSI character sequences improperly.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ItemProperty HKCU:\\Console VirtualTerminalLevel -Type DWORD 1\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding RabbitMQ Prometheus Metrics\nDESCRIPTION: This command sets up port forwarding for RabbitMQ's Prometheus metrics port. It's necessary for accessing the metrics from outside the Kubernetes cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_13\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl port-forward pod/my-rabbit-server-1 15692\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key via Direct Download\nDESCRIPTION: Downloads and imports the RabbitMQ release signing key directly from GitHub using curl and GPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/signatures.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc --output rabbitmq-release-signing-key.asc\ngpg --import rabbitmq-release-signing-key.asc\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream from First Offset in Java\nDESCRIPTION: Demonstrates how to consume messages from a stream starting from the first available message using the 'first' offset specification. Includes QoS settings and required message acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", \"first\"), // \"first\" offset specification\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Node Name in RabbitMQ Environment Configuration\nDESCRIPTION: This snippet demonstrates how to set a custom node name prefix in the rabbitmq-env.conf file. It changes the default prefix from \"rabbit\" to \"hare\".\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-env.conf.5.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# I am a complete rabbitmq-env.conf file.\n# Comment lines start with a hash character.\n# This is a /bin/sh script file - use ordinary envt var syntax\nNODENAME=hare\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ API with OAuth Client\nDESCRIPTION: Command to access the RabbitMQ management API using OAuth client credentials authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmake curl url=http://localhost:15672/api/overview client_id=producer_with_roles secret=producer_with_roles_secret\n```\n\n----------------------------------------\n\nTITLE: Clearing User Permissions in RabbitMQ\nDESCRIPTION: Command to remove user access permissions from a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_permissions -p my-vhost janeway\n```\n\n----------------------------------------\n\nTITLE: Logging RPC Request Example\nDESCRIPTION: Demonstrates logging output format for a RPC request to calculate Fibonacci number\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-javascript.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# => [x] Requesting fib(30)\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener Port in RabbitMQ using Erlang Terms Format\nDESCRIPTION: This snippet shows how to change the default TCP listener port for AMQP 0-9-1 and AMQP 1.0 client connections from 5672 to 5673 using the classic Erlang terms format, which was used in older versions of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n%% this is a comment\n[\n  {rabbit, [\n      {tcp_listeners, [5673]}\n    ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Signing Keys with curl\nDESCRIPTION: Command to access RabbitMQ API with a token signed by a secondary signing key, demonstrating multiple key support.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=http://localhost:15672/api/overview TOKEN=$(bin/jwt_token scope-and-extra-scope.json legacy-token-2-key private-2.pem public-2.pem)\n```\n\n----------------------------------------\n\nTITLE: Disabling File Logging with Console Output\nDESCRIPTION: Configuration to enable console logging while disabling file output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Running the RPC Client in Go with RabbitMQ\nDESCRIPTION: Command to run the RPC client implementation with a specific input. This sends a request to calculate the 30th Fibonacci number to the RPC server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-go.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo run rpc_client.go 30\n# => [x] Requesting fib(30)\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth 2.0 Configuration\nDESCRIPTION: Commands to set environment variables and start RabbitMQ configured for OAuth 2.0 authentication with UAA in portal mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-idp-initiated.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=portal\nOAUTH_PROVIDER=uaa make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Client ID and Label for a Resource\nDESCRIPTION: Configuration example showing how to set the OAuth client ID and display label for a specific resource. This is required for resources using sp_initiated logon type to properly authenticate with the OAuth provider.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.1.id = rabbit_prod\nmanagement.oauth_resource_servers.1.oauth_client_id = rabbit_prod_mgt_ui\nmanagement.oauth_resource_servers.1.label = RabbitMQ Production\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Key Prefix and Cluster Name for RabbitMQ etcd Discovery\nDESCRIPTION: This snippet shows how to configure a custom key prefix and cluster name for RabbitMQ etcd-based peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\n# rabbitmq is used by default\ncluster_formation.etcd.key_prefix = rabbitmq_discovery\n\n# default name: \"default\"\ncluster_formation.etcd.cluster_name = staging\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest with Default Flow Control for AMQP 0.9.1 Quorum Queue Benchmark\nDESCRIPTION: Java command for benchmarking a quorum queue with AMQP 0.9.1 protocol using default flow control settings (confirm count of 192). The benchmark shows lower throughput compared to the high confirm count test due to flow control limitations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar target/perf-test.jar \\\n    --predeclared --exchange amq.default \\\n    --routing-key my-quorum-queue --queue my-quorum-queue \\\n    --flag persistent --flag mandatory \\\n    --pmessages 1000000 --size 12 --confirm 192 --qos 5000 --multi-ack-every 5000\n\nid: test-084359-441, sending rate avg: 9931 msg/s\nid: test-084359-441, receiving rate avg: 9931 msg/s\nid: test-084359-441, consumer latency min/median/75th/95th/99th 7512/17054/26256/34249/38641 µs\nid: test-084359-441, confirm latency min/median/75th/95th/99th 9432/16586/23918/32636/36858 µs\n```\n\n----------------------------------------\n\nTITLE: Receiving All Logs with Topic Exchange in RabbitMQ using Objective-C\nDESCRIPTION: This snippet demonstrates how to receive all logs using a topic exchange in RabbitMQ by using the '#' wildcard as the routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n[self receiveLogsTopic:@[@\"#\"]];\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Feature Flags\nDESCRIPTION: Command to enable specific feature flags or all feature flags in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag restart_streams\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Example of messages_details JSON Object\nDESCRIPTION: JSON structure showing a message count with additional time-series details including rate, average, and historical samples. This structure is returned when querying queue metrics with time period parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": 123619,\n\"messages_details\": {\n  \"avg\": 41206.333333333336,\n  \"avg_rate\": 1030.1583333333333,\n  \"rate\": 24723.8,\n  \"samples\": [\n    {\n      \"sample\": 123619,\n      \"timestamp\": 1400680560000\n    },\n    {\n      \"sample\": 0,\n      \"timestamp\": 1400680500000\n    },\n    {\n      \"sample\": 0,\n      \"timestamp\": 1400680440000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Runtime Thread Statistics in RabbitMQ\nDESCRIPTION: Samples and reports runtime (kernel) threads' activity for the specified interval. Requires Erlang/OTP with microstate accounting support and the runtime_tools package.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics runtime_thread_stats --sample-interval 15\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Format Logging in RabbitMQ\nDESCRIPTION: Configuration setting to output logs in JSON format rather than plain text.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Hostname in RabbitMQ\nDESCRIPTION: This configuration sets a custom hostname and port for Syslog logging in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.host = my.syslog-server.local\nlog.syslog.port = 1514\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Identity and Facility\nDESCRIPTION: Sets custom identity and facility values for Syslog messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.identity = my_rabbitmq\nlog.syslog.facility = user\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog IP and Port\nDESCRIPTION: Specifies custom IP address and port for Syslog server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.ip = 10.10.10.10\nlog.syslog.port = 1514\n```\n\n----------------------------------------\n\nTITLE: Listing Unacknowledged Messages in RabbitMQ on Windows\nDESCRIPTION: Windows-specific command to check unacknowledged messages in RabbitMQ queues for debugging purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring epmd to Listen on Local Interface in Bash\nDESCRIPTION: Sets the ERL_EPMD_ADDRESS environment variable to configure the epmd daemon to only listen on a local IPv6 interface, which improves security by limiting network exposure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# instructs epmd to only listen on a local interface\nexport ERL_EPMD_ADDRESS=\"::1\"\n```\n\n----------------------------------------\n\nTITLE: Viewing PerfTest Logs to Verify RabbitMQ Messaging\nDESCRIPTION: Command to view the logs from the PerfTest pod to verify that it's successfully sending and receiving messages through the RabbitMQ cluster, confirming that the instance is operational.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f perf-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced TLS Options for RabbitMQ Web STOMP\nDESCRIPTION: Comprehensive configuration for TLS settings including cipher suites, TLS versions, and security parameters for the Web STOMP plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ssl.port       = 15673\nweb_stomp.ssl.backlog    = 1024\nweb_stomp.ssl.certfile   = /path/to/server_certificate.pem\nweb_stomp.ssl.keyfile    = /path/to/server_key.pem\nweb_stomp.ssl.cacertfile = /path/to/ca_certificate_bundle.pem\nweb_stomp.ssl.password   = changeme\n\nweb_stomp.ssl.honor_cipher_order   = true\nweb_stomp.ssl.honor_ecc_order      = true\nweb_stomp.ssl.client_renegotiation = false\nweb_stomp.ssl.secure_renegotiate   = true\n\nweb_stomp.ssl.versions.1 = tlsv1.2\nweb_stomp.ssl.versions.2 = tlsv1.1\nweb_stomp.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\nweb_stomp.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\nweb_stomp.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\nweb_stomp.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\nweb_stomp.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Permissions in RabbitMQ (INI)\nDESCRIPTION: Default permissions assigned to the default user, granting full configure, read, and write permissions using regex patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\ndefault_permissions.configure = .*\ndefault_permissions.read = .*\ndefault_permissions.write = .*\n```\n\n----------------------------------------\n\nTITLE: Log Tail Command\nDESCRIPTION: Command to print the last N lines of the node's log file with configurable timeout\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_tail --number 100\n```\n\n----------------------------------------\n\nTITLE: RPC Method Signatures in RabbitMQ Java Client\nDESCRIPTION: Available RPC method signatures for sending requests, including primitive, string and map-based calls.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nbyte[] primitiveCall(byte[] message);\nString stringCall(String message)\nMap mapCall(Map message)\nMap mapCall(Object[] keyValuePairs)\n```\n\n----------------------------------------\n\nTITLE: Shrinking Quorum Queue Clusters in RabbitMQ (Bash)\nDESCRIPTION: Removes quorum queue replicas (members) from a specified node, typically used when decommissioning a node from the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues shrink \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Topic Exchange with Specific Routing Key\nDESCRIPTION: Command-line example demonstrating how to run the publisher application with a specific routing key pattern. This shows how to target messages to specific subscribers based on the routing pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-java.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP EmitLogTopic \"kern.critical\" \"A critical kernel error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Log Rotation at Midnight\nDESCRIPTION: Configuration example showing how to set up daily log file rotation at midnight with compression and retention settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every night at midnight\nlog.file.rotation.date = $D0\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n\n# archived log files will be compressed\nlog.file.rotation.compress = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Daily Log Rotation at Midnight\nDESCRIPTION: Configuration example showing how to set up daily log file rotation at midnight with compression and retention settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every night at midnight\nlog.file.rotation.date = $D0\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n\n# archived log files will be compressed\nlog.file.rotation.compress = true\n```\n\n----------------------------------------\n\nTITLE: Starting AMQP Producers with OAuth Tokens\nDESCRIPTION: These commands start AMQP producers for both dev and prod realms, using OAuth tokens obtained from Keycloak. The producers are configured with specific client IDs and permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=prod_producer TOKEN=$(bin/keycloak/token prod_producer sIqZ5flmSz3r6uKXMSz8CWGeScdTpqq0 prod)\nmake start-perftest-producer-with-token PRODUCER=dev_producer TOKEN=$(bin/keycloak/token dev_producer SBuw1L5a7Y2aQfWfbsgXlEKGTNaEHxO8 dev)\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode in PowerShell\nDESCRIPTION: PowerShell command to bring a RabbitMQ node out of maintenance mode without restarting it. This is only needed if the node won't be restarted as planned, as a restart automatically disables maintenance mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-upgrade.bat revive\n```\n\n----------------------------------------\n\nTITLE: Stunnel Configuration Example\nDESCRIPTION: Configuration file for stunnel to proxy TLS connections to RabbitMQ's non-TLS port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nforeground = yes\n\n[rabbit-amqp]\nconnect = localhost:5672\naccept = 5679\ncert = client/key-cert.pem\ndebug = 7\n```\n\n----------------------------------------\n\nTITLE: Running Log Publisher\nDESCRIPTION: Command to run the log emitter script that publishes messages to the fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nruby emit_log.rb\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings in RabbitMQ\nDESCRIPTION: Lists bindings for a specific virtual host. This command displays the exchange name and queue name of all bindings in the 'my-vhost' virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_bindings -p my-vhost exchange_name queue_name\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Limits for a Virtual Host in RabbitMQ\nDESCRIPTION: Command to limit the maximum number of concurrent connections in the 'qa_env' virtual host to 64. Virtual host limits help control resource usage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": 64}'\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with HTTP Fallback in RabbitMQ\nDESCRIPTION: This configuration sets up RabbitMQ to use LDAP for primary authentication, with a fallback to the HTTP backend. It includes the necessary HTTP backend configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1 = ldap\n# uses module name instead of a short alias, \"http\"\nauth_backends.2 = rabbit_auth_backend_http\n\n# See HTTP backend docs for details\nauth_http.user_path = http://my-authenticator-app/auth/user\nauth_http.vhost_path = http://my-authenticator-app/auth/vhost\nauth_http.resource_path = http://my-authenticator-app/auth/resource\nauth_http.topic_path = http://my-authenticator-app/auth/topic\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumer Groups in RabbitMQ using CLI\nDESCRIPTION: This command provides a concise view of stream consumer groups, showing the stream name, reference, and number of consumers for each group.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmqctl list_stream_consumer_groups stream,reference,consumers\n```\n\n----------------------------------------\n\nTITLE: Clearing Certificate Cache in RabbitMQ (Bash)\nDESCRIPTION: Command to clear the PEM cache for SSL certificates in RabbitMQ using rabbitmqctl in a Bash environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ\nDESCRIPTION: Sets a federation upstream named 'origin' using rabbitmqctl. This defines a remote endpoint that can be used in federation policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-queues/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream origin '{\"uri\":\"amqp://remote-host.local:5672\"}'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream origin '\"{\"\"uri\":\"\"amqp://remote-host.local:5672\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Setting up a Semaphore Queue in RabbitMQ using Java\nDESCRIPTION: This code snippet demonstrates how to declare a durable queue for a semaphore and publish a message to it using the default exchange in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-02-19-distributed-semaphores-with-rabbitmq/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDeclare(\"resource.semaphore\", true, false, false, null);\nString message = \"resource\";\nchannel.basicPublish(\"\", \"resource.semaphore\", null, message.getBytes());\n```\n\n----------------------------------------\n\nTITLE: Importing Server Certificate with keytool in Java\nDESCRIPTION: Command to import a server certificate into a Java trust store using the keytool utility. This creates a JKS format trust store that will be used for server certificate verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -import -alias server1 -file /path/to/server_certificate.pem -keystore /path/to/rabbitstore\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Client Framework in Objective-C\nDESCRIPTION: Imports the RabbitMQ client framework as a module in the Objective-C file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-objectivec.md#2025-04-09_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n@import RMQClient;\n```\n\n----------------------------------------\n\nTITLE: Running Stream PerfTest with Load Balancer (Java)\nDESCRIPTION: This command shows how to run the RabbitMQ stream performance test tool using Java, configured to always use a load balancer as the entry point.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-23-connecting-to-streams/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar stream-perf-test.jar --uris rabbitmq-stream://my-load-balancer:5552 --load-balancer\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status\nDESCRIPTION: Displays all nodes in the cluster grouped by node type, along with currently running nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl cluster_status\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Permissions in RabbitMQ (INI)\nDESCRIPTION: Default permissions assigned to the default user, granting full configure, read, and write permissions using regex patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\ndefault_permissions.configure = .*\ndefault_permissions.read = .*\ndefault_permissions.write = .*\n```\n\n----------------------------------------\n\nTITLE: Erlang SSL Versions Output\nDESCRIPTION: Detailed output showing SSL/TLS version support information from Erlang runtime\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[{ssl_app,\"9.1\"},\n {supported,['tlsv1.2','tlsv1.1',tlsv1]},\n {supported_dtls,['dtlsv1.2',dtlsv1]},\n {available,['tlsv1.2','tlsv1.1',tlsv1,sslv3]},\n {available_dtls,['dtlsv1.2',dtlsv1]}]\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with Snake-Case Arguments in RabbitMQ v2\nDESCRIPTION: Example of using the v2 command format with snake-case arguments (--auto-delete instead of auto_delete) to declare a quorum queue in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n# Note: --auto-delete\nrabbitmqadmin --vhost \"vh-2\" declare queue --name \"qq.1\" --type \"quorum\" --durable true --auto-delete false\n```\n\n----------------------------------------\n\nTITLE: Configuring Category-Specific Log Levels\nDESCRIPTION: Example of setting different log levels for specific categories while maintaining debug logging globally.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = debug\n\nlog.connection.level = info\nlog.channel.level = info\n```\n\n----------------------------------------\n\nTITLE: Running Log Receiver Commands\nDESCRIPTION: Command line examples for running the log receiver with different severity levels\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nruby receive_logs_direct.rb warning error > logs_from_rabbit.log\n```\n\nLANGUAGE: bash\nCODE:\n```\nruby receive_logs_direct.rb info warning error\n# => [*] Waiting for logs. To exit press CTRL+C\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Module with Advanced Arguments in advanced.config\nDESCRIPTION: Advanced configuration for specifying cache module start arguments using the advanced.config file. This example configures the segmented ETS cache with a custom argument (10000) passed to its start_link function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-cache-backend.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit, [\n   %% ...\n ]},\n\n {rabbitmq_auth_backend_cache, [\n    {cache_module, rabbit_auth_backend_ets_segmented},\n    {cache_module_args, [10000]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Multiple LDAP Servers in classic config Format\nDESCRIPTION: Erlang format configuration for connecting to multiple LDAP servers. This is the equivalent classic config format for specifying multiple LDAP servers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    {servers, [\"ldap.eng.megacorp.local\", \"192.168.0.100\"]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP DN Lookup Base in RabbitMQ\nDESCRIPTION: Configuration example showing how to set up the DN lookup attribute and base in RabbitMQ's LDAP plugin. This allows authentication using email addresses with Active Directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.dn_lookup_attribute = userPrincipalName\nauth_ldap.dn_lookup_base = DC=gopivotal,DC=com\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ and Erlang Signing Keys\nDESCRIPTION: Commands to import the signing keys for RabbitMQ and Erlang repositories. These keys are used to verify the authenticity of the packages during installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## primary RabbitMQ signing key\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc'\n## modern Erlang repository\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key'\n## RabbitMQ server repository\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key'\n```\n\n----------------------------------------\n\nTITLE: Listing Virtual Hosts with Metadata\nDESCRIPTION: Lists virtual hosts with their metadata using formatted table output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter=pretty_table list_vhosts name description tags default_queue_type\n```\n\n----------------------------------------\n\nTITLE: Shrinking Quorum Queue Clusters in RabbitMQ (Bash)\nDESCRIPTION: Removes quorum queue replicas (members) from a specified node, typically used when decommissioning a node from the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues shrink \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitmqCluster with Labels and Annotations\nDESCRIPTION: This YAML example shows how to add labels and annotations to a RabbitmqCluster resource, which will be propagated to resources created by the Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  labels:\n    app: rabbitmq\n  annotations:\n    some: annotation\n  name: rabbitmqcluster-sample\n```\n\n----------------------------------------\n\nTITLE: Management UI OAuth Resource Configuration\nDESCRIPTION: Configuration for OAuth resources in the RabbitMQ management UI, including client IDs and scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.1.id = rabbit_prod\nmanagement.oauth_resource_servers.1.client_id = rabbit_prod_mgt_ui\nmanagement.oauth_resource_servers.1.label = RabbitMQ Production\nmanagement.oauth_resource_servers.1.scopes = openid profile rabbitmq.tag:administrator\n\nmanagement.oauth_resource_servers.2.id = rabbit_dev\nmanagement.oauth_resource_servers.2.client_id = rabbit_dev_mgt_ui\nmanagement.oauth_resource_servers.2.label = RabbitMQ Development\nmanagement.oauth_resource_servers.2.scopes = openid profile rabbitmq.tag:management\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Directory Locations in RabbitMQ\nDESCRIPTION: Code snippet showing how to modify the rabbitmq-defaults script to use system directories instead of directories under the installation path. This changes RabbitMQ to use operating system convention locations for configuration, logs, and data.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-generic-unix.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPREFIX=${RABBITMQ_HOME}\n```\n\n----------------------------------------\n\nTITLE: HTML Version Compatibility Table\nDESCRIPTION: A structured HTML table displaying RabbitMQ version compatibility information with Erlang/OTP versions, including version ranges, requirements, and important notes about security vulnerabilities and support status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/which-erlang.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"matrix\">\n  <th><a href=\"/release-information\">Unsupported RabbitMQ Series</a></th>\n  <th>Minimum required Erlang/OTP</th>\n  <th>Maximum supported Erlang/OTP</th>\n  <th>Notes</th>\n  <!-- Table content rows omitted for brevity -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits with rabbitmqctl\nDESCRIPTION: These commands demonstrate how to clear specific or all limits for a user using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits user1 'max-connections'\n\nrabbitmqctl clear_user_limits user1 'max-channels'\n\nrabbitmqctl clear_user_limits user1 all\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Status\nDESCRIPTION: Commands to verify the status of the RabbitMQ cluster from different nodes, showing node membership and running status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Deleting Exchanges with RabbitMQ CLI\nDESCRIPTION: These commands show how to delete exchanges using the rabbitmqadmin CLI tool. The second command uses the --idempotently flag to ignore 404 Not Found responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" delete exchange --name \"target.exchange.name\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n# --idempotently means that 404 Not Found responses will not be  considered errors\nrabbitmqadmin --vhost \"events\" delete exchange --name \"target.exchange.name\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Basic Port Configuration for Web MQTT\nDESCRIPTION: INI configuration example showing how to change the default Web MQTT listener port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-mqtt.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nweb_mqtt.tcp.port = 9001\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Node to Initial State\nDESCRIPTION: Command to reset a RabbitMQ node to its virgin state, removing cluster configuration, management database data, and persistent messages. Requires the RabbitMQ application to be stopped first.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl reset\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Acknowledgment in RabbitMQ Consumer with Objective-C\nDESCRIPTION: This code demonstrates how to implement message acknowledgment in a RabbitMQ consumer using Objective-C. It subscribes to a queue with manual acknowledgment enabled, processes messages, and explicitly acknowledges them after processing is complete.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQBasicConsumeOptions manualAck = RMQBasicConsumeNoOptions;\n[q subscribe:manualAck handler:^(RMQMessage * _Nonnull message) {\n    NSString *messageText = [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding];\n    NSLog(@\"%@: Received %@\", name, messageText);\n    // imitate some work\n    unsigned int sleepTime = (unsigned int)[messageText componentsSeparatedByString:@\".\"].count - 1;\n    NSLog(@\"%@: Sleeping for %u seconds\", name, sleepTime);\n    sleep(sleepTime);\n\n    [ch ack:message.deliveryTag];\n}];\n```\n\n----------------------------------------\n\nTITLE: Debugging enabled plugins file mismatch\nDESCRIPTION: Shows an error that occurs when the rabbitmq-plugins tool and server node use different enabled plugins files, often occurring in development environments with multiple installations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_top\nEnabling plugins on node rabbit@warp10:\n# =>  rabbitmq_top\n# =>  The following plugins have been configured:\n# =>    rabbitmq_management\n# =>    rabbitmq_management_agent\n# =>    rabbitmq_shovel\n# =>    rabbitmq_shovel_management\n# =>    rabbitmq_top\n# =>    rabbitmq_web_dispatch\n# =>  Applying plugin configuration to rabbit@warp10...\n# =>  Error:\n# =>  {:enabled_plugins_mismatch, '/path/to/installation1/etc/rabbitmq/enabled_plugins', '/path/to/installation2/etc/rabbitmq/enabled_plugins'}\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Management Plugin via CLI\nDESCRIPTION: Command to enable the RabbitMQ management plugin using the rabbitmq-plugins CLI tool, which activates the web UI and HTTP API without requiring a node restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Limit in RabbitMQ\nDESCRIPTION: Sets the maximum number of channels that can be opened on a connection simultaneously to 100.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# no more 100 channels can be opened on a connection at the same time\nchannel_max = 100\n```\n\n----------------------------------------\n\nTITLE: Logging Default User Remote Connection Refusal in RabbitMQ\nDESCRIPTION: This log snippet shows the error message when the default 'guest' user attempts to connect from a remote host, which is not allowed by default for security reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n2024-08-24 17:28:32.153698-04:00 [error] <0.1567.0> PLAIN login refused: user 'guest' can only connect via localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Queues Version 2 in RabbitMQ\nDESCRIPTION: Configuration setting to enable Classic Queues Version 2 (CQv2) as the default queue version in RabbitMQ. This setting can be added to the RabbitMQ configuration file to globally enable CQv2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md#2025-04-09_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Multiple Deliveries in Java RabbitMQ Client\nDESCRIPTION: Demonstrates how to acknowledge multiple deliveries at once using the Java client for RabbitMQ. This method reduces network traffic by batching acknowledgements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// this example assumes an existing channel instance\n\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge all deliveries up to\n             // this delivery tag\n             channel.basicAck(deliveryTag, true);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Listing Topic Permissions in RabbitMQ\nDESCRIPTION: Command to list all topic permissions for users in a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_topic_permissions -p my-vhost\n```\n\n----------------------------------------\n\nTITLE: Filtering Queues for a Specific Virtual Host in RabbitMQ API (HTTP)\nDESCRIPTION: This HTTP GET request retrieves the first page of queues for the 'my-vhost' virtual host. It uses pagination parameters and additional filtering options like 'name' and 'use_regex' to customize the query results.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:15672/api/queues/my-vhost?page=1&page_size=100&name=&use_regex=false&pagination=true\n```\n\n----------------------------------------\n\nTITLE: Overriding OAuth2 Resource Settings\nDESCRIPTION: Example of overriding default settings for a specific resource including custom label and logon type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.3.id = rabbit_qa\nmanagement.oauth_resource_servers.3.label = RabbitMQ QA\nmanagement.oauth_resource_servers.3.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_resource_servers.3.oauth_provider_url = http://qa_url\n```\n\n----------------------------------------\n\nTITLE: Enabling Firehose Tracing in RabbitMQ\nDESCRIPTION: Command to turn on Firehose tracing for a specific virtual host in RabbitMQ. This allows administrators to capture all published and delivered messages for debugging purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/firehose.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl trace_on -p [virtual host]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Specific Commands in PowerShell\nDESCRIPTION: Demonstrates how to get usage information for particular commands (add_vhost and status) using rabbitmqctl and rabbitmq-diagnostics in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat help add_vhost\n\nrabbitmq-diagnostics.bat help status\n```\n\n----------------------------------------\n\nTITLE: Disabling Reverse DNS Lookups in RabbitMQ Configuration\nDESCRIPTION: This configuration snippet demonstrates how to explicitly disable reverse DNS lookups in RabbitMQ. When set to false, RabbitMQ will not perform reverse DNS lookups for client IP addresses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nreverse_dns_lookups = false\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Service and Feature Flags\nDESCRIPTION: Commands for starting RabbitMQ as a service and enabling all feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start rabbitmq\n/opt/homebrew/sbin/rabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Configuring EPMD Port\nDESCRIPTION: Environment variable setting to specify which port EPMD should bind to. All hosts in a cluster must use the same port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# makes epmd bind to port 4369\nexport ERL_EPMD_PORT=\"4369\"\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy with Single Upstream in RabbitMQ\nDESCRIPTION: Command to apply a single federation upstream to resources matching a pattern using RabbitMQ policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream\":\"up-1\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Migration Function in Erlang\nDESCRIPTION: Implementation of a migration function for feature flags that handles both enabling the feature and checking if it's enabled, including table and field verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\nquorum_queue_migration(FeatureName, _FeatureProps, enable) ->\n    Tables = ?quorum_queue_tables,\n    rabbit_table:wait(Tables),\n    Fields = amqqueue:fields(amqqueue_v2),\n    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);\nquorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->\n    Tables = ?quorum_queue_tables,\n    rabbit_table:wait(Tables),\n    Fields = amqqueue:fields(amqqueue_v2),\n    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso\n    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Severity Routing Key in JavaScript\nDESCRIPTION: Illustrates how to publish messages to a direct exchange with severity as the routing key using the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar exchange = 'direct_logs';\n\nchannel.assertExchange(exchange, 'direct', {\n  durable: false\n});\nchannel.publish(exchange, severity, Buffer.from(msg));\n```\n\n----------------------------------------\n\nTITLE: Peer Discovery Command - Bash\nDESCRIPTION: Executes peer discovery and displays discovered nodes\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics discover_peers --timeout 60\n```\n\n----------------------------------------\n\nTITLE: Re-enabling a Denied Deprecated Feature in RabbitMQ Configuration\nDESCRIPTION: Configuration example showing how to re-enable a deprecated feature that is denied by default, allowing applications more time to adapt while still upgrading RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/deprecated-features/index.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Permit a deprecated feature that is denied by default.\ndeprecated_features.permit.some_deprecated_feature = true\n```\n\n----------------------------------------\n\nTITLE: Maven Package Build Command\nDESCRIPTION: Maven wrapper command to clean and package the Spring AMQP tutorial application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n```\n\n----------------------------------------\n\nTITLE: Defining Static Shovels in RabbitMQ Configuration\nDESCRIPTION: Example of how to define static shovels in the RabbitMQ advanced configuration file. Shows the overall structure with a shovel named 'shovel_one'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  %% ...\n]},\n\n{rabbitmq_shovel, [\n  {shovels, [\n    {shovel_one, [\n      %% shovel_one properties ...\n    ]},\n    %% ...\n  ]}\n]}\n```\n\n----------------------------------------\n\nTITLE: All-nodes Flag for reset_stats_db Command\nDESCRIPTION: Flag that resets the RabbitMQ management statistics database for all nodes in the cluster instead of just the local node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_89\n\nLANGUAGE: bash\nCODE:\n```\n--all\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in RabbitMQ\nDESCRIPTION: The enable_feature_flag command activates specific feature flags on the target RabbitMQ node. It can enable individual flags by name or all available feature flags at once.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag restart_streams\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Metrics Endpoint JSON Response\nDESCRIPTION: Example JSON output from Spring Boot's metrics endpoint showing various RabbitMQ metrics including acknowledged, consumed, published, and rejected message counts and rates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2016-11-30-metrics-support-in-rabbitmq-java-client-4-0/index.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rabbitmq.acknowledged.count\": 5445,\n    \"rabbitmq.acknowledged.fifteenMinuteRate\": 7.789880284345983,\n    \"rabbitmq.acknowledged.fiveMinuteRate\": 9.311935481093306,\n    \"rabbitmq.acknowledged.meanRate\": 9.930420428656602,\n    \"rabbitmq.acknowledged.oneMinuteRate\": 9.972266275538352,\n    \"rabbitmq.channels\": 2,\n    \"rabbitmq.connections\": 1,\n    \"rabbitmq.consumed.count\": 5445,\n    \"rabbitmq.consumed.fifteenMinuteRate\": 7.789875530041546,\n    \"rabbitmq.consumed.fiveMinuteRate\": 9.311910098253794,\n    \"rabbitmq.consumed.meanRate\": 9.930418948751754,\n    \"rabbitmq.consumed.oneMinuteRate\": 9.972238610447798,\n    \"rabbitmq.published.count\": 5445,\n    \"rabbitmq.published.fifteenMinuteRate\": 7.789875530041546,\n    \"rabbitmq.published.fiveMinuteRate\": 9.311910098253794,\n    \"rabbitmq.published.meanRate\": 9.930419905146142,\n    \"rabbitmq.published.oneMinuteRate\": 9.972238610447798,\n    \"rabbitmq.rejected.count\": 0,\n    \"rabbitmq.rejected.fifteenMinuteRate\": 0,\n    \"rabbitmq.rejected.fiveMinuteRate\": 0,\n    \"rabbitmq.rejected.meanRate\": 0,\n    \"rabbitmq.rejected.oneMinuteRate\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Starting JMS Subscriber with OAuth Token (Bash)\nDESCRIPTION: Command to start a JMS subscriber application that authenticates using an OAuth token.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake start-jms-subscriber\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for RabbitMQ Java Client 5.0\nDESCRIPTION: XML configuration for adding the RabbitMQ Java Client 5.0 dependency to a Maven project. This specifies the Maven coordinates required to use the library in a project.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-09-29-rabbitmq-java-client-5-0-is-released/index.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.rabbitmq</groupId>\n    <artifactId>amqp-client</artifactId>\n    <version>5.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags Status in RabbitMQ\nDESCRIPTION: Command to display the current status of all feature flags in a formatted table using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter pretty_table list_feature_flags\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ OAuth2 Configuration\nDESCRIPTION: Configuration setting in rabbitmq.conf that disables audience claim validation due to Keycloak limitations\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-proxy.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.verify_aud = false\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Listeners with rabbitmq-diagnostics\nDESCRIPTION: This bash command uses rabbitmq-diagnostics to check the interface and port used by the Prometheus plugin in a running RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -s listeners\n```\n\n----------------------------------------\n\nTITLE: Getting and Compiling Dependencies\nDESCRIPTION: Commands to fetch and compile the AMQP dependency using Mix.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix deps.get\nmix deps.compile\n```\n\n----------------------------------------\n\nTITLE: Starting OAuth 2.0 Authenticated AMQP Producers\nDESCRIPTION: Commands to launch AMQP producers with OAuth 2.0 tokens for different resources (prod and dev).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-multiresource.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=prod_producer TOKEN=$(bin/keycloak/token prod_producer PdLHb1w8RH1oD5bpppgy8OF9G6QeRpL9)\nmake start-perftest-producer-with-token PRODUCER=dev_producer TOKEN=$(bin/keycloak/token dev_producer z1PNm47wfWyulTnAaDOf1AggTy3MxX2H)\n```\n\n----------------------------------------\n\nTITLE: Configuring JMX Metrics Reporting in RabbitMQ\nDESCRIPTION: Demonstrates how to set up JMX reporting for RabbitMQ metrics using Dropwizard Metrics' JmxReporter with a shared MetricRegistry.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2016-11-30-metrics-support-in-rabbitmq-java-client-4-0/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMetricRegistry registry = new MetricRegistry();\nStandardMetricsCollector metrics = new StandardMetricsCollector(registry);\n\nConnectionFactory connectionFactory = new ConnectionFactory();\nconnectionFactory.setMetricsCollector(metrics);\n\nJmxReporter reporter = JmxReporter\n    .forRegistry(registry)\n    .inDomain(\"com.rabbitmq.client.jmx\")\n    .build();\nreporter.start();\n```\n\n----------------------------------------\n\nTITLE: Managing Global Parameters in RabbitMQ (Bash)\nDESCRIPTION: Commands for setting, clearing, and listing global parameters using rabbitmqctl in a Bash environment. Global parameters are not tied to a specific virtual host and consist of a name and value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# sets a global (virtual-host-independent) runtime parameter\nrabbitmqctl set_global_parameter <name> <value>\n\n# clears (unsets) a global (virtual-host-independent) runtime parameter\nrabbitmqctl clear_global_parameter <name>\n\n# lists global (virtual-host-independent) runtime parameters\nrabbitmqctl list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Rotating RabbitMQ Log Files\nDESCRIPTION: This command instructs the RabbitMQ node to perform internal log rotation based on the logging settings specified in the configuration file. The operation is asynchronous.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl rotate_logs\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Disk Free Limit in RabbitMQ\nDESCRIPTION: Default configuration for the disk free space limit, which is set to 50MB by default but should be revised for production environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 50MB\n```\n\n----------------------------------------\n\nTITLE: Setting Back-off Reconnect Interval in Python\nDESCRIPTION: Shows how to set a back-off reconnect interval for automatic connection recovery in Python. This example sets a 2-second interval between reconnection attempts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nenvironment = Environment(\n    \"amqp://guest:guest@localhost:5672/\",\n    recovery_configuration=RecoveryConfiguration(back_off_reconnect_interval=timedelta(seconds=2)),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Host Metadata Using CLI\nDESCRIPTION: Updates virtual host metadata including description, queue type and tags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl update_vhost_metadata qa1 --description \"QA environment for issue 1662\" --default-queue-type quorum --tags qa,project-a,qa-1662\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Detailed Message Stats in RabbitMQ API\nDESCRIPTION: Example JSON response showing detailed message statistics for a queue, including breakdown of incoming messages from different exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"incoming\": [\n  {\n    \"stats\": {\n      \"publish\": 352593,\n      \"publish_details\": {\n        \"rate\": 100.2\n      }\n    },\n    \"exchange\": {\n      \"name\": \"my-exchange\",\n      \"vhost\": \"/\"\n    }\n  }\n  {\n    \"stats\": {\n      \"publish\": 543784,\n      \"publish_details\": {\n        \"rate\": 54.6\n      }\n    },\n    \"exchange\": {\n      \"name\": \"amq.topic\",\n      \"vhost\": \"/\"\n    }\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Bindings via Command Line\nDESCRIPTION: Uses rabbitmqctl to list all bindings on the RabbitMQ server, showing the relationships between exchanges and queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_bindings\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity-Provider Initiated Logon\nDESCRIPTION: Configuration for enabling identity-provider initiated logon flow, which allows users to be redirected to RabbitMQ with a token obtained under the covers from a web portal.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_provider_url = https://my-web-portal\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Username Claims for OAuth 2.0 in RabbitMQ\nDESCRIPTION: Configuration to specify which JWT claims should be used to extract the username displayed in the Management UI. This allows for using more user-friendly identifiers than the default sub claim.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.preferred_username_claims.1 = user_name\nauth_oauth2.preferred_username_claims.2 = email\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Certificate Support for Multiple OAuth2 Providers\nDESCRIPTION: Configuration setting to enable wildcard certificate support when multiple OAuth2 identity providers are used. This allows specifying the setting for a specific provider instead of globally.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-oauth2.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nauth_oauth2.oauth_providers.<my_oauth_provider_name>.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Default Guest User Loopback Configuration\nDESCRIPTION: Default configuration for the guest user that restricts it to localhost-only connections for security purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\n# guest uses well known\n# credentials and can only\n# log in from localhost\n# by default\nloopback_users.guest = true\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual Host Metadata Using HTTP API\nDESCRIPTION: Retrieves virtual host metadata using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X GET http://rabbitmq.local:15672/api/vhosts/qa1\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Requirements for RabbitmqCluster in YAML\nDESCRIPTION: Specifies resource requests and limits for RabbitmqCluster Pods. The example sets both requests and limits to 1000m CPU and 2Gi memory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  resources:\n    requests:\n      cpu: 1000m\n      memory: 2Gi\n    limits:\n      cpu: 1000m\n      memory: 2Gi\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Specific Version\nDESCRIPTION: Command to start a specific version of RabbitMQ with OAuth configuration using Docker image tags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-idp-initiated.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMODE=portal OAUTH_PROVIDER=uaa IMAGE=rabbitmq IMAGE_TAG=<YourVersion> make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Topic Exchange Routing Pattern Examples\nDESCRIPTION: Demonstrates the pattern matching behavior of Topic exchanges using routing key examples with wildcards. Shows how * matches exactly one segment and # matches zero or more segments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/exchanges.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"regions.na.cities.*\" -> matches \"regions.na.cities.toronto\", \"regions.na.cities.newyork\"\n\"audit.events.#\" -> matches \"audit.events.users.signup\", \"audit.events.orders.placed\"\n\"#\" -> matches any routing key\n```\n\n----------------------------------------\n\nTITLE: Inspecting Page Cache Size in Containerized Environments with Bash\nDESCRIPTION: Commands to check both RSS (resident set size) and page cache footprint in containerized environments like Kubernetes. These paths provide metrics for monitoring memory consumption in container-based deployments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat /sys/fs/cgroup/memory/memory.stat\ncat /sys/fs/cgroup/memory/memory.usage_in_bytes\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Username Claims in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to configure RabbitMQ to use specific claims for username extraction from OAuth 2.0 tokens. It sets up a fallback mechanism to look for 'user_name' and 'email' claims before defaulting to 'sub' or 'client_id'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.preferred_username_claims.1 = user_name\nauth_oauth2.preferred_username_claims.2 = email\n...\n```\n\n----------------------------------------\n\nTITLE: Message Routing Protocol Documentation\nDESCRIPTION: Documentation that explains how message routing works across different protocols (AMQP 0-9-1, AMQP 1.0, MQTT, STOMP) in RabbitMQ, including error handling and message acknowledgment mechanisms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/publishers/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### MQTT\n\nIn MQTT, messages are published on a connection to a topic.\nThe server side MQTT connection process routes messages via the [topic exchange](/tutorials/amqp-concepts#exchange-topic) to [queues](./queues).\n\nWhen publisher chooses to use QoS 1, published messages are acknowledged by RabbitMQ\nusing a [PUBACK packet](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901121).\n\nPublishers can provide a hint to the server that the published message on the topic\nmust be [retained](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901104) (stored for future delivery to new subscribers). Only the latest published message for each topic\ncan be retained.\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ Users\nDESCRIPTION: Demonstrates how to delete a RabbitMQ user in both Bash and PowerShell environments using the rabbitmqctl command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user 'username'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat delete_user 'username'\n```\n\n----------------------------------------\n\nTITLE: HTTP API Federation Configuration\nDESCRIPTION: Defines federation policy via HTTP API endpoint with pattern matching and upstream configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/federate-me\n{\"pattern\":\"^amq\\.\", \"definition\":{\"federation-upstream-set\":\"all\"}, \"apply-to\":\"exchanges\"}\n```\n\n----------------------------------------\n\nTITLE: Filtering RabbitMQ-Specific Log Entries\nDESCRIPTION: Command to filter system logs to show only RabbitMQ-related entries using journalctl and grep\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP Default User Credentials\nDESCRIPTION: INI configuration to set default login and passcode for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_user = guest\nstomp.default_pass = guest\n```\n\n----------------------------------------\n\nTITLE: Receive.cs Connection Setup\nDESCRIPTION: Code to establish connection and declare queue for message consumption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-dotnet.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar factory = new ConnectionFactory { HostName = \"localhost\" };\nusing var connection = factory.CreateConnection();\nusing var channel = connection.CreateModel();\n\nchannel.QueueDeclare(queue: \"hello\",\n                     durable: false,\n                     exclusive: false,\n                     autoDelete: false,\n                     arguments: null);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue with NoWait Option in RabbitMQ .NET Client\nDESCRIPTION: Shows how to declare a queue with the noWait option set to true, which instructs the server not to send a response. This is more efficient but offers lower safety guarantees and depends more on the heartbeat mechanism.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueDeclareAsync(queueName, true, false, false, null, noWait: true);\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Consumer with OAuth 2.0 Authentication\nDESCRIPTION: This command starts a PerfTest consumer application that uses OAuth 2.0 for authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-consumer\n```\n\n----------------------------------------\n\nTITLE: Receiving Logs with Multiple Bindings using Topic Exchange in RabbitMQ with Objective-C\nDESCRIPTION: This snippet shows how to create multiple bindings to receive logs from different sources or with different severities using a topic exchange in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n[self receiveLogsTopic:@[@\"kern.*\", @\"*.critical\"]];\n```\n\n----------------------------------------\n\nTITLE: Publishing Task Messages to RabbitMQ Queue\nDESCRIPTION: Commands to publish multiple messages with varying complexity (indicated by the number of dots) to the work queue using new_task.py. Each dot represents one second of processing time in the worker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# shell 3\npython new_task.py First message.\npython new_task.py Second message..\npython new_task.py Third message...\npython new_task.py Fourth message....\npython new_task.py Fifth message.....\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ-Web-Stomp Plugins\nDESCRIPTION: These shell commands enable the RabbitMQ-Web-Stomp and RabbitMQ-Web-Stomp-Examples plugins using the rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-05-14-introducing-rabbitmq-web-stomp/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo rabbitmq-plugins enable rabbitmq_web_stomp\nsudo rabbitmq-plugins enable rabbitmq_web_stomp_examples\n```\n\n----------------------------------------\n\nTITLE: Adding JVM and System Metrics to RabbitMQ Java Client with Micrometer\nDESCRIPTION: This code snippet expands on the previous example by adding JVM and system metrics to the JMX meter registry. It includes metrics for class loader, JVM memory, garbage collection, processor, and threads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\n// JVM and system metrics:\nnew ClassLoaderMetrics().bindTo(jmxRegistry);\nnew JvmMemoryMetrics().bindTo(jmxRegistry);\nnew JvmGcMetrics().bindTo(jmxRegistry);\nnew ProcessorMetrics().bindTo(jmxRegistry);\nnew JvmThreadMetrics().bindTo(jmxRegistry);\nConnectionFactory connectionFactory = new ConnectionFactory();\nMicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\n    jmxRegistry, \"rabbitmq.client\"\n);\nconnectionFactory.setMetricsCollector(metricsCollector);\n\nConnection connection = connectionFactory.newConnection();\nChannel channel = connection.createChannel();\nString queue = channel.queueDeclare().getQueue();\nchannel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\nexecutor.submit(() -> {\n    Random random = new Random();\n    while (true) {\n        Thread.sleep(random.nextInt(100));\n        channel.basicPublish(\"\", queue, null, \"\".getBytes());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Users in rabbitmqadmin\nDESCRIPTION: This command demonstrates how to list users using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list users\n```\n\n----------------------------------------\n\nTITLE: Verifying RabbitMQ Instance with PerfTest\nDESCRIPTION: Bash commands to deploy and run the RabbitMQ PerfTest tool to verify that a RabbitMQ instance is running correctly by testing message sending and receiving functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ninstance=INSTANCE-NAME\nusername=$(kubectl get secret ${instance}-default-user -o jsonpath=\"{.data.username}\" | base64 --decode)\npassword=$(kubectl get secret ${instance}-default-user -o jsonpath=\"{.data.password}\" | base64 --decode)\nservice=${instance}\nkubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri \"amqp://${username}:${password}@${service}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Host Metadata via HTTP API\nDESCRIPTION: Updates the metadata for an existing virtual host using the HTTP API. This example modifies the description, tags, and default queue type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \\\n                           -H \"content-type: application/json\" \\\n                           --data-raw '{\"description\": \"QA environment for issue 1662\", \"tags\": \"qa,project-a,qa-1662\", \"default_queue_type\": \"quorum\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Unlimited Prefetch in Java\nDESCRIPTION: This example shows how to set an unlimited prefetch by passing 0 to the basicQos method, allowing any number of unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumer-prefetch.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nChannel channel = ...;\nConsumer consumer = ...;\nchannel.basicQos(0); // No limit for this consumer\nchannel.basicConsume(\"my-queue\", false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Disabling Consumer Timeout in RabbitMQ Erlang Config\nDESCRIPTION: Advanced configuration example showing how to disable consumer timeout using advanced.config in Erlang format. This approach is not recommended for production use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumers.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config\n[\n  {rabbit, [\n    {consumer_timeout, undefined}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Adding Users in Windows Command Prompt\nDESCRIPTION: Shows how to add RabbitMQ users using Windows Command Prompt (cmd), including proper quoting for passwords with special characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\nrem password is provided as a command line argument\nrabbitmqctl.bat add_user \"username\" \"9a55f70a841f18b97c3a7db939b7adc9e34a0f1d\"\n\nrem passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user \"username\" \"w63pnZ&LnYMO(t\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EPMD Interface and Port\nDESCRIPTION: Commands for configuring EPMD interface binding and port settings, including how to stop the EPMD process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# makes epmd listen on loopback IPv6 and IPv4 interfaces\nexport ERL_EPMD_ADDRESS=\"::1\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Stops local epmd process.\n# Use after shutting down RabbitMQ.\nepmd -kill\n```\n\nLANGUAGE: bash\nCODE:\n```\n# makes epmd bind to port 4369\nexport ERL_EPMD_PORT=\"4369\"\n```\n\n----------------------------------------\n\nTITLE: Manual Package Installation with RPM\nDESCRIPTION: Commands for manually installing RabbitMQ using RPM after importing signing keys and installing dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrpm --import https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\n\n## install these dependencies from standard OS repositories\ndnf install -y logrotate\n\n# The RabbitMQ RPM package is suitable for both RHEL 9 (modern) and RHEL 8-based (older) distributions\ndnf install -y rabbitmq-server-${RabbitMQServerPackageFilename}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Handshake Timeout in RabbitMQ\nDESCRIPTION: This configuration snippet demonstrates how to set the TLS handshake timeout in RabbitMQ to 10 seconds (10000 milliseconds). This may be necessary when TLS is enabled and the default timeout is insufficient.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nssl_handshake_timeout = 10000\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Specific Version and OAuth 2.0 Configuration\nDESCRIPTION: Command to start a specific version of RabbitMQ with OAuth 2.0 authentication, allowing version selection through environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-idp-initiated.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMODE=portal OAUTH_PROVIDER=uaa IMAGE=rabbitmq IMAGE_TAG=<YourVersion> make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Using --help Option for RabbitMQ CLI Tools in PowerShell\nDESCRIPTION: Shows how to use the --help option to get general help information for rabbitmqctl and rabbitmq-diagnostics in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat --help\n\nrabbitmq-diagnostics.bat --help\n```\n\n----------------------------------------\n\nTITLE: Listing Topic Permissions in RabbitMQ Virtual Host (Bash)\nDESCRIPTION: Shows all users who have been granted topic permissions in a specific virtual host. This command helps in managing and reviewing fine-grained access control for publish/subscribe patterns in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_topic_permissions -p my-vhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in PowerShell\nDESCRIPTION: PowerShell version of adding a federation upstream named 'origin' that points to a remote RabbitMQ host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federated-exchanges/index.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream origin '\"{\"\"uri\":\"\"amqp://remote-host.local:5672\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Scope Aliases in RabbitMQ.conf\nDESCRIPTION: This snippet shows how to map Okta roles to RabbitMQ scope aliases in the rabbitmq.conf file. It defines admin and monitoring roles with their respective permissions using the auth_oauth2.scope_aliases configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-okta.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n#...\nauth_oauth2.scope_aliases.admin = okta.read:*/* okta.write:*/* okta.configure:*/* okta.tag:administrator\nauth_oauth2.scope_aliases.monitoring = okta.tag:management okta.read:*/\n#...\n```\n\n----------------------------------------\n\nTITLE: Clearing Certificate Cache in RabbitMQ (CMD)\nDESCRIPTION: Command to clear the PEM cache for SSL certificates in RabbitMQ using rabbitmqctl in a CMD environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_48\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] \"ssl:clear_pem_cache().\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Log Messages with Topic Exchange in JavaScript\nDESCRIPTION: This script connects to RabbitMQ, creates a topic exchange, and binds a queue to the exchange with specified routing keys. It then consumes messages from the queue, demonstrating how to receive messages based on topic patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\nvar args = process.argv.slice(2);\n\nif (args.length == 0) {\n  console.log(\"Usage: receive_logs_topic.js <facility>.<severity>\");\n  process.exit(1);\n}\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = 'topic_logs';\n\n    channel.assertExchange(exchange, 'topic', {\n      durable: false\n    });\n\n    channel.assertQueue('', {\n      exclusive: true\n    }, function(error2, q) {\n      if (error2) {\n        throw error2;\n      }\n      console.log(' [*] Waiting for logs. To exit press CTRL+C');\n\n      args.forEach(function(key) {\n        channel.bindQueue(q.queue, exchange, key);\n      });\n\n      channel.consume(q.queue, function(msg) {\n        console.log(\" [x] %s:'%s'\", msg.fields.routingKey, msg.content.toString());\n      }, {\n        noAck: true\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dead Lettering Messages with Custom Reason in AMQP 1.0\nDESCRIPTION: Shows how to dead letter a message with a custom reason annotation using the RabbitMQ AMQP 1.0 Java Client. The code demonstrates adding a dead letter reason to message annotations before discarding the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-10-11-modified-outcome/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = connection.consumerBuilder()\n    .queue(ordersQueue)\n    .messageHandler((context, message) -> {\n        Map<String, Object> annotations = new HashMap<>();\n        annotations.put(\"x-opt-dead-letter-reason\", \"Incompatible Message Format\");\n        context.discard(annotations);\n    }).build();\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Producer with Custom Token\nDESCRIPTION: This command starts a PerfTest producer application using a custom JWT token with roles in the extra scope field. It generates the token using the JWT token script with producer-specific claims.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer_with_roles TOKEN=$(bin/jwt_token producer-role-in-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ MQTT Listener Log Entry\nDESCRIPTION: Example log entry showing successful MQTT listener initialization on port 1883.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-09-12-mqtt-adapter/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n=INFO REPORT==== 12-Sep-2012::14:21:26 ===\n  started MQTT TCP Listener on [::]:1883\n```\n\n----------------------------------------\n\nTITLE: Updating APT Package Sources\nDESCRIPTION: Commands to update apt package sources to include RabbitMQ repositories and install required packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n```\n\n----------------------------------------\n\nTITLE: Enabling the RabbitMQ Web MQTT Plugin with rabbitmq-plugins\nDESCRIPTION: Command to enable the Web MQTT plugin using the rabbitmq-plugins tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_web_mqtt\n```\n\n----------------------------------------\n\nTITLE: Checking If Quorum Queue Replicas Have Finished Initial Sync (Bash)\nDESCRIPTION: A health check command that exits with a non-zero status if there are any ongoing initial quorum queue replica synchronization operations, ensuring safe node operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/grow-then-shrink-upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# exits with a non-zero status if there are any ongoing initial quorum queue\n# replica sync operations\nrabbitmq-diagnostics check_if_new_quorum_queue_replicas_have_finished_initial_sync\n```\n\n----------------------------------------\n\nTITLE: Enabled Plugins File Format in Erlang\nDESCRIPTION: Shows the format of the enabled_plugins file which contains a list of enabled plugins. The example shows management and shovel plugins enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[rabbitmq_management,rabbitmq_management_agent,rabbitmq_shovel].\n```\n\n----------------------------------------\n\nTITLE: MQTT Scopes Configuration JSON\nDESCRIPTION: JSON configuration for the scopes required to publish a message to a MQTT topic, including write, configure, and read permissions on all virtual hosts, exchanges, and topics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scope\": [\n    \"rabbitmq.write:*/*/*\",\n    \"rabbitmq.configure:*/*/*\",\n    \"rabbitmq.read:*/*/*\"\n\n  ],\n  \"extra_scope\": \"rabbitmq.tag:management\",\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Limits Without Systemd\nDESCRIPTION: Command to set file handle limits on traditional Linux systems\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 64000\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Scope Prefix in RabbitMQ\nDESCRIPTION: Demonstrates how to configure a custom scope prefix for OAuth 2.0 token permissions. Shows both setting a custom prefix and an empty prefix.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.scope_prefix = api://\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and HTTPS Together for RabbitMQ Management Plugin\nDESCRIPTION: This snippet demonstrates how to configure both HTTP and HTTPS listeners on different ports for the RabbitMQ Management plugin using the INI configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.port       = 15672\n\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Level in RabbitMQ (INI)\nDESCRIPTION: Default logging level configuration, set to 'info' which logs errors, warnings, and informational messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\n```\n\n----------------------------------------\n\nTITLE: Receive.cs Namespace Declarations\nDESCRIPTION: Required namespace imports for the message receiver implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-dotnet.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\n```\n\n----------------------------------------\n\nTITLE: TLS Versions Output Format\nDESCRIPTION: Example output showing supported TLS versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ntlsv1.2\ntlsv1.1\ntlsv1\nsslv3\n```\n\n----------------------------------------\n\nTITLE: Emitting an Error Log Message in Swift RabbitMQ Client\nDESCRIPTION: Example of calling the emitLogDirect function to send an error log message. This demonstrates how to specify the severity when publishing a message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nself.emitLogDirect(\"Hi there!\", severity: \"error\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection with Client-Provided Name in RabbitMQ .NET Client\nDESCRIPTION: Sets up a connection to RabbitMQ with a client-provided connection name, which helps identify the application in server logs and management UI. The factory is configured with credentials, virtual host, hostname, and a descriptive client name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// \"guest\"/\"guest\" by default, limited to localhost connections\nfactory.UserName = user;\nfactory.Password = pass;\nfactory.VirtualHost = vhost;\nfactory.HostName = hostName;\n\n// this name will be shared by all connections instantiated by\n// this factory\nfactory.ClientProvidedName = \"app:audit component:event-consumer\";\n\nIConnection conn = await factory.CreateConnectionAsync();\n```\n\n----------------------------------------\n\nTITLE: Detecting Classic Queue Mirroring Policies in RabbitMQ\nDESCRIPTION: Commands to check for and list policies that enable classic queue mirroring in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_if_cluster_has_classic_queue_mirroring_policy\n\nrabbitmq-diagnostics list_policies_with_classic_queue_mirroring -s --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Overflow Policy Using rabbitmqctl\nDESCRIPTION: Configures a policy to limit queue to 2 messages and reject new publishes when full using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/maxlength/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy my-pol \"^two-messages$\" \\\n  '{\"max-length\":2,\"overflow\":\"reject-publish\"}' \\\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Starting UAA for OAuth 2.0 Authentication with RabbitMQ\nDESCRIPTION: This command starts the UAA (User Account and Authentication) server for OAuth 2.0 authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake start-uaa\n```\n\n----------------------------------------\n\nTITLE: Decoding Encrypted Values with rabbitmqctl on Windows\nDESCRIPTION: Examples of decoding encrypted values using rabbitmqctl on Windows PowerShell with the same passphrase used for encryption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_55\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl decode \"{encrypted, <<\\\"...\\\">>}\" mypassphrase\n# => <<\"guest\">>\nrabbitmqctl decode \"{encrypted, <<\\\"...\\\">>}\" mypassphrase\n# => \"amqp://fred:secret@host1.domain/my_vhost\"\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository Signing Keys\nDESCRIPTION: These bash commands add the RabbitMQ signing key and Launchpad PPA signing key to the system, enabling apt to trust packages signed by these keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# primary RabbitMQ signing key\ncurl -1sLf \"https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.github.rabbitmq.signing.gpg > /dev/null\n\n# Launchpad PPA signing key for apt\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Signing Keys\nDESCRIPTION: These commands add the RabbitMQ signing key and Launchpad PPA signing key to the system, enabling apt to trust packages signed by these keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n# primary RabbitMQ signing key\ncurl -1sLf \"https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.github.rabbitmq.signing.gpg > /dev/null\n\n# Launchpad PPA signing key for apt\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Creating Operator Policy in RabbitMQ API\nDESCRIPTION: JSON payload for declaring or updating an operator policy. The structure is the same as for regular policies, including pattern, definition, priority, and apply-to fields.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\"pattern\":\"^amq.\", \"definition\": {\"federation-upstream-set\":\"all\"}, \"priority\": 10, \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitmqCluster for Openshift's Arbitrary User IDs\nDESCRIPTION: YAML configuration to override the default SecurityContext in a RabbitmqCluster deployment. This configuration resets the securityContext to default values, ensuring that RabbitMQ Pods use Openshift's arbitrary user ID assignment instead of the fixed non-root UIDs normally used by the operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-on-openshift.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  ...\nspec:\n  ...\n  override:\n    statefulSet:\n      spec:\n        template:\n          spec:\n            containers: []\n            securityContext: {}\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest Producer with OAuth Token\nDESCRIPTION: Command to run RabbitMQ PerfTest tool with OAuth 2.0 authentication. Obtains a token first and passes it as a parameter to the producer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer TOKEN=$(bin/keycloak/token producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn test)\n```\n\n----------------------------------------\n\nTITLE: Check Cipher Suites (Windows)\nDESCRIPTION: Command to list available cipher suites in OpenSSL format on Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat cipher_suites --format openssl --silent\n```\n\n----------------------------------------\n\nTITLE: Example TOML Configuration File for RabbitMQ Admin v2\nDESCRIPTION: Another example of a TOML-formatted configuration file for rabbitmqadmin v2, showing connection settings for different environments with credentials.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_25\n\nLANGUAGE: toml\nCODE:\n```\n[local]\nhostname = \"localhost\"\nport = 15672\nusername = \"lolz\"\npassword = \"lolz\"\nvhost = '/'\n\n[staging]\nhostname = \"192.168.20.31\"\nport = 15672\nusername = \"staging-2387a72329\"\npassword = \"staging-1d20cfbd9d\"\n\n[production]\nhostname = \"(redacted)\"\nport = 15671\nusername = \"user-efe1f4d763f6\"\npassword = \"(redacted)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Scope Prefix in RabbitMQ OAuth 2.0\nDESCRIPTION: Configuration example showing how to set an empty string as the scope prefix for OAuth 2.0 authentication, removing any prefix from the scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.scope_prefix = ''\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel from AMQP 0.9.1 to AMQP 1.0\nDESCRIPTION: Detailed configuration for transferring messages from an AMQP 0.9.1 source to an AMQP 1.0 destination. Includes source exchange and queue declarations, destination properties, and SASL authentication options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n [{shovels, [{my_first_shovel,\n              {source,\n               [{protocol, amqp091},\n                {uris, [\"amqp://fred:secret@host1.domain/my_vhost\",\n                        \"amqp://john:secret@host2.domain/my_vhost\"]},\n                {declarations, [{'exchange.declare',\n                                   [{exchange, <<\"my_fanout\">>},\n                                    {type, <<\"fanout\">>},\n                                    durable]},\n                                {'queue.declare',\n                                   [{arguments,\n                                      [{<<\"x-message-ttl\">>, long, 60000}]}]},\n                                {'queue.bind',\n                                   [{exchange, <<\"my_fanout\">>},\n                                    {queue,    <<>>}\n                                    ]}\n                               ]},\n                {queue, <<>>},\n                {prefetch_count, 10}\n               ]},\n              {destination,\n               [{protocol, amqp10},\n                {uris, [\"amqp://host:5672\"]},\n                {properties, [{user_id, <<\"my-user\">>}]},\n                {application_properties, [{<<\"my-prop\">>, <<\"my-prop-value\">>}]},\n                {add_forward_headers, true},\n                {target_address, <<\"destination-queue\">>}\n               ]},\n              {ack_mode, on_confirm},\n              {reconnect_delay, 5}\n             }]}\n ]}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Status\nDESCRIPTION: This command uses the rabbitmq-diagnostics tool to check the status of the RabbitMQ server, including available file descriptors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-generic-unix.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Runtime Parameter in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/global-parameters/{name} endpoint to set a global runtime parameter. This example sets the cluster name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cluster_name\",\n  \"value\": \"prod-456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth2 Proxy Integration\nDESCRIPTION: Command to start RabbitMQ configured to work with OAuth2 Proxy. The MODE environment variable is set to 'oauth2-proxy' to enable the appropriate configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-proxy.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMODE=oauth2-proxy make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Plugins via Command Line\nDESCRIPTION: Commands for listing and enabling RabbitMQ plugins. After copying plugin files to the appropriate plugins directory, these commands can be used to activate them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/installing-plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable\n```\n\n----------------------------------------\n\nTITLE: Establishing MQTT Connection\nDESCRIPTION: JavaScript code showing how to establish an MQTT connection with configurable options including SSL support\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-mqtt.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    timeout: 3,\n    keepAliveInterval: 30,\n    onSuccess: function () {\n        debug(\"CONNECTION SUCCESS\");\n        client.subscribe('/topic/test', {qos: 1});\n    },\n    onFailure: function (message) {\n        debug(\"CONNECTION FAILURE - \" + message.errorMessage);\n    }\n};\nif (location.protocol == \"https:\") {\n    options.useSSL = true;\n}\ndebug(\"CONNECT TO \" + wsbroker + \":\" + wsport);\nclient.connect(options);\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Properties in RabbitMQ .NET Client\nDESCRIPTION: Shows how to publish a message with specific properties such as content type and delivery mode. The mandatory flag is set to true, and the message is marked as persistent (delivery mode 2).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\nvar props = new BasicProperties();\nprops.ContentType = \"text/plain\";\nprops.DeliveryMode = 2;\nawait channel.BasicPublishAsync(exchangeName, routingKey,\n    mandatory: true, basicProperties: props, body: messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Setting User Limits with curl in RabbitMQ API\nDESCRIPTION: Shell command example that uses curl to set a per-user connection limit. The command sends a PUT request to the user-limits endpoint with a JSON payload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -4u 'guest:guest' -H 'content-type:application/json' -X PUT localhost:15672/api/user-limits/guest/max-connections -d '{\"value\": 100}'\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ and Erlang Repositories for RHEL 9\nDESCRIPTION: Repository configuration file for setting up RabbitMQ and Erlang package repositories on RHEL 9 and derivative distributions. Includes GPG keys, mirror URLs, and security settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/noarch\n        https://yum2.rabbitmq.com/erlang/el/9/noarch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\n       https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n```\n\n----------------------------------------\n\nTITLE: Error Monad Implementation\nDESCRIPTION: Implementation of the Error monad in Erlang, which follows Erlang's convention of representing errors as {error, Reason} tuples and short-circuits execution when an error is encountered.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\n-module(error_m).\n-behaviour(monad).\n-export(['>>='/2, return/1, fail/1]).\n\n'>>='({error, _Err} = Error, _Fun) -> Error;\n'>>='(Result,                 Fun) -> Fun(Result).\n\nreturn(X) -> {ok,    X}.\nfail(X)   -> {error, X}.\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP as Auth Backend in RabbitMQ\nDESCRIPTION: Configure RabbitMQ to use LDAP exclusively for authentication and authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# use LDAP exclusively for authentication and authorisation\nauth_backends.1 = ldap\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host\nDESCRIPTION: Shows how to delete a virtual host, with an option for idempotent deletion. The idempotent flag prevents errors when deleting resources that don't exist.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin delete vhost --name \"vh-789\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin delete vhost --name \"vh-789\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Memory Information via RabbitMQ HTTP API with JSON Response\nDESCRIPTION: Command to query the RabbitMQ HTTP API for memory usage details of a specific queue. The response includes 'memory' (used by queue process for metadata) and 'message_bytes_ram' (used by message payloads) metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -u guest:guest http://127.0.0.1:15672/api/queues/%2f/queue-name |\n  python -m json.tool\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    ..\n    \"memory\": 97921904,\n    ...\n    \"message_bytes_ram\": 2153429941,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Policy in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/policies/{vhost}/{name} endpoint to declare or update a policy. This example sets a federation upstream for queues with names starting with 'amq.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\"pattern\":\"^amq.\", \"definition\": {\"federation-upstream-set\":\"all\"}, \"priority\": 10, \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Updating ServiceAccount with imagePullSecrets\nDESCRIPTION: Command to patch the RabbitMQ Cluster Operator ServiceAccount with the image pull secret, allowing it to access images from the private registry.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system patch serviceaccount \\\nrabbitmq-cluster-operator -p '{\"imagePullSecrets\": [{\"name\": \"rabbitmq-cluster-registry-access\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional RabbitMQ Settings in YAML\nDESCRIPTION: Specifies additional RabbitMQ configuration options. The example sets the channel_max parameter to 1050.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  rabbitmq:\n    additionalConfig: |\n      channel_max = 1050\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue Resource Targeting RabbitmqCluster in YAML\nDESCRIPTION: This YAML snippet declares a Queue resource in the 'my-app' namespace, targeting the previously defined RabbitmqCluster in the 'rabbitmq-service' namespace. It specifies the queue name and references the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: test # name of this custom resource; does not have to the same as the actual queue name\n  namespace: my-app\nspec:\n  name: test-queue # name of the queue\n  rabbitmqClusterReference:\n    name: example-rabbit\n    namespace: rabbitmq-service\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Cluster Operator Logs in Kubernetes\nDESCRIPTION: Command to view the logs of the RabbitMQ Cluster Operator, useful for troubleshooting when the ReconcileSuccess status condition is false.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-operator.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system logs -l app.kubernetes.io/name=rabbitmq-cluster-operator\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Feature Flag in RabbitMQ\nDESCRIPTION: Command for enabling a specific feature flag by name in RabbitMQ using rabbitmqctl. This is used after upgrading a node or cluster to enable individual new features.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ and Erlang Apt Repositories for Debian Bullseye\nDESCRIPTION: This snippet creates the apt source list file containing RabbitMQ server repositories for Debian Bullseye. It includes both primary and redundant mirror URLs with appropriate GPG key configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Closing All Global Connections in RabbitMQ\nDESCRIPTION: Command to close all connections across the entire RabbitMQ node\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_all_connections --global\n```\n\n----------------------------------------\n\nTITLE: AWS Autoscaling Group Configuration\nDESCRIPTION: Configuration for using AWS autoscaling group membership for peer discovery\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.use_autoscaling_group = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Formation in RabbitMQ 3.7 (INI-like Format)\nDESCRIPTION: This example demonstrates how to configure cluster formation using the new format. It specifies the peer discovery backend and lists the nodes for classic config-based clustering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n\ncluster_formation.classic_config.nodes.1 = rabbit1@hostname\ncluster_formation.classic_config.nodes.2 = rabbit2@hostname\ncluster_formation.classic_config.nodes.3 = rabbit3@hostname\ncluster_formation.classic_config.nodes.4 = rabbit4@hostname\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol for AMQP Connections in INI\nDESCRIPTION: INI configuration to enable Proxy protocol support for AMQP 0-9-1 and AMQP 1.0 clients. When enabled, this allows RabbitMQ to see the actual client IP addresses when connections go through proxies or load balancers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nproxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with Additional Scopes Key\nDESCRIPTION: This configuration sets up RabbitMQ to look for custom scopes in a field named 'roles' instead of the standard 'scope' field. It also sets the resource server ID to 'rabbitmq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.additional_scopes_key = roles\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Value in RabbitMQ Environment\nDESCRIPTION: Example of setting the Erlang cookie value using RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-setcookie cookie-value\"\n```\n\n----------------------------------------\n\nTITLE: Removing Certificate from Mono Trust Certificate Store\nDESCRIPTION: Bash command to remove a specific certificate from the Mono Trust certificate store on Linux using its unique hash identifier. This is useful for removing expired or unwanted certificates from the trust store.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -del -c Trust 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n\n# … snip …\n\nCertificate removed from store.\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Limits in RabbitMQ Virtual Host\nDESCRIPTION: Command to lift the connection limit on a specific virtual host by setting max-connections to a negative value. Uses rabbitmqctl with a JSON configuration parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-connections\": -1}'\n```\n\n----------------------------------------\n\nTITLE: Setting Node Cleanup Interval in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set the interval for node cleanup checks in RabbitMQ. The default is 60 seconds, but it can be adjusted as needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.node_cleanup.interval = 90\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication alongside OAuth in Management UI\nDESCRIPTION: Configuration to allow both OAuth 2.0 and Basic Authentication methods in the RabbitMQ management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n...\nmanagement.oauth_disable_basic_auth = false\n...\n```\n\n----------------------------------------\n\nTITLE: Using --help option with RabbitMQ CLI tools in PowerShell\nDESCRIPTION: Demonstrates an alternative way to get help for RabbitMQ CLI tools using the --help flag in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat --help\n\nrabbitmq-diagnostics.bat --help\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Packages with DNF\nDESCRIPTION: Commands for installing RabbitMQ and its dependencies using the DNF package manager. Updates package metadata and installs required packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndnf update -y\n```\n\nLANGUAGE: bash\nCODE:\n```\ndnf install -y logrotate\n```\n\nLANGUAGE: bash\nCODE:\n```\ndnf install -y erlang rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Providers in RabbitMQ for Separate Keycloak Instances\nDESCRIPTION: This configuration snippet shows how to set up RabbitMQ with two separate Keycloak instances (dev and prod) as OAuth providers. Each provider has its own hostname and port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.oauth_providers.devkeycloak.issuer = https://devkeycloak:8443/realms/dev\nauth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://prodkeycloak:8442/realms/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Handling Incompatible Options in Ruby AMQP 0.7\nDESCRIPTION: This snippet illustrates the new behavior of failing when an entity is re-declared with different options. It provides a more descriptive error message to help users identify and resolve conflicts in queue declarations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-01-19-ruby-amqp-0-7-released/index.md#2025-04-09_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nchannel = MQ.new\nchannel.queue(:tasks, auto_delete: true)\nchannel.queue(:tasks, auto_delete: false)\n\n# Exception: There is already an instance called tasks with options\n\n{:queue => :tasks, :nowait => true, :auto_delete => true},\nyou can't define the same instance with different options ({:queue => :tasks,\n:nowait => true, :auto_delete => false})! (MQ::IncompatibleOptionsError)\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ with Additional Scopes Key\nDESCRIPTION: This configuration sets up RabbitMQ to look for custom scopes in a field named 'roles' instead of the standard 'scope' field. It also sets the resource server ID to 'rabbitmq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.resource_server_id = rabbitmq\nauth_oauth2.additional_scopes_key = roles\n# ...\n```\n\n----------------------------------------\n\nTITLE: Structuring RabbitMQ Version Compatibility Table in HTML\nDESCRIPTION: This HTML snippet creates a table structure to display RabbitMQ version compatibility information. It includes columns for RabbitMQ versions, minimum required Erlang/OTP version, maximum supported Erlang/OTP version, and additional notes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/which-erlang.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr>\n    <td>\n      <ul>\n        <li>3.7.27</li>\n        <li>3.7.26</li>\n        <li>3.7.25</li>\n        <li>3.7.24</li>\n        <li>3.7.23</li>\n        <li>3.7.22</li>\n        <li>3.7.21</li>\n        <li>3.7.20</li>\n        <li>3.7.19</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li>21.3</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li>22.x</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"notes\">\n        <li>RabbitMQ 3.7 was released on 2017-11-28, and reached end of life on 2020-09-30, we strongly discourage its use</li>\n      </ul>\n    </td>\n  </tr>\n  <!-- Additional rows omitted for brevity -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating a ytt Overlay for Automatic Environment Variable Configuration\nDESCRIPTION: YAML configuration for a ytt overlay that can be used to automatically add environment variables to the RabbitMQ Cluster Operator during upgrades.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/configure-operator-defaults.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#@ load(\"@ytt:overlay\", \"overlay\")\n#@ deployment = overlay.subset({\"kind\": \"Deployment\"})\n#@ cluster_operator = overlay.subset({\"metadata\": {\"name\": \"rabbitmq-cluster-operator\"}})\n#@overlay/match by=overlay.and_op(deployment, cluster_operator),expects=\"1+\"\n---\nspec:\n  template:\n    spec:\n      containers:\n      #@overlay/match by=overlay.subset({\"name\": \"operator\"}),expects=\"1+\"\n      -\n        #@overlay/match missing_ok=True\n        env:\n        - name: OPERATOR_SCOPE_NAMESPACE\n          value: custom-namespace\n```\n\n----------------------------------------\n\nTITLE: Patching RabbitMQ Stream Queue to Use 'first' Offset by Default\nDESCRIPTION: Git diff showing a modification to the RabbitMQ stream queue implementation to use 'first' as the default offset spec instead of 'next'. This patch enables the receiver to start consuming from the beginning of the stream by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/deps/rabbit/src/rabbit_stream_queue.erl b/deps/rabbit/src/rabbit_stream_queue.erl\nindex e36ad708eb..acd193d76f 100644\n--- a/deps/rabbit/src/rabbit_stream_queue.erl\n+++ b/deps/rabbit/src/rabbit_stream_queue.erl\n@@ -344,7 +344,7 @@ consume(Q, Spec, #stream_client{} = QState0)\n                        {term(), non_neg_integer()}) ->\n     {ok, osiris:offset_spec()} | {error, term()}.\n parse_offset_arg(undefined) ->\n-    {ok, next};\n+    {ok, first};\n parse_offset_arg({_, <<\"first\">>}) ->\n     {ok, first};\n parse_offset_arg({_, <<\"last\">>}) ->\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Management UI with OAuth 2.0 Identity Provider Initiated Login\nDESCRIPTION: Configuration settings in rabbitmq.conf to enable OAuth 2.0 authentication for the Management UI with identity provider initiated login flow.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_provider_url = http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Sample OAuth Access Token\nDESCRIPTION: Example of an OAuth access token generated for the prod_producer client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1690974839,\n  \"iat\": 1690974539,\n  \"jti\": \"c8edec50-5f29-4bd0-b25b-d7a46dc3474e\",\n  \"iss\": \"http://localhost:8081/realms/test\",\n  \"aud\": \"rabbit_prod\",\n  \"sub\": \"826065e7-bb58-4b65-bbf7-8982d6cca6c8\",\n  \"typ\": \"Bearer\",\n  \"azp\": \"prod_producer\",\n  \"acr\": \"1\",\n  \"realm_access\": {\n    \"roles\": [\n      \"default-roles-test\",\n      \"offline_access\",\n      \"producer\",\n      \"uma_authorization\"\n    ]\n  },\n  \"resource_access\": {\n    \"account\": {\n      \"roles\": [\n        \"manage-account\",\n        \"manage-account-links\",\n        \"view-profile\"\n      ]\n    }\n  },\n  \"scope\": \"profile email rabbitmq.read:*/* rabbitmq.write:*/* rabbitmq.configure:*/*\",\n  \"clientId\": \"prod_producer\",\n  \"clientHost\": \"172.18.0.1\",\n  \"email_verified\": false,\n  \"preferred_username\": \"service-account-prod_producer\",\n  \"clientAddress\": \"172.18.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Producer with Custom JWT Token\nDESCRIPTION: Command to start a producer application using a custom-generated JWT token with roles defined in the extra_scope field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer_with_roles TOKEN=$(bin/jwt_token producer-role-in-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Positive Message Acknowledgement in Java\nDESCRIPTION: Demonstrates how to positively acknowledge a single message delivery using RabbitMQ Java client. Uses Channel#basicAck method with autoAck disabled and handles individual message acknowledgement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge a single delivery, the message will\n             // be discarded\n             channel.basicAck(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Implementing Behaviours in Elixir for RabbitMQ Plugins\nDESCRIPTION: Example showing how to implement Erlang behaviours in Elixir using the @behaviour attribute, which is necessary for implementing the rabbit_exchange_type behaviour in RabbitMQ plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n@behaviour :rabbit_exchange_type\n```\n\n----------------------------------------\n\nTITLE: Positive Message Acknowledgement in Java\nDESCRIPTION: Demonstrates how to positively acknowledge a single message delivery using RabbitMQ Java client. Uses Channel#basicAck method with autoAck disabled and handles individual message acknowledgement.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // positively acknowledge a single delivery, the message will\n             // be discarded\n             channel.basicAck(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Worker Consumer Prefetch\nDESCRIPTION: Advanced configuration setting for adjusting the prefetch size of the dead letter worker consumer when high dead-lettering throughput is required.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_1\n\nLANGUAGE: configuration\nCODE:\n```\ndead_letter_worker_consumer_prefetch=32\n```\n\n----------------------------------------\n\nTITLE: Connecting to STOMP Broker\nDESCRIPTION: JavaScript code to establish a STOMP connection with the broker using credentials.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar on_connect = function() {\n    console.log('connected');\n};\nvar on_error =  function() {\n    console.log('error');\n};\nclient.connect('guest', 'guest', on_connect, on_error, '/');\n```\n\n----------------------------------------\n\nTITLE: Example OAuth 2.0 Token with Variable Expansion (JSON)\nDESCRIPTION: Sample JSON representation of an OAuth 2.0 token that demonstrates variable expansion for topic permissions. This token grants write permissions on exchanges and routing keys based on the vhost and subject claims.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\" : \"bob\",\n  \"scope\" : [ \"rabbitmq.write:*/x-{vhost}-*/u-{sub}-*\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Error Log Message\nDESCRIPTION: Example of emitting an error log message using the direct exchange\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nruby emit_log_direct.rb error \"Run. Run. Or it will explode.\"\n# => [x] Sent 'error':'Run. Run. Or it will explode.'\n```\n\n----------------------------------------\n\nTITLE: Setting Message Targets in Python\nDESCRIPTION: Example of creating a publisher without a target in Python, then defining a target for a message using the AddressHelper utility class.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n# no target defined on publisher creation\npublisher = connection.publisher()\n\n# publish to an exchange with a routing key\n# You can use the AddressHelper.message_to_address_helper \n# utility class to set the destination in the message\nmessage = Message(body=\"Hello!\")\nexchange_address = AddressHelper.exchange_address(\"foo\", \"bar\")\nmessage = AddressHelper.message_to_address_helper(message, exchange_address)\npublisher.publish(message)\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Listing Feature Flags in RabbitMQ\nDESCRIPTION: Alternative command syntax for listing feature flags in a RabbitMQ cluster. This command is functionally equivalent to 'feature_flags list'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n# same command as above\nrabbitmqadmin list feature_flags\n```\n\n----------------------------------------\n\nTITLE: Running Status Check Command - Bash\nDESCRIPTION: Verifies if RabbitMQ application is fully booted and running\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics is_running\n```\n\n----------------------------------------\n\nTITLE: Starting Producer with Custom JWT Token\nDESCRIPTION: Command to start a producer application using a custom-generated JWT token with roles defined in the extra_scope field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer_with_roles TOKEN=$(bin/jwt_token producer-role-in-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy for RabbitMQ Peer Discovery\nDESCRIPTION: Configuration for setting HTTP and HTTPS proxy servers for peer discovery mechanisms in RabbitMQ that use HTTP to interact with dependencies like AWS, Consul, and etcd.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\n# example HTTP and HTTPS proxy servers, values in your environment\n# will vary\ncluster_formation.proxy.http_proxy = 192.168.0.98\ncluster_formation.proxy.https_proxy = 192.168.0.98\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Repository Sources for Debian Bullseye\nDESCRIPTION: Apt repository source configuration for installing RabbitMQ packages. Configures two mirror repositories with their signing keys for redundancy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in Bash\nDESCRIPTION: Command to create a policy that controls exchange federation. The policy matches exchanges with names starting with 'federated.' and applies federation to all configured upstreams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy exchange-federation \\\n    \"^federated\\.\" \\\n    '{\"federation-upstream-set\":\"all\"}' \\\n    --priority 10 \\\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Stateful Set on Kubernetes\nDESCRIPTION: This snippet shows the command to deploy a RabbitMQ Stateful Set on Kubernetes. It applies the configuration defined in the 'statefulset.yaml' file to create the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f statefulset.yaml\n```\n\n----------------------------------------\n\nTITLE: Check Cipher Suites (Unix)\nDESCRIPTION: Command to list available cipher suites in OpenSSL format on Unix-like systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl --silent\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Bindings for Different Severities in RabbitMQ with Java\nDESCRIPTION: This code creates multiple bindings for a queue, each with a different severity level as the routing key. This allows the consumer to receive messages of specific severities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString queueName = channel.queueDeclare().getQueue();\n\nfor(String severity : argv){\n  channel.queueBind(queueName, EXCHANGE_NAME, severity);\n}\n```\n\n----------------------------------------\n\nTITLE: Putting a Remote Node into Maintenance Mode in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent for putting a specific remote RabbitMQ node into maintenance mode. Allows administrators to prepare a targeted node for maintenance from any other node in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n# puts node rabbit@node2.cluster.rabbitmq.svc into maintenance mode\nrabbitmq-upgrade.bat drain -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: Launching Keycloak for OAuth 2.0 Authentication\nDESCRIPTION: Command to start the Keycloak server for OAuth 2.0 authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Starting Separate Keycloak Instances and RabbitMQ\nDESCRIPTION: These commands start two separate Keycloak instances (dev and prod) and a RabbitMQ instance configured to use both as OAuth providers. It uses Make commands for simplified deployment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake start-dev-keycloak\nmake start-prod-keycloak\nMODE=multi-keycloak CONF=rabbitmq.scenario3.conf make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Status in YAML Format\nDESCRIPTION: This command fetches the status of a RabbitMQ queue named 'my-queue' in YAML format, providing detailed information about its current state and configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-topology-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get queues.rabbitmq.com my-queue -oyaml\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Validated User-ID in Java\nDESCRIPTION: This snippet demonstrates how to set the user-id property when publishing a message using RabbitMQ in Java. The message will only be published successfully if the user is \"guest\".\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/validated-user-id.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAMQP.BasicProperties properties = new AMQP.BasicProperties();\nproperties.setUserId(\"guest\");\nchannel.basicPublish(\"amq.fanout\", \"\", properties, \"test\".getBytes());\n```\n\n----------------------------------------\n\nTITLE: Unfiltered Stream Metrics Output Example\nDESCRIPTION: This shows the example output of the metrics query when consuming the entire stream without filtering. The counter shows approximately 10MB of data read.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\n# HELP rabbitmq_stream_read_bytes_total\n# TYPE rabbitmq_stream_read_bytes_total counter\nrabbitmq_stream_read_bytes_total 1.0046894E7\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Validated User-ID in Java\nDESCRIPTION: This snippet demonstrates how to set the user-id property when publishing a message using RabbitMQ in Java. The message will only be published successfully if the user is \"guest\".\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/validated-user-id.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAMQP.BasicProperties properties = new AMQP.BasicProperties();\nproperties.setUserId(\"guest\");\nchannel.basicPublish(\"amq.fanout\", \"\", properties, \"test\".getBytes());\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugins with rabbitmq-plugins Command\nDESCRIPTION: Shows how to disable a plugin using the rabbitmq-plugins CLI tool. The example demonstrates disabling the rabbitmq_top plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable <plugin-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable rabbitmq_top\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Elixir\nDESCRIPTION: Basic code showing how to bind a queue to an exchange in RabbitMQ using Elixir. This creates a relationship indicating that the queue is interested in messages from the specified exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Queue.bind(channel, queue_name, exchange_name)\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Components in Markdown\nDESCRIPTION: This snippet imports various components used in the tutorial, including help text and diagrams related to direct exchanges and multiple bindings in RabbitMQ routing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport TutorialsHelp from '@site/src/components/Tutorials/TutorialsHelp.md';\nimport T4DiagramDirectX from '@site/src/components/Tutorials/T4DiagramDirectX.md';\nimport T4DiagramMultipleBindings from '@site/src/components/Tutorials/T4DiagramMultipleBindings.md';\nimport T4DiagramFull from '@site/src/components/Tutorials/T4DiagramFull.md';\n```\n\n----------------------------------------\n\nTITLE: Visualizing One Sender One Receiver Benchmark in ASCII Diagram (Partial)\nDESCRIPTION: ASCII diagram fragment showing the connection architecture for the one_sender_one_receiver benchmark program that demonstrates how AMQP 1.0 allows simultaneous consuming and publishing on a single connection without throttling consumption when publishing is under backpressure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n    main.go                                                      RabbitMQ\n+-------------+                                     +----------------------------------+\n|             |        AMQP 0.9.1 connection        |                                  |\n|             |#####################################|                                  |\n|    +---+    |-------------------------------------|    +------------------------+    |\n|    | C |                                               | classic-queue-amqp-091 |    |\n|    +---+                                               +------------------------+    |\n|                        AMQP 0.9.1 channel                                            |\n|    +---+                                               +------------------------+    |\n|    | P |                                               | quorum-queue-amqp-091  |    |\n|    +---+    |-------------------------------------|    +------------------------+    |\n```\n\n----------------------------------------\n\nTITLE: Linking to RabbitMQ Command-line Tools Documentation\nDESCRIPTION: Markdown link to the RabbitMQ command-line tools documentation, specifically the rabbitmqctl man page.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-10-18-rabbitmq0mq-bridge/index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[command-line tools](/docs/man/rabbitmqctl.8)\n```\n\n----------------------------------------\n\nTITLE: Using --help Option for RabbitMQ CLI Tools in Bash\nDESCRIPTION: Illustrates how to use the --help option to get general help information for rabbitmqctl and rabbitmq-diagnostics in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl --help\n\nrabbitmq-diagnostics --help\n```\n\n----------------------------------------\n\nTITLE: Using Erlang Cookie with RabbitMQ CLI Tool in Bash\nDESCRIPTION: Demonstrates how to specify the Erlang cookie value when using a RabbitMQ CLI tool like rabbitmq-diagnostics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status --erlang-cookie \"cookie-value\"\n```\n\n----------------------------------------\n\nTITLE: Opening an AMQP 1.0 Connection in Java\nDESCRIPTION: Establishes a connection to an AMQP 1.0 broker using the Environment instance in Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// open a connection from the environment\nConnection connection = environment.connectionBuilder()\n    .uri(\"amqp://admin:admin@localhost:5672/%2f\")\n    .build();\n// ...\n// close the connection when it is no longer necessary\nconnection.close();\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Log Receiver to Display All Logs in Go\nDESCRIPTION: Command to run a Go program that receives logs with all severity levels (info, warning, error) from RabbitMQ and displays them on the terminal.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs_direct.go info warning error\n# => [*] Waiting for logs. To exit press CTRL+C\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message in Erlang\nDESCRIPTION: Demonstrates how to publish a message to an exchange with a routing key using the #'basic.publish'{} method and #amqp_msg{} record.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\nPayload = <<\"foobar\">>,\nPublish = #'basic.publish'{exchange = X, routing_key = Key},\namqp_channel:cast(Channel, Publish, #amqp_msg{payload = Payload})\n```\n\n----------------------------------------\n\nTITLE: Configuring max-hops Parameter for Ring Topology in RabbitMQ Federation\nDESCRIPTION: Configuration parameter for a ring topology of federated exchanges where each exchange links to just one other in the ring. The value is set to the total number of exchanges minus one to ensure messages propagate exactly once to each exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n\"max-hops\"\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository for Debian Bullseye\nDESCRIPTION: This bash script adds the RabbitMQ and Erlang package repositories to the apt sources list for Debian Bullseye. It includes both primary and redundant mirror URLs for improved availability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Pinning RabbitMQ Server Package Version\nDESCRIPTION: Sets up APT preferences to pin the RabbitMQ server package to a specific version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n# /etc/apt/preferences.d/rabbitmq\nPackage: rabbitmq-server\nPin: version 1:${RabbitMQServerVersion()}-${RabbitMQServerPackageRevision({packageType: 'debian'})}\n# Note: priority of 1001 (greater than 1000) allows for downgrading.\n# To make package downgrading impossible, use a value of 999\nPin-Priority: 1001\n```\n\n----------------------------------------\n\nTITLE: Setting Discovery Endpoint Parameters for OAuth 2.0 in RabbitMQ\nDESCRIPTION: Configuration example for setting discovery endpoint parameters in RabbitMQ's OAuth 2.0 setup. This is useful for providers like Microsoft Entra ID that require specific query parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nauth_oauth2.issuer = https://myissuer.com/v2\nauth_oauth2.discovery_endpoint_path = .well-known/authorization-server\nauth_oauth2.discovery_endpoint_params.param1 = value1\nauth_oauth2.discovery_endpoint_params.param2 = value2\n# ...\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Virtual Host Configuration\nDESCRIPTION: Example of using the hostname parameter to specify a virtual host for AMQP 1.0 connections in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_13\n\nLANGUAGE: code\nCODE:\n```\nvhost:example-vhost\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listener Options\nDESCRIPTION: Example configuration for various TCP listener options including buffer sizes, keepalives, and timeouts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 127.0.0.1:61613\nstomp.listeners.tcp.2 = ::1:61613\n\nstomp.tcp_listen_options.backlog = 4096\nstomp.tcp_listen_options.recbuf  = 131072\nstomp.tcp_listen_options.sndbuf  = 131072\n\nstomp.tcp_listen_options.keepalive = true\nstomp.tcp_listen_options.nodelay   = true\n\nstomp.tcp_listen_options.exit_on_close = true\nstomp.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Retention Policies in RabbitMQ Management Plugin\nDESCRIPTION: Configuration example for setting data retention policies in the RabbitMQ Management plugin. This defines how long to retain data for global, basic, and detailed statistics at different time resolutions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.sample_retention_policies.global.minute  = 5\nmanagement.sample_retention_policies.global.hour    = 60\nmanagement.sample_retention_policies.global.day = 1200\n\nmanagement.sample_retention_policies.basic.minute = 5\nmanagement.sample_retention_policies.basic.hour   = 60\n\nmanagement.sample_retention_policies.detailed.10 = 5\n```\n\n----------------------------------------\n\nTITLE: Specifying Erlang Cookie via CLI Command in RabbitMQ\nDESCRIPTION: Example showing how to specify the Erlang cookie value directly in a RabbitMQ CLI command using the --erlang-cookie flag. This approach allows one-time authentication but is considered less secure than using a cookie file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status --erlang-cookie \"cookie-value\"\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation\nDESCRIPTION: Full implementation of a producer that emits log messages to the fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-python.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='logs', exchange_type='fanout')\n\nmessage = ' '.join(sys.argv[1:]) or \"info: Hello World!\"\nchannel.basic_publish(exchange='logs', routing_key='', body=message)\nprint(f\" [x] Sent {message}\")\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key Password in RabbitMQ (INI Format)\nDESCRIPTION: This snippet demonstrates how to provide a password for a protected private key using the modern INI-style configuration format. It includes SSL listener setup and paths to certificate files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.password   = t0p$3kRe7\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Breakdown Using HTTP API with curl and JSON formatting\nDESCRIPTION: Shows how to retrieve detailed memory usage statistics from a RabbitMQ node using the HTTP API. The command sends a GET request to the /api/nodes/{node}/memory endpoint and formats the JSON response using Python's json.tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncurl -s -u guest:guest http://127.0.0.1:15672/api/nodes/rabbit@mercurio/memory | python -m json.tool\n\n{\n    \"memory\": {\n        \"atom\": 1041593,\n        \"binary\": 5133776,\n        \"code\": 25299059,\n        \"connection_channels\": 1823320,\n        \"connection_other\": 150168,\n        \"connection_readers\": 83760,\n        \"connection_writers\": 113112,\n        \"metrics\": 217816,\n        \"mgmt_db\": 266560,\n        \"mnesia\": 93344,\n        \"msg_index\": 48880,\n        \"other_ets\": 2294184,\n        \"other_proc\": 27131728,\n        \"other_system\": 21496756,\n        \"plugins\": 3103424,\n        \"queue_procs\": 2957624,\n        \"total\": 89870336\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Fanout Exchange in .NET\nDESCRIPTION: Creates a fanout exchange named 'logs' that broadcasts messages to all bound queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.ExchangeDeclare(\"logs\", ExchangeType.Fanout);\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Exchange Type in RabbitMQ with Shell Command\nDESCRIPTION: Command to declare a durable exchange with a custom type 'x-local-random' named 'local.random.c60bda92' in the 'events' virtual host using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare exchange --name \"local.random.c60bda92\" --type \"x-local-random\" --durable true\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth 2.0 Configuration\nDESCRIPTION: Command to launch RabbitMQ with a specific OAuth 2.0 configuration file for multiple resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMODE=\"multi-keycloak\" CONF=\"rabbitmq.scenario1.conf\" make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Getting RabbitMQ Cluster Information\nDESCRIPTION: Command to display information about a specific RabbitMQ cluster instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq get INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Tools\nDESCRIPTION: These commands demonstrate how to use various RabbitMQ CLI tools for diagnostics and status checks. They require sudo privileges to execute.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Unblocking Erlang Server Nodes in MacOS Application Firewall\nDESCRIPTION: These commands add and unblock the Erlang server nodes (Erlang VM) in the MacOS Application Firewall. This allows the nodes to bind to ports and accept inbound connections. The commands assume Erlang is installed via Homebrew.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# allow server nodes (Erlang VM) to bind to ports and accept inbound connections\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ OAuth 2.0 Audience Validation Configuration\nDESCRIPTION: RabbitMQ configuration that disables the validation of the audience claim. This is necessary because OAuth2 Proxy requires the 'aud' claim to match the client's ID, while RabbitMQ requires it to match 'rabbitmq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.verify_aud = false\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ PerfTest Consumer with OAuth (Bash)\nDESCRIPTION: Command to launch a RabbitMQ PerfTest consumer application using OAuth authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-node TLS with Embedded Options on Linux\nDESCRIPTION: Configuration snippet for rabbitmq-env.conf that enables TLS encryption for inter-node communication using embedded options. This approach defines the required Erlang arguments with TLS settings directly in the configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# change depending on the Erlang version, distribution,\n# and installation method used). Please double check it before proceeding!\nERL_SSL_PATH=\"/usr/lib64/erlang/lib/ssl-9.4/ebin\"\n\n# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\n# -ssl_dist_opt server_certfile /path/to/combined_keys.pem tells the runtime\n#                               where to find the combined certificate/key file\n# -ssl_dist_opt server_password password   required if the private key is encrypted\n# -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true enables an additional TLS setting: secure renegotiation\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n\n# Same settings as above but for CLI tools\nRABBITMQ_CTL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password \\\n  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n```\n\n----------------------------------------\n\nTITLE: HTTP GET/PUT Endpoints: Cluster Name Management\nDESCRIPTION: Endpoints for retrieving and updating the RabbitMQ cluster name identifier\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/cluster-name\n```\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/cluster-name\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Server in Objective-C\nDESCRIPTION: Establishes a connection to a RabbitMQ node using the specified URI and a connection delegate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-objectivec.md#2025-04-09_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nRMQConnection *conn = [[RMQConnection alloc] initWithUri:@\"amqp://localhost:5672\"\n                                             delegate:[RMQConnectionDelegateLogger new]];\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Network Bandwidth Requirements in RabbitMQ\nDESCRIPTION: Formula for calculating the minimum required network bandwidth for RabbitMQ cluster nodes. Takes into account message rate, message size, and protocol overhead to determine bandwidth needs in bits per second.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/production-checklist.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nMR * MS * 110% * 8\n```\n\nLANGUAGE: ini\nCODE:\n```\n20K * 6 KB * 110% * 8 bit/B = 20000 * 6000 * 1.1 * 8 = 1.056 (gigabit/second)\n```\n\n----------------------------------------\n\nTITLE: Enabling MQTT Proxy Protocol Configuration\nDESCRIPTION: Configuration setting to enable proxy protocol support for MQTT clients in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Deleting an Exchange in Java\nDESCRIPTION: Demonstrates how to delete an exchange using the Java client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_52\n\nLANGUAGE: java\nCODE:\n```\nmanagement.exchangeDelete(\"my-exchange\");\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management API with OAuth\nDESCRIPTION: This command demonstrates how to access the RabbitMQ management API using OAuth credentials from the 'producer_with_roles' client, which has management permissions through scope aliases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmake curl url=http://localhost:15672/api/overview client_id=producer_with_roles secret=producer_with_roles_secret\n```\n\n----------------------------------------\n\nTITLE: Setting Up Message Receiver in RabbitMQ\nDESCRIPTION: Establishes a connection to the RabbitMQ broker, creates a channel, and declares the queue for consuming messages. This ensures the queue exists before attempting to consume messages from it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-swift.md#2025-04-09_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nfunc receive() {\n    print(\"Attempting to connect to local RabbitMQ broker\")\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let q = ch.queue(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET/PUT Endpoints: Cluster Name Management\nDESCRIPTION: Endpoints for retrieving and updating the RabbitMQ cluster name identifier\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/cluster-name\n```\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/cluster-name\n```\n\n----------------------------------------\n\nTITLE: Basic RPC Client Call - Elixir\nDESCRIPTION: Simple example showing how to make an RPC call to calculate a Fibonacci number using the client interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-elixir.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nresult = FibonacciRpcClient.call(4)\nIO.puts(\"fib(4) is #{result}\")\n```\n\n----------------------------------------\n\nTITLE: Generating a RabbitMQ Server Report\nDESCRIPTION: Creates a comprehensive server status report for support purposes. The command uses the 'report' action and redirects the output to a file named 'server_report.txt'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl report > server_report.txt\n```\n\n----------------------------------------\n\nTITLE: Deploying Keycloak Authorization Server\nDESCRIPTION: Bash command to deploy Keycloak on its own network for OAuth 2.0 authentication. Uses make to start Keycloak with the specified provider network.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-forward-proxy.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPROVIDER_NETWORK=keycloak_net make start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ using Chocolatey on Windows\nDESCRIPTION: Command to install RabbitMQ using the Chocolatey package manager. This is the recommended installation method for many use cases as it handles dependencies automatically.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-windows.md#2025-04-09_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Service Status with systemd\nDESCRIPTION: This command checks the status of the RabbitMQ service using systemd. It provides information about the service state, process IDs, and recent log entries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Implementing For Query for Complex LDAP Authorization in Erlang\nDESCRIPTION: A for query that splits up authorization logic to handle different cases with different subqueries. The example allows members of the 'wheel' group to declare and delete exchanges while allowing all users to perform all other operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{for, [{Name, Value, SubQuery}, ...]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{resource, exchange, {for, [{permission, configure,\n                                     {in_group, \"cn=wheel,dc=example,dc=com\"}\n                                    },\n                                    {permission, write, {constant, true}},\n                                    {permission, read,  {constant, true}}\n                                   ]}},\n                                   {resource, queue,    {constant, true}}]}}\n```\n\n----------------------------------------\n\nTITLE: YAML Structure for RabbitMQ Administrator Credentials Secret\nDESCRIPTION: YAML structure for a Kubernetes Secret that stores administrator username and password. These credentials will replace the default 'guest' user which has restricted access.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nuser: {username}\npass: {password}\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Service for Storage Configuration on EC2\nDESCRIPTION: Command to stop the RabbitMQ server before performing storage configuration tasks such as symlinking directories to EBS volumes. This is a necessary step when preparing dedicated storage for RabbitMQ data and log directories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ec2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo service rabbitmq-server stop\n```\n\n----------------------------------------\n\nTITLE: AWS Basic Configuration\nDESCRIPTION: Basic AWS configuration for RabbitMQ cluster formation including region and credentials\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: Visualizing RPC Pattern with Mermaid Flowchart in RabbitMQ\nDESCRIPTION: A Mermaid flowchart diagram demonstrating the Remote Procedure Call (RPC) pattern implementation in RabbitMQ. The diagram shows a client sending requests to a server through an RPC queue, and the server responding through a reply queue, with appropriate CSS classes applied to style each component.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T6DiagramToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    C((Client))\n    S((Server))\n    Q1[[RPC]]\n    Q2[[Reply]]\n\n    C -- request --> Q1 --> S --> Q2 -- reply --> C\n\n    class C mermaid-producer\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class S mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Reviving a Remote Node from Maintenance Mode in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent for reviving a specific remote RabbitMQ node from maintenance mode. Used to return a node to normal operation if maintenance was canceled before node restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n# revives node rabbit@node2.cluster.rabbitmq.svc from maintenance\nrabbitmq-upgrade.bat revive -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-Enabled RabbitMQ Connection without Peer Verification\nDESCRIPTION: Example URI for a secure AMQPS connection with TLS peer verification disabled. Specifies paths to CA certificate, client certificate, and client key files with verify_none setting, which disables certificate chain validation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/uri-query-parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\namqps://myhost?cacertfile=/path/to/ca_certificate.pem\n  &certfile=/path/to/client_certificate.pem\n  &keyfile=/path/to/client_key.pem\n  &verify=verify_none\n  &server_name_indication=myhost\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Cluster\nDESCRIPTION: Commands to set up the kubectl-rabbitmq plugin and create a RabbitMQ cluster with three replicas.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-05-03-alerting/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add kubectl-rabbitmq plugin to PATH so that it can be used directly\nexport PATH=\"$PWD/cluster-operator/bin:$PATH\"\n\n# Use kubectl-rabbitmq plugin to create RabbitmqClusters via kubectl\nkubectl rabbitmq create myrabbit --replicas 3\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener and Heartbeat in RabbitMQ 3.7 (INI-like Format)\nDESCRIPTION: This example shows how to configure both the heartbeat and a TCP listener using the new format. It sets the heartbeat to 30 seconds and configures a TCP listener on port 5672 for all interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nheartbeat = 30\n\nlisteners.tcp.default = 5672\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queue WAL Size in RabbitMQ\nDESCRIPTION: Configuration setting to control the write-ahead log segment size limit for quorum queues. This determines how much message data can be kept in memory under steady load before being moved to disk.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/persistence-conf.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Flush current WAL file to a segment file on disk once it reaches 32 MiB in size\nraft.wal_max_size_bytes = 32000000\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback for MQ::Queue#bind in Ruby AMQP 0.7\nDESCRIPTION: This snippet shows how to use the new callback feature for MQ::Queue#bind. It allows you to execute code after a queue has been successfully bound to an exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-01-19-ruby-amqp-0-7-released/index.md#2025-04-09_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nchannel = MQ.new\nfanout  = channel.fanout(:task_fanout)\nchannel.queue(:tasks).bind(fanout) do |queue|\n  puts \"Queue #{queue.name} was bound!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Host Metadata via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to create or update a virtual host's metadata using the PUT /api/vhosts/{name} endpoint. It includes description, tags, default queue type, and deletion protection settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"virtual host description\",\n  \"tags\": \"accounts,production\",\n  \"default_queue_type\": \"quorum\",\n  \"protected_from_deletion\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Starting JMS Publisher with OAuth 2.0 Authentication\nDESCRIPTION: This command starts a JMS publisher application that uses OAuth 2.0 for authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake start-jms-publisher\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Message Publisher in Objective-C\nDESCRIPTION: Complete implementation of a publisher that emits log messages to a fanout exchange. It establishes a connection, creates a channel, declares the exchange, and publishes a message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-objectivec.md#2025-04-09_snippet_4\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n[conn start];\n\nid<RMQChannel> ch = [conn createChannel];\nRMQExchange *x = [ch fanout:@\"logs\"];\n\nNSString *msg = @\"Hello World!\";\n\n[x publish:[msg dataUsingEncoding:NSUTF8StringEncoding]];\nNSLog(@\"Sent %@\", msg);\n\n[conn close];\n```\n\n----------------------------------------\n\nTITLE: Queue Binding with Routing Key\nDESCRIPTION: Demonstrates binding a queue to an exchange with a specific routing key\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nqueue.bind(exchange_name, routing_key: 'black')\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Statistics Database via Command Line\nDESCRIPTION: Commands for resetting the statistics database on a single node or across all nodes using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'rabbit_mgmt_storage:reset().'\nrabbitmqctl eval 'rabbit_mgmt_storage:reset_all().'\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Service Configuration\nDESCRIPTION: Configures basic Consul service settings including node name and service address computation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n# compute service address using host name and not node name\ncluster_formation.consul.svc_addr_use_nodename = false\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Hello World Example in Erlang\nDESCRIPTION: A simple Hello World program implementation in Erlang showing the traditional syntax with module declaration, compilation directive, and a function that prints to standard output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n-module(module_name).\n-compile(export_all).\n\nhello() ->\n  io:format(\"~s~n\", [\"Hello world!\"]).\n```\n\n----------------------------------------\n\nTITLE: Deleting an Exchange in C#\nDESCRIPTION: Shows how to delete an exchange using the C# client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\nawait management.Exchange(\"my-exchange\").DeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Removing a Reachable RabbitMQ Node from Cluster\nDESCRIPTION: Steps to remove a reachable node from a RabbitMQ cluster, including stopping the app and using forget_cluster_node command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit3\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit3 ...done.\n\n# on rabbit2\nrabbitmqctl forget_cluster_node rabbit@rabbit3\n# => Removing node rabbit@rabbit3 from cluster ...\n\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\n# => {running_nodes,[rabbit@rabbit2,rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2]}]},\n# =>  {running_nodes,[rabbit@rabbit1,rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl reset\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit3 ...\n\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n# => [{nodes,[{disc,[rabbit@rabbit3]}]},{running_nodes,[rabbit@rabbit3]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Server in JavaScript\nDESCRIPTION: Establishes a connection to a local RabbitMQ server using the amqp.node client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\namqp.connect('amqp://localhost', function(error0, connection) {});\n```\n\n----------------------------------------\n\nTITLE: Enabling apt HTTPS Transport\nDESCRIPTION: This command installs the apt-transport-https package, which is necessary for apt to download packages over HTTPS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apt-transport-https\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Limit in RabbitMQ .NET Client\nDESCRIPTION: Shows how to set the requested channel maximum to 32 using the RabbitMQ .NET client's ConnectionFactory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\n// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured\n// to use a higher limit, otherwise the server's limit will be used.\ncf.RequestedChannelMax = 32;\n```\n\n----------------------------------------\n\nTITLE: Listing Channel Details with RabbitMQ CLI\nDESCRIPTION: Shows how to use rabbitmqctl to list detailed information about individual channels, including consumer count and unacknowledged messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels -q\n# => pid\tuser\tconsumer_count\tmessages_unacknowledged\n# => <rabbit@mercurio.3.815.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.820.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.824.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.828.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.832.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.839.0>\tguest\t0\t0\n# => <rabbit@mercurio.3.840.0>\tguest\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Options for STOMP Connections in INI\nDESCRIPTION: INI configuration that optimizes TCP settings for STOMP connections to maximize throughput. This increases TCP buffer sizes to 192 KiB and configures important TCP socket options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nstomp.tcp_listen_options.backlog = 128\nstomp.tcp_listen_options.nodelay = true\nstomp.tcp_listen_options.linger.on      = true\nstomp.tcp_listen_options.linger.timeout = 0\nstomp.tcp_listen_options.sndbuf = 196608\nstomp.tcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Workers - Bash Commands\nDESCRIPTION: Shell commands demonstrating how to run the worker and task publisher scripts for testing the work queue system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\nphp worker.php\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\nphp new_task.php \"A very hard task which takes two seconds..\"\n```\n\n----------------------------------------\n\nTITLE: Checking quorum status of a queue in RabbitMQ (Bash)\nDESCRIPTION: Command to check the quorum status of a specific queue in RabbitMQ. It requires the queue name and optionally allows specifying the vhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nquorum_status queue [--vhost vhost]\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Puka with Queue Declaration\nDESCRIPTION: This snippet demonstrates Puka's error handling capabilities. It shows how to catch a PreconditionFailed exception when trying to redeclare a queue with different parameters, and then handle the error by adjusting the declaration parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-07-08-puka-rethinking-amqp-clients/index.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n   promise = client.queue_declare(queue='test')\n   client.wait(promise)\nexcept puka.PreconditionFailed:\n    # Oh, sorry. Forgot it was durable.\n   promise = client.queue_declare(queue='test', durable=True)\n   client.wait(promise)\n```\n\n----------------------------------------\n\nTITLE: Message Property Code Examples in AMQP 0-9-1\nDESCRIPTION: Code examples showing how to set delivery mode and priority properties in AMQP 0-9-1 protocol\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/queues.md#2025-04-09_snippet_1\n\nLANGUAGE: AMQP\nCODE:\n```\ndelivery_mode\n```\n\nLANGUAGE: AMQP\nCODE:\n```\npriority\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Limit in RabbitMQ (Shell)\nDESCRIPTION: cURL command to set a per-vhost limit using the RabbitMQ Management API. This example sets the max-connections limit for 'my-vhost' to 50.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -4u 'guest:guest' -H 'content-type:application/json' -X PUT localhost:15672/api/vhost-limits/my-vhost/max-connections -d '{\"value\": 50}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic-based Log Emission in Ruby with RabbitMQ\nDESCRIPTION: This code snippet demonstrates how to publish messages to a topic exchange in RabbitMQ using Ruby. It creates a connection, declares a topic exchange, and publishes a message with a specified routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nexchange = channel.topic('topic_logs')\nseverity = ARGV.shift || 'anonymous.info'\nmessage = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')\n\nexchange.publish(message, routing_key: severity)\nputs \" [x] Sent #{severity}:#{message}\"\n\nconnection.close\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags via Environment Variable\nDESCRIPTION: Example of setting specific feature flags during initial startup using the RABBITMQ_FEATURE_FLAGS environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_FEATURE_FLAGS=\"delete_ra_cluster_mqtt_node,virtual_host_metadata,stream_single_active_consumer,quorum_queue,classic_mirrored_queue_version,rabbit_mqtt_qos0_queue,implicit_default_bindings,empty_basic_get_metric,'rabbitmq_4.0.0',message_containers,user_limits,queue_master_locator,detailed_queues_endpoint,stream_sac_coordinator_unblock_group,stream_update_config_command,stream_queue,stream_filtering,rabbit_exchange_type_local_random,quorum_queue_non_voters,tracking_records_in_ets,direct_exchange_routing_v2,amqp_address_v1,transient_nonexcl_queues,message_containers_deaths_v2,classic_queue_mirroring,management_metrics_collection,maintenance_mode_status,listener_records_in_ets,feature_flags_v2,global_qos,classic_queue_type_delivery_support,mqtt_v5,ram_node_type,drop_unroutable_metric,restart_streams\"\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Global Argument Placement in Shell Command\nDESCRIPTION: Example showing the correct placement of global arguments (such as --vhost) which must come before the command category and specific command in rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.quorum.queue.name\" --type \"quorum\" --durable true\n```\n\n----------------------------------------\n\nTITLE: Adding Host Entry for Keycloak and RabbitMQ\nDESCRIPTION: Adds necessary host entries to /etc/hosts file for local development, mapping localhost to keycloak and rabbitmq hostnames.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost keycloak rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Messaging Topology Operator with Generated Certificates\nDESCRIPTION: Command to apply the manually edited YAML manifest for installing the RabbitMQ Messaging Topology Operator with self-generated certificates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-topology-operator.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f messaging-topology-operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting never Delete Mode for AMQP 0-9-1 Shovel Persistence\nDESCRIPTION: The never delete mode configures the shovel to run indefinitely without deleting itself, making it suitable for continuous message transfer operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nnever\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in Foreground\nDESCRIPTION: Command to start a RabbitMQ node in the foreground with configuration file specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCONF_ENV_FILE=\"/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf\" /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Enabling Khepri Experimental Feature in RabbitMQ 3.13\nDESCRIPTION: This command enables the experimental Khepri feature, which is a new storage backend for RabbitMQ metadata. It's important to note that this feature is non-reversible and should not be used in production without thorough testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-03-11-rabbitmq-3.13.0-announcement/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl enable_feature_flag khepri_db\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with RAR Token Configuration\nDESCRIPTION: Bash command to set up and start RabbitMQ with a configuration file that supports Rich Authorization Request tokens.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nexport CONFIG=rabbitmq-for-rar-tokens.config\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Starting JMS Publisher with OAuth 2.0\nDESCRIPTION: Command to start a JMS publisher application that authenticates using OAuth 2.0 and sends a message to a queue called q-test-queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake start-jms-publisher\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Go Client Library\nDESCRIPTION: Commands to initialize a Go module and install the RabbitMQ AMQP client library required for connecting to RabbitMQ servers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo mod init <your-module-name>\ngo get github.com/rabbitmq/amqp091-go\n```\n\n----------------------------------------\n\nTITLE: Disabling Statistics with Queue Totals in RabbitMQ Management\nDESCRIPTION: Configuration that disables statistics aggregation but retains queue totals in the queues endpoint. Useful when using external monitoring but still needing individual queue metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.disable_stats = true\nmanagement.enable_queue_totals = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Cancel Notification Handling in Java\nDESCRIPTION: This code snippet demonstrates how to set up a consumer that can handle unexpected cancellations using the RabbitMQ Java client. It overrides the handleCancel method of the DefaultConsumer class to handle asynchronous cancel notifications from the broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumer-cancel.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDeclare(queue, false, true, false, null);\nConsumer consumer = new DefaultConsumer(channel) {\n    @Override\n    public void handleCancel(String consumerTag) throws IOException {\n        // consumer has been cancelled unexpectedly\n    }\n};\nchannel.basicConsume(queue, consumer);\n```\n\n----------------------------------------\n\nTITLE: Querying MQTT QoS 0 Messages Drop Metric in Prometheus\nDESCRIPTION: A Prometheus query example to retrieve metrics about QoS 0 messages that were dropped due to overload protection in RabbitMQ. This metric shows the total count across all queues of type rabbit_mqtt_qos0_queue during the node's lifetime.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\"rabbit_mqtt_qos0_queue\",dead_letter_strategy=\"disabled\"} 0\n```\n\n----------------------------------------\n\nTITLE: Using Resource in Erlang without Cuts\nDESCRIPTION: Shows a common pattern in Erlang where a simple abstraction is used to handle a resource, demonstrating the verbose nature of using funs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nwith_resource(Resource, Fun) ->\n    case lookup_resource(Resource) of\n        {ok, R}          -> Fun(R);\n        {error, _} = Err -> Err\n    end.\n\nmy_fun(A, B, C) ->\n    with_resource(A, fun (Resource) ->\n                            my_resource_modification(Resource, B, C)\n                        end).\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Quorum Queue Replicas via CLI\nDESCRIPTION: Commands for rebalancing quorum queue leaders across the cluster, with options to filter by queue name patterns and virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance quorum\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance quorum --queue-pattern \"orders.*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues rebalance quorum --vhost-pattern \"production.*\"\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues on Windows\nDESCRIPTION: Command to list all the queues in RabbitMQ and see how many messages they contain on Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues\n```\n\n----------------------------------------\n\nTITLE: Failed Virtual Host Deletion Example\nDESCRIPTION: Example showing the error message when attempting to delete a protected virtual host\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost \"vhost-name\"\n# ...\n# => Error:\n# => Cannot delete this virtual host: it is protected from deletion. To lift the protection, inspect and update its metadata\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ 4.0 with Management Plugin in Docker\nDESCRIPTION: This command runs the latest RabbitMQ 4.0.x version with the management plugin enabled in a Docker container. It exposes ports 5672 for AMQP and 15672 for the management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/download.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4.0-management\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Go Client Library\nDESCRIPTION: Commands to initialize a Go module and install the RabbitMQ AMQP client library required for connecting to RabbitMQ servers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo mod init <your-module-name>\ngo get github.com/rabbitmq/amqp091-go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shovel Status with RabbitMQ CLI\nDESCRIPTION: Command for checking status of all shovels using the RabbitMQ CLI tool. The example formats output as a pretty table.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shovel_status --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Handshake Timeout in RabbitMQ (INI)\nDESCRIPTION: Default maximum time (in milliseconds) allowed for AMQP 0-9-1 handshake after socket connection and TLS handshake.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 10000\n```\n\n----------------------------------------\n\nTITLE: Configure Federation Upstream in Bash\nDESCRIPTION: Command to configure a federation upstream named 'origin' with a connection URI using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-queues/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream origin '{\"uri\":\"amqp://remote-host.local:5672\"}'\n```\n\n----------------------------------------\n\nTITLE: Clear Federation Policy\nDESCRIPTION: Command to remove a federation policy by its name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-queues/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy queue-federation\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Consumer in Swift with RabbitMQ\nDESCRIPTION: Message consumer implementation that simulates work by sleeping based on the number of dots in the message. Demonstrates message processing in a worker pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nq.subscribe({(_ message: RMQMessage) -> Void in\n    let messageText = String(data: message.body, encoding: .utf8)\n    print(\"\\(name): Received \\(messageText)\")\n    // imitate some work\n    let sleepTime = UInt(messageText.components(separatedBy: \".\").count) - 1\n    print(\"\\(name): Sleeping for \\(sleepTime) seconds\")\n    sleep(sleepTime)\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing perf-test logs in Kubernetes\nDESCRIPTION: This snippet demonstrates how to view the logs of the perf-test pod in Kubernetes. It uses the kubectl logs command with the --follow option to stream the logs in real-time, showing the performance metrics of the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs --follow perf-test\n...\nid: test-141948-895, time: 16.001s, sent: 25651 msg/s, received: 25733 msg/s, min/median/75th/95th/99th consumer latency: 1346110/1457130/1495463/1529703/1542172 µs\nid: test-141948-895, time: 17.001s, sent: 26933 msg/s, received: 26310 msg/s, min/median/75th/95th/99th consumer latency: 1333807/1411182/1442417/1467869/1483273 µs\nid: test-141948-895, time: 18.001s, sent: 26292 msg/s, received: 25505 msg/s, min/median/75th/95th/99th consumer latency: 1329488/1428657/1455482/1502191/1518218 µs\nid: test-141948-895, time: 19.001s, sent: 23727 msg/s, received: 26055 msg/s, min/median/75th/95th/99th consumer latency: 1355788/1450757/1480030/1514469/1531624 µs\nid: test-141948-895, time: 20.001s, sent: 25009 msg/s, received: 25202 msg/s, min/median/75th/95th/99th consumer latency: 1327462/1447157/1474394/1509857/1521303 µs\nid: test-141948-895, time: 21.001s, sent: 28487 msg/s, received: 25942 msg/s, min/median/75th/95th/99th consumer latency: 1350527/1454599/1490094/1519461/1531042 µs\n...\n```\n\n----------------------------------------\n\nTITLE: Removing Quorum Queue Members in RabbitMQ\nDESCRIPTION: Command to remove a quorum queue member (replica) from a specified node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-queues.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues delete_member --vhost \"a-vhost\" \"a-queue\" \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Maximum Delivery Tag Value\nDESCRIPTION: Demonstrates the maximum possible value for a delivery tag in RabbitMQ, which is a 64-bit integer. Since delivery tags are scoped per channel, reaching this limit in practice is highly unlikely.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n9223372036854775807\n```\n\n----------------------------------------\n\nTITLE: Verifying .NET Core Installation\nDESCRIPTION: Command to verify that .NET Core toolchain is properly installed and accessible in the PATH.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet --help\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Status Before Node Shutdown in Bash\nDESCRIPTION: Command to check if shutting down the node would cause any quorum loss for internal components, quorum queues or stream queues. Exits with a non-zero code if shutting down the node would be problematic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# exits with a non-zero code if any of the internal components, quorum queues or stream queues\n# will lose online quorum should the target node be shut down;\n# additionally, it will print which components and/or queues are affected\nrabbitmq-diagnostics check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for RabbitMQ Stream Tutorial\nDESCRIPTION: Configuration file for the Node.js project with dependencies and npm scripts to run the producer and consumer examples.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\n  \"name\": \"rabbitmq-stream-node-tutorial\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Tutorial for the nodejs RabbitMQ stream client\",\n  \"scripts\": {\n    \"send\": \"node send.js\",\n    \"receive\": \"node receive.js\"\n  },\n  \"dependencies\": {\n    \"rabbitmq-stream-js-client\": \"^0.3.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Secret for OAuth 2.0 Authentication\nDESCRIPTION: Configuration for OAuth 2.0 with a client secret, which might be required by some OAuth providers for token refresh requests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_user_client\nmanagement.oauth_client_secret = rabbit_user_client\nmanagement.oauth_scopes = openid profile rabbitmq.*\n```\n\n----------------------------------------\n\nTITLE: Compiling Erlang Files with Erlando Parse Transformers\nDESCRIPTION: Demonstrates how to compile Erlang files using erlc while ensuring the Erlando parse transformer modules can be located.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nerlc -Wall +debug_info -I ./include -pa ebin -o ebin  src/cut.erl\nerlc -Wall +debug_info -I ./include -pa ebin -o ebin  src/do.erl\nerlc -Wall +debug_info -I ./include -pa test/ebin -pa ./ebin -o test/ebin test/src/test.erl\n```\n\n----------------------------------------\n\nTITLE: Setting trace VHosts in RabbitMQ (advanced)\nDESCRIPTION: Advanced configuration used internally by the tracer. This setting should not be changed by users.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_54\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n{trace_vhosts, []}\n]}\n```\n\n----------------------------------------\n\nTITLE: Simulating Work in RabbitMQ Consumer using Java\nDESCRIPTION: This method simulates work by sleeping for one second for each dot in the received message. It's used to demonstrate how long-running tasks are handled in a work queue system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate static void doWork(String task) throws InterruptedException {\n    for (char ch: task.toCharArray()) {\n        if (ch == '.') Thread.sleep(1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Task Queue in C# RabbitMQ Producer\nDESCRIPTION: This snippet shows how to declare a task queue named 'task_queue' in a RabbitMQ producer using C#. It's used to avoid conflicts with existing non-durable queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueDeclareAsync(queue: \"task_queue\",\n                     durable: true,\n                     exclusive: false,\n                     autoDelete: false,\n                     arguments: null);\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Unacknowledged Messages with rabbitmqctl\nDESCRIPTION: Commands to check for unacknowledged messages in RabbitMQ queues, which helps debug issues with forgotten acknowledgments. Shows both Unix and Windows versions of the command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Work Queues with Spring AMQP\nDESCRIPTION: This code snippet sets up the configuration for the Work Queues tutorial using Spring AMQP. It defines the queue, receiver, and sender beans, along with their respective profiles.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-spring-amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Profile({\"tut2\", \"work-queues\"})\n@Configuration\npublic class Tut2Config {\n\n    @Bean\n    public Queue hello() {\n        return new Queue(\"hello\");\n    }\n\n    @Profile(\"receiver\")\n    private static class ReceiverConfig {\n\n        @Bean\n        public Tut2Receiver receiver1() {\n            return new Tut2Receiver(1);\n        }\n\n        @Bean\n        public Tut2Receiver receiver2() {\n            return new Tut2Receiver(2);\n        }\n    }\n\n    @Profile(\"sender\")\n    @Bean\n    public Tut2Sender sender() {\n        return new Tut2Sender();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Backend for Authentication and Authorisation\nDESCRIPTION: Configuration example for setting up RabbitMQ to use the LDAP backend for both authentication and authorisation. With this configuration, the internal database will not be consulted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = ldap\n```\n\n----------------------------------------\n\nTITLE: Attaching an Event to ChangeState for Consumer in C#\nDESCRIPTION: Demonstrates how to attach an event listener to the ChangeState event of a RabbitMQ consumer in C#. The listener can react to state changes of the consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\nconsumer.ChangeState += (sender, fromState, toState, e) =>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Secret for OAuth 2.0 in RabbitMQ\nDESCRIPTION: Configuration for OAuth client secret when required by the OAuth provider for authentication or token refresh requests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_user_client\nmanagement.oauth_client_secret = rabbit_user_client\nmanagement.oauth_scopes = openid profile rabbitmq.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Content Security Policy in RabbitMQ Management\nDESCRIPTION: Sets the Content Security Policy (CSP) header value for HTTP API responses to the default policy that permits self-source scripts with unsafe-eval and unsafe-inline.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'\n```\n\n----------------------------------------\n\nTITLE: Apache Reverse Proxy Configuration for RabbitMQ Management UI\nDESCRIPTION: Apache configuration directives for setting up a reverse proxy to the RabbitMQ management web UI on port 15672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nAllowEncodedSlashes      NoDecode\nProxyPass         \"/api\" http://localhost:15672/api nocanon\nProxyPass         \"/\"    http://localhost:15672/\nProxyPassReverse  \"/\"    http://localhost:15672/\n```\n\n----------------------------------------\n\nTITLE: Pinning Erlang Package Version\nDESCRIPTION: Configures APT preferences to pin Erlang packages to a specific version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n# /etc/apt/preferences.d/erlang\nPackage: erlang*\nPin: version 1:26.2.5.6-1\n# Note: priority of 1001 (greater than 1000) allows for downgrading.\n# To make package downgrading impossible, use a value of 999\nPin-Priority: 1001\n```\n\n----------------------------------------\n\nTITLE: Absolute Disk Free Limit Configuration (Bytes)\nDESCRIPTION: Configuration example showing how to set the disk free limit to 1GB using byte value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/disk-alarms.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 1000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Both HTTP and HTTPS Listeners for RabbitMQ Management\nDESCRIPTION: Enables both HTTP and HTTPS listeners on different ports (15672 for HTTP and 15671 for HTTPS). Requires specifying certificate paths for the HTTPS listener.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.tcp.port       = 15672\n\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket STOMP Connection\nDESCRIPTION: JavaScript code to establish a WebSocket connection and initialize STOMP client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ws = new WebSocket('ws://127.0.0.1:15674/ws');\nvar client = Stomp.over(ws);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with Internal Database Fallback\nDESCRIPTION: Configuration that tries LDAP first for authentication and authorization, then falls back to RabbitMQ's internal database if the user cannot be authenticated through LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# try LDAP first\nauth_backends.1 = ldap\n# fall back to the internal database\nauth_backends.2 = internal\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with Internal Database Fallback\nDESCRIPTION: Configuration that tries LDAP first for authentication and authorization, then falls back to RabbitMQ's internal database if the user cannot be authenticated through LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# try LDAP first\nauth_backends.1 = ldap\n# fall back to the internal database\nauth_backends.2 = internal\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Consumer in Erlang\nDESCRIPTION: Shows how to cancel a consumer subscription using the consumer tag returned during subscription. After cancellation, the consumer may still receive in-flight deliveries but will eventually stop receiving messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\namqp_channel:call(Channel, #'basic.cancel'{consumer_tag = Tag})\n```\n\n----------------------------------------\n\nTITLE: Authentication Backends Basic Config\nDESCRIPTION: Default authentication backend configuration using internal database.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = internal\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Admin Password from Kubernetes Secret\nDESCRIPTION: Command to retrieve and decode the base64-encoded password for the RabbitMQ admin user from the default-user Kubernetes secret created by the RabbitMQ Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n NAMESPACE get secret INSTANCE-default-user -o jsonpath=\"{.data.password}\" | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory High Watermark (Absolute) in RabbitMQ\nDESCRIPTION: Configuration for the memory threshold (as an absolute value) at which flow control is triggered.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 2GB\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple RabbitMQ Scopes to a Custom Role\nDESCRIPTION: This configuration maps a single custom scope 'api://rabbitmq:producer' to multiple RabbitMQ permissions, granting read, write, and configure access on all resources across all vhosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_21\n\nLANGUAGE: erl\nCODE:\n```\n{rabbitmq_auth_backend_oauth2, [\n  %% ...,\n\n\t{scope_aliases, #{\n\t\t<<\"api://rabbitmq:producer\">> => [\n\t\t\t<<\"rabbitmq.read:*/*\">>,\n\t\t\t<<\"rabbitmq.write:*/*\">>,\n\t\t\t<<\"rabbitmq.configure:*/*\">>\n\t\t]\n\t}},\n\t%% ...\n]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding with RabbitMQ in Java\nDESCRIPTION: This snippet shows how to create a binding between a queue and an exchange with a specific routing key in RabbitMQ using Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueBind(queueName, EXCHANGE_NAME, \"black\");\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags and Their State in RabbitMQ\nDESCRIPTION: Command to list all available feature flags in a RabbitMQ cluster along with their current state (enabled or disabled). This helps administrators understand which features are active.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin feature_flags list\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Channels Limit with curl\nDESCRIPTION: This curl command sets a maximum channels limit of 20 for user1 using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-channels \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": 20\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host with Quorum Queue Default in RabbitMQ\nDESCRIPTION: Commands to create a new virtual host with quorum as the default queue type and set user permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-02-quorum-queues-migration/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost NEW_VHOST --default-queue-type quorum\nrabbitmqctl set_permissions -p NEW_VHOST USERNAME '.*' '.*' '.*'\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ with Maven\nDESCRIPTION: Shell command to execute the publisher class that sends 100 messages to the RabbitMQ exchange using Maven.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Interoperability$Publish'\n```\n\n----------------------------------------\n\nTITLE: Emitting an Error Log Message in Bash\nDESCRIPTION: Command to run the producer script to send an error message to the exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmix run emit_log_direct.exs --error \"Run. Run. Or it will explode.\"\n# => [x] Sent '[error] Run. Run. Or it will explode.'\n```\n\n----------------------------------------\n\nTITLE: Using RAR Token with AMQP Producer Application\nDESCRIPTION: Command to start a PerfTest producer application that connects to RabbitMQ using a Rich Authorization Request token for authentication and authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer_with_roles TOKEN=$(bin/jwt_token rar-token.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Basic Value Encoding with RabbitMQ CLI\nDESCRIPTION: Simple example of encoding a value using rabbitmqctl encode command with a passphrase.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode '<<\"guest\">>' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Restarting Virtual Host\nDESCRIPTION: Restarts a failed virtual host's data stores and queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl restart_vhost test\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Alarms\nDESCRIPTION: Health check command that fails if there are alarms in effect on any cluster nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_alarms\n```\n\n----------------------------------------\n\nTITLE: Updating Memory Threshold on Running RabbitMQ Node\nDESCRIPTION: Command-line examples for updating the memory threshold on a running RabbitMQ node using rabbitmqctl, including setting relative and absolute thresholds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark <fraction>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark absolute <memory_limit>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0.7\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark absolute \"4G\"\n```\n\n----------------------------------------\n\nTITLE: Complete TLS Connection Example with RabbitMQ .NET Client\nDESCRIPTION: A complete example that creates a TLS-enabled connection to RabbitMQ, creates a channel, declares and then deletes a queue. The example demonstrates setting up the SSL connection parameters and using async/await pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Text;\n\nusing RabbitMQ.client;\nusing RabbitMQ.Util;\n\nnamespace RabbitMQ.client.Examples\n{\n  public class TestSSL\n  {\n    public static async Task<int> Main(string[] args)\n    {\n      ConnectionFactory cf = new ConnectionFactory();\n\n      cf.Ssl.Enabled = true;\n      cf.Ssl.ServerName = System.Net.Dns.GetHostName();\n      cf.Ssl.CertPath = \"/path/to/client_key.p12\";\n      cf.Ssl.CertPassphrase = \"MySecretPassword\";\n\n      using (IConnection conn = await cf.CreateConnectionAsync())\n      {\n        using (IChannel ch = await conn.CreateChannelAsync())\n        {\n          Console.WriteLine(\"Successfully connected and opened a channel\");\n          await ch.QueueDeclareAsync(\"rabbitmq-dotnet-test\", false, false, false, null);\n          Console.WriteLine(\"Successfully declared a queue\");\n          await ch.QueueDeleteAsync(\"rabbitmq-dotnet-test\");\n          Console.WriteLine(\"Successfully deleted the queue\");\n        }\n      }\n      return 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete TLS Connection Example with RabbitMQ .NET Client\nDESCRIPTION: A complete example that creates a TLS-enabled connection to RabbitMQ, creates a channel, declares and then deletes a queue. The example demonstrates setting up the SSL connection parameters and using async/await pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Text;\n\nusing RabbitMQ.client;\nusing RabbitMQ.Util;\n\nnamespace RabbitMQ.client.Examples\n{\n  public class TestSSL\n  {\n    public static async Task<int> Main(string[] args)\n    {\n      ConnectionFactory cf = new ConnectionFactory();\n\n      cf.Ssl.Enabled = true;\n      cf.Ssl.ServerName = System.Net.Dns.GetHostName();\n      cf.Ssl.CertPath = \"/path/to/client_key.p12\";\n      cf.Ssl.CertPassphrase = \"MySecretPassword\";\n\n      using (IConnection conn = await cf.CreateConnectionAsync())\n      {\n        using (IChannel ch = await conn.CreateChannelAsync())\n        {\n          Console.WriteLine(\"Successfully connected and opened a channel\");\n          await ch.QueueDeclareAsync(\"rabbitmq-dotnet-test\", false, false, false, null);\n          Console.WriteLine(\"Successfully declared a queue\");\n          await ch.QueueDeleteAsync(\"rabbitmq-dotnet-test\");\n          Console.WriteLine(\"Successfully deleted the queue\");\n        }\n      }\n      return 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ and Creating a Stream in JavaScript\nDESCRIPTION: This code demonstrates how to establish a connection to RabbitMQ and create a stream with specific retention settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = await rabbit.connect({\n  hostname: \"localhost\",\n  port: 5552,\n  username: \"guest\",\n  password: \"guest\",\n  vhost: \"/\",\n});\n\nconsole.log(\"Making sure the stream exists...\");\nconst streamSizeRetention = 5 * 1e9;\nconst streamName = \"stream-offset-tracking-javascript\";\nawait client.createStream({ stream: streamName, arguments: { \"max-length-bytes\": streamSizeRetention } });\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration for RabbitMQ Java Client 4.0\nDESCRIPTION: Gradle dependency configuration line to include RabbitMQ Java Client version 4.0.0 in a Gradle project.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2016-11-24-rabbitmq-java-client-4-0-is-released/index.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncompile 'com.rabbitmq:amqp-client:4.0.0'\n```\n\n----------------------------------------\n\nTITLE: List MQTT Connection Protocol Values\nDESCRIPTION: Possible protocol version values that can be returned by the list_mqtt_connections command when querying protocol information from MQTT connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_73\n\nLANGUAGE: erlang\nCODE:\n```\n{'MQTT', N/A}\n{'MQTT', 3.1.0}\n{'MQTT', 3.1.1}\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Disk Free Space Limit with Numeric Value in RabbitMQ\nDESCRIPTION: Configuration example showing how to set the disk free space limit to 1GB using an absolute numeric value (in bytes).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/disk-alarms.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 1000000000\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Shovel forward header properties\nDESCRIPTION: Header names that can be added to shovelled messages to indicate their origin and routing information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nx-shovelled\n```\n\nLANGUAGE: text\nCODE:\n```\ncreation_time\n```\n\n----------------------------------------\n\nTITLE: Running Message Priority Tests with OMQ in RabbitMQ\nDESCRIPTION: Shell commands to test message priorities in RabbitMQ quorum queues using the OMQ testing client. The commands demonstrate queue declaration, publishing messages with different priorities, and message consumption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-28-quorum-queues-in-4.0/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# declare a quorum queue (you can use the Management UI or any other method)\nrabbitmqadmin declare queue name=qq queue_type=quorum\n# publish normal priority messages (10 publishers, 10k messages each)\nomq amqp --publishers 10 --consumers 0 --publish-to /queues/qq --message-priority 1 --pmessages 10000\n# publish high priority messages\nomq amqp --publishers 10 --consumers 0 --publish-to /queues/qq --message-priority 10 --pmessages 10000\n# consume all messages from the queue\nomq amqp --publishers 0 --consumers 1 --consume-from /queues/qq --consumer-credits 100\n```\n\n----------------------------------------\n\nTITLE: Deactivating Federation Policy\nDESCRIPTION: Command to remove a federation policy by its name, which will stop federation for the previously matching exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy exchange-federation\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation\nDESCRIPTION: Full implementation of the log receiver program with severity-based filtering\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"log\"\n        \"os\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                \"logs_direct\", // name\n                \"direct\",      // type\n                true,          // durable\n                false,         // auto-deleted\n                false,         // internal\n                false,         // no-wait\n                nil,           // arguments\n        )\n        failOnError(err, \"Failed to declare an exchange\")\n\n        q, err := ch.QueueDeclare(\n                \"\",    // name\n                false, // durable\n                false, // delete when unused\n                true,  // exclusive\n                false, // no-wait\n                nil,   // arguments\n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        if len(os.Args) < 2 {\n                log.Printf(\"Usage: %s [info] [warning] [error]\", os.Args[0])\n                os.Exit(0)\n        }\n        for _, s := range os.Args[1:] {\n                log.Printf(\"Binding queue %s to exchange %s with routing key %s\",\n                        q.Name, \"logs_direct\", s)\n                err = ch.QueueBind(\n                        q.Name,        // queue name\n                        s,             // routing key\n                        \"logs_direct\", // exchange\n                        false,\n                        nil)\n                failOnError(err, \"Failed to bind a queue\")\n        }\n\n        msgs, err := ch.Consume(\n                q.Name, // queue\n                \"\",     // consumer\n                true,   // auto ack\n                false,  // exclusive\n                false,  // no local\n                false,  // no wait\n                nil,    // args\n        )\n        failOnError(err, \"Failed to register a consumer\")\n\n        var forever chan struct{}\n\n        go func() {\n                for d := range msgs {\n                        log.Printf(\" [x] %s\", d.Body)\n                }\n        }()\n\n        log.Printf(\" [*] Waiting for logs. To exit press CTRL+C\")\n        <-forever\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Log Location with rabbitmq-diagnostics in Bash\nDESCRIPTION: Command to find the current log file location using the rabbitmq-diagnostics CLI tool in a Bash shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q log_location\n```\n\n----------------------------------------\n\nTITLE: Using --help Option for Specific Commands in PowerShell\nDESCRIPTION: Shows how to use the --help option to get detailed help for a specific command (status) using rabbitmq-diagnostics in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat status --help\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Usage Page in Markdown\nDESCRIPTION: This snippet defines the structure and content of a Markdown page explaining how to use RabbitMQ. It includes a title, copyright notice, and introductory text for developers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/use-rabbitmq.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to Use RabbitMQ\n---\n<!--\nCopyright (c) 2024 Broadcom. All Rights Reserved. The term \"Broadcom\" refers\nto Broadcom Inc. and/or its subsidiaries.\n\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except in compliance\nwith the License. You may obtain a copy of the License at\n\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# How to Use RabbitMQ\n\nThis section is mainly for **developers** who are creating applications that\nexchanges messages through RabbitMQ.\n\nIf you are new to RabbitMQ, you might want to start with [Getting\nStarted](/tutorials). These tutorials will guide you on how to use RabbitMQ.\nThe rest of this section contains the reference documentation about RabbitMQ\nfeatures and use cases.\n```\n\n----------------------------------------\n\nTITLE: Failed Cluster Join Example - Bash\nDESCRIPTION: Example showing an error when attempting to join a node to a cluster that lacks quorum, demonstrating Khepri's consensus requirements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/clustering.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@host-5 join_cluster rabbit@host-4\n\n# => Error:\n# => Khepri has timed out on node rabbit@host-5.\n# => Khepri cluster could be in minority.\n```\n\n----------------------------------------\n\nTITLE: Specifying node name in rabbitmq-upgrade\nDESCRIPTION: Shows how to specify a target node when using the rabbitmq-upgrade command. The default node is \"rabbit@hostname\" unless overridden.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-n node\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Listeners with rabbitmq-diagnostics\nDESCRIPTION: This snippet shows how to check all enabled listeners on a RabbitMQ node using the rabbitmq-diagnostics CLI tool. The output includes interface, port, protocol, and purpose for each listener.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q listeners --node rabbit@target-hostname\n# => Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication\n# => Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0\n# => Interface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS\n# => Interface: [::], port: 15672, protocol: http, purpose: HTTP API\n# => Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\n```\n\n----------------------------------------\n\nTITLE: Exporting Definitions via HTTP API\nDESCRIPTION: Examples of using curl to export definitions through the RabbitMQ HTTP API, with optional JSON formatting using jq.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\ncurl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions\n\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\n#\n# jq is a 3rd party tool that must be available in PATH\ncurl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions | jq\n```\n\n----------------------------------------\n\nTITLE: Creating Shovel Using curl Command\nDESCRIPTION: Example curl command for creating a shovel between local queues using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\": \"amqp://localhost\",\n    \"src-queue\": \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqp://localhost\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Shovel Using curl Command\nDESCRIPTION: Example curl command for creating a shovel between local queues using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\": \"amqp://localhost\",\n    \"src-queue\": \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqp://localhost\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Maybe Monad Implementation\nDESCRIPTION: Implementation of the Maybe monad in Erlang, which handles optional values and short-circuits execution when a 'nothing' value is encountered, preventing subsequent expressions from being evaluated.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n-module(maybe_m).\n-behaviour(monad).\n-export(['>>='/2, return/1, fail/1]).\n\n'>>='({just, X}, Fun) -> Fun(X);\n'>>='(nothing,  _Fun) -> nothing.\n\nreturn(X) -> {just, X}.\nfail(_X)  -> nothing.\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Worker Implementation with Acknowledgments and Fair Dispatch in Python\nDESCRIPTION: Complete implementation of a reliable worker that processes messages from a durable queue, acknowledges messages after processing, and uses prefetch to ensure fair workload distribution among workers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport pika\nimport time\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='task_queue', durable=True)\nprint(' [*] Waiting for messages. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body.decode()}\")\n    time.sleep(body.count(b'.'))\n    print(\" [x] Done\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue='task_queue', on_message_callback=callback)\n\nchannel.start_consuming()\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Worker in Java\nDESCRIPTION: This bash command shows how to run the Worker program, which will consume messages from the RabbitMQ queue and process them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\njava -cp $CP Worker\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding with FanoutExchange in Spring AMQP\nDESCRIPTION: Example of creating a binding between a queue and a fanout exchange using Spring AMQP's BindingBuilder. This binding connects a queue to receive all messages from the fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic Binding binding1(FanoutExchange fanout,\n    Queue autoDeleteQueue1) {\n    return BindingBuilder.bind(autoDeleteQueue1).to(fanout);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fanout Exchange with Spring AMQP\nDESCRIPTION: Configuration class that sets up a fanout exchange with two anonymous queues and their bindings. Includes separate profiles for sender and receiver configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Profile({\"tut3\", \"pub-sub\", \"publish-subscribe\"})\n@Configuration\npublic class Tut3Config {\n\n\t@Bean\n\tpublic FanoutExchange fanout() {\n\t\treturn new FanoutExchange(\"tut.fanout\");\n\t}\n\n\t@Profile(\"receiver\")\n\tprivate static class ReceiverConfig {\n\n\t\t@Bean\n\t\tpublic Queue autoDeleteQueue1() {\n\t\t\treturn new AnonymousQueue();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Queue autoDeleteQueue2() {\n\t\t\treturn new AnonymousQueue();\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding1(FanoutExchange fanout,\n\t\t    Queue autoDeleteQueue1) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue1).to(fanout);\n\t\t}\n\n\t\t@Bean\n\t\tpublic Binding binding2(FanoutExchange fanout,\n\t\t    Queue autoDeleteQueue2) {\n\t\t\treturn BindingBuilder.bind(autoDeleteQueue2).to(fanout);\n\t\t}\n\n\t\t@Bean\n\t\tpublic Tut3Receiver receiver() {\n\t\t\treturn new Tut3Receiver();\n\t\t}\n\t}\n\n\t@Profile(\"sender\")\n\t@Bean\n\tpublic Tut3Sender sender() {\n\t\treturn new Tut3Sender();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting a Failed Virtual Host in RabbitMQ\nDESCRIPTION: Command to restart a failed virtual host named 'test' in RabbitMQ. This will restart the data stores and queues for the specified virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl restart_vhost test\n```\n\n----------------------------------------\n\nTITLE: Configuring Default User Credentials in RabbitMQ\nDESCRIPTION: Shows configuration settings for overriding default user credentials in RabbitMQ. These settings must be in place before the first node boot as they only apply on initial startup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# default is \"guest\", and its access is limited to localhost only.\n# See ./access-control#default-state\ndefault_user = a-user\n# default is \"guest\"\ndefault_pass = 768a852ed69ce916fa7faa278c962de3e4275e5f\n```\n\n----------------------------------------\n\nTITLE: Setting a Back-off Policy for Connection Recovery in Java\nDESCRIPTION: Shows how to customize the back-off delay policy for automatic connection recovery in Java. This example sets a fixed delay of 2 seconds between reconnection attempts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_71\n\nLANGUAGE: java\nCODE:\n```\nConnection connection = environment.connectionBuilder()\n    .recovery()\n    .backOffDelayPolicy(BackOffDelayPolicy.fixed(Duration.ofSeconds(2)))\n    .connectionBuilder().build();\n```\n\n----------------------------------------\n\nTITLE: Using Named Configuration with Shell Command\nDESCRIPTION: Command that uses a named connection profile from the configuration file to execute a command against a specific RabbitMQ environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n# will use the settings from the section called [staging]\nrabbitmqadmin --node staging show churn\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Severities in Objective-C\nDESCRIPTION: This code shows how to create bindings for multiple severities when subscribing to logs in RabbitMQ using Objective-C.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-objectivec.md#2025-04-09_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\nRMQQueue *q = [ch queue:@\"\" options:RMQQueueDeclareExclusive];\n\nNSArray *severities = @[@\"error\", @\"warning\", @\"info\"];\nfor (NSString *severity in severities) {\n    [q bind:x routingKey:severity];\n}\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Log Receiver for All Severities\nDESCRIPTION: This bash command demonstrates how to run the ReceiveLogsDirect program to receive log messages of all severities (info, warning, error) and display them on the console.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP ReceiveLogsDirect info warning error\n# => [*] Waiting for logs. To exit press CTRL+C\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding with FanoutExchange in Spring AMQP\nDESCRIPTION: Example of creating a binding between a queue and a fanout exchange using Spring AMQP's BindingBuilder. This binding connects a queue to receive all messages from the fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic Binding binding1(FanoutExchange fanout,\n    Queue autoDeleteQueue1) {\n    return BindingBuilder.bind(autoDeleteQueue1).to(fanout);\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Channel Memory Usage with RabbitMQ Diagnostics\nDESCRIPTION: Uses the rabbitmq-diagnostics command to display memory breakdown, showing the amount of memory used by channels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics memory_breakdown -q --unit mb\n# => [elided for brevity]\n# ...\n# => connection_channels: 3.596 mb (2.27%)\n# ...\n# => [elided for brevity]\n```\n\n----------------------------------------\n\nTITLE: Disabling Free Disk Space Monitoring in RabbitMQ\nDESCRIPTION: Log entry showing that disk free space monitoring has been disabled, which occurs on unrecognized platforms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/disk-alarms.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n2019-04-01 11:04:54.002 [info] <0.329.0> Disabling disk free space monitoring\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository Signing Keys\nDESCRIPTION: These commands add the RabbitMQ signing key and Launchpad PPA signing key to the system, enabling apt to trust packages signed by these keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# primary RabbitMQ signing key\ncurl -1sLf \"https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.github.rabbitmq.signing.gpg > /dev/null\n\n# Launchpad PPA signing key for apt\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Quorum Queues in Erlang\nDESCRIPTION: Example configuration for RabbitMQ quorum queues using advanced.config file. Sets the default replica count to 5 and increases the commands soft limit to 64.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n[\n %% five replicas by default, only makes sense for nine node clusters\n {rabbit, [{quorum_cluster_size, 5},\n           {quorum_commands_soft_limit, 64}]}\n].\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Connection Metrics Tables\nDESCRIPTION: Connection-level metrics for monitoring network traffic and process performance\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                                | Description                                    |\n|-------------------------------------------------------|------------------------------------------------|\n| rabbitmq_detailed_connection_incoming_bytes_total     | Total number of bytes received on a connection |\n| rabbitmq_detailed_connection_outgoing_bytes_total     | Total number of bytes sent on a connection     |\n| rabbitmq_detailed_connection_process_reductions_total | Total number of connection process reductions  |\n```\n\n----------------------------------------\n\nTITLE: Consuming Filtered Stream Messages\nDESCRIPTION: Demonstrates how to consume messages from a RabbitMQ stream with filtering enabled, including client-side validation of the filter value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-filter\", \"california\"), // set filter\n  (consumerTag, message) -> {\n    Map<String, Object> headers = message.getProperties().getHeaders();\n    // there must be some client-side filter logic\n    if (\"california\".equals(headers.get(\"x-stream-filter-value\"))) {\n      // message processing\n      // ...\n    }\n    channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Authentication Backend in RabbitMQ\nDESCRIPTION: This snippet shows how to configure RabbitMQ to use only the internal authentication backend, which is the default setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\n# 1 here is a backend name. It can be anything.\n# Since we only really care about backend\n# ordering, we use numbers throughout this guide.\n#\n# \"internal\" is an alias for rabbit_auth_backend_internal\nauth_backends.1 = internal\n```\n\n----------------------------------------\n\nTITLE: Enabling Khepri Feature Flag in PowerShell\nDESCRIPTION: CLI command to enable the khepri_db experimental feature flag in RabbitMQ using PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat enable_feature_flag --experimental khepri_db\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Task Publisher Implementation in C#\nDESCRIPTION: This is the complete implementation of a RabbitMQ task publisher (producer) in C#. It includes queue declaration, message persistence, and publishing messages to the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text;\nusing RabbitMQ.Client;\n\nclass NewTask\n{\n    public static void Main(string[] args)\n    {\n        var factory = new ConnectionFactory() { HostName = \"localhost\" };\n        using (var connection = factory.CreateConnection())\n        using (var channel = connection.CreateModel())\n        {\n            channel.QueueDeclare(queue: \"task_queue\",\n                                 durable: true,\n                                 exclusive: false,\n                                 autoDelete: false,\n                                 arguments: null);\n\n            var message = GetMessage(args);\n            var body = Encoding.UTF8.GetBytes(message);\n\n            var properties = channel.CreateBasicProperties();\n            properties.Persistent = true;\n\n            channel.BasicPublish(exchange: \"\",\n                                 routingKey: \"task_queue\",\n                                 basicProperties: properties,\n                                 body: body);\n            Console.WriteLine($\" [x] Sent {message}\");\n        }\n\n        Console.WriteLine(\" Press [enter] to exit.\");\n        Console.ReadLine();\n    }\n\n    private static string GetMessage(string[] args)\n    {\n        return ((args.Length > 0) ? string.Join(\" \", args) : \"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Breakdown Using rabbitmq-diagnostics CLI Tool in Bash\nDESCRIPTION: Example of using the rabbitmq-diagnostics tool to get memory usage breakdown with readable units (MB). This provides similar information to the HTTP API but in a more human-readable format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q memory_breakdown --unit \"MB\"\n# => connection_other: 50.18 mb (22.1%)\n# => allocated_unused: 43.7058 mb (19.25%)\n# => other_proc: 26.1082 mb (11.5%)\n# => other_system: 26.0714 mb (11.48%)\n# => connection_readers: 22.34 mb (9.84%)\n# => code: 20.4311 mb (9.0%)\n# => queue_procs: 17.687 mb (7.79%)\n# => other_ets: 4.3429 mb (1.91%)\n# => connection_writers: 4.068 mb (1.79%)\n# => connection_channels: 4.012 mb (1.77%)\n# => metrics: 3.3802 mb (1.49%)\n# => binary: 1.992 mb (0.88%)\n# => mnesia: 1.6292 mb (0.72%)\n# => atom: 1.0826 mb (0.48%)\n# => msg_index: 0.0317 mb (0.01%)\n# => plugins: 0.0119 mb (0.01%)\n# => queue_slave_procs: 0.0 mb (0.0%)\n# => mgmt_db: 0.0 mb (0.0%)\n# => reserved_unallocated: 0.0 mb (0.0%)\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter with Direct Exchange in Swift RabbitMQ Client\nDESCRIPTION: Full implementation of a function that emits log messages with specified severity through a direct exchange. It creates a connection, channel, and exchange before publishing the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc emitLogDirect(_ msg: String, severity: String) {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let x = ch.direct(\"direct_logs\")\n    x.publish(msg.data(using: .utf8), routingKey: severity)\n    print(\"Sent '\\(msg)'\")\n    conn.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Publishers with Different Targets in C#\nDESCRIPTION: Examples of creating publishers in C# with different target types: publishing to an exchange with a routing key, to an exchange without a routing key, and directly to a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n// publish to an exchange with a routing key\nPublisher publisher = await connection.PublisherBuilder()\n    .Exchange(\"foo\")\n    .Key(\"bar\")\n    .BuildAsync();\n\n\n// publish to an exchange without a routing key\nPublisher publisher = await connection.PublisherBuilder()\n    .Exchange(\"foo\") // /exchanges/foo\n    .BuildAsync();\n\n// publish to a queue\n  IPublisher publisher = await _connection.PublisherBuilder()\n  .Queue(\"some-queue\")// /queues/some-queue\n  .BuildAsync();\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for EC2 Instance Discovery\nDESCRIPTION: JSON policy definition for IAM roles to allow EC2 instances to use the Instance Metadata Service for peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"autoscaling:DescribeAutoScalingInstances\",\n                \"ec2:DescribeInstances\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Queue Limit for a Virtual Host\nDESCRIPTION: Command to set a maximum limit of 1024 queues for a RabbitMQ virtual host using the rabbitmqctl set_vhost_limits command with a JSON configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-queues\": 1024}'\n```\n\n----------------------------------------\n\nTITLE: Clearing Certificate Cache in RabbitMQ (PowerShell)\nDESCRIPTION: Command to clear the PEM cache for SSL certificates in RabbitMQ using rabbitmqctl in a PowerShell environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_47\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel for Queue Migration\nDESCRIPTION: Commands to set up and remove a shovel for migrating messages between virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-02-quorum-queues-migration/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter shovel migrate-QUEUE_TO_MIGRATE \\\n  '{\"src-protocol\": \"amqp091\", \"src-uri\": \"amqp:///OLD_VHOST\", \"src-queue\": \"QUEUE_TO_MIGRATE\",\n    \"dest-protocol\": \"amqp091\", \"dest-uri\": \"amqp:///NEW_VHOST\", \"dest-queue\": \"QUEUE_TO_MIGRATE\"}'\n\nrabbitmqctl clear_parameter shovel migrate-QUEUE_TO_MIGRATE\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Verification in RabbitMQ (Classic Format)\nDESCRIPTION: Configuration example for enabling TLS peer verification in RabbitMQ using the classic Erlang configuration format. Configures SSL listeners and certificate settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n[\n{rabbit, [\n   {ssl_listeners, [5671]},\n   {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                  {certfile,\"/path/to/server_certificate.pem\"},\n                  {keyfile,\"/path/to/server_key.pem\"},\n                  {verify, verify_peer},\n                  {fail_if_no_peer_cert, true}]}\n ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Up RPC Client Connection in C#\nDESCRIPTION: Initialization code for RPC client that sets up connection and declares callback queue for receiving responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(_channel);\n_channel.BasicConsume(\n    consumer: consumer,\n    queue: _replyQueueName,\n    autoAck: true);\n\nconsumer.Received += (model, ea) =>\n{\n    HandleResponse(ea);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management API with OAuth Token\nDESCRIPTION: Command to access the RabbitMQ management API using a client credential flow with Keycloak. Uses the mgt_api_client which has administrator permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-keycloak url=http://localhost:15672/api/overview client_id=mgt_api_client secret=LWOuYqJ8gjKg3D2U8CJZDuID3KiRZVDa\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ TLS Configuration in INI Format\nDESCRIPTION: Example RabbitMQ configuration file in INI format that enables TLS on port 5671. It specifies the locations of CA certificate, server certificate, and private key files, and enables peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\n# If the private key file is password protected, set this value:\n# ssl_options.password = PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Peer Discovery Plugin in RabbitMQ\nDESCRIPTION: Command to enable the AWS (EC2) peer discovery plugin which must be done before the first node boot for proper cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_aws\n```\n\n----------------------------------------\n\nTITLE: Binding Exchanges Using Java RabbitMQ Client\nDESCRIPTION: Demonstrates how to bind two exchanges using the Java RabbitMQ client. Creates a binding from a source exchange to a destination exchange with a specified routing key using Channel#exchangeBind method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/e2e.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = conn.createChannel();\nch.exchangeBind(\"destination\", \"source\", \"routingKey\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Max in RabbitMQ INI File\nDESCRIPTION: This INI configuration sets the maximum number of channels allowed per connection in RabbitMQ to 16. This can help optimize memory usage by limiting the number of channels applications can use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 16\n```\n\n----------------------------------------\n\nTITLE: Binding Exchanges Using RabbitMQ .NET Client\nDESCRIPTION: Demonstrates how to bind a destination exchange to a source exchange with a routing key using the RabbitMQ .NET client. The ExchangeBind method creates a unidirectional binding where messages will flow from the source exchange to the destination exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/e2e.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar ch = conn.CreateModel();\nch.ExchangeBind(\"destination\", \"source\", \"routingKey\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Relaxed Queue Property Checks for Migration\nDESCRIPTION: Configures RabbitMQ to relax queue property equivalence checks when transitioning to quorum queues. This helps with gradual migration by preventing channel exceptions when applications redeclare queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# this setting is meant to be used during transitionary periods when\n# RabbitMQ default queue type is changed but not all applications have been\n# updated yet\nquorum_queue.property_equivalence.relaxed_checks_on_redeclaration = true\n```\n\n----------------------------------------\n\nTITLE: Creating an AMQP 1.0 Message for RabbitMQ Streams\nDESCRIPTION: Java code to create a message with properties and a binary payload using the message builder provided by the Producer. RabbitMQ Streams uses the AMQP 1.0 message format for interoperability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMessage message = producer.messageBuilder()\n        .properties()\n            .creationTime(System.currentTimeMillis())\n            .messageId(i)\n        .messageBuilder()\n        .addData(\"hello world\".getBytes(StandardCharsets.UTF_8))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Options in RabbitMQ (INI)\nDESCRIPTION: Default configuration for TLS settings in RabbitMQ, which is initially set to none (disabled).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nssl_options = none\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Documentation Contribution Section in HTML\nDESCRIPTION: This HTML code snippet creates a section encouraging users to contribute to improving the RabbitMQ documentation. It includes a heading, a paragraph of text, and a link to the GitHub repository where the website source code is hosted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/semantics.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"contribute\">\n    <h2>Help Us Improve the Docs &lt;3</h2>\n    <p>If you'd like to contribute an improvement to the site, its source is <a href=\"https://github.com/rabbitmq/rabbitmq-website\">available on GitHub</a>. Simply fork the repository and submit a pull request. Thank you!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Node Information via HTTP API\nDESCRIPTION: Details for accessing node information through the /api/nodes and /api/nodes/(name) endpoints. These endpoints return various node statistics including memory usage, disk space, process counts, and configuration information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_32\n\nLANGUAGE: http\nCODE:\n```\n/api/nodes\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/nodes/(name)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Options in RabbitMQ (INI)\nDESCRIPTION: Default configuration for TLS settings in RabbitMQ, which is initially set to none (disabled).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nssl_options = none\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Basic Auth in RabbitMQ HTTP API (Bash)\nDESCRIPTION: Example of using Basic Authentication to authenticate against the RabbitMQ HTTP API using curl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i --header \"authorization: Basic <encoded credentials>\" http://localhost:15672/api/vhosts\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Documentation Components\nDESCRIPTION: React/JavaScript imports for documentation site components used to render the TLS documentation, including tabs and .NET client URL references.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  DotNetClientDocURL,\n} from '@site/src/components/DotNetClient';\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Setting Console Debug Level\nDESCRIPTION: Sets the console logging level to debug.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.level = debug\n```\n\n----------------------------------------\n\nTITLE: Resetting Log Level to Info at Runtime in RabbitMQ\nDESCRIPTION: Command to reset log level back to info at runtime using rabbitmqctl. This reduces verbosity after debugging is complete.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@target-host set_log_level info\n```\n\n----------------------------------------\n\nTITLE: Binding Exchanges Using RabbitMQ .NET Client\nDESCRIPTION: Demonstrates how to bind a destination exchange to a source exchange with a routing key using the RabbitMQ .NET client. The ExchangeBind method creates a unidirectional binding where messages will flow from the source exchange to the destination exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/e2e.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar ch = conn.CreateModel();\nch.ExchangeBind(\"destination\", \"source\", \"routingKey\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Log Rotation\nDESCRIPTION: Configuration example showing how to set up log file rotation based on file size with a retention policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# rotate when the file reaches 10 MiB\nlog.file.rotation.size = 10485760\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n\n\n```\n\n----------------------------------------\n\nTITLE: Inspecting Channel Memory Usage with RabbitMQ Diagnostics\nDESCRIPTION: Uses the rabbitmq-diagnostics command to display memory breakdown, showing the amount of memory used by channels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics memory_breakdown -q --unit mb\n# => [elided for brevity]\n# ...\n# => connection_channels: 3.596 mb (2.27%)\n# ...\n# => [elided for brevity]\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL File Size Limit in RabbitMQ\nDESCRIPTION: Sets the maximum size of the Write-Ahead Log (WAL) file before it is flushed to disk. Default value is 512 MiB.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nraft.wal_max_size_bytes = 64000000\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Node Name in rabbitmq-env.conf\nDESCRIPTION: Example configuration that changes the default node name prefix from 'rabbit' to 'hare'. Demonstrates basic rabbitmq-env.conf syntax including comments and environment variable assignment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-env.conf.5.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# I am a complete rabbitmq-env.conf file.\n# Comment lines start with a hash character.\n# This is a /bin/sh script file - use ordinary envt var syntax\nNODENAME=hare\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates Using tls-gen Tool in Bash\nDESCRIPTION: A sequence of commands that clone the tls-gen repository and use its basic profile to generate a CA certificate and server/client certificate pairs with a specified password for testing purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/tls-gen tls-gen\ncd tls-gen/basic\n# private key password\nmake PASSWORD=bunnies\nmake verify\nmake info\nls -l ./result\n```\n\n----------------------------------------\n\nTITLE: Example RabbitMQ Cluster Status Output in Kubernetes\nDESCRIPTION: Example YAML output showing the status conditions of a RabbitMQ cluster. The conditions indicate the readiness of pods, cluster availability, warnings, and reconciliation status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-operator.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nName:         test-rabbit\nNamespace:    rabbitmq-system\nAPI Version:  rabbitmq.com/v1beta1\nKind:         RabbitmqCluster\n...\nStatus:\n  Binding:\n    Name:  sample-default-user\n  Conditions:\n    Last Transition Time:  2023-07-07T11:57:10Z\n    Reason:                AllPodsAreReady\n    Status:                True\n    Type:                  AllReplicasReady # true when all RabbitMQ pods are 'ready'\n    Last Transition Time:  2023-07-07T11:57:10Z\n    Reason:                AtLeastOneEndpointAvailable\n    Status:                True\n    Type:                  ClusterAvailable # true when at least one RabbitMQ pod is 'ready'\n    Last Transition Time:  2023-07-07T11:55:58Z\n    Reason:                NoWarnings\n    Status:                True\n    Type:                  NoWarnings\n    Last Transition Time:  2023-07-07T11:57:11Z\n    Message:               Finish reconciling\n    Reason:                Success\n    Status:                True\n    Type:                  ReconcileSuccess\n...\n```\n\n----------------------------------------\n\nTITLE: Suspending Listeners Command\nDESCRIPTION: Command to temporarily suspend all listeners on a node to prevent new client connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl suspend_listeners\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket Connection for STOMP\nDESCRIPTION: JavaScript code to create a WebSocket connection and initialize a STOMP client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ws = new WebSocket('ws://127.0.0.1:15674/ws');\nvar client = Stomp.over(ws);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-node TLS Using a Separate TLS Option File on Linux\nDESCRIPTION: Configuration for rabbitmq-env.conf that uses the -ssl_dist_optfile flag to specify a separate TLS configuration file. This approach simplifies the command line arguments by moving TLS configuration details to a dedicated file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: the following path is system dependent and will change between Erlang\n#       versions\nERL_SSL_PATH=\"/usr/lib64/erlang/lib/ssl-9.4/ebin\"\n\n# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\n# -ssl_dist_optfile tells the runtime where to find its inter-node TLS configuration file\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH\n  -proto_dist inet_tls\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\"\n\nRABBITMQ_CTL_ERL_ARGS=\"-pa $ERL_SSL_PATH\n  -proto_dist inet_tls\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\"\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow Behavior Policy with rabbitmqctl on Windows\nDESCRIPTION: Windows-specific command for setting a 2-message limit with reject-publish overflow behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy my-pol \"^two-messages$\" ^\n  \"{\"\"max-length\"\":2,\"\"overflow\"\":\"\"reject-publish\"\"}\" ^\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: LDAP SNI Configuration\nDESCRIPTION: Sets Server Name Indication for LDAP TLS connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n# Sets Server Name Indication for LDAP connections.\n# If an LDAP server host is available via multiple domain names, set this value\n# to the preferred domain name target LDAP server\nauth_ldap.ssl_options.sni = ldap.identity.eng.megacorp.local\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol for RabbitMQ Web STOMP\nDESCRIPTION: Configuration to enable the proxy protocol for the Web STOMP plugin, allowing it to work behind load balancers that use this protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.proxy_protocol = true\n```\n\n----------------------------------------\n\nTITLE: Growing Queue Replicas in RabbitMQ\nDESCRIPTION: Command to add a new replica on a specified node for matching quorum queues. Supports selective growth using patterns for vhost and queue names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-queues.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues grow \"rabbit@newhost\" \"all\" --vhost-pattern \"a-vhost\" --queue-pattern \".*\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Back-off Policy for Connection Recovery in C#\nDESCRIPTION: Demonstrates how to set a custom back-off delay policy for automatic connection recovery in C#. This example uses a custom IBackOffDelayPolicy implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyBackOffDelay : IBackOffDelayPolicy {\n    ...\n}\n\nawait AmqpConnection.CreateAsync(\n    ConnectionSettingBuilder.Create().RecoveryConfiguration(\n    RecoveryConfiguration.Create()\n    .BackOffDelayPolicy(new MyBackOffDelay())).Build());\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Exchange\nDESCRIPTION: Shows how to create a direct exchange for routing messages\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nchannel.direct('logs');\n```\n\n----------------------------------------\n\nTITLE: Running the Consumer\nDESCRIPTION: Command to run the receive.exs script using Mix with expected output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive.exs\n# => [*] Waiting for messages. To exit press CTRL+C, CTRL+C\n# ...\n# => [x] Received Hello World!\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Syslog\nDESCRIPTION: Configuration for TLS-enabled Syslog output with certificate settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.transport = tls\nlog.syslog.protocol = rfc5424\n\nlog.syslog.ssl_options.cacertfile = /path/to/ca_certificate.pem\nlog.syslog.ssl_options.certfile = /path/to/client_certificate.pem\nlog.syslog.ssl_options.keyfile = /path/to/client_key.pem\n```\n\n----------------------------------------\n\nTITLE: Declaring an Exclusive Queue in Elixir\nDESCRIPTION: Creates an exclusive queue that will be automatically deleted when the connection closes. This is useful for temporary queues needed only for the duration of a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, \"\", exclusive: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scope Field in OAuth 2.0 Tokens for RabbitMQ\nDESCRIPTION: Configuration to use a different token field for scopes instead of the default 'scope' key. This is useful when working with OAuth providers that use custom scope field names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.additional_scopes_key = my_custom_scope_key\n```\n\n----------------------------------------\n\nTITLE: Defining AMQP URI Syntax using ABNF\nDESCRIPTION: This ABNF snippet defines the syntax rules for AMQP URIs, including the structure for authority, userinfo, username, password, and vhost components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-spec.md#2025-04-09_snippet_0\n\nLANGUAGE: ABNF\nCODE:\n```\namqp_URI       = \"amqp://\" amqp_authority [ \"/\" vhost ] [ \"?\" query ]\n\namqp_authority = [ amqp_userinfo \"@\" ] host [ \":\" port ]\n\namqp_userinfo  = username [ \":\" password ]\n\nusername       = *( unreserved / pct-encoded / sub-delims )\n\npassword       = *( unreserved / pct-encoded / sub-delims )\n\nvhost          = segment\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Peer Discovery\nDESCRIPTION: Initial configuration for AWS-based peer discovery showing how to specify the discovery backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\n# the backend can also be specified using its module name\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Network Partition Handling Options in HTML\nDESCRIPTION: This HTML snippet creates an unordered list to display the three main options for handling network partitions in RabbitMQ: 'ignore', 'pause_minority', and 'autoheal'. Each list item describes when to use the respective mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/partitions.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <code>ignore</code>: use when network reliability is the highest practically possible\n    and node availability is of topmost importance. For example, all cluster nodes can\n    be in the same rack or equivalent, connected with a switch, and that switch is also the route\n    to the outside world.\n  </li>\n  <li>\n    <code>pause_minority</code>: appropriate when clustering across racks or availability zones\n    in a single region, and the probability of losing a majority of nodes (zones) at\n    once is considered to be very low. This mode trades off some availability for\n    the ability to automatically recover if/when the lost node(s) come back.\n  </li>\n  <li>\n    <code>autoheal</code>: appropriate when are more concerned with continuity of service\n    than with data consistency across nodes.\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting User Limits\nDESCRIPTION: Configures connection and channel limits for specific users using JSON configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-connections\": 64}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-channels\": 16}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits limited_user 'max-connections'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Custom Scopes in Standard Scope Field\nDESCRIPTION: This JWT token example shows custom scopes in the standard 'scope' field. It includes 'api://rabbitmq:producer' and 'api://rabbitmq:Administrator' scopes that would be mapped to RabbitMQ permissions via scope aliases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"producer\",\n  \"scope\": [\n    \"api://rabbitmq:producer\",\n    \"api://rabbitmq:Administrator\"\n  ],\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Environment in YAML\nDESCRIPTION: Sets RabbitMQ environment configuration. The example sets the RABBITMQ_DISTRIBUTION_BUFFER_SIZE environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  rabbitmq:\n    envConfig: |\n      RABBITMQ_DISTRIBUTION_BUFFER_SIZE=some_value\n```\n\n----------------------------------------\n\nTITLE: Observer Interface\nDESCRIPTION: Command to start a CLI observer interface with configurable refresh interval\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics observer --interval 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Cluster Node Discovery\nDESCRIPTION: Configuration for classic peer discovery backend, specifying the list of nodes to contact for clustering on first boot.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Filtering in Java\nDESCRIPTION: Demonstrates how to configure stream filtering for a RabbitMQ consumer using the Java client library. It specifies filter values and sets the option to match unfiltered messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = connection.consumerBuilder()\n    .queue(\"some-stream\")\n    .stream() \n        .filterValues(\"invoices\", \"orders\") \n        .filterMatchUnfiltered(true) \n    .builder() \n    .messageHandler((context, message) -> {\n        // message processing\n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Installing Bunny Ruby Client for RabbitMQ\nDESCRIPTION: Installs the Bunny gem, which is the Ruby client for RabbitMQ, using Rubygems package manager.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install bunny --version \">= 2.13.0\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Credit Flow Grant Direction in RabbitMQ\nDESCRIPTION: This code snippet shows how credit is granted backward in the RabbitMQ processing chain. It demonstrates that the message store grants credit to the queue process, which then grants credit to the channel, which finally grants credit to the reader.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2015-10-06-new-credit-flow-settings-on-rabbitmq-3-5-5/index.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nreader <--[grant]-- channel <--[grant]-- queue process <--[grant]-- message store.\n```\n\n----------------------------------------\n\nTITLE: Generating CPU Flame Graph from perf Data with FlameGraph Tool\nDESCRIPTION: This command creates an SVG flame graph from folded stack samples. It sets the title for the graph and processes the stack trace data in out.folded_sched to generate a visual CPU flame graph.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./FlameGraph/flamegraph.pl --title=\"CPU Flame Graph\" out.folded_sched > cpu.svg\n```\n\n----------------------------------------\n\nTITLE: Encrypting Configuration Values with RabbitMQ CLI (Bash)\nDESCRIPTION: Demonstrates how to use the rabbitmqctl encode command to encrypt configuration values on Unix-like systems. It shows examples for encoding both Erlang binary and string values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode '\"amqp://fred:secret@host1.domain/my_vhost\"' mypassphrase\n{encrypted,<<\"... long encrypted value...\">>\n```\n\n----------------------------------------\n\nTITLE: Displaying MacOS Firewall Command Help\nDESCRIPTION: Command to show available options and arguments for the socketfilterfw utility, which may vary between MacOS releases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --help\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Transport for apt on Debian\nDESCRIPTION: Installs the apt-transport-https package to enable HTTPS transport for apt. This is necessary for downloading RabbitMQ and Erlang packages from secure repositories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apt-transport-https\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Publishers in RabbitMQ with bash\nDESCRIPTION: Command for displaying publisher information (connection PID, publisher ID, and stream) for RabbitMQ streams. This example shows how to retrieve specific publisher properties using the list_stream_publishers command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_publishers connection_pid publisher_id stream\n```\n\n----------------------------------------\n\nTITLE: Clearing Auth Backend Cache\nDESCRIPTION: Command to clear the authentication cache across all cluster nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_auth_backend_cache\n```\n\n----------------------------------------\n\nTITLE: Verifying the New RabbitMQ Signing Key Signature\nDESCRIPTION: Command to check if the new RabbitMQ nightly signing key is signed by the old key. This helps validate the authenticity of the key transition.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/static/key-transition-0x0697F46E2DF405B6.txt#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --check-sigs 0xD441A9DDBA058EF7\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Transport for apt on Debian\nDESCRIPTION: Installs the apt-transport-https package to enable HTTPS transport for apt. This is necessary for downloading RabbitMQ and Erlang packages from secure repositories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apt-transport-https\n```\n\n----------------------------------------\n\nTITLE: Configuring Global TLS Options for RabbitMQ Erlang Client (Erlang)\nDESCRIPTION: Example of configuring global TLS options for the RabbitMQ Erlang client using the advanced.config file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-query-parameters.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n{amqp_client, [\n    {ssl_options, [\n        {cacertfile, \"path-to-ca-certificate\"},\n        {certfile, \"path-to-certificate\"},\n        {keyfile, \"path-to-keyfile\"},\n        {verify, verify_peer}\n    ]}\n]}.\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Tools for Server Management\nDESCRIPTION: Examples of RabbitMQ CLI tools for monitoring and managing the server. These commands check connectivity, status, cluster membership, and configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Queue in Swift\nDESCRIPTION: Creates a non-durable, exclusive queue with a generated name using the RabbitMQ Swift client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-swift.md#2025-04-09_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nvar q = ch.queue(\"\", options: .exclusive)\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queue WAL Segment Size in RabbitMQ\nDESCRIPTION: Sets the maximum size of the write-ahead log (WAL) segment for quorum queues before it's flushed to disk. This affects how much message data can be kept in memory under steady load.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/persistence-conf.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Flush current WAL file to a segment file on disk once it reaches 32 MiB in size\nraft.wal_max_size_bytes = 32000000\n```\n\n----------------------------------------\n\nTITLE: Importing Server Certificate to Java Trust Store using keytool\nDESCRIPTION: This command imports a server certificate into a Java trust store using the keytool utility. The certificate is imported with the alias 'server1' into a keystore file named 'rabbitstore'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -import -alias server1 -file /path/to/server_certificate.pem -keystore /path/to/rabbitstore\n```\n\n----------------------------------------\n\nTITLE: Executing Stream Consumer in Java\nDESCRIPTION: Maven command to run a Java class that consumes messages from a RabbitMQ stream. The consumer demonstrates the ability to read messages with their metadata including creation time, content type, exchange, and routing key information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Interoperability$Consume'\n```\n\n----------------------------------------\n\nTITLE: Complete .NET RabbitMQ TLS Connection Example\nDESCRIPTION: Full example demonstrating TLS connection setup, queue operations, and proper connection handling using the RabbitMQ .NET client. Shows creation of secure channel and basic queue operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Text;\n\nusing RabbitMQ.client;\nusing RabbitMQ.Util;\n\nnamespace RabbitMQ.client.Examples {\n  public class TestSSL {\n    public static int Main(string[] args) {\n      ConnectionFactory cf = new ConnectionFactory();\n\n      cf.Ssl.Enabled = true;\n      cf.Ssl.ServerName = System.Net.Dns.GetHostName();\n      cf.Ssl.CertPath = \"/path/to/client_key.p12\";\n      cf.Ssl.CertPassphrase = \"MySecretPassword\";\n\n      using (IConnection conn = cf.CreateConnection()) {\n        using (IModel ch = conn.CreateModel()) {\n          Console.WriteLine(\"Successfully connected and opened a channel\");\n          ch.QueueDeclare(\"rabbitmq-dotnet-test\", false, false, false, null);\n          Console.WriteLine(\"Successfully declared a queue\");\n          ch.QueueDelete(\"rabbitmq-dotnet-test\");\n          Console.WriteLine(\"Successfully deleted the queue\");\n        }\n      }\n      return 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing RabbitMQ Service Logs\nDESCRIPTION: Commands for accessing and filtering RabbitMQ service logs using journalctl on systemd-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ HTTP API Listeners\nDESCRIPTION: Command to inspect configured HTTP API listeners using rabbitmq-diagnostics tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -s listeners\n# => Interface: [::], port: 15672, protocol: http, purpose: HTTP API\n# => Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\n```\n\n----------------------------------------\n\nTITLE: Initializing MQTT WebSocket Client\nDESCRIPTION: JavaScript code to initialize and configure the MQTT WebSocket client using the Paho library\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-mqtt.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar wsbroker = location.hostname;  // mqtt websocket enabled broker\nvar wsport = 15675; // port for above\nvar client = new Paho.MQTT.Client(wsbroker, wsport, \"/ws\",\n    \"myclientid_\" + parseInt(Math.random() * 100, 10));\nclient.onConnectionLost = function (responseObject) {\n    debug(\"CONNECTION LOST - \" + responseObject.errorMessage);\n};\nclient.onMessageArrived = function (message) {\n    debug(\"RECEIVE ON \" + message.destinationName + \" PAYLOAD \" + message.payloadString);\n    print_first(message.payloadString);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log File Name in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to override the default log file name in the rabbitmq.conf file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Disabling File Logging in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to deactivate logging to a file in the rabbitmq.conf file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Defining AMQP URI Syntax using ABNF\nDESCRIPTION: This ABNF snippet defines the syntax rules for AMQP URIs, including the structure for authority, userinfo, username, password, and vhost components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-spec.md#2025-04-09_snippet_0\n\nLANGUAGE: ABNF\nCODE:\n```\namqp_URI       = \"amqp://\" amqp_authority [ \"/\" vhost ] [ \"?\" query ]\n\namqp_authority = [ amqp_userinfo \"@\" ] host [ \":\" port ]\n\namqp_userinfo  = username [ \":\" password ]\n\nusername       = *( unreserved / pct-encoded / sub-delims )\n\npassword       = *( unreserved / pct-encoded / sub-delims )\n\nvhost          = segment\n```\n\n----------------------------------------\n\nTITLE: Custom Log Message Format without PID in RabbitMQ\nDESCRIPTION: Configuration for a custom log message format that omits process ID. This creates a more compact log format but removes information that can be essential for troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\n# '$time [$level] $pid $msg' is the default format\nlog.console.formatter.plaintext.format = $level $time $msg\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific Command in rabbitmqadmin\nDESCRIPTION: This example demonstrates how to get help for a specific command in rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin declare queue --help\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Tags for RabbitMQ Releases\nDESCRIPTION: Demonstrates how to list all version tags in a RabbitMQ repository using git tag command. This helps identify available release versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/github.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag\n# omitted for brevity\n# => v3.13.0\n# => v3.12.13\n# => v3.12.12\n```\n\n----------------------------------------\n\nTITLE: Configuring Cipher Suites in Classic Config Format for RabbitMQ\nDESCRIPTION: Example configuration for TLS cipher suites using the classic Erlang term config format in RabbitMQ. Shows how to specify allowed cipher suites with proper quotation marks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_38\n\nLANGUAGE: erlang\nCODE:\n```\n%% list allowed ciphers\n[\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                          {certfile,  \"/path/to/server_certificate.pem\"},\n                          {keyfile,   \"/path/to/server_key.pem\"},\n                          {versions, ['tlsv1.2', 'tlsv1.1']},\n                          %% This list is just an example!\n                          %% Not all cipher suites are available on all machines.\n                          %% Cipher suite order is important: preferred suites\n                          %% should be listed first.\n                          %% Different suites have different security and CPU load characteristics.\n                          {ciphers,  [\n                            \"ECDHE-ECDSA-AES256-GCM-SHA384\",\n                            \"ECDHE-RSA-AES256-GCM-SHA384\",\n                            \"ECDH-ECDSA-AES256-GCM-SHA384\",\n                            \"ECDH-RSA-AES256-GCM-SHA384\",\n                            \"DHE-RSA-AES256-GCM-SHA384\",\n                            \"DHE-DSS-AES256-GCM-SHA384\",\n                            \"ECDHE-ECDSA-AES128-GCM-SHA256\",\n                            \"ECDHE-RSA-AES128-GCM-SHA256\",\n                            \"ECDH-ECDSA-AES128-GCM-SHA256\",\n                            \"ECDH-RSA-AES128-GCM-SHA256\",\n                            \"DHE-RSA-AES128-GCM-SHA256\",\n                            \"DHE-DSS-AES128-GCM-SHA256\"\n                            ]}\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags via Environment Variable\nDESCRIPTION: Example of setting the RABBITMQ_FEATURE_FLAGS environment variable to specify which feature flags should be enabled when a new node starts for the first time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# this is just an example, in practice this list will be much longer\nRABBITMQ_FEATURE_FLAGS=quorum_queue,implicit_default_bindings\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Exchange in Java\nDESCRIPTION: Sets up a dead letter exchange for a queue using the Java client. Messages that expire or are dropped due to queue length limits will be sent to this exchange instead of being discarded completely.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nchannel.exchangeDeclare(\"some.exchange.name\", \"direct\");\n\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-dead-letter-exchange\", \"some.exchange.name\");\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Creating Shovel via HTTP API Request Body\nDESCRIPTION: JSON payload for creating a new shovel through the HTTP API, defining source and destination parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n{\n  \"value\": {\n    \"src-protocol\": \"amqp091\",\n    \"src-uri\":  \"amqp://localhost\",\n    \"src-queue\":  \"source-queue\",\n    \"dest-protocol\": \"amqp091\",\n    \"dest-uri\": \"amqp://remote.rabbitmq.local\",\n    \"dest-queue\": \"destination-queue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Heartbeat Configuration\nDESCRIPTION: Connection heartbeat timeout configuration\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nheartbeat = 60\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream in PowerShell\nDESCRIPTION: Command to set federation upstream parameters using rabbitmqctl in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream my-upstream `\n    '\"{\"\"uri\"\":\"\"amqps://target.hostname:5671?cacertfile=drive:\\path\\to\\ca_bundle.pem&certfile=drive:\\path\\to\\client_certificate.pem&keyfile=drive:\\path\\to\\client_key.pem&verify=verify_none\"\",\"\"expires\"\":3600000}\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring management plugin cache multiplier in RabbitMQ\nDESCRIPTION: Setting that affects caching duration for expensive management queries. The cache will multiply the elapsed query time by this value to determine the cache duration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.db_cache_multiplier = 5\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Queue Health in RabbitMQ\nDESCRIPTION: Command to verify if quorum queues will maintain their quorum if a node is shut down. Exits with non-zero code if quorum would be lost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_if_node_is_quorum_critical\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumers in RabbitMQ using CLI\nDESCRIPTION: This command lists all stream consumers in a virtual host, showing details such as connection PID, stream name, messages consumed, active status, and activity status.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmqctl list_stream_consumers \\\n  connection_pid,stream,messages_consumed,active,activity_status\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat Timeout in Java Client\nDESCRIPTION: This snippet demonstrates how to set the heartbeat timeout to 60 seconds using the Java client for RabbitMQ. It uses the ConnectionFactory class to configure the requested heartbeat value before creating a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/heartbeats.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\n\n// set the heartbeat timeout to 60 seconds\ncf.setRequestedHeartbeat(60);\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Dependencies for RabbitMQ\nDESCRIPTION: These commands update the package lists and install curl and gnupg, which are prerequisites for downloading signing keys and packages over HTTPS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\nsudo apt-get install curl gnupg -y\n```\n\n----------------------------------------\n\nTITLE: Using Double Hyphen to Separate Options from Positional Arguments\nDESCRIPTION: Example showing how to use the double hyphen (--) to explicitly separate options from positional arguments, ensuring values starting with hyphens are treated correctly.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ ERL_MAX_PORTS Value\nDESCRIPTION: Command to check the effective ERL_MAX_PORTS value of a RabbitMQ node using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'erlang:system_info(port_limit).'\n```\n\n----------------------------------------\n\nTITLE: Limiting Inter-node Communication to IPv4 Loopback\nDESCRIPTION: RabbitMQ configuration to restrict inter-node communication to the IPv4 loopback interface, suitable only for single-node deployments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# Limit inter-node communication listener to a local interface (using an IPv4 address).\n#\n# This particular configuration only makes sense for single-node clusters.\n# For multi-node clusters, nodes must listen on an \"internal network-local\" interface\n# that would allow cluster peers to connect but not be exposed to the public Internet\ndistribution.listener.interface = 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Event Stream Processing with jq\nDESCRIPTION: Command to consume internal events and process them through jq JSON processor.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Issuer in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to configure the OAuth 2.0 issuer URL in RabbitMQ using the INI format. It sets the resource server ID and the issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.issuer = https://my-idp-provider/somerealm\n```\n\n----------------------------------------\n\nTITLE: Managing Virtual Host Parameters via RabbitMQ HTTP API\nDESCRIPTION: HTTP API endpoints for setting, deleting, and retrieving virtual host-scoped parameters in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/parameters/{component_name}/{vhost}/{name}\nDELETE /api/parameters/{component_name}/{vhost}/{name}\nGET /api/parameters\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-diagnostics to Check Configuration Status\nDESCRIPTION: Command for using rabbitmq-diagnostics to verify the configuration files being used by a local RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# displays key\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Minimal JWT Token Structure for RabbitMQ\nDESCRIPTION: This shows the minimal JWT token structure that RabbitMQ can validate. It includes an empty standard scope array, a custom scope field with management tag, and the audience claim set to 'rabbitmq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scope\": [\n\n  ],\n  \"extra_scope\": [\n    \"rabbitmq.tag:management\"\n  ],\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Topic Permissions in RabbitMQ (Bash)\nDESCRIPTION: Removes topic permissions for a specific user on a given exchange in a virtual host. This command is used to revoke a user's access to publish or consume messages from a topic exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_topic_permissions -p my-vhost janeway amq.topic\n```\n\n----------------------------------------\n\nTITLE: Connecting to OpenSSL s_server with s_client\nDESCRIPTION: Command to connect to the OpenSSL s_server using s_client, specifying client certificates and verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect localhost:8443 \\\n  -cert client_certificate.pem -key client_key.pem -CAfile ca_certificate.pem \\\n  -verify 8 -verify_hostname CN_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for LDAP Connections in RabbitMQ (INI format)\nDESCRIPTION: This configuration snippet enables TLS for LDAP connections in RabbitMQ and disables peer verification for simplicity (not recommended for production).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\n# enables TLS for connections to the LDAP server\nauth_ldap.use_ssl   = true\n\n# Disables peer certificate chain verification. See the section on Peer Verification\n# below.\n#\n# Doing so loses one of the key benefits of TLS and make the setup less secure\n# but also simplifies node configuration.\nauth_ldap.ssl_options.verify = verify_none\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resources in RabbitMQ\nDESCRIPTION: Basic configuration for setting up two OAuth 2.0 resources (rabbit_prod and rabbit_dev) in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Broker Status\nDESCRIPTION: Shows detailed status information about the RabbitMQ broker, including running applications, versions, OS details, and resource statistics. The command uses the 'status' action without any additional parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl status\n```\n\n----------------------------------------\n\nTITLE: Disabling Virtual Host Protection from Deletion Using CLI\nDESCRIPTION: Command that removes the deletion protection from a RabbitMQ virtual host using the rabbitmqctl command line tool, allowing it to be deleted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n## removes virtual host deletion protection\nrabbitmqctl disable_vhost_protection_from_deletion \"vhost-name\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Backend Cache Configuration\nDESCRIPTION: Configuration example for caching HTTP backend authentication requests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = cache\nauth_cache.cached_backend = http\n\nauth_http.http_method = post\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues (Bash)\nDESCRIPTION: Uses rabbitmqctl to list queues, their types, and message counts. This command helps verify the number of messages published to the stream queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/rabbitmqctl list_queues name type messages --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Encryption Settings in advanced.config\nDESCRIPTION: Example of configuring custom encryption settings in RabbitMQ's advanced.config file, including cipher type, hash function, and iteration count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_56\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n      ...\n      {config_entry_decoder, [\n             {passphrase, \"mypassphrase\"},\n             {cipher, blowfish_cfb64},\n             {hash, sha256},\n             {iterations, 10000}\n         ]}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Breakdown Output Example\nDESCRIPTION: Example output from rabbitmq-diagnostics memory_breakdown command showing memory allocation across different categories including quorum queues, binary data, connections, and system components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nquorum_queue_procs: 0.4181 gb (28.8%)\nbinary: 0.4129 gb (28.44%)\nallocated_unused: 0.1959 gb (13.49%)\nconnection_other: 0.1894 gb (13.05%)\nplugins: 0.0373 gb (2.57%)\nother_proc: 0.0325 gb (2.24%)\ncode: 0.0305 gb (2.1%)\nquorum_ets: 0.0303 gb (2.09%)\nconnection_readers: 0.0222 gb (1.53%)\nother_system: 0.0209 gb (1.44%)\nconnection_channels: 0.017 gb (1.17%)\nmgmt_db: 0.017 gb (1.17%)\nmetrics: 0.0109 gb (0.75%)\nother_ets: 0.0073 gb (0.5%)\nconnection_writers: 0.007 gb (0.48%)\natom: 0.0015 gb (0.11%)\nmnesia: 0.0006 gb (0.04%)\nmsg_index: 0.0002 gb (0.01%)\nqueue_procs: 0.0002 gb (0.01%)\nreserved_unallocated: 0.0 gb (0.0%)\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues on Windows\nDESCRIPTION: Command to list RabbitMQ queues using rabbitmqctl tool on Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-ruby.md#2025-04-09_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_queues\n```\n\n----------------------------------------\n\nTITLE: Configuring message store file size limit in RabbitMQ (advanced)\nDESCRIPTION: Advanced configuration for message store segment file size. Changing this for a node with an existing database is dangerous and can lead to data loss.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_53\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n%% Changing this for a node\n%% with an existing (initialised) database is dangerous and can\n%% lead to data loss!\n{msg_store_file_size_limit, 16777216}\n]}\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Prometheus Plugin\nDESCRIPTION: Command to enable the rabbitmq_prometheus plugin for Prometheus-compatible metric collection. This plugin is recommended for production environments due to its low overhead.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_prometheus\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Dependencies for RabbitMQ\nDESCRIPTION: These commands update the package lists and install curl and gnupg, which are prerequisites for downloading signing keys and packages over HTTPS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\n\nsudo apt-get install curl gnupg -y\n```\n\n----------------------------------------\n\nTITLE: Increasing Atom Limit via Environment Variable\nDESCRIPTION: Alternative approach to increase the atom limit to 9 million using the environment variable for environments with large numbers of quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_MAX_NUMBER_OF_ATOMS=9000000\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel from AMQP 1.0 to AMQP 0.9.1\nDESCRIPTION: Configuration example for transferring messages from an AMQP 1.0 source to an AMQP 0.9.1 destination. Specifies connection parameters, message handling settings, and destination exchange declarations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n [ {shovels, [ {my_first_shovel,\n                [ {source,\n                   [ {protocol, amqp10},\n                     {uris, [ \"amqp://fred:secret@host1.domain/my_vhost\",\n                            ]},\n                     {source_address, <<\"my-source\">>},\n                     {prefetch_count, 10}\n                   ]},\n                  {destination,\n                     [ {protocol, amqp091},\n                       {uris, [\"amqp://\"]},\n                       {declarations, [ {'exchange.declare',\n                                         [ {exchange, <<\"my_direct\">>},\n                                           {type, <<\"direct\">>},\n                                           durable\n                                         ]}\n                                      ]},\n                       {publish_properties, [ {delivery_mode, 2} ]},\n                       {add_forward_headers, true},\n                       {publish_fields, [ {exchange, <<\"my_direct\">>},\n                                          {routing_key, <<\"from_shovel\">>}\n                                        ]}\n                     ]},\n                  {ack_mode, on_confirm},\n                  {reconnect_delay, 5}\n                ]}\n             ]}\n ]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Authentication and Authorization Backends in RabbitMQ\nDESCRIPTION: This example configures RabbitMQ to use the internal database for authentication and the source IP range backend for authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1.authn = internal\n# uses module name because this backend is from a 3rd party\nauth_backends.1.authz = rabbit_auth_backend_ip_range\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Host Queue Limits\nDESCRIPTION: Commands to set and manage queue limits for a virtual host\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-queues\": 1024}'\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level at Runtime in RabbitMQ\nDESCRIPTION: Command to switch to debug log level at runtime using rabbitmqctl. This allows changing log verbosity without restarting the service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@target-host set_log_level debug\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Queue Leader Information\nDESCRIPTION: This command lists the queues and their leaders using the RabbitMQ CLI tool. It's used to determine which node became the new leader after a change in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_8\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-1 -c rabbitmq -- rabbitmqctl list_queues --formatter=pretty_table --quiet name leader\n```\n\n----------------------------------------\n\nTITLE: Connection Authentication Log Example\nDESCRIPTION: Example log entry showing successful user authentication and virtual host access grant.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n2018-11-22 10:44:33.663 [info] <0.620.0> connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'\n```\n\n----------------------------------------\n\nTITLE: Setting Log Levels via RabbitMQ CLI\nDESCRIPTION: Command-line instructions for dynamically changing log levels in a running RabbitMQ instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@target-host set_log_level debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@target-host set_log_level info\n```\n\n----------------------------------------\n\nTITLE: Sample Retention Policy Configuration\nDESCRIPTION: Defines data retention policies for different types of statistics and time ranges\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.sample_retention_policies.global.minute  = 5\nmanagement.sample_retention_policies.global.hour    = 60\nmanagement.sample_retention_policies.global.day = 1200\n\nmanagement.sample_retention_policies.basic.minute = 5\nmanagement.sample_retention_policies.basic.hour   = 60\n\nmanagement.sample_retention_policies.detailed.10 = 5\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration File Location for a Specific Node\nDESCRIPTION: This bash command uses rabbitmq-diagnostics with the -n option to check the configuration file location for a specific RabbitMQ node, including remote nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status -n [node name]\n```\n\n----------------------------------------\n\nTITLE: Including MQTT WebSocket Client Library\nDESCRIPTION: HTML script tag to include the Paho MQTT JavaScript client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-mqtt.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- include the client library -->\n<script src=\"mqttws31.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Publishers with Different Targets in Java\nDESCRIPTION: Examples of creating publishers in Java with different target types: publishing to an exchange with a routing key, to an exchange without a routing key, and directly to a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n// publish to an exchange with a routing key\nPublisher publisher1 = connection.publisherBuilder()\n    .exchange(\"foo\").key(\"bar\") // /exchanges/foo/bar\n    .build();\n\n// publish to an exchange without a routing key\nPublisher publisher2 = connection.publisherBuilder()\n    .exchange(\"foo\") // /exchanges/foo\n    .build();\n\n// publish to a queue\nPublisher publisher3 = connection.publisherBuilder()\n    .queue(\"some-queue\") // /queues/some-queue\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Status for a Specific RabbitMQ Node\nDESCRIPTION: Command for using rabbitmq-diagnostics to check the configuration status of a specific node, including remote nodes, using the -n switch.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status -n [node name]\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Service Address for RabbitMQ Consul Peer Discovery\nDESCRIPTION: Sets a static service address to be registered with Consul instead of auto-computing it. This allows explicit control over how RabbitMQ nodes are discovered by peers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do not compute service address, it will be specified below\ncluster_formation.consul.svc_addr_auto = false\n# service address, will be communicated to other nodes\ncluster_formation.consul.svc_addr = hostname1.rmq.eng.example.local\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Producer with OAuth Client\nDESCRIPTION: This command starts a PerfTest producer application authenticated using the OAuth client 'producer_with_roles', which has permissions mapped from custom scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer PRODUCER=producer_with_roles\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for RabbitMQ Development\nDESCRIPTION: Shows how to create a new feature branch using Git checkout. The branch naming convention follows 'repository-name-NN' pattern where NN is the GitHub issue number.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/github.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Calculation Strategy in RabbitMQ\nDESCRIPTION: Default configuration for memory usage reporting strategy, which determines how memory consumption is calculated.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = rss\n```\n\n----------------------------------------\n\nTITLE: LDAP Other Bind in Classic Config Format\nDESCRIPTION: Example of setting LDAP other bind configuration using classic configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    {other_bind, {\"a-username\", \"a-password\"}}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting AMQP 1.0 Application Properties\nDESCRIPTION: Adds custom application properties when republishing messages in AMQP 1.0.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\n{application_properties, [\n  {<<\"application-key-1\">>, <<\"value-1\">>},\n  {<<\"application-key-2\">>, <<\"value-2\">>}\n]}\n```\n\n----------------------------------------\n\nTITLE: Setting mirroring synchronization batch size in RabbitMQ\nDESCRIPTION: Configuration for the batch size used to transfer messages to an unsynchronized replica (queue mirror) during eager batch synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\nmirroring_sync_batch_size = 4096\n```\n\n----------------------------------------\n\nTITLE: Expanded Form of Do-Notation\nDESCRIPTION: The expanded form of the do-notation, showing how it's transformed into nested monadic bind operations with function composition, giving the monad complete control over execution flow.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\nMonad:'>>='(foo(),\n            fun (A) -> Monad:'>>='(bar(A, dog),\n                                    fun (B) -> ok end)).\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection with TLS and Disabled Peer Verification (INI)\nDESCRIPTION: Example of a RabbitMQ connection URI with TLS enabled but peer verification disabled, specifying certificate files and server name indication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-query-parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\namqps://myhost?cacertfile=/path/to/ca_certificate.pem\n  &certfile=/path/to/client_certificate.pem\n  &keyfile=/path/to/client_key.pem\n  &verify=verify_none\n  &server_name_indication=myhost\n```\n\n----------------------------------------\n\nTITLE: Formatting Feature Flags Output with Pretty Tables\nDESCRIPTION: Shows how to improve the readability of feature flag information by using the pretty_table formatter and selecting specific columns to display.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter pretty_table list_feature_flags \\\n  name state provided_by desc doc_url\n```\n\n----------------------------------------\n\nTITLE: Declaring Feature Flag in Erlang\nDESCRIPTION: Example of how to declare a feature flag as a module attribute for quorum queues, including description, documentation URL, stability status and migration function reference.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n-rabbit_feature_flag(\n   {quorum_queue,\n    #{desc          => \"Support queues of type quorum\",\n      doc_url       => \"https://www.rabbitmq.com/docs/quorum-queues\",\n      stability     => stable,\n      migration_fun => {?MODULE, quorum_queue_migration}\n     }}).\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow Behavior Policy with rabbitmqctl (Bash)\nDESCRIPTION: This command sets a policy named 'my-pol' that limits the 'two-messages' queue to 2 messages and sets the overflow behavior to reject new publishes using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/maxlength/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy my-pol \"^two-messages$\" \\\n  '{\"max-length\":2,\"overflow\":\"reject-publish\"}' \\\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Handling Positional Arguments That Start with Hyphens\nDESCRIPTION: Example showing how to handle special cases where positional arguments (like passwords) start with hyphens or double hyphens, using the explicit positional argument separator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"--!a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Exploring Commands in a Specific Group\nDESCRIPTION: Demonstrates how to get help for commands within a specific command group. This helps users understand what operations are available in each category.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin {group name} help\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Server as a System Service on Linux with systemctl\nDESCRIPTION: Command to enable the RabbitMQ server as a system service that automatically starts at boot time. This must be run with administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth 2.0 Provider Configuration in RabbitMQ\nDESCRIPTION: This shows the standard configuration for a single OAuth 2.0 provider in RabbitMQ, specifying the resource server ID, scope prefix, issuer URL, and TLS certificate location for secure connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.https.cacertfile = /opts/certs/prodcacert.pem\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth2\nDESCRIPTION: Command to start RabbitMQ with OAuth2 authentication mode enabled\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMODE=oauth2-proxy make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ User\nDESCRIPTION: Command to create a new non-administrative user in RabbitMQ with a specified username and password.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user janeway changeit\n```\n\n----------------------------------------\n\nTITLE: Resource Access Query Example\nDESCRIPTION: Example of a complex resource access query using boolean operations to control access based on username and object name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_38\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {'or',\n  [{'and',\n    [{equals, \"${name}\", \"test1\"},\n     {equals, \"${username}\", \"user1\"}]},\n   {'and',\n    [{equals, \"${name}\", \"test2\"},\n     {'not', {equals, \"${username}\", \"user1\"}}]}\n  ]}}\n```\n\n----------------------------------------\n\nTITLE: Handling Returned Messages in RabbitMQ Erlang Client\nDESCRIPTION: Example of handling undeliverable messages that are returned by the broker. This is useful for messages published with immediate or mandatory flags that couldn't be routed to any queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_25\n\nLANGUAGE: erlang\nCODE:\n```\namqp_channel:register_return_handler(Channel, self()),\namqp_channel:call(Channel, #'exchange.declare'{exchange = X}),\nPublish = #'basic.publish'{exchange = X, routing_key = SomeKey,\n                          mandatory = true},\namqp_channel:call(Channel, Publish, #amqp_msg{payload = Payload}),\nreceive\n    {BasicReturn, Content} ->\n        #'basic.return'{reply_text = <<\"unroutable\">>, exchange = X} = BasicReturn\n        %% Do something with the returned message\nend\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ Listeners with rabbitmqctl\nDESCRIPTION: Commands to suspend and resume listener connections on RabbitMQ nodes. Shows how to target specific nodes in a cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# suspends listeners on node rabbit@node2.cluster.rabbitmq.svc: it won't accept any new client connections\nrabbitmqctl suspend_listeners -n rabbit@node2.cluster.rabbitmq.svc\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl resume_listeners\n```\n\nLANGUAGE: bash\nCODE:\n```\n# resumes listeners on node rabbit@node2.cluster.rabbitmq.svc: it will accept new client connections again\nrabbitmqctl resume_listeners -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Default Account Configuration\nDESCRIPTION: Default virtual host and user account settings\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\ndefault_vhost = /\n```\n\nLANGUAGE: ini\nCODE:\n```\ndefault_user = guest\n```\n\nLANGUAGE: ini\nCODE:\n```\ndefault_pass = guest\n```\n\nLANGUAGE: ini\nCODE:\n```\ndefault_user_tags.administrator = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Default User Tags in RabbitMQ (INI)\nDESCRIPTION: Default tags for the default user, granting administrator privileges by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\ndefault_user_tags.administrator = true\n```\n\n----------------------------------------\n\nTITLE: Setting Memory High Watermark in RabbitMQ\nDESCRIPTION: This command sets the memory high watermark to 0, effectively blocking all publishing in a RabbitMQ cluster by triggering a resource alarm.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/publishers/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0\n```\n\n----------------------------------------\n\nTITLE: Declaring Exchanges and Queues with Alternate Exchange in Java\nDESCRIPTION: This Java code snippet demonstrates how to declare exchanges and queues with an Alternate Exchange. It creates a direct exchange 'my-direct' with an AE 'my-ae', declares 'my-ae' as a fanout exchange, and sets up queues and bindings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ae.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"alternate-exchange\", \"my-ae\");\nchannel.exchangeDeclare(\"my-direct\", \"direct\", false, false, args);\nchannel.exchangeDeclare(\"my-ae\", \"fanout\");\nchannel.queueDeclare(\"routed\");\nchannel.queueBind(\"routed\", \"my-direct\", \"key1\");\nchannel.queueDeclare(\"unrouted\");\nchannel.queueBind(\"unrouted\", \"my-ae\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Policy on Windows\nDESCRIPTION: Windows-specific command to set a queue size limit policy using rabbitmqctl.bat. Sets 1MiB limit with proper Windows command escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/maxlength/index.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy my-pol \"^one-meg$\" ^\n  \"{\"\"max-length-bytes\"\":1048576}\" ^\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Signatures with GPG\nDESCRIPTION: Command to verify a RabbitMQ package signature using GPG. This requires the signature file (.asc) and the corresponding package file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify [filename].asc [filename]\n```\n\n----------------------------------------\n\nTITLE: Federation Status Check Commands\nDESCRIPTION: Commands to check federation status and policy application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_exchanges name policy | grep federate-me\n\n# This command will be available only if federation plugin is enabled\nrabbitmqctl federation_status\n```\n\n----------------------------------------\n\nTITLE: Adding Erlando Parse Transformers in Erlang Module\nDESCRIPTION: Shows how to add the necessary -compile attributes to enable Erlando's parse transformers in an Erlang module.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n-module(test).\n-compile({parse_transform, cut}).\n-compile({parse_transform, do}).\n```\n\n----------------------------------------\n\nTITLE: Setting cluster keepalive interval in RabbitMQ\nDESCRIPTION: Configuration for how frequently nodes should send keepalive messages to other nodes in milliseconds. This is distinct from net_ticktime.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\ncluster_keepalive_interval = 10000\n```\n\n----------------------------------------\n\nTITLE: Allowing Basic Authentication Alongside OAuth 2.0 for RabbitMQ Management UI (INI)\nDESCRIPTION: Configuration to allow both OAuth 2.0 and Basic Authentication in the RabbitMQ management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_disable_basic_auth = false\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration for MQTT Benchmarks\nDESCRIPTION: Configuration file (rabbitmq.conf) used for the MQTT latency and throughput benchmarks. It includes settings for MQTT and classic queue optimization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-21-native-mqtt/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.mailbox_soft_limit = 0\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.sndbuf = 87380\nmqtt.tcp_listen_options.recbuf = 87380\nmqtt.tcp_listen_options.buffer = 87380\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Connection to RabbitMQ Node\nDESCRIPTION: Command to test TLS connection establishment directly with a RabbitMQ node on port 5671.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect localhost:5671 -cert client_certificate.pem -key client_key.pem -CAfile ca_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Setting Login Session Timeout for RabbitMQ Management UI\nDESCRIPTION: Configuration to set the login session timeout for the RabbitMQ Management UI. The value in minutes controls how long a user stays logged in before being automatically signed out.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.login_session_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: Reinstalling RabbitMQ Homebrew Formula\nDESCRIPTION: Sequence of commands to completely uninstall and reinstall RabbitMQ using Homebrew, including removal of data directories and configuration files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop rabbitmq\n\nbrew uninstall rabbitmq\n\n# Now delete all node's data directories and configuration files.\n# This assumes that Homebrew root is at /opt/homebrew\nrm -rf /opt/homebrew/etc/rabbitmq/\nrm -rf /opt/homebrew/opt/rabbitmq/\nrm -rf /opt/homebrew/var/lib/rabbitmq/\n# the launch agent file\nrm -f $HOME/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist\n\n# re-install\nbrew install rabbitmq\n\n## start the service if necessary\n# brew services start rabbitmq\n\n## after starting the service, enable all feature flags\n# /opt/homebrew/sbin/rabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Federation Status Check Commands\nDESCRIPTION: Commands to check federation status and policy application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_exchanges name policy | grep federate-me\n\n# This command will be available only if federation plugin is enabled\nrabbitmqctl federation_status\n```\n\n----------------------------------------\n\nTITLE: Connection States for MQTT Connections\nDESCRIPTION: Possible connection states for MQTT connections that can be returned by the list_mqtt_connections command when querying connection_state information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_74\n\nLANGUAGE: plaintext\nCODE:\n```\nstarting\nrunning\nblocked\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository for Debian Bookworm\nDESCRIPTION: This bash script adds the RabbitMQ and Erlang package repositories to the apt sources list for Debian Bookworm. It includes both primary and redundant mirror URLs for improved availability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in PowerShell\nDESCRIPTION: Incomplete PowerShell command snippet for setting up federation upstream parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# target.hostname is just an example, replace it with a URI\n# of the target node (usually a member of a remote node/cluster,\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ Stream Connections\nDESCRIPTION: Configures TLS for RabbitMQ Stream connections by specifying certificate files, verification settings, and creating both standard TCP and TLS listeners on different ports.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.cacertfile = /path/to/tls/ca_certificate.pem\nssl_options.certfile   = /path/to/tls/server_certificate.pem\nssl_options.keyfile    = /path/to/tls/server_key.pem\nssl_options.verify     =  verify_peer\nssl_options.fail_if_no_peer_cert = true\n\nstream.listeners.tcp.1 = 5552\n# default TLS-enabled port for stream connections\nstream.listeners.ssl.1 = 5551\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ User\nDESCRIPTION: Command to create a new non-administrative user in RabbitMQ with a specified username and password.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user janeway changeit\n```\n\n----------------------------------------\n\nTITLE: Logging Successful Authentication and Virtual Host Access in RabbitMQ\nDESCRIPTION: Example log entry for successful user authentication and virtual host access grant.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-11-22 10:44:33.663 [info] <0.620.0> connection <0.620.0> (127.0.0.1:52771 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Connection Information via HTTP API\nDESCRIPTION: Endpoints for retrieving information about connections to RabbitMQ. These provide similar data to the rabbitmqctl list_connections command but with node instead of pid field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_33\n\nLANGUAGE: http\nCODE:\n```\n/api/connections\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/connections/(name)\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/connections/(name)/channels\n```\n\n----------------------------------------\n\nTITLE: Verifying File Descriptor Limits for RabbitMQ Process\nDESCRIPTION: This bash command displays the effective limits of a running RabbitMQ process. It requires the process ID of the Erlang VM running RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/$RABBITMQ_BEAM_PROCESS_PID/limits\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Frame Type for RabbitMQ Web STOMP\nDESCRIPTION: Configuration to switch the WebSocket endpoint from the default UTF-8 text mode to binary mode for handling binary messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ws_frame = binary\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced TLS Options for Web STOMP\nDESCRIPTION: INI configuration for advanced TLS options, including cipher suites and TLS versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ssl.port       = 15673\nweb_stomp.ssl.backlog    = 1024\nweb_stomp.ssl.certfile   = /path/to/server_certificate.pem\nweb_stomp.ssl.keyfile    = /path/to/server_key.pem\nweb_stomp.ssl.cacertfile = /path/to/ca_certificate_bundle.pem\nweb_stomp.ssl.password   = changeme\n\nweb_stomp.ssl.honor_cipher_order   = true\nweb_stomp.ssl.honor_ecc_order      = true\nweb_stomp.ssl.client_renegotiation = false\nweb_stomp.ssl.secure_renegotiate   = true\n\nweb_stomp.ssl.versions.1 = tlsv1.2\nweb_stomp.ssl.versions.2 = tlsv1.1\nweb_stomp.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\nweb_stomp.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\nweb_stomp.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\nweb_stomp.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\nweb_stomp.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\nweb_stomp.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n```\n\n----------------------------------------\n\nTITLE: Creating Publishers with Different Targets in Go\nDESCRIPTION: Examples of creating publishers in Go with different target types: publishing to an exchange with a routing key, to an exchange without a routing key, and directly to a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\n// publish to an exchange with a routing key\npublisher, err := connection.NewPublisher(context.Background(), &ExchangeAddress{\n            Exchange: \"foo\",\n            Key:      \"bar\",\n        }, nil)\n\n\n// publish to an exchange without a routing key\npublisher, err := connection.NewPublisher(context.Background(), &ExchangeAddress{\n            Exchange: \"foo\",\n        }, nil)\n    \n\n// publish to a queue\npublisher, err := connection.NewPublisher(context.Background(), &QueueAddress{\n    Queue: \"some-queue\"}, \n    nil)\n        \n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Server Version Component in JSX\nDESCRIPTION: This code snippet imports the RabbitMQServerVersion component from a specific path. This component is likely used to display the current RabbitMQ server version dynamically in the documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/whats-new.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  RabbitMQServerVersion,\n} from '@site/src/components/RabbitMQServer';\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Memory High Watermark in RabbitMQ (INI)\nDESCRIPTION: Default relative memory high watermark setting, which triggers flow control when the process uses more than 60% of available RAM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.relative = 0.6\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues on Windows\nDESCRIPTION: Command to list all queues in RabbitMQ on Windows systems using the rabbitmqctl.bat script. Note that sudo is not used on Windows platforms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete RabbitMQ LDAP Authentication in Classic Format\nDESCRIPTION: Complete classic configuration format example that combines both authentication and authorization settings in a single file. This includes server connection, access queries, and permission rules.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_29\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},\n  {rabbitmq_auth_backend_ldap,\n   [ {servers,               [\"my-ldap-server\"]},\n     {user_dn_pattern,       \"cn=${username},ou=People,dc=example,dc=com\"},\n     {use_ssl,               false},\n     {port,                  389},\n     {log,                   false},\n     {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}\n            ]\n     }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n   ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Server Version Component in JSX\nDESCRIPTION: This code snippet imports the RabbitMQServerVersion component from a specific path. This component is likely used to display the current RabbitMQ server version dynamically in the documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/whats-new.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  RabbitMQServerVersion,\n} from '@site/src/components/RabbitMQServer';\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Queue Size Check with rabbitmqctl\nDESCRIPTION: Bash command for listing queues after running the benchmark, showing the different message counts in classic and quorum queues between AMQP 0.9.1 and AMQP 1.0 protocols. This demonstrates how AMQP 1.0's link-level flow control allows higher throughput to faster queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/rabbitmqctl --silent list_queues name type messages --formatter=pretty_table\n┌────────────────────────┬─────────┬──────────┐\n│ name                   │ type    │ messages │\n├────────────────────────┼─────────┼──────────┤\n│ classic-queue-amqp-091 │ classic │ 159077   │\n├────────────────────────┼─────────┼──────────┤\n│ quorum-queue-amqp-091  │ quorum  │ 155782   │\n├────────────────────────┼─────────┼──────────┤\n│ classic-queue-amqp-10  │ classic │ 1089075  │\n├────────────────────────┼─────────┼──────────┤\n│ quorum-queue-amqp-10   │ quorum  │ 148580   │\n└────────────────────────┴─────────┴──────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Producer with Filter Value in Java\nDESCRIPTION: Example showing how to configure a RabbitMQ stream producer with filter value extraction logic using the stream Java client. The filter value is extracted from the message's application properties.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-24-stream-filtering-internals/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment.producerBuilder()\n  .stream(\"invoices\")\n  .filterValue(msg -> msg.getApplicationProperties().get(\"region\").toString())  \n  .build();\n```\n\n----------------------------------------\n\nTITLE: Specifying RabbitMQ Exchange Prefix Rule\nDESCRIPTION: Describes the rule for exchange names in RabbitMQ, where exchanges with the 'amq.' prefix cannot be declared or deleted, as per AMQP 0-9-1 specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/spec-differences.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\namq.\n```\n\n----------------------------------------\n\nTITLE: Setting Soft File Descriptor Limit for RabbitMQ on Linux\nDESCRIPTION: This command sets the soft file descriptor limit to 4096 for the RabbitMQ server process. It should be added to the /etc/default/rabbitmq-server file or rabbitmq-env.conf to be applied before the service starts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 4096\n```\n\n----------------------------------------\n\nTITLE: Starting the amqp_client Erlang Application\nDESCRIPTION: Ensures that the amqp_client Erlang application is started. This must be done before attempting to use any functionality from the RabbitMQ Erlang client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\napplication:ensure_started(amqp_client).\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Certificate Authentication for STOMP\nDESCRIPTION: Configuration to enable authentication using TLS client certificates for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nstomp.ssl_cert_login = true\n```\n\n----------------------------------------\n\nTITLE: Applying Pod Disruption Budget Configuration\nDESCRIPTION: Bash command to apply the PodDisruptionBudget configuration to a Kubernetes cluster using kubectl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f rabbitmq-pdb.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in RabbitMQ (Bash and PowerShell)\nDESCRIPTION: This snippet shows how to delete a user in RabbitMQ using the rabbitmqctl command in both Bash and PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user 'username'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat delete_user 'username'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Migration Function for RabbitMQ Feature Flags in Erlang\nDESCRIPTION: This code snippet shows the implementation of a migration function for a RabbitMQ feature flag. It handles both the enable and is_enabled cases, performing necessary table migrations and checks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\nquorum_queue_migration(FeatureName, _FeatureProps, enable) ->\n    Tables = ?quorum_queue_tables,\n    rabbit_table:wait(Tables),\n    Fields = amqqueue:fields(amqqueue_v2),\n    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);\nquorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->\n    Tables = ?quorum_queue_tables,\n    rabbit_table:wait(Tables),\n    Fields = amqqueue:fields(amqqueue_v2),\n    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso\n    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Quorum Queues with perf-test in High Throughput Scenario\nDESCRIPTION: Shell command using perf-test to benchmark quorum queues performance with multiple message sizes. Similar configuration to classic queues test but using the quorum queue type option.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# quorum queues\nperf-test --producers 2 --consumers 2 --confirm 3000 --multi-ack-every 3000 --qos 3000 \\\n          --variable-size 10:900 --variable-size 100:900 --variable-size 1000:900 --variable-size 5000:900 \\\n          --quorum-queue --queue qq\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled RabbitMQ Plugins\nDESCRIPTION: Lists all implicitly or explicitly enabled plugins containing 'rabbit' in their name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -e rabbit\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Hosts in RabbitMQ (Bash)\nDESCRIPTION: Health check that verifies if all virtual hosts are running in the target node. This command is useful for ensuring the proper functioning of all configured virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_virtual_hosts --timeout 60\n```\n\n----------------------------------------\n\nTITLE: Advanced OAuth 2.0 Provider Configuration in RabbitMQ\nDESCRIPTION: This demonstrates how to configure an OAuth 2.0 provider using the oauth_providers configuration structure, which is more suitable when supporting multiple providers or advanced configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.default_oauth_provider = prodkeycloak\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /opts/certs/prodcacert.pem\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Docker Container with Okta Configuration\nDESCRIPTION: Commands to start a RabbitMQ Docker container configured to use Okta for OAuth 2.0 authentication. The MODE environment variable is set to 'okta' before running the container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-okta.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=okta\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameter with Object Value in RabbitMQ API\nDESCRIPTION: JSON payload for setting a global runtime parameter with an object value. This example sets cluster tags with environment, availability zone, and region information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cluster_tags\",\n  \"value\": {\n    \"environment\": \"production\",\n    \"az\": \"us-east-3\",\n    \"region\": \"us-east\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding RabbitMQ Cluster Service Name in Kubernetes\nDESCRIPTION: Command to retrieve the service name and namespace for a RabbitMQ cluster from the custom resource status. This information is needed to connect applications to the RabbitMQ service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get rabbitmqcluster INSTANCE \\\n-ojsonpath='Name: {.status.admin.serviceReference.name} -- Namespace: {.status.admin.serviceReference.namespace}'\n```\n\n----------------------------------------\n\nTITLE: Federation Status Example Output\nDESCRIPTION: Example output from the federation_status command showing a federated exchange with its complete status information, including the type, name, vhost, connection details, and timestamp of the last status update.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# This command will be available only if federation plugin is enabled\nrabbitmqctl federation_status\n# => [[{type,<<\"exchange\">>},\n# =>   {name,<<\"my-exchange\">>},\n# =>   {vhost,<<\"/\">>},\n# =>   {connection,<<\"upstream-server\">>},\n# =>   {upstream_name,<<\"my-upstream-x\">>},\n# =>   {status,{running,<<\"<rabbit@my-server.1.281.0>\">>}},\n# =>   {timestamp,{{2020,3,1},{12,3,28}}}]]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Saving RabbitMQ Logs to File in Bash\nDESCRIPTION: Command to run the receive_logs.go program and redirect its output to a log file. This demonstrates how to capture RabbitMQ messages in a file for later review.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive_logs.go &> logs_from_rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Complete Classic Config Format TCP Settings\nDESCRIPTION: Comprehensive TCP configuration using the classic Erlang terms format, including kernel and rabbit application settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_27\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [\n    {inet_default_connect_options, [{nodelay, true}]},\n    {inet_default_listen_options,  [{nodelay, true}]}\n  ]},\n  {rabbit, [\n    {tcp_listen_options, [\n                          {backlog,       4096},\n                          {nodelay,       true},\n                          {linger,        {true,0}},\n                          {exit_on_close, false}\n                         ]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting kernel parameters dynamically with sysctl for RabbitMQ\nDESCRIPTION: This command demonstrates how to set Linux kernel parameters interactively using sysctl to increase the maximum number of file handles, which is important for systems handling many connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w fs.file-max 200000\n```\n\n----------------------------------------\n\nTITLE: Adding a Stream Replica using RabbitMQ CLI\nDESCRIPTION: This command adds a new replica to a specified stream on a given node. It requires the virtual host, stream name, and target node as parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_replica [-p <vhost>] <stream-name> <node>\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity-Provider Initiated Logon for OAuth\nDESCRIPTION: Configuration for Identity-Provider initiated logon to allow users to be automatically redirected to RabbitMQ without additional authentication flows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_provider_url = https://my-web-portal\n```\n\n----------------------------------------\n\nTITLE: Restarting a Stream in RabbitMQ using Bash\nDESCRIPTION: This command restarts a stream including all of its replicas. It allows specifying a preferred leader node during the restart. The stream name, virtual host, and preferred leader node are required parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams restart_stream --vhost \"a-vhost\" \"a-stream\" --preferred-leader-node \"node\"\n```\n\n----------------------------------------\n\nTITLE: Traditional State Management in Erlang\nDESCRIPTION: This snippet demonstrates the traditional way of managing state in Erlang, which involves incrementally numbering variables. This approach can be cumbersome and error-prone when adding or removing lines of code.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_23\n\nLANGUAGE: erlang\nCODE:\n```\nState1 = init(Dimensions),\nState2 = plant_seeds(SeedCount, State1),\n{DidFlood, State3} = pour_on_water(WaterVolume, State2),\nState4 = apply_sunlight(Time, State3),\n{DidFlood2, State5} = pour_on_water(WaterVolume, State4),\n{Crop, State6} = harvest(State5),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Log Entry for Missing RabbitMQ Configuration File\nDESCRIPTION: This snippet demonstrates the log entry when RabbitMQ cannot find or read the specified configuration file. It shows the node name, home directory, and the missing config file path.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nnode           : rabbit@example\nhome dir       : /var/lib/rabbitmq\nconfig file(s) : /var/lib/rabbitmq/hare.conf (not found)\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity-Provider Initiated Logon in RabbitMQ Management UI\nDESCRIPTION: Configuration example showing how to set up Identity-Provider initiated logon in the RabbitMQ Management UI. This configuration enables OAuth 2.0 authentication and configures it to use idp_initiated flow type with a specific provider URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = idp_initiated\nmanagement.oauth_provider_url = https://my-web-portal\n```\n\n----------------------------------------\n\nTITLE: Handling RabbitMQ Publisher Confirms with a Linked List in C#\nDESCRIPTION: This code shows how to track outbound messages with a linked list and handle confirms, nacks, and returns. It demonstrates cleaning the list and logging warnings for nack-ed or returned messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar outstandingConfirms = new ConcurrentDictionary<ulong, string>();\n\nvoid HandleAck(ulong sequenceNumber, bool multiple)\n{\n    if (multiple)\n    {\n        var confirmed = outstandingConfirms.Where(k => k.Key <= sequenceNumber);\n        foreach (var entry in confirmed)\n        {\n            outstandingConfirms.TryRemove(entry.Key, out _);\n        }\n    }\n    else\n    {\n        outstandingConfirms.TryRemove(sequenceNumber, out _);\n    }\n}\n\nvoid HandleNack(ulong sequenceNumber, bool multiple)\n{\n    if (multiple)\n    {\n        var nacked = outstandingConfirms.Where(k => k.Key <= sequenceNumber);\n        foreach (var entry in nacked)\n        {\n            outstandingConfirms.TryRemove(entry.Key, out string body);\n            Console.WriteLine($\"[WARNING] message {body} has been nack-ed. Sequence number: {sequenceNumber}, multiple: {multiple}\");\n        }\n    }\n    else\n    {\n        outstandingConfirms.TryRemove(sequenceNumber, out string body);\n        Console.WriteLine($\"[WARNING] message {body} has been nack-ed. Sequence number: {sequenceNumber}, multiple: {multiple}\");\n    }\n    HandleAck(sequenceNumber, multiple);\n}\n\nvoid HandleReturn(ushort replyCode, string replyText, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory<byte> body)\n{\n    Console.WriteLine($\"[WARNING] message {sequenceNumber} has been basic.return-ed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Memory Threshold on Running Node\nDESCRIPTION: Commands to update memory threshold on a running RabbitMQ node without requiring a restart. These changes remain in effect until the node stops unless also updated in the configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark <fraction>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark absolute <em><memory_limit></em>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0.7\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark absolute \"4G\"\n```\n\n----------------------------------------\n\nTITLE: Configuring APT Repository for RabbitMQ on Debian Bullseye\nDESCRIPTION: This bash script configures the APT repository for installing RabbitMQ and Erlang on Debian Bullseye. It adds the necessary repository sources for both RabbitMQ server and Erlang packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Broker with Custom Node Name\nDESCRIPTION: Command to run RabbitMQ broker with a custom Erlang node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/build-server.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker RABBITMQ_NODENAME=rmq\n```\n\n----------------------------------------\n\nTITLE: Consul Service Metadata Configuration\nDESCRIPTION: Configuration for adding metadata to RabbitMQ service registration in Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\n# Define metadata for the RabbitMQ service. Both keys and values have a\n# maximum length limit enforced by Consul. This can be used to provide additional\n# context about the service (RabbitMQ cluster) for operators or other tools.\ncluster_formation.consul.svc_meta.owner = team-xyz\ncluster_formation.consul.svc_meta.service = service-one\ncluster_formation.consul.svc_meta.stats_url = https://service-one.eng.megacorp.local/stats/\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host with Default Queue Type and Tags\nDESCRIPTION: Creates a virtual host with a description, default queue type set to 'quorum', and multiple tags. This example demonstrates how to add tags to categorize virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost qa1 --description \"QA environment 1\" --default-queue-type quorum --tags qa,project-a\n```\n\n----------------------------------------\n\nTITLE: HTTP GET/POST Endpoints: Definitions Management\nDESCRIPTION: Endpoints for exporting and importing cluster-wide and vhost-specific definitions\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /api/definitions\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/definitions\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/definitions/{vhost}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/definitions/{vhost}\n```\n\n----------------------------------------\n\nTITLE: Checking for Classic Queue Mirroring Policies in RabbitMQ (Bash)\nDESCRIPTION: Health check that exits with a non-zero code if there are policies enabling classic queue mirroring in the cluster. Classic queue mirroring has been deprecated since 2021.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues check_if_cluster_has_classic_queue_mirroring_policy\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream with PowerShell\nDESCRIPTION: Sets up a federation upstream named 'my-upstream' using PowerShell with specific URI and expiration parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream my-upstream `\n    '\"{\"\"uri\"\":\"\"amqp://target.hostname\"\",\"\"expires\"\":3600000}\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in RabbitMQ\nDESCRIPTION: Demonstrates the command to enable specific feature flags or all available feature flags in a RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag <all | name>\n```\n\n----------------------------------------\n\nTITLE: Checking Certificate Expiration in RabbitMQ (Bash)\nDESCRIPTION: Checks the expiration date on the certificates for every listener on the target node configured to use TLS. Supports different time units like days, weeks, months, and years.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6\n```\n\n----------------------------------------\n\nTITLE: Setting Error Log Level for Default Category in RabbitMQ\nDESCRIPTION: This configuration sets the log level to 'error' for the default category in RabbitMQ, meaning only errors or higher severity messages will be logged.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nlog.default.level = error\n```\n\n----------------------------------------\n\nTITLE: Listing User Topic Permissions in RabbitMQ (Bash)\nDESCRIPTION: This command lists all virtual hosts to which a specific user has been granted access and their topic permissions. It requires the username as a parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_user_topic_permissions janeway\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for RabbitMQ Streams\nDESCRIPTION: This command creates a Docker network named 'rabbitmq-streams' for the RabbitMQ server and performance tool containers to communicate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-13-rabbitmq-streams-overview/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create rabbitmq-streams\n```\n\n----------------------------------------\n\nTITLE: Labeling Service and Pod Monitors\nDESCRIPTION: Commands to add team labels to ServiceMonitor and PodMonitor resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/operator-monitoring.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label ServiceMonitor rabbitmq team=frontend\nkubectl label PodMonitor rabbitmq-cluster-operator team=frontend\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer with RabbitMQ in C#\nDESCRIPTION: Shows how to create an asynchronous consumer in C# that processes messages from a specified queue and settles them after processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nIConsumer consumer = await connection.ConsumerBuilder()\n    .Queue(\"some-queue\")\n    .MessageHandler(async (context, message) =>\n    {\n        // deal with the message\n        await context.AcceptAsync();// settle the message\n    }\n).BuildAndStartAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Calculation Strategy in RabbitMQ (INI)\nDESCRIPTION: Default strategy for memory usage reporting, set to 'rss' which uses operating system RSS memory reporting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = rss\n```\n\n----------------------------------------\n\nTITLE: Increasing Initial Frame Size Limit in RabbitMQ Configuration (Erlang)\nDESCRIPTION: Shows how to increase the initial frame size limit to 8192 bytes using the advanced.config file in Erlang syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-oauth2.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n    {initial_frame_max, 8192}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Error Logging for Disabled Required Feature Flag in RabbitMQ\nDESCRIPTION: This snippet shows the error message logged when a required feature flag is not enabled upon starting or upgrading RabbitMQ to version 3.11.0 or later. It demonstrates how RabbitMQ will refuse to start if the necessary feature flags are not enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-20-required-feature-flags-in-rabbitmq-3.11/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n2022-07-13 11:29:28.366877+02:00 [error] <0.232.0> Feature flags: `implicit_default_bindings`: required feature flag not enabled! It must be enabled before upgrading RabbitMQ.\n2022-07-13 11:29:28.366905+02:00 [error] <0.232.0> Failed to initialize feature flags registry: {disabled_required_feature_flag,\n2022-07-13 11:29:28.366905+02:00 [error] <0.232.0>                                               implicit_default_bindings}\n2022-07-13 11:29:28.372830+02:00 [error] <0.232.0>\n2022-07-13 11:29:28.372830+02:00 [error] <0.232.0> BOOT FAILED\n2022-07-13 11:29:28.372830+02:00 [error] <0.232.0> ===========\n2022-07-13 11:29:28.372830+02:00 [error] <0.232.0> Error during startup: {error,failed_to_initialize_feature_flags_registry}\n2022-07-13 11:29:28.372830+02:00 [error] <0.232.0>\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in RabbitMQ (Bash and PowerShell)\nDESCRIPTION: This snippet shows how to delete a user in RabbitMQ using the rabbitmqctl command in both Bash and PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_user 'username'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat delete_user 'username'\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Stream with AMQP 0.9.1 in RabbitMQ 4.0 Using PerfTest\nDESCRIPTION: Java command for benchmarking a stream with AMQP 0.9.1 protocol in RabbitMQ 4.0. The test shows lower throughput (~89,000 msg/s) compared to AMQP 1.0 due to the overhead of translating between AMQP 0.9.1 and AMQP 1.0 formats.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar target/perf-test.jar \\\n    --predeclared --exchange amq.default \\\n    --routing-key my-stream --queue my-stream \\\n    --flag persistent --flag mandatory \\\n    --pmessages 1000000 --size 12 --confirm 192 --qos 5000 --multi-ack-every 5000\n\nid: test-104223-225, sending rate avg: 88912 msg/s\nid: test-104223-225, receiving rate avg: 88912 msg/s\nid: test-104223-225, consumer latency min/median/75th/95th/99th 701/1340/1523/2500/4524 µs\nid: test-104223-225, confirm latency min/median/75th/95th/99th 788/1983/2130/2437/2970 µs\n```\n\n----------------------------------------\n\nTITLE: Configuring Erlang Scheduler Count in RabbitMQ\nDESCRIPTION: Sets the number of Erlang schedulers to 4 using the +S flag, regardless of available CPU cores. This configuration is useful in shared or CPU-constrained environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+S 4:4\"\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for Two Nodes in Bash\nDESCRIPTION: Bash command to set a policy that mirrors queues with names starting with \"two.\" to exactly two nodes in the cluster, with automatic synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy ha-two \"^two\\.\" \\\n  '{\"ha-mode\":\"exactly\",\"ha-params\":2,\"ha-sync-mode\":\"automatic\"}'\n```\n\n----------------------------------------\n\nTITLE: Encrypted Configuration Example\nDESCRIPTION: Example of using encrypted configuration values for sensitive data like passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_51\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n      {default_user, <<\"guest\">>},\n      {default_pass,\n        {encrypted,\n         <<\"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==\">>\n        }\n      },\n      {config_entry_decoder, [\n             {passphrase, <<\"mypassphrase\">>}\n         ]}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Node Interface Configuration\nDESCRIPTION: Configuration for RabbitMQ inter-node communication listener interface in rabbitmq.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.interface = ::1\n```\n\n----------------------------------------\n\nTITLE: Displaying Erlang Cookie Hash in RabbitMQ (Bash)\nDESCRIPTION: Outputs a hashed value of the shared secret used by the target node to authenticate CLI tools and peers. This command is useful for troubleshooting authentication issues in RabbitMQ clusters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_cookie_hash -q\n```\n\n----------------------------------------\n\nTITLE: Variable Expansion in RabbitMQ Topic Permission Patterns\nDESCRIPTION: This example demonstrates how variables can be used in topic permission patterns. The pattern expands to match topics that start with the username followed by a hyphen and any characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_14\n\nLANGUAGE: regex\nCODE:\n```\n'^{username}-.*'\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameters in RabbitMQ\nDESCRIPTION: Sets a global runtime parameter that isn't tied to a virtual host. The example sets mqtt_default_vhosts with a JSON document mapping client certificates to virtual hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_global_parameter mqtt_default_vhosts '{\"O=client,CN=guest\":\"/\"}'\n```\n\n----------------------------------------\n\nTITLE: Cluster Node Shutdown Example\nDESCRIPTION: Demonstrates shutting down nodes and checking cluster status using rabbitmqctl commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl stop\n# => Stopping and halting node rabbit@rabbit1 ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit3,rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2,rabbit@rabbit3]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl stop\n# => Stopping and halting node rabbit@rabbit3 ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},\n# =>  {running_nodes,[rabbit@rabbit2]}]\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Decommissioning MQTT Node Command in RabbitMQ\nDESCRIPTION: Command to safely remove an MQTT node from a RabbitMQ cluster. Must be executed before disabling the plugin or removing the node from the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decommission_mqtt_node rabbit@stringer\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Mono System-wide Trust Certificate Store\nDESCRIPTION: Bash command to add a CA certificate to the Mono system-wide Trust certificate store on Linux. This requires administrative privileges and enables all .NET applications on the system to trust servers presenting certificates signed by this CA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -add -c -m Trust /path/to/cacert.cer\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resource Servers in RabbitMQ\nDESCRIPTION: Example configuration for multiple OAuth 2.0 resource servers (prod and dev) sharing the same identity provider.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = https://my-idp.com/\nauth_oauth2.resource_servers.1.id = prod\nauth_oauth2.resource_servers.2.id = dev\n```\n\n----------------------------------------\n\nTITLE: Viewing RabbitMQ System Logs with journalctl\nDESCRIPTION: These commands show how to view RabbitMQ-specific system logs using journalctl on systemd-based distributions. They require superuser privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mixed-Version Cluster Testing Environment\nDESCRIPTION: Series of commands to set up and run tests in a mixed-version cluster environment with feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server.git secondary-umbrella\ncd secondary-umbrella\ngit checkout v3.12.x\nmake co\n\ncd secondary-umbrella/deps/rabbitmq_federation\nmake dist\n\nSECONDARY_UMBRELLA=/path/to/secondary-umbrella \\\nRABBITMQ_FEATURE_FLAGS= \\\nmake tests\n```\n\n----------------------------------------\n\nTITLE: Username Variable Pattern\nDESCRIPTION: Permission pattern that uses variable expansion for username-based access control.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_12\n\nLANGUAGE: regex\nCODE:\n```\n^{username}-.*\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT TCP Buffer Settings\nDESCRIPTION: Configuration for TCP buffer settings specific to MQTT connections, setting buffer sizes to 32 KiB and configuring connection behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.linger.on      = true\nmqtt.tcp_listen_options.linger.timeout = 0\nmqtt.tcp_listen_options.sndbuf  = 32768\nmqtt.tcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL Policy for Queues using rabbitmqctl\nDESCRIPTION: This command sets a policy that applies a 60-second TTL to all queues using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" '{\"message-ttl\":60000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Complete Log Message Publisher Implementation in Ruby\nDESCRIPTION: Full implementation of a log message publisher using RabbitMQ with the Bunny client. It establishes a connection, creates a fanout exchange, and publishes messages to it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nexchange = channel.fanout('logs')\n\nmessage = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')\n\nexchange.publish(message)\nputs \" [x] Sent #{message}\"\n\nconnection.close\n```\n\n----------------------------------------\n\nTITLE: Setting User Channel Limit via HTTP API using curl\nDESCRIPTION: This curl command demonstrates how to set the maximum channels limit for a user using the RabbitMQ HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-channels \\\n                       -H \"content-type: application/json\" \\\n                       -d @- <<EOF\n{\n  \"value\": 20\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Topic Exchange in STOMP\nDESCRIPTION: Configuration setting to specify a different default exchange than amq.topic for STOMP operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_topic_exchange = some.exchange\n```\n\n----------------------------------------\n\nTITLE: Erlang Version Query - Bash\nDESCRIPTION: Reports the Erlang/OTP version of the target node\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_version -q\n```\n\n----------------------------------------\n\nTITLE: Fetching Paginated Queue Data in RabbitMQ API (HTTP)\nDESCRIPTION: This HTTP GET request fetches the first page of queue data with a custom page size of 50 elements. It demonstrates the use of 'page' and 'page_size' query parameters for pagination in the RabbitMQ API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:15672/api/queues?page=1&page_size=50\n```\n\n----------------------------------------\n\nTITLE: epmd Connection Error Example\nDESCRIPTION: Example error message when epmd is configured for IPv6 but nodes use IPv4.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nProtocol 'inet_tcp': register/listen error: econnrefused\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Forwarding to System Exchange in RabbitMQ\nDESCRIPTION: Configuration snippet to activate log forwarding to the amq.rabbitmq.log exchange and set the log level.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\n# activate log forwarding to amq.rabbitmq.log, a topic exchange\nlog.exchange = true\nlog.exchange.level = warning\n```\n\n----------------------------------------\n\nTITLE: Complete Task Producer Script for RabbitMQ Work Queue in Elixir\nDESCRIPTION: Complete implementation of a task producer that publishes messages to a durable queue with persistence. It accepts command line arguments to construct the message and ensures the connection is properly closed after sending.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n\nAMQP.Queue.declare(channel, \"task_queue\", durable: true)\n\nmessage =\n  case System.argv do\n    []    -> \"Hello World!\"\n    words -> Enum.join(words, \" \")\n  end\n\nAMQP.Basic.publish(channel, \"\", \"task_queue\", message, persistent: true)\nIO.puts \" [x] Sent '#{message}'\"\n\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Listing TCP Listeners with Process Information (IPv4)\nDESCRIPTION: Uses the ss command to display listening TCP sockets that use IPv4 along with their associated OS processes. This provides a comprehensive view of all listening TCP services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nsudo ss --tcp -f inet --listening --numeric --processes\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for RabbitMQ Stream Client in Rust\nDESCRIPTION: This code snippet imports the necessary types and error handling structures from the RabbitMQ stream client library for Rust.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse rabbitmq_stream_client::error::StreamCreateError;\nuse rabbitmq_stream_client::types::{ByteCapacity, Message, ResponseCode};\n```\n\n----------------------------------------\n\nTITLE: Running Multiple RabbitMQ Nodes with Management Plugin on Different Ports\nDESCRIPTION: Commands to start two RabbitMQ nodes on a single machine with the management plugin configured to use different ports to avoid collision.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_NODE_PORT=5672 RABBITMQ_SERVER_START_ARGS=\"-rabbitmq_management listener [{port,15672}]\" RABBITMQ_NODENAME=rabbit rabbitmq-server -detached\nRABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS=\"-rabbitmq_management listener [{port,15673}]\" RABBITMQ_NODENAME=hare rabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Authentication Backend\nDESCRIPTION: RabbitMQ configuration to enable the OAuth 2.0 authentication and authorization backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = rabbit_auth_backend_oauth2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Breakdown via HTTP API in JSON\nDESCRIPTION: This curl command retrieves the memory breakdown for a RabbitMQ node using the HTTP API and formats the output as JSON. It shows detailed memory usage for various components of the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncurl -s -u guest:guest http://127.0.0.1:15672/api/nodes/rabbit@mercurio/memory | python -m json.tool\n\n{\n    \"memory\": {\n        \"atom\": 1041593,\n        \"binary\": 5133776,\n        \"code\": 25299059,\n        \"connection_channels\": 1823320,\n        \"connection_other\": 150168,\n        \"connection_readers\": 83760,\n        \"connection_writers\": 113112,\n        \"metrics\": 217816,\n        \"mgmt_db\": 266560,\n        \"mnesia\": 93344,\n        \"msg_index\": 48880,\n        \"other_ets\": 2294184,\n        \"other_proc\": 27131728,\n        \"other_system\": 21496756,\n        \"plugins\": 3103424,\n        \"queue_procs\": 2957624,\n        \"total\": 89870336\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Configuration for Event Exchange\nDESCRIPTION: Complete configuration example for setting up the Event Exchange plugin to use AMQP 1.0 protocol with the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/event-exchange.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nevent_exchange.vhost = /\nevent_exchange.protocol = amqp_1_0\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Calculation Strategy\nDESCRIPTION: Strategy configuration for memory usage reporting\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_calculation_strategy = rss\n```\n\n----------------------------------------\n\nTITLE: Port Connectivity Check Command - Bash\nDESCRIPTION: Validates TCP connection acceptance on all listener ports of the target node\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_port_connectivity\n```\n\n----------------------------------------\n\nTITLE: Configuring UNIX Epoch Timestamp Format in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to use microseconds since UNIX epoch for log timestamp formatting instead of the default RFC 3339 format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = true\nlog.file.level = info\n\n# use microseconds since UNIX epoch for timestamp format\nlog.file.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Node Certificates\nDESCRIPTION: Command to display node certificates for TLS-configured listeners.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics certificates\n```\n\n----------------------------------------\n\nTITLE: Listing Connections and Channel Counts\nDESCRIPTION: Uses rabbitmqctl to list connections and their corresponding channel counts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_connections name channels -q\n# => name\tchannels\n# => 127.0.0.1:52956 -> 127.0.0.1:5672\t10\n# => 127.0.0.1:52964 -> 127.0.0.1:5672\t33\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues on Windows\nDESCRIPTION: Command to list all queues and their message counts in RabbitMQ on Windows systems. This uses the rabbitmqctl.bat command-line tool without sudo.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_queues\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Table for RabbitMQ Monitoring Tools in Markdown\nDESCRIPTION: This code snippet generates an HTML table within a Markdown document, listing various monitoring tools for RabbitMQ along with their respective online resources and GitHub repositories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <thead>\n    <tr><td>Monitoring Tool</td><td>Online Resource(s)</td></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>AppDynamics</td>\n      <td>\n        <a href=\"https://www.appdynamics.com/community/exchange/extension/rabbitmq-monitoring-extension/\">AppDynamics</a>,\n        <a href=\"https://github.com/Appdynamics/rabbitmq-monitoring-extension\">GitHub</a>\n      </td>\n    </tr>\n    <tr>\n      <td>AWS CloudWatch</td>\n      <td>\n        <a href=\"https://github.com/noxdafox/rabbitmq-cloudwatch-exporter\">GitHub</a>\n      </td>\n    </tr>\n    <!-- ... more entries ... -->\n    <tr>\n      <td>Zenoss</td>\n      <td>\n        <a href=\"https://www.zenoss.com/product/zenpacks/rabbitmq\">RabbitMQ ZenPack</a>,\n        <a href=\"http://www.youtube.com/watch?v=CAak2ayFcV0\">Instructional Video</a>\n        </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Encrypted Configuration Example\nDESCRIPTION: Example of using encrypted configuration values for sensitive data like passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_51\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n      {default_user, <<\"guest\">>},\n      {default_pass,\n        {encrypted,\n         <<\"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==\">>\n        }\n      },\n      {config_entry_decoder, [\n             {passphrase, <<\"mypassphrase\">>}\n         ]}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Elixir\nDESCRIPTION: Creates a binding between a queue and the 'logs' exchange, instructing the exchange to send messages to this queue. This establishes the relationship needed for message delivery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Queue.bind(channel, queue_name, \"logs\")\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific RabbitMQ Commit with Git\nDESCRIPTION: This git command checks out a specific commit from the master branch that includes the performance optimization (PR #4606). The commit is identified by its SHA hash and includes improvements to the routing table lookup mechanism.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout c22e1cb20e656d211e025c417d1fc75a9067b717\n```\n\n----------------------------------------\n\nTITLE: Displaying Erlang Cookie Hash in RabbitMQ (Bash)\nDESCRIPTION: Outputs a hashed value of the shared secret used by the target node to authenticate CLI tools and peers. This command is useful for troubleshooting authentication issues in RabbitMQ clusters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics erlang_cookie_hash -q\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Benchmark Results with Enhanced Flow Control\nDESCRIPTION: Performance benchmark output showing message throughput and latency metrics with enhanced flow control settings in RabbitMQ 4.0.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# quiver //host.docker.internal//queues/my-quorum-queue \\\n    --durable --count 1m --duration 10m --body-size 12 --credit 5000\n\nRESULTS\n\nCount ............................................. 1,000,000 messages\nDuration ............................................... 12.0 seconds\nSender rate .......................................... 83,459 messages/s\nReceiver rate ........................................ 83,396 messages/s\nEnd-to-end rate ...................................... 83,181 messages/s\n\nLatencies by percentile:\n\n          0% ........ 9 ms       90.00% ....... 47 ms\n         25% ....... 27 ms       99.00% ....... 61 ms\n         50% ....... 35 ms       99.90% ....... 76 ms\n        100% ....... 81 ms       99.99% ....... 81 ms\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Producer Implementation in Ruby\nDESCRIPTION: Full implementation of a durable task queue producer with proper connection handling and message persistence.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new(automatically_recover: false)\nconnection.start\n\nchannel = connection.create_channel\nqueue = channel.queue('task_queue', durable: true)\n\nmessage = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')\n\nqueue.publish(message, persistent: true)\nputs \" [x] Sent #{message}\"\n\nconnection.close\n```\n\n----------------------------------------\n\nTITLE: Starting UAA Authorization Server\nDESCRIPTION: Command to start the UAA authorization server that will issue JWT tokens for OAuth 2.0 authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake start-uaa\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Strict Transport Security in RabbitMQ Management\nDESCRIPTION: Configuration for setting the HTTP Strict Transport Security (HSTS) header in the RabbitMQ Management UI responses to enhance security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.hsts.policy = max-age=31536000; includeSubDomains\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence for RabbitmqCluster in YAML\nDESCRIPTION: Specifies persistence settings for the RabbitmqCluster, including storage class name and capacity. The example sets a custom storage class and 20Gi of storage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n   persistence:\n    storageClassName: fast\n    storage: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Super Stream\nDESCRIPTION: Command line example showing how to create a super stream named 'invoices' with 3 partitions using the rabbitmq-streams CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_super_stream invoices --partitions 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Timeout in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to set the consumer timeout value in the rabbitmq.conf file. The timeout is specified in milliseconds, with examples for 30 minutes and one hour.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/consumers.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# 30 minutes in milliseconds\nconsumer_timeout = 1800000\n```\n\nLANGUAGE: ini\nCODE:\n```\n# one hour in milliseconds\nconsumer_timeout = 3600000\n```\n\n----------------------------------------\n\nTITLE: Using Third-Party Authentication Backend in RabbitMQ\nDESCRIPTION: Example of configuring a third-party authentication backend plugin in RabbitMQ. This demonstrates using the full module name for plugins that don't have a shortcut alias.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n# note that the module name begins with a \"rabbit_\", not \"rabbitmq_\", like plugin\n# names usually do\nauth_backends.1 = rabbit_auth_backend_ip_range\n```\n\n----------------------------------------\n\nTITLE: Configuring Handshake Timeout in RabbitMQ\nDESCRIPTION: Default configuration for the maximum time allowed for AMQP 0-9-1 handshake after socket connection and TLS handshake, specified in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 10000\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Stream Performance Test\nDESCRIPTION: This command runs the RabbitMQ stream performance test tool in a Docker container, connecting to the RabbitMQ server to create a stream and perform publish/consume operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-13-rabbitmq-streams-overview/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --network rabbitmq-streams pivotalrabbitmq/stream-perf-test \\\n    --uris rabbitmq-stream://rabbitmq:5552\n```\n\n----------------------------------------\n\nTITLE: Setting ERL_SSL_PATH in RabbitMQ Environment Configuration\nDESCRIPTION: These commands set the ERL_SSL_PATH environment variable in the RabbitMQ configuration file, which is necessary for loading the TLS module.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nerl -noinput -eval 'io:format(\"ERL_SSL_PATH=~s~n\", [filename:dirname(code:which(inet_tls_dist))])' -s init stop > /tmp/ssl-path.txt\ncat /tmp/ssl-path.txt /etc/rabbitmq/rabbitmq-env.conf > /tmp/new-rabbitmq-env.conf\nmv -f /tmp/new-rabbitmq-env.conf /etc/rabbitmq/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd for epmd IPv6 Listening\nDESCRIPTION: This systemd unit file configuration sets epmd to listen only on IPv6 interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nListenStream=[::1]:4369\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queue WAL Segment Size in RabbitMQ\nDESCRIPTION: Sets the maximum size of a write-ahead log (WAL) segment for quorum queues before it's flushed to disk. This affects how much message data can be kept in memory under steady load.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/persistence-conf.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Flush current WAL file to a segment file on disk once it reaches 32 MiB in size\nraft.wal_max_size_bytes = 32000000\n```\n\n----------------------------------------\n\nTITLE: Downloading rabbitmqadmin v1 from RabbitMQ Management Plugin\nDESCRIPTION: Instructions for downloading rabbitmqadmin v1 from a RabbitMQ node with the management plugin enabled. The URL format is provided for accessing the download link.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://{hostname}:15672/cli/rabbitmqadmin\n```\n\n----------------------------------------\n\nTITLE: Using JWT Token with Secondary Signing Key\nDESCRIPTION: This command shows how to make an API request to the RabbitMQ management endpoint using a token signed with a secondary signing key. It uses a Python script to generate the token with the alternate key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=http://localhost:15672/api/overview TOKEN=$(bin/jwt_token scope-and-extra-scope.json legacy-token-2-key private-2.pem public-2.pem)\n```\n\n----------------------------------------\n\nTITLE: Listing Management Plugins\nDESCRIPTION: Lists all plugins containing 'management' in their name with verbose output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -v management\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Listener Interface in RabbitMQ\nDESCRIPTION: Default configuration for the network interface used for communication with other cluster members and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.interface = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Connection Parameters in RabbitMQ\nDESCRIPTION: Key connection parameters including channels, channel_max, frame_max, and client properties that define connection behavior and limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_81\n\nLANGUAGE: markup\nCODE:\n```\n<code class=\"Cm\">channels</code>\n<code class=\"Cm\">channel_max</code>\n<code class=\"Cm\">frame_max</code>\n<code class=\"Cm\">client_properties</code>\n```\n\n----------------------------------------\n\nTITLE: Multiple Resource Servers Configuration in INI\nDESCRIPTION: Configuration example for multiple OAuth 2.0 resources with different scope prefixes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = http//some_idp_url\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.\n```\n\n----------------------------------------\n\nTITLE: Negative Acknowledgement without Requeue in .NET RabbitMQ Client\nDESCRIPTION: Demonstrates how to negatively acknowledge a delivery without requeueing using the .NET client for RabbitMQ. The message will be discarded or sent to a Dead Letter Exchange if configured.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// this example assumes an existing channel (IModel) instance\n\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // negatively acknowledge, the message will\n                    // be discarded\n                    channel.BasicReject(ea.DeliveryTag, false);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in Batches with RabbitMQ Publisher Confirms in C#\nDESCRIPTION: This snippet shows how to publish messages in batches and wait for the entire batch to be confirmed. It uses a batch size of half the allowed outstanding confirmations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nint batchSize = 100;\nvar outstandingMessageCount = 0;\nvar messagesSent = 0;\nfor (int i = 0; i < MESSAGE_COUNT; i++)\n{\n    byte[] body = Encoding.UTF8.GetBytes(i.ToString());\n    await channel.BasicPublishAsync(\"\", \"queue-name\", null, body);\n    outstandingMessageCount++;\n    if (outstandingMessageCount == batchSize)\n    {\n        await AwaitConfirmsAsync(channel);\n        outstandingMessageCount = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Stream TCP Listener Options Configuration\nDESCRIPTION: Advanced configuration for Stream plugin TCP listener options including buffer sizes, connection queue length, TCP keepalives, and other networking parameters to optimize performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n\nstream.tcp_listen_options.backlog = 4096\nstream.tcp_listen_options.recbuf  = 131072\nstream.tcp_listen_options.sndbuf  = 131072\n\nstream.tcp_listen_options.keepalive = true\nstream.tcp_listen_options.nodelay   = true\n\nstream.tcp_listen_options.exit_on_close = true\nstream.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Hello World Example in Elixir\nDESCRIPTION: The equivalent Hello World program implemented in Elixir, demonstrating the more Ruby-like syntax with module definition using 'defmodule' and function definition using 'def'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n# module_name.ex\n\ndefmodule ModuleName do\n  def hello do\n    IO.puts \"Hello World\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Handshake Timeout in RabbitMQ\nDESCRIPTION: Default configuration for the maximum time allowed for AMQP 0-9-1 handshake after socket connection and TLS handshake, specified in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 10000\n```\n\n----------------------------------------\n\nTITLE: Configuring Net Tick Time in RabbitMQ Advanced Config\nDESCRIPTION: This Erlang configuration snippet demonstrates how to set the net_ticktime to 120 seconds in the advanced.config file for RabbitMQ, doubling the default value of 60 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/nettick.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [{net_ticktime,  120}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Different Log Levels for File and Connection Logs in RabbitMQ\nDESCRIPTION: This snippet configures debug level for file logging and info level for connection events in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = debug\nlog.connection.level = info\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Config Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration example for using the classic config mechanism for peer discovery, specifying the backend and listing node addresses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\n\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Unbinding Queue from Exchange in RabbitMQ\nDESCRIPTION: Shows how to remove bindings between exchanges and queues using the management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_63\n\nLANGUAGE: java\nCODE:\n```\nmanagement.unbind()\n    .sourceExchange(\"my-exchange\")\n    .destinationQueue(\"my-queue\")\n    .key(\"foo\")\n    .unbind();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIBindingSpecification bindingSpec = management.Binding()\n    .SourceExchange(\"my-exchange\")\n    .DestinationQueue(\"my-queue\")\n    .Key(\"foo\");\nawait bindingSpec.UnbindAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nmanagement.unbind(BindingSpecification(\n    source_exchange=\"my-exchange\",\n    destination_queue=\"my-queue\",\n))\n```\n\nLANGUAGE: go\nCODE:\n```\n// bindingPath is the bind result\nerr = management.Unbind(context.TODO(), bindingPath)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-Enabled RabbitMQ Connection with Peer Verification\nDESCRIPTION: Example URI for a secure AMQPS connection with TLS peer verification enabled. Specifies paths to CA certificate, client certificate, and client key files with verify_peer setting to ensure certificate chain validation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/uri-query-parameters.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\namqps://myhost?cacertfile=/path/to/ca_certificate.pem\n  &certfile=/path/to/client_certificate.pem\n  &keyfile=/path/to/client_key.pem\n  &verify=verify_peer\n  &server_name_indication=myhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ for Blue-Green Migration\nDESCRIPTION: Command to set up the federation upstream parameter pointing to the 'blue' cluster from the 'green' cluster. This establishes the connection between clusters for message federation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/blue-green-upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream blue \\\n  '{\"uri\":\"amqp://node-in-blue-cluster\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX via Policy using PowerShell\nDESCRIPTION: Sets up a dead letter exchange policy named 'DLX' that applies to all queues using rabbitmqctl in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/dlx.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl set_policy DLX \".*\" \"{\"\"dead-letter-exchange\"\":\"\"my-dlx\"\"}\" --apply-to queues --priority 7\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in C# RabbitMQ\nDESCRIPTION: This code snippet demonstrates how to declare a durable queue in RabbitMQ using C#. It sets the 'durable' parameter to true when declaring the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueDeclareAsync(queue: \"hello\",\n    durable: true, exclusive: false,\n    autoDelete: false, arguments: null);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Shovel Using RabbitMQ HTTP API Endpoint\nDESCRIPTION: HTTP API endpoint pattern for declaring a shovel. The request requires a JSON document containing shovel configuration parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/parameters/shovel/{vhost}/{name}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker registry secret for private registry access\nDESCRIPTION: Command to create a Kubernetes Secret with credentials for accessing a private Docker registry, where the RabbitMQ Cluster Operator images are stored.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system create secret \\\ndocker-registry rabbitmq-cluster-registry-access \\\n--docker-server=DOCKER-SERVER \\\n--docker-username=DOCKER-USERNAME \\\n--docker-password=DOCKER-PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Port Listener Check Command - Bash\nDESCRIPTION: Verifies if the target node is listening on a specific port\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_port_listener 5672\n```\n\n----------------------------------------\n\nTITLE: Configuring net_ticktime in Windows Environment Configuration\nDESCRIPTION: Creates a configuration file that sets the Erlang net_ticktime value, which controls node communication timeout intervals. This needs to be set via environment variables on Windows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n@echo off\nset SERVER_ADDITIONAL_ERL_ARGS=-kernel net_ticktime 120\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Frame Type for Web STOMP\nDESCRIPTION: INI configuration to set the WebSocket frame type to binary for the Web STOMP plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ws_frame = binary\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumers in RabbitMQ with bash\nDESCRIPTION: Command for displaying consumer information (connection PID, subscription ID, and stream) for RabbitMQ streams. This example shows how to retrieve specific consumer properties using the list_stream_consumers command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumers connection_pid subscription_id stream\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Watermark Configuration\nDESCRIPTION: Memory threshold configuration for flow control\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.relative = 0.6\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.absolute = 2GB\n```\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark.relative = 0.4\n```\n\n----------------------------------------\n\nTITLE: Absolute Disk Free Limit Configuration - RabbitMQ INI\nDESCRIPTION: Configuration example showing how to set an absolute disk free space limit of 1GB in bytes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/disk-alarms.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 1000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring net_ticktime in Windows Environment Configuration\nDESCRIPTION: Creates a configuration file that sets the Erlang net_ticktime value, which controls node communication timeout intervals. This needs to be set via environment variables on Windows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n@echo off\nset SERVER_ADDITIONAL_ERL_ARGS=-kernel net_ticktime 120\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Limits for RabbitMQ Containers\nDESCRIPTION: This JSON configuration sets the default ulimits for Docker containers, specifically setting the maximum number of open file handles (nofile) to 64000. This configuration should be placed in the Docker daemon configuration file at /etc/docker/daemon.json on Docker hosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in Erlang RabbitMQ Client\nDESCRIPTION: Example of setting up TLS options for the RabbitMQ Erlang client, including certificate paths, verification settings, and server name indication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_49\n\nLANGUAGE: erlang\nCODE:\n```\nSslOpts = [{cacertfile, \"/path/to/ca_certificate.pem\"},\n           {certfile, \"/path/to/client/certificate.pem\"},\n           {keyfile, \"/path/to/client/private_key.pem\"},\n\n           %% only necessary with intermediate CAs\n           %% {depth, 2},\n\n           %% Note: it is recommended to set 'verify' to\n           %% to 'verify_peer' to ensure that X509\n           %% certificate chain validation is enabled\n           %%\n           %% Do not set 'verify' or set it to verify_none\n           %% if x509 certificate chain validation is\n           %% not desired\n           {verify, verify_peer},\n\n           %% If Server Name Indication validation is desired,\n           %% set the following option to the host name to which\n           %% the connection is made. If necessary, this option\n           %% may be set to another host name to match the server\n           %% certificate's CN= value.\n           %% Do not set this option or set it to the atom 'disable'\n           %% to disable SNI validation\n           {server_name_indication, \"my.rmq-server.net\"}],\n\nParams = #amqp_params_network{host = \"my.rmq-server.net\",\n                              port = 5671,\n                              ssl_options = SslOpts}\n\n{ok, Conn} = amqp_connection:start(Params),\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Operator Log Level\nDESCRIPTION: YAML configuration to set debug log level for the RabbitMQ cluster operator deployment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq-cluster-operator\n  namespace: rabbitmq-system\nspec:\n  template:\n    spec:\n      containers:\n      - args:\n        - --zap-log-level=debug\n        command:\n        - /manager\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ 3.13+ Docker Container for Stream Filtering\nDESCRIPTION: This shell command starts a RabbitMQ 3.13+ Docker container with the necessary configuration for stream operations, including setting the advertised host for the stream plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5552:5552 \\\n    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \\\n    rabbitmq:3.13\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for Specific Nodes in Bash\nDESCRIPTION: Bash command to set a policy that mirrors queues with names starting with \"nodes.\" to specific nodes (nodeA and nodeB) in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy ha-nodes \"^nodes\\.\" \\\n  '{\"ha-mode\":\"nodes\",\"ha-params\":[\"rabbit@nodeA\", \"rabbit@nodeB\"]}'\n```\n\n----------------------------------------\n\nTITLE: Basic RabbitMQ Management UI OAuth 2.0 Configuration\nDESCRIPTION: Essential configuration entries in rabbitmq.conf for enabling OAuth 2.0 authentication in the RabbitMQ Management UI using service-provider initiated login\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# ...\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_client_code\nauth_oauth2.issuer = https://uaa:8443\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resources in RabbitMQ\nDESCRIPTION: Example configuration for setting up two OAuth 2.0 resources (rabbit_prod and rabbit_dev) in RabbitMQ, including common settings and OAuth provider configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-multiresource.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\n\nauth_oauth2.preferred_username_claims.1 = preferred_username\nauth_oauth2.preferred_username_claims.2 = user_name\nauth_oauth2.preferred_username_claims.3 = email\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.oauth_providers.keycloak.issuer = https://keycloak:8443/realms/test\nauth_oauth2.oauth_providers.keycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.keycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.keycloak.https.hostname_verification = wildcard\nauth_oauth2.default_oauth_provider = keycloak\n```\n\n----------------------------------------\n\nTITLE: Sample Output of AMQP Filter Expressions Demo\nDESCRIPTION: Console output showing the results of the AMQP filter expressions demo, including published messages and filtered consumption by different consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-12-13-amqp-filter-expressions/index.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npublisher sent message 0 with color green\npublisher sent message 1 with color blue\npublisher sent message 2 with color purple\npublisher sent message 3 with color purple\npublisher sent message 4 with color green\npublisher sent message 5 with color green\nconsumer (filter green) received message 0\nconsumer (filter green) received message 4\nconsumer (filter green) received message 5\nconsumer (filter purple) received message 2\nconsumer (filter purple) received message 3\nconsumer (filter blue) received message 1\nconsumer (filter &s:e) received message 1\nconsumer (filter &s:e) received message 2\nconsumer (filter &s:e) received message 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in PowerShell\nDESCRIPTION: PowerShell command to set up a federation upstream named 'origin' using rabbitmqctl. The upstream is configured with a URI pointing to the remote host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-exchanges/index.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter federation-upstream origin '\"{\"\"uri\"\":\"\"amqp://remote-host.local:5672\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Setting a Federation Policy in RabbitMQ via HTTP API\nDESCRIPTION: Uses the RabbitMQ HTTP API to set a policy named 'federate-me' in the root virtual host that applies to exchanges with names starting with 'federated.' and configures them to use all federation upstreams with priority 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/federate-me\n    {\"pattern\": \"^federated\\.\",\n     \"definition\": {\"federation-upstream-set\":\"all\"},\n     \"priority\": 1,\n    \"apply-to\": \"exchanges\"}\n```\n\n----------------------------------------\n\nTITLE: Example TLSv1.2 Connection Success Output\nDESCRIPTION: The expected output when successfully connecting to a RabbitMQ server using TLSv1.2, showing the protocol and negotiated cipher suite.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-AES256-GCM-SHA384\n```\n\n----------------------------------------\n\nTITLE: Example of modern ini-style SSL configuration in rabbitmq.conf\nDESCRIPTION: A snippet showing how to configure SSL options using the modern ini-style format in rabbitmq.conf. This includes setting certificate paths and verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# A new style format snippet. This format is used by rabbitmq.conf files.\nssl_options.cacertfile           = /path/to/ca_certificate.pem\nssl_options.certfile             = /path/to/server_certificate.pem\nssl_options.keyfile              = /path/to/server_key.pem\nssl_options.verify               = verify_peer\nssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Images for RabbitMQ Streams Setup\nDESCRIPTION: This snippet removes existing Docker images for RabbitMQ 3.9 and the stream performance test tool to ensure a clean setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-13-rabbitmq-streams-overview/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker rmi rabbitmq:3.9 pivotalrabbitmq/stream-perf-test\n```\n\n----------------------------------------\n\nTITLE: Formatting Feature Flag List with Pretty Tables\nDESCRIPTION: Enhanced command that lists feature flags with improved table formatting for better readability. This command displays multiple columns including name, state, provider, description, and documentation URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -q --formatter pretty_table list_feature_flags \\\n  name state provided_by desc doc_url\n```\n\n----------------------------------------\n\nTITLE: Test Case Setup with Feature Flag Check in Erlang\nDESCRIPTION: Example of how to set up a test case that checks and enables feature flags before running tests, with proper error handling and skip logic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\ninit_per_testcase(Testcase, Config) ->\n    Config1 = rabbit_ct_helpers:run_steps(\n                Config,\n                rabbit_ct_broker_helpers:setup_steps() ++\n                rabbit_ct_client_helpers:setup_steps()),\n    case rabbit_ct_broker_helpers:enable_feature_flag(Config1, quorum_queue) of\n        ok ->\n            Config1;\n        Skip ->\n            end_per_testcase(Testcase, Config1),\n            Skip\n    end.\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6-Only Listener\nDESCRIPTION: Configures RabbitMQ to listen only on a specific IPv6 interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = fe80::2acf:e9ff:fe17:f97b:5672\n```\n\n----------------------------------------\n\nTITLE: Setting User Limits in RabbitMQ\nDESCRIPTION: Examples of setting various user limits including max connections and channels for 'limited_user'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-connections\": 64}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-channels\": 16}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits limited_user 'max-connections'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits limited_user '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Password Length Validator in RabbitMQ\nDESCRIPTION: Sets up a credential validator that enforces a minimum password length of 30 characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncredential_validator.validation_backend = rabbit_credential_validator_min_password_length\ncredential_validator.min_length = 30\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Consumer with OAuth 2.0 Authentication\nDESCRIPTION: Command to launch a PerfTest consumer application that authenticates to RabbitMQ using a JWT token previously obtained from UAA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-consumer\n```\n\n----------------------------------------\n\nTITLE: Applying RabbitMQ ConfigMap using kubectl\nDESCRIPTION: Bash command to apply a ConfigMap to your Kubernetes cluster. The ConfigMap contains RabbitMQ configuration that will be mounted as a volume on RabbitMQ pods.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Access\nDESCRIPTION: JSON response returned when a client attempts to access the Management API without proper authorization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-multiresource.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"error\":\"not_authorized\",\"reason\":\"Not_Authorized\"}\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Configuration for RabbitMQ Limits\nDESCRIPTION: JSON configuration for setting kernel limits in Docker environment\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Publishers with Specific Fields in RabbitMQ CLI\nDESCRIPTION: This command displays the connection PID, publisher ID, and stream for each RabbitMQ stream publisher. It demonstrates how to use the list_stream_publishers command with specific publisher info items.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_publishers connection_pid publisher_id stream\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to Named Exchange\nDESCRIPTION: Publishes a message to the 'logs' exchange with an empty routing key, as routing keys are ignored in fanout exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.publish('logs', '', Buffer.from('Hello World!'));\n```\n\n----------------------------------------\n\nTITLE: Idempotently Deleting an Exchange in RabbitMQ with Shell Command\nDESCRIPTION: Command to delete an exchange with the idempotently flag, which means 404 Not Found responses won't be considered errors, useful for scripts that need to be run multiple times.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# --idempotently means that 404 Not Found responses will not be  considered errors\nrabbitmqadmin --vhost \"events\" delete exchange --name \"target.exchange.name\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Rich Authorization Permission to Scope Translation Algorithm in RabbitMQ OAuth 2.0\nDESCRIPTION: This code demonstrates how scope suffixes are constructed from location attributes and combined with actions to produce complete scopes. It shows the algorithm for transforming Rich Authorization Requests into JWT token scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nscope_suffix = <vhost>/<queue>|<exchange>/<routing-key>\n```\n\nLANGUAGE: ini\nCODE:\n```\nscope = <resource_server_id>.<action>:<scope_suffix>\n```\n\nLANGUAGE: ini\nCODE:\n```\nscope = <resource_server_id>.<action>\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages for the Second Run in Shell\nDESCRIPTION: Shell command to publish another batch of messages to the stream for testing the offset tracking functionality in the second run.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run offset-tracking-publish\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Shovel URI query parameters\nDESCRIPTION: Various query parameters supported in AMQP 1.0 URIs for Shovel connections, including idle_time_out, hostname, sasl, and TLS-related options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nidle_time_out\n```\n\nLANGUAGE: text\nCODE:\n```\nhostname\n```\n\nLANGUAGE: text\nCODE:\n```\nsasl\n```\n\nLANGUAGE: text\nCODE:\n```\ncacertfile\n```\n\nLANGUAGE: text\nCODE:\n```\ncertfile\n```\n\nLANGUAGE: text\nCODE:\n```\nkeyfile\n```\n\nLANGUAGE: text\nCODE:\n```\nverify\n```\n\nLANGUAGE: text\nCODE:\n```\nfail_if_no_peer_cert\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat Timeout in .NET RabbitMQ Client\nDESCRIPTION: Example showing how to set the heartbeat timeout to 60 seconds using the .NET client's ConnectionFactory. This must be configured before creating a connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/heartbeats.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar cf = new ConnectionFactory();\n\n// set the heartbeat timeout to 60 seconds\ncf.RequestedHeartbeat = TimeSpan.FromSeconds(60);\n```\n\n----------------------------------------\n\nTITLE: Checking Mirrored Queue Sync Status in RabbitMQ\nDESCRIPTION: Command to verify if mirrored queues have synchronized replicas. Exits with non-zero code if any queue has no synchronized mirrors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_if_node_is_mirror_sync_critical\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat check_if_node_is_mirror_sync_critical\n```\n\n----------------------------------------\n\nTITLE: Rejecting Multiple Messages with RabbitMQ in Java\nDESCRIPTION: Example showing how to reject multiple messages with a single nack operation using the multiple flag. This rejects all unacknowledged messages up to and including the specified delivery tag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/nack.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGetResponse gr1 = channel.basicGet(\"some.queue\", false);\nGetResponse gr2 = channel.basicGet(\"some.queue\", false);\nchannel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Message Prefetch Count for Fair Dispatch in RabbitMQ\nDESCRIPTION: Code to set the prefetch count to ensure fair work distribution among consumers. This tells RabbitMQ not to give more than one message to a worker until it has processed and acknowledged the previous one.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Basic.qos(channel, prefetch_count: 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for Specific Nodes via HTTP API\nDESCRIPTION: HTTP API request to set a policy that mirrors queues with names starting with \"nodes.\" to specific nodes (nodeA and nodeB) in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/ha-nodes\n  {\n    \"pattern\":\"^nodes\\.\",\n    \"definition\":{\n      \"ha-mode\":\"nodes\",\n      \"ha-params\":[\"rabbit@nodeA\", \"rabbit@nodeB\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: Verifying UAA Server Status\nDESCRIPTION: Command to check if the UAA server container is running using Docker ps\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-idp-initiated.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps | grep uaa\n```\n\n----------------------------------------\n\nTITLE: Setting Message Prefetch in RabbitMQ with Objective-C\nDESCRIPTION: Code to set the prefetch count for a RabbitMQ channel in Objective-C. This limits the number of unacknowledged messages a worker can have, ensuring fair dispatch among multiple workers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_7\n\nLANGUAGE: objectivec\nCODE:\n```\n[ch basicQos:@1 global:NO];\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic RabbitMQ Connection with URI Parameters\nDESCRIPTION: Example of a non-encrypted AMQP connection URI with heartbeat and connection timeout parameters specified.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/uri-query-parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\namqp://myhost?heartbeat=5&connection_timeout=10000\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-declared Topology in RabbitMQ.conf\nDESCRIPTION: Configuration snippet for the rabbitmq.conf file to enable pre-declared topology support for shovels. This allows shovels to use existing queues and exchanges rather than declaring them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nshovel.configuration.fail_if_source_not_available = false\nshovel.configuration.fail_if_destination_not_available = false\n```\n\n----------------------------------------\n\nTITLE: Channel Negotiation Error Log\nDESCRIPTION: Example of error log when client attempts to negotiate higher channel limit than server maximum.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n2019-02-11 16:03:16.543 [error] <0.882.0> closing AMQP connection <0.882.0> (127.0.0.1:49911 -> 127.0.0.1:5672):\nfailed to negotiate connection parameters: negotiated channel_max = 2047 is higher than the maximum allowed value (32)\n```\n\n----------------------------------------\n\nTITLE: Deleting Queue Members in RabbitMQ\nDESCRIPTION: Command to remove a quorum queue replica from a specified node for a specific queue in a virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-queues.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues delete_member --vhost \"a-vhost\" \"a-queue\" \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Options for Web STOMP\nDESCRIPTION: INI configuration for WebSocket-specific options in the Web STOMP plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/web-stomp.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nweb_stomp.ws_opts.compress = true\nweb_stomp.ws_opts.idle_timeout = 60000\nweb_stomp.ws_opts.max_frame_size = 50000\n```\n\n----------------------------------------\n\nTITLE: Declaring Queues in rabbitmqadmin\nDESCRIPTION: These commands demonstrate how to declare different types of queues (quorum, stream, classic) using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.quorum.queue.name\" --type \"quorum\" --durable true\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.stream.name\" --type \"stream\" --durable true\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare queue --name \"target.classic.queue.name\" --type \"classic\" --durable true --auto-delete false\n```\n\n----------------------------------------\n\nTITLE: Setting Raft Segment Entry Count for Large Messages\nDESCRIPTION: Configures a reduced number of Raft log entries per segment file, optimized for large message workloads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nraft.segment_max_entries = 128\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key from MIT Keyserver with GPG\nDESCRIPTION: Retrieves and imports the RabbitMQ signing key from the MIT key server using GPG. This is an alternative to keys.openpgp.org.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"pgp.mit.edu\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\n----------------------------------------\n\nTITLE: Verifying UAA Server Status\nDESCRIPTION: Command to check if the UAA server container is running using Docker ps\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-idp-initiated.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps | grep uaa\n```\n\n----------------------------------------\n\nTITLE: Retrieving Runtime Thread Statistics in RabbitMQ CLI\nDESCRIPTION: This command uses the RabbitMQ diagnostics tool to generate a breakdown of thread activity, showing percentages for various states like emulator, port, gc, check_io, other/aux, and sleep.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics runtime_thread_stats\n```\n\n----------------------------------------\n\nTITLE: Implementing RabbitMQ Message Receiver with Spring AMQP\nDESCRIPTION: Message receiver class that uses Spring AMQP's @RabbitListener annotation to listen for messages from the 'hello' queue and process them with a @RabbitHandler method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut1;\n\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\n\n@RabbitListener(queues = \"hello\")\npublic class Tut1Receiver {\n\n    @RabbitHandler\n    public void receive(String in) {\n        System.out.println(\" [x] Received '\" + in + \"'\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Invalid Keyfile or Certificate File Errors in Erlang\nDESCRIPTION: These errors suggest that the broker's keyfile or certificate file is invalid. Ensure that the keyfile matches the certificate and both are in PEM format with correct delimiters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{ssl_upgrade_error, ekeyfile}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{ssl_upgrade_error, ecertfile}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Inter-node Communication in RabbitMQ\nDESCRIPTION: Sets SERVER_ADDITIONAL_ERL_ARGS to enable TLS for inter-node communication, specifying the path to the combined keys file and setting the server password if the private key is encrypted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH \\\n  -proto_dist inet_tls \\\n  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \\\n  -ssl_dist_opt server_password password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ File Descriptor Limits with systemd\nDESCRIPTION: Configuration for setting maximum open file handles limit using systemd. This creates a drop-in configuration file to set LimitNOFILE for the RabbitMQ service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=64000\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Deregistration of Failed Nodes in Consul\nDESCRIPTION: This configuration sets the time after which failed nodes should be automatically deregistered from Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\ncluster_formation.consul.svc_ttl = 30\n# how soon should nodes that fail their health checks be unregistered by Consul?\n# this value is in seconds and must not be lower than 60 (a Consul requirement)\ncluster_formation.consul.deregister_after = 90\n```\n\n----------------------------------------\n\nTITLE: Using RAR Token with RabbitMQ Management API\nDESCRIPTION: Bash command that demonstrates how to access the RabbitMQ Management API using a Rich Authorization Request token. It uses curl with a token generated from a JSON file and signed with the appropriate keys.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=http://localhost:15672/api/overview TOKEN=$(bin/jwt_token rar-token.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Get with Timeout sequence diagram for AMQP 1.0\nDESCRIPTION: Diagram showing how the drain field enables a synchronous get operation with timeout in AMQP 1.0. The consumer sets drain=True to request either a message transfer or an immediate flow response, allowing it to detect timeouts unambiguously.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n    Receiver                                      Sender\n    =================================================================\n                                          ...\n    flow(link-credit=1)               ---------->\n  *wait for link-credit <= 0*\n    flow(drain=True)                  ---+   +--- transfer(...)\n                                          \\ /\n                                           x\n                                          / \\\n(1)                                   <--+   +-->\n(2)                                   <---------- flow(...)\n                                          ...\n    -----------------------------------------------------------------\n      (1) If a message is available within the timeout, it will\n          arrive at this point.\n      (2) If a message is not available within the timeout, the\n          drain flag will ensure that the sender promptly advances the\n          delivery-count until link-credit is consumed.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Topic Exchange Message Consumer in Go\nDESCRIPTION: This code implements a subscriber that receives log messages from a topic exchange. It allows binding to the exchange with multiple routing key patterns using wildcard characters (* and #). The consumer connects to RabbitMQ, declares the topic exchange, and creates a temporary queue to receive messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-go.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"log\"\n        \"os\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                \"logs_topic\", // name\n                \"topic\",      // type\n                true,         // durable\n                false,        // auto-deleted\n                false,        // internal\n                false,        // no-wait\n                nil,          // arguments\n        )\n        failOnError(err, \"Failed to declare an exchange\")\n\n        q, err := ch.QueueDeclare(\n                \"\",    // name\n                false, // durable\n                false, // delete when unused\n                true,  // exclusive\n                false, // no-wait\n                nil,   // arguments\n        )\n        failOnError(err, \"Failed to declare a queue\")\n\n        if len(os.Args) < 2 {\n                log.Printf(\"Usage: %s [binding_key]...\", os.Args[0])\n                os.Exit(0)\n        }\n        for _, s := range os.Args[1:] {\n                log.Printf(\"Binding queue %s to exchange %s with routing key %s\",\n                        q.Name, \"logs_topic\", s)\n                err = ch.QueueBind(\n                        q.Name,       // queue name\n                        s,            // routing key\n                        \"logs_topic\", // exchange\n                        false,\n                        nil)\n                failOnError(err, \"Failed to bind a queue\")\n        }\n\n        msgs, err := ch.Consume(\n                q.Name, // queue\n                \"\",     // consumer\n                true,   // auto ack\n                false,  // exclusive\n                false,  // no local\n                false,  // no wait\n                nil,    // args\n        )\n        failOnError(err, \"Failed to register a consumer\")\n\n        var forever chan struct{}\n\n        go func() {\n                for d := range msgs {\n                        log.Printf(\" [x] %s\", d.Body)\n                }\n        }()\n\n        log.Printf(\" [*] Waiting for logs. To exit press CTRL+C\")\n        <-forever\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing MacOS Application Firewall Help\nDESCRIPTION: Command to display help information for the socketfilterfw utility, which can vary between MacOS releases. This helps in understanding the available command line arguments for configuring the Application Firewall.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --help\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Deregistration of Failed Nodes in Consul\nDESCRIPTION: This configuration sets the time after which failed nodes should be automatically deregistered from Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\ncluster_formation.consul.svc_ttl = 30\n# how soon should nodes that fail their health checks be unregistered by Consul?\n# this value is in seconds and must not be lower than 60 (a Consul requirement)\ncluster_formation.consul.deregister_after = 90\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Port Range Maximum in RabbitMQ\nDESCRIPTION: Default configuration for the upper bound of server port range used for communication with other cluster members and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.port_range.max = 25672\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Authentication Attempts via HTTP API (JSON)\nDESCRIPTION: Example JSON response from the RabbitMQ HTTP API endpoint that provides a breakdown of authentication attempts per source. This endpoint requires source tracking to be enabled in the configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-03-01-auth-attempts-metrics/index.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\n   \"remote_address\":\"127.0.0.1\",\n   \"username\":\"guest\",\n   \"protocol\":\"http\",\n   \"auth_attempts\":533,\n   \"auth_attempts_failed\":0,\n   \"auth_attempts_succeeded\":533\n },\n {\n   \"remote_address\":\"127.0.0.1\",\n   \"username\":\"roger\",\n   \"protocol\":\"amqp091\",\n   \"auth_attempts\":10,\n   \"auth_attempts_failed\":10,\n   \"auth_attempts_succeeded\":0\n },\n {\n   \"remote_address\":\"127.0.0.1\",\n   \"username\":\"bugs\",\n   \"protocol\":\"amqp091\",\n   \"auth_attempts\":2,\n   \"auth_attempts_failed\":0,\n   \"auth_attempts_succeeded\":2\n }]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queue in rabbitmqadmin\nDESCRIPTION: These commands demonstrate how to delete a queue, including an idempotent deletion, using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" delete queue --name \"target.queue.name\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" delete queue --name \"target.queue.name\" --idempotently\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Signing Keys in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to set up multiple signing keys for OAuth 2.0 token verification. It defines a resource server ID, custom scope key, username claims, default key, signing key paths, and allowed algorithms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.additional_scopes_key = my_custom_scope_key\nauth_oauth2.preferred_username_claims.1 = username\nauth_oauth2.preferred_username_claims.2 = user_name\nauth_oauth2.default_key = id1\nauth_oauth2.signing_keys.id1 = test/config_schema_SUITE_data/certs/key.pem\nauth_oauth2.signing_keys.id2 = test/config_schema_SUITE_data/certs/cert.pem\nauth_oauth2.algorithms.1 = HS256\nauth_oauth2.algorithms.2 = RS256\n```\n\n----------------------------------------\n\nTITLE: Overriding Feature Flags on Initial Startup using Bash Environment Variable\nDESCRIPTION: This environment variable setting overrides the list of feature flags to enable on initial startup of a new, unclustered RabbitMQ node. It enables all feature flags in version 4.0.4 except for khepri_db.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_FEATURE_FLAGS=\"delete_ra_cluster_mqtt_node,virtual_host_metadata,stream_single_active_consumer,quorum_queue,classic_mirrored_queue_version,rabbit_mqtt_qos0_queue,implicit_default_bindings,empty_basic_get_metric,'rabbitmq_4.0.0',message_containers,user_limits,queue_master_locator,detailed_queues_endpoint,stream_sac_coordinator_unblock_group,stream_update_config_command,stream_queue,stream_filtering,rabbit_exchange_type_local_random,quorum_queue_non_voters,tracking_records_in_ets,direct_exchange_routing_v2,amqp_address_v1,transient_nonexcl_queues,message_containers_deaths_v2,classic_queue_mirroring,management_metrics_collection,maintenance_mode_status,listener_records_in_ets,feature_flags_v2,global_qos,classic_queue_type_delivery_support,mqtt_v5,ram_node_type,drop_unroutable_metric,restart_streams\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Schema Information\nDESCRIPTION: Command to list schema database tables and their properties in RabbitMQ. The example shows how to list table names and their active replicas, useful for database administration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl schema_info name active_replicas\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Detailed Queue Metrics Table\nDESCRIPTION: Comprehensive list of detailed queue metrics covering message counts, memory usage, and disk operations\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                            | Description                                                |\n|---------------------------------------------------|------------------------------------------------------------|\\n| rabbitmq_detailed_queue_consumers                 | Consumers on a queue                                       |\\n| rabbitmq_detailed_queue_consumer_capacity         | Consumer capacity                                          |\\n| rabbitmq_detailed_queue_consumer_utilisation      | Same as consumer capacity                                  |\\n| rabbitmq_detailed_queue_process_memory_bytes      | Memory in bytes used by the Erlang queue process           |\\n| rabbitmq_detailed_queue_messages_ram              | Ready and unacknowledged messages stored in memory         |\\n| rabbitmq_detailed_queue_messages_ram_bytes        | Size of ready and unacknowledged messages stored in memory |\\n| rabbitmq_detailed_queue_messages_ready_ram        | Ready messages stored in memory                            |\\n| rabbitmq_detailed_queue_messages_unacked_ram      | Unacknowledged messages stored in memory                   |\\n| rabbitmq_detailed_queue_messages_persistent       | Persistent messages                                        |\\n| rabbitmq_detailed_queue_messages_persistent_bytes | Size in bytes of persistent messages                       |\\n| rabbitmq_detailed_queue_messages_bytes            | Size in bytes of ready and unacknowledged messages         |\\n| rabbitmq_detailed_queue_messages_ready_bytes      | Size in bytes of ready messages                            |\\n| rabbitmq_detailed_queue_messages_unacked_bytes    | Size in bytes of all unacknowledged messages               |\\n| rabbitmq_detailed_queue_messages_paged_out        | Messages paged out to disk                                 |\\n| rabbitmq_detailed_queue_messages_paged_out_bytes  | Size in bytes of messages paged out to disk                |\\n| rabbitmq_detailed_queue_head_message_timestamp    | Timestamp of the first message in the queue, if any  |\\n| rabbitmq_detailed_queue_disk_reads_total          | Total number of times queue read messages from disk        |\\n| rabbitmq_detailed_queue_disk_writes_total         | Total number of times queue wrote messages to disk         |\\n| rabbitmq_detailed_stream_segments                 | Total number of stream segment files                        |\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Maximum Limit\nDESCRIPTION: Configuration to limit the maximum number of channels per connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max = 16\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Feature Flags in PowerShell\nDESCRIPTION: Command to list feature flags in RabbitMQ using the rabbitmqctl utility in Windows PowerShell. This helps verify the state of feature flags before attempting an upgrade.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_feature_flags --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ OAuth2 Additional Scopes Configuration\nDESCRIPTION: Configuration examples for RabbitMQ to extract scopes from different locations in the JWT token.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-keycloak.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nauth_oauth2.additional_scopes_key = realm_access.roles\n```\n\nLANGUAGE: json\nCODE:\n```\nauth_oauth2.additional_scopes_key = realm_access.roles resource_access.account.roles\n```\n\nLANGUAGE: json\nCODE:\n```\nauth_oauth2.additional_scopes_key = roles realm_access.roles resource_access.account.roles\n```\n\n----------------------------------------\n\nTITLE: Displaying AMQP 0-9-1 Classes Implementation Status in HTML\nDESCRIPTION: HTML table showing the implementation status of various AMQP 0-9-1 protocol classes in RabbitMQ. Includes classes such as connection, channel, exchange, queue, basic, and tx.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"amqpRules\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n    <tbody>\n        <tr>\n            <th>Current Status</th>\n            <th>Class</th>\n            <th>Notes</th>\n        </tr>\n        <tr id=\"class-status-connection\">\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>connection</td>\n            <td></td>\n        </tr>\n        <tr id=\"class-status-channel\">\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>channel</td>\n            <td></td>\n        </tr>\n        <tr id=\"class-status-exchange\">\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>exchange</td>\n            <td></td>\n        </tr>\n        <tr id=\"class-status-queue\">\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>queue</td>\n            <td></td>\n        </tr>\n        <tr id=\"class-status-basic\">\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>basic</td>\n            <td></td>\n        </tr>\n        <tr id=\"class-status-tx\">\n            <td class=\"statusCell status_partial\">partial</td>\n            <td>tx</td>\n            <td>See <a xmlns=\"https://www.rabbitmq.com/namespaces/ad-hoc/conformance\" href=\"./semantics#tx\">notes on tx support</a></td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Code Reference - PRECONDITION_FAILED Error\nDESCRIPTION: Channel-level exception code reference for queue declaration with mismatched attributes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/queues.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n406 (PRECONDITION_FAILED)\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON-Formatted Shovel Status with RabbitMQ CLI\nDESCRIPTION: Command for checking status of all shovels in JSON format and piping to jq for processing and formatting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shovel_status --formatter=json | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX Using PowerShell\nDESCRIPTION: Command to set a Dead Letter Exchange policy using rabbitmqctl in PowerShell. Configures 'my-dlx' as the DLX for all queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/dlx.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl set_policy DLX \".*\" \"{\"\"dead-letter-exchange\"\":\"\"my-dlx\"\"}\" --apply-to queues --priority 7\n```\n\n----------------------------------------\n\nTITLE: Configuring Advertised Host and Port for TLS Connections in RabbitMQ Stream\nDESCRIPTION: Configures the advertised host and port for both regular and TLS connections in RabbitMQ Stream, allowing different hostnames and ports to be advertised to clients for each connection type.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nstream.advertised_host = private-rabbitmq-1\nstream.advertised_port = 12345\nstream.advertised_tls_host = public-rabbitmq-1\nstream.advertised_tls_port = 12344\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits via HTTP API\nDESCRIPTION: This HTTP API endpoint is used to clear user limits. It requires the username and limit type in the URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nDELETE /api/user-limits/{username}/{limit}\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ (Bash)\nDESCRIPTION: Sets up a federation upstream named 'origin' pointing to a remote RabbitMQ host using the rabbitmqctl command line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-exchanges/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream origin '{\"uri\":\"amqp://remote-host.local:5672\"}'\n```\n\n----------------------------------------\n\nTITLE: Checking Effective ERL_MAX_PORTS Value in RabbitMQ\nDESCRIPTION: Command to retrieve the current port limit configuration from a running RabbitMQ node using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'erlang:system_info(port_limit).'\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ (Bash)\nDESCRIPTION: Sets up a federation upstream named 'origin' pointing to a remote RabbitMQ host using the rabbitmqctl command line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federated-exchanges/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream origin '{\"uri\":\"amqp://remote-host.local:5672\"}'\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Binding Operation Result\nDESCRIPTION: Shell output showing the successful completion of a binding operation between an exchange named 'logs' and two queues with server-assigned names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ AMQP 0-9-1 Implementation of basic.reject Method\nDESCRIPTION: Documentation of RabbitMQ's implementation of the basic.reject method, which differs from the AMQP specification. The server discards messages when requeue=false and requeues when requeue=true, without preventing redelivery to the same client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_partial\">partial</td>\n<td>basic.reject</td>\n<td>\n    The server discards the message when requeue=false, and requeues it when requeue=true. No attempt is made to prevent redelivery to the same client. The server does not interrupt the sending of message content of a\n    rejected message, i.e. the message is always delivered in full to the client.\n</td>\n```\n\n----------------------------------------\n\nTITLE: Implementing Guaranteed Message Delivery with Transactions in RabbitMQ Using Java\nDESCRIPTION: This snippet demonstrates how to use transactions to ensure reliable message delivery in RabbitMQ. The publisher sends persistent messages and commits each transaction individually, providing strong guarantees but with significant performance overhead.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-02-10-introducing-publisher-confirms/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nch.txSelect();\nfor (int i = 0; i < MSG_COUNT; ++i) {\n        ch.basicPublish(\"\", QUEUE_NAME,\n                            MessageProperties.PERSISTENT_BASIC,\n                            \"nop\".getBytes());\n        ch.txCommit();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mirroring Policy for All Nodes via HTTP API\nDESCRIPTION: HTTP API request to set a policy that mirrors queues with names starting with \"two.\" to all nodes in the cluster, with automatic synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/ha-two\n{\n  \"pattern\":\"^two\\.\",\n  \"definition\": {\n    \"ha-mode\":\"all\",\n    \"ha-sync-mode\":\"automatic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Connection and Channel Churn Metrics\nDESCRIPTION: Shows how to check connection, queue/stream, and channel churn metrics in the cluster. This is useful for identifying potential issues with high connection turnover.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin show churn\n```\n\n----------------------------------------\n\nTITLE: Adding amqp_client Dependency with Mix for Elixir\nDESCRIPTION: Specifies how to add the rabbit_common dependency to an Elixir project using Mix. This is required for using the Erlang RabbitMQ client in Elixir applications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n{:rabbit_common, \"~> 3.8\"}\n```\n\n----------------------------------------\n\nTITLE: Restarting and Deleting Shovels via CLI and HTTP\nDESCRIPTION: Commands for restarting and deleting shovels using both CLI tools and HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl restart_shovel \"my-shovel\"\nrabbitmqctl clear_parameter shovel \"my-shovel\"\n# Note: this user's access is limited to localhost!\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/parameters/shovel/%2f/my-shovel\n```\n\n----------------------------------------\n\nTITLE: LDAP TLS Version Configuration\nDESCRIPTION: Configures allowed TLS versions for LDAP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# use TLSv1.2 only\nssl_options.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: AMQPS URI Syntax Definition\nDESCRIPTION: Defines the basic syntax format for AMQPS URIs. The scheme follows the same pattern as AMQP URIs but uses the 'amqps://' prefix to indicate a secure connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-spec.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\namqps_URI      = \"amqps://\" amqp_authority [ \"/\" vhost ]\n```\n\n----------------------------------------\n\nTITLE: Peeking Queue Messages in RabbitMQ\nDESCRIPTION: Command to view message details at a specific position in a quorum queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-queues.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues peek --vhost \"a-vhost\" \"a-queue\" \"1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Sparkplug Support Configuration\nDESCRIPTION: Configuration setting to enable Sparkplug support in RabbitMQ MQTT plugin to handle special topic naming conventions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/mqtt.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.sparkplug = true\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key for RPM\nDESCRIPTION: Imports the RabbitMQ signing key for RPM-based systems using rpm command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/signatures.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrpm --import https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Service Management Commands\nDESCRIPTION: Basic service control and status checking commands for RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# stop the local node\nsudo service rabbitmq-server stop\n\n# start it back\nsudo service rabbitmq-server start\n\n# check on service status as observed by service manager\nsudo service rabbitmq-server status\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Server with OpenSSL s_server\nDESCRIPTION: Starts an OpenSSL test server on port 8443 using provided certificates and keys to verify TLS configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server -accept 8443 \\\n  -cert server_certificate.pem -key server_key.pem -CAfile ca_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: AMQPS URI Syntax Definition\nDESCRIPTION: Defines the basic syntax format for AMQPS URIs. The scheme follows the same pattern as AMQP URIs but uses the 'amqps://' prefix to indicate a secure connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/uri-spec.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\namqps_URI      = \"amqps://\" amqp_authority [ \"/\" vhost ]\n```\n\n----------------------------------------\n\nTITLE: Configuring hosts file for OAuth 2.0 setup\nDESCRIPTION: Host file entries required for the OAuth 2.0 authentication setup with UAA and RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n127.0.0.1  localhost uaa rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Creating Debug Pod for RabbitMQ Cluster Troubleshooting in Kubernetes\nDESCRIPTION: This YAML snippet defines a Pod that mounts the persistent volume of a RabbitMQ node for debugging purposes. It's useful when RabbitMQ pods are in a CrashLoopBackOff state and direct access is needed for troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: debug-rabbitmq\nspec:\n  volumes:\n    - name: persistence\n      persistentVolumeClaim:\n        claimName: persistence-RMQ_NAME-server-2\n  containers:\n    - name: debug-rabbitmq\n      image: ... # you can use any image here, but for some tasks you should use the same image you use in the statefulset\n      command: [\"/bin/sleep\", \"36000\"]\n      volumeMounts:\n        - mountPath: /var/lib/rabbitmq/mnesia/\n          name: persistence\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server with Benchmark Configuration\nDESCRIPTION: Bash command to start RabbitMQ server with specific plugins and configuration for benchmark testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker \\\n    TEST_TMPDIR=\"$HOME/scratch/rabbit/test\" \\\n    RABBITMQ_CONFIG_FILE=\"$HOME/scratch/rabbit/advanced.config\" \\\n    PLUGINS=\"rabbitmq_prometheus rabbitmq_management rabbitmq_amqp1_0\" \\\n    RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+S 3\"\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Application Properties Configuration\nDESCRIPTION: Configuration for adding custom application properties when republishing messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n{application_properties, [\n  {<<\"application-key-1\">>, <<\"value-1\">>},\n  {<<\"application-key-2\">>, <<\"value-2\">>}\n]}\n```\n\n----------------------------------------\n\nTITLE: Getting RabbitMQ Cluster Status\nDESCRIPTION: Command to check the current RabbitMQ cluster name and status\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q cluster_status\n```\n\n----------------------------------------\n\nTITLE: Importing Team RabbitMQ's main signing key for Erlang PPA\nDESCRIPTION: Imports the Team RabbitMQ main signing key for use with the Team RabbitMQ modern Erlang PPA on Ubuntu systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashing Algorithm in RabbitMQ\nDESCRIPTION: Sets the password hashing module to SHA-512 in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\npassword_hashing_module = rabbit_password_hashing_sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashing Algorithm in RabbitMQ\nDESCRIPTION: Sets the password hashing module to SHA-512 in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\npassword_hashing_module = rabbit_password_hashing_sha512\n```\n\n----------------------------------------\n\nTITLE: Example of classic Erlang-style SSL configuration in advanced.config\nDESCRIPTION: A snippet showing how to configure the same SSL options using the classic Erlang terms format in advanced.config. This demonstrates the more verbose syntax required for nested configuration structures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n%% A classic format snippet, now used by advanced.config files.\n[\n  {rabbit, [{ssl_options, [{cacertfile,           \"/path/to/ca_certificate.pem\"},\n                           {certfile,             \"/path/to/server_certificate.pem\"},\n                           {keyfile,              \"/path/to/server_key.pem\"},\n                           {verify,               verify_peer},\n                           {fail_if_no_peer_cert, true}]}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Stream with AMQP 1.0 in RabbitMQ 3.13 Using Quiver (Failure Case)\nDESCRIPTION: Command and results showing RabbitMQ 3.13's inability to handle the AMQP 1.0 stream workload. The test attempts to send 1 million messages but fails with a receiver timeout after processing only about 4,000 messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# quiver //host.docker.internal//amq/queue/my-stream \\\n    --durable --count 1m --duration 10m --body-size 12 --credit 5000\n\n---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------\nTime [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]\n-----------------------------------------------------  -----------------------------------------------------  --------\n     2.1        196,350      98,077       12     70.1       2.1          4,094       2,045        0      7.7       195\n     4.1        392,956      98,205       13    138.5       4.1          4,094           0        0      7.7         0\n     6.1        524,026      65,470       10    196.5       6.1          4,094           0        0      7.7         0\n     8.1        655,096      65,470       11    259.4       8.1          4,094           0        0      7.7         0\n    10.1        786,166      65,470       10    307.5      10.1          4,094           0        0      7.7         0\nreceiver timed out\n    12.1        917,236      65,470        9    355.5      12.1          4,094           0        0      7.7         0\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Stream in C#\nDESCRIPTION: This code demonstrates how to create a Producer, publish messages to a stream, and use a CountdownEvent to ensure all messages are confirmed before closing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar messageCount = 100;\nvar confirmedCde = new CountdownEvent(messageCount);\nvar producer = await Producer.Create(new ProducerConfig(streamSystem, stream) {\n    ConfirmationHandler = async confirmation => {\n        if (confirmation.Status == ConfirmationStatus.Confirmed) {\n            confirmedCde.Signal();\n        }\n        await Task.CompletedTask.ConfigureAwait(false);\n    }\n});\n\nConsole.WriteLine(\"Publishing {0} messages...\", messageCount);\nfor (int i = 0; i < messageCount; i++) {\n    var body = i == messageCount - 1 ? \"marker\" : \"hello\";\n    await producer.Send(new Message(Encoding.UTF8.GetBytes(body)));\n}\n\nconfirmedCde.Wait();\nConsole.WriteLine(\"Messages confirmed.\");\nawait producer.Close();\nawait streamSystem.Close();\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Management HTTP API\nDESCRIPTION: cURL command to access the RabbitMQ management HTTP API endpoint for metrics. Uses Basic Authentication and runs on port 15672 by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u {username}:{password} {hostname}:15672/api/overview\n```\n\n----------------------------------------\n\nTITLE: Disabling a Deprecated Feature in RabbitMQ Configuration\nDESCRIPTION: This snippet shows how to configure RabbitMQ to disable a deprecated feature for testing purposes. It sets the permit flag for a specific deprecated feature to false in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/deprecated-features/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Try RabbitMQ as if the deprecated feature was gone.\ndeprecated_features.permit.some_deprecated_feature = false\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for LDAP Connections\nDESCRIPTION: Enable TLS for LDAP connections and configure basic TLS options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\n# enables TLS for connections to the LDAP server\nauth_ldap.use_ssl   = true\n\n# Disables peer certificate chain verification. See the section on Peer Verification\n# below.\n#\n# Doing so loses one of the key benefits of TLS and make the setup less secure\n# but also simplifies node configuration.\nauth_ldap.ssl_options.verify = verify_none\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fanout Exchange in Ruby with Bunny\nDESCRIPTION: Creates a fanout exchange named 'logs' that broadcasts all messages to all bound queues. This is a fundamental step in the publish/subscribe pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nchannel.fanout('logs')\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching of Authentication Refusals\nDESCRIPTION: Configuration for enabling caching of negative authentication and authorization decisions. By default, only positive decisions are cached, but setting cache_refusals to true allows failed authentication attempts to be cached as well.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-cache-backend.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_cache.cache_refusals = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth Providers in RabbitMQ\nDESCRIPTION: Example configuration for setting up two separate resource servers (prod and dev) with different identity providers. This demonstrates how to configure the scope prefix and associate each resource server with its respective OAuth provider.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.resource_servers.1.id = prod\nauth_oauth2.resource_servers.1.oauth_provider_id = idp_prod\nauth_oauth2.resource_servers.2.id = dev\nauth_oauth2.resource_servers.2.oauth_provider_id = idp_dev\nauth_oauth2.oauth_providers.idp_prod.issuer = https://idp_prod.com\nauth_oauth2.oauth_providers.idp_dev.issuer = https://idp_dev.com\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth 2.0 Plugin in RabbitMQ\nDESCRIPTION: Command to enable the OAuth 2.0 authentication backend plugin in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_auth_backend_oauth2\n```\n\n----------------------------------------\n\nTITLE: Enabling All Stable Feature Flags in RabbitMQ using Bash\nDESCRIPTION: This command enables all stable feature flags in RabbitMQ using the rabbitmqctl CLI tool. It does not enable experimental feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Configuring Erlang Kernel Options for Network Performance\nDESCRIPTION: Advanced configuration for the Erlang VM kernel settings to optimize network connections by disabling Nagle's algorithm for inter-node connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_27\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [\n    {inet_default_connect_options, [{nodelay, true}]},\n    {inet_default_listen_options,  [{nodelay, true}]}\n  ]}].\n```\n\n----------------------------------------\n\nTITLE: Configuring Cipher Suites (Classic Config Format)\nDESCRIPTION: This snippet shows how to configure TLS options including cipher suites in the classic RabbitMQ configuration format using Erlang syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_37\n\nLANGUAGE: erlang\nCODE:\n```\n%% list allowed ciphers\n[\n {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                          {certfile,  \"/path/to/server_certificate.pem\"},\n                          {keyfile,   \"/path/to/server_key.pem\"},\n                          {versions, ['tlsv1.2', 'tlsv1.1']},\n                          %% This list is just an example!\n                          %% Not all cipher suites are available on all machines.\n                          %% Cipher suite order is important: preferred suites\n                          %% should be listed first.\n                          %% Different suites have different security and CPU load characteristics.\n                          {ciphers,  [\n                            \"ECDHE-ECDSA-AES256-GCM-SHA384\",\n                            \"ECDHE-RSA-AES256-GCM-SHA384\",\n                            \"ECDH-ECDSA-AES256-GCM-SHA384\",\n                            \"ECDH-RSA-AES256-GCM-SHA384\",\n                            \"DHE-RSA-AES256-GCM-SHA384\",\n                            \"DHE-DSS-AES256-GCM-SHA384\",\n                            \"ECDHE-ECDSA-AES128-GCM-SHA256\",\n                            \"ECDHE-RSA-AES128-GCM-SHA256\",\n                            \"ECDH-ECDSA-AES128-GCM-SHA256\",\n                            \"ECDH-RSA-AES128-GCM-SHA256\",\n                            \"DHE-RSA-AES128-GCM-SHA256\",\n                            \"DHE-DSS-AES128-GCM-SHA256\"\n                            ]}\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Running RPC Server and Client in Elixir\nDESCRIPTION: These commands demonstrate how to run the RPC server and client implementations using the Elixir Mix tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-elixir.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmix run rpc_server.exs\n# => [x] Awaiting RPC requests\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix run rpc_client.exs\n# => [x] Requesting fib(30)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Classes for RabbitMQ Stream Producer\nDESCRIPTION: Java import statements for the necessary classes to create a RabbitMQ stream producer. These imports are required at the top of the Send.java file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.stream.*;\nimport java.io.IOException;\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Management UI with OAuth 2.0 Service Provider Initiated Login\nDESCRIPTION: Configuration settings in rabbitmq.conf to enable OAuth 2.0 authentication for the Management UI with service provider initiated login flow.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_client_code\nmanagement.oauth_provider_url = https://uaa:8443\n```\n\n----------------------------------------\n\nTITLE: Running the Log Receiver to Save Logs to a File\nDESCRIPTION: Runs the log receiver script and redirects its output to a file to save the logs permanently.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs.exs > logs_from_rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Publishing Filtered Messages to RabbitMQ Stream in Java\nDESCRIPTION: Demonstrates how to publish a message with a filter value to a stream using the x-stream-filter-value header.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(\n  \"\", // default exchange\n  \"my-stream\",\n  new AMQP.BasicProperties.Builder()\n    .headers(Collections.singletonMap(\n      \"x-stream-filter-value\", \"california\" // set filter value\n    ))\n    .build(),\n  body\n);\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Channel Metrics Tables\nDESCRIPTION: Channel-specific metrics for monitoring message processing and consumer behavior\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                         | Description                                                           |\n|------------------------------------------------|-----------------------------------------------------------------------|\\n| rabbitmq_detailed_channel_consumers            | Consumers on a channel                                                |\\n| rabbitmq_detailed_channel_messages_unacked     | Delivered but not yet acknowledged messages                           |\\n| rabbitmq_detailed_channel_messages_unconfirmed | Published but not yet confirmed messages                              |\\n| rabbitmq_detailed_channel_messages_uncommitted | Messages received in a transaction but not yet committed              |\\n| rabbitmq_detailed_channel_acks_uncommitted     | Message acknowledgements in a transaction not yet committed           |\\n| rabbitmq_detailed_consumer_prefetch            | Limit of unacknowledged messages for each consumer                    |\\n| rabbitmq_detailed_channel_prefetch             | Total limit of unacknowledged messages for all consumers on a channel |\n```\n\n----------------------------------------\n\nTITLE: Disabling a Deprecated Feature in RabbitMQ Configuration\nDESCRIPTION: This snippet shows how to configure RabbitMQ to disable a deprecated feature for testing purposes. It sets the permit flag for a specific deprecated feature to false in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/deprecated-features/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Try RabbitMQ as if the deprecated feature was gone.\ndeprecated_features.permit.some_deprecated_feature = false\n```\n\n----------------------------------------\n\nTITLE: Increasing Erlang Process Limit via VM Flag\nDESCRIPTION: Alternative approach to increase the Erlang process limit to 2 million using the direct VM flag for environments with high connection counts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+P 2000000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Upstream Parameter in PowerShell\nDESCRIPTION: PowerShell command to define a federation upstream connection parameter. This example shows the beginning of the command, though it's incomplete in the original text.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# target.hostname is just an example, replace it with a URI\n# of the target node (usually a member of a remote node/cluster,\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Boot Status (Bash)\nDESCRIPTION: Reports if the RabbitMQ application is currently booting on the target node. Useful for monitoring startup processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics is_booting\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Stream Client in JavaScript\nDESCRIPTION: Code to import the RabbitMQ Stream client library in a Node.js application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst rabbit = require(\"rabbitmq-stream-js-client\")\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Windows User Trust Store\nDESCRIPTION: PowerShell command to add a certificate to the Windows user Root certificate store. This allows the .NET client to trust the RabbitMQ server certificate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows\ncertmgr -add -all \\path\\to\\cacert.cer -s Root\n```\n\n----------------------------------------\n\nTITLE: Retrieving Relative Memory Breakdown Using HTTP API\nDESCRIPTION: Demonstrates how to get a relative breakdown of memory usage as percentages using the HTTP API. This endpoint is useful for identifying the top memory-consuming components in a RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncurl -s -u guest:guest http://127.0.0.1:15672/api/nodes/rabbit@mercurio/memory/relative | python -m json.tool\n\n{\n    \"memory\": {\n        \"allocated_unused\": 32,\n        \"atom\": 1,\n        \"binary\": 5,\n        \"code\": 22,\n        \"connection_channels\": 2,\n        \"connection_other\": 1,\n        \"connection_readers\": 1,\n        \"connection_writers\": 1,\n        \"metrics\": 1,\n        \"mgmt_db\": 1,\n        \"mnesia\": 1,\n        \"msg_index\": 1,\n        \"other_ets\": 2,\n        \"other_proc\": 21,\n        \"other_system\": 19,\n        \"plugins\": 3,\n        \"queue_procs\": 4,\n        \"reserved_unallocated\": 0,\n        \"total\": 100\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Worker Consumers for RabbitMQ in Shell\nDESCRIPTION: Commands to run two worker.py processes simultaneously in separate console windows. These workers will consume messages from the queue in a round-robin fashion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\npython worker.py\n# => [*] Waiting for messages. To exit press CTRL+C\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\npython worker.py\n# => [*] Waiting for messages. To exit press CTRL+C\n```\n\n----------------------------------------\n\nTITLE: Network Settings Configuration\nDESCRIPTION: TCP socket options configuration including backlog, nodelay, linger and keepalive settings\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on = true\ntcp_listen_options.linger.timeout = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel Between AMQP 0.9.1 Endpoints\nDESCRIPTION: Configuration for a shovel that transfers messages between AMQP 0.9.1 endpoints. Includes source and destination broker configurations, exchange declarations, queue bindings, and message handling parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n  [ {shovels, [ {my_first_shovel,\n                  [ {source,\n                      [ {protocol, amqp091},\n                        {uris, [ \"amqp://fred:secret@host1.domain/my_vhost\",\n                                  \"amqp://john:secret@host2.domain/my_vhost\" ]},\n                        {declarations, [ {'exchange.declare',\n                                            [ {exchange, <<\"my_fanout\">>},\n                                              {type, <<\"fanout\">>},\n                                              durable\n                                            ]},\n                                          {'queue.declare',\n                                            [{arguments,\n                                                [{<<\"x-message-ttl\">>, long, 60000}]}]},\n                                          {'queue.bind',\n                                            [ {exchange, <<\"my_fanout\">>},\n                                              {queue,    <<>>}\n                                            ]}\n                                          ]},\n                        {queue, <<>>},\n                        {prefetch_count, 10}\n                      ]},\n                    {destination,\n                      [ {protocol, amqp091},\n                        {uris, [\"amqp://\"]},\n                        {declarations, [ {'exchange.declare',\n                                            [ {exchange, <<\"my_direct\">>},\n                                              {type, <<\"direct\">>},\n                                              durable\n                                            ]}\n                                        ]},\n                        {publish_properties, [ {delivery_mode, 2} ]},\n                        {add_forward_headers, true},\n                        {publish_fields, [ {exchange, <<\"my_direct\">>},\n                                          {routing_key, <<\"from_shovel\">>}\n                                          ]}\n                          ]},\n                    {ack_mode, on_confirm},\n                    {reconnect_delay, 5}\n                  ]}\n              ]}\n  ]}\n```\n\n----------------------------------------\n\nTITLE: Checking User Limits in Linux\nDESCRIPTION: Command to display the current user's resource limits, including the maximum number of open files which is important for RabbitMQ performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-generic-unix.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nulimit -a\n```\n\n----------------------------------------\n\nTITLE: Listing Queue Metrics in RabbitMQ using Bash\nDESCRIPTION: This command displays the depth (number of messages) and number of consumers for each queue in the virtual host named 'my-vhost'. It demonstrates the usage of the 'list_queues' command with specific queue information items.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues -p my-vhost messages consumers\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Configuration File Path in RabbitMQ Environment\nDESCRIPTION: This example shows how to set a custom path for the RabbitMQ configuration file in the rabbitmq-env.conf file. It changes the location to \"/data/services/rabbitmq/rabbitmq.conf\".\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-env.conf.5.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# I am a complete rabbitmq-env.conf file.\n# Comment lines start with a hash character.\n# This is a /bin/sh script file - use ordinary envt var syntax\nCONFIG_FILE=/data/services/rabbitmq/rabbitmq.conf\n```\n\n----------------------------------------\n\nTITLE: Cloning the RabbitMQ .NET Client Repository\nDESCRIPTION: Command to clone the RabbitMQ .NET client repository from GitHub. This is the first step in building the client from source.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-dotnet-client.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-dotnet-client.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Stack IPv4/IPv6 Listeners\nDESCRIPTION: Shows how to configure RabbitMQ to listen on both IPv4 and IPv6 localhost interfaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = 127.0.0.1:5672\nlisteners.tcp.2 = ::1:5672\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenSSL Supported Cipher Suites\nDESCRIPTION: Shows all cipher suites supported by the local OpenSSL installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ciphers -v\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Cluster Operator with kubectl\nDESCRIPTION: This command applies the latest version of the RabbitMQ Cluster Operator to your Kubernetes cluster by installing the operator manifest directly from the GitHub releases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f \"https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml\"\n# namespace/rabbitmq-system created\n# customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com created\n# serviceaccount/rabbitmq-cluster-operator created\n# role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role created\n# clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role created\n# rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding created\n# clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding created\n# deployment.apps/rabbitmq-cluster-operator created\n```\n\n----------------------------------------\n\nTITLE: Viewing PerfTest Consumer Logs\nDESCRIPTION: Command to view the logs of the running consumer application to debug OAuth 2.0 authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs consumer -f\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Message Flow Diagram with Mermaid\nDESCRIPTION: This Mermaid flowchart visualizes a RabbitMQ message flow. It shows a producer (P) sending messages to a direct exchange (X), which then routes messages with the 'black' routing key to two queues (Q₁ and Q₂). Each queue is consumed by a separate consumer (C₁ and C₂).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T4DiagramMultipleBindings.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{direct}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X -- black --> Q1 & Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Publishing Tasks to RabbitMQ Queue using Java\nDESCRIPTION: These bash commands demonstrate how to run the NewTask program to publish different messages (tasks) to the RabbitMQ queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\njava -cp $CP NewTask First message.\njava -cp $CP NewTask Second message..\njava -cp $CP NewTask Third message...\njava -cp $CP NewTask Fourth message....\njava -cp $CP NewTask Fifth message.....\n```\n\n----------------------------------------\n\nTITLE: Specifying AMQP Protocol for Shovel Source\nDESCRIPTION: Example of how to specify the AMQP protocol version for a shovel source. This snippet shows setting it to AMQP 0-9-1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n%% for AMQP 0-9-1\n{protocol, amqp091}\n```\n\n----------------------------------------\n\nTITLE: Clearing a Specific User Limit in RabbitMQ\nDESCRIPTION: Command to clear the maximum connection limit for the user 'limited_user'. This removes only the specified limit type while preserving other limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits limited_user 'max-connections'\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Mono Trust Store on Linux\nDESCRIPTION: Bash command for adding a certificate to the Trust store on Linux systems using Mono's certmgr tool. This enables the certificate to be trusted by .NET applications running on Mono.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Linux with Mono\ncertmgr -add -c Trust /path/to/cacert.cer\n```\n\n----------------------------------------\n\nTITLE: TCP Keepalive Configuration\nDESCRIPTION: Setting for TCP keepalive functionality\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.keepalive = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Policy in CMD\nDESCRIPTION: This snippet illustrates how to set a policy for an Alternate Exchange using the rabbitmqctl command in CMD. It applies an AE named 'my-ae' to an exchange called 'my-direct'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ae.md#2025-04-09_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat set_policy AE \"^my-direct$\" \"{\"\"alternate-exchange\":\"\"my-ae\"\"}\" --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Failed Benchmark in RabbitMQ 3.13\nDESCRIPTION: Performance benchmark output showing failed message handling in RabbitMQ 3.13 with enhanced flow control settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n# quiver //host.docker.internal//amq/queue/my-quorum-queue \\\n    --durable --count 1m --duration 10m --body-size 12 --credit 5000\n\n---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------\nTime [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]\n-----------------------------------------------------  -----------------------------------------------------  --------\n     2.1        163,582      81,709       11     84.2       2.1         29,548      14,759        3      7.5       840\n     4.1        336,380      86,356       12    185.3       4.1         29,840         146        0      7.5     2,331\n     6.1        524,026      93,729       14    328.0       6.1         29,840           0        0      7.5         0\n     8.1        687,864      81,837       11    462.3       8.1         31,302         730        1      7.5     6,780\n    10.1        884,470      98,303       14    605.4      10.1         31,447          72        0      7.5     7,897\n    12.1        999,924      57,669        7    687.5      12.1         31,447           0        0      7.5         0\n    14.1        999,924           0        0    687.5      14.1         31,447           0        0      7.5         0\n    16.1        999,924           0        0    687.5      16.1         31,447           0        1      7.5         0\n    18.1        999,924           0        1    688.3      18.1         31,447           0        0      7.5         0\nreceiver timed out\n    20.1        999,924           0        0    688.3      20.1         31,447           0        0      7.5         0\n```\n\n----------------------------------------\n\nTITLE: Updating RPM Package Sources\nDESCRIPTION: Shell commands to clean and update yum package sources after migrating repository configuration from Bintray to alternative sources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-03-31-migrate-off-of-bintray/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum clean all\nsudo yum update -y\n```\n\n----------------------------------------\n\nTITLE: Deleting a Shovel After Queue Migration\nDESCRIPTION: This command removes a shovel configuration after the queue has been drained. It's used to clean up temporary migration resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_shovel migrate-QUEUE_TO_MIGRATE\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat delete_shovel shovel migrate-QUEUE_TO_MIGRATE\n```\n\n----------------------------------------\n\nTITLE: Enabling a Denied Deprecated Feature in RabbitMQ Configuration\nDESCRIPTION: This snippet demonstrates how to re-enable a deprecated feature that is denied by default in RabbitMQ. It sets the permit flag for a specific deprecated feature to true in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/deprecated-features/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Permit a deprecated feature that is denied by default.\ndeprecated_features.permit.some_deprecated_feature = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Acquisition Timeout for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Configuration for the timeout period when acquiring a distributed lock during node boot with Consul peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# lock acquisition timeout in seconds\n# default: 300\n# cluster_formation.consul.lock_wait_time is an alias\ncluster_formation.consul.lock_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: Example of In Nested Group Query Configuration in RabbitMQ LDAP\nDESCRIPTION: Example configuration that sets a group lookup base and grants virtual host access based on nested group membership with a single_level scope.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_24\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {group_lookup_base, \"ou=groups,dc=example,dc=com\"},\n  {vhost_access_query, {in_group_nested, \"cn=${vhost}-groups,ou=groups,dc=example,dc=com\", \"member\", single_level}}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Routing Keys in AMQP 1.0\nDESCRIPTION: To use multiple routing keys in AMQP 1.0, the publisher sets a message annotation with the key 'x-cc' and the value as a list of strings. Each string in the list represents an additional routing key. These 'CC' routing keys are used in addition to the routing key provided in the AMQP address string.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/sender-selected.md#2025-04-09_snippet_0\n\nLANGUAGE: AMQP\nCODE:\n```\nmessage-annotations:\n  x-cc: [\"routing_key_1\", \"routing_key_2\", \"routing_key_3\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH for RabbitMQ CLI Tools\nDESCRIPTION: Commands to add RabbitMQ CLI tools to the system PATH for both Intel and Apple Silicon Macs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-homebrew.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# for macOS Intel\nexport PATH=$PATH:/usr/local/sbin\n# for Apple Silicon\nexport PATH=$PATH:/opt/homebrew/sbin\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth 2.0 Configuration\nDESCRIPTION: Command to start RabbitMQ configured with UAA as its authorization server for OAuth 2.0 authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Adapting Erlang Testcase for Feature Flag Handling\nDESCRIPTION: Example from dynamic_qq_SUITE.erl showing how to modify a testsuite to check and enable feature flags before running tests. Uses rabbitmq-ct-helpers to manage feature flag enablement and handle unsupported features.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\ninit_per_testcase(Testcase, Config) ->\n    % (...)\n\n    % 1.\n    % The broker or cluster is started: we rely on this to query feature\n    % flags.\n    Config1 = rabbit_ct_helpers:run_steps(\n                Config,\n                rabbit_ct_broker_helpers:setup_steps() ++\n                rabbit_ct_client_helpers:setup_steps()),\n\n    % 2.\n    % We try to enable the `quorum_queue` feature flag. The helper is\n    % responsible for checking if the feature flag is supported and\n    % enabling it.\n    case rabbit_ct_broker_helpers:enable_feature_flag(Config1, quorum_queue) of\n        ok ->\n            % The feature flag is enabled at this point. The setup can\n            % continue to play with `Config1` and the cluster.\n            Config1;\n        Skip ->\n            % The feature flag is unavailable/unsupported. The setup\n            % calls `end_per_testcase()` to stop the node/cluster and\n            % skips the testcase.\n            end_per_testcase(Testcase, Config1),\n            Skip\n    end.\n```\n\n----------------------------------------\n\nTITLE: Extracting Single Memory Value with RabbitMQ API and jq\nDESCRIPTION: This snippet shows how to extract a single memory value (total allocated) from the RabbitMQ HTTP API using jq to parse the JSON response. This approach is useful for scripting and monitoring scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -u guest:guest -X GET http://127.0.0.1:15672/api/nodes/rabbit@hostname/memory | jq \".memory.total.allocated\"\n# => 397365248\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Analysis for AMQP 0.9.1 in RabbitMQ 4.0\nDESCRIPTION: Erlang shell output showing memory statistics and process count for RabbitMQ 4.0's AMQP 0.9.1 implementation. Shows total memory usage of 5.4GB with approximately 600K processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\n1> erlang:memory().\n[{total,5409763512},\n {processes,4716150248},\n {processes_used,4715945080},\n {system,693613264},\n {atom,991489},\n {atom_used,962578},\n {binary,187229040},\n {code,19118766},\n {ets,235605424}]\n\n2> erlang:system_info(process_count).\n600314\n```\n\n----------------------------------------\n\nTITLE: Setting a Listener on a Consumer in Java\nDESCRIPTION: Illustrates how to add a listener to a RabbitMQ consumer in Java. The listener can react to state changes of the consumer instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_69\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = connection.consumerBuilder()\n    .listeners(context -> {\n        // ...\n    })\n    .queue(\"my-queue\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: LDAP VHost Access Query Configuration in Erlang\nDESCRIPTION: Example configuration for controlling virtual host access through LDAP queries. Checks if a corresponding Organizational Unit exists in LDAP for the requested vhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-02-07-who-are-you-authentication-and-authorisation-in-rabbitmq-231/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{vhost_access_query, {exists, \"ou=${vhost},ou=vhosts,dc=example,dc=com\"}}\n```\n\n----------------------------------------\n\nTITLE: Receiving All Logs with Topic Exchange in Bash\nDESCRIPTION: This command runs the receive_logs_topic.js script to receive all logs by using the '#' wildcard as the routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./receive_logs_topic.js \"#\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Diagnostics Commands\nDESCRIPTION: Commands for checking RabbitMQ node status and diagnostics\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n\ncat /proc/$RABBITMQ_BEAM_PROCESS_PID/limits\n\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Basic TLS Connection Example in Java Client\nDESCRIPTION: Java example demonstrating how to establish a basic TLS connection to RabbitMQ without certificate verification. Creates a connection, publishes a message and retrieves it back.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example1 {\n\n    public static void main(String[] args) throws Exception {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"localhost\");\n        factory.setPort(5671);\n\n        factory.useSslProtocol();\n        // Tells the library to setup the default Key and Trust managers for you\n        // which do not do any form of remote server trust verification\n\n        Connection conn = factory.newConnection();\n        Channel channel = conn.createChannel();\n\n        // non-durable, exclusive, auto-delete queue\n        channel.queueDeclare(\"rabbitmq-java-test\", false, true, true, null);\n        channel.basicPublish(\"\", \"rabbitmq-java-test\", null, \"Hello, World\".getBytes());\n\n        GetResponse chResponse = channel.basicGet(\"rabbitmq-java-test\", false);\n        if (chResponse == null) {\n            System.out.println(\"No message retrieved\");\n        } else {\n            byte[] body = chResponse.getBody();\n            System.out.println(\"Received: \" + new String(body));\n        }\n\n        channel.close();\n        conn.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Third Node to a RabbitMQ Cluster\nDESCRIPTION: Commands to join a third node to an existing RabbitMQ cluster by connecting through any existing cluster member.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit3\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit3 ...done.\n\n# on rabbit3\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit3 ...\n\nrabbitmqctl join_cluster rabbit@rabbit2\n# => Clustering node rabbit@rabbit3 with rabbit@rabbit2 ...done.\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit3 ...done.\n```\n\n----------------------------------------\n\nTITLE: Setting ERL_SSL_PATH for RabbitMQ TLS Configuration\nDESCRIPTION: This snippet demonstrates how to set the ERL_SSL_PATH environment variable in the RabbitMQ configuration file, which is necessary for loading the TLS module.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nerl -noinput -eval 'io:format(\"ERL_SSL_PATH=~s~n\", [filename:dirname(code:which(inet_tls_dist))])' -s init stop > /tmp/ssl-path.txt\ncat /tmp/ssl-path.txt /etc/rabbitmq/rabbitmq-env.conf > /tmp/new-rabbitmq-env.conf\nmv -f /tmp/new-rabbitmq-env.conf /etc/rabbitmq/rabbitmq-env.conf\n```\n\n----------------------------------------\n\nTITLE: Identity Monad Implementation\nDESCRIPTION: The simplest possible monad implementation in Erlang - the Identity monad. It passes values unchanged and makes the programmatic comma behave like Erlang's normal comma operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\n-module(identity_m).\n-behaviour(monad).\n-export(['>>='/2, return/1, fail/1]).\n\n'>>='(X, Fun) -> Fun(X).\nreturn(X)     -> X.\nfail(X)       -> throw({error, X}).\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Diagnostics Commands\nDESCRIPTION: Commands for checking RabbitMQ node status and diagnostics\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n\ncat /proc/$RABBITMQ_BEAM_PROCESS_PID/limits\n\n# checks if the local node is running and CLI tools can successfully authenticate with it\nsudo rabbitmq-diagnostics ping\n\n# prints enabled components (applications), TCP listeners, memory usage breakdown, alarms\n# and so on\nsudo rabbitmq-diagnostics status\n\n# prints cluster membership information\nsudo rabbitmq-diagnostics cluster_status\n\n# prints effective node configuration\nsudo rabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Markup Reference\nDESCRIPTION: HTML markup structure defining the RabbitMQ specification differences documentation, including undeprecated features and exchange restrictions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/spec-differences.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"left-content\">\n    <h2>Undeprecated Features</h2>\n    <p>\n        In addition to extensions beyond the specification, RabbitMQ also undeprecates some features that were removed from AMQP 0-9-1.\n    </p>\n    <ul>\n        <li>Auto-delete exchanges</li>\n        <li>Internal exchanges</li>\n    </ul>\n    <p>\n        The access class was deprecated from AMQP 0-9-1. RabbitMQ implements the\n        <span class=\"code\">access.request</span> method from this class as a no-op in order to maintain compatibility with older clients. This method will be removed in the future and should not be relied upon.\n    </p>\n\n    <h2>amq.* Exchange Immutability</h2>\n    <p>AMQP 0-9-1 spec dictates that it must not be possible to declare an exchange with the <span class=\"code\">amq.</span> prefix. RabbitMQ also prohibits deletion of such exchanges.</p>\n    <div id=\"help-and-feedback\">\n        <h2>Getting Help and Providing Feedback</h2>\n        <p>\n            If you have questions about the contents of this guide or any other topic related to RabbitMQ, don't hesitate to ask them using <a href=\"https://github.com/rabbitmq/rabbitmq-server/discussions\">GitHub Discussions</a> or our\n            community <a href=\"https://www.rabbitmq.com/discord\">Discord server</a>.\n        </p>\n    </div>\n    <div id=\"contribute\">\n        <h2>Help Us Improve the Docs &lt;3</h2>\n        <p>If you'd like to contribute an improvement to the site, its source is <a href=\"https://github.com/rabbitmq/rabbitmq-website\">available on GitHub</a>. Simply fork the repository and submit a pull request. Thank you!</p>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Increasing Inter-node Communication Buffer Size via Environment Variable\nDESCRIPTION: Increasing the inter-node communication buffer size to 192MB using the environment variable approach for heavy inter-node traffic scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000\n```\n\n----------------------------------------\n\nTITLE: Enabling a Denied Deprecated Feature in RabbitMQ Configuration\nDESCRIPTION: This snippet demonstrates how to re-enable a deprecated feature that is denied by default in RabbitMQ. It sets the permit flag for a specific deprecated feature to true in the RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/deprecated-features/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Permit a deprecated feature that is denied by default.\ndeprecated_features.permit.some_deprecated_feature = true\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC Consumers with PerfTest for Local Random Exchange in RabbitMQ\nDESCRIPTION: Commands to start 5 consumers across a 3-node RabbitMQ cluster, using exclusive queues bound to an exchange of type x-local-random. This setup distributes 2 consumers on the first node, 2 on the second, and 1 on the third.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/local-random-exchange.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nperf-test -H amqp://localhost:5672 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5672 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5673 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5673 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\nperf-test -H amqp://localhost:5674 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Erlang Packages for RabbitMQ\nDESCRIPTION: This command installs the recommended Erlang packages for RabbitMQ. It avoids using metapackages and instead installs individual packages to ensure better version control.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n```\n\n----------------------------------------\n\nTITLE: AMQP URI Connection String Example\nDESCRIPTION: Demonstrates the format for connecting to RabbitMQ using the new URI connection scheme. Shows how to specify username, password, hostname, port and virtual host in a single connection string.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-12-20-rabbitmq-2-7-0-and-2-7-1-are-released/index.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\namqp://guest:ghost@rabbit01.coderus.moc:5672/vhost01\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Policy via HTTP API\nDESCRIPTION: HTTP API request to set an operator policy named 'transient-queue-ttl' that applies an 1800000ms expiration to queues matching the pattern '^amq\\.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/parameters.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/operator-policies/%2f/transient-queue-ttl\n                {\"pattern\": \"^amq\\.\",\n                 \"definition\": {\"expires\": 1800000},\n                 \"priority\": 1,\n                 \"apply-to\": \"queues\"}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking\nDESCRIPTION: Shows how to implement a Consumer that reads messages from a stream, tracking first and last offsets. Includes functionality to stop when receiving a marker message and handle different offset specifications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage_count = -1\nfirst_offset = -1\nlast_offset = -1\nSTREAM_NAME = \"stream-offset-tracking-python\"\n# 2GB\nSTREAM_RETENTION = 2000000000\n\nasync def on_message(msg: AMQPMessage, message_context: MessageContext):\n    global first_offset\n    global last_offset\n\n    offset = message_context.offset\n    if first_offset == -1:\n        print(\"First message received\")\n        first_offset = offset\n\n    consumer = message_context.consumer\n    stream = message_context.consumer.get_stream(message_context.subscriber_name)\n\n    if \"marker\" in str(msg):\n        last_offset = offset\n        await consumer.close()\n\nasync def consume():\n\n    global first_offset\n    global last_offset\n\n    consumer = Consumer(\n        host=\"localhost\",\n        port=5552,\n        username=\"guest\",\n        password=\"guest\",\n    )\n\n    await consumer.create_stream(\n        STREAM_NAME, exists_ok=True, arguments={\"max-length-bytes\": STREAM_RETENTION}\n    )\n\n    try:\n        await consumer.start()\n        print(\"Starting consuming Press control +C to close\")\n\n        await consumer.subscribe(\n            stream=STREAM_NAME,\n            callback=on_message,\n            decoder=amqp_decoder,\n            offset_specification=ConsumerOffsetSpecification(\n                OffsetType.FIRST\n            ),\n        )\n        await consumer.run()\n\n    except (KeyboardInterrupt, asyncio.exceptions.CancelledError):\n        await consumer.close()\n\n    # give time to the consumer task to close the consumer\n    await asyncio.sleep(1)\n\n    if first_offset != -1:\n        print(\n            \"Done consuming first_offset: {} last_offset {} \".format(\n                first_offset, last_offset\n            )\n        )\n\n\nwith asyncio.Runner() as runner:\n    runner.run(consume())\n```\n\n----------------------------------------\n\nTITLE: Verifying RabbitMQ Status\nDESCRIPTION: Command to check the status of the RabbitMQ server using the diagnostics tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Policy in CMD\nDESCRIPTION: This snippet illustrates how to set a policy for an Alternate Exchange using the rabbitmqctl command in CMD. It applies an AE named 'my-ae' to an exchange called 'my-direct'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ae.md#2025-04-09_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat set_policy AE \"^my-direct$\" \"{\"\"alternate-exchange\":\"\"my-ae\"\"}\" --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Scope Prefix in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to set a custom scope prefix for OAuth 2.0 permissions. This allows defining a different prefix than the default resource_server_id for all scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.scope_prefix = api://\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Parameter in RabbitMQ (Bash)\nDESCRIPTION: Sets the parameter 'node01' for the 'federation-upstream' component in the default virtual host with a JSON value using the rabbitmqctl command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream node01 '{\"uri\":\"amqp://user:password@server/%2F\",\"ack-mode\":\"on-publish\"}'\n```\n\n----------------------------------------\n\nTITLE: Overriding Memory Allocator Settings in RabbitMQ\nDESCRIPTION: This example shows how to override a specific memory allocator setting (MHlmbcs) using the RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+MHlmbcs 8192\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the RabbitMQ Erlang Client Repository\nDESCRIPTION: Command to clone the RabbitMQ Erlang client repository from GitHub to your local machine.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-erlang-client.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-erlang-client.git\n```\n\n----------------------------------------\n\nTITLE: Examining Certificate Extensions with OpenSSL\nDESCRIPTION: Command to inspect the extensions and constraints of an X.509 certificate using OpenSSL, which helps verify proper certificate configuration for TLS use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in /path/to/certificate.pem -text -noout\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in OpenSSL Format in RabbitMQ\nDESCRIPTION: Command to list cipher suites supported by the Erlang runtime in OpenSSL format. This format is compatible with both classic and new config formats in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl -q\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Cluster Operator Plugin\nDESCRIPTION: Command to install the RabbitMQ plugin using Krew package manager.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl krew install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Building JMS Client for OAuth Testing (Bash)\nDESCRIPTION: Command to build a local Docker image for a basic JMS application that uses OAuth tokens for authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake build-jms-client\n```\n\n----------------------------------------\n\nTITLE: Examining Certificate Extensions with OpenSSL (Bash)\nDESCRIPTION: Command to display the extensions and constraints set for a public key certificate using OpenSSL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in /path/to/certificate.pem -text -noout\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Quorum Queues with Multiple Queue Scenario\nDESCRIPTION: Shell command for testing quorum queues in a distributed load scenario with 500 queues, using the same configuration as the classic queues test for direct comparison of performance characteristics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# quorum queues\nperf-test --producers 500 --consumers 500 --publishing-interval 0.1 --confirm 10 --multi-ack-every 100 --qos 100 \\\n          --variable-size 10:900 --variable-size 100:900 --variable-size 1000:900 --variable-size 5000:900 \\\n          --quorum-queue --queue-pattern qq-%d --queue-pattern-from 1 --queue-pattern-to 500\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol to AMQP 0-9-1 for RabbitMQ Shovel Destination\nDESCRIPTION: Configuration for specifying AMQP 0-9-1 as the protocol used for a Shovel destination.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n%% for AMQP 0-9-1\n{protocol, amqp091}\n```\n\n----------------------------------------\n\nTITLE: Verifying Management API Access with OAuth Tokens\nDESCRIPTION: These commands demonstrate how to verify access to the RabbitMQ Management API using OAuth tokens. It shows both successful and failed access attempts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-keycloak url=http://localhost:15672/api/overview client_id=rabbit_dev_mgt_api secret=La1Mvj7Qvt8iAqHisZyAguEE8rUpg014 realm=dev\nmake curl-keycloak url=http://localhost:15672/api/overview client_id=mgt_api_client secret=La1Mvj7Qvt8iAqHisZyAguEE8rUpg014 realm=test\n```\n\n----------------------------------------\n\nTITLE: Purging a Queue in rabbitmqadmin\nDESCRIPTION: This command shows how to purge a queue using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" purge queue --name \"target.queue.name\"\n```\n\n----------------------------------------\n\nTITLE: Clearing User Limits via CLI\nDESCRIPTION: These commands demonstrate how to clear specific or all limits for a user using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/user-limits.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_user_limits user1 'max-connections'\n\nrabbitmqctl clear_user_limits user1 'max-channels'\n\nrabbitmqctl clear_user_limits user1 all\n```\n\n----------------------------------------\n\nTITLE: Setting Soft Open File Limit for RabbitMQ on Linux\nDESCRIPTION: This command sets the soft open file limit to 4096 for the RabbitMQ server process. It should be added to the /etc/default/rabbitmq-server file or rabbitmq-env.conf to take effect before the service starts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 4096\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter defining the blog post metadata including title, tags and authors\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-07-30-this-month-in-rabbitmq-june-2020-recap/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"This Month in Rabbitmq June 2020 Recap\"\ntags: [\"Updates\", ]\nauthors: [mklishin]\n---\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Go\nDESCRIPTION: This code binds the previously declared queue to the 'logs' exchange. This establishes the relationship between the exchange and the queue for message routing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nerr = ch.QueueBind(\n  q.Name, // queue name\n  \"\",     // routing key\n  \"logs\", // exchange\n  false,\n  nil,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitoring-Only User in RabbitMQ (Bash)\nDESCRIPTION: This snippet demonstrates how to create a user with monitoring-only access to the RabbitMQ management UI using bash commands. It includes steps to add a user, set user tags, and grant empty permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user 'monitoring' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n\nrabbitmqctl set_user_tags 'monitoring' 'monitoring'\n\nrabbitmqctl set_permissions --vhost 'vhost-name' 'monitoring' '^$' '^$' '^$'\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Leader Placement in RabbitMQ Configuration File\nDESCRIPTION: Example showing how to set the queue_leader_locator configuration option to 'balanced' in the rabbitmq.conf file to ensure balanced queue distribution across cluster nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nqueue_leader_locator = balanced\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Disk Free Space Limit with Memory Units in RabbitMQ\nDESCRIPTION: Configuration example showing how to set the disk free space limit to 1GB using memory units notation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/disk-alarms.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 1GB\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration for RabbitMQ Java Client 5.0\nDESCRIPTION: Groovy configuration for adding the RabbitMQ Java Client 5.0 dependency to a Gradle project. This single line specifies the dependency coordinates required to use the library in a Gradle build.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-09-29-rabbitmq-java-client-5-0-is-released/index.md#2025-04-09_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ncompile 'com.rabbitmq:amqp-client:5.0.0'\n```\n\n----------------------------------------\n\nTITLE: Updating RabbitMQ Man Pages Using Shell Script\nDESCRIPTION: Command to regenerate HTML manpages using the update-manpages.sh script. The script requires a path to the rabbitmq-server repository as an argument and uses make(1) to generate the files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./website/versioned_docs/version-4.0/man/update-manpages.sh /path/to/rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: UAA Client Configuration Commands\nDESCRIPTION: Commands to configure OAuth 2.0 clients in UAA with custom scopes and permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nuaac client add producer_with_roles --name producer_with_roles \\\n    --authorities \"rabbitmq.*,api://rabbitmq:producer,api://rabbitmq:Administrator\" \\\n    --authorized_grant_types client_credentials \\\n    --secret producer_with_roles_secret\n```\n\n----------------------------------------\n\nTITLE: Listing channel information with connection and unacknowledged messages\nDESCRIPTION: Command to display the connection process and count of unacknowledged messages for each channel using rabbitmqctl. This helps administrators monitor channel activity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels connection messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Import When Definition File Changes\nDESCRIPTION: Configuration settings to only import definitions if the file contents have changed, which optimizes node startup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = local_filesystem\ndefinitions.local.path = /path/to/definitions/defs.json\n```\n\n----------------------------------------\n\nTITLE: Listing Certificates in Windows Root Certificate Store\nDESCRIPTION: PowerShell command to list all certificates in the Windows user Root certificate store. This helps verify that certificates have been correctly imported and shows details like expiration dates and unique identifiers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncertmgr -all -s Root\n\n# … snip …\n\nSelf-signed X.509 v3 Certificate\n  Serial Number: AC3F2B74ECDD9EEA00\n  Issuer Name:   CN=MyTestCA\n  Subject Name:  CN=MyTestCA\n  valid From:    25/08/2018 14:03:01\n  valid Until:   24/09/2018 14:03:01\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n```\n\n----------------------------------------\n\nTITLE: Clearing Policy in RabbitMQ (Bash)\nDESCRIPTION: Clears the policy named 'federate-me' in the default virtual host of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy federate-me\n```\n\n----------------------------------------\n\nTITLE: Detecting Generic SSL Upgrade Errors in Erlang\nDESCRIPTION: This is a generic error that could have multiple causes. It's recommended to ensure you're using the recommended version of Erlang to resolve such issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n{ssl_upgrade_error, ...}\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Policies in Bash\nDESCRIPTION: Example of creating an operator policy named 'transient-queue-ttl' with bash, which sets an expiration time of 30 minutes (1,800,000 ms) for queues matching the pattern '^amq\\.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_operator_policy transient-queue-ttl \\\n    \"^amq\\.\" '{\"expires\":1800000}' \\\n    --priority 1 \\\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Customizing Encryption Settings with rabbitmqctl on Unix Systems\nDESCRIPTION: Example of using rabbitmqctl with custom encryption settings (cipher, hash function, iterations) on Unix systems when encoding values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 \\\n                     '<<\"guest\">>' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP TLS Options in RabbitMQ Advanced Config\nDESCRIPTION: Example of configuring LDAP TLS options using the advanced.config format in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n     {servers, [\"ldap1.eng.megacorp.local\", \"ldap2.eng.megacorp.local\"]},\n\n     {use_ssl,     true},\n     {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                    {certfile,   \"/path/to/server_certificate.pem\"},\n                    {keyfile,    \"/path/to/server_key.pem\"},\n                    {verify,               verify_peer},\n                    {fail_if_no_peer_cert, true}]},\n                    {server_name_indication, \"ldap.identity.eng.megacorp.local\"},\n                    {ssl_hostname_verification, wildcard}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring EPMD to Listen on Specific Interfaces\nDESCRIPTION: Environment variable setting to restrict the Erlang Port Mapping Daemon (EPMD) to listen only on loopback IPv6 and IPv4 interfaces for improved security.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# makes epmd listen on loopback IPv6 and IPv4 interfaces\nexport ERL_EPMD_ADDRESS=\"::1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog IP and Port\nDESCRIPTION: Configuration for custom Syslog server IP address and port.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.ip = 10.10.10.10\nlog.syslog.port = 1514\n```\n\n----------------------------------------\n\nTITLE: Resuming Listeners on a Specific RabbitMQ Node\nDESCRIPTION: Command to resume listeners on a named RabbitMQ node, allowing the node to accept new client connections again after being suspended.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# resumes listeners on node rabbit@node2.cluster.rabbitmq.svc: it will accept new client connections again\nrabbitmqctl resume_listeners -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: Send.cs Namespace Declarations\nDESCRIPTION: Required namespace imports for the message sender implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-dotnet.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing RabbitMQ.Client;\n```\n\n----------------------------------------\n\nTITLE: Including Warning State Nodes in Consul Peer Discovery for RabbitMQ\nDESCRIPTION: Configuration to include nodes in the warning state (failed health checks) in the discovery result set when using Consul peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\ncluster_formation.consul.svc_ttl = 30\n# include node in the warning state into discovery result set\ncluster_formation.consul.include_nodes_with_warnings = true\n```\n\n----------------------------------------\n\nTITLE: Creating the AMQP 1.0 Environment in Go\nDESCRIPTION: Initializes an Environment instance to manage connections and shared resources for AMQP 1.0 communication in Go, with options for single node or cluster setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    rmq \"github.com/rabbitmq/rabbitmq-amqp-go-client/pkg/rabbitmqamqp\"\n)\n// ...\n// create the environment instance for a single node\nenv := rmq.NewEnvironment(\"amqp://guest:guest@localhost:5672/\", nil)\n// in case you have multiple endpoints you can use the following:\n// clusterEnv := rmq.NewClusterEnvironment([]rmq.Endpoint{\n//      {Address: \"amqp://server1\", Options: &rmq.AmqpConnOptions{}},\n//      {Address: \"amqp://server2\", Options: &rmq.AmqpConnOptions{}},\n//     })\n\n// ...\n// close the connections\nenv.CloseConnections(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus HTTP Timeouts in RabbitMQ\nDESCRIPTION: Configuration snippet that modifies the HTTP timeouts for the Prometheus plugin in RabbitMQ. These settings control connection inactivity, request timeout, and idle timeout values, which are important when scraping large datasets.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.tcp.idle_timeout = 120000\nprometheus.tcp.inactivity_timeout = 120000\nprometheus.tcp.request_timeout = 120000\n```\n\n----------------------------------------\n\nTITLE: Including Warning State Nodes in Consul Peer Discovery for RabbitMQ\nDESCRIPTION: Configuration to include nodes in the warning state (failed health checks) in the discovery result set when using Consul peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# health check interval (node TTL) in seconds\ncluster_formation.consul.svc_ttl = 30\n# include node in the warning state into discovery result set\ncluster_formation.consul.include_nodes_with_warnings = true\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameters in RabbitMQ (Bash)\nDESCRIPTION: Commands for setting, clearing, and listing global parameters using rabbitmqctl in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# sets a global (virtual-host-independent) runtime parameter\nrabbitmqctl set_global_parameter <name> <value>\n\n# clears (unsets) a global (virtual-host-independent) runtime parameter\nrabbitmqctl clear_global_parameter <name>\n\n# lists global (virtual-host-independent) runtime parameters\nrabbitmqctl list_global_parameters\n```\n\n----------------------------------------\n\nTITLE: Setting up HA Policy for Mirrored Queues in RabbitMQ 3.0\nDESCRIPTION: This command configures a policy to mirror all non-system queues (those not starting with 'amq.') across all nodes in the cluster. It replaces the old x-ha-policy queue declaration argument that was used in previous versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-11-19-breaking-things-with-rabbitmq-3-0/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl set_policy HA '^(?!amq\\\\.).*' '{\"ha-mode\": \"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Listener Timeouts for RabbitMQ Management\nDESCRIPTION: Sets timeout values for the HTTPS listener, including idle timeout, inactivity timeout, and request timeout. All values are in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\n# Configures HTTPS (TLS-enabled) listener timeouts\nmanagement.ssl.idle_timeout       = 120000\nmanagement.ssl.inactivity_timeout = 120000\nmanagement.ssl.request_timeout    = 10000\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions via HTTP API\nDESCRIPTION: Example of using curl to import definitions through the RabbitMQ HTTP API endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Requires management plugin to be enabled,\n# placeholders are used for credentials and hostname.\n# Use HTTPS when possible.\ncurl -u {username}:{password} -H \"Content-Type: application/json\" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Formatting Configuration\nDESCRIPTION: Examples of various log formatting options including time format, level format, and message format customization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter.level_format = lc4\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter.time_format = epoch_usecs\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.formatter.plaintext.format = $level $time $msg\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Group Consumers in RabbitMQ\nDESCRIPTION: Command to list consumers within a specific stream consumer group, showing connection name and state. Supports filtering by stream name, reference, and vhost with customizable display options for subscription ID, connection name, and consumer state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_group_consumers --stream stream-1 --reference stream-1 connection_name state\n```\n\n----------------------------------------\n\nTITLE: Binding Exchanges Using Java Client in AMQP 0-9-1\nDESCRIPTION: This snippet demonstrates how to bind one exchange to another using the RabbitMQ Java client. It creates a channel and uses the exchangeBind method to establish a binding between a source and destination exchange with a specified routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/e2e.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = conn.createChannel();\nch.exchangeBind(\"destination\", \"source\", \"routingKey\");\n```\n\n----------------------------------------\n\nTITLE: Equals Query Syntax\nDESCRIPTION: Demonstrates the equals query syntax used for string comparison in LDAP queries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_39\n\nLANGUAGE: erlang\nCODE:\n```\n{equals, StringSubQuery1, StringSubQuery2}\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Connections with RabbitMQ Streams CLI\nDESCRIPTION: Command example for listing stream connections with specific fields. This command displays the connection name and user for each connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_connections conn_name user\n```\n\n----------------------------------------\n\nTITLE: Default Memory Allocator Settings for RabbitMQ\nDESCRIPTION: These are the default memory allocator arguments used by RabbitMQ. They control carrier size, block size, and memory allocation strategy to manage memory fragmentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DEFAULT_ALLOC_ARGS=\"+MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Go Project for RabbitMQ Stream\nDESCRIPTION: Shell commands to create a new Go project and install the RabbitMQ stream Go client dependency.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir go-stream\ncd go-stream\ngo mod init github.com/rabbitmq/rabbitmq-tutorials\ngo get -u github.com/rabbitmq/rabbitmq-stream-go-client\n```\n\n----------------------------------------\n\nTITLE: Verifying RabbitMQ Status and Limits\nDESCRIPTION: These bash commands are used to check the status of RabbitMQ and verify the current limits set for the process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/$RABBITMQ_BEAM_PROCESS_PID/limits\n```\n\n----------------------------------------\n\nTITLE: Running testssl.sh for TLS Endpoint Testing\nDESCRIPTION: This command demonstrates how to use testssl.sh to evaluate the security of a RabbitMQ TLS endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n./testssl.sh localhost:5671\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for RabbitMQ CA Certificate\nDESCRIPTION: Command to create a Kubernetes Secret containing the certificate of the Certificate Authority that signed the RabbitMQ server's certificate. The secret is created in the rabbitmq-system namespace with the name rabbitmq-ca.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/tls-topology-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system create secret generic rabbitmq-ca --from-file=ca.crt=$CA_PATH\n```\n\n----------------------------------------\n\nTITLE: Starting Web Portal\nDESCRIPTION: Command to start the Node.js web portal application that acts as the identity provider interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-idp-initiated.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-portal\n```\n\n----------------------------------------\n\nTITLE: Listing IPv6 Processes Listening on MQTT Port with lsof\nDESCRIPTION: Uses lsof to display OS processes that are listening on port 1883 (standard MQTT port) over IPv6. The grep filter shows only processes in LISTEN state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i6TCP:1883 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: MQTT-AMQP Protocol Mapping Table in Markdown\nDESCRIPTION: Markdown table documenting the field-by-field mapping between MQTT 5.0 and AMQP 0.9.1 protocols, including fixed headers, variable headers, and specific implementation details for RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/conversions.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| MQTT 5.0 Section    | MQTT 5.0 Field            | MQTT 5.0 Type         | Condition      | AMQP 0.9.1 Section | AMQP 0.9.1 Field               | AMQP 0.9.1 Type | Comment|\n| ------------------- | ------------------------- | --------------------- | -------------- | ------------------ | ------------------------------ | --------------- ||\n| Fixed Header        | Dup                       | Bits                  |                |                    |                                |                 | Setting to basic.deliver field redelivered does not make sense because the DUP flag only applies from client to server (consumption from server to client is determined by the Redelivered flag sent from the queues)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| Fixed Header        | QoS                       | Bits                  |                | properties         | delivery_mode                  |                 | QoS 0 maps to delivery_mode 1 QoS 1 maps to delivery_mode|\n| Fixed Header        | Retain                    | Bits                  |                |                    |                                |                 ||\n| Variable Header     | Payload Format Indicator  | Bits                  |                |                    |                                |                 | AMQP 0.9.1 content_encoding refers to a MIME content encoding whose valid values are listed in `https://www.iana.org/assignments/http-parameters/http-parameters.xml` Therefore AMQP 0.9.1 content_encoding is something different. It would best map to `text/<subtype>; charset=\"utf-8` of content_type, but the `<subtype>` is not defined. Furthermore MQTT 5.0 property Content Type is already defined.                                                                                                                                                                                                                                                                                                                  |\n| Variable Header     | Message Expiry Interval   | uint                  |                | properties         | expiration                     | shortstr        | seconds to milliseconds|\n| Variable Header     | Topic Alias               | ushort                |                |                    |                                |                 ||\n| Variable Header     | Response Topic            | utf8                  |                | properties         | headers, Key: x-reply-to-topic | longstr         | AMQP 0.9.1 property reply_to refers to a queue name, not to a topic name |\n| Variable Header     | Correlation Data          | binary                | `shortstr`     | properties         | correlation_id                 | shortstr        ||\n|                     |                           |                       |                | properties         | headers, Key: x-correlation-id | longstr         ||\n| Variable Header     | User Property             | utf8 string pair      | name is `shortstr` | properties         | headers                        | longstr         | RabbitMQ cannot have shortstr as e.g. header values.\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection URIs\nDESCRIPTION: Defines a list of AMQP connection URIs for connecting to brokers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n{uris, [\n        \"amqp://fred:secret@host1.domain/my_vhost\",\n        \"amqp://john:secret@host2.domain/my_vhost\"\n       ]}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Queue Federation Policy in RabbitMQ\nDESCRIPTION: Removes the queue federation policy named 'queue-federation', which will stop federation for the previously matching queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federated-queues/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_policy queue-federation\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server as a Detached Application in PowerShell\nDESCRIPTION: Command to start the RabbitMQ broker as a background application that is not attached to the Command Prompt window. This allows the broker to run independently of the terminal session.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-windows-manual.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-server.bat -detached\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Collection Interval in RabbitMQ\nDESCRIPTION: This snippet shows how to increase the statistics collection interval in RabbitMQ to reduce CPU and memory consumption when dealing with a large number of connections. The interval is set to 60 seconds (60000 milliseconds).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/connections/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# sets the interval to 60 seconds\ncollect_statistics_interval = 60000\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-Based Reconciliation for RabbitMQ Topology Operator\nDESCRIPTION: YAML configuration to enable periodic reconciliation of all topology objects by setting the 'SYNC_PERIOD' environment variable in the Operator deployment. This example sets a 5-minute reconciliation interval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  [...]\n  name: messaging-topology-operator\n  namespace: rabbitmq-system\nspec:\n  template:\n    spec:\n      containers:\n      - command:\n        - /manager\n        env:\n        - name: SYNC_PERIOD\n          value: 5m # needs to be in a format that's readable by golang time.ParseDuration(), e.g. \"1000s\", \"5.3h\" or \"20h35m\"\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Binding in Ruby\nDESCRIPTION: Shows how to create a basic binding between a queue and an exchange\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nqueue.bind(exchange_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Name Suffixes with Consul Discovery\nDESCRIPTION: This configuration demonstrates how to append a suffix to node names retrieved from Consul when using long node names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using node name\ncluster_formation.consul.svc_addr_use_nodename = true\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n# append a suffix (node.rabbitmq.example.local) to node names retrieved from Consul\ncluster_formation.consul.domain_suffix = example.local\n```\n\n----------------------------------------\n\nTITLE: Inspecting Shovels via HTTP API\nDESCRIPTION: Example curl commands for retrieving shovel information through the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/\n\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/%2f\n\n# Note: this user's access is limited to localhost!\n curl -v -u guest:guest -X GET http://localhost:15672/api/shovels/vhost/%2f/my-shovel\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Logging and Disabling File Logging in RabbitMQ\nDESCRIPTION: This snippet activates console logging, sets its level to 'info', and disables file logging in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Reference to Guaranteed Multicast Module in Erlang\nDESCRIPTION: A reference to the guaranteed multicast (atomic broadcast) module in RabbitMQ's codebase that enables reliable communication between nodes in a mirrored queue setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-10-25-high-availability-in-rabbitmq-solving-part-of-the-puzzle/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nhttp://hg.rabbitmq.com/rabbitmq-server/file/default/src/gm.erl\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Group Lookup Base in RabbitMQ\nDESCRIPTION: Configuration example for setting the group lookup base DN for nested group searches in RabbitMQ's LDAP plugin using the classic config format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    %% ...\n    {group_lookup_base, \"ou=groups,dc=example,dc=com\"}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Permission Configuration Example\nDESCRIPTION: Example of configuring permissions based on user DN attributes and constant values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_30\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{permission, configure, {equals, {attribute, \"${user_dn}\", \"description\"},\n                                         {string, \"can-declare-${resource}s\"}\n                                }},\n        {permission, write, {constant, true}},\n        {permission, read,  {constant, true}}\n       ]\n}\n```\n\n----------------------------------------\n\nTITLE: Standard LDAP Configuration\nDESCRIPTION: Basic LDAP configuration in rabbitmq.conf format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_35\n\nLANGUAGE: erlang\nCODE:\n```\nauth_backends.1 = ldap\n\nauth_ldap.servers.1  = my-ldap-server\nauth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com\nauth_ldap.use_ssl    = false\nauth_ldap.port       = 389\nauth_ldap.log        = false\n```\n\n----------------------------------------\n\nTITLE: Listing All TCP Connections with netstat\nDESCRIPTION: Uses netstat to list all TCP connection sockets with numeric addresses and associated program names. This command shows all connections regardless of their state and is useful for connection troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo netstat --all --numeric --tcp --programs\n```\n\n----------------------------------------\n\nTITLE: Failed Attempt to Delete a Protected Virtual Host Using HTTP API\nDESCRIPTION: Example showing the 412 Precondition Failed error that occurs when trying to delete a virtual host that has been protected from deletion using the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL -u guest:guest -X DELETE http://localhost:15672/api/vhosts/vh1/\n# => < HTTP/1.1 412 Precondition Failed\n```\n\n----------------------------------------\n\nTITLE: Export Virtual Host Definitions in Bash\nDESCRIPTION: Command to export all definitions from a specific virtual host to a file, which will be used to import definitions to the new virtual host after modification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# exports definitions of a specific virtual host\nrabbitmqctl export_definitions --vhost=\"{original_vhost}\" /path/to/original_vhost.json\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 1883 using lsof (IPv6)\nDESCRIPTION: Checks for processes listening on port 1883 using IPv6, useful for verifying MQTT over IPv6 configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i6TCP:1883 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Checking plugin directories and enabled plugins file\nDESCRIPTION: Demonstrates how to use rabbitmq-plugins to check plugin directories and the enabled plugins file path, useful for troubleshooting plugin loading issues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins directories -s\n# => Plugin archives directory: /path/to/rabbitmq/plugins\n# => Plugin expansion directory: /path/to/node/node-plugins-expand\n# => Enabled plugins file: /path/to/enabled_plugins\n```\n\n----------------------------------------\n\nTITLE: Encoding Values with rabbitmqctl on Unix Systems\nDESCRIPTION: Example of encoding a sensitive value (connection URI) using rabbitmqctl on Unix-based systems with a passphrase.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode '\"amqp://fred:secret@host1.domain/my_vhost\"' mypassphrase\n{encrypted,<<\"... long encrypted value...\">>}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Formatted Console Logging in RabbitMQ\nDESCRIPTION: This configuration enables console logging with 'info' level and JSON formatting, while disabling file logging in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\nlog.console.formatter = json\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Setting Heartbeat Interval for RabbitMQ Java Client on Google App Engine\nDESCRIPTION: Demonstrates how to set a low heartbeat interval (4-5 seconds) for the RabbitMQ Java client when used on Google App Engine. This is necessary to avoid running into low InputStream read timeouts on GAE.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\ncf.setRequestedHeartbeat(5);\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Server TLS Version Configuration\nDESCRIPTION: Configuration examples for limiting TLS versions on the RabbitMQ server side. Shows how to configure the server to accept only TLSv1.3 or TLSv1.2 and later versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.3\n\n# Limits enable cipher suites to only those used by TLSv1.3.\n# There are no cipher suites supported by both TLSv1.3 and TLSv1.2.\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n```\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Advanced TCP Configuration\nDESCRIPTION: Complete advanced configuration combining TCP settings and kernel options in Erlang term format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_30\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [\n    {inet_default_connect_options, [{nodelay, true}]},\n    {inet_default_listen_options,  [{nodelay, true}]}\n  ]},\n  {rabbit, [\n    {tcp_listen_options, [\n                          {backlog,       4096},\n                          {nodelay,       true},\n                          {linger,        {true,0}},\n                          {exit_on_close, false}\n                         ]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Private IP Usage\nDESCRIPTION: Configuration setting to use private IP addresses instead of private hostnames for node names in AWS.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.aws.use_private_ip = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Filtering in Python\nDESCRIPTION: Illustrates how to configure stream filtering for a RabbitMQ consumer using the Python client library. It sets filter values and enables matching of unfiltered messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass MyMessageHandler(AMQPMessagingHandler):\n\n    def __init__(self):\n        super().__init__()\n\n    def on_message(self, event: Event):\n        # accepting\n        self.delivery_context.accept(event)\n        # deal with the message\n\nstream_address = AddressHelper.queue_address(\"some-stream\")\nconsumer = consumer_connection.consumer(\n    stream_address,\n    message_handler=MyMessageHandler(),\n    stream_filter_options=StreamOptions(stream_filters=[\"invoices\", \"order\"], match_unfiltered=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ Prometheus Endpoint\nDESCRIPTION: Configuration for enabling TLS security on the Prometheus metrics endpoint, including certificate paths and optional password for encrypted keyfile.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.ssl.port       = 15691\nprometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem\nprometheus.ssl.certfile   = /full/path/to/server_certificate.pem\nprometheus.ssl.keyfile    = /full/path/to/server_key.pem\nprometheus.ssl.password   = password-if-keyfile-is-encrypted\n## To enforce TLS (disable the non-TLS port):\n# prometheus.tcp.listener = none\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Timeout Policy in RabbitMQ\nDESCRIPTION: Uses rabbitmqctl to set a policy that overrides the consumer timeout for a group of queues. The timeout is specified in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumers.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# override consumer timeout for a group of queues using a policy\nrabbitmqctl set_policy queue_consumer_timeout \"with_delivery_timeout\\.*\" '{\"consumer-timeout\":3600000}' --apply-to classic_queues\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions in RabbitMQ Channel Operations\nDESCRIPTION: This snippet illustrates a potential race condition when using isOpen() method and suggests a better approach to handle channel operations safely by catching exceptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_28\n\nLANGUAGE: java\nCODE:\n```\npublic void brokenMethod(Channel channel)\n{\n    if (channel.isOpen())\n    {\n        // The following code depends on the channel being in open state.\n        // However there is a possibility of the change in the channel state\n        // between isOpen() and basicQos(1) call\n        ...\n        channel.basicQos(1);\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void validMethod(Channel channel)\n{\n    try {\n        ...\n        channel.basicQos(1);\n    } catch (ShutdownSignalException sse) {\n        // possibly check if channel was closed\n        // by the time we started action and reasons for\n        // closing it\n        ...\n    } catch (IOException ioe) {\n        // check why connection was closed\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL Policy using rabbitmqctl in PowerShell\nDESCRIPTION: This command sets a policy that applies a 60-second TTL to all queues using rabbitmqctl in a PowerShell environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" \"{\"\"message-ttl\"\":60000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Common Name Authentication\nDESCRIPTION: Configuration to use the Common Name from client certificates for authentication instead of the default Distinguished Name format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nssl_cert_login_from = common_name\n```\n\n----------------------------------------\n\nTITLE: Setting Statistics Collection Mode in RabbitMQ (INI)\nDESCRIPTION: This snippet demonstrates how to set the statistics collection mode in RabbitMQ. The default configuration is shown, which disables statistics collection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\ncollect_statistics = none\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Plugin Directories in Linux/MacOS\nDESCRIPTION: Demonstrates how to configure multiple plugin directories in RabbitMQ using a colon-separated list in the rabbitmq-env.conf file on Linux or MacOS systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example rabbitmq-env.conf file that features a colon-separated list of plugin directories\nPLUGINS_DIR=\"/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.11.6/plugins\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Stream Replica Command Example\nDESCRIPTION: Example command showing how to remove a stream replica from a specific node and virtual host using the rabbitmq-streams CLI tool\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-streams.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams delete_replica --vhost \"a-vhost\" \"a-queue\" \"rabbit@decomissioned-node\"\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Command to set the cluster name for RabbitMQ nodes in a federation. The cluster name helps identify nodes in the federation graph, which is important when DNS might not provide distinct names for machines.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name \"east1-production\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Application\nDESCRIPTION: Shell commands to install dependencies and run both the consumer and producer parts of the application in separate terminals.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u\n\n# In one terminal\ngo run receive.go\n\n# In another terminal\ngo run send.go\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Node Name in RabbitMQ Environment Configuration\nDESCRIPTION: Example configuration that changes the default node name prefix from 'rabbit' to 'hare'. Shows basic syntax of rabbitmq-env.conf including comments and environment variable definition.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-env.conf.5.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# I am a complete rabbitmq-env.conf file.\n# Comment lines start with a hash character.\n# This is a /bin/sh script file - use ordinary envt var syntax\nNODENAME=hare\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Status with rabbitmqctl on Windows\nDESCRIPTION: This command performs a basic health check on the RabbitMQ node and displays information about it if it's running. It uses rabbitmqctl.bat and should be run from the sbin directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows-manual.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat status\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Providers in RabbitMQ for Multiple Realms\nDESCRIPTION: This snippet shows the configuration for two OAuth providers (dev and prod) in RabbitMQ, both pointing to the same Keycloak instance but different realms. It includes SSL configuration for secure communication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.oauth_providers.devkeycloak.issuer = https://keycloak:8443/realms/dev\nauth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://keycloak:8443/realms/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue and Publishing a Message in RabbitMQ with Go\nDESCRIPTION: Code that declares a queue named 'hello' and publishes a message to it. Uses context with timeout for publishing and includes queue configuration parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nq, err := ch.QueueDeclare(\n  \"hello\", // name\n  false,   // durable\n  false,   // delete when unused\n  false,   // exclusive\n  false,   // no-wait\n  nil,     // arguments\n)\nfailOnError(err, \"Failed to declare a queue\")\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nbody := \"Hello World!\"\nerr = ch.PublishWithContext(ctx,\n  \"\",     // exchange\n  q.Name, // routing key\n  false,  // mandatory\n  false,  // immediate\n  amqp.Publishing {\n    ContentType: \"text/plain\",\n    Body:        []byte(body),\n  })\nfailOnError(err, \"Failed to publish a message\")\nlog.Printf(\" [x] Sent %s\\n\", body)\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Network Bandwidth for RabbitMQ\nDESCRIPTION: Formula for computing the minimum required network bandwidth for RabbitMQ cluster nodes. Takes into account message rate, message size, and protocol overhead to calculate bits per second needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/production-checklist.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nMR * MS * 110% * 8\n```\n\nLANGUAGE: ini\nCODE:\n```\n20K * 6 KB * 110% * 8 bit/B = 20000 * 6000 * 1.1 * 8 = 1.056 (gigabit/second)\n```\n\n----------------------------------------\n\nTITLE: TCP Socket Exit Configuration\nDESCRIPTION: Configuration for TCP socket closure behavior on client disconnect\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.exit_on_close = false\n```\n\n----------------------------------------\n\nTITLE: Logging Authentication Failure in RabbitMQ\nDESCRIPTION: This snippet shows the server log output for a failed authentication attempt due to incorrect credentials. It includes connection acceptance, error message, and connection closure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n2019-03-25 12:28:19.047 [info] <0.1613.0> accepting AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)\n2019-03-25 12:28:19.056 [error] <0.1613.0> Error on AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672, state: starting):\nPLAIN login refused: user 'user2' - invalid credentials\n2019-03-25 12:28:22.057 [info] <0.1613.0> closing AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang Dependencies\nDESCRIPTION: Command to install required Erlang packages for RabbitMQ operation. Includes core runtime and additional modules needed for full functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n```\n\n----------------------------------------\n\nTITLE: Disabling a Deprecated Feature for Testing in RabbitMQ Configuration\nDESCRIPTION: Configuration example showing how to disable a deprecated feature to test applications as if the feature was already removed from RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/deprecated-features/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Try RabbitMQ as if the deprecated feature was gone.\ndeprecated_features.permit.some_deprecated_feature = false\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ User with Provided Credentials\nDESCRIPTION: Kubernetes manifest for creating a RabbitMQ user with username and password provided from an existing Kubernetes secret named 'my-rabbit-user'. The user is assigned 'policymaker' and 'monitoring' tags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: User\nmetadata:\n  name: import-user-sample\nspec:\n  tags:\n  - policymaker\n  - monitoring # other available tags are 'management' and 'administrator'\n  rabbitmqClusterReference:\n    name: rabbit-example\n  importCredentialsSecret:\n    name: my-rabbit-user # name of the secret\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Paging Ratio\nDESCRIPTION: Configuration for memory-based message paging threshold\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark_paging_ratio = 0.5\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ and Erlang Repositories on Debian Bullseye\nDESCRIPTION: Comprehensive script for setting up RabbitMQ and Erlang repositories, adding signing keys, and installing packages on Debian Bullseye. Includes steps for adding mirrors and installing specific Erlang versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nsudo apt-get install curl gnupg apt-transport-https -y\n\n## Team RabbitMQ's main signing key\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null\n## Community mirror of Cloudsmith: modern Erlang repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null\n## Community mirror of Cloudsmith: RabbitMQ repository\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n\n## Add apt repositories maintained by Team RabbitMQ\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bullseye main\n\n## Provides RabbitMQ\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bullseye main\nEOF\n\n## Update package indices\nsudo apt-get update -y\n\n## Install Erlang packages\n##\n## For versions not compatible with the latest available Erlang series, which is the case\n## for 3.13.x, apt must be instructed to install specifically Erlang 26.\n## Alternatively this can be done via version pinning, documented further in this guide.\nsupported_erlang_version=\"1:26.2.5.6-1\"\nsudo apt-get install -y erlang-base=$supported_erlang_version \\\n                        erlang-asn1=$supported_erlang_version \\\n                        erlang-crypto=$supported_erlang_version \\\n                        erlang-eldap=$supported_erlang_version \\\n                        erlang-ftp=$supported_erlang_version \\\n                        erlang-inets=$supported_erlang_version \\\n                        erlang-mnesia=$supported_erlang_version \\\n                        erlang-os-mon=$supported_erlang_version \\\n                        erlang-parsetools=$supported_erlang_version \\\n                        erlang-public-key=$supported_erlang_version \\\n                        erlang-runtime-tools=$supported_erlang_version \\\n                        erlang-snmp=$supported_erlang_version \\\n                        erlang-ssl=$supported_erlang_version \\\n                        erlang-syntax-tools=$supported_erlang_version \\\n                        erlang-tftp=$supported_erlang_version \\\n                        erlang-tools=$supported_erlang_version \\\n                        erlang-xmerl=$supported_erlang_version\n\n## Install rabbitmq-server and its dependencies\nsudo apt-get install rabbitmq-server -y --fix-missing\n```\n\n----------------------------------------\n\nTITLE: Setting Consul Service Metadata for RabbitMQ\nDESCRIPTION: This configuration demonstrates how to add metadata to the RabbitMQ service when registering with Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\n# Define metadata for the RabbitMQ service. Both keys and values have a\n# maximum length limit enforced by Consul. This can be used to provide additional\n# context about the service (RabbitMQ cluster) for operators or other tools.\ncluster_formation.consul.svc_meta.owner = team-xyz\ncluster_formation.consul.svc_meta.service = service-one\ncluster_formation.consul.svc_meta.stats_url = https://service-one.eng.megacorp.local/stats/\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration\nDESCRIPTION: Shows how to configure the source queue name for a shovel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n{queue, <<\"queue.1\">>}\n```\n\n----------------------------------------\n\nTITLE: Declaring Fanout Exchange in PHP\nDESCRIPTION: Creates a fanout exchange named 'logs' that broadcasts messages to all bound queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-php.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$channel->exchange_declare('logs', 'fanout', false, false, false);\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Host Metadata using HTTP API\nDESCRIPTION: Updates an existing virtual host's metadata through the HTTP API, including changing description, tags, and default queue type settings. Uses the same endpoint as creation but with different payload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \\\n                           -H \"content-type: application/json\" \\\n                           --data-raw '{\"description\": \"QA environment for issue 1662\", \"tags\": \"qa,project-a,qa-1662\", \"default_queue_type\": \"quorum\"}'\n```\n\n----------------------------------------\n\nTITLE: Disabling a RabbitMQ Plugin\nDESCRIPTION: Disables the specified plugin (rabbitmq_management) and all plugins that depend on it. This ensures that dependent plugins are also properly disabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-plugins.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Limit in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/vhost-limits/{vhost}/{name} endpoint to set a per-vhost limit. This example sets the limit value to 100.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\"value\": 100}\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Cluster Operator with kubectl rabbitmq plugin\nDESCRIPTION: Alternative method to install the RabbitMQ Cluster Operator using the kubectl rabbitmq plugin. This simplifies the installation process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq install-cluster-operator\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Queue with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram showing a queue representation in RabbitMQ, displayed as a node with a queue name using Mermaid syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/TutorialsIntro.md#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Q[[queue_name]]\n    class Q mermaid-queue\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Subscription in STOMP\nDESCRIPTION: Example of a STOMP SUBSCRIBE frame for stream consumption with offset specification. Demonstrates setting ack mode, prefetch count, and stream offset parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_18\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/amq/queue/my-stream\nack:client\nprefetch-count:10\nx-stream-offset:next\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Feature Flag in RabbitMQ using Bash\nDESCRIPTION: This command enables a specific feature flag in RabbitMQ using the rabbitmqctl CLI tool. Replace <name> with the actual feature flag name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container Limits for RabbitMQ\nDESCRIPTION: Docker daemon configuration to set kernel limits for containers. This JSON configuration sets both soft and hard limits for maximum open files to 64000.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Timestamp Header to Messages in RabbitMQ Shovel\nDESCRIPTION: Boolean configuration that controls whether a custom header 'x-shovelled-timestamp' should be added to messages before republishing. The header contains the timestamp when the message was shovelled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\n{add_timestamp_header, true}\n```\n\n----------------------------------------\n\nTITLE: Disabling Operator Policy Changes Configuration\nDESCRIPTION: Configuration setting to disable modification of operator policies via the HTTP API and Web UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.restrictions.operator_policy_changes.disabled = true\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth2 Proxy Configuration\nDESCRIPTION: Command to start RabbitMQ with the OAuth2 Proxy mode enabled, allowing it to work with the OAuth 2.0 authentication setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-proxy.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMODE=oauth2-proxy make start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Disabling RabbitMQ Management Plugin\nDESCRIPTION: Command to disable the 'rabbitmq_management' plugin and all plugins that depend on it. This shows how to deactivate a plugin and its dependents.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-plugins.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in PowerShell\nDESCRIPTION: Command to start a new RabbitMQ node using the rabbitmq-server.bat command in PowerShell. By default, this will use Mnesia as the metadata store backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-server.bat\n```\n\n----------------------------------------\n\nTITLE: Setting a Listener on a Publisher in Java\nDESCRIPTION: Demonstrates how to add a listener to a RabbitMQ publisher in Java. The listener can react to state changes of the publisher instance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nPublisher publisher = connection.publisherBuilder()\n    .listeners(context -> {\n        // ...\n    })\n    .exchange(\"foo\").key(\"bar\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener Options for STOMP\nDESCRIPTION: Advanced TCP listener configuration including buffer sizes, connection queue length, TCP keepalives, and timeouts. These settings can help optimize network performance for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 127.0.0.1:61613\nstomp.listeners.tcp.2 = ::1:61613\n\nstomp.tcp_listen_options.backlog = 4096\nstomp.tcp_listen_options.recbuf  = 131072\nstomp.tcp_listen_options.sndbuf  = 131072\n\nstomp.tcp_listen_options.keepalive = true\nstomp.tcp_listen_options.nodelay   = true\n\nstomp.tcp_listen_options.exit_on_close = true\nstomp.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Configuring classic cluster formation nodes in RabbitMQ\nDESCRIPTION: Configuration for classic peer discovery backend, specifying which nodes to contact when forming a cluster on first boot.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.classic_config.nodes.1 = rabbit@hostname1\ncluster_formation.classic_config.nodes.2 = rabbit@hostname2\n```\n\n----------------------------------------\n\nTITLE: Closing RabbitMQ Connection\nDESCRIPTION: Properly closing the channel and connection after message publication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$channel->close();\n$connection->close();\n```\n\n----------------------------------------\n\nTITLE: Creating a Protected Virtual Host Using Definition JSON\nDESCRIPTION: JSON definition for creating a virtual host that is protected from deletion using the definition import feature. The protection is enabled by setting the 'protected_from_deletion' metadata key to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"protected\",\n  \"description\": \"\",\n  \"metadata\": {\n    \"description\": \"This virtual host is protected from deletion with a special metadata key\",\n    \"tags\": [],\n    \"default_queue_type\": \"classic\",\n    \"protected_from_deletion\": true\n  },\n  \"tags\": [],\n  \"default_queue_type\": \"classic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy with PowerShell\nDESCRIPTION: Defines a policy to federate exchanges matching a pattern using PowerShell\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federation.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy --apply-to exchanges federate-me \"^amq\\.\" `\n    '\"{\"\"federation-upstream-set\"\":\"\"all\"\"}\"'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Virtual Host After Removing Protection Using CLI\nDESCRIPTION: Command to delete a RabbitMQ virtual host after its deletion protection has been removed, showing the successful output message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl delete_vhost \"vhost-name\"\n# => Deleting vhost \"vhost-name\" ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Passwordless User in RabbitMQ\nDESCRIPTION: Demonstrates how to create a user without a password using rabbitmqctl commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user passwordless-user \"pa$$wordless\"\nrabbitmqctl clear_password passwordless-user\n```\n\n----------------------------------------\n\nTITLE: Connecting to STOMP Broker\nDESCRIPTION: JavaScript code showing how to connect to the STOMP broker with credentials and callbacks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/web-stomp.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nvar on_connect = function() {\n    console.log('connected');\n};\nvar on_error =  function() {\n    console.log('error');\n};\nclient.connect('guest', 'guest', on_connect, on_error, '/');\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Queue\nDESCRIPTION: Declares an exclusive, auto-delete queue with a server-generated name. The queue will be automatically deleted when the connection closes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.assertQueue('', {\n  exclusive: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ and Erlang apt Repositories for Debian Bookworm\nDESCRIPTION: Adds apt repository configurations for RabbitMQ and Erlang on Debian Bookworm. This includes mirrors for redundancy and separate repositories for Erlang and RabbitMQ server packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/debian bookworm main\n\n## Provides RabbitMQ\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/debian bookworm main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags on Initial Startup in RabbitMQ Advanced Config\nDESCRIPTION: This Erlang configuration snippet for RabbitMQ's advanced.config file sets the forced_feature_flags_on_init option to enable specific feature flags on initial startup of a new, unclustered node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n  {forced_feature_flags_on_init, [\n      maintenance_mode_status,\n      direct_exchange_routing_v2,\n      user_limits,\n      transient_nonexcl_queues,\n      amqp_address_v1,stream_filtering,\n      implicit_default_bindings,\n      quorum_queue_non_voters,\n      'rabbitmq_4.0.0',\n      tracking_records_in_ets,\n      delete_ra_cluster_mqtt_node,\n      classic_queue_type_delivery_support,\n      restart_streams,\n      message_containers_deaths_v2,\n      feature_flags_v2,empty_basic_get_metric,\n      classic_queue_mirroring,\n      rabbit_exchange_type_local_random,\n      detailed_queues_endpoint,\n      stream_queue,\n      classic_mirrored_queue_version,\n      quorum_queue,\n      management_metrics_collection,\n      message_containers,\n      ram_node_type,\n      stream_sac_coordinator_unblock_group,\n      drop_unroutable_metric,\n      stream_single_active_consumer,\n      virtual_host_metadata,\n      listener_records_in_ets,\n      stream_update_config_command,\n      global_qos,\n      queue_master_locator,\n      rabbit_mqtt_qos0_queue,mqtt_v5\n  ]}\n]},\n%% ...\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for RabbitMQ Stream Consumer in Rust\nDESCRIPTION: This snippet shows the necessary use declarations for the RabbitMQ stream consumer implementation in Rust. It includes imports for standard I/O, RabbitMQ stream client, futures, and tokio.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::io::stdin;\nuse rabbitmq_stream_client::error::StreamCreateError;\nuse rabbitmq_stream_client::types::{ByteCapacity, OffsetSpecification, ResponseCode};\nuse futures::{StreamExt};\nuse tokio::task;\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Service Monitor\nDESCRIPTION: Command to deploy ServiceMonitor for monitoring RabbitMQ clusters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/operator-monitoring.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply --filename https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/observability/prometheus/monitors/rabbitmq-servicemonitor.yml\n```\n\n----------------------------------------\n\nTITLE: Updating PATH for RabbitMQ CLI Tools\nDESCRIPTION: Commands to update the PATH environment variable to include RabbitMQ CLI tools directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-homebrew.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# for macOS Intel\nexport PATH=$PATH:/usr/local/sbin\n# for Apple Silicon\nexport PATH=$PATH:/opt/homebrew/sbin\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Service for RabbitMQ on Kubernetes\nDESCRIPTION: This snippet shows the command to create a Service for client connections to the RabbitMQ cluster on Kubernetes. It applies the configuration defined in the 'client-service.yaml' file to create a LoadBalancer service with an external IP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f client-service.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options and Cipher Suites in RabbitMQ\nDESCRIPTION: Configuration for TLS options including client renegotiation settings and prioritized cipher suite list for TLSv1.2. Includes secure cipher configurations prioritizing ECDHE and DHE with AES-GCM.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\nssl_options.client_renegotiation = false\nssl_options.secure_renegotiate   = true\n\nssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\nssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\nssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\nssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\nssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\nssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\nssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\nssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Expiration\nDESCRIPTION: This command publishes a message to the source queue with a 1-second expiration time and persistent delivery mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nkubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin publish exchange=amq.default routing_key=my-source-queue \\\n    payload=msg1 properties='{\"expiration\" : \"1000\", \"delivery_mode\" : 2}'\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages in RabbitMQ with Python\nDESCRIPTION: Code to mark messages as persistent when publishing to RabbitMQ. This setting tells RabbitMQ to save the message to disk, providing durability in case of server restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_publish(exchange='',\n                      routing_key=\"task_queue\",\n                      body=message,\n                      properties=pika.BasicProperties(\n                         delivery_mode = pika.DeliveryMode.Persistent\n                      ))\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Paging Ratio\nDESCRIPTION: Configuration for memory-based message paging threshold\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nvm_memory_high_watermark_paging_ratio = 0.5\n```\n\n----------------------------------------\n\nTITLE: Filtering RabbitMQ-Specific Logs\nDESCRIPTION: Command to filter system logs to show only RabbitMQ-related entries using journalctl and grep.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd Authentication for RabbitMQ Cluster Formation\nDESCRIPTION: This snippet shows how to configure authentication credentials for etcd when used with RabbitMQ cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\ncluster_formation.etcd.username = rabbitmq\ncluster_formation.etcd.password = s3kR37\n```\n\n----------------------------------------\n\nTITLE: Declaring an Exchange using PUT /api/exchanges/{vhost}/{name}\nDESCRIPTION: This JSON payload is used to declare an exchange. It specifies the exchange type, auto-delete flag, durability, internal flag, and any additional arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"direct\",\n  \"auto_delete\": false,\n  \"durable\": true,\n  \"internal\": false,\n  \"arguments\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading TLS Certificates via Command Line\nDESCRIPTION: Bash commands to force reload of TLS certificates without node restart using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it INSTANCE-server-0 -- rabbitmqctl eval \"ssl:clear_pem_cache().\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval \"ssl:clear_pem_cache().\"\n```\n\n----------------------------------------\n\nTITLE: Describing Queue Status\nDESCRIPTION: This command provides a detailed description of the 'my-queue' RabbitMQ queue, including its status, events, and other relevant information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-topology-operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe queues.rabbitmq.com my-queue\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Service Port for RabbitMQ in Consul\nDESCRIPTION: This configuration overrides the default service port (5672) for RabbitMQ when registering with Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# 5672 is used by default\ncluster_formation.consul.svc_port = 6674\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Inter-node TLS on Windows Using Environment Variables\nDESCRIPTION: This PowerShell script configures the environment variables needed for TLS-encrypted inter-node communication in RabbitMQ on Windows. It sets the SSL path and configures the necessary Erlang runtime flags to use TLS with an external configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n@echo off\nrem NOTE: If spaces are present in any of these paths,\nrem double quotes must be used.\n\nrem NOTE: the following path is **system dependent** and will vary between Erlang versions\nrem       and installation paths\nset SSL_PATH=\"C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin\"\n\nrem -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\nrem -proto_dist inet_tls tells the runtime to encrypt inter-node communication\nrem -ssl_dist_optfile tells the runtime where to find its inter-node TLS configuration file\nset SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^\n    -proto_dist inet_tls ^\n    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config\n\nrem Same as above but for CLI tools\nset CTL_ERL_ARGS=-pa %SSL_PATH% ^\n    -proto_dist inet_tls ^\n    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config\n```\n\n----------------------------------------\n\nTITLE: Using Microsecond Epoch Timestamps in RabbitMQ Logs\nDESCRIPTION: Configuration for setting log timestamps to microseconds since Unix epoch. This produces numeric timestamps useful for precise timing analysis.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Log Level\nDESCRIPTION: Command to set the logging level for the running RabbitMQ node\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_log_level debug\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Windows User Root Store\nDESCRIPTION: PowerShell command for adding a certificate to a Windows user's Root certificate store using certmgr. This enables the certificate to be trusted by .NET applications.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows\ncertmgr -add -all \\path\\to\\cacert.cer -s Root\n```\n\n----------------------------------------\n\nTITLE: Alternative TLS Version Check (Unix/Linux)\nDESCRIPTION: Alternative command to check TLS support using rabbitmqctl eval\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'ssl:versions().'\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions via CLI Tools\nDESCRIPTION: Commands for importing RabbitMQ definitions using rabbitmqctl and rabbitmqadmin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Does not require management plugin to be enabled\nrabbitmqctl import_definitions /path/to/definitions.file.json\n\n# Requires management plugin to be enabled\nrabbitmqadmin import /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Using Memory and Binary Parameters with RabbitMQ Node API\nDESCRIPTION: URL parameters that can be used with the /api/nodes/(name) endpoint to retrieve detailed memory usage or binary memory ownership information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_38\n\nLANGUAGE: http\nCODE:\n```\n?memory=true\n```\n\nLANGUAGE: http\nCODE:\n```\n?binary=true\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Plugins using CLI\nDESCRIPTION: Demonstrates various ways to list RabbitMQ plugins using the rabbitmq-plugins command, including basic listing, listing without headers, and listing in JSON format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list\nrabbitmq-plugins list -s\nrabbitmq-plugins list --formatter=json\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ and Client Versions\nDESCRIPTION: This code snippet shows the versions of RabbitMQ broker and various clients (Java, Erlang, .NET) used for compatibility testing with OpenAMQ PAL scripts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/interoperability.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n    <tbody>\n        <tr>\n            <td>RabbitMQ broker</td>\n            <td><span class=\"code\">2.0.0</span></td>\n        </tr>\n        <tr>\n            <td>RabbitMQ Java Client</td>\n            <td><span class=\"code\">2.0.0</span></td>\n        </tr>\n        <tr>\n            <td>RabbitMQ Erlang Client</td>\n            <td><span class=\"code\">2.0.0</span></td>\n        </tr>\n        <tr>\n            <td>RabbitMQ .NET Client</td>\n            <td><span class=\"code\">2.0.0</span></td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Users with JSON Payload in RabbitMQ API\nDESCRIPTION: Example JSON payload for the POST /api/users/bulk-delete endpoint that allows bulk deletion of multiple users. The payload contains an array of usernames to be deleted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"users\" : [\"user1\", \"user2\", \"user3\"]}\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Queue Information via HTTP API\nDESCRIPTION: Endpoints for retrieving information about queues in RabbitMQ. These provide similar data to the rabbitmqctl list_queues command plus message statistics and additional details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_36\n\nLANGUAGE: http\nCODE:\n```\n/api/queues\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/queues/(vhost)\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/queues/(vhost)/(name)\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values in RabbitMQ with encode Command\nDESCRIPTION: The encode command encrypts values using a specified passphrase. It allows customization of the encryption settings through optional parameters for cipher, hash algorithm, and iteration count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode '<<\"guest\">>' mypassphrase\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '<<\"guest\">>' mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Detecting Stuck Processes in RabbitMQ\nDESCRIPTION: Samples stack traces of Erlang processes and reports those with identical samples which may indicate processes not making progress. The -q flag enables quiet mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics maybe_stuck -q\n```\n\n----------------------------------------\n\nTITLE: Decrypting Configuration Values with RabbitMQ CLI (PowerShell)\nDESCRIPTION: Shows how to use the rabbitmqctl decode command to decrypt previously encrypted configuration values on Windows using PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_49\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl decode \"{encrypted, <<\"\"...\"\">>}\" mypassphrase\n# => <<\"guest\">>\nrabbitmqctl decode \"{encrypted, <<\"\"...\"\">>}\" mypassphrase\n# => \"amqp://fred:secret@host1.domain/my_vhost\"\n```\n\n----------------------------------------\n\nTITLE: Enabling VT/ANSI Escape Sequences in PowerShell\nDESCRIPTION: PowerShell command to enable VT/ANSI escape sequences in the console, fixing the display of formatted text output from RabbitMQ CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/windows-configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ItemProperty HKCU:\\Console VirtualTerminalLevel -Type DWORD 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitoring-Only User in RabbitMQ using Bash\nDESCRIPTION: This bash script demonstrates how to create a user with monitoring-only access to the RabbitMQ management UI. It creates a user, tags it with the 'monitoring' tag, and grants empty permissions which allow viewing but not modifying resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# See the Access Control guide to learn about user management.\n#\n# Password is provided as a command line argument.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\nrabbitmqctl add_user 'monitoring' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n\n# tag user 'monitoring' with a tag of the same name\nrabbitmqctl set_user_tags 'monitoring' 'monitoring'\n\n# grant the user empty permissions\nrabbitmqctl set_permissions --vhost 'vhost-name' 'monitoring' '^$' '^$' '^$'\n```\n\n----------------------------------------\n\nTITLE: AMQP Connection Error Log for JWT Token Size Limit\nDESCRIPTION: Server log output showing an AMQP connection being closed due to JWT token exceeding the maximum frame size limit. The error occurs during connection handshake when a large token is provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-oauth2.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2025-03-15 05:55:21.689185+00:00 [info] <0.2771.0> accepting AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672)\n2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> closing AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672):\n2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> {handshake_error,starting,0,\n2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                  {amqp_error,frame_error,\n2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              \"type 1, all octets = <<>>: {frame_too_large,6307,4088}\",\n2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              none}}\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Node Channel Maximum\nDESCRIPTION: Configuration setting to limit the maximum number of channels that can be opened on each node in a cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nchannel_max_per_node = 500\n```\n\n----------------------------------------\n\nTITLE: Deactivating Topology Recovery in C#\nDESCRIPTION: Shows how to deactivate topology recovery while keeping connection recovery active in C#.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_76\n\nLANGUAGE: csharp\nCODE:\n```\nawait AmqpConnection.CreateAsync(\n    ConnectionSettingBuilder.Create().RecoveryConfiguration(\n    RecoveryConfiguration.Create()\n    .Topology(false)) // deactivate topology recovery\n    .Build());\n```\n\n----------------------------------------\n\nTITLE: Configuring DETS-based Retained Message Store for MQTT\nDESCRIPTION: Configuration example for using a disk-based DETS store for MQTT retained messages, with a configurable sync interval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/mqtt.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n## use DETS (disk-based) store for retained messages\nmqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets\n## only used by DETS store (in milliseconds)\nmqtt.retained_message_store_dets_sync_interval = 2000\n```\n\n----------------------------------------\n\nTITLE: Rotating RabbitMQ Log Files\nDESCRIPTION: Command to trigger internal log rotation for RabbitMQ logs. The rotation is performed asynchronously according to logging settings in the configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl rotate_logs\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Plugins\nDESCRIPTION: Lists all available RabbitMQ plugins with their status. Each plugin is prefixed with status indicators showing if they are enabled and running.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-plugins.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Feature Flags\nDESCRIPTION: Command to list feature flags with specific columns for detailed information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags name state\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Memory Breakdown Output\nDESCRIPTION: Example output from rabbitmq-diagnostics memory_breakdown command showing memory usage distribution across different categories including quorum queues, binary heap, connections, and system components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nquorum_queue_procs: 0.4181 gb (28.8%)\nbinary: 0.4129 gb (28.44%)\nallocated_unused: 0.1959 gb (13.49%)\nconnection_other: 0.1894 gb (13.05%)\nplugins: 0.0373 gb (2.57%)\nother_proc: 0.0325 gb (2.24%)\ncode: 0.0305 gb (2.1%)\nquorum_ets: 0.0303 gb (2.09%)\nconnection_readers: 0.0222 gb (1.53%)\nother_system: 0.0209 gb (1.44%)\nconnection_channels: 0.017 gb (1.17%)\nmgmt_db: 0.017 gb (1.17%)\nmetrics: 0.0109 gb (0.75%)\nother_ets: 0.0073 gb (0.5%)\nconnection_writers: 0.007 gb (0.48%)\natom: 0.0015 gb (0.11%)\nmnesia: 0.0006 gb (0.04%)\nmsg_index: 0.0002 gb (0.01%)\nqueue_procs: 0.0002 gb (0.01%)\nreserved_unallocated: 0.0 gb (0.0%)\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Feature Flags\nDESCRIPTION: Command to list feature flags with specific columns for detailed information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags name state\n```\n\n----------------------------------------\n\nTITLE: Downloading Stream PerfTest Tool\nDESCRIPTION: These commands download the Stream PerfTest JAR file, which is used to demonstrate and test stream filtering functionality. The tool requires Java 11 or later.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd /tmp\nwget -O stream-perf-test.jar \\\n  https://github.com/rabbitmq/rabbitmq-java-tools-binaries-dev/releases/download/v-stream-perf-test-latest/stream-perf-test-latest.jar\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang Dependencies with Version Pinning\nDESCRIPTION: Installs specific versions of Erlang packages required by RabbitMQ using version pinning. Sets a supported Erlang version and installs multiple Erlang components needed for RabbitMQ operation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupported_erlang_version=\"1:26.2.5.6-1\"\nsudo apt-get install -y erlang-base=$supported_erlang_version \\\n                        erlang-asn1=$supported_erlang_version \\\n                        erlang-crypto=$supported_erlang_version \\\n                        erlang-eldap=$supported_erlang_version \\\n                        erlang-ftp=$supported_erlang_version \\\n                        erlang-inets=$supported_erlang_version \\\n                        erlang-mnesia=$supported_erlang_version \\\n                        erlang-os-mon=$supported_erlang_version \\\n                        erlang-parsetools=$supported_erlang_version \\\n                        erlang-public-key=$supported_erlang_version \\\n                        erlang-runtime-tools=$supported_erlang_version \\\n                        erlang-snmp=$supported_erlang_version \\\n                        erlang-ssl=$supported_erlang_version \\\n                        erlang-syntax-tools=$supported_erlang_version \\\n                        erlang-tftp=$supported_erlang_version \\\n                        erlang-tools=$supported_erlang_version \\\n                        erlang-xmerl=$supported_erlang_version\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation\nDESCRIPTION: Full implementation of a direct log receiver that subscribes to specific severity levels\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nabort \"Usage: #{$PROGRAM_NAME} [info] [warning] [error]\" if ARGV.empty?\n\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nexchange = channel.direct('direct_logs')\nqueue = channel.queue('', exclusive: true)\n\nARGV.each do |severity|\n  queue.bind(exchange, routing_key: severity)\nend\n\nputs ' [*] Waiting for logs. To exit press CTRL+C'\n\nbegin\n  queue.subscribe(block: true) do |delivery_info, _properties, body|\n    puts \" [x] #{delivery_info.routing_key}:#{body}\"\n  end\nrescue Interrupt => _\n  channel.close\n  connection.close\n\n  exit(0)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a RabbitMQ User with Basic Syntax in Bash\nDESCRIPTION: Example of adding a user to RabbitMQ using the rabbitmqctl add_user command with username and password as positional arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Source Address Configuration\nDESCRIPTION: Mandatory configuration for setting the source address of an AMQP 1.0 link.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n{source_address, <<\"my-address\">>}\n```\n\n----------------------------------------\n\nTITLE: AMQP Message Properties Code Example\nDESCRIPTION: Examples of AMQP message property fields used for delivery mode and priority settings in RabbitMQ queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/queues.md#2025-04-09_snippet_2\n\nLANGUAGE: AMQP\nCODE:\n```\ndelivery_mode\npriority\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task Producer in Objective-C with RabbitMQ\nDESCRIPTION: This snippet shows how to create a 'newTask' method that connects to RabbitMQ, creates a channel, and publishes a message to a queue. The method accepts a string parameter that represents the task to be executed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)newTask:(NSString *)msg {\n    NSLog(@\"Attempting to connect to local RabbitMQ broker\");\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n\n    RMQQueue *q = [ch queue:@\"hello\"];\n\n    NSData *msgData = [msg dataUsingEncoding:NSUTF8StringEncoding];\n    [ch.defaultExchange publish:msgData routingKey:q.name];\n    NSLog(@\"Sent %@\", msg);\n\n    [conn close];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Options for MQTT Connections in INI\nDESCRIPTION: INI configuration that optimizes TCP settings for MQTT connections to maximize throughput. This increases TCP buffer sizes to 192 KiB and configures important TCP socket options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.linger.on      = true\nmqtt.tcp_listen_options.linger.timeout = 0\nmqtt.tcp_listen_options.sndbuf = 196608\nmqtt.tcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Timeout in RabbitMQ INI\nDESCRIPTION: Configuration examples for setting consumer acknowledgement timeout in rabbitmq.conf. Shows how to set timeout values in milliseconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/consumers.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# 30 minutes in milliseconds\nconsumer_timeout = 1800000\n```\n\nLANGUAGE: ini\nCODE:\n```\n# one hour in milliseconds\nconsumer_timeout = 3600000\n```\n\n----------------------------------------\n\nTITLE: TLS-Only Configuration\nDESCRIPTION: Shows how to deactivate non-TLS listeners and configure TLS-only connections with SSL options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# deactivates non-TLS listeners, only TLS-enabled (activated) clients will be able to connect\nlisteners.tcp = none\n\nlisteners.ssl.default = 5671\n\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = false\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Users with JSON Payload in RabbitMQ API\nDESCRIPTION: Example JSON payload for the POST /api/users/bulk-delete endpoint that allows bulk deletion of multiple users. The payload contains an array of usernames to be deleted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"users\" : [\"user1\", \"user2\", \"user3\"]}\n```\n\n----------------------------------------\n\nTITLE: Establishing a RabbitMQ Connection\nDESCRIPTION: Elixir code that establishes a connection to RabbitMQ and opens a channel for communication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\n```\n\n----------------------------------------\n\nTITLE: Setting Management DB Cache Multiplier\nDESCRIPTION: Configures the cache duration multiplier for management plugin queries, affecting how long expensive query results are cached.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.db_cache_multiplier = 5\n```\n\n----------------------------------------\n\nTITLE: Verifying Java Installation for RabbitMQ Tutorial\nDESCRIPTION: Bash command to verify that Java is correctly installed and available in the system PATH. This is a prerequisite for running the RabbitMQ Stream tutorial.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njava --help\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for RabbitMQ Server Certificates in Kubernetes\nDESCRIPTION: Command to create a Kubernetes TLS secret containing the server certificate and private key for RabbitMQ TLS encryption. This secret will be referenced in the RabbitmqCluster resource.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret tls tls-secret --cert=server.pem --key=server-key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Inter-node TLS Using ssl_dist_optfile in rabbitmq-env.conf (Linux)\nDESCRIPTION: This snippet demonstrates how to simplify TLS configuration for RabbitMQ node-to-node communication by using the -ssl_dist_optfile option. It specifies the SSL path and points to an external configuration file that contains all TLS options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/clustering-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: the following path is system dependent and will change between Erlang\n#       versions\nERL_SSL_PATH=\"/usr/lib64/erlang/lib/ssl-9.4/ebin\"\n\n# -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\n# -proto_dist inet_tls tells the runtime to encrypt inter-node communication\n# -ssl_dist_optfile tells the runtime where to find its inter-node TLS configuration file\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH\n  -proto_dist inet_tls\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\"\n\nRABBITMQ_CTL_ERL_ARGS=\"-pa $ERL_SSL_PATH\n  -proto_dist inet_tls\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional RabbitMQ Plugins in YAML\nDESCRIPTION: Specifies additional plugins to enable in RabbitMQ. The example enables the rabbitmq_top and rabbitmq_shovel plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  rabbitmq:\n    additionalPlugins:\n      - rabbitmq_top\n      - rabbitmq_shovel\n```\n\n----------------------------------------\n\nTITLE: Basic RabbitMQ Operations in Erlang\nDESCRIPTION: This Erlang module demonstrates basic RabbitMQ operations including connection establishment, channel opening, queue declaration, message publishing, message consumption, and manual acknowledgement. It uses a polling consumer for simplicity and does not implement publisher confirms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_29\n\nLANGUAGE: erlang\nCODE:\n```\n-module(amqp_example).\n\n-include(\"amqp_client.hrl\").\n\n-compile([export_all]).\n\ntest() ->\n    %% Start a network connection\n    {ok, Connection} = amqp_connection:start(#amqp_params_network{}),\n    %% Open a channel on the connection\n    {ok, Channel} = amqp_connection:open_channel(Connection),\n\n    %% Declare a queue\n    #'queue.declare_ok'{queue = Q}\n        = amqp_channel:call(Channel, #'queue.declare'{}),\n\n    %% Publish a message\n    Payload = <<\"foobar\">>,\n    Publish = #'basic.publish'{exchange = <<>>, routing_key = Q},\n    amqp_channel:cast(Channel, Publish, #amqp_msg{payload = Payload}),\n\n    %% Poll for a message\n    Get = #'basic.get'{queue = Q},\n    {#'basic.get_ok'{delivery_tag = Tag}, Content}\n         = amqp_channel:call(Channel, Get),\n\n    %% Do something with the message payload\n    %% (some work here)\n\n    %% Ack the message\n    amqp_channel:cast(Channel, #'basic.ack'{delivery_tag = Tag}),\n\n    %% Close the channel\n    amqp_channel:close(Channel),\n    %% Close the connection\n    amqp_connection:close(Connection),\n\n    ok.\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Autoscaling Group Membership for RabbitMQ\nDESCRIPTION: This configuration snippet enables the use of AWS autoscaling group membership for RabbitMQ peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.use_autoscaling_group = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Priority Queue in STOMP\nDESCRIPTION: Example of a STOMP SUBSCRIBE frame that creates a priority queue by specifying the x-max-priority header.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_19\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/queue/my-priority-queue\nx-max-priority:5\n```\n\n----------------------------------------\n\nTITLE: Configuring Erlang Kernel TCP Settings\nDESCRIPTION: Advanced configuration for Erlang kernel TCP settings including nodelay options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_26\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {kernel, [\n    {inet_default_connect_options, [{nodelay, true}]},\n    {inet_default_listen_options,  [{nodelay, true}]}\n  ]}].\n```\n\n----------------------------------------\n\nTITLE: Defining AMQP 1.0 Flow Frame Fields for Session Flow Control in XML\nDESCRIPTION: XML definition of the fields used in AMQP 1.0 flow frames for session flow control. These fields include next-incoming-id, incoming-window, next-outgoing-id, and outgoing-window, which are used to manage the flow of transfer frames between endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"next-incoming-id\" type=\"transfer-number\"/>\n<field name=\"incoming-window\" type=\"uint\" mandatory=\"true\"/>\n<field name=\"next-outgoing-id\" type=\"transfer-number\" mandatory=\"true\"/>\n<field name=\"outgoing-window\" type=\"uint\" mandatory=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Protocol and URI Configuration\nDESCRIPTION: Shows how to configure the protocol type and connection URIs for a shovel, including authentication credentials and vhost specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{protocol, amqp091}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{uris, [\n        \"amqp://fred:secret@host1.domain/my_vhost\",\n        \"amqp://john:secret@host2.domain/my_vhost\"\n       ]}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Exchange Metrics Table\nDESCRIPTION: Exchange-specific metrics for monitoring message publishing and routing behavior\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Metric                                                        | Description                                                                                                  |\n|---------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|\\n| rabbitmq_detailed_exchange_messages_published_total           | Total number of messages published to an exchange                                                          |\\n| rabbitmq_detailed_exchange_messages_confirmed_total           | Total number of messages published to an exchange and [confirmed](./confirms#publisher-confirms)                                            |\\n| rabbitmq_detailed_exchange_messages_unroutable_returned_total | Total number of messages published as mandatory to an exchange and returned to the publisher as [unroutable](./publishers#unroutable) |\\n| rabbitmq_detailed_exchange_messages_unroutable_dropped_total  | Total number of messages published as non-mandatory to an exchange and dropped as [unroutable](./publishers#unroutable)               |\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Event Exchange Plugin\nDESCRIPTION: Command to activate the rabbitmq_event_exchange plugin, which requires no additional configuration after installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/event-exchange.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_event_exchange\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Level Format in RabbitMQ\nDESCRIPTION: Configuration example for customizing the log level format. This specific setting uses lowercase, four-character format for log levels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter.level_format = lc4\n```\n\n----------------------------------------\n\nTITLE: Implementing String Sub-query in RabbitMQ LDAP Authentication\nDESCRIPTION: Structure for string sub-query that substitutes arguments into a string. This should be used within match or equals queries as it returns a string rather than a boolean.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_25\n\nLANGUAGE: erlang\nCODE:\n```\n{string, Pattern}\n```\n\n----------------------------------------\n\nTITLE: Running Spring AMQP Topic Sender with Java\nDESCRIPTION: Command to run the RabbitMQ topic exchange sender example with Spring profiles for 60 seconds duration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-spring-amqp.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njava -jar target/rabbitmq-tutorials.jar \\\n    --spring.profiles.active=topics,sender \\\n    --tutorial.client.duration=60000\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ CLI Tools to PATH\nDESCRIPTION: Commands to add RabbitMQ CLI tools to the system PATH for both Intel and Apple Silicon Macs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# for macOS Intel\nexport PATH=$PATH:/usr/local/sbin\n# for Apple Silicon\nexport PATH=$PATH:/opt/homebrew/sbin\n```\n\n----------------------------------------\n\nTITLE: Tracking Published Messages with Sequence Numbers in RabbitMQ with Java\nDESCRIPTION: This snippet shows how to use a concurrent map to track outbound messages by their sequence numbers. It demonstrates storing the message body with its corresponding sequence number before publishing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-java.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nConcurrentNavigableMap<Long, String> outstandingConfirms = new ConcurrentSkipListMap<>();\n// ... code for confirm callbacks will come later\nString body = \"...\";\noutstandingConfirms.put(channel.getNextPublishSeqNo(), body);\nchannel.basicPublish(exchange, queue, properties, body.getBytes());\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Mirror Status via CLI\nDESCRIPTION: Command to list queue names and their mirror status including synchronized mirror PIDs\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues name mirror_pids synchronised_mirror_pids\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_queues name mirror_pids synchronised_mirror_pids\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat list_queues name mirror_pids synchronised_mirror_pids\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Mirror Status via CLI\nDESCRIPTION: Command to list queue names and their mirror status including synchronized mirror PIDs\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues name mirror_pids synchronised_mirror_pids\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat list_queues name mirror_pids synchronised_mirror_pids\n```\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat list_queues name mirror_pids synchronised_mirror_pids\n```\n\n----------------------------------------\n\nTITLE: Protocol and URI Configuration\nDESCRIPTION: Shows how to configure the protocol type and connection URIs for a shovel, including authentication credentials and vhost specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{protocol, amqp091}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{uris, [\n        \"amqp://fred:secret@host1.domain/my_vhost\",\n        \"amqp://john:secret@host2.domain/my_vhost\"\n       ]}\n```\n\n----------------------------------------\n\nTITLE: Setting Common OAuth2 Settings\nDESCRIPTION: Configuration of common OAuth2 settings that apply to all resources including enabled status, logon type, and required scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = sp_initiated\nmanagement.oauth_scopes = openid rabbitmq.tag:management rabbitmq.read:*/*\n```\n\n----------------------------------------\n\nTITLE: HTTPS Configuration in Classic Erlang Config Format\nDESCRIPTION: Configures the management plugin to use HTTPS using the classic Erlang config format. This example sets TLS cipher suites, certificate paths, and security options as in the previous example.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_25\n\nLANGUAGE: erlang\nCODE:\n```\n%% The classic config format example is provided primarily for completeness sake,\n%% using the modern `rabbitmq.conf` format for configuring this plugin is highly recommended.\n[\n  {rabbitmq_management,\n   [\n    {ssl_config, [{port,     15671},\n                  {ssl,      true},\n                  {cacertfile, \"/path/to/ca_certificate.pem\"},\n                  {certfile,   \"/path/to/server_certificate.pem\"},\n                  {keyfile,    \"/path/to/server_key.pem\"},\n\n                  %% don't do peer verification to HTTPS clients\n                  {verify,               verify_none},\n                  {fail_if_no_peer_cert, false},\n\n                  {client_renegotiation, false},\n                  {secure_renegotiate,   true},\n                  {honor_ecc_order,      true},\n                  {honor_cipher_order,   true},\n\n                  {versions,['tlsv1.2']},\n                  {ciphers, [\"ECDHE-ECDSA-AES256-GCM-SHA384\",\n                             \"ECDHE-RSA-AES256-GCM-SHA384\",\n                             \"ECDHE-ECDSA-AES256-SHA384\",\n                             \"ECDHE-RSA-AES256-SHA384\",\n                             \"ECDH-ECDSA-AES256-GCM-SHA384\",\n                             \"ECDH-RSA-AES256-GCM-SHA384\",\n                             \"ECDH-ECDSA-AES256-SHA384\",\n                             \"ECDH-RSA-AES256-SHA384\",\n                             \"DHE-RSA-AES256-GCM-SHA384\"\n                            ]}                \n                ]}   \n   ]} ].\n```\n\n----------------------------------------\n\nTITLE: Querying Log Location in RabbitMQ with PowerShell\nDESCRIPTION: Command to find the current log file location using rabbitmq-diagnostics CLI tool in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-diagnostics.bat -q log_location\n```\n\n----------------------------------------\n\nTITLE: Setting a Listener on a Connection in Java\nDESCRIPTION: Demonstrates how to add a listener to a RabbitMQ connection in Java. The listener can react to state changes, providing access to previous and current states, failure causes, and the connection resource.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_64\n\nLANGUAGE: java\nCODE:\n```\nConnection connection = environment.connectionBuilder()\n    .listeners(context -> { // set one or several listeners\n        context.previousState(); // the previous state\n        context.currentState(); // the current (new) state\n        context.failureCause(); // the cause of the failure (in case of failure)\n        context.resource(); // the connection\n    }).build();\n```\n\n----------------------------------------\n\nTITLE: Running Optimized RabbitMQ Stream Publisher (Shell)\nDESCRIPTION: This shell command runs the optimized publisher application for RabbitMQ streams. It demonstrates how the publisher starts from the last published message and only sends new messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Deduplication$PublishSmartDedupSecondDay'\nConnecting...\nConnected.\nStarting publishing at 10\nPublishing 10 message with deduplication enabled.\nMessages confirmed? yes\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Client with erlang.mk\nDESCRIPTION: Dependency declaration for installing the rabbit_common package using erlang.mk build tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client.md#2025-04-09_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\ndep_rabbit_common = hex &version-erlang-client;\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Connect for STOMP Clients\nDESCRIPTION: Configuration to enable implicit connection for STOMP clients, allowing them to omit the CONNECT frame and begin communicating immediately using default credentials.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_user = guest\nstomp.default_pass = guest\nstomp.implicit_connect = true\n```\n\n----------------------------------------\n\nTITLE: Safe Division Function Using Maybe Monad\nDESCRIPTION: Example of using the Maybe monad to implement a safe division function that handles division by zero gracefully, showing how monads can make error handling code more concise and readable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\nif_safe_div_zero(X, Y, Fun) ->\n    do([maybe_m ||\n        Result <- case Y == 0 of\n                        true  -> fail(\"Cannot divide by zero\");\n                        false -> return(X / Y)\n                    end,\n        return(Fun(Result))]).\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Producer\nDESCRIPTION: Go code showing the necessary imports for creating a RabbitMQ stream producer application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"github.com/rabbitmq/rabbitmq-stream-go-client/pkg/amqp\"\n    \"github.com/rabbitmq/rabbitmq-stream-go-client/pkg/stream\"\n    \"log\"\n    \"os\"\n)\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Status with PowerShell\nDESCRIPTION: This command performs a basic health check on a RabbitMQ node and displays information about the node if it is running. It's useful for monitoring and troubleshooting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-windows-manual.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat status\n```\n\n----------------------------------------\n\nTITLE: Closing Connections in RabbitMQ (Bash)\nDESCRIPTION: Examples of using rabbitmqctl to close connections in RabbitMQ. The first command closes 10 connections on the 'qa_env' vhost, while the second closes all connections globally.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_all_connections -p qa_env --limit 10 'Please close'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl close_all_connections --global\n```\n\n----------------------------------------\n\nTITLE: TLS Vulnerability Test Results for RabbitMQ Configuration\nDESCRIPTION: Output from a TLS security scan showing that this RabbitMQ TLSv1.2 configuration is not vulnerable to common TLS exploits like Heartbleed, POODLE, and ROBOT. The test confirms forward secrecy and strong cipher preferences.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\n Using \"OpenSSL 3.3.1 4 Jun 2024 (Library: OpenSSL 3.3.1 4 Jun 2024)\" [~94 ciphers]\n on [redacted]:/opt/homebrew/bin/openssl\n (built: \"Jun  4 12:53:04 2024\", platform: \"darwin64-arm64-cc\")\n\n\n Start 2024-08-08 13:42:36                -->> 127.0.0.1:5671 (localhost) <<--\n\n A record via:           /etc/hosts\n rDNS (127.0.0.1):       localhost.\n Service detected:       certificate-based authentication without providing client certificate and private key => skipping all HTTP checks\n\n\n Testing protocols via sockets except NPN+ALPN\n\n SSLv2      not offered (OK)\n SSLv3      not offered (OK)\n TLS 1      not offered\n TLS 1.1    not offered\n TLS 1.2    offered (OK)\n TLS 1.3    not offered and downgraded to a weaker protocol\n NPN/SPDY   not offered\n ALPN/HTTP2 not offered\n\n Testing cipher categories\n\n NULL ciphers (no encryption)                      not offered (OK)\n Anonymous NULL Ciphers (no authentication)        not offered (OK)\n Export ciphers (w/o ADH+NULL)                     not offered (OK)\n LOW: 64 Bit + DES, RC[2,4], MD5 (w/o export)      not offered (OK)\n Triple DES Ciphers / IDEA                         not offered\n Obsoleted CBC ciphers (AES, ARIA etc.)            not offered\n Strong encryption (AEAD ciphers) with no FS       not offered\n Forward Secrecy strong encryption (AEAD ciphers)  offered (OK)\n\n\n Testing server's cipher preferences\n\nHexcode  Cipher Suite Name (OpenSSL)       KeyExch.   Encryption  Bits     Cipher Suite Name (IANA/RFC)\n-----------------------------------------------------------------------------------------------------------------------------\nSSLv2\n -\nSSLv3\n -\nTLSv1\n -\nTLSv1.1\n -\nTLSv1.2 (server order)\n xc030   ECDHE-RSA-AES256-GCM-SHA384       ECDH 253   AESGCM      256      TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n x9f     DHE-RSA-AES256-GCM-SHA384         DH 2048    AESGCM      256      TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n xc02f   ECDHE-RSA-AES128-GCM-SHA256       ECDH 253   AESGCM      128      TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n x9e     DHE-RSA-AES128-GCM-SHA256         DH 2048    AESGCM      128      TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\nTLSv1.3\n -\n\n Has server cipher order?     yes (OK)\n\n\n Testing robust forward secrecy (FS) -- omitting Null Authentication/Encryption, 3DES, RC4\n\n FS is offered (OK)           ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES128-GCM-SHA256\n Elliptic curves offered:     prime256v1 secp384r1 secp521r1 brainpoolP256r1 brainpoolP384r1 brainpoolP512r1 X25519 X448\n DH group offered:            RFC3526/Oakley Group 14 (2048 bits)\n TLS 1.2 sig_algs offered:    RSA+SHA256 RSA+SHA384 RSA+SHA512 RSA-PSS-RSAE+SHA256\n\n Testing server defaults (Server Hello)\n\n TLS extensions (standard)    \"renegotiation info/#65281\" \"EC point formats/#11\" \"max fragment length/#1\"\n Session Ticket RFC 5077 hint no -- no lifetime advertised\n SSL Session ID support       yes\n Session Resumption           Tickets no, Client Auth: ID resumption test not supported\n TLS clock skew               -1 sec from localtime\n Client Authentication        required\n CA List for Client Auth      L=$$$$,CN=TLSGenSelfSignedtRootCA 2022-03-22T11:27:45.010198\n Signature Algorithm          SHA256 with RSA\n Server key size              RSA 2048 bits (exponent is 65537)\n Server key usage             Digital Signature, Key Encipherment\n Server extended key usage    TLS Web Server Authentication\n Serial                       01 (OK: length 1)\n Fingerprints                 SHA1 A4346FA6FDC61FCD4C0199EA14B8AE0F5D5121B1\n                              SHA256 C81025DA6F9BB646239659420D58E73F62CEB7D2AD5AC13FF12A9DE057394953\n Common Name (CN)             [redacted]\n subjectAltName (SAN)         [redacted] localhost\n Trust (hostname)             Ok via SAN (same w/o SNI)\n Chain of trust               NOT ok (self signed CA in chain)\n EV cert (experimental)       no\n Certificate Validity (UTC)   2779 >= 60 days (2022-03-22 07:27 --> 2032-03-19 07:27)\n                              >= 10 years is way too long\n ETS/\"eTLS\", visibility info  not present\n Certificate Revocation List  --\n OCSP URI                     --\n                              NOT ok -- neither CRL nor OCSP URI provided\n OCSP stapling                not offered\n OCSP must staple extension   --\n DNS CAA RR (experimental)    not offered\n Certificate Transparency     --\n Certificates provided        2\n Issuer                       TLSGenSelfSignedtRootCA 2022-03-22T11:27:45.010198\n Intermediate cert validity   #1: ok > 40 days (2032-03-19 07:27). $$$$ <-- $$$$\n Intermediate Bad OCSP (exp.) Ok\n\n\n Testing vulnerabilities\n\n Heartbleed (CVE-2014-0160)                not vulnerable (OK), no heartbeat extension\n CCS (CVE-2014-0224)                       not vulnerable (OK)\n Ticketbleed (CVE-2016-9244), experiment.  not vulnerable (OK), no session ticket extension\n ROBOT                                     Server does not support any cipher suites that use RSA key transport\n Secure Renegotiation (RFC 5746)           supported (OK)\n Secure Client-Initiated Renegotiation     not having provided client certificate and private key file, the client x509-based authentication prevents this from being tested\n CRIME, TLS (CVE-2012-4929)                not vulnerable (OK)\n BREACH (CVE-2013-3587)                    not having provided client certificate and private key file, the client x509-based authentication prevents this from being tested\n POODLE, SSL (CVE-2014-3566)               not vulnerable (OK), no SSLv3 support\n TLS_FALLBACK_SCSV (RFC 7507)              No fallback possible (OK), no protocol below TLS 1.2 offered\n SWEET32 (CVE-2016-2183, CVE-2016-6329)    not vulnerable (OK)\n FREAK (CVE-2015-0204)                     not vulnerable (OK)\n DROWN (CVE-2016-0800, CVE-2016-0703)      not vulnerable on this host and port (OK)\n                                           make sure you don't use this certificate elsewhere with SSLv2 enabled services, see\n                                           https://search.censys.io/search?resource=hosts&virtual_hosts=INCLUDE&q=C81025DA6F9BB646239659420D58E73F62CEB7D2AD5AC13FF12A9DE057394953\n LOGJAM (CVE-2015-4000), experimental      common prime with 2048 bits detected: RFC3526/Oakley Group 14 (2048 bits),\n                                           but no DH EXPORT ciphers\n BEAST (CVE-2011-3389)                     not vulnerable (OK), no SSL3 or TLS1\n LUCKY13 (CVE-2013-0169), experimental     not vulnerable (OK)\n Winshock (CVE-2014-6321), experimental    not vulnerable (OK) - CAMELLIA or ECDHE_RSA GCM ciphers found\n RC4 (CVE-2013-2566, CVE-2015-2808)        no RC4 ciphers detected (OK)\n\nCould not determine the protocol, only simulating generic clients.\n\n Running client simulations via sockets\n\n Browser                      Protocol  Cipher Suite Name (OpenSSL)       Forward Secrecy\n------------------------------------------------------------------------------------------------\n Android 8.1 (native)         TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n Android 9.0 (native)         TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n Android 10.0 (native)        TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n Android 11 (native)          TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n Android 12 (native)          TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n Java 7u25                    No connection\n Java 8u161                   TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       521 bit ECDH (P-521)\n Java 11.0.2 (OpenJDK)        TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       521 bit ECDH (P-521)\n Java 17.0.3 (OpenJDK)        TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n go 1.17.8                    TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n LibreSSL 2.8.3 (Apple)       TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n OpenSSL 1.0.2e               TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       521 bit ECDH (P-521)\n OpenSSL 1.1.0l (Debian)      TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n OpenSSL 1.1.1d (Debian)      TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n OpenSSL 3.0.3 (git)          TLSv1.2   ECDHE-RSA-AES256-GCM-SHA384       253 bit ECDH (X25519)\n```\n\n----------------------------------------\n\nTITLE: Applying RabbitMQ Cluster Configuration\nDESCRIPTION: Applies the RabbitMQ cluster configuration to the Kubernetes cluster using kubectl apply. This creates the RabbitMQ cluster based on the YAML definition.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Named Exchange\nDESCRIPTION: Demonstrates how to publish messages to a specific named exchange instead of the default exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-python.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchannel.basic_publish(exchange='logs',\n                      routing_key='',\n                      body=message)\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Shovel Plugin\nDESCRIPTION: Command to enable the RabbitMQ Shovel plugin using rabbitmq-plugins CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_shovel\n```\n\n----------------------------------------\n\nTITLE: Specifying virtual host in AMQP 1.0 Shovel hostname parameter\nDESCRIPTION: This example shows how to specify a target virtual host in the hostname query parameter for RabbitMQ AMQP 1.0 connections by using the vhost:{name} format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nvhost:example-vhost\n```\n\n----------------------------------------\n\nTITLE: Closing the RabbitMQ Connection in JavaScript\nDESCRIPTION: Closes the connection to RabbitMQ after a delay and exits the process. This ensures the message has time to be sent before the program terminates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(function() {\n  connection.close();\n  process.exit(0)\n}, 500);\n```\n\n----------------------------------------\n\nTITLE: Implementing RabbitMQ Message Sender with Spring AMQP\nDESCRIPTION: This code implements the sender for the Work Queues tutorial. It sends messages with varying complexity, indicated by the number of dots appended to the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-spring-amqp.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut2;\n\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Tut2Sender {\n\n\t@Autowired\n\tprivate RabbitTemplate template;\n\n\t@Autowired\n\tprivate Queue queue;\n\n\tAtomicInteger dots = new AtomicInteger(0);\n\n\tAtomicInteger count = new AtomicInteger(0);\n\n\t@Scheduled(fixedDelay = 1000, initialDelay = 500)\n\tpublic void send() {\n\t\tStringBuilder builder = new StringBuilder(\"Hello\");\n\t\tif (dots.incrementAndGet() == 4) {\n\t\t\tdots.set(1);\n\t\t}\n\t\tfor (int i = 0; i < dots.get(); i++) {\n\t\t\tbuilder.append('.');\n\t\t}\n\t\tbuilder.append(count.incrementAndGet());\n\t\tString message = builder.toString();\n\t\ttemplate.convertAndSend(queue.getName(), message);\n\t\tSystem.out.println(\" [x] Sent '\" + message + \"'\");\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Shovel Using CLI Tools in Windows PowerShell\nDESCRIPTION: Command to create a dynamic shovel named 'my-shovel' using the RabbitMQ CLI tool in Windows PowerShell. This configuration specifies the source and destination queues, protocols, and connection URIs with proper Windows command-line escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_parameter shovel my-shovel ^\n  \"{\"\"src-protocol\"\": \"\"amqp091\"\", \"\"src-uri\"\":\"\"amqp://localhost\"\", \"\"src-queue\"\": \"\"source-queue\"\", ^\n   \"\"dest-protocol\"\": \"\"amqp091\"\", \"\"dest-uri\"\": \"\"amqp://remote.rabbitmq.local\"\", ^\n   \"\"dest-queue\"\": \"\"target-queue\"\", \"\"dest-queue-args\"\": {\"\"x-queue-type\"\": \"\"quorum\"\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Cache Module\nDESCRIPTION: Example showing how to specify a custom cache module implementation. This configuration sets the segmented ETS-based cache implementation as the module to be used for caching auth decisions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-cache-backend.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_cache.cache_module = rabbit_auth_backend_ets_segmented\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Buffer Size for AMQP Connections in RabbitMQ\nDESCRIPTION: Configuration settings to optimize TCP buffers for AMQP 0-9-1 connections to 32 KiB, which reduces per-connection memory usage at the cost of some throughput.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on      = true\ntcp_listen_options.linger.timeout = 0\ntcp_listen_options.sndbuf  = 32768\ntcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Defining In Group Queries in RabbitMQ LDAP Authentication\nDESCRIPTION: Queries that check if a user is a member of a specific LDAP group. The first form checks the 'member' attribute, while the second allows specifying a custom attribute name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group, Pattern, AttributeName}\n```\n\n----------------------------------------\n\nTITLE: Setting Inter-node Communication Port Range\nDESCRIPTION: RabbitMQ configuration to specify a custom port range for inter-node communication, using a single port in this example. Useful for precise firewall configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\ninet_dist_listen_min = 33672\ninet_dist_listen_max = 33672\n```\n\n----------------------------------------\n\nTITLE: Decrypting Configuration Values with RabbitMQ CLI (Bash)\nDESCRIPTION: Demonstrates how to use the rabbitmqctl decode command to decrypt previously encrypted configuration values on Unix-like systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decode '{encrypted, <<\"...\">>}' mypassphrase\n# => <<\"guest\">>\nrabbitmqctl decode '{encrypted, <<\"...\">>}' mypassphrase\n# => \"amqp://fred:secret@host1.domain/my_vhost\"\n```\n\n----------------------------------------\n\nTITLE: Listing Federation Parameters in RabbitMQ for Troubleshooting\nDESCRIPTION: Command used to inspect federation upstream parameters when troubleshooting federation links that don't start. This provides insight into how federation is configured in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics list_parameters --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Listing Federation Parameters in RabbitMQ for Troubleshooting\nDESCRIPTION: Command used to inspect federation upstream parameters when troubleshooting federation links that don't start. This provides insight into how federation is configured in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics list_parameters --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Deleting an Exchange in Go\nDESCRIPTION: Demonstrates how to delete an exchange using the Go client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_55\n\nLANGUAGE: Go\nCODE:\n```\nexchange_name = \"my-exchange\"\nmanagement.DeleteExchange(context.TODO(),exchange_name)\n```\n\n----------------------------------------\n\nTITLE: Patching Messaging Topology Operator Deployment to Mount CA Certificate\nDESCRIPTION: Kubectl command to patch the Messaging Topology Operator Deployment to mount the CA certificate into the operator's trust store. The patch adds volume mounts to the manager container and defines a volume that references the rabbitmq-ca secret.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/tls-topology-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system patch deployment messaging-topology-operator --patch \"spec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        volumeMounts:\n        - mountPath: /etc/ssl/certs/rabbitmq-ca.crt\n          name: rabbitmq-ca\n          subPath: ca.crt\n      volumes:\n      - name: rabbitmq-ca\n        secret:\n          defaultMode: 420\n          secretName: rabbitmq-ca\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Priorities in RabbitMQ Java Client\nDESCRIPTION: This Java code shows how to set consumer priorities when consuming messages from a RabbitMQ queue. It creates a connection to RabbitMQ, declares a queue and exchange, and then sets up a consumer with a priority of 10 using the 'x-priority' argument in the basicConsume method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-12-16-using-consumer-priorities-with-rabbitmq/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.*;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.QueueingConsumer;\n\npublic class Consumer {\n\n    private final static String EXCHANGE_NAME = \"my_exchange\";\n    private final static String QUEUE_NAME = \"my_queue\";\n\n    public static void main(String[] argv) throws Exception {\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      Connection connection = factory.newConnection();\n      Channel channel = connection.createChannel();\n\n      channel.queueDeclare(QUEUE_NAME, true, false, false, null);\n      channel.exchangeDeclare(EXCHANGE_NAME, \"direct\", true);\n      channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, \"\");\n      System.out.println(\"Waiting for messages. To exit press CTRL+C\");\n\n      QueueingConsumer consumer = new QueueingConsumer(channel);\n\n      Map<String, Object> args = new HashMap<String, Object>();\n      args.put(\"x-priority\", 10);\n      channel.basicConsume(QUEUE_NAME, false, \"\", false, false, args, consumer);\n\n      while (true) {\n        QueueingConsumer.Delivery delivery = consumer.nextDelivery();\n        String message = new String(delivery.getBody());\n        System.out.println(\"Received '\" + message + \"'\");\n        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Node Authentication Error Log in INI format\nDESCRIPTION: Example of an error log entry when a node fails to authenticate due to an invalid Erlang cookie.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n2020-06-15 13:03:33 [error] <0.1187.0> ** Connection attempt from node 'rabbitmqcli-99391-rabbit@warp10' rejected. Invalid challenge reply. **\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic etcd Endpoint for RabbitMQ Cluster Formation\nDESCRIPTION: Minimal configuration for etcd-based peer discovery in RabbitMQ, specifying a single etcd endpoint. This is required for the peer discovery mechanism to function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\n# etcd endpoints. This property is required or peer discovery won't be performed.\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ using Chocolatey on Windows\nDESCRIPTION: Command to install RabbitMQ using the Chocolatey package manager. This method handles dependencies automatically but may not provide the latest release immediately.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Default Memory Allocator Arguments for RabbitMQ\nDESCRIPTION: The default memory allocator settings used by RabbitMQ. These control carrier size, block size, and memory allocation strategy to manage memory fragmentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DEFAULT_ALLOC_ARGS=\"+MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Feature Flag in RabbitMQ\nDESCRIPTION: Command to enable a specific feature flag using rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag <name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Equals Query in RabbitMQ LDAP Authentication\nDESCRIPTION: Structure for equals query that compares two string subqueries. This is useful for comparing variable values with constants or attribute values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_21\n\nLANGUAGE: erlang\nCODE:\n```\n{equals, StringSubQuery1, StringSubQuery2}\n```\n\n----------------------------------------\n\nTITLE: Displaying ssl_cipher Property in RabbitMQ\nDESCRIPTION: Shows the TLS cipher algorithm (e.g., \"aes_256_cbc\") used for a secure RabbitMQ connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_86\n\nLANGUAGE: bash\nCODE:\n```\nssl_cipher\n```\n\n----------------------------------------\n\nTITLE: Initializing STOMP Client with SockJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a STOMP client using SockJS in a web browser. It includes the necessary script imports and sets up the WebSocket connection to the STOMP endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-05-14-introducing-rabbitmq-web-stomp/index.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\"></script>\n<script src=\"stomp.js\"></script>\n<script>\n   WebSocketStompMock = SockJS;\n\n    var client = Stomp.client('http://127.0.0.1:55674/stomp');\n    [...]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Advanced RabbitMQ Configuration in YAML\nDESCRIPTION: Specifies advanced RabbitMQ configuration options. The example sets the wal_data_dir for the ra application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  rabbitmq:\n    advancedConfig: |\n      [\n          {ra, [\n              {wal_data_dir, '/var/lib/rabbitmq/quorum-wal'}\n          ]}\n      ].\n```\n\n----------------------------------------\n\nTITLE: Consuming and Processing Internal Event Stream with jq\nDESCRIPTION: Command to consume the internal event stream and pipe it to jq for JSON processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream | jq\n```\n\n----------------------------------------\n\nTITLE: Performance Testing Configuration\nDESCRIPTION: Command for running performance tests and YAML configuration for monitoring performance tests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rabbitmq perf-test INSTANCE --rate 100\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: kubectl-perf-test\nspec:\n  endpoints:\n  - interval: 15s\n    targetPort: 8080\n  selector:\n    matchLabels:\n      app: perf-test\n```\n\n----------------------------------------\n\nTITLE: JSON Logging Configuration\nDESCRIPTION: Settings for enabling JSON format logging and configuring timestamp format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter = json\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = true\nlog.file.level = info\n\n# use microseconds since UNIX epoch for timestamp format\nlog.file.formatter.time_format = epoch_usecs\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Disable Audience Claim Verification\nDESCRIPTION: RabbitMQ configuration snippet to disable the verification of the audience claim, allowing for compatibility between OAuth2 Proxy and RabbitMQ requirements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.verify_aud = false\n```\n\n----------------------------------------\n\nTITLE: Polling for Messages with Manual Acknowledgment in Erlang\nDESCRIPTION: Demonstrates polling for messages with explicit acknowledgment. This approach still uses the discouraged polling pattern but adds manual message acknowledgment for better delivery guarantees.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_28\n\nLANGUAGE: erlang\nCODE:\n```\nGet = #'basic.get'{queue = Q},\n{#'basic.get_ok'{delivery_tag = Tag}, Content}\n    = amqp_channel:call(Channel, Get),\n%% Do something with the message payload.......and then ack it\namqp_channel:cast(Channel, #'basic.ack'{delivery_tag = Tag})\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue in Erlang\nDESCRIPTION: Shows how to declare a transient queue named 'my_queue' using the #'queue.declare'{} record and amqp_channel:call/2 function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\nDeclare = #'queue.declare'{queue = <<\"my_queue\">>},\n#'queue.declare_ok'{} = amqp_channel:call(Channel, Declare)\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Chain Verification Depth (Classic Format)\nDESCRIPTION: Example showing how to configure certificate chain verification depth in RabbitMQ using the classic Erlang configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                    {certfile,\"/path/to/server_certificate.pem\"},\n                    {keyfile,\"/path/to/server_key.pem\"},\n                    {depth, 2},\n                    {verify,verify_peer},\n                    {fail_if_no_peer_cert,false}]}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Disabling Consumer Timeout in RabbitMQ\nDESCRIPTION: Disables the consumer timeout feature using the advanced.config file. This is not recommended as it removes the protection mechanism against unresponsive consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumers.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config\n[\n  {rabbit, [\n    {consumer_timeout, undefined}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Certificate Hostname Verification in RabbitMQ\nDESCRIPTION: Configuration settings to fix hostname verification failures when RabbitMQ connects to OAuth 2.0 issuers using wildcard certificates. The configuration can be applied globally for a single provider or specifically for named providers in multi-provider setups.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nauth_oauth2.https.hostname_verification = wildcard\n```\n\nLANGUAGE: config\nCODE:\n```\nauth_oauth2.oauth_providers.<my_oauth_provider_name>.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ThreadFactory for RabbitMQ in Google App Engine\nDESCRIPTION: This snippet demonstrates how to configure a custom ThreadFactory for RabbitMQ Java client in environments with restricted thread instantiation, such as Google App Engine.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.appengine.api.ThreadManager;\n\nConnectionFactory cf = new ConnectionFactory();\ncf.setThreadFactory(ThreadManager.backgroundThreadFactory());\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Quorum Critical Status\nDESCRIPTION: Command to check if there are queues with minimum online quorum that would lose their quorum if the target node is shut down. Returns non-zero exit code if critical queues are found.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Broker with Custom Temp Directory\nDESCRIPTION: Command to run RabbitMQ broker with a custom temporary directory location for test instances.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/build-server.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker TEST_TMPDIR=\"/some/other/location/for/rabbitmq-test-instances\"\n```\n\n----------------------------------------\n\nTITLE: Acknowledging a Message in RabbitMQ Java Client\nDESCRIPTION: Shows how to manually acknowledge a message after processing it when using the basicGet method.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n// ...\nchannel.basicAck(method.deliveryTag, false); // acknowledge receipt of the message\n}\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Work Queues Tutorial with Spring AMQP\nDESCRIPTION: These commands demonstrate how to compile and run the Work Queues tutorial using Maven and Java. It shows how to start both the sender and receiver processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-spring-amqp.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n\n# shell 1\njava -jar target/rabbitmq-tutorials.jar --spring.profiles.active=work-queues,receiver\n# shell 2\njava -jar target/rabbitmq-tutorials.jar --spring.profiles.active=work-queues,sender\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from a RabbitMQ Cluster\nDESCRIPTION: Removes an offline node from a RabbitMQ cluster. The command is executed from a different node in the cluster. In this example, the node 'rabbit@stringer' is removed from the cluster by executing the command on 'hare@mcnulty'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer\n```\n\n----------------------------------------\n\nTITLE: Configuring Scope Aliases in RabbitMQ\nDESCRIPTION: ini-style configuration for mapping custom OAuth scopes to RabbitMQ permissions, allowing integration with external authorization servers like UAA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_aliases.1.alias = api://rabbitmq:Read.All\nauth_oauth2.scope_aliases.1.scope = rabbitmq.read:*/*\n\nauth_oauth2.scope_aliases.2.alias = api://rabbitmq:Write.All\nauth_oauth2.scope_aliases.2.scope = rabbitmq.write:*/*\n\nauth_oauth2.scope_aliases.3.alias = api://rabbitmq:Configure.All\nauth_oauth2.scope_aliases.3.scope = rabbitmq.configure:*/*\n\nauth_oauth2.scope_aliases.3.alias = api://rabbitmq:Administrator\nauth_oauth2.scope_aliases.3.scope = rabbitmq.tag:administrator\n\nauth_oauth2.scope_aliases.4.alias = api://rabbitmq:producer\nauth_oauth2.scope_aliases.4.scope = rabbitmq.read:*/* rabbitmq.write:*/* rabbitmq.configure:*/* rabbitmq.tag:management\n```\n\n----------------------------------------\n\nTITLE: Debugging Unacknowledged Messages in RabbitMQ\nDESCRIPTION: Command to list queues with unacknowledged messages count for debugging acknowledgment issues using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Running Consumer to Save Warning and Error Logs in Bash\nDESCRIPTION: Command to run the consumer script, listening only for warning and error messages and saving them to a log file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# => mix run receive_logs_direct.exs --warning --error > logs_from_rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Settings for RabbitMQ Management Plugin in Erlang\nDESCRIPTION: This snippet demonstrates how to configure the RabbitMQ management plugin to use OAuth 2.0 authentication. It includes settings for enabling OAuth, specifying client ID and secret, and setting the OAuth provider URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-22-oidc-integration/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{ rabbitmq_management,\n     ...\n\n     {oauth_enabled, true},\n     {oauth_client_id, \"PUT YOUR AUTH CLIENT ID\"},\n     {oauth_client_secret, \"PUT YOUR AUTH CLIENT SECRET\"},\n     {oauth_provider_url, \"PUT YOUR OpenID Connect URL\"}\n     ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Heartbeat in RabbitMQ 3.7 (INI-like Format)\nDESCRIPTION: This snippet demonstrates how to set the heartbeat value to 30 seconds using the new configuration format in RabbitMQ 3.7. The new format uses a .conf file extension and a key-value pair syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nheartbeat = 30\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Handshake Timeout in RabbitMQ Configuration\nDESCRIPTION: This configuration snippet shows how to set the connection handshake timeout in RabbitMQ to 20 seconds (20000 milliseconds). This may be necessary when clients run in heavily constrained environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 20000\n```\n\n----------------------------------------\n\nTITLE: Complete Worker Implementation with Message Acknowledgment in RabbitMQ Swift\nDESCRIPTION: This is the complete implementation of a worker that processes messages from a durable queue with manual acknowledgment. It sets up a connection, creates a channel with prefetch limit, subscribes to the queue, processes messages, and acknowledges them after completion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc workerNamed(_ name: String) {\n    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())\n    conn.start()\n    let ch = conn.createChannel()\n    let q = ch.queue(\"task_queue\", options: .durable)\n    ch.basicQos(1, global: false)\n    print(\"\\(name): Waiting for messages\")\n    let manualAck = RMQBasicConsumeOptions()\n    q.subscribe(manualAck, handler: {(_ message: RMQMessage) -> Void in\n        let messageText = String(data: message.body, encoding: .utf8)\n        print(\"\\(name): Received \\(messageText)\")\n        // imitate some work\n        let sleepTime = UInt(messageText.components(separatedBy: \".\").count) - 1\n        print(\"\\(name): Sleeping for \\(sleepTime) seconds\")\n        sleep(sleepTime)\n        ch.ack(message.deliveryTag)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying help in rabbitmq-upgrade\nDESCRIPTION: Command to display general help information and a list of commands supported by the rabbitmq-upgrade tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelp\n```\n\n----------------------------------------\n\nTITLE: Tuning TCP Options for AMQP Connections\nDESCRIPTION: This configuration example sets various TCP options for AMQP 0-9-1 connections, including buffer sizes and other socket options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.backlog = 128\ntcp_listen_options.nodelay = true\ntcp_listen_options.linger.on      = true\ntcp_listen_options.linger.timeout = 0\ntcp_listen_options.sndbuf = 196608\ntcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Sample OAuth 2.0 Access Token for RabbitMQ\nDESCRIPTION: Example of an OAuth 2.0 access token generated for a producer client, including claims for audience, scope, and client details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1690974839,\n  \"iat\": 1690974539,\n  \"jti\": \"c8edec50-5f29-4bd0-b25b-d7a46dc3474e\",\n  \"aud\": \"rabbit_prod\",\n  \"sub\": \"826065e7-bb58-4b65-bbf7-8982d6cca6c8\",\n  \"typ\": \"Bearer\",\n  \"azp\": \"prod_producer\",\n  \"acr\": \"1\",\n  \"realm_access\": {\n    \"roles\": [\n      \"default-roles-test\",\n      \"offline_access\",\n      \"producer\",\n      \"uma_authorization\"\n    ]\n  },\n  \"resource_access\": {\n    \"account\": {\n      \"roles\": [\n        \"manage-account\",\n        \"manage-account-links\",\n        \"view-profile\"\n      ]\n    }\n  },\n  \"scope\": \"profile email rabbitmq.read:*/* rabbitmq.write:*/* rabbitmq.configure:*/*\",\n  \"clientId\": \"prod_producer\",\n  \"clientHost\": \"172.18.0.1\",\n  \"email_verified\": false,\n  \"preferred_username\": \"service-account-prod_producer\",\n  \"clientAddress\": \"172.18.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Combined Federation and TTL Policy in RabbitMQ via PowerShell\nDESCRIPTION: Uses rabbitmqctl.bat in PowerShell to set a policy that combines federation and message TTL settings for queues with names starting with 'tf.', setting both federation upstreams and a 60-second message TTL with priority 1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/parameters.md#2025-04-09_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl set_policy ttl-fed ^\n    \"^tf\\.\" \"{\"\"federation-upstream-set\"\":\"\"all\"\", \"\"message-ttl\"\":60000}\" ^\n    --priority 1 ^\n    --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Emitting a Log with Specific Routing Key\nDESCRIPTION: This bash command shows how to run the log emitter to send a log message with a specific routing key (kern.critical) and message content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-dotnet.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd EmitLogTopic\ndotnet run \"kern.critical\" \"A critical kernel error\"\n```\n\n----------------------------------------\n\nTITLE: Adding a RabbitMQ User with Alternative Option Syntax in Bash\nDESCRIPTION: Example demonstrating the alternative syntax for providing option values using equals sign notation with rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node=rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Listen on All IPv6 Addresses\nDESCRIPTION: This snippet demonstrates how to configure RabbitMQ to listen on all IPv6 addresses, which also includes IPv4 addresses on modern systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.1 = :::5672\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy for RabbitMQ Peer Discovery\nDESCRIPTION: This snippet shows how to configure HTTP and HTTPS proxy settings for RabbitMQ peer discovery mechanisms that use HTTP to interact with dependencies like AWS, Consul, or etcd.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_51\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.proxy.http_proxy = 192.168.0.98\ncluster_formation.proxy.https_proxy = 192.168.0.98\n```\n\n----------------------------------------\n\nTITLE: Implementing a Worker Consumer in Objective-C with RabbitMQ\nDESCRIPTION: This code demonstrates how to subscribe to a RabbitMQ queue and process messages. The worker simulates processing time by sleeping for a duration based on the number of dots in the message. Each worker is identified by a name parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n[q subscribe:^(RMQMessage * _Nonnull message) {\n    NSString *messageText = [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding];\n    NSLog(@\"%@: Received %@\", name, messageText);\n    // imitate some work\n    unsigned int sleepTime = (unsigned int)[messageText componentsSeparatedByString:@\".\"].count - 1;\n    NSLog(@\"%@: Sleeping for %u seconds\", name, sleepTime);\n    sleep(sleepTime);\n}];\n```\n\n----------------------------------------\n\nTITLE: Creating .NET Projects\nDESCRIPTION: Commands to create new console projects for the sender and receiver, and rename the main program files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new console --name Send\nmv Send/Program.cs Send/Send.cs\ndotnet new console --name Receive\nmv Receive/Program.cs Receive/Receive.cs\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Status Using rabbitmq-diagnostics\nDESCRIPTION: Command to check the status of the RabbitMQ server. This displays information about the running instance, including process information and resource limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Common OAuth 2.0 Settings Configuration\nDESCRIPTION: Configuration of common OAuth 2.0 settings including username claims and scope prefix.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.preferred_username_claims.1 = preferred_username\nauth_oauth2.preferred_username_claims.2 = user_name\nauth_oauth2.preferred_username_claims.3 = email\nauth_oauth2.scope_prefix = rabbitmq.\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Sub-query in RabbitMQ LDAP Authentication\nDESCRIPTION: Structure for attribute sub-query that retrieves the value of an LDAP object attribute. This should be used within match or equals queries as it returns a string rather than a boolean.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_26\n\nLANGUAGE: erlang\nCODE:\n```\n{attribute, DNPattern, AttributeName}\n```\n\n----------------------------------------\n\nTITLE: Host Configuration Entries\nDESCRIPTION: Required DNS entries that must be added to the /etc/hosts file to ensure proper resolution of service names\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n127.0.0.1  localhost keycloak rabbitmq oauth2-proxy\n```\n\n----------------------------------------\n\nTITLE: Setting AMQP 1.0 Target Address\nDESCRIPTION: Specifies the target address for the sending AMQP 1.0 link.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\n{target_address, <<\"some-address\">>}\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Keepalive Settings in Linux\nDESCRIPTION: Example sysctl configuration for TCP keepalives that sets connection monitoring parameters. It configures the system to consider TCP connections dead after 70 seconds through 4 attempts every 10 seconds after 30 seconds of idle time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nnet.ipv4.tcp_keepalive_time=30\nnet.ipv4.tcp_keepalive_intvl=10\nnet.ipv4.tcp_keepalive_probes=4\n```\n\n----------------------------------------\n\nTITLE: AMQP Connection URIs Configuration\nDESCRIPTION: Configuration for specifying multiple AMQP connection URIs for failover.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\n{uris, [\n        \"amqp://fred:secret@host1.domain/my_vhost\",\n        \"amqp://john:secret@host2.domain/my_vhost\"\n       ]}\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Swift\nDESCRIPTION: Binds a queue to the 'logs' exchange using the RabbitMQ Swift client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-swift.md#2025-04-09_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nq.bind(x)\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Multiple Routing Patterns in RabbitMQ with Swift\nDESCRIPTION: Example showing how to bind a queue to multiple routing key patterns, receiving messages that match either pattern: kernel logs of any severity and critical logs from any facility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-swift.md#2025-04-09_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nself.receiveLogsTopic([\"kern.*\", \"*.critical\"])\n```\n\n----------------------------------------\n\nTITLE: Authentication Mechanisms for STOMP Connections\nDESCRIPTION: Possible authentication mechanisms for STOMP connections that can be returned by the list_stomp_connections command when querying auth_mechanism information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_77\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig\nssl\nstomp_headers\n```\n\n----------------------------------------\n\nTITLE: Console Logging with File Output Disabled\nDESCRIPTION: Enables console logging while disabling file output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\nlog.console.level = info\n\nlog.file = false\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue with Server-Generated Name in Erlang\nDESCRIPTION: Shows how to declare a queue with a server-generated name by leaving the queue attribute undefined in the #'queue.declare'{} record.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n#'queue.declare_ok'{queue = Queue} = amqp_channel:call(Channel, #'queue.declare'{})\n```\n\n----------------------------------------\n\nTITLE: Security Test Results for TLS 1.3 Configuration\nDESCRIPTION: Detailed output from testssl.sh showing the security evaluation of the TLS 1.3 configuration, including protocol support, cipher preferences, and vulnerability testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ssl/index.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\n  Using \"OpenSSL 3.3.1 4 Jun 2024 (Library: OpenSSL 3.3.1 4 Jun 2024)\" [~94 ciphers]\n on [redacted]:/opt/homebrew/bin/openssl\n (built: \"Jun  4 12:53:04 2024\", platform: \"darwin64-arm64-cc\")\n\n\n Start 2024-08-08 11:56:02                -->> 127.0.0.1:5671 (localhost) <<--\n\n A record via:           /etc/hosts\n rDNS (127.0.0.1):       localhost.\n Service detected:       Couldn't determine what's running on port 5671, assuming no HTTP service => skipping all HTTP checks\n\n\n Testing protocols via sockets except NPN+ALPN\n\n SSLv2      not offered (OK)\n SSLv3      not offered (OK)\n TLS 1      not offered\n TLS 1.1    not offered\n TLS 1.2    not offered\n TLS 1.3    offered (OK): final\n NPN/SPDY   not offered\n ALPN/HTTP2 not offered\n\n Testing cipher categories\n\n NULL ciphers (no encryption)                      not offered (OK)\n Anonymous NULL Ciphers (no authentication)        not offered (OK)\n Export ciphers (w/o ADH+NULL)                     not offered (OK)\n LOW: 64 Bit + DES, RC[2,4], MD5 (w/o export)      not offered (OK)\n Triple DES Ciphers / IDEA                         not offered\n Obsoleted CBC ciphers (AES, ARIA etc.)            not offered\n Strong encryption (AEAD ciphers) with no FS       not offered\n Forward Secrecy strong encryption (AEAD ciphers)  offered (OK)\n```\n\n----------------------------------------\n\nTITLE: Equals Query Pattern\nDESCRIPTION: Pattern for comparing two string values in LDAP queries, used for matching exact values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_29\n\nLANGUAGE: erlang\nCODE:\n```\n{equals, StringSubQuery1, StringSubQuery2}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Docker Container with Entra ID Configuration\nDESCRIPTION: This bash command starts a Docker container running RabbitMQ with the Entra ID configuration. It uses environment variables to set the mode and runs a make command to start RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-entra-id/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=entra\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Basic Message Publishing in RabbitMQ .NET Client\nDESCRIPTION: Demonstrates simple message publishing to an exchange with a routing key. The message body is converted from a string to a byte array using UTF-8 encoding.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\nvar props = new BasicProperties();\nawait channel.BasicPublishAsync(exchangeName, routingKey, false, props, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: OAuth 2 Configuration Response Format in RabbitMQ API\nDESCRIPTION: JSON response format returned by the RabbitMQ OAuth 2 configuration endpoint. The response includes boolean flag for OAuth enablement, client ID, and provider URL information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\"oauth_enabled\":\"boolean\", \"oauth_client_id\":\"string\", \"oauth_provider_url\":\"string\"}\n```\n\n----------------------------------------\n\nTITLE: Building AMQP 1.0 Client for OAuth 2.0 Testing with RabbitMQ\nDESCRIPTION: This command builds a local Docker image for the basic AMQP 1.0 application used in OAuth 2.0 testing with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake build-amqp1_0-client\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Components in JSX\nDESCRIPTION: Imports various Markdown components needed for the RabbitMQ Publish/Subscribe tutorial, including tutorial help text and diagrams for exchange, binding, and the full publish/subscribe model.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TutorialsHelp from '@site/src/components/Tutorials/TutorialsHelp.md';\nimport T3DiagramExchange from '@site/src/components/Tutorials/T3DiagramExchange.md';\nimport T3DiagramBinding from '@site/src/components/Tutorials/T3DiagramBinding.md';\nimport T3DiagramFull from '@site/src/components/Tutorials/T3DiagramFull.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Authentication Backend in RabbitMQ\nDESCRIPTION: This snippet shows how to configure RabbitMQ to use only the internal authentication backend, which is the default setting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\n# 1 here is a backend name. It can be anything.\n# Since we only really care about backend\n# ordering, we use numbers throughout this guide.\n#\n# \"internal\" is an alias for rabbit_auth_backend_internal\nauth_backends.1 = internal\n```\n\n----------------------------------------\n\nTITLE: Starting Consumer Application with OAuth Client\nDESCRIPTION: Command to start a performance test consumer using the 'consumer_with_roles' OAuth client for authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-consumer CONSUMER=consumer_with_roles\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Operator Monitor\nDESCRIPTION: Command to deploy PodMonitor for monitoring the RabbitMQ Cluster Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/operator-monitoring.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply --filename https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/observability/prometheus/monitors/rabbitmq-cluster-operator-podmonitor.yml\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Binding Example in Go\nDESCRIPTION: Simple example of binding a queue to an exchange without a routing key\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nerr = ch.QueueBind(\n  q.Name, // queue name\n  \"\",     // routing key\n  \"logs\", // exchange\n  false,\n  nil)\n```\n\n----------------------------------------\n\nTITLE: Enabling the RabbitMQ Stream Plugin\nDESCRIPTION: Shell command to enable the RabbitMQ stream plugin in a running Docker container named 'rabbitmq'. This is necessary to use the stream features.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Cluster Operator Deployment Manifest using kubectl\nDESCRIPTION: Command to retrieve and edit the deployment manifest for the RabbitMQ Cluster Operator using kubectl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/configure-operator-defaults.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n rabbitmq-system edit deployment rabbitmq-cluster-operator\n```\n\n----------------------------------------\n\nTITLE: Listing TCP Listeners with Process Information (IPv6)\nDESCRIPTION: Similar to the previous command, but for IPv6. This helps in identifying all IPv6 TCP services and their associated processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nsudo ss --tcp -f inet6 --listening --numeric --processes\n```\n\n----------------------------------------\n\nTITLE: Identifying Client Verification Errors in Erlang TLS\nDESCRIPTION: This error is related to client verification issues, such as invalid or missing client certificates. It may require adjusting the 'verify' option in ssl_options or ensuring correct client certificate generation and presentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n{ssl_upgrade_failure, ... certify ...}\n```\n\n----------------------------------------\n\nTITLE: Complete Producer Script (send.exs)\nDESCRIPTION: Full Elixir script that connects to RabbitMQ, declares a queue, sends a message, and closes the connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\nAMQP.Queue.declare(channel, \"hello\")\nAMQP.Basic.publish(channel, \"\", \"hello\", \"Hello World!\")\nIO.puts \" [x] Sent 'Hello World!'\"\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Viewing socketfilterfw Help in MacOS\nDESCRIPTION: This command displays the help information for the socketfilterfw tool, showing supported command line arguments. This is useful as the arguments can vary between MacOS releases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --help\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Status\nDESCRIPTION: Command to check the status of a RabbitMQ node, which includes information about resource limits and other operational details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-generic-unix.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server\nDESCRIPTION: Command to start a preconfigured Keycloak server with the necessary OAuth 2.0 settings for RabbitMQ integration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ PID File Path in Markdown\nDESCRIPTION: Specifies the default path for the RabbitMQ process ID file in a generic binary build.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_MNESIA_DIR.pid`\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TLS for RabbitMQ Cluster on Kubernetes\nDESCRIPTION: YAML configuration for a RabbitMQ cluster with TLS enabled. It specifies a single replica and references the previously created TLS secret to enable encrypted connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: additional-port\nspec:\n  replicas: 1\n  tls:\n    secretName: tls-secret\n```\n\n----------------------------------------\n\nTITLE: Adding a RabbitMQ User with Double Hyphen Separator in Bash\nDESCRIPTION: Example demonstrating how to use the double hyphen separator to ensure positional arguments are not parsed as options when using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- \"a-user\" \"a-pa$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-Only Listeners for RabbitMQ Stream\nDESCRIPTION: Demonstrates how to disable non-TLS listeners and configure TLS-only connections for RabbitMQ Stream protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stream.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp   = none\nstream.listeners.ssl.1 = 5551\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in RabbitMQ with Elixir\nDESCRIPTION: Code to declare a durable queue in RabbitMQ using Elixir. Durable queues survive RabbitMQ node restarts, ensuring messages aren't lost when the server stops or crashes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Queue.declare(channel, \"hello\", durable: true)\n```\n\n----------------------------------------\n\nTITLE: Disk Monitoring Log Entry Example\nDESCRIPTION: Example log entries showing the activation of disk space monitoring and the configured disk free limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/disk-alarms.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n2019-04-01 12:02:11.564 [info] <0.329.0> Enabling free disk space monitoring\n2019-04-01 12:02:11.564 [info] <0.329.0> Disk free limit set to 950MB\n```\n\n----------------------------------------\n\nTITLE: Attribute Sub-query Pattern\nDESCRIPTION: Pattern for retrieving LDAP attribute values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_34\n\nLANGUAGE: erlang\nCODE:\n```\n{attribute, DNPattern, AttributeName}\n```\n\n----------------------------------------\n\nTITLE: Using In Nested Group Query for LDAP Authorization in Erlang\nDESCRIPTION: An in_group_nested query that traverses group hierarchy to check if a user is a member of a group that is a member of another group. The example configuration grants access based on nested group hierarchies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern, AttributeName}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern, AttributeName, Scope}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {group_lookup_base, \"ou=groups,dc=example,dc=com\"},\n  {vhost_access_query, {in_group_nested, \"cn=${vhost}-groups,ou=groups,dc=example,dc=com\", \"member\", single_level}}\n]\n```\n\n----------------------------------------\n\nTITLE: Error Message When Deleting a Protected Virtual Host Using HTTP API\nDESCRIPTION: JSON error response returned when attempting to delete a virtual host that is protected from deletion via the HTTP API, showing the specific error message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"precondition_failed\",\n  \"reason\": \"Refusing to delete virtual host 'vh1' because it is protected from deletion\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning RabbitMQ Server Repository from GitHub\nDESCRIPTION: Command to clone the RabbitMQ server source code repository from GitHub into a local directory named 'rabbitmq'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/build-server.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server.git rabbitmq\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Tutorial Execution Commands\nDESCRIPTION: Commands to run the publisher and subscriber components of the tutorial. Uses Spring profiles to configure the components and sets a duration of 60 seconds for the execution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-spring-amqp.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\njava -jar target/rabbitmq-tutorials.jar --spring.profiles.active=pub-sub,receiver \\\n    --tutorial.client.duration=60000\n# shell 2\njava -jar target/rabbitmq-tutorials.jar --spring.profiles.active=pub-sub,sender \\\n    --tutorial.client.duration=60000\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Socket.io Namespaces in JavaScript\nDESCRIPTION: This snippet shows how Socket.io uses 'namespaces' to handle multiple connections, which is described as potentially confusing since it masks the single underlying connection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-02-23-how-to-compose-apps-using-websockets/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chat = io.connect('http://localhost/chat');\nchat.on('connect', function () {\n  chat.emit('hi!');\n});\n\nvar news = io.connect('http://localhost/news');\nnews.on('news', function () {\n  news.emit('woot');\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Thread Statistics with RabbitMQ Diagnostics\nDESCRIPTION: Command to obtain a breakdown of thread activity in RabbitMQ, including emulator, port, garbage collection, I/O checks, and sleep states.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics runtime_thread_stats\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Management Plugin Using Command Line\nDESCRIPTION: Example command demonstrating how to enable the RabbitMQ management plugin while disabling all other plugins. This command enables rabbitmq_management and its dependencies exclusively.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-plugins.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins set rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Compiling RabbitMQ Java Client Programs\nDESCRIPTION: This bash command demonstrates how to compile the Java programs for the RabbitMQ routing tutorial, using an environment variable for the classpath.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njavac -cp $CP ReceiveLogsDirect.java EmitLogDirect.java\n```\n\n----------------------------------------\n\nTITLE: Shutting Down a RabbitMQ Node with rabbitmqctl in Bash\nDESCRIPTION: Example of using rabbitmqctl to shut down a RabbitMQ node. This command can only be run on the same host as the target node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shutdown\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queue in RabbitMQ Java Client\nDESCRIPTION: Demonstrates how to delete a queue. This basic version will delete the queue regardless of whether it has messages or consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nchannel.queueDelete(\"queue-name\")\n```\n\n----------------------------------------\n\nTITLE: Updating Package Indices and Installing Erlang Dependencies\nDESCRIPTION: This snippet updates the apt package indices and installs the required Erlang packages for running RabbitMQ. It includes all necessary Erlang components like crypto, ssl, and mnesia.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n## Update package indices\nsudo apt-get update -y\n\n## Install Erlang packages\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Performance Test Command for Message Consumption\nDESCRIPTION: Command to test consumption of 10 million messages using perf-test utility with specific configurations for quorum queues and memory settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nperf-test --producers 0 --consumers 2 --multi-ack-every 3000 --qos 3000 --exit-when empty \\\n          --queue-args x-max-in-memory-length=0 --quorum-queue --queue qq\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host in RabbitMQ (Bash)\nDESCRIPTION: Creates a new virtual host named 'project9_dev_18' with a description and tags for development purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost project9_dev_18 --description 'Dev environment no. 18' --tags dev,project9\n```\n\n----------------------------------------\n\nTITLE: Exploring Specific Command Group in rabbitmqadmin\nDESCRIPTION: This command shows how to get help for a specific command group in rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin {group name} help\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in Bash\nDESCRIPTION: Configures a federation policy for exchanges with name pattern '^amq\\.' using bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy --apply-to exchanges federate-me \"^amq\\.\" \\\n    '{\"federation-upstream-set\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Plugins With Verbose Output\nDESCRIPTION: Command to list all available RabbitMQ plugins with detailed information in verbose mode. This provides comprehensive details about each plugin including versions, dependencies, and descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-plugins.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -v\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Consumer Module\nDESCRIPTION: Elixir module that processes messages received from RabbitMQ by handling the message delivery in a recursive function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Receive do\n  def wait_for_messages do\n    receive do\n      {:basic_deliver, payload, _meta} ->\n        IO.puts \" [x] Received #{payload}\"\n        wait_for_messages()\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Regular Expression Validator\nDESCRIPTION: Configuration for setting up password validation using regular expressions to enforce specific character patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/passwords.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ncredential_validator.validation_backend = rabbit_credential_validator_password_regexp\ncredential_validator.regexp = ^[a-bA-Z0-9$]{20,100}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Auth0 Configuration\nDESCRIPTION: Commands to start RabbitMQ with Auth0 authentication mode enabled\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-auth0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=auth0\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Queue Replica Sync Status in RabbitMQ (Bash)\nDESCRIPTION: This command verifies if there are any ongoing initial quorum queue replica synchronization operations. It exits with a non-zero status if synchronizations are still in progress, indicating the cluster is not ready for node removal.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# exits with a non-zero status if there are any ongoing initial quorum queue\n# replica sync operations\nrabbitmq-diagnostics check_if_new_quorum_queue_replicas_have_finished_initial_sync\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Log Receiver for Specific Severities\nDESCRIPTION: This bash command shows how to run the ReceiveLogsDirect program to receive only warning and error log messages, saving them to a file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-java.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP ReceiveLogsDirect warning error > logs_from_rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Enabling Khepri Feature Flag in Bash\nDESCRIPTION: CLI command to enable the khepri_db experimental feature flag in RabbitMQ using bash shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag --experimental khepri_db\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Tolerations for RabbitmqCluster in YAML\nDESCRIPTION: Adds tolerations for RabbitmqCluster pods. The example shows a toleration for pods to be scheduled on nodes with a 'dedicated' taint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  tolerations:\n    - key: \"dedicated\"\n      operator: \"Equal\"\n      value: \"rabbitmq\"\n      effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-TLS RabbitMQ Connection Using URI Parameters in Erlang Client\nDESCRIPTION: A basic example of a non-encrypted AMQP connection URI that specifies a heartbeat interval of 5 seconds and a connection timeout of 10 seconds (10,000 milliseconds).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/uri-query-parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\namqp://myhost?heartbeat=5&connection_timeout=10000\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Logo Components in JSX\nDESCRIPTION: This code imports SVG logo components for MQTT and Khepri. These components are used to display logos in the documentation, likely as visual aids for the corresponding sections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/whats-new.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport MQTTLogo from '@site/static/img/mqtt-logo/mqtt-ver.svg';\nimport KhepriLogo from '@site/static/img/khepri-logo.svg';\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Length Limit Using RabbitMQ Policy\nDESCRIPTION: Configures a maximum length of 10 messages for all queues using the RabbitMQ management CLI. This policy applies to all queues in the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl set_policy Ten \".*\" '{\"max-length\":10}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth Providers in RabbitMQ - Scenario 2\nDESCRIPTION: Configuration for two OAuth providers using single Keycloak instance with different realms (dev and prod). Defines authentication settings, certificate paths, and verification options for each provider.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.oauth_providers.devkeycloak.issuer = https://keycloak:8443/realms/dev\nauth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://keycloak:8443/realms/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Copying RabbitMQ-Web-Stomp Plugin Files to RabbitMQ Plugins Directory\nDESCRIPTION: This shell command copies the downloaded plugin files to the RabbitMQ plugins directory. It assumes the plugins directory is located at /usr/lib/rabbitmq/lib/rabbitmq_server-2.8.2/plugins on an Ubuntu system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-05-14-introducing-rabbitmq-web-stomp/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp *.ez /usr/lib/rabbitmq/lib/rabbitmq_server-2.8.2/plugins\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Configuration File Path in Markdown\nDESCRIPTION: Specifies the default path for the RabbitMQ configuration file in a generic binary build. The path is relative to the $RABBITMQ_HOME directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_HOME/etc/rabbitmq/rabbitmq`\n```\n\n----------------------------------------\n\nTITLE: Insufficient Permissions Error Log in RabbitMQ\nDESCRIPTION: This log entry demonstrates what happens when a user attempts an operation they don't have permissions for. The channel error shows that the user is trying to declare a queue they don't have access to.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n2019-03-25 12:30:05.209 [error] <0.1627.0> Channel error on connection <0.1618.0> (127.0.0.1:63881 -> 127.0.0.1:5672, vhost: 'gw1', user: 'user2'), channel 1:\noperation queue.declare caused a channel exception access_refused: access to queue 'user3.q1' in vhost 'gw1' refused for user 'user2'\n```\n\n----------------------------------------\n\nTITLE: Checking Unacknowledged Messages in RabbitMQ\nDESCRIPTION: Commands to check unacknowledged messages in RabbitMQ queues using rabbitmqctl, shown for both Unix and Windows environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Locating RabbitMQ Plugin Directories using CLI\nDESCRIPTION: Demonstrates how to use the rabbitmq-plugins command to locate plugin directories, expansion directories, and the enabled plugins file on a RabbitMQ node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins directories -s\n# => Plugin archives directory: /path/to/rabbitmq/plugins\n# => Plugin expansion directory: /path/to/node/node-plugins-expand\n# => Enabled plugins file: /path/to/enabled_plugins\n```\n\n----------------------------------------\n\nTITLE: Complete Consumer Script (receive.exs)\nDESCRIPTION: Full Elixir script that connects to RabbitMQ, declares a queue, subscribes to it, and processes incoming messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Receive do\n  def wait_for_messages do\n    receive do\n      {:basic_deliver, payload, _meta} ->\n        IO.puts \" [x] Received #{payload}\"\n        wait_for_messages()\n    end\n  end\nend\n\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\nAMQP.Queue.declare(channel, \"hello\")\nAMQP.Basic.consume(channel, \"hello\", nil, no_ack: true)\nIO.puts \" [*] Waiting for messages. To exit press CTRL+C, CTRL+C\"\n\nReceive.wait_for_messages()\n```\n\n----------------------------------------\n\nTITLE: Setting delegate process count for intra-cluster communication\nDESCRIPTION: Configuration for the number of delegate processes to use for intra-cluster communication. May be increased on machines with many cores that are part of a cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\ndelegate_count = 16\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Root Location Proxy for RabbitMQ HTTP API\nDESCRIPTION: Nginx configuration for proxying requests to RabbitMQ HTTP API at root location. The trailing slash must be omitted when using the default RabbitMQ virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_22\n\nLANGUAGE: nginxconf\nCODE:\n```\n# trailing slash in the location must be omitted only if default RabbitMQ virtual host is used\nlocation / {\n    proxy_pass http://rabbitmq-host:15672;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Backends in RabbitMQ 3.7 (INI-like Format with Comments)\nDESCRIPTION: This snippet shows how to configure authentication backends using the new format, including comments. It demonstrates the use of comments for documentation and alternative configurations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n## Select an authentication/authorisation backend to use.\n##\n## Alternative backends are provided by plugins, such as rabbitmq-auth-backend-ldap.\n##\n## NB: These settings require certain plugins to be enabled.\n##\n## Related doc guides:\n##\n##  * http://www.rabbitmq.com/plugins.html\n##  * http://www.rabbitmq.com/access-control.html\n##\n\nauth_backends.1   = rabbit_auth_backend_internal\n\n## uses separate backends for authentication and authorisation,\n## see below.\n# auth_backends.1.authn = rabbit_auth_backend_ldap\n# auth_backends.1.authz = rabbit_auth_backend_internal\n```\n\n----------------------------------------\n\nTITLE: Permission Configuration Example\nDESCRIPTION: Example of configuring permissions based on user attributes using equals queries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_40\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{permission, configure, {equals, {attribute, \"${user_dn}\", \"description\"},\n                                         {string, \"can-declare-${resource}s\"}\n                                }\n        },\n        {permission, write, {constant, true}},\n        {permission, read,  {constant, true}}\n       ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Cluster Identity Mismatch\nDESCRIPTION: Example log error message when a node attempts to rejoin a cluster but the cluster identity has changed due to a node reset.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nNode 'rabbit@node1.local' thinks it's clustered with node 'rabbit@node2.local', but 'rabbit@node2.local' disagrees\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe for RabbitMQ on Kubernetes\nDESCRIPTION: This snippet shows the recommended basic health check command for the readiness probe in a RabbitMQ Kubernetes deployment. It uses the 'rabbitmq-diagnostics ping' command to allow all pods to start and re-join the cluster, even during rolling restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics ping\n```\n\n----------------------------------------\n\nTITLE: Inspecting Page Cache Size in Containerized Environments with Bash\nDESCRIPTION: Commands to inspect both RSS (resident set size) and page cache footprint in containerized environments like Kubernetes using the /sys pseudo filesystem.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat /sys/fs/cgroup/memory/memory.stat\ncat /sys/fs/cgroup/memory/memory.usage_in_bytes\n```\n\n----------------------------------------\n\nTITLE: Monadic Syntax in Erlang Using Do-Notation\nDESCRIPTION: A clean syntax for using monads in Erlang with the Do parse transformer, which makes code more readable by abstracting away the nested function calls.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_15\n\nLANGUAGE: erlang\nCODE:\n```\ndo([Monad ||\n    A <- foo(),\n    B <- bar(A, dog),\n    ok]).\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key from SURFnet Keyserver with GPG\nDESCRIPTION: Retrieves and imports the RabbitMQ signing key from the SURFnet key server using GPG. This is an alternative to keys.openpgp.org.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver \"pgp.surfnet.nl\" --recv-keys \"0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with Internal Fallback in RabbitMQ\nDESCRIPTION: This configuration checks LDAP first, and then falls back to the internal database if the user cannot be authenticated through LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nauth_backends.1 = ldap\nauth_backends.2 = internal\n```\n\n----------------------------------------\n\nTITLE: Basic Makefile for RabbitMQ Plugin Integration\nDESCRIPTION: A simple Makefile that includes the RabbitMQ umbrella build system, allowing the plugin to integrate with RabbitMQ's build process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\ninclude ../umbrella.mk\n```\n\n----------------------------------------\n\nTITLE: Create New Virtual Host with Default Queue Type in Bash\nDESCRIPTION: Commands to create a new virtual host with quorum as the default queue type and set permissions for a user. This is part of the migration process to move from mirrored classic queues to quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost NEW_VHOST --default-queue-type quorum\nrabbitmqctl set_permissions -p NEW_VHOST USERNAME '.*' '.*' '.*'\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Peer Discovery Plugin for RabbitMQ\nDESCRIPTION: Command to enable the AWS-specific peer discovery plugin before first node boot, allowing RabbitMQ to use EC2 instance tags or autoscaling groups for cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_aws\n```\n\n----------------------------------------\n\nTITLE: Adding Erlang Repository Source for Ubuntu 24.04\nDESCRIPTION: This snippet shows the contents of the source list file for adding the Erlang repository on Ubuntu 24.04 (Noble). It should be placed in /etc/apt/sources.list.d/erlang.list.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n# This Launchpad PPA repository provides Erlang packages produced by the RabbitMQ team\n#\n# Replace $distribution with the name of the Ubuntu release used\ndeb [arch=amd64 signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu noble main\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server with Performance Settings\nDESCRIPTION: Command to start RabbitMQ server with specific Erlang emulator flags for performance testing and Linux perf support.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker PLUGINS=\"\" RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+JPperf true +S 4\" \\\n                RABBITMQ_CONFIG_FILE=\"advanced.config\" TEST_TMPDIR=\"test-rabbit\"\n```\n\n----------------------------------------\n\nTITLE: Policy Key for Target Group Size in Quorum Queues\nDESCRIPTION: Policy key used to define the target replica count (group size) for matching quorum queues. This policy can be set by users and operators to control how many replicas a quorum queue should maintain.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ntarget-group-size = 3\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Stream Producer Application\nDESCRIPTION: Command to run the producer application which will send a message to the RabbitMQ stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript-stream.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm run send\n```\n\n----------------------------------------\n\nTITLE: Displaying Cluster Overview in rabbitmqadmin\nDESCRIPTION: This command shows how to display the cluster overview using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin show overview\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 End Session Endpoint with Provider Configuration in RabbitMQ\nDESCRIPTION: This demonstrates configuring an end session endpoint with the oauth_providers structure, allowing for more flexible configurations when supporting multiple OAuth providers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = rabbitmq-prod\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.default_oauth_provider = prodkeycloak\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://prodkeycloak:8080/realm/prod\nauth_oauth2.oauth_providers.prodkeycloak.end_session_endpoint = https://prodkeycloak:8080/realm/prod/logout\n```\n\n----------------------------------------\n\nTITLE: Stream Consumer Output Example\nDESCRIPTION: Example output showing the format of consumed messages from the RabbitMQ stream, including message numbering, creation time, content type, exchange, and routing key information. The output demonstrates successful message format conversion between AMQP protocols.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nConnecting...\nConnected\nStart consumer...\nMessage #0, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key amer\nMessage #1, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key emea\nMessage #2, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key apac\nMessage #3, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key amer\n...\nMessage #97, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key emea\nMessage #98, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key apac\nMessage #99, creation time 2021-10-06 14:19:55, content type 'text/plain', from exchange events with routing key amer\nReceived poison message, stopping...\nClosing environment...\nEnvironment closed\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Marker to RabbitMQ Stream\nDESCRIPTION: Publishes 100 messages to the stream with a marker message at the end, using a CountDownLatch to ensure all messages are confirmed before completion.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment.producerBuilder()\n                               .stream(stream)\n                               .build();\n\nint messageCount = 100;\nCountDownLatch confirmedLatch = new CountDownLatch(messageCount);\nSystem.out.printf(\"Publishing %d messages%n\", messageCount);\nIntStream.range(0, messageCount).forEach(i -> {\n    String body = i == messageCount - 1 ? \"marker\" : \"hello\";\n    producer.send(producer.messageBuilder()\n                          .addData(body.getBytes(UTF_8))\n                          .build(),\n                  ctx -> {\n                      if (ctx.isConfirmed()) {\n                        confirmedLatch.countDown();\n                      }\n                  }\n    );\n});\n\nboolean completed = confirmedLatch.await(60, TimeUnit.SECONDS);\nSystem.out.printf(\"Messages confirmed: %b.%n\", completed);\n```\n\n----------------------------------------\n\nTITLE: LDAP with Internal Fallback in advanced.config Format\nDESCRIPTION: Erlang format configuration for using LDAP as the primary authentication backend with a fallback to the internal database when LDAP authentication fails.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit,[\n  {auth_backends, [rabbit_auth_backend_ldap, rabbit_auth_backend_internal]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Auth0 JWT Token Structure Example\nDESCRIPTION: Example of an Auth0-issued JWT access token containing scope and permissions claims used for RabbitMQ authorization. Shows the token structure with issuer, subject, audience, expiration, and granted permissions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-auth0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"iss\": \"https://dev-tm5ebsbbdcbqddcj.us.auth0.com/\",\n  \"sub\": \"auth0|66d980b862efcd9f5144f42a\",\n  \"aud\": [\n    \"rabbitmq\",\n    \"https://dev-tm5ebsbbdcbqddcj.us.auth0.com/userinfo\"\n  ],\n  \"iat\": 1725533554,\n  \"exp\": 1725619954,\n  \"scope\": \"openid profile rabbitmq.tag:administrator\",\n  \"azp\": \"IC1fqsSjkQq2cVsYyHUuQyq30OAYuUv2\",\n  \"permissions\": [\n    \"rabbitmq.configure:*/*\",\n    \"rabbitmq.read:*/*\",\n    \"rabbitmq.tag:administrator\",\n    \"rabbitmq.write:*/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage Examples\nDESCRIPTION: Examples of how to run the log emitter and receiver programs from the command line.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-python.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython receive_logs_direct.py warning error > logs_from_rabbit.log\n```\n\nLANGUAGE: bash\nCODE:\n```\npython receive_logs_direct.py info warning error\n# => [*] Waiting for logs. To exit press CTRL+C\n```\n\nLANGUAGE: bash\nCODE:\n```\npython emit_log_direct.py error \"Run. Run. Or it will explode.\"\n# => [x] Sent 'error':'Run. Run. Or it will explode.'\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Limits\nDESCRIPTION: Configures connection and queue limits for a virtual host using JSON configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": 64}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-queues\": 256}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": -1}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Increasing Initial Frame Size in advanced.config for OAuth 2.0 JWT Tokens\nDESCRIPTION: Alternative configuration using advanced.config that increases the initial frame size limit to 8192 bytes to accommodate larger JWT tokens during the connection handshake.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-oauth2.md#2025-04-09_snippet_1\n\nLANGUAGE: erl\nCODE:\n```\n[\n  {rabbit, [\n    {initial_frame_max, 8192}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Certificate Support in RabbitMQ OAuth2\nDESCRIPTION: Configuration setting to fix hostname verification issues when the OAuth2 identity provider uses wildcard certificates. This setting allows RabbitMQ to successfully validate certificates with wildcard domains.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-oauth2.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nauth_oauth2.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Plugin in RabbitMQ 3.7 (INI-like Format)\nDESCRIPTION: This snippet demonstrates how to configure the RabbitMQ management plugin using the new format. It sets the listener port, IP, enables SSL, and configures SSL options including certificate paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.listener.port = 15672\nmanagement.listener.ip   = 127.0.0.1\nmanagement.listener.ssl  = true\n\nmanagement.listener.ssl_opts.cacertfile = /path/to/cacert.pem\nmanagement.listener.ssl_opts.certfile   = /path/to/cert.pem\nmanagement.listener.ssl_opts.keyfile = /path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Protocol Mapping Table in Markdown\nDESCRIPTION: Detailed markdown table showing the field-by-field mapping between MQTT 5.0 and AMQP 1.0 protocols, including field types, conditions, and implementation comments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/conversions.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| MQTT 5.0 Section             | MQTT Field                 | MQTT 5.0 Type         | Condition                             | AMQP 1.0 Section       | AMQP 1.0 Field | AMQP 1.0 Type | Comment                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| ---------------------------- | -------------------------- | --------------------- | ------------------------------------- | ---------------------- | -------------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Fixed Header                 | Dup                        | Bits                  |                                       |                        |                |               | Setting to header first-acquirer does not make sense because the DUP flag only applies from client to server (consumption from server to client is determined by the Redelivered flag sent from the queues)                                                                                                                                                                                                                                           |\n| Fixed Header                 | QoS                        | Bits                  |                                       | header                 | durable        | boolean       | durable is true if QoS > 0                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| Fixed Header                 | Retain                     | Bits                  |                                       |                        |                |               |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Variable Header              | Payload Format Indicator   | Bits                  |                                       |                        |                |               | see row \"Payload\" with condition \"Payload Format Indicator set\"                                                                                                                                                                                                                                                                                                                                                                                      |\n| Variable Header              | Message Expiry Interval    | uint                  |                                       | header                 | ttl            | milliseconds  | seconds to milliseconds  |\n| Variable Header              | Topic Alias                | ushort                |                                       |                        |                |               |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Variable Header              | Response Topic             | utf8                  |                                       | properties             | reply_to       | utf8          | Translate MQTT topic to AMQP routing key (RK). Set reply-to address to \"/exchange/\" X \"/\" RK.                              |\n| Variable Header              | Correlation Data           | binary                | `urn:uuid`                            | properties             | correlation_id | uuid          |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Variable Header              | Correlation Data           | binary                |                                       | properties             | correlation_id | binary        |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Variable Header              | User Property              | utf8                  | Key begins with \"x-\" and key is ASCII | message annotation     |                | value: utf8   | Key is of type symbol                                                                                                                                                                                                                                                                                                                                                                                                                                |\n|                              |                            |                       | Key does not begin with \"x-\"          | application properties |                | value: utf8   | Key is of type utf8                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| Variable Header              | Subscription Identifier    | uint                  |                                       |                        |                |               |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Variable Header              | Content Type               | utf8                  | valid ASCII                           | properties             | content_type   | symbol        | MQTT content type is UTF-8 whereas AMQP 1.0 content type is only ASCII                                                                                                                                                                                                                                                                                                                                                                               |\n| Payload                      |                            |                       | Payload Format Indicator unset        | data                   |                | data          |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Payload                      |                            |                       | Payload Format Indicator set          | amqp.value             |                | utf8          | If the Payload Format Indicator is set, convert the MQTT payload to a string (i.e. single AMQP value section) because an AMQP string is UTF-8 encoded                                                                                                                                                                                                                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for RabbitMQ Stream Producer in Python\nDESCRIPTION: This code snippet shows the necessary imports for creating a RabbitMQ stream producer using the rstream library in Python.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python-stream.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom rstream import Producer\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Pika OAuth 2.0 Client\nDESCRIPTION: Commands to prepare a Python environment and install necessary dependencies (Pika and Requests) for running the OAuth 2.0 enabled AMQP client that supports token refresh.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-keycloak.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\npip install pika\npip install requests\npython3 pika-client/producer.py producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn\n```\n\n----------------------------------------\n\nTITLE: Creating the AMQP 1.0 Environment in Python\nDESCRIPTION: Sets up an Environment instance to manage connections and shared resources for AMQP 1.0 communication in Python.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rabbitmq_amqp_python_client import Environment\n\n# ...\n\n# create the environment instance\nenvironment = Environment(\"amqp://guest:guest@localhost:5672/\")\n# ...\n# close the environment when the application stops\nenvironment.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Endpoint\nDESCRIPTION: Configuration for Consul host, port and scheme settings for RabbitMQ peer discovery\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# 8500 is used by default\ncluster_formation.consul.port = 8500\n# http is used by default\ncluster_formation.consul.scheme = http\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Key Prefix for Consul-based Discovery\nDESCRIPTION: This configuration sets a custom prefix for the Consul key used in locking during cluster formation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\ncluster_formation.consul.lock_timeout = 60\n# should the Consul key used for locking be prefixed with something\n# other than \"rabbitmq\"?\ncluster_formation.consul.lock_prefix = environments-qa\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Named Exchange in Go\nDESCRIPTION: This code demonstrates how to publish a message to the 'logs' exchange. The routing key is empty as it's ignored for fanout exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nerr = ch.PublishWithContext(ctx,\n  \"logs\", // exchange\n  \"\",     // routing key\n  false,  // mandatory\n  false,  // immediate\n  amqp.Publishing{\n          ContentType: \"text/plain\",\n          Body:        []byte(body),\n  })\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages in RabbitMQ with Objective-C\nDESCRIPTION: Code to publish a persistent message to RabbitMQ using Objective-C. Marking messages as persistent instructs RabbitMQ to save them to disk to survive server restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-objectivec.md#2025-04-09_snippet_6\n\nLANGUAGE: objectivec\nCODE:\n```\n[ch.defaultExchange publish:msgData routingKey:q.name persistent:YES];\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Settings with RabbitMQ CLI (PowerShell)\nDESCRIPTION: Demonstrates how to use the rabbitmqctl encode command with custom encryption settings on Windows using PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_52\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 \\\n                     \"<<\"\"guest\"\">>\" mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Modifying Shell Script Shebang for Solaris Compatibility\nDESCRIPTION: Change the shell script interpreter line to use Solaris POSIX-compliant shell located at /usr/xpg4/bin/sh instead of the default /bin/sh for proper script execution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-solaris.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/xpg4/bin/sh\n```\n\n----------------------------------------\n\nTITLE: Listing All RabbitMQ Plugins Verbose\nDESCRIPTION: Lists all plugins with detailed information including versions, dependencies and descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -v\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Virtual Host Rate with Reactive Client\nDESCRIPTION: Demonstrates how to use the ReactiveClient to calculate the total message rate across all virtual hosts in a RabbitMQ broker using reactive streams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2017-10-18-new-reactive-client-for-rabbitmq-http-api/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nReactiveClient client = new ReactiveClient(\"http://localhost:15672/api\", \"guest\", \"guest\");\nMono<Double> vhostsRate = client.getVhosts()\n        .map(vhostInfo -> vhostInfo.getMessagesDetails().getRate())\n        .reduce(0.0, (acc, current) -> acc + current);\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Hash Functions in RabbitMQ\nDESCRIPTION: Command for displaying all hash functions supported by encoding commands in RabbitMQ using the rabbitmqctl utility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_hashes\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication in RabbitMQ (Classic Erlang Format)\nDESCRIPTION: This example shows a complex LDAP authentication configuration using the classic Erlang term format. It demonstrates the limitations of the new format for deeply nested structures and the need for advanced configuration options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-22-new-configuration-format-in-rabbitmq-3-7/index.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},\n  {rabbitmq_auth_backend_ldap,\n   [ {servers,               [\"my-ldap-server\"]},\n     {user_dn_pattern,       \"cn=${username},ou=People,dc=example,dc=com\"},\n     {use_ssl,               false},\n     {port,                  389},\n     {log,                   false},\n     {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}]\n     }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n   ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in Bash\nDESCRIPTION: Command to start a new RabbitMQ node using the rabbitmq-server command in a Bash shell. By default, this will use Mnesia as the metadata store backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest Tool on a Partially Available RabbitMQ Cluster\nDESCRIPTION: This snippet demonstrates the behavior of the PerfTest tool when trying to declare resources on a RabbitMQ cluster where only a minority of nodes are available. It shows how Khepri's consistency model affects resource declaration operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/everyday-operations.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/PerfTest\n\n# => id: test-161339-979, starting consumer #0\n# => id: test-161339-979, starting consumer #0, channel #0\n# =>  Main thread caught exception: java.io.IOException\n# =>  16:14:10.638 [com.rabbitmq.perf.PerfTest.main()] ERROR com.rabbitmq.perf.PerfTest - Main thread caught exception\n# =>  (...)\n```\n\n----------------------------------------\n\nTITLE: Viewing Log Tail\nDESCRIPTION: Command to print the last N lines of the RabbitMQ node's log file with configurable line count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_tail --number 100\n```\n\n----------------------------------------\n\nTITLE: Plugin Status Output Example\nDESCRIPTION: Example output showing enabled plugins including the metronome plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# => Plugins\n# =>\n# => Enabled plugin file: /var/folders/gp/53t98z011678vk9rkcb_s6ph0000gn/T/rabbitmq-test-instances/rabbit@warp10/enabled_plugins\n# => Enabled plugins:\n# =>\n# =>  * rabbitmq_metronome\n# =>  * amqp_client\n```\n\n----------------------------------------\n\nTITLE: Enabling All Stable Feature Flags in RabbitMQ\nDESCRIPTION: Command to enable all stable feature flags at once using rabbitmqctl CLI tool. Note that this excludes experimental feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Exchange in PHP\nDESCRIPTION: Creates a binding between the temporary queue and the 'logs' exchange to receive messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-php.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$channel->queue_bind($queue_name, 'logs');\n```\n\n----------------------------------------\n\nTITLE: JWT Token with Variable Expansion for Topic Permissions\nDESCRIPTION: Example JWT token that demonstrates variable expansion in OAuth 2.0 scopes for topic permissions, allowing a user to send to exchanges and routing keys matching specific patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\" : \"bob\",\n  \"scope\" : [ \"rabbitmq.write:*/q-{vhost}-*/u-{sub}-*\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Plugin Directories in Windows\nDESCRIPTION: Shows how to configure multiple plugin directories in RabbitMQ using a semicolon-separated list in the rabbitmq-env-conf.bat file on Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# Example rabbitmq-env-conf.bat file that features a colon-separated list of plugin directories\nPLUGINS_DIR=\"C:\\Example\\RabbitMQ\\plugins;C:\\Example\\RabbitMQ\\rabbitmq_server-3.11.6\\plugins\"\n```\n\n----------------------------------------\n\nTITLE: Referencing AMQP tx Class in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the AMQP tx class using inline code formatting in Markdown. It's used to highlight specific AMQP methods and classes within the text.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/semantics.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">tx</span>\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ CLI Aliases in Bash\nDESCRIPTION: These snippets demonstrate the usage of RabbitMQ CLI aliases for various commands, showing both the aliased version and the expanded command it represents.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl env\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl environment\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl lq\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_queues --quiet\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cs\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --openssl-format --quiet\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics env\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics environment\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Broker with Plugin\nDESCRIPTION: Command to start a RabbitMQ node with the metronome plugin built and enabled.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker\n```\n\n----------------------------------------\n\nTITLE: Referencing AMQP tx Class in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the AMQP tx class using inline code formatting in Markdown. It's used to highlight specific AMQP methods and classes within the text.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/semantics.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">tx</span>\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Dependencies\nDESCRIPTION: Command to install JavaScript dependencies required for building the RabbitMQ website using Docusaurus.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# for NPM users\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cipher Suites List Command - Bash\nDESCRIPTION: Lists available cipher suites with formatting options\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl --all\n```\n\n----------------------------------------\n\nTITLE: Go Code for Testing AMQP 1.0 Connection Scalability\nDESCRIPTION: Go program that creates 40,000 AMQP 1.0 connections with two sessions each to test connection memory efficiency. The program logs progress every 1,000 connections and keeps connections open for 5 hours.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/Azure/go-amqp\"\n)\n\nfunc main() {\n\tfor i := 0; i < 40_000; i++ {\n\t\tif i%1000 == 0 {\n\t\t\tlog.Printf(\"opened %d connections\", i)\n\t\t}\n\t\tconn, err := amqp.Dial(\n\t\t\tcontext.TODO(),\n\t\t\t\"amqp://localhost\",\n\t\t\t&amqp.ConnOptions{SASLType: amqp.SASLTypeAnonymous()})\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"open connection:\", err)\n\t\t}\n\t\t_, err = conn.NewSession(context.TODO(), nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"begin session:\", err)\n\t\t}\n\t\t_, err = conn.NewSession(context.TODO(), nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"begin session:\", err)\n\t\t}\n\t}\n\tlog.Println(\"opened all connections\")\n\ttime.Sleep(5 * time.Hour)\n}\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Configuration for Certificate Authority\nDESCRIPTION: OpenSSL configuration file for creating a Certificate Authority (CA) and generating server and client certificates. Defines certificate extension policies for both server and client certificates, as well as CA configuration settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\n[ ca ]\ndefault_ca = testca\n\n[ testca ]\ndir = .\ncertificate = $dir/ca_certificate.pem\ndatabase = $dir/index.txt\nnew_certs_dir = $dir/certs\nprivate_key = $dir/private/ca_private_key.pem\nserial = $dir/serial\n\ndefault_crl_days = 7\ndefault_days = 365\ndefault_md = sha256\n\npolicy = testca_policy\nx509_extensions = certificate_extensions\n\n[ testca_policy ]\ncommonName = supplied\nstateOrProvinceName = optional\ncountryName = optional\nemailAddress = optional\norganizationName = optional\norganizationalUnitName = optional\ndomainComponent = optional\n\n[ certificate_extensions ]\nbasicConstraints = CA:false\n\n[ req ]\ndefault_bits = 2048\ndefault_keyfile = ./private/ca_private_key.pem\ndefault_md = sha256\nprompt = yes\ndistinguished_name = root_ca_distinguished_name\nx509_extensions = root_ca_extensions\n\n[ root_ca_distinguished_name ]\ncommonName = hostname\n\n[ root_ca_extensions ]\nbasicConstraints = CA:true\nkeyUsage = keyCertSign, cRLSign\n\n[ client_ca_extensions ]\nbasicConstraints = CA:false\nkeyUsage = digitalSignature,keyEncipherment\nextendedKeyUsage = 1.3.6.1.5.5.7.3.2\n\n[ server_ca_extensions ]\nbasicConstraints = CA:false\nkeyUsage = digitalSignature,keyEncipherment\nextendedKeyUsage = 1.3.6.1.5.5.7.3.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth Providers in RabbitMQ (Scenario 2)\nDESCRIPTION: RabbitMQ configuration for two OAuth providers using different realms (dev and prod) on the same Keycloak instance. Defines authentication settings including issuer URLs and SSL certificate verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-multiresource.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.oauth_providers.devkeycloak.issuer = https://keycloak:8443/realms/dev\nauth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://keycloak:8443/realms/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Checking If Quorum Queue Replicas Have Finished Initial Sync (PowerShell)\nDESCRIPTION: PowerShell version of the health check command that exits with a non-zero status if there are any ongoing initial quorum queue replica synchronization operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/grow-then-shrink-upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n# exits with a non-zero status if there are any ongoing initial quorum queue\n# replica sync operations\nrabbitmq-diagnostics.bat check_if_new_quorum_queue_replicas_have_finished_initial_sync\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Direct Exchange Receiver with Maven\nDESCRIPTION: Command to run the Spring AMQP receiver application that listens for messages from the direct exchange. This uses the 'routing' and 'receiver' Spring profiles.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-spring-amqp.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/rabbitmq-tutorials.jar \\\n    --spring.profiles.active=routing,receiver \\\n    --tutorial.client.duration=60000\n```\n\n----------------------------------------\n\nTITLE: Modifying Shell Script Shebang for Solaris Compatibility\nDESCRIPTION: Change the shell script interpreter line to use Solaris POSIX-compliant shell located at /usr/xpg4/bin/sh instead of the default /bin/sh for proper script execution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-solaris.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/xpg4/bin/sh\n```\n\n----------------------------------------\n\nTITLE: Displaying TLS Error Log Examples in Markdown\nDESCRIPTION: This snippet shows a markdown table containing common TLS-related error messages in RabbitMQ logs, along with explanations for each error. It covers issues like missing crypto modules, invalid key files, client verification problems, and data integrity failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-ssl.md#2025-04-09_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <thead>\n    <td><strong>Logged Errors</strong></td>\n    <td><strong>Explanation</strong></td>\n  </thead>\n\n  <tr>\n    <td>\n      Entries containing `{undef, [{crypto,hash,...`\n    </td>\n    <td>\n      The `crypto` module is missing in the Erlang/OTP installation\n      used or it is out of date. On Debian, Ubuntu, and other Debian-derived distributions\n      it usually means that the [erlang-ssl](http://packages.ubuntu.com/search?keywords=erlang-ssl) package was not installed.\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      Entries containing `{ssl_upgrade_error, ekeyfile}`\n      or `{ssl_upgrade_error, ecertfile}`\n    </td>\n    <td>\n      This means the broker keyfile or certificate file is invalid.\n      Confirm that the keyfile matches the certificate and that both are in PEM format.\n      PEM format is a printable encoding with recognisable delimiters. The certificate\n      will start and end with `-----BEGIN CERTIFICATE-----` and\n      `-----END CERTIFICATE-----` respectively. The keyfile will likewise\n      start and end with `-----BEGIN RSA PRIVATE KEY-----` and\n      `-----END RSA PRIVATE KEY-----` respectively.\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      Entries containing `{ssl_upgrade_failure, ... certify ...}`\n    </td>\n    <td>\n      This error is related to client verification. The client is presenting an invalid\n      certificate or no certificate. If the ssl_options has the `verify` option\n      set to `verify_peer` then try using the value `verify_none`\n      temporarily. Ensure that the client certificate has been generated correctly, and that\n      the client is presenting the correct certificate.\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      Entries containing `{ssl_upgrade_error, ...}`\n    </td>\n    <td>\n      This is a generic error that could have many causes. Make sure you are\n      using the recommended version of Erlang.\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      Entries containing `{tls_alert,\"bad record mac\"}`\n    </td>\n    <td>\n      The server has tried verifying integrity of a piece of data it received\n      and the check failed. This can be due to problematic network equipment, unintentional\n      socket sharing in the client (e.g. due to the use of `fork(2)`) or a bug\n      in the client implementation of TLS.\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Disabling Statistics Collection\nDESCRIPTION: Configuration options to disable metrics collection and enable queue totals\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nmanagement_agent.disable_metrics_collector = true\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.disable_stats = true\nmanagement.enable_queue_totals = true\n```\n\n----------------------------------------\n\nTITLE: Reinstalling RabbitMQ Homebrew Formula\nDESCRIPTION: Series of commands to completely uninstall and reinstall RabbitMQ using Homebrew, including removal of data directories and configuration files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-homebrew.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop rabbitmq\n\nbrew uninstall rabbitmq\n\n# Now delete all node's data directories and configuration files.\n# This assumes that Homebrew root is at /opt/homebrew\nrm -rf /opt/homebrew/etc/rabbitmq/\nrm -rf /opt/homebrew/opt/rabbitmq/\nrm -rf /opt/homebrew/var/lib/rabbitmq/\n# the launch agent file\nrm -f $HOME/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist\n\n# re-install\nbrew install rabbitmq\n\n## start the service if necessary\n# brew services start rabbitmq\n\n## after starting the service, enable all feature flags\n# /opt/homebrew/sbin/rabbitmqctl enable_feature_flag all\n```\n\n----------------------------------------\n\nTITLE: Sample Rich Authorization Request Token for RabbitMQ (JavaScript)\nDESCRIPTION: This snippet shows a sample JWT token containing Rich Authorization Request details for RabbitMQ. It includes permissions for different clusters and actions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    {\n      \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:production-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    {\n      \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\" ],\n      \"actions\": [\"administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default RabbitMQ Loopback Users Configuration Comment\nDESCRIPTION: A commented code snippet showing that the default configuration restricts the 'guest' user (which uses well-known credentials) to localhost-only connections for security reasons.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\n# guest uses well known\n# credentials and can only\n# log in from localhost\n```\n\n----------------------------------------\n\nTITLE: Receiver Output for Second Run in Shell\nDESCRIPTION: Shell output showing the second run of the consumer, demonstrating that it successfully resumed from where it left off (offset 100) and processed messages until the new marker at offset 201.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nConnecting...\nStart consuming...\nMarker found\nDone consuming, first offset was 100, last offset was 201\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Queue in RabbitMQ with Java\nDESCRIPTION: Generates a temporary queue with a server-assigned name that is non-durable, exclusive, and will be auto-deleted when the connection closes. Useful for temporary subscribers that only need current messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-java.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString queueName = channel.queueDeclare().getQueue();\n```\n\n----------------------------------------\n\nTITLE: Encoding Values with rabbitmqctl on Windows\nDESCRIPTION: Examples of encoding an Erlang binary and a connection string using rabbitmqctl on PowerShell with a passphrase.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_53\n\nLANGUAGE: PowerShell\nCODE:\n```\n# <<\"guest\">> here is a value to encode, as an Erlang binary,\n# as it would have appeared in advanced.config\nrabbitmqctl encode \"<<\"\"guest\"\">>\" mypassphrase\n{encrypted,<<\"... long encrypted value...\">>\n# \"amqp://fred:secret@host1.domain/my_vhost\" here is a value to encode, provided as an Erlang string,\n# as it would have appeared in advanced.config\nrabbitmqctl encode '\"amqp://fred:secret@host1.domain/my_vhost\"' mypassphrase\n{encrypted,<<\"... long encrypted value...\">>}\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status with Partitions\nDESCRIPTION: Command output showing cluster status when network partitions are detected between nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/partitions.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@warp10 ...\n# => Basics\n# =>\n# => Cluster name: local.1\n# =>\n# => ...edited out for brevity...\n# =>\n# => Network Partitions\n# =>\n# => Node flopsy@warp10 cannot communicate with hare@warp10\n# => Node rabbit@warp10 cannot communicate with hare@warp10\n```\n\n----------------------------------------\n\nTITLE: Implementing Push-Based Consumer with AsyncEventingBasicConsumer in C#\nDESCRIPTION: This snippet demonstrates how to set up a push-based message consumer using AsyncEventingBasicConsumer. It shows how to handle received messages asynchronously and acknowledge them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += async (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // copy or deserialise the payload\n                    // and process the message\n                    // ...\n                    await channel.BasicAckAsync(ea.DeliveryTag, false);\n                };\n// this consumer tag identifies the subscription\n// when it has to be cancelled\nstring consumerTag = await channel.BasicConsumeAsync(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for MQTT Performance Benchmarking\nDESCRIPTION: RabbitMQ configuration snippet used for memory usage benchmarks, setting small TCP buffer sizes to prevent high binary memory usage and disabling the metrics collector for better performance with large numbers of connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-21-native-mqtt/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nmqtt.tcp_listen_options.sndbuf = 1024\nmqtt.tcp_listen_options.recbuf = 1024\nmqtt.tcp_listen_options.buffer = 1024\nmanagement_agent.disable_metrics_collector = true\n```\n\n----------------------------------------\n\nTITLE: Displaying channel_max Property in RabbitMQ\nDESCRIPTION: Represents the maximum number of channels allowed on a connection in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\nchannel_max\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Suffix for RabbitMQ Kubernetes Peer Discovery\nDESCRIPTION: Allows appending a suffix to peer hostnames returned by Kubernetes. This is useful for domain qualification in multi-zone deployments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# no suffix is appended by default\ncluster_formation.k8s.hostname_suffix = rmq.eng.example.local\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connections Limit with rabbitmqctl\nDESCRIPTION: This snippet demonstrates how to use the rabbitmqctl command to set a maximum number of connections for a specific user. It sets a limit of 10 connections for user1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/user-limits.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_user_limits user1 '{\"max-connections\": 10}'\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Restricting All Resource Access in RabbitMQ\nDESCRIPTION: This regular expression pattern effectively stops the user from performing any operation by matching nothing but the empty string. It's used to restrict access to all resources in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_13\n\nLANGUAGE: regex\nCODE:\n```\n'^$'\n```\n\n----------------------------------------\n\nTITLE: Activating Console Logging\nDESCRIPTION: Enables logging to console (standard output).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nlog.console = true\n```\n\n----------------------------------------\n\nTITLE: HTTP Options Configuration for Web MQTT\nDESCRIPTION: Configuration of generic HTTP server settings for the Web MQTT plugin using Cowboy HTTP server options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# connection inactivity timeout\\nweb_mqtt.cowboy_opts.idle_timeout = 60000\\n# max number of pending requests allowed on a connection\\nweb_mqtt.cowboy_opts.max_keepalive = 200\\n# max number of headers in a request\\nweb_mqtt.cowboy_opts.max_headers   = 100\\n# max number of empty lines before request body\\nweb_mqtt.cowboy_opts.max_empty_lines = 5\\n# max request line length allowed in requests\\nweb_mqtt.cowboy_opts.max_request_line_length\n```\n\n----------------------------------------\n\nTITLE: STOMP Protocol Version Values\nDESCRIPTION: Possible protocol version values that can be returned by the list_stomp_connections command when querying protocol information from STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_78\n\nLANGUAGE: erlang\nCODE:\n```\n{'STOMP', 0}\n{'STOMP', 1}\n{'STOMP', 2}\n```\n\n----------------------------------------\n\nTITLE: Default User Definition Example for Test/QA Environments\nDESCRIPTION: JSON snippet showing how to define the default guest user in a definitions file. This is useful for test or QA environments but not recommended for production.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/definitions.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n    \"users\": [\n        {\n            \"name\": \"guest\",\n            \"password_hash\": \"9/1i+jKFRpbTRV1PtRnzFFYibT3cEpP92JeZ8YKGtflf4e/u\",\n            \"tags\": [\"administrator\"]\n        }\n    ],\n    \"permissions\":[\n        {\n            \"user\":\"guest\",\n            \"vhost\":\"/\",\n            \"configure\":\".*\",\n            \"read\":\".*\",\n            \"write\":\".*\"}\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Timeout for RabbitMQ etcd Discovery\nDESCRIPTION: This snippet shows how to configure the lock acquisition timeout for etcd-based RabbitMQ peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# lock acquisition timeout in seconds\n# default: 300\n# cluster_formation.consul.lock_wait_time is an alias\ncluster_formation.etcd.lock_timeout = 60\n```\n\n----------------------------------------\n\nTITLE: Enabling Compressed Log File Rotation in RabbitMQ\nDESCRIPTION: This snippet shows how to enable compression for archived log files in RabbitMQ's configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.rotation.compress = true\n```\n\n----------------------------------------\n\nTITLE: Viewing Producer Application Logs\nDESCRIPTION: Bash command to view the logs of the producer application that was started with the Rich Authorization Request token, useful for debugging and verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs producer_with_roles -f\n```\n\n----------------------------------------\n\nTITLE: Restarting RabbitMQ Server\nDESCRIPTION: Command to restart the RabbitMQ server to apply the plugin changes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-09-12-mqtt-adapter/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo /etc/init.d/rabbitmq-server restart\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Direct Exchange Routing Flowchart with Mermaid\nDESCRIPTION: This Mermaid flowchart demonstrates the message flow in a RabbitMQ setup with a direct exchange. It shows a producer (P) sending messages to a direct exchange (X), which then routes messages to two queues (Q₁ and Q₂) based on routing keys. Each queue has a dedicated consumer (C₁ and C₂).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T4DiagramDirectX.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{direct}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X -- orange --> Q1\n    X -- black --> Q2\n    X -- green --> Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Liveness Probe for RabbitMQ on Kubernetes\nDESCRIPTION: This snippet demonstrates a simple liveness probe for RabbitMQ pods in Kubernetes. It uses the 'rabbitmq-diagnostics -q ping' command as a basic health check to determine if a pod needs to be restarted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q ping\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Stream Messages with First Offset\nDESCRIPTION: Demonstrates how to consume messages from a RabbitMQ stream starting from the first available message using the x-stream-offset consumer argument. Includes QoS settings and message acknowledgment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/streams.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicQos(100); // QoS must be specified\nchannel.basicConsume(\n  \"my-stream\",\n  false,\n  Collections.singletonMap(\"x-stream-offset\", \"first\"), // \"first\" offset specification\n  (consumerTag, message) -> {\n    // message processing\n    // ...\n   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required\n  },\n  consumerTag -> { });\n```\n\n----------------------------------------\n\nTITLE: Running rabbitmq-echopid.bat Utility in Windows\nDESCRIPTION: This command demonstrates how to use the rabbitmq-echopid.bat utility to retrieve the process ID of the Erlang runtime running RabbitMQ. The 'sname' parameter represents the short-name form of the RabbitMQ node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-echopid.8.md#2025-04-09_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\nrabbitmq-echopid.bat sname\n```\n\n----------------------------------------\n\nTITLE: Increasing Atom Limit in RabbitMQ\nDESCRIPTION: These examples show how to increase the atom limit to 9 million using either a runtime argument or an environment variable. This may be necessary in environments with high quorum queues churn.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/runtime.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+t 9000000\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_MAX_NUMBER_OF_ATOMS=9000000\n```\n\n----------------------------------------\n\nTITLE: Setting Message Targets in Java\nDESCRIPTION: Example of creating a publisher without a target in Java, then defining different targets for individual messages: publishing to an exchange with a routing key, to an exchange without a routing key, and directly to a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\n// no target defined on publisher creation\nPublisher publisher = connection.publisherBuilder()\n    .build();\n\n// publish to an exchange with a routing key\nMessage message1 = publisher.message()\n    .toAddress().exchange(\"foo\").key(\"bar\")\n    .message();\n\n// publish to an exchange without a routing key\nMessage message2 = publisher.message()\n    .toAddress().exchange(\"foo\")\n    .message();\n\n// publish to a queue\nMessage message3 = publisher.message()\n    .toAddress().queue(\"my-queue\")\n    .message();\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Queue Leaders in PowerShell\nDESCRIPTION: PowerShell command to redistribute queue and stream leader replicas across all cluster nodes. Useful after a rolling upgrade to ensure even distribution of load.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-queues.bat rebalance all\n```\n\n----------------------------------------\n\nTITLE: Closing a RabbitMQ Publisher\nDESCRIPTION: Example of closing a RabbitMQ publisher when it's no longer needed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# close the publisher when it is no longer necessary \npublisher.close()\n```\n\n----------------------------------------\n\nTITLE: Service Management Commands for RabbitMQ on Windows\nDESCRIPTION: PowerShell commands to stop, remove, install, and start the RabbitMQ Windows service, typically used after configuration changes that require service reinstallation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/windows-configuration.md#2025-04-09_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\rabbitmq-service.bat stop\n.\\rabbitmq-service.bat remove\n.\\rabbitmq-service.bat install\n.\\rabbitmq-service.bat start\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message in Go\nDESCRIPTION: Example of creating and publishing a message in Go using the RabbitMQ client. It shows how to handle different types of outcomes from the broker after publishing a message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\n// create the message\nmessage =  rmq.NewMessage([]byte(\"Hello\")\n// publish the message and deal with broker feedback\npublishResult, err := publisher.Publish(context.Background(),message)\nif err != nil {\n    // there is an error \n}\n    switch publishResult.Outcome.(type) {\n        case *rmq.StateAccepted:\n            // the broker accepted (confirmed) the message\n            break\n        case *rmq.StateReleased:\n           // the broker could not route the message anywhere \n            break\n        case *rmq.StateRejected:\n            // at least one queue rejected the message\n            stateType := publishResult.Outcome.(*rmq.StateRejected)\n            if stateType.Error != nil {\n                // in case there is error \n            }\n            break\n        default:\n            // these status are not supported. Leave it for AMQP 1.0 compatibility\n            // see: https://www.rabbitmq.com/docs/next/amqp#outcomes\n        }\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Versions Older Than TLSv1.2\nDESCRIPTION: Configuration example that sets up a TLS listener on port 5671 with proper certificate paths and restricts the TLS version to 1.2 only, preventing the use of older, less secure versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.ssl.1 = 5671\nssl_options.cacertfile = /path/to/ca_certificate.pem\nssl_options.certfile   = /path/to/server_certificate.pem\nssl_options.keyfile    = /path/to/server_key.pem\n\nssl_options.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: Displaying client_properties in RabbitMQ\nDESCRIPTION: Shows informational properties transmitted by the client during connection establishment with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\nclient_properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for RabbitMQ Management UI\nDESCRIPTION: Examples of how to configure the Content Security Policy (CSP) header for the RabbitMQ Management UI. The default policy and custom policy examples are provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = default-src https://rabbitmq.eng.example.local\n```\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.csp.policy = default-src 'self' *.eng.example.local\n```\n\nLANGUAGE: ini\nCODE:\n```\n# prohibits iframe embedding of the UI\nmanagement.csp.policy = frame-ancestors 'none'\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang Dependencies\nDESCRIPTION: Installs required Erlang packages and components needed by RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y erlang-base \\\n                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\\n                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\\n                        erlang-runtime-tools erlang-snmp erlang-ssl \\\n                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n```\n\n----------------------------------------\n\nTITLE: Configuring Kernel Limits for RabbitMQ in Docker\nDESCRIPTION: This JSON configuration sets the default ulimits for Docker containers, specifically setting the nofile (number of file descriptors) limit to 64000 for both hard and soft limits.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for Etcd Peer Discovery in RabbitMQ\nDESCRIPTION: Initial configuration for using etcd as a peer discovery backend in RabbitMQ, showing the two ways to specify the backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for Etcd Peer Discovery in RabbitMQ\nDESCRIPTION: Initial configuration for using etcd as a peer discovery backend in RabbitMQ, showing the two ways to specify the backend.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\n# the backend can also be specified using its module name\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd\n```\n\n----------------------------------------\n\nTITLE: Creating the AMQP 1.0 Environment in C#\nDESCRIPTION: Initializes an IEnvironment instance asynchronously to manage connections and shared resources for AMQP 1.0 communication in C#.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing RabbitMQ.AMQP.Client;\nusing RabbitMQ.AMQP.Client.Impl;\n\n// ...\n\n// create the environment instance\nIEnvironment environment = await AmqpEnvironment.CreateAsync(\n    ConnectionSettingBuilder.Create().Build());\n// ...\n// close the environment when the application stops\nawait environment.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Error Handling Function in Go for RabbitMQ\nDESCRIPTION: A helper function for handling errors in RabbitMQ Go applications by logging and panicking when errors occur.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Options in RabbitMQ\nDESCRIPTION: Default configuration for SSL/TLS options in RabbitMQ, which is disabled by default and requires manual configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nssl_options = none\n```\n\n----------------------------------------\n\nTITLE: Example RabbitMQ Server Capabilities Table in AMQP 0-9-1\nDESCRIPTION: Demonstrates the structure of a capabilities table that a RabbitMQ server presents to clients during connection establishment. The table includes product information, platform details, and supported protocol extensions like exchange bindings and publisher confirms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/connections/index.md#2025-04-09_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\n{ \"product\"      = (longstr) \"RabbitMQ\",\n  \"platform\"     = (longstr) \"Erlang/OTP\",\n  \"information\"  = (longstr) \"Licensed under the MPL 2.0. Website: https://www.rabbitmq.com\",\n  \"capabilities\" = (table)   { \"exchange_exchange_bindings\" = (bool) true,\n                               \"consumer_cancel_notify\"     = (bool) true,\n                               \"basic.nack\"                 = (bool) true,\n                               \"publisher_confirms\"         = (bool) true },\n  \"version\"      = (longstr) \"3.12.10\" }\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific RabbitMQ Commands\nDESCRIPTION: Example of how to get detailed help information for a specific RabbitMQ CLI command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat help add_user\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Resource Declaration Timeout with RabbitMQ PerfTest on Khepri Minority Side\nDESCRIPTION: This example shows what happens when using the PerfTest tool to declare resources (exchange and queue) in a RabbitMQ cluster where only a minority of nodes (1 out of 5) are running with Khepri as the metadata store. The operation times out and produces an error because Khepri requires a quorum of nodes to be available.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/everyday-operations.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/PerfTest\n\n# => id: test-161339-979, starting consumer #0\n# => id: test-161339-979, starting consumer #0, channel #0\n# =>  Main thread caught exception: java.io.IOException\n# =>  16:14:10.638 [com.rabbitmq.perf.PerfTest.main()] ERROR com.rabbitmq.perf.PerfTest - Main thread caught exception\n# =>  (...)\n```\n\nLANGUAGE: bash\nCODE:\n```\n[error] <0.1373.0> Error on AMQP connection <0.1373.0> (127.0.0.1:55165 -> 127.0.0.1:5672 - perf-test-consumer-0, vhost: '/', user: 'guest', state: running), channel 1:\n[error] <0.1373.0>  operation exchange.declare caused a connection exception internal_error: \"failed to declare exchange 'direct' in vhost '/' because the operation timed out\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JWKS Endpoint with TLS Settings\nDESCRIPTION: Configuration example for setting up a JWKS endpoint with appropriate TLS security settings, including certificate verification and hostname validation for OAuth 2.0 authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.jwks_uri = https://my-jwt-issuer/jwks.json\nauth_oauth2.https.cacertfile = test/config_schema_SUITE_data/certs/cacert.pem\nauth_oauth2.https.peer_verification = verify_peer\nauth_oauth2.https.depth = 5\nauth_oauth2.https.fail_if_no_peer_cert = true\nauth_oauth2.https.hostname_verification = wildcard\nauth_oauth2.algorithms.1 = HS256\nauth_oauth2.algorithms.2 = RS256\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Cleanup Warnings in RabbitMQ\nDESCRIPTION: This snippet shows how to configure RabbitMQ to log warnings for unknown nodes in the cluster without removing them. This is the default behavior and should be used with care.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.node_cleanup.only_log_warning = true\n```\n\n----------------------------------------\n\nTITLE: Handling Node Rejoin Failure with Cluster Identity Mismatch\nDESCRIPTION: Error log message that appears when a node tries to rejoin a cluster but is rejected because another node has been reset and has a different cluster identity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNode 'rabbit@node1.local' thinks it's clustered with node 'rabbit@node2.local', but 'rabbit@node2.local' disagrees\n```\n\n----------------------------------------\n\nTITLE: Clearing Component Parameter in RabbitMQ\nDESCRIPTION: Command to clear a parameter for the federation-upstream component.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_parameter federation-upstream node01\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Logging Format in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to enable JSON-formatted log output in the rabbitmq.conf file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Prometheus Metrics in Bash\nDESCRIPTION: Command to verify that RabbitMQ is exposing metrics in Prometheus format using curl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s localhost:15692/metrics | head -n 3\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested Scopes in OAuth 2.0 Tokens for RabbitMQ\nDESCRIPTION: Demonstrates how RabbitMQ can parse deeply nested scopes in OAuth 2.0 tokens, such as those issued by Keycloak. Includes an example token structure and the corresponding RabbitMQ configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authorization\": {\n    \"permissions\": [\n      {\n        \"scopes\": [\n          \"rabbitmq-resource.read:*/*\"\n        ],\n        \"rsid\": \"2c390fe4-02ad-41c7-98a2-cebb8c60ccf1\",\n        \"rsname\": \"allvhost\"\n      },\n      {\n        \"scopes\": [\n          \"rabbitmq-resource.write:vhost1/*\"\n        ],\n        \"rsid\": \"e7f12e94-4c34-43d8-b2b1-c516af644cee\",\n        \"rsname\": \"vhost1\"\n      },\n      {\n        \"scopes\": [\n          \"rabbitmq-resource.tag:administrator\"\n        ],\n        \"rsid\": \"12ac3d1c-28c2-4521-8e33-0952eff10bd9\"\n      }\n    ]\n  },\n  \"scope\": \"email profile rabbitmq-resource.tag:monitoring\",\n}\n```\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.additional_scopes_key = authorization.permissions.scopes\n```\n\n----------------------------------------\n\nTITLE: Configuring Predeclared Topology in RabbitMQ Shovel\nDESCRIPTION: Configuration setting to make the Shovel plugin wait for queue declaration when using predefined topology.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nshovel.topology.predeclared = true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Syslog with RFC 5424\nDESCRIPTION: Configuration for TCP transport with RFC 5424 protocol for Syslog output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.transport = tcp\nlog.syslog.protocol = rfc5424\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Consumer with Custom Token\nDESCRIPTION: This command starts a PerfTest consumer application using a custom JWT token with roles in the extra scope field. It generates the token using the JWT token script with consumer-specific claims.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-consumer-with-token CONSUMER=consumer_with_roles TOKEN=$(bin/jwt_token consumer-roles-in-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Setting Classic Queue Version in RabbitMQ Configuration\nDESCRIPTION: Configuration setting to specify the default version for classic queues. Version 2 provides improved stability under high memory pressure with a new index file format and storage implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/persistence-conf.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# makes classic queues use a more efficient message storage\n# and queue index implementations\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth 2.0 Authentication in Management UI\nDESCRIPTION: Configuration to enable OAuth 2.0 authentication in the RabbitMQ management UI, specifying client ID and required scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_user_client\nmanagement.oauth_scopes = <SPACE-SEPARATED LIST OF SCOPES. See below>\n```\n\n----------------------------------------\n\nTITLE: Setting System Directories in rabbitmq-defaults Script\nDESCRIPTION: Updates the PREFIX variable to use system directories for configuration, logs, and data instead of directories relative to the installation directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-generic-unix.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSYS_PREFIX=\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Filter Values to RabbitMQ Stream in Java\nDESCRIPTION: Java code example showing how to publish messages to a stream with an associated filter value. The filter value is specified using the 'x-stream-filter-value' header, enabling server-side filtering capabilities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/streams.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(\n  \"\", // default exchange\n  \"my-stream\",\n  new AMQP.BasicProperties.Builder()\n    .headers(Collections.singletonMap(\n      \"x-stream-filter-value\", \"california\" // set filter value\n    ))\n    .build(),\n  body\n);\n```\n\n----------------------------------------\n\nTITLE: Joining a RabbitMQ Cluster as a RAM Node\nDESCRIPTION: Command to join an existing RabbitMQ cluster as a RAM node. The node must be stopped before running this command. RAM nodes replicate data only in memory and are mainly used for scalability purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl join_cluster hare@elena --ram\n```\n\n----------------------------------------\n\nTITLE: Suspending and Resuming RabbitMQ Listeners with rabbitmqctl\nDESCRIPTION: These commands demonstrate how to suspend and resume listeners on a specific RabbitMQ node using rabbitmqctl. Suspending listeners prevents new client connections, while resuming allows them again.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# suspends listeners on node rabbit@node2.cluster.rabbitmq.svc: it won't accept any new client connections\nrabbitmqctl suspend_listeners -n rabbit@node2.cluster.rabbitmq.svc\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl resume_listeners\n```\n\nLANGUAGE: bash\nCODE:\n```\n# resumes listeners on node rabbit@node2.cluster.rabbitmq.svc: it will accept new client connections again\nrabbitmqctl resume_listeners -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: LDAP Resource Access Query Configuration in Erlang\nDESCRIPTION: Complex LDAP query configuration that defines access permissions for exchange operations. Allows members of the 'wheel' group to configure exchanges while granting general read/write access to all users.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-02-07-who-are-you-authentication-and-authorisation-in-rabbitmq-231/index.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {for, [{resource, exchange,\n         {for, [{permission, configure,\n                 { in_group, \"cn=wheel,ou=groups,dc=example,dc=com\" } },\n                {permission, write, {constant, true}},\n                {permission, read,  {constant, true}}\n               ]}},\n        {resource, queue, {constant, true}} ]}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Classic Queue for Benchmarking\nDESCRIPTION: Command to declare a durable classic queue using rabbitmqadmin tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeps/rabbitmq_management/bin/rabbitmqadmin declare queue \\\n    name=my-classic-queue queue_type=classic durable=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Filtering in Go\nDESCRIPTION: Demonstrates how to set up stream filtering for a RabbitMQ consumer using the Go client library. It specifies filter values and sets the offset to the first message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_39\n\nLANGUAGE: Go\nCODE:\n```\nconsumer, err := connection.NewConsumer(context.Background(), qName, &\n        StreamConsumerOptions{\n            Offset:           &OffsetFirst{},\n            Filters:          []string{\"invoices\", \"order\"},\n        })\n```\n\n----------------------------------------\n\nTITLE: Checking Erlang Distribution Ports with epmd\nDESCRIPTION: Command to verify which ports are being used for inter-node and CLI tool communication in an Erlang-based RabbitMQ installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/windows-configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nepmd -names\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Filtering in C#\nDESCRIPTION: Shows how to set up stream filtering for a RabbitMQ consumer using the C# client library. It defines filter values and configures the consumer to match unfiltered messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nIConsumer consumer = await connection.ConsumerBuilder()\n    .Queue(\"some-stream\")\n    .Stream()\n    .FilterValues([\"invoices\", \"order\"]) \n    .FilterMatchUnfiltered(true) \n    .Builder()\n    .MessageHandler(async (context, message) => {\n            // message processing\n        }\n).BuildAndStartAsync();\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Exchange\nDESCRIPTION: Creates a binding between the temporary queue and the 'logs' exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-dotnet.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.QueueBind(queue: queueName,\n                  exchange: \"logs\",\n                  routingKey: \"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy with Exclusions for RabbitMQ Peer Discovery\nDESCRIPTION: Configuration for setting HTTP and HTTPS proxy servers with exclusions for specific hosts that should not be proxied, such as the link-local AWS instance metadata IP address.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_51\n\nLANGUAGE: ini\nCODE:\n```\n# example HTTP and HTTPS proxy servers, values in your environment\n# will vary\ncluster_formation.proxy.http_proxy = 192.168.0.98\ncluster_formation.proxy.https_proxy = 192.168.0.98\n\n# requests to these hosts won't go via proxy\ncluster_formation.proxy.proxy_exclusions.1 = 169.254.169.254\ncluster_formation.proxy.proxy_exclusions.2 = excluded.example.local\n```\n\n----------------------------------------\n\nTITLE: Enabling STOMP TLS Certificate Authentication\nDESCRIPTION: INI configuration to enable authentication using TLS client certificates for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nstomp.ssl_cert_login = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in RabbitMQ with trace_on Command\nDESCRIPTION: The trace_on command starts tracing for a specified virtual host. It accepts an optional -p parameter to specify the virtual host name. Note that the trace state is not persistent and will revert to off if the node is restarted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ntrace_on [-p vhost]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container Limits for RabbitMQ\nDESCRIPTION: Docker daemon configuration to set default ulimits for containers. This JSON configuration sets the nofile (number of open files) limit for all Docker containers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Client Implementation\nDESCRIPTION: Complete RPC client implementation that sends requests, handles responses using correlation IDs, and manages the callback queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\nvar args = process.argv.slice(2);\n\nif (args.length == 0) {\n  console.log(\"Usage: rpc_client.js num\");\n  process.exit(1);\n}\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    channel.assertQueue('', {\n      exclusive: true\n    }, function(error2, q) {\n      if (error2) {\n        throw error2;\n      }\n      var correlationId = generateUuid();\n      var num = parseInt(args[0]);\n\n      console.log(' [x] Requesting fib(%d)', num);\n\n      channel.consume(q.queue, function(msg) {\n        if (msg.properties.correlationId == correlationId) {\n          console.log(' [.] Got %s', msg.content.toString());\n          setTimeout(function() {\n            connection.close();\n            process.exit(0)\n          }, 500);\n        }\n      }, {\n        noAck: true\n      });\n\n      channel.sendToQueue('rpc_queue',\n        Buffer.from(num.toString()),{\n          correlationId: correlationId,\n          replyTo: q.queue });\n    });\n  });\n});\n\nfunction generateUuid() {\n  return Math.random().toString() +\n         Math.random().toString() +\n         Math.random().toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Example of escaped values in rabbitmq.conf\nDESCRIPTION: A configuration snippet showing how to escape values containing special characters (like #) using single quotes in the modern configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# this is a comment\ndefault_user = '40696e180b610ed9'\ndefault_pass = 'efd3!53a9@_2#a08'\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions After Node Boot\nDESCRIPTION: Shell script commands to import definitions immediately after node boot, waiting for the node to start up before importing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# await startup for up to 5 minutes\nrabbitmqctl await_startup --timeout 300\n\n# import definitions using rabbitmqctl\nrabbitmqctl import_definitions /path/to/definitions.file.json\n\n# OR, import using rabbitmqadmin\n# Requires management plugin to be enabled\nrabbitmqadmin import /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Monitoring Stack\nDESCRIPTION: Commands to clone the cluster-operator repository and run the quickstart script. Includes optional environment variables for Slack integration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-05-03-alerting/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/cluster-operator.git\n\n# Optionally, set the name of the Slack channel and the Slack Webhook URL\n# If you don't have a Slack Webhook URL, create one via https://api.slack.com/messaging/webhooks\n# export SLACK_CHANNEL='#my-channel'\n# export SLACK_API_URL='https://hooks.slack.com/services/paste/your/token'\n\n./cluster-operator/observability/quickstart.sh\n```\n\n----------------------------------------\n\nTITLE: AMQP 0.9.1 Queue Declarations\nDESCRIPTION: Examples of declaring queues and bindings in AMQP 0.9.1 source configuration using declarations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n  {declarations, [\n    %% declaration list\n  ]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n  {declarations, [\n                   'queue.declare',\n                   {'queue.bind', [\n                                    {exchange, <<\"my_exchange\">>},\n                                    {queue,    <<>>}\n                                  ]}\n                 ]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{'exchange.declare', [\n                      {exchange, <<\"my_exchange\">>},\n                      {type, <<\"direct\">>},\n                      durable\n                     ]}\n```\n\n----------------------------------------\n\nTITLE: Example Queue Status YAML\nDESCRIPTION: This YAML snippet shows an example of a queue status, including its API version, kind, metadata, and status conditions. It demonstrates how to interpret the 'Ready' condition and its associated reason.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-topology-operator.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: my-queue\n  namespace: rabbitmq-system\nspec:\n  ...\nstatus:\n  conditions:\n  - lastTransitionTime: \"\"\n    status: \"True\" #  could be true, false, or unknown; false means the last reconciliation has failed\n    type: Ready\n    Reason: \"SuccessfulCreateOrUpdate\" # status false result in reason FailedCreateOrUpdate\n    Message: \"\" # set with error message when status is false\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT Plugin to RabbitMQ Plugins Directory\nDESCRIPTION: Command to copy the downloaded MQTT plugin to RabbitMQ's plugins directory on a Debian-based system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-09-12-mqtt-adapter/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp rabbitmq_mqtt-2.8.6.ez /usr/lib/rabbitmq/lib/rabbitmq_server-2.8.6/plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Recovery Interval in RabbitMQ .NET Client\nDESCRIPTION: Shows how to configure the interval between recovery attempts when connection recovery fails. The default interval is 5 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\n// attempt recovery every 10 seconds\nfactory.NetworkRecoveryInterval = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection to RabbitMQ Server in Rust\nDESCRIPTION: This code creates a connection to the RabbitMQ server using the Environment builder from the stream client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse rabbitmq_stream_client::Environment;\nlet environment = Environment::builder().build().await?;\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection to RabbitMQ Server in Rust\nDESCRIPTION: This code creates a connection to the RabbitMQ server using the Environment builder from the stream client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-rust-stream.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse rabbitmq_stream_client::Environment;\nlet environment = Environment::builder().build().await?;\n```\n\n----------------------------------------\n\nTITLE: Declaring RabbitmqCluster with Allowed Namespaces in YAML\nDESCRIPTION: This YAML snippet declares a RabbitmqCluster object that allows topology objects from the 'my-app' namespace. It specifies the cluster name, namespace, and uses an annotation to set the allowed namespaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: example-rabbit\n  namespace: rabbitmq-service\n  annotations:\n    rabbitmq.com/topology-allowed-namespaces: \"my-app\"\nspec:\n  replicas: 1\n```\n\n----------------------------------------\n\nTITLE: Advanced HTTPS Configuration for RabbitMQ Management Plugin in INI Format\nDESCRIPTION: This snippet shows a more comprehensive HTTPS configuration for the RabbitMQ Management plugin, including TLS versions, cipher suites, and other security-related options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.ssl.port       = 15671\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n## This key must only be used if private key is password protected\n# management.ssl.password   = bunnies\n\nmanagement.ssl.honor_cipher_order   = true\nmanagement.ssl.honor_ecc_order      = true\nmanagement.ssl.client_renegotiation = false\nmanagement.ssl.secure_renegotiate   = true\n\nmanagement.ssl.versions.1 = tlsv1.2\nmanagement.ssl.versions.2 = tlsv1.1\n\nmanagement.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\nmanagement.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\nmanagement.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\nmanagement.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\nmanagement.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\nmanagement.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n\n## Usually RabbitMQ nodes do not perform peer verification of HTTP API clients\n## but it can be enabled if needed. Clients then will have to be configured with\n## a certificate and private key pair.\n##\n## See ./ssl#peer-verification for details.\n# management.ssl.verify = verify_peer\n# management.ssl.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Inspecting Node Memory Breakdown with RabbitMQ CLI\nDESCRIPTION: These commands demonstrate how to inspect a node's memory breakdown using the rabbitmqadmin CLI tool. They show memory usage in bytes and percentages for a specific node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# displays a breakdown in bytes\nrabbitmqadmin show memory_breakdown_in_bytes --node 'rabbit@hostname'\n```\n\nLANGUAGE: shell\nCODE:\n```\n# displays a breakdown in percent\nrabbitmqadmin show memory_breakdown_in_percent --node 'rabbit@hostname'\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Operations in Erlang\nDESCRIPTION: Demonstrates basic boolean query operations (not, and, or) used to combine subqueries with boolean logic in LDAP authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_37\n\nLANGUAGE: erlang\nCODE:\n```\n{'not', SubQuery}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{'and', [SubQuery1, SubQuery2, SubQuery3, ...]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{'or', [SubQuery1, SubQuery2, SubQuery3, ...]}\n```\n\n----------------------------------------\n\nTITLE: Sample Auth0 Access Token for RabbitMQ\nDESCRIPTION: Example of an access token issued by Auth0 for RabbitMQ authentication. It includes claims for scope, permissions, and other standard JWT fields.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-auth0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"iss\": \"https://dev-tm5ebsbbdcbqddcj.us.auth0.com/\",\n  \"sub\": \"auth0|66d980b862efcd9f5144f42a\",\n  \"aud\": [\n    \"rabbitmq\",\n    \"https://dev-tm5ebsbbdcbqddcj.us.auth0.com/userinfo\"\n  ],\n  \"iat\": 1725533554,\n  \"exp\": 1725619954,\n  \"scope\": \"openid profile rabbitmq.tag:administrator\",\n  \"azp\": \"IC1fqsSjkQq2cVsYyHUuQyq30OAYuUv2\",\n  \"permissions\": [\n    \"rabbitmq.configure:*/*\",\n    \"rabbitmq.read:*/*\",\n    \"rabbitmq.tag:administrator\",\n    \"rabbitmq.write:*/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Predeclared Topology in RabbitMQ Shovel Plugin Using INI Format\nDESCRIPTION: Configuration setting that informs the Shovel plugin to wait until the queue is available rather than declaring it. This is useful in scenarios where topology is imported from a definitions file at boot time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nshovel.topology.predeclared = true\n```\n\n----------------------------------------\n\nTITLE: Creating Passwordless User Commands\nDESCRIPTION: CLI commands for creating a passwordless user by first adding with a temporary password and then clearing it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/passwords.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_user passwordless-user \"pa$$wordless\"\nrabbitmqctl clear_password passwordless-user\n```\n\n----------------------------------------\n\nTITLE: Calling RPC Client in PHP\nDESCRIPTION: Example of how to use the FibonacciRpcClient class to make an RPC call and receive the response. This snippet demonstrates the basic usage of the RPC client interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-php.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$fibonacci_rpc = new FibonacciRpcClient();\n$response = $fibonacci_rpc->call(30);\necho ' [.] Got ', $response, \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Stream Plugin\nDESCRIPTION: This command enables the RabbitMQ stream plugin in the running Docker container, which is required for stream operations including filtering.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Limit from a Virtual Host\nDESCRIPTION: Command to remove the maximum connection limit from a RabbitMQ virtual host by setting it to a negative value using the rabbitmqctl set_vhost_limits command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-connections\": -1}'\n```\n\n----------------------------------------\n\nTITLE: Complete RPC Client Implementation in C#\nDESCRIPTION: Full implementation of RPC client including connection management, request sending, and response handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Concurrent;\nusing System.Text;\nusing System.Threading.Tasks;\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\n\npublic class RpcClient : IDisposable\n{\n    private const string QUEUE_NAME = \"rpc_queue\";\n\n    private readonly IConnection _connection;\n    private readonly IModel _channel;\n    private readonly string _replyQueueName;\n    private readonly ConcurrentDictionary<string, TaskCompletionSource<int>> _callbackMapper = new();\n\n    public RpcClient()\n    {\n        var factory = new ConnectionFactory { HostName = \"localhost\" };\n\n        _connection = factory.CreateConnection();\n        _channel = _connection.CreateModel();\n        _replyQueueName = _channel.QueueDeclare().QueueName;\n        var consumer = new EventingBasicConsumer(_channel);\n        consumer.Received += (model, ea) =>\n        {\n            if (!_callbackMapper.TryRemove(ea.BasicProperties.CorrelationId, out TaskCompletionSource<int> tcs))\n                return;\n            var body = ea.Body.ToArray();\n            var response = Encoding.UTF8.GetString(body);\n            if (!int.TryParse(response, out int n))\n                tcs.TrySetException(new InvalidOperationException(\"Invalid response\"));\n            else\n                tcs.TrySetResult(n);\n        };\n\n        _channel.BasicConsume(\n            consumer: consumer,\n            queue: _replyQueueName,\n            autoAck: true);\n    }\n\n    public Task<int> CallAsync(int n)\n    {\n        var tcs = new TaskCompletionSource<int>();\n        var correlationId = Guid.NewGuid().ToString();\n        _callbackMapper.TryAdd(correlationId, tcs);\n        PublishMessage(n, correlationId);\n        return tcs.Task;\n    }\n\n    private void PublishMessage(int n, string correlationId)\n    {\n        var props = _channel.CreateBasicProperties();\n        props.CorrelationId = correlationId;\n        props.ReplyTo = _replyQueueName;\n\n        var messageBytes = Encoding.UTF8.GetBytes(n.ToString());\n        _channel.BasicPublish(\n            exchange: \"\",\n            routingKey: QUEUE_NAME,\n            basicProperties: props,\n            body: messageBytes);\n    }\n\n    public void Dispose()\n    {\n        _connection?.Dispose();\n        _channel?.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ .NET Client on Linux and MacOS\nDESCRIPTION: Bash command to build the RabbitMQ .NET client on Linux and MacOS using .NET Core 2. This performs code generation and builds a release version of the library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-dotnet-client.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring 1GB Preallocated Memory Area for RabbitMQ\nDESCRIPTION: Setting up a 1GB preallocated memory area to reduce allocation rate and memory fragmentation for certain workloads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+MMscs 1024\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Built-in Type in Java\nDESCRIPTION: Demonstrates how to create an exchange of a built-in type (fanout) using the Java client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nmanagement.exchange()\n    .name(\"my-exchange\")\n    .type(Management.ExchangeType.FANOUT) // enum for built-in type\n    .declare();\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Console Encoding for CLI Tools\nDESCRIPTION: Command to change the Windows console code page to UTF-8 (65001), which ensures proper handling of non-ASCII characters in RabbitMQ CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nchcp 65001\n```\n\n----------------------------------------\n\nTITLE: Getting the Management Object in Java\nDESCRIPTION: Shows how to obtain the management object from a RabbitMQ connection using the Java client library. This object is used for topology management operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nManagement management = connection.management();\n// ...\n// close the management instance when it is no longer needed\nmanagement.close();\n```\n\n----------------------------------------\n\nTITLE: Error Message for Excessive Channel Negotiation\nDESCRIPTION: Displays an error message when a client attempts to negotiate a channel maximum higher than the server's configured limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n2019-02-11 16:03:16.543 [error] <0.882.0> closing AMQP connection <0.882.0> (127.0.0.1:49911 -> 127.0.0.1:5672):\nfailed to negotiate connection parameters: negotiated channel_max = 2047 is higher than the maximum allowed value (32)\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Configuration with IAM Policy\nDESCRIPTION: Example AWS configuration with access credentials and corresponding IAM policy JSON for EC2 instance access\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n              {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                         \"autoscaling:DescribeAutoScalingInstances\",\n                         \"ec2:DescribeInstances\"\n                         ],\n              \"Resource\": [\n                           \"*\"\n                           ]\n              }\n              ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Topic Exchange in RabbitMQ STOMP\nDESCRIPTION: Configuration setting to specify a different default exchange than 'amq.topic' for STOMP topic destinations. This allows customizing where messages for topic destinations are routed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_topic_exchange = some.exchange\n```\n\n----------------------------------------\n\nTITLE: Setting Raft Segment Entry Count for Small Messages\nDESCRIPTION: Configures the number of Raft log entries allowed in a segment file, optimized for small message workloads. Maximum allowed value is 65535.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/quorum-queues/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nraft.segment_max_entries = 32768\n```\n\n----------------------------------------\n\nTITLE: Verifying APT Package Pinning Policy\nDESCRIPTION: Displays the effective package pinning policy for APT.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-cache policy\n```\n\n----------------------------------------\n\nTITLE: Declaring Direct Exchange in RabbitMQ\nDESCRIPTION: Creating a direct exchange for routing log messages based on severity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.ExchangeDeclareAsync(exchange: \"direct_logs\", type: ExchangeType.Direct);\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Index Journal Entries in RabbitMQ (Erlang)\nDESCRIPTION: Sets the maximum number of queue index journal entries before flushing to disk in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_56\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n{queue_index_max_journal_entries, 32768}\n]}\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Broker with Custom Node Name\nDESCRIPTION: Command to build and start a RabbitMQ broker instance with a specified Erlang node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/build-server.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker RABBITMQ_NODENAME=rmq\n```\n\n----------------------------------------\n\nTITLE: Example of In Group Query for vhost Access in RabbitMQ LDAP\nDESCRIPTION: Example configuration that grants virtual host access to users who are listed as members of an appropriately named group in the LDAP directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_22\n\nLANGUAGE: erlang\nCODE:\n```\n{vhost_access_query, {in_group, \"cn=${vhost}-users,ou=vhosts,dc=example,dc=com\"}}\n```\n\n----------------------------------------\n\nTITLE: Switching from New Federation to Old Federation in RabbitMQ 3.0\nDESCRIPTION: These commands disable the new federation plugin and enable the backwards-compatible old federation plugin. This allows users to maintain their existing federation setups while migrating to the new policy-based federation configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-11-19-breaking-things-with-rabbitmq-3-0/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmq-plugins disable rabbitmq_federation\n\nrabbitmq-plugins enable rabbitmq_old_federation\n```\n\n----------------------------------------\n\nTITLE: Starting OpenSSL s_server for TLS Testing\nDESCRIPTION: Command to start an OpenSSL s_server instance using provided certificates and keys for TLS connection testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server -accept 8443 \\\n  -cert server_certificate.pem -key server_key.pem -CAfile ca_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Setting STOMP Frame Size Limit\nDESCRIPTION: INI configuration to set the maximum frame size for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nstomp.max_frame_size = 4 * 1024 * 1024\n```\n\n----------------------------------------\n\nTITLE: Sample Node Name Format in RabbitMQ Clustering\nDESCRIPTION: Demonstrates the format of RabbitMQ node names, which consist of a prefix and hostname. For example, 'rabbit@node1.messaging.svc.local' uses 'rabbit' as the prefix and 'node1.messaging.svc.local' as the hostname.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrabbit@node1.messaging.svc.local\n```\n\n----------------------------------------\n\nTITLE: Referencing Optional Arguments in Markdown\nDESCRIPTION: This snippet demonstrates how to reference optional arguments (x-arguments) in Markdown format. It's used to explain that optional arguments are a map of key/value pairs provided by clients when declaring a queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/exchanges.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Optional Arguments {#optional-arguments}\n```\n\n----------------------------------------\n\nTITLE: Referencing RabbitMQ Web STOMP Plugin\nDESCRIPTION: Code reference showing how the rabbitmq_web_stomp plugin exposes STOMP over WebSockets.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nrabbitmq_web_stomp\n```\n\n----------------------------------------\n\nTITLE: Match Query Pattern\nDESCRIPTION: Pattern for regular expression matching in LDAP queries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_31\n\nLANGUAGE: erlang\nCODE:\n```\n{match, StringSubQuery, RESubQuery}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for RabbitMQ Stream Consumer in Python\nDESCRIPTION: This code snippet shows the necessary imports for creating a RabbitMQ stream consumer using the rstream library in Python.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport signal\n\nfrom rstream import (\n    AMQPMessage,\n    Consumer,\n    MessageContext,\n    ConsumerOffsetSpecification,\n    OffsetType\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Plugin Directories in Windows\nDESCRIPTION: Example of configuring multiple plugin directories in rabbitmq-env-conf.bat file using semicolon-separated paths on Windows systems with PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Example rabbitmq-env-conf.bat file that features a colon-separated list of plugin directories\nPLUGINS_DIR=\"C:\\Example\\RabbitMQ\\plugins;C:\\Example\\RabbitMQ\\rabbitmq_server-3.11.6\\plugins\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLSv1.3 Cipher Suites in RabbitMQ\nDESCRIPTION: Configuration example showing the TLSv1.3-specific cipher suites that must be explicitly configured when using TLSv1.3, as it shares no cipher suites with earlier TLS versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n# There are no cipher suites supported by both TLSv1.3 and TLSv1.2.\nssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\nssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\nssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\nssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\nssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug pprof for RabbitMQ Cluster Operator\nDESCRIPTION: Command to enable debug profiling on the RabbitMQ Cluster Operator by setting the ENABLE_DEBUG_PPROF environment variable to True. This enables profiling capabilities on the operator pod.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/debug-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl -n rabbitmq-system set env deployment/rabbitmq-cluster-operator ENABLE_DEBUG_PPROF=True\ndeployment.apps/rabbitmq-cluster-operator env updated\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumer Groups in RabbitMQ\nDESCRIPTION: Command to list stream consumer groups showing stream name, reference, and number of consumers. Can be customized to show different information items including consumers count, partition index, reference name, and stream name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumer_groups stream reference consumers\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumer Groups in RabbitMQ\nDESCRIPTION: Command to list stream consumer groups showing stream name, reference, and number of consumers. Can be customized to show different information items including consumers count, partition index, reference name, and stream name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumer_groups stream reference consumers\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Version Compatibility Table in HTML\nDESCRIPTION: This HTML snippet presents a table showing RabbitMQ versions, their compatible Erlang/OTP versions, and support status notes. It covers versions from 3.4.x to 3.7.27, including end-of-life information for each major release.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/which-erlang.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr>\n    <td>\n      <ul>\n        <li>3.7.27</li>\n        <li>3.7.26</li>\n        <li>3.7.25</li>\n        <li>3.7.24</li>\n        <li>3.7.23</li>\n        <li>3.7.22</li>\n        <li>3.7.21</li>\n        <li>3.7.20</li>\n        <li>3.7.19</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li>21.3</li>\n      </ul>\n    </td>\n    <td>\n      <ul>\n        <li>22.x</li>\n      </ul>\n    </td>\n    <td>\n      <ul class=\"notes\">\n        <li>RabbitMQ 3.7 was released on 2017-11-28, and reached end of life on 2020-09-30, we strongly discourage its use</li>\n      </ul>\n    </td>\n  </tr>\n  <!-- More table rows omitted for brevity -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Message Properties for AMQP 0-9-1 Destination in RabbitMQ Shovel\nDESCRIPTION: Optional configuration that allows setting or overriding specific message properties when republishing messages through a Shovel. This example sets the delivery mode to persistent (2).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\n{publish_properties, [\n  {delivery_mode, 2}\n]}\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Node Status in Bash\nDESCRIPTION: Demonstrates how to check the status of a RabbitMQ node using the rabbitmq-diagnostics tool, with an optional node specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics  status\n\nrabbitmq-diagnostics  status --node rabbit@target-hostname.local\n```\n\n----------------------------------------\n\nTITLE: Basic RPC Request Implementation in JavaScript\nDESCRIPTION: Example showing basic RPC request setup with callback queue and message properties.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.assertQueue('', {\n  exclusive: true\n});\n\nchannel.sendToQueue('rpc_queue', Buffer.from('10'), {\n   replyTo: queue_name\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Random Filter Values using Stream PerfTest\nDESCRIPTION: This command publishes messages with random filter values between 1 and 50 for 10 seconds. Each message is 10KB in size and the publishing rate is 100 messages per second.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar stream-perf-test.jar --producers 1 --consumers 0 --rate 100 --filter-value-set 1..50 --size 10000 --time 10\n```\n\n----------------------------------------\n\nTITLE: Consul Custom Port Configuration\nDESCRIPTION: Configuration for overriding the default Consul service port (5672).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n# 5672 is used by default\ncluster_formation.consul.svc_port = 6674\n```\n\n----------------------------------------\n\nTITLE: Setting STOMP Frame Size Limit\nDESCRIPTION: INI configuration to set the maximum frame size for STOMP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nstomp.max_frame_size = 4 * 1024 * 1024\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection URIs for RabbitMQ Shovel Destination\nDESCRIPTION: Defines a list of AMQP connection URIs that the Shovel will use to connect to destination brokers. Multiple URIs provide fallback options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n{uris, [\n        \"amqp://fred:secret@host1.domain/my_vhost\",\n        \"amqp://john:secret@host2.domain/my_vhost\"\n       ]}\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ PerfTest\nDESCRIPTION: Commands to download and run RabbitMQ PerfTest, which creates a producer publishing messages to a stream queue for performance testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget -O perf-test https://github.com/rabbitmq/rabbitmq-perf-test/releases/download/v2.17.0/perf-test_linux_x86_64\nchmod +x perf-test\n./perf-test --queue my-stream --queue-args x-queue-type=stream --auto-delete false --flag persistent \\\n            --producers 1 --confirm 2000 --consumers 0 --time 60\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Host Connection Limits\nDESCRIPTION: Commands to set and manage connection limits for a virtual host\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-connections\": 256}'\n```\n\n----------------------------------------\n\nTITLE: Unbinding a Queue from an Exchange in Erlang\nDESCRIPTION: Shows how to remove a binding between a queue and an exchange using the #'queue.unbind'{} record and amqp_channel:call/2 function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\nBinding = #'queue.unbind'{queue       = Queue,\n                          exchange    = Exchange,\n                          routing_key = RoutingKey},\n#'queue.unbind_ok'{} = amqp_channel:call(Channel, Binding)\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ Java Client with Maven\nDESCRIPTION: Maven command to build the RabbitMQ Java client from source. This command navigates to the project directory and uses the Maven wrapper to compile and package the client library while skipping tests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-java-client.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rabbitmq-java-client\n\n./mvnw clean package -Ddeps.dir=../ -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Deleting an Exchange in Python\nDESCRIPTION: Illustrates how to delete an exchange using the Python client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\nexchange_name = \"my-exchange\"\nmanagement.delete_exchange(exchange_name)\n```\n\n----------------------------------------\n\nTITLE: Checking Unacknowledged Messages in RabbitMQ Using CLI\nDESCRIPTION: These commands show how to use rabbitmqctl to debug unacknowledged message issues by listing queues and their unacknowledged message counts. The first command is for Unix/Linux systems, while the second is for Windows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Endpoint\nDESCRIPTION: Configuration for Kubernetes API host, port and scheme settings for RabbitMQ peer discovery\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n# 443 is used by default\ncluster_formation.k8s.port = 443\n# https is used by default\ncluster_formation.k8s.scheme = https\n```\n\n----------------------------------------\n\nTITLE: WebSocket Options Configuration for Web MQTT\nDESCRIPTION: Configuration options specific to WebSocket connections in the Web MQTT plugin, including compression, timeout, and frame size settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-mqtt.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# WebSocket traffic compression is enabled by default\\nweb_mqtt.ws_opts.compress = true\\n\\n# WebSocket connection inactivity timeout\\nweb_mqtt.ws_opts.idle_timeout = 60000\\n\\nweb_mqtt.ws_opts.max_frame_size = 50000\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Breakdown\nDESCRIPTION: Command to display node's memory usage by category with configurable memory units (bytes, megabytes, gigabytes, terabytes).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics memory_breakdown --unit gigabytes\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository for Ubuntu 20.04\nDESCRIPTION: This bash script adds the RabbitMQ and Erlang package repositories to the apt sources list for Ubuntu 20.04 (Focal). It includes both primary and redundant mirror URLs for improved availability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu focal main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu focal main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu focal main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu focal main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu focal main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu focal main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu focal main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu focal main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running Consumer to Display All Logs in Bash\nDESCRIPTION: Command to run the consumer script to display all log messages (info, warning, error) on the console.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-elixir.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs_direct.exs --info --warning --error\n# => [*] Waiting for logs. To exit press CTRL+C, CTRL+C\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ CLI Commands in PowerShell\nDESCRIPTION: Commands to explore available CLI tools in RabbitMQ. These examples show how to list all commands provided by various RabbitMQ CLI utilities.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n# lists commands provided by rabbitmqctl.bat\nrabbitmqctl.bat help\n\n# lists commands provided by rabbitmq-diagnostics.bat\nrabbitmq-diagnostics.bat help\n\n# ...you guessed it!\nrabbitmq-plugins.bat help\n```\n\n----------------------------------------\n\nTITLE: Adding Stream Replica in RabbitMQ\nDESCRIPTION: Command to add a stream replica on a specified node within a virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams add_replica --vhost \"a-vhost\" \"a-queue\" \"rabbit@new-node\"\n```\n\n----------------------------------------\n\nTITLE: Referencing RabbitMQ Management Plugin\nDESCRIPTION: Code reference showing how to mention the rabbitmq_management plugin in documentation context.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/plugins.md#2025-04-09_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nrabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Defining AMQP URI Syntax with ABNF\nDESCRIPTION: Defines the formal syntax for AMQP URIs using Augmented Backus-Naur Form (ABNF). The syntax specifies how to format connection parameters including authority, userinfo, username, password, and virtual host components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/uri-spec.md#2025-04-09_snippet_0\n\nLANGUAGE: abnf\nCODE:\n```\namqp_URI       = \"amqp://\" amqp_authority [ \"/\" vhost ] [ \"?\" query ]\n\namqp_authority = [ amqp_userinfo \"@\" ] host [ \":\" port ]\n\namqp_userinfo  = username [ \":\" password ]\n\nusername       = *( unreserved / pct-encoded / sub-delims )\n\npassword       = *( unreserved / pct-encoded / sub-delims )\n\nvhost          = segment\n```\n\n----------------------------------------\n\nTITLE: HTML Table Comparing Federation/Shovel vs Clustering\nDESCRIPTION: A structured comparison table highlighting the key differences between Federation/Shovel and Clustering approaches in RabbitMQ distributed systems. The table covers aspects like logical separation, version compatibility, network requirements, topology, CAP theorem characteristics, and client connection behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/distributed.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Federation and/or Shovel</th>\n    <th>Clustering</th>\n  </tr>\n  <tr>\n    <td>\n      Brokers are logically separate and may have different owners.\n    </td>\n    <td>\n      A cluster forms a single logical broker.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Brokers can run different (and incompatible in certain ways) versions of RabbitMQ and Erlang.\n    </td>\n    <td>\n      Nodes must run compatible versions of RabbitMQ and Erlang.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Brokers can be connected via unreliable WAN\n      links. Communication is via AMQP 0-9-1 (optionally secured by\n      <a href=\"./ssl\">TLS</a>), requiring appropriate users and permissions to be set up.\n    </td>\n    <td>\n      Brokers must be connected via reasonably reliable LAN\n      links. Nodes will authenticate to each other using a shared secret\n      and optionally <a href=\"./clustering-ssl\">use TLS-enabled links</a>.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Brokers can be connected in whatever topology you\n      arrange. Links can be one- or two-way.\n    </td>\n    <td>\n      All nodes connect to all other nodes in both directions.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Emphasizes Availability and Partition Tolerance (AP) from\n      the <a href=\"http://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a>.\n    </td>\n    <td>\n      Emphasizes Consistency and Partition Tolerance (CP)\n      from the <a href=\"http://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a>.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Some exchanges in a broker may be federated while some may be local.\n    </td>\n    <td>\n      Clustering is all-or-nothing.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      A client connecting to any broker can only use non-exclusive queues in that broker.\n    </td>\n    <td>\n      A client connecting to any node can use non-exclusive queues on all nodes.\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Message Count Details in RabbitMQ API\nDESCRIPTION: Example JSON response showing message count details for a queue, including average, rate, and sample data.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": 123619,\n\"messages_details\": {\n  \"avg\": 41206.333333333336,\n  \"avg_rate\": 1030.1583333333333,\n  \"rate\": 24723.8,\n  \"samples\": [\n    {\n      \"sample\": 123619,\n      \"timestamp\": 1400680560000\n    },\n    {\n      \"sample\": 0,\n      \"timestamp\": 1400680500000\n    },\n    {\n      \"sample\": 0,\n      \"timestamp\": 1400680440000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SASL authentication options for AMQP 1.0 Shovel\nDESCRIPTION: The different SASL authentication options available for AMQP 1.0 Shovel connections: anon, none, and plain.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nanon\n```\n\nLANGUAGE: text\nCODE:\n```\nnone\n```\n\nLANGUAGE: text\nCODE:\n```\nplain\n```\n\n----------------------------------------\n\nTITLE: Building the RabbitMQ Erlang Client\nDESCRIPTION: Commands to navigate to the cloned repository directory and build the client using make.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-erlang-client.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rabbitmq-erlang-client\nmake\n```\n\n----------------------------------------\n\nTITLE: systemd epmd Service Reload Commands\nDESCRIPTION: Commands to reload and restart epmd service after configuration changes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl restart epmd.socket epmd.service\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message with Severity Routing Key in Swift RabbitMQ Client\nDESCRIPTION: Publishing a message to a direct exchange using the message severity as the routing key. This enables consumers to filter messages based on severity level.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet x = ch.direct(\"logs\")\nx.publish(msg.data(using: .utf8), routingKey: severity)\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL Policy for Queues using rabbitmqctl on Windows\nDESCRIPTION: This command sets a policy that applies a 60-second TTL to all queues using rabbitmqctl on Windows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ttl.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" \"{\"\"message-ttl\"\":60000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Listing Queue Mirror Status in RabbitMQ\nDESCRIPTION: Command to list queues with their mirror and synchronization status information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n rabbit@to-be-stopped list_queues --local name mirror_pids synchronised_mirror_pids\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat -n rabbit@to-be-stopped list_queues --local name mirror_pids synchronised_mirror_pids\n```\n\n----------------------------------------\n\nTITLE: Checking Stream Status in RabbitMQ using Bash\nDESCRIPTION: This command displays the status of a specified stream within a given virtual host. It requires the stream name and virtual host to be provided.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams stream_status --vhost \"a-vhost\" \"a-stream\"\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Properties Configuration\nDESCRIPTION: Configuration for setting additional properties when republishing messages in AMQP 1.0.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{properties, [\n  {content_typle, <<\"application/json\">>}\n]}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with OAuth Configuration (Bash)\nDESCRIPTION: Command to start RabbitMQ configured to use UAA as its authorization server for OAuth authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Binding a Queue to an Exchange in Erlang\nDESCRIPTION: Demonstrates how to create a binding between a queue and an exchange using the #'queue.bind'{} record and amqp_channel:call/2 function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_12\n\nLANGUAGE: erlang\nCODE:\n```\nBinding = #'queue.bind'{queue       = Queue,\n                        exchange    = Exchange,\n                        routing_key = RoutingKey},\n#'queue.bind_ok'{} = amqp_channel:call(Channel, Binding)\n```\n\n----------------------------------------\n\nTITLE: Running Stream PerfTest with Load Balancer (Docker)\nDESCRIPTION: This command demonstrates how to run the RabbitMQ stream performance test tool using Docker, configured to always use a load balancer as the entry point.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-23-connecting-to-streams/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm pivotalrabbitmq/stream-perf-test --uris rabbitmq-stream://my-load-balancer:5552 --load-balancer\n```\n\n----------------------------------------\n\nTITLE: In Nested Group Query Examples for RabbitMQ LDAP Authorization\nDESCRIPTION: Shows nested group membership checking with configurable scope and attribute name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_35\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern, AttributeName}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern, AttributeName, Scope}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {group_lookup_base, \"ou=groups,dc=example,dc=com\"},\n  {vhost_access_query, {in_group_nested, \"cn=${vhost}-groups,ou=groups,dc=example,dc=com\", \"member\", single_level}}\n]\n```\n\n----------------------------------------\n\nTITLE: Clearing User Permissions in a RabbitMQ Virtual Host\nDESCRIPTION: Command to revoke a user's permissions for a specific virtual host. After running this command, the user will no longer have access to the specified virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_permissions -p my-vhost janeway\n```\n\n----------------------------------------\n\nTITLE: Displaying IPv6 TCP Listening Sockets with ss\nDESCRIPTION: Uses ss to display listening TCP sockets that use IPv6 and their associated OS processes. Shows listening state sockets with numeric output rather than resolving service names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nsudo ss --tcp -f inet6 --listening --numeric --processes\n```\n\n----------------------------------------\n\nTITLE: Forcing a RabbitMQ Node to Boot\nDESCRIPTION: Ensures that a RabbitMQ node will start on the next attempt, even if it was not the last to shut down. Used in recovery scenarios when normal cluster startup order cannot be maintained.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl force_boot\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Publishing with Puka\nDESCRIPTION: This example demonstrates asynchronous message publishing to a queue using Puka. The message is sent without waiting for confirmation from the broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-07-08-puka-rethinking-amqp-clients/index.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.basic_publish(exchange='', routing_key='test',\n                     body=\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Running RPC Server and Client in Bash\nDESCRIPTION: These commands demonstrate how to run the RPC server and client from the command line. The server is started first, followed by the client which requests the 30th Fibonacci number.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-python.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython rpc_server.py\n# => [x] Awaiting RPC requests\n```\n\nLANGUAGE: bash\nCODE:\n```\npython rpc_client.py\n# => [x] Requesting fib(30)\n```\n\n----------------------------------------\n\nTITLE: Creating Queue with Arguments in RabbitMQ\nDESCRIPTION: Shows how to create a queue with specific arguments like message TTL and max length bytes. Demonstrates setting queue type and other optional parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nmanagement.queue()\n    .name(\"my-queue\")\n    .type(Management.QueueType.CLASSIC)\n    .messageTtl(Duration.ofMinutes(10))\n    .maxLengthBytes(ByteCapacity.MB(100))\n    .declare();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIQueueSpecification queueSpec = management\n    .Queue(\"my-queue\")\n    .Type(QueueType.CLASSIC)\n    .MessageTtl(TimeSpan.FromMinutes(10))\n    .MaxLengthBytes(ByteCapacity.Mb(100));\nawait queueSpec.DeclareAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nmanagement.declare_queue(ClassicQueueSpecification(name=\"my-queue\", message_ttl=timedelta(minutes=10), max_len_bytes=100000000))\n```\n\nLANGUAGE: go\nCODE:\n```\nqueueInfo, err := management.DeclareQueue(context.TODO(), &ClassicQueueSpecification{\n            Name:           \"my-queue\",\n            MaxPriority:    32,\n            MaxLengthBytes: CapacityGB(1),\n            IsAutoDelete:   false,\n    })\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ PerfTest for Publish Rate Peak Scenario\nDESCRIPTION: This bash command runs the RabbitMQ PerfTest tool to simulate a publish rate peak scenario. It configures various parameters such as connection details, test duration, message persistence, queue properties, and variable publish rates over time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-06-22-cluster-sizing-case-study-quorum-queues-part-2/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/runjava com.rabbitmq.perf.PerfTest \\\n-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \\\n-z 1800 \\\n-f persistent \\\n-q 1000 \\\n-ct -1 \\\n-ad false \\\n-c 1000 \\\n--size 1024 \\\n--queue-pattern 'perf-test-%d' \\\n--queue-pattern-from 1 \\\n--queue-pattern-to 100 \\\n-qa auto-delete=false,durable=false,x-queue-type=quorum \\\n--producers 200 \\\n--consumers 200 \\\n--producer-random-start-delay 30 \\\n--consumer-latency 10000 \\\n-vr 100:300 \\\n-vr 102:60 -vr 104:60 -vr 106:60 -vr 108:60 -vr 110:60 -vr 112:60 -vr 114:60 -vr 116:60 -vr 118:60 -vr 120:60 \\\n-vr 122:60 -vr 124:60 -vr 126:60 -vr 128:60 -vr 130:60 -vr 132:60 -vr 134:60 -vr 136:60 -vr 138:60 -vr 140:60 \\\n-vr 142:60 -vr 144:60 -vr 146:60 -vr 148:60 -vr 150:60 \\\n-vr 148:60 -vr 146:60 -vr 144:60 -vr 142:60 -vr 140:60 -vr 138:60 -vr 136:60 -vr 134:60 -vr 132:60 -vr 130:60 \\\n-vr 128:60 -vr 126:60 -vr 124:60 -vr 122:60 -vr 120:60 -vr 118:60 -vr 116:60 -vr 114:60 -vr 112:60 -vr 110:60 \\\n-vr 108:60 -vr 106:60 -vr 104:60 -vr 102:60 -vr 100:60 \\\n-vr 100:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod Address Type\nDESCRIPTION: Configuration for specifying whether to use hostnames or IP addresses for peer node pods\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.cert_path = /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n\n# should result set use hostnames or IP addresses\n# of Kubernetes API-reported containers?\n# supported values are \"hostname\" and \"ip\"\ncluster_formation.k8s.address_type = hostname\n```\n\n----------------------------------------\n\nTITLE: Prefetch Count Configuration\nDESCRIPTION: Demonstrates setting the prefetch count for unacknowledged messages in a shovel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n{prefetch_count, 1000}\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ Metronome Plugin\nDESCRIPTION: Basic command to build the plugin using make.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding Erlang Repository for Ubuntu 24.04\nDESCRIPTION: This snippet shows how to add the Launchpad PPA repository for Erlang packages produced by the RabbitMQ team on Ubuntu 24.04 (Noble). It specifies the repository URL, architecture, and signing key location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# This Launchpad PPA repository provides Erlang packages produced by the RabbitMQ team\n#\n# Replace $distribution with the name of the Ubuntu release used\ndeb [arch=amd64 signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu noble main\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic-based Log Receiver in C#\nDESCRIPTION: This code snippet shows how to create a log receiver that uses a topic exchange in RabbitMQ. It can subscribe to specific log patterns using binding keys with wildcards.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nhttps://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/ReceiveLogsTopic/ReceiveLogsTopic.cs\n```\n\n----------------------------------------\n\nTITLE: Alternative Liveness Probe for RabbitMQ on Kubernetes\nDESCRIPTION: This snippet shows an alternative liveness probe that checks port connectivity. It uses the 'rabbitmq-diagnostics -q check_port_connectivity' command to verify if the required ports are open and accessible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q check_port_connectivity\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Host in RabbitMQ\nDESCRIPTION: Kubernetes manifest for creating a virtual host named 'test' in a RabbitMQ cluster using the Messaging Topology Operator. The virtual host is associated with a RabbitMQ cluster named 'example-rabbit'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Vhost\nmetadata:\n  name: test-vhost # name of this custom resource\n  namespace: rabbitmq-system\nspec:\n  name: test # name of the vhost\n  rabbitmqClusterReference:\n    name: example-rabbit\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Quorum Queues with Fixed Rate Throughput\nDESCRIPTION: Shell command for perf-test configured to benchmark quorum queues at a fixed rate of 10,000 messages per second, allowing for comparison of latency characteristics between queue types at the same throughput.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# quorum queues\nperf-test --rate 10000 --confirm 3000 --multi-ack-every 3000 --qos 3000 \\\n          --variable-size 10:900 --variable-size 100:900 --variable-size 1000:900 --variable-size 5000:900 \\\n          --quorum-queue --queue qq\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Host Protection from Deletion Using CLI\nDESCRIPTION: Command that marks a RabbitMQ virtual host as protected from deletion using the rabbitmqctl command line tool. Protected virtual hosts cannot be deleted until the protection is removed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl enable_vhost_protection_from_deletion \"vhost-name\"\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key for RPM (Bash)\nDESCRIPTION: Imports the RabbitMQ signing key for RPM-based systems using rpm --import.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrpm --import https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc\n```\n\n----------------------------------------\n\nTITLE: Implementing Fair Dispatch in C# RabbitMQ Consumer\nDESCRIPTION: This snippet shows how to implement fair dispatch in a RabbitMQ consumer using C#. It uses the BasicQos method to set the prefetch count to 1, ensuring even distribution of tasks among workers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nchannel.QueueDeclare(queue: \"task_queue\",\n                     durable: true,\n                     exclusive: false,\n                     autoDelete: false,\n                     arguments: null);\n\nchannel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n```\n\n----------------------------------------\n\nTITLE: Configuring 4GB Preallocated Memory Area for RabbitMQ\nDESCRIPTION: Setting up a larger 4GB preallocated memory area for workloads that can benefit from reduced allocation frequency.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+MMscs 4096\"\n```\n\n----------------------------------------\n\nTITLE: Finding rabbitmq-plugins executable location\nDESCRIPTION: Demonstrates how to use the which command to locate the rabbitmq-plugins executable, helping to verify if CLI tools come from the expected installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwhich rabbitmq-plugins\n# => /path/to/rabbitmq/installation/sbin/rabbitmq-plugins\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Messages with Stream Performance Tool\nDESCRIPTION: These shell commands download the RabbitMQ Stream performance testing tool and run it to publish one message per second to the single-active-consumer stream, demonstrating how only one consumer receives messages at a time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd /tmp\nwget -O stream-perf-test.jar \\\n  https://github.com/rabbitmq/rabbitmq-java-tools-binaries-dev/releases/download/v-stream-perf-test-latest/stream-perf-test-latest.jar\njava -jar /tmp/stream-perf-test.jar --rate 1 -x 1 -y 0 --streams single-active-consumer\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Consumer Callback\nDESCRIPTION: Setting up callback function for processing received messages and starting the consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$callback = function ($msg) {\n  echo ' [x] Received ', $msg->body, \"\\n\";\n};\n\n$channel->basic_consume('hello', '', false, true, false, false, $callback);\n\ntry {\n    $channel->consume();\n} catch (\\Throwable $exception) {\n    echo $exception->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Detailed Message Stats JSON Object\nDESCRIPTION: JSON structure showing a detailed message statistics breakdown for a queue, displaying message rates from different exchanges. This is only returned when rates_mode is set to detailed and when querying individual objects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n\"incoming\": [\n  {\n    \"stats\": {\n      \"publish\": 352593,\n      \"publish_details\": {\n        \"rate\": 100.2\n      }\n    },\n    \"exchange\": {\n      \"name\": \"my-exchange\",\n      \"vhost\": \"/\"\n    }\n  }\n  {\n    \"stats\": {\n      \"publish\": 543784,\n      \"publish_details\": {\n        \"rate\": 54.6\n      }\n    },\n    \"exchange\": {\n      \"name\": \"amq.topic\",\n      \"vhost\": \"/\"\n    }\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth Providers in RabbitMQ\nDESCRIPTION: Configuration example showing how to set up two distinct resource servers (prod and dev) each managed by different identity providers. This demonstrates the OAuth provider configuration including scope prefix and provider-specific settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.resource_servers.1.id = prod\nauth_oauth2.resource_servers.1.oauth_provider_id = idp_prod\nauth_oauth2.resource_servers.2.id = dev\nauth_oauth2.resource_servers.2.oauth_provider_id = idp_dev\nauth_oauth2.oauth_providers.idp_prod.issuer = https://idp_prod.com\nauth_oauth2.oauth_providers.idp_dev.issuer = https://idp_dev.com\n```\n\n----------------------------------------\n\nTITLE: Including Required Header Files for Erlang RabbitMQ Client\nDESCRIPTION: Includes the necessary header file for accessing AMQP 0-9-1 method definitions and data structures used by the Erlang client. This must be included in any module using the client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n-include(\"amqp_client.hrl\").\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Connections in RabbitMQ with bash\nDESCRIPTION: Command for displaying specific connection information (name and user) for RabbitMQ stream connections. This example shows how to use the list_stream_connections command to retrieve specific connection properties.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-streams.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_connections conn_name user\n```\n\n----------------------------------------\n\nTITLE: Restarting a Shovel Using RabbitMQ CLI\nDESCRIPTION: Command for restarting a specific shovel using the RabbitMQ CLI. The shovel plugin must be enabled on the node where the command is executed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-dynamic.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl restart_shovel \"my-shovel\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a RabbitMQ Stream using STOMP\nDESCRIPTION: This snippet demonstrates how to subscribe to a RabbitMQ stream using the STOMP protocol. It includes headers for specifying the destination, acknowledgement mode, prefetch count, and stream offset.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_17\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/amq/queue/my-stream\nack:client\nprefetch-count:10\nx-stream-offset:next\n```\n\n----------------------------------------\n\nTITLE: Logging Authentication Failure in RabbitMQ\nDESCRIPTION: This snippet shows a typical log output when authentication fails due to invalid credentials. It includes connection details and the specific error message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n2019-03-25 12:28:19.047 [info] <0.1613.0> accepting AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)\n2019-03-25 12:28:19.056 [error] <0.1613.0> Error on AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672, state: starting):\nPLAIN login refused: user 'user2' - invalid credentials\n2019-03-25 12:28:22.057 [info] <0.1613.0> closing AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)\n```\n\n----------------------------------------\n\nTITLE: Referencing Connection Close Command in RabbitMQ\nDESCRIPTION: Code reference to the 'connection.close' command that RabbitMQ sends to clients with the ACCESS_REFUSED reason when authentication fails.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-notification.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code>connection.close</code>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a RabbitMQ Stream using STOMP\nDESCRIPTION: This snippet demonstrates how to subscribe to a RabbitMQ stream using the STOMP protocol. It includes headers for specifying the destination, acknowledgement mode, prefetch count, and stream offset.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_17\n\nLANGUAGE: stomp\nCODE:\n```\nSUBSCRIBE\ndestination:/amq/queue/my-stream\nack:client\nprefetch-count:10\nx-stream-offset:next\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Logging for RabbitMQ Management Plugin\nDESCRIPTION: This snippet demonstrates how to enable HTTP API access logging for the RabbitMQ Management plugin by specifying the log directory using the INI configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.http_log_dir = /path/to/a/writeable/directory\n```\n\n----------------------------------------\n\nTITLE: Reviving a Remote Node from Maintenance Mode in RabbitMQ (Bash)\nDESCRIPTION: This command revives a specific remote RabbitMQ node from maintenance mode using the -n flag. Allows administrators to control maintenance state for any node in the cluster from a single control point.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# revives node rabbit@node2.cluster.rabbitmq.svc from maintenance\nrabbitmq-upgrade revive -n rabbit@node2.cluster.rabbitmq.svc\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 1883 with lsof (IPv6)\nDESCRIPTION: Uses lsof to display OS processes that listen on port 1883 using IPv6. This command is useful for checking MQTT-related listeners in RabbitMQ for IPv6 connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i6TCP:1883 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ SSL Options Configuration\nDESCRIPTION: Default SSL/TLS configuration setting\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nssl_options = none\n```\n\n----------------------------------------\n\nTITLE: Creating Headless Service for RabbitMQ Inter-node Communication\nDESCRIPTION: Command to apply the headless service configuration for RabbitMQ cluster internal communication, enabling node discovery and inter-node communication on ports 4369 and 25672.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f rabbitmq-headless.yaml\n```\n\n----------------------------------------\n\nTITLE: Confirming RabbitMQ Exchange-Queue Binding Completion\nDESCRIPTION: Terminal output showing the successful completion of binding multiple queues to the 'logs' exchange in RabbitMQ, confirming that the publish/subscribe pattern has been properly implemented.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# => ...done.\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Exchange in RabbitMQ\nDESCRIPTION: Shows how to bind a queue to an exchange with a routing key using the management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nmanagement.binding()\n    .sourceExchange(\"my-exchange\")\n    .destinationQueue(\"my-queue\")\n    .key(\"foo\")\n    .bind();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIBindingSpecification bindingSpec = management.Binding()\n    .SourceExchange(\"my-exchange\")\n    .DestinationQueue(\"my-queue\")\n    .Key(\"foo\");\nawait bindingSpec.BindAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nbind_name = management.bind(\n    BindingSpecification(\n        source_exchange=\"my-exchange\",\n        destination_queue=\"my-queue\",\n        binding_key=\"foo\",\n    )\n)\n```\n\nLANGUAGE: go\nCODE:\n```\n// ExchangeToQueueBindingSpecification implements BindingSpecification interface \nbindingPath, err := management.Bind(context.TODO(), &rmq.ExchangeToQueueBindingSpecification{\n        SourceExchange:   \"my-exchange\",\n        DestinationQueue: \"my-queue\",\n        BindingKey:       \"foo\",\n    })\n```\n\n----------------------------------------\n\nTITLE: Updating Homebrew and Installing RabbitMQ\nDESCRIPTION: Commands to update Homebrew taps and install RabbitMQ server. This will also install dependencies such as Erlang/OTP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring Kernel Limits for Docker Containers\nDESCRIPTION: Sets up kernel limits for Docker containers using the Docker daemon configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shovel Plugin for Message Draining in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set up a shovel to drain messages from a specific queue in the 'blue' cluster to the corresponding queue in the 'green' cluster. It uses the rabbitmqctl command to set a shovel parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/blue-green-upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter shovel drain-blue \\\n'{\"src-protocol\": \"amqp091\", \"src-uri\": \"amqp://node-in-blue-cluster\", \\\n\"src-queue\": \"queue1\", \"dest-protocol\": \"amqp091\", \\\n\"dest-uri\": \"amqp://\", \"dest-queue\": \"queue1\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Virtual Host in RabbitMQ (INI)\nDESCRIPTION: Default virtual host to create when RabbitMQ initializes a new database. The exchange amq.rabbitmq.log will exist in this virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\ndefault_vhost = /\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key via Direct Download with GPG\nDESCRIPTION: Downloads the RabbitMQ release signing key from GitHub and imports it into GPG for signature verification. This method is recommended over using key servers which can be unreliable.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc --output rabbitmq-release-signing-key.asc\ngpg --import rabbitmq-release-signing-key.asc\n```\n\n----------------------------------------\n\nTITLE: Modifying RabbitMQ Default Installation Paths in rabbitmq-defaults Script\nDESCRIPTION: Shows how to configure RabbitMQ to use system directories instead of the installation directory by modifying the PREFIX variable in the rabbitmq-defaults script.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-generic-unix.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPREFIX=${RABBITMQ_HOME}\n```\n\n----------------------------------------\n\nTITLE: Running the Log Emitter to Send Messages\nDESCRIPTION: Runs the log emitter script to send log messages to the exchange, which will then be distributed to all connected receivers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmix run emit_log.exs\n```\n\n----------------------------------------\n\nTITLE: Downloading MQTT Plugin for RabbitMQ\nDESCRIPTION: Command to download the MQTT adapter plugin from RabbitMQ's preview release downloads.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-09-12-mqtt-adapter/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://www.rabbitmq.com/releases/plugins/v2.8.6-mqtt-preview/rabbitmq_mqtt-2.8.6.ez\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-upgrade Command in Bash\nDESCRIPTION: The rabbitmq-upgrade command is used for RabbitMQ installation upgrade tasks. It supports various options for node specification, output mode, timeout, and authentication. The command can be used with different subcommands for specific upgrade-related operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade [-q] [-s] [-l] [-n node] [-t timeout] command [command_options]\n```\n\n----------------------------------------\n\nTITLE: Installing Local Path Provisioner for Storage\nDESCRIPTION: Installs the Local Path Provisioner to provide storage capabilities in environments without a Physical Volume Provisioner. This is useful for development or testing setups.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml\nkubectl annotate storageclass local-path storageclass.kubernetes.io/is-default-class=true\n```\n\n----------------------------------------\n\nTITLE: Adding Erlang Repository for Ubuntu 24.04 (Noble)\nDESCRIPTION: Adds the Launchpad PPA repository for Erlang packages produced by the RabbitMQ team to /etc/apt/sources.list.d/erlang.list for Ubuntu 24.04 (Noble). This repository is specifically for amd64 architecture and uses GPG key verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# This Launchpad PPA repository provides Erlang packages produced by the RabbitMQ team\n#\n# Replace $distribution with the name of the Ubuntu release used\ndeb [arch=amd64 signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu noble main\n```\n\n----------------------------------------\n\nTITLE: Configuring Yum Repository for RabbitMQ and Erlang\nDESCRIPTION: Example configuration for setting up a Yum repository file to install RabbitMQ and its Erlang dependency from a Cloudsmith mirror. This configuration is for modern RPM-based distributions like RHEL 9, CentOS Stream 9, and Fedora.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# In /etc/yum.repos.d/rabbitmq.repo\n\n##\n## Zero dependency Erlang RPM\n##\n\n[modern-erlang]\nname=modern-erlang-el9\n# Use a set of mirrors maintained by the RabbitMQ core team.\n# The mirrors have significantly higher bandwidth quotas.\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/$basearch\n        https://yum2.rabbitmq.com/erlang/el/9/$basearch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[modern-erlang-noarch]\nname=modern-erlang-el9-noarch\n# Use a set of mirrors maintained by the RabbitMQ core team.\n```\n\n----------------------------------------\n\nTITLE: Updating Debian Package Sources\nDESCRIPTION: Shell command to update apt package sources after migrating repository configuration from Bintray to alternative sources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-03-31-migrate-off-of-bintray/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update -y\n```\n\n----------------------------------------\n\nTITLE: Creating Pod Disruption Budget for RabbitMQ in Kubernetes\nDESCRIPTION: YAML configuration for creating a PodDisruptionBudget object that limits the number of simultaneously disrupted RabbitMQ pods. Sets maxUnavailable to 1 and uses label selector to target specific RabbitMQ instances.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1beta1\nkind: PodDisruptionBudget\nmetadata:\n  name: pdb-rabbitmq\nspec:\n  maxUnavailable: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: YOUR-RABBITMQ-CUSTOM-RESOURCE-NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring HashiCorp Vault for RabbitMQ Server Certificates\nDESCRIPTION: YAML configuration to request short-lived server certificates from HashiCorp Vault's PKI Secrets Engine for RabbitMQ TLS instead of using static certificates in Kubernetes secrets.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  secretBackend:\n    vault:\n      role: rabbitmq\n      tls:\n        pkiIssuerPath: pki/issue/cert-issuer\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Token with Indexed Scopes in RabbitMQ\nDESCRIPTION: Example of an OAuth 2.0 token where scopes are indexed by resource_server_id, along with the corresponding RabbitMQ plugin configuration to read and prefix these scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n{\n \"exp\": 1618592626,\n \"iat\": 1618578226,\n \"aud\" : [\"my_id\"],\n ...\n \"complex_claim_as_string\": {\n    \"rabbitmq\": [\"configure:*/* read:*/* write:*/*\"]\n },\n \"complex_claim_as_list\": {\n    \"rabbitmq\": [\"configure:vhost1/*\", \"read:vhost1/*\", \"write:vhost1/*\"]\n }\n ...\n}\n```\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = my_rabbit_server\nauth_oauth2.additional_scopes_key = complex_claim_as_string complex_claim_as_list\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Servers for RabbitMQ\nDESCRIPTION: Configure multiple LDAP servers for RabbitMQ to connect to, along with port and timeout settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\nauth_ldap.port      = 6389\n\n# 15 seconds in milliseconds\nauth_ldap.timeout   = 15000\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Broker with Custom Temp Directory\nDESCRIPTION: Command to run RabbitMQ broker with a custom temporary directory location for test instances.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/build-server.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker TEST_TMPDIR=\"/some/other/location/for/rabbitmq-test-instances\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Classic Queue Mirroring Policies in RabbitMQ using PowerShell\nDESCRIPTION: PowerShell commands to detect policies that enable classic queue mirroring and list them in a formatted table. These diagnostic tools help identify policies that need to be changed during migration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# exits with a non-zero code if any policies in the cluster\n# enabling classic queue mirroring\nrabbitmq-diagnostics.bat check_if_cluster_has_classic_queue_mirroring_policy\n\n# lists policies that enable classic queue mirroring\nrabbitmq-diagnostics.bat list_policies_with_classic_queue_mirroring -s --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Clearing SSL Certificate Cache in RabbitMQ (Bash)\nDESCRIPTION: Command for clearing the PEM certificate and private key store cache in RabbitMQ using rabbitmqctl in a Bash shell. This is useful when certificates are rotated and the server needs to reload them.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval -n [target-node@hostname] 'ssl:clear_pem_cache().'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Time Format for Logs in RabbitMQ\nDESCRIPTION: Configuration showing the default timestamp format setting for RabbitMQ logs, which uses RFC 3339 format with spaces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\n# this is the default format\nlog.file.formatter.time_format = rfc3339_space\n```\n\n----------------------------------------\n\nTITLE: Creating Quorum Queue in RabbitMQ\nDESCRIPTION: Demonstrates creation of quorum queues with specific settings like initial group size and delivery limit. Shows queue type-specific argument handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nmanagement\n    .queue()\n    .name(\"my-quorum-queue\")\n    .quorum() // set queue type to 'quorum'\n        .quorumInitialGroupSize(3) // specific to quorum queues\n        .deliveryLimit(3) // specific to quorum queues\n    .queue()\n    .declare();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIQueueSpecification queueSpec = management\n    .Queue(\"my-quorum-queue\")\n    .Quorum() // set queue type to 'quorum'\n        .QuorumInitialGroupSize(3) // specific to quorum queues\n        .DeliveryLimit(3) // specific to quorum queues\n    .Queue();\nawait queueSpec.DeclareAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nqueue_name = \"my-quorum-queue\"\nmanagement.declare_queue(QuorumQueueSpecification(name=queue_name, quorum_initial_group_size=3, deliver_limit=3))\n\n```\n\nLANGUAGE: go\nCODE:\n```\nqueueInfo, err := management.DeclareQueue(context.TODO(), &QuorumQueueSpecification{\n            Name: \"my-quorum-queue\",\n            QuorumInitialGroupSize = 3,\n            DeliveryLimit: 3,\n        })\n```\n\n----------------------------------------\n\nTITLE: Setting Frame Size Limit for STOMP Connections\nDESCRIPTION: Configuration to set the maximum allowed frame size for STOMP messages. When a frame exceeds this limit, the connection is closed with an error.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nstomp.max_frame_size = 4 * 1024 * 1024\n```\n\n----------------------------------------\n\nTITLE: Message Publishing with Direct Exchange\nDESCRIPTION: Publishing messages to a direct exchange with severity-based routing\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nerr = ch.ExchangeDeclare(\n  \"logs_direct\", // name\n  \"direct\",      // type\n  true,          // durable\n  false,         // auto-deleted\n  false,         // internal\n  false,         // no-wait\n  nil,           // arguments\n)\nfailOnError(err, \"Failed to declare an exchange\")\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n\nbody := bodyFrom(os.Args)\nerr = ch.PublishWithContext(ctx,\n  \"logs_direct\",         // exchange\n  severityFrom(os.Args), // routing key\n  false, // mandatory\n  false, // immediate\n  amqp.Publishing{\n    ContentType: \"text/plain\",\n    Body:        []byte(body),\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Multiple Severities\nDESCRIPTION: Shows how to bind a queue to multiple severity levels using routing keys\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nqueue = channel.queue('')\n\nARGV.each do |severity|\n  queue.bind('logs', routing_key: severity)\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Page Cache Size in Non-Containerized Environments with Bash\nDESCRIPTION: Command to check the kernel page cache size in non-containerized environments like virtual machines or bare metal hardware. This helps monitor memory usage related to I/O operations, particularly important for workloads using RabbitMQ streams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/memory-use/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/meminfo | grep -we \"Cached\"\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Performance Test with Mirrored Queues in AWS\nDESCRIPTION: Command for running a RabbitMQ benchmark test using PerfTest utility. The command configures a test with persistent messaging, specific queue patterns, controlled producer and consumer settings, and a defined message rate and size. This benchmark is used to evaluate different cluster configurations with mirrored queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-06-19-cluster-sizing-case-study-mirrored-queues-part-1/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/runjava com.rabbitmq.perf.PerfTest \\\n-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \\\n-z 1800 \\\n-f persistent \\\n-q 1000 \\\n-c 1000 \\\n-ct -1 \\\n--rate 50 \\\n--size 1024 \\\n--queue-pattern 'perf-test-%d' \\\n--queue-pattern-from 1 \\\n--queue-pattern-to 100 \\\n--producers 200 \\\n--consumers 200 \\\n--consumer-latency 10000 \\\n--producer-random-start-delay 30\n```\n\n----------------------------------------\n\nTITLE: Logging Missing Permissions Error in RabbitMQ\nDESCRIPTION: This snippet demonstrates the server log output when a user attempts to connect without having the necessary permissions for the virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n2019-03-25 12:26:16.301 [info] <0.1594.0> accepting AMQP connection <0.1594.0> (127.0.0.1:63793 -> 127.0.0.1:5672)\n2019-03-25 12:26:16.309 [error] <0.1594.0> Error on AMQP connection <0.1594.0> (127.0.0.1:63793 -> 127.0.0.1:5672, user: 'user2', state: opening):\naccess to vhost '/' refused for user 'user2'\n2019-03-25 12:26:16.310 [info] <0.1594.0> closing AMQP connection <0.1594.0> (127.0.0.1:63793 -> 127.0.0.1:5672, vhost: 'none', user: 'user2')\n```\n\n----------------------------------------\n\nTITLE: Finding Plugin Directories with rabbitmq-plugins Command\nDESCRIPTION: Command to locate plugin-related directories including the plugin archives directory, expansion directory, and enabled plugins file location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins directories -s\n# => Plugin archives directory: /path/to/rabbitmq/plugins\n# => Plugin expansion directory: /path/to/node/node-plugins-expand\n# => Enabled plugins file: /path/to/enabled_plugins\n```\n\n----------------------------------------\n\nTITLE: Channel Error Log Example\nDESCRIPTION: Example of error log when channel maximum limit is exceeded.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n2019-02-11 16:04:06.296 [error] <0.887.0> Error on AMQP connection <0.887.0> (127.0.0.1:49956 -> 127.0.0.1:5672, vhost: '/', user: 'guest', state: running), channel 23:\n operation none caused a connection exception not_allowed: \"number of channels opened (22) has reached the negotiated channel_max (22)\"\n```\n\n----------------------------------------\n\nTITLE: Listing TCP Listeners with ss (IPv4)\nDESCRIPTION: Uses ss to display listening TCP sockets that use IPv4 and their associated OS processes. This command provides a comprehensive view of all IPv4 TCP listeners on the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nsudo ss --tcp -f inet --listening --numeric --processes\n```\n\n----------------------------------------\n\nTITLE: OAuth Provider Configuration\nDESCRIPTION: Configuration for the Keycloak OAuth provider including issuer and HTTPS settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-multiresource.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.oauth_providers.keycloak.issuer = https://keycloak:8443/realms/test\nauth_oauth2.oauth_providers.keycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.keycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.keycloak.https.hostname_verification = wildcard\nauth_oauth2.default_oauth_provider = keycloak\n```\n\n----------------------------------------\n\nTITLE: Consuming All Messages Without Filtering using Stream PerfTest\nDESCRIPTION: This command starts a consumer that reads all messages from the beginning of the stream without any filtering applied, with Prometheus metrics enabled for monitoring.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar stream-perf-test.jar --producers 0 --consumers 1 --offset first --prometheus\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Virtual Host in RabbitMQ\nDESCRIPTION: Configuration snippet showing how to set the default virtual host in rabbitmq.conf file. This setting determines which virtual host will be used when clients don't explicitly specify one.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndefault_vhost = /\n```\n\n----------------------------------------\n\nTITLE: Accessing Queue Length in AMQP 0-9-1\nDESCRIPTION: Shows how to determine queue length using AMQP 0-9-1 protocol's queue.declare response, which returns the message count in the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/queues.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<code>queue.declare</code>\n```\n\n----------------------------------------\n\nTITLE: OAuth 2 Configuration Response Format in RabbitMQ\nDESCRIPTION: JSON response format returned by the OAuth 2 configuration endpoint. This shows the structure with three fields indicating whether OAuth is enabled, the client ID, and the provider URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\"oauth_enabled\":\"boolean\", \"oauth_client_id\":\"string\", \"oauth_provider_url\":\"string\"}\n```\n\n----------------------------------------\n\nTITLE: Sample journalctl Output for RabbitMQ\nDESCRIPTION: This snippet shows a sample output of the journalctl command filtered for RabbitMQ-specific entries. It includes startup information and log file locations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##  ##\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##  ##      RabbitMQ 3.13.7. Copyright (c) 2005-2025 Broadcom. All Rights Reserved. The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##########  Licensed under the MPL 2.0. Website: https://www.rabbitmq.com/\nAug 26 11:03:04 localhost rabbitmq-server[968]: ######  ##\nAug 26 11:03:04 localhost rabbitmq-server[968]: ##########  Logs: /var/log/rabbitmq/rabbit@localhost.log\nAug 26 11:03:04 localhost rabbitmq-server[968]: /var/log/rabbitmq/rabbit@localhost_upgrade.log\nAug 26 11:03:04 localhost rabbitmq-server[968]: Starting broker...\nAug 26 11:03:05 localhost rabbitmq-server[968]: systemd unit for activation check: \"rabbitmq-server.service\"\nAug 26 11:03:06 localhost rabbitmq-server[968]: completed with 6 plugins.\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmqctl list_object Command (Shell)\nDESCRIPTION: Example of how to list objects using the rabbitmqctl command-line tool, which returns similar but fewer metrics than the HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl list_{object}\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl list_{object}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Node in Foreground\nDESCRIPTION: Command to start a RabbitMQ node in the foreground using the Homebrew installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-homebrew.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCONF_ENV_FILE=\"/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf\" /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Importing Cloudsmith Signing Key\nDESCRIPTION: Downloads and imports the Cloudsmith repository signing key for RabbitMQ packages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/signatures.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key -o cloudsmith-rabbitmq-key.asc\ngpg --import cloudsmith-rabbitmq-key.asc\n```\n\n----------------------------------------\n\nTITLE: Declaring a Renamed Durable Queue in RabbitMQ with Elixir\nDESCRIPTION: Code to declare a renamed durable queue in RabbitMQ with Elixir. This is used when you need to change queue parameters like durability but RabbitMQ doesn't allow redefining existing queues with different parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Queue.declare(channel, \"task_queue\", durable: true)\n```\n\n----------------------------------------\n\nTITLE: In Group Query Examples for RabbitMQ LDAP Authorization\nDESCRIPTION: Demonstrates membership checking queries with optional attribute name specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_34\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group, Pattern, AttributeName}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{vhost_access_query, {in_group, \"cn=${vhost}-users,ou=vhosts,dc=example,dc=com\"}}\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode in Bash\nDESCRIPTION: Command to bring a RabbitMQ node out of maintenance mode without restarting it. This is only needed if the node won't be restarted as planned, as a restart automatically disables maintenance mode.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade revive\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Queue Destinations with STOMP\nDESCRIPTION: Example of creating and using a temporary queue in STOMP by specifying a reply-to header with a /temp-queue/ prefix. This creates a session-private queue for receiving replies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/stomp.md#2025-04-09_snippet_13\n\nLANGUAGE: stomp\nCODE:\n```\nSEND\ndestination:/queue/reply-test\nreply-to:/temp-queue/foo\n\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ to Allow Remote Guest User Access\nDESCRIPTION: A configuration snippet showing how to allow the default 'guest' user to connect from remote hosts by setting loopback_users to none. This practice is strongly discouraged for security reasons and should be avoided in production environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# DANGER ZONE!\n#\n# allowing remote connections for default user is highly discouraged\n# as it dramatically decreases the security of the system. Delete the default user\n# instead and create a new one with generated secure credentials, or use JWT tokens,\n# or x.509 certificates for clients to authenticate themselves\nloopback_users = none\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation in RabbitMQ\nDESCRIPTION: Kubernetes manifest for defining a Federation upstream named 'origin' in a RabbitMQ cluster. The federation configuration uses a URI stored in a Secret and configures the acknowledgement mode to 'on-confirm'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Federation\nmetadata:\n  name: federation-example\n  namespace: rabbitmq-system\nspec:\n  name: \"origin\"\n  uriSecret:\n    # secret must be created in the same namespace as this Federation object; in this case 'rabbitmq-system'\n    name: {secret-name}\n  ackMode: \"on-confirm\"\n  rabbitmqClusterReference:\n    name: example-rabbit\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Queue Replica Sync Status in RabbitMQ (PowerShell)\nDESCRIPTION: This PowerShell command checks if there are any ongoing initial quorum queue replica sync operations. It exits with a non-zero status if any syncs are in progress, ensuring all replicas have completed their initial synchronization.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/grow-then-shrink-upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-diagnostics.bat check_if_new_quorum_queue_replicas_have_finished_initial_sync\n```\n\n----------------------------------------\n\nTITLE: Displaying Connection Churn Metrics in rabbitmqadmin\nDESCRIPTION: This command shows how to display connection, queue/stream, and channel churn metrics using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin show churn\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages Individually with RabbitMQ Publisher Confirms in C#\nDESCRIPTION: This code demonstrates how to publish a message and await its confirmation individually. It handles exceptions for nack-ed or returned messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nfor (int i = 0; i < MESSAGE_COUNT; i++)\n{\n    byte[] body = Encoding.UTF8.GetBytes(i.ToString());\n    try\n    {\n        await channel.BasicPublishAsync(\"\", \"queue-name\", null, body);\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine($\"[WARNING] message {i} has been nack-ed or returned\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages Individually with RabbitMQ Publisher Confirms in C#\nDESCRIPTION: This code demonstrates how to publish a message and await its confirmation individually. It handles exceptions for nack-ed or returned messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nfor (int i = 0; i < MESSAGE_COUNT; i++)\n{\n    byte[] body = Encoding.UTF8.GetBytes(i.ToString());\n    try\n    {\n        await channel.BasicPublishAsync(\"\", \"queue-name\", null, body);\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine($\"[WARNING] message {i} has been nack-ed or returned\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Encryption Settings with rabbitmqctl on Windows\nDESCRIPTION: Example of using rabbitmqctl with custom encryption settings (cipher, hash function, iterations) on Windows PowerShell when encoding values.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_58\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 \\\n                     \"<<\"\"guest\"\">>\" mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Launching RabbitMQ Docker Container with Stream Support\nDESCRIPTION: Docker command to run RabbitMQ container with necessary ports exposed (5552, 15672, 5672) and stream configuration. Sets up management interface and configures the advertised host for streaming.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/TutorialsStreamHelp.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5552:5552 -p 15672:15672 -p 5672:5672  \\\n    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \\\n    rabbitmq:4-management\n```\n\n----------------------------------------\n\nTITLE: Setting up .NET Projects for RabbitMQ Work Queues\nDESCRIPTION: PowerShell commands to create two .NET console projects (NewTask and Worker) and add RabbitMQ.Client package dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new console --name NewTask\nmv NewTask/Program.cs NewTask/NewTask.cs\ndotnet new console --name Worker\nmv Worker/Program.cs Worker/Worker.cs\ncd NewTask\ndotnet add package RabbitMQ.Client\ncd ../Worker\ndotnet add package RabbitMQ.Client\n```\n\n----------------------------------------\n\nTITLE: AWS Private IP Configuration\nDESCRIPTION: Configuration for using private IP addresses instead of DNS hostnames\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.use_autoscaling_group = true\ncluster_formation.aws.use_private_ip = true\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Sets a custom cluster name for a RabbitMQ cluster. The cluster name is used by the federation plugin to identify itself to other nodes in the federation graph, which is especially important when DNS doesn't provide distinct names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name \"east1-production\"\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Sets a custom cluster name for a RabbitMQ cluster. The cluster name is used by the federation plugin to identify itself to other nodes in the federation graph, which is especially important when DNS doesn't provide distinct names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name \"east1-production\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Dead Letter Queue Error Log Example\nDESCRIPTION: Example log message shown when dead-lettering fails due to an unavailable quorum queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/dlx.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCannot forward any dead-letter messages from source quorum queue 'qq.input' in vhost 'my-vhost'\nwith configured dead-letter-exchange exchange 'amq.topic' in vhost 'my-vhost'\nand configured dead-letter-routing-key 'my-app.events.type.abc'\n```\n\n----------------------------------------\n\nTITLE: Installing the AMQP Dependency in Elixir\nDESCRIPTION: Command sequence for creating a new Elixir project and installing the required RabbitMQ AMQP client library.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix new rabbitmq_tutorials\ncd rabbitmq_tutorials\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Binding Listing Command\nDESCRIPTION: Shell command to list all bindings on the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-php.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_bindings\n```\n\n----------------------------------------\n\nTITLE: Post-Boot Definition Import Commands\nDESCRIPTION: Commands for importing definitions after node boot, including startup verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/definitions.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# await startup for up to 5 minutes\nrabbitmqctl await_startup --timeout 300\n\n# import definitions using rabbitmqctl\nrabbitmqctl import_definitions /path/to/definitions.file.json\n\n# OR, import using rabbitmqadmin\n# Requires management plugin to be enabled\nrabbitmqadmin import /path/to/definitions.file.json\n```\n\n----------------------------------------\n\nTITLE: Cleaning DNF Package Cache\nDESCRIPTION: Commands for clearing the local DNF package manager cache to ensure latest package versions are visible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndnf clean metadata\n\ndnf clean dbcache\n\ndnf clean all\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Users in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the POST /api/users/bulk-delete endpoint to delete multiple users at once. The payload includes an array of usernames to be deleted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"users\" : [\"user1\", \"user2\", \"user3\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP DN Lookup Binding in RabbitMQ\nDESCRIPTION: Configuration example for setting up DN lookup binding in RabbitMQ's LDAP plugin. This configuration allows binding with specific credentials to perform the user lookup before authenticating the user.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.dn_lookup_bind.user_dn = CN=myuser,OU=users,DC=gopivotal,DC=com\nauth_ldap.dn_lookup_bind.password = test1234\nauth_ldap.dn_lookup_attribute = userPrincipalName\nauth_ldap.dn_lookup_base = DC=gopivotal,DC=com\n```\n\n----------------------------------------\n\nTITLE: Identifying Missing Crypto Module Error in Erlang\nDESCRIPTION: This error indicates that the 'crypto' module is missing or out of date in the Erlang/OTP installation. It's often resolved by installing the erlang-ssl package on Debian-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\n{undef, [{crypto,hash,...\n```\n\n----------------------------------------\n\nTITLE: LDAP Logging Configuration in Classic Format\nDESCRIPTION: Example of setting LDAP logging level using RabbitMQ's classic configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n    %% ...\n    {log, network}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting All TCP Connections with netstat\nDESCRIPTION: Uses netstat to list all TCP connection sockets, displaying IP addresses as numbers and showing program names. This command is useful for inspecting both inbound and outbound connections in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/troubleshooting-networking.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo netstat --all --numeric --tcp --programs\n```\n\n----------------------------------------\n\nTITLE: List Virtual Hosts with Protection Status\nDESCRIPTION: Command to list all virtual hosts with their deletion protection status\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_vhosts name tags default_queue_type metadata protected_from_deletion --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Identifying Missing Crypto Module Error in Erlang\nDESCRIPTION: This error indicates that the 'crypto' module is missing or out of date in the Erlang/OTP installation. It's often resolved by installing the erlang-ssl package on Debian-based systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_17\n\nLANGUAGE: erlang\nCODE:\n```\n{undef, [{crypto,hash,...\n```\n\n----------------------------------------\n\nTITLE: Check TLS Versions in RabbitMQ (Unix)\nDESCRIPTION: Command to check supported TLS versions in RabbitMQ on Unix-like systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics --silent tls_versions\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration Documentation in Markdown\nDESCRIPTION: Detailed markdown documentation covering RabbitMQ queue configuration including optional arguments, message ordering, durability, temporary queues, exclusive queues, and distributed queue functionality. Includes explanations of queue behaviors and configuration options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/queues.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Optional Arguments and Policy-Defined Key Precedence {#optional-arguments-precedence}\n\nWhen the same key is provided by both client-provided `x-arguments` and by a [policy](./parameters#policies),\nthe former take precedence.\n\nHowever, if an [operator policy](./parameters#operator-policies) is also used, that will take precedence over the client-provided\narguments, too. Operator policies are a protection mechanism and override client-provided values\nand user policy values.\n```\n\n----------------------------------------\n\nTITLE: Displaying channels Property in RabbitMQ\nDESCRIPTION: Represents the number of channels using a connection in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\nchannels\n```\n\n----------------------------------------\n\nTITLE: Checking Classic Queue Mirroring Policy in RabbitMQ\nDESCRIPTION: Health check command to verify if any policies enable classic queue mirroring, which has been deprecated since 2021.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-queues.8.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues check_if_cluster_has_classic_queue_mirroring_policy\n```\n\n----------------------------------------\n\nTITLE: AWS Private IP Configuration\nDESCRIPTION: Configuration for using private IP addresses instead of DNS hostnames for cluster formation\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n\ncluster_formation.aws.use_autoscaling_group = true\ncluster_formation.aws.use_private_ip = true\n```\n\n----------------------------------------\n\nTITLE: Calculating Bandwidth Example for RabbitMQ Workload\nDESCRIPTION: This snippet provides a concrete example of calculating the required network bandwidth for a RabbitMQ workload with an average message size of 3 kiB and a peak message rate of 20K messages per second.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n3 kiB * 20000/second * 8 * 1.1 = 528 megabits/second\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-release Version of AMQP Gem in Ruby\nDESCRIPTION: This command installs the pre-release version of the AMQP gem, allowing users to test the latest development version. It's recommended for users to try this version and provide feedback.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-01-12-ruby-amqp-gem-intro/index.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem install amqp --pre\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Peer Discovery with Node Name Settings in RabbitMQ\nDESCRIPTION: Basic configuration for using Consul as a peer discovery backend with options to use host name instead of node name for service address and long RabbitMQ node names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# compute service address using host name and not node name\ncluster_formation.consul.svc_addr_use_nodename = false\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Peer Discovery with Node Name Settings in RabbitMQ\nDESCRIPTION: Basic configuration for using Consul as a peer discovery backend with options to use host name instead of node name for service address and long RabbitMQ node names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# compute service address using host name and not node name\ncluster_formation.consul.svc_addr_use_nodename = false\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Worker Output Showing Round-Robin Task Distribution\nDESCRIPTION: Output from two worker processes showing how RabbitMQ distributes tasks in a round-robin fashion. Each worker receives alternate messages from the queue, demonstrating load balancing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\npython worker.py\n# => [*] Waiting for messages. To exit press CTRL+C\n# => [x] Received 'First message.'\n# => [x] Received 'Third message...'\n# => [x] Received 'Fifth message.....'\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\npython worker.py\n# => [*] Waiting for messages. To exit press CTRL+C\n# => [x] Received 'Second message..'\n```\n\n----------------------------------------\n\nTITLE: Defining In Nested Group Queries in RabbitMQ LDAP Authentication\nDESCRIPTION: Queries that check if a user is a member of a group, including nested group membership. Supports traversing group hierarchies with optional attribute name and scope parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_23\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern, AttributeName}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{in_group_nested, Pattern, AttributeName, Scope}\n```\n\n----------------------------------------\n\nTITLE: Retrieving RabbitMQ Cluster Status in Kubernetes\nDESCRIPTION: Command to get detailed information about a RabbitMQ cluster instance in Kubernetes, including its status conditions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe rmq RMQ_NAME\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auto-generated User Credentials from Kubernetes Secret\nDESCRIPTION: Command to retrieve the name of the Kubernetes secret that contains the auto-generated username and password for a RabbitMQ user created with the Messaging Topology Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get users.rabbitmq.com user-example -o jsonpath='{.status.credentials.name}'\n```\n\n----------------------------------------\n\nTITLE: SSL Versions Detailed Output\nDESCRIPTION: Example output showing detailed SSL version information including supported and available versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[{ssl_app,\"9.1\"},\n {supported,['tlsv1.2','tlsv1.1',tlsv1]},\n {supported_dtls,['dtlsv1.2',dtlsv1]},\n {available,['tlsv1.2','tlsv1.1',tlsv1,sslv3]},\n {available_dtls,['dtlsv1.2',dtlsv1]}]\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration for RabbitMQ Messaging Topology Operator\nDESCRIPTION: YAML definition for configuring validating webhook for queues.rabbitmq.com in the RabbitMQ Messaging Topology Operator, showing where to insert CA certificate.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-topology-operator.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  annotations:\n  name: validating-webhook-configuration\nwebhooks:\n- admissionReviewVersions:\n  - v1\n  clientConfig:\n    caBundle: # generated ca certificate goes in here\n    service:\n      name: webhook-service\n      namespace: rabbitmq-system\n      path: /validate-rabbitmq-com-v1beta1-queue\n  failurePolicy: Fail\n  name: vqueue.kb.io\n  rules:\n  - apiGroups:\n    - rabbitmq.com\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Cookie via Environment Variable in Bash\nDESCRIPTION: Sets the Erlang cookie value for a RabbitMQ node using an environment variable. This method is less secure and not recommended for production use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-setcookie cookie-value\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Deprecated Feature Configuration\nDESCRIPTION: Configuration example showing how to disable a deprecated feature to test behavior as if the feature was already removed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/deprecated-features/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Try RabbitMQ as if the deprecated feature was gone.\ndeprecated_features.permit.some_deprecated_feature = false\n```\n\n----------------------------------------\n\nTITLE: Virtual Hosts Check Command - Bash\nDESCRIPTION: Verifies if all virtual hosts are running on the target node with configurable timeout\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_virtual_hosts --timeout 60\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Producer Implementation (Java)\nDESCRIPTION: This is the complete implementation of a RabbitMQ producer (NewTask.java) that sends persistent messages to a durable queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.MessageProperties;\n\npublic class NewTask {\n\n  private static final String TASK_QUEUE_NAME = \"task_queue\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    try (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n        channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);\n\n        String message = String.join(\" \", argv);\n\n        channel.basicPublish(\"\", TASK_QUEUE_NAME,\n                MessageProperties.PERSISTENT_TEXT_PLAIN,\n                message.getBytes(\"UTF-8\"));\n        System.out.println(\" [x] Sent '\" + message + \"'\");\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual Hosts Check Command - Bash\nDESCRIPTION: Verifies if all virtual hosts are running on the target node with configurable timeout\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_virtual_hosts --timeout 60\n```\n\n----------------------------------------\n\nTITLE: Listing Supported TLS Versions in RabbitMQ\nDESCRIPTION: Lists all TLS versions supported by the runtime on the target node. The -q flag enables quiet mode to display only the version information.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics tls_versions -q\n```\n\n----------------------------------------\n\nTITLE: Using rabbitmq-echopid.bat Command Syntax\nDESCRIPTION: Command syntax for rabbitmq-echopid.bat that takes a short-name form of the RabbitMQ node name as an argument. The script returns the PID of the Erlang runtime process running RabbitMQ or exits with error code 1 if no PID is found within 10 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-echopid.8.md#2025-04-09_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmq-echopid.bat sname\n```\n\n----------------------------------------\n\nTITLE: Creating an AMQP 1.0 Publisher in Python\nDESCRIPTION: Initializes a Publisher to send messages to a specific exchange and routing key in Python, using the AddressHelper utility.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# The publisher can use exchange (optionally with a key) or queue to publish messages. \n# You can use the AddressHelper utility class to get the addr from the exchange name and the key\nexchange_address = AddressHelper.exchange_address(\"foo\", \"bar\")\npublisher = connection.publisher(addr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Properties with YAML for RabbitMQ Tutorial\nDESCRIPTION: YAML configuration file for the Spring Boot application, setting active profiles, logging levels, and tutorial-specific properties like client duration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nspring:\n  profiles:\n    active: usage_message\n\nlogging:\n  level:\n    org: ERROR\n\ntutorial:\n  client:\n    duration: 10000\n```\n\n----------------------------------------\n\nTITLE: Debugging Unacknowledged Messages in RabbitMQ (Bash)\nDESCRIPTION: These commands show how to use rabbitmqctl to debug unacknowledged messages in RabbitMQ queues. It prints the messages_unacknowledged field for each queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring Default User Credentials for STOMP\nDESCRIPTION: Configuration for setting default login and password credentials, allowing STOMP clients to connect without explicitly providing credentials in the CONNECT frame.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nstomp.default_user = guest\nstomp.default_pass = guest\n```\n\n----------------------------------------\n\nTITLE: Checking Local Alarms for RabbitMQ Liveness Probe\nDESCRIPTION: This snippet demonstrates another option for a liveness probe that checks for local alarms in RabbitMQ. It uses the 'rabbitmq-diagnostics -q check_local_alarms' command to verify if there are any active local alarms on the node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q check_local_alarms\n```\n\n----------------------------------------\n\nTITLE: Creating a Binding via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to create a binding between an exchange and a queue or another exchange using the POST /api/bindings/{vhost}/e/{exchange}/q/{queue} or POST /api/bindings/{vhost}/e/{source}/e/{destination} endpoints. It specifies the routing key and optional arguments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routing_key\": \"my_routing_key\",\n  \"arguments\": {\"x-optional-arg\": \"optional-value\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PerfTest Producer with OAuth 2.0 Authentication\nDESCRIPTION: This command starts a PerfTest producer application that uses OAuth 2.0 for authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer\n```\n\n----------------------------------------\n\nTITLE: Listing Policies in RabbitMQ\nDESCRIPTION: Lists all policies for a virtual host. The example shows how to list all policies in the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_policies\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd epmd Socket for IPv6 in INI\nDESCRIPTION: INI configuration for the systemd epmd.socket service to make epmd only listen on IPv6 interfaces. This setting controls the network configuration of the epmd daemon on systemd-based distributions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nListenStream=[::1]:4369\n```\n\n----------------------------------------\n\nTITLE: Example of Rich Authorization Request in RabbitMQ OAuth 2.0\nDESCRIPTION: This JavaScript object illustrates a Rich Authorization Request (RAR) for RabbitMQ OAuth 2.0. It defines authorization details including locations and actions for different clusters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:primary-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\" ],\n      \"actions\": [\"administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Client Certificate Verification Failure in RabbitMQ TLS Connections\nDESCRIPTION: Error pattern indicating issues with client certificate verification. This can occur when a client presents an invalid certificate or when the ssl_options verification mode is set too strictly.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{ssl_upgrade_failure, ... certify ...}\n```\n\n----------------------------------------\n\nTITLE: Common Erlang Crypto Module Error Pattern in RabbitMQ Logs\nDESCRIPTION: Error pattern that appears in RabbitMQ logs when the crypto module is missing from the Erlang/OTP installation. This typically occurs on Debian-based systems when the erlang-ssl package is not installed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_16\n\nLANGUAGE: erlang\nCODE:\n```\n{undef, [{crypto,hash,...\n```\n\n----------------------------------------\n\nTITLE: Configuring DLX with Routing Key in Java\nDESCRIPTION: Shows how to set both dead letter exchange and routing key using queue arguments in Java.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/dlx.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Important: prefer using policies over hardcoded x-arguments.\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-dead-letter-exchange\", \"some.exchange.name\");\nargs.put(\"x-dead-letter-routing-key\", \"some-routing-key\");\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags Environment Variable in PowerShell\nDESCRIPTION: Commands to start RabbitMQ with Khepri enabled via environment variable in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:RABBITMQ_FEATURE_FLAGS = 'khepri_db,...'\nrabbitmq-server.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Metadata for Consul Peer Discovery in RabbitMQ\nDESCRIPTION: Example of defining Consul service metadata for RabbitMQ nodes, providing additional context about the service for operators or other tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\n# Define metadata for the RabbitMQ service. Both keys and values have a\n# maximum length limit enforced by Consul. This can be used to provide additional\n# context about the service (RabbitMQ cluster) for operators or other tools.\ncluster_formation.consul.svc_meta.owner = team-xyz\ncluster_formation.consul.svc_meta.service = service-one\ncluster_formation.consul.svc_meta.stats_url = https://service-one.eng.megacorp.local/stats/\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Port Range Maximum in RabbitMQ (INI)\nDESCRIPTION: Default setting for the upper bound of a server port range used for communication with other cluster members and CLI tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ndistribution.listener.port_range.max = 25672\n```\n\n----------------------------------------\n\nTITLE: Finding RabbitMQ Installation Information\nDESCRIPTION: Command to display information about the RabbitMQ installation, including file locations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-homebrew.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew info rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Stream in JavaScript\nDESCRIPTION: This snippet shows how to create a publisher and send multiple messages to a RabbitMQ stream, including a marker message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Creating the publisher...\");\nconst publisher = await client.declarePublisher({ stream: streamName });\n\nconst messageCount = 100;\nconsole.log(`Publishing ${messageCount} messages`);\nfor (let i = 0; i < messageCount; i++) {\n  const body = i === messageCount - 1 ? \"marker\" : `hello ${i}`;\n  await publisher.send(Buffer.from(body));\n}\n```\n\n----------------------------------------\n\nTITLE: String Sub-query Syntax\nDESCRIPTION: Shows the syntax for string sub-queries used in LDAP authentication patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_43\n\nLANGUAGE: erlang\nCODE:\n```\n{string, Pattern}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Source Tracking in RabbitMQ (Erlang)\nDESCRIPTION: Erlang configuration snippet to enable tracking of authentication attempt sources, including IP address, username, and protocol. This configuration should be added to the advanced config file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-03-01-auth-attempts-metrics/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [{track_auth_attempt_source, true}]}\n]\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Server Components in JSX\nDESCRIPTION: This code snippet imports two components related to the RabbitMQ server version and release branch. These components are likely used to dynamically display version information throughout the documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/index.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    RabbitMQServerReleaseBranch,\n    RabbitMQServerVersion,\n} from '@site/src/components/RabbitMQServer';\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Dependency Version Requirements\nDESCRIPTION: Example of specifying version requirements for plugin dependencies using a proplist structure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{application, my_plugin, [\n    %% ...\n    {dependency_version_requirements, [{rabbitmq_management, [\"3.11.0\", \"3.10.22\"]}]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Default User Remote Connection Refusal Log in RabbitMQ\nDESCRIPTION: This log entry shows the error message when the default 'guest' user attempts to connect from a remote host, which is restricted by RabbitMQ's default security settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\n2024-08-24 17:28:32.153698-04:00 [error] <0.1567.0> PLAIN login refused: user 'guest' can only connect via localhost\n```\n\n----------------------------------------\n\nTITLE: Limiting Consumers per Channel in RabbitMQ\nDESCRIPTION: Configures the maximum number of consumers allowed per channel using the rabbitmq.conf file. This setting helps prevent consumer leaks in certain scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumers.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nconsumer_max_per_channel = 100\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Host Limits in RabbitMQ API\nDESCRIPTION: JSON payload for setting a virtual host limit. This example sets a limit value of 100 for a specific virtual host limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\"value\": 100}\n```\n\n----------------------------------------\n\nTITLE: Keycloak and RabbitMQ Management Commands\nDESCRIPTION: Command line instructions for starting Keycloak server, accessing management API, and running performance tests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-keycloak.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=keycloak\nmake start-rabbitmq\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-keycloak url=https://localhost:15671/api/overview client_id=mgt_api_client secret=LWOuYqJ8gjKg3D2U8CJZDuID3KiRZVDa realm=test\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer TOKEN=$(bin/keycloak/token producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn test)\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\npip install pika\npip install requests\npython3 pika-client/producer.py producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-keycloak\n```\n\n----------------------------------------\n\nTITLE: Listing Exchanges\nDESCRIPTION: Demonstrates how to list exchanges across all virtual hosts or in a specific virtual host. These commands display information about existing exchanges in the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list exchanges\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" list exchanges\n```\n\n----------------------------------------\n\nTITLE: Running the RPC Server and Client\nDESCRIPTION: Command line examples showing how to start the RPC server and make client requests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./rpc_server.js\n# => [x] Awaiting RPC requests\n```\n\nLANGUAGE: bash\nCODE:\n```\n./rpc_client.js 30\n```\n\n----------------------------------------\n\nTITLE: Keycloak JWT Payload Structure\nDESCRIPTION: Example JWT payload structure from Keycloak showing realm access roles, resource access permissions and custom scopes configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-keycloak.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"realm_access\": {\n    \"roles\": [\n      \"offline_access\",\n      \"uma_authorization\",\n      \"rabbitmq.tag:management\"\n    ]\n  },\n  \"resource_access\": {\n    \"account\": {\n      \"roles\": [\n        \"manage-account\",\n        \"manage-account-links\",\n        \"view-profile\",\n        \"rabbitmq.write:*/*\"\n      ]\n    }\n  },\n  \"roles\": \"rabbitmq.read:*/*\",\n  \"scope\": \"profile email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from RabbitMQ Cluster\nDESCRIPTION: This command removes a cluster node remotely. The node being removed must be offline, while the node we are removing from must be online, except when using the --offline flag for special recovery scenarios.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer\n```\n\n----------------------------------------\n\nTITLE: Declaring a Durable Queue in Erlang\nDESCRIPTION: Demonstrates how to declare a durable queue named 'my_queue' using the #'queue.declare'{} record with the durable flag set to true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\nDeclare = #'queue.declare'{\n  queue = <<\"my_queue\">>,\n  durable = true\n},\n#'queue.declare_ok'{} = amqp_channel:call(Channel, Declare)\n```\n\n----------------------------------------\n\nTITLE: Awaiting RabbitMQ Publisher Confirms for a Batch in C#\nDESCRIPTION: This method is responsible for awaiting the publisher confirmations for a given batch of messages. It throws an exception if the broker does not confirm the messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-dotnet.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static async Task AwaitConfirmsAsync(IChannel channel)\n{\n    try\n    {\n        await channel.WaitForConfirmsAsync();\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine($\"[WARNING] messages not confirmed: {e.Message}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Stream Consumer\nDESCRIPTION: Shell commands to run the consumer application and view its output, demonstrating how the consumer maintains its position in the stream across multiple runs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run\n```\n\nLANGUAGE: shell\nCODE:\n```\nStarted consuming...\nFirst message received.\nDone consuming, first offset 0, last offset 99.\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run\n```\n\nLANGUAGE: shell\nCODE:\n```\nStarted consuming...\nFirst message received.\nDone consuming, first offset 100, last offset 199.\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocked Connection Listener in Java\nDESCRIPTION: Demonstrates how to implement a BlockedListener interface to handle connection blocked/unblocked notifications in the RabbitMQ Java client. The listener provides callbacks for both blocked and unblocked states.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/connection-blocked.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nConnection connection = factory.newConnection();\nconnection.addBlockedListener(new BlockedListener() {\n    public void handleBlocked(String reason) throws IOException {\n        // Connection is now blocked\n    }\n\n    public void handleUnblocked() throws IOException {\n        // Connection is now unblocked\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic RPC Client Usage for Fibonacci Calculation in Python\nDESCRIPTION: Simple example showing how a client would call the RPC service to calculate Fibonacci numbers. The client creates an instance of the RPC client class and calls the remote method, blocking until it receives the result.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-python.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfibonacci_rpc = FibonacciRpcClient()\nresult = fibonacci_rpc.call(4)\nprint(f\"fib(4) is {result}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Classic Queue in RabbitMQ\nDESCRIPTION: Demonstrates how to create a basic classic queue with default settings. Shows queue creation with exclusive access and auto-delete configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nmanagement.queue()\n    .name(\"my-queue\")\n    .exclusive(true)\n    .autoDelete(false)\n    .declare();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIQueueSpecification queueSpec = management\n    .Queue(\"myqueue\")\n    .Exclusive(true)\n    .AutoDelete(false)\nawait queueSpec.DeclareAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nqueue_name = \"myqueue\"\nmanagement.declare_queue(ClassicQueueSpecification(name=queue_name))\n```\n\nLANGUAGE: go\nCODE:\n```\nqueue_name = \"myqueue\"\nqueueInfo, err := management.DeclareQueue(context.TODO(), &ClassicQueueSpecification{\n            Name: queueName})\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Docker Container with Okta Configuration\nDESCRIPTION: These bash commands start a RabbitMQ Docker container with Okta OAuth 2.0 authentication configuration. It sets the MODE environment variable to 'okta' and uses a make command to start the container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-okta.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=okta\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ CLI Tools on Windows\nDESCRIPTION: Commands to explore available RabbitMQ CLI tools and their usage. These commands show help information for various RabbitMQ management tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# lists commands provided by rabbitmqctl.bat\nrabbitmqctl.bat help\n\n# lists commands provided by rabbitmq-diagnostics.bat\nrabbitmq-diagnostics.bat help\n\n# ...you guessed it!\nrabbitmq-plugins.bat help\n```\n\n----------------------------------------\n\nTITLE: Listing Cluster Nodes\nDESCRIPTION: Demonstrates how to list all nodes in the RabbitMQ cluster, providing information about the cluster topology.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list nodes\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMQ CLI Tools on Windows\nDESCRIPTION: Commands to explore available RabbitMQ CLI tools and their usage. These commands show help information for various RabbitMQ management tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# lists commands provided by rabbitmqctl.bat\nrabbitmqctl.bat help\n\n# lists commands provided by rabbitmq-diagnostics.bat\nrabbitmq-diagnostics.bat help\n\n# ...you guessed it!\nrabbitmq-plugins.bat help\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for RabbitMQ EC2 Instances\nDESCRIPTION: This JSON snippet defines an IAM policy that grants EC2 instances running RabbitMQ nodes permission to describe autoscaling instances and EC2 instances.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n              {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                         \"autoscaling:DescribeAutoScalingInstances\",\n                         \"ec2:DescribeInstances\"\n                         ],\n              \"Resource\": [\n                           \"*\"\n                           ]\n              }\n              ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Process Limits for Running RabbitMQ Instance\nDESCRIPTION: Command to display the effective limits of a running RabbitMQ process. The process ID must be replaced with the actual BEAM process PID running RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/$RABBITMQ_BEAM_PROCESS_PID/limits\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Shovel using rabbitmqctl (Windows PowerShell)\nDESCRIPTION: This PowerShell command sets up a dynamic shovel named 'my-shovel' on Windows, transferring messages between queues using AMQP 0-9-1 protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-dynamic.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_parameter shovel my-shovel ^\n  \"{\"\"src-protocol\"\": \"\"amqp091\"\", \"\"src-uri\"\":\"\"amqp://localhost\"\", \"\"src-queue\"\": \"\"source-queue\"\", ^\n   \"\"dest-protocol\"\": \"\"amqp091\"\", \"\"dest-uri\"\": \"\"amqp://remote.rabbitmq.local\"\", ^\n   \"\"dest-queue\"\": \"\"target-queue\"\", \"\"dest-queue-args\"\": {\"\"x-queue-type\"\": \"\"quorum\"\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternate Exchange Using Policy in Windows Command Prompt\nDESCRIPTION: Sets a policy to define 'my-ae' as an alternate exchange for the 'my-direct' exchange using the RabbitMQ CLI in Windows Command Prompt with proper JSON escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ae.md#2025-04-09_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nrabbitmqctl.bat set_policy AE \"^my-direct$\" \"{\"\"alternate-exchange\":\"\"my-ae\"\"}\" --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Listing Cipher Suites in Erlang Format (RabbitMQ CLI)\nDESCRIPTION: This command uses rabbitmq-diagnostics to list cipher suites in Erlang format, which is only accepted in the classic config format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format erlang -q\n```\n\n----------------------------------------\n\nTITLE: Recording mmap() System Calls with Linux perf (Bash)\nDESCRIPTION: Uses Linux perf to record mmap() system calls for the RabbitMQ process. This command captures the profile data needed to generate the mmap() flame graph.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo perf record --pid $(cat \"test-rabbit/rabbit@$(hostname --short)/rabbit@$(hostname --short).pid\") \\\n                 --event syscalls:sys_enter_mmap -g -- sleep 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Node TTL for RabbitMQ etcd Discovery\nDESCRIPTION: This snippet demonstrates how to configure the TTL (Time To Live) for node registration keys in etcd-based RabbitMQ peer discovery.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\n# node TTL in seconds\n# default: 30\ncluster_formation.etcd.node_ttl = 40\n```\n\n----------------------------------------\n\nTITLE: Disabling RabbitMQ Management Plugin\nDESCRIPTION: Disables the management plugin and all plugins that depend on it.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-plugins.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins disable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Filtering System Logs for RabbitMQ Entries\nDESCRIPTION: Command to filter systemd service logs to show only RabbitMQ-related entries. This helps isolate RabbitMQ logs from other system services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Adding a Signing Key to a Running RabbitMQ Node\nDESCRIPTION: Command to dynamically add an OAuth signing key to a running RabbitMQ node without requiring a restart, using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it rabbitmq rabbitmqctl add_signing_key legacy-token-2-key --pem-file=/conf/public-2.pem\n```\n\n----------------------------------------\n\nTITLE: Adding a Signing Key to a Running RabbitMQ Node\nDESCRIPTION: Command to dynamically add an OAuth signing key to a running RabbitMQ node without requiring a restart, using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it rabbitmq rabbitmqctl add_signing_key legacy-token-2-key --pem-file=/conf/public-2.pem\n```\n\n----------------------------------------\n\nTITLE: Running the Offset Tracking Consumer in Shell\nDESCRIPTION: Shell commands to run the offset tracking consumer program, demonstrating how the consumer picks up from where it left off between runs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo run offset_tracking_receive.go\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitoring-Only User in RabbitMQ using Windows cmd\nDESCRIPTION: This batch script demonstrates how to create a user with monitoring-only access to the RabbitMQ management UI in a Windows command prompt. It creates a user with a regular or complex password and grants empty permissions which allow viewing but not modifying resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nrem See the Access Control guide to learn about user management.\n\nrem password is provided as a command line argument\nrabbitmqctl.bat add_user \"monitoring\" \"9a55f70a841f18b97c3a7db939b7adc9e34a0f1d\"\n\nrem passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user \"monitoring\" \"w63pnZ&LnYMO(t\"\n\nrem grant the user empty permissions\nrabbitmqctl set_permissions --vhost \"vhost-name\" \"monitoring\" \"^$\" \"^$\" \"^$\"\n```\n\n----------------------------------------\n\nTITLE: Detailed Prometheus Metrics for Authentication Attempts (Plaintext)\nDESCRIPTION: Example Prometheus metrics output with detailed source information for authentication attempts. This includes metrics per remote address, username, and protocol, and requires additional configuration of the rabbitmq_prometheus plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-03-01-auth-attempts-metrics/index.md#2025-04-09_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# TYPE rabbitmq_auth_attempts_total counter\n# HELP rabbitmq_auth_attempts_total Total number of authorization attempts\nrabbitmq_auth_attempts_total{protocol=\"amqp091\"} 5\n# TYPE rabbitmq_auth_attempts_succeeded_total counter\n# HELP rabbitmq_auth_attempts_succeeded_total Total number of successful authentication attempts\nrabbitmq_auth_attempts_succeeded_total{protocol=\"amqp091\"} 0\n# TYPE rabbitmq_auth_attempts_failed_total counter\n# HELP rabbitmq_auth_attempts_failed_total Total number of failed authentication attempts\nrabbitmq_auth_attempts_failed_total{protocol=\"amqp091\"} 5\n# TYPE rabbitmq_auth_attempts_detailed_total counter\n# HELP rabbitmq_auth_attempts_detailed_total Total number of authorization attempts with source info\nrabbitmq_auth_attempts_detailed_total{remote_address=\"::ffff:127.0.0.1\",username=\"guest\",protocol=\"amqp091\"} 1\n# TYPE rabbitmq_auth_attempts_detailed_succeeded_total counter\n# HELP rabbitmq_auth_attempts_detailed_succeeded_total Total number of successful authorization attempts with source info\nrabbitmq_auth_attempts_detailed_succeeded_total{remote_address=\"::ffff:127.0.0.1\",username=\"guest\",protocol=\"amqp091\"} 0\n# TYPE rabbitmq_auth_attempts_detailed_failed_total counter\n# HELP rabbitmq_auth_attempts_detailed_failed_total Total number of failed authorization attempts with source info\nrabbitmq_auth_attempts_detailed_failed_total{remote_address=\"::ffff:127.0.0.1\",username=\"guest\",protocol=\"amqp091\"} 1\n```\n\n----------------------------------------\n\nTITLE: Enabling the RabbitMQ Stream Plugin\nDESCRIPTION: Command to enable the rabbitmq_stream plugin on a running RabbitMQ Docker container. This plugin ships as a core plugin in RabbitMQ 3.9.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Producer and Consumer in Go\nDESCRIPTION: Terminal commands to run the producer and consumer applications. The producer sends a message and exits while the consumer continuously listens for messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo run send.go\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run receive.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Name for RabbitMQ Messaging Topology Operator\nDESCRIPTION: YAML snippet showing how to modify the Deployment manifest to set a custom Kubernetes internal domain name for the RabbitMQ Messaging Topology Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-topology-operator.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  [...]\n  name: messaging-topology-operator\n  namespace: rabbitmq-system\nspec:\n  template:\n    [...]\n    spec:\n      containers:\n      - command:\n        - /manager\n        env:\n        - name: OPERATOR_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: MESSAGING_DOMAIN_NAME\n          value: \"my.cluster.domain\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in Batches with Confirms in PHP\nDESCRIPTION: This snippet demonstrates publishing messages in batches and waiting for confirmation of the entire batch. It uses a batch size of 100 messages and a 5-second timeout for acknowledgments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-php.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$batch_size = 100;\n$outstanding_message_count = 0;\nwhile (thereAreMessagesToPublish()) {\n    $data = ...;\n    $msg = new AMQPMessage($data);\n    $channel->basic_publish($msg, 'exchange');\n    $outstanding_message_count++;\n    if ($outstanding_message_count === $batch_size) {\n        $channel->wait_for_pending_acks(5.000);\n        $outstanding_message_count = 0;\n    }\n}\nif ($outstanding_message_count > 0) {\n    $channel->wait_for_pending_acks(5.000);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in Batches with Confirms in PHP\nDESCRIPTION: This snippet demonstrates publishing messages in batches and waiting for confirmation of the entire batch. It uses a batch size of 100 messages and a 5-second timeout for acknowledgments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-seven-php.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$batch_size = 100;\n$outstanding_message_count = 0;\nwhile (thereAreMessagesToPublish()) {\n    $data = ...;\n    $msg = new AMQPMessage($data);\n    $channel->basic_publish($msg, 'exchange');\n    $outstanding_message_count++;\n    if ($outstanding_message_count === $batch_size) {\n        $channel->wait_for_pending_acks(5.000);\n        $outstanding_message_count = 0;\n    }\n}\nif ($outstanding_message_count > 0) {\n    $channel->wait_for_pending_acks(5.000);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Plugin in RabbitMQ\nDESCRIPTION: Basic configuration for the OAuth 2.0 plugin in RabbitMQ specifying the resource server ID and issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ AMQP 0-9-1 Implementation of Delivery Tag Rule\nDESCRIPTION: Documentation of RabbitMQ's implementation of the delivery-tag channel-local rule, which states that a delivery tag is valid only within the channel from which the message was received, prohibiting acknowledgement on a different channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_ok\">ok</td>\n<td>MUST NOT</td>\n<td></td>\n<td>delivery-tag / channel-local</td>\n<td>\n    <div>\n        The delivery tag is valid only within the channel from which the message was received. I.e. a client MUST NOT receive a message on one channel and then acknowledge it on another.\n    </div>\n</td>\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins with rabbitmq-plugins\nDESCRIPTION: Commands for listing available plugins and their status using different formats. Shows standard listing, silent mode without headers, and JSON output format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list -s\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins list --formatter=json\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Namespace Path\nDESCRIPTION: Configuration for specifying the Kubernetes namespace path for RabbitMQ cluster\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n\n# ...\n\n# Default value: /var/run/secrets/kubernetes.io/serviceaccount/namespace\ncluster_formation.k8s.namespace_path = /var/run/secrets/kubernetes.io/serviceaccount/namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Manual Service Address\nDESCRIPTION: Configuration for manually specifying the service address in Consul\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do not compute service address, it will be specified below\ncluster_formation.consul.svc_addr_auto = false\n# service address, will be communicated to other nodes\ncluster_formation.consul.svc_addr = hostname1.rmq.eng.example.local\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Exchanges via Command Line\nDESCRIPTION: Uses rabbitmqctl to list all exchanges on the RabbitMQ server, showing both default exchanges and any user-created exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_exchanges\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Producer\nDESCRIPTION: Command to run the producer script, which will send a single 'Hello World!' message to the 'hello' queue and then exit. The producer program runs once and terminates after sending the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython send.py\n# => [x] Sent 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Multiplexing on Server-side with Node.js\nDESCRIPTION: This code demonstrates how to set up WebSocket multiplexing on the server side using Node.js, creating multiple 'fake' services from a single real SockJS service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-02-23-how-to-compose-apps-using-websockets/index.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar real_service = sockjs.createServer();\n\nvar multiplexer = new multiplex_server.MultiplexServer(real_service);\nvar fake_service_1 = multiplexer.registerChannel('ann');\nvar fake_service_2 = multiplexer.registerChannel('bob');\n```\n\n----------------------------------------\n\nTITLE: Advanced LDAP Configuration\nDESCRIPTION: Complex LDAP configuration with access queries and permissions in advanced config format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_36\n\nLANGUAGE: erlang\nCODE:\n```\n[{rabbitmq_auth_backend_ldap,[\n    {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}\n            ]\n      }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n]}].\n```\n\n----------------------------------------\n\nTITLE: Attaching an Event to ChangeState for Publisher in C#\nDESCRIPTION: Shows how to attach an event listener to the ChangeState event of a RabbitMQ publisher in C#. The listener can react to state changes of the publisher.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\npublisher.ChangeState += (sender, fromState, toState, e) =>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cloudsmith Signing Key (Bash)\nDESCRIPTION: Downloads and imports the Cloudsmith signing key used for RabbitMQ package distribution.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/signatures.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key -o cloudsmith-rabbitmq-key.asc\ngpg --import cloudsmith-rabbitmq-key.asc\n```\n\n----------------------------------------\n\nTITLE: Listing Permissions with rabbitmqctl in PowerShell\nDESCRIPTION: These commands use rabbitmqctl to list permissions for users in different virtual hosts in a PowerShell environment. They show how to perform the same operation as in Bash.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_permissions --vhost /\nrabbitmqctl.bat list_permissions --vhost gw1\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server with Systemd\nDESCRIPTION: Commands to enable and control RabbitMQ server using systemd\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable rabbitmq-server\n\nsystemctl start rabbitmq-server\n\nsystemctl status  rabbitmq-server\n\nsystemctl stop rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Basic Authentication for RabbitMQ Web STOMP\nDESCRIPTION: Erlang configuration snippet to enable HTTP Basic Authentication for the Web STOMP plugin, allowing credentials to be passed via HTTP headers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/web-stomp.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_web_stomp,\n      [{use_http_auth, true}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key for APT\nDESCRIPTION: Downloads and imports the RabbitMQ signing key for Debian/Ubuntu package management.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/signatures.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg\n```\n\n----------------------------------------\n\nTITLE: Clearing dnf Cache on RPM-based Systems\nDESCRIPTION: Commands for clearing the local dnf cache to ensure visibility of new package versions in RPM repositories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-rpm.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndnf clean metadata\n\ndnf clean dbcache\n\ndnf clean all\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Prefetch in RabbitMQ Advanced Configuration\nDESCRIPTION: This Erlang snippet demonstrates how to set a default prefetch value in the RabbitMQ advanced configuration file, which will be applied if the consumer doesn't specify one.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumer-prefetch.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n%% advanced.config file\n[\n {rabbit, [\n       {default_consumer_prefetch, {false,250}}\n     ]\n }\n].\n```\n\n----------------------------------------\n\nTITLE: Referencing AMQP Methods in Markdown\nDESCRIPTION: This snippet shows how to reference various AMQP methods using inline code formatting in Markdown. It's used throughout the document to highlight specific AMQP methods.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/semantics.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">basic.publish</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">basic.ack</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">basic.reject</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">basic.return</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">tx.commit</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">tx.commit-ok</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">basic.recover</span>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<span class=\"code\">basic.nack</span>\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Watermark in RabbitMQ\nDESCRIPTION: Command to set RabbitMQ's memory high watermark to 0, which effectively blocks all publishing in a cluster by triggering a resource alarm.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/publishers/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vm_memory_high_watermark 0\n```\n\n----------------------------------------\n\nTITLE: Advanced TLS Configuration for RabbitMQ etcd Discovery\nDESCRIPTION: This snippet demonstrates advanced TLS configuration options for RabbitMQ etcd-based peer discovery, including cipher suite selection and secure renegotiation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n\n# use secure session renegotiation\ncluster_formation.etcd.ssl_options.secure_renegotiate   = true\n\n# Explicitly list enabled cipher suites. This can break connectivity\n# and is not necessary most of the time.\ncluster_formation.etcd.ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager for RabbitMQ Messaging Topology Operator\nDESCRIPTION: Command to install cert-manager version 1.3.1 on a Kubernetes cluster as a prerequisite for RabbitMQ Messaging Topology Operator installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-topology-operator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Time for Daily Log Rotation\nDESCRIPTION: Configuration setting to rotate logs daily at a specific time (23:00/11:00 p.m.).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every day at 23:00 (11:00 p.m.)\nlog.file.rotation.date = $D23\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues with rabbitmqctl\nDESCRIPTION: Shell commands to list the queues in RabbitMQ and their message counts on Linux/macOS and Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-elixir.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Rates Mode for RabbitMQ Management Plugin\nDESCRIPTION: This snippet demonstrates how to set the message rate mode for the RabbitMQ Management plugin using the INI configuration format. It controls the level of detail for message rate statistics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\n# supported values: basic, detailed, none\nmanagement.rates_mode = basic\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server with Docker\nDESCRIPTION: Command to start a RabbitMQ 4.1 server instance using Docker, exposing necessary ports for AMQP and management interface.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-12-13-amqp-filter-expressions/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --name rabbitmq \\\n    -p 5672:5672 -p 15672:15672 \\\n    rabbitmq:4.1-rc-management\n```\n\n----------------------------------------\n\nTITLE: Importing JavaClientDocURL Component in JavaScript\nDESCRIPTION: This code snippet imports the JavaClientDocURL component from a specific path. It's used to dynamically generate URLs for Java client documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/index.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  JavaClientDocURL,\n} from '@site/src/components/JavaClient';\n```\n\n----------------------------------------\n\nTITLE: Publishing to a Default Exchange in Ruby\nDESCRIPTION: Demonstrates how to publish a message to RabbitMQ's default (nameless) exchange. Messages are routed to queues with names matching the routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nchannel.default_exchange.publish('hello', routing_key: 'hello')\n```\n\n----------------------------------------\n\nTITLE: Peeking at Messages in a Quorum Queue in RabbitMQ (Bash)\nDESCRIPTION: Displays details of a message at a specific position in a quorum queue. This operation is currently only supported for quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-queues.8.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-queues peek --vhost \"a-vhost\" \"a-queue\" \"1\"\n```\n\n----------------------------------------\n\nTITLE: Running Mixed-Version Cluster Tests\nDESCRIPTION: Command to run testsuites with mixed-version cluster configuration, using environment variables to specify the secondary umbrella location and disable feature flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/feature-flags/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nSECONDARY_UMBRELLA=/path/to/secondary-umbrella \\\nRABBITMQ_FEATURE_FLAGS= \\\nmake tests\n```\n\n----------------------------------------\n\nTITLE: Increasing TCP Connection Backlog in RabbitMQ with Classic Config\nDESCRIPTION: Classic format configuration to increase the TCP connection backlog, which helps handle connection spikes in environments with high connection churn.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_30\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n    {tcp_listen_options, [\n                          {backlog,       4096},\n                          {nodelay,       true},\n                          {linger,        {true, 0}},\n                          {exit_on_close, false}\n                         ]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Classic Configuration Format\nDESCRIPTION: Complete example using classic configuration format combining all LDAP authentication and authorization settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_47\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},\n  {rabbitmq_auth_backend_ldap,\n   [ {servers,               [\"my-ldap-server\"]},\n     {user_dn_pattern,       \"cn=${username},ou=People,dc=example,dc=com\"},\n     {use_ssl,               false},\n     {port,                  389},\n     {log,                   false},\n     {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}\n            ]\n     }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n   ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Diagnostics Listeners Command\nDESCRIPTION: Lists all listeners (bound sockets) on the node to inspect protocols and ports the node is listening on for client, CLI tool and peer connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics listeners\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Expiration in RabbitMQ .NET Client\nDESCRIPTION: Shows how to set an expiration time on a message. The expiration property is set as a string value in milliseconds (36,000,000 ms = 10 hours), after which the message will be discarded if not consumed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes(\"Hello, world!\");\n\nvar props = new BasicProperties();\nprops.ContentType = \"text/plain\";\nprops.DeliveryMode = 2;\nprops.Expiration = \"36000000\";\n\nawait channel.BasicPublishAsync(exchangeName, routingKey, true, props, messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Application Status (Bash)\nDESCRIPTION: Health check that fails if the RabbitMQ application is not running on the target node. This check will fail if rabbitmqctl was used to stop the application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_running\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Application Status (Bash)\nDESCRIPTION: Health check that fails if the RabbitMQ application is not running on the target node. This check will fail if rabbitmqctl was used to stop the application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics check_running\n```\n\n----------------------------------------\n\nTITLE: Generating Erlang Documentation\nDESCRIPTION: Command to generate edoc documentation for the feature flags implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/feature-flags/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngmake edoc\n```\n\n----------------------------------------\n\nTITLE: Checking Unacknowledged Messages in RabbitMQ using rabbitmqctl\nDESCRIPTION: Command line instructions for debugging unacknowledged messages in RabbitMQ queues. These commands help identify if messages are not being properly acknowledged by showing the count of ready and unacknowledged messages in the queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_queues name messages_ready messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Administrator Credentials Secret using kubectl\nDESCRIPTION: Bash commands to create a Kubernetes Secret containing administrator credentials for RabbitMQ. The username and password are read from files and stored in a Secret named 'rabbitmq-admin'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# this is merely an example, you are welcome to use a different username\necho -n \"administrator\" > user\n# this is merely an example, you MUST use a different, generated password value!\necho -n \"g3N3rAtED-Pa$$w0rd\" > pass\nkubectl create secret generic rabbitmq-admin --from-file=./user --from-file=./pass\n```\n\n----------------------------------------\n\nTITLE: Alternative TLS Version Check (Windows)\nDESCRIPTION: Alternative command to check TLS versions using rabbitmqctl eval on Windows systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat eval 'ssl:versions().'\n```\n\n----------------------------------------\n\nTITLE: Displaying AMQP Test Results in HTML Table\nDESCRIPTION: This HTML snippet shows a table structure used to display the results of AMQP compliance tests for RabbitMQ. It includes test case names, their status (ok, invalid), and explanations for invalid tests.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/interoperability.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n    <tbody>\n        <tr>\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>tests_0-8.broker.BrokerTests.test_closed_channel</td>\n            <td></td>\n        </tr>\n        <!-- More table rows with test results -->\n        <tr>\n            <td class=\"statusCell status_invalid\">invalid</td>\n            <td>tests_0-8.tx.TxTests.test_auto_rollback</td>\n            <td>\n                The test is actually the same as test_rollback and is therefore invalid for the same reason.\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Busy Distribution Port Warning Log\nDESCRIPTION: Example of warning log message when inter-node communication buffer reaches capacity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n2019-04-06 22:48:19.031 [warning] <0.242.0> rabbit_sysmon_handler busy_dist_port <0.1401.0>\n```\n\n----------------------------------------\n\nTITLE: Bulk Permission Operations Across Multiple Virtual Hosts\nDESCRIPTION: Shows how to script bulk permission operations across multiple virtual hosts by using the list_vhosts command to retrieve all virtual hosts and then applying permissions to each.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Assumes a Linux shell.\n# Grants a user permissions to all virtual hosts.\nfor v in $(rabbitmqctl list_vhosts --silent); do rabbitmqctl set_permissions -p $v \"a-user\" \".*\" \".*\" \".*\"; done\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat list_vhosts --silent | %{ rabbitmqctl.bat set_permissions -p $_ 'a-user' '.*' '.*' '.*' }\n```\n\n----------------------------------------\n\nTITLE: Sample Auth0 JWT Access Token Structure\nDESCRIPTION: Example JWT token structure showing the claims and permissions issued by Auth0 for RabbitMQ authentication\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-auth0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"iss\": \"https://dev-tm5ebsbbdcbqddcj.us.auth0.com/\",\n  \"sub\": \"auth0|66d980b862efcd9f5144f42a\",\n  \"aud\": [\n    \"rabbitmq\",\n    \"https://dev-tm5ebsbbdcbqddcj.us.auth0.com/userinfo\"\n  ],\n  \"iat\": 1725533554,\n  \"exp\": 1725619954,\n  \"scope\": \"openid profile rabbitmq.tag:administrator\",\n  \"azp\": \"IC1fqsSjkQq2cVsYyHUuQyq30OAYuUv2\",\n  \"permissions\": [\n    \"rabbitmq.configure:*/*\",\n    \"rabbitmq.read:*/*\",\n    \"rabbitmq.tag:administrator\",\n    \"rabbitmq.write:*/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RabbitMQ Man Pages - Shell Script\nDESCRIPTION: Shell command for generating HTML man pages from source files. The script requires the path to the rabbitmq-server repository and uses make(1) to generate the files.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./website/docs/man/update-manpages.sh /path/to/rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Checking for Classic Queue Mirroring Policies in RabbitMQ using Bash\nDESCRIPTION: Bash commands to detect policies that enable classic queue mirroring and list them in a formatted table. These diagnostic tools help identify policies that need to be changed during migration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/migrate-mcq-to-qq.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# exits with a non-zero code if any policies in the cluster\n# enable classic queue mirroring\nrabbitmq-diagnostics check_if_cluster_has_classic_queue_mirroring_policy\n\n# lists policies that enable classic queue mirroring\nrabbitmq-diagnostics list_policies_with_classic_queue_mirroring -s --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scope Field in RabbitMQ\nDESCRIPTION: Configuration to specify a custom JWT field for RabbitMQ scopes instead of the standard scope field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.additional_scopes_key = extra_scope\n```\n\n----------------------------------------\n\nTITLE: Message Rejection in Java\nDESCRIPTION: Demonstrates message rejection and requeuing patterns using RabbitMQ Java client. Shows both discarding messages and requeueing them using Channel#basicReject.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nboolean autoAck = false;\nchannel.basicConsume(queueName, autoAck, \"a-consumer-tag\",\n     new DefaultConsumer(channel) {\n         @Override\n         public void handleDelivery(String consumerTag,\n                                    Envelope envelope,\n                                    AMQP.BasicProperties properties,\n                                    byte[] body)\n             throws IOException\n         {\n             long deliveryTag = envelope.getDeliveryTag();\n             // negatively acknowledge, the message will\n             // be discarded\n             channel.basicReject(deliveryTag, false);\n         }\n     });\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Operation Timeout in RabbitMQ (INI)\nDESCRIPTION: Default channel operation timeout in milliseconds, used internally for operations that need to complete within a time limit.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nchannel_operation_timeout = 15000\n```\n\n----------------------------------------\n\nTITLE: Equivalent classic format configuration with escaped values\nDESCRIPTION: The same default user and password configuration in the classic Erlang terms format, showing how special characters are handled differently.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n%% this is a comment\n[\n  {rabbit, [\n      {default_user, <<\"40696e180b610ed9\">>},\n      {default_pass, <<\"efd3!53a9@_2#a08\">>}\n    ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Resetting a Running RabbitMQ Node\nDESCRIPTION: Commands to reset a running and responsive RabbitMQ node (rabbit1) by stopping the application and then resetting it, which will clear all data and settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl stop_app\n# => Stopping node rabbit@rabbit1 ...done.\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit1 ...done.\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest with RabbitMQ Stream (Bash)\nDESCRIPTION: Executes PerfTest to publish messages to a RabbitMQ stream queue for 4 minutes. This command sets up a persistent stream queue and uses a single producer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./perf-test --queue my-stream --queue-args x-queue-type=stream --auto-delete false --flag persistent \\\n            --producers 1 --consumers 0 --time 240\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Hostname\nDESCRIPTION: Configuration for Syslog server using hostname instead of IP address.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.host = my.syslog-server.local\nlog.syslog.port = 1514\n```\n\n----------------------------------------\n\nTITLE: Verifying the Integrity of RabbitMQ Key Transition Statement\nDESCRIPTION: Command to download and verify the PGP signature on the key transition statement from the RabbitMQ website.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/static/key-transition-0xF7B8CEA6056E8E56.txt#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget -q -O- https://www.rabbitmq.com/key-transition-0xF7B8CEA6056E8E56.txt | gpg --verify\n```\n\n----------------------------------------\n\nTITLE: Complete RabbitMQ Management Plugin Configuration Example\nDESCRIPTION: A comprehensive configuration example for RabbitMQ with management plugin settings, including TCP ports, SSL settings, log directories, statistics collection intervals, and data retention policies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\nlisteners.tcp.default = 5672\n\ncollect_statistics_interval = 10000\n\n## Note: this uses the core `load_definitions` key over\n## now deprecated `management.load_definitions`\n# load_definitions = /path/to/exported/definitions.json\n\nmanagement.tcp.port = 15672\nmanagement.tcp.ip   = 0.0.0.0\n\nmanagement.ssl.port       = 15671\nmanagement.ssl.ip         = 0.0.0.0\nmanagement.ssl.cacertfile = /path/to/ca_certificate.pem\nmanagement.ssl.certfile   = /path/to/server_certificate.pem\nmanagement.ssl.keyfile    = /path/to/server_key.pem\n\nmanagement.http_log_dir = /path/to/rabbit/logs/http\n\nmanagement.rates_mode = basic\n\n# Configure how long aggregated data (such as message rates and queue\n# lengths) is retained.\n# Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)\nmanagement.sample_retention_policies.global.minute    = 5\nmanagement.sample_retention_policies.global.hour  = 60\nmanagement.sample_retention_policies.global.day = 1200\n\nmanagement.sample_retention_policies.basic.minute   = 5\nmanagement.sample_retention_policies.basic.hour = 60\n\nmanagement.sample_retention_policies.detailed.10 = 5\n```\n\n----------------------------------------\n\nTITLE: TCP Buffer Configuration Note\nDESCRIPTION: Reference to the tcp_listen_options.buffer configuration parameter which is now ignored due to auto-tuning implementation. This setting previously controlled the buffer size for TCP connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2025-04-08-4.1-performance-improvements/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\ntcp_listen_options.buffer\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Durable Queue in RabbitMQ\nDESCRIPTION: Example of creating a specifically named durable queue called 'task_queue' to avoid conflicts with existing queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nq, err := ch.QueueDeclare(\n  \"task_queue\", // name\n  true,         // durable\n  false,        // delete when unused\n  false,        // exclusive\n  false,        // no-wait\n  nil,          // arguments\n)\nfailOnError(err, \"Failed to declare a queue\")\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Host Health with rabbitmq-diagnostics in Bash\nDESCRIPTION: Command to verify the health of all virtual hosts on a RabbitMQ node. This checks whether any virtual host dependencies have failed across all configured vhosts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/monitoring/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q check_virtual_hosts --node rabbit@target-hostname\n# if the check succeeded, exit code will be 0\n```\n\n----------------------------------------\n\nTITLE: Removing Certificate from Windows Root Certificate Store\nDESCRIPTION: PowerShell command to remove a specific certificate from the Windows user Root certificate store using its unique hash identifier. This is useful for removing expired or unwanted certificates from the trust store.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\ncertmgr -del -c -sha1 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E -s Root\n\n# … snip …\n\nCertificate removed from store.\n```\n\n----------------------------------------\n\nTITLE: Compiling RabbitMQ Java Client Programs\nDESCRIPTION: This bash command demonstrates how to compile the Java programs (NewTask.java and Worker.java) with the necessary RabbitMQ client libraries in the classpath.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\njavac -cp $CP NewTask.java Worker.java\n```\n\n----------------------------------------\n\nTITLE: Testing Round-robin Dispatch - Multiple Workers\nDESCRIPTION: Shell commands showing how to test round-robin task distribution between multiple workers using different console windows.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-php.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# shell 1\nphp worker.php\n# => [*] Waiting for messages. To exit press CTRL+C\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 2\nphp worker.php\n# => [*] Waiting for messages. To exit press CTRL+C\n```\n\nLANGUAGE: bash\nCODE:\n```\n# shell 3\nphp new_task.php First message.\nphp new_task.php Second message..\nphp new_task.php Third message...\nphp new_task.php Fourth message....\nphp new_task.php Fifth message.....\n```\n\n----------------------------------------\n\nTITLE: Windows TLS Configuration File Settings\nDESCRIPTION: TLS configuration file for Windows environments specifying certificate paths and security settings using Windows-style paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[\n    {server, [\n        {cacertfile, \"C:/Path/To/ca_certificate.pem\"},\n        {certfile, \"C:/Path/To/server_certificate.pem\"},\n        {keyfile, \"C:/Path/To/server_key.pem\"},\n        {password, \"password-if-keyfile-is-encrypted\"},\n        {secure_renegotiate, true},\n        {verify, verify_peer},\n        {fail_if_no_peer_cert, true}\n    ]},\n    {client, [\n        {cacertfile, \"C:/Path/To/ca_certificate.pem\"},\n        {certfile, \"C:/Path/To/client_certificate.pem\"},\n        {keyfile, \"C:/Path/To/client_key.pem\"},\n        {password, \"password-if-keyfile-is-encrypted\"},\n        {secure_renegotiate, true},\n        {verify, verify_peer}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP TLS Options in RabbitMQ\nDESCRIPTION: This snippet shows how to configure various TLS options for LDAP authentication in RabbitMQ, including CA certificates, client certificates, SNI, hostname verification, and peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# local filesystem path to a CA certificate bundle file\nauth_ldap.ssl_options.cacertfile = /path/to/ca_certificate.pem\n\n# local filesystem path to a client certificate file\nauth_ldap.ssl_options.certfile = /path/to/client_certfile.pem\n\n# local filesystem path to a client private key file\nauth_ldap.ssl_options.keyfile = /path/to/client_key.pem\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Sets Server Name Indication for LDAP connections.\n# If an LDAP server host is availble via multiple domain names, set this value\n# to the preferred domain name target LDAP server\nauth_ldap.ssl_options.sni = ldap.identity.eng.megacorp.local\n```\n\nLANGUAGE: ini\nCODE:\n```\n# take wildcards into account when performing hostname verification\nauth_ldap.ssl_options.hostname_verification = wildcard\n```\n\nLANGUAGE: ini\nCODE:\n```\n# disables hostname verification\nauth_ldap.ssl_options.hostname_verification = none\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Enables peer certificate chain verification.\n# This behavior is the default starting with Erlang 26 (and thus RabbitMQ 3.13+)/\nauth_ldap.ssl_options.verify = verify_peer\n```\n\nLANGUAGE: ini\nCODE:\n```\n# Disables peer certificate chain verification.\n#\n# Doing so loses one of the key benefits of TLS and make the setup less secure\n# but also simplifies node configuration.\nauth_ldap.ssl_options.verify = verify_none\n```\n\nLANGUAGE: ini\nCODE:\n```\n# if target LDAP server does not present a certificate, should the connection be aborted?\nauth_ldap.ssl_options.fail_if_no_peer_cert = true\n```\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.ssl_options.depth = 5\n```\n\nLANGUAGE: ini\nCODE:\n```\n# use TLSv1.2 only\nssl_options.versions.1 = tlsv1.2\n```\n\n----------------------------------------\n\nTITLE: Listing Certificates in Mono Trust Certificate Store\nDESCRIPTION: Bash command to list all certificates in the Mono Trust certificate store on Linux. This helps verify that certificates have been correctly imported and shows details like expiration dates and unique identifiers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncertmgr -list -c Trust\n\n# … snip …\n\nSelf-signed X.509 v3 Certificate\n  Serial Number: AC3F2B74ECDD9EEA00\n  Issuer Name:   CN=MyTestCA\n  Subject Name:  CN=MyTestCA\n  valid From:    25/08/2018 14:03:01\n  valid Until:   24/09/2018 14:03:01\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n```\n\n----------------------------------------\n\nTITLE: Enabling Denied Deprecated Feature Configuration\nDESCRIPTION: Configuration example showing how to re-enable a deprecated feature that is denied by default.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/deprecated-features/index.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Permit a deprecated feature that is denied by default.\ndeprecated_features.permit.some_deprecated_feature = true\n```\n\n----------------------------------------\n\nTITLE: Enabling proxy protocol in RabbitMQ\nDESCRIPTION: Configuration to enable the proxy protocol, which requires a proxy protocol header to be sent when an AMQP connection is opened. Requires a proxy-protocol compliant reverse proxy in front of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\nproxy_protocol = false\n```\n\n----------------------------------------\n\nTITLE: Confirming RabbitmqCluster Custom Resource Availability in Kubernetes\nDESCRIPTION: This command checks if the RabbitmqCluster Custom Resource Definition is available in the Kubernetes cluster by listing all custom resource definitions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get customresourcedefinitions.apiextensions.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Client ID and Label for Production Resource\nDESCRIPTION: Configuration for production resource including client ID and custom label for UI display.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.1.id = rabbit_prod\nmanagement.oauth_resource_servers.1.oauth_client_id = rabbit_prod_mgt_ui\nmanagement.oauth_resource_servers.1.label = RabbitMQ Production\n```\n\n----------------------------------------\n\nTITLE: Importing DotNetClientDocURL Component in JavaScript\nDESCRIPTION: This code snippet imports the DotNetClientDocURL component from a specific path. It's used to dynamically generate URLs for .NET client documentation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/index.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  DotNetClientDocURL,\n} from '@site/src/components/DotNetClient';\n```\n\n----------------------------------------\n\nTITLE: Publishing a Persistent Message in RabbitMQ Java Client\nDESCRIPTION: Publishes a message with persistent delivery mode, priority, and content-type properties. The persistent delivery mode ensures the message is stored to disk and can survive broker restarts.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nchannel.basicPublish(exchangeName, routingKey, mandatory,\n                     MessageProperties.PERSISTENT_TEXT_PLAIN,\n                     messageBodyBytes);\n```\n\n----------------------------------------\n\nTITLE: Blocking Client Connections to a Virtual Host\nDESCRIPTION: Command to block all client connections to a RabbitMQ virtual host by setting the maximum connection limit to zero using the rabbitmqctl set_vhost_limits command.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-connections\": 0}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Last Supported Versions for Specific Erlang Releases in HTML\nDESCRIPTION: This HTML snippet shows information about the last RabbitMQ versions supporting specific Erlang releases (R16B03 and R13B03). It provides guidance for users who must use older Erlang versions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/which-erlang.md#2025-04-09_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<h3>Last Version to Support R16B03</h3>\n\n<p>If you absolutely must use an older version of Erlang, RabbitMQ\n3.6.14 is the newest version compatible with R16B03.</p>\n\n<h3>Last Version to Support R13B03</h3>\n\n<p>If you absolutely must use an older version of Erlang, <a href=\"https://github.com/rabbitmq/rabbitmq-server/releases/tag/rabbitmq_v3_5_8\">RabbitMQ 3.5.8</a>\nis the newest version compatible with R13B03.</p>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple RabbitMQ Cluster in YAML\nDESCRIPTION: YAML definition for creating a basic RabbitMQ cluster named 'hello-world'. This is the simplest configuration using default settings provided by the Cluster Operator.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n\tname: hello-world\n```\n\n----------------------------------------\n\nTITLE: Removing Certificate from Windows Root Certificate Store\nDESCRIPTION: PowerShell command to remove a specific certificate from the Windows user Root certificate store using its unique hash identifier. This is useful for removing expired or unwanted certificates from the trust store.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\ncertmgr -del -c -sha1 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E -s Root\n\n# … snip …\n\nCertificate removed from store.\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Queue Message TTL Using RabbitMQ Policy\nDESCRIPTION: Configures a message TTL of 60 seconds for all queues using the RabbitMQ management CLI. This policy will apply to all queues in the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl set_policy TTL \".*\" '{\"message-ttl\":60000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Handling Stopped RabbitMQ Nodes After Cluster Removal\nDESCRIPTION: Procedure for resetting and restarting a RabbitMQ node that was removed from a cluster while stopped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# on rabbit1\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit1 ...\n# => Error: inconsistent_cluster: Node rabbit@rabbit1 thinks it's clustered with node rabbit@rabbit2, but rabbit@rabbit2 disagrees\n\nrabbitmqctl reset\n# => Resetting node rabbit@rabbit1 ...done.\n\nrabbitmqctl start_app\n# => Starting node rabbit@rabbit1 ...\n# => ...done.\n\n# on rabbit1\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit1 ...\n# => [{nodes,[{disc,[rabbit@rabbit1]}]},{running_nodes,[rabbit@rabbit1]}]\n# => ...done.\n\n# on rabbit2\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit2 ...\n# => [{nodes,[{disc,[rabbit@rabbit2]}]},{running_nodes,[rabbit@rabbit2]}]\n# => ...done.\n\n# on rabbit3\nrabbitmqctl cluster_status\n# => Cluster status of node rabbit@rabbit3 ...\n```\n\n----------------------------------------\n\nTITLE: Starting Web Portal for RabbitMQ\nDESCRIPTION: Command to start the Node.js web portal that serves as the identity provider interface\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-idp-initiated.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake start-portal\n```\n\n----------------------------------------\n\nTITLE: Downloading rabbitmqadmin v1 from GitHub\nDESCRIPTION: Alternative method to download rabbitmqadmin v1 directly from the RabbitMQ GitHub repository. The link points to the v4.0.x branch of the rabbitmq-server project.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://raw.githubusercontent.com/rabbitmq/rabbitmq-server/v4.0.x/deps/rabbitmq_management/bin/rabbitmqadmin\n```\n\n----------------------------------------\n\nTITLE: Verification Output for Node in Regular Operating Mode in RabbitMQ\nDESCRIPTION: Example output from rabbitmq-diagnostics status showing a node that is in regular operating mode. The output includes runtime information and the maintenance status flag set to false.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nStatus of node rabbit@hostname ...\nRuntime\n\nOS PID: 25531\nOS: macOS\nUptime (seconds): 48540\nIs under maintenance?: false\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Error Message for Exceeding Channel Limit\nDESCRIPTION: Displays an error message when the configured channel limit is exceeded, showing the connection details and the reason for the error.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n2019-02-11 16:04:06.296 [error] <0.887.0> Error on AMQP connection <0.887.0> (127.0.0.1:49956 -> 127.0.0.1:5672, vhost: '/', user: 'guest', state: running), channel 23:\n operation none caused a connection exception not_allowed: \"number of channels opened (22) has reached the negotiated channel_max (22)\"\n```\n\n----------------------------------------\n\nTITLE: Logging Abrupt AMQP Connection Closure in RabbitMQ\nDESCRIPTION: Example log entry for an abruptly closed AMQP connection, logged as a warning.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-06-17 06:28:40.868 [warning] <0.646.0> closing AMQP connection <0.646.0> (127.0.0.1:58667 -> 127.0.0.1:5672, vhost: '/', user: 'guest'):\nclient unexpectedly closed TCP connection\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resources in RabbitMQ\nDESCRIPTION: Example configuration for setting up multiple OAuth 2.0 resources in the RabbitMQ OAuth 2.0 plugin. This defines four different resource servers with different IDs that can be used for authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.issuer = http://some_idp_url\nauth_oauth2.scope_prefix = rabbitmq.\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\nauth_oauth2.resource_servers.3.id = rabbit_qa\nauth_oauth2.resource_servers.4.id = rabbit_internal\n```\n\n----------------------------------------\n\nTITLE: Referencing AMQP basic.reject Method in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the AMQP basic.reject method in markdown format. It's used to introduce the main topic of the article.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-08-03-well-ill-let-you-go-basicreject-in-rabbitmq/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`basic.reject`\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for a Virtual Host via HTTP API in RabbitMQ\nDESCRIPTION: This JSON payload is used to enable or disable tracing for a virtual host using the PUT /api/vhosts/{name} endpoint.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\"tracing\":true}\n```\n\n----------------------------------------\n\nTITLE: Running Health Check on a Specific RabbitMQ Node in Bash\nDESCRIPTION: Example of running a health check (checking alarms) on a specific RabbitMQ node by providing the node name with the -n option.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -n rabbit@warp10 check_alarms\n```\n\n----------------------------------------\n\nTITLE: Running Health Check on a Specific RabbitMQ Node in Bash\nDESCRIPTION: Example of running a health check (checking alarms) on a specific RabbitMQ node by providing the node name with the -n option.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -n rabbit@warp10 check_alarms\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Boot Status (Bash)\nDESCRIPTION: Reports if the RabbitMQ application is currently booting (not booted/running or stopped) on the target node. This command is useful for monitoring the startup process of RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics is_booting\n```\n\n----------------------------------------\n\nTITLE: Setting Memory High Watermark in RabbitMQ\nDESCRIPTION: The set_vm_memory_high_watermark command configures the memory threshold at which flow control is triggered. It can be set as a fraction of total system memory or as an absolute value with memory unit symbols (k/kiB, M/MiB, G/GiB, kB, MB, GB).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\nset_vm_memory_high_watermark fraction\n```\n\nLANGUAGE: bash\nCODE:\n```\nset_vm_memory_high_watermark [absolute] memory_limit\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration Example\nDESCRIPTION: Example YAML configuration showing Prometheus setup with label selectors for Pod and Service monitors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/operator-monitoring.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  name: prometheus\nspec:\n  serviceAccountName: prometheus\n  serviceMonitorSelector:\n    matchLabels:\n      team: frontend\n  podMonitorSelector:\n    matchLabels:\n      team: frontend\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Queue Limit in RabbitMQ Virtual Host\nDESCRIPTION: Command to limit the total number of queues in a specific virtual host. Uses rabbitmqctl with a JSON configuration to set the max-queues parameter to a specific value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-queues\": 1024}'\n```\n\n----------------------------------------\n\nTITLE: Publishing Tasks to RabbitMQ Queue\nDESCRIPTION: Commands to publish multiple messages with varying complexity (denoted by the number of dots) to the task queue. These messages will be distributed among available workers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# shell 3\nmix run new_task.exs First message.\nmix run new_task.exs Second message..\nmix run new_task.exs Third message...\nmix run new_task.exs Fourth message....\nmix run new_task.exs Fifth message.....\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Syslog with RFC 5424\nDESCRIPTION: Configures Syslog to use TCP transport with RFC 5424 protocol.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nlog.syslog = true\nlog.syslog.transport = tcp\nlog.syslog.protocol = rfc5424\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Listing Feature Flags with Shell Command\nDESCRIPTION: Alternative command syntax to list all feature flags and their current state in a RabbitMQ cluster using rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management-cli.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# same command as above\nrabbitmqadmin list feature_flags\n```\n\n----------------------------------------\n\nTITLE: Generating a RabbitMQ Server Report for Support\nDESCRIPTION: Command to generate a comprehensive server status report for troubleshooting or support purposes. The output contains all server status information and should be redirected to a file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl report > server_report.txt\n```\n\n----------------------------------------\n\nTITLE: Running Topic Exchange Consumers with Different Binding Patterns\nDESCRIPTION: Command examples showing how to start the consumer with different binding patterns to demonstrate the filtering capabilities of topic exchanges, from receiving all messages to specific filtering based on facility or severity.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-python.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython receive_logs_topic.py \"#\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npython receive_logs_topic.py \"kern.*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npython receive_logs_topic.py \"*.critical\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npython receive_logs_topic.py \"kern.*\" \"*.critical\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Queue in RabbitMQ using Messaging Topology Operator\nDESCRIPTION: Kubernetes manifest for creating a durable queue named 'test' in the default virtual host using the RabbitMQ Messaging Topology Operator. The queue is defined as non-auto-delete and is associated with a RabbitMQ cluster named 'example-rabbit'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: test # name of this custom resource; does not have to the same as the actual queue name\n  namespace: rabbitmq-system\nspec:\n  name: test # name of the queue\n  autoDelete: false\n  durable: true\n  rabbitmqClusterReference:\n    name: example-rabbit\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ Cluster\nDESCRIPTION: YAML configuration for setting up TLS in RabbitMQ cluster with certificate verification and option to disable non-TLS listeners.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  tls:\n    secretName: rabbitmq-server-certs\n    caSecretName: rabbitmq-ca-cert\n    disableNonTLSListeners: true\n```\n\n----------------------------------------\n\nTITLE: State Transform Implementation in Erlang\nDESCRIPTION: This snippet shows how to use the State Transform, a monad transformer, to abstract state management in Erlang. It uses parameterized modules and the Do and Cut parse transformers to create a more manageable and flexible state handling system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_24\n\nLANGUAGE: erlang\nCODE:\n```\nStateT = state_t:new(identity_m),\nSM = StateT:modify(_),\nSMR = StateT:modify_and_return(_),\nStateT:exec(\n    do([StateT ||\n\n        StateT:put(init(Dimensions)),\n        SM(plant_seeds(SeedCount, _)),\n        DidFlood <- SMR(pour_on_water(WaterVolume, _)),\n        SM(apply_sunlight(Time, _)),\n        DidFlood2 <- SMR(pour_on_water(WaterVolume, _)),\n        Crop <- SMR(harvest(_)),\n        ...\n\n        ]), undefined).\n```\n\n----------------------------------------\n\nTITLE: Closing a RabbitMQ Connection\nDESCRIPTION: Code to properly close a RabbitMQ connection after sending a message. This ensures network buffers are flushed and the message is actually delivered to the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Putting a Node into Maintenance Mode in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent for putting a RabbitMQ node into maintenance mode. Prepares the node for safe shutdown by transferring responsibilities to other nodes in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-upgrade.bat drain\n```\n\n----------------------------------------\n\nTITLE: Setting Memory High Watermark in RabbitMQ\nDESCRIPTION: The set_vm_memory_high_watermark command configures the memory threshold at which flow control is triggered. It can be set as a fraction of total system memory or as an absolute value with memory unit symbols (k/kiB, M/MiB, G/GiB, kB, MB, GB).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\nset_vm_memory_high_watermark fraction\n```\n\nLANGUAGE: bash\nCODE:\n```\nset_vm_memory_high_watermark [absolute] memory_limit\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Plugins Directory in Markdown\nDESCRIPTION: Specifies the default directory for RabbitMQ plugins in a generic binary build.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_HOME/plugins`\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced TLS Options for etcd Peer Discovery\nDESCRIPTION: Extended TLS configuration for etcd connections with additional security options like secure renegotiation and specific cipher suites. These settings can be used to meet strict security requirements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n\n# use secure session renegotiation\ncluster_formation.etcd.ssl_options.secure_renegotiate   = true\n\n# Explicitly list enabled cipher suites. This can break connectivity\n# and is not necessary most of the time.\ncluster_formation.etcd.ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.3  = ECDH-ECDSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.4  = ECDH-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.5  = DHE-RSA-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.6  = DHE-DSS-AES256-GCM-SHA384\ncluster_formation.etcd.ssl_options.ciphers.7  = ECDHE-ECDSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.8  = ECDHE-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.9  = ECDH-ECDSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.10 = ECDH-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.11 = DHE-RSA-AES128-GCM-SHA256\ncluster_formation.etcd.ssl_options.ciphers.12 = DHE-DSS-AES128-GCM-SHA256\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Queue Limit in RabbitMQ Virtual Host\nDESCRIPTION: Command to limit the total number of queues in a specific virtual host. Uses rabbitmqctl with a JSON configuration to set the max-queues parameter to a specific value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/vhosts.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p vhost_name '{\"max-queues\": 1024}'\n```\n\n----------------------------------------\n\nTITLE: Setting Queue TTL Using RabbitMQ Policy\nDESCRIPTION: Configures a queue expiration time of 15 minutes using the RabbitMQ management CLI. This policy applies to all queues in the default virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2014-01-23-preventing-unbounded-buffers-with-rabbitmq/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqctl set_policy expiry \".*\" '{\"expires\":900000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Implementing Dictionary Function in Erlang\nDESCRIPTION: An example of generating a custom dictionary function in Erlang for optimized lookup. This approach was explored to improve the performance of the graph implementation used in the DFA approach.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-03-28-very-fast-and-scalable-topic-routing-part-2/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nmydict(k1) -> {ok, v1};\n\nmydict(k2) -> {ok, v2};\n\nmydict(k3) -> {ok, v3};\n\nmydict(_) -> error.\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Shovel with AMQP 0.9.1 Source and AMQP 1.0 Destination in Erlang\nDESCRIPTION: This snippet presents a more extensive shovel configuration between an AMQP 0.9.1 source and an AMQP 1.0 destination. It defines a shovel named 'my_first_shovel' with detailed source and destination configurations, including protocol-specific settings, connection URIs, exchange and queue declarations, and message handling parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_shovel,\n [{shovels, [{my_first_shovel,\n              {source,\n               [{protocol, amqp091},\n                {uris, [\"amqp://fred:secret@host1.domain/my_vhost\",\n                        \"amqp://john:secret@host2.domain/my_vhost\"]},\n                {declarations, [{'exchange.declare',\n                                   [{exchange, <<\"my_fanout\">>},\n                                    {type, <<\"fanout\">>},\n                                    durable]},\n                                {'queue.declare',\n                                   [{arguments,\n                                      [{<<\"x-message-ttl\">>, long, 60000}]}]},\n                                {'queue.bind',\n                                   [{exchange, <<\"my_fanout\">>},\n                                    {queue,    <<>>}\n                                    ]}\n                               ]},\n                {queue, <<>>},\n                {prefetch_count, 10}\n               ]},\n              {destination,\n               [{protocol, amqp10},\n                {uris, [\"amqp://host:5672\"]},\n                {properties, [{user_id, <<\"my-user\">>}]},\n                {application_properties, [{<<\"my-prop\">>, <<\"my-prop-value\">>}]},\n                {add_forward_headers, true},\n                {target_address, <<\"destination-queue\">>}\n               ]},\n              {ack_mode, on_confirm},\n              {reconnect_delay, 5}\n             }]}\n ]}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Feature Flag in RabbitMQ\nDESCRIPTION: Command to enable a specific feature flag in a RabbitMQ cluster. This example enables the 'rabbitmq_4.0.0' feature flag, which might introduce new functionality.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin feature_flags enable rabbitmq_4.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Feature Flags in Bash\nDESCRIPTION: Command to list feature flags in RabbitMQ using the rabbitmqctl utility. This helps verify the state of feature flags before attempting an upgrade.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_feature_flags --formatter=pretty_table\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Log Lines with RabbitMQ Diagnostics\nDESCRIPTION: Retrieves the last specified number of lines from the RabbitMQ node's log file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_tail --number 100\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics Collection in RabbitMQ Management Agent\nDESCRIPTION: Completely disables the internal metrics collection in the management_agent plugin while still allowing the Prometheus plugin to function.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nmanagement_agent.disable_metrics_collector = true\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Log Exchange Configuration\nDESCRIPTION: Configuration example for enabling log forwarding to amq.rabbitmq.log exchange and setting log level.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_55\n\nLANGUAGE: ini\nCODE:\n```\nlog.exchange = true\\nlog.exchange.level = warning\n```\n\n----------------------------------------\n\nTITLE: Multiple Cuts in Erlang Function\nDESCRIPTION: Shows how multiple cuts can be used in a single expression, with the created fun taking arguments in the order of cut appearance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\nassert_sum_3(X, Y, Z, Sum) when X + Y + Z == Sum -> ok;\nassert_sum_3(_X, _Y, _Z, _Sum) -> {error, not_sum}.\n\ntest() ->\n    Equals12 = assert_sum_3(_, _, _, 12),\n    ok = Equals12(9, 2, 1).\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Limits for a Virtual Host in RabbitMQ\nDESCRIPTION: Command to limit the maximum number of queues in the 'qa_env' virtual host to 256. This helps prevent unbounded queue creation that could exhaust server resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-queues\": 256}'\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Keys\nDESCRIPTION: Commands to import the RabbitMQ signing keys for package verification. This includes keys for RabbitMQ itself and the Erlang repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## primary RabbitMQ signing key\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc'\n## modern Erlang repository\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key'\n## RabbitMQ server repository\nrpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key'\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Diagnostics Against a Remote Node in Bash\nDESCRIPTION: Example of using rabbitmq-diagnostics to check the status of a remote RabbitMQ node by specifying the target node with the -n flag.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics status -n rabbit@remote-host.local\n```\n\n----------------------------------------\n\nTITLE: Importing CSS and SVG Components in React/JSX\nDESCRIPTION: Import statements for CSS modules and SVG components used in the metadata store documentation page.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/metadata-store/index.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport './index.module.css';\nimport diagramStyles from './diagram.module.css';\nimport MetadataStoreRole from './metadata-store-role.svg';\nimport KhepriLogo from '@site/static/img/khepri-logo.svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname-based Service Address for RabbitMQ Consul Peer Discovery\nDESCRIPTION: Sets up auto-computation of service address using OS-reported hostname instead of node name. This approach uses the system hostname for Consul registration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n```\n\n----------------------------------------\n\nTITLE: Disabling OAuth2 Resources\nDESCRIPTION: Configuration to disable specific OAuth2 resources from appearing in the management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.4.id = rabbit_internal\nmanagement.oauth_resource_servers.4.disabled = true\n```\n\n----------------------------------------\n\nTITLE: Querying Shovel Status with RabbitMQ CLI in Bash\nDESCRIPTION: This snippet shows how to use the rabbitmqctl command-line tool to query the status of Shovels. It returns a list of statuses for all running Shovels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# use the -n switch to target a remote node\nrabbitmqctl shovel_status\n```\n\n----------------------------------------\n\nTITLE: Resetting RabbitMQ Management Stats Database\nDESCRIPTION: Command to reset the management statistics database for a RabbitMQ node, with an optional flag to reset stats for all nodes in the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_88\n\nLANGUAGE: bash\nCODE:\n```\nreset_stats_db [--all]\n```\n\n----------------------------------------\n\nTITLE: Cloning RabbitMQ Server Repository\nDESCRIPTION: Commands to clone the RabbitMQ server repository and navigate to the Prometheus docker directory\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rabbitmq/rabbitmq-server.git\ncd rabbitmq-server/deps/rabbitmq_prometheus/docker\n```\n\n----------------------------------------\n\nTITLE: Listing Certificates in Windows Root Store\nDESCRIPTION: PowerShell command for listing all certificates in the Windows Root certificate store. This allows verification that certificates have been properly added.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncertmgr -all -s Root\n\n# … snip …\n\nSelf-signed X.509 v3 Certificate\n  Serial Number: AC3F2B74ECDD9EEA00\n  Issuer Name:   CN=MyTestCA\n  Subject Name:  CN=MyTestCA\n  valid From:    25/08/2018 14:03:01\n  valid Until:   24/09/2018 14:03:01\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n```\n\n----------------------------------------\n\nTITLE: Maybe Stuck Process Detection\nDESCRIPTION: Command to identify potentially stuck Erlang processes by sampling stack traces\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics maybe_stuck -q\n```\n\n----------------------------------------\n\nTITLE: Removing RabbitMQ Streams Docker Network\nDESCRIPTION: This command removes the Docker network created for the RabbitMQ Streams demonstration after stopping the containers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-13-rabbitmq-streams-overview/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker network rm rabbitmq-streams\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ PerfTest on Kubernetes\nDESCRIPTION: This bash command demonstrates how to deploy the RabbitMQ PerfTest tool on a Kubernetes cluster using kubectl. It specifies the Docker image and connection URI for the test.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri amqp://{username}:{password}@{service}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Consumer in Node.js with RabbitMQ\nDESCRIPTION: Worker script that consumes messages from the queue and processes them with simulated work delays based on the number of dots in the message.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar queue = 'task_queue';\n\n// This makes sure the queue is declared before attempting to consume from it\nchannel.assertQueue(queue, {\n  durable: true\n});\n\nchannel.consume(queue, function(msg) {\n  var secs = msg.content.toString().split('.').length - 1;\n\n  console.log(\" [x] Received %s\", msg.content.toString());\n  setTimeout(function() {\n    console.log(\" [x] Done\");\n  }, secs * 1000);\n}, {\n  // automatic acknowledgment mode,\n  // see /docs/confirms for details\n  noAck: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-wide Default Queue Type in rabbitmq.conf\nDESCRIPTION: Configures a node-wide default queue type in the RabbitMQ configuration file. This setting applies to all virtual hosts unless overridden at the virtual host level.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/vhosts.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# supported values are: quorum, stream, classic, or a custom queue type module name\ndefault_queue_type = quorum\n```\n\n----------------------------------------\n\nTITLE: Rejecting Single Message with RabbitMQ in Java\nDESCRIPTION: Demonstrates how to reject a single message obtained via basic.get polling, with the option to requeue it. Uses the basicNack method with multiple flag set to false.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/nack.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nGetResponse gr = channel.basicGet(\"some.queue\", false);\nchannel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);\n```\n\n----------------------------------------\n\nTITLE: Finding image reference in Operator manifest\nDESCRIPTION: Command to locate the image reference in the Cluster Operator manifest file using grep, useful when relocating the image and needing to update the manifest.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngrep -C3 image: releases/cluster-operator.yml\n# [...]\\n# --\\n#           valueFrom:\\n#             fieldRef:\\n#               fieldPath: metadata.namespace\\n#         image: rabbitmqoperator/cluster-operator:0.49.0\\n#         name: operator\\n#         resources:\\n#           limits:\n```\n\n----------------------------------------\n\nTITLE: Checking Statistics Collection Interval\nDESCRIPTION: Command to verify the metrics update interval configuration\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/prometheus/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics environment | grep collect_statistics_interval\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Default Permissions Configuration\nDESCRIPTION: Default user permission settings\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\ndefault_permissions.configure = .*\ndefault_permissions.read = .*\ndefault_permissions.write = .*\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode in RabbitMQ\nDESCRIPTION: Command to put a node into maintenance mode, which transfers responsibilities and prevents client connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade drain\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-upgrade.bat drain\n```\n\n----------------------------------------\n\nTITLE: Example of Constant Queries for User Tags in RabbitMQ LDAP\nDESCRIPTION: Example configuration that grants all users access to the management plugin but denies administrator privileges using constant queries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{tag_queries, [{administrator, {constant, false}},\n {management,    {constant, true}}]}\n```\n\n----------------------------------------\n\nTITLE: Scraping RabbitMQ Prometheus Metrics\nDESCRIPTION: This command retrieves RabbitMQ's Prometheus metrics related to dead lettered messages. It's used to monitor and analyze the behavior of dead lettering in the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_14\n\nLANGUAGE: zsh\nCODE:\n```\ncurl --silent localhost:15692/metrics/ | grep rabbitmq_global_messages_dead_lettered\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode in RabbitMQ\nDESCRIPTION: Command to put a node into maintenance mode, which transfers responsibilities and prevents client connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-upgrade drain\n```\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-upgrade.bat drain\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Buffer Settings\nDESCRIPTION: Configuration for TCP buffer settings specific to STOMP connections, setting buffer sizes to 32 KiB and configuring connection behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nstomp.tcp_listen_options.backlog = 128\nstomp.tcp_listen_options.nodelay = true\nstomp.tcp_listen_options.linger.on      = true\nstomp.tcp_listen_options.linger.timeout = 0\nstomp.tcp_listen_options.sndbuf  = 32768\nstomp.tcp_listen_options.recbuf  = 32768\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Distribution Port in Windows Environment\nDESCRIPTION: Creates a configuration file to specify a custom port for Erlang distribution, which is necessary for node communication. This configuration must be applied before installing the RabbitMQ Windows service.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/windows-configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nset DIST_PORT=44556\n```\n\n----------------------------------------\n\nTITLE: Verifying Krew Installation\nDESCRIPTION: Command to verify if Krew plugin manager is properly installed for kubectl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/kubectl-plugin.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl krew\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Limits for a Virtual Host in RabbitMQ\nDESCRIPTION: Command to limit the maximum number of queues in the 'qa_env' virtual host to 256. This helps prevent unbounded queue creation that could exhaust server resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_vhost_limits -p qa_env '{\"max-queues\": 256}'\n```\n\n----------------------------------------\n\nTITLE: TCP Buffer Configuration for MQTT\nDESCRIPTION: TCP listener options configuration for MQTT connections with optimized buffer sizes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.linger.on      = true\nmqtt.tcp_listen_options.linger.timeout = 0\nmqtt.tcp_listen_options.sndbuf = 196608\nmqtt.tcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: TCP Buffer Configuration for MQTT\nDESCRIPTION: TCP listener options configuration for MQTT connections with optimized buffer sizes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nmqtt.tcp_listen_options.backlog = 128\nmqtt.tcp_listen_options.nodelay = true\nmqtt.tcp_listen_options.linger.on      = true\nmqtt.tcp_listen_options.linger.timeout = 0\nmqtt.tcp_listen_options.sndbuf = 196608\nmqtt.tcp_listen_options.recbuf = 196608\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Plugin for RabbitMQ (INI)\nDESCRIPTION: Minimum configuration required for the OAuth 2.0 plugin in RabbitMQ. It sets the resource server ID and the issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Formatting Configuration\nDESCRIPTION: Examples of various log formatting options including timestamp formats and level formatting.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter.time_format = epoch_usecs\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.formatter.level_format = uc4\n```\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.formatter.plaintext.format = $level $time $msg\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings in rabbitmqadmin\nDESCRIPTION: These commands show how to list bindings, including listing bindings in a specific virtual host using rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin list bindings\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" list bindings\n```\n\n----------------------------------------\n\nTITLE: Listing Channel Information in RabbitMQ with Bash\nDESCRIPTION: Retrieves specific channel information from RabbitMQ. This command displays the connection process ID and count of unacknowledged messages for each active channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_channels connection messages_unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Access with Boolean Logic in RabbitMQ LDAP\nDESCRIPTION: Example of a complex resource access query using boolean logic combinations. This query grants access to objects named 'test1' to 'user1', and access to 'test2' to everyone except 'user1'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {'or',\n  [{'and',\n    [{equals, \"${name}\", \"test1\"},\n     {equals, \"${username}\", \"user1\"}]},\n   {'and',\n    [{equals, \"${name}\", \"test2\"},\n     {'not', {equals, \"${username}\", \"user1\"}}]}\n  ]}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Access with Boolean Logic in RabbitMQ LDAP\nDESCRIPTION: Example of a complex resource access query using boolean logic combinations. This query grants access to objects named 'test1' to 'user1', and access to 'test2' to everyone except 'user1'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\n{resource_access_query,\n {'or',\n  [{'and',\n    [{equals, \"${name}\", \"test1\"},\n     {equals, \"${username}\", \"user1\"}]},\n   {'and',\n    [{equals, \"${name}\", \"test2\"},\n     {'not', {equals, \"${username}\", \"user1\"}}]}\n  ]}}\n```\n\n----------------------------------------\n\nTITLE: Using help command with RabbitMQ CLI tools in PowerShell\nDESCRIPTION: Demonstrates how to view available commands and usage information for RabbitMQ CLI tools using the help command in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat help\n\nrabbitmq-diagnostics.bat help\n```\n\n----------------------------------------\n\nTITLE: Federation Log File Configuration\nDESCRIPTION: Redirects federation-related logs to a separate file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nlog.federation.file = rabbit_federation.log\n```\n\n----------------------------------------\n\nTITLE: Default Memory Allocator Settings in RabbitMQ\nDESCRIPTION: Default allocator arguments used by RabbitMQ for memory management, controlling carrier size, block size, and allocation strategy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_DEFAULT_ALLOC_ARGS=\"+MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Scopes for MQTT in JSON\nDESCRIPTION: JSON configuration defining the required OAuth scopes for publishing messages to MQTT topics in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scope\": [\n    \"rabbitmq.write:*/*/*\",\n    \"rabbitmq.configure:*/*/*\",\n    \"rabbitmq.read:*/*/*\"\n\n  ],\n  \"extra_scope\": \"rabbitmq.tag:management\",\n  \"aud\": [\n    \"rabbitmq\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth Providers in RabbitMQ (Scenario 3)\nDESCRIPTION: RabbitMQ configuration for two separate OAuth providers using different Keycloak instances. Defines authentication settings with different ports and hostnames for dev and prod environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-multiresource.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.oauth_providers.devkeycloak.issuer = https://devkeycloak:8443/realms/dev\nauth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard\n\nauth_oauth2.oauth_providers.prodkeycloak.issuer = https://prodkeycloak:8442/realms/prod\nauth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Management Plugin\nDESCRIPTION: Command to enable the RabbitMQ management plugin using rabbitmq-plugins. This allows access to the management UI and HTTP API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_management\n```\n\n----------------------------------------\n\nTITLE: Deleting Shovels via CLI and HTTP API\nDESCRIPTION: Commands for deleting RabbitMQ shovels using both CLI tools and HTTP API endpoints.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-dynamic.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl clear_parameter shovel \"my-shovel\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Note: this user's access is limited to localhost!\ncurl -v -u guest:guest -X DELETE http://localhost:15672/api/parameters/shovel/%2f/my-shovel\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ Logs with journalctl\nDESCRIPTION: These commands demonstrate how to use journalctl to inspect system logs, filtering for RabbitMQ-specific entries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-debian.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n\nsudo journalctl --system | grep rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Message Routing with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart diagram illustrates the message routing in RabbitMQ. It shows a producer (P) sending messages to an exchange (X), which routes them to queues (Q₁, Q₂) based on different routing keys (a, b, c), and finally to consumers (C₁, C₂).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T4DiagramToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n    C1((C₁))\n    C2((C₂))\n\n    P --> X\n    X -- a --> Q1 & Q2\n    X -- b --> Q2\n    X -- c --> Q2\n    Q1 --> C1\n    Q2 --> C2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n    class C1 mermaid-consumer\n    class C2 mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Listing IPv6 Processes Listening on AMQP Port with lsof\nDESCRIPTION: Uses lsof to display OS processes that are listening on port 5672 (standard AMQP port) over IPv6. The grep filter shows only processes in LISTEN state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-networking.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i6TCP:5672 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Reviving a Node from Maintenance Mode in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent for reviving a RabbitMQ node from maintenance mode. Restores the node to normal operation if maintenance was canceled before node restart.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-upgrade.bat revive\n```\n\n----------------------------------------\n\nTITLE: Partial Log Receiver Program in Go\nDESCRIPTION: This is a partial implementation of the receive_logs.go program. It shows the setup for connecting to RabbitMQ, declaring the exchange, and creating a temporary queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"log\"\n\n        amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n        if err != nil {\n                log.Panicf(\"%s: %s\", msg, err)\n        }\n}\n\nfunc main() {\n        conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n        failOnError(err, \"Failed to connect to RabbitMQ\")\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, \"Failed to open a channel\")\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                \"logs\",   // name\n                \"fanout\", // type\n                true,     // durable\n                false,    // auto-deleted\n                false,    // internal\n                false,    // no-wait\n                nil,      // arguments\n        )\n        failOnError(err, \"Failed to declare an exchange\")\n\n        q, err := ch.QueueDeclare(\n                \"\",    // name\n                false, // durable\n                false, // delete when unused\n```\n\n----------------------------------------\n\nTITLE: Setting Fair Dispatch in RabbitMQ Consumer (Java)\nDESCRIPTION: This code sets the prefetch count to 1, implementing fair dispatch in RabbitMQ. This ensures that RabbitMQ doesn't give more than one message to a worker at a time, balancing the workload.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nint prefetchCount = 1;\nchannel.basicQos(prefetchCount);\n```\n\n----------------------------------------\n\nTITLE: Deactivating Recovery in C#\nDESCRIPTION: Demonstrates how to completely deactivate automatic recovery (both connection and topology) in C#.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_78\n\nLANGUAGE: csharp\nCODE:\n```\nawait AmqpConnection.CreateAsync(\n        ConnectionSettingBuilder.Create().RecoveryConfiguration(\n        RecoveryConfiguration.Create().\n        Activated(false)).// deactivate recovery\n        Build());\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Deploy Steps for RabbitMQ Cluster\nDESCRIPTION: YAML configuration to skip automatic queue rebalancing after cluster deployment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-operator/index.md#2025-04-09_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\n  name: rabbitmqcluster-sample\nspec:\n  skipPostDeploySteps: true\n```\n\n----------------------------------------\n\nTITLE: Setting Max Queue Length Policy with rabbitmqctl (Windows PowerShell)\nDESCRIPTION: This command sets a policy named 'my-pol' that limits the 'one-meg' queue to 1MiB of message data using rabbitmqctl in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/maxlength/index.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy my-pol \"^one-meg$\" ^\n  \"{\"\"max-length-bytes\"\":1048576}\" ^\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Setting Up RabbitMQ Stream Container with Docker\nDESCRIPTION: This shell command removes any existing RabbitMQ Stream Docker image and starts a fresh container with the necessary ports exposed for stream plugin (5552), AMQP (5672), and management HTTP interface (15672).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker rmi pivotalrabbitmq/rabbitmq-stream\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5552:5552 -p 5672:5672 -p 15672:15672 \\\n   -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \\\n   pivotalrabbitmq/rabbitmq-stream\n```\n\n----------------------------------------\n\nTITLE: Disable Virtual Host Deletion Protection\nDESCRIPTION: Command to disable deletion protection for a RabbitMQ virtual host\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/vhosts.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl disable_vhost_protection_from_deletion \"vhost-name\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced RabbitMQ LDAP Authorization Queries\nDESCRIPTION: Example of advanced configuration for LDAP authorization queries. It defines vhost access, resource access, topic access, and tag queries to control permissions granularly.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ldap.md#2025-04-09_snippet_28\n\nLANGUAGE: erlang\nCODE:\n```\n[{rabbitmq_auth_backend_ldap,[\n    {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}\n            ]\n      }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n]}].\n```\n\n----------------------------------------\n\nTITLE: Reinstalling RabbitMQ Windows Service After Erlang Upgrade\nDESCRIPTION: Commands to remove, reinstall, and start the RabbitMQ Windows service after upgrading Erlang. This ensures RabbitMQ uses the correct Erlang version.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/windows-configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\rabbitmq-service.bat remove\n.\\rabbitmq-service.bat install\n.\\rabbitmq-service.bat start\n```\n\n----------------------------------------\n\nTITLE: Listing Vhost Limits in RabbitMQ (Bash)\nDESCRIPTION: This command lists vhost limits in RabbitMQ. It supports optional flags for specifying a vhost, global limits, and table header display.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nlist_vhost_limits [--vhost vhost] [--global] [--no-table-headers]\n```\n\n----------------------------------------\n\nTITLE: Disk Monitoring Disabled Log Entry - RabbitMQ INI\nDESCRIPTION: Log entry example showing when disk space monitoring is disabled due to an unrecognized platform.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/disk-alarms.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n2019-04-01 11:04:54.002 [info] <0.329.0> Disabling disk free space monitoring\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log File Path in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to specify a custom log file location in the rabbitmq.conf file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nlog.file = /opt/custom/var/log/rabbit.log\n```\n\n----------------------------------------\n\nTITLE: Managing Deprecated Features with RabbitMQ CLI\nDESCRIPTION: These commands demonstrate how to list deprecated features in use in the cluster and all deprecated features using the rabbitmqadmin CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin deprecated_features list_used\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin deprecated_features list\n```\n\nLANGUAGE: shell\nCODE:\n```\n# same command as above\nrabbitmqadmin list deprecated_features\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Limit in RabbitMQ Java Client\nDESCRIPTION: Demonstrates how to set the channel limit to 32 using the ConnectionFactory in the RabbitMQ Java client.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory cf = new ConnectionFactory();\n// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured\n// to use a higher limit, otherwise the server's limit will be used.\ncf.setRequestedChannelMax(32);\n```\n\n----------------------------------------\n\nTITLE: Listing Exchange Properties in RabbitMQ\nDESCRIPTION: Command to display exchange name and type for a specific virtual host in RabbitMQ\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_exchanges -p my-vhost name type\n```\n\n----------------------------------------\n\nTITLE: Launching Erlang Crash Dump Viewer in Bash\nDESCRIPTION: This snippet shows how to use the Erlang Crash Dump Viewer (cdv) tool to visualize the state of the Erlang runtime from a crash dump file. The command specifies the path to the cdv binary and the crash dump file to be analyzed.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/lib/erlang/lib/observer-2.9.1/priv/bin/cdv ./erl_crash.dump\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RabbitMQ Server Capabilities Table in Haskell\nDESCRIPTION: This code snippet illustrates the structure of a capabilities table that a RabbitMQ node might present to a client. It includes product information, platform details, and supported features such as exchange-to-exchange bindings and publisher confirms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/connections/index.md#2025-04-09_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\n{ \"product\"      = (longstr) \"RabbitMQ\",\n  \"platform\"     = (longstr) \"Erlang/OTP\",\n  \"information\"  = (longstr) \"Licensed under the MPL 2.0. Website: https://www.rabbitmq.com\",\n  \"capabilities\" = (table)   { \"exchange_exchange_bindings\" = (bool) true,\n                               \"consumer_cancel_notify\"     = (bool) true,\n                               \"basic.nack\"                 = (bool) true,\n                               \"publisher_confirms\"         = (bool) true },\n  \"version\"      = (longstr) \"3.12.10\" }\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Stream with AMQP 1.0 in RabbitMQ 4.0 Using Quiver\nDESCRIPTION: Command and results from using Quiver to benchmark stream performance with AMQP 1.0 protocol in RabbitMQ 4.0. The test sends 1 million messages of 12 bytes each with a credit window of 5000, achieving over 112,000 messages per second end-to-end.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# quiver //host.docker.internal//queues/my-stream \\\n    --durable --count 1m --duration 10m --body-size 12 --credit 5000\n---------------------- Sender -----------------------  --------------------- Receiver ----------------------  --------\nTime [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Time [s]      Count [m]  Rate [m/s]  CPU [%]  RSS [M]  Lat [ms]\n-----------------------------------------------------  -----------------------------------------------------  --------\n     2.1        278,782     139,321       25      8.0       2.1        215,185     107,539       22      7.6       224\n     4.1        554,492     137,717       25      8.0       4.1        434,027     109,312       24      7.6       651\n     6.1        825,082     135,160       25      8.0       6.1        650,236     107,997       26      7.6     1,079\n     8.1        999,992      87,368       17      0.0       8.1        888,973     119,249       29      7.6     1,469\n       -              -           -        -        -      10.1        999,993      55,455       13      0.0     1,583\n\nRESULTS\n\nCount ............................................. 1,000,000 messages\nDuration ................................................ 8.9 seconds\nSender rate ......................................... 136,705 messages/s\nReceiver rate ....................................... 112,587 messages/s\nEnd-to-end rate ..................................... 112,196 messages/s\n\nLatencies by percentile:\n\n          0% ........ 7 ms       90.00% ..... 1553 ms\n         25% ...... 519 ms       99.00% ..... 1612 ms\n         50% ..... 1011 ms       99.90% ..... 1615 ms\n        100% ..... 1616 ms       99.99% ..... 1616 ms\n```\n\n----------------------------------------\n\nTITLE: Java Client with Hostname Verification\nDESCRIPTION: Java example showing how to enable hostname verification in addition to peer verification. This verifies that the server certificate has been issued for the hostname the client is connecting to.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.security.*;\nimport javax.net.ssl.*;\n\nimport com.rabbitmq.client.*;\n\npublic class Example2 {\n\n    public static void main(String[] args) throws Exception {\n      char[] keyPassphrase = \"MySecretPassword\".toCharArray();\n      KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n      ks.load(new FileInputStream(\"/path/to/client_key.p12\"), keyPassphrase);\n\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, keyPassphrase);\n\n      char[] trustPassphrase = \"rabbitstore\".toCharArray();\n      KeyStore tks = KeyStore.getInstance(\"JKS\");\n      tks.load(new FileInputStream(\"/path/to/trustStore\"), trustPassphrase);\n\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n      tmf.init(tks);\n\n      SSLContext c = SSLContext.getInstance(\"TLSv1.2\");\n      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n\n      ConnectionFactory factory = new ConnectionFactory();\n      factory.setHost(\"localhost\");\n      factory.setPort(5671);\n      factory.useSslProtocol(c);\n      factory.enableHostnameVerification();\n\n      // this connection will both perform peer verification\n      // and server hostname verification\n      Connection conn = factory.newConnection();\n\n      // snip ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Message Flow with Mermaid Flowchart\nDESCRIPTION: This diagram illustrates the basic message flow in RabbitMQ where a producer sends messages to an exchange, which then routes them to multiple queues. The diagram uses custom CSS classes to identify RabbitMQ components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T3DiagramExchange.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    X{{X}}\n    Q1[[Q₁]]\n    Q2[[Q₂]]\n\n    P --> X --> Q1 & Q2\n\n    class P mermaid-producer\n    class X mermaid-exchange\n    class Q1 mermaid-queue\n    class Q2 mermaid-queue\n```\n\n----------------------------------------\n\nTITLE: Configuring StartTLS for LDAP Connections\nDESCRIPTION: Enable StartTLS for LDAP connections as an alternative to TLS (not recommended for modern setups).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ldap.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nauth_ldap.servers.1 = ldap.eng.megacorp.local\nauth_ldap.servers.2 = 192.168.0.100\n\n# Enables StartTLS for connections to the LDAP server.\n# Prefer auth_ldap.use_ssl with reasonably modern LDAP servers!\nauth_ldap.use_starttls   = true\n\n# Disables peer certificate chain verification. See the section on Peer Verification\n# below.\n#\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ as a Windows Service with PowerShell\nDESCRIPTION: Command to install RabbitMQ as a Windows service, which allows it to run in the system account context without requiring a user to be logged in. This is recommended for production environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-windows-manual.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-service.bat install\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ AMQP 0-9-1 Implementation of basic.qos Method\nDESCRIPTION: Documentation of RabbitMQ's implementation of the basic.qos method, which supports per-consumer and per-channel limits but with different semantics for the global flag compared to the specification. Prefetch size limits are not implemented.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_partial\">partial</td>\n<td>basic.qos</td>\n<td>\n    The server supports per-consumer and per-channel limits. The <span class=\"code\">global</span> flag is given different semantics from those in the specification. See\n    <a xmlns=\"https://www.rabbitmq.com/namespaces/ad-hoc/conformance\" href=\"./consumer-prefetch\">consumer prefetch</a> for more information. Prefetch size limits are not implemented.\n</td>\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Abrupt Connection Closure Log\nDESCRIPTION: Warning log entry showing an unexpected TCP connection closure.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\n2018-06-17 06:28:40.868 [warning] <0.646.0> closing AMQP connection <0.646.0> (127.0.0.1:58667 -> 127.0.0.1:5672, vhost: '/', user: 'guest'):\\nclient unexpectedly closed TCP connection\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Server Status\nDESCRIPTION: Command to display broker status information including running applications and system statistics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl status\n```\n\n----------------------------------------\n\nTITLE: Queue Binding with Routing Key in Go\nDESCRIPTION: Example of binding a queue to an exchange with a specific routing key 'black'\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr = ch.QueueBind(\n  q.Name,    // queue name\n  \"black\",   // routing key\n  \"logs\",    // exchange\n  false,\n  nil)\n```\n\n----------------------------------------\n\nTITLE: Installing LDAP Client Prerequisites on Debian/Ubuntu\nDESCRIPTION: Commands to install the eldap library required by the RabbitMQ LDAP plugin on Debian and Ubuntu systems. The eldap library may need to be installed separately from the main Erlang runtime.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y erlang-eldap\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues on Linux/Unix\nDESCRIPTION: Command to list all queues and their message counts in RabbitMQ on Linux/Unix systems. This requires superuser privileges and uses the rabbitmqctl command-line tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Status in Bash\nDESCRIPTION: Command to check the current name of the RabbitMQ cluster using rabbitmq-diagnostics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q cluster_status\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Queue Destinations in STOMP\nDESCRIPTION: Example STOMP frame demonstrating how to use a temporary queue for reply-to scenarios. This creates a private temporary queue with a generated name that is automatically subscribed to by the session.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stomp.md#2025-04-09_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nSEND\ndestination:/queue/reply-test\nreply-to:/temp-queue/foo\n\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in PowerShell\nDESCRIPTION: Partial command showing the start of configuring a federation upstream parameter in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/federation.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# target.hostname is just an example, replace it with a URI\n# of the target node (usually a member of a remote node/cluster,\n```\n\n----------------------------------------\n\nTITLE: Creating the RabbitMQ Topology with Maven\nDESCRIPTION: Shell command to run the Java class that creates the example topology with an exchange, queues, stream, and bindings using Maven.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-10-07-rabbitmq-streams-interoperability/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Interoperability$CreateTopology'\n```\n\n----------------------------------------\n\nTITLE: Running AMQP 1.0 Quiver Benchmark in Docker\nDESCRIPTION: Docker command to run the Quiver benchmarking tool for AMQP 1.0 testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --add-host host.docker.internal:host-gateway ssorj/quiver:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Shovel Status via CLI\nDESCRIPTION: Commands for inspecting shovel status using rabbitmqctl with different output formats.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl shovel_status --formatter=pretty_table\nrabbitmqctl shovel_status --formatter=json | jq\n```\n\n----------------------------------------\n\nTITLE: Advanced LDAP TLS Configuration in Erlang Format\nDESCRIPTION: Complete LDAP TLS configuration using advanced.config format in Erlang.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_24\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbitmq_auth_backend_ldap, [\n     {servers, [\"ldap1.eng.megacorp.local\", \"ldap2.eng.megacorp.local\"]},\n\n     {use_ssl,     true},\n     {ssl_options, [{cacertfile, \"/path/to/ca_certificate.pem\"},\n                    {certfile,   \"/path/to/server_certificate.pem\"},\n                    {keyfile,    \"/path/to/server_key.pem\"},\n                    {verify,               verify_peer},\n                    {fail_if_no_peer_cert, true}]},\n                    {server_name_indication, \"ldap.identity.eng.megacorp.local\"},\n                    {ssl_hostname_verification, wildcard}\n   ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository for Ubuntu 22.04\nDESCRIPTION: This bash script adds the RabbitMQ and Erlang package repositories to the apt sources list for Ubuntu 22.04 (Jammy). It includes both primary and redundant mirror URLs for improved availability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Service for Storage Configuration on Linux\nDESCRIPTION: Command to stop the RabbitMQ server before performing storage configuration tasks such as symlinking directories to EBS volumes. This is necessary when preparing dedicated storage for RabbitMQ data and log directories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ec2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo service rabbitmq-server stop\n```\n\n----------------------------------------\n\nTITLE: Absolute Disk Free Limit Configuration (Units)\nDESCRIPTION: Configuration example showing how to set the disk free limit to 1GB using memory units.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/disk-alarms.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndisk_free_limit.absolute = 1GB\n```\n\n----------------------------------------\n\nTITLE: Installing Erlang/OTP 25.0 using kerl\nDESCRIPTION: Commands to install Erlang/OTP 25.0 using the kerl tool, which includes support for frame pointers in JIT.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkerl build 25.0 25.0\nkerl install 25.0 ~/kerl/25.0\nsource ~/kerl/25.0\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Logging with Custom Field Mapping in RabbitMQ\nDESCRIPTION: Configuration for enabling JSON logging with custom field renaming and filtering. This example renames key fields and drops all others for more compact logs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\n# log as JSON\nlog.file.formatter = json\n\n# Rename the 'time' field to 'ts', 'level' to 'lvl' and 'msg' to 'message',\n# drop all other fields.\n# Use an 'escaped string' just to make the value stand out\nlog.file.formatter.json.field_map = 'time:ts level:lvl msg:message *:-'\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Cipher Suites\nDESCRIPTION: Command to display all cipher suites supported by the local OpenSSL build.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ciphers -v\n```\n\n----------------------------------------\n\nTITLE: Setting Queue TTL via RabbitMQ Policy (Bash)\nDESCRIPTION: Command to set a policy that makes all queues expire after 30 minutes (1,800,000 milliseconds) of inactivity using rabbitmqctl in Unix/Linux environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy expiry \".*\" '{\"expires\":1800000}' --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server\nDESCRIPTION: Command to deploy and start the Keycloak authorization server\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-proxy.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Generating RabbitMQ Server Report\nDESCRIPTION: Command to generate a comprehensive server status report for support purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl report > server_report.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 Authentication Backend in RabbitMQ\nDESCRIPTION: Configuration to specify OAuth 2.0 as an authentication and authorization backend in RabbitMQ. This setting specifies the auth backend module to use.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# note that the module name begins with a \"rabbit_\", not \"rabbitmq_\", like in the name\n# of the plugin\nauth_backends.1 = rabbit_auth_backend_oauth2\n```\n\n----------------------------------------\n\nTITLE: Configuring statistics collection mode in RabbitMQ\nDESCRIPTION: Setting to control the level of statistics collection, which is primarily relevant for the management plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\ncollect_statistics = none\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from RabbitMQ Stream with Offset Tracking\nDESCRIPTION: Implements a consumer that tracks message offsets and stops when receiving a marker message. Uses atomic variables to track first and last offsets received.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-java-stream.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nOffsetSpecification offsetSpecification = OffsetSpecification.first();\nAtomicLong firstOffset = new AtomicLong(-1);\nAtomicLong lastOffset = new AtomicLong(0);\nCountDownLatch consumedLatch = new CountDownLatch(1);\nenvironment.consumerBuilder()\n    .stream(stream)\n    .offset(offsetSpecification)\n    .messageHandler((ctx, msg) -> {\n        if (firstOffset.compareAndSet(-1, ctx.offset())) {\n          System.out.println(\"First message received.\");\n        }\n        String body = new String(msg.getBodyAsBinary(), StandardCharsets.UTF_8);\n        if (\"marker\".equals(body)) {\n          lastOffset.set(ctx.offset());\n          ctx.consumer().close();\n          consumedLatch.countDown();\n        }\n    })\n    .build();\nSystem.out.println(\"Started consuming...\");\n\nconsumedLatch.await(60, TimeUnit.MINUTES);\n\nSystem.out.printf(\"Done consuming, first offset %d, last offset %d.%n\",\n                  firstOffset.get(), lastOffset.get());\n```\n\n----------------------------------------\n\nTITLE: Configuring Yum Repository for RabbitMQ and Erlang\nDESCRIPTION: Example configuration for setting up a Yum repository file to install RabbitMQ and its Erlang dependency from a Cloudsmith mirror. This configuration is for modern RPM-based distributions like RHEL 9, CentOS Stream 9, and recent Fedora releases.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# In /etc/yum.repos.d/rabbitmq.repo\n\n##\n## Zero dependency Erlang RPM\n##\n\n[modern-erlang]\nname=modern-erlang-el9\n# Use a set of mirrors maintained by the RabbitMQ core team.\n# The mirrors have significantly higher bandwidth quotas.\nbaseurl=https://yum1.rabbitmq.com/erlang/el/9/$basearch\n        https://yum2.rabbitmq.com/erlang/el/9/$basearch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key\ngpgcheck=1\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\npkg_gpgcheck=1\nautorefresh=1\ntype=rpm-md\n\n[modern-erlang-noarch]\nname=modern-erlang-el9-noarch\n# Use a set of mirrors maintained by the RabbitMQ core team.\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Exchange Listing Command\nDESCRIPTION: Shell command to list all exchanges on the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-php.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_exchanges\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ PerfTest with OAuth Authentication\nDESCRIPTION: Command to run the RabbitMQ PerfTest tool with OAuth authentication. It obtains a token for the specified producer client and passes it as a parameter to the test tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-keycloak.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake start-perftest-producer-with-token PRODUCER=producer TOKEN=$(bin/keycloak/token producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn test)\n```\n\n----------------------------------------\n\nTITLE: Defining Heartbeat Frame Format in EBNF\nDESCRIPTION: The EBNF grammar for heartbeat frames is inconsistent with the actual frame format used by implementations. RabbitMQ, Qpid, and OpenAMQ send eight bytes following the standard frame format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/amqp-0-9-1-errata.md#2025-04-09_snippet_3\n\nLANGUAGE: EBNF\nCODE:\n```\nheartbeat = %d8 %d0 %d0 frame-end\n```\n\n----------------------------------------\n\nTITLE: Log Rotation Configuration\nDESCRIPTION: Settings for configuring periodic and size-based log rotation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every night at midnight\nlog.file.rotation.date = $D0\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n\n# archived log files will be compressed\nlog.file.rotation.compress = true\n```\n\nLANGUAGE: ini\nCODE:\n```\n# rotate every day at 23:00 (11:00 p.m.)\nlog.file.rotation.date = $D23\n```\n\nLANGUAGE: ini\nCODE:\n```\n# rotate when the file reaches 10 MiB\nlog.file.rotation.size = 10485760\n\n# keep up to 5 archived log files in addition to the current one\nlog.file.rotation.count = 5\n```\n\n----------------------------------------\n\nTITLE: Applying All Upstreams Using Policy in RabbitMQ Federation\nDESCRIPTION: Sets a RabbitMQ policy named 'federate-me' that applies all defined federation upstreams to exchanges or queues with names starting with 'federated.'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/federation-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy federate-me '^federated\\.' '{\"federation-upstream-set\":\"all\"}'\n```\n\n----------------------------------------\n\nTITLE: Message Subscription with Multiple Bindings\nDESCRIPTION: Creating queue bindings for different severity levels to receive filtered messages\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nq, err := ch.QueueDeclare(\n  \"\",    // name\n  false, // durable\n  false, // delete when unused\n  true,  // exclusive\n  false, // no-wait\n  nil,   // arguments\n)\nfailOnError(err, \"Failed to declare a queue\")\n\nif len(os.Args) < 2 {\n  log.Printf(\"Usage: %s [info] [warning] [error]\", os.Args[0])\n  os.Exit(0)\n}\nfor _, s := range os.Args[1:] {\n  log.Printf(\"Binding queue %s to exchange %s with routing key %s\",\n     q.Name, \"logs_direct\", s)\n  err = ch.QueueBind(\n    q.Name,        // queue name\n    s,             // routing key\n    \"logs_direct\", // exchange\n    false,\n    nil)\n  failOnError(err, \"Failed to bind a queue\")\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Service with CLI Tools in PowerShell\nDESCRIPTION: Command to stop the RabbitMQ broker service using the rabbitmqctl.bat CLI tool. Must be run with administrative privileges from the sbin directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-windows.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat stop\n```\n\n----------------------------------------\n\nTITLE: Management Agent Plugin Commands\nDESCRIPTION: Commands for managing the RabbitMQ stats database, including reset functionality for single node or cluster-wide operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_83\n\nLANGUAGE: markup\nCODE:\n```\n<code class=\"Cm\">reset_stats_db</code> [<code class=\"Fl\">--all</code>]\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Statistics Collection Interval in Bash\nDESCRIPTION: Command to check the configured metrics update interval for RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics environment | grep collect_statistics_interval\n```\n\n----------------------------------------\n\nTITLE: Managing Global Parameters in RabbitMQ\nDESCRIPTION: Commands for setting, clearing, and listing global parameters using rabbitmqctl. Global parameters are not tied to a specific virtual host and consist of a name and value.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/parameters.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# sets a global (virtual-host-independent) runtime parameter\nrabbitmqctl set_global_parameter <name> <value>\n\n# clears (unsets) a global (virtual-host-independent) runtime parameter\nrabbitmqctl clear_global_parameter <name>\n\n# lists global (virtual-host-independent) runtime parameters\nrabbitmqctl list_global_parameters\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# sets a global (virtual-host-independent) runtime parameter\nrabbitmqctl.bat set_global_parameter <name> <value>\n\n# clears (unsets) a global (virtual-host-independent) runtime parameter\nrabbitmqctl.bat clear_global_parameter <name>\n\n# lists global (virtual-host-independent) runtime parameters\nrabbitmqctl.bat list_global_parameters\n```\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/global-parameters/name\nDELETE /api/global-parameters/name\nGET /api/global-parameters\n```\n\n----------------------------------------\n\nTITLE: Node Management Commands - Status Check\nDESCRIPTION: Commands to check RabbitMQ node status using rabbitmq-diagnostics in both bash and PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cli.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics  status\n\nrabbitmq-diagnostics  status --node rabbit@target-hostname.local\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-diagnostics .bat status\n\nrabbitmq-diagnostics .bat status --node rabbit@target-hostname.local\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Federation Connection Log Output\nDESCRIPTION: Example log output showing successful federation connections between brokers, demonstrating the connection status reporting for federated exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-06-22-federation-plugin-preview-release/index.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n=INFO REPORT==== 22-Jun-2011::12:16:42 ===\nFederation exchange 'stocks' in vhost '/' connected to newyork.mycompany.com:5672:/:stocks\n\n=INFO REPORT==== 22-Jun-2011::12:16:43 ===\nFederation exchange 'stocks' in vhost '/' connected to paris.mycompany.com:5671:/:stocks\n```\n\n----------------------------------------\n\nTITLE: Monitoring RabbitMQ Deployment Progress on Kubernetes\nDESCRIPTION: This snippet demonstrates how to watch the progress of a RabbitMQ deployment on Kubernetes. It uses the 'watch kubectl get all' command to continuously display the status of pods, services, and stateful sets.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-08-10-deploying-rabbitmq-to-kubernetes-whats-involved/index.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get all\n```\n\n----------------------------------------\n\nTITLE: Restarting RabbitMQ Service After Configuration Changes\nDESCRIPTION: Command sequence to stop, remove, reinstall, and start the RabbitMQ Windows service to apply configuration changes such as environment variables.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/windows-configuration.md#2025-04-09_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\rabbitmq-service.bat stop\n.\\rabbitmq-service.bat remove\n.\\rabbitmq-service.bat install\n.\\rabbitmq-service.bat start\n```\n\n----------------------------------------\n\nTITLE: Simulating Distributed RabbitMQ Java Client Instances with Micrometer Tags\nDESCRIPTION: This snippet demonstrates how to use Micrometer tags to identify different instances of the RabbitMQ Java client across multiple data centers. It simulates distributed instances and adds 'dc' and 'host' tags to the metrics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-04-10-rabbitmq-java-client-metrics-with-micrometer-and-datadog/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfor (String dc : new String[] {\"us\", \"europe\", \"asia\"}) {\n    Tags tags = Tags.of(\"host\", hostname, \"dc\", dc);\n    MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);\n    new ClassLoaderMetrics(tags).bindTo(jmxRegistry);\n    new JvmMemoryMetrics(tags).bindTo(jmxRegistry);\n    new JvmGcMetrics(tags).bindTo(jmxRegistry);\n    new ProcessorMetrics(tags).bindTo(jmxRegistry);\n    new JvmThreadMetrics(tags).bindTo(jmxRegistry);\n    ConnectionFactory connectionFactory = new ConnectionFactory();\n    MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(\n        jmxRegistry, \"rabbitmq.client\", tags\n    );\n    connectionFactory.setMetricsCollector(metricsCollector);\n\n    Connection connection = connectionFactory.newConnection();\n    Channel channel = connection.createChannel();\n    String queue = channel.queueDeclare().getQueue();\n    channel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });\n    executor.submit(() -> {\n        Random random = new Random();\n        int offset = dc.length() * 10;\n        while (true) {\n            Thread.sleep(random.nextInt(100) + offset);\n            channel.basicPublish(\"\", queue, null, \"\".getBytes());\n        }\n    }); \n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ AMQP 0-9-1 Implementation of queue.unbind Method\nDESCRIPTION: Documentation of RabbitMQ's implementation of the queue.unbind method, which has been modified to be an idempotent assertion that a binding must not exist, similar to how queue.bind asserts that it must exist.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<td class=\"statusCell status_partial\">partial</td>\n<td>queue.unbind</td>\n<td>\n    We have made queue.unbind into an idempotent assertion that the binding must not exist, in the same way that queue.bind asserts that it must.\n</td>\n```\n\n----------------------------------------\n\nTITLE: Configuring Delivery Limit with Dead-Lettering via HTTP API\nDESCRIPTION: HTTP API request to configure both a delivery limit and dead-lettering for quorum queues. Sets a delivery limit of 50 and designates 'redeliveries.limit.dlx' as the dead-letter exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/quorum-queues/index.md#2025-04-09_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nPUT /api/policies/%2f/qq-overrides\n    {\"pattern\": \"^qq\\.\",\n     \"definition\": {\"delivery-limit\": 50, \"dead-letter-exchange\": \"redeliveries.limit.dlx\"},\n     \"priority\": 1,\n    \"apply-to\": \"quorum_queues\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Types in AMQP 0-9-1\nDESCRIPTION: Demonstrates the field type definitions in AMQP 0-9-1, comparing them with AMQP 0-9 and Qpid/RabbitMQ implementations. Highlights incompatibilities and conflicts in type definitions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/amqp-0-9-1-errata.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  0-9   0-9-1   Qpid/Rabbit  Type               Remarks\n---------------------------------------------------------------------------\n        t       t            Boolean\n        b       b            Signed 8-bit\n        B       B            Unsigned 8-bit\n        U       s            Signed 16-bit      (A1)\n        u       u            Unsigned 16-bit\n  I     I       I            Signed 32-bit\n        i       i            Unsigned 32-bit\n        L       l            Signed 64-bit      (B)\n        l                    Unsigned 64-bit\n        f       f            32-bit float\n        d       d            64-bit float\n  D     D       D            Decimal\n        s                    Short string       (A2)\n  S     S       S            Long string\n        A       A            Array              (C)\n  T     T       T            Timestamp (u64)\n  F     F       F            Nested Table\n  V     V       V            Void\n                x            Byte array         (D)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for OAuth 2.0 in RabbitMQ (INI)\nDESCRIPTION: This snippet shows how to configure TLS settings for OAuth 2.0 in RabbitMQ using the INI format. It sets the CA certificate file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2.md#2025-04-09_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n...\nauth_oauth2.https.cacertfile = /opts/certs/cacert.pem\n...\n```\n\n----------------------------------------\n\nTITLE: Running PerfTest for RabbitMQ Consumer Slowdown Simulation\nDESCRIPTION: Command for running RabbitMQ PerfTest (version 2.12+) to simulate a consumer slowdown scenario with varying message rates. The test produces persistent messages across 100 queues with 200 producers and 200 consumers, gradually increasing the message rate from 10k to 30k messages per second, then decreasing back to 10k.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-06-20-cluster-sizing-case-study-mirrored-queues-part-2/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/runjava com.rabbitmq.perf.PerfTest \\\n-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \\\n-z 1800 \\\n-f persistent \\\n-q 1000 \\\n-c 1000 \\\n-ct -1 \\\n--rate 100 \\\n--size 1024 \\\n--queue-pattern 'perf-test-%d' \\\n--queue-pattern-from 1 \\\n--queue-pattern-to 100 \\\n--producers 200 \\\n--consumers 200 \\\n--producer-random-start-delay 30 \\\n-vl 10000:300 \\\n-vl 11000:60 -vl 12000:60 -vl 13000:60 -vl 14000:60 -vl 15000:60 -vl 16000:60 -vl 17000:60 -vl 18000:60 -vl 19000:60 \\\n-vl 20000:60 -vl 21000:60 -vl 22000:60 -vl 23000:60 -vl 24000:60 -vl 25000:60 -vl 26000:60 -vl 27000:60 -vl 28000:60 -vl 29000:60 \\\n-vl 30000:300 \\\n-vl 29000:60 -vl 28000:60 -vl 27000:60 -vl 26000:60 -vl 25000:60 -vl 24000:60 -vl 23000:60 -vl 22000:60 -vl 21000:60 -vl 20000:60 \\\n-vl 19000:60 -vl 18000:60 -vl 17000:60 -vl 16000:60 -vl 15000:60 -vl 14000:60 -vl 13000:60 -vl 12000:60 -vl 11000:60 -vl 10000:60 \\\n-vl 10000:3000\n```\n\n----------------------------------------\n\nTITLE: Check Cipher Suites (Unix/Linux)\nDESCRIPTION: Command to list available cipher suites in OpenSSL format on Unix-like systems\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cipher_suites --format openssl --silent\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Access Token for RabbitMQ Peer Discovery\nDESCRIPTION: Specifies the file path where the Kubernetes API access token is stored. This token is required for authenticating RabbitMQ with the Kubernetes API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = k8s\n\ncluster_formation.k8s.host = kubernetes.default.example.local\n# default value is /var/run/secrets/kubernetes.io/serviceaccount/token\ncluster_formation.k8s.token_path = /var/run/secrets/kubernetes.io/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: Starting UAA Container for Identity Provider Initiated Logon\nDESCRIPTION: Command to start the UAA (User Account and Authentication) server as a Docker container for OAuth 2.0 authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples-idp-initiated.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake start-uaa\n```\n\n----------------------------------------\n\nTITLE: Alternative Garbage Collection for Older RabbitMQ Versions\nDESCRIPTION: Commands for forcing garbage collection in older RabbitMQ versions that don't provide the force_gc command. This uses the Erlang runtime directly to perform garbage collection on all processes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'recon:bin_leak(10).'\n\nrabbitmqctl eval '[garbage_collect(P) || P <- processes()].'\n```\n\n----------------------------------------\n\nTITLE: OpenID Discovery Endpoint Error Message\nDESCRIPTION: Error message displayed when the OpenID Connect discovery endpoint is not reachable from the RabbitMQ management UI.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-oauth2.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOAuth resource [rabbitmq] not available. OpenId Discovery endpoint https://<the_issuer_url>/.well-known/openid-configuration not reachable\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Khepri via Environment Variable in PowerShell\nDESCRIPTION: Commands to start a RabbitMQ node with Khepri enabled directly at boot time using the RABBITMQ_FEATURE_FLAGS environment variable in PowerShell. This approach enables Khepri from the start.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Env:RABBITMQ_FEATURE_FLAGS = 'khepri_db,...'\nrabbitmq-server.bat\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Module Configuration\nDESCRIPTION: Configuration example for specifying a custom cache implementation module.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_cache.cache_module = rabbit_auth_backend_ets_segmented\n```\n\n----------------------------------------\n\nTITLE: Closing a Channel in Java with RabbitMQ\nDESCRIPTION: This example demonstrates how to properly close a channel when it is no longer needed using the Java client. Closing channels is important for freeing up resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/channels/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChannel ch = conn.createChannel();\n\n// do some work\n\n// close the channel when it is no longer needed\n\nch.close();\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with Filtering using Stream PerfTest\nDESCRIPTION: This command starts a consumer that only receives messages with the filter value '5', demonstrating how to use stream filtering to reduce bandwidth usage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar stream-perf-test.jar --producers 0 --consumers 1 --offset first --prometheus --filter-values 5\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Plugins Expansion Directory in Markdown\nDESCRIPTION: Specifies the default directory for expanded RabbitMQ plugins in a generic binary build. This path includes the node name.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/relocate.md#2025-04-09_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand`\n```\n\n----------------------------------------\n\nTITLE: Declaring Durable Exchange in Shovel Configuration\nDESCRIPTION: Demonstrates how to declare a durable, direct exchange as part of a shovel's declarations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/shovel-static.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n{'exchange.declare', [\n                      {exchange, <<\"my_exchange\">>},\n                      {type, <<\"direct\">>},\n                      durable\n                     ]}\n```\n\n----------------------------------------\n\nTITLE: Disk Monitoring Disabled Log Entry\nDESCRIPTION: Log entry example showing when disk space monitoring is disabled on unsupported platforms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/disk-alarms.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n2019-04-01 11:04:54.002 [info] <0.329.0> Disabling disk free space monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener Options in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure various TCP listener options for the Stream Plugin, including backlog, buffer sizes, keepalive, and timeout settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n\nstream.tcp_listen_options.backlog = 4096\nstream.tcp_listen_options.recbuf  = 131072\nstream.tcp_listen_options.sndbuf  = 131072\n\nstream.tcp_listen_options.keepalive = true\nstream.tcp_listen_options.nodelay   = true\n\nstream.tcp_listen_options.exit_on_close = true\nstream.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener Options in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure various TCP listener options for the Stream Plugin, including backlog, buffer sizes, keepalive, and timeout settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n\nstream.tcp_listen_options.backlog = 4096\nstream.tcp_listen_options.recbuf  = 131072\nstream.tcp_listen_options.sndbuf  = 131072\n\nstream.tcp_listen_options.keepalive = true\nstream.tcp_listen_options.nodelay   = true\n\nstream.tcp_listen_options.exit_on_close = true\nstream.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream TCP Listener Options in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure various TCP listener options for the Stream Plugin, including backlog, buffer sizes, keepalive, and timeout settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/stream.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstream.listeners.tcp.1 = 127.0.0.1:5552\nstream.listeners.tcp.2 = ::1:5552\n\nstream.tcp_listen_options.backlog = 4096\nstream.tcp_listen_options.recbuf  = 131072\nstream.tcp_listen_options.sndbuf  = 131072\n\nstream.tcp_listen_options.keepalive = true\nstream.tcp_listen_options.nodelay   = true\n\nstream.tcp_listen_options.exit_on_close = true\nstream.tcp_listen_options.send_timeout  = 120\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Exchange Publisher in Java\nDESCRIPTION: Java implementation of a publisher that emits log messages to a topic exchange. The routing key follows a pattern of '<facility>.<severity>' which allows subscribers to filter messages based on multiple criteria.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-java.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\npublic class EmitLogTopic {\n\n  private static final String EXCHANGE_NAME = \"topic_logs\";\n\n  public static void main(String[] argv) throws Exception {\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"localhost\");\n    try (Connection connection = factory.newConnection();\n         Channel channel = connection.createChannel()) {\n\n        channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n\n        String routingKey = getRouting(argv);\n        String message = getMessage(argv);\n\n        channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes(\"UTF-8\"));\n        System.out.println(\" [x] Sent '\" + routingKey + \"':'\" + message + \"'\");\n    }\n  }\n  //..\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Default Exchange Access\nDESCRIPTION: Regular expression pattern that grants access to server-generated names and the default exchange in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_10\n\nLANGUAGE: regex\nCODE:\n```\n^(amq\\.gen.*|amq\\.default)$\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Consumer\nDESCRIPTION: Go code showing the necessary imports for creating a RabbitMQ stream consumer application.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go-stream.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"github.com/rabbitmq/rabbitmq-stream-go-client/pkg/amqp\"\n    \"github.com/rabbitmq/rabbitmq-stream-go-client/pkg/stream\"\n    \"log\"\n    \"os\"\n)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment\nDESCRIPTION: Commands to start RabbitMQ cluster with Prometheus using Docker Compose\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose-metrics.yml up -d\ndocker-compose -f docker-compose-overview.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Declaring Exchanges with RabbitMQ CLI\nDESCRIPTION: These commands demonstrate how to declare different types of exchanges using the rabbitmqadmin CLI tool. They specify the virtual host, exchange name, type, and durability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare exchange --name \"events.all_types.topic\" --type \"topic\" --durable true\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare exchange --name \"events.all_type.uncategorized\" --type \"fanout\" --durable true --auto-delete false\n```\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin --vhost \"events\" declare exchange --name \"local.random.c60bda92\" --type \"x-local-random\" --durable true\n```\n\n----------------------------------------\n\nTITLE: Shutting Down RabbitMQ Node in PowerShell\nDESCRIPTION: Shows how to shut down a RabbitMQ node using the rabbitmqctl tool in PowerShell, with an optional node specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat shutdown\nrabbitmqctl.bat shutdown --node rabbit@target-hostname.local\n```\n\n----------------------------------------\n\nTITLE: Evaluating Erlang Expression in RabbitMQ Broker Node\nDESCRIPTION: New functionality in RabbitMQ 2.7.1 allows evaluating arbitrary Erlang expressions in the broker node using rabbitmqctl. This can be useful for debugging or custom operations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-12-20-rabbitmq-2-7-0-and-2-7-1-are-released/index.md#2025-04-09_snippet_1\n\nLANGUAGE: Erlang\nCODE:\n```\nrabbitmqctl eval <expr>\n```\n\n----------------------------------------\n\nTITLE: Linking to RabbitMQ Management Plugin Documentation\nDESCRIPTION: Markdown link to the RabbitMQ management plugin documentation for monitoring and managing RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-10-18-rabbitmq0mq-bridge/index.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[management plugin](/docs/management)\n```\n\n----------------------------------------\n\nTITLE: AMQP 0-9-1 Queue Declarations\nDESCRIPTION: Examples of AMQP 0-9-1 queue and exchange declarations in a shovel configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel-static.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n  {declarations, [\n    %% declaration list\n  ]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n  {declarations, [\n                   'queue.declare',\n                   {'queue.bind', [\n                                    {exchange, <<\"my_exchange\">>},\n                                    {queue,    <<>>}\n                                  ]}\n                 ]}\n```\n\nLANGUAGE: erlang\nCODE:\n```\n{'exchange.declare', [\n                      {exchange, <<\"my_exchange\">>},\n                      {type, <<\"direct\">>},\n                      durable\n                     ]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Import from HTTPS with TLS\nDESCRIPTION: Configuration settings to only import definitions if HTTPS endpoint contents have changed, with TLS verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/definitions.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# when set to true, definition import will only happen\n# if definition file contents change\ndefinitions.skip_if_unchanged = true\n\ndefinitions.import_backend = https\ndefinitions.https.url = https://some.endpoint/path/to/rabbitmq.definitions.json\n\ndefinitions.tls.verify     = verify_peer\ndefinitions.tls.fail_if_no_peer_cert = true\n\ndefinitions.tls.cacertfile = /path/to/ca_certificate.pem\ndefinitions.tls.certfile   = /path/to/client_certificate.pem\ndefinitions.tls.keyfile    = /path/to/client_key.pem\n```\n\n----------------------------------------\n\nTITLE: AMQP Type Conversion Rules Table\nDESCRIPTION: Conversion rules table detailing how AMQP 0.9.1 types are mapped to AMQP 1.0 types, including specific conditions and conversion notes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/conversions.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| AMQP 0.9.1 type | Condition                            | AMQP 1.0 type | Comment                                    |\n| --------------- | ------------------------------------ | ------------- | ------------------------------------------ |\n| longstr         | `shortstr`                           | utf8          | Performance / accuracy trade-off |\n| longstr         |                                      | binary        |                                            |\n```\n\n----------------------------------------\n\nTITLE: Installing amqp.node Client for RabbitMQ in Node.js\nDESCRIPTION: Command to install the amqp.node client library using npm, which allows Node.js applications to interact with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install amqplib\n```\n\n----------------------------------------\n\nTITLE: Installing amqp.node Client for RabbitMQ in Node.js\nDESCRIPTION: Command to install the amqp.node client library using npm, which allows Node.js applications to interact with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install amqplib\n```\n\n----------------------------------------\n\nTITLE: Referencing AMQP 0-9-1 Method in RabbitMQ\nDESCRIPTION: Mentions the access.request method from the deprecated access class in AMQP 0-9-1. RabbitMQ implements this as a no-op for backwards compatibility but plans to remove it in the future.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/spec-differences.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naccess.request\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Windows System-wide Certificate Store\nDESCRIPTION: PowerShell command for adding a certificate to the system-wide (machine) Root certificate store on Windows. This makes the certificate trusted by all users on the system.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows\ncertmgr -add -all \\path\\to\\cacert.cer -s -r localMachine Root\n```\n\n----------------------------------------\n\nTITLE: Checking ERL_MAX_PORTS Value in RabbitMQ\nDESCRIPTION: Command to query the effective port limit setting in a RabbitMQ node using rabbitmqctl.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'erlang:system_info(port_limit).'\n```\n\n----------------------------------------\n\nTITLE: Defining the drain field in AMQP 1.0 flow frame\nDESCRIPTION: XML definition of the drain field in AMQP 1.0 flow frame. The drain field is a boolean that defaults to false and allows a consumer to request the sender to use all available link credit by sending messages or advancing the delivery count.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"drain\" type=\"boolean\" default=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Stunnel Configuration for TLS Testing\nDESCRIPTION: Configuration file for stunnel to proxy TLS connections for testing client configurations independently.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nforeground = yes\n\n[rabbit-amqp]\nconnect = localhost:5672\naccept = 5679\ncert = client/key-cert.pem\ndebug = 7\n```\n\n----------------------------------------\n\nTITLE: Setting Federation Policy in Bash\nDESCRIPTION: Creates a policy that enables federation for exchanges matching the pattern '^federated\\.' using all configured upstreams.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federated-exchanges/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy exchange-federation \\\n    \"^federated\\.\" \\\n    '{\"federation-upstream-set\":\"all\"}' \\\n    --priority 10 \\\n    --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Setting Scheduler-to-CPU Core Binding Strategy for RabbitMQ\nDESCRIPTION: Specifies the scheduler binding strategy using the RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable. The 'nnts' strategy is used as an example, which stands for 'No Node Thread Spreading'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/runtime.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+stbt nnts\"\n```\n\n----------------------------------------\n\nTITLE: Using AMQP 0-9-1 Basic Get Method\nDESCRIPTION: Shows the AMQP 0-9-1 method used for fetching individual messages from a queue, similar to HTTP GET, as an alternative to using consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/queues.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<code>basic.get</code>\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host with Description and Tags\nDESCRIPTION: Creates a new virtual host with a description and tags for organization purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost project9_dev_18 --description 'Dev environment no. 18' --tags dev,project9\n```\n\n----------------------------------------\n\nTITLE: Creating Queue Binding in RabbitMQ with .NET\nDESCRIPTION: Example of binding a queue to an exchange with a routing key parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait channel.QueueBindAsync(queue: queueName, exchange: \"direct_logs\", routingKey: \"black\");\n```\n\n----------------------------------------\n\nTITLE: MQTT-AMQP Field Mapping Table in Markdown\nDESCRIPTION: Detailed markdown table showing the mapping between MQTT 5.0 and AMQP 1.0 message fields. Includes field types, conditions, and implementation notes for protocol translation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/conversions.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| MQTT 5.0 Section             | MQTT Field                 | MQTT 5.0 Type         | Condition                             | AMQP 1.0 Section       | AMQP 1.0 Field | AMQP 1.0 Type | Comment                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| ---------------------------- | -------------------------- | --------------------- | ------------------------------------- | ---------------------- | -------------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Fixed Header                 | Dup                        | Bits                  |                                       |                        |                |               | Setting to header first-acquirer does not make sense because the DUP flag only applies from client to server (consumption from server to client is determined by the Redelivered flag sent from the queues)                                                                                                                                                                                                                                           |\n| Fixed Header                 | QoS                        | Bits                  |                                       | header                 | durable        | boolean       | durable is true if QoS > 0                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| Fixed Header                 | Retain                     | Bits                  |                                       |                        |                |               |                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Host with Description and Tags\nDESCRIPTION: Creates a new virtual host with a description and tags for organization purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/rabbitmqctl.8.md#2025-04-09_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl add_vhost project9_dev_18 --description 'Dev environment no. 18' --tags dev,project9\n```\n\n----------------------------------------\n\nTITLE: Configuring APT Preferences for Erlang Packages\nDESCRIPTION: Sets up APT preferences to prioritize Erlang packages from a specific repository mirror.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n# /etc/apt/preferences.d/erlang\nPackage: erlang*\nPin: origin ppa1.rabbitmq.com\n# Note: priority of 1001 (greater than 1000) allows for downgrading.\n# To make package downgrading impossible, use a value of 999\nPin-Priority: 1001\n```\n\n----------------------------------------\n\nTITLE: Binding Queue to Exchange\nDESCRIPTION: Creates a binding between the logs exchange and a queue to receive messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-python.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchannel.queue_bind(exchange='logs',\n                   queue=result.method.queue)\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Secret for OAuth 2.0 in RabbitMQ Management UI (INI)\nDESCRIPTION: Configuration to set up a client secret for OAuth 2.0 authentication in the RabbitMQ management UI, which may be required by some OAuth providers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_client_id = rabbit_user_client\nmanagement.oauth_client_secret = rabbit_user_client\nmanagement.oauth_scopes = openid profile rabbitmq.*\n```\n\n----------------------------------------\n\nTITLE: Disabling Firehose Tracing in RabbitMQ\nDESCRIPTION: Command to turn off Firehose tracing for a specific virtual host in RabbitMQ. This stops the capture of all published and delivered messages, restoring normal operation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/firehose.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl trace_off -p [virtual host]\n```\n\n----------------------------------------\n\nTITLE: Server Log Example for Unavailable Durable Queue\nDESCRIPTION: Example log message that appears when attempting to operate on a durable queue whose leader node is unavailable. This shows how RabbitMQ reports the queue is inaccessible.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ha/index.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\noperation queue.declare caused a channel exception not_found: home node 'rabbit@hostname' of durable queue 'queue-name' in vhost '/' is down or inaccessible\n```\n\n----------------------------------------\n\nTITLE: Opening an AMQP 1.0 Connection in C#\nDESCRIPTION: Creates a connection to an AMQP 1.0 broker using the IEnvironment instance in C#, with options for custom settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// open a connection from the environment setting   \nIConnection connection = await environment.CreateConnectionAsync();\n\n//open a connection from the environment with different settings\nConnectionSettingBuilder otherSettingBuilder = ConnectionSettingBuilder.Create()\n    .ContainerId(\"my_containerId\")\n    .Host(\"localhost\");\nIConnection connection = await environment.CreateConnectionAsync(otherSettingBuilder.Build());\n// ...\n// close the connection when it is no longer necessary\nawait connection.CloseAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic-based Log Emitter in C#\nDESCRIPTION: This code snippet demonstrates how to create a log emitter using a topic exchange in RabbitMQ. It allows sending messages with routing keys in the format <facility>.<severity>.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-dotnet.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nhttps://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/EmitLogTopic/EmitLogTopic.cs\n```\n\n----------------------------------------\n\nTITLE: Checking Active Listeners with RabbitMQ Diagnostics\nDESCRIPTION: Uses the rabbitmq-diagnostics tool to list all active listeners including HTTP API endpoints, showing their interfaces, ports, and protocols.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -s listeners\n# => Interface: [::], port: 15672, protocol: http, purpose: HTTP API\n# => Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)\n```\n\n----------------------------------------\n\nTITLE: Node Name Suffix Configuration\nDESCRIPTION: Configuration for adding domain suffixes to node names in Consul.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = consul\n\ncluster_formation.consul.host = consul.eng.example.local\n\ncluster_formation.consul.svc = rabbitmq\n# do compute service address\ncluster_formation.consul.svc_addr_auto = true\n# compute service address using node name\ncluster_formation.consul.svc_addr_use_nodename = true\n# use long RabbitMQ node names?\ncluster_formation.consul.use_longname = true\n# append a suffix (node.rabbitmq.example.local) to node names retrieved from Consul\ncluster_formation.consul.domain_suffix = example.local\n```\n\n----------------------------------------\n\nTITLE: Event Stream Consumption Command\nDESCRIPTION: Command to consume and display internal RabbitMQ events as JSON objects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration with Value Escaping (Classic Format)\nDESCRIPTION: The equivalent configuration to the above example but in the classic Erlang terms format, showing how special characters are handled differently.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n%% this is a comment\n[\n  {rabbit, [\n      {default_user, <<\"40696e180b610ed9\">>},\n      {default_pass, <<\"efd3!53a9@_2#a08\">>}\n    ]\n  }\n].\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set up a federation upstream on the 'green' cluster, pointing to the 'blue' cluster. It uses the rabbitmqctl command to set a federation parameter.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/blue-green-upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream blue \\\n  '{\"uri\":\"amqp://node-in-blue-cluster\"}'\n```\n\n----------------------------------------\n\nTITLE: Streaming Log Output\nDESCRIPTION: Command to stream logs from a running RabbitMQ node for a specified duration in seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics log_tail_stream --duration 60\n```\n\n----------------------------------------\n\nTITLE: Using Cuts with Tuples in Erlang\nDESCRIPTION: Shows how cuts can be used with tuple expressions in Erlang.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\nF = {_, 3},\n{a, 3} = F(a).\n```\n\n----------------------------------------\n\nTITLE: Linking to RabbitMQ/0MQ Bridge Repository\nDESCRIPTION: Provides a hyperlink to the GitHub repository containing the RabbitMQ/0MQ bridge implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-10-18-rabbitmq0mq-bridge/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[http://github.com/rabbitmq/rmq-0mq](http://github.com/rabbitmq/rmq-0mq)\n```\n\n----------------------------------------\n\nTITLE: Combining Certificate and Private Key for RabbitMQ TLS\nDESCRIPTION: This command concatenates the server certificate and private key into a single file for use in RabbitMQ TLS configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat server_certificate.pem server_key.pem > combined_keys.pem\n```\n\n----------------------------------------\n\nTITLE: Emitting Error Log Message to RabbitMQ in Go\nDESCRIPTION: Command to run a Go program that sends an error log message to RabbitMQ with a specific routing key, demonstrating how to publish messages to a direct exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-go.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo run emit_log_direct.go error \"Run. Run. Or it will explode.\"\n# => [x] Sent 'error':'Run. Run. Or it will explode.'\n```\n\n----------------------------------------\n\nTITLE: Increasing Initial Frame Size Limit in RabbitMQ Configuration (INI)\nDESCRIPTION: Demonstrates how to increase the initial frame size limit to 8192 bytes in rabbitmq.conf to accommodate larger JWT tokens.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-oauth2.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ninitial_frame_max = 8192\n```\n\n----------------------------------------\n\nTITLE: Defining AMQP Method Status Table in HTML\nDESCRIPTION: This HTML snippet defines a table structure for displaying the status of various AMQP 0-9-1 methods in RabbitMQ. It includes method names, status indicators, and explanations for partial implementations or deviations from the specification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/specification.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"amqpRules\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n    <tbody>\n        <tr>\n            <th>Current Status</th>\n            <th>Type</th>\n            <th>Actor</th>\n            <th>Reference</th>\n            <th>Text</th>\n        </tr>\n        <tr>\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>MUST NOT</td>\n            <td></td>\n            <td>delivery-tag / channel-local</td>\n            <td>\n                <div>\n                    The delivery tag is valid only within the channel from which the message was received. I.e. a client MUST NOT receive a message on one channel and then acknowledge it on another.\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"statusCell status_ok\">ok</td>\n            <td>MUST NOT</td>\n            <td></td>\n            <td>delivery-tag / non-zero</td>\n            <td>\n                <div>\n                    The server MUST NOT use a zero value for delivery tags. Zero is reserved for client use, meaning \"all messages so far received\".\n                </div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting backing queue module in RabbitMQ (advanced)\nDESCRIPTION: Advanced configuration for the implementation module for queue contents. Part of the advanced configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/configure.md#2025-04-09_snippet_52\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit, [\n{backing_queue_module, rabbit_variable_queue}\n]}\n```\n\n----------------------------------------\n\nTITLE: Receiving Critical Logs with Topic Exchange in Bash\nDESCRIPTION: This command runs the receive_logs_topic.js script to receive all critical logs by using the '*.critical' routing key pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./receive_logs_topic.js \"*.critical\"\n```\n\n----------------------------------------\n\nTITLE: AMQP Protocol Field Mapping Table\nDESCRIPTION: Detailed mapping table showing how fields and properties are converted between AMQP 0.9.1 and AMQP 1.0 protocols, including section mappings and type conversions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/conversions.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| AMQP 0.9.1 section | AMQP 0.9.1 field | AMQP 0.9.1 type     | Condition                             | AMQP 1.0 section       | AMQP 1.0 Field   | AMQP 1.0 Type | Comment                             |\n| ------------------ | ---------------- | ------------------- | ------------------------------------- | ---------------------- | ---------------- | ------------- | ----------------------------------- |\n| basic properties   | message_id       | shortstr            | valid urn uuid                        | properties             | message_id       | uuid          |                                     |\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings using rabbitmqctl\nDESCRIPTION: Command to list all bindings on the RabbitMQ server using the rabbitmqctl administrative tool. This helps verify that the code creates the expected bindings between exchanges and queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-objectivec.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_bindings\n```\n\n----------------------------------------\n\nTITLE: Consuming Event Stream in RabbitMQ (Bash)\nDESCRIPTION: Streams internal events from a running node with options for duration, pattern matching, and timeout. Output is jq-compatible for easy parsing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream -n rabbit@hostname --duration 20 --pattern queue_.*\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Plugin with Typo (Bash)\nDESCRIPTION: This snippet demonstrates an attempt to enable a RabbitMQ plugin with a typo in the name, resulting in an error. It illustrates the importance of double-checking plugin names when using rabbitmq-plugins.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# note the typo\nrabbitmq-plugins enable rabbitmq_managemenr\n# => Error:\n# => {:plugins_not_found, [:rabbitmq_managemenr]}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Active Consumer for Stream with Java Client\nDESCRIPTION: This code demonstrates how to initialize a stream consumer with the single active consumer flag enabled using the RabbitMQ Stream Java client. The consumer is configured with a stream, name reference for grouping, and auto-tracking strategy for message handling.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println(\"Starting consumer instance \" + i);\nConsumer consumer = environment.consumerBuilder()\n    .stream(stream)\n    .name(reference)\n    .singleActiveConsumer()\n    .autoTrackingStrategy()\n        .messageCountBeforeStorage(10)\n    .builder()\n    .messageHandler((context, message) -> {\n        System.out.printf(\n            \"Consumer instance %d received a message (%d).%n\",\n            i, sequence.incrementAndGet()\n        );\n    })\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Arguments for Message Body in Go\nDESCRIPTION: A helper function that extracts the message body from command line arguments. If no arguments are provided, it defaults to 'hello'. Otherwise, it joins all arguments with spaces to form the message body.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-go.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc bodyFrom(args []string) string {\n\tvar s string\n\tif (len(args) < 2) || os.Args[1] == \"\" {\n\t\ts = \"hello\"\n\t} else {\n\t\ts = strings.Join(args[1:], \" \")\n\t}\n\treturn s\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TLS for etcd Peer Discovery\nDESCRIPTION: Configuration for enabling TLS when connecting to etcd. This includes setting up CA certificate, client certificate, and private key for secure connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Message Requeuing in .NET\nDESCRIPTION: Shows message requeuing implementation using RabbitMQ .NET client. Uses IModel#BasicReject with requeue parameter to return messages to the queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/confirms.md#2025-04-09_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // requeue the delivery\n                    channel.BasicReject(ea.DeliveryTag, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Inter-node TLS Configuration File Example on Windows\nDESCRIPTION: Windows-specific example of an inter_node_tls.config file with TLS settings for both server and client connections. It uses Windows path conventions for certificate files and defines security settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[\n    {server, [\n        {cacertfile, \"C:/Path/To/ca_certificate.pem\"},\n        {certfile, \"C:/Path/To/server_certificate.pem\"},\n        {keyfile, \"C:/Path/To/server_key.pem\"},\n        {password, \"password-if-keyfile-is-encrypted\"},\n        {secure_renegotiate, true},\n        {verify, verify_peer},\n        {fail_if_no_peer_cert, true}\n    ]},\n    {client, [\n        {cacertfile, \"C:/Path/To/ca_certificate.pem\"},\n        {certfile, \"C:/Path/To/client_certificate.pem\"},\n        {keyfile, \"C:/Path/To/client_key.pem\"},\n        {password, \"password-if-keyfile-is-encrypted\"},\n        {secure_renegotiate, true},\n        {verify, verify_peer}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Publisher Script\nDESCRIPTION: Command to execute the sender script that publishes a message to the RabbitMQ queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./send.js\n```\n\n----------------------------------------\n\nTITLE: Setting Default Classic Queue Version in RabbitMQ Configuration\nDESCRIPTION: Configures the default version for classic queues to use version 2, which provides a more efficient message storage and queue index implementation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/persistence-conf.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# makes classic queues use a more efficient message storage\n# and queue index implementations\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Limit in RabbitMQ\nDESCRIPTION: Sets the maximum number of channels that can be opened on a connection at the same time to 100.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/channels/index.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# no more 100 channels can be opened on a connection at the same time\nchannel_max = 100\n```\n\n----------------------------------------\n\nTITLE: Displaying RabbitMQ Default Paths in Markdown Table\nDESCRIPTION: This markdown snippet presents a table of RabbitMQ environment variables and their default locations when using a generic binary build. It includes paths for configuration files, data directories, log files, and plugin-related directories.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/relocate.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <th>Name</th><th>Location</th>\n  <tr>\n    <td>RABBITMQ_BASE</td>\n    <td>\n      (Not used)\n    </td>\n  </tr>\n  <tr>\n    <td>RABBITMQ_CONFIG_FILE</td>\n    <td>\n      `$RABBITMQ_HOME/etc/rabbitmq/rabbitmq`\n    </td>\n  </tr>\n  <tr>\n    <td>RABBITMQ_MNESIA_BASE</td>\n    <td>\n      `$RABBITMQ_HOME/var/lib/rabbitmq/mnesia`\n    </td>\n  </tr>\n\n  <tr>\n    <td>RABBITMQ_MNESIA_DIR</td>\n    <td>\n      `$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME`\n    </td>\n  </tr>\n\n  <tr>\n    <td>RABBITMQ_LOG_BASE</td>\n    <td>\n      `$RABBITMQ_HOME/var/log/rabbitmq`\n    </td>\n  </tr>\n\n  <tr>\n    <td>RABBITMQ_LOGS</td>\n    <td>\n      `$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log`\n    </td>\n  </tr>\n\n  <tr>\n    <td>RABBITMQ_PLUGINS_DIR</td>\n    <td>\n      `$RABBITMQ_HOME/plugins`\n    </td>\n  </tr>\n\n  <tr>\n    <td>RABBITMQ_PLUGINS_EXPAND_DIR</td>\n    <td>\n      `$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand`\n    </td>\n  </tr>\n\n  <tr>\n    <td>RABBITMQ_PID_FILE</td>\n    <td>\n      `$RABBITMQ_MNESIA_DIR.pid`\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Complete Log Emitter Implementation\nDESCRIPTION: Full implementation of a direct log emitter that publishes messages with severity levels\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nrequire 'bunny'\n\nconnection = Bunny.new\nconnection.start\n\nchannel = connection.create_channel\nexchange = channel.direct('direct_logs')\nseverity = ARGV.shift || 'info'\nmessage = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')\n\nexchange.publish(message, routing_key: severity)\nputs \" [x] Sent '#{message}'\"\n\nconnection.close\n```\n\n----------------------------------------\n\nTITLE: Emitting Logs with Topic Exchange in RabbitMQ using Objective-C\nDESCRIPTION: This snippet demonstrates how to emit logs using a topic exchange in RabbitMQ. It creates a connection, declares a topic exchange, and publishes a message with a specified routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-objectivec.md#2025-04-09_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)emitLogTopic:(NSString *)msg routingKey:(NSString *)routingKey {\n    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];\n    [conn start];\n\n    id<RMQChannel> ch = [conn createChannel];\n    RMQExchange *x    = [ch topic:@\"topic_logs\"];\n\n    [x publish:[msg dataUsingEncoding:NSUTF8StringEncoding] routingKey:routingKey];\n    NSLog(@\"Sent '%@'\", msg);\n\n    [conn close];\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric Example for MQTT Protocol\nDESCRIPTION: Example of a Prometheus metric using global counters to track MQTT message routing with protocol version labels.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-03-21-native-mqtt/index.md#2025-04-09_snippet_5\n\nLANGUAGE: prometheus\nCODE:\n```\nrabbitmq_global_messages_routed_total{protocol=\"mqtt311\"} 10\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ CLI Aliases\nDESCRIPTION: Example of a CLI aliases configuration file using ini-style format. It defines shortcuts for common RabbitMQ CLI commands.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nenv = environment\nst  = status --quiet\n\nlp  = list_parameters --quiet\nlq  = list_queues --quiet\nlu  = list_users --quiet\n\ncs  = cipher_suites --openssl-format --quiet\n```\n\n----------------------------------------\n\nTITLE: Consuming Internal Event Stream in RabbitMQ\nDESCRIPTION: Command to consume the internal event stream of a RabbitMQ node, emitting JSON objects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/logging.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics consume_event_stream\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ etcd Peer Discovery\nDESCRIPTION: Configuration for enabling TLS in RabbitMQ's etcd-based peer discovery. This snippet shows how to set up TLS certificates, version, and verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Starting JMS Subscriber with OAuth 2.0 Authentication\nDESCRIPTION: This command starts a JMS subscriber application that uses OAuth 2.0 for authentication with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake start-jms-subscriber\n```\n\n----------------------------------------\n\nTITLE: Creating CPU Flame Graph from perf Data\nDESCRIPTION: Commands to process the perf.data file and create a CPU flame graph using the FlameGraph tools.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brendangregg/FlameGraph.git\nsudo perf script > out.perf\n./FlameGraph/stackcollapse-perf.pl out.perf > out.folded\nsed -e 's/^[0-9]\\+_//' -e 's/^erts_\\([^_]\\+\\)_[0-9]\\+/erts_\\1/' out.folded > out.folded_sched\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Consumer Triple in AMQP 0-9-1\nDESCRIPTION: Illustrates the specific use of 'consumer' referring to a triple of connection, channel, and consumer-tag in AMQP 0-9-1.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/amqp-0-9-1-errata.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n{connection, channel, consumer-tag}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP for Authentication with Internal Authorization\nDESCRIPTION: Configuration that uses LDAP for authentication but the internal database for authorization, with a fallback to the internal database for both if the user is not found in LDAP.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# use LDAP for authentication first\nauth_backends.1.authn = ldap\n# use internal database for authorisation\nauth_backends.1.authz = internal\n# fall back to the internal database\nauth_backends.2 = internal\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Stream Consumer with Offset Tracking\nDESCRIPTION: Shell commands to execute the offset tracking consumer implementation and example output showing successful offset tracking across multiple runs.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-python-stream.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 offset_tracking_receive.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nStarted consuming: Press control +C to close\nFirst message received.\nDone consuming, first offset 0, last offset 99.\n```\n\nLANGUAGE: shell\nCODE:\n```\npython3 offset_tracking_receive.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nStarted consuming...\nFirst message received.\nDone consuming, first offset 100, last offset 199.\n```\n\n----------------------------------------\n\nTITLE: Configuring STOMP TCP Listeners for Localhost\nDESCRIPTION: Configuration to set STOMP listeners to only listen on localhost for both IPv4 and IPv6.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/stomp.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nstomp.listeners.tcp.1 = 127.0.0.1:61613\nstomp.listeners.tcp.2 = ::1:61613\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for RabbitMQ etcd Peer Discovery\nDESCRIPTION: Configuration for enabling TLS in RabbitMQ's etcd-based peer discovery. This snippet shows how to set up TLS certificates, version, and verification options.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cluster-formation.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\n\n# trusted CA certificate file path\ncluster_formation.etcd.ssl_options.cacertfile = /path/to/ca_certificate.pem\n# client certificate (public key) file path\ncluster_formation.etcd.ssl_options.certfile   = /path/to/client_certificate.pem\n# client private key file path\ncluster_formation.etcd.ssl_options.keyfile    = /path/to/client_key.pem\n\n# use TLSv1.2 for connections\ncluster_formation.etcd.ssl_options.versions.1 = tlsv1.2\n\n# enables peer verification (the plugin will verify the certificate chain of the server)\ncluster_formation.etcd.ssl_options.verify               = verify_peer\ncluster_formation.etcd.ssl_options.fail_if_no_peer_cert = true\n```\n\n----------------------------------------\n\nTITLE: Listing Certificates in Mono Trust Store\nDESCRIPTION: Bash command for listing all certificates in the Mono Trust store on Linux. This allows verification that certificates have been properly added.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncertmgr -list -c Trust\n\n# … snip …\n\nSelf-signed X.509 v3 Certificate\n  Serial Number: AC3F2B74ECDD9EEA00\n  Issuer Name:   CN=MyTestCA\n  Subject Name:  CN=MyTestCA\n  valid From:    25/08/2018 14:03:01\n  valid Until:   24/09/2018 14:03:01\n  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E\n```\n\n----------------------------------------\n\nTITLE: Referencing System Exchanges in Markdown\nDESCRIPTION: This snippet shows how to reference system exchanges in Markdown. It's used to introduce the built-in exchanges provided by RabbitMQ for logging and audit purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/exchanges.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## System Exchanges {#system}\n```\n\n----------------------------------------\n\nTITLE: Failed Update Operation for Immutable Resource Fields in RabbitMQ Topology\nDESCRIPTION: Example of an error message received when attempting to update immutable fields of a RabbitMQ queue resource. The validating webhook rejects updates to the 'name', 'vhost', and 'rabbitmqClusterReference' fields.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f test-queue.yaml\nError from server (Forbidden):\n...\nResource: \"rabbitmq.com/v1beta1, Resource=queues\", GroupVersionKind: \"rabbitmq.com/v1beta1, Kind=Queue\"\nName: \"example\", Namespace: \"rabbitmq-system\"\nfor: \"test-queue.yaml\": admission webhook \"vqueue.kb.io\" denied the request: Queue.rabbitmq.com \"example\" is forbidden: spec.name: Forbidden: updates on name, vhost, and rabbitmqClusterReference are all forbidden\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Severity Levels in Swift RabbitMQ Client\nDESCRIPTION: Creating bindings for multiple severity levels, allowing a queue to receive messages of various severities (error, warning, info) from a direct exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-four-swift.md#2025-04-09_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet q = ch.queue(\"\", options: .exclusive)\nlet severities = [\"error\", \"warning\", \"info\"]\nfor severity: String in severities {\n    q.bind(x, routingKey: severity)\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for quorum queues readiness in rabbitmq-upgrade\nDESCRIPTION: Command to ensure all quorum queues have above minimum online quorum before proceeding with node shutdown, preventing loss of quorum.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-upgrade.8.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nawait_online_quorum_plus_one\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for RabbitMQ Consumer in Go\nDESCRIPTION: Import statements required for the message consumer, including the AMQP library and logging package.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-go.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n\n  amqp \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc failOnError(err error, msg string) {\n  if err != nil {\n    log.Panicf(\"%s: %s\", msg, err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Stream Producer in Java\nDESCRIPTION: Demonstrates how to set up a producer for a Super Stream with routing key configuration. The example shows how to extract a message ID as routing key for partition selection using MurmurHash3.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-13-rabbitmq-3-11-feature-preview-super-streams/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment.producerBuilder()\n    .superStream(\"invoices\") // set the super stream name\n    .routing(message -> message.getProperties().getMessageIdAsString()) // extract routing key \n    .producerBuilder()\n    .build();\n\nproducer.send(...);\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret Definition for Webhook Certificates\nDESCRIPTION: YAML definition for creating a Kubernetes Secret containing webhook certificates required for RabbitMQ Messaging Topology Operator webhooks.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-topology-operator.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/tls\nmetadata:\n  name: webhook-server-cert\n  namespace: rabbitmq-system\ndata:\n  ca.crt: # ca cert that can be used to validate the webhook's server certificate\n  tls.crt: # generated certificate\n  tls.key: # generated private key\n```\n\n----------------------------------------\n\nTITLE: Example Encrypted Configuration\nDESCRIPTION: Example of encrypted configuration with password protection in advanced.config\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_45\n\nLANGUAGE: erlang\nCODE:\n```\n[\n  {rabbit, [\n      {default_user, <<\"guest\">>},\n      {default_pass,\n        {encrypted,\n         <<\"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==\">>\n        }\n      },\n      {config_entry_decoder, [\n             {passphrase, <<\"mypassphrase\">>}\n         ]}\n    ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Displaying AMQP Protocol Version Table in HTML\nDESCRIPTION: HTML table showing AMQP protocol versions, their documentation links, and machine-readable specifications. Includes entries for AMQP 1.0 and AMQP 0-9-1 with RabbitMQ extensions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/specification.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"styled-table\">\n    <tbody>\n        <tr>\n            <th>Protocol Version</th>\n            <th>Documentation (PDF)</th>\n            <th>Machine-Readable Spec (XML)</th>\n        </tr>\n        <tr>\n            <td>AMQP 1.0</td>\n            <td>\n                <a href=\"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">Specification</a>\n            </td>\n            <td>\n                <a href=\"https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.xml\">Full</a>\n            </td>\n        </tr>\n        <tr>\n            <td>AMQP 0-9-1 plus RabbitMQ extensions</td>\n            <td>\n                <a href=\"https://github.com/rabbitmq/amqp-0.9.1-spec/blob/main/pdf/amqp0-9-1.pdf\">Specification</a> |\n                <a href=\"./amqp-0-9-1-errata\">Errata document</a>\n                <a href=\"https://github.com/rabbitmq/amqp-0.9.1-spec/blob/main/pdf/amqp-xml-doc0-9-1.pdf\">Generated Reference</a>\n            </td>\n            <td>\n                <a href=\"https://github.com/rabbitmq/amqp-0.9.1-spec/blob/main/xml/amqp0-9-1.extended.xml\">Full Reference</a> |\n                <a href=\"https://github.com/rabbitmq/amqp-0.9.1-spec/blob/main/xml/amqp0-9-1.stripped.extended.xml\">BSD-licensed XML</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Alternative TLS Version Check (Unix)\nDESCRIPTION: Alternative command to check TLS versions using rabbitmqctl eval on Unix-like systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl eval 'ssl:versions().'\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Queue Using rabbitmqadmin\nDESCRIPTION: Command for declaring a durable stream queue named 'my-stream' using the rabbitmqadmin CLI tool. This prepares the environment for stream benchmarks in the following sections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndeps/rabbitmq_management/bin/rabbitmqadmin declare queue \\\n    name=my-stream queue_type=stream durable=true\n```\n\n----------------------------------------\n\nTITLE: Regenerating HTML Man Pages for RabbitMQ using Shell Script\nDESCRIPTION: This shell command demonstrates how to use the update-manpages.sh script to regenerate HTML man pages for RabbitMQ. It requires the path to the rabbitmq-server repository as an argument.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/man/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./website/versioned_docs/version-3.13/man/update-manpages.sh /path/to/rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: RPC Client Usage Example in C#\nDESCRIPTION: Example showing how to use the RPC client to request Fibonacci calculations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-dotnet.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<int> CallAsync(int n)\n{\n    var tcs = new TaskCompletionSource<int>();\n    var correlationId = Guid.NewGuid().ToString();\n    _callbackMapper.TryAdd(correlationId, tcs);\n    PublishMessage(n, correlationId);\n    return await tcs.Task;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Node Cleanup Interval in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to set the interval for node cleanup checks in RabbitMQ. It configures the cluster_formation.node_cleanup.interval to 90 seconds.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.node_cleanup.interval = 90\n```\n\n----------------------------------------\n\nTITLE: Advanced Cache Module Configuration\nDESCRIPTION: Advanced configuration example with custom cache module arguments in Erlang format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-cache-backend.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit, [\n   %% ...\n ]},\n\n {rabbitmq_auth_backend_cache, [\n    {cache_module, rabbit_auth_backend_ets_segmented},\n    {cache_module_args, [10000]}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Level Console Logging\nDESCRIPTION: Configuration to set console logging level to debug in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nlog.console.level = debug\n```\n\n----------------------------------------\n\nTITLE: Command Line Arguments Query - Bash\nDESCRIPTION: Displays node's command-line arguments as reported by runtime\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics command_line_arguments -n rabbit@hostname\n```\n\n----------------------------------------\n\nTITLE: Setting Overflow Behavior Policy with rabbitmqctl\nDESCRIPTION: Sets a policy to limit queue to 2 messages and reject new publishes when limit is reached.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/maxlength/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_policy my-pol \"^two-messages$\" \\\n  '{\"max-length\":2,\"overflow\":\"reject-publish\"}' \\\n  --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Running the Log Receiver to Display Logs on Screen\nDESCRIPTION: Runs the log receiver script to display logs on the console in real-time.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmix run receive_logs.exs\n```\n\n----------------------------------------\n\nTITLE: AMQP Capability Code Reference\nDESCRIPTION: HTML code snippets showing the AMQP capability identifier for authentication failure notifications and the connection close response code.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/auth-notification.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>authentication_failure_close</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>connection.close</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>ACCESS_REFUSED</code>\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Peer Discovery Configuration in RabbitMQ\nDESCRIPTION: Configuration example showing how to set up AWS peer discovery with region and credentials.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2018-02-18-peer-discovery-subsystem-in-rabbitmq-3-7/index.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws\n\ncluster_formation.aws.region = us-east-1\ncluster_formation.aws.access_key_id = ANIDEXAMPLE\ncluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ for Performance Testing\nDESCRIPTION: Erlang configuration to increase memory threshold and credit flow control settings for RabbitMQ performance testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit,[\n  {vm_memory_high_watermark, {absolute, 15_000_000_000}},\n  {credit_flow_default_credit, {1600, 800}}\n ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Khepri via Environment Variable in Bash\nDESCRIPTION: Command to start a RabbitMQ node with Khepri enabled directly at boot time using the RABBITMQ_FEATURE_FLAGS environment variable in Bash. This approach enables Khepri from the start.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/how-to-enable-khepri.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nenv RABBITMQ_FEATURE_FLAGS=\"khepri_db,...\" rabbitmq-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Cluster Name for etcd Peer Discovery\nDESCRIPTION: Configuration for setting a unique cluster name when multiple RabbitMQ clusters share the same etcd installation. The default cluster name is 'default'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/cluster-formation.md#2025-04-09_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.peer_discovery_backend = etcd\n\ncluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379\ncluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479\ncluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579\n\n# default name: \"default\"\ncluster_formation.etcd.cluster_name = staging\n```\n\n----------------------------------------\n\nTITLE: Importing AMQP BasicProperties in Java\nDESCRIPTION: Required import statement for working with AMQP message properties in the RabbitMQ Java client. This is needed for handling message properties like replyTo and correlationId.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-java.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.rabbitmq.client.AMQP.BasicProperties;\n```\n\n----------------------------------------\n\nTITLE: AMQP Basic Get Operation\nDESCRIPTION: Example of AMQP 0-9-1 basic.get method for fetching individual messages\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/queues.md#2025-04-09_snippet_3\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.get\n```\n\n----------------------------------------\n\nTITLE: Using Queue Performance Parameters with RabbitMQ Queues API\nDESCRIPTION: URL parameters that can be used with the /api/queues endpoint to optimize performance by disabling statistics but enabling queue totals.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/http-api-reference.md#2025-04-09_snippet_39\n\nLANGUAGE: http\nCODE:\n```\ndisable_stats=true&enable_queue_totals=true\n```\n\n----------------------------------------\n\nTITLE: Forcefully Resetting a RabbitMQ Node\nDESCRIPTION: Forcefully returns a RabbitMQ node to its initial state, regardless of the current management database state and cluster configuration. Should only be used as a last resort if the database or cluster configuration has been corrupted.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl force_reset\n```\n\n----------------------------------------\n\nTITLE: AMQP Queue Operations Example\nDESCRIPTION: AMQP 0-9-1 method for queue declaration and message count retrieval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/queues.md#2025-04-09_snippet_3\n\nLANGUAGE: AMQP\nCODE:\n```\nqueue.declare\nqueue.declare-ok\nmessage_count\n```\n\n----------------------------------------\n\nTITLE: Basic Message Publishing in RabbitMQ Streams - Java\nDESCRIPTION: Simple implementation of a message producer that publishes messages to a RabbitMQ stream without deduplication. Creates a producer, builds messages from records, and sends them to a specified stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProducer producer = environment.producerBuilder()\n  .stream(\"deduplication-stream\")\n  .build();\nint messageCount = 10;\nrecords(0, messageCount).forEach(record -> {\n  Message message = producer.messageBuilder()\n    .addData(record.content().getBytes(StandardCharsets.UTF_8))\n    .build();\n  producer.send(message, confirmationStatus -> latch.countDown());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Upstream in Bash\nDESCRIPTION: Command to set up a federation upstream named 'origin' pointing to a remote RabbitMQ host using the rabbitmqctl CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/federated-queues/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter federation-upstream origin '{\"uri\":\"amqp://remote-host.local:5672\"}'\n```\n\n----------------------------------------\n\nTITLE: Port-forwarding to RabbitMQ Cluster Operator for Metrics Collection\nDESCRIPTION: Command to establish port forwarding from local machine to the RabbitMQ Cluster Operator pod on port 9782, enabling access to profiling data. This connection allows metrics to be collected for debugging purposes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/debug-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl -n rabbitmq-system port-forward deployment/rabbitmq-cluster-operator 9782\nForwarding from 127.0.0.1:9782 -> 9782\nForwarding from [::1]:9782 -> 9782\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OAuth 2.0 Resources in RabbitMQ\nDESCRIPTION: Demonstrates the configuration of multiple OAuth 2.0 resources in RabbitMQ's configuration file, including resource server IDs, common settings, and OAuth provider details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-multiresource.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_servers.1.id = rabbit_prod\nauth_oauth2.resource_servers.2.id = rabbit_dev\n\nauth_oauth2.preferred_username_claims.1 = preferred_username\nauth_oauth2.preferred_username_claims.2 = user_name\nauth_oauth2.preferred_username_claims.3 = email\nauth_oauth2.issuer = https://keycloak:8443/realms/test\nauth_oauth2.scope_prefix = rabbitmq.\n\nauth_oauth2.oauth_providers.keycloak.issuer = https://keycloak:8443/realms/test\nauth_oauth2.oauth_providers.keycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem\nauth_oauth2.oauth_providers.keycloak.https.verify = verify_peer\nauth_oauth2.oauth_providers.keycloak.https.hostname_verification = wildcard\nauth_oauth2.default_oauth_provider = keycloak\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Regular Expression Validator in RabbitMQ\nDESCRIPTION: Sets up a credential validator that enforces a regular expression pattern for passwords.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/passwords.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ncredential_validator.validation_backend = rabbit_credential_validator_password_regexp\ncredential_validator.regexp = ^[a-bA-Z0-9$]{20,100}\n```\n\n----------------------------------------\n\nTITLE: Defining AMQPS URI Syntax in ABNF Notation\nDESCRIPTION: The formal ABNF syntax definition for AMQPS URI scheme, which follows the same structure as the AMQP URI scheme but with a different protocol prefix.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/uri-spec.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\namqps_URI      = \"amqps://\" amqp_authority [ \"/\" vhost ]\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stream with AMQP 0.9.1 Java Client\nDESCRIPTION: This code demonstrates how to create a stream using the AMQP 0.9.1 Java client by setting the 'x-queue-type' queue argument to 'stream'. Streams are created as durable queues that are neither exclusive nor auto-delete.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/streams.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nConnection connection = factory.newConnection();\nChannel channel = connection.createChannel();\nchannel.queueDeclare(\n  \"my-stream\",\n  true,         // durable\n  false, false, // not exclusive, not auto-delete\n  Collections.singletonMap(\"x-queue-type\", \"stream\")\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Contribution Information in HTML\nDESCRIPTION: This HTML code creates a section that encourages users to contribute to improving the RabbitMQ documentation. It includes a heading, a paragraph of text, and a link to the GitHub repository where the website source code is located.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/semantics.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"contribute\">\n    <h2>Help Us Improve the Docs &lt;3</h2>\n    <p>If you'd like to contribute an improvement to the site, its source is <a href=\"https://github.com/rabbitmq/rabbitmq-website\">available on GitHub</a>. Simply fork the repository and submit a pull request. Thank you!</p>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listing Bindings with RabbitMQ CLI\nDESCRIPTION: Command-line instruction to list all bindings between exchanges and queues on the RabbitMQ server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-ruby.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl list_bindings\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ CLI Authentication Failure Message in INI format\nDESCRIPTION: Example of an error message displayed when a RabbitMQ CLI tool fails to authenticate with a node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n* epmd reports node 'rabbit' running on port 25672\n* TCP connection succeeded but Erlang distribution failed\n* suggestion: hostname mismatch?\n* suggestion: is the cookie set correctly?\n* suggestion: is the Erlang distribution using TLS?\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer with RabbitMQ in Java\nDESCRIPTION: Demonstrates how to create a consumer that listens to a specific queue and processes messages using a message handler in Java. It also shows how to settle messages after processing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nConsumer consumer = connection.consumerBuilder()\n    .queue(\"some-queue\")\n    .messageHandler((context, message) -> {\n        byte[] body = message.body();\n        // ...\n        context.accept(); // settle the message\n    })\n    .build(); // do not forget to build the instance!\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON File Logging\nDESCRIPTION: Configuration for JSON-formatted file logging output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = info\nlog.file.formatter = json\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP with HTTP Fallback in RabbitMQ\nDESCRIPTION: This configuration uses LDAP as the primary authentication method and falls back to the HTTP backend. It includes additional settings for the HTTP backend paths.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n# rabbitmq.conf\n#\nauth_backends.1 = ldap\n# uses module name instead of a short alias, \"http\"\nauth_backends.2 = rabbit_auth_backend_http\n\n# See HTTP backend docs for details\nauth_http.user_path = http://my-authenticator-app/auth/user\nauth_http.vhost_path = http://my-authenticator-app/auth/vhost\nauth_http.resource_path = http://my-authenticator-app/auth/resource\nauth_http.topic_path = http://my-authenticator-app/auth/topic\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode in PowerShell\nDESCRIPTION: PowerShell command to put a RabbitMQ node into maintenance mode. This suspends client connections, transfers queue responsibilities, and prepares the node for shutdown with minimal disruption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/upgrade.md#2025-04-09_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-upgrade.bat drain\n```\n\n----------------------------------------\n\nTITLE: Building JMS Client for OAuth 2.0 Testing\nDESCRIPTION: This command builds a local Docker image for the basic JMS application used in OAuth 2.0 testing with RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake build-jms-client\n```\n\n----------------------------------------\n\nTITLE: Referencing Authentication Failure Close Capability in RabbitMQ\nDESCRIPTION: Code reference to the 'authentication_failure_close' capability that clients can advertise to receive explicit authentication failure notifications instead of abrupt connection closures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/auth-notification.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>authentication_failure_close</code>\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Stream Plugin\nDESCRIPTION: This command enables the RabbitMQ stream plugin in the running RabbitMQ Docker container.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-13-rabbitmq-streams-overview/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream\n```\n\n----------------------------------------\n\nTITLE: Generating mmap() Flame Graph (Bash)\nDESCRIPTION: Series of commands to process the perf data and generate an mmap() flame graph. This includes collapsing stack traces, merging scheduler data, and creating the final SVG file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo perf script > out.perf\n# Collapse multiline stacks into single lines\n./FlameGraph/stackcollapse-perf.pl out.perf > out.folded\n# Merge scheduler profile data\nsed -e 's/^[0-9]\\+_//' out.folded > out.folded_sched\n# Create the SVG file\n./FlameGraph/flamegraph.pl --title=\"mmap() Flame Graph\" --color=mem --countname=\"calls\" out.folded_sched > mmap.svg\n```\n\n----------------------------------------\n\nTITLE: Setting Queue TTL Using RabbitMQ Policy (Windows PowerShell)\nDESCRIPTION: Sets a policy that makes all queues expire after 30 minutes (1,800,000 milliseconds) of inactivity using rabbitmqctl command in Windows PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ttl.md#2025-04-09_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy expiry \".*\" \"{\"\"expires\"\":1800000}\" --apply-to queues\n```\n\n----------------------------------------\n\nTITLE: Setting Scheduler Binding Type using Environment Variable\nDESCRIPTION: Alternative method to configure scheduler-to-CPU core binding strategy using an environment variable instead of runtime flags.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/runtime.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_SCHEDULER_BIND_TYPE=\"nnts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-node TLS on Windows Using Environment Configuration\nDESCRIPTION: Windows-specific configuration in rabbitmq-env-conf.bat that enables TLS encryption for inter-node communication. This example uses the separate TLS option file approach adapted for Windows paths and syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/clustering-ssl.md#2025-04-09_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n@echo off\nrem NOTE: If spaces are present in any of these paths,\nrem double quotes must be used.\n\nrem NOTE: the following path is **system dependent** and will vary between Erlang versions\nrem       and installation paths\nset SSL_PATH=\"C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin\"\n\nrem -pa $ERL_SSL_PATH prepends the directory ERL_SSL_PATH points at to the code path\nrem -proto_dist inet_tls tells the runtime to encrypt inter-node communication\nrem -ssl_dist_optfile tells the runtime where to find its inter-node TLS configuration file\nset SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^\n    -proto_dist inet_tls ^\n    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config\n\nrem Same as above but for CLI tools\nset CTL_ERL_ARGS=-pa %SSL_PATH% ^\n    -proto_dist inet_tls ^\n    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config\n```\n\n----------------------------------------\n\nTITLE: Setting Per-User Limit in RabbitMQ (JSON)\nDESCRIPTION: JSON payload for the PUT /api/user-limits/{user}/{name} endpoint to set a per-user limit. This example sets the max-connections limit to 100.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/http-api-reference.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"value\": 100}\n```\n\n----------------------------------------\n\nTITLE: Detecting Stuck Processes\nDESCRIPTION: Command to identify potentially stuck Erlang processes by sampling and comparing stack traces.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics maybe_stuck -q\n```\n\n----------------------------------------\n\nTITLE: Apache Reverse Proxy Configuration for RabbitMQ API\nDESCRIPTION: Apache configuration for proxying requests to RabbitMQ HTTP API with encoded slashes support.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management/index.md#2025-04-09_snippet_19\n\nLANGUAGE: apacheconf\nCODE:\n```\nAllowEncodedSlashes On\nProxyPassReverse / http://rabbitmq-host:15672/\nProxyPass / http://rabbitmq-host:15672/ nocanon\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-enabled Shovel Connection using cURL\nDESCRIPTION: Shows how to create a shovel with TLS-enabled destination connection using the RabbitMQ HTTP API. The example demonstrates setting up a shovel where the source uses plain AMQP and the destination uses AMQPS with client certificates and disabled peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note: this user's access is limited to localhost.\\n#\\n# In the following example, the source URI connects to `localhost` and does not use TLS\\n# while the destination URI is modified to use TLS with peer verification disabled\\n# for simplicity\\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \\n                       -H \"content-type: application/json\" \\n                       -d @- <<EOF\\n{\\n  \"value\": {\\n    \"src-protocol\": \"amqp091\",\\n    \"src-uri\": \"amqp://localhost\",\\n    \"src-queue\": \"source-queue\",\\n    \"dest-protocol\": \"amqp091\",\\n    \"dest-uri\": \"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none\",\\n    \"dest-queue\": \"destination-queue\"\\n  }\\n}\\nEOF\n```\n\n----------------------------------------\n\nTITLE: Performing Comprehensive RabbitMQ Node Health Check in Bash\nDESCRIPTION: This command combines two checks using the rabbitmq-diagnostics tool: it verifies that the RabbitMQ application is running and that there are no local alarms in effect on the node.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms\n```\n\n----------------------------------------\n\nTITLE: Structuring RabbitMQ Support and Contribution Information in HTML\nDESCRIPTION: This HTML snippet provides information about RabbitMQ support channels and how to contribute to the documentation. It includes links to GitHub Discussions and Discord for asking questions, and a link to the GitHub repository for documentation contributions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/semantics.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"contribute\">\n    <h2>Help Us Improve the Docs &lt;3</h2>\n    <p>If you'd like to contribute an improvement to the site, its source is <a href=\"https://github.com/rabbitmq/rabbitmq-website\">available on GitHub</a>. Simply fork the repository and submit a pull request. Thank you!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Processing in Worker\nDESCRIPTION: C# code implementing an async consumer that processes messages with simulated work delays based on message content.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar consumer = new AsyncEventingBasicConsumer(channel);\nconsumer.ReceivedAsync += async (model, ea) =>\n{\n  var body = ea.Body.ToArray();\n  var message = Encoding.UTF8.GetString(body);\n  Console.WriteLine($\" [x] Received {message}\");\n\n  int dots = message.Split('.').Length - 1;\n  await Task.Delay(dots * 1000);\n\n  Console.WriteLine(\" [x] Done\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Interval for RabbitMQ Management Plugin\nDESCRIPTION: This snippet shows how to configure the statistics collection interval for the RabbitMQ Management plugin using the INI configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n# 15s\ncollect_statistics_interval = 15000\n```\n\n----------------------------------------\n\nTITLE: Running the Offset-Tracking Receiver for Second Run in Shell\nDESCRIPTION: Shell command to run the receiver again, demonstrating how it will resume from the previously stored offset.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-javascript-stream.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run offset-tracking-receive\n```\n\n----------------------------------------\n\nTITLE: Establishing Direct Connection in Erlang\nDESCRIPTION: Creates a direct connection to RabbitMQ using the amqp_connection:start/1 function with an #amqp_params_direct record. This method is used for applications deployed within the same Erlang cluster as RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n{ok, Connection} = amqp_connection:start(#amqp_params_direct{})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Registration in RabbitMQ Cluster Formation\nDESCRIPTION: Configuration to opt-out of automatic node registration with the peer discovery backend, requiring manual registration or using another mechanism.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/cluster-formation.md#2025-04-09_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\ncluster_formation.registration.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Channels per Node in RabbitMQ\nDESCRIPTION: Sets the maximum number of channels that can be opened on each node in a RabbitMQ cluster to 500.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/channels/index.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# no more than 500 channels can be opened on each node at the same time\nchannel_max_per_node = 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatekeeper for RabbitMQ Queue Monitoring\nDESCRIPTION: Gatekeeper configuration that instructs the system to monitor RabbitMQ Queue resources. This configuration is necessary before implementing policy constraints on Queue resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-02-21-gatekeeper-validation/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: config.gatekeeper.sh/v1alpha1\nkind: Config\nmetadata:\n  name: config\n  namespace: gatekeeper-system\nspec:\n  sync:\n    syncOnly:\n    - group: rabbitmq.com\n      version: v1beta1\n      kind: Queue\n```\n\n----------------------------------------\n\nTITLE: Using --help option with RabbitMQ CLI tools in bash\nDESCRIPTION: Demonstrates an alternative way to get help for RabbitMQ CLI tools using the --help flag in bash shell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/cli.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl --help\n\nrabbitmq-diagnostics --help\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandLineRunner for RabbitMQ Tutorial Execution\nDESCRIPTION: Runner class that implements CommandLineRunner to manage the execution duration of RabbitMQ tutorials. It keeps the application running for a configurable period before shutting down.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-spring-amqp.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.amqp.tutorials.tut1;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.context.ConfigurableApplicationContext;\n\npublic class RabbitAmqpTutorialsRunner implements CommandLineRunner {\n\n    @Value(\"${tutorial.client.duration:0}\")\n    private int duration;\n\n    @Autowired\n    private ConfigurableApplicationContext ctx;\n\n    @Override\n    public void run(String... arg0) throws Exception {\n        System.out.println(\"Ready ... running for \" + duration + \"ms\");\n        Thread.sleep(duration);\n        ctx.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ Server in Background (Bash)\nDESCRIPTION: This command runs the RabbitMQ AMQP server in the background using the -detached option. When used, the process ID will not be written to the PID file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-server.8.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-server -detached\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for AMQP Rules Documentation\nDESCRIPTION: HTML markup defining a table structure for displaying AMQP protocol rules with status indicators, rule types, actors, references, and rule descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/specification.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"amqpRules\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n    <tbody>\n        <tr>\n            <th>Current Status</th>\n            <th>Type</th>\n            <th>Actor</th>\n            <th>Reference</th>\n            <th>Text</th>\n        </tr>\n        <!-- Rule entries follow -->\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 JWKS Endpoint in RabbitMQ\nDESCRIPTION: Shows how to configure the JWKS endpoint with TLS settings including CA certificate, peer verification, and supported algorithms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.resource_server_id = new_resource_server_id\nauth_oauth2.jwks_url = https://my-jwt-issuer/jwks.json\nauth_oauth2.https.cacertfile = test/config_schema_SUITE_data/certs/cacert.pem\nauth_oauth2.https.peer_verification = verify_peer\nauth_oauth2.https.depth = 5\nauth_oauth2.https.fail_if_no_peer_cert = true\nauth_oauth2.https.hostname_verification = wildcard\nauth_oauth2.algorithms.1 = HS256\nauth_oauth2.algorithms.2 = RS256\n```\n\n----------------------------------------\n\nTITLE: Using Uppercase Four-Character Log Level Format in RabbitMQ\nDESCRIPTION: Configuration for setting log level format to uppercase four-character representation (e.g., 'INFO', 'WARN').\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/logging.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\n# use the four character, upper case format\nlog.file.formatter.level_format = uc4\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a blog post about RabbitMQ monthly updates, specifying title, tags and authors.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2019-07-09-this-month-in-rabbitmq-july-2019/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"This Month in RabbitMQ — July 2019\"\ntags: [\"Updates\", ]\nauthors: [mklishin]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-enabled Shovel Connection using cURL\nDESCRIPTION: Shows how to create a shovel with TLS-enabled destination connection using the RabbitMQ HTTP API. The example demonstrates setting up a shovel where the source uses plain AMQP and the destination uses AMQPS with client certificates and disabled peer verification.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note: this user's access is limited to localhost.\\n#\\n# In the following example, the source URI connects to `localhost` and does not use TLS\\n# while the destination URI is modified to use TLS with peer verification disabled\\n# for simplicity\\ncurl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \\n                       -H \"content-type: application/json\" \\n                       -d @- <<EOF\\n{\\n  \"value\": {\\n    \"src-protocol\": \"amqp091\",\\n    \"src-uri\": \"amqp://localhost\",\\n    \"src-queue\": \"source-queue\",\\n    \"dest-protocol\": \"amqp091\",\\n    \"dest-uri\": \"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none\",\\n    \"dest-queue\": \"destination-queue\"\\n  }\\n}\\nEOF\n```\n\n----------------------------------------\n\nTITLE: Deploying Forward Proxy for OAuth 2.0\nDESCRIPTION: Bash command to deploy and start the forward proxy on both Keycloak and RabbitMQ networks, enabling communication between the services.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-forward-proxy.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPROVIDER_NETWORK=keycloak_net make start-forward-proxy\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration for Connection Scalability Test\nDESCRIPTION: RabbitMQ configuration file using small TCP buffer sizes to better compare protocol memory usage, along with high memory watermarks to prevent paging during the test. The configuration allows access for guest users from any host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ntcp_listen_options.sndbuf = 2048\ntcp_listen_options.recbuf = 2048\nvm_memory_high_watermark.relative = 0.95\nvm_memory_high_watermark_paging_ratio = 0.95\nloopback_users = none\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Consumer Instances with Maven\nDESCRIPTION: This Maven command compiles and runs the SingleActiveConsumer Java application which starts three consumer instances with the single active consumer flag enabled to demonstrate the exclusive consumption behavior.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-07-05-rabbitmq-3-11-feature-preview-single-active-consumer-for-streams/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass=com.rabbitmq.stream.SingleActiveConsumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Security Headers in RabbitMQ Management\nDESCRIPTION: Sets security-related HTTP headers like X-Content-Type-Options, X-XSS-Protection, and X-Frame-Options to enhance browser security for management UI and API responses.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management/index.md#2025-04-09_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.headers.content_type_options = nosniff\nmanagement.headers.xss_protection = 1; mode=block\nmanagement.headers.frame_options = DENY\n```\n\n----------------------------------------\n\nTITLE: Inspecting Kernel Page Cache in Non-Containerized Environments with Bash\nDESCRIPTION: Command to check the size of the kernel page cache in non-containerized environments using the /proc/meminfo file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/memory-use/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/meminfo | grep -we \"Cached\"\n```\n\n----------------------------------------\n\nTITLE: Adding a User in RabbitMQ (Command Prompt)\nDESCRIPTION: This snippet illustrates how to add a user in RabbitMQ using the rabbitmqctl command in Windows Command Prompt. It shows providing the password as a command line argument and handling passwords with special characters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/access-control.md#2025-04-09_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nrem password is provided as a command line argument\nrabbitmqctl.bat add_user \"username\" \"9a55f70a841f18b97c3a7db939b7adc9e34a0f1d\"\n\nrem passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user \"username\" \"w63pnZ&LnYMO(t)\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Network Partition in RabbitMQ Log\nDESCRIPTION: Example of a log entry indicating a network partition detection in RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/partitions.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2020-05-18 06:55:37.324 [error] <0.341.0> Mnesia(rabbit@warp10): ** ERROR ** mnesia_event got {inconsistent_database, running_partitioned_network, rabbit@hostname2}\n```\n\n----------------------------------------\n\nTITLE: Starting Observer Interface\nDESCRIPTION: Command to start a CLI observer interface on the target node with configurable refresh interval.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics observer --interval 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-node Communication Interface with IP Address\nDESCRIPTION: RabbitMQ configuration to bind the inter-node communication listener to a specific IP address, restricting which network interfaces accept cluster and CLI connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/networking.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# Instructs the node to only listen for inter-node communication connections on a local interface.\n# This affects both connections from cluster peers and CLI tools.\ndistribution.listener.interface = 192.168.10.84\n```\n\n----------------------------------------\n\nTITLE: Customizing Bash Prompt with Version Control Information\nDESCRIPTION: This bash script customizes the command prompt to display user, host, current directory, and version control information. It uses vcprompt to fetch and format version control data.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-10-02-prompt-a-licious/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nD=$'\\e[37;40m'\nPINK=$'\\e[35;40m'\nGREEN=$'\\e[32;40m'\nORANGE=$'\\e[33;40m'\n\nvc_ps1() {\n    vcprompt -f \"(%n:${PINK}%b${D}${GREEN}%u%m${D})\" 2>/dev/null\n}\n\nexport PS1='${GREEN}\\u@\\h${D} in ${ORANGE}\\w${D}$(vc_ps1)\\n$ '\n```\n\n----------------------------------------\n\nTITLE: Unblocking Erlang CLI Tools in MacOS Application Firewall\nDESCRIPTION: These commands add and unblock the Erlang CLI tools in the MacOS Application Firewall. This allows the tools to bind to ports and accept inbound connections. The commands assume Erlang is installed via Homebrew.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/networking.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n# allow CLI tools and shell to bind to ports and accept inbound connections\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for RabbitMQ Java Client 4.0\nDESCRIPTION: Maven dependency configuration block to include RabbitMQ Java Client version 4.0.0 in a Maven project.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2016-11-24-rabbitmq-java-client-4-0-is-released/index.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.rabbitmq</groupId>\n    <artifactId>amqp-client</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Negative Acknowledgement with Requeue in .NET RabbitMQ Client\nDESCRIPTION: Shows how to negatively acknowledge a delivery with requeueing using the .NET client for RabbitMQ. The message will be requeued for another consumer to process.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/confirms.md#2025-04-09_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// this example assumes an existing channel (IModel) instance\n\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Received += (ch, ea) =>\n                {\n                    var body = ea.Body.ToArray();\n                    // requeue the delivery\n                    channel.BasicReject(ea.DeliveryTag, true);\n                };\nString consumerTag = channel.BasicConsume(queueName, false, consumer);\n```\n\n----------------------------------------\n\nTITLE: Code Reference - ACCESS_REFUSED Error\nDESCRIPTION: Channel-level exception code reference for attempted declaration of reserved queue names.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/queues.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n403 (ACCESS_REFUSED)\n```\n\n----------------------------------------\n\nTITLE: Setting Classic Queue Version in RabbitMQ Configuration\nDESCRIPTION: Configuration snippet to set the default classic queue version to 2 in RabbitMQ configuration file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-05-17-rabbitmq-3.12-performance-improvements/index.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nclassic_queue.default_version = 2\n```\n\n----------------------------------------\n\nTITLE: Monitoring RabbitMQ Dead Letter Metrics with Prometheus\nDESCRIPTION: Prometheus metrics showing counts of dead-lettered messages in RabbitMQ, categorized by queue type, dead letter strategy, and reason for dead-lettering (expiration, maxlen, rejection).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-03-29-at-least-once-dead-lettering/index.md#2025-04-09_snippet_15\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP rabbitmq_global_messages_dead_lettered_expired_total Total number of messages dead-lettered due to message TTL exceeded\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_classic_queue\",dead_letter_strategy=\"at_most_once\"} 0\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_classic_queue\",dead_letter_strategy=\"disabled\"} 0\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_least_once\"} 1\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_most_once\"} 1\nrabbitmq_global_messages_dead_lettered_expired_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"disabled\"} 0\n\n# TYPE rabbitmq_global_messages_dead_lettered_maxlen_total counter\n# HELP rabbitmq_global_messages_dead_lettered_maxlen_total Total number of messages dead-lettered due to overflow drop-head\n# or reject-publish-dlx\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\"rabbit_classic_queue\",dead_letter_strategy=\"at_most_once\"} 0\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\"rabbit_classic_queue\",dead_letter_strategy=\"disabled\"} 0\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_most_once\"} 0\nrabbitmq_global_messages_dead_lettered_maxlen_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"disabled\"} 0\n\n# TYPE rabbitmq_global_messages_dead_lettered_rejected_total counter\n# HELP rabbitmq_global_messages_dead_lettered_rejected_total Total number of messages dead-lettered due to basic.reject or basic.nack\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\"rabbit_classic_queue\",dead_letter_strategy=\"at_most_once\"} 0\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\"rabbit_classic_queue\",dead_letter_strategy=\"disabled\"} 0\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_least_once\"} 0\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"at_most_once\"} 0\nrabbitmq_global_messages_dead_lettered_rejected_total{queue_type=\"rabbit_quorum_queue\",dead_letter_strategy=\"disabled\"} 0\n```\n\n----------------------------------------\n\nTITLE: Listing RabbitMQ Queues with rabbitmqctl\nDESCRIPTION: Command to list all queues in RabbitMQ and their message counts using the rabbitmqctl administrative tool. This can be useful for verifying that queues exist and checking their current state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-python.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo rabbitmqctl list_queues\n```\n\n----------------------------------------\n\nTITLE: Visualizing RabbitMQ Consumer with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram showing a consumer (C) node in a RabbitMQ system, represented using Mermaid syntax.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/TutorialsIntro.md#2025-04-09_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    C((C))\n    class C mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Basic RabbitMQ Message Flow Diagram in Mermaid\nDESCRIPTION: Flowchart showing the fundamental RabbitMQ messaging pattern with a Producer (P) sending messages to a Queue (Q) which are then consumed by a Consumer (C). Includes custom styling classes for visual differentiation of components.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T1DiagramToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    Q[[Queue]]\n    C((C))\n\n    P --> Q --> C\n\n    class P mermaid-producer\n    class Q mermaid-queue\n    class C mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signing Keys in RabbitMQ for Entra ID\nDESCRIPTION: This snippet shows how to configure RabbitMQ to use a custom signing key for Entra ID authentication. The 'Application(client) ID' must be replaced with the actual ID from Entra ID.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-entra-id/index.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nauth_oauth2.discovery_endpoint_params.appid = {Application(client) ID}\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for AMQP 1.0 Destination in RabbitMQ Shovel\nDESCRIPTION: Optional configuration that controls additional properties to be added when republishing messages to an AMQP 1.0 destination. This example sets the content type to application/json.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-static.md#2025-04-09_snippet_18\n\nLANGUAGE: erlang\nCODE:\n```\n{properties, [\n  {content_typle, <<\"application/json\">>}\n]}\n```\n\n----------------------------------------\n\nTITLE: Logging Dead-Letter Message Forwarding Failure in RabbitMQ\nDESCRIPTION: This snippet shows an example log message that RabbitMQ generates when it fails to forward dead-letter messages due to an unavailable quorum queue. It includes details about the source queue, target exchange, and routing key.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/dlx.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCannot forward any dead-letter messages from source quorum queue 'qq.input' in vhost 'my-vhost'\nwith configured dead-letter-exchange exchange 'amq.topic' in vhost 'my-vhost'\nand configured dead-letter-routing-key 'my-app.events.type.abc'\n```\n\n----------------------------------------\n\nTITLE: Adapting Test Suites for Feature Flags in RabbitMQ with Erlang\nDESCRIPTION: This snippet demonstrates how to adapt test suites to handle feature flags in RabbitMQ. It includes setup steps to enable a feature flag and skip the test if the flag is not supported.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/feature-flags/index.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\ninit_per_testcase(Testcase, Config) ->\n    % (...)\n\n    % 1.\n    % The broker or cluster is started: we rely on this to query feature\n    % flags.\n    Config1 = rabbit_ct_helpers:run_steps(\n                Config,\n                rabbit_ct_broker_helpers:setup_steps() ++\n                rabbit_ct_client_helpers:setup_steps()),\n\n    % 2.\n    % We try to enable the `quorum_queue` feature flag. The helper is\n    % responsible for checking if the feature flag is supported and\n    % enabling it.\n    case rabbit_ct_broker_helpers:enable_feature_flag(Config1, quorum_queue) of\n        ok ->\n            % The feature flag is enabled at this point. The setup can\n            % continue to play with `Config1` and the cluster.\n            Config1;\n        Skip ->\n            % The feature flag is unavailable/unsupported. The setup\n            % calls `end_per_testcase()` to stop the node/cluster and\n            % skips the testcase.\n            end_per_testcase(Testcase, Config1),\n            Skip\n    end.\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Shovel Using RabbitMQ CLI\nDESCRIPTION: This snippet demonstrates how to declare a dynamic shovel using the rabbitmqctl command line tool. It sets up a shovel to move messages from a source queue to a target queue on a remote server.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/shovel-dynamic.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_parameter shovel my-shovel \\\n  '{\"src-protocol\": \"amqp091\", \"src-uri\": \"amqp://\", \"src-queue\": \"source-queue\", \"dest-protocol\": \"amqp091\", \"dest-uri\": \"amqp://remote-server\", \"dest-queue\": \"target-queue\", \"dest-queue-args\": {\"x-queue-type\": \"quorum\"}}'\n```\n\n----------------------------------------\n\nTITLE: Network Diagram of HTTP Requests Between RabbitMQ, Forward Proxy, and Keycloak\nDESCRIPTION: A plain text diagram showing the flow of HTTP requests between RabbitMQ, the forward proxy, and Keycloak for OAuth 2.0 authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-forward-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n                    [ Keycloak ]  \n                        /|\\  \n                         |   \n     2.http request (*)  |                                            [ RabbitMQ ]\n                [ forward-proxy ]      <----1. http request (*)---    [  http    ]\n            \n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Repository for Ubuntu 24.04\nDESCRIPTION: This bash script adds the RabbitMQ and Erlang package repositories to the apt sources list for Ubuntu 24.04 (Noble). It includes both primary and redundant mirror URLs for improved availability.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-debian.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF\n## Provides modern Erlang/OTP releases from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main\n\n## Provides RabbitMQ from a Cloudsmith mirror\n##\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\n\n# another mirror for redundancy\ndeb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\ndeb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main\nEOF\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Project Repository\nDESCRIPTION: Git commands to clone and navigate to the sample project repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-09-13-rabbitmq-streams-offset-tracking/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/acogoluegnes/rabbitmq-streams-blog-posts.git\ncd rabbitmq-streams-blog-posts\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Repository Keys\nDESCRIPTION: Commands for downloading and installing GPG signing keys for RabbitMQ and Erlang repositories. This ensures package authenticity during installation.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-debian.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Implementing a Queue Validator Instance\nDESCRIPTION: A QueueValidator constraint instance that applies the previously defined template to enforce policies on RabbitMQ Queue resources. This constraint specifically requires queues to use 'my-rabbit-cluster' and the 'my-vhost' vhost.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-02-21-gatekeeper-validation/index.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: QueueValidator\nmetadata:\n  name: queue-validator\nspec:\n  match:\n    kinds:\n    - apiGroups: [\"rabbitmq.com\"]\n      kinds: [\"Queue\"]\n  parameters:\n  - rabbit: my-rabbit-cluster\n  - vhost: my-vhost\n```\n\n----------------------------------------\n\nTITLE: HTML Queue Management Specifications Table Rows\nDESCRIPTION: HTML table rows containing RabbitMQ queue management specifications, including status indicators, requirement levels, and detailed descriptions of server behavior requirements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/specification.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"statusCell status_ok\">ok</td>\n    <td>MUST</td>\n    <td>server</td>\n    <td>queue / declare / exclusive / types</td>\n    <td>\n        <div>\n            The server MUST support both exclusive (private) and non-exclusive (shared) queues.\n        </div>\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Listing vhost limits in RabbitMQ (Bash)\nDESCRIPTION: Command to list vhost limits in RabbitMQ. It supports optional flags for specifying a vhost, global limits, and table header display.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nlist_vhost_limits [--vhost vhost] [--global] [--no-table-headers]\n```\n\n----------------------------------------\n\nTITLE: Importing RabbitMQ Signing Key via Direct Download for apt\nDESCRIPTION: Downloads the RabbitMQ release signing key from GitHub and imports it into the system keyrings for apt package manager on Debian/Ubuntu systems.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/signatures.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Makefile for Building Elixir-based RabbitMQ Plugins\nDESCRIPTION: A more complex Makefile that defines dependencies, version information, and custom build rules for compiling Elixir code into a RabbitMQ plugin package (.ez file).\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_6\n\nLANGUAGE: makefile\nCODE:\n```\nDEPS:=rabbitmq-server rabbitmq-erlang-client elixir_wrapper\nRETAIN_ORIGINAL_VERSION:=true\nORIGINAL_VERSION:=0.1\nDO_NOT_GENERATE_APP_FILE:=\n\nCONSTRUCT_APP_PREREQS:=mix-compile\ndefine construct_app_commands\n\tmkdir -p $(APP_DIR)/ebin\n\tcp $(PACKAGE_DIR)/ebin/* $(APP_DIR)/ebin\nendef\n\ndefine package_rules\n\n$(PACKAGE_DIR)/deps/.done:\n\trm -rf $$(@D)\n\tmkdir -p $$(@D)\n\t@echo [elided] unzip ezs\n\t@cd $$(@D) &amp;&amp; $$(foreach EZ,$$(wildcard $(PACKAGE_DIR)/build/dep-ezs/*.ez),unzip -q $$(abspath $$(EZ)) &amp;&amp;) :\n\ttouch $$@\n\nmix-compile: $(PACKAGE_DIR)/deps/.done\n\tmix clean\n\tERL_LIBS=$(PACKAGE_DIR)/deps mix compile\n\nendef\n```\n\n----------------------------------------\n\nTITLE: Importing Consumer Classes for RabbitMQ in Java\nDESCRIPTION: Imports the necessary Consumer classes from the RabbitMQ Java client library for message consumption.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nimport com.rabbitmq.client.Consumer;\nimport com.rabbitmq.client.DefaultConsumer;\n```\n\n----------------------------------------\n\nTITLE: Queue Declaration Example with rabbitmqadmin v1 (Legacy)\nDESCRIPTION: Example of declaring a queue using rabbitmqadmin v1 with its snake_case argument format. This shows the legacy syntax for creating a durable quorum queue in a specific virtual host.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/management-cli.md#2025-04-09_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n# Note: auto_delete\nrabbitmqadmin-v1 --vhost \"vh-2\" declare queue name=\"qq.1\" type=\"quorum\" durable=true auto_delete=false\n```\n\n----------------------------------------\n\nTITLE: Identifying plugin directory issues with rabbitmq-plugins\nDESCRIPTION: Demonstrates a common plugin activation error caused by a typo in the plugin name, showing how the system reports plugins that cannot be found.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# note the typo\nrabbitmq-plugins enable rabbitmq_managemenr\n# => Error:\n# => {:plugins_not_found, [:rabbitmq_managemenr]}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Erlang Crash Dump in Bash\nDESCRIPTION: This snippet demonstrates how to view the first few lines of an Erlang crash dump file to identify the termination reason. It uses the 'head' command to display the initial lines of the file, including the 'Slogan' which describes the crash reason.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhead -n 3 ./erl_crash.dump\n# => =erl_crash_dump:0.5\n# => Sun Aug 25 00:57:34 2019\n# => Slogan: Kernel pid terminated (application_controller) ({application_start_failure,rabbit,{{timeout_waiting_for_tables,[rabbit_user,rabbit_user_permission,rabbit_topic_permission,rabbit_vhost,rabbit_durable_r\n```\n\n----------------------------------------\n\nTITLE: Adding Users in Bash with Password as Command Line Argument\nDESCRIPTION: Shows how to add a RabbitMQ user by providing the password directly as a command line argument in a Bash shell. Special characters need to be escaped.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/access-control.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Password is provided as a command line argument.\n# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid\n# special interpretation by the shell.\nrabbitmqctl add_user 'username' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Exchange Using Policy in PowerShell\nDESCRIPTION: Command to set up an alternate exchange named 'my-ae' for an exchange 'my-direct' using RabbitMQ policy in PowerShell.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ae.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmqctl.bat set_policy AE '^my-direct$' '\"{\"\"alternate-exchange\":\"\"my-ae\"\"}\"' --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key Password in RabbitMQ (Erlang Format)\nDESCRIPTION: This configuration example demonstrates how to protect a private key with a password in RabbitMQ using the classic Erlang term format. It sets up SSL listeners on port 5671 and specifies certificate paths along with the password. The classic format supports config value encryption for password protection.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ssl/index.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\n[\n {rabbit, [\n           {ssl_listeners, [5671]},\n           {ssl_options, [{cacertfile,\"/path/to/ca_certificate.pem\"},\n                          {certfile,  \"/path/to/server_certificate.pem\"},\n                          {keyfile,   \"/path/to/server_key.pem\"},\n                          {password,  \"t0p$3kRe7\"}\n                         ]}\n          ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Stopping Incoming Messages sequence diagram for AMQP 1.0\nDESCRIPTION: Diagram showing how the echo field enables graceful stopping of incoming messages in AMQP 1.0. The consumer sets link-credit=0 and echo=True to request confirmation when the sender has updated its flow state.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-09-02-amqp-flow-control/index.md#2025-04-09_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n    Receiver                                       Sender\n    ================================================================\n                                           ...\n                                       <---------- transfer(...)\n    flow(...,                          ---+   +--- transfer(...)\n         link-credit=0,                    \\ /\n         echo=True)                         x\n                                           / \\\n(1)                                    <--+   +-->\n(2)                                    <---------- flow(...)\n                                           ...\n    ----------------------------------------------------------------\n      (1) In-flight transfers can still arrive until the flow state\n          is updated at the sender.\n      (2) At this point no further transfers will arrive.\n```\n\n----------------------------------------\n\nTITLE: AMQP Exchange Binding Methods\nDESCRIPTION: New AMQP methods introduced for exchange-to-exchange bindings. The 'exchange.bind' and 'exchange.unbind' methods use 'source' and 'destination' fields to indicate message flow direction between exchanges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2010-10-19-exchange-to-exchange-bindings/index.md#2025-04-09_snippet_0\n\nLANGUAGE: AMQP\nCODE:\n```\nexchange.bind\n  source: <source exchange name>\n  destination: <destination exchange name>\n\nexchange.unbind\n  source: <source exchange name>\n  destination: <destination exchange name>\n```\n\n----------------------------------------\n\nTITLE: Check TLS Versions in RabbitMQ (Unix/Linux)\nDESCRIPTION: Command to verify TLS version support in RabbitMQ's Erlang runtime on Unix-like systems\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics --silent tls_versions\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fanout Exchange in Elixir for RabbitMQ\nDESCRIPTION: Creates a fanout exchange named 'logs' which will broadcast all messages to all bound queues. This is a fundamental part of the publish/subscribe pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-elixir.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Exchange.declare(channel, \"logs\", :fanout)\n```\n\n----------------------------------------\n\nTITLE: Checking If Node Is Quorum Critical in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell version of the health check command that exits with a non-zero code if any internal components, quorum queues or stream queues will lose online quorum when the target node is shut down.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/grow-then-shrink-upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# exits with a non-zero code if any of the internal components, quorum queues or stream queues\n# will lose online quorum should the target node be shut down;\n# additionally, it will print which components and/or queues are affected\nrabbitmq-diagnostics.bat check_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Windows System-wide Root Certificate Store\nDESCRIPTION: PowerShell command to add a CA certificate to the Windows system-wide (machine) Root certificate store. This requires administrative privileges and enables all applications on the system to trust servers presenting certificates signed by this CA.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/ssl/index.md#2025-04-09_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows\ncertmgr -add -all \\path\\to\\cacert.cer -s -r localMachine Root\n```\n\n----------------------------------------\n\nTITLE: Inspecting Erlang Crash Dump in Bash\nDESCRIPTION: This snippet demonstrates how to view the first few lines of an Erlang crash dump file to identify the termination reason. It uses the 'head' command to display the initial lines of the file, including the 'Slogan' which describes the crash reason.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhead -n 3 ./erl_crash.dump\n# => =erl_crash_dump:0.5\n# => Sun Aug 25 00:57:34 2019\n# => Slogan: Kernel pid terminated (application_controller) ({application_start_failure,rabbit,{{timeout_waiting_for_tables,[rabbit_user,rabbit_user_permission,rabbit_topic_permission,rabbit_vhost,rabbit_durable_r\n```\n\n----------------------------------------\n\nTITLE: Using Custom PLT for Dialyzer Analysis\nDESCRIPTION: Example command for running dialyzer with a custom PLT (Persistent Lookup Table) file path instead of the default location.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/build-erlang-client.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake PLT=/path/to/plt dialyze\n```\n\n----------------------------------------\n\nTITLE: Viewing System Logs with Journalctl\nDESCRIPTION: Command to inspect system service logs using journalctl on systemd-based distributions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/install-rpm.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --system\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Stream for RabbitMQ Deduplication (Shell)\nDESCRIPTION: This snippet shows how to create an empty stream for deduplication using Maven. It connects to RabbitMQ, deletes any existing stream, and creates a new 'deduplication-stream'.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-28-rabbitmq-streams-message-deduplication/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw -q compile exec:java -Dexec.mainClass='com.rabbitmq.stream.Deduplication$CreateEmptyStream'\nConnection...\nConnected. Trying to delete stream if it exists.\nStream deleted.\nCreating 'deduplication-stream' stream.\nStream created.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Long Quorum Queues Performance\nDESCRIPTION: Shell command for testing performance with long quorum queues, publishing 10 million messages using 2 publishers. The configuration disables in-memory caching to test improvements in retrieving older messages from storage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-16-rabbitmq-3.10-performance-improvements/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# publish 10 milion messages\nperf-test --producers 2 --consumers 0 --confirm 3000 --pmessages 5000000 \\\n          --queue-args x-max-in-memory-length=0 --quorum-queue --queue qq\n```\n\n----------------------------------------\n\nTITLE: Host Configuration Entry\nDESCRIPTION: Required hosts file entry for local development setup.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-keycloak.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost keycloak rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Rendering RabbitMQ Version Information in JSX\nDESCRIPTION: This code snippet demonstrates how to use the imported RabbitMQ server components to display the current release branch and version in the documentation. It's embedded within JSX syntax, likely part of a React component.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/index.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# RabbitMQ <RabbitMQServerReleaseBranch/> Documentation\n\nWelcome to RabbitMQ documentation!\n\n:::note\nYou are currently viewing the documentation for <strong>RabbitMQ\n<RabbitMQServerVersion/></strong>.\n:::\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for AMQP Protocol Rules\nDESCRIPTION: HTML table structure defining AMQP protocol rules with status indicators, rule types (MUST, SHOULD, MAY), actors, references and rule descriptions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/specification.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"amqpRules\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n    <tbody>\n        <tr>\n            <th>Current Status</th>\n            <th>Type</th>\n            <th>Actor</th>\n            <th>Reference</th>\n            <th>Text</th>\n        </tr>\n        <!-- Table rows with rules follow -->\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Checking classic queue mirroring policy in RabbitMQ cluster (Bash)\nDESCRIPTION: Command to check if the RabbitMQ cluster has a classic queue mirroring policy.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncheck_if_cluster_has_classic_queue_mirroring_policy\n```\n\n----------------------------------------\n\nTITLE: Downloading the RabbitMQ Release Signing Key using GnuPG\nDESCRIPTION: Command to fetch the full new RabbitMQ signing key from a public key server using GnuPG.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/static/key-transition-0xF7B8CEA6056E8E56.txt#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --recv-key 0x6B73A36E6026DFCA\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Client with Rebar3 (Erlang)\nDESCRIPTION: Dependency declaration for installing the rabbit_common package using Rebar3 build tool in Erlang projects.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbit_common, \"&version-erlang-client;\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak for OAuth 2.0 Authentication\nDESCRIPTION: Command to deploy Keycloak using make. This sets up the OAuth 2.0 server for authentication.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples-proxy.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Implementing a Programmatic Comma with Function Composition\nDESCRIPTION: A more powerful implementation of the programmatic comma using nested functions, where the comma function can control whether subsequent expressions are evaluated based on the result of previous expressions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_14\n\nLANGUAGE: erlang\nCODE:\n```\ncomma(foo(),\n        fun (A) -> comma(bar(A, dog),\n                        fun (B) -> ok end)).\n```\n\n----------------------------------------\n\nTITLE: Verifying Maven Wrapper for RabbitMQ Tutorial\nDESCRIPTION: Shell command to verify that the Maven Wrapper is working correctly. The tutorial uses Maven to manage dependencies and build the project.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-java-stream.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw --version\n```\n\n----------------------------------------\n\nTITLE: Creating SockJS Server in Node.js\nDESCRIPTION: This snippet shows the basic setup of a SockJS server in Node.js.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2012-02-23-how-to-compose-apps-using-websockets/index.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar service = sockjs.createServer();\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to RabbitMQ Queue\nDESCRIPTION: Declaring a queue and publishing a message to it using the established channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-php.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$channel->queue_declare('hello', false, false, false, false);\n\n$msg = new AMQPMessage('Hello World!');\n$channel->basic_publish($msg, '', 'hello');\n\necho \" [x] Sent 'Hello World!'\\n\";\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Connection Handshake Timeout\nDESCRIPTION: Configuration for adjusting the RabbitMQ connection handshake timeout value in milliseconds. This setting is particularly useful when clients run in constrained environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/networking.md#2025-04-09_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nhandshake_timeout = 20000\n```\n\n----------------------------------------\n\nTITLE: Referencing Basic QoS Method in AMQP\nDESCRIPTION: A code reference to the basic.qos method in AMQP that provides better control for limiting prefetch than blocking flow with active=true.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/specification.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nbasic.qos\n```\n\n----------------------------------------\n\nTITLE: Programmatic Comma Concept - Initial Approach\nDESCRIPTION: An initial attempt at implementing a programmatic comma by inserting a comma() function between statements, which is insufficient as it can't control execution flow effectively.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_13\n\nLANGUAGE: erlang\nCODE:\n```\nA = foo(),\ncomma(),\nB = bar(A, dog),\ncomma(),\nok.\n```\n\n----------------------------------------\n\nTITLE: Git Version Check Command\nDESCRIPTION: Command to verify Git installation and version\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit version\n```\n\n----------------------------------------\n\nTITLE: Disabling Firehose Tracing in RabbitMQ\nDESCRIPTION: Command to disable Firehose tracing for a specific virtual host. This turns off the message tracing feature to restore normal performance.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/firehose.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl trace_off -p [virtual host]\n```\n\n----------------------------------------\n\nTITLE: Setting Common OAuth 2.0 Settings for All Resources in Management UI\nDESCRIPTION: Configuration for setting common OAuth 2.0 parameters that will apply to all resources in the Management UI. This includes enabling OAuth, setting the logon type, and specifying required scopes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_enabled = true\nmanagement.oauth_initiated_logon_type = sp_initiated\nmanagement.oauth_scopes = openid rabbitmq.tag:management rabbitmq.read:*/*\n```\n\n----------------------------------------\n\nTITLE: Creating a Queue Validator Constraint Template\nDESCRIPTION: A Gatekeeper ConstraintTemplate that defines validation rules for RabbitMQ Queue resources. The template enforces policies requiring specific RabbitMQ cluster names and vhosts, using Rego policy language to define the validation logic.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-02-21-gatekeeper-validation/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: queuevalidator\nspec:\n  crd:\n    spec:\n      names:\n        kind: QueueValidator\n      validation:\n        openAPIV3Schema:\n          properties:\n            rabbit:\n              type: string\n            vhost:\n              type: string\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package queuevalidator\n      violation[{\"msg\":msg}] {\n        allowedRabbit := input.parameters.rabbit\n        givenRabbit := input.review.object.spec.rabbitmqClusterReference.name\n        givenRabbit != allowedRabbit\n        allowedVhost := input.parameters.vhost\n        givenVhost := input.review.object.spec.vhost\n        givenVhost != allowedVhost\n        msg := sprintf(\"Rabbit Cluster must be %v, queues must be declared on vhost %v\", [allowedRabbit, allowedVhost])\n      }\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Environment Configuration with TLS Option File (Linux)\nDESCRIPTION: Configuration using a separate TLS option file approach, which simplifies command line arguments. Demonstrates setting up environment variables in rabbitmq-env.conf.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/clustering-ssl.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nERL_SSL_PATH=\"/usr/lib64/erlang/lib/ssl-9.4/ebin\"\n\nSERVER_ADDITIONAL_ERL_ARGS=\"-pa $ERL_SSL_PATH\n  -proto_dist inet_tls\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\"\n\nRABBITMQ_CTL_ERL_ARGS=\"-pa $ERL_SSL_PATH\n  -proto_dist inet_tls\n  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config\"\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Performance Test with Quorum Queues\nDESCRIPTION: This command runs a performance test using PerfTest tool for RabbitMQ with quorum queues. It configures various parameters like message rate, size, queue properties, and number of producers/consumers.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-06-21-cluster-sizing-case-study-quorum-queues-part-1/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/runjava com.rabbitmq.perf.PerfTest \\\n-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \\\n-z 1800 \\\n-f persistent \\\n-q 1000 \\\n-c 1000 \\\n-ct -1 \\\n-ad false \\\n--rate 50 \\\n--size 1024 \\\n--queue-pattern 'perf-test-%d' \\\n--queue-pattern-from 1 \\\n--queue-pattern-to 100 \\\n-qa auto-delete=false,durable=false,x-queue-type=quorum \\\n--producers 200 \\\n--consumers 200 \\\n--consumer-latency 10000 \\\n--producer-random-start-delay 30\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic RPC Client Call in Java\nDESCRIPTION: A simple client interface that demonstrates how to use the RPC client to calculate Fibonacci numbers. It shows how a client would make an RPC call and process the response.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-six-java.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFibonacciRpcClient fibonacciRpc = new FibonacciRpcClient();\nString result = fibonacciRpc.call(\"4\");\nSystem.out.println( \"fib(4) is \" + result);\n```\n\n----------------------------------------\n\nTITLE: Exploring Available Command Groups in rabbitmqadmin\nDESCRIPTION: This command displays the list of available command groups in rabbitmqadmin v2.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/management-cli.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmqadmin help\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Peer Verification for RabbitMQ Prometheus Endpoint\nDESCRIPTION: Advanced TLS configuration for the Prometheus metrics endpoint that includes peer verification. This setup enforces client certificate validation with verification depth and fail conditions in addition to basic TLS settings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/prometheus/index.md#2025-04-09_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nprometheus.ssl.port       = 15691\nprometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem\nprometheus.ssl.certfile   = /full/path/to/server_certificate.pem\nprometheus.ssl.keyfile    = /full/path/to/server_key.pem\nprometheus.ssl.password   = password-if-keyfile-is-encrypted\nprometheus.ssl.verify     = verify_peer\nprometheus.ssl.depth      = 2\nprometheus.ssl.fail_if_no_peer_cert = true\n## To enforce TLS (disable the non-TLS port):\n# prometheus.tcp.listener = none\n```\n\n----------------------------------------\n\nTITLE: Checking if node is quorum critical in RabbitMQ (Bash)\nDESCRIPTION: Command to check if a node is quorum critical in the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-diagnostics.8.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncheck_if_node_is_quorum_critical\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Shovel Plugin using CLI\nDESCRIPTION: This command enables the RabbitMQ Shovel plugin using the rabbitmq-plugins CLI tool. It's the first step in setting up and using the Shovel plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/shovel.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_shovel\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content for production deployment into the build directory.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Stopping PerfTest Applications\nDESCRIPTION: These commands stop the PerfTest producer and consumer applications that were started for the OAuth scope aliases demonstration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples/index.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-perftest-producer PRODUCER=producer_with_roles\nmake stop-perftest-consumer CONSUMER=consumer_with_roles\n```\n\n----------------------------------------\n\nTITLE: AMQP Negative Acknowledgement\nDESCRIPTION: The basic.nack method is sent by the broker to indicate failed message processing in publisher confirm mode. The delivery-tag and multiple fields have the same meaning as in basic.ack.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/confirms.md#2025-04-09_snippet_13\n\nLANGUAGE: AMQP\nCODE:\n```\nbasic.nack\n```\n\n----------------------------------------\n\nTITLE: Defining an Alternate Exchange Using Policy in PowerShell\nDESCRIPTION: Sets a policy to define 'my-ae' as an alternate exchange for the 'my-direct' exchange using the RabbitMQ CLI in PowerShell with proper JSON escaping.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ae.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat set_policy AE '^my-direct$' '\"{\"\"alternate-exchange\":\"\"my-ae\"\"}\"' --apply-to exchanges\n```\n\n----------------------------------------\n\nTITLE: Using Resource in Erlang with Cuts\nDESCRIPTION: Demonstrates how the previous example can be simplified using cuts, reducing the need for explicit fun declarations.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nmy_fun(A, B, C) ->\n    with_resource(A, my_resource_modification(_, B, C)).\n```\n\n----------------------------------------\n\nTITLE: Stopping All OAuth 2.0 Test Applications\nDESCRIPTION: Command to stop all the running OAuth 2.0 test applications in the environment.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/oauth2-examples/index.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-all-apps\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Operation Timeout in RabbitMQ\nDESCRIPTION: Default configuration for the channel operation timeout in milliseconds, used internally by the broker.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nchannel_operation_timeout = 15000\n```\n\n----------------------------------------\n\nTITLE: Inspecting RabbitMQ Node Configuration\nDESCRIPTION: Commands to verify and inspect the effective configuration of a running RabbitMQ node using rabbitmq-diagnostics.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/configure.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# inspect effective configuration on a node\nrabbitmq-diagnostics environment\n```\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics environment -n [node name]\n```\n\n----------------------------------------\n\nTITLE: Listing Stream Consumers with RabbitMQ Streams CLI\nDESCRIPTION: Command example for listing stream consumers with specific fields. This command displays the connection PID, subscription ID and stream for each consumer.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmq-streams.8.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-streams list_stream_consumers connection_pid subscription_id stream\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components including CSS modules and SVG assets required for the metadata store documentation page.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/metadata-store/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './index.module.css';\nimport diagramStyles from './diagram.module.css';\nimport MetadataStoreRole from './metadata-store-role.svg';\nimport KhepriLogo from '@site/static/img/khepri-logo.svg';\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level in rabbitmq.conf\nDESCRIPTION: Configuration example showing how to set the debug log level for file logging in the rabbitmq.conf file.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/logging.md#2025-04-09_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nlog.file.level = debug\n```\n\n----------------------------------------\n\nTITLE: Forcefully Deleting a Stuck Kubernetes Pod\nDESCRIPTION: This bash command forcefully deletes a Kubernetes pod that is stuck in a terminating state. It's used when a RabbitmqCluster instance deletion leaves pods hanging due to leftover quorum queues.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/troubleshooting-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod --force --grace-period=0 POD-NAME\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Node using PowerShell\nDESCRIPTION: Command to stop the RabbitMQ broker using rabbitmqctl.bat from the sbin directory. Must be run with administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows-manual.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat stop\n```\n\n----------------------------------------\n\nTITLE: Stopping RabbitMQ Node using PowerShell\nDESCRIPTION: Command to stop the RabbitMQ broker using rabbitmqctl.bat from the sbin directory. Must be run with administrator privileges.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows-manual.md#2025-04-09_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmqctl.bat stop\n```\n\n----------------------------------------\n\nTITLE: Decommissioning MQTT Node in RabbitMQ CLI\nDESCRIPTION: This command decommissions an MQTT node named 'rabbit@stringer' before disabling the plugin or removing the node from the cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/man/rabbitmqctl.8.md#2025-04-09_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl decommission_mqtt_node rabbit@stringer\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ with Auth0 Configuration\nDESCRIPTION: Commands to start RabbitMQ using the Auth0 configuration. It sets the MODE environment variable to 'auth0' and uses a Makefile to start RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/oauth2-examples-auth0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MODE=auth0\nmake start-rabbitmq\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Benchmark Results with Default Flow Control\nDESCRIPTION: Performance benchmark output showing reduced throughput with default flow control settings in RabbitMQ 4.0.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n# quiver //host.docker.internal//queues/my-quorum-queue \\\n    --durable --count 1m --duration 10m --body-size 12 --credit 5000\n\nRESULTS\n\nCount ............................................. 1,000,000 messages\nDuration .............................................. 100.2 seconds\nSender rate ........................................... 9,986 messages/s\nReceiver rate ......................................... 9,987 messages/s\nEnd-to-end rate ....................................... 9,983 messages/s\n\nLatencies by percentile:\n\n          0% ....... 10 ms       90.00% ....... 24 ms\n         25% ....... 14 ms       99.00% ....... 30 ms\n         50% ....... 18 ms       99.90% ....... 38 ms\n        100% ....... 55 ms       99.99% ....... 47 ms\n```\n\n----------------------------------------\n\nTITLE: Minimalistic rabbitmq.conf example changing listener port\nDESCRIPTION: A simple example showing how to change the default AMQP listener port from 5672 to 5673 using the modern ini-style configuration format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/configure.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# this is a comment\nlisteners.tcp.default = 5673\n```\n\n----------------------------------------\n\nTITLE: Running Topic Exchange Subscribers with Different Binding Patterns\nDESCRIPTION: Command-line examples showing how to run the subscriber application with different binding patterns. These demonstrate the flexibility of topic exchanges with wildcard patterns.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-five-java.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -cp $CP ReceiveLogsTopic \"#\"\n\njava -cp $CP ReceiveLogsTopic \"kern.*\"\n\njava -cp $CP ReceiveLogsTopic \"*.critical\"\n\njava -cp $CP ReceiveLogsTopic \"kern.*\" \"*.critical\"\n```\n\n----------------------------------------\n\nTITLE: Advanced LDAP Configuration\nDESCRIPTION: Advanced configuration example for LDAP authentication including vhost access, resource access, and topic access queries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/ldap.md#2025-04-09_snippet_46\n\nLANGUAGE: erlang\nCODE:\n```\n[{rabbitmq_auth_backend_ldap,[\n    {vhost_access_query,    {in_group,\n                              \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n     {resource_access_query,\n      {for, [{permission, configure, {in_group, \"cn=admin,dc=example,dc=com\"}},\n             {permission, write,\n              {for, [{resource, queue,    {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, exchange, {constant, true}}]}},\n             {permission, read,\n              {for, [{resource, exchange, {in_group, \"cn=admin,dc=example,dc=com\"}},\n                     {resource, queue,    {constant, true}}]}}\n            ]\n      }},\n     {topic_access_query,\n      {for, [{permission, write, {match, {string, \"${routing_key}\"}, {string, \"^a\"}}},\n             {permission, read,  {constant, true}}\n            ]\n      }},\n     {tag_queries,           [{administrator, {constant, false}},\n                              {management,    {constant, true}}]}\n]}].\n```\n\n----------------------------------------\n\nTITLE: Complete ReceiveLogs Program\nDESCRIPTION: Full implementation of the log message consumer that receives messages from the fanout exchange.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-dotnet.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System.Text;\n\nclass ReceiveLogs\n{\n    public static void Main()\n    {\n        var factory = new ConnectionFactory() { HostName = \"localhost\" };\n        using(var connection = factory.CreateConnection())\n        using(var channel = connection.CreateModel())\n        {\n            channel.ExchangeDeclare(\"logs\", ExchangeType.Fanout);\n\n            var queueName = channel.QueueDeclare().QueueName;\n            channel.QueueBind(queue: queueName,\n                              exchange: \"logs\",\n                              routingKey: \"\");\n\n            Console.WriteLine(\" [*] Waiting for logs.\");\n\n            var consumer = new EventingBasicConsumer(channel);\n            consumer.Received += (model, ea) =>\n            {\n                byte[] body = ea.Body.ToArray();\n                var message = Encoding.UTF8.GetString(body);\n                Console.WriteLine(\" [x] {0}\", message);\n            };\n            channel.BasicConsume(queue: queueName,\n                               autoAck: true,\n                               consumer: consumer);\n\n            Console.WriteLine(\" Press [enter] to exit.\");\n            Console.ReadLine();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Timeout in RabbitMQ\nDESCRIPTION: Sets the consumer timeout value in milliseconds using the rabbitmq.conf configuration file. This timeout determines how long RabbitMQ waits for consumer acknowledgements before closing the channel.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/consumers.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# 30 minutes in milliseconds\nconsumer_timeout = 1800000\n```\n\nLANGUAGE: ini\nCODE:\n```\n# one hour in milliseconds\nconsumer_timeout = 3600000\n```\n\n----------------------------------------\n\nTITLE: Creating a Uniquely Named Durable Queue in RabbitMQ with Swift\nDESCRIPTION: This code demonstrates creating a durable queue with a unique name to avoid conflicts with existing queues. This is necessary because RabbitMQ doesn't allow redefinition of queues with different parameters.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-swift.md#2025-04-09_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nvar q = ch.queue(\"task_queue\", options: .durable)\n```\n\n----------------------------------------\n\nTITLE: Stunnel Configuration for Client Connection Validation\nDESCRIPTION: Example stunnel configuration file for validating TLS-enabled client connections to RabbitMQ.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-ssl.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nforeground = yes\n\n[rabbit-amqp]\nconnect = localhost:5672\naccept = 5679\ncert = client/key-cert.pem\ndebug = 7\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing RabbitMQ Server\nDESCRIPTION: Commands to clone the RabbitMQ server repository, checkout a specific version, and fetch dependencies.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-31-flame-graphs/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:rabbitmq/rabbitmq-server.git\ncd rabbitmq-server\ngit checkout v3.10.1\nmake fetch-deps\ngit -C $(pwd)/deps/seshat checkout 68f2b9d4ae7ea730cef613fd5dc4456e462da492\n```\n\n----------------------------------------\n\nTITLE: Executing Qpid Python Test Suite\nDESCRIPTION: Command to run the Qpid Python test suite for AMQP versions 0-8 and 0-9 compatibility testing against RabbitMQ broker\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/interoperability.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython2.7 ./qpid-python-test -m tests_0-9 -m tests_0-8\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl-rabbitmq plugin with krew\nDESCRIPTION: Installing the kubectl-rabbitmq plugin using Kubernetes' krew plugin manager, which provides commands for managing RabbitMQ clusters in Kubernetes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/install-operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl krew install rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring System Limits with Systemd\nDESCRIPTION: Configuration for setting file handle limits in systemd environment\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/install-rpm.md#2025-04-09_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=64000\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Cluster Name\nDESCRIPTION: Command to set a custom name for the RabbitMQ cluster\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/man/rabbitmqctl.8.md#2025-04-09_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmqctl set_cluster_name london\n```\n\n----------------------------------------\n\nTITLE: Inserting Markdown Truncate Comment\nDESCRIPTION: This snippet inserts a Markdown comment to indicate where content truncation should occur in the rendered output.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2020-04-13-this-month-in-rabbitmq-march-2020-recap/index.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Generic SSL Upgrade Error in RabbitMQ Logs\nDESCRIPTION: A generic error pattern that can indicate various TLS connection issues. This often requires checking Erlang version compatibility and other TLS configuration details.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/troubleshooting-ssl.md#2025-04-09_snippet_19\n\nLANGUAGE: erlang\nCODE:\n```\n{ssl_upgrade_error, ...}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queue with TTL using Java Client\nDESCRIPTION: Java code example demonstrating how to declare a queue with a 30-minute expiration period using x-arguments during queue declaration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/ttl.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> args = new HashMap<String, Object>();\nargs.put(\"x-expires\", 1800000);\nchannel.queueDeclare(\"myqueue\", false, false, false, args);\n```\n\n----------------------------------------\n\nTITLE: Starting RabbitMQ 3.9 Docker Container\nDESCRIPTION: This command starts a RabbitMQ 3.9 Docker container connected to the 'rabbitmq-streams' network.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-13-rabbitmq-streams-overview/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --network rabbitmq-streams --name rabbitmq rabbitmq:3.9\n```\n\n----------------------------------------\n\nTITLE: Checking Quorum Queue Replica Sync Status in RabbitMQ (PowerShell)\nDESCRIPTION: PowerShell equivalent of the command that checks for ongoing initial quorum queue replica synchronization operations. Used during grow-then-shrink upgrades to ensure all replicas have completed synchronization before node removal.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-3.13/upgrade.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# exits with a non-zero status if there are any ongoing initial quorum queue\n# replica sync operations\nrabbitmq-diagnostics.bat check_if_new_quorum_queue_replicas_have_finished_initial_sync\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Stream-Queue Flow Diagram with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the basic architecture of a RabbitMQ stream-queue. It shows a producer (P) sending messages to a stream-queue (Q), which exchanges messages bidirectionally with a consumer (C). The diagram uses custom CSS classes to style the diagram elements.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T2DiagramStreamToC.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    P((P))\n    Q[[Stream-Queue]]\n    C((C))\n\n    P --> Q <--> C\n\n    class P mermaid-producer\n    class Q mermaid-queue\n    class C mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Running the RabbitMQ Consumer Script\nDESCRIPTION: Command to execute the receiver script that consumes messages from the RabbitMQ queue.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-one-javascript.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./receive.js\n```\n\n----------------------------------------\n\nTITLE: Building RabbitMQ Server\nDESCRIPTION: Basic make command to build the RabbitMQ server and its plugins after cloning the repository.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/build-server.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rabbitmq\nmake\n```\n\n----------------------------------------\n\nTITLE: Checking RabbitMQ Cluster Alarms in Bash\nDESCRIPTION: This command lists any alarms in effect across the RabbitMQ cluster using the rabbitmq-diagnostics tool. It's part of a more comprehensive health check that verifies the absence of resource alarms.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/versioned_docs/version-4.0/monitoring/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# lists alarms in effect across the cluster, if any\nrabbitmq-diagnostics -q alarms\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Package\nDESCRIPTION: Command to create a distributable .ez file of the plugin.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/pages/plugin-development.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDIST_AS_EZS=yes make dist\n```\n\n----------------------------------------\n\nTITLE: Querying Stream PerfTest Metrics for Data Transfer\nDESCRIPTION: This command queries the Prometheus metrics endpoint of Stream PerfTest to retrieve the total number of bytes read from the stream, which helps measure bandwidth usage.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2023-10-16-stream-filtering/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl --silent localhost:8080/metrics | grep rabbitmq_stream_read_bytes_total\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Connection Recovery in RabbitMQ .NET Client\nDESCRIPTION: Demonstrates how to enable automatic connection recovery by setting ConnectionFactory.AutomaticRecoveryEnabled property to true. This allows the connection to automatically recover from network failures.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet-api-guide.md#2025-04-09_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nConnectionFactory factory = new ConnectionFactory();\nfactory.AutomaticRecoveryEnabled = true;\n// connection that will recover automatically\nIConnection conn = await factory.CreateConnectionAsync();\n```\n\n----------------------------------------\n\nTITLE: Purging a Queue in RabbitMQ Java Client\nDESCRIPTION: Purges all messages from a queue while keeping the queue itself intact. This removes all messages from the queue but retains the queue definition and bindings.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/java-api-guide.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nchannel.queuePurge(\"queue-name\")\n```\n\n----------------------------------------\n\nTITLE: Using Cuts with Records in Erlang\nDESCRIPTION: Illustrates how cuts can be applied to record operations in Erlang, including field access and updates.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n-record(vector, { x, y, z }).\n\ntest() ->\n    GetZ = _#vector.z,\n    7 = GetZ(#vector { z = 7 }),\n    SetX = _#vector{x = _},\n    V = #vector{ x = 5, y = 4 } = SetX(#vector{ y = 4 }, 5).\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status in RabbitMQ CLI\nDESCRIPTION: Command to check the cluster status and detect network partitions using the RabbitMQ CLI tool.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/partitions.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-diagnostics cluster_status\n```\n\n----------------------------------------\n\nTITLE: Traditional Nested Case Statements for Error Handling\nDESCRIPTION: A traditional Erlang implementation of file writing with deeply nested case statements for error handling, demonstrating the verbosity and complexity that monads can help reduce.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2011-05-17-can-you-hear-the-drums-erlando/index.md#2025-04-09_snippet_20\n\nLANGUAGE: erlang\nCODE:\n```\nwrite_file(Path, Data, Modes) ->\n    Modes1 = [binary, write | (Modes -- [binary, write])],\n    case make_binary(Data) of\n        Bin when is_binary(Bin) ->\n            case file:open(Path, Modes1) of\n                {ok, Hdl} ->\n                    case file:write(Hdl, Bin) of\n                        ok ->\n                            case file:sync(Hdl) of\n                                ok ->\n                                    file:close(Hdl);\n                                {error, _} = E ->\n                                    file:close(Hdl),\n                                    E\n                            end;\n                        {error, _} = E ->\n                            file:close(Hdl),\n                            E\n                    end;\n                {error, _} = E -> E\n            end;\n        {error, _} = E -> E\n    end.\n\nmake_binary(Bin) when is_binary(Bin) ->\n    Bin;\nmake_binary(List) ->\n    try\n        iolist_to_binary(List)\n    catch error:Reason ->\n            {error, Reason}\n    end.\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Broker Setup for Connection Scalability Test\nDESCRIPTION: Command to start a RabbitMQ broker with specific configuration for testing connection scalability. The setup uses custom settings for Erlang process limits, TCP buffer sizes, and memory watermarks to accommodate a large number of connections.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake run-broker \\\n    TEST_TMPDIR=\"$HOME/scratch/rabbit/test\" \\\n    RABBITMQ_CONFIG_FILE=\"$HOME/scratch/rabbit/rabbitmq.conf\" \\\n    PLUGINS=\"rabbitmq_amqp1_0\" \\\n    RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"+P 3000000 +S 6\" \\\n    ERL_MAX_PORTS=3000000 \n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Advanced Flow Control Settings\nDESCRIPTION: Advanced configuration for RabbitMQ flow control parameters including credit flow defaults, AMQP 1.0 session windows, and link credits. Disables metrics collector for performance testing.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2024-08-21-amqp-benchmarks/index.md#2025-04-09_snippet_5\n\nLANGUAGE: config\nCODE:\n```\n[\n {rabbit, [\n  {loopback_users, []},\n\n  %% RabbitMQ internal flow control for AMQP 0.9.1\n  %% Default: {400, 200}\n  {credit_flow_default_credit, {5000, 2500}},\n\n  %% Maximum incoming-window of AMQP 1.0 session.\n  %% Default: 400\n  {max_incoming_window, 5000},\n\n  %% Maximum link-credit RabbitMQ grants to AMQP 1.0 sender.\n  %% Default: 128\n  {max_link_credit, 2000},\n\n  %% Maximum link-credit RabbitMQ AMQP 1.0 session grants to sending queue.\n  %% Default: 256\n  {max_queue_credit, 5000}\n ]},\n\n {rabbitmq_management_agent, [\n  {disable_metrics_collector, true}\n ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Checking Stream Status in RabbitMQ\nDESCRIPTION: CLI command to check the status of a stream in RabbitMQ, showing information like offset, committed offset, and number of segments. Useful for verifying that messages were successfully stored in the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-07-19-rabbitmq-streams-first-application/index.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec rabbitmq rabbitmq-streams stream_status first-application-stream\n```\n\n----------------------------------------\n\nTITLE: Resolving NoMajorityOfNodesReady Alert\nDESCRIPTION: Commands to restart the rabbit application and resolve the alert condition.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2021-05-03-alerting/index.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec myrabbit-server-0 --container rabbitmq -- rabbitmqctl start_app\nkubectl exec myrabbit-server-1 --container rabbitmq -- rabbitmqctl start_app\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2 Scope Aliases in RabbitMQ 3.10\nDESCRIPTION: Configuration example showing how to map OAuth2 JWT token scopes to RabbitMQ permissions using scope aliases. This allows integration with identity providers that use custom role-based scopes instead of RabbitMQ's conventional permission format.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2022-05-05-rabbitmq-3.10-release-overview/index.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{rabbitmq_auth_backend_oauth2, [\n    {resource_server_id, <<\"rabbitmq-122\">>},\n    {extra_scopes_source, <<\"claims\">>},\n    {scope_aliases, #{\n      <<\"megacorp.roles.122\">>      => [\n        <<\"rabbitmq.read:vhost-122/*\">>,\n        <<\"rabbitmq.write:vhost-122/*\">>,\n        <<\"rabbitmq.configure:vhost-122/*\">>\n      ],\n      <<\"megacorp.roles.188\">>     => [\n        <<\"rabbitmq.read:vhost-188/*\">>,\n        <<\"rabbitmq.configure:vhost-188/*\">>\n       ],\n      <<\"megacorp.roles.read-only\">> => [<<\"rabbitmq.read:*/*\">>]\n    }}\n    %% ...\n```\n\n----------------------------------------\n\nTITLE: Importing Erlang Records into Elixir for RabbitMQ Development\nDESCRIPTION: Code showing how to import Erlang record definitions into Elixir, which is necessary when developing RabbitMQ plugins since they need to interact with Erlang records defined in RabbitMQ libraries.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/blog/2013-06-03-using-elixir-to-write-rabbitmq-plugins/index.md#2025-04-09_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RabbitExchangeTypeRecentHistory do  \n  defrecord :exchange, Record.extract(:exchange, from_lib: \"rabbit_common/include/rabbit.hrl\")\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Log Receiver Implementation\nDESCRIPTION: Full implementation of a program that creates a temporary queue, binds to the logs exchange, and receives log messages.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-javascript.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nvar amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function(error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = 'logs';\n\n    channel.assertExchange(exchange, 'fanout', {\n      durable: false\n    });\n\n    channel.assertQueue('', {\n      exclusive: true\n    }, function(error2, q) {\n      if (error2) {\n        throw error2;\n      }\n      console.log(\" [*] Waiting for messages in %s. To exit press CTRL+C\", q.queue);\n      channel.bindQueue(q.queue, exchange, '');\n\n      channel.consume(q.queue, function(msg) {\n      \tif(msg.content) {\n\t        console.log(\" [x] %s\", msg.content.toString());\n\t      }\n      }, {\n        noAck: true\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Log Emitter in Go\nDESCRIPTION: Command to run the emit_log.go program which publishes messages to the 'logs' exchange. This is the sender component in the publish/subscribe pattern.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-three-go.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo run emit_log.go\n```\n\n----------------------------------------\n\nTITLE: Publishing Persistent Messages to RabbitMQ with Elixir\nDESCRIPTION: Code to mark messages as persistent when publishing to RabbitMQ using Elixir. Persistent messages are saved to disk and can survive server restarts, though the guarantee isn't absolute.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/tutorials/tutorial-two-elixir.md#2025-04-09_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nAMQP.Basic.publish(channel, \"\", \"task_queue\", message, persistent: true)\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Queue Flow Diagram with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram showing a queue named 'hello' connected to a consumer. The diagram uses custom CSS classes for styling the queue and consumer nodes.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/src/components/Tutorials/T1DiagramReceiving.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Q[[hello]] --> C((C))\n\n    class Q mermaid-queue\n    class C mermaid-consumer\n```\n\n----------------------------------------\n\nTITLE: Creating Queue with Cross-Namespace Connection Secret in YAML\nDESCRIPTION: This YAML snippet shows how to create a queue using a connection secret from a different namespace. It includes the secret definition with allowed namespaces annotation and the queue resource declaration referencing the cross-namespace secret.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/using-topology-operator.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: rabbitmq-service-credentials\n  namespace: central-vault\n  annotations:\n    rabbitmq.com/topology-allowed-namespaces: rabbitmq-service\ntype: Opaque\nstringData:\n  username: a-user # user must already exist in RabbitMQ\n  password: a-secure-password\n  uri: https://my.rabbit:15672 # (optional) uri for the management api; when scheme is not provided in uri, operator defaults to 'http'\n---\napiVersion: rabbitmq.com/v1beta1\nkind: Queue\nmetadata:\n  name: my-queue\n  namespace: rabbitmq-service\nspec:\n  name: my-queue\n  rabbitmqClusterReference:\n    connectionSecret:\n      name: rabbitmq-service-credentials\n      namespace: central-vault\n```\n\n----------------------------------------\n\nTITLE: Viewing RabbitMQ Logs\nDESCRIPTION: Retrieves and displays the logs from the RabbitMQ pod to verify proper startup and operation of the RabbitMQ cluster.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/kubernetes/operator/quickstart-operator.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs hello-world-server-0\n```\n\n----------------------------------------\n\nTITLE: Compiling Erlang Code with RabbitMQ Client Dependency\nDESCRIPTION: This bash snippet demonstrates how to compile Erlang code that depends on the RabbitMQ client library. It uses erlc with ERL_LIBS set to the deps directory where the client library is assumed to be located.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/erlang-client-user-guide.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nERL_LIBS=deps erlc -o ebin amqp_example.erl\n```\n\n----------------------------------------\n\nTITLE: Attaching to the Beginning of a Stream in C#\nDESCRIPTION: Shows how to create a consumer that attaches to the beginning of a RabbitMQ stream using the C# client library. It configures the consumer to start from the first message in the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nIConsumer consumer = await connection.ConsumerBuilder()\n    .Queue(\"some-stream\")\n    .Stream()\n    .Offset(StreamOffsetSpecification.First)\n    .Builder()\n    .MessageHandler( async (context, message) => {\n            // message processing\n    })\n    .BuildAndStartAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange of a Built-in Type in Go\nDESCRIPTION: Demonstrates how to create an exchange of a built-in type (topic) using the Go client library's management API.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_47\n\nLANGUAGE: Go\nCODE:\n```\n// there are structs for Fanout, Direct, etc..\nexchange_name = \"my-exchange\"\nexchangeInfo, err := management.DeclareExchange(context.TODO(), &TopicExchangeSpecification{\n            Name: exchangeName,\n        })\n```\n\n----------------------------------------\n\nTITLE: Attaching to the Beginning of a Stream in Go\nDESCRIPTION: Shows how to create a consumer that attaches to the beginning of a RabbitMQ stream using the Go client library. It sets the offset to the first message in the stream.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/amqp-client-libraries.md#2025-04-09_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nconsumer, err := connection.NewConsumer(context.Background(), qName, \n    &StreamConsumerOptions{\n            Offset: &OffsetFirst{},\n        })\n```\n\n----------------------------------------\n\nTITLE: Strong Naming Public Key for RabbitMQ .NET Client\nDESCRIPTION: Public part of the signing key used for strong naming the RabbitMQ .NET client assembly. The public key token is 89e7d7c5feba84ce.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/client-libraries/dotnet.md#2025-04-09_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n00240000048000009400000006020000002400005253413100040000010001008d20ec856aeeb8c3153a77faa2d80e6e43b5db93224a20cc7ae384f65f142e89730e2ff0fcc5d578bbe96fa98a7196c77329efdee4579b3814c0789e5a39b51df6edd75b602a33ceabdfcf19a3feb832f31d8254168cd7ba5700dfbca301fbf8db614ba41ba18474de0a5f4c2d51c995bc3636c641c8cbe76f45717bfcb943b5\n```\n\n----------------------------------------\n\nTITLE: Enabling VT/ANSI Escape Sequences in PowerShell\nDESCRIPTION: PowerShell command to enable VT/ANSI escape sequences globally, resolving issues with CLI tools displaying ANSI character sequences instead of formatted text.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/windows-configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ItemProperty HKCU:\\Console VirtualTerminalLevel -Type DWORD 1\n```\n\n----------------------------------------\n\nTITLE: Sample Rich Authorization Request JWT Token for RabbitMQ\nDESCRIPTION: Example JWT token using the Rich Authorization Request extension format. It defines fine-grained permissions with type, locations, and actions for RabbitMQ resources.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"authorization_details\": [\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance/vhost:primary-*\"],\n      \"actions\": [ \"read\", \"write\", \"configure\"  ]\n    },\n    { \"type\" : \"rabbitmq\",\n      \"locations\": [\"cluster:finance\", \"cluster:inventory\", ],\n      \"actions\": [\"tag:administrator\" ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Management API with Custom JWT Token\nDESCRIPTION: Command to access the RabbitMQ management API using a custom JWT token with producer roles in the extra_scope field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=\"http://localhost:15672/api/overview\" TOKEN=$(bin/jwt_token producer-roles-in-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Accessing Management API with Custom JWT Token\nDESCRIPTION: Command to access the RabbitMQ management API using a custom JWT token with producer roles in the extra_scope field.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmake curl-with-token URL=\"http://localhost:15672/api/overview\" TOKEN=$(bin/jwt_token producer-roles-in-extra-scope.json legacy-token-key private.pem public.pem)\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Provider URL in RabbitMQ Configuration\nDESCRIPTION: This snippet shows how to set the OAuth provider URL in RabbitMQ configuration when it differs from the auth_oauth2.issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nmanagement.oauth_provider_url\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Provider URL in RabbitMQ Configuration\nDESCRIPTION: This snippet shows how to set the OAuth provider URL in RabbitMQ configuration when it differs from the auth_oauth2.issuer URL.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/oauth2-examples/index.md#2025-04-09_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nmanagement.oauth_provider_url\n```\n\n----------------------------------------\n\nTITLE: HSTS Configuration\nDESCRIPTION: Sets Strict Transport Security header value for HTTP API responses\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.hsts.policy = max-age=31536000; includeSubDomains\n```\n\n----------------------------------------\n\nTITLE: Disabling OAuth Resource in Management UI\nDESCRIPTION: Configuration that disables a specific OAuth resource in the Management UI while keeping it available for other applications. This prevents the resource from being shown in the Management UI dropdown.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.oauth_resource_servers.4.id = rabbit_internal\nmanagement.oauth_resource_servers.4.disabled = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Basic Authentication for RabbitMQ Management HTTP API (INI)\nDESCRIPTION: Configuration to disable basic authentication for the RabbitMQ management HTTP API, forcing the use of OAuth 2.0 exclusively.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nmanagement.disable_basic_auth = true\n```\n\n----------------------------------------\n\nTITLE: Creating Monitoring User Access in Windows CMD\nDESCRIPTION: Commands to create a monitoring user with read-only access in RabbitMQ using Windows Command Prompt. Includes user creation and permission configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nrem See the Access Control guide to learn about user management.\n\nrem password is provided as a command line argument\nrabbitmqctl.bat add_user \"monitoring\" \"9a55f70a841f18b97c3a7db939b7adc9e34a0f1d\"\n\nrem passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user \"monitoring\" \"w63pnZ&LnYMO(t\"\n\nrem grant the user empty permissions\nrabbitmqctl set_permissions --vhost \"vhost-name\" \"monitoring\" \"^$\" \"^$\" \"^$\"\n```\n\n----------------------------------------\n\nTITLE: Creating Monitoring User Access in Windows CMD\nDESCRIPTION: Commands to create a monitoring user with read-only access in RabbitMQ using Windows Command Prompt. Includes user creation and permission configuration.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/management/index.md#2025-04-09_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nrem See the Access Control guide to learn about user management.\n\nrem password is provided as a command line argument\nrabbitmqctl.bat add_user \"monitoring\" \"9a55f70a841f18b97c3a7db939b7adc9e34a0f1d\"\n\nrem passwords with special characters must be quoted correctly\nrabbitmqctl.bat add_user \"monitoring\" \"w63pnZ&LnYMO(t\"\n\nrem grant the user empty permissions\nrabbitmqctl set_permissions --vhost \"vhost-name\" \"monitoring\" \"^$\" \"^$\" \"^$\"\n```\n\n----------------------------------------\n\nTITLE: Listing Required Ports for RabbitMQ in Markdown\nDESCRIPTION: This snippet lists the various ports required for RabbitMQ operations, including client connections, inter-node communication, and plugin-specific ports. It provides details on the purpose of each port and any associated conditions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n * 4369: [epmd](http://erlang.org/doc/man/epmd.html), a peer discovery service used by RabbitMQ nodes and CLI tools\n * 5672, 5671: used by AMQP 0-9-1 and 1.0 clients without and with TLS\n * 25672: used for inter-node and CLI tools communication (Erlang distribution server port)\n   and is allocated from a dynamic range (limited to a single port by default,\n   computed as AMQP port + 20000). Unless external connections on these ports are really necessary (e.g.\n   the cluster uses [federation](./federation) or CLI tools are used on machines outside the subnet),\n   these ports should not be publicly exposed. See [networking guide](./networking) for details.\n * 35672-35682: used by CLI tools (Erlang distribution client ports) for communication with nodes\n   and is allocated from a dynamic range (computed as server distribution port + 10000 through\n   server distribution port + 10010). See [networking guide](./networking) for details.\n * 15672: [HTTP API](./management) clients, [management UI](./management) and [rabbitmqadmin](./management-cli)\n   (only if the [management plugin](./management) is enabled)\n * 61613, 61614: [STOMP clients](https://stomp.github.io/stomp-specification-1.2.html) without and with TLS (only if the [STOMP plugin](./stomp) is enabled)\n * 1883, 8883: [MQTT clients](http://mqtt.org/) without and with TLS, if the [MQTT plugin](./mqtt) is enabled\n * 15674: STOMP-over-WebSockets clients (only if the [Web STOMP plugin](./web-stomp) is enabled)\n * 15675: MQTT-over-WebSockets clients (only if the [Web MQTT plugin](./web-mqtt) is enabled)\n```\n\n----------------------------------------\n\nTITLE: Listing Required Ports for RabbitMQ in Markdown\nDESCRIPTION: This snippet lists the various ports required for RabbitMQ operations, including client connections, inter-node communication, and plugin-specific ports. It provides details on the purpose of each port and any associated conditions.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n * 4369: [epmd](http://erlang.org/doc/man/epmd.html), a peer discovery service used by RabbitMQ nodes and CLI tools\n * 5672, 5671: used by AMQP 0-9-1 and 1.0 clients without and with TLS\n * 25672: used for inter-node and CLI tools communication (Erlang distribution server port)\n   and is allocated from a dynamic range (limited to a single port by default,\n   computed as AMQP port + 20000). Unless external connections on these ports are really necessary (e.g.\n   the cluster uses [federation](./federation) or CLI tools are used on machines outside the subnet),\n   these ports should not be publicly exposed. See [networking guide](./networking) for details.\n * 35672-35682: used by CLI tools (Erlang distribution client ports) for communication with nodes\n   and is allocated from a dynamic range (computed as server distribution port + 10000 through\n   server distribution port + 10010). See [networking guide](./networking) for details.\n * 15672: [HTTP API](./management) clients, [management UI](./management) and [rabbitmqadmin](./management-cli)\n   (only if the [management plugin](./management) is enabled)\n * 61613, 61614: [STOMP clients](https://stomp.github.io/stomp-specification-1.2.html) without and with TLS (only if the [STOMP plugin](./stomp) is enabled)\n * 1883, 8883: [MQTT clients](http://mqtt.org/) without and with TLS, if the [MQTT plugin](./mqtt) is enabled\n * 15674: STOMP-over-WebSockets clients (only if the [Web STOMP plugin](./web-stomp) is enabled)\n * 15675: MQTT-over-WebSockets clients (only if the [Web MQTT plugin](./web-mqtt) is enabled)\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ as a Windows Service in PowerShell\nDESCRIPTION: Command to install RabbitMQ as a Windows service that will run in the security context of the system account, suitable for production environments.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/install-windows-manual.md#2025-04-09_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nrabbitmq-service.bat install\n```\n\n----------------------------------------\n\nTITLE: Adding a User with Password Prompt in Bash\nDESCRIPTION: Command to add a new RabbitMQ user with an interactive password prompt. This approach is recommended for interactive use as it avoids exposing passwords in command history or process lists.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# will prompt for password, only use this option interactively\nrabbitmqctl add_user \"username\"\n```\n\n----------------------------------------\n\nTITLE: Adding a User with Password Prompt in Bash\nDESCRIPTION: Command to add a new RabbitMQ user with an interactive password prompt. This approach is recommended for interactive use as it avoids exposing passwords in command history or process lists.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/access-control.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# will prompt for password, only use this option interactively\nrabbitmqctl add_user \"username\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 1883 using lsof (IPv4)\nDESCRIPTION: This command checks for processes listening on port 1883 (commonly used for MQTT) using IPv4.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i4TCP:1883 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 1883 using lsof (IPv4)\nDESCRIPTION: This command checks for processes listening on port 1883 (commonly used for MQTT) using IPv4.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i4TCP:1883 | grep LISTEN\n```\n\n----------------------------------------\n\nTITLE: Inspecting TCP Listeners on Port 1883 using lsof (IPv4)\nDESCRIPTION: This command checks for processes listening on port 1883 (commonly used for MQTT) using IPv4.\nSOURCE: https://github.com/rabbitmq/rabbitmq-website/blob/main/docs/troubleshooting-networking.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nsudo lsof -n -i4TCP:1883 | grep LISTEN\n```"
  }
]