[
  {
    "owner": "jhomlala",
    "repo": "betterplayer",
    "content": "TITLE: Initializing Better Player with Network or File Source (Dart)\nDESCRIPTION: These methods initialize the Better Player with either a network URL or a file URL. They set up basic configuration for the player, allowing for quick integration. The `url` parameter specifies the video source, and `configuration` allows customizing the player's behavior.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/generalplayerusage.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayer.network(url, configuration)\nBetterPlayer.file(url, configuration)\n```\n\n----------------------------------------\n\nTITLE: Initializing BetterPlayerConfiguration in Dart\nDESCRIPTION: This snippet demonstrates how to create an instance of `BetterPlayerConfiguration` with specific settings. It sets `autoPlay` and `looping` to true, enabling automatic playback and looping. It also enables `fullScreenByDefault` which starts the video in fullscreen mode.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/generalconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar betterPlayerConfiguration = BetterPlayerConfiguration(\n    autoPlay: true,\n    looping: true,\n    fullScreenByDefault: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating BetterPlayer Widget (Dart)\nDESCRIPTION: This snippet demonstrates how to integrate the `BetterPlayer` widget into a Flutter UI. It wraps the player with an `AspectRatio` widget to ensure the correct aspect ratio. The `controller` parameter takes the `BetterPlayerController` instance, which controls the player's behavior.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/generalplayerusage.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return AspectRatio(\n      aspectRatio: 16 / 9,\n      child: BetterPlayer(\n        controller: _betterPlayerController,\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Normal Usage: Creating BetterPlayerDataSource and Controller\nDESCRIPTION: This snippet demonstrates the creation of `BetterPlayerDataSource` and `BetterPlayerController` for more advanced configuration. `BetterPlayerDataSource` specifies the video source, its type, and subtitle sources. `BetterPlayerController` manages the `BetterPlayer` widget, allowing control over video playback, volume, and other aspects. A network video URL is used as the data source.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/basicusage.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerController _betterPlayerController;\n\n  @override\n  void initState() {\n    super.initState();\n    BetterPlayerDataSource betterPlayerDataSource = BetterPlayerDataSource(\n        BetterPlayerDataSourceType.network,\n        \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\");\n    _betterPlayerController = BetterPlayerController(\n        BetterPlayerConfiguration(),\n        betterPlayerDataSource: betterPlayerDataSource);\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Better Player Setup with Network Source (Dart)\nDESCRIPTION: This snippet demonstrates how to set up a Better Player within a Flutter widget using a network URL. It utilizes `AspectRatio` to maintain a 16:9 aspect ratio. The `BetterPlayerConfiguration` allows customization, such as setting the aspect ratio.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/generalplayerusage.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"Example player\"),\n      ),\n      body: AspectRatio(\n        aspectRatio: 16 / 9,\n        child: BetterPlayer.network(\n          \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n          betterPlayerConfiguration: BetterPlayerConfiguration(\n            aspectRatio: 16 / 9,\n          ),\n        ),\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Normal Usage: Creating BetterPlayer Widget in AspectRatio\nDESCRIPTION: Shows how to wrap `BetterPlayer` widget within an `AspectRatio` widget, using a pre-configured `BetterPlayerController`. The `AspectRatio` widget maintains a 16:9 aspect ratio, while the `BetterPlayer` widget is driven by the `_betterPlayerController` which was initialized earlier. This allows for flexible control over the video's appearance and playback behavior.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/basicusage.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return AspectRatio(\n      aspectRatio: 16 / 9,\n      child: BetterPlayer(\n        controller: _betterPlayerController,\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Initialize BetterPlayerDataSource with Cache Configuration (Dart)\nDESCRIPTION: This code snippet demonstrates how to initialize a `BetterPlayerDataSource` with `BetterPlayerCacheConfiguration`.  It sets the data source type to network, specifies the video URL, and configures cache settings like `useCache`, `preCacheSize`, `maxCacheSize`, `maxCacheFileSize`, and cache `key`. This configuration enables caching for the specified network data source.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/cacheconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource _betterPlayerDataSource = BetterPlayerDataSource(\n      BetterPlayerDataSourceType.network,\n      Constants.elephantDreamVideoUrl,\n      cacheConfiguration: BetterPlayerCacheConfiguration(\n        useCache: true,\n        preCacheSize: 10 * 1024 * 1024,\n        maxCacheSize: 10 * 1024 * 1024,\n        maxCacheFileSize: 10 * 1024 * 1024,\n\n        ///Android only option to use cached video between app sessions\n        key: \"testCacheKey\",\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating Playlist Data Source List Dart\nDESCRIPTION: Creates a list of BetterPlayerDataSource objects, each representing a video to be played in the playlist.  The data sources are initialized with network URLs. It returns the created list of data sources. The URLs point to sample videos.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/playlistplayerusage.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nList<BetterPlayerDataSource> createDataSet() {\n    List dataSourceList = List<BetterPlayerDataSource>();\n    dataSourceList.add(\n      BetterPlayerDataSource(\n        BetterPlayerDataSourceType.network,\n        \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n      ),\n    );\n    dataSourceList.add(\n      BetterPlayerDataSource(BetterPlayerDataSourceType.network,\n          \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"),\n    );\n    dataSourceList.add(\n      BetterPlayerDataSource(BetterPlayerDataSourceType.network,\n          \"http://sample.vodobox.com/skate_phantom_flex_4k/skate_phantom_flex_4k.m3u8\"),\n    );\n    return dataSourceList;\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Better Player Playlist Widget Dart\nDESCRIPTION: This code snippet demonstrates how to build the BetterPlayerPlaylist widget in a Flutter application.  It takes a list of BetterPlayerDataSource objects and uses them to configure a playlist.  The widget uses `AspectRatio` to maintain a 16:9 aspect ratio for the player.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/playlistplayerusage.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n    return AspectRatio(\n      aspectRatio: 16 / 9,\n      child: BetterPlayerPlaylist(\n          betterPlayerConfiguration: BetterPlayerConfiguration(),\n          betterPlayerPlaylistConfiguration: const BetterPlayerPlaylistConfiguration(),\n          betterPlayerDataSourceList: dataSourceList),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating BetterPlayerDataSource and Controller (Dart)\nDESCRIPTION: This snippet shows how to create `BetterPlayerDataSource` and `BetterPlayerController` for more configuration options. `BetterPlayerDataSource` defines the source of the video, including URL and type. `BetterPlayerController` manages the video widget's behavior. This should be done in the `initState` method.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/generalplayerusage.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerController _betterPlayerController;\n\n  @override\n  void initState() {\n    super.initState();\n    BetterPlayerDataSource betterPlayerDataSource = BetterPlayerDataSource(\n        BetterPlayerDataSourceType.network,\n        \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\");\n    _betterPlayerController = BetterPlayerController(\n        BetterPlayerConfiguration(),\n        betterPlayerDataSource: betterPlayerDataSource);\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage: Initializing Better Player from Network URL\nDESCRIPTION: Demonstrates the most basic initialization of the Better Player using a network URL. It showcases the use of `BetterPlayer.network()` to display a video from a given URL with a basic configuration. `url` parameter specifies the video URL. `configuration` defines the player configuration.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/basicusage.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayer.network(url, configuration)\n```\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayer.file(url, configuration)\n```\n\n----------------------------------------\n\nTITLE: Multiple Subtitles Configuration - Dart\nDESCRIPTION: This code snippet demonstrates how to pass multiple subtitle sources for a single video.  It creates a `BetterPlayerDataSource` with a network video URL and a list of `BetterPlayerSubtitlesSource` objects.  Each `BetterPlayerSubtitlesSource` object represents a different subtitle track with a name (e.g., \"EN\", \"DE\") and a list of URLs for the subtitle files.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/subtitlesconfiguration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar dataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.network,\n    \"https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8\",\n    liveStream: false,\n    useAsmsSubtitles: true,\n    hlsTrackNames: [\"Low quality\", \"Not so low quality\", \"Medium quality\"],\n    subtitles: [\n        BetterPlayerSubtitlesSource(\n          type: BetterPlayerSubtitlesSourceType.network,\n          name: \"EN\",\n          urls: [\n            \"https://dl.dropboxusercontent.com/s/71nzjo2ux3evxqk/example_subtitles.srt\"\n          ],\n        ),\n\n        BetterPlayerSubtitlesSource(\n          type: BetterPlayerSubtitlesSourceType.network,\n          name: \"DE\",\n          urls: [\n            \"https://dl.dropboxusercontent.com/s/71nzjo2ux3evxqk/example_subtitles.srt\"\n          ],\n        ),\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Video Resolutions - Dart\nDESCRIPTION: This code snippet demonstrates how to initialize a `BetterPlayerDataSource` with different video resolutions. The `resolutions` parameter is a map where the keys represent the resolution labels (e.g., \"LOW\", \"MEDIUM\") and the values are the corresponding video URLs. This allows the Better Player to offer different quality options to the user for standard network videos.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/resolutionsofvideo.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar dataSource = BetterPlayerDataSource(BetterPlayerDataSourceType.network,\n    \"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\",\n    resolutions: {\n        \"LOW\":\n            \"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\",\n        \"MEDIUM\":\n            \"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_640_3MG.mp4\",\n        \"LARGE\":\n            \"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_1280_10MG.mp4\",\n        \"EXTRA_LARGE\":\n            \"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_1920_18MG.mp4\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Better Player Controller in Dart\nDESCRIPTION: This code demonstrates how to add an event listener to a `BetterPlayerController` in Dart. The listener is automatically removed on dispose, preventing memory leaks. It logs the event type to the console.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/events.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n_betterPlayerController.addEventsListener((event){\n    print(\"Better player event: ${event.betterPlayerEventType}\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Overridden Duration in BetterPlayer DataSource (Dart)\nDESCRIPTION: This code snippet demonstrates how to set the `overriddenDuration` property when creating a `BetterPlayerDataSource`. This allows you to limit the playback duration of a video to a specified `Duration`. It uses a network video source and sets the duration to 10 seconds.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/overriddenduration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource dataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.network,\n    Constants.elephantDreamVideoUrl,\n    ///Play only 10 seconds of this video.\n    overriddenDuration: const Duration(seconds: 10),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Notification - Dart\nDESCRIPTION: This snippet demonstrates how to configure player notifications using the `BetterPlayerNotificationConfiguration` class within a `BetterPlayerDataSource`. It sets properties such as the notification title, author, image URL, and the activity to launch when the notification is clicked. The `showNotification` flag enables the notification.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/notificationconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource dataSource = BetterPlayerDataSource(\n      BetterPlayerDataSourceType.network,\n      Constants.elephantDreamVideoUrl,\n      notificationConfiguration: BetterPlayerNotificationConfiguration(\n        showNotification: true,\n        title: \"Elephant dream\",\n        author: \"Some author\",\n        imageUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/African_Bush_Elephant.jpg/1200px-African_Bush_Elephant.jpg\",\n        activityName: \"MainActivity\",\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Playlist Configuration Initialization Dart\nDESCRIPTION: This snippet shows how to initialize a `BetterPlayerPlaylistConfiguration` object with custom settings. It sets `loopVideos` to false and `nextVideoDelay` to 5 seconds.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/playlistconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar betterPlayerPlaylistConfiguration = BetterPlayerPlaylistConfiguration(\n    loopVideos: false,\n    nextVideoDelay: Duration(milliseconds: 5000),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffering with BetterPlayerDataSource in Dart\nDESCRIPTION: This code snippet demonstrates how to use `BetterPlayerBufferingConfiguration` within a `BetterPlayerDataSource` to configure buffering settings for a network video source. It sets minimum and maximum buffer durations, as well as buffer durations for playback and rebuffer scenarios. This is crucial for controlling the buffering behavior and improving user experience. It is available only in Android.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/bufferingconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource _betterPlayerDataSource = BetterPlayerDataSource(\n      BetterPlayerDataSourceType.network,\n      Constants.elephantDreamVideoUrl,\n      bufferingConfiguration: BetterPlayerBufferingConfiguration(\n        minBufferMs: 50000,\n        maxBufferMs: 13107200,\n        bufferForPlaybackMs: 2500,\n        bufferForPlaybackAfterRebufferMs: 5000,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterPlayer Translations in Dart\nDESCRIPTION: This code snippet demonstrates how to configure translations for BetterPlayer using the `BetterPlayerTranslations` class. It creates a list of `BetterPlayerTranslations` objects, each specifying translations for a specific language. These translations are then passed to the `BetterPlayerConfiguration` to enable localization in the video player. It requires the BetterPlayer library to be imported.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/translationsconfiguration.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ntranslations: [\n              BetterPlayerTranslations(\n                languageCode: \"language_code for example pl\",\n                generalDefaultError: \"translated text\",\n                generalNone: \"translated text\",\n                generalDefault: \"translated text\",\n                playlistLoadingNextVideo: \"translated text\",\n                controlsLive: \"translated text\",\n                controlsNextVideoIn: \"translated text\",\n                overflowMenuPlaybackSpeed: \"translated text\",\n                overflowMenuSubtitles: \"translated text\",\n                overflowMenuQuality: \"translated text\",\n              ),\n              BetterPlayerTranslations(\n                languageCode: \"other language for example cz\",\n                generalDefaultError: \"translated text\",\n                generalNone: \"translated text\",\n                generalDefault: \"translated text\",\n                playlistLoadingNextVideo: \"translated text\",\n                controlsLive: \"translated text\",\n                controlsNextVideoIn: \"translated text\",\n                overflowMenuPlaybackSpeed: \"translated text\",\n                overflowMenuSubtitles: \"translated text\",\n                overflowMenuQuality: \"translated text\",\n              ),\n            ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Widevine DRM in Betterplayer - Dart\nDESCRIPTION: This snippet demonstrates how to configure Widevine DRM for a BetterPlayerDataSource. It sets the DRM type to 'widevine' and specifies the license URL and headers within the `drmConfiguration` parameter.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/drmconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource _widevineDataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.network,\n    \"url\",\n    drmConfiguration: BetterPlayerDrmConfiguration(\n        drmType: BetterPlayerDrmType.widevine,\n        licenseUrl:\"licenseUrl\",\n        headers: {\"header\": \"value\"}\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Controls Configuration - Dart\nDESCRIPTION: This snippet shows how to update the BetterPlayerControlsConfiguration at runtime using the setBetterPlayerControlsConfiguration method of BetterPlayerController. In this example, the overflowModalColor is changed to amberAccent.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/controlsconfiguration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n _betterPlayerController.setBetterPlayerControlsConfiguration(\n                  BetterPlayerControlsConfiguration(\n                      overflowModalColor: Colors.amberAccent),\n                );\n```\n\n----------------------------------------\n\nTITLE: Pre-cache Video (Dart)\nDESCRIPTION: This code snippet demonstrates how to start pre-caching a video using the `preCache()` method of the `betterPlayerController`. It requires a `BetterPlayerDataSource` instance (`_betterPlayerDataSource`) as an argument, indicating the video to be pre-cached.  This allows the video to be downloaded and cached before playback begins.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/cacheconfiguration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController.preCache(_betterPlayerDataSource);\n```\n\n----------------------------------------\n\nTITLE: Building BetterPlayerListViewPlayer Widget in Dart\nDESCRIPTION: This code snippet demonstrates how to build a `BetterPlayerListViewPlayer` widget within a Flutter `build` method. It utilizes `AspectRatio` to maintain a 16:9 aspect ratio. The `BetterPlayerListVideoPlayer` is configured with a network data source, a unique key, and a `playFraction` of 0.8, which means the video will autoplay when 80% of the video is visible on the screen.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/listplayerusage.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n @override\n  Widget build(BuildContext context) {\n    return AspectRatio(\n      aspectRatio: 16 / 9,\n      child: BetterPlayerListVideoPlayer(\n        BetterPlayerDataSource(\n            BetterPlayerDataSourceType.network, videoListData.videoUrl),\n        key: Key(videoListData.hashCode.toString()),\n        playFraction: 0.8,\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Enabling PiP Mode in BetterPlayer (Dart)\nDESCRIPTION: This snippet shows how to enable Picture-in-Picture (PiP) mode in a Flutter application using the `enablePictureInPicture()` method of the `BetterPlayerController`. It requires a `GlobalKey` associated with the `BetterPlayer` widget to identify the player instance. The `_betterPlayerKey` must be passed as an argument.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/pictureinpictureconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n_betterPlayerController.enablePictureInPicture(_betterPlayerKey);\n```\n\n----------------------------------------\n\nTITLE: Override Aspect Ratio in Dart\nDESCRIPTION: This code snippet shows how to use `setOverriddenAspectRatio` to change the aspect ratio of a `BetterPlayerController` at runtime. It takes a double value as input, representing the desired aspect ratio. This allows dynamic adjustment of the video's proportions.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/overriddenaspectratio.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController.setOverriddenAspectRatio(1.0);\n```\n\n----------------------------------------\n\nTITLE: Better Player Available Events in Dart\nDESCRIPTION: This snippet lists available video player events in the Better Player library. These events can be listened to for tracking player status and user interactions.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/events.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  initialized,\n  play,\n  pause,\n  seekTo,\n  openFullscreen,\n  hideFullscreen,\n  setVolume,\n  progress,\n  finished,\n  exception,\n  controlsVisible,\n  controlsHiddenStart,\n  controlsHiddenEnd,\n  setSpeed,\n  changedSubtitles,\n  changedTrack,\n  changedPlayerVisibility,\n  changedResolution,\n  pipStart,\n  pipStop,\n  setupDataSource,\n  bufferingStart,\n  bufferingUpdate,\n  bufferingEnd,\n  changedPlaylistItem\n```\n\n----------------------------------------\n\nTITLE: Initializing Controls Configuration - Dart\nDESCRIPTION: This snippet shows how to initialize the BetterPlayerConfiguration with a custom BetterPlayerControlsConfiguration. It sets the text and icons colors to black.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/controlsconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar betterPlayerConfiguration = BetterPlayerConfiguration(\n    controlsConfiguration: BetterPlayerControlsConfiguration(\n        textColor: Colors.black,\n        iconsColor: Colors.black,\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping BetterPlayer with Multiple Gesture Detector in Dart\nDESCRIPTION: This code snippet demonstrates how to wrap a `BetterPlayer` widget with `BetterPlayerMultipleGestureDetector` in Dart. It shows how to specify the `onTap` gesture and how the `BetterPlayer` widget is placed inside an `AspectRatio` widget to maintain a 16:9 aspect ratio.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/multiplegesturedetector.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerMultipleGestureDetector(\n            child: AspectRatio(\n              aspectRatio: 16 / 9,\n              child: BetterPlayer(controller: _betterPlayerController),\n            ),\n            onTap: () {\n              print(\"Tap!\");\n            },\n          ),\n```\n\n----------------------------------------\n\nTITLE: Set Controls Always Visible - Dart\nDESCRIPTION: This snippet demonstrates how to make the player controls always visible using the `setControlsAlwaysVisible` method of the `betterPlayerController` object.  When set to always visible, the controls will not fade out. The method takes a boolean value as input (true keeps controls always visible).\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/enabledisablecontrols.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nbetterPlayerController.setControlsAlwaysVisible(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Overflow Menu Item - Dart\nDESCRIPTION: This code snippet demonstrates how to add a custom element to the BetterPlayer's overflow menu using `BetterPlayerControlsConfiguration`. It creates a `BetterPlayerOverflowMenuItem` with an icon, title, and an action to be performed when the item is clicked. The action in this example is simply printing \"Click!\" to the console. Requires BetterPlayer package.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/customelementinoverflowmenu.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ncontrolsConfiguration: BetterPlayerControlsConfiguration(\n            overflowMenuCustomItems: [\n                BetterPlayerOverflowMenuItem(\n                    Icons.account_circle_rounded,\n                    \"Custom element\",\n                    () => print(\"Click!\"),\n                )\n            ],\n        ),\n```\n\n----------------------------------------\n\nTITLE: Stop Pre-cache (Dart)\nDESCRIPTION: This code snippet demonstrates how to stop a running pre-cache process using the `stopPreCache()` method of the `betterPlayerController`.  It also requires a `BetterPlayerDataSource` instance (`_betterPlayerDataSource`) as an argument, specifying which pre-cache operation to stop. This can be used to halt pre-caching if it is no longer needed.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/cacheconfiguration.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController.stopPreCache(_betterPlayerDataSource);\n```\n\n----------------------------------------\n\nTITLE: Control Playback on Visibility Change - Dart\nDESCRIPTION: This code snippet demonstrates how to control playback (play/pause) of a Betterplayer video based on its visibility. It uses the `VisibilityDetector` and the `visibilityFraction` to determine when to play or pause the video.  It requires a `BetterPlayerController` instance and uses properties like `playFraction`, `autoPlay`, `autoPause` to configure the behavior.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/playerbehavioronvisibilitychange.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid onVisibilityChanged(double visibleFraction) async {\n    bool isPlaying = await _betterPlayerController.isPlaying();\n    bool initialized = _betterPlayerController.isVideoInitialized();\n    if (visibleFraction >= widget.playFraction) {\n      if (widget.autoPlay && initialized && !isPlaying && !_isDisposing) {\n        _betterPlayerController.play();\n      }\n    } else {\n      if (widget.autoPause && initialized && isPlaying && !_isDisposing) {\n        _betterPlayerController.pause();\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Player Controls - Dart\nDESCRIPTION: This snippet demonstrates how to disable the player controls using the `setControlsEnabled` method of the `betterPlayerController` object.  When controls are disabled, the user cannot interact with the video player through standard controls.  The method takes a boolean value as input (false disables controls).\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/enabledisablecontrols.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nbetterPlayerController.setControlsEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Checking PiP Support in BetterPlayer (Dart)\nDESCRIPTION: This code snippet demonstrates how to check if Picture-in-Picture (PiP) mode is supported on the current device using the `isPictureInPictureSupported()` method of the `BetterPlayerController` in a Flutter application. The result of this check can be used to determine whether to enable or disable PiP functionality.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/pictureinpictureconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n_betterPlayerController.isPictureInPictureSupported();\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Mixing in Better Player (Dart)\nDESCRIPTION: This code snippet demonstrates how to enable audio mixing with other apps using the `setMixWithOthers` method of the `BetterPlayerController`. When set to `true`, the app's audio can mix with audio from other applications. The default value is `false`.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/mixaudiowithothers.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nbetterPlayerController.setMixWithOthers(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring BetterPlayer for Manual Dispose - Dart\nDESCRIPTION: This snippet shows how to configure the `BetterPlayerConfiguration` to disable automatic disposal of the `BetterPlayerController`. Setting `autoDispose` to `false` prevents the controller from being disposed when the `BetterPlayer` widget is removed from the widget tree.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/manualdispose.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerConfiguration betterPlayerConfiguration =\n    BetterPlayerConfiguration(\n        autoDispose: false,\n    );\n```\n\n----------------------------------------\n\nTITLE: Checking Data Source Load in BetterPlayer (Dart)\nDESCRIPTION: This code snippet demonstrates how to load a data source using `betterPlayerController!.setupDataSource(source)` and then checks the result of the returned `Future`. It handles both the successful loading of the source and any potential errors during the process. Dependencies include the BetterPlayerController and a valid data source object named `source`.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/sourceload.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController!.setupDataSource(source)\n.then((response) {\n  // Source loaded successfully\n  videoLoading = false;\n})\n.catchError((error) async {\n  // Source did not load, url might be invalid\n  inspect(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Subtitles Configuration - Dart\nDESCRIPTION: This code snippet shows how to configure the subtitles appearance using the `BetterPlayerSubtitlesConfiguration` class. It creates a `BetterPlayerConfiguration` object and sets the `subtitlesConfiguration` property with an instance of `BetterPlayerSubtitlesConfiguration`. This allows customizing properties like font size and color.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/subtitlesconfiguration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar betterPlayerConfiguration = BetterPlayerConfiguration(\n    subtitlesConfiguration: BetterPlayerSubtitlesConfiguration(\n        fontSize: 20,\n        fontColor: Colors.green,\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Disposing BetterPlayerController - Dart\nDESCRIPTION: This snippet demonstrates how to manually dispose of the `BetterPlayerController` after disabling automatic disposal. It calls the `dispose()` method on the `betterPlayerController` instance, releasing the resources held by the controller.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/manualdispose.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController.dispose();\n```\n\n----------------------------------------\n\nTITLE: Clear Cache (Dart)\nDESCRIPTION: This code snippet shows how to clear the cache using the `clearCache()` method of the `betterPlayerController`.  This removes all cached data associated with the player. This operation requires an initialized `betterPlayerController` instance.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/cacheconfiguration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController.clearCache();\n```\n\n----------------------------------------\n\nTITLE: BetterPlayerBufferingConfiguration Options in Dart\nDESCRIPTION: This code snippet shows the available configuration options within the `BetterPlayerBufferingConfiguration` class. These options control the minimum and maximum buffer durations, as well as the buffer durations required for playback to start or resume after a seek or rebuffer. These parameters allow fine-tuning the buffering behavior of the video player for optimal performance and user experience. This configuration is available only for Android.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/bufferingconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n///The default minimum duration of media that the player will attempt to\n///ensure is buffered at all times, in milliseconds.\nfinal int minBufferMs;\n\n///The default maximum duration of media that the player will attempt to\n///buffer, in milliseconds.\nfinal int maxBufferMs;\n\n///The default duration of media that must be buffered for playback to start\n///or resume following a user action such as a seek, in milliseconds.\nfinal int bufferForPlaybackMs;\n\n///The default duration of media that must be buffered for playback to resume\n///after a rebuffer, in milliseconds. A rebuffer is defined to be caused by\n///buffer depletion rather than a user action.\nfinal int bufferForPlaybackAfterRebufferMs;\n```\n\n----------------------------------------\n\nTITLE: Controls Configuration Properties - Dart\nDESCRIPTION: This code block lists and describes various properties of the BetterPlayerControlsConfiguration class, which allows for customization of colors, icons, enable/disable flags, and custom widgets for the player controls.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/controlsconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n///Color of the control bars\nfinal Color controlBarColor;\n\n///Color of texts\nfinal Color textColor;\n\n///Color of icons\nfinal Color iconsColor;\n\n///Icon of play\nfinal IconData playIcon;\n\n///Icon of pause\nfinal IconData pauseIcon;\n\n///Icon of mute\nfinal IconData muteIcon;\n\n///Icon of unmute\nfinal IconData unMuteIcon;\n\n///Icon of fullscreen mode enable\nfinal IconData fullscreenEnableIcon;\n\n///Icon of fullscreen mode disable\nfinal IconData fullscreenDisableIcon;\n\n///Cupertino only icon, icon of skip\nfinal IconData skipBackIcon;\n\n///Cupertino only icon, icon of forward\nfinal IconData skipForwardIcon;\n\n///Flag used to enable/disable fullscreen\nfinal bool enableFullscreen;\n\n///Flag used to enable/disable mute\nfinal bool enableMute;\n\n///Flag used to enable/disable progress texts\nfinal bool enableProgressText;\n\n///Flag used to enable/disable progress bar\nfinal bool enableProgressBar;\n\n///Flag used to enable/disable progress bar drag\nfinal bool enableProgressBarDrag;\n\n///Flag used to enable/disable play-pause\nfinal bool enablePlayPause;\n\n///Flag used to enable skip forward and skip back\nfinal bool enableSkips;\n\n///Progress bar played color\nfinal Color progressBarPlayedColor;\n\n///Progress bar circle color\nfinal Color progressBarHandleColor;\n\n///Progress bar buffered video color\nfinal Color progressBarBufferedColor;\n\n///Progress bar background color\nfinal Color progressBarBackgroundColor;\n\n///Time to hide controls\nfinal Duration controlsHideTime;\n\n///Parameter used to build custom controls\nfinal Widget Function(BetterPlayerController controller)\n       customControlsBuilder;\n\n///Parameter used to change theme of the player\nfinal BetterPlayerTheme playerTheme;\n\n///Flag used to show/hide controls\nfinal bool showControls;\n\n///Flag used to show controls on init\nfinal bool showControlsOnInitialize;\n\n///Control bar height\nfinal double controlBarHeight;\n\n///Live text color;\nfinal Color liveTextColor;\n\n///Flag used to show/hide overflow menu which contains playback, subtitles,\n///qualities options.\nfinal bool enableOverflowMenu;\n\n///Flag used to show/hide playback speed\nfinal bool enablePlaybackSpeed;\n\n///Flag used to show/hide subtitles\nfinal bool enableSubtitles;\n\n///Flag used to show/hide qualities\nfinal bool enableQualities;\n\n///Flag used to show/hide PiP mode\nfinal bool enablePip;\n\n///Flag used to enable/disable retry feature\nfinal bool enableRetry;\n\n///Flag used to show/hide audio tracks\nfinal bool enableAudioTracks;\n\n///Custom items of overflow menu\nfinal List<BetterPlayerOverflowMenuItem> overflowMenuCustomItems;\n\n///Icon of the overflow menu\nfinal IconData overflowMenuIcon;\n\n///Icon of the playback speed menu item from overflow menu\nfinal IconData playbackSpeedIcon;\n\n///Icon of the subtitles menu item from overflow menu\nfinal IconData subtitlesIcon;\n\n///Icon of the qualities menu item from overflow menu\nfinal IconData qualitiesIcon;\n\n///Icon of the audios menu item from overflow menu\nfinal IconData audioTracksIcon;\n\n///Color of overflow menu icons\nfinal Color overflowMenuIconsColor;\n\n///Time which will be used once user uses forward\nfinal int forwardSkipTimeInMilliseconds;\n\n///Time which will be used once user uses backward\nfinal int backwardSkipTimeInMilliseconds;\n\n///Color of default loading indicator\nfinal Color loadingColor;\n\n///Widget which can be used instead of default progress\nfinal Widget loadingWidget;\n\n///Color of the background, when no frame is displayed.\nfinal Color backgroundColor;\n\n///Quality of Gaussian Blur for x (iOS only).\nfinal double sigmaX;\n\n///Quality of Gaussian Blur for y (iOS only).\nfinal double sigmaY;\n```\n\n----------------------------------------\n\nTITLE: Network Subtitles Configuration - Dart\nDESCRIPTION: This code snippet shows how to configure subtitles from a network source using `BetterPlayerSubtitlesSource.single`. It creates a `BetterPlayerDataSource` with a network video URL and a single subtitle URL. The subtitle type is set to `network` and the subtitle URL is provided.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/subtitlesconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar dataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.network,\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n    subtitles: BetterPlayerSubtitlesSource.single(\n        type: BetterPlayerSubtitlesSourceType.network,\n        url: \"https://dl.dropboxusercontent.com/s/71nzjo2ux3evxqk/example_subtitles.srt\"\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Playlist Configuration Options Dart\nDESCRIPTION: This snippet outlines the available configuration options within the `BetterPlayerPlaylistConfiguration` class. It includes options for setting the delay before the next video, looping the playlist, and specifying the initial video to start with.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/playlistconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n///How long user should wait for next video\nfinal Duration nextVideoDelay;\n\n///Should videos be looped\nfinal bool loopVideos;\n\n///Index of video that will start on playlist start. Id must be less than\n///elements in data source list. Default is 0.\nfinal int initialStartIndex;\n```\n\n----------------------------------------\n\nTITLE: File Subtitles Configuration - Dart\nDESCRIPTION: This code snippet shows how to configure subtitles from a local file source using `BetterPlayerSubtitlesSource.single`. It creates a `BetterPlayerDataSource` with a local video file path and a single subtitle file path.  The subtitle type is set to `file` and the subtitle file path is provided using a directory path.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/subtitlesconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar dataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.file,\n    \"${directory.path}/testvideo.mp4\",\n    subtitles: BetterPlayerSubtitlesSource.single(\n        type: BetterPlayerSubtitlesSourceType.file,\n        url: \"${directory.path}/example_subtitles.srt\",\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Token-based DRM in Betterplayer - Dart\nDESCRIPTION: This snippet shows how to configure token-based DRM for a BetterPlayerDataSource. It sets the DRM type to 'token' and includes the authorization token in the `drmConfiguration` parameter.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/drmconfiguration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource dataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.network,\n    \"url\",\n    videoFormat: BetterPlayerVideoFormat.hls,\n    drmConfiguration: BetterPlayerDrmConfiguration(\n        drmType: BetterPlayerDrmType.token,\n        token: \"Bearer=token\",\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: BetterPlayerConfiguration Options in Dart\nDESCRIPTION: This snippet lists available configuration options within the `BetterPlayerConfiguration` class. It details properties like `autoPlay`, `looping`, `aspectRatio`, `fullScreenByDefault`, and other parameters that control player behavior, appearance, and event handling.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/generalconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n/// Play the video as soon as it's displayed\nfinal bool autoPlay;\n\n/// Start video at a certain position\nfinal Duration startAt;\n\n/// Whether or not the video should loop\nfinal bool looping;\n\n/// Weather or not to show the controls when initializing the widget.\nfinal bool showControlsOnInitialize;\n\n/// When the video playback runs  into an error, you can build a custom\n/// error message.\nfinal Widget Function(BuildContext context, String errorMessage) errorBuilder;\n\n/// The Aspect Ratio of the Video. Important to get the correct size of the\n/// video!\n///\n/// Will fallback to fitting within the space allowed.\nfinal double aspectRatio;\n\n/// The placeholder is displayed underneath the Video before it is initialized\n/// or played.\nfinal Widget placeholder;\n\n/// Should the placeholder be shown until play is pressed\nfinal bool showPlaceholderUntilPlay;\n\n/// Placeholder position of player stack. If false, then placeholder will be\n/// displayed on the bottom, so user need to hide it manually. Default is\n/// true.\nfinal bool placeholderOnTop;\n\n/// A widget which is placed between the video and the controls\nfinal Widget overlay;\n\n/// Defines if the player will start in fullscreen when play is pressed\nfinal bool fullScreenByDefault;\n\n/// Defines if the player will sleep in fullscreen or not\nfinal bool allowedScreenSleep;\n\n/// Defines aspect ratio which will be used in fullscreen\nfinal double fullScreenAspectRatio;\n\n/// Defines the set of allowed device orientations on entering fullscreen\nfinal List<DeviceOrientation> deviceOrientationsOnFullScreen;\n\n/// Defines the system overlays visible after exiting fullscreen\nfinal List<SystemUiOverlay> systemOverlaysAfterFullScreen;\n\n/// Defines the set of allowed device orientations after exiting fullscreen\nfinal List<DeviceOrientation> deviceOrientationsAfterFullScreen;\n\n/// Defines a custom RoutePageBuilder for the fullscreen\nfinal BetterPlayerRoutePageBuilder routePageBuilder;\n\n/// Defines a event listener where video player events will be send\nfinal Function(BetterPlayerEvent) eventListener;\n\n///Defines subtitles configuration\nfinal BetterPlayerSubtitlesConfiguration subtitlesConfiguration;\n\n///Defines controls configuration\nfinal BetterPlayerControlsConfiguration controlsConfiguration;\n\n///Defines fit of the video, allows to fix video stretching, see possible\n///values here: https://api.flutter.dev/flutter/painting/BoxFit-class.html\nfinal BoxFit fit;\n\n///Defines rotation of the video in degrees. Default value is 0. Can be 0, 90, 180, 270.\n///Angle will rotate only video box, controls will be in the same place.\nfinal double rotation;\n    \n///Defines function which will react on player visibility changed\nfinal Function(double visibilityFraction) playerVisibilityChangedBehavior;\n\n///Defines translations used in player. If null, then default english translations\n///will be used.\nfinal List<BetterPlayerTranslations> translations;\n\n///Defines if player should auto detect full screen device orientation based\n///on aspect ratio of the video. If aspect ratio of the video is < 1 then\n///video will played in full screen in portrait mode. If aspect ratio is >= 1\n///then video will be played horizontally. If this parameter is true, then\n///[deviceOrientationsOnFullScreen] and [fullScreenAspectRatio] value will be\n/// ignored.\nfinal bool autoDetectFullscreenDeviceOrientation;\n\n///Defines if player should auto detect full screen aspect ration of the video.\n///If [deviceOrientationsOnFullScreen] is true this is done automaticaly also.\nfinal bool autoDetectFullscreenAspectRatio;\n\n///Defines flag which enables/disables lifecycle handling (pause on app closed,\n///play on app resumed). Default value is true.\nfinal bool handleLifecycle;\n\n///Defines flag which enabled/disabled auto dispose on BetterPlayer dispose.\n///Default value is true.\nfinal bool autoDispose;\n\n///Flag which causes to player expand to fill all remaining space. Set to false\n///to use minimum constraints\nfinal bool expandToFill;\n\n///Flag which causes to player use the root navigator to open new pages.\n///Default value is false.\nfinal bool useRootNavigator;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage: Showing Video from URL with Aspect Ratio\nDESCRIPTION: This snippet illustrates how to display a video from a network URL within a Flutter widget, setting a specific aspect ratio. It initializes the Better Player with a network video source and configures the `aspectRatio` property to control the video's display ratio. The `BetterPlayerConfiguration` allows for customization of the player's behavior and appearance. The video URL is a placeholder from Google's common storage.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/basicusage.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"Example player\"),\n      ),\n      body: AspectRatio(\n        aspectRatio: 16 / 9,\n        child: BetterPlayer.network(\n          \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n          betterPlayerConfiguration: BetterPlayerConfiguration(\n            aspectRatio: 16 / 9,\n          ),\n        ),\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: BetterPlayerCacheConfiguration Properties (Dart)\nDESCRIPTION: This code snippet shows the properties available within the `BetterPlayerCacheConfiguration` class. These properties control various aspects of the cache, such as enabling/disabling the cache (`useCache`), setting maximum cache size (`maxCacheSize`), defining the maximum size of individual cached files (`maxCacheFileSize`), and providing a cache key for reusing cached data across app sessions (`key`). Note that some options are Android-specific.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/cacheconfiguration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n///Enable cache for network data source\nfinal bool useCache;\n\n/// The maximum cache size to keep on disk in bytes.\n/// Android only option.\nfinal int maxCacheSize;\n\n/// The maximum size of each individual file in bytes.\n/// Android only option.\nfinal int maxCacheFileSize;\n\n///Cache key to re-use same cached data between app sessions.\nfinal String? key;\n```\n\n----------------------------------------\n\nTITLE: Disabling PiP Mode in BetterPlayer (Dart)\nDESCRIPTION: This code demonstrates how to disable Picture-in-Picture (PiP) mode using the `disablePictureInPicture()` method of the `BetterPlayerController`. This function reverts the player to its previous state before PiP mode was enabled.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/pictureinpictureconfiguration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nbetterPlayerController.disablePictureInPicture();\n```\n\n----------------------------------------\n\nTITLE: Overriding Aspect Ratio in Dart\nDESCRIPTION: This code snippet shows how to override the `fit` parameter of a `BetterPlayerConfiguration` at runtime using the `setOverriddenFit` method. It uses `betterPlayerController` to set the aspect ratio to `BoxFit.contain`. This allows dynamic adjustments to the video's aspect ratio during playback.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/overriddenfit.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nbetterPlayerController.setOverriddenFit(BoxFit.contain);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fairplay DRM in Betterplayer - Dart\nDESCRIPTION: This snippet illustrates how to configure Fairplay DRM for a BetterPlayerDataSource. It sets the DRM type to 'fairplay' and includes the certificate and license URLs in the `drmConfiguration` parameter.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/drmconfiguration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nBetterPlayerDataSource _fairplayDataSource = BetterPlayerDataSource(\n    BetterPlayerDataSourceType.network,\n    Constants.fairplayHlsUrl,\n    drmConfiguration: BetterPlayerDrmConfiguration(\n        drmType: BetterPlayerDrmType.fairplay,\n        certificateUrl: Constants.fairplayCertificateUrl,\n        licenseUrl: Constants.fairplayLicenseUrl,\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ClearKey DRM in Betterplayer - Dart\nDESCRIPTION: This snippet shows how to configure ClearKey DRM for a BetterPlayerDataSource, which is supported only in Android.  It sets the DRM type to 'clearKey' and provides a map of key IDs to key values via `BetterPlayerClearKeyUtils.generate`.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/drmconfiguration.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar _clearKeyDataSourceFile = BetterPlayerDataSource(\n      BetterPlayerDataSourceType.file,\n      await Utils.getFileUrl(Constants.fileTestVideoEncryptUrl),\n      drmConfiguration: BetterPlayerDrmConfiguration(\n          drmType: BetterPlayerDrmType.clearKey,\n          clearKey: BetterPlayerClearKeyUtils.generate({\n            \"f3c5e0361e6654b28f8049c778b23946\":\n                \"a4631a153a443df9eed0593043db7519\",\n            \"abba271e8bcf552bbd2e86a434a9a5d9\":\n                \"69eaa802a6763af979e8d1940fb88392\"\n          })),\n    );\n```\n\n----------------------------------------\n\nTITLE: Add Better Player Dependency YAML\nDESCRIPTION: Adds the better_player dependency to the pubspec.yaml file. This step is crucial for including the package in your Flutter project.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/install.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  better_player: ^0.0.84\n```\n\n----------------------------------------\n\nTITLE: Import Better Player Dart\nDESCRIPTION: Imports the Better Player library into a Dart file. This allows you to use the classes and functions provided by the package within your Dart code.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/install.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:better_player/better_player.dart';\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Configuration XML\nDESCRIPTION: Configures the info.plist file in iOS to support full-screen rotation.  This snippet allows the Better Player to correctly rotate the screen to horizontal when full screen is enabled.  This is an optional step.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/install.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>UISupportedInterfaceOrientations</key>\n<array>\n   <string>UIInterfaceOrientationPortrait</string>\n   <string>UIInterfaceOrientationLandscapeLeft</string>\n   <string>UIInterfaceOrientationLandscapeRight</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: ClearKey DRM Configuration - XML\nDESCRIPTION: This XML defines the DRM configuration for a ClearKey protected MP4 file, specifying encryption details, key IDs, and key values.  It's used with MP4Box to encrypt the video.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/drmconfiguration.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<GPACDRM type=\"CENC AES-CTR\">\n  <DRMInfo type=\"pssh\" version=\"1\">\n    <BS ID128=\"1077efecc0b24d02ace33c1e52e2fb4b\"/>\n    <BS bits=\"32\" value=\"1\"/>\n    <BS ID128=\"cd7eb9ff88f34caeb06185b00024e4c2\"/>\n  </DRMInfo>\n  <CrypTrack IV_size=\"8\" first_IV=\"0xbb5738fe08f11341\" isEncrypted=\"1\" saiSavedBox=\"senc\" trackID=\"1\">\n    <key KID=\"f3c5e0361e6654b28f8049c778b23946\" value=\"a4631a153a443df9eed0593043db7519\"/>\n  </CrypTrack>\n   <CrypTrack IV_size=\"8\" first_IV=\"0xbb5738fe08f11341\" isEncrypted=\"1\" saiSavedBox=\"senc\" trackID=\"2\">\n    <key KID=\"f3c5e0361e6654b28f8049c778b23946\" value=\"a4631a153a443df9eed0593043db7519\"/>\n  </CrypTrack>\n\n</GPACDRM>\n\n```\n\n----------------------------------------\n\nTITLE: BetterPlayer Widget with GlobalKey (Dart)\nDESCRIPTION: This code snippet defines a `BetterPlayer` widget with an associated `GlobalKey`.  The `GlobalKey` is used to uniquely identify the `BetterPlayer` instance, which is necessary for enabling Picture-in-Picture (PiP) mode.  The `BetterPlayer` widget is wrapped in an `AspectRatio` widget to maintain the video's aspect ratio.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/pictureinpictureconfiguration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGlobalKey _betterPlayerKey = GlobalKey();\n...\n    AspectRatio(\n        aspectRatio: 16 / 9,\n        child: BetterPlayer(\n            controller: _betterPlayerController,\n            key: _betterPlayerKey,\n        ),\n    ),\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Package Bash\nDESCRIPTION: Installs the dependencies defined in the pubspec.yaml file using the flutter pub get command. This step downloads and integrates the Better Player package into the project.\nSOURCE: https://github.com/jhomlala/betterplayer/blob/master/docs/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub get\n```"
  }
]