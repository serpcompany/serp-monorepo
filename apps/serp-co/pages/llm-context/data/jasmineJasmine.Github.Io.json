[
  {
    "owner": "jasmine",
    "repo": "jasmine.github.io",
    "content": "TITLE: Testing Asynchronous Code with async/await in Jasmine\nDESCRIPTION: Using async/await for asynchronous testing in Jasmine. This approach leverages modern JavaScript syntax to write cleaner async tests, where Jasmine waits for the returned promise to resolve or reject before proceeding.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(async function() {\n  await someLongSetupFunction();\n});\n\nit('does a thing', async function() {\n  const result = await someAsyncFunction();\n  expect(result).toEqual(someExpectedValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Suite and Spec in Jasmine\nDESCRIPTION: Demonstrates how to create a test suite using 'describe' and a spec using 'it'. The spec contains an expectation that asserts true is true.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"A suite\", function() {\n    it(\"contains a spec with an expectation\", function() {\n        expect(true).toBe(true);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jasmine as a library in Node.js\nDESCRIPTION: Example of importing and initializing Jasmine as a library in a Node.js project for more granular control.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Jasmine = require('jasmine');\nconst runner = new Jasmine();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Async Matchers in Jasmine Tests\nDESCRIPTION: Shows how to use custom async matchers with expectAsync for testing promises, including passing expected parameters and using negation with the .not modifier in async test functions.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n    it(\"is available on an expectation\", async function() {\n        await expectAsync(Promise.resolve({\n            hyuk: 'gawrsh'\n        })).toBeResolvedToGoofy();\n    });\n\n    it(\"can take an 'expected' parameter\", async function() {\n        await expectAsync(Promise.resolve({\n            hyuk: 'gawrsh is fun'\n        })).toBeResolvedToGoofy(' is fun');\n    });\n\n    it(\"can be negated\", async function() {\n        await expectAsync(Promise.resolve({\n            hyuk: 'this is fun'\n        })).not.toBeResolvedToGoofy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Promise Rejections in Jasmine Tests\nDESCRIPTION: Handling failing promises in Jasmine tests. This demonstrates how rejected promises propagate failures to the current spec, allowing for proper error handling in asynchronous tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n  return somePromiseReturningFunction();\n});\n\nit('does a thing', function() {\n  // Since `.then` propagates rejections, this test will fail if\n  // the promise returned by asyncFunctionThatMightFail is rejected.\n  return asyncFunctionThatMightFail().then(function(value) {\n    // ...\n  });\n});\n\nfunction somePromiseReturningFunction() {\n  return new Promise(function(resolve, reject) {\n    if (everythingIsOk()) {\n      resolve();\n    } else {\n      reject();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Promises in Jasmine\nDESCRIPTION: Explicitly returning promises for asynchronous testing in Jasmine. This approach gives more control over the test flow, where Jasmine waits for the promise to resolve or reject before proceeding.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n  return new Promise(function(resolve, reject) {\n    // do something asynchronous\n    resolve();\n  });\n});\n\nit('does a thing', function() {\n  return someAsyncFunction().then(function (result) {\n    expect(result).toEqual(someExpectedValue);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Async Matchers in Jasmine\nDESCRIPTION: Shows the structure for creating custom async matchers that work with expectAsync. This defines a matcher that checks if a promise resolves to a specific value.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst customAsyncMatchers = {\n    toBeResolvedToGoofy: function (matchersUtil) {\n        return {\n```\n\n----------------------------------------\n\nTITLE: Initializing a Jasmine project\nDESCRIPTION: Command to initialize a Jasmine project, creating a spec directory and configuration file.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx jasmine init\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Asymmetric Equality Tester in JavaScript\nDESCRIPTION: Demonstrates how to create a custom asymmetric equality tester function that checks if a number is a multiple of another number. Includes implementation of required asymmetricMatch function and optional jasmineToString method for pretty printing.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_asymmetric_equality_testers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction multipleOf(number) {\n  return {\n    /*\n     * The asymmetricMatch function is required, and must return a boolean.\n     */\n    asymmetricMatch: function(compareTo) {\n      return compareTo % number === 0;\n    },\n\n    /*\n     * The jasmineToString method is used in the Jasmine pretty printer. Its\n     * return value will be seen by the user in the message when a test fails.\n     */\n    jasmineToString: function() {\n      return '<multipleOf: ' + number + '>';\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Matcher Factory in JavaScript for Jasmine\nDESCRIPTION: This snippet defines a custom matcher factory 'toBeGoofy' for use in Jasmine tests. It includes the matcher's comparison logic and custom failure messages.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst customMatchers = {\n    toBeGoofy: function (matchersUtil) {\n        return {\n            compare: function (actual, expected) {\n                if (expected === undefined) {\n                    expected = '';\n                }\n                const result = {\n                };\n                result.pass = matchersUtil.equals(actual.hyuk,\n                    \"gawrsh\" + expected);\n                if (result.pass) {\n                    result.message = \"Expected \" + actual +\n                        \" not to be quite so goofy\";\n                } else {\n                    result.message = \"Expected \" + actual +\n                        \" to be goofy, but it was not very goofy\";\n                }\n                return result;\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Async Function in IIFE for Callback-Style Jasmine Tests\nDESCRIPTION: Alternative solution that wraps an async function in an Immediately Invoked Function Expression (IIFE) to maintain callback-style testing with async/await functionality.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/010-mixed-style.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something', function(done) {\n  (async function () {\n    const something = await doSomethingAsync();\n    doSomethingElseAsync(something, function(result) {\n      expect(result).toBe(/*...*/);\n      done();\n    });\n  })();\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Unhandled Promise Rejection by Reordering Code in Jasmine Tests\nDESCRIPTION: This example shows how to properly handle promise rejections by ensuring a catch handler is attached before control returns to the runtime. By awaiting the rejected promise immediately and capturing the error before any other async operations, the rejection is properly handled.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/unhandled-rejection.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('causes an unhandled rejection', async function() {\n  const rejected = Promise.reject(new Error('nope'));\n  let rejection;\n  try {\n    await rejected;\n  } catch (e) {\n    rejection = e;\n  }\n  await somethingAsync();\n  // Do something with `rejection`\n});\n```\n\n----------------------------------------\n\nTITLE: Complete example of using Jasmine as a library\nDESCRIPTION: A simple example demonstrating how to use Jasmine as a library in a Node.js project, including configuration and execution.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst Jasmine = require('jasmine');\nconst runner = new Jasmine();\n\nrunner.loadConfigFile('spec/support/jasmine.json');\nrunner.configureDefaultReporter({\n    showColors: false\n});\nrunner.execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring jasmine-browser-runner for Rails with Webpacker\nDESCRIPTION: Configuration for jasmine-browser.mjs when using Jasmine with Rails and Webpacker, specifying directories for source and spec files.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  \"srcDir\": \".\",\n  \"srcFiles\": [],\n  \"specDir\": \"public/packs/js\",\n  \"specFiles\": [\n    \"specs-*.js\"\n  ],\n  \"helpers\": [],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher in Standard Equality Checks\nDESCRIPTION: Shows how to use custom asymmetric equality testers in standard Jasmine equality checks, both with simple values and nested within objects.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_asymmetric_equality_testers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(10).toEqual(multipleOf(5));\n\nexpect({ x: 3, y: 9 }).toEqual({ x: multipleOf(3), y: multipleOf(3) });\n```\n\n----------------------------------------\n\nTITLE: Jasmine Browser Runner Configuration\nDESCRIPTION: Configuration file for jasmine-browser-runner specifying source and spec directories, spec files, and browser settings.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"srcDir\": \"src\",\n  \"srcFiles\": [],\n  \"specDir\": \"dist\",\n  \"specFiles\": [\"test.js\"],\n  \"helpers\": [],\n  \"browser\": {\n    \"name\": \"firefox\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using jasmine.any for Flexible Argument Matching\nDESCRIPTION: This snippet shows how to use jasmine.any for more flexible argument matching in expectations. It demonstrates its use with both simple values and spy function arguments.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"jasmine.any\", function () {\n    it(\"matches any value\", function () {\n        expect({}).toEqual(jasmine.any(Object));\n        expect(12).toEqual(jasmine.any(Number));\n    });\n\n    describe(\"when used with a spy\", function () {\n        it(\"is useful for comparing arguments\", function () {\n            const foo = jasmine.createSpy('foo');\n            foo(12, function () {\n                return true;\n            });\n\n            expect(foo).toHaveBeenCalledWith(\n                jasmine.any(Number), jasmine.any(Function)\n            );\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with async/await in Jasmine\nDESCRIPTION: Error handling in async/await tests in Jasmine. This demonstrates how rejected promises or thrown errors automatically fail the test when using async/await syntax.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(async function() {\n  // Will fail if the promise returned by\n  // someAsyncFunction is rejected.\n  await someAsyncFunction();\n});\n\nit('does a thing', async function() {\n  // Will fail if doSomethingThatMightThrow throws.\n  doSomethingThatMightThrow();\n\n  // Will fail if the promise returned by\n  // asyncFunctionThatMightFail is rejected.\n  const value = await asyncFunctionThatMightFail();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using ES modules in browser-based Jasmine tests\nDESCRIPTION: For standalone or in-browser Jasmine setups, use the script tag with type=\"module\" attribute to load ES modules.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/general/esm.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n```\n\n----------------------------------------\n\nTITLE: Creating Getter and Setter Spies in Jasmine\nDESCRIPTION: This snippet demonstrates how to create spies for both getter and setter properties using spyOnProperty. It shows setting up a getter spy to return a specific value and a setter spy to call through to the original implementation.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/spying_on_properties.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"allows you to create spies for either type\", function() {\n  spyOnProperty(someObject, \"myValue\", \"get\").and.returnValue(30);\n  spyOnProperty(someObject, \"myValue\", \"set\").and.callThrough();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Object Formatter in Jasmine\nDESCRIPTION: This code defines a custom object formatter function for Sudoku cell objects. It formats the cell's entry and correct value into a readable string representation.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_object_formatters.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatCell(val) {\n    if (val.hasOwnProperty('entry') && val.hasOwnProperty('correctValue')) {\n        const entries = val.entry.pencil\n            ? 'pencil entries: ' + val.entry.numbers.join(',')\n            : 'entry: ' + val.entry.number;\n\n        return '<cell ' + entries + ', correct: ' + val.correctValue + '>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Testing in Jasmine Using async/await\nDESCRIPTION: Shows how to use async/await for asynchronous testing in Jasmine. The example demonstrates async functions in beforeEach and test specs, and how to use Promises for asynchronous operations.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Using async/await\", function () {\n    beforeEach(async function () {\n        await soon();\n        value = 0;\n    });\n\n    it(\"supports async execution of test preparation and expectations\",\n        async function () {\n            await soon();\n            value++;\n            expect(value).toBeGreaterThan(0);\n        }\n    );\n\n    function soon() {\n        return new Promise(function(resolve, reject) {\n            setTimeout(function() {\n                resolve();\n            }, 1);\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Fetch API in Jasmine Tests with Spies\nDESCRIPTION: Demonstrates how to test the loadThing function by creating Jasmine spies for fetch. The tests verify both the correct URL is called and that the response data is properly stored in the provided storage object.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/ajax.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('loadThing', function() {\n  it('fetches the correct URL', function() {\n    const fetch = jasmine.createSpy('fetch')\n      .and.returnValue(new Promise(function() {}));\n\n    loadThing(17, {}, fetch);\n\n    expect(fetch).toHaveBeenCalledWith('http://example.com/api/things/17');\n  });\n\n  it('stores the thing', function() {\n    const payload = {\n      id: 17,\n      name: 'the thing you requested'\n    };\n    const response = {\n      json: function() {\n        return payload;\n      }\n    };\n    const thingStore = {};\n    const fetch = jasmine.createSpy('fetch')\n      .and.returnValue(Promise.resolve(response));\n\n    loadThing(17, thingStore, fetch);\n\n    expect(thingStore[17]).toEqual(payload);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using jasmine.objectContaining for Partial Object Matching in JavaScript\nDESCRIPTION: Demonstrates how to use jasmine.objectContaining to match a subset of object properties in expectations. It shows usage with both regular objects and spy objects.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"jasmine.objectContaining\", function () {\n    it(\"matches objects with the expected key/value pairs\", function () {\n        expect({foo: \"bar\", baz: \"quux\"}).toEqual(jasmine.objectContaining({foo: \"bar\"}));\n        expect({foo: \"bar\", baz: \"quux\"}).not.toEqual(jasmine.objectContaining({foo: \"quux\"}));\n    });\n\n    describe(\"when used with a spy\", function () {\n        it(\"is useful for comparing arguments\", function () {\n            const callback = jasmine.createSpy('callback');\n\n            callback({\n                bar: \"baz\"\n            });\n\n            expect(callback).toHaveBeenCalledWith(\n                jasmine.objectContaining({bar: \"baz\"})\n            );\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Callbacks in Jasmine\nDESCRIPTION: Using callbacks for asynchronous testing in Jasmine. This approach is useful for testing callback-based code, where Jasmine passes a done function that must be called when asynchronous work is completed.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function(done) {\n  setTimeout(function() {\n    // do some stuff\n    done();\n  }, 100);\n});\n\n\nit('does a thing', function(done) {\n  someAsyncFunction(function(result) {\n    expect(result).toEqual(someExpectedValue);\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting describe Blocks in Jasmine Tests\nDESCRIPTION: Shows how to nest describe blocks to organize tests hierarchically. The example demonstrates how beforeEach and afterEach functions are executed in order and how variables in different scopes can be accessed.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"A spec\", function() {\n    let foo;\n\n    beforeEach(function() {\n        foo = 0;\n        foo += 1;\n    });\n\n    afterEach(function() {\n        foo = 0;\n    });\n\n    it(\"is just a function, so it can contain any code\", function() {\n        expect(foo).toEqual(1);\n    });\n\n    it(\"can have more than one expectation\", function() {\n        expect(foo).toEqual(1);\n        expect(true).toEqual(true);\n    });\n\n    describe(\"nested inside a second describe\", function() {\n        let bar;\n\n        beforeEach(function() {\n            bar = 1;\n        });\n\n        it(\"can reference both scopes as needed\", function() {\n            expect(foo).toEqual(bar);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts for Running React Tests\nDESCRIPTION: JSON configuration for package.json scripts section to build and run tests using jasmine-browser-runner.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n    \"test:build\": \"cross-env NODE_ENV=test npx webpack --config webpack-test.config.js --mode development\",\n    \"test:watch\": \"cross-env NODE_ENV=test npx webpack --config webpack-test.config.js --mode development --watch\",\n    \"test\": \"npm run test:build && jasmine-browser-runner runSpecs\",\n    \"test:serve\": \"npm run test:build && jasmine-browser-runner\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Equality Testers in Jasmine Specs\nDESCRIPTION: This snippet demonstrates how to use custom equality testers in Jasmine test specifications. It includes examples of equality and inequality checks, as well as nested equality tests using the custom tester.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_equality.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('is equal using a custom tester', function () {\n  expect('abc').toEqual(' a ');\n});\n\nit('is not equal using a custom tester', function () {\n  expect('abc').not.toEqual('abc');\n});\n\nit('works even in nested equality tests', function () {\n  expect(['abc', '123'].toEqual([' a ', ' 1 ']);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Object Formatter in Jasmine\nDESCRIPTION: This snippet shows how to register a custom object formatter in Jasmine using the beforeEach function. This allows Jasmine to use the formatter in failure messages.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_object_formatters.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n    jasmine.addCustomObjectFormatter(formatCell);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jasmine Clock for Time-Dependent Testing in JavaScript\nDESCRIPTION: Shows how to use the Jasmine Clock to control time in tests. It covers installation, mocking of setTimeout and setInterval, and mocking the Date object for time-dependent testing scenarios.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Manually ticking the Jasmine Clock\", function () {\n    let timerCallback;\n\n    beforeEach(function () {\n        timerCallback = jasmine.createSpy(\"timerCallback\");\n        jasmine.clock().install();\n    });\n\n    afterEach(function () {\n        jasmine.clock().uninstall();\n    });\n\n    it(\"causes a timeout to be called synchronously\", function () {\n        setTimeout(function () {\n            timerCallback();\n        }, 100);\n\n        expect(timerCallback).not.toHaveBeenCalled();\n\n        jasmine.clock().tick(101);\n\n        expect(timerCallback).toHaveBeenCalled();\n    });\n\n    it(\"causes an interval to be called synchronously\", function () {\n        setInterval(function () {\n            timerCallback();\n        }, 100);\n\n        expect(timerCallback).not.toHaveBeenCalled();\n\n        jasmine.clock().tick(101);\n        expect(timerCallback.calls.count()).toEqual(1);\n\n        jasmine.clock().tick(50);\n        expect(timerCallback.calls.count()).toEqual(1);\n\n        jasmine.clock().tick(50);\n        expect(timerCallback.calls.count()).toEqual(2);\n    });\n\n    describe(\"Mocking the Date object\", function () {\n        it(\"mocks the Date object and sets it to a given time\", function () {\n            const baseTime = new Date(2013, 9, 23);\n\n            jasmine.clock().mockDate(baseTime);\n\n            jasmine.clock().tick(50);\n            expect(new Date().getTime()).toEqual(baseTime.getTime() + 50);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration for React Applications\nDESCRIPTION: Sample Webpack configuration file typically used for React applications, showing entry point, output configuration, plugins, module resolution, and loader configuration.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"bundle.[hash].js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./src/index.html\",\n    }),\n  ],\n  resolve: {\n    modules: [__dirname, \"src\", \"node_modules\"],\n    extensions: [\"*\", \".js\", \".jsx\", \".tsx\", \".ts\"],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: require.resolve(\"babel-loader\"),\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.png|svg|jpg|gif$/,\n        use: [\"file-loader\"],\n      }, \n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Bare Spies with jasmine.createSpy\nDESCRIPTION: This snippet shows how to create a 'bare' spy using jasmine.createSpy when there's no existing function to spy on. It demonstrates tracking calls and arguments.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"A spy, when created manually\", function() {\n    let whatAmI;\n\n    beforeEach(function() {\n        whatAmI = jasmine.createSpy('whatAmI');\n\n        whatAmI(\"I\", \"am\", \"a\", \"spy\");\n    });\n\n    it(\"tracks that the spy was called\", function() {\n        expect(whatAmI).toHaveBeenCalled();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeEach in Jasmine\nDESCRIPTION: Shows how to use the 'beforeEach' function to run setup code before each spec in a suite.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    beforeEach(function() {\n        foo += 1;\n    });\n```\n\n----------------------------------------\n\nTITLE: Test-Specific Webpack Configuration for React Testing\nDESCRIPTION: Webpack configuration file customized for testing React applications, using glob to find spec files and configuring output for jasmine-browser-runner.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\nconst glob = require(\"glob\");\n\nmodule.exports = {\n  entry: glob.sync(\"spec/**/*Spec.js?(x)\"),\n  output: {\n    filename: \"test.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  plugins: [],\n  resolve: {\n    modules: [__dirname, \"src\", \"node_modules\"],\n    extensions: [\"*\", \".js\", \".jsx\", \".tsx\", \".ts\"],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: require.resolve(\"babel-loader\"),\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.png|svg|jpg|gif$/,\n        use: [\"file-loader\"],\n      }, \n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using jasmine.stringMatching for Partial String Matching in JavaScript\nDESCRIPTION: Illustrates how to use jasmine.stringMatching to match strings using regular expressions or substrings. It shows usage with both regular strings and spy objects.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('jasmine.stringMatching', function () {\n    it(\"matches as a regexp\", function () {\n        expect({foo: 'bar'}).toEqual({\n            foo: jasmine.stringMatching(/^bar$/)\n        });\n        expect({foo: 'foobarbaz'}).toEqual({\n            foo: jasmine.stringMatching('bar')\n        });\n    });\n\n    describe(\"when used with a spy\", function () {\n        it(\"is useful for comparing arguments\", function () {\n            const callback = jasmine.createSpy('callback');\n\n            callback('foobarbaz');\n\n            expect(callback).toHaveBeenCalledWith(\n                jasmine.stringMatching('bar')\n            );\n            expect(callback).not.toHaveBeenCalledWith(\n                jasmine.stringMatching(/^bar$/)\n            );\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using jasmine.arrayContaining for Partial Array Matching in JavaScript\nDESCRIPTION: Shows how to use jasmine.arrayContaining to match a subset of array elements in expectations. It demonstrates usage with both regular arrays and spy objects.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"jasmine.arrayContaining\", function () {\n    let foo;\n\n    beforeEach(function () {\n        foo = [1, 2, 3, 4];\n    });\n\n    it(\"matches arrays with some of the values\", function () {\n        expect(foo).toEqual(jasmine.arrayContaining([3, 1]));\n        expect(foo).not.toEqual(jasmine.arrayContaining([6]));\n    });\n\n    describe(\"when used with a spy\", function () {\n        it(\"is useful when comparing arguments\", function () {\n            const callback = jasmine.createSpy('callback');\n\n            callback([1, 2, 3, 4]);\n\n            expect(callback).toHaveBeenCalledWith(\n                jasmine.arrayContaining([4, 2, 3])\n            );\n            expect(callback).not.toHaveBeenCalledWith(\n                jasmine.arrayContaining([5, 2])\n            );\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for React Automatic Runtime in Webpack\nDESCRIPTION: Webpack configuration diff showing how to add Babel options for automatic React runtime, which automatically imports React in JSX files.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n         test: /\\.jsx?$/,\n         exclude: /node_modules/,\n         loader: require.resolve(\"babel-loader\"),\n+        options: {\n+          customize: require.resolve('babel-preset-react-app/webpack-overrides'),\n+          presets: [\n+            [\n+              require.resolve('babel-preset-react-app'),\n+              { runtime: 'automatic' }\n+            ],\n+          ],\n+        },\n       },\n       {\n         test: /\\.css$/,\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Async Matchers in Jasmine\nDESCRIPTION: Demonstrates how to register custom async matchers using jasmine.addAsyncMatchers() in a beforeEach block, making them available for all async test cases in the describe block.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n    beforeEach(function() {\n        jasmine.addAsyncMatchers(customAsyncMatchers);\n    });\n```\n\n----------------------------------------\n\nTITLE: Using jasmine.objectContaining for Partial Object Matching\nDESCRIPTION: This snippet shows how to use jasmine.objectContaining for partial object matching in expectations. It demonstrates matching objects with specific key/value pairs while ignoring others.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"jasmine.objectContaining\", function () {\n    let foo;\n\n    beforeEach(function () {\n        foo = {\n            a: 1,\n            b: 2,\n            bar: \"baz\"\n        };\n    });\n\n    it(\"matches objects with the expect key/value pairs\", function () {\n        expect(foo).toEqual(jasmine.objectContaining({\n            bar: \"baz\"\n        }));\n        expect(foo).not.toEqual(jasmine.objectContaining({\n            c: 37\n        }));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Import Handler\nDESCRIPTION: Helper script to handle CSS and image imports in Node environment.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_node.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'ignore-styles';\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Properties Using Inline Loops in Jasmine\nDESCRIPTION: Demonstrates how to test multiple similar properties using a for loop within a describe block to avoid duplicate specs. Tests numeric property getters for an Element class.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/sharing_behaviors.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Element', function() {\n  beforeEach(function() {\n    this.subject = new Element();\n  });\n\n  for (const name of ['x', 'y', 'width', 'height']) {\n    describe(name, function() {\n      it('returns a number', function() {\n        expect(typeof this.subject[name]()).toBe('number');\n      });\n    });\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Spies in Jasmine Tests\nDESCRIPTION: This snippet demonstrates how to create a spy on a function, invoke it with different arguments, and use matchers to verify its behavior.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"A spy\", function() {\n    let foo;\n    let bar = null;\n\n    beforeEach(function() {\n        foo = {\n            setBar: function (value) {\n                bar = value;\n            }\n        };\n\n        spyOn(foo, 'setBar');\n\n        foo.setBar(123);\n        foo.setBar(456, 'another param');\n    });\n\n    it(\"tracks that the spy was called\", function() {\n        expect(foo.setBar).toHaveBeenCalled();\n    });\n\n    it(\"tracks that the spy was called x times\", function() {\n        expect(foo.setBar).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"tracks all the arguments of its calls\", function() {\n        expect(foo.setBar).toHaveBeenCalledWith(123);\n        expect(foo.setBar).toHaveBeenCalledWith(456, 'another param');\n    });\n\n    it(\"tracks if it was called at all\", function() {\n        foo.setBar();\n\n        expect(foo.setBar.calls.any()).toEqual(true);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: JSDOM Setup Helper\nDESCRIPTION: Helper script to set up a simulated browser environment using jsdom.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_node.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {JSDOM} from 'jsdom';\n\nconst dom = new JSDOM('<html><body></body></html>');\nglobal.document = dom.window.document;\nglobal.window = dom.window;\nglobal.navigator = dom.window.navigator;\n```\n\n----------------------------------------\n\nTITLE: Using withContext in Jasmine Expectations\nDESCRIPTION: This snippet demonstrates how to use the withContext method to add extra context to Jasmine matcher failure messages. It improves the clarity of failure messages by associating each expectation with a descriptive context.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/testing/with-context.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('has multiple expectations with some context', function() {\n  expect(munge()).withContext('munge').toEqual(1);\n  expect(spindle()).withContext('spindle').toEqual(2);\n  expect(frobnicate()).withContext('frobnicate').toEqual(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Result Object for Custom Async Matchers\nDESCRIPTION: Demonstrates how to create the result object for custom async matchers, including setting the pass property and providing appropriate success and failure messages.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n                    const result = {\n                    };\n\n                    result.pass = matchersUtil.equals(actual.hyuk,\n                        \"gawrsh\" + expected);\n\n                    if (result.pass) {\n                        result.message = \"Expected a promise not to resolve \" +\n                            \"to something quite so goofy\";\n                    } else {\n                        result.message = \"Expected a promise to resolve \" +\n                            \"to something goofy, but it was not very goofy\";\n                    }\n\n                    return result;\n                });\n            }\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matchers in Jasmine Tests\nDESCRIPTION: Demonstrates how to use custom matchers in test cases, including passing expected parameters and using negation with the .not modifier.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"is available on an expectation\", function() {\n        expect({\n            hyuk: 'gawrsh'\n        }).toBeGoofy();\n    });\n\n    it(\"can take an 'expected' parameter\", function() {\n        expect({\n            hyuk: 'gawrsh is fun'\n        }).toBeGoofy(' is fun');\n    });\n\n    it(\"can be negated\", function() {\n        expect({\n            hyuk: 'this is fun'\n        }).not.toBeGoofy();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using jasmine.anything for Non-null Argument Matching\nDESCRIPTION: This snippet demonstrates the use of jasmine.anything to match any non-null and non-undefined value in expectations. It shows its application with both simple values and spy function arguments.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"jasmine.anything\", function () {\n    it(\"matches anything\", function () {\n        expect(1).toEqual(jasmine.anything());\n    });\n\n    describe(\"when used with a spy\", function () {\n        it(\"is useful when the argument can be ignored\", function () {\n            const foo = jasmine.createSpy('foo');\n            foo(12, function () {\n                return false;\n            });\n\n            expect(foo).toHaveBeenCalledWith(12, jasmine.anything());\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Promise from Compare Function in Async Matchers\nDESCRIPTION: Shows how to return a promise from the compare function in an async matcher. The promise should resolve to the matcher result object.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n                return actualPromise.then(function (actual) {\n```\n\n----------------------------------------\n\nTITLE: Creating Describe Block for Custom Async Matchers\nDESCRIPTION: Shows how to create a describe block for testing custom async matchers, setting up the structure for testing their functionality.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Custom async matcher: 'toBeResolvedToGoofy'\", function() {\n```\n\n----------------------------------------\n\nTITLE: Using Jasmine's Mock Clock for Synchronous Testing of Time-dependent Code\nDESCRIPTION: Using Jasmine's mock clock to test time-dependent asynchronous code synchronously. This approach makes tests more deterministic and faster by controlling the passage of time programmatically.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomethingLater(callback) {\n  setTimeout(function() {\n    callback(12345);\n  }, 10000);\n}\n\ndescribe('doSomethingLater', function() {\n  beforeEach(function() {\n    jasmine.clock().install();\n  });\n\n  afterEach(function() {\n    jasmine.clock().uninstall();\n  });\n\n  it('does something after 10 seconds', function() {\n    const callback = jasmine.createSpy('callback');\n    doSomethingLater(callback);\n    jasmine.clock().tick(10000);\n    expect(callback).toHaveBeenCalledWith(12345);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Input Validation for Custom Async Matchers\nDESCRIPTION: Demonstrates how to validate inputs for custom async matchers, ensuring that actualPromise is actually a promise and providing default values for expected parameters.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n                if (!actualPromise ||\n                        typeof actualPromise.then !== 'function') {\n                    throw new Error(\n                        'Expected toBeResolvedToGoofy to be called on ' +\n                        'a promise.'\n                    );\n                }\n\n                if (expected === undefined) {\n                    expected = '';\n                }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher in Jasmine Test Suite\nDESCRIPTION: This snippet shows how to set up a Jasmine test suite that uses the custom 'toBeGoofy' matcher. It demonstrates the registration of the custom matcher.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Custom matcher: 'toBeGoofy'\", function() {\n```\n\n----------------------------------------\n\nTITLE: Writing Reliable Async Tests Using async/await in JavaScript\nDESCRIPTION: This snippet shows the recommended approach for writing asynchronous tests using async/await syntax. This method is more readable and less error-prone than using callbacks.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/002-late-failure.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('signals completion at the right time', async function() {\n  await doSomethingAsync();\n  doSomethingThatThrows();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Callback Failures in Jasmine with done.fail()\nDESCRIPTION: Handling failures in callback-based Jasmine tests using done.fail(). This demonstrates how to explicitly fail a test when using the callback approach for asynchronous testing.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/async.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function(done) {\n  setTimeout(function() {\n    try {\n      riskyThing();\n      done();\n    } catch (e) {\n      done.fail(e);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Compare Function for Custom Async Matchers\nDESCRIPTION: Shows the signature of the compare function that should be implemented for custom async matchers. This function should return a promise that resolves to the matcher result.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n            compare: function (actualPromise, expected) {\n```\n\n----------------------------------------\n\nTITLE: Adding a custom reporter to Jasmine\nDESCRIPTION: Example of adding a custom reporter to Jasmine when using it as a library.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomReporter = require('./myCustomReporter');\n\nrunner.addReporter(new CustomReporter());\n```\n\n----------------------------------------\n\nTITLE: Changing Spy Strategy with Object.getOwnPropertyDescriptor in Jasmine\nDESCRIPTION: This snippet illustrates an alternative method to change a property spy's strategy using Object.getOwnPropertyDescriptor. It's useful when saving a reference to the spy is not convenient.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/spying_on_properties.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n  spyOnProperty(someObject, \"myValue\", \"get\").and.returnValue(1);\n});\n\nit(\"lets you change the spy strategy later\", function() {\n  Object.getOwnPropertyDescriptor(someObject, \"myValue\").get.and.returnValue(3);\n  expect(someObject.myValue).toEqual(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Matchers in Jasmine\nDESCRIPTION: Shows how to register custom matchers using jasmine.addMatchers() in a beforeEach block, making them available for all test cases in the describe block.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_matchers.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n        jasmine.addMatchers(customMatchers);\n    });\n```\n\n----------------------------------------\n\nTITLE: Async/Await Testing with Promise Conversion in Jasmine\nDESCRIPTION: The recommended approach using async/await syntax with a promisified callback. This implementation is more readable and handles errors automatically when promises reject.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/001-preferred-style.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('finishes and reports errors reliably', async function() {\n  const result = await new Promise(function(resolve, reject) {\n    // If an exception is thrown from here, it will be caught by the Promise\n    // constructor and turned into a rejection, which will fail the spec.\n    doSomethingAsync(resolve);\n  });\n\n  expect(result.things.length).toEqual(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Spy Strategy with Reference in Jasmine\nDESCRIPTION: This example shows how to save a reference to a property spy and change its strategy later in the test. It demonstrates creating a getter spy in a beforeEach block and modifying its return value in a subsequent test.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/spying_on_properties.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n  this.propertySpy = spyOnProperty(someObject, \"myValue\", \"get\").and.returnValue(1);\n});\n\nit(\"lets you change the spy strategy later\", function() {\n  this.propertySpy.and.returnValue(3);\n  expect(someObject.myValue).toEqual(3);\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Test Implementation\nDESCRIPTION: Test implementation for TypeScript module mocking using Jasmine spies.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"jasmine\";\nimport {quote} from '../src/aModule';\nimport * as anotherModule from '../src/anotherModule';\n\ndescribe('aModule', function() {\n    describe('quote', function() {\n        it('quotes the string returned by theString', function() {\n            spyOn(anotherModule, 'theString').and.returnValue('a more different string');\n            expect(quote()).toEqual('\"a more different string\"');\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Stubbing AJAX Request with Immediate Response\nDESCRIPTION: Shows how to stub an AJAX request to a specific URL and configure its immediate response using jasmine.Ajax.stubRequest()\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njasmine.Ajax.stubRequest('/another/url').andReturn({\n    \"responseText\": 'immediate response'\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Code with Promise.race in Jasmine\nDESCRIPTION: This code demonstrates how to test code that signals success and failure through different channels by converting both signals to promises and using Promise.race. The example shows a DataLoader class and a corresponding Jasmine spec that handles both success and error callbacks, waiting for whichever resolves first.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/011-really-separate-channels.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in DataLoader.js\nclass DataLoader {\n  constructor(fetch) {\n    // ...\n  }\n\n  subscribe(subscriber) {\n    // ...\n  }\n\n  onError(errorSubscriber) {\n    // ...\n  }\n\n  load() {\n    // ...\n  }\n}\n\n// in DataLoaderSpec.js\nit('provides the fetched data to observers', async function() {\n  const fetch = function() {\n    return Promise.resolve(/*...*/); \n  };\n  let resolveSubscriberPromise, rejectErrorPromise;\n  const subscriberPromise = new Promise(function(resolve) {\n    resolveSubscriberPromise = resolve;\n  });\n  const errorPromise = new Promise(function(resolve, reject) {\n    rejectErrorPromise = reject;\n  });\n  const subject = new DataLoader(fetch);\n\n  subject.subscribe(resolveSubscriberPromise);\n  subject.onError(rejectErrorPromise);\n  const result = await Promise.race([subscriberPromise, errorPromise]);\n\n  expect(result).toEqual(/*...*/); \n});\n```\n\n----------------------------------------\n\nTITLE: ES Module Source Implementation\nDESCRIPTION: Example of a source ES module that exports a simple string function.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function theString() {\n    return 'the string';\n}\n```\n\n----------------------------------------\n\nTITLE: Using afterAll in Jasmine\nDESCRIPTION: Demonstrates the use of 'afterAll' to run teardown code once after all specs in a suite have finished.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n    afterAll(function() {\n        foo = 0;\n    });\n```\n\n----------------------------------------\n\nTITLE: Jasmine Configuration\nDESCRIPTION: Configuration for Jasmine test runner specifying helper and spec file patterns.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_node.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"helpers\": [\n  \"helpers/babel.js\",\n  \"helpers/**/*.js\"\n],\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"spec_dir\": \"src\",\n  \"spec_files\": [\n    \"**/*.test.*\"\n  ],\n  \"helpers\": [\n    \"../spec/helpers/babel.js\",\n    \"../spec/helpers/**/*.js\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: ES Module Mock Implementation\nDESCRIPTION: Mock implementation of an ES module using Jasmine spies with cleanup after each test.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport let theString = jasmine.createSpy('theString');\n\nafterEach(function() {\n    theString = jasmine.createSpy('theString');\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Code that Causes an Unhandled Promise Rejection in Jasmine\nDESCRIPTION: This code demonstrates how a promise rejection becomes unhandled when control returns to the JavaScript runtime before a rejection handler is attached. The await somethingAsync() call returns control to the runtime, which triggers the unhandled rejection before the try/catch block executes.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/unhandled-rejection.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('causes an unhandled rejection', async function() {\n  const rejected = Promise.reject(new Error('nope'));\n  await somethingAsync();\n  try {\n    await rejected;\n  } catch (e) {\n    // Do something with the error\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parallel Runner for Programmatic Usage\nDESCRIPTION: Example demonstrating how to use the ParallelRunner class to run Jasmine specs in parallel programmatically with configuration options.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/running_specs_in_parallel.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ParallelRunner = require('jasmine/parallel');\nconst runner = new ParallelRunner({numWorkers: 3});\nrunner.loadConfigFile('spec/support/jasmine.json');\nrunner.execute();\n```\n\n----------------------------------------\n\nTITLE: Mocking CommonJS Modules with Testdouble.js\nDESCRIPTION: Demonstrates how to mock Node.js CommonJS modules using Testdouble.js in Jasmine tests. Shows module replacement and test setup/teardown pattern.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst td = require('testdouble');\n\ndescribe('aModule', function() {\n    beforeEach(function () {\n        this.anotherModule = td.replace('../anotherModule.js');\n        this.subject = require('../aModule.js');\n    });\n\n    afterEach(function () {\n        td.reset();\n    });\n\n    describe('quote', function () {\n        it('quotes the string returned by theString', function () {\n            td.when(this.anotherModule.theString()).thenReturn('a more different string');\n            expect(this.subject.quote()).toEqual('\"a more different string\"');\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeAll in Jasmine\nDESCRIPTION: Shows how to use 'beforeAll' to run setup code once before all specs in a suite.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n    beforeAll(function() {\n        foo = 1;\n    });\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Test Implementation\nDESCRIPTION: Test implementation for CommonJS module mocking using Jasmine spies.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherModule = require('../anotherModule');\nconst subject = require('../aModule');\n\ndescribe('aModule', function() {\n    describe('quote', function () {\n        it('quotes the string returned by theString', function () {\n            spyOn(anotherModule, 'theString').and.returnValue('a more different string');\n            expect(anotherModule.theString()).toEqual('a more different string');\n            expect(subject.quote()).toEqual('\"a more different string\"');\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Module Mocking Workaround for Angular\nDESCRIPTION: Shows a workaround pattern for mocking modules in Angular by using a wrapper object that can be controlled in tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// foo.js\nconst wrapper = {\n    foo() { /* ... */ }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// bar.js\nimport fooWrapper from './foo.js';\n//...\nfooWrapper.foo();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// bar.spec.js\nimport fooWrapper from '../path/to/foo.js';\nimport bar from '../path/to/bar.js';\n// ...\nit('can mock foo', function() {\n    spyOn(fooWrapper, 'foo').and.callFake(function() { /*... */ });\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Suites in Jasmine with xdescribe\nDESCRIPTION: Shows how to use xdescribe to disable a suite of tests. When xdescribe is used, the tests in that suite are skipped and marked as pending in the results.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nxdescribe(\"A spec\", function() {\n    let foo;\n\n    beforeEach(function() {\n        foo = 0;\n        foo += 1;\n    });\n\n    it(\"is just a function, so it can contain any code\", function() {\n        expect(foo).toEqual(1);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Callback Arguments with Variable in JavaScript\nDESCRIPTION: This snippet demonstrates how to test arguments passed to an async callback by saving the received data to a variable and asserting its value after the asynchronous operation completes.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/callback-assertions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"calls the onData callback with the expected args\", async function() {\n  const subject = new DataFetcher();\n  let receivedData;\n  subject.onData(function(data) {\n    receivedData = data;\n  });\n\n  await subject.fetch();\n\n  expect(receivedData).toEqual(expectedData);\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Implementation\nDESCRIPTION: TypeScript module implementation with ES6 import syntax.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {theString} from './anotherModule';\n\nexport function quote() {\n    return '\"' + theString() + '\"';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fetch-based API Client with Dependency Injection in JavaScript\nDESCRIPTION: Defines a loadThing function that uses fetch to retrieve data from an API endpoint and store it in a provided storage object. The function accepts the HTTP client as a parameter to facilitate mocking in tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/ajax.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function loadThing(thingId, thingStore, fetch) {\n  const url = `http://example.com/api/things/{id}`;\n  const response = await fetch(url);\n  thingStore[thingId] = response.json();\n}\n\n// somewhere else\nawait loadThing(thingId, thingStore, fetch);\n```\n\n----------------------------------------\n\nTITLE: Using Jasmine AJAX withMock Function\nDESCRIPTION: Shows how to use jasmine.Ajax.withMock() for isolated AJAX mocking within a single test spec, including request stubbing and response verification.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"allows use in a single spec\", function() {\n    const doneFn = jasmine.createSpy('success');\n    jasmine.Ajax.withMock(function() {\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function(args) {\n            if (this.readyState == this.DONE) {\n                doneFn(this.responseText);\n            }\n        };\n\n        xhr.open(\"GET\", \"/some/cool/url\");\n        xhr.send();\n\n        expect(doneFn).not.toHaveBeenCalled();\n\n        jasmine.Ajax.requests.mostRecent().respondWith({\n            \"status\": 200,\n            \"responseText\": 'in spec response'\n        });\n\n        expect(doneFn).toHaveBeenCalledWith('in spec response');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Implementation\nDESCRIPTION: Example of a CommonJS module implementation with non-destructured imports.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherModule = require('./anotherModule.js');\n\nfunction quote() {\n    return '\"' + anotherModule.theString() + '\"';\n}\n\nmodule.exports = { quote };\n```\n\n----------------------------------------\n\nTITLE: Making XMLHttpRequest with Response Handling\nDESCRIPTION: Demonstrates creating and sending an XMLHttpRequest with readyState handling and response processing using a callback function.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(args) {\n    if (this.readyState == this.DONE) {\n        doneFn(this.responseText);\n    }\n};\n\nxhr.open(\"GET\", \"/another/url\");\nxhr.send();\n\nexpect(doneFn).toHaveBeenCalledWith('immediate response');\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Response\nDESCRIPTION: Shows how to configure the mock response including status code, content type, and response text\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njasmine.Ajax.requests.mostRecent().respondWith({\n    \"status\": 200,\n    \"contentType\": 'text/plain',\n    \"responseText\": 'awesome response'\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking ES Modules with Testdouble.js\nDESCRIPTION: Demonstrates how to mock ES modules using Testdouble.js loader in Node.js, utilizing async/await for module loading.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as td from 'testdouble';\n\ndescribe('aModule', function() {\n    beforeEach(async function () {\n        this.anotherModule = await td.replaceEsm('../anotherModule.js');\n        this.subject = await import('../aModule.js');\n    });\n\n    afterEach(function () {\n        td.reset();\n    });\n\n    describe('quote', function () {\n        it('quotes the string returned by theString', function () {\n            td.when(this.anotherModule.theString()).thenReturn('a more different string');\n            expect(this.subject.quote()).toEqual('\"a more different string\"');\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Callback to Promise in Jasmine Async Tests\nDESCRIPTION: Solution pattern that converts callback-based code to a promise-based approach, allowing proper use of async/await in Jasmine tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/010-mixed-style.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something', async function(/* Note: no done param */) {\n  const something = await doSomethingAsync();\n  const result = await new Promise(function(resolve, reject) {\n    doSomethingElseAsync(something, function(r) {\n      resolve(r);\n    });\n  });\n  expect(result).toBe(/*...*/);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up jasmine-ajax Test Suite\nDESCRIPTION: Initializes a test suite for demonstrating AJAX mocking functionality using jasmine-ajax\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"mocking ajax\", function() { \n```\n\n----------------------------------------\n\nTITLE: Mocking CommonJS Modules with Jasmine Spies\nDESCRIPTION: Shows how to use Jasmine spies instead of Testdouble.js for mocking modules while still using Testdouble's module replacement feature.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst td = require('testdouble');\n\ndescribe('aModule', function() {\n    beforeEach(function () {\n        this.anotherModule = td.replace(\n            '../anotherModule.js',\n            {theString: jasmine.createSpy('anotherModule.theString')}\n        );\n        this.subject = require('../aModule.js');\n    });\n\n    afterEach(function () {\n        td.reset();\n    });\n\n    describe('quote', function () {\n        it('quotes the string returned by theString', function () {\n            this.anotherModule.theString.and.returnValue('a more different string');\n            expect(this.subject.quote()).toEqual('\"a more different string\"');\n            expect(this.anotherModule.theString).toHaveBeenCalled();\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Jasmine Tests: Stack Trace Best Practices\nDESCRIPTION: This code demonstrates the difference between throwing/rejecting with string values versus Error objects in Jasmine tests. When non-Error values are used, Jasmine cannot display stack traces. The recommended approach is to always use Error objects to ensure stack trace information is available for debugging.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/testing/no-stack-trace.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// NOT RECOMMENDED\ndescribe('Failures that will not have stack traces', function() {\n  it('throws a non-Error', function() {\n    throw 'nope';\n  });\n\n  it('rejects with a non-Error', function() {\n    return Promise.reject('nope');\n  });\n});\n\n// RECOMMENDED\ndescribe('Failures that will have stack traces', function() {\n  it('throws an Error', function() {\n    throw new Error('nope');\n  });\n\n  it('rejects with an Error', function() {\n    return Promise.reject(new Error('nope'));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Object Types in Environment-Dependent Jasmine Tests\nDESCRIPTION: Shows how to safely determine if an object is an instance of a type that might not exist in all environments. These methods are used internally by Jasmine to handle environment-specific feature detection.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/contrib/optional-browser-features.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nisFunction_: function(value) { return typeof value === 'function'; },\n\nisAsyncFunction_: function(value) {\n  return Object.prototype.toString.call(value) === '[object AsyncFunction]';\n},\n\nisGeneratorFunction_: function(value) {\n  return Object.prototype.toString.call(value) === '[object GeneratorFunction]';\n},\n\nisTypedArray_: function(value) {\n  return ArrayBuffer.isView(value) && !(value instanceof DataView);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Async UI with Immediate Resolution in Jasmine\nDESCRIPTION: Demonstrates testing a React component that fetches data asynchronously by forcing immediate resolution of promises. Uses enzyme and jasmine-enzyme for component mounting and assertions. The approach awaits a resolved promise to ensure component updates are processed.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/await-ui.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('When data is fetched', () => {\n  it('renders the data list with the result', async () => {\n    const payload = [/*...*/];\n    const apiClient = {\n      getData: () => Promise.resolve(payload);\n    };\n\n    // Render the component under test\n    const subject = mount(<DataLoader apiClient={apiClient} />);\n    \n    // Wait until after anything that's already queued\n    await Promise.resolve();\n    subject.update();\n\n    const dataList = subject.find(DataList);\n    expect(dataList).toExist();\n    expect(dataList).toHaveProp('data', payload);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach for Test Setup in Jasmine\nDESCRIPTION: This example shows the recommended pattern for structuring test setup in Jasmine, using helper functions to encapsulate common setup logic. This approach keeps the setup flow control straightforward by ensuring each part happens after all the setup it depends on.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/testing/let.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('When the user is logged in', function() {\n  it('does some things that apply to any user', function() {\n    logIn(MyFixtures.anyUser);\n    // ...\n  });\n\n  describe('as an admin', function() {\n    beforeEach(function() {\n      logIn(MyFixtures.adminUser);\n    });\n\n    it('shows the admin controls', function() {\n      // ...\n    });\n  });\n\n  describe('as a non-admin', function() {\n    beforeEach(function() {\n      logIn(MyFixtures.nonAdminUser);\n    });\n\n    it('does not show the admin controls', function() {\n      // ...\n    });\n  });\n\n  function logIn(user) {\n    // Do something, potentially complicated, that causes the system to run\n    // with `user` logged in.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async UI with Polling in Jasmine\nDESCRIPTION: Shows an alternative approach using polling to test asynchronous UI updates. Creates a promise that resolves when the desired component is found through periodic checks. More resilient to changes in async operations but slower than immediate resolution.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/await-ui.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('When data is fetched', () => {\n  it('renders the data list with the result', async () => {\n    const payload = [/*...*/];\n    const apiClient = {\n      getData: () => Promise.resolve(payload);\n    };\n\n    // Render the component under test\n    const subject = mount(<DataLoader apiClient={apiClient} />);\n\n    // Wait until the DataList is rendered\n    const dataList = await new Promise(resolve => {\n      function poll() {\n        subject.update();\n        const target = subject.find(DataList);\n\n        if (target.exists()) {\n          resolve(target);\n        } else {\n          setTimeout(poll, 50);\n        }\n      }\n      poll();\n    });\n    \n    expect(dataList).toHaveProp('data', payload);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Env#execute in Jasmine 4.x and Earlier\nDESCRIPTION: Example of how to use Env#execute in Jasmine versions 4.x and earlier, using a callback function and try-catch for error handling.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/5.0.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    env.execute(null, function () {\n        // Handle completion\n    });\n} catch (e) {\n    // Handle failures to start\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Jasmine tests programmatically\nDESCRIPTION: Examples of executing Jasmine tests programmatically, including running specific files and filtering by spec name.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.execute();\n\nrunner.execute(['fooSpec.js'], 'a spec name');\n```\n\n----------------------------------------\n\nTITLE: Using throwUnless with waitFor in Jasmine Tests\nDESCRIPTION: Shows how to use throwUnless instead of expect when working with testing-library's waitFor function for asynchronous test assertions. This approach allows proper integration of Jasmine matchers with async testing utilities.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/other-software/testing-library.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait waitFor(function() {\n    throwUnless(myDialogElement).toHaveClass('open');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Asymmetric Matcher in Jasmine JavaScript (After)\nDESCRIPTION: Updated example of implementing an asymmetric matcher 'somethingContaining42' for Jasmine 3.6 and newer, using matchersUtil directly.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction somethingContaining42() {\n  return {\n    asymmetricMatch: function(other, matchersUtil) {\n      return matchersUtil.contains(other, 42);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Jasmine completion handling\nDESCRIPTION: Example of customizing Jasmine's completion behavior to handle the result manually instead of exiting the process.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.exitOnCompletion = false;\nconst result = await runner.execute();\n\nif (result.overallStatus === 'passed') {\n    console.log('All specs have passed');\n} else {\n    console.log('At least one spec has failed');\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Nested beforeEach Pattern in Jasmine\nDESCRIPTION: This example demonstrates a common but problematic pattern where developers try to override setup from an outer describe block in an inner describe block. This approach doesn't work because inner beforeEach functions run after the outer ones.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/testing/let.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// DOES NOT WORK\ndescribe('When the user is logged in', function() {\n  let user = MyFixtures.anyUser\n\n  beforeEach(function() {\n    // Do something, potentially complicated, that causes the system to run\n    // with `user` logged in.\n  });\n\n  it('does some things that apply to any user', function() {\n    // ...\n  });\n\n  describe('as an admin', function() {\n    beforeEach(function() {\n      user = MyFixtures.adminUser;\n    });\n\n    it('shows the admin controls', function() {\n      // ...\n    });\n  });\n\n  describe('as a non-admin', function() {\n    beforeEach(function() {\n      user = MyFixtures.nonAdminUser;\n    });\n\n    it('does not show the admin controls', function() {\n      // ...\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Jasmine configuration programmatically\nDESCRIPTION: Examples of loading Jasmine configuration from a file or a JavaScript object when using Jasmine as a library.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.loadConfigFile('spec/support/jasmine.json');\n\nrunner.loadConfig({\n    spec_dir: 'spec',\n    spec_files: [\n        'appSpec.js',\n        'requests/**/*[sS]pec.js',\n        'utils/**/*[sS]pec.js'\n    ],\n    helpers: [\n        'helpers/**/*.js'\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Jasmine specs by filename\nDESCRIPTION: Commands to run Jasmine specs filtered by filename or glob pattern.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx jasmine \"spec/**/critical/*Spec.js\"\nnpx jasmine spec/currentSpec.js\n```\n\n----------------------------------------\n\nTITLE: Setting up local environment for Jasmine docs (Bash)\nDESCRIPTION: Commands to fork the repo, create a feature branch, and install dependencies for working on Jasmine documentation.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-docs\ngem install bundler\nbundle\nbundle install --path vendor/bundle\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing Jasmine Functions in Spec Files\nDESCRIPTION: Demonstrates how to import necessary Jasmine functions in spec files when not using globals.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/use_without_globals.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {describe, beforeEach, it, expect, jasmine} = require('jasmine-core').noGlobals();\n```\n\n----------------------------------------\n\nTITLE: Configuring Jasmine in JSON\nDESCRIPTION: Example Jasmine configuration file (jasmine.json) showing various options for spec directories, files, helpers, and environment settings.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"spec_dir\": \"spec\",\n  \"spec_files\": [\n    \"**/*[sS]pec.?(m)js\",\n    \"!**/*nospec.js\"\n  ],\n  \"helpers\": [\n    \"helpers/**/*.?(m)js\"\n  ],\n  \"env\": {\n    \"failSpecWithNoExpectations\": false,\n    \"stopSpecOnExpectationFailure\": false,\n    \"stopOnSpecFailure\": false,\n    \"random\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Env#execute in Jasmine 5.0\nDESCRIPTION: Updated example of using Env#execute in Jasmine 5.0, utilizing async/await and promise-based error handling.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/5.0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const jasmineDoneInfo = await env.execute();\n} catch (e) {\n    // Handle failures to start, which are now delivered via promise rejection\n    // rather than synchronous throw\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asymmetric Matcher in Jasmine JavaScript (Before)\nDESCRIPTION: Example of implementing an asymmetric matcher 'somethingContaining42' before Jasmine 3.6, using customEqualityTesters.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction somethingContaining42() {\n  return {\n    asymmetricMatch: function(other, customEqualityTesters) {\n      return jasmine.matchersUtil.contains(other, 42, customEqualityTesters);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserStack in jasmine-browser-runner\nDESCRIPTION: Configuration for using BrowserStack as a remote Selenium grid for running Jasmine tests across different browsers and platforms.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// jasmine-browser.mjs\nexport default {\n  // ...\n  // BrowserStack\n  \"browser\": {\n    \"name\": \"safari\",\n    \"useRemoteSeleniumGrid\": true,\n    \"remoteSeleniumGrid\": {\n      \"url\": \"https://hub-cloud.browserstack.com/wd/hub\",\n      \"bstack:options\": {\n        \"browserVersion\": \"16\",\n        \"os\": \"OS X\",\n        \"osVersion\": \"Monterey\",\n        \"local\": \"true\",\n        \"localIdentifier\": \"tunnel ID\",\n        \"debug\": \"true\",\n        \"userName\": \"your BrowserStack username\",\n        \"accessKey\": \"your BrowserStack access key\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Spy Implementation with Immediate Promise Rejection\nDESCRIPTION: Example showing how returning a rejected promise directly can cause unhandled rejection errors. This approach is not recommended as it creates the rejected promise immediately, potentially leading to unhandled rejections if the spy is not called.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/return-reject.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('might cause an unhandled promise rejection', async function() {\n  const foo = jasmine.createSpy('foo')\n    .and.returnValue(Promise.reject(new Error('nope')));\n  await expectAsync(doSomething(foo)).toBeRejected();\n});\n```\n\n----------------------------------------\n\nTITLE: Improved Test with Jasmine Spy for Async Class\nDESCRIPTION: Improved test approach for a class with multiple completion signals, using a spy to verify callbacks and properly awaiting promises.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/010-mixed-style.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('provides the fetched data to observers', async function(/* Note: no done param */) {\n  const fetch = function() {\n    return Promise.resolve(/*...*/);\n  };\n  const subscriber = jasmine.createSpy('subscriber');\n  const subject = new DataLoader(fetch);\n\n  subject.subscribe(subscriber);\n  // Await the returned promise. This will fail the spec if the promise\n  // is rejected or isn't resolved before the spec timeout.\n  await subject.load(/*...*/);\n  // The subscriber should have been called by now. If not,\n  // that's a bug in DataLoader, and we want the following to fail.\n  expect(subscriber).toHaveBeenCalledWith(/*...*/);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring jasmine-browser-runner for Rails with Asset Pipeline\nDESCRIPTION: Configuration for jasmine-browser.mjs when using Jasmine with Rails and the Asset Pipeline, specifying directories for source and spec files.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  \"srcDir\": \"public/assets\",\n  \"srcFiles\": [\n    \"application-*.js\"\n  ],\n  \"specDir\": \"spec/javascript\",\n  \"specFiles\": [\n    \"**/*[sS]pec.?(m)js\"\n  ],\n  \"helpers\": [\n    \"helpers/**/*.?(m)js\"\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Spy Implementation Using callFake\nDESCRIPTION: Improved implementation using callFake to create the rejected promise only when the spy is called, preventing unhandled rejection errors.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/return-reject.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('does not cause an unhandled promise rejection', async function() {\n  const foo = jasmine.createSpy('foo')\n    .and.callFake(() => Promise.reject(new Error('nope')));\n  await expectAsync(doSomething(foo)).toBeRejected();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Reporter with Jasmine\nDESCRIPTION: Code snippet showing how to register a custom reporter with the Jasmine testing environment using the addReporter method.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_reporter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njasmine.getEnv().addReporter(myReporter);\n```\n\n----------------------------------------\n\nTITLE: Configuring import maps for ES modules\nDESCRIPTION: JavaScript configuration for import maps in jasmine-browser-runner, allowing for module path resolution and CDN imports.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n   // ...\n   \"importMap\": {\n     \"moduleRootDir\": \"node_modules\", \n     \"imports\": {\n       \"some-lib\":\"some-lib/dist/index.mjs\",\n       \"some-lib/\": \"some-lib/dist/\",\n       \"some-cdn-lib\": \"https://example.com/some-cdn-lib\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine globally with npm\nDESCRIPTION: Command to install Jasmine globally using npm, allowing direct CLI usage without npx.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g jasmine\n```\n\n----------------------------------------\n\nTITLE: Configuring Jasmine to Fail Specs Without Expectations\nDESCRIPTION: Setting the 'failSpecWithNoExpectations' option to true in Jasmine configuration to require that all specs contain at least one expectation. This can be done in various ways depending on how Jasmine is being used in your project.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/general/no-assertions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfailSpecWithNoExpectations: true\n```\n\n----------------------------------------\n\nTITLE: Configuring a specific browser in jasmine-browser.mjs\nDESCRIPTION: JavaScript configuration to specify which browser to use for running tests, with options for various browsers including headless Chrome.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  \"browser\": \"chrome\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TestDouble with ES Modules in Node.js\nDESCRIPTION: Shell commands to install dependencies and run tests for a Node.js project using TestDouble to mock ES modules with Jasmine. These commands set up the environment and execute the test suite.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-esm-testdouble/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using this Object for Sharing State in Jasmine Tests\nDESCRIPTION: Shows how Jasmine creates a separate 'this' object for each spec to prevent test pollution. The example demonstrates that variables set in one test using 'this' are not available in subsequent tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n    this.foo = 0;\n});\n\nit(\"can use the `this` to share state\", function() {\n    expect(this.foo).toEqual(0);\n    this.bar = \"test pollution?\";\n});\n\nit(\"prevents test pollution by having an empty `this` \" +\n    \"created for the next spec\", function() {\n    expect(this.foo).toEqual(0);\n    expect(this.bar).toBe(undefined);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Chrome for Jasmine Tests in package.json\nDESCRIPTION: This JSON snippet shows how to modify the 'test' script in package.json to use a headless Chrome browser for running Jasmine tests. It combines building the tests and running them with jasmine-browser-runner.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n    \"test\": \"npm run test:build && jasmine-browser-runner runSpecs --browser=headlessChrome\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Manager Selection UI in JavaScript\nDESCRIPTION: This JavaScript code adds event listeners to radio buttons for selecting between npm and yarn package managers. It updates CSS classes on a root element to show or hide relevant content based on the selected manager.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n  (function() {\n    const buttons = document.querySelectorAll('input[name=mgr]');\n    const root = document.getElementById('react-with-browser-root');\n\n    for (const btn of buttons) {\n      btn.addEventListener('click', function() {\n        root.classList.remove('npm-selected');\n        root.classList.remove('yarn-selected');\n        root.classList.add(btn.value + '-selected');\n      });\n    }\n  }());\n```\n\n----------------------------------------\n\nTITLE: Positive Assertion with 'toBe' Matcher in Jasmine\nDESCRIPTION: Shows a positive case of using the 'toBe' matcher to assert that true is true.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    it(\"and has a positive case\", function() {\n        expect(true).toBe(true);\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library with NPM\nDESCRIPTION: Command for installing @testing-library/react, a popular library for testing React components, using NPM package manager.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save-dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library with Yarn\nDESCRIPTION: Command for installing @testing-library/react, a popular library for testing React components, using Yarn package manager.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add --dev @testing-library/react\n```\n\n----------------------------------------\n\nTITLE: Negative Assertion with 'not.toBe' in Jasmine\nDESCRIPTION: Demonstrates how to create a negative assertion using 'not' before the matcher in Jasmine.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    it(\"and can have a negative case\", function() {\n        expect(false).not.toBe(true);\n    });\n```\n\n----------------------------------------\n\nTITLE: Diff Between Regular and Test Webpack Configurations\nDESCRIPTION: Comparison showing the differences between the standard and test-specific Webpack configurations, highlighting the changes needed for testing React applications.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n const path = require(\"path\");\n+const glob = require(\"glob\");\n \n module.exports = {\n-  entry: \"./src/index.js\",\n+  entry: glob.sync(\"spec/**/*Spec.js?(x)\"),\n   output: {\n-    filename: \"bundle.[hash].js\",\n+    filename: \"test.js\",\n     path: path.resolve(__dirname, \"dist\"),\n   },\n-  plugins: [\n-    new HtmlWebpackPlugin({\n-      template: \"./src/index.html\",\n-    }),\n-  ],\n+  plugins: [],\n   resolve: {\n     modules: [__dirname, \"src\", \"node_modules\"],\n     extensions: [\"*\", \".js\", \".jsx\", \".tsx\", \".ts\"],\n```\n\n----------------------------------------\n\nTITLE: Correct Async Data Loading in Jasmine Tests\nDESCRIPTION: Shows the correct way to handle asynchronous data loading before Jasmine describe blocks using top-level await in ES modules.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/async-describe.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scenarios = await fetchSceanrios();\n\ndescribe('Something', function() {\n   for (const scenario of scenarios) {\n       it(scenario.name, function() {\n           // ...\n       });\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Problematic Async Function with Callback in Jasmine\nDESCRIPTION: An example of an incorrect pattern that attempts to use both an async function and a done callback, which doesn't work properly in Jasmine tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/010-mixed-style.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING: does not work correctly\nit('does something', async function(done) {\n  const something = await doSomethingAsync();\n  doSomethingElseAsync(something, function(result) {\n    expect(result).toBe(/*...*/);\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine Dependencies with Yarn\nDESCRIPTION: Command for installing jasmine-core and jasmine-browser-runner dependencies using Yarn package manager.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add --dev jasmine-core jasmine-browser-runner \n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Function to Allow Multiple done() Calls in Jasmine Tests\nDESCRIPTION: This code snippet demonstrates a utility function that allows multiple done() calls in Jasmine tests by ignoring all but the first call. This emulates the behavior of Jasmine 2.x and 3.x but comes with warnings about potential test reliability issues.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/012-done-twice.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction allowUnsafeMultipleDone(fn) {\n  return function(done) {\n    let doneCalled = false;\n    fn(function(err) {\n      if (!doneCalled) {\n        done(err);\n        doneCalled = true;\n      }\n    });\n  }\n}\n\nit('calls done twice', allowUnsafeMultipleDone(function(done) {\n  setTimeout(done);\n  setTimeout(function() {\n    // This code may interleave with subsequent specs or even run after Jasmine\n    // has finished executing.\n    done();\n  }, 50);\n}));\n```\n\n----------------------------------------\n\nTITLE: Unsafe BeforeEach Pattern in Jasmine 4.0\nDESCRIPTION: Example of an unsafe test setup pattern where teardown in nested suites may not run if beforeEach fails. Shows potential test pollution issues.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Outer suite', function() {\n  beforeEach(function() {\n    setSomeGlobalState();\n    possiblyFail();\n  });\n\n  describe('inner suite', function() {\n    it('does something', function() { /*...*/ });\n\n    // This afterEach function should be moved up to the outer suite.\n    afterEach(function() {\n      cleanUpTheGlobalState();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jasmine Formatter in Ruby\nDESCRIPTION: Example of a custom formatter class that implements the required format and done methods to change the output of Jasmine test results.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass My::Custom::Formatter\n  # `format` is called by the runner every time it gets a batch of results from the page.\n  # The parameter will be an array of `Jasmine::Result` objects\n  def format(results)\n    results.each do |result|\n      puts result.status\n    end\n  end\n\n  # `done` will be called by the runner after all results have come in.\n  def done\n    puts 'Done running tests'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Nesting Custom Matcher in Objects\nDESCRIPTION: Demonstrates how to use custom asymmetric equality testers nested within objects alongside Jasmine's built-in matchers.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_asymmetric_equality_testers.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspyOn(request, 'post');\n\nrequest.post({ name: 'Jan Jansen', age: 40 });\n\nexpect(request.post).toHaveBeenCalledWith({ name: jasmine.any(String), age: multipleOf(10) });\n```\n\n----------------------------------------\n\nTITLE: Configuring Jasmine's default reporter\nDESCRIPTION: Example of configuring the default ConsoleReporter in Jasmine with custom options.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.configureDefaultReporter({\n    timer: new jasmine.jasmine.Timer(),\n    print: function() {\n        process.stdout.write(arguments);\n    },\n    showColors: true\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine Examples\nDESCRIPTION: Installs example specs with implementation for Rails or non-Rails projects to help get started with Jasmine testing.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrails g jasmine:examples\njasmine examples\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher with Jasmine Spy\nDESCRIPTION: Shows how to use the custom asymmetric equality tester with Jasmine spies to verify function calls with specific numerical constraints.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_asymmetric_equality_testers.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nspyOn(Buffer, 'alloc').and.callThrough();\n\nBuffer.alloc(2048);\n\nexpect(Buffer.alloc).toHaveBeenCalledWith(multipleOf(1024));\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Maps for Browser Module Mocking\nDESCRIPTION: JSON configuration for jasmine-browser-runner to enable module mocking using import maps.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/module_mocking.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"srcDir\": \"src\",\n  \"importMap\": {\n    \"moduleRootDir\": \"mockModules\",\n    \"imports\": {\n      \"anotherModule\": \"./anotherModule.mjs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine in Rails\nDESCRIPTION: Generates the default jasmine.yml configuration and jasmine_helper.rb file in a Rails project.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrails g jasmine:install\n```\n\n----------------------------------------\n\nTITLE: Starting a New Spec Description in Jasmine\nDESCRIPTION: Shows the beginning of a new spec description that will demonstrate the use of the 'this' keyword in Jasmine tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n    describe(\"A spec\", function() {\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine Gem in Ruby\nDESCRIPTION: Adds the Jasmine gem to your Gemfile to enable Jasmine testing in a Ruby project.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'jasmine'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Async Callback Testing Approach in JavaScript\nDESCRIPTION: This snippet illustrates an incorrect approach to testing async callbacks, which may pass even if the callback is never called because the expectation is inside the callback.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/callback-assertions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING: Does not work\nit(\"calls the onData callback with the expected args\", async function() {\n  const subject = new DataFetcher();\n  subject.onData(function(data) {\n    expect(data).toEqual(expectedData);\n  });\n\n  await subject.fetch();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Jasmine Runner in Ruby\nDESCRIPTION: Example of a custom runner class that implements the run method to execute Jasmine tests using PhantomJS and process results. Includes boot_js method for loading custom JavaScript.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass My::Custom::Runner\n  def initialize(formatter, jasmine_server_url, result_batch_size)\n    # The formatter passed in is responsible for making sure all configured\n    # formatters receive the same messages.\n    @formatter = formatter\n    # The `jasmine_server_url` is the full http://<host>:<port> url where\n    # the jasmine server was started\n    @jasmine_server_url = jasmine_server_url\n    @result_batch_size = result_batch_size\n  end\n\n  # `run` is responsible coordinating the test run.\n  def run\n    # Here we're using Phantom to load the page and run the specs\n    command = \"#{Phantomjs.path} 'phantom_run.js' #{@jasmine_server_url} #{@result_batch_size}\"\n    IO.popen(command) do |output|\n      # The `phantom_jasmine_run.js` script writes out batches of results as JSON\n      output.each do |line|\n        raw_results = JSON.parse(line, :max_nesting => false)\n        # Formatters expect to get `Jasmine::Result` objects.\n        # It is the runner's job to convert the result objects from the page,\n        # and pass them to the `format` method of their formatter.\n        results = raw_results.map { |r| Result.new(r) }\n        @formatter.format(results)\n      end\n    end\n    # When the tests have finished, call `done` on the formatter to run any\n    # necessary completion logic.\n    @formatter.done\n  end\n\n  # If the runner needs some javascript to be loaded into the page as part of the load,\n  # it returns the full path in `boot_js`\n  def boot_js\n    File.expand_path('runner_boot.js', __FILE__)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Jasmine Server on Custom Port\nDESCRIPTION: Command to start the Jasmine server on a specific port using the -p flag.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\njasmine server -p 1337\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Async Callback Testing Approach in JavaScript\nDESCRIPTION: This snippet shows another incorrect method for testing async callbacks using the done() function, which may cause issues due to premature completion signaling.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/callback-assertions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING: Does not work\nit(\"calls the onData callback with the expected args\", function(done) {\n  const subject = new DataFetcher();\n  subject.onData(function(data) {\n    expect(data).toEqual(expectedData);\n    done();\n  });\n\n  subject.fetch();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jasmine in Ruby\nDESCRIPTION: Sample jasmine_helper.rb configuration showing how to set up custom paths, apps, port configurations, formatters, and runners in Jasmine.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nJasmine.configure do |config|\n  # You can add rack handlers for specific urls\n  config.add_rack_path '/something' do\n    [200]\n  end\n  # And mount other rack applications\n  config.add_rack_app MyRackApp\n  # You can configure the port that the `rake jasmine` command starts a server on\n  config.server_port = 12345\n  # You can configure the port that the `rake jasmine:ci` command starts it's server on\n  config.ci_port = 54321\n  # You can add [custom formatters](#section-Custom_Formatters)\n  config.formatters << My::Custom::Formatter\n  # You can use a [custom runner](#section-Custom_Runners)\n  # The `runner` option on config should be a lambda or Proc that receives a formatter\n  # and server url and returns a constructed runner object. The lambda allows you to\n  # configure other options that need to be configured at initialization time.\n  config.runner = lambda do |formatter, server_url|\n    My::Custom::Runner.new(formatter, server_url, 100)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Jasmine Project\nDESCRIPTION: Command to initialize a Jasmine project, creating a spec directory and configuration YAML file.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njasmine init\n```\n\n----------------------------------------\n\nTITLE: Testing Async Callback Arguments with Spy in JavaScript\nDESCRIPTION: This snippet shows how to use a Jasmine spy to test arguments passed to an async callback, providing better failure messages.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/callback-assertions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"calls the onData callback with the expected args\", async function() {\n  const subject = new DataFetcher();\n  const callback = jasmine.createSpy('onData callback');\n  subject.onData(callback);\n\n  await subject.fetch();\n\n  expect(callback).toHaveBeenCalledWith(expectedData);\n});\n```\n\n----------------------------------------\n\nTITLE: Running specific Jasmine specs\nDESCRIPTION: Commands to run specific Jasmine spec files or files matching a glob pattern.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx jasmine spec/appSpec.js\nnpx jasmine \"**/model/**/critical/**/*Spec.js\"\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine with pip\nDESCRIPTION: Command to install Jasmine using pip package manager for Python.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install jasmine\n```\n\n----------------------------------------\n\nTITLE: Error-prone Callback Style Testing in Jasmine\nDESCRIPTION: A problematic example of a callback-style test that may fail to complete if an error occurs. If result.things is undefined, the test will time out rather than properly failing.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/001-preferred-style.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('sometimes fails to finish', function(done) {\n  doSomethingAsync(function(result) {\n    expect(result.things.length).toEqual(2);\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Jasmine specs by name\nDESCRIPTION: Command to run Jasmine specs filtered by a regex matching the spec name.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx jasmine --filter \"adapter21*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Setup and Teardown Functions in Jasmine\nDESCRIPTION: Example showing how to define globalSetup and globalTeardown functions in Jasmine configuration to support parallel execution with out-of-process setup.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/running_specs_in_parallel.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  spec_dir: \"spec\",\n  // ...\n  globalSetup() {\n    // ... your setup code here\n  }\n  globalTeardown() {\n    // ... your teardown code here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a No-Op Catch Handler to Suppress Unhandled Promise Rejections in Jasmine\nDESCRIPTION: This technique demonstrates a last-resort approach to suppressing unhandled promise rejections by attaching an empty catch handler. This prevents the JavaScript runtime from reporting the rejection as unhandled, while still allowing the code to handle the rejection later.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/unhandled-rejection.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('causes an unhandled rejection', async function() {\n  const rejected = Promise.reject(new Error('nope'));\n  rejected.catch(function() { /* do nothing */ });\n  await somethingAsync();\n  let rejection;\n  try {\n    await rejected;\n  } catch (e) {\n   rejection = e;\n  }\n  // Do something with `rejection`\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine specs on the command line\nDESCRIPTION: Command to run Jasmine specs in a browser from the command line, which exits with code 0 on success or non-zero on failure.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx jasmine-browser-runner runSpecs\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration\nDESCRIPTION: Basic Babel configuration file specifying React preset.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_node.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"react-app\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Return Value for Jasmine Spies\nDESCRIPTION: Shows how to set a default spy strategy that returns 'Hello World' for all spies created within a test block. Uses beforeEach to configure the strategy and demonstrates verification with a test case.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/default_spy_strategy.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n  jasmine.setDefaultSpyStrategy(and => and.returnValue(\"Hello World\"));\n});\n\nit(\"returns the value Hello World\", function() {\n  const spy = jasmine.createSpy();\n  expect(spy()).toEqual(\"Hello World\");\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine with custom config file\nDESCRIPTION: Commands to run Jasmine with a custom configuration file using either environment variable or command line argument.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\njasmine JASMINE_CONFIG_PATH=relative/path/to/your/jasmine.json\njasmine --config=relative/path/to/your/jasmine.json\n```\n\n----------------------------------------\n\nTITLE: Babel Registration Helper\nDESCRIPTION: Helper script to register Babel for on-the-fly compilation of JavaScript/TypeScript files.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_node.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/register');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/register')({\n    \"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Temporary Spy Strategy with Error Throwing\nDESCRIPTION: Demonstrates setting a temporary spy strategy that throws an error, creating spy objects with this strategy, and then removing the strategy. Shows how to handle error cases in spy implementations.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/default_spy_strategy.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"throws if you call any methods\", function() {\n  jasmine.setDefaultSpyStrategy(and => and.throwError(new Error(\"Do Not Call Me\")));\n  const program = jasmine.createSpyObj([\"start\", \"stop\", \"examine\"]);\n  jasmine.setDefaultSpyStrategy();\n\n  expect(() => {\n    program.start();\n  }).toThrowError(\"Do Not Call Me\");\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration for React\nDESCRIPTION: JSON configuration for Babel to support React and modern JavaScript features using preset-react and preset-env.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    \"@babel/preset-react\",\n    \"@babel/preset-env\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Pages for Jasmine docs demo (Bash)\nDESCRIPTION: Commands to create and push a gh-pages branch for providing a live demo of documentation changes.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit checkout -b gh-pages\ngit push -u origin HEAD\n```\n\n----------------------------------------\n\nTITLE: JSDoc Comment Syntax Example\nDESCRIPTION: Shows the basic syntax for JSDoc comments that start with /** to indicate documentation for public interfaces\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/contrib/jsdoc.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n```\n\n----------------------------------------\n\nTITLE: Initializing Jasmine in Non-Rails Projects\nDESCRIPTION: Initializes Jasmine in non-Rails projects using the jasmine command line tool, which also modifies the Rakefile to load Jasmine tasks.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njasmine init\n```\n\n----------------------------------------\n\nTITLE: Submitting changes to Jasmine docs (Bash)\nDESCRIPTION: Git commands to commit changes, push to a branch, and create a pull request for Jasmine documentation updates.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am 'Add some docs'\ngit push origin my-new-docs\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Equality Tester Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a custom equality tester function. The function compares two strings by checking if the first character of the first string matches the second character of the second string.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_equality.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myCustomTester(first, second) {\n  if (typeof first === 'string' && typeof second === 'string') {\n    return first[0] === second[1];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jasmine-browser-runner with yarn\nDESCRIPTION: Commands to install jasmine-browser-runner and jasmine-core using yarn and initialize the configuration.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D jasmine-browser-runner jasmine-core\nnpx jasmine-browser-runner init\n```\n\n----------------------------------------\n\nTITLE: Updating Jasmine API docs (Bash)\nDESCRIPTION: Commands to update local copies of Jasmine and regenerate API documentation.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec rake update_edge_jasmine\nbundle exec rake update_edge_jasmine_npm\nbundle exec rake update_edge_jasmine_browser\nnpm run jsdoc\nnode locco.js\nbundle exec rake serve\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Equality Tester in Jasmine\nDESCRIPTION: This code shows how to register a custom equality tester with Jasmine using the addCustomEqualityTester method within a beforeEach block. This ensures the tester is available for all tests in the suite.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_equality.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n  jasmine.addCustomEqualityTester(myCustomTester);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jasmine-browser-runner with npm\nDESCRIPTION: Commands to install jasmine-browser-runner and jasmine-core using npm and initialize the configuration.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jasmine-browser-runner jasmine-core\nnpx jasmine-browser-runner init\n```\n\n----------------------------------------\n\nTITLE: Importing Node Boot Function in Jasmine 5.0\nDESCRIPTION: Updated method for importing the boot function in Jasmine 5.0, which works across all versions supporting Node.js.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/5.0.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst boot = require('jasmine-core').boot;\n```\n\n----------------------------------------\n\nTITLE: Configuring Saucelabs in jasmine-browser-runner\nDESCRIPTION: Configuration for using Saucelabs as a remote Selenium grid for running Jasmine tests across different browsers and platforms.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// jasmine-browser.mjs\nexport default {\n  // ...\n  // Saucelabs\n  \"browser\": {\n    \"name\": \"safari\",\n    \"useRemoteSeleniumGrid\": true,\n    \"remoteSeleniumGrid\": {\n      \"url\": \"https://ondemand.saucelabs.com/wd/hub\",\n      \"platformName\": \"macOS 12\",\n      \"sauce:options\": {\n        \"tunnel-identifier\": \"tunnel ID\",\n        \"userName\": \"your Saucelabs username\",\n        \"accessKey\": \"your Saucelabs access key\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Jasmine example files\nDESCRIPTION: Command to generate example spec and source files for a Jasmine project.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx jasmine examples\n```\n\n----------------------------------------\n\nTITLE: Importing Node Boot Function in Jasmine 4.x and Earlier\nDESCRIPTION: Example of importing the boot function for initializing jasmine-core in Node.js, as used in versions prior to 5.0.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/5.0.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst boot = require('jasmine-core/node_boot.js');\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine specs interactively in browser\nDESCRIPTION: Command to start the Jasmine server for interactive testing in a browser, which is especially useful for debugging.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx jasmine-browser-runner serve\n```\n\n----------------------------------------\n\nTITLE: Specifying PhantomJS Config Script in YAML\nDESCRIPTION: YAML configuration for specifying a custom PhantomJS configuration script path.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nphantom_config_script: 'relative/path/from/project/root.js'\n```\n\n----------------------------------------\n\nTITLE: Reentrant Clock Tick in Jasmine JavaScript (Before)\nDESCRIPTION: Example of a test with a reentrant call to jasmine.clock().tick() inside a setTimeout handler, which is deprecated.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('makes a reentrant call to tick()', function() {\n  const foo = jasmine.createSpy('foo');\n  const bar = jasmine.createSpy('bar');\n\n  setTimeout(function() {\n    foo();\n    jasmine.clock().tick(9);\n  }, 1);\n\n  setTimeout(function() {\n    bar();\n  }, 10);\n\n  jasmine.clock().tick(1);\n  expect(foo).toHaveBeenCalled();\n  expect(bar).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced usage of jasmine-browser-runner with ESM\nDESCRIPTION: Example of programmatically controlling jasmine-browser-runner using ESM imports, allowing for custom configuration and port settings.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport path from 'path';\nimport jasmineBrowser from 'jasmine-browser-runner';\nimport config from './spec/support/jasmine-browser.mjs';\n\nconfig.projectBaseDir = path.resolve('some/path');\njasmineBrowser.startServer(config, { port: 4321 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Jasmine JSON Config for Single Failure Mode\nDESCRIPTION: Configuration setting in jasmine.json to stop test execution after first expectation failure in a spec. This is typically placed in spec/support/jasmine.json configuration file.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/general/multiple-failures.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stopSpecOnExpectationFailure\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Matcher in Jasmine JavaScript\nDESCRIPTION: Example of implementing a custom matcher 'toContain42' using matchersUtil. This matcher checks if the actual value contains the number 42.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntoContain42: function(matchersUtil, ...extraArgs) {\n  const customEqualityTesters = \n    extraArgs[0] && !extraArgs[0].deprecated ? extraArgs[0] : undefined;\n  \n  return {\n    compare: function(actual, expected) {\n      return {\n        pass: matchersUtil.contains(actual, 42, customEqualityTesters)\n      };\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced usage of jasmine-browser-runner with CommonJS\nDESCRIPTION: Example of programmatically controlling jasmine-browser-runner using CommonJS with dynamic imports for ESM configuration, allowing for custom settings.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// CommonJS\nconst path = require('path');\nconst jasmineBrowser = require('jasmine-browser-runner');\n\nimport('./spec/support/jasmine-browser.mjs')\n        .then(function({default: config}) {\n           config.projectBaseDir = path.resolve('some/path');\n           jasmineBrowser.startServer(config, { port: 4321 });\n        });\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine locally with npm\nDESCRIPTION: Command to install Jasmine as a dev dependency in a Node.js project using npm.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/nodejs.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev jasmine\n```\n\n----------------------------------------\n\nTITLE: HTML Upgrade Guide Header and Link\nDESCRIPTION: HTML markup for the page title and link to the official release notes on GitHub.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/3.0.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Upgrading to Jasmine 3.0</h1>\n\nSee the \n<a href=\"https://github.com/jasmine/jasmine/blob/main/release_notes/3.0.md\">jasmine-core 3.0 release notes</a>\nfor information about upgrading to Jasmine 3.0.\n```\n\n----------------------------------------\n\nTITLE: Creating a specs pack file for Rails with Webpacker\nDESCRIPTION: JavaScript code for the specs.js pack file that requires all test files and helpers when using Jasmine with Rails and Webpacker.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/browser.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  'use strict';\n\n  function requireAll(context) {\n    context.keys().forEach(context);\n  }\n\n  requireAll(require.context('spec/javascript/helpers/', true, /\\.js/));\n  requireAll(require.context('spec/javascript/', true, /[sS]pec\\.js/));\n})();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Import Example\nDESCRIPTION: Demonstrates a TypeScript module import and function definition that will be compiled to CommonJS format. This is the input code for the TypeScript compiler.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-typescript-cjs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {theString} from './anotherModule';\n\nexport function quote() {\n    return '\"' + theString() + '\"';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Layout for FAQ Page\nDESCRIPTION: YAML front matter configuration that sets the page layout to 'faq' for proper styling of lists and code blocks.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/3.0.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: faq # FAQ styling for lists and code blocks is right for this page\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Jasmine NPM Package Without Globals\nDESCRIPTION: Shows how to initialize Jasmine using the NPM package with globals disabled by passing {globals: false} to the constructor.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/use_without_globals.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Jasmine = require('jasmine');\nconst runner = new Jasmine({globals: false});\n```\n\n----------------------------------------\n\nTITLE: Compiled CommonJS Module Output\nDESCRIPTION: Shows the expected CommonJS output after TypeScript compilation. This format allows for module mocking in test environments.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-typescript-cjs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherModule_1 = require(\"./anotherModule\");\nfunction quote() {\n    return '\"' + (0, anotherModule_1.theString)() + '\"';\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Jasmine Core Without Globals\nDESCRIPTION: Shows how to initialize jasmine-core directly using noGlobals() instead of boot().\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/use_without_globals.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jasmine = require('jasmine-core').noGlobals().jasmine;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Spies with jasmine.createSpyObj\nDESCRIPTION: This snippet demonstrates how to create an object with multiple spy functions using jasmine.createSpyObj. It shows how to define and use these spies in tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Multiple spies, when created manually\", function() {\n    let tape;\n\n    beforeEach(function() {\n        tape = jasmine.createSpyObj(\n            'tape',\n            ['play', 'pause', 'stop', 'rewind']\n        );\n\n        tape.play();\n        tape.pause();\n        tape.rewind(0);\n    });\n\n    it(\"creates spies for each requested function\", function() {\n        expect(tape.play).toBeDefined();\n        expect(tape.pause).toBeDefined();\n        expect(tape.stop).toBeDefined();\n        expect(tape.rewind).toBeDefined();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Closing a Jasmine Test Suite\nDESCRIPTION: Shows the closing bracket for a Jasmine test suite defined with 'describe'.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Jasmine Parallel Runner Without Globals\nDESCRIPTION: Demonstrates initialization of Jasmine's parallel runner with multiple workers and globals disabled.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/use_without_globals.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ParallelRunner = require('jasmine/parallel');\nconst runner = new ParallelRunner({\n    numWorkers: 3,\n    globals: false\n});\n```\n\n----------------------------------------\n\nTITLE: Using afterEach in Jasmine\nDESCRIPTION: Demonstrates the use of 'afterEach' to run teardown code after each spec in a suite.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    afterEach(function() {\n        foo = 0;\n    });\n```\n\n----------------------------------------\n\nTITLE: Starting Jasmine Test Server\nDESCRIPTION: Starts a continuous Jasmine server for testing in a browser using Rake.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrake jasmine\n```\n\n----------------------------------------\n\nTITLE: Invalid Async Usage in Jasmine Describe Block\nDESCRIPTION: Demonstrates incorrect implementation of async function in Jasmine describe block that will not work due to synchronous execution requirements.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/async-describe.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING: does not work\ndescribe('Something', async function() {\n   const scenarios = await fetchSceanrios();\n   \n   for (const scenario of scenarios) {\n       it(scenario.name, function() {\n           // ...\n       });\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Failing a Test with fail() Function in Jasmine\nDESCRIPTION: Demonstrates how to use the fail() function to manually fail a test. The example shows a callback function that should not be called, and uses fail() to indicate an error if it is.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"A spec using the fail function\", function() {\n    function foo(x, callBack) {\n        if (x) {\n            callBack();\n        }\n    }\n\n    it(\"should not call the callBack\", function() {\n        foo(false, function() {\n            fail(\"Callback has been called\");\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine Tests in CI Mode\nDESCRIPTION: Executes Jasmine tests in CI (Continuous Integration) mode using Rake.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nrake jasmine:ci\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Override for Jasmine 5.x in Karma\nDESCRIPTION: Package.json configuration to override karma-jasmine's jasmine-core dependency to version 5.x. This allows using Karma with newer versions of Jasmine despite potential version constraints in karma-jasmine.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/other-software/001-karma.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // ...\n    \"overrides\": {\n        \"karma-jasmine\": {\n            \"jasmine-core\": \"^5.0.0\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for Asynchronous Tests in Jasmine\nDESCRIPTION: Demonstrates how to set custom timeouts for asynchronous specs in Jasmine. The example shows setting timeouts for individual beforeEach, it, and afterEach blocks for long-running operations.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/your_first_suite.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"long asynchronous specs\", function() {\n    beforeEach(async function() {\n        await somethingSlow();\n    }, 1000);\n\n    it(\"takes a long time\", async function() {\n        await somethingReallySlow();\n    }, 10000);\n\n    afterEach(async function() {\n        await somethingSlow();\n    }, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine CI with Seed Specification\nDESCRIPTION: Executes Jasmine tests in CI mode with randomization enabled and a specific seed for reproducible test runs.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nrake jasmine:ci[true,4321]\n```\n\n----------------------------------------\n\nTITLE: Problematic Test for Class with Multiple Completion Signals\nDESCRIPTION: Example of a problematic test that attempts to test a class with inconsistent completion signaling through both promises and callbacks.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/010-mixed-style.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// in DataLoader.js\nclass DataLoader {\n  constructor(fetch) {\n    // ...\n  }\n\n  subscribe(subscriber) {\n    // ...\n  }\n\n  async load() {\n    // ...\n  }\n}\n\n// in DataLoaderSpec.js\n// WARNING: does not work correctly\nit('provides the fetched data to observers', async function(done) {\n  const fetch = function() {\n    return Promise.resolve(/*...*/);\n  };\n  const subscriber = function(result) {\n    expect(result).toEqual(/*...*/);\n    done();\n  };\n  const subject = new DataLoader(fetch);\n\n  subject.subscribe(subscriber);\n  await subject.load(/*...*/);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Jasmine Reporter Object\nDESCRIPTION: Implementation of a custom Jasmine reporter object with callback functions for different test execution phases. Includes handlers for suite/spec start and completion, with support for async operations and detailed failure reporting.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_reporter.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myReporter = {\n  jasmineStarted: function(suiteInfo) {\n    console.log('Running suite with ' + suiteInfo.totalSpecsDefined);\n  },\n\n  suiteStarted: function(result) {\n    console.log('Suite started: ' + result.description\n      + ' whose full description is: ' + result.fullName);\n  },\n\n  specStarted: async function(result) {\n    await somethingAsync();\n    console.log('Spec started: ' + result.description\n      + ' whose full description is: ' + result.fullName);\n  },\n\n  specDone: function(result) {\n    console.log('Spec: ' + result.description + ' was ' + result.status);\n\n    for (const expectation of result.failedExpectations) {\n      console.log('Failure: ' + expectation.message);\n      console.log(expectation.stack);\n    }\n\n    console.log(result.passedExpectations.length);\n  },\n\n  suiteDone: function(result) {\n    console.log('Suite: ' + result.description + ' was ' + result.status);\n    for (const expectation of result.failedExpectations) {\n      console.log('Suite ' + expectation.message);\n      console.log(expectation.stack);\n    }\n  },\n\n  jasmineDone: function(result) {\n    console.log('Finished suite: ' + result.overallStatus);\n    for (const expectation of result.failedExpectations) {\n      console.log('Global ' + expectation.message);\n      console.log(expectation.stack);\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine in CI Environment\nDESCRIPTION: Command to run Jasmine in a Continuous Integration environment.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\njasmine ci\n```\n\n----------------------------------------\n\nTITLE: Using Promise Chains Instead of Async/Await in Jasmine\nDESCRIPTION: Alternative solution that uses promise chaining with then() instead of async/await, allowing callback-style completion in Jasmine tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/010-mixed-style.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something', function(done) {\n  doSomethingAsync().then(function(something) {\n    doSomethingElseAsync(something, function(result) {\n      expect(result).toBe(170);\n      done();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Async Test Patterns in JavaScript\nDESCRIPTION: These examples show two common mistakes in writing asynchronous tests: trying to be both synchronous and asynchronous, and signaling completion too early. Both patterns can lead to unreliable test results and misreported errors.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/002-late-failure.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING: does not work correctly\nit('tries to be both sync and async', function() {\n  // 1. doSomethingAsync() is called \n  doSomethingAsync(function() {\n    // 3. The callback is called\n    doSomethingThatMightThrow();\n  });\n  // 2. Spec returns, which tells Jasmine that it's done\n});\n\n// WARNING: does not work correctly\nit('is async but signals completion too early', function(done) {\n  // 1. doSomethingAsync() is called \n  doSomethingAsync(function() {\n    // 3. The callback is called\n    doSomethingThatThrows();\n  });\n  // 2. Spec calls done(), which tells Jasmine that it's done\n  done();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Browser for Jasmine CI\nDESCRIPTION: Command to set the browser used by Selenium for Jasmine CI runs using an environment variable.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport JASMINE_BROWSER=chrome\njasmine ci\n```\n\n----------------------------------------\n\nTITLE: Improved Callback Style Testing with Error Handling in Jasmine\nDESCRIPTION: A more reliable but verbose callback-style test with explicit error handling. This implementation uses try-catch to properly report errors when they occur.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/001-preferred-style.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('finishes and reports errors reliably', function(done) {\n  doSomethingAsync(function(result) {\n    try {\n      expect(result.things.length).toEqual(2);\n    } catch (err) {\n      done.fail(err);\n      return;\n    }\n\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling AJAX Mock\nDESCRIPTION: Shows how to install and uninstall the jasmine-ajax mock for an entire test suite using beforeEach and afterEach hooks\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function() {\n    jasmine.Ajax.install();\n});\n\nafterEach(function() {\n    jasmine.Ajax.uninstall();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Browser for Jasmine CI\nDESCRIPTION: Command to specify the browser for Jasmine CI using the --browser flag.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\njasmine ci --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Expectations in Jasmine\nDESCRIPTION: This snippet shows a Jasmine test with multiple expectations that can lead to unclear failure messages. It demonstrates the problem of not being able to easily identify which expectation failed.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/testing/with-context.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('has multiple expectations', function() {\n  expect(munge()).toEqual(1);\n  expect(spindle()).toEqual(2);\n  expect(frobnicate()).toEqual(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Making Mocked AJAX Request\nDESCRIPTION: Demonstrates making an AJAX request using XMLHttpRequest that will be intercepted by jasmine-ajax mock\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/mocking_ajax.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(args) {\n    if (this.readyState == this.DONE) {\n        doneFn(this.responseText);\n    }\n};\n\nxhr.open(\"GET\", \"/some/cool/url\");\nxhr.send();\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Jasmine Browser Tests with NPM\nDESCRIPTION: Commands to install dependencies and run the tests. Tests can be run either directly in Firefox with GeckoDriver or by serving the tests locally and accessing them in any browser.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/browser-import-maps/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Preferred Spy Implementation Using rejectWith\nDESCRIPTION: The clearest and most concise implementation using Jasmine's rejectWith spy strategy to handle promise rejections properly.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/return-reject.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('does not cause an unhandled promise rejection', async function() {\n  const foo = jasmine.createSpy('foo')\n    .and.rejectWith(new Error('nope'));\n  await expectAsync(doSomething(foo)).toBeRejected();\n});\n```\n\n----------------------------------------\n\nTITLE: Non-Reentrant Clock Tick in Jasmine JavaScript (After)\nDESCRIPTION: Updated example avoiding reentrant calls to jasmine.clock().tick(), resolving the deprecation warning.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('does not make a reentrant call to tick()', function() {\n  const foo = jasmine.createSpy('foo');\n  const bar = jasmine.createSpy('bar');\n\n  setTimeout(function() {\n    foo();\n  }, 1);\n\n  setTimeout(function() {\n    bar();\n  }, 10);\n\n  jasmine.clock().tick(1);\n  expect(foo).toHaveBeenCalled();\n  jasmine.clock().tick(9);\n  expect(bar).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tests for CommonJS Module Mocking\nDESCRIPTION: Commands to install dependencies and execute tests for the CommonJS module mocking setup. These commands should be run in the project root directory.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-cjs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Rejecting Promise with Error Object in JavaScript\nDESCRIPTION: This snippet demonstrates how to reject a Promise with an Error object, which allows Jasmine to display a stack trace when the spec fails. The Error object includes the message 'out of cheese'.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/async/promise-no-stacktrace.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.reject(new Error(\"out of cheese\"))\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher Before Jasmine 4.0\nDESCRIPTION: Example of deprecated custom matcher implementation that accepts custom equality testers as a parameter.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njasmine.addMatchers({\n  toContain42: function(matchersUtil, customEqualityTesters) {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: matchersUtil.contains(actual, 42, customEqualityTesters)\n        };\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Running TestDouble with TypeScript ES Modules\nDESCRIPTION: Command sequence to install dependencies, build the TypeScript project, and run tests with TestDouble module mocking.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-typescript-esm-testdouble/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Matchers with Proper Formatting in Jasmine\nDESCRIPTION: This code demonstrates how to implement custom matchers in Jasmine that correctly use custom object formatters. It shows examples of matchers that will and won't use the custom formatters.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_object_formatters.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njasmine.addMatchers({\n    // OK: Jasmine will format expected and actual correctly.\n    toBeFoo: function (matchersUtil) {\n        return {\n            compare: function (actual, expected) {\n                return {\n                    pass: matchersUtil.equals(actual, expected)\n                };\n            }\n        }\n    },\n\n    // OK: Uses pp to format expected and actual.\n    toBeBar: function (matchersUtil) {\n        return {\n            compare: function (actual, expected) {\n                return {\n                    pass: matchersUtil.equals(actual, expected),\n                    message: 'Expected ' + matchersUtil.pp(actual) + ' to be bar like ' + \n                        matchersUtil.pp(expected)\n                };\n            }\n        }\n    },\n\n    // Won't use custom object formatters.\n    toBeBaz: function (matchersUtil) {\n        return {\n            compare: function (actual, expected) {\n                return {\n                    pass: matchersUtil.equals(actual, expected),\n                    message: 'Expected ' + actual + ' to be baz like ' + expected\n                };\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher After Jasmine 4.0\nDESCRIPTION: Updated custom matcher implementation for Jasmine 4.0 that removes the deprecated custom equality testers parameter.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_upgrade-guides/4.0.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njasmine.addMatchers({\n  toContain42: function(matchersUtil) {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: matchersUtil.contains(actual, 42)\n        };\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jasmine Dependencies with NPM\nDESCRIPTION: Command for installing jasmine-core and jasmine-browser-runner dependencies using NPM package manager.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_browser.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save-dev jasmine-core jasmine-browser-runner\n```\n\n----------------------------------------\n\nTITLE: Defining a Jasmine Test with Complex Objects\nDESCRIPTION: This snippet shows a Jasmine test comparing complex objects representing Sudoku cells. It demonstrates the need for custom object formatting in failure messages.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/custom_object_formatters.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('compares some cells', function() {\n    const expectedCells = [\n        {correctValue: 4, entry: null},\n        {correctValue: 1, entry: {pencil: true, numbers: [1, 2]}},\n        {correctValue: 5, entry: {pencil: false, number: 3}}\n    ];\n    const actualCells = [\n        {correctValue: 4, entry: null},\n        {correctValue: 1, entry: {pencil: false, number: 2}},\n        {correctValue: 5, entry: {pencil: false, number: 4}}\n    ];\n\n    expect(actualCells).toEqual(expectedCells);\n});\n```\n\n----------------------------------------\n\nTITLE: Reusable Spec Helper Function for Pet Behaviors in Jasmine\nDESCRIPTION: Shows how to create a reusable spec helper function that defines shared test behaviors for different classes. Implements common pet behaviors that can be reused across Dog and Cat test suites.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/sharing_behaviors.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction itActsLikeAPet() {\n  it('can be fed', function() {\n    this.subject.feed();\n    expect(this.subject.hungry()).toBe(false);\n  });\n\n  it('can be watered', function() {\n    this.subject.drink();\n    expect(this.subject.thirsty()).toBe(false);\n  });\n}\n\ndescribe('Dog', function() {\n  beforeEach(function() {\n    this.subject = new Dog();\n  });\n\n  itActsLikeAPet();\n\n  it('can bark', function() {\n    this.subject.bark();\n  });\n});\n\ndescribe('Cat', function() {\n  beforeEach(function() {\n    this.subject = new Cat();\n  });\n\n  itActsLikeAPet();\n\n  it('can meow', function() {\n    this.subject.meow();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM/Yarn\nDESCRIPTION: Command to install required development dependencies including Babel, jsdom, and Jasmine.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/react_with_node.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save-dev @babel/core \\\n                         @babel/register \\\n                         babel-preset-react-app \\\n                         cross-env \\\n                         jsdom \\\n                         jasmine\n```\n\n----------------------------------------\n\nTITLE: Building and Running TypeScript Project with NPM\nDESCRIPTION: Shell commands to install dependencies, build the project, and run tests using npm.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-typescript-cjs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Mentioning JavaScript Features in Jasmine Context\nDESCRIPTION: This snippet lists various JavaScript features that Jasmine had to avoid for broad browser compatibility. It includes both syntax features and library features that were not universally supported in older browsers.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/contrib/003-es5.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\narrow functions, `async`/`await`, `Promise`, `Symbol`, `Map`, and `Set`\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Pages demo for Jasmine docs (Bash)\nDESCRIPTION: Commands to update the gh-pages branch with changes from a feature branch for demonstrating documentation updates.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout gh-pages\ngit reset --hard my-complicated-change\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TestDouble with Node.js\nDESCRIPTION: Commands for installing dependencies and running tests in a Node.js project using TestDouble and Jasmine. Must be executed in the project root directory.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/examples/module-mocking/node-cjs-testdouble/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Adding External Scripts to Jasmine Browser Runner Configuration\nDESCRIPTION: This snippet demonstrates how to include an external script URL (jQuery in this case) along with local JavaScript files in the srcFiles array of a Jasmine Browser Runner configuration file. This allows the use of external libraries in Jasmine tests.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/general/browser-cdn.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  srcFiles: [\n    \"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js\",\n    \"**/*.js\"\n  ],\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Template\nDESCRIPTION: Standard boilerplate notice for applying the Apache 2.0 license to a project. Requires replacing the year and copyright owner placeholders.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/3.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Attempting to Spy on localStorage.setItem in Jasmine (JavaScript)\nDESCRIPTION: This code snippet demonstrates an attempt to spy on the localStorage.setItem method, which works in some browsers but fails in Firefox and Safari 17 due to security restrictions.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/localstorage.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('sets foo to bar on localStorage', function() {\n    spyOn(localStorage, 'setItem');\n    localStorage.setItem('foo', 'bar');\n    expect(localStorage.setItem).toHaveBeenCalledWith('foo', 'bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the boilerplate notice to be included when applying the Apache License 2.0 to a software project. It includes placeholders for the copyright year and owner's name.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/2.2/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach: Checking localStorage State in Jasmine (JavaScript)\nDESCRIPTION: This code snippet shows an alternative approach to testing localStorage interactions by directly checking the state of localStorage after the operation, rather than spying on the method calls.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_faq/spies/localstorage.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('sets foo to bar on localStorage', function() {\n   localStorage.setItem('foo', 'bar');\n   expect(localStorage.getItem('foo')).toEqual('bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a software project. It includes placeholders for the year and copyright owner's name, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/2.1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating Spy Object with Multiple Properties in Jasmine\nDESCRIPTION: This example demonstrates how to create a spy object with multiple properties using createSpyObj. It also shows how to change the spy strategy for a property using Object.getOwnPropertyDescriptor when a direct reference to the spy is not available.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_tutorials/spying_on_properties.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"creates a spy object with properties\", function() {\n  let obj = createSpyObj(\"myObject\", {}, { x: 3, y: 4 });\n  expect(obj.x).toEqual(3);\n\n  Object.getOwnPropertyDescriptor(obj, \"x\").get.and.returnValue(7);\n  expect(obj.x).toEqual(7);\n});\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included when applying the Apache License 2.0 to a software project. It contains placeholder fields for copyright year and owner information, along with the standard license text.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/0.10.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Randomization Seed for Jasmine CI\nDESCRIPTION: Command to set a specific randomization seed for a Jasmine CI run, useful for debugging purposes.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\njasmine ci --seed 4321\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the boilerplate license notice to be included in project files. The notice includes placeholders for copyright information and standard Apache License 2.0 text with a link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/0.6.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Starting Jasmine Server\nDESCRIPTION: Command to start the Jasmine server for running tests in the browser.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/python.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njasmine server\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet shows the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner's name, as well as the standard license text.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.6/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring PhantomJS Page Object in JavaScript\nDESCRIPTION: JavaScript configuration for PhantomJS page object, setting viewport size properties for test runs.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexports.configure = function(page) {\n  page.viewportSize = {\n    width: 340,\n    height: 220\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.0.0-beta.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring PhantomJS in YAML\nDESCRIPTION: YAML configuration options for showing console logs in the PhantomJS runner.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshow_console_log: true\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright and license notice that should be included in files to apply the Apache License 2.0. The template includes placeholders for year and copyright owner information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.0.0-alpha.1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine CI with Randomization Override\nDESCRIPTION: Executes Jasmine tests in CI mode with randomization explicitly enabled, overriding settings from jasmine.yml.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/setup/ruby.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nrake jasmine:ci[true]\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate\nDESCRIPTION: Standard copyright and license notice template for applying Apache License 2.0 to software projects. Includes placeholder fields for year and copyright owner information that should be customized for each implementation.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.0.0-alpha.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice and license text that should be included in source files when applying the Apache License 2.0. Users should replace the year and copyright owner information with their own details.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/edge/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Text\nDESCRIPTION: Standard boilerplate notice to include in files for applying the Apache License 2.0 to a project. Contains placeholders for copyright year and owner information, along with standard license terms and reference to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/4.5/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the standard license text and reference to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/2.4/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice to be included when applying the Apache License 2.0 to a project. The template includes placeholders for copyright year and owner information, along with standard license text that references where to obtain the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/3.9/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Notice Template\nDESCRIPTION: A boilerplate notice template for applying the Apache License 2.0 to your work. The template includes placeholders for copyright year and owner, followed by standard license text with a link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner's name.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/5.6/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate copyright and license notice text to be included in project files. Includes placeholders for copyright year and owner information, along with the standard Apache 2.0 license text and permissions notice.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/4.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a project. Includes placeholders for copyright year and owner information, along with the standard license text and reference to license terms.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/5.3/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the boilerplate notice to apply the Apache License 2.0 to a project. It includes placeholders for copyright year and owner, along with the standard license text that should be included in project files.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/1.4/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice to be included in files when applying the Apache License 2.0 to a project. The template includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/5.0.0-alpha.1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate text to be included in project files to apply the Apache License 2.0. This template includes placeholders for copyright year and owner that should be replaced with actual information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/5.2/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: The standard boilerplate text to include in source files when applying the Apache License 2.0 to a software project. This text should be adapted with the project's copyright information and included in source files with appropriate comment syntax.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/4.3/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice to be included in source files when applying the Apache License 2.0 to a project. The notice should be formatted according to the appropriate comment syntax for the file format.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.5/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the boilerplate notice that should be included in project files to indicate they are licensed under Apache License 2.0. The template includes placeholders for copyright year and owner information, as well as standard license text and a link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/4.1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice text to be included in software projects using the Apache License 2.0. Includes placeholders for copyright year and owner name.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/edge/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This is the boilerplate copyright and license notice text that should be included in project files when applying the Apache License 2.0. The template includes placeholders for year and copyright owner information, along with standard license disclaimer text.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/4.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the year and copyright owner's name, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.5/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A standard license notice template to be included in project files. Developers should replace the placeholder copyright year and name with their specific information and adjust the comment syntax to match the file format.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.10/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Adding Apache License 2.0 Boilerplate Notice to Files\nDESCRIPTION: The standard boilerplate notice to add to files when applying the Apache License 2.0 to your work. This should be included in the appropriate comment syntax based on the file format.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/4.5/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate copyright and license notice to be included in project files, with placeholders for copyright year and owner information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.8/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text to be included in files when applying the Apache License 2.0. The notice includes placeholder fields for copyright year and owner, along with standard license terms and a link to the full license text.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.2/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright and license notice that should be included in files of projects using the Apache License 2.0. The template includes placeholders for copyright year and owner information, along with standard license text and a link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/2.7/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice to apply the Apache License 2.0 to software projects. Includes placeholders for copyright year and owner name, along with standard license text describing permissions and conditions.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/4.1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template to be included in source files. The template includes placeholders for year and copyright owner information that need to be replaced with actual values.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/edge/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: This is the standard copyright and license notice template that should be applied to files in a project using the Apache License 2.0. The template includes placeholders for the copyright year and owner information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/5.3/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in source files. Contains placeholders for year and copyright owner information that need to be replaced with actual values.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice and license statement to be included in project files. The template includes placeholders for copyright year and owner that should be replaced with actual information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.4/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a software project. Users should replace the bracketed fields with their specific information and include this notice in the appropriate comment syntax for their file format.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/5.0.0-beta.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/5.0.0-alpha.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Text\nDESCRIPTION: Standard copyright and license notice text template to be included in project files. The text includes placeholders for copyright year and owner information that should be replaced when applying the license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.6/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Text\nDESCRIPTION: Standard boilerplate text to apply the Apache License 2.0 to a project. Includes placeholders for copyright year and owner name, along with the terms and conditions of usage.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.3/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice to apply the Apache License 2.0 to your work. This template should be included in source files with the bracketed fields replaced with project-specific information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/3.1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a software project. It includes placeholders for copyright year and owner information, along with the standard license text and link to the full license.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/2.9/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice for applying the Apache License 2.0 to a software project. This template should be customized with appropriate copyright year and owner information, and included in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/2.8/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice to be included in project files when applying the Apache License 2.0. Developers should replace the bracketed fields with their specific information and include this notice in the appropriate comment syntax for their file format.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_api/2.6/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template to be included in project files, with placeholders for year and copyright owner information\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_npm-api/4.4/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: The standard boilerplate copyright and license notice to be included in source files when applying the Apache License 2.0 to a project. The template includes placeholder fields enclosed in brackets that should be replaced with specific project information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/3.0.0-beta-1/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice text to be included in files of projects using the Apache License 2.0. This text should be formatted according to the appropriate comment syntax for the file type and include the copyright year and owner information.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/2.5/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet shows the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the full license text and conditions.\nSOURCE: https://github.com/jasmine/jasmine.github.io/blob/master/_browser-runner-api/1.0/scripts/prettify/Apache-License-2.0.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```"
  }
]