[
  {
    "owner": "bluesky-social",
    "repo": "atproto-interop-tests",
    "content": "TITLE: Validating Handle Format Rules in AT Protocol\nDESCRIPTION: Lists examples of valid handle formats that follow the AT Protocol rules. Valid handles can include uppercase letters, lowercase letters, numbers, hyphens, and dots, with specific patterns for domain names.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/atidentifier_syntax_valid.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nXX.LCS.MIT.EDU\njohn.test\njan.test\na234567890123456789.test\njohn2.test\njohn-john.test\n```\n\n----------------------------------------\n\nTITLE: Validating DID Format Rules in AT Protocol\nDESCRIPTION: Lists examples of valid DID (Decentralized Identifier) formats that follow the AT Protocol rules. Valid DIDs start with 'did:' followed by a method name and a value that can contain letters, numbers, and hyphens.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/atidentifier_syntax_valid.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndid:method:val\ndid:method:VAL\ndid:method:val123\ndid:method:123\ndid:method:val-two\n```\n\n----------------------------------------\n\nTITLE: Preferred ISO 8601 Date and Time Formats\nDESCRIPTION: Examples of preferred ISO 8601 date and time formats, including variations with different fractional second precisions.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/datetime_syntax_valid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.000Z\n2000-01-01T00:00:00.000Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.120Z\n1985-04-12T23:20:50.120000Z\n```\n\n----------------------------------------\n\nTITLE: Valid NSID Examples\nDESCRIPTION: Standard valid NSID formats including alphanumeric segments, version numbers, and multi-level namespaces.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/nsid_syntax_valid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.example.fooBar\ncom.example.fooBarV2\nnet.users.bob.ping\na.b.c\nm.xn--masekowski-d0b.pl\none.two.three\none.two.three.four-and.FiVe\none.2.three\na-0.b-1.c\na0.b1.cc\ncn.8.lex.stuff\ntest.12345.record\na01.thing.record\na.0.c\nxn--fiqs8s.xn--fiqa61au8b7zsevnm8ak20mc4a87e.record.two\na0.b1.c3\ncom.example.f00\n```\n\n----------------------------------------\n\nTITLE: Example ATProto URI Formats for Basic Specification Compliance\nDESCRIPTION: Examples of valid ATProto URIs demonstrating the four main format patterns: DID-only, domain handle, collection reference, and record reference. These examples ensure compliance with the basic ATProto URI specification.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_valid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://user.bsky.social\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post/record\n```\n\n----------------------------------------\n\nTITLE: Supported ISO 8601 Date and Time Formats\nDESCRIPTION: Examples of supported ISO 8601 date and time formats, including variations with different precisions, timezone offsets, and year representations.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/datetime_syntax_valid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.1235678912345Z\n1985-04-12T23:20:50.100Z\n1985-04-12T23:20:50Z\n1985-04-12T23:20:50.0Z\n1985-04-12T23:20:50.123+00:00\n1985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123+07:00\n1985-04-12T23:20:50.123+01:45\n0985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123-07:00\n0123-01-01T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: NSID Length Test Cases\nDESCRIPTION: Examples demonstrating maximum length constraints and segment length validation for NSIDs.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/nsid_syntax_valid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Example of ATProto URI with Strict Path Format\nDESCRIPTION: Demonstrates the strict path format for ATProto URIs with a specific record identifier. The format follows the pattern of DID, collection identifier (NSID), and record key.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_valid.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/asdf123\n```\n\n----------------------------------------\n\nTITLE: ISO 8601 Date and Time Formats with Various Precisions\nDESCRIPTION: Examples of ISO 8601 date and time formats with fractional second precisions ranging from 1 to 12 digits.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/datetime_syntax_valid.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.1Z\n1985-04-12T23:20:50.12Z\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.1234Z\n1985-04-12T23:20:50.12345Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.1234567Z\n1985-04-12T23:20:50.12345678Z\n1985-04-12T23:20:50.123456789Z\n1985-04-12T23:20:50.1234567890Z\n1985-04-12T23:20:50.12345678901Z\n1985-04-12T23:20:50.123456789012Z\n```\n\n----------------------------------------\n\nTITLE: ATProto URI Examples Enforcing No Trailing Slashes\nDESCRIPTION: Examples of correctly formatted ATProto URIs without trailing slashes. This demonstrates proper addressing at different levels: DID, domain, collection, and record.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_valid.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://user.bsky.social\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post/record\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid ATProto Handles in Plaintext\nDESCRIPTION: A list of invalid handle formats that should be rejected by ATProto validation functions. These test cases cover various syntax errors such as incorrect character usage, improper formatting, and internationalized domain name issues.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/atidentifier_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# invalid handles\ndid:thing.test\ndid:thing\njohn-.test\njohn.0\njohn.-\nxn--bcher-.tld\njohn..test\njo_hn.test\n```\n\n----------------------------------------\n\nTITLE: Testing 13-digit DID Handles in AT Protocol\nDESCRIPTION: A set of test cases for 13-digit handles in the AT Protocol. These test cases include valid and potentially invalid handles to verify base32 encoding constraints and validation logic.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/tid_syntax_valid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3jzfcijpj2z2a\n7777777777777\n3zzzzzzzzzzzz\n2222222222222\n```\n\n----------------------------------------\n\nTITLE: AT Protocol Basic URI Format Tests\nDESCRIPTION: Tests for validating basic AT Protocol URI format requirements including scheme, host, and path components.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na://did:plc:asdf123\nat//did:plc:asdf123\nat:/a/did:plc:asdf123\nat:/did:plc:asdf123\nAT://did:plc:asdf123\nhttp://did:plc:asdf123\n://did:plc:asdf123\nat:did:plc:asdf123\nat:/did:plc:asdf123\nat:///did:plc:asdf123\nat://:/did:plc:asdf123\nat:/ /did:plc:asdf123\n```\n\n----------------------------------------\n\nTITLE: Onion Address NSID Examples\nDESCRIPTION: Examples of valid NSIDs using Tor onion addresses, demonstrating support for .onion domains in the namespace.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/nsid_syntax_valid.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nonion.expyuzz4wqqyqhjn.spec.getThing\nonion.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: ATProto URI Examples with Various Record Key Formats\nDESCRIPTION: Collection of valid ATProto URIs demonstrating the permissive nature of record key formats. Examples include various characters, patterns, and formats that are acceptable in record keys.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_valid.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/asdf123\nat://did:plc:asdf123/com.atproto.feed.post/a\n\nat://did:plc:asdf123/com.atproto.feed.post/asdf-123\nat://did:abc:123\nat://did:abc:123/io.nsid.someFunc/record-key\n\nat://did:abc:123/io.nsid.someFunc/self.\nat://did:abc:123/io.nsid.someFunc/lang:\nat://did:abc:123/io.nsid.someFunc/:\nat://did:abc:123/io.nsid.someFunc/-\nat://did:abc:123/io.nsid.someFunc/_\nat://did:abc:123/io.nsid.someFunc/~\nat://did:abc:123/io.nsid.someFunc/...\nat://did:plc:asdf123/com.atproto.feed.postV2\n```\n\n----------------------------------------\n\nTITLE: Numeric Segment NSID Examples\nDESCRIPTION: Examples showing valid NSIDs with numeric segments, demonstrating support for domains starting with numbers.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/nsid_syntax_valid.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\norg.4chan.lex.getThing\ncn.8.lex.stuff\nonion.2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid DID Formats in Plaintext\nDESCRIPTION: A collection of malformed DID (Decentralized Identifier) strings that violate the DID syntax specification. These examples test validation for missing components, improper syntax, and invalid characters.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/atidentifier_syntax_invalid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# invalid DIDs\ndid\ndidmethodval\nmethod:did:val\ndid:method:\ndidmethod:val\ndid:methodval)\n:did:method:val\ndid:method:val:\ndid:method:val%\nDID:method:val\n```\n\n----------------------------------------\n\nTITLE: AT Protocol URI Character and Length Validation\nDESCRIPTION: Tests for URI character restrictions, length limits, and fragment handling in AT Protocol URIs.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_invalid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.p@st\nat://did:plc:asdf123/com.atproto.feed.p$st\nat://did:plc:asdf123/com.atproto.feed.p%st\nat://did:plc:asdf123/com.atproto.feed.p&st\nat://did:plc:asdf123/com.atproto.feed.p()t\nat://did:plc:asdf123/com.atproto.feed_post\n```\n\n----------------------------------------\n\nTITLE: Invalid DateTime Examples with Correct Syntax\nDESCRIPTION: Examples of ISO-8601 datetime strings that appear syntactically valid but contain semantically invalid values like month 0, day 0, hour 25, minutes 99, etc. These test cases help verify proper datetime validation in ATProto implementations.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/datetime_parse_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1985-00-12T23:20:50.123Z\n1985-04-00T23:20:50.123Z\n1985-13-12T23:20:50.123Z\n1985-04-12T25:20:50.123Z\n1985-04-12T23:99:50.123Z\n1985-04-12T23:20:61.123Z\n```\n\n----------------------------------------\n\nTITLE: Testing ISO-8601 Timestamp Format Variations\nDESCRIPTION: A comprehensive set of test cases for validating ISO-8601 timestamp formats, including case sensitivity, padding, timezone handling, and various invalid format patterns. Includes both valid and invalid examples to test format validation logic.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/datetime_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# subtle changes to: 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123z\n01985-04-12T23:20:50.123Z\n985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.Z\n1985-04-32T23;20:50.123Z\n1985-04-32T23;20:50.123Z\n\n# en-dash and em-dash\n1985—04-32T23;20:50.123Z\n1985–04-32T23;20:50.123Z\n\n# whitespace\n 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123Z \n1985-04-12T 23:20:50.123Z\n\n# not enough zero padding\n1985-4-12T23:20:50.123Z\n1985-04-2T23:20:50.123Z\n1985-04-12T3:20:50.123Z\n1985-04-12T23:0:50.123Z\n1985-04-12T23:20:5.123Z\n\n# too much zero padding\n01985-04-12T23:20:50.123Z\n1985-004-12T23:20:50.123Z\n1985-04-012T23:20:50.123Z\n1985-04-12T023:20:50.123Z\n1985-04-12T23:020:50.123Z\n1985-04-12T23:20:050.123Z\n\n# strict capitalization (ISO-8601)\n1985-04-12t23:20:50.123Z\n1985-04-12T23:20:50.123z\n\n# RFC-3339, but not ISO-8601\n1985-04-12T23:20:50.123-00:00\n1985-04-12_23:20:50.123Z\n1985-04-12 23:20:50.123Z\n\n# ISO-8601, but weird\n1985-04-274T23:20:50.123Z\n\n# timezone is required\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50\n\n1985-04-12\n1985-04-12T23:20Z\n1985-04-12T23:20:5Z\n1985-04-12T23:20:50.123\n+001985-04-12T23:20:50.123Z\n23:20:50.123Z\n\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+00:0\n1985-04-12T23:20:50.123+0:00\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50.123+0000\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+\n1985-04-12T23:20:50.123-\n\n# ISO-8601, but normalizes to a negative time\n0000-01-01T00:00:00+01:00\n-000001-12-31T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Validating ATProto Namespace Length\nDESCRIPTION: Test cases for checking the maximum length of ATProto namespace identifiers. These examples push the boundaries of allowed lengths for different parts of the namespace.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/nsid_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Base32 Characters\nDESCRIPTION: Demonstrates invalid base32 strings containing numbers and repeated zeros.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/tid_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# not base32\n3jzfcijpj2z21\n0000000000000\n```\n\n----------------------------------------\n\nTITLE: AT Protocol Edge Case Tests\nDESCRIPTION: Tests for handling edge cases like multiple slashes, empty segments, and invalid path components.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_invalid.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://user.bsky.social//\nat://user.bsky.social//com.atproto.feed.post\nat://user.bsky.social/com.atproto.feed.post//\nat://did:plc:asdf123/com.atproto.feed.post/asdf123/more/more\nat://did:plc:asdf123/short/stuff\nat://did:plc:asdf123/12345\n```\n\n----------------------------------------\n\nTITLE: Extreme but Allowed ISO 8601 Date Formats\nDESCRIPTION: Examples of ISO 8601 date formats that are considered extreme but currently allowed, including dates from very early years to the far future.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/datetime_syntax_valid.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0010-12-31T23:00:00.000Z\n1000-12-31T23:00:00.000Z\n1900-12-31T23:00:00.000Z\n3001-12-31T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Example of Maximum Length ATProto Record URI\nDESCRIPTION: Demonstrates a very long ATProto URI with an extended record key (512 'o' characters). This tests the upper bounds of record key length handling in the protocol.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_valid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Identifying Invalid ATProto Namespace Patterns\nDESCRIPTION: Examples of invalid ATProto namespace identifiers, including use of wildcards, emojis, invalid characters, and incorrect formatting. These cases help test proper rejection of malformed namespaces.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/nsid_syntax_invalid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.example.foo.*\ncom.example.foo.blah*\ncom.example.foo.*blah\ncom.exa💩ple.thing\na-0.b-1.c-3\na-0.b-1.c-o\n1.0.0.127.record\n0two.example.foo\nexample.com\ncom.example\na.\n.one.two.three\none.two.three \none.two..three\none .two.three\n one.two.three\ncom.exa💩ple.thing\ncom.atproto.feed.p@st\ncom.atproto.feed.p_st\ncom.atproto.feed.p*st\ncom.atproto.feed.po#t\ncom.atproto.feed.p!ot\ncom.example-.foo\ncom.example.fooBar.2\n```\n\n----------------------------------------\n\nTITLE: Testing Path Traversal Prevention in ATProto URLs\nDESCRIPTION: Examples specifically testing ATProto's handling of dot and double-dot path segments, which are commonly used for directory traversal attacks. These test cases ensure the protocol properly rejects such potentially dangerous patterns.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_invalid.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# disallow dot / double-dot\nat://did:plc:asdf123/com.atproto.feed.post/.\nat://did:plc:asdf123/com.atproto.feed.post/..\n```\n\n----------------------------------------\n\nTITLE: Testing Other Invalid Identifier Formats in Plaintext\nDESCRIPTION: Additional test cases for invalid identifiers that don't fit into the handle or DID categories. These include email addresses, malformed handle references, and arbitrary strings that should be rejected by validation functions.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/atidentifier_syntax_invalid.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# other invalid stuff\nemail@example.com\n@handle@example.com\n@handle\nblah\n```\n\n----------------------------------------\n\nTITLE: Testing Case Sensitivity\nDESCRIPTION: Shows an invalid base32 string using uppercase characters when lowercase is expected.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/tid_syntax_invalid.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# case-sensitive\n3JZFCIJPJ2Z2A\n```\n\n----------------------------------------\n\nTITLE: Defining Test Cases for Atproto Identifiers and Edge Cases\nDESCRIPTION: This snippet defines various test cases for atproto identifiers, including valid and invalid formats, special characters, and length limits. It covers handles, spaces, numbers, quotes, and base64 encoding.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/recordkey_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# specs\nalpha/beta\n.\n..\n#extra\n@handle\nany space\nany+space\nnumber[3]\nnumber(3)\n\"quote\"\ndHJ1ZQ==\n\n# too long: 'o'.repeat(513)\nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Testing Fragment Handling in ATProto URLs\nDESCRIPTION: Examples demonstrating how AT protocol handles fragment identifiers (#) in URLs. The test cases show that the protocol is very permissive with fragments, allowing them in various positions and combinations.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_invalid.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# is very permissive about fragments\nat://did:plc:asdf123#\nat://did:plc:asdf123##\n#at://did:plc:asdf123\nat://did:plc:asdf123#/asdf#/asdf\n```\n\n----------------------------------------\n\nTITLE: Testing Record Key Validation in ATProto URLs\nDESCRIPTION: Examples testing the constraints on record keys in ATProto URLs. These cases explore the boundaries of allowed characters and patterns in record keys for Lexicon use, showing both valid and invalid examples.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/aturi_syntax_invalid.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# new less permissive about record keys for Lexicon use (with recordkey more specified)\nat://did:plc:asdf123/com.atproto.feed.post/%23\nat://did:plc:asdf123/com.atproto.feed.post/$@!*)(:,;~.sdf123\nat://did:plc:asdf123/com.atproto.feed.post/~'sdf123\")\nat://did:plc:asdf123/com.atproto.feed.post/$\nat://did:plc:asdf123/com.atproto.feed.post/@\nat://did:plc:asdf123/com.atproto.feed.post/!\nat://did:plc:asdf123/com.atproto.feed.post/*\nat://did:plc:asdf123/com.atproto.feed.post/(\nat://did:plc:asdf123/com.atproto.feed.post/,\nat://did:plc:asdf123/com.atproto.feed.post/;\nat://did:plc:asdf123/com.atproto.feed.post/abc%30123\nat://did:plc:asdf123/com.atproto.feed.post/%30\nat://did:plc:asdf123/com.atproto.feed.post/%3\nat://did:plc:asdf123/com.atproto.feed.post/%\nat://did:plc:asdf123/com.atproto.feed.post/%zz\nat://did:plc:asdf123/com.atproto.feed.post/%%%\n```\n\n----------------------------------------\n\nTITLE: Testing Length Constraints\nDESCRIPTION: Examples of base32 strings that violate length requirements, including strings that are too long or too short.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/tid_syntax_invalid.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# too long/short\n3jzfcijpj2z2aa\n3jzfcijpj2z2\n222\n```\n\n----------------------------------------\n\nTITLE: Generating Long URL in Python\nDESCRIPTION: A Python code comment demonstrating how to generate a long URL by concatenating a base URL with a repeated character. The example shows how to create a URL with 5000 'x' characters appended to the base URL.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/uri_syntax_valid.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"https://example.com/\" + 5000*\"x\"\n```\n\n----------------------------------------\n\nTITLE: Creating Excessively Long URL in Python\nDESCRIPTION: A Python code comment showing how to generate a URL that exceeds the maximum allowed length (8 KB) by concatenating a base URL with repeated characters.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/uri_syntax_invalid.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"https://example.com/\" + 8200 *\"x\"\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Dash Syntax\nDESCRIPTION: Example of an invalid format using dashes in the TTTT-TTT-TTTT-CC pattern which is no longer supported.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/tid_syntax_invalid.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# old dashes syntax not actually supported (TTTT-TTT-TTTT-CC)\n3jzf-cij-pj2z-2a\n```\n\n----------------------------------------\n\nTITLE: Testing High Bit Constraints\nDESCRIPTION: Examples of invalid base32 strings where the high bit constraint is violated.\nSOURCE: https://github.com/bluesky-social/atproto-interop-tests/blob/main/syntax/tid_syntax_invalid.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# high bit can't be high\nzzzzzzzzzzzzz\nkjzfcijpj2z2a\n```"
  }
]