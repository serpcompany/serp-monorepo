[
  {
    "owner": "moonshine-software",
    "repo": "doc",
    "content": "TITLE: Basic TableBuilder Usage in PHP\nDESCRIPTION: This example demonstrates the basic usage of `TableBuilder`, including setting items and fields. It shows how to use methods like `items()` to provide data and `fields()` to define the table columns and how to display table cells. These are the core steps in constructing a simple table using this component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nTableBuilder::make()\n    ->items([\n      ['id' => 1, 'title' => 'Hello world']\n    ])\n    ->fields([\n        ID::make()->sortable(),\n        Text::make('Title', 'title'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Overriding Search Query Logic in MoonShine Resource Using PHP\nDESCRIPTION: This snippet illustrates how to override the searchQuery method to customize the search behavior for resource queries. The method receives a string parameter containing the search terms and uses it in a closure applied to a new Eloquent query builder instance via where conditions. It allows developers to specify custom filtering logic for searches. The example also notes the option to extend the default search by calling parent::searchQuery() before adding additional conditions. This method does not return a value but modifies internal query state.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function searchQuery(string $terms): void\n    {\n        $this->newQuery()->where(function (Builder $builder) use ($terms): void {\n            // Your logic\n        });\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function searchQuery(string $terms): void\n    {\n        parent::searchQuery($terms);\n\n        $this->newQuery()->where(function (Builder $builder) use ($terms): void {\n            // Your logic\n        });\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function resolveSearch(string $terms, ?iterable $fullTextColumns = null): static\n{\n  // Your logic\n\n  return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Settings\nDESCRIPTION: This snippet shows how to configure the main authentication settings in the `config/moonshine.php` file, including enabling/disabling authentication, setting the guard, model, middleware, and pipelines.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    'enabled' => true,\n    'guard' => 'moonshine',\n    'model' => MoonshineUser::class,\n    'middleware' => Authenticate::class,\n    'pipelines' => [],\n],\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource URL Alias via Property - MoonShine PHP\nDESCRIPTION: This PHP snippet sets a custom route alias for the resource in the MoonShine admin interface by defining the protected '$alias' property on the resource class. It extends 'ModelResource' and only requires MoonShine's Laravel Resource package. The property should be a string or null, and changing it affects the URL used for this resource. Input is a string alias value, output is a resource accessible at a custom admin URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected ?string $alias = 'custom-alias';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBoot in Resource\nDESCRIPTION: The `onBoot()` method is used to execute code when MoonShine is creating an instance of the resource within the system. This method is useful for custom initialization logic.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function onBoot(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a MoonShine Resource via Artisan - Laravel Shell Command\nDESCRIPTION: This shell command scaffolds a new MoonShine Resource class for the specified Eloquent model in Laravel. The required dependency is the MoonShine package and the 'php' executable. It will generate a Resource PHP class, e.g., 'PostResource' for the model 'Post', to be extended for admin use. Outputs the resource file in the MoonShine directory. The user supplies the model name as a parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource Post\n```\n\n----------------------------------------\n\nTITLE: Defining Form and Chart Components for Asynchronous Metrics in PHP\nDESCRIPTION: This PHP method `components` returns an iterable array of MoonShine UI components. It first retrieves 'start_date' and 'end_date' from the request. It then defines a `FormBuilder` with two `Date` fields for selecting a date range, configured to trigger an Alpine.js event (`FRAGMENT_UPDATED`) on change. Following the form, a `Fragment` named 'metrics' is defined, which includes a `FlexibleRender` to display the selected date range and a `LineChartMetric` named 'Orders'. The chart queries the 'Order' model to calculate and display the sum ('Profit') and average ('Avg') of order prices, grouped by date and filtered by the `startDate` and `endDate` obtained from the form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/async-metrics.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function components(): iterable\n{\n    $startDate = request()->date('_data.start_date');\n    $endDate = request()->date('_data.end_date');\n\n    return [\n        FormBuilder::make()\n            ->dispatchEvent(AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'metrics'))\n            ->fields([\n                Flex::make([\n                    Date::make('Start date'),\n                    Date::make('End date'),\n                ]),\n            ]),\n\n        Fragment::make([\n            FlexibleRender::make(\"$startDate - $endDate\"),\n\n            LineChartMetric::make('Orders')\n                ->line([\n                    'Profit' => Order::query()\n                        ->selectRaw('SUM(price) as sum, DATE_FORMAT(created_at, \"%d.%m.%Y\") as date')\n                        ->whereBetween('created_at', [$startDate, $endDate])\n                        ->groupBy('date')\n                        ->pluck('sum', 'date')\n                        ->toArray(),\n                ])\n                ->line([\n                    'Avg' => Order::query()\n                        ->selectRaw('AVG(price) as avg, DATE_FORMAT(created_at, \"%d.%m.%Y\") as date')\n                        ->whereBetween('created_at', [$startDate, $endDate])\n                        ->groupBy('date')\n                        ->pluck('avg', 'date')\n                        ->toArray(),\n                ], '#EC4176'),\n        ])->name('metrics'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running MoonShine Panel Installation\nDESCRIPTION: Artisan command to set up the MoonShine admin panel which triggers the interactive installation process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:install\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Controller Logic in Laravel - PHP\nDESCRIPTION: Implements AuthenticateController for managing login form rendering, credential authentication, and logout. Relies on custom request validation (AuthenticateFormRequest), MoonShine pages for rendering (LoginPage), Laravel's Guard for session management, and request/session utilities. Handles login errors through validation feedback and controls post-login redirections. Inputs are LoginPage/global request; outputs are page renderings, redirects, or validation errors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\AuthenticateFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\LoginPage;\nuse Illuminate\\Container\\Attributes\\Auth;\nuse Illuminate\\Container\\Attributes\\Authenticated;\nuse Illuminate\\Container\\Attributes\\CurrentUser;\nuse Illuminate\\Contracts\\Auth\\Guard;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nfinal class AuthenticateController extends Controller\n{\n    public function form(LoginPage $page): LoginPage\n    {\n        return $page;\n    }\n\n    public function authenticate(AuthenticateFormRequest $request): RedirectResponse\n    {\n        if (!auth()->attempt($request->validated())) {\n            return back()->withErrors([\n                'email' => __('moonshine::auth.failed')\n            ]);\n        }\n\n        return redirect()->intended(\n            route('profile')\n        );\n    }\n\n    public function logout(\n        #[Auth]\n        Guard $guard,\n        Request $request\n    ): RedirectResponse {\n        $guard->logout();\n\n        $request->session()->invalidate();\n        $request->session()->regenerateToken();\n\n        return redirect()->intended(\n            url()->previous() ?? route('home')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine Admin Panel\nDESCRIPTION: Artisan command to install and configure the MoonShine admin panel, which will set up authentication, migrations, notifications, theme, and create a superuser.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:install\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Color Setter Methods in ColorManager PHP\nDESCRIPTION: Illustrates usage of dynamic setter methods corresponding to primary color keys such as primary, secondary, successBg, successText, etc. Each method accepts an RGB string to set that particular color value dynamically. This syntactic sugar provides convenient direct assignment over generic set methods while keeping the code concise. Requires ColorManager instance supporting magic/dynamic method calls.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$colorManager->primary('120, 67, 233');\n$colorManager->secondary('236, 65, 118');\n$colorManager->successBg('0, 170, 0');\n$colorManager->successText('255, 255, 255');\n$colorManager->warningBg('255, 220, 42');\n$colorManager->warningText('139, 116, 0');\n$errorBg('224, 45, 45');\n$colorManager->errorText('255, 255, 255');\n$colorManager->infoBg('0, 121, 255');\n$colorManager->infoText('255, 255, 255');\n```\n\n----------------------------------------\n\nTITLE: Modifying Resource Queries in MoonShine ModelResource Using PHP\nDESCRIPTION: This snippet shows how to override the modifyQueryBuilder method in a ModelResource subclass to filter all resource queries to include only active records. It leverages Laravel\\'s Eloquent Builder to add a where clause filtering by the 'active' column. The main parameter is a Builder instance representing the current query, and the method returns a modified Builder. This override is intended to customize the base query used for retrieving resource collections, affecting all queries unless explicitly replaced by overriding newQuery().\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function modifyQueryBuilder(Builder $builder): Builder\n    {\n        return $builder->where('active', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Field in Laravel\nDESCRIPTION: This snippet demonstrates the basic usage of the `HasMany` field in Laravel, which establishes a one-to-many relationship within the Moonshine framework. It takes a label, relation name, an optional resource to define the related model, and an optional formatted callback. The code utilizes the `use` statements to import necessary classes and components, including `HasMany` and the related `CommentResource`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make(\n    'Comments',\n    'comments',\n    resource: CommentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Model Resource Properties - MoonShine PHP\nDESCRIPTION: This PHP class example demonstrates extending MoonShine's ModelResource to customize fundamental resource properties, such as associated model, section title, eager-loaded relations, and the displayed column. It depends on the 'MoonShine\\Laravel\\Resources\\ModelResource' and the specified Eloquent model. Parameters include '$model', '$title', '$with' (eager loading relations), and '$column' (primary display field). The output is a resource that manages and displays Eloquent data in the admin. Assumes presence of the model and necessary database setup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse App\\Models\\Post;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\n/**\n * @extends ModelResource<Post>\n */\nclass PostResource extends ModelResource\n{\n    // Model\n    protected string $model = Post::class;\n\n    // Section title\n    protected string $title = 'Posts';\n\n    // Eager load\n    protected array $with = ['category'];\n\n    // Field for displaying values in relationships and breadcrumbs\n    protected string $column = 'id';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Full Server-Driven UI JSON Response with States and Attributes\nDESCRIPTION: This JSON snippet shows an example of a full UI structure response from MoonShine's SDUI endpoint for the '/admin/dashboard' page. It contains a root \"Dashboard\" component with nested children components like \"Card\", \"Heading\", and \"Text\". Each component includes its type, optional child components, states representing dynamic data (such as content text or heading level), and HTML attributes like classes and IDs for styling and identification. The JSON structure enables a client to render the entire page UI dynamically based on this data. Inputs are the server-side defined component model; outputs are this structured representation for client rendering. This format supports nested components and flexible UI composition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/sdui.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"Dashboard\",\n  \"components\": [\n    {\n      \"type\": \"Card\",\n      \"components\": [\n        {\n          \"type\": \"Heading\",\n          \"states\": {\n            \"level\": 1,\n            \"content\": \"Welcome to Dashboard\"\n          },\n          \"attributes\": {\n            \"class\": [\"text-2xl\", \"font-bold\"],\n            \"id\": \"dashboard-heading\"\n          }\n        },\n        {\n          \"type\": \"Text\",\n          \"states\": {\n            \"content\": \"Here's an overview of your system.\"\n          },\n          \"attributes\": {\n            \"class\": [\"mt-2\", \"text-gray-600\"]\n          }\n        }\n      ],\n      \"states\": {\n        \"title\": \"Dashboard Overview\"\n      },\n      \"attributes\": {\n        \"class\": [\"bg-white\", \"shadow\", \"rounded-lg\"],\n        \"data-card-id\": \"dashboard-overview\"\n      }\n    }\n  ],\n  \"states\": {\n    \"title\": \"Admin Dashboard\"\n  },\n  \"attributes\": {\n    \"class\": [\"container\", \"mx-auto\", \"py-6\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Resource via CrudResource in MoonShine with PHP\nDESCRIPTION: This PHP snippet provides a concrete implementation of a CrudResource subclass, RestCrudResource, which interacts with an external REST API using Laravel's Http client. It implements methods to fetch multiple items, fetch a single item, delete one or multiple items, and save items, supporting both create and update via HTTP methods. Dependencies include Laravel's Http facade, MoonShine's CrudResource and optionally FieldsContract, and expects JSON-formatted input and responses suitable for RESTful integration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/crud-resource.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Http\\Client\\Response;\nuse Illuminate\\Support\\Facades\\Http;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\FieldsContract;\nuse MoonShine\\Laravel\\Resources\\CrudResource;\n\nfinal class RestCrudResource extends CrudResource\n{\n    public function getItems(): iterable\n    {\n        yield from Http::get('https://jsonplaceholder.typicode.com/todos')->json();\n    }\n\n    public function findItem(bool $orFail = false): array\n    {\n        yield from Http::get('https://jsonplaceholder.typicode.com/todos/' . $this->getItemID())->json();\n    }\n\n    public function massDelete(array $ids): void\n    {\n        $this->beforeMassDeleting($ids);\n\n        foreach ($ids as $id) {\n            $this->delete(['id' => $id]);\n        }\n\n        $this->afterMassDeleted($ids);\n    }\n\n    public function delete(mixed $item, ?FieldsContract $fields = null): bool\n    {\n        return Http::delete('https://jsonplaceholder.typicode.com/todos/' . $item['id'])->successful();\n    }\n\n    public function save(mixed $item, ?FieldsContract $fields = null): mixed\n    {\n        $data = request()->all();\n\n        if ($item['id'] ?? false) {\n            return Http::put('https://jsonplaceholder.typicode.com/todos/' . $item['id'], $data)->json();\n        }\n\n        $this->isRecentlyCreated = true;\n\n        return Http::post('https://jsonplaceholder.typicode.com/todos', $data)->json();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Form Fields with Layout Components in MoonShine Resource - PHP\nDESCRIPTION: This PHP snippet defines a structured form layout for the User resource using MoonShine UI components. It includes a grid with columns containing boxes for contact information and password changes. The form utilizes fields like ID, Text, Email, Password, and PasswordRepeat, with custom autocomplete attributes for password fields to enhance security and UX. This approach modularizes the admin form interface for better organization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        Grid::make([\n            Column::make([\n                Box::make('Contact information', [\n                    ID::make()->sortable(),\n                    Text::make('Name'),\n                    Email::make('E-mail', 'email'),\n                ]),\n\n                LineBreak::make(),\n\n                Box::make('Change password', [\n                    Password::make('Password')\n                        ->customAttributes(['autocomplete' => 'new-password']),\n\n                    PasswordRepeat::make('Password repeat')\n                        ->customAttributes(['autocomplete' => 'confirm-password']),\n                ]),\n            ]),\n        ]),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Related Link Button in MoonShine HasMany Relationships Using PHP\nDESCRIPTION: This example shows how to customize the relatedLink button of a HasMany field using the modifyRelatedLink() method. It receives a closure that allows conditional styling or behavior changes based on a boolean preview flag, facilitating dynamic UI adjustments for related link actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink()\n    ->modifyRelatedLink(\n        fn(ActionButton $button, bool $preview) => $button\n            ->when($preview, fn(ActionButton $btn) => $btn->primary())\n            ->unless($preview, fn(ActionButton $btn) => $btn->secondary())\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic MoonShine Resource Class for User Model - PHP\nDESCRIPTION: This PHP snippet defines a MoonShine resource class extending ModelResource, representing a backend admin interface for the User model. It sets the associated model class, title, and defines index, form, and detail fields with minimal configuration, initially only including the ID field. The rules method returns an empty array, indicating no validation yet. Dependencies include MoonShine classes such as ID and Box components, and the User Eloquent model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @extends ModelResource<User>\n */\nclass UserResource extends ModelResource\n{\n    protected string $model = User::class;\n\n    protected string $title = 'Users';\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make()->sortable(),\n        ];\n    }\n\n    protected function formFields(): iterable\n    {\n        return [\n            Box::make([\n                ID::make(),\n            ]),\n        ];\n    }\n\n    protected function detailFields(): iterable\n    {\n        return [\n            ID::make(),\n        ];\n    }\n\n    protected function rules(mixed $item): array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Text Field - Class\nDESCRIPTION: This code snippet demonstrates how to initialize a basic text input field using the `Text::make()` method in PHP. It imports the `Text` class from the MoonShine UI Fields namespace and creates a text field with the label \"Title\". This field is equivalent to a standard HTML `<input type=\"text\">` element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Title')\n```\n\n----------------------------------------\n\nTITLE: Extending MoonShine Resource for Soft Delete Management - PHP\nDESCRIPTION: This code extends a MoonShine resource to support restoring and force deleting soft deleted Article models. It adds custom index action buttons that appear only when an article is trashed, modifies query builders to include trashed items and adds a 'Deleted' query tag filter. It implements restore and forceDelete methods to handle respective requests via MoonShineRequest and returns JSON responses with success notifications. It also controls the visibility of default delete and mass delete buttons based on the soft delete status of the model or current query filter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/soft-deletes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\Laravel\\Http\\Responses\\MoonShineJsonResponse;\nuse MoonShine\\Laravel\\MoonShineRequest;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(\n            ActionButton::make('Restore')\n                ->method(\n                    'restore',\n                    events: [$this->getListEventName()]\n                )\n                ->canSee(\n                    fn(Article $model) => $model->trashed()\n                ),\n\n            ActionButton::make('Force delete')\n                ->method(\n                    'forceDelete',\n                    events: [$this->getListEventName()]\n                )\n                ->canSee(\n                    fn(Article $model) => $model->trashed()\n                ),\n        );\n}\n\nprotected function queryTags(): array\n{\n    return [\n        QueryTag::make(\n            'Deleted',\n            static fn(Builder $q) => $q->onlyTrashed()\n        )\n    ];\n}\n\nprotected function modifyItemQueryBuilder(\n    Builder $builder\n): Builder\n{\n    return $builder->withTrashed();\n}\n\npublic function restore(\n    MoonShineRequest $request\n): MoonShineJsonResponse\n{\n    $item = $request->getResource()->getItem();\n    $item->restore();\n\n    return MoonShineJsonResponse::make()\n        ->toast('Success');\n}\n\npublic function forceDelete(\n    MoonShineRequest $request\n): MoonShineJsonResponse\n{\n    $item = $request->getResource()->getItem();\n    $item->forceDelete();\n\n    return MoonShineJsonResponse::make()\n        ->toast('Success');\n}\n\nprotected function modifyDeleteButton(\n    ActionButtonContract $button\n): ActionButtonContract\n{\n    return $button->canSee(\n        fn(Article $model) => !$model->trashed()\n    );\n}\n\nprotected function modifyMassDeleteButton(\n    ActionButtonContract $button\n): ActionButtonContract\n{\n    return $button->canSee(\n        fn() => request()->input('query-tag') !== 'deleted'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Handler in MoonShine - PHP\nDESCRIPTION: Provides the boilerplate code structure generated by the Artisan command to create a custom Handler class extending the base Handler. It defines how to handle the action (including queue support and toast notifications), the main processing logic placeholder, and how to create and return an ActionButton for UI integration. Requires MoonShine core packages and Symfony HTTP Foundation. The handle() method manages resource validation, queue conditions, and returns a response. Key methods include handle(), process(), and getButton().\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/handlers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Handlers;\\n\\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\\nuse MoonShine\\Laravel\\Handlers\\Handler;\\nuse MoonShine\\Laravel\\MoonShineUI;\\nuse MoonShine\\UI\\Components\\ActionButton;\\nuse MoonShine\\UI\\Exceptions\\ActionButtonException;\\nuse Symfony\\Component\\HttpFoundation\\Response;\\n\\nclass MyCustomHandler extends Handler\\n{\\n    /**\\n     * @throws ActionButtonException\\n     */\\n    public function handle(): Response\\n    {\\n        if (! $this->hasResource()) {\\n            throw new ActionButtonException('Resource is required for action');\\n        }\\n\\n        if ($this->isQueue()) {\\n            // Job here\\n\\n            MoonShineUI::toast(\\n                __('moonshine::ui.resource.queued')\\n            );\\n\\n            return back();\\n        }\\n\\n        self::process();\\n\\n        return back();\\n    }\\n\\n    public static function process()\\n    {\\n        // Logic here\\n    }\\n\\n    public function getButton(): ActionButtonContract\\n    {\\n        return ActionButton::make($this->getLabel(), $this->getUrl());\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fields in ModelResource for CRUD Operations in PHP\nDESCRIPTION: This snippet demonstrates how to define fields for index, form, and detail views in a ModelResource class. It shows the use of ID and Text fields with different configurations for each view context, including grouping form fields within a Box layout component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/fields.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Title'),\n        ];\n    }\n\n    protected function formFields(): iterable\n    {\n        return [\n            Box::make([\n                ID::make(),\n                Text::make('Title'),\n                Text::make('Subtitle'),\n            ]),\n        ];\n    }\n\n    protected function detailFields(): iterable\n    {\n        return [\n            Text::make('Title', 'title'),\n            Text::make('Subtitle'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure TableBuilder Async Loading PHP\nDESCRIPTION: Configures the table to load its content asynchronously. Allows specifying a custom URL, events to trigger after a successful response, and a JavaScript callback.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n->async(\n  Closure|string|null $url = null,\n  string|array|null $events = null,\n  ?AsyncCallback $callback = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Returning an Asynchronous Update Response for Soft Deleting a Resource in PHP\nDESCRIPTION: This snippet shows a controller method performing a soft delete on a model item, then returning a JSON response that triggers a table row update event via AlpineJs along with a success toast message. This encapsulates both backend deletion and frontend UI refresh asynchronously.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function softDelete(MoonShineRequest $request): MoonShineJsonResponse\\n{\\n    $item = $request->getResource()->getItem();\\n    $item->delete();\\n\\n    return MoonShineJsonResponse::make()\\n        ->events([\\n            AlpineJs::event(JsEvent::TABLE_ROW_UPDATED, $this->getListComponentNameWithRow($item->getKey()))\\n        ])\\n        ->toast('Success');\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Sorting in MoonShine Resource (PHP)\nDESCRIPTION: Sets the default sorting column and direction for a MoonShine resource, improving data organization on list pages. Requires the SortDirection enum for specifying ascending or descending order.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Support\\Enums\\SortDirection;\n\nclass PostResource extends ModelResource\n{\n    // Поле сортировки по умолчанию\n    protected string $sortColumn = 'created_at';\n\n    // Тип сортировки по умолчанию\n    protected SortDirection $sortDirection = SortDirection::DESC;\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Selection for MoonShine Table (PHP)\nDESCRIPTION: This code demonstrates how to allow users to choose which columns are displayed in a MoonShine table. It enables the column selection feature by setting the `$columnSelection` property to `true` in the resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $columnSelection = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Attributes in RelationRepeater\nDESCRIPTION: Provides a way to customize the underlying table's attributes, such as CSS classes, via the `modifyTable()` method. This allows tailored styling or additional behavior in the table rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\n\nRelationRepeater::make('Comments', 'comments')\n    ->modifyTable(\n        fn(TableBuilder $table, bool $preview) => $table\n            ->customAttributes([\n                'class' => 'custom-table'\n            ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: moonshine.php File Example\nDESCRIPTION: This snippet demonstrates a basic `moonshine.php` configuration file. It sets settings for title, logo, database, and authentication aspects of a MoonShine application. This is one of the primary configuration methods within MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'title' => env('MOONSHINE_TITLE', 'MoonShine'),\n    'logo' => '/assets/logo.png',\n    'logo_small' => '/assets/logo-small.svg',\n    'use_migrations' => true,\n    'use_notifications' => true,\n    'use_database_notifications' => true,\n    'use_profile' => true,\n    'use_routes' => true,\n    'domain' => env('MOONSHINE_DOMAIN'),\n    'prefix' => 'admin',\n    'middleware' => [\n        // ...\n    ],\n    'auth' => [\n        'enabled' => true,\n        'guard' => 'moonshine',\n        'middleware' => Authenticate::class,\n        // ...\n    ],\n    'layout' => \\MoonShine\\Laravel\\Layouts\\AppLayout::class,\n    'locale' => 'en',\n    'locales' => ['en', 'ru'],\n\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Image Field Customization for Related Table Storage (MoonShine, PHP)\nDESCRIPTION: This code snippet demonstrates how to customize an image field in MoonShine to store images in a related table. It utilizes the `onApply()`, `onAfterApply()`, and `onAfterDestroy()` methods to handle file uploads, deletions, and database interactions.\n\nDependencies: `MoonShine\\UI\\Fields\\Image`, `Illuminate\\Database\\Eloquent\\Model`, `Illuminate\\Support\\Facades\\DB`, `Illuminate\\Support\\Facades\\Storage`.\n\nKey functionalities include:\n1. Blocking `onApply()` to postpone logic execution.\n2. Using `onAfterApply()` to store new images in the database.\n3. Using `onAfterApply()` to delete removed images from the database and storage.\n4. Using `onAfterDestroy()` to remove uploaded files when the parent record is deleted.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/change-field-logic.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Image;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Storage;\n\n// ...\n\nImage::make('Images', 'images')\n    ->multiple()\n    ->removable()\n    ->changeFill(function (Model $data, Image $field) {\n        // return $data->images->pluck('file');\n        // or raw\n        return DB::table('images')->pluck('file');\n    })\n    ->onApply(function (Model $data): Model {\n        // block onApply\n        return $data;\n    })\n    ->onAfterApply(function (Model $data, false|array $values, Image $field) {\n        // $field->getRemainingValues(); the values that remained in the form considering deletions\n        // $field->toValue(); current images\n        // $field->toValue()->diff($field->getRemainingValues()) deleted images\n\n        if($values !== false) {\n            foreach ($values as $value) {\n                DB::table('images')->insert([\n                    'file' => $field->getApplyClass()->store($field, $value),\n                    // or 'file' => $value->store(),\n                ]);\n            }\n        }\n\n        foreach ($field->toValue()->diff($field->getRemainingValues()) as $removed) {\n            DB::table('images')->where('file', $removed)->delete();\n            Storage::disk('public')->delete($removed);\n        }\n\n        // or $field->removeExcludedFiles();\n\n        return $data;\n    })\n    ->onAfterDestroy(function (Model $data, mixed $values, Image $field) {\n        foreach ($values as $value) {\n            Storage::disk('public')->delete($value);\n        }\n\n        return $data;\n    })\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Associated Fields with associatedWith Method in PHP\nDESCRIPTION: Example of how to establish a relationship between fields using the associatedWith() method, which links the value of one field to another and optionally filters values with a callback function.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nassociatedWith(string $column, ?Closure $searchQuery = null)\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Card Component in PHP\nDESCRIPTION: This snippet demonstrates the creation of a Card object using the static make() method in PHP. It initializes a card with title, thumbnail URL, URL link, a list of key-value attributes, and a subtitle. The method supports closures and primitive types for flexibility. Dependencies include the MoonShine UI package and Laravel's faker functions for generating test data. The resulting card object can be further configured or rendered within the PHP context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n    thumbnail: 'https://moonshine-laravel.com/images/image_1.jpg',\n    url: fn() => 'https://cutcode.dev',\n    values: ['ID' => 1, 'Author' => fake()->name()],\n    subtitle: date('d.m.Y'),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Lock Icon to Number Field in MoonShine - PHP\nDESCRIPTION: Displays a lock icon on the Number field to visually indicate the field is protected or read-only using the locked() method. Input: none. Output: Number field with a lock icon, helping identify uneditable or secure fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nNumber::make('Protected Field', 'protected_field')\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: Using Native Select Mode MoonShine Select PHP\nDESCRIPTION: Shows how to disable the default Choices.js integration and render the MoonShine Select field using the browser's native select element. This is achieved by calling the `native()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Type')\n    ->native()\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in Select Field (PHP)\nDESCRIPTION: This snippet demonstrates how to enable multiple selection in a Select field using the `multiple()` method. This allows the user to select multiple options from the list.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n    ->multiple()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Alert with the Alert Class in PHP\nDESCRIPTION: Demonstrates the fundamental usage of the `MoonShine\\UI\\Components\\Alert` class to create a simple alert component. Requires importing the class and calling the static `make()` method followed by the `content()` method to set the alert text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Alert;\n\nAlert::make()->content('Text'),\n```\n\n----------------------------------------\n\nTITLE: Creating a basic query tag in PHP using MoonShine\nDESCRIPTION: Defines a namespace resource with a queryTags() method that creates a filter query tag labeled 'Post with author'. It includes a query builder that filters posts with a non-null author_id. This snippet illustrates how to add custom filters to resource listings in MoonShine, enabling dynamic query modifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function queryTags(): array\n    {\n        return [\n            QueryTag::make(\n                'Post with author', // Tag title\n                fn(Builder $query) => $query->whereNotNull('author_id') // Query builder\n            )\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Menu Items using Resource-Based Checks in PHP\nDESCRIPTION: This snippet displays a menu item based on a resource-based permission check, specifically, using the `can()` method from `MenuItem`. It leverages `MoonShine\\Laravel\\Enums\\Ability` for the check. The code assesses if the user has a specific ability (in this case, `VIEW_ANY`) related to a resource before displaying the menu item. The input is determined implicitly by the current user's roles. The output is a filtered array of menu items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/menu-authorization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Enums\\Ability;\n\nprotected function menu(): array\n{\n  return [\n    MenuItem::make('Roles', MoonShineUserRoleResource::class)\n      ->canSee(fn(MenuItem $item) => $item->getFiller()->can(Ability::VIEW_ANY)),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Resource Route for a Controller - Laravel PHP\nDESCRIPTION: This PHP snippet uses Laravel's routing system to register a RESTful resource route for a given controller. It depends on the 'Illuminate\\Support\\Facades\\Route' and your custom 'Controller' class. Calling 'Route::resource' generates all CRUD endpoints for the specified URI and ties them to controller actions. Expects that the 'Controller' handles necessary resource logic for 'resources'. No explicit input is required beyond the controller definition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::resource('resources', Controller::class);\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Controller with Artisan - Laravel Shell Command\nDESCRIPTION: This shell command generates a new resourceful controller in a Laravel application using Artisan. It requires the 'php' interpreter and access to the Laravel project environment. The 'Controller' is created under 'app/Http/Controllers/' and is scaffolded for RESTful CRUD operations. Replace 'Controller' with your desired controller name as needed. Outputs the auto-generated controller PHP file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller Controller --resource\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality in MoonShine TableBuilder with PHP\nDESCRIPTION: The `searchable()` method adds search functionality to the table, allowing users to filter rows based on search queries. It requires no parameters and integrates with MoonShine's query capabilities to perform server-side or client-side filtering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n->searchable()\n```\n\n----------------------------------------\n\nTITLE: Enabling Policy Enforcement in MoonShine Resource Controller (PHP)\nDESCRIPTION: This snippet demonstrates how to enable Laravel policy checking in a MoonShine resource controller by setting the protected boolean property $withPolicy to true. This change instructs MoonShine to apply authorization checks through Laravel policies for each resource controller method. The enclosing class should extend ModelResource, and authorization only activates when $withPolicy is true. Dependencies include MoonShine\\Laravel\\Resources\\ModelResource. No parameters are required, and this change does not alter method signatures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $withPolicy = true;\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fields for a MoonShine Index Page (PHP)\nDESCRIPTION: Shows the implementation of the `fields()` method within a MoonShine `IndexPage` subclass (e.g., `PostIndexPage`). This method returns an iterable collection of `Field` objects (like `ID` and `Text`) that define the columns or data points to be displayed on the resource's index listing. Dependencies include `MoonShine\\UI\\Fields\\ID` and `MoonShine\\UI\\Fields\\Text`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nnamespace App\\MoonShine\\Pages\\Post;\n\nuse MoonShine\\Laravel\\Pages\\Crud\\IndexPage;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass PostIndexPage extends IndexPage\n{\n    // ...\n\n    protected function fields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Title'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine and Running Laravel Server - Shell\nDESCRIPTION: This snippet includes commands to perform the MoonShine installation via an artisan command and to launch a Laravel development server. The installation command creates the initial setup and prompts to create the first admin user with login credentials. The server command starts local hosting so that the admin panel can be accessed via a web browser at the specified URL. Required dependencies are the Laravel project directory and PHP environment.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:install -Q\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MoonShine Component\nDESCRIPTION: Shows the Artisan command to create a new custom component with its own view and logic for use in the MoonShine admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:component\n```\n\n----------------------------------------\n\nTITLE: Validating Password Reset Submissions in ResetPasswordFormRequest (PHP)\nDESCRIPTION: Defines validation rules within `ResetPasswordFormRequest` for submitting a new password after following a reset link. Authorization restricts this to unauthenticated users (`guest`). The `rules` method requires a `token`, a valid `email`, and a `password` that is confirmed and adheres to Laravel's default password complexity rules (`PasswordRules::default()`).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Validation\\Rules\\Password as PasswordRules;\n\nclass ResetPasswordFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'token' => 'required',\n            'email' => ['required', 'email'],\n            'password' => ['required', 'confirmed', PasswordRules::default()],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RelationRepeater Field\nDESCRIPTION: This snippet demonstrates the basic initialization of a RelationRepeater field for managing 'comments' related to a model via a 'comments' relationship.  It uses the CommentResource class for defining the fields and behavior of the related records.  The field label is set to 'Comments'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\n\nRelationRepeater::make(\n    'Comments',\n    'comments',\n    resource: CommentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Divider with PHP\nDESCRIPTION: This snippet shows how to create a divider with a label. The label text is passed as a string to the `make()` method. This creates a visually distinct separator.\n\nDependencies: Requires the Moonshine UI library. The text passed to `make()` represents the label to be displayed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/divider.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nDivider::make('Separator')\n```\n\n----------------------------------------\n\nTITLE: Implementing File Field in PHP and Blade\nDESCRIPTION: Basic implementation of the File field in MoonShine using both PHP class and Blade components. Requires setting up a symbolic link for the storage directory with 'php artisan storage:link'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\File;\n\nFile::make('File')\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"File\">\n    <x-moonshine::form.file\n        name=\"file\"\n    />\n</x-moonshine::form.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Creating Role-Based Access Middleware\nDESCRIPTION: This snippet shows how to create a new middleware to restrict access to the MoonShine admin panel based on user roles.  It checks if the user has the 'admin' role and aborts with a 403 error if not.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass CheckAdminRole\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        if ($request->user() && ! $request->user()->hasRole('admin')) {\n            abort(403, 'Access denied.');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Image Removal Using PHP and JavaScript\nDESCRIPTION: This snippet defines form fields for images with a removable attribute, enabling asynchronous deletion via fetch API. It includes a method 'removeAvatar' to handle the server-side request, updating the resource's avatar field to null, ensuring server-side state consistency after an image is removed. Dependencies include PHP framework components and JavaScript for event handling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/async-remove-on-click.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        // ...\n\n        Image::make('Avatar')\n            ->removable(attributes: [\n                'data-async-url' => $this->getRouter()->getEndpoints()->method('removeAvatar', params: ['resourceItem' => $this->getItemID()]),\n                '@click.prevent' => <<<'JS'\n                    fetch($event.target.closest('button').dataset.asyncUrl).then(() => $event.target.closest('.x-removeable').remove())\n                JS\n            ]),\n\n        // ...\n    ];\n}\n\npublic function removeAvatar(MoonShineRequest $request): void\n{\n    $item = $request->getResource()?->getItem();\n\n    if(is_null($item)) {\n        return;\n    }\n\n    $item->update(['avatar' => null]);\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Related Model Fields in MoonShine ModelResource PHP\nDESCRIPTION: Demonstrates how to enable searching on related model fields by specifying relation paths in the search() method of a MoonShine ModelResource class. In the example, searching is enabled on the 'title' field of a related 'category' model using the path 'category.title'. This facilitates searching by attributes of related models.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/search.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    protected function search(): array\\n    {\\n        return ['category.title'];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Validation Errors Display with FormBuilder in PHP\nDESCRIPTION: This snippet demonstrates how to enable or disable the display of validation errors at the top of a form using the errorsAbove method of the FormBuilder class. It requires FormBuilder from the moonshine-software package in a PHP/Laravel context. The method accepts a single boolean parameter to toggle error visibility and must be chained as part of form creation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make('/crud/update')\n    ->errorsAbove(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring BelongsToMany Async Search Parameters in MoonShine PHP\nDESCRIPTION: Illustrates configuring asynchronous search with various parameters: specifying the search column ('title'), setting a search limit (10), providing a custom query closure to exclude certain IDs, defining a closure to format the search results, and specifying a custom URL for the request. Requires dependencies for Query Builder, Request, and Field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nuse App\\MoonShine\\Resources\\CountryResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsToMany::make('Countries', 'countries', resource: CountryResource::class)\n    ->asyncSearch(\n        'title',\n        10,\n        searchQuery: function (Builder $query, Request $request, Field $field) {\n            return $query->where('id', '!=', 2);\n        },\n        formatted: function ($country, Field $field) {\n            return $country->id . ' | ' . $country->title;\n        },\n        'https://moonshine-laravel.com/async'\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Search in BelongsTo\nDESCRIPTION: This code snippet provides a detailed example of configuring asynchronous search within a `BelongsTo` field using the `asyncSearch()` method. It demonstrates the use of a custom search query function, customized output formatting, setting a limit for search results, and specifying a URL for processing async requests. The search query filters the results based on a specific condition and a request parameter. The formatted output is customized with the ID and title of country.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:4]\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\UI\\Fields\\Field;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Category', 'category', resource: CategoryResource::class)\n    ->asyncSearch(\n        'title',\n        searchQuery: function (Builder $query, Request $request, string $term, Field $field) {\n            return $query->where('id', '!=', 2);\n        },\n        formatted: function ($country, Field $field) {\n            return $country->id . ' | ' . $country->title;\n        },\n        limit: 10,\n        url: 'https://moonshine-laravel.com/async'\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Moonshine Resource Functionality for Soft Deletes\nDESCRIPTION: This PHP code defines methods and configurations within a Moonshine resource to manage soft-deleted articles. It adds custom action buttons (`Restore`, `Force delete`), query tags (`Deleted`) and modifies the default delete button to account for soft deletes. Dependencies include various Moonshine contracts, classes and Laravel components such as `ActionButton`, `MoonShineJsonResponse`, and `Builder`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/soft-deletes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\Laravel\\Http\\Responses\\MoonShineJsonResponse;\nuse MoonShine\\Laravel\\MoonShineRequest;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(\n            ActionButton::make('Restore')\n                ->method(\n                    'restore',\n                    events: [$this->getListEventName()]\n                )\n                ->canSee(\n                    fn(Article $model) => $model->trashed()\n                ),\n\n            ActionButton::make('Force delete')\n                ->method(\n                    'forceDelete',\n                    events: [$this->getListEventName()]\n                )\n                ->canSee(\n                    fn(Article $model) => $model->trashed()\n                ),\n        );\n}\n\nprotected function queryTags(): array\n{\n    return [\n        QueryTag::make(\n            'Deleted',\n            static fn(Builder $q) => $q->onlyTrashed()\n        )\n    ];\n}\n\nprotected function modifyItemQueryBuilder(\n    Builder $builder\n): Builder\n{\n    return $builder->withTrashed();\n}\n\npublic function restore(\n    MoonShineRequest $request\n): MoonShineJsonResponse\n{\n    $item = $request->getResource()->getItem();\n    $item->restore();\n\n    return MoonShineJsonResponse::make()\n        ->toast('Success');\n}\n\npublic function forceDelete(\n    MoonShineRequest $request\n): MoonShineJsonResponse\n{\n    $item = $request->getResource()->getItem();\n    $item->forceDelete();\n\n    return MoonShineJsonResponse::make()\n        ->toast('Success');\n}\n\nprotected function modifyDeleteButton(\n    ActionButtonContract $button\n): ActionButtonContract\n{\n    return $button->canSee(\n        fn(Article $model) => !$model->trashed()\n    );\n}\n\nprotected function modifyMassDeleteButton(\n    ActionButtonContract $button\n): ActionButtonContract\n{\n    return $button->canSee(\n        fn() => request()->input('query-tag') !== 'deleted'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Including Vite Assets in MoonShine Compact Theme (Blade)\nDESCRIPTION: Shows how to include CSS and JS assets processed by Vite within the compact MoonShine layout using the `<x-moonshine::layout.assets>` Blade component and the `@vite` directive, including theme-specific CSS ('minimalistic.css') and specifying the build path.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.assets>\n    @vite([\n        'resources/css/main.css',\n        'resources/css/minimalistic.css',\n        'resources/js/app.js',\n    ], 'vendor/moonshine')\n</x-moonshine::layout.assets>\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Setting Url Title in PHP\nDESCRIPTION: This snippet shows the method signature for the `title()` method available on the MoonShine Url field. It indicates that the method accepts a single argument, which must be a PHP `Closure`. This Closure is used to dynamically determine the text displayed as the link title in the field's preview.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/url.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntitle(Closure $callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Settings with ImportHandler\nDESCRIPTION: This code snippet demonstrates how to configure import settings using the `import()` method which returns an `ImportHandler`. The configuration options include setting notification users, specifying the disk and directory for the import file, deleting the file after import, defining the CSV delimiter, and modifying the import button using the `modifyButton()` method. The `ImportHandler` provides a way to customize various aspects of the import process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\ImportHandler;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Handlers\\Handler;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function import(): ?Handler\n    {\n        return ImportHandler::make(__('moonshine::ui.import'))\n            // Specify the IDs of users who will be notified when the operation is completed\n            ->notifyUsers(fn(ImportHandler $ctx) => [auth()->id()])\n            // Select disk\n            ->disk('public')\n            // Select directory for saving the import file\n            ->dir('/imports')\n            // Delete the file after import\n            ->deleteAfter()\n            // CSV delimiter\n            ->delimiter(',')\n            // Modify button\n            ->modifyButton(fn(ActionButton $btn) => $btn->class('my-class'))\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Settings with ExportHandler\nDESCRIPTION: This code snippet shows how to configure export settings using the `export()` method, which returns an `ExportHandler`.  The configuration options include setting notification users, disk selection, filename, directory selection, CSV format selection, setting a delimiter, and modifying the button appearance.  The `ExportHandler` allows for customization of the export process behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\ExportHandler;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Handlers\\Handler;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function export(): ?Handler\n    {\n        return ExportHandler::make(__('moonshine::ui.export'))\n            // Specify the IDs of users who will be notified when the operation is completed\n            ->notifyUsers(fn() => [auth()->id()])\n            // Select disk\n            ->disk('public')\n            // Filename\n            ->filename(sprintf('export_%s', date('Ymd-His')))\n            // Select directory for saving the export file\n            ->dir('/exports')\n            // If you need to export in csv format\n            ->csv()\n            // CSV delimiter\n            ->delimiter(',')\n            // Export with confirmation\n            ->withConfirm()\n            // Modify button\n            ->modifyButton(fn(ActionButton $btn) => $btn->class('my-class'))\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Nullable Fields\nDESCRIPTION: The `nullable()` method is used to allow a field to have a `NULL` value as its default. This is useful when the absence of a value is significant. This method can optionally take a closure or boolean for conditional nullability.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnullable(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine Box Component - PHP make Method\nDESCRIPTION: Describes the signature of the `make` method for the Box component. It accepts components or a heading as the first parameter and components as the second when a heading is provided. This method is used to instantiate the Box component programmatically in PHP.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string|iterable $labelOrComponents = [],\n    iterable $components = []\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Refresh Button to Index Page Header in MoonShine (PHP)\nDESCRIPTION: This PHP snippet shows how to add a custom 'Refresh' button to the header of the index page in a MoonShine resource. It overrides the `topButtons` method, gets the default buttons using `parent::topButtons()`, adds a new `ActionButton` that dispatches an Alpine.js `TABLE_UPDATED` event to refresh the current list component, and returns the updated list of buttons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function topButtons(): ListOf\n{\n    return parent::topButtons()\n        ->add(\n            ActionButton::make('Refresh', '#')\n                ->dispatchEvent(\n                    AlpineJs::event(JsEvent::TABLE_UPDATED, $this->getListComponentName())\n                )\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Full-Text Search in MoonShine ModelResource PHP\nDESCRIPTION: Illustrates enabling full-text search on specified fields by applying the SearchUsingFullText attribute to the search() method in a MoonShine ModelResource class. The method must still return an array of fields to include alongside the full-text indexed fields. A prerequisite is adding a full-text index to the database columns specified. This approach enhances search capabilities using database full-text indexes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/search.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\nuse MoonShine\\Support\\Attributes\\SearchUsingFullText;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    #[SearchUsingFullText(['title', 'text'])]\\n    protected function search(): array\\n    {\\n        return ['id'];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine Route with Custom Configuration\nDESCRIPTION: This code snippet provides another way to define a route using the `Route::moonshine` directive. In this instance, the `withResource`, `withPage`, and `withAuthenticate` options are disabled, allowing for more customizable route creation, enabling to control the route generation and configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/routes.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nRoute::moonshine(static function (Router $router) {\n    // ...\n},\n// add prefix {resourceUri}\nwithResource: false,\n// add prefix {pageUri}\nwithPage: false,\n// add middleware Authenticate::class\nwithAuthenticate: false\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Fragment for Asynchronous Updates\nDESCRIPTION: This example demonstrates initializing a Fragment with a specific name to enable asynchronous updates triggered by events or requests within the Laravel app.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nFragment::make($components)->name('fragment-name'),\n```\n\n----------------------------------------\n\nTITLE: Modifying QueryBuilder in HasMany Field in PHP\nDESCRIPTION: Method to modify the database query through QueryBuilder in a HasMany field. The callback provides the relation query and field context for customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyBuilder(fn(Relation $query, HasMany $ctx) => $query)\n```\n\n----------------------------------------\n\nTITLE: Adding Image Thumbnails to Card with thumbnail Method in PHP\nDESCRIPTION: Demonstrates adding a set of images as thumbnails or a carousel to a MoonShine Card through the thumbnail() method. Accepts a closure, string, or array of image paths/URLs to support single or multiple images. This enriches the card’s visual presentation by displaying relevant images. The example shows passing an array of local image paths for the carousel effect. Requires that image assets are accessible by the running application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->thumbnail([\n        '/images/image_2.jpg',\n        '/images/image_1.jpg',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Preparing Input Data Before Validation in MoonShine\nDESCRIPTION: Shows how to implement the prepareForValidation() method to clean or modify request data before validation rules are applied.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    public function prepareForValidation(): void\n    {\n        request()?->merge([\n            'email' => request()\n                ?->string('email')\n                ->lower()\n                ->value()\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Modal Component via Class Syntax (MoonShine, PHP)\nDESCRIPTION: Shows how to create a Modal in PHP using the MoonShine\\UI\\Components\\Modal::make method with specific title and content. Requires importing the MoonShine\\UI\\Components\\Modal class. Inputs are a title ('Confirm') and content ('Content'), outputs a Modal object ready for rendering. No external dependencies beyond MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Modal;\n\nModal::make(\n    title: 'Confirm',\n    content: 'Content'\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sorting Behavior in MoonShine Resource Queries Using PHP\nDESCRIPTION: This snippet shows how to override the resolveOrder method to customize the sorting of resource query results. It accepts parameters for the column to sort by, the direction, and an optional Closure callback that can provide custom ordering logic. If a callback is provided, it is invoked with the query builder, column, and direction; otherwise, it applies a default orderBy clause on the builder. The method returns the resource instance to allow method chaining. This approach supports flexible, context-dependent sorting strategies.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function resolveOrder(string $column, string $direction, ?Closure $callback): static\n    {\n        if ($callback instanceof Closure) {\n            $callback($this->newQuery(), $column, $direction);\n        } else {\n            $this->newQuery()->orderBy($column, $direction);\n        }\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Link to Relation with Parent Resource Binding in PHP\nDESCRIPTION: Shows how to create a link to relation with parent resource binding using the linkRelation parameter in relatedLink() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink('comment')\n```\n\n----------------------------------------\n\nTITLE: Defining a Comprehensive Laravel Policy for a MoonShine Model (PHP)\nDESCRIPTION: This code defines a Laravel policy class for a model (e.g., Post) in a MoonShine application. It implements the full set of standard authorization methods, including viewAny, view, create, update, delete, restore, forceDelete, and massDelete. Each method receives instances of MoonshineUser (and optionally Post) and returns a boolean to indicate if the action is permitted. The policy leverages HandlesAuthorization for convenience. Dependencies are App\\Models\\Post, Illuminate\\Auth\\Access\\HandlesAuthorization, and MoonShine\\Laravel\\Models\\MoonshineUser. Each method can be customized for business rules.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/authorization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\nuse MoonShine\\Laravel\\Models\\MoonshineUser;\n\nclass PostPolicy\n{\n    use HandlesAuthorization;\n\n    public function viewAny(MoonshineUser $user)\n    {\n        return true;\n    }\n\n    public function view(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function create(MoonshineUser $user)\n    {\n        return true;\n    }\n\n    public function update(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function delete(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function restore(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function forceDelete(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function massDelete(MoonshineUser $user)\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Laravel Resource Route Using PHP\nDESCRIPTION: This PHP snippet registers a resource route named 'resources' connected to a controller class 'Controller' using Laravel's Route facade. The resource route automatically handles typical CRUD HTTP actions (index, create, store, show, edit, update, destroy). Dependencies include Laravel's routing system and a defined Controller class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::resource('resources', Controller::class);\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Routes in PHP\nDESCRIPTION: Defines web routes for user authentication, password reset, registration, and profile management using specific controllers (AuthenticateController, ForgotController, RegisterController, ProfileController) and middleware (guest, auth) in `routes/web.php`. Groups routes by controller for organization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Controllers\\AuthenticateController;\nuse App\\Http\\Controllers\\ForgotController;\nuse App\\Http\\Controllers\\ProfileController;\nuse App\\Http\\Controllers\\RegisterController;\nuse App\\MoonShine\\Pages\\ResetPasswordPage;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::controller(AuthenticateController::class)->group(function () {\n    Route::get('/login', 'form')->middleware('guest')->name('login');\n    Route::post('/login', 'authenticate')->middleware('guest')->name('authenticate');\n    Route::delete('/logout', 'logout')->middleware('auth')->name('logout');\n});\n\nRoute::controller(ForgotController::class)->middleware('guest')->group(function () {\n    Route::get('/forgot', 'form')->name('forgot');\n    Route::post('/forgot', 'reset');\n    Route::get('/reset-password/{token}', static fn (ResetPasswordPage $page) => $page)->name('password.reset');\n    Route::post('/reset-password', 'updatePassword')->name('password.update');\n});\n\nRoute::controller(RegisterController::class)->middleware('guest')->group(function () {\n    Route::get('/register', 'form')->name('register');\n    Route::post('/register', 'store')->name('register.store');\n});\n\nRoute::controller(ProfileController::class)->middleware('auth')->prefix('profile')->group(function () {\n    Route::get('/', 'index')->name('profile');\n    Route::post('/', 'update')->name('profile.update');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic Using When and Unless\nDESCRIPTION: The `when()` method is a fluent interface method. It conditionally executes a callback based on the truthiness of the provided `$value`. The `unless()` method is an inverse of `when()`. It executes a callback if the `$value` is falsy. Both methods offer ways to conditionally configure fields through callbacks.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nwhen(\n    $value = null,\n    ?callable $callback = null,\n    ?callable $default = null\n)\nunless(\n    $value = null,\n    ?callable $callback = null,\n    ?callable $default = null\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling SoftDeletes in Laravel Model\nDESCRIPTION: This snippet demonstrates how to enable soft deletes in a Laravel model.  It uses the `SoftDeletes` trait from `Illuminate\\Database\\Eloquent` to add soft delete functionality to the `Article` model. This allows items to be marked as deleted without actually removing them from the database.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/soft-deletes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Article extends Model\n{\n    use SoftDeletes;\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic Using When and Unless with Example\nDESCRIPTION: This example demonstrates the use of the `when()` method. It uses a closure to conditionally configure the `locked()` state of a `Text` field. If the condition is true, the callback function will be executed, locking the field. It utilizes a fluent interface to set field properties based on conditional logic.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Field;\n\nText::make('Slug')\n    ->when(\n        fn() => true,\n        fn(Field $field) => $field->locked()\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Box with Heading - Blade Template\nDESCRIPTION: Explains how to set a heading for the Box component using the `title` attribute in the Blade template syntax. The main content goes within the component tags.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box title=\"Title box\">\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Using onBeforeRender Hook in MoonShine Components\nDESCRIPTION: Demonstrates the onBeforeRender() method that allows access to a component immediately before rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(static $ctx): void  $onBeforeRender\n */\nonBeforeRender(Closure $onBeforeRender)\n```\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title', [])\n    ->onBeforeRender(function(Box $ctx) {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Dispatching JavaScript Events from PHP with dispatchEvent in FormBuilder\nDESCRIPTION: This snippet covers the usage of the dispatchEvent method to send one or more JavaScript events from the server-side FormBuilder. It is compatible with Alpine.js and JS event constants. By default, all form data is sent with the event. Parameters can exclude specific fields or omit all data using the exclude or withoutPayload options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make()\n    ->dispatchEvent(\n        AlpineJs::event(JsEvent::OFF_CANVAS_TOGGLED, 'default')\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Values List on MoonShine Card in PHP\nDESCRIPTION: Shows how to associate a list of key-value pairs with a card using the values() method. The input can be an associative array or a closure returning an array. These values are typically displayed in the card body as metadata or descriptive fields. This snippet uses faker-generated author name and a static ID as example entries. This method enhances the informational content presented by the card.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->values([\n        'ID' => 1,\n        'Author' => fake()->name(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pages in MoonShine (PHP)\nDESCRIPTION: Replaces default MoonShine pages like dashboard, profile, login, and error pages with custom implementations. Define page mappings in the 'pages' array within `config/moonshine.php` or use the `changePage()` method in `MoonShineServiceProvider` specifying the original and replacement page classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n'pages' => [\n    'dashboard' => Dashboard::class,\n    'profile' => ProfilePage::class,\n    'login' => LoginPage::class,\n    'error' => ErrorPage::class,\n],\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->changePage(LoginPage::class, MyLoginPage::class);\n```\n\n----------------------------------------\n\nTITLE: Redirecting After HasMany Modification Actions in MoonShine Using PHP\nDESCRIPTION: The redirectAfter() method allows defining a closure that returns a URL route to redirect to after saving, adding, or deleting related HasMany data. This snippet shows redirection based on the parent resource's ID, enhancing navigation flow after CRUD operations.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->redirectAfter(fn(int $parentId) => route('home'));\n```\n\n----------------------------------------\n\nTITLE: Setting Up BelongsTo Relationship with Associated Field in MoonShine\nDESCRIPTION: Implementation example of a BelongsTo relationship field that is associated with another field (country_id), creating a dependent dropdown relationship.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make('City', 'city', resource: CityResource::class)\n    ->associatedWith('country_id')\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Button - PHP\nDESCRIPTION: This PHP code demonstrates how to add a copy button to a text field using the `copy()` method.  This method copies the text field's value to the clipboard.  The `copy()` method optionally takes a string argument to customize the copied value.  If no argument is provided, the field's value is copied.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nText::make('Token', 'token')\n    ->copy()\n```\n\n----------------------------------------\n\nTITLE: Using Request Data in AsyncSearch Query\nDESCRIPTION: This code snippet demonstrates how to use form data, available through the Request object, within the `asyncSearch` query.  The code adds a `Select` field for 'Country' and then uses the 'country_id' value from the form's Request in the `searchQuery` of the `asyncSearch` method. This allows for filtered results based on the selected country.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:6]\nuse App\\MoonShine\\Resources\\CityResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\UI\\Fields\\Field;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id'),\n\nBelongsTo::make('City', 'city',  resource: CityResource::class)\n    ->asyncSearch(\n        'title',\n        searchQuery: function (Builder $query, Request $request, string $term, Field $field): Builder {\n            return $query->where('country_id', $request->get('country_id'));\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating a MoonShine Policy Scaffold via Artisan Command (Shell)\nDESCRIPTION: This shell command snippet illustrates how to generate a new Laravel policy class scaffold tailored for MoonShine using the artisan command line interface. Running php artisan moonshine:policy PostPolicy will create a new policy class named PostPolicy in the app/Policies directory. No parameters apart from the target policy name are required. This assists in bootstrapping policy implementation for a model or resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/authorization.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:policy PostPolicy\n\n```\n\n----------------------------------------\n\nTITLE: Establishing Field Association with BelongsTo in PHP\nDESCRIPTION: Demonstrates how to use the associatedWith() method of the BelongsTo field in MoonShine to link selection values between fields by specifying a column name. The optional searchQuery Closure allows filtering the associated values. This snippet shows instantiation of a BelongsTo field associated with the 'country_id' column, requiring the CityResource class dependency. Inputs include the column name and an optional filter callback, resulting in filtered related field values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CityResource;\\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\\n\\nBelongsTo::make('City', 'city', resource: CityResource::class)\\n    ->associatedWith('country_id')\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Field with Position Numbering in MoonShine UI - PHP\nDESCRIPTION: Initializes a JSON type field named 'Product Options' containing nested fields including Position for element numbering, Text for titles and values, and a Switcher for activation status. Requires MoonShine UI Fields PHP package. The Position field automatically manages numbering for repeated elements within the JSON structure, facilitating ordered collections in forms or UI components. The snippet expects to be used within a class or context supporting MoonShine Field definitions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/position.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Position;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nJson::make('Product Options', 'options')\n    ->fields([\n        Position::make(),\n        Text::make('Title'),\n        Text::make('Value'),\n        Switcher::make('Active')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in AuthenticateController (PHP)\nDESCRIPTION: Defines the `AuthenticateController` responsible for handling user authentication. The `form` method displays the login page by returning an instance of `LoginPage`. The `authenticate` method validates credentials using `AuthenticateFormRequest`, attempts authentication, and redirects on success or returns with errors on failure. The `logout` method logs out the user, invalidates the session, regenerates the token, and redirects.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\AuthenticateFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\LoginPage;\nuse Illuminate\\Container\\Attributes\\Auth;\nuse Illuminate\\Container\\Attributes\\Authenticated;\nuse Illuminate\\Container\\Attributes\\CurrentUser;\nuse Illuminate\\Contracts\\Auth\\Guard;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nfinal class AuthenticateController extends Controller\n{\n    public function form(LoginPage $page): LoginPage\n    {\n        return $page;\n    }\n\n    public function authenticate(AuthenticateFormRequest $request): RedirectResponse\n    {\n        if(!auth()->attempt($request->validated())) {\n            return back()->withErrors([\n                'email' => __('moonshine::auth.failed')\n            ]);\n        }\n\n        return redirect()->intended(\n            route('profile')\n        );\n    }\n\n    public function logout(\n        #[Auth]\n        Guard $guard,\n        Request $request\n    ): RedirectResponse {\n        $guard->logout();\n\n        $request->session()->invalidate();\n        $request->session()->regenerateToken();\n\n        return redirect()->intended(\n            url()->previous() ?? route('home')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Select - PHP\nDESCRIPTION: This snippet showcases a reactive `Select` component. The first `Select` field's selection dynamically updates the options of the second `Select` field.  It uses the `reactive` method with a closure to define the behavior. Requires the FieldsContract. The output is a dynamically changing list of options in the second select field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/select.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Company', 'company')->options([\n    1 => 'Laravel',\n    2 => 'CutCode',\n    3 => 'Symfony',\n])->reactive(function (FieldsContract $fields, mixed $value, Select $ctx, array $values): FieldsContract {\n    $fields->findByColumn('dynamic_value')?->options((int) $value === 1 ? [\n        4 => 4,\n    ] : [2 => 2]);\n\n    return $fields;\n}),\n\nSelect::make('Dynamic value', 'dynamic_value')->options([4 => 4])->reactive(),\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Collapse Component in PHP\nDESCRIPTION: Defines the factory method for creating a Collapse instance with a label, an iterable set of UI components, and options to specify if the content is initially open and if the state should be persisted. Requires a valid label string or Closure, an array or iterable of components, and Boolean flags for open and persist settings. Outputs a configured Collapse component that allows content to be collapsed or expanded while preserving inner component states.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/collapse.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string $label = '',\n    iterable $components = [],\n    bool $open = false,\n    bool $persist = true\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Row Buttons to Index Table in MoonShine PHP\nDESCRIPTION: This snippet demonstrates adding a custom action button to each row of the index table using the `indexButtons` method. It shows how to create a \"Link\" button with a URL dynamically generated based on the current model item using a closure. The method returns a `ListOf` `ActionButton` instances, prepending the new button to the parent's list. Requires `Illuminate\\Database\\Eloquent\\Model`, `MoonShine\\UI\\Components\\ActionButton`, and `MoonShine\\Support\\ListOf`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(\n            ActionButton::make(\n                'Link',\n                fn(Model $item) => '/endpoint?id=' . $item->getKey()\n            )\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Menu Items Using Laravel Gate Facade in PHP\nDESCRIPTION: This snippet demonstrates how to conditionally display menu items using Laravel's Gate facade to check user permissions. It verifies if the current user has the VIEW_ANY ability for the MoonshineUserRole class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/menu-authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function menu(): array\n{\n  return [\n    MenuItem::make('Роли', MoonShineUserRoleResource::class)\n      ->canSee(fn() => Gate::check(Ability::VIEW_ANY, MoonshineUserRole::class)),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: onChangeMethod Select - PHP\nDESCRIPTION: This code snippet shows how to dynamically update another `Select` element based on changes to the main `Select`'s value, using `onChangeMethod`. It uses an AJAX request to fetch the HTML for the dependent Select and injects it into the DOM. Requires `MoonShineJsonResponse`, `Select`, and `Div`. The onChangeMethod calls 'selectValues' and injects its response into an element with the class 'next-select'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/select.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function selectValues(): MoonShineJsonResponse\n{\n    $options = new Options([\n        new Option('Option 1', '1', false, new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png')),\n        new Option('Option 2', '2', true, new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png')),\n    ]);\n\n    return MoonShineJsonResponse::make()\n        ->html(\n            (string) Select::make('Next')->options($options)\n        );\n}\n\nprotected function formFields(): iterable\n{\n    return [\n        Select::make('Select')->options([\n            1 => 1,\n            2 => 2,\n        ])->onChangeMethod('selectValues', selector: '.next-select'),\n\n        Div::make()->class('next-select'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Success Toast with MoonShineJsonResponse (PHP)\nDESCRIPTION: Demonstrates using the `toast()` method of `MoonShineJsonResponse` to display a success message (\"My message\") as a toast notification with a duration of 3000 milliseconds. Requires the `MoonShineJsonResponse` and `ToastType` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nMoonShineJsonResponse::make()->toast('My message', ToastType::SUCCESS, duration: 3000);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Range Field as Stars in PHP\nDESCRIPTION: Shows how to display the range values as stars using the `stars()` method.  This is suitable for representing ratings or other values graphically.  The example targets the 'rating' field.  This method takes no arguments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/range.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRange::make('Rating')\n    ->fromTo('rating_from', 'rating_to')\n    ->stars()\n```\n\n----------------------------------------\n\nTITLE: Configuring MorphTo Relationship Field with Array Type Mapping - MoonShine Laravel PHP\nDESCRIPTION: Illustrates using the MorphTo field where each polymorphic type is mapped via the 'types' array to both a display field and a custom relationship alias. This configuration is essential when the displayed label and the relationship resource name differ. Requires MoonShine, appropriate model classes (e.g., Company), and Laravel. The example maps Company to use 'short_name' as the display and 'Organization' as the label. Input is a MorphTo field; output is a field where the type label and displayed value are fully customized.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/morph-to.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Fields\\Relationships\\MorphTo;\n\nMorphTo::make('Imageable')->types([\n    Company::class => ['short_name', 'Organization']\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder in BelongsTo\nDESCRIPTION: This snippet shows how to set a placeholder text in the `BelongsTo` field using the `placeholder()` method. This allows you to display a hint or descriptive text in the select input before the user selects an option.  The provided example sets the placeholder to 'Country'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', 'country')\n    ->nullable()\n    ->placeholder('Country')\n```\n\n----------------------------------------\n\nTITLE: Enabling Modal Interactions for Resource Pages - MoonShine PHP\nDESCRIPTION: This class configures a MoonShine resource to support create, edit, and view operations within modal windows on the listing page. It extends 'ModelResource' and requires MoonShine Laravel Resource package. The boolean properties '$createInModal', '$editInModal', and '$detailInModal' are used to trigger modals for respective operations. No inputs apart from setting properties to 'true'. Outputs a user experience with modal dialogues instead of navigating to separate pages for resource actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $createInModal = true;\n\n    protected bool $editInModal = true;\n\n    protected bool $detailInModal = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Form Buttons in HasMany Relationship Forms in MoonShine Using PHP\nDESCRIPTION: The formButtons() method allows injecting custom ActionButtons inside the form when creating or editing HasMany elements. This snippet demonstrates passing an array of ActionButton instances, increasing form interactivity by supporting additional custom actions inline.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->formButtons([\n        ActionButton::make('Custom form button')\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Layout Dynamically with modifyLayout() in PHP\nDESCRIPTION: Explains how to use the `modifyLayout(LayoutContract $layout)` method to dynamically alter the layout instance after it's created but before rendering. This allows for conditional modifications, such as changing titles or descriptions based on context, by manipulating the passed `$layout` object. Requires `MoonShine\\Contracts\\UI\\LayoutContract`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\UI\\LayoutContract;\n\n/**\n * @param  LoginLayout  $layout\n */\nprotected function modifyLayout(LayoutContract $layout): LayoutContract\n{\n    return $layout->title(\n        __('moonshine-two-factor::ui.2fa')\n    )->description(\n        __('moonshine-two-factor::ui.confirm')\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Column Selection Feature in MoonShine TableBuilder with PHP\nDESCRIPTION: The `columnSelection()` method enables toggling the visibility of table columns dynamically. It can be applied globally on the table or selectively disabled on individual fields using `columnSelection(false)`. When enabled, users can choose which columns to display. The `name` property of the TableBuilder must be unique across pages since column visibility settings are persisted in browser localStorage using the name as a key.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->columnSelection()\n```\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->fields([\n        Text::make('Title')\n            ->columnSelection(false),\n        Text::make('Text')\n    ])\n    ->columnSelection()\n```\n\n----------------------------------------\n\nTITLE: Enabling Creating New Relationship Objects in HasMany Field in PHP\nDESCRIPTION: Shows how to enable the creation of new relationship objects through a modal window using the creatable() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Filtering of Empty Values in MoonShine Json Field in PHP\nDESCRIPTION: Shows how to disable default filtering of empty values in Json fields by chaining stopFilteringEmpty(). Any empty fields will be retained in outputs, which may be useful in certain integrations. No parameters required; method is typically chained after make().\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nJson::make('data')->stopFilteringEmpty()\n```\n\n----------------------------------------\n\nTITLE: Modifying Edit Button Icon in MoonShine PHP\nDESCRIPTION: This snippet demonstrates modifying the default edit button using the `modifyEditButton` method. It shows how to change the button's icon using the `->icon()` method, for example, setting it to 'pencil-square'. The method must return the modified `ActionButtonContract`. Requires the `MoonShine\\Contracts\\UI\\ActionButtonContract` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyEditButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->icon('pencil-square');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress in ValueMetric Example\nDESCRIPTION: Example of using the progress method to show the proportion of open tasks relative to total tasks.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nValueMetric::make('Open tasks')\n    ->value(fn(): int => Task::opened()->count())\n    ->progress(fn(): int => Task::count())\n```\n\n----------------------------------------\n\nTITLE: Initializing TableBuilder in PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of the `TableBuilder` class, which is used to create customizable tables for displaying data. It takes optional iterables for fields and items as parameters. This class is a core component for creating tables in the MoonShine framework, used on index and detail CRUD pages and for relationship fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\n\nTableBuilder::make(iterable $fields = [], iterable $items = [])\n```\n\n----------------------------------------\n\nTITLE: Adding Assets within a MoonShine Page (PHP)\nDESCRIPTION: Demonstrates adding assets to a custom MoonShine Page using the `onLoad()` lifecycle hook. Access the `AssetManager` via `$this->getAssetManager()` to add or append assets like CSS and JS files.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\n\nprotected function onLoad(): void\n{\n    parent::onLoad();\n\n    $this->getAssetManager()\n        ->add(Css::make('/css/app.css'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the HTTP Response with modifyResponse() in PHP\nDESCRIPTION: Explains how to use the `modifyResponse()` method to intercept and potentially change the default HTTP response generated for the page before it's sent. This allows for custom response handling, like redirects based on request parameters. The method should return a `Symfony\\Component\\HttpFoundation\\Response` object or `null` to proceed with the default rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nprotected function modifyResponse(): ?Response\n{\n    if (request()->has('id')) {\n        return redirect()->to('/admin/article-resource/index-page');\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple File Upload\nDESCRIPTION: Allow uploading multiple files simultaneously using the multiple() method. When using this feature, ensure proper casting is set up in your model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships in MoonShine Resource Using PHP\nDESCRIPTION: This snippet defines an array property $with in the ModelResource subclass to specify relationships for eager loading with every query. By assigning related model names (e.g., 'user', 'categories') to this array, Laravel's Eloquent ORM automatically fetches those relations when querying the resource data, reducing N+1 query issues. There are no parameters, and this property is assigned at the class level to affect loading behavior globally within the resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected array $with = ['user', 'categories'];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Detail Button Appearance in MoonShine PHP\nDESCRIPTION: This snippet illustrates how to modify the default detail button using the `modifyDetailButton` method. It accepts the button instance and allows applying modifications like changing its style to 'warning'. The method must return the modified `ActionButtonContract`. Requires the `MoonShine\\Contracts\\UI\\ActionButtonContract` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyDetailButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->warning();\n}\n```\n\n----------------------------------------\n\nTITLE: Example Resource Methods Handling Actions (PHP)\nDESCRIPTION: Provides examples of server-side resource methods handling different responses, including toast notifications, redirects, exceptions, and HTML content, ensuring public visibility.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n// With notification\npublic function updateSomething(MoonShineRequest $request): MoonShineJsonResponse\n{\n    return MoonShineJsonResponse::make()->toast('My message', ToastType::SUCCESS);\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Redirect\npublic function updateSomething(MoonShineRequest $request): MoonShineJsonResponse\n{\n    return MoonShineJsonResponse::make()->redirect('/');\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Exception\npublic function updateSomething(MoonShineRequest $request): void\n{\n    throw new \\Exception('My message');\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// HTML Content\npublic function updateSomething(MoonShineRequest $request)\n{\n    return MoonShineJsonResponse::make()->html('Content');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MorphMany Field with CommentResource in Laravel\nDESCRIPTION: This code snippet demonstrates how to create a MorphMany field within a Laravel application using MoonShine. It establishes a relationship with the CommentResource, enabling management of comments associated with a model. The 'Comments' label is used for display, and 'comments' is the relationship name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/morph-many.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphMany;\n\nMorphMany::make(\n    'Comments',\n    'comments',\n    resource: CommentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: RegisterFormRequest Validation Rules\nDESCRIPTION: This form request class defines the validation rules for the registration form. It requires a name, email, and password. The email must be unique, and the password must be confirmed. The `authorize` method checks if the user is a guest.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\n\nclass RegisterFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'name' => ['required'],\n            'email' => ['required', 'email:dns', Rule::unique('users')],\n            'password' => ['required', 'confirmed'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form Data in Asynchronous Search Query (PHP)\nDESCRIPTION: Shows how to use the current form's data within the `searchQuery` Closure of `asyncSearch()`. This example filters the 'Cities' `BelongsToMany` field based on the value selected in a 'Country' Select field ('country_id') from the same form by accessing it via the `Request` object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nuse App\\MoonShine\\Resources\\CityResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id'),\n\nBelongsToMany::make('Cities', 'cities', resource: CityResource::class)\n    ->asyncSearch(\n        'title',\n        searchQuery: function (Builder $query, Request $request, Field $field): Builder {\n            return $query->where('country_id', $request->get('country_id'));\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Opening an Offcanvas Panel with ActionButton in PHP\nDESCRIPTION: Demonstrates using the `inOffCanvas()` method to make an `ActionButton` trigger an offcanvas (side panel) on click. The example configures the offcanvas title and content using Closures, sets an optional name, and uses a builder Closure to customize the `OffCanvas` component (e.g., setting its position to the left). Optional `components` can be passed for discoverability if the content is just HTML.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\OffCanvas;\n\nActionButton::make('Button Label')\n    ->inOffCanvas(\n        title: fn() => 'Offcanvas Title',\n        content: fn() => 'Content',\n        name: false,\n        builder: fn(OffCanvas $offCanvas, ActionButton $ctx) => $offCanvas->left(),\n        // опционально - необходимо чтобы компоненты были доступны для поиска в системе, т.к. content всего лишь HTML\n        components: [],\n    )\n```\n\n----------------------------------------\n\nTITLE: HasMany Relationship with Parent ID using ResourceWithParent (PHP)\nDESCRIPTION: This snippet demonstrates how to implement a `HasMany` relationship with file storage organized by the parent ID using the `ResourceWithParent` trait in MoonShine.  It includes defining the model, parent resource class name, parent relation name, and form fields with conditional directory setting based on the parent ID.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/hasmany-parent-id.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\PostImage;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Image;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Laravel\\Traits\\Resource\\ResourceWithParent;\n\nclass PostImageResource extends ModelResource\n{\n    use ResourceWithParent;\n\n    protected string $model = PostImage::class;\n\n    // ...\n\n    protected function getParentResourceClassName(): string\n    {\n        return PostResource::class;\n    }\n\n    protected function getParentRelationName(): string\n    {\n        return 'post';\n    }\n\n    protected function formFields(): iterable\n    {\n        return [\n            ID::make(),\n            BelongsTo::make('Post'),\n            Image::make('Path')\n                ->when(\n                    $parentId = $this->getParentId(),\n                    static fn(Image $image): string => $image->dir(\"post_images/$parentId\")\n                )\n            ,\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable Resource - MoonShine PHP\nDESCRIPTION: This PHP code block shows how to add reordering functionality to a MoonShine resource. It defines default sort properties and includes two methods: `modifyListComponent` to make the resource table reorderable by adding the `reorderable` component method, and `reorder` to process the incoming AJAX request, parse the ordered IDs, and update the 'position' field for each model instance in the database based on its index in the received data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/reorderable-resource.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\MoonShineRequest;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\n\nprotected string $sortColumn = 'position';\n\nprotected SortDirection $sortDirection = SortDirection::ASC;\n\n/**\n * @param TableBuilder $component\n */\npublic function modifyListComponent(ComponentContract $component): ComponentContract\n{\n    return $component->reorderable(\n        $this->getAsyncMethodUrl('reorder')\n    );\n}\n\npublic function reorder(MoonShineRequest $request): void\n{\n    if ($request->str('data')->isNotEmpty()) {\n        $request->str('data')->explode(',')->each(\n            fn($id, $position) => $this->getModel()\n                ->where('id', $id)\n                ->update([\n                    'position' => $position + 1,\n                ]),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Creatable in BelongsTo\nDESCRIPTION: This code snippet demonstrates the use of the `creatable()` method to allow users to create new related objects directly from the `BelongsTo` field. The example creates a button to create a new Author object via a modal window. Optionally, you can customize the create button by providing an `ActionButton` instance to the method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make('Author', resource: AuthorResource::class)\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Setting Paginator in CardsBuilder Using ModelCaster - PHP\nDESCRIPTION: Shows how to assign a paginator to CardsBuilder using the 'paginator()' method, expecting an instance of a paginator adhering to the PaginatorContract interface. The example illustrates leveraging the ModelCaster class to wrap a Laravel query's pagination result, converting it to a form usable by the CardsBuilder paginator. This enables CardsBuilder's cards to display paginated data seamlessly with integration to Laravel's Eloquent ORM.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->paginator(\n  (new ModelCaster(Article::class))\n    ->paginatorCast(\n        Article::query()->paginate()\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Vertical display mode\nDESCRIPTION: This snippet shows how to display the Json field in a vertical layout instead of the default horizontal layout, using the `vertical()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->vertical()\n```\n\n----------------------------------------\n\nTITLE: Defining a Field Set with MoonShine Json Field in PHP\nDESCRIPTION: Demonstrates initializing a MoonShine Json field with a set of inner fields including Position, Title, Value, and Active. Requires MoonShine UI components (Json, Position, Switcher, Text). The fields() method is chained to define the expected object structure for each list entry. Input is typically an array of objects; output is managed in Json-compatible storage. All necessary field classes must be imported before usage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Position;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nJson::make('Product Options', 'options')\n    ->fields([\n        Position::make(),\n        Text::make('Title'),\n        Text::make('Value'),\n        Switcher::make('Active'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MoonShine Fieldset (PHP)\nDESCRIPTION: Shows how to initialize a basic Fieldset in MoonShine. It groups an array of fields like Text and BelongsTo under a specified title for display in forms and preview mode. Requires importing necessary MoonShine field classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/fieldset.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Fields\\BelongsTo;\nuse MoonShine\\UI\\Fields\\Fieldset;\nuse MoonShine\\UI\\Fields\\Text;\n\nFieldset::make('Title', [\n    Text::make('Title'),\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Available Languages in MoonShine\nDESCRIPTION: Demonstrates different ways to configure available languages in MoonShine, including simple arrays, key-value pairs, and dynamic function-based definitions with translations.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/localization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'locales' => ['en', 'ru'],\n```\n\nLANGUAGE: php\nCODE:\n```\n'locales' => [\n    'en' => 'English',\n    'ru' => 'Russian',\n],\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->locales(['en', 'ru']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->locales([\n    'en' => 'English',\n    'ru' => 'Russian',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->locales(\n    fn() => [\n        'ru' => __('lang.russian'),\n        'en' => __('lang.english'),\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Using RangeSlider as a Filter Field in MoonShine (PHP)\nDESCRIPTION: This PHP example shows how to set up a RangeSlider as a filter input for a single database field within the MoonShine framework. The make method specifies both the label ('Age') and the column name ('age'), mapping the slider's value directly to a single table attribute for range-based querying. The only dependency is the MoonShine\\UI\\Fields\\RangeSlider class. The fromTo method is not required here, as filtering applies to one field, which serves as both the input and the filter parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/range-slider.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\RangeSlider;\n\nRangeSlider::make('Age', 'age')\n```\n\n----------------------------------------\n\nTITLE: Configuring Colors in MoonShine PHP ServiceProvider\nDESCRIPTION: This PHP snippet demonstrates how to use the `ColorManager` within the ServiceProvider's `boot` method to customize the visual theme colors of the MoonShine panel using hex color codes for various elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\n\n// ...\n\npublic function boot(\n    CoreContract $core,\n    ColorManagerContract $colors\n): void\n{\n    $colors\n        ->background('#A3C3D9')\n        ->content('#A3C3D9')\n        ->tableRow('#AE76A6')\n        ->dividers('#AE76A6')\n        ->borders('#AE76A6')\n        ->buttons('#AE76A6')\n        ->primary('#CCD6EB')\n        ->secondary('#AE76A6');\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Assets in MoonShine PHP ServiceProvider\nDESCRIPTION: This PHP snippet illustrates how to use the `AssetManager` in the ServiceProvider's `boot` method to inject custom CSS or JavaScript assets globally into the MoonShine panel. It injects inline CSS using `InlineCss::make()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\AssetManager\\AssetManagerContract;\n\n// ...\n\npublic function boot(\n    CoreContract $core,\n    AssetManagerContract $assets\n): void\n{\n    $assets->add([\n        InlineCss::make('body {background: red;}')\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Menu Mode in MoonShine using PHP\nDESCRIPTION: Enables the horizontal (top bar) layout mode for the MoonShine Menu by chaining the top() method after creation with make(). This modifies the menu rendering to display as a horizontal menu typically suitable for a top navigation bar. This setting is useful when a different layout orientation is needed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/menu.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nMenu::make()->top()\n```\n\n----------------------------------------\n\nTITLE: Nested Json Fields Using MoonShine in PHP\nDESCRIPTION: Illustrates nested Json field definitions by creating a parent 'Products' field, each containing nested 'Prices' Json object fields. Demonstrates usage of the object() method at the nested level and chaining fields for complex structures. Requires relevant MoonShine UI Field classes (Json, Text, Number). Ensures hierarchical JSON output.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Products', 'products')\n    ->fields([\n        Text::make('Name', 'name'),\n        Json::make('Prices', 'prices')\n            ->fields([\n                Number::make('Wholesale price', 'wholesale_price'),\n                Number::make('Retail price', 'retail_price'),\n            ])\n            ->object(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Rules to MoonShine Resource - PHP\nDESCRIPTION: This snippet defines validation rules inside the rules() method for the User model resource. It validates name as required, email as required and unique ignoring the current item, and adds complex conditional password validations requiring minimum length and confirmation fields. It handles new records and updates with different password requirements. It depends on Laravel's validation system including the Rule class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function rules(mixed $item): array\n{\n    return [\n        'name' => 'required',\n        'email' => [\n            'sometimes',\n            'bail',\n            'required',\n            'email',\n            Rule::unique('users', 'email')->ignore($item->id),\n        ],\n        'password' => !$item->exists\n            ? 'required|min:6|required_with:password_repeat|same:password_repeat'\n            : 'sometimes|nullable|min:6|required_with:password_repeat|same:password_repeat',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumbs in MoonShine Resource (PHP)\nDESCRIPTION: This snippet demonstrates overriding default breadcrumbs for a form page within a MoonShine `ModelResource`. It utilizes the `onLoad` lifecycle hook, called after the resource loads, to access the associated form page via `getFormPage()` and set custom breadcrumbs using the `breadcrumbs()` method. The method accepts an associative array where keys are URLs and values are the displayed labels; '#' is used for non-linked items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/custom-breadcrumbs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MoonShineUserResource extends ModelResource\n{\n    // ...\n\n    protected function onLoad(): void\n    {\n        parent::onLoad();\n\n        $this->getFormPage()->breadcrumbs([\n            '/custom' => 'Custom',\n            '#' => $this->getTitle(),\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Notifications using MoonShine.ui.toast\nDESCRIPTION: This snippet demonstrates the use of `MoonShine.ui.toast()` to display toast notifications in the admin panel. It takes a message string and a type (e.g., 'success') as parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.ui.toast('Hello world', 'success')\n```\n\n----------------------------------------\n\nTITLE: Defining a BelongsTo Field\nDESCRIPTION: This snippet demonstrates the basic usage of the `BelongsTo` field.  It requires the `BelongsTo` class and the appropriate `ModelResource` for the related model. The field displays a select input allowing the user to choose an item from the related resource. The `$label` defines the field's title, `$relationName` specifies the relationship, `$formatted` customizes the display value, and `$resource` specifies the related resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make(\n    Closure|string $label,\n    ?string $relationName = null,\n    Closure|string|null $formatted = null,\n    ModelResource|string|null $resource = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsToMany Inline Display in MoonShine PHP\nDESCRIPTION: Illustrates how to use the `inLine()` method with closures to define a custom separator, render related items as colored badges, and create links to detail pages for each item. This requires importing `Badge` and `Link` components from `MoonShine\\UI\\Components` and defining closures for badge rendering and link generation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Components\\Badge;\nuse MoonShine\\UI\\Components\\Link;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->inLine(\n        separator: ' ',\n        badge: fn($model, $value) => Badge::make((string) $value, 'primary'),\n        link: fn(Property $property, $value, $field): string|Link => Link::make(\n            app(CategoryResource::class)->getDetailPageUrl($property->id),\n            $value\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding TwoFactorAuthenticatable Trait\nDESCRIPTION: This snippet demonstrates how to add the `MoonShine\\TwoFactor\\Traits\\TwoFactorAuthenticatable` trait to the user model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\TwoFactor\\Traits\\TwoFactorAuthenticatable;\n\nfinal class MoonshineUser extends \\MoonShine\\Laravel\\Models\\MoonshineUser\n{\n    use TwoFactorAuthenticatable;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to MoonShine Admin Menu in Layout Class Using PHP\nDESCRIPTION: This PHP snippet illustrates how to customize the admin panel menu layout in MoonShine by declaring menu groups and items within a 'CompactLayout' subclass. It includes importing pertinent resource classes and uses 'MenuGroup' and 'MenuItem' to define navigational structure, connecting menu entries to resource classes that provide admin UI sections. This method requires understanding of MoonShine's layout and menu manager components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\PostResource;\n\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make(__('moonshine::ui.resource.system'), [\n                MenuItem::make(\n                    __('moonshine::ui.resource.admins_title'),\n                    MoonShineUserResource::class\n                ),\n                MenuItem::make(\n                    __('moonshine::ui.resource.role_title'),\n                    MoonShineUserRoleResource::class\n                ),\n            ]),\n            MenuItem::make('Posts', PostResource::class),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop Sorting\nDESCRIPTION: This snippet shows how to enable drag-and-drop sorting for the items within the RelationRepeater field. The `reorderable()` method is called with an endpoint URL, which is used to persist the new order after dragging. This enables users to reorder related records directly within the form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->reorderable(url: '/endpoint')\n```\n\n----------------------------------------\n\nTITLE: Enabling Increment/Decrement Buttons on Number Field in MoonShine - PHP\nDESCRIPTION: Adds UI buttons for increasing or decreasing the numeric value directly on a Number field using the buttons() method. This enhances user experience by allowing quick adjustments without manual input. Dependency: MoonShine's Number field class. Input: no parameters required. Output: Number field with +/- buttons visible.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Number;\n\nNumber::make('Rating')\n    ->buttons()\n```\n\n----------------------------------------\n\nTITLE: Generating Custom File Names\nDESCRIPTION: Create custom file names for uploaded files using the customName() method with a closure that generates the name based on the uploaded file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Str;\n\nFile::make('File', 'file')\n    ->customName(fn(UploadedFile $file, Field $field) =>  Str::random(10) . '.' . $file->extension())\n```\n\n----------------------------------------\n\nTITLE: Grouping Options in Select Field (PHP Array)\nDESCRIPTION: This snippet demonstrates how to group options in a Select field using a multi-dimensional array. This allows for a more organized and user-friendly presentation of options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('City', 'city_id')\n    ->options([\n        'Italy' => [\n            1 => 'Rome',\n            2 => 'Milan',\n        ],\n        'France' => [\n            3 => 'Paris',\n            4 => 'Marseille',\n        ]\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using setData() for Automatic Button Data Filling (PHP)\nDESCRIPTION: Describes the mechanism of automatically populating ActionButtons with data from models or request context using the setData() method, including hooks for pre- and post-processing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->setData(?DataWrapperContract $data = null)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->onBeforeSet(fn(?DataWrapperContract $data, ActionButton $ctx) => $data)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->onAfterSet(function(?DataWrapperContract $data, ActionButton $ctx): void {\n        // logic\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Action Button to MoonShine Table (PHP)\nDESCRIPTION: This code shows how to add a bulk action button to a MoonShine table. This allows the action to be performed on multiple selected rows. It uses the `bulk()` method on the `ActionButton` to enable bulk functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->add(ActionButton::make('Link', '/endpoint')->bulk());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CRUD Pages in MoonShine ModelResource (PHP)\nDESCRIPTION: Defines the `pages()` method within a MoonShine `ModelResource` (e.g., `PostResource`) to associate specific page classes (index, form, detail) with the resource. These page classes handle the display and interaction for CRUD operations. Dependencies include the page classes (`PostIndexPage`, `PostFormPage`, `PostDetailPage`) and the base `ModelResource`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Resources;\n\nuse App\\MoonShine\\Pages\\Post\\PostIndexPage;\nuse App\\MoonShine\\Pages\\Post\\PostFormPage;\nuse App\\MoonShine\\Pages\\Post\\PostDetailPage;\nuse MoonShine\\Laravel\\Resources\\ModelResource; // [tl! collapse:end]\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function pages(): array\n    {\n        return [\n            PostIndexPage::class,\n            PostFormPage::class,\n            PostDetailPage::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using relatedLink() with conditional display\nDESCRIPTION: This code shows how to conditionally show the related link using a closure passed to the `relatedLink()` method. This provides dynamic control over the link display based on conditions like the number of related items.  It imports dependencies including `HasMany` and `Field`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink(condition: function (int $count, Field $field): bool {\n        return $count > 10;\n    })\n```\n\n----------------------------------------\n\nTITLE: Pre-Render Hook with onBeforeRender() Method in PHP\nDESCRIPTION: Provides a mechanism to execute a callback before a MoonShine component is rendered by using the onBeforeRender() method. It accepts a Closure that receives the component instance as a parameter, allowing manipulation or setup before the rendering phase. This facilitates dynamic adjustments to component state or data immediately prior to rendering. Requires the Closure type and Box component context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(static $ctx): void  $onBeforeRender\n */\nonBeforeRender(Closure $onBeforeRender)\n```\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title', [])\n    ->onBeforeRender(function(Box $ctx) {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Alert with the Blade Component\nDESCRIPTION: Shows how to render a basic alert using the `x-moonshine::alert` Blade component. The content of the alert is placed between the opening and closing tags. Requires the MoonShine framework setup with Blade components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::alert>Alert</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Query for BelongsTo Options (Method Signature) in MoonShine (PHP)\nDESCRIPTION: Presents the signature for the `valuesQuery()` method. It accepts a closure that receives the Eloquent query builder (`Builder`) and the field instance (`Field`), allowing modification of the query used to retrieve the options for the `BelongsTo` dropdown.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nvaluesQuery(Closure $callback)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events using $dispatch\nDESCRIPTION: This snippet uses the Alpine.js `$dispatch` magic method to dispatch an event. This allows components to trigger events easily, which enables interaction with other parts of the application in a declarative way.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nthis.$dispatch('modal_toggled:my-modal')\n```\n\n----------------------------------------\n\nTITLE: Setting Component Attributes in PHP\nDESCRIPTION: Defines the setAttribute() method which adds or modifies an HTML attribute on a component. Requires a string attribute name and a string or boolean value. Used to directly assign attribute values such as data identifiers on components, enabling precise DOM attribute control.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsetAttribute(\n    string $name,\n    string|bool $value\n)\n\n$component->setAttribute('data-id', '123');\n```\n\n----------------------------------------\n\nTITLE: Defining Policy for MoonShine Resource - PHP\nDESCRIPTION: This code snippet presents an example of a Laravel Policy class specifically for a MoonShine resource. It defines methods to handle authorization checks such as `viewAny`, `view`, `create`, `update`, `delete`, `restore`, `forceDelete`, and `massDelete`. This policy class utilizes `HandlesAuthorization` trait and is designed to manage user access permissions for a `Post` model. Requires the `MoonShine` package and the `Laravel` framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/security/authorization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\nuse MoonShine\\Laravel\\Models\\MoonshineUser;\n\nclass PostPolicy\n{\n    use HandlesAuthorization;\n\n    public function viewAny(MoonshineUser $user)\n    {\n        return true;\n    }\n\n    public function view(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function create(MoonshineUser $user)\n    {\n        return true;\n    }\n\n    public function update(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function delete(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function restore(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function forceDelete(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function massDelete(MoonshineUser $user)\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Action Button to Index Table in MoonShine PHP\nDESCRIPTION: This snippet shows how to add a button that acts on multiple selected items (a \"bulk action\") in the index table. It uses the `indexButtons` method and applies the `->bulk()` method to the `ActionButton`. The button will appear in the header when items are selected. Requires `MoonShine\\UI\\Components\\ActionButton` and `MoonShine\\Support\\ListOf`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(\n            ActionButton::make('Link', '/endpoint')\n                ->bulk()\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Meta Tag with CSRF Token in PHP using MoonShine\nDESCRIPTION: This snippet demonstrates how to instantiate a Meta component to generate a meta tag for CSRF token, and how to add custom attributes such as 'content'. It depends on the MoonShine’s UI Components library and is used for embedding security tokens within HTML pages.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/meta.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Meta;\n\nMeta::make('csrf-token')\n    ->customAttributes([\n        'content' => 'token',\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Using the toPage() Helper Function in PHP\nDESCRIPTION: This snippet shows how to use the `toPage()` helper function. It's designed to navigate to pages using a helper. The function accepts various parameters like page, resource, params, redirect, and fragment. The parameters allow the flexibility to specify the target page, related resource, query parameters, and redirection behavior. It can take page as class string, resource as class string and other optional parameters for navigation, like redirect to a new page immediately.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/routes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntoPage(\n    string|PageContract|null $page = null,\n    string|ResourceContract|null $resource = null,\n    array $params = [],\n    bool $redirect = false,\n    ?string $fragment = null\n)\n\n- `$page` - page or class-string of the page (optional),\n- `$resource` - resource or class-string of the resource (optional),\n- `$params` - additional query (optional),\n- `$redirect` - if necessary, redirect immediately (optional),\n- `$fragment` - URL will be used for Fragment loading (optional).\n\ntoPage(page: CustomPage::class);\ntoPage(page: IndexPage::class, resource: PostResource::class);\ntoPage(page: CustomPage::class, redirect: true);\ntoPage(page: CustomPage::class, fragment: true);\n```\n\n----------------------------------------\n\nTITLE: Adding a Dynamic Badge to a Menu Item in MoonShine PHP\nDESCRIPTION: Illustrates how to add a dynamic badge next to a menu item label using the `badge()` method, which accepts a Closure. The Closure's return value (string, int, float, or null) will be displayed as the badge content, often used to show counts or statuses.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\nuse App\\Models\\Comment;\n\nfinal class MoonShineLayout extends AppLayout\n{\n\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Comments', CommentResource::class)\n                ->badge(fn() => Comment::count())\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CardsBuilder Component in PHP\nDESCRIPTION: Demonstrates how to create an instance of the CardsBuilder class by providing an iterable of items and fields to represent data cards. This snippet requires the MoonShine\\UI\\Components\\CardsBuilder namespace. The $items parameter represents the collection of data records, and $fields specifies the individual fields or columns displayed in each card. The constructor supports both direct arrays and FieldsContract or iterable types, enabling flexibility in data and field structures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\CardsBuilder;\n\nCardsBuilder::make(iterable $items = [], FieldsContract|iterable $fields = [])\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON field with Position, Text, and Switcher in PHP\nDESCRIPTION: This code snippet demonstrates how to create a JSON field named 'Product Options' with various subfields including Position, Text, and Switcher inside a form. It shows dependencies on MoonShine UI fields such as Json, Position, Text, and Switcher, and illustrates setting up a composite form structure with multiple input types.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/position.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\\\UI\\\\Fields\\\\Json;\nuse MoonShine\\\\UI\\\\Fields\\\\Position;\nuse MoonShine\\\\UI\\\\Fields\\\\Switcher;\nuse MoonShine\\\\UI\\\\Fields\\\\Text;\n\nJson::make('Product Options', 'options')\n    ->fields([\n        Position::make(),\n        Text::make('Title'),\n        Text::make('Value'),\n        Switcher::make('Active')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to MoonShine Table (PHP)\nDESCRIPTION: This snippet demonstrates adding a custom action button to a MoonShine table. It overrides the `indexButtons()` method to include an `ActionButton` that links to a specified endpoint. This button appears after the main resource buttons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->add(ActionButton::make('Link', '/endpoint'));\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Resource Instantiation Approaches for MoonShine using PHP\nDESCRIPTION: This PHP example demonstrates the migration from direct instantiation of resource classes (using 'new') to dependency injection or application container resolution. The recommended approach is to use 'app(NameResource::class)' for better compatibility with MoonShine v3.0 and Laravel's DI system. Inputs are the fully qualified resource class names; outputs are initialized objects.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Was\nnew NameResource()\n\n// Now\n// Recommended via DI\n// or:\napp(NameResource::class)\n```\n\n----------------------------------------\n\nTITLE: Defining a Secure Password Field in MoonShine (PHP)\nDESCRIPTION: This snippet demonstrates how to define a password input using MoonShine's Password field in PHP. It requires the MoonShine\\UI\\Fields\\Password namespace and assumes the project uses Laravel with a configured Hasher implementation. The Password field masks input values in previews and encodes passwords using Laravel's hashing contract interface. The main parameter 'Password' determines the field's display label and internal name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/password.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Password;\n\nPassword::make('Password')\n```\n\n----------------------------------------\n\nTITLE: Example SDUI Response from MoonShine (JSON)\nDESCRIPTION: This JSON example provides the structure of a typical SDUI response from the MoonShine framework.  It defines the component types, their states, attributes, and child components.  This response is sent by the server after receiving a request with the X-MS-Structure header set to true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/sdui.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"Dashboard\",\n  \"components\": [\n    {\n      \"type\": \"Card\",\n      \"components\": [\n        {\n          \"type\": \"Heading\",\n          \"states\": {\n            \"level\": 1,\n            \"content\": \"Welcome to Dashboard\"\n          },\n          \"attributes\": {\n            \"class\": [\"text-2xl\", \"font-bold\"],\n            \"id\": \"dashboard-heading\"\n          }\n        },\n        {\n          \"type\": \"Text\",\n          \"states\": {\n            \"content\": \"Here's an overview of your system.\"\n          },\n          \"attributes\": {\n            \"class\": [\"mt-2\", \"text-gray-600\"]\n          }\n        }\n      ],\n      \"states\": {\n        \"title\": \"Dashboard Overview\"\n      },\n      \"attributes\": {\n        \"class\": [\"bg-white\", \"shadow\", \"rounded-lg\"],\n        \"data-card-id\": \"dashboard-overview\"\n      }\n    }\n  ],\n  \"states\": {\n    \"title\": \"Admin Dashboard\"\n  },\n  \"attributes\": {\n    \"class\": [\"container\", \"mx-auto\", \"py-6\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Link Button per Row in Index Table (PHP)\nDESCRIPTION: This PHP code demonstrates adding a custom 'Link' button to each row of the index table in a MoonShine resource. It overrides the `indexButtons` method, retrieves the default buttons, and uses `prepend` to add a new `ActionButton`. The button's URL is dynamically generated using a closure that accesses the current Eloquent `Model` instance (`$item`) to include its primary key in the link.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse Illuminate\\Database\\Eloquent\\Model;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(\n            ActionButton::make(\n                'Link',\n                fn(Model $item) => '/endpoint?id=' . $item->getKey()\n            )\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Specific Actions in HasMany Fields with MoonShine Using PHP\nDESCRIPTION: Two mutually complementary methods, activeActions() and withoutActions(), allow explicit enabling or excluding of certain CRUD actions (like view or update) within a HasMany relationship field. This fine-grained control helps shape user capabilities on related items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments')\n    ->activeActions(\n        Action::VIEW,\n        Action::UPDATE\n    );\n```\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments')\n    ->withoutActions(\n        Action::VIEW\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic (Live) Slug Field in MoonShine - PHP\nDESCRIPTION: This example illustrates setting up a reactive source field (Text::make marked as reactive) and a corresponding Slug field that updates live based on the source using the live method. This requires both the Text and Slug fields from MoonShine, and the reactive method must be called on the source field. The input is user changes to the source field; the output is an automatically and immediately updated slug. This approach depends on MoonShine's field reactivity features.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/slug.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nText::make('Title')\n    ->reactive(),\nSlug::make('Slug')\n    ->from('title')\n    ->live()\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication Pipelines in MoonShineServiceProvider\nDESCRIPTION: The example shows authentication pipelines configuration in the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$config->authPipelines([TwoFactor::class]);\n```\n\n----------------------------------------\n\nTITLE: Modifying Asset Collections Dynamically in MoonShine (PHP)\nDESCRIPTION: Demonstrates how to modify the entire collection of registered assets using a closure passed to the `modifyAssets()` method on the `AssetManager`. Allows filtering or altering assets based on criteria (like URL) before rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$assetManager->modifyAssets(function($assets) {\n    // Modify the asset collection\n    return array_filter($assets, function($asset) {\n        return !str_contains($asset->getLink(), 'remove-this');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Columns in BelongsTo Field\nDESCRIPTION: This code snippet shows how to change the column to use for a field using `onAfterFill()` method. This is particularly useful for updating the associated model columns. In this case, the code is setting the column to 'changed_category_id'.  This approach allows dynamic column adjustments during the model's lifecycle.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'Category',\n    resource: CategoryResource::class\n)\n->afterFill(\n    fn($field) => $field->setColumn('changed_category_id')\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Async Data Fetching with async() Method in CardsBuilder (PHP)\nDESCRIPTION: Describes asynchronous data refresh support by invoking 'async()' on a CardsBuilder instance. The method accepts optional URL endpoint for AJAX requests, event triggers after update, and JavaScript callbacks. The snippet exemplifies basic and event-driven async setups, requiring a unique component name via 'name()' for event identification. This facilitates loading or paginating cards without full page reloads.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n->async(\n  Closure|string|null $url = null,\n  string|array|null $events = null,\n  ?AsyncCallback $callback = null,\n)\n\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Switcher::make('Active')])\n    ->name('my-cards')\n    ->async()\n\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Switcher::make('Active')])\n    ->name('crud')\n    ->async(events: [AlpineJs::event(JsEvent::CARDS_UPDATED, 'crud')])\n```\n\n----------------------------------------\n\nTITLE: Making BelongsTo Field Nullable\nDESCRIPTION: This snippet illustrates how to allow `NULL` values in a `BelongsTo` field by using the `nullable()` method.  When `nullable()` is called, the field will include a 'NULL' option in the select dropdown, allowing users to clear the relationship. The database column must also allow null values. A closure can also be passed to define a condition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', resource: CategoryResource::class)\n    ->nullable()\n```\n\n----------------------------------------\n\nTITLE: Creating Flash Notification in PHP\nDESCRIPTION: This code snippet shows how to create a Flash notification using the `make()` method. It sets the notification key, type, whether it should be a toast, and whether it can be removed.  The `$key` parameter specifies the session key, `$type` determines the notification type (INFO, WARNING, etc.), `$withToast` controls toast display, and `$removable` indicates if the notification can be closed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/flash.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    string $key = 'alert',\n    string|FlashType $type = FlashType::INFO,\n    bool $withToast = true,\n    bool $removable = true\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing When Component in MoonShine Layout\nDESCRIPTION: Practical example showing how to use the When component in a MoonShine layout class. It conditionally renders a Profile component based on whether authentication is enabled in the configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/when.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\UI\\Components\\When;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    public function build(): Layout\n    {\n        return Layout::make([\n            // ...\n            Sidebar::make([\n                Menu::make()->customAttributes(['class' => 'mt-2']),\n                When::make(\n                    static fn() => config('moonshine.auth.enabled', true),\n                    static fn() => [Profile::make(withBorder: true)],\n                )\n            ]),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Time Input to MoonShine Date Field (PHP)\nDESCRIPTION: Extends the standard Date field to include an input for time using the `withTime()` method. This allows users to select both a date and a specific time. This method is chained onto an existing Date field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->withTime()\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Fragment Updates in PHP MoonShine\nDESCRIPTION: This snippet shows how to asynchronously update content from multiple fragments targeting different selectors. It uses ActionButton with async property to trigger updates, defines the target selectors, and creates fragments with dynamic content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/multiple-fragments-selectors.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Fragments', $this->getRouter()->getEndpoints()->toPage($this, extra: [\n    'fragment' => [\n        '.selector1' => '_content1',\n        '.selector2' => '_content2',\n    ]\n]))->async(selector: [\n    '.selector1',\n    '.selector2',\n]),\n\nDiv::make([])->class('selector1'),\nDiv::make([])->class('selector2'),\n\nFragment::make([\n    time(),\n])->name('_content1'),\n\nFragment::make([\n    time(),\n])->name('_content2')\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to a MoonShine Component Instance (PHP)\nDESCRIPTION: Shows how to attach assets directly to a specific instance of a MoonShine component (like `Box`) using the `addAssets()` method. Assets are added when the component is instantiated and configured.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\nuse MoonShine\\UI\\Components\\Layout\\Box;\n\nBox::make()->addAssets([\n    Js::make('/js/custom.js'),\n    Css::make('/css/styles.css')\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting display conditions for query tags with canSee() in PHP\nDESCRIPTION: Creates a query tag 'Post with author' with a visibility condition controlled by canSee(), which evaluates whether the current user has a specific role. It enables context-sensitive tags that appear only when certain conditions are met, enhancing UI dynamism.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\n\nQueryTag::make(\n    'Post with author', // Tag title\n    fn(Builder $query) => $query->whereNotNull('author_id')\n)\n    ->canSee(fn() => auth()->user()->moonshine_user_role_id === 1)\n```\n\n----------------------------------------\n\nTITLE: Displaying Buttons in Dropdown in MoonShine (PHP)\nDESCRIPTION: This snippet demonstrates how to display the action buttons in a MoonShine table within a dropdown menu.  It sets the `$indexButtonsInDropdown` property to `true` within the resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostResource extends ModelResource\n{\n    protected bool $indexButtonsInDropdown = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Submit Event for Alpine.js Component from PHP\nDESCRIPTION: This code shows how to create and dispatch a FORM_SUBMIT JavaScript event to a given component using AlpineJs::event, facilitating programmatic form submissions or triggering listeners in the frontend. Requires AlpineJs, JsEvent constants, and appropriate component configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nAlpineJs::event(\n    JsEvent::FORM_SUBMIT,\n    'componentName'\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading Mode in MoonShine Resource - PHP\nDESCRIPTION: Shows how to enable lazy loading mode on a MoonShine ModelResource by setting the protected $isLazy property to true. Lazy mode displays the page immediately without data, then asynchronously loads the table data afterwards.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $isLazy = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Item Buttons in HasMany Relationship Field in PHP\nDESCRIPTION: Method to customize view, edit, delete, and mass delete buttons in a HasMany field. The callback function receives all button instances and the field context, and should return an array of buttons to display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyItemButtons(\n        fn(ActionButton $detail, $edit, $delete, $massDelete, HasMany $ctx) => [$detail]\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueMetric Class Example\nDESCRIPTION: Example of creating a ValueMetric to display the count of completed orders using the class-based approach.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Metrics\\Wrapped\\ValueMetric;\n\nValueMetric::make('Completed orders')\n    ->value(fn() => Order::completed()->count())\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine OffCanvas wide method PHP\nDESCRIPTION: Shows the method signature for the `wide()` method, used to increase the width of the OffCanvas component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nwide(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Management Page with MoonShine - PHP\nDESCRIPTION: Declares ProfilePage, a class extending MoonShine\\Laravel\\Pages\\Page for editing user profiles and passwords. Dependencies include MoonShine\\UI components such as FormBuilder, Tabs, Box, and Tab, as well as layout helpers. The page displays tabs for profile and password updates, employs field validation (e.g., required for name and email), and uses form pre-filling via the current user model. Includes an extra form for secure logout using a hidden DELETE method. Inputs are user profile fields and passwords; outputs are validated form submissions for updating profile or logging out.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\AppLayout;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Tabs;\nuse MoonShine\\UI\\Components\\Tabs\\Tab;\nuse MoonShine\\UI\\Fields\\Hidden;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass ProfilePage extends Page\n{\n    protected ?string $layout = AppLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle(),\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'LoginPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            Box::make([\n                FormBuilder::make()\n                    ->class('authentication-form')\n                    ->action(route('profile.update'))\n                    ->fill(auth()->user())\n                    ->fields([\n                        Tabs::make([\n                            Tab::make(__('Profile'), [\n                                Text::make(__('Name'), 'name')->required(),\n                                Text::make('E-mail', 'email')\n                                    ->required()\n                                    ->customAttributes([\n                                        'autofocus' => true,\n                                        'autocomplete' => 'off',\n                                    ]),\n                            ]),\n                            Tab::make(__('Password'), [\n                                Password::make(__('Password'), 'password'),\n                                PasswordRepeat::make(__('Repeat password'), 'password_confirmation'),\n                            ])->active(\n                                session('errors')?->has('password') ?? false\n                            )\n                        ])\n                    ])->submit(__('Update profile'), [\n                        'class' => 'btn-primary btn-lg w-full',\n                    ]),\n            ]),\n\n            FormBuilder::make()\n                ->name('logout')\n                ->class('authentication-form')\n                ->action(route('logout'))\n                ->fields([\n                    Hidden::make('_method')->setValue('DELETE'),\n                ])->submit(__('Log out'), [\n                    'class' => 'btn-primary btn-lg w-full',\n                ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering BelongsToMany Async Search based on Form Value in MoonShine PHP\nDESCRIPTION: Demonstrates how to filter the asynchronous search query for a `BelongsToMany` field ('Cities') based on the value of another field in the same form, specifically a `Select` field for 'Country'. It utilizes the `Request` object passed to the `searchQuery` closure to access the 'country_id' value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nuse App\\MoonShine\\Resources\\CityResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id'),\n\nBelongsToMany::make('Cities', 'cities', resource: CityResource::class)\n    ->asyncSearch(\n        'title',\n        searchQuery: function (Builder $query, Request $request, Field $field): Builder {\n            return $query->where('country_id', $request->get('country_id'));\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Applying Callbacks to FormBuilder Fields with the apply Method in PHP\nDESCRIPTION: This code demonstrates invoking the apply method of FormBuilder to execute a callback on each form field, allowing batch operations such as saving models. The method accepts closures for main, default, before, and after application logic, as well as an optional flag to throw exceptions. The implementation is suitable for Laravel models and advanced field processing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$form->apply(fn(Model $item) => $item->save());\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Messages in MoonShine\nDESCRIPTION: Demonstrates how to customize validation error messages by implementing the validationMessages() method in a ModelResource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    public function validationMessages(): array\n    {\n        return [\n            'email.required' => 'Email is required'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TD Attributes in MoonShine Table (PHP)\nDESCRIPTION: This code demonstrates how to add custom attributes to the `<td>` elements of a MoonShine table using the `customWrapperAttributes()` method on a field. In this example, it sets the `width` attribute to '20%' for the 'Title' column.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Fields\\Text;\n\nprotected function indexFields(): iterable\n{\n    return [\n        // ...\n        Text::make('Title')\n            ->customWrapperAttributes(['width' => '20%']);\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using withUpdateRow Method to Simplify Async Table Row Updates in MoonShine with PHP\nDESCRIPTION: This snippet illustrates the use of the withUpdateRow method on a Switcher field to automatically trigger table row updates asynchronously. It provides a concise way to link a field to the list component's update event without manually writing event handlers.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\UI\\Fields\\ID;\\nuse MoonShine\\UI\\Fields\\Switcher;\\nuse MoonShine\\UI\\Fields\\Text;\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    protected function indexFields(): iterable\\n    {\\n        return [\\n            ID::make(),\\n            Text::make('Title'),\\n            Switcher::make('Active')\\n                ->withUpdateRow($this->getListComponentName())\\n        ];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Unless Conditional Logic in PHP\nDESCRIPTION: Illustrates the `unless` method, which is the inverse of `when`.  It executes a callback function if the given condition is `FALSE`, and optionally executes a default callback if the condition is `TRUE`. It accepts a condition, a callback for the `FALSE` case, and an optional callback for the `TRUE` case.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/import-export.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nunless(\n    $value = null,\n    callable $callback = null,\n    callable $default = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding an icon to a query tag using icon() in PHP\nDESCRIPTION: Creates a QueryTag with a label 'Post without an author' and adds an icon named 'users' using the icon() method. This enhances visual identification of tags within the UI; the snippet requires MoonShine icons documentation for further customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\n\nQueryTag::make(\n    'Post without an author',\n    fn(Builder $query) => $query->whereNull('author_id')\n)\n    ->icon('users')\n```\n\n----------------------------------------\n\nTITLE: Getting Parent ID in ResourceWithParent Implementation in PHP\nDESCRIPTION: Shows how to retrieve the parent ID using the getParentId() method in a resource with ResourceWithParent trait.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$this->getParentId();\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Entries in Json Field with Creatable and Removable Methods in MoonShine PHP\nDESCRIPTION: Demonstrates enabling dynamic addition (creatable) and removal (removable) of entries in a Json field. The creatable() method supports limiting item count and custom add buttons, while removable() allows specifying attributes for custom UI behavior. Use for interactive user lists. Dependencies include base Field contracts and, optionally, ActionButton for button customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->keyValue()\n    ->creatable(limit: 6)\n    ->removable()\n```\n\n----------------------------------------\n\nTITLE: Attaching Enum to MoonShine Field in PHP\nDESCRIPTION: This snippet demonstrates how to create an Enum field using the MoonShine framework by utilizing the Enum class and attaching a PHP enum (StatusEnum) as the source of selectable options. Dependencies include the MoonShine\\UI\\Fields\\Enum class and a user-defined StatusEnum class. The main parameter is the field name ('Status'). The output is a configured Enum field ready for inclusion in a resource or form component. Enum cast must be set on the model attribute for proper operation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/enum.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Enum;\n\nEnum::make('Status')\n    ->attach(StatusEnum::class)\n```\n\n----------------------------------------\n\nTITLE: Enable TableBuilder Search PHP\nDESCRIPTION: Adds a search input field to the table, allowing users to filter rows based on content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n->searchable()\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication\nDESCRIPTION: This snippet demonstrates how to customize authentication in `MoonShineServiceProvider`, including setting the guard, middleware, and pipelines.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->guard('admin')\n    ->authMiddleware(CustomAuthMiddleware::class)\n    ->authPipelines([\n        TwoFactorAuthentication::class,\n        PhoneVerification::class,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Autoload of MoonShine Resources - MoonShineServiceProvider PHP\nDESCRIPTION: This snippet shows how to activate resource and page autoloading in the MoonShine admin panel by calling the '$core->autoload()' method in the service provider's boot function. It requires the same dependencies as manual registration (ServiceProvider, MoonShine contracts). No parameters required; it automatically scans for resources in the designated locations. Great for dynamic admin setups in newer Laravel/MoonShine installations. No direct input; outputs a fully auto-registered set of admin resources upon service boot.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Providers;\n\nuse App\\MoonShine\\Resources\\ArticleResource;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n    ): void\n    {\n        $core->autoload();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Creation for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Basic usage of the `creatable()` method applied to a `BelongsTo` field ('Author'). This enables the inline creation feature, adding a default button to open the creation modal for the specified `AuthorResource`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make('Author', resource: AuthorResource::class)\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Password Field in MoonShine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to integrate the Password field within MoonShine by importing the Password class and creating a new instance. The field is configured for secure password input by default, using the 'type=password' HTML attribute. Dependencies include the MoonShine package and Laravel's hashing interface, ensuring that the input value is hashed when the apply() method is called. Input is a plaintext password; output is the hashed password string, with a preview displaying as asterisks (***).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/password.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Password;\n\nPassword::make('Password')\n```\n\n----------------------------------------\n\nTITLE: Fragment Select - PHP\nDESCRIPTION: This code snippet dynamically generates a `Select` field using a `Fragment` based on the value of another `Select`. The `Fragment` and the `onChangeEvent` with `AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'selects')` are used to update the select options. Requires the `Fragment`, `Select`, and `AlpineJs::event` components. The output is dynamic selects dependent on the value from the first select.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/select.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function formFields(): iterable\n{\n    $selects = [];\n    $value = request()->integer('_data.first', 1);\n\n    if($value === 1) {\n        $selects[] = Select::make('Second')->options([\n            1 => 1,\n            2 => 2,\n        ]);\n    }\n\n    if($value === 2) {\n        $selects[] = Select::make('Third')->options([\n            1 => 1,\n            2 => 2,\n        ]);\n    }\n\n    return [\n        Fragment::make([\n            Select::make('First')->options([\n                1 => 1,\n                2 => 2,\n            ])->setValue($value)->onChangeEvent(\n                AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'selects')\n            ),\n\n            ...$selects,\n        ])->name('selects'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Action Buttons in MoonShine Tables (PHP)\nDESCRIPTION: Demonstrates how to add, prepend, or exclude buttons in table actions using ActionButton components, with support for bulk actions and dropdown display options. Requires MoonShine's ListOf and ActionButton classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->add(ActionButton::make('Link', '/endpoint'));\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(ActionButton::make('Link', '/endpoint'));\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->except(fn(ActionButton $btn) => $btn->getName() === 'resource-delete-button');\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->empty()\n        ->add(ActionButton::make('Link', '/endpoint'));\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->add(ActionButton::make('Link', '/endpoint')->bulk());\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\n// To display buttons in a dropdown instead of inline\n// in your resource:\n// protected bool $indexButtonsInDropdown = true;\n//\n// Then in your resource class:\n// \n// class YourResource extends ModelResource {\n//     protected bool $indexButtonsInDropdown = true;\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Changing Component View with customView() Method in PHP\nDESCRIPTION: Shows how to modify the Blade view template used by a MoonShine component through the customView() method, which supports a fluent interface. This method accepts a string specifying the view path and an optional array of data to pass to the view. It enables customization of the component's rendered output by specifying alternative templates. Requires the Box component and Blade views to be available.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncustomView(\n    string $view,\n    array $data = []\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title', [])\n    ->customView('component.my-custom-block')\n```\n\n----------------------------------------\n\nTITLE: Reindexing Form Input Names with MoonShine TableBuilder in PHP\nDESCRIPTION: The `reindex()` method applies index values to the `name` attributes of form elements in table rows to support dynamic addition or removal of rows in editable tables. This ensures inputs have indexed names like `title[1]` to maintain correct data binding. It is especially relevant when using `creatable` or `removable` modes to handle new or deleted rows while keeping form data consistent.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n->reindex()\n```\n\n----------------------------------------\n\nTITLE: Dependency injection of MoonShineNotificationContract to send notifications in PHP\nDESCRIPTION: This snippet illustrates how to inject the MoonShineNotificationContract via dependency injection within a method. It demonstrates calling the notify method with a message, enabling notifications to be sent without static method calls, supporting flexible implementation. It's useful for integrating notification logic within class methods in Laravel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/notifications.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Contracts\\Notifications\\MoonShineNotificationContract;\n\npublic function di(MoonShineNotificationContract $notification)\n{\n    $notification->notify(\n        'Hello'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MoonShine Blade Layout Template\nDESCRIPTION: This snippet demonstrates establishing a comprehensive Blade layout for MoonShine, including layout, head, body, sidebar, header, and content sections. It utilizes Blade components with props for customization, dependencies on CSS and JS assets via Vite, and dynamic class bindings. The structure supports a responsive and customizable admin panel interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_13\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout>\n    <x-moonshine::layout.html :with-alpine-js=\"true\" :with-themes=\"true\">\n        <x-moonshine::layout.head>\n            <x-moonshine::layout.meta name=\"csrf-token\" :content=\"csrf_token()\"/>\n            <x-moonshine::layout.favicon />\n            <x-moonshine::layout.assets>\n                @vite([\n                    'resources/css/main.css',\n                    'resources/js/app.js',\n                ], 'vendor/moonshine')\n            </x-moonshine::layout.assets>\n        </x-moonshine::layout.head>\n\n        <x-moonshine::layout.body>\n            <x-moonshine::layout.wrapper>\n                <x-moonshine::layout.sidebar :collapsed=\"true\">\n                    <x-moonshine::layout.div class=\"menu-heading\">\n                        <x-moonshine::layout.div class=\"menu-heading-logo\">\n                            <x-moonshine::layout.logo href=\"/\" logo=\"/logo.png\" :minimized=\"true\"/>\n                        </x-moonshine::layout.div>\n\n                        <x-moonshine::layout.div class=\"menu-heading-actions\">\n                            <x-moonshine::layout.div class=\"menu-heading-mode\">\n                                <x-moonshine::layout.theme-switcher/>\n                            </x-moonshine::layout.div>\n                            <x-moonshine::layout.div class=\"menu-heading-burger\">\n                                <x-moonshine::layout.burger/>\n                            </x-moonshine::layout.div>\n                        </x-moonshine::layout.div>\n\n                    </x-moonshine::layout.div>\n\n                    <x-moonshine::layout.div class=\"menu\" ::class=\"asideMenuOpen && '_is-opened'\">\n                        <x-moonshine::layout.menu :elements=\"[['label' => 'Dashboard', 'url' => '/'], ['label' => 'Section', 'url' => '/section']]\"/>\n                    </x-moonshine::layout.div>\n                </x-moonshine::layout.sidebar>\n\n                <x-moonshine::layout.div class=\"layout-page\">\n                    <x-moonshine::layout.header>\n                        <x-moonshine::breadcrumbs :items=\"['#' => 'Home']\"/>\n                        <x-moonshine::layout.search placeholder=\"Search\" />\n                        <x-moonshine::layout.locales :locales=\"collect()\"/>\n                    </x-moonshine::layout.header>\n\n                    <x-moonshine::layout.content>\n                        <article class=\"article\">\n                            Your content\n                        </article>\n                    </x-moonshine::layout.content>\n                </x-moonshine::layout.div>\n            </x-moonshine::layout.wrapper>\n        </x-moonshine::layout.body>\n    </x-moonshine::layout.html>\n</x-moonshine::layout>\n```\n\n----------------------------------------\n\nTITLE: Replacing Sidebar with TopBar in MoonShine CompactLayout Using PHP build() Method\nDESCRIPTION: This PHP code defines a custom layout that extends `CompactLayout` and overrides the `build()` method to configure the layout structure. It replaces the Sidebar component with a TopBar component by commenting out Sidebar and adding TopBar in the component tree within a `Layout` builder. The method also configures HTML attributes, Alpine.js, and theme support. The output is a structured `Layout` instance representing the page layout hierarchy. Developers must ensure correct import of layout and UI component classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    // ...\n\n    public function build(): Layout\n    {\n        return Layout::make([\n            Html::make([\n                $this->getHeadComponent(),\n                Body::make([\n                    Wrapper::make([\n                        $this->getTopBarComponent(),\n                        //$this->getSidebarComponent(),\n                        Div::make([\n                            Flash::make(),\n                            $this->getHeaderComponent(),\n\n                            Content::make([\n                                Components::make(\n                                    $this->getPage()->getComponents()\n                                ),\n                            ]),\n\n                            $this->getFooterComponent(),\n                        ])->class('layout-page'),\n                    ]),\n                ])->class('theme-minimalistic'),\n            ])\n                ->customAttributes([\n                    'lang' => $this->getHeadLang(),\n                ])\n                ->withAlpineJs()\n                ->withThemes(),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Simple Table using Blade Component Blade\nDESCRIPTION: Uses the MoonShine Blade component 'x-moonshine::table' with the ':simple=\"true\"' parameter to render a simplified view of the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_40\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::table\n    :simple=\"true\"\n    :columns=\"[\n        '#', 'First', 'Last', 'Email'\n    ]\"\n    :values=\"[\n        [1, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [2, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [3, fake()->firstName(), fake()->lastName(), fake()->safeEmail()]\n    ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding onChange Event to Select Field (PHP)\nDESCRIPTION: This snippet demonstrates how to trigger events when the value of a Select field changes using the `onChangeEvent()` method. It includes an example of using AlpineJs to trigger a fragment update.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n    ->onChangeEvent(\n        AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'selects')\n    ),\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal and Button in modalMode()\nDESCRIPTION: Uses closure parameters modifyButton and modifyModal to customize the appearance and behavior of the action button and modal window inside modalMode(). Allows setting properties like warnings or disabling auto-close.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', 'comment', resource: CommentResource::class)\n    ->modalMode(\n        modifyButton: function (ActionButtonContract $button, HasOne $ctx) {\n            $button->warning();\n            return $button;\n        },\n        modifyModal: function (Modal $modal, ActionButtonContract $ctx) {\n            $modal->autoClose(false);\n            return $modal;\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Name Display in PHP\nDESCRIPTION: This snippet allows the modification of the display names of the files, without changing their original names, using the `names()` method. It takes a Closure, which accepts filename and index as arguments. MoonShine framework is a dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File', 'file')\n    ->names(fn(string $filename, int $index = 0) => 'File ' . $index + 1)\n```\n\n----------------------------------------\n\nTITLE: Grouping Fields Using StackFields in PHP\nDESCRIPTION: Demonstrates how to create a StackFields instance that groups multiple fields together for rendering in a preview display. Requires the MoonShine UI and Laravel field classes. The key method is 'fields()', which accepts an array of field components like Text and BelongsTo for grouping. Output is a composite field group that visually organizes related fields under a common title.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/stack-fields.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\BelongsTo;\nuse MoonShine\\UI\\Fields\\StackFields;\nuse MoonShine\\UI\\Fields\\Text;\n\nStackFields::make('Title')->fields([\n    Text::make('Title'),\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Using Content Component in Blade Template\nDESCRIPTION: This snippet shows how to use the `Content` component within a Blade template.  It utilizes the `<x-moonshine::layout.content>` Blade component to wrap the content.  It is assumed that the `moonshine` namespace and `layout.content` component are registered within the Blade configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/content.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.content>\n    <article class=\"article\">\n        Content\n    </article>\n</x-moonshine::layout.content>\n```\n\n----------------------------------------\n\nTITLE: Making a BelongsTo Field Nullable in MoonShine (PHP)\nDESCRIPTION: Shows how to apply the `nullable()` method to a `BelongsTo` field definition. This adds an option to select 'null' or leave the field empty. The corresponding foreign key column in the database table must also be defined as nullable.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', resource: CategoryResource::class)\n    ->nullable()\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional MoonShine Fieldset Fields (PHP)\nDESCRIPTION: Demonstrates creating a MoonShine Fieldset where the displayed fields depend on a runtime condition. A callback function receives the context and returns different arrays of fields (e.g., Date, LineBreak, Email) based on the condition, allowing for dynamic form structures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/fieldset.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFieldset::make('Stack', fn(StackFields $ctx) => $ctx->getData()?->getOriginal()->id === 3 ? [\n        Date::make('Creation date', 'created_at'),\n    ] : [\n        Date::make('Creation date', 'created_at'),\n        LineBreak::make(),\n        Email::make('Email', 'email'),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Behavior in BelongsTo Fields Using PHP\nDESCRIPTION: Explains overriding the default link behavior in a BelongsTo relationship field, which usually navigates to the edit page of the linked resource. The link() method accepts callbacks to customize the URL, label, icon, and whether the link opens in a new tab. The provided example uses closures to generate a detail page URL and display name dynamically, sets an icon, and makes the link open in a new tab. Dependencies include CategoryResource and the BelongsTo field class, and inputs include the current field value and context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CategoryResource;\\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\\n\\nBelongsTo::make(\\n    'Category',\\n    'category',\\n    resource: CategoryResource::class,\\n)\\n->link(\\n    link: fn(string $value, BelongsTo $ctx) => $ctx->getResource()->getDetailPageUrl($ctx->getData()->getKey()),\\n    name: fn(string $value) => $value,\\n    icon: 'users',\\n    blank: true,\\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying TableBuilder in MoonShine HasMany Relationship Using PHP\nDESCRIPTION: This example shows usage of modifyTable() to customize the TableBuilder instance used for preview and form rendering of HasMany fields. The closure receives the TableBuilder and a boolean indicating preview mode, allowing the addition of custom HTML attributes or styling conditionally to the table display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyTable(\n        fn(TableBuilder $table, bool $preview) => $table\n            ->when($preview, fn(TableBuilder $tbl) => $tbl->customAttributes(['style' => 'background: blue']))\n            ->unless($preview, fn(TableBuilder $tbl) => $tbl->customAttributes(['style' => 'background: green']))\n    );\n```\n\n----------------------------------------\n\nTITLE: Integrating MoonShine Page Rendering with Laravel Fortify in PHP\nDESCRIPTION: Demonstrates using `Fortify::loginView()` with a closure that resolves a MoonShine `Page` instance (e.g., `ProfilePage`) via Laravel's service container (`app()`). This allows a MoonShine page to serve as a Fortify view, like the login page. Depends on Laravel Fortify.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nFortify::loginView(static fn() => app(ProfilePage::class));\n```\n\n----------------------------------------\n\nTITLE: Registering BelongsTo Relationship Field in MoonShine PHP Resource\nDESCRIPTION: Registers the Eloquent BelongsTo relationship as a field within a MoonShine Resource's formFields method. This allows the relationship to be managed directly in the MoonShine admin panel, displaying related data and enabling selection of the related model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/faq.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\n// In MoonShine PostResource\npublic function formFields(): array\n{\n    return [\n        // ...\n        BelongsTo::make('Author', 'author', AuthorResource::class),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Display with Custom View\nDESCRIPTION: The `customView()` method allows you to override the default view associated with a field. This provides flexibility in customizing the rendering of a field. It accepts a string representing the view path and an optional array of data to pass to the view.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ncustomView(string $view, array $data = [])\n```\n\n----------------------------------------\n\nTITLE: Set TableBuilder Row Click Action PHP\nDESCRIPTION: Configures an action to be triggered when a table row is clicked. The example sets the action to trigger the 'EDIT' functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n->clickAction(ClickAction::EDIT)\n```\n\n----------------------------------------\n\nTITLE: Removing Delete Button from MoonShine Table (PHP)\nDESCRIPTION: This code shows how to remove the standard delete button from the action buttons in a MoonShine table. It uses the `except` method with a closure to identify and exclude the delete button based on its name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->except(fn(ActionButton $btn) => $btn->getName() === 'resource-delete-button');\n}\n```\n\n----------------------------------------\n\nTITLE: Form and Table Interaction with Async Events in PHP\nDESCRIPTION: Demonstrates how to create a form that updates a table and resets itself upon successful submission using FormBuilder and TableBuilder with async events.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/form-with-events.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make(route('form-table.store'))\n    ->fields([\n        Text::make('Title')\n    ])\n    ->name('main-form')\n    ->async(events: [\n        AlpineJs::event(JsEvent::TABLE_UPDATED, 'main-table'),\n        AlpineJs::event(JsEvent::FORM_RESET, 'main-form')\n    ]),\n\nTableBuilder::make()\n    ->fields([\n        ID::make(),\n        Text::make('Title'),\n        Textarea::make('Body'),\n    ])\n    ->name('main-table')\n    ->async()\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Application Logic with onApply example\nDESCRIPTION: This example demonstrates how to customize the `onApply` method of a field.  It uses the `onApply()` method to store the content of a file field to the database, handling the value when the field has data. It uses Laravel's Storage facade for storing a file and updates the database model with the path. It demonstrates how to handle file uploads during the apply process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Storage;\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Thumbnail by link', 'thumbnail')\n    ->onApply(function(Model $item, $value, Field $field) {\n        $path = 'thumbnail.jpg';\n\n        if ($value) {\n            $item->thumbnail = Storage::put($path, file_get_contents($value));\n        }\n\n        return $item;\n    })\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine via Composer\nDESCRIPTION: Command to install the MoonShine package using Composer dependency manager.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/moonshine\n```\n\n----------------------------------------\n\nTITLE: Configuring Password and PasswordRepeat Fields in MoonShine (PHP)\nDESCRIPTION: This snippet shows usage of both Password and PasswordRepeat MoonShine field classes for password entry and confirmation. It imports the required classes, with PasswordRepeat inheriting from Password, serving as a confirmation field for validation but not modifying data on apply(). Both fields require at least the MoonShine admin framework and PHP. Expected input is user-entered passwords; PasswordRepeat is used to ensure that the user correctly confirms their password. This setup is standard in user registration or password update forms in Laravel applications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/password.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\n\nPassword::make('Password', 'password'),\nPasswordRepeat::make('Password repeat', 'password_repeat')\n```\n\n----------------------------------------\n\nTITLE: Adding Password with Confirmation in MoonShine (PHP)\nDESCRIPTION: This snippet illustrates registering both a Password and PasswordRepeat field using MoonShine in a PHP application. It requires import of both MoonShine\\UI\\Fields\\Password and MoonShine\\UI\\Fields\\PasswordRepeat classes. PasswordRepeat acts as a confirmation, ensuring users re-enter their password for verification, but does not modify data upon apply(). The parameters specify each field's label and underlying form key: 'Password' for the main field and 'Password repeat' for confirmation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/password.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\n\nPassword::make('Password', 'password'),\nPasswordRepeat::make('Password repeat', 'password_repeat')\n```\n\n----------------------------------------\n\nTITLE: Including Vite Assets in MoonShine Default Theme (Blade)\nDESCRIPTION: Shows how to include CSS and JS assets processed by Vite within the default MoonShine layout using the `<x-moonshine::layout.assets>` Blade component and the `@vite` directive, specifying the build path.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.assets>\n    @vite([\n        'resources/css/main.css',\n        'resources/js/app.js',\n    ], 'vendor/moonshine')\n</x-moonshine::layout.assets>\n```\n\n----------------------------------------\n\nTITLE: Overriding Active Actions in Resource\nDESCRIPTION: This snippet shows how to modify the active actions available on a resource. The example disables VIEW and MASS_DELETE actions using `except()`.  It demonstrates overriding the `activeActions()` method within a resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\Laravel\\Enums\\Action;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function activeActions(): ListOf\n    {\n        return parent::activeActions()\n            ->except(Action::VIEW, Action::MASS_DELETE)\n            // ->only(Action::VIEW)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Handler in MoonShine Resource - PHP\nDESCRIPTION: This PHP snippet shows how to register a custom Handler within a MoonShine resource by overriding the handlers() method in the resource class. The example extends ModelResource and uses the parent handler list, adding an instance of the custom Handler. Once registered, a button to trigger the Handler action is automatically displayed on the resource's index page UI. This integration requires the custom Handler class to be defined beforehand and properly imported.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/handlers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostResource extends ModelResource\\n{\\n    protected function handlers(): ListOf\\n    {\\n        return parent::handlers()->add(new MyCustomHandler());\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Menu Items without Policy in PHP\nDESCRIPTION: This snippet shows how to conditionally display a menu item based on the user's role, specifically checking if the user is a superuser. It uses the `isSuperUser()` method on the user object. The `MenuItem` is added based on the user role. The prerequisite is that a user model and a way to determine a user's role must be in place, like using a direct role check to determine if the current user is a superuser. The method returns an array of menu items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/menu-authorization.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function menu(): array\n{\n    $menu = [\n        MenuItem::make('Articles', ArticleResource::class),\n    ];\n\n    if (request()->user()->isSuperUser()) {\n        $menu[] = MenuItem::make(\n            'Admins',\n            MoonShineUserResource::class\n        );\n    }\n\n    return $menu;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Middleware in MoonShineServiceProvider\nDESCRIPTION: This code snippet shows how to override, add, or exclude middleware using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->middleware(['web', 'auth'])\n    ->addMiddleware('custom-middleware')\n    ->exceptMiddleware(['auth']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Content Component in PHP\nDESCRIPTION: Example demonstrating the instantiation of the `Content` component using its static `make` method in PHP. It requires importing the `Content` class and potentially other component classes like `Title` and `Components`. The method receives an array of component instances, typically retrieved from the current page context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/content.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Content;\n\nContent::make([\n    Title::make(\n        $this->getPage()->getTitle()\n    ),\n\n    Components::make(\n        $this->getPage()->getComponents()\n    ),\n])\n```\n\n----------------------------------------\n\nTITLE: Toggling a Modal with ActionButton in PHP\nDESCRIPTION: This code snippet illustrates how to use the `ActionButton` component to toggle a modal open or closed. It demonstrates both synchronous and asynchronous toggling using `toggleModal()` and `async()` methods. This snippet relies on the `MoonShine\\UI\\Components\\ActionButton` and `MoonShine\\UI\\Components\\Modal` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nModal::make(\n    'Заголовок',\n    'Содержимое',\n)\n    ->name('my-modal'),\n\nActionButton::make('Показать модальное окно')\n    ->toggleModal('my-modal')\n\n// или асинхронно\nActionButton::make(\n    'Показать модальное окно',\n    '/endpoint'\n)\n    ->async(events: [AlpineJs::event(JsEvent::MODAL_TOGGLED, 'my-modal')])\n```\n\n----------------------------------------\n\nTITLE: Extending MoonShine Components with Macroable Trait in PHP\nDESCRIPTION: Describes use of the Illuminate\\Support\\Traits\\Macroable trait allowing MoonShine components to be extended with additional methods dynamically through macro() and mixin(). Macro allows defining individual new methods with closures attached to the component class, while mixin can apply all methods of a given class. This pattern supports enhancing components without subclassing. Requires proper registration of macros or mixins before usage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMoonShineComponent::macro('myMethod', fn() => /*реализация*/)\n\nBox::make()->myMethod()\n```\n\nLANGUAGE: php\nCODE:\n```\n// для всех\nMoonShineComponent::mixin(new MyNewMethods())\n\n// для конкретного\nBox::mixin(new MyNewMethods())\n```\n\n----------------------------------------\n\nTITLE: Managing the Active Page using PHP\nDESCRIPTION: This code illustrates how to get and set the active page for a `ModelResource` object, useful if you have custom controllers. The `getActivePage()` method retrieves the current active page. The `setActivePage()` method is used to change the active page. The method `getActivePage()` retrieves the current active page, and it will return null if there's no active page. The methods can be used to determine if the current page is a specific type of page, like an index, form, or detail page, by using the instanceof operator.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/routes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$resource->getActivePage() // ?PageContract\n\nif($resource->getActivePage() instanceof IndexPage)\n\nif($resource->getActivePage() instanceof FormPage)\n\nif($resource->getActivePage() instanceof DetailPage)\n```\n\nLANGUAGE: php\nCODE:\n```\n$resource->setActivePage(\n    $resource->getIndexPage()\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Redirect After Modifications in HasOne\nDESCRIPTION: Defines a redirection route after saving, adding, or deleting the related resource by using redirectAfter() with a closure that returns a route. Dependencies are MoonShine's HasOne class and route helper.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', resource: CommentResource::class)\n    ->redirectAfter(fn(int $parentId) => route('home'))\n```\n\n----------------------------------------\n\nTITLE: Defining ActionButton make Method Signature PHP\nDESCRIPTION: Documents the method signature for creating a new ActionButton instance. It explains the required label, optional URL, and optional data parameters used during instantiation. Requires the DataWrapperContract dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\n\nmake(\n    Closure|string $label,\n    Closure|string $url = '#',\n    ?DataWrapperContract $data = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding onChange Logic with URL (PHP)\nDESCRIPTION: This snippet demonstrates how to add logic that triggers when a field's value changes, using `onChangeUrl()`. It makes an asynchronous HTTP request to the specified URL when the field's value changes.  Parameters include the URL, HTTP method, events, selector, and callback.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nSwitcher::make('Active')\n    ->onChangeUrl(fn() => '/endpoint')\n```\n\nLANGUAGE: php\nCODE:\n```\nSwitcher::make('Active')\n    ->onChangeUrl(fn() => '/endpoint', selector: '#my-selector')\n```\n\n----------------------------------------\n\nTITLE: Triggering Fragment Updates on Form Submission\nDESCRIPTION: This snippet illustrates how to make an asynchronous form and trigger a fragment update event upon successful submission, integrating AlpineJs event handling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nFormBuilder::make()->async(events: AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'fragment-name'))\n```\n\n----------------------------------------\n\nTITLE: Adding Top Buttons to Index Page in MoonShine PHP\nDESCRIPTION: This snippet shows how to add custom buttons to the top of a resource's index page using the `topButtons` method. It demonstrates adding a \"Refresh\" button that triggers a JavaScript event to update the table. The method should return a `ListOf` `ActionButton` instances, usually by adding to the parent's list. Requires `MoonShine\\Support\\ListOf`, `MoonShine\\UI\\Components\\ActionButton`, `MoonShine\\Support\\AlpineJs`, and `MoonShine\\Support\\Enums\\JsEvent`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function topButtons(): ListOf\n{\n    return parent::topButtons()\n        ->add(\n            ActionButton::make('Refresh', '#')\n                ->dispatchEvent(\n                    AlpineJs::event(JsEvent::TABLE_UPDATED, $this->getListComponentName())\n                )\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Handler in MoonShine Framework - PHP\nDESCRIPTION: This PHP code defines a custom Handler class extending MoonShine\\Laravel\\Handlers\\Handler, created as scaffolded by the artisan command. It includes a handle() method that checks for a required resource and supports background queue processing with job execution and UI toast notifications. The process() method is a placeholder for business logic, while getButton() returns an ActionButtonContract for integration with MoonShine's UI. The snippet depends on MoonShine package contracts and Symfony's Response. It demonstrates error handling, resource binding verification, queueing capability, and custom action button generation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/handlers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Handlers;\\n\\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\\nuse MoonShine\\Laravel\\Handlers\\Handler;\\nuse MoonShine\\Laravel\\MoonShineUI;\\nuse MoonShine\\UI\\Components\\ActionButton;\\nuse MoonShine\\UI\\Exceptions\\ActionButtonException;\\nuse Symfony\\Component\\HttpFoundation\\Response;\\n\\nclass MyCustomHandler extends Handler\\n{\\n    /**\\n     * @throws ActionButtonException\\n     */\\n    public function handle(): Response\\n    {\\n        if (! $this->hasResource()) {\\n            throw new ActionButtonException('Resource is required for action');\\n        }\\n\\n        if ($this->isQueue()) {\\n            // Job here\\n\\n            MoonShineUI::toast(\\n                __('moonshine::ui.resource.queued')\\n            );\\n\\n            return back();\\n        }\\n\\n        self::process();\\n\\n        return back();\\n    }\\n\\n    public static function process()\\n    {\\n        // Logic here\\n    }\\n\\n    public function getButton(): ActionButtonContract\\n    {\\n        return ActionButton::make($this->getLabel(), $this->getUrl());\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Blade directives for event binding\nDESCRIPTION: Defines custom Blade directives `@defineEvent` and `@defineEventWhen` for declaratively binding events to HTML elements within Blade templates. Parameters specify event type, component name, callback function, and optional conditions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n@defineEvent('table-updated', 'index', 'asyncRequest')\n```\n\nLANGUAGE: Blade\nCODE:\n```\n@defineEventWhen(true, 'table-updated', 'index', 'asyncRequest')\n```\n\n----------------------------------------\n\nTITLE: Using `getPage` with Dependency Injection in MoonShine (PHP)\nDESCRIPTION: Example of retrieving a page instance within a controller method using dependency injection. Type-hint `ConfiguratorContract` (implemented by `MoonShineConfigurator`) and call the `getPage` method on the injected config instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n// DI\n\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\n/**\n * @param  MoonShineConfigurator  $configurator\n */\npublic function index(ConfiguratorContract $config)\n{\n  $customPage = $config->getPage('custom');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring query tags to display in dropdown list via property in PHP\nDESCRIPTION: Within a resource class, the property `$queryTagsInDropdown` is set to true, transforming the default inline display of query tags into a dropdown menu. This improves UI organization when numerous tags are used, aiding user interaction.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostResource extends ModelResource\n{\n    protected bool $queryTagsInDropdown = true;\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Events with Blade Directive @defineEvent\nDESCRIPTION: This snippet demonstrates the `@defineEvent` Blade directive for concisely declaring events for components. It takes the event, component name, callback function, and parameters to generate the event binding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"myComponent\"\n    {{-- @table-updated-index.window=\"asyncRequest\" --}}\n    @defineEvent('table-updated', 'index', 'asyncRequest')\n></div>\n```\n\n----------------------------------------\n\nTITLE: MoonShine Field Format Method Signature (PHP)\nDESCRIPTION: Displays the method signature for the `format()` method, which is used to change how the field's value is displayed in preview mode. It accepts a single string argument `$format` specifying the desired output format.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nformat(string $format)\n```\n\n----------------------------------------\n\nTITLE: Customizing Rows (thead, tbody, tfoot) in PHP\nDESCRIPTION: This snippet explains how to customize table rows, specifically the `thead`, `tbody`, and `tfoot` sections. Methods like `headRows`, `rows`, and `footRows` are used to manually define rows and cells, offering greater control over the table's structure and content. Uses TableRows and TableCells for adding cells and rows\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// tbody\nTableBuilder::make()\n  ->rows(\n    static fn(TableRowsContract $default) => $default->pushRow(\n        TableCells::make()->pushCell(\n            'td content'\n        )\n    )\n  )\n\n// thead\nTableBuilder::make()\n  ->headRows(\n    static fn(TableRowContract $default) => TableRows::make([$default])->pushRow(\n        TableCells::make()->pushCell(\n            'td content'\n        )\n    )\n  )\n\n// tfoot\nTableBuilder::make()\n  ->footRows(\n    static fn(?TableRowContract $default) => TableRows::make([$default])->pushRow(\n        TableCells::make()->pushCell(\n            'td content'\n        )\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value in BelongsTo\nDESCRIPTION: This snippet demonstrates how to set a default value for a `BelongsTo` field using the `default()` method. The example passes a `Country` model instance as the default, which automatically selects the default country in the field. The default value must be a model object, and is set using the `Country::find(1)` in this example.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', resource: CategoryResource::class)\n    ->default(Country::find(1))\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Edit Button and Handling Update in MoonShine PHP\nDESCRIPTION: This snippet shows the implementation of a bulk edit feature for a MoonShine resource. It includes the `indexButtons` method to add a bulk action button that opens a modal form for editing, and the `massEdit` method to handle the asynchronous form submission, update selected database records, and provide user feedback. Required dependencies include `MoonshineRequest`, `MoonShineJsonResponse`, various MoonShine form components, and the model being updated.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/mass-edit.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function massEdit(MoonShineRequest $request): MoonShineJsonResponse\n{\n    MoonshineUserRole::query()\n        ->whereIn('id', $request->array('ids'))\n        ->update([\n            'name' => $request->input('name')\n        ]);\n\n    return MoonShineJsonResponse::make()->toast('Success', ToastType::SUCCESS);\n}\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()->add(\n        ActionButton::make('')\n            ->bulk()\n            ->icon('pencil')\n            ->inModal(\n                'Mass edit',\n                fn() => FormBuilder::make()\n                    ->name('mass-edit')\n                    ->fields([\n                        HiddenIds::make($this->getListComponentName()),\n                        Text::make('Name')->required(),\n                    ])\n                    ->asyncMethod('massEdit', events: [\n                        AlpineJs::event(JsEvent::TABLE_UPDATED, $this->getListComponentName())\n                    ])\n                    ->submit('Save'),\n            ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Making an Alert Removable with the Blade Component\nDESCRIPTION: Explains how to make the `x-moonshine::alert` Blade component removable by setting the `removable` attribute to `true`. This allows users to dismiss the alert, usually via a close button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::alert removable=\"true\">\n    Alert\n</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Checking the Active Page Type in PHP\nDESCRIPTION: This code snippet shows methods to check the type of the active page using boolean methods. These methods, like `isIndexPage()`, `isFormPage()`, and `isDetailPage()`, allow direct checking of the active page type without using the instanceof operator. No external dependencies are required for these methods to function, which will be defined on the `ModelResource` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/routes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function isIndexPage(): bool;\n\npublic function isFormPage(): bool;\n\npublic function isDetailPage(): bool;\n\npublic function isCreateFormPage(): bool;\n\npublic function isUpdateFormPage(): bool;\n```\n\n----------------------------------------\n\nTITLE: Making a Column Sticky in MoonShine Table (PHP)\nDESCRIPTION: This code demonstrates how to make a specific column in a MoonShine table sticky, preventing it from scrolling horizontally. It uses the `sticky()` method on the field to achieve this.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Fields\\ID;\n\nprotected function indexFields(): iterable\n{\n    return [\n        ID::make()->sticky(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Component with components - PHP\nDESCRIPTION: This code snippet demonstrates how to create a `Content` component in PHP using the `make` method.  It initializes the component with an array of child components, including a `Title` and a `Components` instance. It relies on the `MoonShine\\UI\\Components\\Layout\\Content`, `Title` and `Components` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/content.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Content;\n\nContent::make([\n    Title::make(\n        $this->getPage()->getTitle()\n    ),\n\n    Components::make(\n        $this->getPage()->getComponents()\n    ),\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Events on Modal Open/Close (MoonShine, PHP)\nDESCRIPTION: Demonstrates how to use toggleEvents() to bind custom AlpineJs events to modal open or close actions. Useful for firing notifications or executing scripts. Inputs include an array of events, and booleans to restrict event firing to only opening or closing. Requires MoonShine, AlpineJs, and JsEvent.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ntoggleEvents(array $events, bool $onlyOpening = false, $onlyClosing = false)\n```\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Open Modal')->toggleModal('my-modal'),\n\nModal::make('My Modal', asyncUrl: '/')\n    ->name('my-modal')\n    ->toggleEvents([\n        AlpineJs::event(JsEvent::TOAST, params: ['text' => 'Hello'])\n    ], onlyOpening: false, onlyClosing: true),\n```\n\n----------------------------------------\n\nTITLE: Requesting SDUI Structure with MoonShine (GET)\nDESCRIPTION: This snippet demonstrates how to send a GET request to a specific page (e.g., /admin/dashboard) to retrieve its SDUI structure using the X-MS-Structure header.  The server responds with a JSON structure describing the UI components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/sdui.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /admin/dashboard HTTP/1.1\nX-MS-Structure: true\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics on MoonShine Resource Model Index Page in PHP\nDESCRIPTION: This snippet defines a protected method named metrics() within a MoonShine resource class to return an array of Metric objects. It uses the ValueMetric class to create informational blocks displaying counts of Posts and Comments from the database. Each metric includes a title, a value callback, and a layout column span. Required dependencies include the MoonShine Metric classes, Laravel Eloquent models (Post, Comment), and the MoonShine resource base class. The method returns a list of Metric instances that the framework uses to render statistical UI components on the resource index page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/metrics.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse App\\Models\\Post;\nuse App\\Models\\Comment;\nuse MoonShine\\UI\\Components\\Metrics\\Wrapped\\Metric;\nuse MoonShine\\UI\\Components\\Metrics\\Wrapped\\ValueMetric;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    /**\n     * @return list<Metric>\n     */\n    protected function metrics(): array\n    {\n        return [\n            ValueMetric::make('Articles')\n                ->value(fn() => Post::count())\n                ->columnSpan(6),\n            ValueMetric::make('Comments')\n                ->value(fn() => Comment::count())\n                ->columnSpan(6),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Response Handling with AsyncCallback\nDESCRIPTION: This code snippet shows how to override the default response handling in the MoonShine admin panel using `AsyncCallback` and the `responseHandler` parameter. It takes control of the response, excluding the default behavior, allowing for custom event calls, error handling, etc.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make()\n    ->method(\n        'myMethod',\n        callback: AsyncCallback::with(responseHandler: 'myResponseHandler')\n    )\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Header for MoonShine Table (PHP)\nDESCRIPTION: This snippet shows how to enable a sticky header for a MoonShine table, which keeps the header visible while scrolling through a large dataset.  It sets the `$stickyTable` property to `true` within the resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravle\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $stickyTable = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Query for Values in BelongsTo\nDESCRIPTION: This code snippet demonstrates how to modify the query used to retrieve values for the `BelongsTo` field using the `valuesQuery()` method.  The example filters the related records based on the `active` field, displaying only active categories. It accepts a closure, enabling custom query building.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:4]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsTo::make('Category', 'category', resource: CategoryResource::class)\n    ->valuesQuery(fn(Builder $query, Field $field) => $query->where('active', true))\n```\n\n----------------------------------------\n\nTITLE: Adding Assets Globally in MoonShine\nDESCRIPTION: Example showing how to add assets globally in MoonShine by using the service provider's boot method. This ensures assets are available throughout the admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot(\n    CoreContract $core,\n    ConfiguratorContract $config,\n    AssetManagerContract $assets,\n): void\n{\n    $assets->add(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Toast via AlpineJs Event MoonShine PHP\nDESCRIPTION: This snippet illustrates how to programmatically trigger a toast notification using MoonShine's `AlpineJs::event` helper, which dispatches a frontend JavaScript event. This is useful for triggering notifications from backend code asynchronously. Dependencies: MoonShine\\Support\\AlpineJs, MoonShine\\Support\\Enums\\JsEvent, MoonShine\\Support\\Enums\\ToastType, MoonShine\\Support\\ToastEventParams.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flash.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\Support\\Enums\\ToastType;\nuse MoonShine\\Support\\ToastEventParams;\n\nAlpineJs::event(\n    JsEvent::TOAST,\n    params: ToastEventParams::make(ToastType::SUCCESS, 'Success')\n)\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Files with MoonShine AssetManager (PHP)\nDESCRIPTION: Demonstrates how to include external JavaScript files using `MoonShine\\AssetManager\\Js::make()`. Shows basic usage, deferred loading with `defer()`, and adding custom HTML attributes with `customAttributes()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\Js;\n\n// Basic inclusion\nJs::make('/js/app.js');\n\n// With deferred loading\nJs::make('/js/app.js')->defer();\n\n// With attributes\nJs::make('/js/app.js')->customAttributes([\n    'data-module' => 'main'\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Asynchronous Search in Select Field (PHP Class)\nDESCRIPTION: This snippet demonstrates how to enable asynchronous searching in a Select field by passing a URL to the `async()` method. The URL should handle the search request with a query parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n    ->async('/search')\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode Logos - PHP\nDESCRIPTION: This snippet shows how to set logos for dark mode using the `darkMode()` method. It specifies the logo and small logo to use when the dark theme is active. It overrides the `getLogoComponent` method to customize the logo.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/logo.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function getLogoComponent(): Logo\n{\n    return parent::getLogoComponent()\n        ->darkMode(\n            asset('logo-dark.svg'),\n            asset('logo-dark-small.svg'),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Card Header in Overlay Mode Using header() in PHP\nDESCRIPTION: Explains usage of the 'header()' method to set custom card header content, which only functions when a thumbnail and overlay mode are active. The header content can be defined via a column name or a Closure returning HTML, such as a Badge component. The snippet shows chaining of header configuration with thumbnail, overlay, and fields setup, enabling additional information or labels to appear on the card top.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nheader(Closure|string $value)\n\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->thumbnail('image')\n    ->overlay()\n    ->fields([Text::make('Text')])\n    ->header(static fn() => Badge::make('new', 'success'))\n    // or by column\n    // ->header('title')\n```\n\n----------------------------------------\n\nTITLE: Working with Json Object Mode in MoonShine Json Field in PHP\nDESCRIPTION: Demonstrates configuring the Json field to work with a single object rather than an array using the object() method. Defines the structure with custom fields for 'Title' and 'Active'. Ensures direct mapping to a single JSON object in storage. Requires MoonShine UI Field classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Product Options', 'options')\n    ->fields([\n        Text::make('Title'),\n        Switcher::make('Active'),\n    ])\n    ->object()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flash Component MoonShine PHP\nDESCRIPTION: This snippet demonstrates the basic usage of the MoonShine Flash component by calling its static `make` method. This is the standard way to instantiate and configure the component before rendering. Dependencies: MoonShine\\UI\\Components\\Layout\\Flash.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flash.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Flash;\n\nFlash::make()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CrudResource\nDESCRIPTION: This code demonstrates how to create a custom resource by extending the CrudResource class in MoonShine for Laravel. It includes implementing the abstract methods required for data interaction, providing a foundation for working with various data sources.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/crud-resource.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\FieldsContract;\nuse MoonShine\\Laravel\\Resources\\CrudResource;\n\nfinal class RestCrudResource extends CrudResource\n{\n    public function findItem(bool $orFail = false): mixed\n    {\n        // ...\n    }\n\n    public function getItems(): mixed\n    {\n        // ...\n    }\n\n    public function massDelete(array $ids): void\n    {\n        // ...\n    }\n\n    public function delete(mixed $item, ?FieldsContract $fields = null): bool\n    {\n        // ...\n    }\n\n    public function save(mixed $item, ?FieldsContract $fields = null): mixed\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Moonshine Link Component Constructor (PHP)\nDESCRIPTION: Signature of the static `make` method for the `Moonshine\\UI\\Components\\Link` class. It accepts a URL (`$href`) and an optional label (`$label`), both potentially Closures or strings, to instantiate a link component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string $href,\n    Closure|string $label = ''\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title and Subtitle using Properties in PHP\nDESCRIPTION: Illustrates defining the `$title` and `$subtitle` protected string properties within a `Page` class (extending `MoonShine\\Laravel\\Pages\\Page`) to set the page's main title and subtitle displayed in the MoonShine admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected string $title = 'CustomPage';\n\n    protected string $subtitle = 'Subtitle';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Row and Cell Actions on Click in MoonShine (PHP)\nDESCRIPTION: Configures actions upon clicking table rows, such as selecting, viewing details, or editing. Uses the 'ClickAction' enum to set behavior, influencing how rows respond to user interaction.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Support\\Enums\\ClickAction;\n\n// ClickAction::SELECT, ClickAction::DETAIL, ClickAction::EDIT\n\nprotected ?ClickAction $clickAction = ClickAction::SELECT;\n\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Auto Close on Request Completion (MoonShine, PHP)\nDESCRIPTION: Demonstrates disabling the default auto-close functionality after successful requests using the autoClose() method. Accepts closure, bool, or null, false disables auto-close. Utilizes MoonShine components and can be used for asynchronous modals with forms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nautoClose(Closure|bool|null $autoClose = null)\n```\n\nLANGUAGE: php\nCODE:\n```\nModal::make(\n    'Demo Modal',\n    static fn() => FormBuilder::make(route('alert.post'))\n        ->fields([\n            Text::make('Text'),\n        ])\n        ->submit('Submit', ['class' => 'btn-primary'])\n        ->async(),\n    )\n    ->name('demo-modal')\n    ->autoClose(false),\n```\n\n----------------------------------------\n\nTITLE: Restricting File Extensions\nDESCRIPTION: Limit the types of files that can be uploaded by specifying allowed extensions using the allowedExtensions() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->allowedExtensions(['pdf', 'doc', 'txt'])\n```\n\n----------------------------------------\n\nTITLE: Conditional Menu Item Visibility PHP\nDESCRIPTION: This snippet shows the implementation of conditional menu item visibility using the `CanSee` attribute. You provide a method name within the Resource or Page which handles visibility logic. Dependencies: MoonShine framework. Input:  Name of the method that returns boolean value. Output:  The menu item is visible based on the method return.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:1]\nuse MoonShine\\MenuManager\\Attributes\\CanSee;\n\n#[CanSee(method: 'someMethod')]\nclass ArticleResource extends ModelResource\n{\n    public function someMethod(): bool\n    {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ActionGroup with ActionButtons in PHP\nDESCRIPTION: This snippet demonstrates the creation of an `ActionGroup` instance, initializing it with an array of `ActionButton` instances. The `$actions` parameter accepts an iterable collection of `ActionButton` objects. It's crucial to have the `ActionButton` class and any relevant dependencies available to make this function.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-group.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make(iterable $actions = [])\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine.request for Asynchronous Requests\nDESCRIPTION: This JavaScript code shows the usage of `MoonShine.request()` for making asynchronous requests. It shows the parameters like context, URL, method, body, headers, and data, which enable interacting with the MoonShine backend.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.request(ctx, '/url', method = 'get', body = {}, headers = {}, data = {})\n```\n\n----------------------------------------\n\nTITLE: Defining Click Actions on Table Rows with MoonShine TableBuilder in PHP\nDESCRIPTION: The `clickAction()` method sets an action to be performed when a user clicks on a table row. It supports predefined actions such as `ClickAction::SELECT` for selecting rows for bulk actions, `ClickAction::EDIT` for invoking the edit mode, and `ClickAction::DETAIL` for viewing detailed information. Optionally, a CSS selector for the specific target button can be provided when custom buttons are used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n->clickAction(ClickAction::EDIT)\n```\n\nLANGUAGE: php\nCODE:\n```\n->clickAction(ClickAction::EDIT, '.edit-button')\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade View in MoonShine Controller PHP\nDESCRIPTION: Demonstrates how to render a standard Laravel Blade view within the MoonShine panel layout using the `$this->view()` helper method. This method accepts the view path and an optional array of data to pass to the view. It returns a `PageContract` instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse MoonShine\\Contracts\\Core\\PageContract;\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\n\nfinal class CustomViewController extends MoonShineController\n{\n    public function __invoke(): PageContract\n    {\n        return $this->view(\n            'path_to_blade',\n            ['param' => 'value']\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Available Languages in MoonShine (PHP)\nDESCRIPTION: Defines the list of available languages for the MoonShine panel. Set the 'locales' key in `config/moonshine.php` with an array of language codes or use the `locales()` method in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n'locales' => ['en', 'ru'],\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->locales(['en', 'ru']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Fragment Component in Laravel\nDESCRIPTION: This snippet shows how to create a server-side function that returns an iterable containing a Fragment component with a Text field, used for updating a specific page area dynamically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(iterable $components = [])\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Laravel\\Components\\Fragment;\nuse MoonShine\\UI\\Fields\\Text;\n\n// ...\n\nprotected function components(): iterable\n{\n    return [\n        Fragment::make([\n            Text::make('Name', 'first_name')\n        ])->name('fragment-name')\n    ];\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Create Button for HasMany Relationship in PHP\nDESCRIPTION: Example of customizing the create button for HasMany relationship by passing a custom ActionButton to the creatable() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->creatable(\n        button: ActionButton::make('Custom button', '')\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript on ActionButton Click PHP\nDESCRIPTION: Demonstrates using the onClick() method to execute custom JavaScript code when the button is clicked. It shows passing a PHP closure that returns the JavaScript string to be executed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->onClick(fn() => \"alert('Пример')\", 'prevent')\n```\n\n----------------------------------------\n\nTITLE: Configure MoonShine JWT Authentication in ServiceProvider\nDESCRIPTION: This PHP code snippet shows an alternative configuration of JWT using a `MoonShineServiceProvider`. It adds the needed middleware and pipelines.  It uses the service provider to configure MoonShine's authentication mechanisms, enabling JWT based authentication via specific middleware and authentication pipelines.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\JWT\\JWTAuthPipe;\nuse MoonShine\\JWT\\Http\\Middleware\\AuthenticateApi;\n\n$config\n    ->authPipelines([JWTAuthPipe::class])\n    ->middlewares([])\n    ->authMiddleware(AuthenticateApi::class);\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine Route using the moonshine directive\nDESCRIPTION: This code defines a route using the `Route::moonshine` directive, integrating it with MoonShine. It sets up a POST route for handling permissions with parameters and middleware. It uses `withResource`, `withPage`, and `withAuthenticate` to add URI prefixes and middleware. The example shows the resulting route URL after the application is running.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/routes.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nRoute::moonshine(static function (Router $router) {\n    $router->post(\n        'permissions/{resourceItem}',\n        PermissionController::class\n    )->name('permissions');\n}, withResource: true, withPage: true, withAuthenticate: true);\n\n// result\n// POST /admin/resource/{resourceUri}/{pageUri}/permissions/{resourceItem}\n// middleware: moonshine, Authenticate::class\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating a BelongsTo Field with Explicit Resource in MoonShine (PHP)\nDESCRIPTION: Demonstrates the basic instantiation of a `BelongsTo` field for a 'user' relationship. It explicitly specifies the label ('User'), the relation name ('user'), and the corresponding `UserResource` class. Requires importing `UserResource` and `BelongsTo`. The related resource must be registered in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\UserResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'User',\n    'user',\n    resource: UserResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading Mode in MoonShine Resource Table using PHP\nDESCRIPTION: This example enables 'Lazy' mode on a MoonShine resource by setting $isLazy to true. Lazy mode initially displays the page without data, then asynchronously fetches table data, improving perceived loading performance especially with large datasets.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    protected bool $isLazy = true;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configure TableBuilder Async Loading with Events PHP\nDESCRIPTION: Demonstrates configuring asynchronous table loading with a name and specifying Alpine.js events (FORM_RESET, TOAST) to be triggered upon a successful async response.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\n\nTableBuilder::make()\n        ->name('crud')\n        ->async(events: [\n          AlpineJs::event(JsEvent::FORM_RESET, 'main-form'),\n          AlpineJs::event(JsEvent::TOAST, params: ['text' => 'Success', 'type' => 'success']),\n        ])\n```\n\n----------------------------------------\n\nTITLE: Using fromRaw() in Import Fields for Data Transformation\nDESCRIPTION: This code snippet shows how to use the `fromRaw()` method on a field to modify a value during the import process. The example uses the `Enum` field and `StatusEnum`, transforming the raw string value from the import file into an enum instance.  The `fromRaw()` method accepts a closure that receives the raw value and the field context, allowing custom transformations. This is crucial for converting string-based data to a specific data type or format during import.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse App\\Enums\\StatusEnum;\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\Enum;\nuse MoonShine\\UI\\Fields\\ID;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function importFields(): iterable\n    {\n        return [\n            ID::make(),\n            Enum::make('Status')\n                ->attach(StatusEnum::class)\n                ->fromRaw(static fn(string $raw, Enum $ctx) => StatusEnum::tryFrom($raw)),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Search Query in MoonShine Resource (PHP)\nDESCRIPTION: This snippet shows how to override the default search query in a MoonShine resource. It overrides the `searchQuery` method to define custom search logic using a `where` clause and a closure.  The `$terms` parameter contains the search terms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/query.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function searchQuery(string $terms): void\n    {\n        $this->newQuery()->where(function (Builder $builder) use ($terms): void {\n            // Your logic\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Section to Admin Menu Layout - MoonShine PHP\nDESCRIPTION: This example defines the protected menu() method within a custom MoonShineLayout to organize menu groups and items in the admin panel. It uses 'MenuGroup', 'MenuItem', and resource class references. All dependencies must be imported from MoonShine packages. The method returns an array of grouped and standalone menu items, displaying available resources like users, roles, and posts. Inputs are translations and resource class names. Outputs customized navigation for the admin UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\PostResource;\n\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make(__(\"moonshine::ui.resource.system\"), [\n                MenuItem::make(\n                    __('moonshine::ui.resource.admins_title'),\n                    MoonShineUserResource::class\n                ),\n                MenuItem::make(\n                    __('moonshine::ui.resource.role_title'),\n                    MoonShineUserRoleResource::class\n                ),\n            ]),\n            MenuItem::make('Posts', PostResource::class),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Form Component\nDESCRIPTION: This snippet demonstrates how to modify the form component using `modifyFormComponent()`. It adds components at the top and bottom using `FlexibleRender::make()` and sets the submit button text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\UI\\Components\\FlexibleRender;\n\npublic function modifyFormComponent(ComponentContract $component): ComponentContract\n{\n    return parent::modifyFormComponent($component)->fields([\n        FlexibleRender::make('Top'),\n        ...parent::modifyFormComponent($component)->getFields()->toArray(),\n        FlexibleRender::make('Bottom'),\n    ])->submit('Go');\n}\n```\n\n----------------------------------------\n\nTITLE: Publish MoonShine JWT Config using Artisan\nDESCRIPTION: This shell command publishes the configuration file for the JWT package, allowing customization of the JWT settings. It uses the `vendor:publish` command to copy the service provider and configuration to the application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"MoonShine\\JWT\\Providers\\JWTServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Modal Component with PHP (MoonShine, PHP)\nDESCRIPTION: This code snippet demonstrates the static 'make' function signature for creating a Modal instance in MoonShine. Dependencies include the MoonShine UI library and optional closures or string content for title, body, triggers, and asynchronous URLs. Parameters include the modal window title, its content, external trigger block, async URL, and child components; these control modal display and functionality. Returns a Modal component object configured per given arguments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string $title = '',\n    protected Closure|Renderable|string $content = '',\n    protected Closure|Renderable|ActionButtonContract|string $outer = '',\n    protected Closure|string|null $asyncUrl = null,\n    iterable $components = [],\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Asynchronous Search for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Demonstrates the simplest way to enable asynchronous searching for a `BelongsTo` field by calling `asyncSearch()` without parameters. By default, it searches the column defined in the related resource's `$column` property (or 'id') and uses the default MoonShine AJAX endpoint.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Category', 'category', resource: CategoryResource::class)\n    ->asyncSearch()\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Routes using PHP\nDESCRIPTION: This code snippet demonstrates basic route generation using methods provided by a resource object.  It showcases methods to get URLs for the resource's first page, routes using names, and specific page URLs, index page, create page, edit and detail pages. It doesn't take any dependencies, it directly interacts with methods of resource object. The output is a URL string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/routes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// First page of the resource\n$resource->getUrl();\n\n// Advanced method for obtaining routes\n$resource->getRoute($name, $key, $params);\n\n// Advanced method for obtaining page's route\n$resource->getPageUrl($page, $params, $fragment);\n\n// Index page\n$resource->getIndexPageUrl();\n// Query tag\n$resource->getIndexPageUrl(['query-tag' => $tag->uri()]);\n\n// Create page\n$resource->getFormPageUrl();\n// Edit page by int\n$resource->getFormPageUrl(1);\n// Edit page by Model\n$resource->getFormPageUrl($item);\n\n// Detail page by int\n$resource->getDetailPageUrl(1);\n// Detail page by Model\n$resource->getDetailPageUrl($item);\n\n// ANY\n$resource->getAsyncMethodUrl('updateSomething');\n$resource->getFragmentLoadUrl('table-index', $resource->formPage());\n\n// CRUD\n\n// PUT\n$resource->getRoute('crud.update', $data->getKey());\n// POST\n$resource->getRoute('crud.store');\n// DELETE\n$resource->getRoute('crud.destroy', $data->getKey());\n// DELETE\n$resource->getRoute('crud.massDelete');\n\n// Handlers\n$resource->getRoute('handler', query: ['handlerUri' => $export->getUriKey()]);\n```\n\n----------------------------------------\n\nTITLE: Using the Slug Field in MoonShine - PHP\nDESCRIPTION: This snippet shows how to import the Slug field from MoonShine and create a new Slug instance for a Laravel Eloquent model. MoonShine\\Laravel\\Fields\\Slug is initialized via Slug::make, which configures a slug field tied to a model property. The dependency is the MoonShine package and an underlying Eloquent model. No parameters are required at the base level, and this forms the foundation for all further slug customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/slug.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Slug;\n\nSlug::make('Slug')\n```\n\n----------------------------------------\n\nTITLE: Extending Components with Macroable Trait\nDESCRIPTION: Shows how to extend MoonShine components using the Macroable trait's macro() method for single methods.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nMoonShineComponent::macro('myMethod', fn() => /*implementation*/)\n\nBox::make()->myMethod()\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Object Using modifyResponse() Method in MoonShine PHP Page\nDESCRIPTION: Provides an example of overriding `modifyResponse()` to intercept the standard page response and return a different HTTP response, such as a redirect. This enables custom response manipulation before the page output is sent to the client. Returning null continues with the standard render response.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nprotected function modifyResponse(): ?Response\n{\n    if (request()->has('id')) {\n        return redirect()->to('/admin/article-resource/index-page');\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Html Component Initialization with `make()` - PHP\nDESCRIPTION: Demonstrates creating an Html component instance using the `make()` method. It accepts an array of components, such as Head and Body, to define the structure of the HTML page. The dependencies are the `MoonShine\\UI\\Components\\Layout\\Html`, `Head`, and `Body` classes. This method returns an Html component object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/html.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Html;\n\nHtml::make([\n    Head::make([]),\n    Body::make([]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Sending Notification in MoonShine Controller PHP\nDESCRIPTION: Shows how to send a server-side notification using the `$this->notification()` helper method. This method takes the message content as an argument. The notification might appear in a dedicated notification center or use a different display mechanism compared to `toast`. A typical return is `back()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class CustomViewController extends MoonShineController\n{\n    public function __invoke(): Response\n    {\n        $this->notification('Message');\n\n        return back();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing thead, tbody, and tfoot Sections in MoonShine Resource Table - PHP\nDESCRIPTION: Provides implementation examples for overriding the methods thead(), tbody(), and tfoot() in a MoonShine resource to customize HTML table header, body, and footer sections. The methods may return null, a TableRowsContract instance, or a Closure that builds and returns customized TableRows collections with additional cells. Dependencies include MoonShine UI collections and contracts for managing table rows and cells.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse MoonShine\\Contracts\\UI\\Collection\\TableRowsContract;\nuse MoonShine\\Contracts\\UI\\TableRowContract;\nuse MoonShine\\UI\\Collections\\TableCells;\nuse MoonShine\\UI\\Collections\\TableRows;\n\nprotected function thead(): null|TableRowsContract|Closure\n{\n    return static fn(TableRowContract $default) => TableRows::make([$default])->pushRow(\n        TableCells::make()->pushCell(\n            'td content'\n        )\n    );\n}\n\nprotected function tbody(): null|TableRowsContract|Closure\n{\n    return static fn(TableRowsContract $default) => $default->pushRow(\n        TableCells::make()->pushCell(\n            'td content'\n        )\n    );\n}\n\nprotected function tfoot(): null|TableRowsContract|Closure\n{\n    return static fn(?TableRowContract $default) => TableRows::make([$default])->pushRow(\n        TableCells::make()->pushCell(\n            'td content'\n        )\n    );\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse MoonShine\\Contracts\\UI\\Collection\\TableRowsContract;\nuse MoonShine\\Contracts\\UI\\TableRowContract;\nuse MoonShine\\UI\\Collections\\TableCells;\nuse MoonShine\\UI\\Collections\\TableRows;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\nuse MoonShine\\UI\\Components\\Table\\TableRow;\n\nprotected function tfoot(): null|TableRowsContract|Closure\n{\n    return static function(?TableRowContract $default, TableBuilder $table) {\n        $cells = TableCells::make();\n\n        $cells->pushCell('Balance:');\n        $cells->pushCell('$1000');\n\n        return TableRows::make([TableRow::make($cells), $default]);\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Type Casting to CardsBuilder Data with cast() in PHP\nDESCRIPTION: Shows how to use the 'cast()' method to transform or cast raw card data into specific types or model instances. This example employs the ModelCaster to cast incoming data to User model objects, allowing fields to work with model-based properties and methods instead of primitives. This enhances data integrity and usability within the CardsBuilder context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\TypeCasts\\ModelCaster;\n\nCardsBuilder::make()\n    ->cast(new ModelCaster(User::class))\n```\n\n----------------------------------------\n\nTITLE: Configuring Card URL via url Method in PHP\nDESCRIPTION: Shows how to assign a clickable URL to a MoonShine Card header using the url() method. Accepts either a string URL or a closure that returns a URL, enabling dynamic link generation. The link is applied to the card's title or header area, making the entire card or header redirect to the specified address. Dependencies include Laravel routing and closure syntax for lazy evaluation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n    thumbnail: '/images/image_1.jpg',\n)\n    ->url(static fn() => 'https://cutcode.dev')\n```\n\n----------------------------------------\n\nTITLE: Box Component with Custom Heading in PHP and Blade\nDESCRIPTION: Shows how to create a Box component with a custom title/heading using both PHP class syntax and Blade template syntax. In PHP, the title is provided as the first parameter and components as the second.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/box.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title box', ['Hello!']);\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box title=\"Title box\">\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Adding Color Coding to Enum Preview with getColor Method in PHP\nDESCRIPTION: This snippet extends the StatusEnum enum in PHP with a getColor() method, enabling colored icon previews for each enum value within the MoonShine interface. The method returns a string corresponding to a predefined color name for the UI. There are no external dependencies. Each enum case specifies a color label such as 'info', 'gray', or 'success', selectable from a set of supported color strings. Integrate this by attaching the enum to a MoonShine Enum field as shown in earlier examples.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/enum.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Enums;\n\nenum StatusEnum: string\n{\n    case NEW = 'new';\n    case DRAFT = 'draft';\n    case PUBLIC = 'public';\n\n    public function getColor(): ?string\n    {\n        return match ($this) {\n            self::NEW => 'info',\n            self::DRAFT => 'gray',\n            self::PUBLIC => 'success',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Original File Names\nDESCRIPTION: Keep the original uploaded file names instead of generating new ones using the keepOriginalFileName() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->keepOriginalFileName()\n```\n\n----------------------------------------\n\nTITLE: Opening Offcanvas Panel with ActionButton PHP\nDESCRIPTION: Shows how to use the inOffCanvas() method to configure an ActionButton to open an offcanvas panel when clicked. It includes options for setting title, content, name, builder closure for the OffCanvas component, and components within the panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\OffCanvas;\n\nActionButton::make('Button Label')\n    ->inOffCanvas(\n        title: fn() => 'Offcanvas Title',\n        content: fn() => 'Content',\n        name: false,\n        builder: fn(OffCanvas $offCanvas, ActionButton $ctx) => $offCanvas->left(),\n        // optionally - necessary for components to be available for searching in the system, as content is just HTML\n        components: [],\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Favicon Component in PHP and Blade\nDESCRIPTION: Demonstrates basic initialization of the MoonShine Favicon component for inclusion in an HTML page. Requires the MoonShine\\UI\\Components\\Layout\\Favicon namespace in PHP or the corresponding Blade component. No parameters needed for default favicon rendering. Outputs standard favicon tags in the page head as part of the parent head component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/favicon.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Favicon;\n\nFavicon::make();\n```\n\n----------------------------------------\n\nTITLE: Creating a MoonShine Model Resource via Artisan Shell Command\nDESCRIPTION: This shell command uses the MoonShine package's Artisan extension to create a new resource class named 'Post'. It scaffolds an admin resource to manage the 'Post' model in the MoonShine admin panel. The resource facilitates CRUD operations and integrates with Eloquent models automatically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource Post\n```\n\n----------------------------------------\n\nTITLE: Custom Redirect After Save Method\nDESCRIPTION: This snippet showcases how to customize the redirect after saving a record by overriding the `getRedirectAfterSave()` method.  It defines a redirect to the root path ('/').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function getRedirectAfterSave(): string\n{\n    return '/';\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Form Components in MoonShine Resources\nDESCRIPTION: Demonstrates how to customize the FormBuilder component by implementing the modifyFormComponent() method to add custom attributes or make other modifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\n\npublic function modifyFormComponent(\n    ComponentContract $component\n): ComponentContract\n{\n    return parent::modifyFormComponent($component)\n        ->customAttributes([\n            'data-my-attr' => 'value'\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Field for Slug Generation in MoonShine - PHP\nDESCRIPTION: This code snippet demonstrates how to designate a source model field (e.g., 'title') for automatic slug generation using the from method. It requires an initialized Slug field and is dependent on the MoonShine package. The input is the name of the field (string) from which the slug will be generated, and the output is a Slug field with dynamic value assignment. Key constraint: The source field must exist on the underlying model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/slug.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->from('title')\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Search in BelongsTo\nDESCRIPTION: This code snippet shows how to enable asynchronous search for the `BelongsTo` field using the `asyncSearch()` method. This provides a more efficient user experience by fetching search results dynamically as the user types, especially with large datasets. It uses a basic implementation of `asyncSearch` with its default configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Category', 'category', resource: CategoryResource::class)\n    ->asyncSearch()\n```\n\n----------------------------------------\n\nTITLE: Including URL Query Parameters in Requests (PHP)\nDESCRIPTION: Explains how to include current URL query parameters in request payloads sent with an async ActionButton using the withQueryParams() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->withQueryParams()\n```\n\n----------------------------------------\n\nTITLE: Customizing MoonShine Resource Alias via Property in PHP\nDESCRIPTION: This PHP snippet demonstrates overriding the default URL alias of a resource in MoonShine by defining the protected nullable string property '$alias'. The default alias is generated from the resource class name in kebab-case, but this property allows a custom string for routing and URL references. This feature assists in creating cleaner or more intuitive URLs in the admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected ?string $alias = 'custom-alias';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Standard JSON Response for Notifications and Redirects\nDESCRIPTION: Shows a JSON structure to display a notification message and optionally redirect the user after clicking the button. The redirect parameter is optional and can be omitted.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"message\": \"Toast\",\n    \"messageType\": \"success\",\n    \"redirect\": \"/url\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Remove Button Attributes in MoonShine Json Field in PHP\nDESCRIPTION: Demonstrates passing HTML attributes to the removable() method for customizing the remove button. Useful for attaching JavaScript handlers (e.g., Vue's @click.prevent). Requires Text and Image field imports if used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data', 'data.content')\n    ->fields([\n        Text::make('Title'),\n        Image::make('Image'),\n        Text::make('Value'),\n    ])\n    ->removable(attributes: ['@click.prevent' => 'customAsyncRemove'])\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking BelongsToMany Relation in MoonShine PHP\nDESCRIPTION: Shows how to use the `relatedLink()` method with the `condition` closure parameter. This allows displaying the relationship as a link only when a specified condition, based on the item count or field properties, evaluates to true. The closure receives the count and the field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->relatedLink(condition: function (int $count, Field $field): bool {\n        return $count > 10;\n    })\n```\n\n----------------------------------------\n\nTITLE: Triggering Events After Async Request (PHP)\nDESCRIPTION: Shows how to configure an ActionButton to trigger an event after a successful asynchronous request by passing event definitions to the events array.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label', '/endpoint')\n    ->async(\n        events: [\n            AlpineJs::event(JsEvent::TABLE_UPDATED, $this->getListComponentName())\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagination in MoonShine Resource using PHP\nDESCRIPTION: This code snippet disables pagination for a MoonShine resource by setting the protected property $usePagination to false. This configuration results in no pagination being applied to the resource's data listing, useful when all data must be shown on a single page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    protected bool $usePagination = false;\\n\\n    // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Registration in RegisterController (PHP)\nDESCRIPTION: Defines the `RegisterController` for new user registration. It includes a `form` method to display the registration page (using `RegisterPage`) and a `store` method to handle the registration submission. The `store` method uses `RegisterFormRequest` for validation, creates a new `User` record with the validated data, logs the new user in using `auth()->login()`, and redirects the user to their intended destination or the home route.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\RegisterFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\RegisterPage;\nuse Illuminate\\Http\\RedirectResponse;\n\nfinal class RegisterController extends Controller\n{\n    public function form(RegisterPage $page): RegisterPage\n    {\n        return $page;\n    }\n\n    public function store(RegisterFormRequest $request): RedirectResponse\n    {\n        $user = User::query()->create(\n            $request->validated()\n        );\n\n        auth()->login($user);\n\n        return redirect()->intended(\n            route('home')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a MorphToMany Field in MoonShine (PHP)\nDESCRIPTION: This snippet demonstrates how to create a MorphToMany field for use within a MoonShine Resource definition. It shows the use of the `make` method to define the field title ('Categories'), the relationship method name ('categories'), and the MoonShine Resource to use for managing the related entities (`CategoryResource`). This requires importing the `MorphToMany` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/morph-to-many.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphToMany;\n\nMorphToMany::make(\n    'Categories',\n    'categories',\n    resource: CategoryResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Bulk Actions with ActionButton in PHP\nDESCRIPTION: Demonstrates how to use the `bulk()` method on `ActionButton` to specify bulk actions for table items.  This allows for actions to be performed on multiple selected rows.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n->buttons([\n    ActionButton::make('Mass Delete', fn() => route('name.mass_delete'))->bulk(),\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing fields() method in HasMany\nDESCRIPTION: This code snippet demonstrates the use of the `fields()` method to define the fields that will be displayed in the *preview* of the related model, showing how to embed other fields like `BelongsTo` and `Text` within the `HasMany` field. It imports necessary classes to define how the related data is shown. Includes dependencies `BelongsTo`, `HasMany`, and `Text`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Fields\\Text;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->fields([\n        BelongsTo::make('User'),\n        Text::make('Text'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Example of a Laravel route with resource and page parameters\nDESCRIPTION: Shows a standard GET route in Laravel for accessing CRUD pages with optional resource and page URI parameters. Middleware includes 'moonshine' and 'Authenticate' for access control. Parameters 'resourceUri' and 'pageUri' facilitate resource-specific routing, with 'resourceUri' being optional.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/routes.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::get('/admin/resource/{resourceUri}/{pageUri}', CustomController::class)\n    ->middleware(['moonshine', \\MoonShine\\Laravel\\Http\\Middleware\\Authenticate::class])\n    ->name('moonshine.name');\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Menu Items using Gate Facade in PHP\nDESCRIPTION: This snippet demonstrates using the `Gate` facade to check user permissions before displaying a menu item. It checks if the user has the ability to view any records of the `MoonshineUserRole` model. Dependencies include the `Illuminate\\Support\\Facades\\Gate` class, `MoonShine\\Laravel\\Enums\\Ability`, and `MoonShine\\MenuManager\\MenuItem` classes.  The `canSee()` method determines if the menu item is shown based on the Gate check.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/menu-authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Gate;\nuse MoonShine\\Laravel\\Enums\\Ability;\nuse MoonShine\\MenuManager\\MenuItem;\n\nprotected function menu(): array\n{\n  return [\n    MenuItem::make('Roles', MoonShineUserRoleResource::class)\n      ->canSee(fn() => Gate::check(Ability::VIEW_ANY, MoonshineUserRole::class)),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Pages and Forms in MoonShine Configuration (PHP)\nDESCRIPTION: Example structure within `config/moonshine.php` for defining mappings between string names (e.g., 'dashboard', 'login') and their corresponding Page or Form classes. These mappings are used by the `getPage` and `getForm` methods.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Other settings...\n\n    'pages' => [\n        'dashboard' => \\App\\MoonShine\\Pages\\DashboardPage::class,\n        'custom' => \\App\\MoonShine\\Pages\\CustomPage::class,\n    ],\n\n    'forms' => [\n        'login' => \\App\\MoonShine\\Forms\\LoginForm::class,\n        'custom' => \\App\\MoonShine\\Forms\\CustomForm::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Select Mode for Relation Field\nDESCRIPTION: Switches the relation display to a dropdown list via 'selectMode()', suitable for simpler selections with fewer options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->selectMode()\n```\n\n----------------------------------------\n\nTITLE: Using modifyRawValue() in Export Fields\nDESCRIPTION: This code snippet shows how to use `modifyRawValue()` to transform data during the export process.  In this example, the `Status` field is an `Enum`, and the `modifyRawValue()` method converts the enum value into its string representation for the export file. The closure receives the raw value, the data (e.g. model), and the field context and must return the modified value.  This allows for custom formatting or representation of data during the export process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse App\\Enums\\StatusEnum;\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\Enum;\nuse MoonShine\\UI\\Fields\\ID;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function exportFields(): iterable\n    {\n        return [\n            ID::make(),\n            Enum::make('Status')\n                ->attach(StatusEnum::class)\n                ->modifyRawValue(static fn(StatusEnum $raw, Order $data, Enum $ctx) => $raw->value),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Modals with withoutModals()\nDESCRIPTION: This code demonstrates how to disable the modal windows for creating and editing records in a `HasMany` field using the `withoutModals()` method. Disabling the modal causes the editing and creation actions to occur on a separate page. Includes the necessary imports for the `HasMany` field. \nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->withoutModals()\n```\n\n----------------------------------------\n\nTITLE: Creating ActionGroup with ActionButtons in PHP\nDESCRIPTION: Initializes an ActionGroup instance with an iterable collection of ActionButton objects. The make() method accepts an array of ActionButton instances, enabling quick grouping of buttons for UI rendering. This snippet requires the MoonShine UI library and the ActionButton class. Input is an iterable of ActionButton objects, and output is an ActionGroup object containing these buttons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-group.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make(iterable $actions = [])\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionGroup;\n\nActionGroup::make([\n    ActionButton::make('Button 1'),\n    ActionButton::make('Button 2'),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing the BelongsToMany Values Query (PHP)\nDESCRIPTION: Uses the `valuesQuery()` method to modify the query for fetching related 'Categories'. It adds a condition to retrieve only active categories (`where('active', true)`). Requires `BelongsToMany`, `Builder`, and `Field` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsToMany::make('Categories', 'categories', resource: CategoryResource::class)\n    ->valuesQuery(fn(Builder $query, Field $field) => $query->where('active', true))\n```\n\n----------------------------------------\n\nTITLE: Getting parent ID using ResourceWithParent trait\nDESCRIPTION: Shows how to retrieve the parent ID using the `getParentId()` method when the `ResourceWithParent` trait is used. Useful for retrieving the ID of the parent resource in the context of a HasMany relationship.  This is typically used when retrieving the parent ID inside the resources\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->getParentId();\n```\n\n----------------------------------------\n\nTITLE: Replacing HTML Content with JSON Response\nDESCRIPTION: Illustrates how to return HTML content via JSON to replace HTML area upon clicking the button, by providing an html key in the response object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\"html\": \"Html content\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route outside Resource Context\nDESCRIPTION: This example demonstrates how to retrieve a route outside the resource context, specifically using the `route` helper function. It constructs a URL for the 'moonshine.permissions' route, passing in the required parameters for `resourceUri` and `pageUri`. This is the way to use route names declared in the application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/routes.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nroute('moonshine.permissions', ['resourceUri' => 'user-resource', 'pageUri' => 'custom-page'])\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Filters Button Appearance in MoonShine PHP\nDESCRIPTION: This snippet illustrates how to modify the appearance of the default filters button using the `modifyFiltersButton` method. It shows how to apply styling, such as making the button an 'error' type. The method takes an `ActionButtonContract` and must return the modified instance. Requires the `MoonShine\\Contracts\\UI\\ActionButtonContract` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyFiltersButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->error();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining parent methods using ResourceWithParent trait\nDESCRIPTION: The code shows the implementation of methods required to retrieve the ID of the parent when using the `ResourceWithParent` trait in a Moonshine resource.  It retrieves the related parent for managing hierarchical relations.  This shows methods that must be defined with the use of the trait `ResourceWithParent`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nprotected function getParentResourceClassName(): string\n{\n    return PostResource::class;\n}\n\nprotected function getParentRelationName(): string\n{\n    return 'post';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Components to Pages\nDESCRIPTION: This snippet demonstrates adding custom components using `pageComponents()` (or related methods). It adds a modal containing a form with a text field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Core\\Collections\\Components;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Modal;\nuse MoonShine\\UI\\Fields\\Text;\n\n// or indexPageComponents/formPageComponents/detailPageComponents\nprotected function pageComponents(): array\n{\n    return [\n        Modal::make(\n            'My Modal'\n            components: Components::make([\n                FormBuilder::make()->fields([\n                    Text::make('Title')\n                ])\n            ])\n        )\n        ->name('demo-modal')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel and MoonShine via Shell\nDESCRIPTION: This snippet demonstrates shell commands to globally require the Laravel installer, create a new Laravel project, and install the MoonShine package using composer commands. It also shows a shortcut for installing Laravel together with MoonShine using a single Laravel command with the moonshine/app preset. Prerequisites include having Composer and PHP installed. The commands set up the base framework and admin panel dependencies required to start development.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require laravel/installer\n\nlaravel new example-app\n\ncd example-app\n```\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/moonshine\n```\n\nLANGUAGE: shell\nCODE:\n```\nlaravel new example-app --using=moonshine/app\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Row Update with AlpineJs Events in MoonShine Resource - PHP\nDESCRIPTION: Provides examples showing how to enable asynchronous row update functionality using AlpineJs events in a MoonShine ModelResource class. Including the use of the Switcher field with updateOnPreview to trigger table row updates, emitting events in JSON responses after actions like soft delete, and simplifying event assignment using withUpdateRow method. Dependencies include MoonShine UI fields, AlpineJs helper classes, and JsEvent enums.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Title'),\n            Switcher::make('Active')\n                ->updateOnPreview(\n                    events: [AlpineJs::event(JsEvent::TABLE_ROW_UPDATED, $this->getListComponentNameWithRow())]\n                )\n        ];\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function softDelete(MoonShineRequest $request): MoonShineJsonResponse\n{\n    $item = $request->getResource()->getItem();\n    $item->delete();\n\n    return MoonShineJsonResponse::make()\n        ->events([\n            AlpineJs::event(JsEvent::TABLE_ROW_UPDATED, $this->getListComponentNameWithRow($item->getKey()))\n        ])\n        ->toast('Success');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Title'),\n            Switcher::make('Active')\n                ->withUpdateRow($this->getListComponentName())\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Field for Config File Management in PHP\nDESCRIPTION: Creates a Template field with two text inputs that saves form data to a config file. It uses custom fill, render, and apply handlers to read from and write to the configuration file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/change-config.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTemplate::make('Config', 'config')->fields([\n    Text::make('Var'),\n    Text::make('Bar'),\n])\n    ->changeFill(fn(mixed $data) => config('test'))\n    ->changeRender(fn(mixed $value, Template $ctx) => FieldsGroup::make($ctx->getPreparedFields())->fill($value))\n    ->onApply(function(mixed $item, mixed $value) {\n        $content = str_replace(['array (', ')'], ['[', ']'], var_export($value, true));\n\n        file_put_contents(config_path('test.php'), \"<\\?php \\n\\nreturn $content;\");\n\n        return $item;\n    })\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Menu Items Using MoonShine Resource in PHP\nDESCRIPTION: This approach uses MoonShine resource's built-in authorization capabilities to determine menu item visibility. It leverages the resource filler to check if the current user has the VIEW_ANY ability.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/menu-authorization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function menu(): array\n{\n  return [\n    MenuItem::make('Роли', MoonShineUserRoleResource::class)\n      ->canSee(fn(MenuItem $item) => $item->getFiller()->can(Ability::VIEW_ANY)),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Superuser for MoonShine - Shell\nDESCRIPTION: This command creates a superuser for the MoonShine admin panel within a Laravel application. Options include specifying username/email, user name, and password. It is dependent on prior MoonShine installation and a configured Laravel project. Generated users will be stored in your user model or a related database table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:user\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text (PHP)\nDESCRIPTION: Shows how to set a placeholder text for the Text field in MoonShine using the `placeholder()` method.  It defines the label, field name, and placeholder value to be displayed in the input field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nText::make('Username', 'username')\n    ->placeholder('Enter username')\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Quill Editor Field for MoonShine (PHP)\nDESCRIPTION: Implements a custom form field 'Quill' extending Textarea, defining a specific Blade view and asset set for Quill.js. The assets() method adds CSS and JS files via MoonShine's asset pipeline. Requires MoonShine asset classes and an appropriate Blade view named 'moonshine-quill::fields.quill'. Ensures integration of WYSIWYG editor for rich-text input.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Fields;\n\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\nuse MoonShine\\UI\\Fields\\Textarea;\n\nfinal class Quill extends Textarea\n{\n    protected string $view = 'moonshine-quill::fields.quill';\n\n    public function assets(): array\n    {\n        return [\n            Css::make('/css/moonshine/quill/quill.snow.css'),\n            Js::make('/js/moonshine/quill/quill.js'),\n            Js::make('/js/moonshine/quill/quill-init.js'),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Make TableBuilder Header Sticky PHP\nDESCRIPTION: Configures the table header to be fixed (sticky) as the user scrolls down the page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n->sticky()\n```\n\n----------------------------------------\n\nTITLE: Generating MoonShine Controller using Artisan Shell\nDESCRIPTION: Command to generate a new controller specifically configured for use with the MoonShine admin panel. This command simplifies the creation of controllers intended to interact with MoonShine's UI and helpers.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:controller\n```\n\n----------------------------------------\n\nTITLE: Defining ActionButton badge Method Signature PHP\nDESCRIPTION: Documents the method signature for adding a badge to an ActionButton. The badge method accepts a closure, string, integer, float, or null value for the badge content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nbadge(Closure|string|int|float|null $value)\n```\n\n----------------------------------------\n\nTITLE: Customizing the Detail Page Main Component in MoonShine (PHP)\nDESCRIPTION: Overrides the `getDetailComponent(?DataWrapperContract $item, Fields $fields)` method in a MoonShine `DetailPage` (e.g., `ArticleDetailPage`) to customize the component displaying item details. This example uses `TableBuilder` configured in vertical, simple, and preview mode. Dependencies include `DataWrapperContract`, `ComponentContract`, `Fields`, `TableBuilder`, and `DetailPage`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngetDetailComponent(?DataWrapperContract $item, Fields $fields)\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Collections\\Fields;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\n\nclass ArticleDetailPage extends DetailPage\n{\n    // ...\n\n    protected function getDetailComponent(?DataWrapperContract $item, Fields $fields): ComponentContract\n    {\n        return TableBuilder::make($fields)\n            ->cast($this->getResource()->getCaster())\n            ->items([$item])\n            ->vertical()\n            ->simple()\n            ->preview();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the when() Method in PHP with MoonShine\nDESCRIPTION: The when() method executes a callback based on a condition evaluation. It takes a condition value, a callback to execute if the condition is true, and an optional default callback if the condition is false.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nwhen(\n    $value = null,\n    callable $callback = null,\n    callable $default = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling MoonShine Resource and Page Autoloading in Laravel Service Provider\nDESCRIPTION: This PHP snippet enables the autoloading feature of the MoonShine admin panel in the 'MoonShineServiceProvider'. By calling the 'autoload()' method on the MoonShine core contract, the system automatically loads resources and pages without explicitly declaring them in the service provider. This requires Laravel and MoonShine packages and includes dependency injection of the core and configurator contracts.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Providers;\n\nuse App\\MoonShine\\Resources\\ArticleResource;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n    ): void\n    {\n        $core->autoload();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Two-Factor Authentication Pipelines (service provider)\nDESCRIPTION: This snippet shows how to add `TwoFactorAuthPipe` to the authentication pipelines in the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\TwoFactor\\TwoFactorAuthPipe;\n\n$config->authPipelines([\n    TwoFactorAuthPipe::class\n]);\n```\n\n----------------------------------------\n\nTITLE: Storing Settings via Asynchronous Form Submission Using MoonShine in PHP\nDESCRIPTION: This public method handles storage of settings by applying form data through an anonymous function that saves the Setting model instance. It returns a JSON response with a toast notification indicating the successful save operation, leveraging MoonShineJsonResponse for consistent API feedback. Dependencies include the form builder method and the Setting model. The method assumes that form submission data maps correctly to the Setting model fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/dashboard-settings.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function store(): MoonShineJsonResponse\n{\n    $this->form()->apply(fn(Setting $item) => $item->save());\n\n    return MoonShineJsonResponse::make()->toast('Saved');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Menu Component in PHP\nDESCRIPTION: Creates a menu instance in PHP using the static make() method from the Menu class. The method accepts an optional iterable of menu elements; if this parameter is empty, the menu falls back to using MenuManager for its elements. The snippet includes usage with the MenuItem class for a strongly typed approach, as well as initialization using primitive arrays. This approach serves as the base for menu creation and customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/menu.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\MenuManager\\MenuItem;\nuse MoonShine\\UI\\Components\\Layout\\Menu;\n\nMenu::make([\n    MenuItem::make('Item', '/')\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nMenu::make([\n    ['label' => 'Dashboard', 'url' => '/'],\n    ['label' => 'Section', 'url' => '/section'],\n])\n```\n\n----------------------------------------\n\nTITLE: Async Select - PHP\nDESCRIPTION: This snippet demonstrates using the `async` method to load options for a `Select` field asynchronously. It defines `formFields` to render the select field and `selectOptions` to provide the options via a `MoonShineJsonResponse`.  It uses `asyncOnInit` to trigger the async call on component initialization. It depends on `MoonShineJsonResponse`, `Options`, and `Option`. The output is an array of options formatted for the Select component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/select.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        Select::make('Select')->async(\n            $this->getAsyncMethodUrl('selectOptions'),\n        )->asyncOnInit(),\n    ]\n}\n\npublic function selectOptions(): MoonShineJsonResponse\n{\n    $options = new Options([\n        new Option(label: 'Option 1', value: '1', selected: true, properties: new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png')),\n        new Option(label: 'Option 2', value: '2', properties: new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png')),\n    ]);\n\n    return MoonShineJsonResponse::make(data: $options->toArray());\n}\n```\n\n----------------------------------------\n\nTITLE: Configure TableBuilder Async Loading with Custom URL PHP\nDESCRIPTION: Shows how to configure asynchronous loading for a TableBuilder ('my-table') by specifying a custom route URL that will handle the asynchronous request.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()->name('my-table')->async(route('undefined-page.component', [\n    '_namespace' => self::class,\n    '_component_name' => 'my-table'\n]))\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Menu Items in MoonShine PHP Layout\nDESCRIPTION: Demonstrates how to add simple menu items using the `MenuItem::make()` method within the `menu()` method of a MoonShine layout class. It shows examples of linking to resources, routes, and external URLs, including opening links in a new tab.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Admins', MoonShineUserResource::class),\n            MenuItem::make('Home', fn() => route('home')),\n            MenuItem::make('Docs', 'https://moonshine-laravel.com/docs'),\n            MenuItem::make('Laravel Docs', 'https://laravel.com/docs', blank: true),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Asynchronous Search for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Illustrates configuring `asyncSearch()` with multiple parameters: specifying 'title' as the search column, adding custom query logic via `searchQuery` closure (excluding ID 2), defining custom display format using `formatted` closure, setting the result limit to 10, and providing a custom URL for the AJAX requests.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\UI\\Fields\\Field;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Category', 'category', resource: CategoryResource::class)\n    ->asyncSearch(\n        'title',\n        searchQuery: function (Builder $query, Request $request, string $term, Field $field) {\n            return $query->where('id', '!=', 2);\n        },\n        formatted: function ($country, Field $field) {\n            return $country->id . ' | ' . $country->title;\n        },\n        limit: 10,\n        url: 'https://moonshine-laravel.com/async'\n    )\n```\n\n----------------------------------------\n\nTITLE: Triggering events through MoonShine responses\nDESCRIPTION: Illustrates how to return a set of frontend events from server responses within MoonShine using the MoonShineJsonResponse class and its events() method. This enables server-side actions to directly influence frontend behavior upon completion.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn MoonShineJsonResponse::make()\n    ->events([\n        AlpineJs::event(JsEvent::TABLE_UPDATED, 'index'),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Adding Creatable Rows with MoonShine TableBuilder in PHP\nDESCRIPTION: The `creatable()` method enables adding new rows dynamically to the table, transforming it into an editable interface. It accepts parameters to control reindexing of form input names, limit the number of new rows, customize the add button's label and icon, add HTML attributes to the button, and specify a custom button implementation. The addition mode requires that the last row is empty to act as a skeleton for new entries. This method is crucial when editing rows with dynamic input names to ensure proper indexing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n->creatable(reindex: true, limit: 5, label: 'Добавить', icon: 'plus', attributes: ['class' => 'my-class'])\n```\n\nLANGUAGE: php\nCODE:\n```\ncreatable(\n    bool $reindex = true,\n    ?int $limit = null,\n    ?string $label = null,\n    ?string $icon = null,\n    array $attributes = [],\n    ?ActionButtonContract $button = null\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->creatable(reindex: true)\n\nTableBuilder::make()\n    ->creatable()\n    ->reindex()\n```\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->creatable(\n        button: ActionButton::make('Foo', '#')\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Events in PHP MoonShineJsonResponse\nDESCRIPTION: This PHP code shows how to return events in a custom JSON response to be triggered. It uses the `MoonShineJsonResponse` class and the `events()` method to specify an array of events. The example includes the `AlpineJs::event()` helper to create the event.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Http\\Responses\\MoonShineJsonResponse;\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\n\n// ...\n\nreturn MoonShineJsonResponse::make()\n    ->events([\n        AlpineJs::event(JsEvent::TABLE_UPDATED, 'index'),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Buttons to BelongsToMany Field in MoonShine PHP\nDESCRIPTION: Illustrates how to use the `buttons()` method to add custom action buttons to the `BelongsToMany` field interface. The example adds 'Check all' and 'Uncheck all' buttons using `ActionButton` components, triggering simple JavaScript actions via `onClick`. Requires importing `MoonShine\\UI\\Components\\ActionButton`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->buttons([\n        ActionButton::make('Check all', '')\n            ->onClick(fn() => 'checkAll', 'prevent'),\n\n        ActionButton::make('Uncheck all', '')\n            ->onClick(fn() => 'uncheckAll', 'prevent')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Menu in MoonShine Layout Class\nDESCRIPTION: This PHP class extends the AppLayout and overrides the menu() method to define a custom admin navigation menu using MenuItem objects. It demonstrates adding menu items with labels, routes, URLs, and opening links in new tabs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Admins', MoonShineUserResource::class),\n            MenuItem::make('Home', fn() => route('home')), \n            MenuItem::make('Docs', 'https://moonshine-laravel.com/docs'),\n            MenuItem::make('Laravel Docs', 'https://laravel.com/docs', blank: true),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Height of Textarea Field via Custom Attributes in MoonShine using PHP\nDESCRIPTION: Demonstrates how to customize the visible height of a MoonShine textarea by applying HTML attributes through the customAttributes() method. Here, the 'rows' attribute is set to 6, which modifies the number of visible text lines in the textarea. This requires familiarity with HTML textarea attributes and assumes MoonShine supports chaining such custom attributes on fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/textarea.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nTextarea::make('Text')\n    ->customAttributes([\n        'rows' => 6,\n    ])\n```\n\n----------------------------------------\n\nTITLE: ForgotController Password Reset\nDESCRIPTION: This controller handles the password reset functionality, including sending reset links and updating the password. It uses the Password facade for password-related operations and the MoonShineUI facade for displaying toast notifications. The `reset` method sends the reset link, and the `updatePassword` method updates the user's password after validation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ForgotPasswordFormRequest;\nuse App\\Http\\Requests\\ResetPasswordFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\ForgotPage;\nuse Illuminate\\Auth\\Events\\PasswordReset;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\nuse MoonShine\\Laravel\\MoonShineUI;\n\nclass ForgotController extends Controller\n{\n    public function form(ForgotPage $page): ForgotPage\n    {\n        return $page;\n    }\n\n    public function reset(ForgotPasswordFormRequest $request): RedirectResponse\n    {\n        $status = Password::sendResetLink(\n            $request->only('email')\n        );\n\n        if ($status === Password::RESET_LINK_SENT) {\n            MoonShineUI::toast(__('If the account exists, then the instructions are sent to your email'));\n        }\n\n        return $status === Password::RESET_LINK_SENT\n            ? back()->with(['alert' => __($status)])\n            : back()->withErrors(['email' => __($status)]);\n    }\n\n    public function updatePassword(ResetPasswordFormRequest $request): RedirectResponse\n    {\n        $status = Password::reset(\n            $request->only('email', 'password', 'password_confirmation', 'token'),\n            static function (User $user, string $password) {\n                $user->forceFill([\n                    'password' => Hash::make($password),\n                ])->setRememberToken(Str::random(60));\n\n                $user->save();\n\n                event(new PasswordReset($user));\n            }\n        );\n\n        return $status === Password::PASSWORD_RESET\n            ? redirect()->route('login')->with('alert', __($status))\n            : back()->withErrors(['email' => [__($status)]]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource for MorphTo Field to Prevent Errors in Laravel - PHP\nDESCRIPTION: This snippet shows how to instantiate a MorphTo field named 'Commentable' with an explicit resource parameter to specify the resource class (PolyCommentResource) used when querying related models. It defines types mapping Post and Project models to display their 'name' fields. The resource parameter is critical when using MorphTo fields in custom or external resources to avoid incorrect resource resolution, which can cause errors. Requires the MorphTo class and proper resource class imports. Inputs include the field name, resource class, and types mapping; output is a properly scoped MorphTo relation field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/morph-to.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nMorphTo::make('Commentable', resource: PolyCommentResource::class)->types([  \n    Post::class => 'name',  \n    Project::class => 'name',  \n])\n```\n\n----------------------------------------\n\nTITLE: Defining ProfilePage Structure and Components in PHP\nDESCRIPTION: Defines the `ProfilePage` class using `AppLayout`. It sets breadcrumbs and title, and defines components within a `Box`. It uses `FormBuilder` for profile updates, filling fields with authenticated user data. `Tabs` are used to separate profile information (Name, Email) from password update fields. A separate `FormBuilder` handles the logout action.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\AppLayout;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Tabs;\nuse MoonShine\\UI\\Components\\Tabs\\Tab;\nuse MoonShine\\UI\\Fields\\Hidden;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass ProfilePage extends Page\n{\n    protected ?string $layout = AppLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle(),\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'LoginPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            Box::make([\n                FormBuilder::make()\n                    ->class('authentication-form')\n                    ->action(route('profile.update'))\n                    ->fill(auth()->user())\n                    ->fields([\n                        Tabs::make([\n                            Tab::make(__('Profile'), [\n                                Text::make(__('Name'), 'name')->required(),\n                                Text::make('E-mail', 'email')\n                                    ->required()\n                                    ->customAttributes([\n                                        'autofocus' => true,\n                                        'autocomplete' => 'off',\n                                    ]),\n                            ]),\n                            Tab::make(__('Password'), [\n                                Password::make(__('Password'), 'password'),\n                                PasswordRepeat::make(__('Repeat password'), 'password_confirmation'),\n                            ])->active(\n                                session('errors')?->has('password') ?? false\n                            )\n                        ])\n                    ])->submit(__('Update profile'), [\n                        'class' => 'btn-primary btn-lg w-full',\n                    ]),\n            ]),\n\n            FormBuilder::make()\n                ->name('logout')\n                ->class('authentication-form')\n                ->action(route('logout'))\n                ->fields([\n                    Hidden::make('_method')->setValue('DELETE'),\n                ])->submit(__('Log out'), [\n                    'class' => 'btn-primary btn-lg w-full',\n                ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of BelongsToMany with Resource Registration\nDESCRIPTION: Creates a BelongsToMany relation field linked to a specific resource class, facilitating related data management in MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make(\n    'Categories',\n    'categories',\n    resource: CategoryResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values with Example\nDESCRIPTION: This example demonstrates how to use the `default()` method to set default values for a text field and an enum field.  The text field is set to the default string 'Default value'. The `Enum` field defaults to a value derived from the `ColorEnum` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->default('Default value')\n```\n\nLANGUAGE: php\nCODE:\n```\nEnum::make('Status')\n    ->attach(ColorEnum::class)\n    ->default(ColorEnum::from('B')->value)\n```\n\n----------------------------------------\n\nTITLE: Modifying Json Field Table - PHP\nDESCRIPTION: This snippet shows how to modify the table of the Json field using the `modifyTable()` method. It customizes the table by setting a custom style attribute.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->modifyTable(\n        fn(TableBuilder $table, bool $preview) => $table->customAttributes([\n            'style' => 'width: 50%;'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Appending Suffix Text to Number Field in MoonShine - PHP\nDESCRIPTION: Adds a textual suffix (e.g., units or currency symbols) to the Number input field using the suffix() method. This provides additional context to the input value. Input: a string representing the suffix. Output: Number field with the suffix displayed inline after the input value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nsuffix(string $ext)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous JSON Data Element Deletion with MoonShine and PHP\nDESCRIPTION: This snippet implements asynchronous deletion of elements within a JSON array using `Json` and `Text` fields within a MoonShine form. It utilizes JavaScript to perform an asynchronous request to a PHP endpoint, triggering `removeJsonData` to update the data. The PHP method retrieves the item, unsets the array element at the provided index, sorts the array, and then updates the item.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/async-remove-on-click.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        // ...\n\n        Json::make('Data')->fields([\n            Text::make('Title'),\n        ])->removable(attributes: [\n            'data-async-url' => $this->getActivePage()\n                ? $this->getRouter()->getEndpoints()->method('removeAvatar', params: ['resourceItem' => $this->getItemID()])\n                : null,\n            '@click.prevent' => <<<'JS'\n                fetch(`${$event.target.closest('a').dataset.asyncUrl}&index=${$event.target.closest('tr').rowIndex}`).then(() => remove())\n            JS\n        ]),\n\n        // ...\n    ];\n}\n\npublic function removeJsonData(MoonShineRequest $request): void\n{\n    $item = $request->getResource()?->getItem();\n    $index = $request->integer('index') - 1;\n\n    if(is_null($item)) {\n        return;\n    }\n\n    $data = $item->data->toArray();\n    unset($data[$index]);\n    sort($data);\n\n    $item->update(['data' => $data]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table in HasMany Field in PHP\nDESCRIPTION: Method to modify the TableBuilder for preview and form views in a HasMany field. The callback provides the table instance and a preview flag for conditional styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyTable(\n        fn(TableBuilder $table, bool $preview) => $table\n            ->when($preview, fn(TableBuilder $tbl) => $tbl->customAttributes(['style' => 'background: blue']))\n            ->unless($preview, fn(TableBuilder $tbl) => $tbl->customAttributes(['style' => 'background: green']))\n    )\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications using MoonShineNotification static method in PHP\nDESCRIPTION: This snippet showcases how to send a notification using the MoonShineNotification static method. It demonstrates setting message content, optional button, recipient IDs, icon color, and icon, leveraging dependencies such as NotificationButton and Color enum. The purpose is to facilitate sending notifications within Laravel applications with customizable options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/notifications.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Notifications\\MoonShineNotification;\nuse MoonShine\\Laravel\\Notifications\\NotificationButton;\nuse MoonShine\\Support\\Enums\\Color;\n\nMoonShineNotification::send(\n    message: 'Notification text',\n    // Optional button\n    button: new NotificationButton('Click me', 'https://moonshine.cutcode.dev', attributes: ['target' => '_blank']),\n    // Optional administrator IDs (default for all)\n    ids: [1,2,3],\n    // Optional icon color\n    color: Color::GREEN,\n    // Optional icon\n    icon: 'information-circle'\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying HasMany Relationship Fields in Modal Mode with Customization in MoonShine Using PHP\nDESCRIPTION: This snippet demonstrates the modalMode() method to show a HasMany field inside a modal dialog triggered by a button instead of a table. It shows parameter usage for conditionally enabling modals and customizing both the triggering ActionButton and the Modal's properties via closures, allowing highly interactive UI components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->modalMode();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->modalMode(\n        modifyButton: function (ActionButtonContract $button, HasMany $ctx) {\n            $button->warning();\n            return $button;\n        },\n        modifyModal: function (Modal $modal, ActionButtonContract $ctx) {\n            $modal->autoClose(false);\n            return $modal;\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Logic in ForgotController (PHP)\nDESCRIPTION: Defines the `ForgotController` handling password reset requests. It includes methods to display the forgot password form (`form`), send a reset link (`reset`) using the `Password` facade, and update the password using a token (`updatePassword`). It leverages `ForgotPasswordFormRequest`, `ResetPasswordFormRequest`, the `User` model, `MoonShineUI` for user feedback via toasts, and dispatches the `PasswordReset` event upon successful password update.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ForgotPasswordFormRequest;\nuse App\\Http\\Requests\\ResetPasswordFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\ForgotPage;\nuse Illuminate\\Auth\\Events\\PasswordReset;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\nuse MoonShine\\Laravel\\MoonShineUI;\n\nclass ForgotController extends Controller\n{\n    public function form(ForgotPage $page): ForgotPage\n    {\n        return $page;\n    }\n\n    public function reset(ForgotPasswordFormRequest $request): RedirectResponse\n    {\n        $status = Password::sendResetLink(\n            $request->only('email')\n        );\n\n        if ($status === Password::RESET_LINK_SENT) {\n            MoonShineUI::toast(__('If the account exists, then the instructions are sent to your email'));\n        }\n\n        return $status === Password::RESET_LINK_SENT\n            ? back()->with(['alert' => __($status)])\n            : back()->withErrors(['email' => __($status)]);\n    }\n\n    public function updatePassword(ResetPasswordFormRequest $request): RedirectResponse\n    {\n        $status = Password::reset(\n            $request->only('email', 'password', 'password_confirmation', 'token'),\n            static function (User $user, string $password) {\n                $user->forceFill([\n                    'password' => Hash::make($password),\n                ])->setRememberToken(Str::random(60));\n\n                $user->save();\n\n                event(new PasswordReset($user));\n            }\n        );\n\n        return $status === Password::PASSWORD_RESET\n            ? redirect()->route('login')->with('alert', __($status))\n            : back()->withErrors(['email' => [__($status)]]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Images to BelongsTo Values in PHP\nDESCRIPTION: Shows usage of the withImage() method to attach image display to related selection values in a BelongsTo field. The method requires the image column name, disk name (defaulting to 'public'), and an optional directory path relative to the disk root. Here, a BelongsTo field for 'Country' uses the 'thumb' column stored on the 'public' disk inside the 'countries' directory. The snippet depends on CountryResource and requires proper filesystem configuration for image retrieval.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CountryResource;\\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\\n\\nBelongsTo::make('Country', resource: CountryResource::class)\\n    ->withImage('thumb', 'public', 'countries')\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum, Maximum, and Step Values on Number Field in MoonShine - PHP\nDESCRIPTION: Demonstrates configuring numeric constraints and increments on a Number field named 'Price'. The min() and max() methods specify the allowable numeric range, while step() sets the increment/decrement step size. These methods accept integers or floats and enforce validation and UI control limits. Input: numeric min, max, and step parameters. Output: Number field constrained to specified range with defined step increments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Number;\n\nNumber::make('Price')\n    ->min(0)\n    ->max(100000)\n    ->step(5)\n```\n\n----------------------------------------\n\nTITLE: Showing Hidden Field Value While Keeping Input Hidden - PHP\nDESCRIPTION: Demonstrates how to keep a hidden field in a form while visually showing its value using the showValue() method on a Hidden field instance. This uses MoonShine UI's Hidden class in PHP. The field remains hidden in the form input, but its value can be rendered in previews or UI displays. Requires the MoonShine PHP package and is intended to provide visibility of hidden data without changing form behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/hidden.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nHidden::make('category_id')->showValue()\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Field Set\nDESCRIPTION: Provides a sample JSON array representing a typical data structure handled by the Json MoonShine field with fields 'title', 'value', and 'active'. Used as a basis for structuring fields and defaults. Directly copyable for testing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[{\"title\": \"title\", \"value\": \"value\", \"active\": true}]\n```\n\n----------------------------------------\n\nTITLE: Modifying Responses in Async Mode\nDESCRIPTION: This snippet demonstrates how to modify responses in 'async' mode. It shows how to override methods like `modifyDestroyResponse`, `modifyMassDeleteResponse`, `modifySaveResponse` and `modifyErrorResponse` to customize the behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse MoonShine\\Laravel\\Http\\Responses\\MoonShineJsonResponse;\n\npublic function modifyDestroyResponse(MoonShineJsonResponse $response): MoonShineJsonResponse\n{\n    return $response;\n}\n\npublic function modifyMassDeleteResponse(MoonShineJsonResponse $response): MoonShineJsonResponse\n{\n    return $response;\n}\n\npublic function modifySaveResponse(MoonShineJsonResponse $response): MoonShineJsonResponse\n{\n    return $response;\n}\n\npublic function modifyErrorResponse(Response $response, Throwable $exception): Response\n{\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the HtmlMode Enum (PHP)\nDESCRIPTION: Defines the `HtmlMode` enum used by `MoonShineJsonResponse::html()` and `MoonShineJsonResponse::htmlData()` to specify how HTML content should be inserted relative to a target selector (e.g., replacing inner HTML, inserting before/after the element).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nenum HtmlMode: string\n{\n    case INNER_HTML = 'inner_html';\n\n    case OUTER_HTML = 'outer_html';\n\n    case BEFORE_BEGIN = 'beforebegin';\n\n    case AFTER_BEGIN = 'afterbegin';\n\n    case BEFORE_END = 'beforeend';\n\n    case AFTER_END = 'afterend';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Fieldset Display with Components in PHP\nDESCRIPTION: This code snippet illustrates how to modify the visual presentation of a Fieldset by injecting additional components such as LineBreak, enabling UI customization within a form. It involves defining a Fieldset with specific child components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/fieldset.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nFieldset::make('Title', [\n    Text::make('Title'),\n    LineBreak::make(),\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Notification Implementation\nDESCRIPTION: Example showing how to register a custom notification implementation by binding a custom class to the MoonShineNotificationContract interface in a service provider. This allows for complete replacement of the default notification system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/notifications.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(): void\n{\n    $this->app->singleton(\n        MoonShineNotificationContract::class,\n        MyNotificationSystem::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Assets for a Custom MoonShine Component (PHP)\nDESCRIPTION: Illustrates defining default assets for a custom component class (e.g., `MyComponent` extending `MoonShineComponent`) by overriding the `assets()` method. These assets will be included whenever the component is used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\nuse MoonShine\\UI\\Components\\MoonShineComponent;\n\nfinal class MyComponent extends MoonShineComponent\n{\n    /**\n     * @return list<AssetElementContract>\n     */\n    protected function assets(): array\n    {\n        return [\n            Js::make('/js/custom.js'),\n            Css::make('/css/styles.css')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Create Button for Json Field (PHP)\nDESCRIPTION: Illustrates how to modify the create button (after enabling it with `creatable()`) for a Moonshine Json field using `modifyCreateButton()`. This example adds a custom CSS class ('btn-primary') to the create button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(ActionButton $button, self $field): ActionButton  $callback\n */\nmodifyCreateButton(Closure $callback)\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->creatable()\n    ->modifyCreateButton(\n        fn(ActionButton $button) => $button->customAttributes([\n            'class' => 'btn-primary'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Display Names for Files\nDESCRIPTION: Change how file names are displayed to users without altering the actual file names using the names() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File', 'file')\n    ->names(fn(string $filename, int $index = 0) => 'File ' . $index + 1)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Form Buttons to HasMany Field in PHP\nDESCRIPTION: Method to add additional ActionButtons inside the form when creating or editing a HasMany element. Allows extending form functionality with custom actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->formButtons([\n        ActionButton::make('Custom form button')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating a Column Component in PHP with MoonShine\nDESCRIPTION: Shows how to create a Column component within a Grid in the MoonShine framework. Columns can be configured with different spans for responsive layouts with separate behavior for desktop and smaller screens.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/grid.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    iterable $components = [],\n    int $colSpan = 12,\n    int $adaptiveColSpan = 12,\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying creatable parameters in PHP\nDESCRIPTION: This code provides a detailed breakdown of the available parameters for the creatable() method when used with TableBuilder. These parameters control the behavior and appearance of the 'add new row' functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\ncreatable(\n    bool $reindex = true,\n    ?int $limit = null,\n    ?string $label = null,\n    ?string $icon = null,\n    array $attributes = [],\n    ?ActionButtonContract $button = null\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MorphTo Relationship Field with String Type Mapping - MoonShine Laravel PHP\nDESCRIPTION: Demonstrates usage of the MorphTo relationship field in a Laravel form using the MoonShine framework, where the 'types' method maps a polymorphic relationship class to a single display field name. Dependencies include the MoonShine package, the related model classes (such as Article), and Laravel's Eloquent. 'Commentable' is the field name, and the types array determines which attribute is used as the display label for each model. Inputs are the MorphTo field setup; the output is a form element with dynamic type selection based on passed models.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/morph-to.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphTo;\n\nMorphTo::make('Commentable')->types([\n    Article::class => 'title'\n])\n```\n\n----------------------------------------\n\nTITLE: Setting ValueMetric Value Method\nDESCRIPTION: Method signature for specifying the value displayed in a ValueMetric, which can accept integers, strings, floats, or a Closure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nvalue(int|string|float|Closure $value)\n```\n\n----------------------------------------\n\nTITLE: Initializing Hidden Field in MoonShine UI - PHP\nDESCRIPTION: Creates a hidden input field using the MoonShine UI's Hidden field class. This snippet requires the MoonShine PHP package and its UI fields namespace. The method make('category_id') sets the hidden field's name. It is used to include hidden data in forms, with the input rendered as a hidden HTML element. No direct output is expected beyond form inclusion.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/hidden.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Hidden;\\n\\nHidden::make('category_id')\n```\n\n----------------------------------------\n\nTITLE: Setting Column Width for ValueMetric\nDESCRIPTION: Method for controlling the width of the metric in a Grid layout, with separate parameters for desktop and mobile display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ncolumnSpan(\n    int $columnSpan,\n    int $adaptiveColumnSpan = 12\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom MoonShine PHP Field with Assets\nDESCRIPTION: This PHP snippet shows the class definition for a custom MoonShine field named `Quill`, which extends `Textarea`. It specifies a custom view file and defines the `assets()` method to include the necessary CSS and JavaScript files for the Quill editor.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nnamespace App\\MoonShine\\Fields;\n\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\nuse MoonShine\\UI\\Fields\\Textarea;\n\nfinal class Quill extends Textarea\n{\n    protected string $view = 'moonshine-quill::fields.quill';\n\n    public function assets(): array\n    {\n        return [\n            Css::make('/css/moonshine/quill/quill.snow.css'),\n            Js::make('/js/moonshine/quill/quill.js'),\n            Js::make('/js/moonshine/quill/quill-init.js'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking BelongsToMany Relation in MoonShine PHP\nDESCRIPTION: Demonstrates how to use the `relatedLink()` method with the `linkRelation` parameter to create a link pointing to a specific related resource based on the provided relation name ('category'). This link typically leads to the index page of the child resource filtered by the parent.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->relatedLink('category')\n```\n\n----------------------------------------\n\nTITLE: Form with Custom Event Trigger in PHP\nDESCRIPTION: Shows how to create a form that triggers a custom event named 'my-event' upon form update using the async method with a custom event string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/form-with-events.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make(route('form-table.store'))\n    ->fields([\n        Text::make('Title')\n    ])\n    ->name('main-form')\n    ->async(events: ['form_updated:my-event'])\n```\n\n----------------------------------------\n\nTITLE: Adding Assets within a MoonShine Component's Booted Lifecycle (PHP)\nDESCRIPTION: Demonstrates adding assets within a component's lifecycle using the `booted()` method. Access the `AssetManager` via `$this->getAssetManager()` to add assets after the component is initialized and booted.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\nuse MoonShine\\UI\\Components\\MoonShineComponent;\n\nfinal class MyComponent extends MoonShineComponent\n{\n    protected function booted(): void\n    {\n        parent::booted();\n\n        $this->getAssetManager()\n          ->add(Css::make('/css/app.css'))\n          ->append(Js::make('/js/app.js'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in MoonShine (PHP)\nDESCRIPTION: Configures the default localization setting for the MoonShine panel. This can be set either via the 'locale' key in the `config/moonshine.php` file or by using the `locale()` method on the config object within `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n'locale' => 'en',\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->locale('en');\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Field (Class)\nDESCRIPTION: Demonstrates how to create a Text field instance in MoonShine using PHP. This snippet uses the `Text::make()` method to create a new text input field with a label.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Title')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Query for BelongsTo Options in MoonShine (PHP)\nDESCRIPTION: Example using `valuesQuery()` to filter the options displayed in a 'Category' `BelongsTo` field. The provided closure modifies the query to only include categories where the 'active' column is true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsTo::make('Category', 'category', resource: CategoryResource::class)\n    ->valuesQuery(fn(Builder $query, Field $field) => $query->where('active', true))\n```\n\n----------------------------------------\n\nTITLE: Installing ApexCharts library for Line/Donut charts\nDESCRIPTION: This command installs the ApexCharts library for use with Line and Donut charts in MoonShine projects. It is required for visualizing chart data, based on the ApexCharts JavaScript library.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require moonshine/apexcharts\n```\n\n----------------------------------------\n\nTITLE: Defining Forgot Password Page with MoonShine - PHP\nDESCRIPTION: Implements the ForgotPage class extending MoonShine\\Laravel\\Pages\\Page, configuring a form layout for password reset requests. Dependencies include various MoonShine UI components (FormBuilder, Divider, Flex, ActionButton, etc.) and routing helpers. The form collects the user's email, applies validation and disables auto-complete, and presents a submit button. Users can also easily navigate to the login page. Expects no complex input beyond user email; output is a rendered MoonShine page component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\FormLayout;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Divider;\nuse MoonShine\\UI\\Components\\Layout\\Flash;\nuse MoonShine\\UI\\Components\\Layout\\Flex;\nuse MoonShine\\UI\\Components\\Link;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass ForgotPage extends Page\n{\n    protected ?string $layout = FormLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'ForgotPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            FormBuilder::make()\n                ->class('authentication-form')\n                ->action(route('forgot'))\n                ->fields([\n                    Text::make('E-mail', 'email')\n                        ->required()\n                        ->customAttributes([\n                            'autofocus' => true,\n                            'autocomplete' => 'off',\n                        ]),\n                ])->submit(__('Reset password'), [\n                    'class' => 'btn-primary btn-lg w-full',\n            ]),\n\n            Divider::make(),\n\n            Flex::make([\n                ActionButton::make(__('Log in'), route('login'))->primary(),\n            ])->justifyAlign('start')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Moonshine Notifications Component in PHP\nDESCRIPTION: This snippet demonstrates how to instantiate the Notifications component using PHP with the static make() method. It requires the Moonshine PHP package to be installed and configured properly. The snippet is typically used to programmatically create a Notifications instance within backend logic before rendering it in a view.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/notifications.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nNotifications::make()\n```\n\n----------------------------------------\n\nTITLE: Assigning Icons to Menu Items and Groups in MoonShine\nDESCRIPTION: This snippet explores different methods for adding icons to menu elements: via constructor parameter, icon() method, and resource attribute. It enhances menu visual cues and usability.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Admins', MoonShineUserResource::class, 'users'), // icon via parameter\n            MenuItem::make('Roles', MoonShineUserRoleResource::class, 'hashtag')\n        ]\n        ->icon('cog', path: 'icons'); // group icon\n    }\n}\n\n// Resource with Icon attribute\n#[Icon('users')]\nclass MoonShineUserResource extends ModelResource\n{\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Component - Shell\nDESCRIPTION: Creates a custom component with associated PHP and Blade template files for MoonShine admin interfaces. The command allows customization of base directory and namespace, resulting in a PHP class under app/MoonShine/Components and a Blade view under resources/views/admin/components. Dependencies include Laravel's Blade system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:component\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout for MoonShine Admin Panel - Shell\nDESCRIPTION: Generates a layout class inheriting from either the compact or base theme, with options to set as the default template and customize directory/namespace. After execution, the new layout resides in app/MoonShine/Layouts. Requires an existing Laravel+MoonShine installation and is used to control admin panel appearance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:layout\n```\n\n----------------------------------------\n\nTITLE: Configuring Key/Value Mode in MoonShine Json Field in PHP\nDESCRIPTION: Configures the Json field for key/value storage using keyValue(), suitable for associative-array-like JSON data. Accepts parameters for labeling and optionally replacing input field types via $keyField and $valueField. Default fields are Text unless overridden. Ideal for flat key/value data structures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->keyValue()\n```\n\n----------------------------------------\n\nTITLE: Implementing Date-Filtered Line Chart Metrics in PHP with Moonshine Software\nDESCRIPTION: This code creates a dashboard component with a date filter form and a line chart metric. The component allows users to select date ranges that dynamically update the line chart showing order profit sums and averages. The form triggers an Alpine.js event to refresh only the metrics fragment when date parameters change.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/async-metrics.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function components(): iterable\n{\n    $startDate = request()->date('_data.start_date');\n    $endDate = request()->date('_data.end_date');\n\n    return [\n        FormBuilder::make()\n            ->dispatchEvent(AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'metrics'))\n            ->fields([\n                Flex::make([\n                    Date::make('Start date'),\n                    Date::make('End date'),\n                ]),\n            ]),\n\n        Fragment::make([\n            FlexibleRender::make(\"$startDate - $endDate\"),\n\n            LineChartMetric::make('Orders')\n                ->line([\n                    'Profit' => Order::query()\n                        ->selectRaw('SUM(price) as sum, DATE_FORMAT(created_at, \"%d.%m.%Y\") as date')\n                        ->whereBetween('created_at', [$startDate, $endDate])\n                        ->groupBy('date')\n                        ->pluck('sum', 'date')\n                        ->toArray(),\n                ])\n                ->line([\n                    'Avg' => Order::query()\n                        ->selectRaw('AVG(price) as avg, DATE_FORMAT(created_at, \"%d.%m.%Y\") as date')\n                        ->whereBetween('created_at', [$startDate, $endDate])\n                        ->groupBy('date')\n                        ->pluck('avg', 'date')\n                        ->toArray(),\n                ], '#EC4176'),\n        ])->name('metrics'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Create Button in MoonShine PHP\nDESCRIPTION: This snippet shows how to completely replace the default create button by returning a new `ActionButton` instance within the `modifyCreateButton` method. This allows full control over the button's text, link, and other properties. Requires `MoonShine\\Contracts\\UI\\ActionButtonContract` and `MoonShine\\UI\\Components\\ActionButton`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function modifyCreateButton(ActionButtonContract $button): ActionButtonContract\n{\n    return ActionButton::make('Create');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value on Number Field in MoonShine - PHP\nDESCRIPTION: Configures a default numeric value for a Number field named 'Title' using the default() method. This method accepts any mixed value representing the field's default value when no user input is provided. Dependency: MoonShine\\UI\\Fields\\Number. Input: numeric or mixed default value parameter. Output: Number field pre-filled with the specified default value during form display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Number;\n\nNumber::make('Title')\n    ->default(2)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Changing HasMany Field Display Based on Count in PHP\nDESCRIPTION: Example of conditionally changing the display method of HasMany field based on the count of related records.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink(condition: function (int $count, Field $field): bool {\n        return $count > 10;\n    })\n```\n\n----------------------------------------\n\nTITLE: Auto-sized Modal with Blade Component (MoonShine, Blade)\nDESCRIPTION: Sets the modal's width to automatically adapt to content using the 'auto' parameter on <x-moonshine::modal>. Includes a content section and a trigger button with Alpine.js event. Only requires MoonShine and Blade.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal auto title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open auto modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Overriding the isCan Method for Custom Authorization Logic (PHP)\nDESCRIPTION: This snippet shows how to override the isCan method in a resource class to customize or supplement authorization logic per Ability. The method accepts an Ability enum value and returns a boolean result, delegating to the parent implementation by default. To utilize this, developers should customize the logic inside isCan or combine it with stock behavior. Dependencies include MoonShine\\Laravel\\Enums\\Ability and an appropriate parent class with isCan defined.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/authorization.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Enums\\Ability;\n\nprotected function isCan(Ability $ability): bool\n{\n    return parent::isCan($ability);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Field Links with link Method\nDESCRIPTION: Shows how to override the default link behavior of a BelongsTo field by using the link() method to specify custom URLs, display names, icons, and target behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make(\n    'Category',\n    'category',\n    resource: CategoryResource::class,\n)\n->link(\n    link: fn(string $value, BelongsTo $ctx) => $ctx->getResource()->getDetailPageUrl($ctx->getData()->getKey()),\n    name: fn(string $value) => $value,\n    icon: 'users',\n    blank: true,\n)\n```\n\n----------------------------------------\n\nTITLE: Calling Events using Native JS\nDESCRIPTION: This JavaScript snippet shows how to dispatch custom events in JavaScript within the MoonShine admin panel to trigger actions. It utilizes the `CustomEvent` constructor and `dispatchEvent` to trigger an event with a specific name, which can then be listened for by other parts of the application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    this.dispatchEvent(new CustomEvent(\"modal_toggled:my-modal\"))\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Handler for MoonShine Import/Export\nDESCRIPTION: Command to generate a custom handler class for implementing custom import or export functionality. The generated class should be modified to extend either ImportHandler or ExportHandler instead of the base Handler class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:handler\n```\n\n----------------------------------------\n\nTITLE: Modifying Item Buttons in MoonShine HasMany Relationships Using PHP\nDESCRIPTION: This snippet demonstrates the use of the modifyItemButtons() method on a HasMany relationship field to customize the default set of action buttons (view, edit, delete, mass delete). It takes a closure with all buttons and returns an array of buttons to display, enabling tailored button configurations in the resource's UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(ActionButtonContract $detail, ActionButtonContract $edit, ActionButtonContract $delete, ActionButtonContract $massDelete, static $ctx): array  $callback\n */\nmodifyItemButtons(Closure $callback);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyItemButtons(\n        fn(ActionButton $detail, $edit, $delete, $massDelete, HasMany $ctx) => [$detail]\n    );\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Response Callback with JavaScript (JavaScript)\nDESCRIPTION: Defines a JavaScript listener for custom callback functions triggered via async responses, handling different response scenarios like confirmation status.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myFunction', function(response, element, events, component) {\n        if(response.confirmed === true) {\n            component.$dispatch('toast', {type: 'success', text: 'Success'})\n        } else {\n            component.$dispatch('toast', {type: 'error', text: 'Error'})\n        }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Column Label for Relation Field\nDESCRIPTION: Overrides the default column header in the table by specifying a custom label using 'columnLabel()'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->columnLabel('Title')\n```\n\n----------------------------------------\n\nTITLE: Using canSee Method in MoonShine Components\nDESCRIPTION: Demonstrates how to conditionally display a component using the canSee() method, which accepts a callback function to determine visibility.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nBox::make()\n    ->canSee(function (Box $ctx) {\n        return true;\n    })\n```\n\n----------------------------------------\n\nTITLE: Changing Button Display\nDESCRIPTION: This snippet shows how to control button display within the index page using `showInLine()` and `showInDropdown()` methods. It demonstrates setting `ActionButton` properties to change their appearance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function indexButtons(): ListOf\n    {\n        return parent::indexButtons()->prepend(\n            ActionButton::make('Button 1', '/')\n                ->showInLine(),\n            ActionButton::make('Button 2', '/')\n                ->showInDropdown(),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding new rows with creatable method in PHP\nDESCRIPTION: The `creatable()` method allows adding new rows. It shows how to use the `creatable()` method to make the table dynamic, allowing users to add new rows.  This method offers several parameters for customization like `reindex`, `limit`, `label`, and more.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n->creatable(reindex: true, limit: 5, label: 'Add', icon: 'plus', attributes: ['class' => 'my-class'])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Action Buttons to BelongsToMany Field (PHP)\nDESCRIPTION: Uses the `buttons()` method to add 'Check all' and 'Uncheck all' buttons to the 'Categories' `BelongsToMany` field. These buttons use `ActionButton` components with `onClick` handlers to trigger JavaScript functions ('checkAll', 'uncheckAll') on the client-side, preventing default form submission.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->buttons([\n        ActionButton::make('Check all', '')\n            ->onClick(fn() => 'checkAll', 'prevent'),\n\n        ActionButton::make('Uncheck all', '')\n            ->onClick(fn() => 'uncheckAll', 'prevent')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Specifying Searchable Fields in MoonShine ModelResource PHP\nDESCRIPTION: Defines which model fields participate in the search by returning an array of field names in the search() method inside a ModelResource class. Returning an empty array will disable the search bar display. The snippet assumes usage within a MoonShine resource class extending ModelResource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/search.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    protected function search(): array\\n    {\\n        return ['id', 'title', 'text'];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Display with Custom View Example\nDESCRIPTION: This example shows how to use the `customView()` method to change the display of a text field to use a custom view file 'fields.my-custom-input'. The field rendering will be replaced with your view, which allows for complete control over the field's appearance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nText::make('Title')\n    ->customView('fields.my-custom-input')\n```\n\n----------------------------------------\n\nTITLE: Defining ForgotPage Structure and Components in PHP\nDESCRIPTION: Defines the `ForgotPage` class, extending `MoonShine\\Laravel\\Pages\\Page`. It specifies the `FormLayout`, sets up breadcrumbs, defines the page title, and configures the page components using `FormBuilder` to create a password reset request form with an email field and a submit button. It also includes a link back to the login page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\FormLayout;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Divider;\nuse MoonShine\\UI\\Components\\Layout\\Flash;\nuse MoonShine\\UI\\Components\\Layout\\Flex;\nuse MoonShine\\UI\\Components\\Link;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass ForgotPage extends Page\n{\n    protected ?string $layout = FormLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'ForgotPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            FormBuilder::make()\n                ->class('authentication-form')\n                ->action(route('forgot'))\n                ->fields([\n                    Text::make('E-mail', 'email')\n                        ->required()\n                        ->customAttributes([\n                            'autofocus' => true,\n                            'autocomplete' => 'off',\n                        ]),\n                ])->submit(__('Reset password'), [\n                    'class' => 'btn-primary btn-lg w-full',\n            ]),\n\n            Divider::make(),\n\n            Flex::make([\n                ActionButton::make(__('Log in'), route('login'))->primary(),\n            ])->justifyAlign('start')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MoonShine Components Using Artisan Command in Shell\nDESCRIPTION: Explains how to generate new custom components within the MoonShine admin panel via a built-in Artisan command. Executing php artisan moonshine:component scaffolds a component with its own Blade view and logic. This facilitates adding tailored UI elements or functionality to the admin panel. The command supports various options documented separately. Requires Laravel with MoonShine installed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:component\n```\n\n----------------------------------------\n\nTITLE: Activating Menu Items by URL PHP\nDESCRIPTION: This snippet shows how to use `whenActive()` method within a menu to determine if a menu item is considered active. The `whenActive()` method accepts a closure that checks if the current URL matches a specified pattern. Dependencies: MoonShine framework. Input: Closure to check the current URL. Output: Menu item is active if the closure returns true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Label', '/endpoint')\n                ->whenActive(fn() => request()->fullUrlIs('*admin/endpoint/*')),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RelationRepeater Field for HasMany Relationship in PHP\nDESCRIPTION: Alternative way to display HasMany relationship fields inside the main form using RelationRepeater field. Allows defining fields directly in the form context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nRelationRepeater::make('Characteristics', 'characteristics')\n    ->fields([\n        ID::make(),\n        Text::make('Name', 'name'),\n        Text::make('Value', 'value'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Embedding Related Fields in Main Forms Using RelationRepeater in MoonShine with PHP\nDESCRIPTION: This snippet demonstrates the RelationRepeater field as an alternative to HasMany for embedding related data fields directly inside the main resource form. It allows nested fields such as IDs and text inputs to be managed with a fluent interface, enabling more integrated editing experiences without leaving the main form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Text;\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\n\nRelationRepeater::make('Characteristics', 'characteristics')\n    ->fields([\n        ID::make(),\n        Text::make('Name', 'name'),\n        Text::make('Value', 'value')\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Menu Item Template PHP\nDESCRIPTION: This snippet illustrates how to override the default template for menu items and groups using `customView()`.  This changes the view used for rendering menu items and groups. Dependencies: MoonShine framework.  Input: Path to a Blade template. Output: Custom view rendered for the specified menu item or group.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:5]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('Group', [\n                MenuItem::make('Label', '/endpoint')\n                    ->customView('admin.custom-menu-item'),\n            ])\n                ->customView('admin.custom-menu-group'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany associatedWith in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `associatedWith()` method on the `BelongsToMany` field. It takes the `$column` name of the related field and an optional `searchQuery` closure for filtering values, enabling linked selection between fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nassociatedWith(string $column, ?Closure $searchQuery = null)\n```\n\n----------------------------------------\n\nTITLE: Creating a HasOne Relationship Field Without Explicit Resource\nDESCRIPTION: Defines a HasOne field where the resource class is omitted, assuming it matches the relationship name. The relationship name defaults from the label, and dependencies are MoonShine's HasOne class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Profile')\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Display Value with a Field Name in MoonShine (PHP)\nDESCRIPTION: Demonstrates overriding the default display value for the related model. Instead of using the default column specified in the `ModelResource` (`$column`), this example uses the 'first_name' field from the related 'user' table by passing it to the `formatted` parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'User',\n    'user',\n    formatted: 'first_name'\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Profile Page (service provider)\nDESCRIPTION: This snippet demonstrates how to completely replace the profile page through the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$config->changePage(\n    \\MoonShine\\Laravel\\Pages\\ProfilePage::class,\n    \\App\\MoonShine\\Pages\\CustomProfile::class\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Modal in Blade with Content and Trigger (MoonShine, Blade)\nDESCRIPTION: Presents a Blade-level usage of the moonshine::modal component with specified title, slot content, and outer trigger using <x-moonshine::link-button>. The trigger button uses Alpine.js click event to show the modal. Requires Blade, MoonShine, and Alpine.js.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Field with Options (PHP Class)\nDESCRIPTION: This snippet demonstrates how to create a basic Select field in MoonShine using the PHP class, including defining options with values and labels. It utilizes the `Select::make()` method to create the field and the `options()` method to set the available options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Applying Data to FieldsGroup\nDESCRIPTION: Applies data to a `FieldsGroup` instance. This example demonstrates how to pass an array of data to the `fill` method, which will populate the corresponding fields within the group.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nFieldsGroup::make($fields)\n    ->fill($data)\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Alpine.js x-if in PHP Components\nDESCRIPTION: Details xIf() method that conditionally renders elements by removing them from the DOM based on reactive variables, operators, and values. Supports closures for complex conditions and an optional wrapper flag to control container usage, providing fine-grained UI control.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nxIf(\n    string|Closure $variable,\n    ?string $operator = null,\n    ?string $value = null,\n    bool $wrapper = true\n)\n\nDiv::make([\n    Select::make('Type')\n        ->native()\n        ->options([1 => 1, 2 => 2])\n        ->xModel(),\n\n    Text::make('Title')\n        ->xModel()\n        ->xIf('type', 1)\n])\n    ->xData(['title' = 'Hello world', 'type' => 1])\n```\n\n----------------------------------------\n\nTITLE: Adding Lock Icon to MoonShine Date Field (PHP)\nDESCRIPTION: Adds a lock icon next to the Date field using the `locked()` method. This visually indicates that the field is locked or read-only in the interface. It requires chaining the method onto the field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: Modifying the Table within Json Field (PHP)\nDESCRIPTION: Explains how to modify the underlying `TableBuilder` component within a Moonshine Json field using the `modifyTable()` method. The example demonstrates adding an inline style attribute to the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(TableBuilder $table, bool $preview): TableBuilder $callback\n */\nmodifyTable(Closure $callback)\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->modifyTable(\n        fn(TableBuilder $table, bool $preview) => $table->customAttributes([\n            'style' => 'width: 50%;'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: ActionButton Hotkey in Confirmation Form\nDESCRIPTION: Assigns hotkeys to an ActionButton within a confirmation form.  The `hotKeys` method is used within the `withConfirm` method's `submit` button configuration. This example also shows using multiple modifier keys, such as shift, d, and meta (command key).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->method('updateSomething')\n    ->withConfirm(\n        formBuilder: fn(FormBuilder $form): FormBuilder => $form\n            ->submit(\n                button: ActionButton::make('Confirm')->error()->hotKeys(['shift', 'd', 'meta'], true)\n            )\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Blank for Url Field in PHP\nDESCRIPTION: Shows how to add the target=\"_blank\" attribute to make links open in a new browser window or tab.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/url.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nblank()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Url;\n\nUrl::make('Link')\n    ->blank()\n```\n\n----------------------------------------\n\nTITLE: Instantiating Thumbnails Component in PHP (Class Context)\nDESCRIPTION: Demonstrates how to create an instance of the `Thumbnails` component using its static `make` method within a PHP class, passing an array of image paths. Requires importing the `MoonShine\\UI\\Components\\Thumbnails` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/thumbnails.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Thumbnails;\n\nThumbnails::make([\n    '/images/image_1.jpg',\n    '/images/image_2.jpg',\n    '/images/image_3.jpg',\n]),\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelDataWrapper (PHP)\nDESCRIPTION: This class implements the DataWrapperContract for models in MoonShine. It wraps a Model instance and provides methods for retrieving the original model, the model's key, and converting the model to an array, leveraging the model's built-in methods.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/type-casts.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal readonly class ModelDataWrapper implements DataWrapperContract\n{\n    public function __construct(private Model $model)\n    {\n    }\n\n    public function getOriginal(): Model\n    {\n        return $this->model;\n    }\n\n    public function getKey(): int|string|null\n    {\n        return $this->model->getKey();\n    }\n\n    public function toArray(): array\n    {\n        return $this->model->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Image View Method PHP\nDESCRIPTION: Uses the `image()` view method on a `Preview` field. This method expects the field's value to be a URL string and renders it as a thumbnail image directly within the resource display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/preview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Thumb')\n    ->image()\n```\n\n----------------------------------------\n\nTITLE: Activating Overlay Mode in CardsBuilder in PHP\nDESCRIPTION: Demonstrates the activation of 'overlay' mode on cards via the 'overlay()' method. Overlay mode enables rendering the title and subtitles on top of the image thumbnail, producing a more integrated visual effect. The example chains setup methods including items, fields, casting, thumbnail, header badges, title, subtitle, and finally overlay activation to build a rich card layout with overlayed text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Text::make('Text')])\n    ->cast(new ModelCaster(Article::class))\n    ->thumbnail('thumbnail')\n    ->header(static fn() => Badge::make('new', 'success'))\n    ->title('title')\n    ->subtitle(static fn() => 'Subtitle')\n    ->overlay()\n```\n\n----------------------------------------\n\nTITLE: Adding Assets in onLoad\nDESCRIPTION: This snippet shows how to add CSS and JavaScript assets to the resource using the `onLoad()` method and the asset manager.  The example adds a custom CSS file and a JS file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\n\nprotected function onLoad(): void\n{\n    $this->getAssetManager()\n        ->add(Css::make('/css/app.css'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Import/Export Dependency via Composer\nDESCRIPTION: This snippet demonstrates the installation of the `moonshine/import-export` package using Composer. The command `composer require moonshine/import-export` is executed in the shell to add the package to the project's dependencies. This is the prerequisite step for using the import and export features within a MoonShine application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/import-export\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Slug in PHP\nDESCRIPTION: The `live()` method creates a dynamic slug field. It watches for changes in the source field and automatically updates the slug. This example also includes the use of `reactive()` on the title field for it to trigger the live updates in the slug field. This functionality relies on the reactive fields feature of the framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/slug.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nText::make('Title')\n    ->reactive(),\nSlug::make('Slug')\n    ->from('title')\n    ->live()\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine Card Blade Component with Properties\nDESCRIPTION: Illustrates the usage of the MoonShine card as a Blade component within Laravel views. This snippet shows passing title, thumbnail URL, URL, subtitle, and values as bound variables to the component. The component slot allows inclusion of dynamic content inside the card. Dependencies include Laravel Blade components and the MoonShine package installation. Inputs are sanitized and rendered by the Blade templating engine producing structured HTML cards.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::card\n        :title=\"fake()->sentence(3)\"\n        :thumbnail=\"'https://moonshine-laravel.com/images/image_1.jpg'\"\n        :url=\"'https://cutcode.dev'\"\n        :subtitle=\"'test'\"\n        :values=\"['ID' => 1, 'Author' => fake()->name()]\"\n>\n    {{ fake()->text(100) }}\n</x-moonshine::card>\n```\n\n----------------------------------------\n\nTITLE: Creating an Admin Controller - Shell\nDESCRIPTION: This command generates a new controller class for use in the MoonShine admin panel, supporting options for custom directory and namespace. Upon completion, the controller is placed in app/MoonShine/Controllers, suitable for registering in admin routes. Requires Laravel's routing and controller system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:controller\n```\n\n----------------------------------------\n\nTITLE: Rendering Boolean Indicator Using MoonShine Blade Component in Blade Templates\nDESCRIPTION: This Blade snippet illustrates how to render boolean indicators directly in Blade templates via the custom <x-moonshine::boolean> component. It accepts a 'value' boolean attribute, which should be bound to either true or false, and displays a TRUE or FALSE indicator accordingly. This method is typically used within Laravel Blade views and relies on the MoonShine package providing the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/boolean.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::boolean :value=\"true\" />\\n<x-moonshine::boolean :value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Email in MoonShine Resource - PHP\nDESCRIPTION: This snippet adds a filter to the resource class that allows filtering user records by email. It defines a Text filter field that applies a case-insensitive 'whereLike' query when a non-null value is provided, enabling dynamic search capabilities in the admin panel. It depends on Laravel's query builder and MoonShine filter components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function filters(): iterable\n{\n    return [\n        Text::make('E-mail', 'email')\n            ->onApply(fn(Builder $query, ?string $value) => $value === null ? $query : $query->whereLike('email', \"%$value%\")),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Span for Card Grid Layout in PHP\nDESCRIPTION: Demonstrates how to define card width in grid layout using columnSpan method, with separate settings for desktop and mobile views.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->columnSpan(3)\n```\n\n----------------------------------------\n\nTITLE: Creating TopBar with Menu Component in MoonShine using PHP\nDESCRIPTION: This snippet demonstrates how to programmatically create a TopBar navigation bar in MoonShine using PHP. It utilizes the static make method of the TopBar class, accepting an iterable of components, such as a Menu set to align at the top. Dependencies include the MoonShine\\UI\\Components\\Layout\\Menu and MoonShine\\UI\\Components\\Layout\\TopBar classes. Provide an array of components when calling make; the resulting output is a composed UI element. Ensure MoonShine is installed and the appropriate namespaces are available.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/topbar.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Menu;\nuse MoonShine\\UI\\Components\\Layout\\TopBar;\n\nTopBar::make([\n    Menu::make()->top()\n])\n```\n\n----------------------------------------\n\nTITLE: Disabling Async Mode for MoonShine Resource Tables using PHP\nDESCRIPTION: This snippet disables the asynchronous mode in a MoonShine resource by setting the protected property $isAsync to false. Async mode enables pagination, filtering, and sorting without full page reloads. Disabling it reverts to traditional synchronous page actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    protected bool $isAsync = false;\\n\\n    // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling File Deletion in PHP\nDESCRIPTION: This code snippet shows how to disable file deletion with the `disableDeleteFiles()` method, only deleting the database record and preserving the file. This modifies the behavior of the removable functionality. MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->removable()\n    ->disableDeleteFiles()\n```\n\n----------------------------------------\n\nTITLE: Color Conversion using ColorMutator - PHP\nDESCRIPTION: Demonstrates how to convert between HEX and RGB color formats using the ColorMutator utility class.  Includes examples for converting from RGB to HEX and from HEX to RGB. Requires the `MoonShine\\ColorManager\\ColorMutator` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\ColorManager\\ColorMutator;\n\n// Конвертация в HEX\nColorMutator::toHEX('120, 67, 233'); // '#7843e9'\n\n// Конвертация в RGB\nColorMutator::toRGB('#7843e9'); // '120,67,233'\n```\n\n----------------------------------------\n\nTITLE: Implementing Locales Component in Blade\nDESCRIPTION: This snippet demonstrates how to include the `Locales` component within a Blade template using a custom Blade component tag.  This allows for easy integration of the locale selection feature into the application's UI.  It relies on the existence of the `x-moonshine::layout.locales` Blade component.  The expected output is a button within the layout enabling users to switch locales.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/locales.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.locales/>\n```\n\n----------------------------------------\n\nTITLE: Triggering MoonShine OffCanvas using Global Class JavaScript\nDESCRIPTION: Demonstrates triggering the OffCanvas toggle event using the global `MoonShine.ui` JavaScript object, providing a centralized way to control UI components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.ui.toggleOffCanvas('my-canvas')\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceWithParent Trait for HasMany Related Resource in PHP\nDESCRIPTION: Shows how to implement the ResourceWithParent trait to get the parent ID in a related resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass PostImageResource extends ModelResource\n{\n    use ResourceWithParent;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Asynchronous Search for BelongsTo Field (Method Signature) in MoonShine (PHP)\nDESCRIPTION: Shows the method signature for `asyncSearch()`, used to enable server-side, asynchronous searching for options in a `BelongsTo` field, suitable for large datasets. Parameters allow customization of the search column, query logic, result formatting, association with other fields, result limit, and the AJAX endpoint URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nasyncSearch(\n    string $column = null,\n    ?Closure $searchQuery = null,\n    ?Closure $formatted = null,\n    ?string $associatedWith = null,\n    int $limit = 15,\n    ?string $url = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Using PageType Enum in MoonShine (PHP)\nDESCRIPTION: Demonstrates how to use the `MoonShine\\Support\\Enums\\PageType` enum to reference standard page types (Index, Form, Detail) within MoonShine applications. This provides a clear and type-safe way to identify page purposes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Support\\Enums\\PageType;\n\nPageType::INDEX; // Index page\nPageType::FORM; // Form page\nPageType::DETAIL; // Detail page\n```\n\n----------------------------------------\n\nTITLE: Defining the `inLine` Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `inLine()`, used to display related BelongsToMany items as a string. It accepts optional parameters for a separator, displaying items as badges (boolean or Closure), and generating links (Closure).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ninLine(string $separator = '', Closure|bool $badge = false, ?Closure $link = null)\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Search Integration with Laravel Scout in PHP\nDESCRIPTION: Details steps for integrating global search in MoonShine using Laravel Scout. It includes installing the moonshine/scout package, publishing its provider, configuring searchable models in 'config/moonshine-scout.php', implementing the HasGlobalSearch interface and Searchable trait in models, defining the searchableQuery method for query constraints, and customizing the toSearchableResponse method to return a SearchableResponse object containing display data. Finally, it shows overriding the search component in the MoonShine layout class to use the Scout search component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/search.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/scout\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\\\"MoonShine\\Scout\\Providers\\ScoutServiceProvider\\\"\n```\n\nLANGUAGE: php\nCODE:\n```\n'models' => [\\n    Article::class,\\n    User::class,\\n],\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Models;\\n\\nuse Laravel\\Scout\\Builder;\\nuse Laravel\\Scout\\Searchable;\\nuse MoonShine\\Scout\\HasGlobalSearch;\\nuse MoonShine\\Scout\\SearchableResponse;\\n\\nclass Article extends Model implements HasGlobalSearch\\n{\\n    use Searchable;\\n\\n    public function searchableQuery(Builder $builder): Builder\\n    {\\n        return $builder->take(4);\\n    }\\n\\n    public function toSearchableResponse(): SearchableResponse\\n    {\\n        return new SearchableResponse(\\n            group: 'Articles',\\n            title: $this->title,\\n            url: '/',\\n            preview: $this->text,\\n            image: $this->thumbnail,\\n        );\\n    }\\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getSearchComponent(): ComponentContract\\n{\\n    return MoonShine\\Scout\\Components\\Search::make();\\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Pages with MoonShine - Shell\nDESCRIPTION: Creates page classes (or groups of CRUD pages) for the MoonShine admin dashboard. Options include specifying the directory, parent class to extend, base dir/namespace, with support for force-creation and skipping registration. Generated files reside under app/MoonShine/Pages. Requires Laravel and MoonShine to be set up.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page\n```\n\n----------------------------------------\n\nTITLE: Configuring Creatable and Removable Options\nDESCRIPTION: This snippet demonstrates how to configure the ability to create and delete items within the RelationRepeater field. `creatable()` enables the creation of new related records, limited to a maximum of 5 in this case. `removable()` enables the deletion of existing related records.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRelationRepeater::make('Comments', 'comments')\n    ->creatable(limit: 5)\n    ->removable()\n```\n\n----------------------------------------\n\nTITLE: Loading MoonShine OffCanvas Content Asynchronously PHP\nDESCRIPTION: Shows how to configure an OffCanvas to load its content from a specified URL asynchronously using the `asyncUrl` parameter in the `make` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make('Title', '', 'Show Panel', asyncUrl: '/endpoint'),\n```\n\n----------------------------------------\n\nTITLE: Mass Field Modification - PHP\nDESCRIPTION: This demonstrates the use of the `mapFields()` method for mass modification of fields. It takes a callback function that iterates over the fields and allows to modify each field. The callback function receives `$field` (FieldContract) and `$index` (int) as parameters and returns a modified FieldContract. This enables custom logic to be applied to each field in the set. The code shows a simple anonymous function that returns the same field, to showcase the structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nFieldsGroup::make($fields)\n    ->mapFields(\n        fn(FieldContract $field, int $index): FieldContract => $field\n    )\n```\n\n----------------------------------------\n\nTITLE: Triggering Async MoonShine OffCanvas with ActionButton PHP\nDESCRIPTION: Demonstrates triggering an asynchronous OffCanvas using an ActionButton. It shows how to use the `async()` method on the button and specify the `JsEvent::OFF_CANVAS_TOGGLED` event for the target off-canvas.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make(\n    'Show Panel',\n    '/endpoint'\n)\n    ->async(events: [AlpineJs::event(JsEvent::OFF_CANVAS_TOGGLED, 'my-canvas')])\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Popover Implementation\nDESCRIPTION: Implementation of a popover without using the component. This approach uses the Alpine.js popover directive with a data-content attribute to define the popover content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/popover.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span x-data=\"popover\" data-content=\"HTML HERE\">\n    <a class=\"text-purple font-semibold\">Popover 1</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Adding a Copy Button to Date Field in PHP\nDESCRIPTION: Demonstrates adding a button next to the Date field that copies the field's current value to the clipboard. This is achieved using the `copy()` method. The method signature indicates an optional parameter to customize the copied value template, defaulting to the field's value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ncopy(string $value = '{{value}}')\n```\n\nLANGUAGE: php\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->copy()\n```\n\n----------------------------------------\n\nTITLE: Customizing Profile Page (config)\nDESCRIPTION: This snippet demonstrates how to completely replace the profile page through the configuration file `config/moonshine.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'pages' => [\n    'profile' => App\\MoonShine\\Pages\\CustomProfile::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Storing Settings with PHP\nDESCRIPTION: The `store()` method handles the saving of form data to the database. It first applies the form's input to a `Setting` model instance by using the form's `apply()` method. Then, it saves the updated `Setting` to the database and displays a success message using `MoonShineJsonResponse::make()->toast('Saved');`. It uses the `FormBuilder` to get user data and save to db.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/dashboard-settings.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function store(): MoonShineJsonResponse\n{\n    $this->form()->apply(fn(Setting $item) => $item->save());\n\n    return MoonShineJsonResponse::make()->toast('Saved');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MorphOne Relationship Field in Laravel with PHP\nDESCRIPTION: This PHP snippet demonstrates the creation of a MorphOne relationship field in a Laravel application using the MoonShine package. It requires importing the related resource class and the MorphOne field class. The MorphOne::make method takes three parameters: the display name 'Profile', the relation method 'profile', and the related resource class ProfileResource::class. This setup configures a polymorphic one-to-one relationship field in a resource for use in admin interfaces. Expected inputs are the relation name and the linked resource, while the output is a configured MorphOne relationship field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/morph-one.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\ProfileResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphOne;\n\nMorphOne::make(\n    'Profile',\n    'profile',\n    resource: ProfileResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Authorization Rules via MoonShineConfigurator (PHP)\nDESCRIPTION: Uses the authorizationRules() method of MoonShineConfigurator to add or override custom permission logic for resources and actions. Requires MoonShineConfigurator, ResourceContract, Model, and Ability types. The code uses a closure to define custom boolean logic, granting or denying access in a granular way. Must be called inside the ServiceProvider boot method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\n// ...\n\n/**\n * @param  MoonShineConfigurator  $configurator\n */\npublic function boot(ConfiguratorContract $configurator): void\n{\n    $configurator->authorizationRules(\n        static function (ResourceContract $resource, Model $user, Ability $ability): bool {\n            return true;\n        }\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting grid column span for a metric block in PHP\nDESCRIPTION: This snippet explains how to control the width of the metric block within a grid layout using the columnSpan() method, which adjusts for desktop and mobile responsiveness.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n->columnSpan(\n    int $columnSpan,\n    int $adaptiveColumnSpan = 12\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Assets within a MoonShine CrudResource (PHP)\nDESCRIPTION: Illustrates adding assets specifically for a CRUD resource using the `onLoad()` lifecycle hook. Access the `AssetManager` via `$this->getAssetManager()` and use methods like `prepend()` or `append()` to control load order.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\AssetManager\\InlineJs;\nuse MoonShine\\AssetManager\\Js;\n\nprotected function onLoad(): void\n{\n    $this->getAssetManager()\n        ->prepend(InlineJs::make('alert(1)'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the TableBuilder\nDESCRIPTION: This snippet shows how to modify the underlying TableBuilder instance used by the RelationRepeater field.  It adds a custom CSS class 'custom-table' to the table element. This allows for fine-grained control over the table's appearance and behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\n\nRelationRepeater::make('Comments', 'comments')\n    ->modifyTable(\n        fn(TableBuilder $table, bool $preview) => $table\n            ->customAttributes([\n                'class' => 'custom-table'\n            ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Fields in StackFields via Callback in PHP\nDESCRIPTION: Shows how to dynamically change the fields displayed within `StackFields` based on specific conditions. This is achieved by passing a callback function to the `fields()` method, which evaluates a condition (e.g., checking the model's ID) and returns the appropriate array of fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/stack-fields.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nStackFields::make('Stack')\n    ->fields(\n        fn(StackFields $ctx) => $ctx->getData()?->getOriginal()->id === 3 ? [\n            Date::make('Creation date', 'created_at'),\n        ] : [\n            Date::make('Creation date', 'created_at'),\n            LineBreak::make(),\n            Email::make('Email', 'email'),\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing MoonShine Resource Event Methods in PHP\nDESCRIPTION: A comprehensive example showing all available event methods that can be implemented in a MoonShine resource class. These methods allow for custom logic execution before and after CRUD operations like creating, updating, deleting, and mass deleting resources.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/events.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function beforeCreating(mixed $item): mixed\n{\n    if (auth()->user()->moonshine_user_role_id !== 1) {\n        request()->merge([\n            'author_id' => auth()->id(),\n        ]);\n    }\n\n    return $item;\n}\n\nprotected function afterCreated(mixed $item): mixed\n{\n    return $item;\n}\n\nprotected function beforeUpdating(mixed $item): mixed\n{\n    if (auth()->user()->moonshine_user_role_id !== 1) {\n        request()->merge([\n            'author_id' => auth()->id(),\n        ]);\n    }\n\n    return $item;\n}\n\nprotected function afterUpdated(mixed $item): mixed\n{\n    return $item;\n}\n\nprotected function beforeDeleting(mixed $item): mixed\n{\n    return $item;\n}\n\nprotected function afterDeleted(mixed $item): mixed\n{\n    return $item;\n}\n\nprotected function beforeMassDeleting(array $ids): void\n{\n    // Logic goes here\n}\n\nprotected function afterMassDeleted(array $ids): void\n{\n    // Logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Building an Asynchronous Form for Settings Using MoonShine FormBuilder in PHP\nDESCRIPTION: This private method constructs a FormBuilder instance configured for asynchronous submission via the 'store' method. It pre-fills the form with the Setting model data retrieved from getSetting(), applying model casting for data consistency. The method declares the fields of the form (placeholders indicated) to be edited or displayed. This method depends on the FormBuilder and ModelCaster components, and expects the Setting model instance to be correctly provided for filling and type casting.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/dashboard-settings.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprivate function form(): FormBuilder\n{\n    return FormBuilder::make()\n        ->asyncMethod('store')\n        ->fillCast($this->getSetting(), new ModelCaster(Setting::class))\n        ->fields([\n          // Fields here\n        ])\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip to a Moonshine Link (PHP Class)\nDESCRIPTION: Illustrates adding a tooltip that appears on hover to a Moonshine link. This is achieved by chaining the `tooltip()` method after `Link::make`, passing the desired tooltip text as an argument.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n    ->tooltip('Tooltip')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Form Buttons in MoonShine Resources\nDESCRIPTION: Demonstrates how to add custom ActionButton components to a form by overriding the formButtons() method in a resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function formButtons(): ListOf\n{\n    return parent::formButtons()->add(ActionButton::make('Link', '/endpoint'));\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Redirect After Delete Method\nDESCRIPTION: This snippet overrides the `getRedirectAfterDelete()` method to customize the redirect URL after deleting a record. It uses `$this->getIndexPageUrl()` to redirect to the index page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function getRedirectAfterDelete(): string\n{\n    return $this->getIndexPageUrl();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Resource Item - MoonShine PHP\nDESCRIPTION: This snippet exemplifies how to retrieve the currently active item in a resource via the getItem() helper method inside a MoonShine resource class. Requires an existing resource instance with routing to detail or edit pages. No external input is needed beyond the resource context. Outputs the Eloquent model instance for current resource item, and is typically used within resource methods.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->getItem();\n```\n\n----------------------------------------\n\nTITLE: Example with custom add button in PHP\nDESCRIPTION: This snippet shows how to customize the add button using the `button` parameter of the `creatable()` method.  It demonstrates how to specify a custom button using the ActionButton.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nTableBuilder::make()\n    ->creatable(\n        button: ActionButton::make('Foo', '#')\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Url Title with Closure in PHP\nDESCRIPTION: This example illustrates how to use the `title()` method to set a custom, dynamically generated title for the Url field. It passes a Closure that receives the URL string and the field context, allowing manipulation of the displayed title. In this specific case, the title is limited to the first 3 characters of the URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/url.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Url;\n\nUrl::make('Link')\n    ->title(fn(string $url, Url $ctx) => str($url)->limit(3))\n```\n\n----------------------------------------\n\nTITLE: Adding Form Buttons with Event Dispatch in FormBuilder (PHP)\nDESCRIPTION: This full method provides an example of extending form buttons to include an action that triggers a FORM_SUBMIT event via AlpineJs. The ActionButton integrates event dispatching for seamless UI interactions. Assumes inheritance from a parent::formButtons method and usage within a Laravel or Moonshine FormBuilder context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected function formButtons(): ListOf\n{\n    return parent::formButtons()\n        ->add(\n            ActionButton::make('Save')\n                ->dispatchEvent(AlpineJs::event(JsEvent::FORM_SUBMIT, $this->uriKey()))\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML CSS Variables from ColorManager PHP\nDESCRIPTION: Shows how to output configured color variables as CSS custom properties in a style block via the toHtml() method of ColorManager. The resulting HTML snippet defines light and dark theme colors as CSS variables scoped under :root and :root.dark selectors. This facilitates easy integration of colors into frontend styling. The snippet includes sample CSS output demonstrating variable naming and RGB retention. Expects ColorManager instance with colors configured.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$colorManager->toHtml()\n```\n\n----------------------------------------\n\nTITLE: Using icon() Method with custom path - PHP\nDESCRIPTION: This example shows how to specify a custom directory path where your icons are located.  It uses the `path` parameter and expects Blade templates of your icons to be in the specified directory. The `$icon` parameter is the name of the Blade file within the icon directory, and `$path` contains the location of the icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n->icon('cog', path: 'icons')\n```\n\n----------------------------------------\n\nTITLE: Color Enum Definition\nDESCRIPTION: Defines the available color options as an enum in PHP. These enums are used to specify the color of the Color component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/color.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nenum Color: string\n{\n    case PRIMARY = 'primary';\n\n    case SECONDARY = 'secondary';\n\n    case SUCCESS = 'success';\n\n    case ERROR = 'error';\n\n    case WARNING = 'warning';\n\n    case INFO = 'info';\n\n    case PURPLE = 'purple';\n\n    case PINK = 'pink';\n\n    case BLUE = 'blue';\n\n    case GREEN = 'green';\n\n    case YELLOW = 'yellow';\n\n    case RED = 'red';\n\n    case GRAY = 'gray';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MoonShine Page via Artisan Command\nDESCRIPTION: Demonstrates the `php artisan moonshine:page` command used to scaffold a new Page class file within the `app/MoonShine/Pages` directory. Pages created this way are automatically registered; manual creation requires registration in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan moonshine:page\n```\n\n----------------------------------------\n\nTITLE: Initializing Profile Component in PHP\nDESCRIPTION: Defines the signature of the static make method to initialize a Profile component instance with options for routing, avatar, names, borders, and authentication guard. The method allows setting the profile URL route, logout URL route, closures for avatar, user name and username rendering, a boolean flag for display border, and an optional guard string representing the authentication context. This snippet requires the Profile class and proper type handling for parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/profile.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    ?string $route = null,\n    ?string $logOutRoute = null,\n    ?Closure $avatar = null,\n    ?Closure $nameOfUser = null,\n    ?Closure $username = null,\n    bool $withBorder = false,\n    ?string $guard = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a HasOne Relationship Field with Resource in Laravel\nDESCRIPTION: Initializes a HasOne field specifying label, relationship name, and the related resource class. It ensures the resource is registered in the system, necessary for the relationship to function properly. Dependencies include MoonShine's HasOne class and the related resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make(\n    'Profile',\n    'profile',\n    resource: ProfileResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Rendering in StackFields Using Callback in PHP\nDESCRIPTION: Illustrates passing a callback function to the fields() method to dynamically adjust which fields are grouped based on a runtime condition. The callback receives the StackFields context and accesses original data to determine the set of fields to display. Requires MoonShine field classes Date, LineBreak, and Email. This approach supports flexible, conditional UI rendering depending on data attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/stack-fields.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nStackFields::make('Stack')\n    ->fields(\n        fn(StackFields $ctx) => $ctx->getData()?->getOriginal()->id === 3 ? [\n            Date::make('Creation date', 'created_at'),\n        ] : [\n            Date::make('Creation date', 'created_at'),\n            LineBreak::make(),\n            Email::make('Email', 'email'),\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Thumbnails to Cards with thumbnail() Method in PHP\nDESCRIPTION: Describes how to add an image thumbnail to each card using the 'thumbnail()' method. The method accepts either a column name containing the URL/path to an image or a Closure returning the image URL dynamically. The snippet shows usage with paginated article data passing a 'thumbnail' column. This enables visual enhancement of cards with associated imagery.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nthumbnail(Closure|string $value)\n\nCardsBuilder::make(\n    items: Article::paginate()\n)\n    ->fields([Text::make('Text')])\n    ->thumbnail('thumbnail')\n    // or by url\n    // ->thumbnail(fn() => 'https://example.com/image.png')\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany buttons in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `buttons()` method on the `BelongsToMany` field. It accepts an array of MoonShine `ActionButton` components, allowing the addition of custom buttons like 'Check all' or 'Uncheck all' to the field interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nbuttons(array $buttons)\n```\n\n----------------------------------------\n\nTITLE: Configure Async, Lazy TableBuilder with External Data PHP\nDESCRIPTION: Configures a TableBuilder ('my-table') for async and lazy loading. The 'whenAsync' method loads data from an external API when an asynchronous request occurs. Intended to be updated by an external event (e.g., an ActionButton).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->name('my-table')\n    ->fields([\n        ID::make(),\n        Slug::make('Slug'),\n        Text::make('Title'),\n        Preview::make('Image')->image()\n    ])\n    ->async()\n    ->lazy()\n    ->whenAsync(\n        fn(TableBuilder $table) => $table->items(\n            Http::get('https://jsonplaceholder.org/posts')->json()\n        )\n    ),\n    ->withNotFound()\n```\n\n----------------------------------------\n\nTITLE: Declaring Export Fields in MoonShine Resource\nDESCRIPTION: This code snippet illustrates how to declare the fields to be exported from a MoonShine resource. The `exportFields()` method is overridden to define an iterable of fields, similar to `importFields()`. The example includes `ID` and `Text` fields. The fields specified here determine the data columns in the exported file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function exportFields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Name'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Single Record Query Builder in MoonShine Resource with PHP\nDESCRIPTION: This snippet demonstrates overriding the modifyItemQueryBuilder method to customize the query used for retrieving individual database records. Specifically, it adds the withTrashed() method on the Eloquent Builder to include soft-deleted (trashed) records in the result. The method receives a Builder instance and returns the modified Builder. This approach is useful for altering the default retrieval behavior to include additional records, such as those marked as deleted, without fully replacing the finder logic handled by findItem().\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function modifyItemQueryBuilder(Builder $builder): Builder\n    {\n        return $builder->withTrashed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing File Field in PHP\nDESCRIPTION: This snippet demonstrates how to initialize a File field within a MoonShine form using PHP. It instantiates the `File` class and sets the field name.  No dependencies are explicitly listed, but the MoonShine framework is a prerequisite. The output is a File field element for file uploads.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\File;\n\nFile::make('File')\n```\n\n----------------------------------------\n\nTITLE: Declaring Import Fields in MoonShine Resource\nDESCRIPTION: This code snippet illustrates how to declare fields for the import functionality within a MoonShine resource.  The `importFields()` method is overridden to define an array of fields that will be used during the import process. The example includes an `ID` field and a `Text` field for 'Name'. The fields are defined using MoonShine's UI components.  The order of the fields in the array is crucial, as this defines the order in which they will be processed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function importFields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Name'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Within JSON Keys in MoonShine ModelResource PHP\nDESCRIPTION: Shows how to specify JSON key paths as searchable fields within the search() method of a MoonShine ModelResource. The first example demonstrates searching in a single-level JSON key using 'data->title'. The second extends this to multi-dimensional JSON arrays using a wildcard path 'data->[\\*]->title'. This enables searching values inside JSON columns treated as key-value storage or complex nested structures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/search.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    protected function search(): array\\n    {\\n        return ['data->title'];\\n    }\\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    protected function search(): array\\n    {\\n        return ['data->[*]->title'];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Name in PHP\nDESCRIPTION: This snippet shows how to customize the file name with the `customName()` method, which takes a Closure as an argument.  It uses dependencies such as Illuminate\\Http\\UploadedFile and Illuminate\\Support\\Str. MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Str;\n\nFile::make('File', 'file')\n    ->customName(fn(UploadedFile $file, Field $field) =>  Str::random(10) . '.' . $file->extension())\n```\n\n----------------------------------------\n\nTITLE: Defining MorphTo Field with Simple Type Mapping in Laravel - PHP\nDESCRIPTION: This code snippet demonstrates how to create a MorphTo relationship field named 'Commentable' in a Laravel model using MoonShine, mapping the related models to display a specific attribute via the types() method. The configuration maps the Article model to display its 'title' field. It requires the MoonShine\\Laravel\\Fields\\Relationships\\MorphTo class and assumes the related models are correctly defined. The input is an associative array where keys are model classes and values are the string names of display fields. The output is a configured MorphTo field enabling polymorphic relations in the admin interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/morph-to.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphTo;  \n\nMorphTo::make('Commentable')->types([  \n    Article::class => 'title'  \n])\n```\n\n----------------------------------------\n\nTITLE: Using the onLoad() Lifecycle Hook for Active Pages in PHP\nDESCRIPTION: Demonstrates overriding the `onLoad()` method in a `Page` class. This lifecycle hook is executed when the page instance is loaded and considered the currently active page within the request lifecycle. Useful for actions specific to the active page context. Remember to call `parent::onLoad()` if overriding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass PostPage extends Page\n{\n    // ...\n\n    protected function onLoad(): void\n    {\n        parent::onLoad();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using icon() Method - Basics in PHP\nDESCRIPTION: This snippet demonstrates the basic usage of the `icon()` method. It uses the default Heroicons set (Outline) to display an icon.  Requires the `icon()` method to be available.  It takes the icon's name as a string. No special parameters are specified in this example.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n->icon('cog')\n```\n\n----------------------------------------\n\nTITLE: Using AlpineJs helper for event creation\nDESCRIPTION: Demonstrates the use of the `AlpineJs::event()` static method to generate event configuration arrays for binding to components. Supports specifying event type, component name, and parameters for context-specific event dispatching.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nAlpineJs::event(JsEvent::TABLE_UPDATED, 'index', ['var' => 'foo'])\n```\n\nLANGUAGE: PHP\nCODE:\n```\nAlpineJs::eventBlade(JsEvent::FORM_RESET, 'main-form') => 'formReset'\n```\n\n----------------------------------------\n\nTITLE: Enabling Tabbed Display of HasMany Relationship Fields in MoonShine Using PHP\nDESCRIPTION: The tabMode() method converts the default bottom display of HasMany fields to be shown inside tabs in the form interface. This example assigns separate HasMany fields to different tabs, improving form organization and readability, but is incompatible with disableOutside() usage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->tabMode(),\nHasMany::make('Covers', 'covers', resource: CoverResource::class)\n    ->tabMode();\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Header Component in PHP\nDESCRIPTION: Defines the static method make that initializes a Header instance with an iterable list of UI components. The parameter $components accepts an array of component instances that will be included inside the Header layout. This method supports flexible composition of header elements and is used for constructing the header programmatically within PHP code. Required dependencies include MoonShine\\UI\\Components\\Layout\\Header and component classes such as Search. The input $components array allows dynamic configuration of the header’s content. The output is a Header instance containing the specified components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/header.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Setting Paginator with ModelCaster in PHP\nDESCRIPTION: This example demonstrates how to use `paginator()` method to set a paginator for the table, including using `ModelCaster` for QueryBuilder. This shows how to specify a paginator that supports QueryBuilder. The example assumes usage of `Article` model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n->paginator(\n  (new ModelCaster(Article::class))\n    ->paginatorCast(\n        Article::query()->paginate()\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using ModelCaster in TableBuilder (PHP)\nDESCRIPTION: This snippet demonstrates how to use the ModelCaster in a TableBuilder to cast data to a User model. It paginates the User data and applies the ModelCaster to the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/type-casts.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make(items: User::paginate())\n    ->fields([\n        Text::make('Email'),\n    ])\n    ->cast(new ModelCaster(User::class))\n```\n\n----------------------------------------\n\nTITLE: Pushing Components to Pages in MoonShine PHP ServiceProvider\nDESCRIPTION: This PHP snippet demonstrates how to directly add custom components to specific built-in MoonShine pages, such as the ProfilePage, from within the ServiceProvider's `boot` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(): void\n{\n    ProfilePage::pushComponent(\n        fn() => MyPackageComponent::make()\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Component with Enum in PHP\nDESCRIPTION: This code showcases the usage of the `Color` component with the enum `ColorEnum`. The `make()` method is called on the `Color` class, passing `ColorEnum::PURPLE` as a parameter to set the color. The component will render a `<div>` with the `purple` color. It depends on: `MoonShine\\Support\\Enums\\Color` and `MoonShine\\UI\\Components\\Color`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/color.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\Color as ColorEnum;\nuse MoonShine\\UI\\Components\\Color;\n\nColor::make(ColorEnum::PURPLE)\n```\n\n----------------------------------------\n\nTITLE: Opening ActionButton Link in New Tab in PHP\nDESCRIPTION: Illustrates using the `blank()` method on an `ActionButton` instance to add the `target=\"_blank\"` attribute to the underlying link, causing it to open in a new browser tab or window.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label', '/')\n    ->blank()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Layout using the #[Layout] Attribute in PHP\nDESCRIPTION: Shows an alternative method to define the page layout by using the `#[Layout]` PHP attribute directly above the `Page` class declaration. The attribute takes the layout class name (e.g., `AppLayout::class`) as an argument.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Core\\Attributes\\Layout;\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\n\n#[Layout(AppLayout::class)]\nclass CustomPage extends Page\n```\n\n----------------------------------------\n\nTITLE: Customizing User Fields\nDESCRIPTION: This snippet demonstrates how to customize the user fields used for authentication and profile.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->userField('username', 'login')\n    ->userField('password', 'pass')\n    ->userField('name', 'full_name')\n    ->userField('avatar', 'profile_image');\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods to Provide Dynamic Title and Subtitle in MoonShine PHP Page\nDESCRIPTION: Illustrates overriding the `getTitle()` and `getSubtitle()` methods to implement dynamic logic for page headers. If the `$title` or `$subtitle` properties are unset or empty, default strings are returned. This pattern facilitates programmatic customization of page titles beyond static properties.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    // ...\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'CustomPage';\n    }\n\n    public function getSubtitle(): string\n    {\n        return $this->subtitle ?: 'Подзаголовок';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RangeSlider Field in MoonShine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to instantiate a RangeSlider field in the MoonShine framework for selecting a range of values, such as age, with two underlying data fields (e.g., 'age_from' and 'age_to'). It leverages the static make method with the displayed label and configures the mapped fields using fromTo. Dependencies include the MoonShine\\UI\\Fields\\RangeSlider class, and it is intended for use within form field definitions where two related data columns represent the lower and upper bounds of a range.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/range-slider.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\RangeSlider;\n\nRangeSlider::make('Age')\n    ->fromTo('age_from', 'age_to')\n```\n\n----------------------------------------\n\nTITLE: Defining Fields and Relationships in ArticleFormPage - PHP\nDESCRIPTION: This code snippet defines the fields for the ArticleFormPage, including various input types and relationships such as BelongsTo, HasMany, and HasOne. It showcases how to create custom fields, tabs, and layouts for a form page in MoonShine. The fields method returns an iterable array of UI components and fields. The commentsField and commentField methods are used to handle relationships and are included in both fields and mainLayer to be found by MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/tabs.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages\\Article;\n\nuse App\\Models\\Comment;\nuse App\\MoonShine\\Resources\\CommentResource;\nuse App\\MoonShine\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasOne;\nuse MoonShine\\Laravel\\Fields\\Slug;\nuse MoonShine\\Laravel\\Pages\\Crud\\FormPage;\nuse MoonShine\\Laravel\\TypeCasts\\ModelCaster;\nuse MoonShine\\TinyMce\\Fields\\TinyMce;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Collapse;\nuse MoonShine\\UI\\Components\\Heading;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Layout\\Column;\nuse MoonShine\\UI\\Components\\Layout\\Flex;\nuse MoonShine\\UI\\Components\\Layout\\Grid;\nuse MoonShine\\UI\\Components\\Layout\\LineBreak;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\nuse MoonShine\\UI\\Components\\Tabs;\nuse MoonShine\\UI\\Components\\Tabs\\Tab;\nuse MoonShine\\UI\\Fields\\Color;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Image;\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Number;\nuse MoonShine\\UI\\Fields\\Preview;\nuse MoonShine\\UI\\Fields\\RangeSlider;\nuse MoonShine\\UI\\Fields\\StackFields;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\nuse MoonShine\\UI\\Fields\\Url;\n\nfinal class ArticleFormPage extends FormPage\n{\n    protected function fields(): iterable\n    {\n        return [\n            ID::make(),\n\n            Grid::make([\n                Column::make([\n                    Box::make('Main information', [\n                        ActionButton::make(\n                            'Link to article',\n                            $this->getResource()->getItem()?->getKey() ? route('articles.show', $this->getResource()->getItem()) : '/',\n                        )\n                            ->icon('paper-clip')\n                            ->blank(),\n\n                        LineBreak::make(),\n\n                        BelongsTo::make('Author', resource: MoonShineUserResource::class)\n                            ->asyncSearch()\n                            ->canSee(fn () => auth()->user()->moonshine_user_role_id === 1)\n                            ->required(),\n\n                        Collapse::make('Title/Slug', [\n                            Heading::make('Title/Slug'),\n\n                            Flex::make([\n                                Text::make('Title')\n                                    ->withoutWrapper()\n                                    ->required()\n                                ,\n\n                                Slug::make('Slug')\n                                    ->from('title')\n                                    ->unique()\n                                    ->separator('-')\n                                    ->withoutWrapper()\n                                    ->required()\n                                ,\n                            ])\n                                ->name('flex-titles')\n                                ->justifyAlign('start')\n                                ->itemsAlign('start'),\n                        ]),\n\n                        StackFields::make('Files')->fields([\n                            Image::make('Thumbnail')\n                                ->removable()\n                                ->disk('public')\n                                ->dir('articles'),\n                        ]),\n\n                        Preview::make('No input field', 'no_input', static fn () => fake()->realText()),\n\n                        RangeSlider::make('Age')\n                            ->min(0)\n                            ->max(60)\n                            ->step(1)\n                            ->fromTo('age_from', 'age_to'),\n\n                        Number::make('Rating')\n                            ->hint('From 0 to 5')\n                            ->min(0)\n                            ->max(5)\n                            ->link('https://cutcode.dev', 'CutCode', blank: true)\n                            ->stars(),\n\n                        Url::make('Link')\n                            ->hint('Url')\n                            ->link('https://cutcode.dev', 'CutCode', blank: true)\n                            ->suffix('url')\n                        ,\n\n                        Color::make('Color'),\n\n                        Json::make('Data')->fields([\n                            Text::make('Title'),\n                            Text::make('Value'),\n                        ])->creatable()->removable(),\n\n                        Switcher::make('Active'),\n                    ]),\n                ])->columnSpan(6),\n\n                Column::make([\n                    Box::make('Seo and categories', [\n                        Tabs::make([\n                            Tab::make('Seo', [\n                                Text::make('Seo title')\n                                    ->withoutWrapper(),\n\n                                Text::make('Seo description')\n                                    ->withoutWrapper(),\n\n                                TinyMce::make('Description')\n                                    ->addPlugins(['code', 'codesample'])\n                                    ->toolbar(' | code codesample')\n                                    ->required()\n                                ,\n                            ]),\n\n                            Tab::make('Categories', [\n                                BelongsToMany::make('Categories')->tree('category_id'),\n                            ]),\n                        ]),\n                    ]),\n                ])->columnSpan(6),\n            ]),\n\n            $this->getCommentsField(),\n            $this->getCommentField(),\n        ];\n    }\n\n    private function getCommentsField(): HasMany\n    {\n        return HasMany::make('Comments', resource: CommentResource::class)\n            ->fillData($this->getResource()->getItem())\n            ->async()\n            ->creatable();\n    }\n\n    private function getCommentField(): HasOne\n    {\n        return HasOne::make('Comment', resource: CommentResource::class)\n            ->fillData($this->getResource()->getItem())\n            ->async();\n    }\n\n    protected function mainLayer(): array\n    {\n        return [\n            Tabs::make([\n                Tab::make('Basics', parent::mainLayer()),\n                Tab::make('Comments', [\n                    $this->getResource()->getItem() ? $this->getCommentsField() : 'To add comments, save the article',\n                ]),\n                Tab::make('Comment', [\n                    $this->getResource()->getItem() ? $this->getCommentField() : 'To add comments, save the article',\n                ]),\n                Tab::make('Table', [\n                    TableBuilder::make()\n                        ->fields([\n                            ID::make(),\n                            Text::make('Text')\n                        ])\n                        ->cast(new ModelCaster(Comment::class))\n                        ->items($this->getResource()->getItem()?->comments ?? [])\n                ]),\n            ]),\n        ];\n    }\n\n    protected function bottomLayer(): array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Json field with creatable and removable options\nDESCRIPTION: This code configures a Json field named 'Data' to allow adding new elements using `creatable()` and removing existing elements using `removable()`.  A limit is placed on the number of creatable elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->keyValue()\n    ->creatable(limit: 6)\n    ->removable()\n```\n\n----------------------------------------\n\nTITLE: Customizing the Create Button in BelongsTo\nDESCRIPTION: This code snippet demonstrates how to customize the 'create' button in a `BelongsTo` field using the `creatable()` method's `button` parameter. This permits custom styling and behavior for creating new related objects. It uses an instance of `ActionButton` to configure the button's appearance and functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:3]\nuse App\\MoonShine\\Resources\\AuthorResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nBelongsTo::make('Author', resource: AuthorResource::class)\n    ->creatable(\n        button: ActionButton::make('Custom button', '')\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Alpine.js component in MoonShine\nDESCRIPTION: This snippet illustrates the process of defining a custom Alpine.js component within MoonShine, including setting up a Blade view with x-data attribute and initializing the component logic in a separate JavaScript file. It presumes Alpine.js is already included and initialized.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div x-data=\"myComponent\"></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"alpine:init\", () => {\n    Alpine.data(\"myComponent\", () => ({\n        init() {\n            // ...\n        },\n    }))\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Content with MoonShineJsonResponse (PHP)\nDESCRIPTION: Demonstrates setting up an `ActionButton` to make an asynchronous request targeting `#my-selector` and using `MoonShineJsonResponse::html()` in the corresponding endpoint handler to insert the string 'Content' into that selector using the default innerHTML mode. Requires `ActionButton` and `MoonShineJsonResponse` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label', '/endpoint')->async(selector: '#my-selector')\n\n//...\n\nMoonShineJsonResponse::make()->html('Content');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Buttons for Json Field (PHP)\nDESCRIPTION: Demonstrates how to completely override the default buttons for a Moonshine Json field using the `buttons()` method. This example replaces the default remove button with a custom ActionButton configured with specific icons, actions, and styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nbuttons(array $buttons)\n```\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data', 'data.content')\n    ->fields([\n        Text::make('Title'),\n        Image::make('Image'),\n        Text::make('Value'),\n    ])\n    ->buttons([\n        ActionButton::make('')\n            ->icon('trash')\n            ->onClick(fn() => 'remove()', 'prevent')\n            ->secondary()\n            ->showInLine()\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Index Buttons to HasMany Relationships in MoonShine Using PHP\nDESCRIPTION: This snippet shows how to add custom action buttons to the index toolbar of the HasMany relationship field by passing an array of ActionButton instances to the indexButtons() method, enabling additional user operations not covered by default actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->indexButtons([\n        ActionButton::make('Custom button')\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dropzone Attributes in PHP\nDESCRIPTION: This snippet shows how to add custom attributes to the Dropzone element, using the `dropzoneAttributes()` method. It takes a closure to specify attributes. Also includes the use of `multiple()`.  MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('Files')\n    ->dropzoneAttributes(fn(File $ctx) => ['class' => 'custom-class'])\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality in Select Field (PHP Class)\nDESCRIPTION: This snippet demonstrates how to add search functionality to a Select field using the `searchable()` method. This allows the user to search for options within the list, which is useful for large datasets.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Customizing URL alias for query tags with alias() in PHP\nDESCRIPTION: Defines a query tag 'Archived Posts' with a custom URL alias 'archive' using alias(). This overrides the default transliteration-based URL segment, allowing for precise control over tag URLs for better SEO or clarity.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\n\nQueryTag::make(\n    'Archived Posts',\n    fn(Builder $query) => $query->where('is_archived', true)\n)\n    ->alias('archive')\n```\n\n----------------------------------------\n\nTITLE: Wrapping Metrics in a Fragment Container in MoonShine Using PHP\nDESCRIPTION: This snippet shows how to wrap metric components within a Fragment container for grouping purposes in a MoonShine resource class. It defines a protected method fragmentMetrics() that returns a Closure accepting an array of components and returns a Fragment instance named 'metrics' wrapping these components. This allows for better layout control or custom grouping in the UI. Required dependencies include the MoonShine Fragment component class and Closure from the global namespace. This pattern provides flexibility in composing metric UI elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/metrics.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse MoonShine\\Laravel\\Components\\Fragment;\n\nprotected function fragmentMetrics(): ?Closure\n{\n    return static fn(array $components): Fragment => Fragment::make($components)->name('metrics');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HasMany Field with Resource Class in PHP\nDESCRIPTION: Example of creating a HasMany field with explicit resource class specification for comments relationship.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make(\n    'Comments',\n    'comments',\n    resource: CommentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication FormRequest Validation - PHP\nDESCRIPTION: Implements AuthenticateFormRequest class for validating login inputs in Laravel. Leverages Laravel's FormRequest base, specifies an authorize method ensuring only guests can proceed, and includes rules requiring both email and a password (enforcing default Laravel password complexity). Dependencies are Illuminate validation classes. Inputs required: email and password fields; outputs: validated input or redirect with error messages upon failure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rules\\Password;\n\nclass AuthenticateFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'email' => ['required'],\n            'password' => ['required', Password::default()],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Mode for Relationship Display\nDESCRIPTION: Enables display of relationship fields within tabs using tabMode(), which groups the related fields across tabs. Dependencies are the HasOne class and MoonShine's Tabs component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', 'comment', resource: CommentResource::class)\n    ->tabMode(),\nHasOne::make('Cover', 'cover', resource: CoverResource::class)\n    ->tabMode()\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Pipelines (service provider)\nDESCRIPTION: This snippet shows how to configure authentication pipelines using `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$config->authPipelines([\n    \\App\\MoonShine\\AuthPipelines\\TwoFactorAuthentication::class,\n    \\App\\MoonShine\\AuthPipelines\\PhoneVerification::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authenticated MoonShine User for Tests (PHP)\nDESCRIPTION: Example PHPUnit `setUp` method demonstrating how to create a `MoonshineUser` using a factory and authenticate this user for subsequent requests within the test class using `$this->be()` with the 'moonshine' guard. This ensures tests run as an authenticated user.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/testing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function setUp(): void\n{\n    parent::setUp();\n\n    $user = MoonshineUser::factory()->create();\n\n    $this->be($user, 'moonshine');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sorting in MoonShine Resource (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the sorting of records in a MoonShine resource. It overrides the `resolveOrder` method to allow for custom sorting logic, including the use of a closure for more complex sorting scenarios. The `$column` and `$direction` parameters specify the column to sort by and the sorting direction, respectively.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/query.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function resolveOrder(string $column, string $direction, ?Closure $callback): static\n    {\n        if ($callback instanceof Closure) {\n            $callback($this->newQuery(), $column, $direction);\n        } else {\n            $this->newQuery()->orderBy($column, $direction);\n        }\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Json field in only-value mode\nDESCRIPTION: This code defines a Json field named 'Data' that operates in only-value mode. It uses the `onlyValue()` method to configure the field for handling an array of single values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->onlyValue()\n```\n\n----------------------------------------\n\nTITLE: File Field in Blade\nDESCRIPTION: This Blade snippet illustrates the implementation of a File field within a MoonShine form. It uses the `x-moonshine::form.wrapper` and `x-moonshine::form.file` components to render the file upload field, and the `name` attributes specifies the field name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"File\">\n    <x-moonshine::form.file\n        name=\"file\"\n    />\n</x-moonshine::form.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Applying an Input Mask to a Phone Field in Moonshine (PHP)\nDESCRIPTION: This snippet shows how to apply a specific input format mask to a Phone field. After initializing the field with `Phone::make('Phone')`, the `mask()` method is chained, specifying the desired pattern ('7 999 999-99-99') to guide user input.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/phone.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPhone::make('Phone')\n    ->mask('7 999 999-99-99')\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine Collapse Component in PHP Class\nDESCRIPTION: Example usage of the Collapse component in a PHP class context. Uses the static make method to create a Collapse instance labeled 'Title/Slug' containing Text components for 'Title' and 'Slug'. Demonstrates how to structure components inside the Collapse wrapper effectively.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/collapse.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Collapse;\n\nCollapse::make('Title/Slug', [\n    Text::make('Title'),\n    Text::make('Slug'),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining MorphTo Field with Array Type Mapping for Custom Display in Laravel - PHP\nDESCRIPTION: This snippet illustrates how to configure a MorphTo field named 'Imageable' that uses an array format in types() to specify both the display field and a custom relation name for the Company model. The first array element is the field used for display ('short_name'), and the second is the custom relation label ('Organization'). It uses the MoonShine\\Fields\\Relationships\\MorphTo class. This approach is useful for overriding the default relation name shown in the UI. Inputs are the map associating the related model to the display configuration, and the output is a MorphTo field with customized labeling in the admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/morph-to.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Fields\\Relationships\\MorphTo;  \n\nMorphTo::make('Imageable')->types([  \n    Company::class => ['short_name', 'Organization']  \n])\n```\n\n----------------------------------------\n\nTITLE: Defining Default Colors in ColorManager PHP\nDESCRIPTION: Provides default RGB color values and dark theme shades used by the ColorManager for the admin panel. These are defined as key-value pairs for primary, secondary, background, and status colors including multiple intensities for dark shades. The colors are represented as strings containing comma-separated RGB values. This snippet establishes baseline colors that can be referenced by ColorManager methods in subsequent usage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Primary colors\n'primary' => '120, 67, 233' // Primary color\n'secondary' => '236, 65, 118' // Secondary color\n'body' => '27, 37, 59' // Background color\n\n// Dark shades\n'dark' => [\n    'DEFAULT' => '30, 31, 67',\n    50 => '83, 103, 132', // search, toasts, progress bars\n    100 => '74, 90, 121', // separators\n    200 => '65, 81, 114', // separators\n    300 => '53, 69, 103', // borders\n    400 => '48, 61, 93',  // dropdowns, buttons, pagination\n    500 => '41, 53, 82',  // default button background\n    600 => '40, 51, 78',  // table rows\n    700 => '39, 45, 69',  // content background\n    800 => '27, 37, 59',  // sidebar background\n    900 => '15, 23, 42',  // main background\n]\n\n// Status colors\n'success-bg' => '0, 170, 0'\n'success-text' => '255, 255, 255'\n'warning-bg' => '255, 220, 42'\n'warning-text' => '139, 116, 0'\n'error-bg' => '224, 45, 45'\n'error-text' => '255, 255, 255'\n'info-bg' => '0, 121, 255'\n'info-text' => '255, 255, 255'\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons with ActionButton in PHP\nDESCRIPTION: This snippet shows how to add action buttons to the table using the `buttons()` method. It demonstrates how to create different types of action buttons, including those with dropdowns, blank targets, conditional visibility, and bulk actions.  It displays action buttons such as delete, edit, and custom actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n->buttons([\n    ActionButton::make('Delete', fn() => route('name.delete')),\n    ActionButton::make('Edit', fn() => route('name.edit'))->showInDropdown(),\n    ActionButton::make('Go to home', fn() => route('home'))->blank()->canSee(fn($data) => $data->active),\n    ActionButton::make('Mass Delete', fn() => route('name.mass_delete'))->bulk(),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Card Components with Closures in PHP\nDESCRIPTION: Shows how to completely customize card rendering by providing a closure that receives the item, index, and builder instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->customComponent(function (Article $article, int $index, CardsBuilder $builder) {\n        return Badge::make($index + 1 . \".\" . $article->title, 'green');\n    })\n```\n\n----------------------------------------\n\nTITLE: Custom Event Listener with AlpineJS in Blade\nDESCRIPTION: Shows how to add a custom event listener to a Blade template using AlpineJS's x-data and window event listeners with the form_updated event type.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/form-with-events.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"\"\n     @form_updated:my-event.window=\"alert()\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Add and Remove Elements in RelationRepeater\nDESCRIPTION: Shows how to control the ability to add or remove related records in the field through the `creatable()` and `removable()` methods, with options for limiting the number of elements and applying conditions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\n\nRelationRepeater::make('Comments', 'comments')\n    ->creatable(limit: 5)\n    ->removable()\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine Collapse Component in Blade Template\nDESCRIPTION: Demonstrates embedding the Collapse component in a Blade template with the <x-moonshine::collapse> directive. The label and components are passed as Blade variables, allowing dynamic customization of the collapsible block within Laravel view files.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/collapse.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::collapse\n    :label=\"'Title/Slug'\"\n    :components='$components'\n/>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying BelongsToMany as a Related Link (PHP)\nDESCRIPTION: Uses the `relatedLink()` method with a condition Closure. The 'Categories' relationship will be displayed as a link only if the count of related items is greater than 10. Otherwise, the default preview (or other chained methods) will be used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->relatedLink(condition: function (int $count, Field $field): bool {\n        return $count > 10;\n    })\n```\n\n----------------------------------------\n\nTITLE: Displaying Images with BelongsToMany Values in MoonShine PHP\nDESCRIPTION: Demonstrates using the `withImage()` method on a `BelongsToMany` field to display images alongside the selectable options. It specifies the image column ('thumb'), the filesystem disk ('public'), and a directory ('countries'). The `selectMode()` call is chained to ensure the field is rendered as a select dropdown.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CityResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsToMany::make('Cities', resource: CityResource::class)\n    ->withImage('thumb', 'public', 'countries')->selectMode()\n```\n\n----------------------------------------\n\nTITLE: Adding Socialite Trait to User Model\nDESCRIPTION: This snippet shows how to add `MoonShine\\Socialite\\Traits\\HasMoonShineSocialite` trait to the user model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Models;\n\nuse MoonShine\\Socialite\\Traits\\HasMoonShineSocialite;\n\nfinal class MoonshineUser extends \\MoonShine\\Laravel\\Models\\MoonshineUser\n{\n    use HasMoonShineSocialite;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Breadcrumbs in Moonshine Resource - PHP\nDESCRIPTION: This PHP snippet modifies the breadcrumbs of a Moonshine resource.  It overrides the `onLoad` method and utilizes the `breadcrumbs()` method to add custom breadcrumbs. The example adds a link to \"/custom\" and the current resource title.  It depends on the Moonshine framework and a `ModelResource` class.  The output is a modified breadcrumb structure displayed on the page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/custom-breadcrumbs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MoonShineUserResource extends ModelResource\n{\n    // ...\n\n    protected function onLoad(): void\n    {\n        parent::onLoad();\n\n        $this->getFormPage()->breadcrumbs([\n            '/custom' => 'Custom',\n            '#' => $this->getTitle(),\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Menu Divider in MoonShine PHP Layout\nDESCRIPTION: Explains how to insert a visual separator between menu items or groups using the `MenuDivider::make()` class. This helps organize the menu visually.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuDivider;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Admins', MoonShineUserResource::class),\n            MenuDivider::make(),\n            MenuItem::make('Roles', MoonShineUserRoleResource::class),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Initialization for Custom Quill Field\nDESCRIPTION: This JavaScript snippet uses Alpine.js to initialize the Quill editor. It defines a component that finds the editor and textarea elements, creates a new Quill instance, and sets up an event listener to update the hidden textarea whenever the editor's content changes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('alpine:init', () => {\n    Alpine.data('quill', () => ({\n        textarea: null,\n        editor: null,\n\n        init() {\n            this.textarea = this.$root.querySelector('.ql-textarea')\n            this.editor = this.$root.querySelector('.ql-editor')\n\n            const t = this\n\n            this.$nextTick(function() {\n                let quill = new Quill(`#${t.editor.id}`, {\n                    theme: 'snow'\n                });\n\n                quill.on('text-change', () => {\n                    t.textarea.value = t.editor.innerHTML || '';\n                    t.textarea.dispatchEvent(new Event('change'));\n                });\n            })\n        },\n    }))\n})\n```\n\n----------------------------------------\n\nTITLE: Showing Toast Notification in MoonShine Controller PHP\nDESCRIPTION: Demonstrates triggering a standard client-side toast notification within the MoonShine admin panel using the `$this->toast()` helper method. It takes the message content and the notification type as arguments. The controller typically returns a response like `back()` after triggering the toast.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\nuse MoonShine\\Support\\Enums\\ToastType;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class CustomViewController extends MoonShineController\n{\n    public function __invoke(): Response\n    {\n        $this->toast('Hello world', ToastType::SUCCESS);\n\n        return back();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Json Field Create Button - PHP\nDESCRIPTION: This snippet demonstrates how to modify the create button of the Json field using the `modifyCreateButton()` method. It customizes the button by adding a CSS class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->creatable()\n    ->modifyCreateButton(\n        fn(ActionButton $button) => $button->customAttributes([\n            'class' => 'btn-primary'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendering a Switcher Component in Blade (MoonShine)\nDESCRIPTION: Shows how to render the `Switcher` component within a Blade template using the `x-moonshine::form.switcher` component tag. It sets the `name` attribute to 'is_publish', the default `value` to '1', the value when switched on (`onValue`) to '1', and the value when switched off (`offValue`) to '0'. The component is wrapped in `x-moonshine::form.wrapper` for proper layout and labeling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/switcher.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"Publish\">\n    <x-moonshine::form.switcher\n        name=\"is_publish\"\n        value=\"1\"\n        :onValue=\"1\"\n        :offValue=\"0\"\n    />\n</x-moonshine::form.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Formatting DateRange Field Output (PHP)\nDESCRIPTION: This snippet illustrates how to customize the display format of the `DateRange` field using the `format()` method.  It takes a format string, such as 'd.m.Y', to control how the date values are presented in the preview.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nDateRange::make('Dates')\n    ->fromTo('date_from', 'date_to')\n    ->format('d.m.Y')\n```\n\n----------------------------------------\n\nTITLE: Creating HasManyThrough Field for Deployments in Laravel\nDESCRIPTION: This PHP snippet demonstrates how to create a `HasManyThrough` field within a MoonShine resource. It utilizes the `HasManyThrough::make()` method to define the relationship. The field is named 'Deployments', linked to the 'deployments' relationship, and associates with a `DeploymentResource`.  The dependencies are MoonShine and Laravel with a configured `DeploymentResource`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many-through.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasManyThrough;\n\nHasManyThrough::make(\n    'Deployments',\n    'deployments',\n    resource: DeploymentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Global Color Override in Laravel ServiceProvider Using ColorManager PHP\nDESCRIPTION: Shows how to globally override admin panel colors for all layouts using a Laravel ServiceProvider's boot method. It demonstrates dependency injection of ColorManagerContract and setting colors (e.g., primary) globally. This snippet highlights that colors set via ServiceProvider are applied before layouts load, and should not be overridden afterward in layouts to maintain global precedence. Requires Laravel's ServiceProvider, MoonShine's ColorManagerContract, and related dependency injection setup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\ColorManager\\ColorManager;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     * @param  ColorManager  $colors\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n        ColorManagerContract $colors,\n    ): void\n    {\n        $colors->primary('#7843e9');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Url Field to Open in New Tab in PHP\nDESCRIPTION: This example demonstrates how to easily configure the MoonShine Url field so that clicking the displayed link opens in a new browser tab. This is achieved by chaining the `blank()` method after the initial field creation. No arguments are required for the `blank()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/url.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Url;\n\nUrl::make('Link')\n    ->blank()\n```\n\n----------------------------------------\n\nTITLE: Customizing Add Button Using ActionButton in MoonShine Json Field in PHP\nDESCRIPTION: Describes substituting the default add button via creatable() with a custom ActionButton instance. Button can be styled and labeled as required. Requires importing ActionButton and Json classes from MoonShine UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->keyValue()\n    ->creatable(\n        button: ActionButton::make('New')->primary()\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Sticky Buttons in PHP\nDESCRIPTION: The snippet shows how to use `stickyButtons()` method to make action buttons sticky. This causes the buttons to remain visible at the top of the table even when scrolling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n->stickyButtons()\n```\n\n----------------------------------------\n\nTITLE: Displaying MoonShine Page in Controller PHP\nDESCRIPTION: Shows how a custom controller can be used to display a dedicated MoonShine Page class. The controller method receives an instance of the desired Page (e.g., `MyPage`) and simply returns it. MoonShine handles the rendering of the page content within the panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse App\\MoonShine\\Pages\\MyPage;\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\n\nfinal class CustomViewController extends MoonShineController\n{\n    public function __invoke(MyPage $page): MyPage\n    {\n        return $page;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the Preview Display with Example\nDESCRIPTION: This code demonstrates the `changePreview()` method. The provided closure will be executed to generate the display for the thumbnail preview by using the `Thumbnails` UI component. This modifies the display of the Thumbnail field in preview mode using a `Thumbnails` component, providing a specialized preview.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\Thumbnails;\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Thumbnail')\n    ->changePreview(function (?string $value, Text $field) {\n        return Thumbnails::make($value);\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Badge to ActionButton PHP\nDESCRIPTION: Shows how to add a dynamic badge to an ActionButton using a closure. The closure allows calculating the badge value, like a count from a database model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->badge(fn() => Comment::count())\n```\n\n----------------------------------------\n\nTITLE: Disabling Asynchronous Mode in MoonShine ModelResource\nDESCRIPTION: Shows how to disable the default asynchronous mode in a MoonShine ModelResource by setting the $isAsync property to false.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $isAsync = false;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to Cards Using buttons() Method in PHP\nDESCRIPTION: Demonstrates how to add interactive buttons to each card using the 'buttons()' method that accepts an array of ActionButton instances. This snippet includes examples for standard buttons, dropdown buttons, and conditional buttons using visibility callbacks. Buttons can link to routes, open in new tabs, and appear under conditional logic based on item data, enhancing card interactivity within the UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Switcher::make('Active')])\n    ->cast(new ModelCaster(Article::class))\n    ->buttons([\n        ActionButton::make('Delete', route('name.delete')),\n        ActionButton::make('Edit', route('name.edit'))->showInDropdown(),\n        ActionButton::make('Go to Home', route('home'))->blank()->canSee(fn($data) => $data->active),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Suffix to Text Field - PHP\nDESCRIPTION: This PHP example adds a suffix to a text field using the `suffix()` method.  The suffix is appended to the input field.  The `suffix()` method accepts a string argument, which represents the suffix text (e.g., \".com\").\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nText::make('Domain', 'domain')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: RegisterController User Registration\nDESCRIPTION: This controller handles user registration. It creates a new user using the validated input from the `RegisterFormRequest` and then logs in the newly created user. It redirects to the 'home' route after successful registration and login.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\RegisterFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\RegisterPage;\nuse Illuminate\\Http\\RedirectResponse;\n\nfinal class RegisterController extends Controller\n{\n    public function form(RegisterPage $page): RegisterPage\n    {\n        return $page;\n    }\n\n    public function store(RegisterFormRequest $request): RedirectResponse\n    {\n        $user = User::query()->create(\n            $request->validated()\n        );\n\n        auth()->login($user);\n\n        return redirect()->intended(\n            route('home')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Form Page with MoonShine in PHP\nDESCRIPTION: Defines the ArticleFormPage class extending FormPage from MoonShine, configuring fields for article management including ID, author relationship, title, slug, images, SEO settings, category relationships, and additional settings. Uses various MoonShine UI components such as Grid, Column, Box, Tabs, and fields like Text, Slug, Image, Url, and Switcher. Handles relationship fields for comments via HasMany and HasOne with async loading and creatable options. Organizes the form layout by implementing mainLayer with tabbed navigation and a TableBuilder for displaying comments. Requires the MoonShine framework and related UI and field components. The class uses a layered UI approach for modular form sections.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/tabs.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class ArticleFormPage extends FormPage\n{\n    protected function fields(): iterable\n    {\n        return [\n            ID::make(),\n\n            Grid::make([\n                Column::make([\n                    Box::make('Main information', [\n                        ActionButton::make(\n                            'Link to article',\n                            $this->getResource()->getItem()?->getKey() ? route('articles.show', $this->getResource()->getItem()) : '/',\n                        )\n                            ->icon('paper-clip')\n                            ->blank(),\n\n                        LineBreak::make(),\n\n                        BelongsTo::make('Author', resource: MoonShineUserResource::class)\n                            ->asyncSearch()\n                            ->canSee(fn () => auth()->user()->moonshine_user_role_id === 1)\n                            ->required(),\n\n                        Collapse::make('Title/Slug', [\n                            Heading::make('Title/Slug'),\n\n                            Flex::make([\n                                Text::make('Title')\n                                    ->withoutWrapper()\n                                    ->required()\n                                ,\n\n                                Slug::make('Slug')\n                                    ->from('title')\n                                    ->unique()\n                                    ->separator('-')\n                                    ->withoutWrapper()\n                                    ->required()\n                                ,\n                            ])\n                                ->name('flex-titles')\n                                ->justifyAlign('start')\n                                ->itemsAlign('start'),\n                        ]),\n\n                        StackFields::make('Files')->fields([\n                            Image::make('Thumbnail')\n                                ->removable()\n                                ->disk('public')\n                                ->dir('articles'),\n                        ]),\n\n                        Preview::make('No input field', 'no_input', static fn () => fake()->realText()),\n\n                        RangeSlider::make('Age')\n                            ->min(0)\n                            ->max(60)\n                            ->step(1)\n                            ->fromTo('age_from', 'age_to'),\n\n                        Number::make('Rating')\n                            ->hint('From 0 to 5')\n                            ->min(0)\n                            ->max(5)\n                            ->link('https://cutcode.dev', 'CutCode', blank: true)\n                            ->stars(),\n\n                        Url::make('Link')\n                            ->hint('Url')\n                            ->link('https://cutcode.dev', 'CutCode', blank: true)\n                            ->suffix('url')\n                        ,\n\n                        Color::make('Color'),\n\n                        Json::make('Data')->fields([\n                            Text::make('Title'),\n                            Text::make('Value'),\n                        ])->creatable()->removable(),\n\n                        Switcher::make('Active'),\n                    ]),\n                ])->columnSpan(6),\n\n                Column::make([\n                    Box::make('Seo and categories', [\n                        Tabs::make([\n                            Tab::make('Seo', [\n                                Text::make('Seo title')\n                                    ->withoutWrapper(),\n\n                                Text::make('Seo description')\n                                    ->withoutWrapper(),\n\n                                TinyMce::make('Description')\n                                    ->addPlugins(['code', 'codesample'])\n                                    ->toolbar(' | code codesample')\n                                    ->required()\n                                ,\n                            ]),\n\n                            Tab::make('Categories', [\n                                BelongsToMany::make('Categories')->tree('category_id'),\n                            ]),\n                        ]),\n                    ]),\n                ])->columnSpan(6),\n            ]),\n\n            $this->getCommentsField(),\n            $this->getCommentField(),\n        ];\n    }\n\n    private function getCommentsField(): HasMany\n    {\n        return HasMany::make('Comments', resource: CommentResource::class)\n            ->fillData($this->getResource()->getItem())\n            ->async()\n            ->creatable();\n    }\n\n    private function getCommentField(): HasOne\n    {\n        return HasOne::make('Comment', resource: CommentResource::class)\n            ->fillData($this->getResource()->getItem())\n            ->async();\n    }\n\n    protected function mainLayer(): array\n    {\n        return [\n            Tabs::make([\n                Tab::make('Basics', parent::mainLayer()),\n                Tab::make('Comments', [\n                    $this->getResource()->getItem() ? $this->getCommentsField() : 'To add comments, save the article',\n                ]),\n                Tab::make('Comment', [\n                    $this->getResource()->getItem() ? $this->getCommentField() : 'To add comments, save the article',\n                ]),\n                Tab::make('Table', [\n                    TableBuilder::make()\n                        ->fields([\n                            ID::make(),\n                            Text::make('Text')\n                        ])\n                        ->cast(new ModelCaster(Comment::class))\n                        ->items($this->getResource()->getItem()?->comments ?? [])\n                ]),\n            ]),\n        ];\n    }\n\n    protected function bottomLayer(): array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Range Fields in PHP\nDESCRIPTION: This snippet illustrates adding custom attributes to the 'from' and 'to' fields of a `Range` field.  It uses the `fromAttributes()` and `toAttributes()` methods to set attributes, such as placeholders.  The example sets a placeholder for both the 'from' and 'to' fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/range.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRange::make('Возраст', 'age')\n    ->fromTo('age_from', 'age_to')\n    ->fromAttributes(['placeholder' => 'от'])\n    ->toAttributes(['placeholder' => 'до'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Component in Blade\nDESCRIPTION: This snippet showcases the implementation of the `Flex` component within a Blade template using a custom Blade component denoted by `<x-moonshine::layout.flex>`. It sets the `justifyAlign` property to `end` and encapsulates two `div` elements, each containing text. This sets up a flex container in the page's structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flex.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.flex :justifyAlign=\"'end'\">\n    <div>Text 1</div>\n    <div>Text 2</div>\n</x-moonshine::layout.flex>\n```\n\n----------------------------------------\n\nTITLE: Creating HasOneThrough Field in MoonShine (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a HasOneThrough field in MoonShine for managing a Laravel relationship. It specifies the field's label, relationship name, and the associated resource for managing the related model. It inherits all methods from `HasOne` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-one-through.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasOneThrough;\n\nHasOneThrough::make(\n    'Car owner',\n    'carOwner',\n    resource: OwnerResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Branding in MoonShine Service Provider - PHP\nDESCRIPTION: This snippet configures MoonShine branding within the MoonShineServiceProvider by setting custom logos (full and mini versions) and defining the primary and secondary color scheme using hexadecimal color codes. These chainable method calls apply to logo and color configuration objects, allowing customization of the admin panel's visual identity.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->logo('/images/logo.png')\n    ->logo('/images/logo-mini.png', small: true);\n\n$colors\n    ->primary('#2563EB')\n    ->secondary('#93C5FD');\n```\n\n----------------------------------------\n\nTITLE: Configuring Option Image Details MoonShine PHP\nDESCRIPTION: Provides an example of using the `OptionImage` object within `OptionProperty` to specify detailed image attributes like source URL, height, width (using Tailwind CSS classes), and object fit behavior using the `ObjectFit` enum.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnew OptionProperty(\n    new OptionImage(\n        src: 'https://cutcode.dev/images/platforms/youtube.png',\n        height: 6,\n        width: 6,\n        objectFit: ObjectFit::CONTAIN\n    )\n),\n```\n\n----------------------------------------\n\nTITLE: Customizing Creation Button in BelongsToMany\nDESCRIPTION: Sets a custom action button for creating related items, providing better UX and context-specific creation workflows.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->creatable(\n        button: ActionButton::make('Custom button', '')\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons to Index Page\nDESCRIPTION: This snippet demonstrates adding custom buttons to the top of the index page.  It uses `topButtons()` method to add a 'Refresh' button which dispatches an AlpineJs event to update the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton; // [tl! collapse:end]\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function topButtons(): ListOf\n    {\n        return parent::topButtons()->add(\n            ActionButton::make('Refresh', '#')\n                ->dispatchEvent(AlpineJs::event(JsEvent::TABLE_UPDATED, $this->getListComponentName()))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure MoonShine for JWT Authentication in PHP\nDESCRIPTION: This PHP code snippet configures the middleware and authentication pipelines for JWT authentication within the MoonShine framework.  It defines the `authMiddleware` and `authPipelines` settings within the `config/moonshine.php` file, specifying the middleware to use for authenticating API requests using JWT tokens.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\JWT\\JWTAuthPipe;\nuse MoonShine\\JWT\\Http\\Middleware\\AuthenticateApi;\n\nreturn [\n    'middleware' => [\n        // empty\n    ],\n    'auth' => [\n        // ...\n        'middleware' => AuthenticateApi::class,\n        'pipelines' => [\n            JWTAuthPipe::class\n        ],\n    ]\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Updating a Table Row Event in MoonShine using PHP\nDESCRIPTION: This code demonstrates configuring a resource field to asynchronously update a particular table row when toggled. It uses the Switcher field with the updateOnPreview method triggering a JavaScript event with AlpineJs::event and JsEvent::TABLE_ROW_UPDATED. The event includes the specific row key to update dynamically without page reload.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\UI\\Fields\\ID;\\nuse MoonShine\\UI\\Fields\\Switcher;\\nuse MoonShine\\UI\\Fields\\Text;\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\nuse MoonShine\\Support\\AlpineJs;\\nuse MoonShine\\Support\\Enums\\JsEvent;\\n\\nclass PostResource extends ModelResource\\n{\\n    // ...\\n\\n    protected function indexFields(): iterable\\n    {\\n        return [\\n            ID::make(),\\n            Text::make('Title'),\\n            Switcher::make('Active')\\n                ->updateOnPreview(\\n                    events: [AlpineJs::event(JsEvent::TABLE_ROW_UPDATED, $this->getListComponentNameWithRow())]\\n                )\\n        ];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Selection Options via Data Attributes in PHP\nDESCRIPTION: Illustrates enhancing the BelongsTo relationship select field by making it searchable and setting custom data attributes, such as limiting the search result count. This pattern improves user experience with filtered and constrained dropdown options. It requires CountryResource and MoonShine's BelongsTo field, passing an array of data attributes (e.g., 'data-search-result-limit' => 5) to tailor frontend behavior, integrating with third-party libraries like Choices.js.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CountryResource;\\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\\n\\nBelongsTo::make('Country', resource: CountryResource::class)\\n    ->searchable()\\n    ->customAttributes([\\n        'data-search-result-limit' => 5\\n    ])\n```\n\n----------------------------------------\n\nTITLE: Making BelongsTo Field Searchable\nDESCRIPTION: This snippet demonstrates how to enable search functionality for the `BelongsTo` field using the `searchable()` method. This enhances the user experience by allowing them to search for values within the related resource. In this example, the user can search among available countries.  The related resource must be available.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CountryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', 'country', resource: CountryResource::class)\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Fields for HasMany Relationship in PHP\nDESCRIPTION: Example of using the fields() method to specify which fields should be displayed in the preview of HasMany relationship.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->fields([\n        BelongsTo::make('User'),\n        Text::make('Text'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Switcher Field in MoonShine Using PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a Switcher field instance in MoonShine by using the Switcher class. It requires the MoonShine UI Fields namespace and calls the static make method with parameters for field label and backend database attribute. This snippet sets up the field behavior for form processing and is dependant on the MoonShine package's UI Fields library.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/switcher.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Switcher;\n\nSwitcher::make('Publish', 'is_publish')\n```\n\n----------------------------------------\n\nTITLE: Rendering Rating in Blade Template\nDESCRIPTION: This Blade template snippet shows how to render the Rating component directly in the view using a custom Blade component tag. It sets the rating value to 8 with bounds from 1 to 10, illustrating how to embed the stylized rating within Blade templates for front-end display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/rating.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::rating value=\"8\" min=\"1\" max=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Table with Slots\nDESCRIPTION: This snippet shows how to construct a MoonShine table using slots for header, body, and footer. It gives more flexibility for complex table structures by allowing direct HTML manipulation within each section of the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n<x-moonshine::table>\n    <x-slot:thead class=\"text-center\">\n        <th colspan=\"4\">Header</th>\n    </x-slot:thead>\n    <x-slot:tbody>\n        <tr>\n            <th>1</th>\n            <th>{{ fake()->firstName() }}</th>\n            <th>{{ fake()->lastName() }}</th>\n            <th>{{ fake()->safeEmail() }}</th>\n        </tr>\n        <tr>\n            <th>2</th>\n            <th>{{ fake()->firstName() }}</th>\n            <th>{{ fake()->lastName() }}</th>\n            <th>{{ fake()->safeEmail() }}</th>\n        </tr>\n        <tr>\n            <th>3</th>\n            <th>{{ fake()->firstName() }}</th>\n            <th>{{ fake()->lastName() }}</th>\n            <th>{{ fake()->safeEmail() }}</th>\n        </tr>\n    </x-slot:tbody>\n    <x-slot:tfoot class=\"text-center\">\n        <td colspan=\"4\">Footer</td>\n    </x-slot:tfoot>\n</x-moonshine::table>\n```\n\n----------------------------------------\n\nTITLE: Implementing BelongsTo Field with Image Thumbnails in MoonShine\nDESCRIPTION: Example of configuring a BelongsTo field with thumbnail images from a specified storage location, enhancing the visual representation of selection options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make('Country', resource: CountryResource::class)\n    ->withImage('thumb', 'public', 'countries')\n```\n\n----------------------------------------\n\nTITLE: Initializing Logo Component - PHP\nDESCRIPTION: This snippet demonstrates how to create a Logo component using the `make()` method in PHP. It sets the URL for the link, the logo image, and the small logo image.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/logo.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Logo;\n\nLogo::make(\n    '/admin',\n    '/vendor/moonshine/logo.svg',\n    '/vendor/moonshine/logo-small.svg'\n),\n```\n\n----------------------------------------\n\nTITLE: Registering afterResponse Callback in MoonShine (JavaScript)\nDESCRIPTION: Defines and registers the JavaScript function `myAfterResponse` that will be executed by a MoonShine `ActionButton` after it successfully receives an asynchronous response. This function is registered using the `MoonShine.onCallback` method and receives the response data, message type, and Alpine.js component as arguments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myAfterResponse', function(data, messageType, component) {\n        console.log('myAfterResponse', data, messageType, component)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Managing State Persistence of MoonShine Collapse in PHP\nDESCRIPTION: Defines the persist() method allowing control over whether the Collapse component remembers its open/closed state. Accepts a Closure, Boolean, or null to conditionally enable or disable persistence. This method overrides the default behavior where state is preserved.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/collapse.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npersist(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Simplified BelongsToMany without Explicit Resource\nDESCRIPTION: Defines a relation field where the resource is omitted, assuming default resource naming conventions align with the relation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', 'categories')\n```\n\n----------------------------------------\n\nTITLE: Adding URL Links to Card Titles in PHP\nDESCRIPTION: Demonstrates how to make card titles clickable by adding URLs with closure functions to access item data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->title('title')\n    ->url(fn($data) => $this->getFormPageUrl($data))\n```\n\n----------------------------------------\n\nTITLE: Replacing Model in Configuration for Socialite\nDESCRIPTION: This snippet shows how to replace the model in the authentication configuration file `config/moonshine.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    // ...\n    'model' => \\App\\Models\\MoonshineUser::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Overriding Individual MoonShine Layout Components in PHP\nDESCRIPTION: This collection of PHP method snippets illustrates how to override specific components of a MoonShine admin layout such as Head, Logo, Sidebar, Header, TopBar, Footer, Profile, Content components, logo path, and home URL. Each method returns an instance of the corresponding component, enabling granular customization of the layout's building blocks by subclassing and method overriding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeadComponent(): Head\n{\n    return Head::make([\n        // ...\n    ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getLogoComponent(): Logo\n{\n    return Logo::make(\n        $this->getHomeUrl(),\n        $this->getLogo(),\n        $this->getLogo(small: true),\n    );\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getSidebarComponent(): Sidebar\n{\n    return Sidebar::make([\n        // ...\n    ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaderComponent(): Header\n{\n    Header::make([\n        // ...\n    ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getTopBarComponent(): Topbar\n{\n    Topbar::make([\n        // ...\n    ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFooterComponent(): Footer\n{\n    Footer::make([\n        // ...\n    ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getProfileComponent(bool $sidebar = false): Profile\n{\n    return Profile::make(withBorder: $sidebar);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getContentComponents(): array\n{\n    // ...\n}\n\n// used as\nContent::make(\n    $this->getContentComponents()\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getLogo(bool $small = false): string\n{\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHomeUrl(): string\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slug Separator in PHP\nDESCRIPTION: The `separator()` method allows you to change the default separator ('-') used when generating the slug. The parameter `$separator` is a string representing the desired separator character. The output is a slug with the specified separator instead of the default.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/slug.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nseparator(string $separator)\n```\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->separator('_')\n```\n\n----------------------------------------\n\nTITLE: Enabling Asynchronous Search in Select Field (Blade)\nDESCRIPTION: This snippet demonstrates how to enable asynchronous searching in a Select field within a Blade template by setting the `asyncRoute` attribute. It uses the `<x-moonshine::form.select>` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.select asyncRoute='/search' />\n```\n\n----------------------------------------\n\nTITLE: Initializing Slug Field in PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of a Slug field in MoonShine. It creates a Slug field with the label 'Slug'. This field inherits from the Text field and requires the Eloquent model to function. The output is a slug generated from another field, typically the title.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/slug.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Slug;\n\nSlug::make('Slug')\n```\n\n----------------------------------------\n\nTITLE: Customizing MoonShine Resource Title and Display Column - PHP\nDESCRIPTION: This snippet adds a method to override the resource title with a localized string using the getTitle() method for easier future localization. It also sets a protected property $column to change the displayed field in relationships from the default 'id' to 'email'. This improves user-friendliness by showing email addresses instead of IDs in related resource ties.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getTitle(): string\n{\n    return __('Clients');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected string $column = 'email';\n```\n\n----------------------------------------\n\nTITLE: Opening Links in New Tabs PHP\nDESCRIPTION: This snippet illustrates how to open menu links in a new tab using two methods: passing `true` as the fourth parameter to the `make()` method or using the `blank()` method.  Dependencies: MoonShine framework. Input: A boolean or a closure returning a boolean. Output: The link will open in a new tab if true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('MoonShine Docs', 'https://moonshine-laravel.com/docs', 'heroicons.arrow-up', true),\n            MenuItem::make('Laravel Docs', 'https://laravel.com/docs', blank: fn() => true),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Field Options with Data Attributes\nDESCRIPTION: Example of customizing the BelongsTo field by making it searchable and limiting search results using custom data attributes that configure the underlying Choices.js library.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make('Country', resource: CountryResource::class)\n    ->searchable()\n    ->customAttributes([\n        'data-search-result-limit' => 5\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder in Text Field - PHP\nDESCRIPTION: This snippet demonstrates how to set a placeholder for a text field using the `placeholder()` method.  It initializes a text field named \"Username\" and sets the placeholder text to \"Enter username\".  This method takes a string as input, which is the text that will be displayed inside the text input field before the user enters any value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nText::make('Username', 'username')\n    ->placeholder('Enter username')\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Dialog to ActionButton PHP\nDESCRIPTION: Demonstrates using the withConfirm() method to add a confirmation modal before the button's primary action is performed. It shows setting the confirmation modal's title, content, button text, and optionally a name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->withConfirm(\n        title: 'Confirmation Modal Window Title',\n        content: 'Confirmation Modal Window Content',\n        button: 'Confirmation Modal Window Button',\n        // optionally - additional form fields\n        fields: null,\n        method: HttpMethod::POST,\n        // optionally - closure with FormBuilder\n        formBuilder: null,\n        // optionally - closure with Modal\n        modalBuilder: null,\n        name: 'my-modal',\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic HasMany Field Implementation in PHP\nDESCRIPTION: Shows the basic usage of HasMany field with required parameters including label, relation name, and resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make(\n    Closure|string $label,\n    ?string $relationName = null,\n    Closure|string|null $formatted = null,\n    ModelResource|string|null $resource = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Resource via Artisan - Shell\nDESCRIPTION: Generates a MoonShine resource class, with options for associating an Eloquent model, adding a title, specifying resource type (default, with pages, empty), creating a policy, enabling test class generation (with PHPUnit or Pest), and customizing the base directory/namespace. Dependencies include MoonShine and Laravel Eloquent. Created files are placed in app/MoonShine/Resources and optionally app/MoonShine/Pages.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource Post --model=CustomPost --title=\"Articles\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource Post --model=\"App\\Models\\CustomPost\"\n```\n\n----------------------------------------\n\nTITLE: Making Modal Load Content Asynchronously (MoonShine, PHP)\nDESCRIPTION: Sets up a Modal instance to load its content asynchronously from a specified endpoint using the asyncUrl parameter. Accepts URL as string or closure, requires MoonShine Modal and nested ActionButton. Ensures content is fetched on first open.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Title', '', ActionButton::make('Show Modal', '#'), asyncUrl: '/endpoint'),\n```\n\n----------------------------------------\n\nTITLE: Specifying Field Location for HasMany Relationships Outside CRUD Contexts in MoonShine Using PHP\nDESCRIPTION: This advanced example uses the nowOn() method to specify the page, resource, and parameters where the HasMany field should appear outside the default CRUD pages. It enables reusing fields in customized contexts by explicitly providing location data and supports compatibility with casting and creatable flags.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->creatable()\n    ->nowOn(page: $resource->getFormPage(), resource: $resource, params: ['resourceItem' => $item->getKey()])\n    ->fillCast($item, new ModelCaster(Article::class));\n```\n\n----------------------------------------\n\nTITLE: Implementing TableBuilder in MoonShine - PHP\nDESCRIPTION: This snippet demonstrates the use of `TableBuilder` within the `ArticleFormPage` to display data from a relationship. It showcases how to create a custom table with specified fields, cast the items using `ModelCaster` and fetch the data from the `comments` relationship of the current item. This allows for displaying data in a custom table format within the MoonShine interface. Note that the bottomLayer method is intentionally empty to avoid duplicating fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/tabs.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal class ArticleFormPage extends FormPage\n{\n    protected function fields(): iterable\n    {\n        return [\n            ID::make(),\n\n            // ...\n\n            $this->getCommentsField(),\n            $this->getCommentField(),\n        ];\n    }\n\n    private function getCommentsField(): HasMany\n    {\n        return HasMany::make('Comments', resource: CommentResource::class)\n            ->fillData($this->getResource()->getItem())\n            ->async()\n            ->creatable();\n    }\n\n    private function getCommentField(): HasOne\n    {\n        return HasOne::make('Comment', resource: CommentResource::class)\n            ->fillData($this->getResource()->getItem())\n            ->async();\n    }\n\n    protected function mainLayer(): array\n    {\n        return [\n            Tabs::make([\n                Tab::make('Basics', parent::mainLayer()),\n                Tab::make('Comments', [\n                    $this->getResource()->getItem() ? $this->getCommentsField() : 'To add comments, save the article',\n                ]),\n                Tab::make('Comment', [\n                    $this->getResource()->getItem() ? $this->getCommentField() : 'To add comments, save the article',\n                ]),\n                Tab::make('Table', [\n                    TableBuilder::make()\n                        ->fields([\n                            ID::make(),\n                            Text::make('Text')\n                        ])\n                        ->cast(new ModelCaster(Comment::class))\n                        ->items($this->getResource()->getItem()?->comments ?? [])\n                ]),\n            ]),\n        ];\n    }\n\n    protected function bottomLayer(): array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Two-Factor Authentication Pipelines (config)\nDESCRIPTION: This snippet shows how to add the `TwoFactorAuthPipe` to the authentication pipelines in the `config/moonshine.php` configuration file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\TwoFactor\\TwoFactorAuthPipe;\n\nreturn [\n    // ...\n    'auth' => [\n        // ...\n        'pipelines' => [\n            TwoFactorAuthPipe::class\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing RegisterPage Class in PHP\nDESCRIPTION: Defines the `RegisterPage` class extending `Page`. It assigns `FormLayout` as its layout, configures breadcrumbs and title, and uses `FormBuilder` to create the registration form with name, email, password, and password confirmation fields. The form submits to the 'register.store' named route and includes a button linking back to the login page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\FormLayout;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass RegisterPage extends Page\n{\n    protected ?string $layout = FormLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'RegisterPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            FormBuilder::make()\n                ->class('authentication-form')\n                ->action(route('register.store'))\n                ->fields([\n                    Text::make(__('Name'), 'name')->required(),\n                    Text::make('E-mail', 'email')\n                        ->required()\n                        ->customAttributes([\n                            'autofocus' => true,\n                            'autocomplete' => 'off',\n                        ]),\n\n                    Password::make(__('Password'), 'password')\n                        ->required(),\n\n                    PasswordRepeat::make(__('Repeat password'), 'password_confirmation')\n                        ->required(),\n                ])->submit(__('Create account'), [\n                    'class' => 'btn-primary btn-lg w-full',\n                ])->buttons([\n                    ActionButton::make(__('Log in'), route('login'))\n                ])\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Template Field using Fluent Interface in PHP\nDESCRIPTION: This PHP snippet demonstrates the creation of a `Template` field using a fluent interface within the MoonShine framework. It includes setting a label and adding a nested `Text` field. The `Template::make()` method is used to initialize the field.  The `setLabel()` method sets the field's display label.  The `fields()` method allows nesting other fields, like `Text::make('Title')`. This example utilizes the MoonShine UI components and requires those dependencies.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/template.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Template;\nuse MoonShine\\UI\\Fields\\Text;\n\nTemplate::make()\n    ->setLabel('My Field')\n    ->fields([\n        Text::make('Title')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Changing Locale Parameter Name in MoonShine (PHP)\nDESCRIPTION: Customizes the query parameter name used for language switching in URLs. Configure the 'locale_key' in `config/moonshine.php` or use the `localeKey()` method in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n'locale_key' => '_lang',\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->localeKey('_lang');\n```\n\n----------------------------------------\n\nTITLE: Disabling Asynchronous Mode in MoonShine Resource - PHP\nDESCRIPTION: Illustrates disabling the default asynchronous mode in a MoonShine ModelResource by setting the protected $isAsync property to false. Asynchronous mode enables pagination, filtering, and sorting without page reloads, and disabling it enforces full page reloads for these actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $isAsync = false;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Content Component (PHP Method Signature)\nDESCRIPTION: Defines the static `make` method signature for the `Content` component in PHP. It accepts an optional iterable `$components` array, which holds the components to be rendered within the content area.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/content.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Json field with dynamic fields using closure\nDESCRIPTION: This code defines a Json field named 'Product Options' that dynamically adjusts its fields based on the 'is_active' property of the data. A closure is used to determine which fields to include.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Position;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nJson::make('Product Options', 'options')\n    ->fields(\n        static fn(Json $ctx) => $ctx->getData()->getOriginal()->is_active ? [\n            Position::make(),\n            Text::make('Title'),\n            Text::make('Value'),\n            Switcher::make('Active')\n        ] : [\n            Text::make('Title')\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Page Components using the components() Method in PHP\nDESCRIPTION: Explains how to use the `components()` method within a `Page` class to return an iterable collection of MoonShine UI components (e.g., `Grid`, `Column`, `Box`). These components define the structure and content displayed on the page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Layout\\Column;\nuse MoonShine\\UI\\Components\\Layout\\Grid;\n\nclass CustomPage extends Page\n{\n    // ...\n\n    protected function components(): iterable\n    {\n        return [\n            Grid::make([\n                Column::make([\n                    Box::make([\n                        // ...\n                    ])\n                ])->columnSpan(6),\n                Column::make([\n                    Box::make([\n                        // ...\n                    ])\n                ])->columnSpan(6),\n            ])\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple File Uploads in PHP\nDESCRIPTION: This snippet illustrates how to enable multiple file uploads using the `multiple()` method. The method accepts an optional Closure or boolean to conditionally enable this functionality. The MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Template Field for HasOne Relationship in PHP\nDESCRIPTION: This PHP code defines a form configuration method that creates a Template field for managing a Comment relationship. It involves setting fill and preview callbacks, embedding form fields from a CommentResource, custom rendering, and post-application data handling to update or create a Comment instance related to an Article.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/template.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# use MoonShine\\UI\\Fields\\Template;\\n\\n// ...\\n\\nprotected function formFields(): iterable\\n{\\n    return [\\n        Template::make('Comment')\\n          ->changeFill(fn (Article $data) => $data->comment)\\n          ->changePreview(fn($data) => $data?->id ?? '-')\\n          ->fields(app(CommentResource::class)->getFormFields())\\n          ->changeRender(function (?Comment $data, Template $field) {\\n              $fields = $field->getPreparedFields();\\n              $fields->fill($data?->toArray() ?? []);\\n\\n              return Components::make($fields);\\n          })\\n          ->onAfterApply(function (Article $item, array $value) {\\n              $item->comment()->updateOrCreate([\\n                  'id' => $value['id']\\n              ], $value);\\n\\n              return $item;\\n          })\\n    ];\\n}\n```\n\n----------------------------------------\n\nTITLE: Filling a Text Field with a Default Value (PHP)\nDESCRIPTION: This snippet demonstrates how to fill a Text field with a default value using the `fill()` method. The `fill()` method accepts a mixed value, an optional DataWrapperContract instance, and an optional index.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nText::make('Title')\n    ->fill('Some title')\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelCaster (PHP)\nDESCRIPTION: This class implements the DataCasterContract for models in MoonShine. It takes a model class as a constructor parameter and provides methods for casting data to a model instance and handling paginated data, returning a ModelDataWrapper instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/type-casts.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal readonly class ModelCaster implements DataCasterContract\n{\n    public function __construct(\n        /** @var class-string<T> $class */\n        private string $class\n    ) {\n    }\n\n    /** @return class-string<T> $class */\n    public function getClass(): string\n    {\n        return $this->class;\n    }\n\n    /**\n     * @return ModelDataWrapper<T>\n     */\n    public function cast(mixed $data): ModelDataWrapper\n    {\n        $model = new ($this->getClass());\n        return new ModelDataWrapper($model->fill($data));\n    }\n\n    public function paginatorCast(mixed $data): ?PaginatorContract\n    {\n        if (! $data instanceof Paginator && ! $data instanceof CursorPaginator) {\n            return null;\n        }\n\n        $paginator = new PaginatorCaster(\n            $data->appends(\n                moonshine()->getRequest()->getExcept('page')\n            )->toArray(),\n            $data->items()\n        );\n\n        return $paginator->cast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using creatable() with custom button\nDESCRIPTION: This code demonstrates the use of the `creatable()` method with a custom button. You can customize the button used for creating new relations using `ActionButton`.  It imports classes for configuring the button and for using the HasMany field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->creatable(\n        button: ActionButton::make('Custom button', '')\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for BelongsTo Field (Method Signature) in MoonShine (PHP)\nDESCRIPTION: Shows the method signature for `default()`, used to specify a default selected value for the `BelongsTo` field when creating a new record. The method expects the related model instance as its argument.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndefault(mixed $default)\n```\n\n----------------------------------------\n\nTITLE: MoonShine Custom Field Blade View Template\nDESCRIPTION: This Blade template snippet defines the HTML structure for the custom Quill editor field. It includes a visible `div` for the Quill editor instance and a hidden `<textarea>` element to store the actual HTML content, which is managed via JavaScript.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"quill\">\n    <div class=\"ql-editor\" :id=\"$id('quill')\" style=\"height: auto;\">{!! $value ?? '' !!}</div>\n\n    <x-moonshine::form.textarea\n        :attributes=\"$attributes->merge([\n            'class' => 'ql-textarea',\n            'style' => 'display: none;'\n        ])->except('x-bind:id')\"\n    >{!! $value ?? '' !!}</x-moonshine::form.textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginPage Class in PHP\nDESCRIPTION: Defines the `LoginPage` class extending `Page`. It assigns `FormLayout` as its layout, configures breadcrumbs and title, and uses `FormBuilder` to create the login form with email, password, and 'remember me' fields, along with links to register and recover password. The form submits to the 'authenticate' named route.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\FormLayout;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Divider;\nuse MoonShine\\UI\\Components\\Layout\\Flex;\nuse MoonShine\\UI\\Components\\Layout\\LineBreak;\nuse MoonShine\\UI\\Components\\Link;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass LoginPage extends Page\n{\n    protected ?string $layout = FormLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'LoginPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            FormBuilder::make()\n                ->class('authentication-form')\n                ->action(route('authenticate'))\n                ->fields([\n                    Text::make('E-mail', 'email')\n                        ->required()\n                        ->customAttributes([\n                            'autofocus' => true,\n                            'autocomplete' => 'username',\n                        ]),\n\n                    Password::make(__('Password'), 'password')\n                        ->required(),\n\n                    Switcher::make(__('Remember me'), 'remember'),\n                ])->submit(__('Log in'), [\n                    'class' => 'btn-primary btn-lg w-full',\n            ]),\n\n            Divider::make(),\n\n            Flex::make([\n                ActionButton::make(__('Create account'), route('register'))->primary(),\n                Link::make(route('forgot'), __('Forgot password'))\n            ])->justifyAlign('start')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Pinned Tab Color Using PHP Method in MoonShine\nDESCRIPTION: Demonstrates setting the Safari pinned tab color by chaining the bodyColor() method on the Favicon instance. Accepts a CSS color string (e.g., hex color code). This affects the pinned tab appearance in Safari browsers. Used alongside custom favicon asset configuration. Outputs the necessary meta tags in the HTML head.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/favicon.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFavicon::make([\n    // ...\n])\n    ->bodyColor('#7843e9');\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Carousel in PHP\nDESCRIPTION: This snippet illustrates how to set or update the items of a Carousel instance using the items() method, which accepts an array of image URLs or a closure for dynamic content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/carousel.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nCarousel::make(\n    alt: fake()->sentence(3),\n)\n    ->items(['/images/image_2.jpg','/images/image_1.jpg'])\n```\n\n----------------------------------------\n\nTITLE: Modifying Create Button Appearance in MoonShine PHP\nDESCRIPTION: This snippet demonstrates how to modify the default create button using the `modifyCreateButton` method. It takes an `ActionButtonContract` instance and allows chaining methods like `->error()` to change its styling or behavior. The modified button instance must be returned. Requires the `MoonShine\\Contracts\\UI\\ActionButtonContract` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyCreateButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->error();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Search with searchable() method\nDESCRIPTION: This code shows how to disable the search field for a `HasMany` field using the `searchable()` method.  When disabled, the search functionality is not available on the form page for the related records. It imports the `HasMany` class to be used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->searchable(false) // отключает поле поиска\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to Layout in MoonShine\nDESCRIPTION: Example showing how to add assets to a custom layout in MoonShine by overriding the assets method. This allows adding resources specific to a layout template.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class MoonShineLayout extends CompactLayout\n{\n    protected function assets(): array\n    {\n        return [\n            Js::make(Vite::asset('resources/js/app.js'))\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating LoginPage with MoonShine Command (Shell)\nDESCRIPTION: Shell command using PHP Artisan to generate a custom MoonShine page class named `LoginPage`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page LoginPage\n```\n\n----------------------------------------\n\nTITLE: Registering a Handler to a MoonShine Resource - PHP\nDESCRIPTION: Demonstrates how to register a custom Handler within a ModelResource subclass by overriding the handlers() method. This method returns a ListOf Handler instances, adding the custom handler for integration. Once registered, the Handler's button is automatically displayed in the resource index UI for triggering respective actions. It depends on the presence of the previously created Handler class and proper namespace imports.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/handlers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostResource extends ModelResource\\n{\\n    protected function handlers(): ListOf\\n    {\\n        return parent::handlers()->add(new MyCustomHandler());\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using ResourceWithParent Trait to Access Parent ID in Laravel\nDESCRIPTION: Applies the ResourceWithParent trait within a resource class to facilitate retrieval of parent model's ID via getParentId(). Requires defining methods getParentResourceClassName() and getParentRelationName(). Dependencies include MoonShine's ResourceWithParent trait and base resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostImageResource extends ModelResource\n{\n    use ResourceWithParent;\n    \n    protected function getParentResourceClassName(): string\n    {\n        return PostResource::class;\n    }\n    \n    protected function getParentRelationName(): string\n    {\n        return 'post';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource for MorphTo Field in Third-Party Usage - MoonShine Laravel PHP\nDESCRIPTION: Shows how to specify a custom resource when defining a MorphTo relationship field, ensuring correct resolution in third-party or external contexts. This approach prevents fallback to request-based resource resolution, which may cause errors. It presumes availability of PolyCommentResource, Post, and Project classes. Inputs are the MorphTo field setup with a resource parameter and mapped model types; the output is a reliable field in scenarios where resource context needs to be controlled.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/morph-to.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nMorphTo::make('Commentable', resource: PolyCommentResource::class)->types([\n    Post::class => 'name',\n    Project::class => 'name',\n])\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading Configuration with async() in MoonShine TableBuilder PHP\nDESCRIPTION: The `async()` method configures the TableBuilder to load data asynchronously via HTTP requests. It accepts an optional URL for the async request, events to trigger upon successful response, and a JavaScript callback wrapper for the response. By default, the URL is inferred automatically. The method must be called after specifying the table name. It supports event integrations, such as table update, reindex, or row update events for reactive UI behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n->async(\n  Closure|string|null $url = null,\n  string|array|null $events = null,\n  ?AsyncCallback $callback = null,\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\n\nTableBuilder::make()\n        ->name('crud')\n        ->async(events: [\n          AlpineJs::event(JsEvent::FORM_RESET, 'main-form'),\n          AlpineJs::event(JsEvent::TOAST, params: ['text' => 'Success', 'type' => 'success']),\n        ])\n```\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()->name('my-table')->async(route('undefined-page.component', [\n    '_namespace' => self::class,\n    '_component_name' => 'my-table'\n]))\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse Illuminate\\Contracts\\View\\View;\nuse MoonShine\\Laravel\\MoonShineRequest;\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\n\nfinal class UndefinedPageController extends MoonShineController\n{\n    public function component(MoonShineRequest $request): View\n    {\n        $page = app($request->input('_namespace'));\n\n        $component = $page->getComponents()->findByName(\n            $request->getComponentName()\n        );\n\n        return $component->render();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Only Value Mode in MoonShine Json Field in PHP\nDESCRIPTION: Enables an array-of-values format for the Json field, typical for simple, unkeyed lists. Uses the onlyValue() method and provides for optional value label or valueField customization. Inputs are stored as a list of values. Default field is Text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->onlyValue()\n```\n\n----------------------------------------\n\nTITLE: Setting DateRange Field Min/Max Values (PHP)\nDESCRIPTION: This code demonstrates how to set the minimum and maximum date values for the `DateRange` field.  It uses the `min()` and `max()` methods to restrict the selectable date range.  These methods require a date string as input.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDateRange::make('Dates')\n    ->fromTo('date_from', 'date_to')\n    ->min('2024-01-01')\n    ->max('2024-12-31')\n    ->step(5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Asynchronous Search for BelongsToMany (PHP)\nDESCRIPTION: Demonstrates advanced configuration of `asyncSearch()` for a 'Countries' `BelongsToMany` field. It specifies searching on the 'title' column, limits results to 10, adds a custom query to exclude ID 2, formats the output as 'id | title', and sets a custom URL for the search endpoint. Requires `BelongsToMany`, `Builder`, `Request`, and `Field` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nuse App\\MoonShine\\Resources\\CountryResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsToMany::make('Countries', 'countries', resource: CountryResource::class)\n    ->asyncSearch(\n        'title',\n        10,\n        searchQuery: function (Builder $query, Request $request, Field $field) {\n            return $query->where('id', '!=', 2);\n        },\n        formatted: function ($country, Field $field) {\n            return $country->id . ' | ' . $country->title;\n        },\n        'https://moonshine-laravel.com/async'\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Basic Options in MoonShineServiceProvider\nDESCRIPTION: This demonstrates setting basic options within the `MoonShineServiceProvider`, using method chaining for clarity.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->dir(dir: 'app/MoonShine', namespace: 'App\\MoonShine')\n    ->useMigrations()\n    ->useNotifications()\n    ->useDatabaseNotifications();\n```\n\n----------------------------------------\n\nTITLE: Creating BelongsTo Field Without Relation\nDESCRIPTION: This snippet creates a `BelongsTo` field, assuming the relationship name matches the field's label. If the `$relationName` argument is omitted, the field will infer the relationship name based on the label, applying camelCase rules. In this case, it will try to use the resource with the same name determined automatically based on the label.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('User', 'user')\n```\n\n----------------------------------------\n\nTITLE: Toggling Element Visibility with Alpine.js x-show in PHP\nDESCRIPTION: Describes xShow() method which controls element visibility through Alpine.js by hiding elements without removing them from the DOM. Uses reactive variables and optional operators, similar to xIf(), but maintains DOM presence for UI effects or transitions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nxShow(\n    string|Closure $variable,\n    ?string $operator = null,\n    ?string $value = null,\n    bool $wrapper = true\n)\n```\n\n----------------------------------------\n\nTITLE: Creating BelongsTo Field with Resource\nDESCRIPTION: This code snippet shows how to create a `BelongsTo` field and associate it with a specific `UserResource`. The example uses `BelongsTo::make()` to define the field, specifying the label as 'User', the relationship name as 'user', and the resource class `UserResource::class`. The resource is mandatory for the relationship to function correctly and must be registered in the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\UserResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'User',\n    'user',\n    resource: UserResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Creating HiddenIds Instance in PHP\nDESCRIPTION: This snippet shows how to instantiate a HiddenIds field with a specified component name using the static make() method. A warning indicates that the associated table must include an ID field for proper functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/hidden-ids.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\HiddenIds;\n\nHiddenIds::make('index-table')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Index Page Main Component in MoonShine (PHP)\nDESCRIPTION: Overrides the `getItemsComponent(iterable $items, Fields $fields)` method in a MoonShine `IndexPage` (e.g., `ArticleIndexPage`) to customize the main display component. This example uses `TableBuilder` to configure the table, applying various settings like fields, casting, attributes, buttons, async loading, sticky headers, and column selection based on resource configurations. Dependencies include `ComponentContract`, `TableBuilderContract`, `IndexPage`, `TableBuilder`, and `Fields`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngetItemsComponent(iterable $items, Fields $fields)\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Contracts\\UI\\TableBuilderContract;\nuse MoonShine\\Laravel\\Pages\\Crud\\IndexPage;\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\n\nclass ArticleIndexPage extends IndexPage\n{\n    // ...\n\n    protected function getItemsComponent(iterable $items, Fields $fields): ComponentContract\n    {\n        return TableBuilder::make(items: $items)\n            ->name($this->getListComponentName())\n            ->fields($fields)\n            ->cast($this->getResource()->getCaster())\n            ->withNotFound()\n            ->when(\n                ! is_null($head = $this->getResource()->getHeadRows()),\n                fn (TableBuilderContract $table): TableBuilderContract => $table->headRows($head)\n            )\n            ->when(\n                ! is_null($body = $this->getResource()->getRows()),\n                fn (TableBuilderContract $table): TableBuilderContract => $table->rows($body)\n            )\n            ->when(\n                ! is_null($foot = $this->getResource()->getFootRows()),\n                fn (TableBuilderContract $table): TableBuilderContract => $table->footRows($foot)\n            )\n            ->when(\n                ! is_null($this->getResource()->getTrAttributes()),\n                fn (TableBuilderContract $table): TableBuilderContract => $table->trAttributes(\n                    $this->getResource()->getTrAttributes()\n                )\n            )\n            ->when(\n                ! is_null($this->getResource()->getTdAttributes()),\n                fn (TableBuilderContract $table): TableBuilderContract => $table->tdAttributes(\n                    $this->getResource()->getTdAttributes()\n                )\n            )\n            ->buttons($this->getResource()->getIndexButtons())\n            ->clickAction($this->getResource()->getClickAction())\n            ->when($this->getResource()->isAsync(), static function (TableBuilderContract $table): void {\n                $table->async()->pushState();\n            })\n            ->when($this->getResource()->isStickyTable(), function (TableBuilderContract $table): void {\n                $table->sticky();\n            })\n            ->when($this->getResource()->isColumnSelection(), function (TableBuilderContract $table): void {\n                $table->columnSelection();\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Files in MoonShine\nDESCRIPTION: Examples of how to add CSS files to the MoonShine admin panel using the Css class. Shows basic usage, deferred loading, and adding custom attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Базовое подключение\nCss::make('/css/styles.css');\n\n// С отложенной загрузкой\nCss::make('/css/styles.css')->defer();\n\n// С атрибутами\nCss::make('/css/styles.css')->customAttributes([\n    'media' => 'print'\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Policies for System Models outside app/Models (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to manually register policies for custom or system resources not located in the default app/Models directory. In the AuthServiceProvider class, within the boot method, the Gate::policy method is used to explicitly assign policy classes (e.g., MoonshineUserPolicy) to their model classes (e.g., MoonshineUser). This is necessary because Laravel's automatic policy registration only covers models in app/Models. Required dependencies are MoonShine\\Laravel\\Models\\MoonshineUser, MoonShine\\Laravel\\Models\\MoonshineUserRole, and their corresponding policies.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/authorization.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse App\\Policies\\MoonshineUserPolicy;\nuse App\\Policies\\MoonshineUserRolePolicy;\nuse MoonShine\\Laravel\\Models\\MoonshineUserRole;\nuse MoonShine\\Laravel\\Models\\MoonshineUser;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        Gate::policy(MoonshineUser::class, MoonshineUserPolicy::class);\n        Gate::policy(MoonshineUserRole::class, MoonshineUserRolePolicy::class);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Paginator with ModelCaster for QueryBuilder\nDESCRIPTION: Demonstrates setting up pagination for CardsBuilder using ModelCaster to handle database query results.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->paginator(\n  (new ModelCaster(Article::class))\n    ->paginatorCast(\n        Article::query()->paginate()\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ActionButton async Method Signature PHP\nDESCRIPTION: Documents the method signature for enabling asynchronous functionality on an ActionButton. It details parameters for the HTTP method, CSS selector for content replacement, events to dispatch, and an optional JavaScript callback function.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\DTOs\\AsyncCallback;\nuse MoonShine\\Support\\Enums\\HttpMethod;\n\nasync(\n    HttpMethod $method = HttpMethod::GET,\n    ?string $selector = null,\n    array $events = [],\n    ?AsyncCallback $callback = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Show/Hide Value Toggle Button to Number Field in MoonShine - PHP\nDESCRIPTION: Enables a button to toggle the visibility of the Number field's value, similar to password fields, using the eye() method. This enhances privacy and user control for sensitive numeric inputs. Input: none. Output: Number field with show/hide toggle button for the value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nNumber::make('Password', 'password')\n    ->eye()\n```\n\n----------------------------------------\n\nTITLE: Set TableBuilder Row Click Action with Selector PHP\nDESCRIPTION: Configures a row click action ('EDIT') and specifies a custom CSS selector ('.edit-button') for the element that will be clicked when the row is interacted with.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n->clickAction(ClickAction::EDIT, '.edit-button')\n```\n\n----------------------------------------\n\nTITLE: ProfileFormRequest Validation Rules\nDESCRIPTION: This form request class defines the validation rules for the profile update form. It requires a name and email, and the email must be unique, ignoring the current user's ID. The password field is optional but must be confirmed if provided. The `authorize` method checks if the user is authenticated.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\n\nclass ProfileFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->check();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'name' => ['required'],\n            'email' => ['required', 'email:dns', Rule::unique('users')->ignore(auth()->id())],\n            'password' => ['confirmed'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Display Value in BelongsTo\nDESCRIPTION: This code demonstrates how to customize the displayed value of the related model using the `$formatted` argument. By default the resource's `$column` property is used, however, you can use `$formatted` argument, which accepts a string, or a closure. The example shows the use of a closure to format the display, combining the ID and title of the related item.  This customization overrides the default display behavior of the `BelongsTo` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'Country',\n    'country',\n    formatted: fn($item) => \"$item->id. $item->title\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating New List of Active Actions\nDESCRIPTION: This snippet demonstrates creating a new list of active actions using `ListOf`.  It restricts the available actions to VIEW and UPDATE.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Enums\\Action;\nuse MoonShine\\Support\\ListOf;\n\nprotected function activeActions(): ListOf\n{\n    return new ListOf(Action::class, [Action::VIEW, Action::UPDATE]);\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal Events via ActionButton (MoonShine, PHP)\nDESCRIPTION: Demonstrates how to programmatically open a Modal by toggling events via ActionButton components. When ActionButton::make is called with a label and ties to toggleModal('my-modal'), the modal opens upon clicking the button. The asynchronous use case sends a request then fires the modal_toggled event. Requires MoonShine UI components and optionally AlpineJs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nModal::make(\n    'Title',\n    'Content',\n)\n    ->name('my-modal'),\n\nActionButton::make('Show Modal')\n    ->toggleModal('my-modal')\n\n// or asynchronously\nActionButton::make(\n    'Show Modal',\n    '/endpoint'\n)\n    ->async(events: [AlpineJs::event(JsEvent::MODAL_TOGGLED, 'my-modal')])\n```\n\n----------------------------------------\n\nTITLE: Calling Resource Method Asynchronously in PHP\nDESCRIPTION: Explains how to invoke resource methods asynchronously upon button click with optional parameters and how to handle direct or file download responses, including method signature and examples.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->method('updateSomething')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('ZIP')\n    ->method('zip')\n    ->download()\n```\n\n----------------------------------------\n\nTITLE: Adding a Dynamic Badge to ActionButton in PHP\nDESCRIPTION: Provides an example of adding a badge to an `ActionButton` where the badge's value is determined dynamically at runtime using a Closure. In this case, it displays the count of `Comment` model records.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->badge(fn() => Comment::count())\n```\n\n----------------------------------------\n\nTITLE: Disabling Physical File Deletion\nDESCRIPTION: Prevent physical file deletion while still removing database records using the disableDeleteFiles() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->removable()\n    ->disableDeleteFiles()\n```\n\n----------------------------------------\n\nTITLE: Setting Card URL\nDESCRIPTION: Shows how to set a URL for the Card component using the `url()` method. A closure is used to dynamically generate the URL. When the card's title is clicked, it will redirect to this URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n    thumbnail: '/images/image_1.jpg',\n)\n    ->url(static fn() => 'https://cutcode.dev')\n```\n\n----------------------------------------\n\nTITLE: Rendering MoonShine Page in Controller Method (PHP)\nDESCRIPTION: Demonstrates how to render a MoonShine page (`LoginPage`) within a controller method. By type-hinting the `LoginPage` class, Laravel's service container injects an instance of the page, which is then returned directly by the controller method to display the login form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function form(LoginPage $page): LoginPage\n{\n    return $page;\n}\n```\n\n----------------------------------------\n\nTITLE: Prepending Action Buttons to MoonShine Table (PHP)\nDESCRIPTION: This snippet demonstrates adding a custom action button to the beginning of the button list in a MoonShine table. It overrides the `indexButtons()` method to include an `ActionButton` using `prepend()` that links to a specified endpoint.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(ActionButton::make('Link', '/endpoint'));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Moonshine Link (PHP Class)\nDESCRIPTION: Shows how to prepend an icon to a Moonshine link using the `Link` class. The `icon()` method is chained after `Link::make`, taking the icon name (e.g., 'arrow-top-right-on-square') as its argument.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n    ->icon('arrow-top-right-on-square')\n```\n\n----------------------------------------\n\nTITLE: Customizing Create and Edit Buttons in HasMany Field in PHP\nDESCRIPTION: Methods to modify the create and edit buttons in a HasMany field. Each method allows customizing the respective button through a callback function.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyCreateButton(\n        fn(ActionButton $button) => $button->setLabel('Custom create button')\n    )\n    ->modifyEditButton(\n        fn(ActionButton $button) => $button->setLabel('Custom edit button')\n    )\n    ->creatable(true)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Moonshine Link (PHP Class)\nDESCRIPTION: Demonstrates the basic instantiation of a link using the `Link::make` static method from the `Moonshine\\UI\\Components\\Link` class. Requires importing the class and providing the target URL and link text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Link;\n\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n```\n\n----------------------------------------\n\nTITLE: Adding Suffix (PHP)\nDESCRIPTION: Demonstrates how to add a suffix to the Text field using the `suffix()` method. The specified suffix will be appended to the input field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nText::make('Domain', 'domain')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication User Fields in moonshine.php\nDESCRIPTION: An example of configuring user fields within the `moonshine.php` configuration. Used when the user model is replaced.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n'user_fields' => [\n    'username' => 'email',\n    'password' => 'password',\n    'name' => 'name',\n    'avatar' => 'avatar',\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Handler in MoonShine - Shell\nDESCRIPTION: Shows the Artisan CLI command used to generate a new custom Handler class within the MoonShine project, automating scaffold creation in the app\\MoonShine\\Handlers directory. This command is the prerequisite step for developing a custom action Handler and requires PHP and Laravel environment with MoonShine installed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/handlers.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:handler MyCustomHandler\n```\n\n----------------------------------------\n\nTITLE: Modifying Detail Component Attributes in MoonShine Resource using PHP\nDESCRIPTION: This snippet is similar to modifying the list component, but targets the detail page’s component. It overrides modifyDetailComponent to add custom attributes to the detail UI component using the ComponentContract interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\\n\\npublic function modifyDetailComponent(ComponentContract $component): ComponentContract\\n{\\n    return parent::modifyDetailComponent($component)->customAttributes([\\n        'data-my-attr' => 'value'\\n    ]);\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Copyright Information in Footer\nDESCRIPTION: Method to add copyright information to the footer. The copyright method accepts a string or Closure that returns a string to be displayed in the copyright section.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/footer.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ncopyright(string|Closure $text)\n```\n\nLANGUAGE: php\nCODE:\n```\nFooter::make()\n    ->copyright(fn (): string => 'Your brand')\n```\n\n----------------------------------------\n\nTITLE: Adding Check-All Button to MoonShine BelongsToMany Field in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the withCheckAll() method on a MoonShine BelongsToMany field to render a check-all button in the admin panel relationship selector. It requires the MoonShine package and references a resource class (CategoryResource) for defining the related model. The primary parameter is the label (\\\"Categories\\\") and a resource class, with withCheckAll() enabling bulk toggling for field selections. Input is user interaction via the admin panel; output is UI-based selection of all or none. It must be used within a MoonShine-compatible Laravel project and assumes CategoryResource is correctly defined.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->withCheckAll()\n```\n\n----------------------------------------\n\nTITLE: Hiding Default Fields in MoonShine Column Selection (PHP)\nDESCRIPTION: This code demonstrates how to hide a field by default when column selection is enabled in MoonShine. It uses the `columnSelection(hideOnInit: true)` method on the field to achieve this.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n->columnSelection(hideOnInit: true)\n```\n\n----------------------------------------\n\nTITLE: Setting Disk for File Storage\nDESCRIPTION: Configure the disk where files will be stored using the disk() method. By default, the 'public' disk is used, which can be changed in the configuration file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->disk('public')\n```\n\n----------------------------------------\n\nTITLE: Overriding the Layout Property to Change Page Template in MoonShine Using PHP\nDESCRIPTION: This PHP code defines a custom Page class extending MoonShine's base Page class, overriding the protected layout property to specify a custom layout class. This instructs the page to use a different template than the default `AppLayout` or `CompactLayout`. Prerequisites include the existence of the custom layout class `MyLayout`. The code enables seamless page template customization via property replacement.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Layouts\\MyLayout;\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected ?string $layout = MyLayout::class;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Escaping in Textarea Field\nDESCRIPTION: Uses the unescape() method to disable HTML escaping in the Textarea field, allowing HTML content to be preserved in the field value rather than being escaped.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/textarea.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTextarea::make('HTML Content', 'content')\n    ->unescape()\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Disabling Built-in Authentication in moonshine.php\nDESCRIPTION: This snippet details how to disable the built-in authentication in the `moonshine.php` configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    'enabled' => false,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Global Assets via MoonShineServiceProvider (PHP)\nDESCRIPTION: Demonstrates registering assets globally for the entire MoonShine application within the `boot` method of a `MoonShineServiceProvider`. Requires injecting `AssetManagerContract` and uses the `add()` method to include assets like `/js/app.js`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// MoonShineServiceProvider\n// [tl! collapse:4]\nuse MoonShine\\AssetManager\\Js;\nuse MoonShine\\Contracts\\AssetManager\\AssetManagerContract;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\n\npublic function boot(\n    CoreContract $core,\n    ConfiguratorContract $config,\n    AssetManagerContract $assets,\n): void\n{\n    $assets->add(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Switching Middleware in MoonShine\nDESCRIPTION: Demonstrates how to customize the language switching middleware either through the configuration file or by replacing the default middleware in the service provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/localization.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'middleware' => [\n    // ...\n    ChangeLocale::class,\n],\n```\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->exceptMiddleware(ChangeLocale::class)\n    ->addMiddleware(MyChangeLocale::class);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom CompactLayout Template Using MoonShine Components in PHP\nDESCRIPTION: This snippet shows a PHP class extending the CompactLayout class of MoonShine to build a custom admin panel layout by composing various UI and layout components. It defines the build() method to assemble HTML, head, body, sidebar, header, content, footer, and other page elements using MoonShine's component API. It utilizes dependency injection for color management and features dynamic behaviors using conditionals and closures. The layout integrates assets, metadata, favicon, notification toggling, theme switching, breadcrumbs, and footer content with copyright and menu links.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\PackageCategoryResource;\nuse App\\MoonShine\\Resources\\PackageResource;\nuse App\\MoonShine\\Resources\\UserResource;\nuse MoonShine\\ColorManager\\ColorManager;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\nuse MoonShine\\Laravel\\Components\\Layout\\{Locales, Notifications, Profile, Search};\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\nuse MoonShine\\UI\\Components\\{Breadcrumbs,\n    Components,\n    Layout\\Assets,\n    Layout\\Div,\n    Layout\\Body,\n    Layout\\Burger,\n    Layout\\Content,\n    Layout\\Favicon,\n    Layout\\Flash,\n    Layout\\Footer,\n    Layout\\Head,\n    Layout\\Header,\n    Layout\\Html,\n    Layout\\Layout,\n    Layout\\Logo,\n    Layout\\Menu,\n    Layout\\Meta,\n    Layout\\Sidebar,\n    Layout\\ThemeSwitcher,\n    Layout\\Wrapper,\n    When};\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    public function build(): Layout\n    {\n        return Layout::make([\n            Html::make([\n                Head::make([\n                    Meta::make()->customAttributes([\n                        'name' => 'csrf-token',\n                        'content' => csrf_token(),\n                    ]),\n                    Favicon::make()->bodyColor($this->getColorManager()->get('body')),\n                    Assets::make(),\n                ])\n                    ->bodyColor($this->getColorManager()->get('body'))\n                    ->title($this->getPage()->getTitle()),\n                Body::make([\n                    Wrapper::make([\n                        Sidebar::make([\n                            Div::make([\n                                Div::make([\n                                    Logo::make(\n                                        $this->getHomeUrl(),\n                                        $this->getLogo(),\n                                        $this->getLogo(small: true),\n                                    )->minimized(),\n                                ])->class('menu-heading-logo'),\n\n                                Div::make([\n                                    Div::make([\n                                        ThemeSwitcher::make(),\n                                    ])->class('menu-heading-mode'),\n\n                                    Div::make([\n                                        Burger::make(),\n                                    ])->class('menu-heading-burger'),\n                                ])->class('menu-heading-actions'),\n                            ])->class('menu-heading'),\n\n                            Div::make([\n                                Menu::make(),\n                                When::make(\n                                    fn(): bool => $this->isAuthEnabled(),\n                                    static fn(): array => [Profile::make(withBorder: true)],\n                                ),\n                            ])->customAttributes([\n                                'class' => 'menu',\n                                ':class' => \"asideMenuOpen && '_is-opened'\",\n                            ]),\n                        ])->collapsed(),\n\n                        Div::make([\n                            Flash::make(),\n                            Header::make([\n                                Breadcrumbs::make($this->getPage()->getBreadcrumbs())->prepend(\n                                    $this->getHomeUrl(),\n                                    icon: 'home',\n                                ),\n                                Search::make(),\n                                When::make(\n                                    fn(): bool => $this->isUseNotifications(),\n                                    static fn(): array => [Notifications::make()],\n                                ),\n                                Locales::make(),\n                            ]),\n\n                            Content::make([\n                                Components::make(\n                                    $this->getPage()->getComponents(),\n                                ),\n                            ]),\n\n                            Footer::make()\n                                ->copyright(static fn(): string\n                                    => sprintf(\n                                    <<<'HTML'\n                                        &copy; 2021-%d Made with ❤️ by\n                                        <a href=\"https://cutcode.dev\"\n                                            class=\"font-semibold text-primary hover:text-secondary\"\n                                            target=\"_blank\"\n                                        >\n                                            CutCode\n                                        </a>\n                                        HTML,\n                                    now()->year,\n                                ))\n                                ->menu([\n                                    'https://moonshine-laravel.com/docs' => 'Documentation',\n                                ]),\n                        ])->class('layout-page'),\n                    ]),\n                ])->class('theme-minimalistic'),\n            ])\n                ->customAttributes([\n                    'lang' => $this->getHeadLang(),\n                ])\n                ->withAlpineJs()\n                ->withThemes(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivot Fields in BelongsToMany\nDESCRIPTION: Defines additional fields for the pivot table using 'fields()', essential for managing relations with intermediate data, referencing Laravel documentation for pivot fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make(\n    'Contacts',\n    resource: ContactResource::class\n)\n->fields([\n    Text::make('Contact', 'text'),\n])\n```\n\n----------------------------------------\n\nTITLE: Adding Inline JavaScript with MoonShine AssetManager (PHP)\nDESCRIPTION: Shows how to embed inline JavaScript directly into the HTML head using `MoonShine\\AssetManager\\InlineJs::make()`. Useful for small scripts or initialization code provided via a HEREDOC string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\InlineJs;\n\nInlineJs::make(<<<'JS'\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        console.log(\"Loaded\");\n    });\nJS);\n```\n\n----------------------------------------\n\nTITLE: Adding an ActionButton to ActionGroup in PHP\nDESCRIPTION: This snippet shows how to add an `ActionButton` to an `ActionGroup` using the `add()` method. It requires a pre-existing `ActionGroup` and adds a single new `ActionButton` to the existing group. The order of the added button will follow the order of the call.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-group.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->add(ActionButton::make('Button 3'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Server-Driven UI Response: HTTP Headers without States\nDESCRIPTION: This snippet shows HTTP headers that customize the SDUI response by requesting the UI structure without any component states. Adding the header 'X-MS-Without-States: true' along with 'X-MS-Structure: true' instructs the MoonShine server to exclude all dynamic states from the JSON response, returning only the component types, structure, and attributes. This enables clients to obtain the static layout and component tree without stateful content, useful for caching or static analysis. Required dependencies include the ability to add custom headers to the HTTP request and support for these headers on the server-side.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/sdui.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nX-MS-Structure: true\nX-MS-Without-States: true\n```\n\n----------------------------------------\n\nTITLE: Adding Footer to Dropdown in Blade\nDESCRIPTION: Example of adding a footer to a Dropdown component using the Blade component approach with a named slot for the footer content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/dropdown.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown>\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n    <x-slot:footer>Dropdown footer</x-slot:footer>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring BelongsToMany Preview Count in MoonShine PHP\nDESCRIPTION: Shows how to use the `onlyCount()` method on a MoonShine `BelongsToMany` field to display only the number of related items instead of the full list in the preview table. This method requires the `BelongsToMany` field to be initialized with a resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->onlyCount()\n```\n\n----------------------------------------\n\nTITLE: Changing the Add Button in RelationRepeater\nDESCRIPTION: Allows customization of the add button by modifying its appearance or behavior through `modifyCreateButton()`, accepting a closure that alters the `ActionButton` instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\n\nRelationRepeater::make('Comments', 'comments')\n    ->modifyCreateButton(\n        fn(ActionButton $button) => $button->customAttributes([\n            'class' => 'btn-primary'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Grouping Menu Items with MenuGroup in MoonShine PHP\nDESCRIPTION: Illustrates how to organize related menu items under a collapsible group using the `MenuGroup::make()` class. The constructor accepts a label for the group and an array of menu components, such as `MenuItem` instances.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('System', [\n                MenuItem::make('Admins', MoonShineUserResource::class),\n                MenuItem::make('Roles', MoonShineUserRoleResource::class),\n            ])\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Demonstrates using the `default()` method to pre-select a related item. In this example, the 'Country' field will default to the `Country` model with ID 1. Requires fetching the desired model instance (e.g., using `Country::find(1)`) and passing it to `default()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', resource: CategoryResource::class)\n    ->default(Country::find(1))\n```\n\n----------------------------------------\n\nTITLE: Opening Async Modal with ActionButton PHP\nDESCRIPTION: Shows how to open a modal window whose content is loaded asynchronously via an ActionButton. The async() method is used, and the button's URL points to an endpoint providing the content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make(\n    'Button Label',\n    to_page('action_button', fragment: 'doc-content'),\n)\n    ->async()\n    ->inModal(\n        title: fn() => 'Modal Window Title',\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication User Fields in MoonShineServiceProvider\nDESCRIPTION: Configures a user field mapping using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$config->userField('username', 'username');\n```\n\n----------------------------------------\n\nTITLE: Initializing Textarea Field in PHP\nDESCRIPTION: Basic initialization of a Textarea field in the MoonShine framework, which creates a multi-line text input field equivalent to the HTML textarea tag.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/textarea.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Textarea;\n\nTextarea::make('Text')\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal Toggle with Global MoonShine Class (JavaScript)\nDESCRIPTION: Shows how to utilize the global MoonShine JavaScript API to programmatically open a named modal via MoonShine.ui.toggleModal. Requires that MoonShine's JS assets are loaded globally. Input is the modal name string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.ui.toggleModal('my-modal')\n```\n\n----------------------------------------\n\nTITLE: Initializing Color with Enum\nDESCRIPTION: Demonstrates how to initialize the Color component using a string or a ColorEnum value. The component is used to render a colored HTML div element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/color.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\Color as ColorEnum;\n\nmake(string|ColorEnum $color)\n```\n\n----------------------------------------\n\nTITLE: Adding Inline JavaScript in MoonShine\nDESCRIPTION: Example showing how to add inline JavaScript code to the MoonShine admin panel using the InlineJs class. Useful for adding small scripts without external files.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nInlineJs::make(<<<'JS'\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        console.log(\"Loaded\");\n    });\nJS);\n```\n\n----------------------------------------\n\nTITLE: Adding Not Found Notification to MoonShine Table\nDESCRIPTION: This snippet shows how to add a 'not found' notification to a table when there are no items to display. It creates a table structure with column definitions and enables the notfound parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<x-moonshine::table\n    :columns=\"[\n        '#', 'First', 'Last', 'Email'\n    ]\"\n    :notfound=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Editing in Preview Mode with Lock - PHP\nDESCRIPTION: This snippet demonstrates how to combine the `updateOnPreview()` and `locked()` methods to enable editing in preview mode while also locking the field. `updateOnPreview()` is called to allow the field to be updated within a preview context, and `locked()` will prevent the user from accidentally inputting incorrect data during the process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->updateOnPreview()\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Head Component Override\nDESCRIPTION: Provides an example of how to override the Head component within the MoonShine admin panel layout using the `getHeadComponent()` method.  This allows for custom configuration of the HTML head section, including meta tags and other head elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeadComponent(): Head\n{\n    return Head::make([\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Color Scheme in MoonShine Layout Using PHP colors() Method\nDESCRIPTION: This PHP method configures the color palette for a MoonShine layout by using a `ColorManagerContract` instance. It sets primary, secondary, body, dark, success, warning, error, and info colors with RGB or hex values, supporting both light and dark themes. It includes multiple shade definitions for the dark palette with specified intensities. This method is called internally to apply consistent color theming. Dependencies include the `ColorManager` implementation conforming to the contract.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    /**\n     * @param  ColorManager  $colorManager\n     */\n    protected function colors(ColorManagerContract $colorManager): void\n    {\n        $colorManager\n            ->primary('#1E96FC')\n            ->secondary('#1D8A99')\n            ->body('249, 250, 251')\n            ->dark('30, 31, 67', 'DEFAULT')\n            ->dark('249, 250, 251', 50)\n            ->dark('243, 244, 246', 100)\n            ->dark('229, 231, 235', 200)\n            ->dark('209, 213, 219', 300)\n            ->dark('156, 163, 175', 400)\n            ->dark('107, 114, 128', 500)\n            ->dark('75, 85, 99', 600)\n            ->dark('55, 65, 81', 700)\n            ->dark('31, 41, 55', 800)\n            ->dark('17, 24, 39', 900)\n            ->successBg('209, 255, 209')\n            ->successText('15, 99, 15')\n            ->warningBg('255, 246, 207')\n            ->warningText('92, 77, 6')\n            ->errorBg('255, 224, 224')\n            ->errorText('81, 20, 20')\n            ->infoBg('196, 224, 255')\n            ->infoText('34, 65, 124');\n\n        $colorManager\n            ->body('27, 37, 59', dark: true)\n            ->dark('83, 103, 132', 50, dark: true)\n            ->dark('74, 90, 121', 100, dark: true)\n            ->dark('65, 81, 114', 200, dark: true)\n            ->dark('53, 69, 103', 300, dark: true)\n            ->dark('48, 61, 93', 400, dark: true)\n            ->dark('41, 53, 82', 500, dark: true)\n            ->dark('40, 51, 78', 600, dark: true)\n            ->dark('39, 45, 69', 700, dark: true)\n            ->dark('27, 37, 59', 800, dark: true)\n            ->dark('15, 23, 42', 900, dark: true)\n            ->successBg('17, 157, 17', dark: true)\n            ->successText('178, 255, 178', dark: true)\n            ->warningBg('225, 169, 0', dark: true)\n            ->warningText('255, 255, 199', dark: true)\n            ->errorBg('190, 10, 10', dark: true)\n            ->errorText('255, 197, 197', dark: true)\n            ->infoBg('38, 93, 205', dark: true)\n            ->infoText('179, 220, 255', dark: true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes to Components\nDESCRIPTION: Shows how to add CSS classes to a component's attributes using the class() method, which accepts a string or array of classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass(string|array $classes)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->class(['btn', 'btn-primary']);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->removeClass('btn-success');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->removeClass('btn-(success|primary)');\n```\n\n----------------------------------------\n\nTITLE: Defining the ID Field Constructor Signature in PHP\nDESCRIPTION: Displays the constructor signature for the `ID` field class. It accepts an optional label (defaults to 'ID'), column name (defaults to 'id'), and a formatting closure. This field inherits from `Hidden` and is primarily used for primary keys, appearing only in preview mode.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/id.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string|null $label = 'ID',\n    ?string $column = 'id',\n    ?Closure $formatted = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Card Title from Column Data in PHP\nDESCRIPTION: Example of setting card titles using the title() method with a column name from the data source.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->title('title')\n```\n\n----------------------------------------\n\nTITLE: Setting ActionButton Color in PHP\nDESCRIPTION: Demonstrates setting the visual style of an `ActionButton` using predefined color methods like `primary()`. Other available methods include `secondary()`, `warning()`, `success()`, and `error()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->primary()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Asynchronous Mode for Cards in PHP\nDESCRIPTION: Enables asynchronous loading for cards, which is useful for pagination. The async method must be called after setting a name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Switcher::make('Active')])\n    ->name('my-cards')\n    ->async()\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany relatedLink in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `relatedLink()` method on the `BelongsToMany` field. It allows displaying the relationship as a link with a count of elements, optionally specifying the link relation and a condition for displaying the link.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrelatedLink(?string $linkRelation = null, Closure|bool $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Adding \"Not Found\" Message in PHP\nDESCRIPTION: This example demonstrates the use of the `withNotFound()` method, which displays a \"No records found yet\" message if the table has no data.  It improves the user experience by providing a message when the table is empty.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nTableBuilder::make()\n    ->withNotFound()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Fields\nDESCRIPTION: The `default()` method is used to specify the default value for a field. This value will be used if no other value is provided. The method takes a mixed parameter, allowing flexibility in setting different types of default values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndefault(mixed $default)\n```\n\n----------------------------------------\n\nTITLE: Opening Modal on Page Load in PHP\nDESCRIPTION: This snippet demonstrates how to open a modal automatically when the page loads using the `open()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Заголовок', 'Содержимое...', view('path'))\n    ->open(),\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Time Input via MoonShine Text Field (PHP)\nDESCRIPTION: Shows how to create a standard HTML input with `type=\"time\"` using MoonShine's generic `Text` field class. This is an alternative method for capturing time input by setting the HTML attribute directly.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nText::make('Time')->setAttribute('type', 'time')\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Options via Options Object (PHP)\nDESCRIPTION: Demonstrates creating `Select` options via the `Options` object, allowing to specify labels, values, selection state, and properties such as image URLs.  It showcases the use of `Option` and `OptionProperty` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Select')\n    ->options(\n        new Options([\n            new Option(\n                label: 'Option 1',\n                value: '1',\n                selected: true,\n                properties: new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png'),\n            ),\n            new Option(\n                label: 'Option 2',\n                value: '2',\n                properties: new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png'),\n            ),\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Slots Above Table with topLeft() and topRight() in MoonShine TableBuilder PHP\nDESCRIPTION: The `topLeft()` and `topRight()` methods allow adding custom content slots above the table aligned to the left and right sides respectively. They accept closures returning arrays of components or elements to render. This is useful for adding buttons, filters, or other custom user interface elements associated with the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->topLeft(function (): array {\n        return [];\n    })\n    ->topRight(function (): array {\n        return [\n            Div::make([\n                // ..\n            ])\n        ];\n    })\n```\n\n----------------------------------------\n\nTITLE: Rendering a MoonShine Page from a Laravel Controller in PHP\nDESCRIPTION: Provides an example of how to return a `Page` object (e.g., `ProfilePage`) directly from a Laravel controller action using type hinting. This allows the MoonShine page to be rendered outside the standard MoonShine routing mechanism.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass ProfileController extends Controller\n{\n    // ...\n\n    public function __invoke(ProfilePage $page): ProfilePage\n    {\n        return $page;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Cell Attributes in MoonShine (PHP)\nDESCRIPTION: Allows adding custom HTML attributes to table cells ('td') and rows ('tr') for styling or scripting purposes using methods 'customWrapperAttributes', 'trAttributes', and 'tdAttributes'. Requires defining closures that return attribute arrays.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Fields\\Text;\n\nprotected function indexFields(): iterable\n{\n    return [\n        // ...\n        Text::make('Title')\n            ->customWrapperAttributes(['width' => '20%']);\n    ];\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nnamespace App\\MoonShine\\Resources;\n\nuse Closure;\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function tdAttributes(): Closure\n    {\n        return fn(?DataWrapperContract $data, int $row, int $cell) => [\n            'width' => '20%'\n        ];\n    }\n\n    protected function trAttributes(): Closure\n    {\n        return fn(?DataWrapperContract $data, int $row) => [\n            'data-tr' => $row\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending CrudResource for Custom Resources with MoonShine in PHP\nDESCRIPTION: This PHP snippet demonstrates how to define a custom resource by extending the CrudResource class in the MoonShine framework for Laravel. The example class, RestCrudResource, declares several abstract methods for basic CRUD operations such as findItem, getItems, massDelete, delete, and save, each to be implemented according to specific data logic. Required dependencies include MoonShine and Laravel, and optionally a FieldsContract implementation. Methods accept parameters for custom item identification and attribute handling, and outputs depend on the specific logic implemented.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/crud-resource.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\FieldsContract;\nuse MoonShine\\Laravel\\Resources\\CrudResource;\n\nfinal class RestCrudResource extends CrudResource\n{\n    public function findItem(bool $orFail = false): mixed\n    {\n        // ...\n    }\n\n    public function getItems(): mixed\n    {\n        // ...\n    }\n\n    public function massDelete(array $ids): void\n    {\n        // ...\n    }\n\n    public function delete(mixed $item, ?FieldsContract $fields = null): bool\n    {\n        // ...\n    }\n\n    public function save(mixed $item, ?FieldsContract $fields = null): mixed\n    {\n        // ...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany asyncSearch in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `asyncSearch()` method on the `BelongsToMany` field. It lists the extensive optional parameters for configuring asynchronous search, including search column, custom query callback, formatting callback, associated field, limit, and a custom URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nasyncSearch(\n    string $column = null,\n    ?Closure $searchQuery = null,\n    ?Closure $formatted = null,\n    ?string $associatedWith = null,\n    int $limit = 15,\n    ?string $url = null,\n)\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Profile Component Override\nDESCRIPTION: Demonstrates how to override the Profile component within the MoonShine admin panel layout using the `getProfileComponent()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function getProfileComponent(bool $sidebar = false): Profile\n{\n    return Profile::make(withBorder: $sidebar);\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Existing Modal with ActionButton PHP\nDESCRIPTION: Demonstrates how to use an ActionButton to toggle (open/close) an existing modal window by its unique name. This requires the modal to be defined separately.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Modal;\n\nModal::make('Title','Content')\n    ->name('my-modal');\n\nActionButton::make('Open modal window')\n    ->toggleModal('my-modal'),\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality in Select Field (Blade)\nDESCRIPTION: This snippet demonstrates how to add search functionality to a Select field within a Blade template using the `:searchable=\"true\"` attribute.  It uses the `<x-moonshine::form.select>` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.select\n    :searchable=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Fields\nDESCRIPTION: The `canSee()` method allows you to control the visibility of a field based on a condition. The condition is evaluated by a closure that receives the field instance. This makes the field visible if closure returns `true`. This provides the ability to implement complex conditional logic. It takes a callback function as a parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ncanSee(Closure $closure)\n```\n\n----------------------------------------\n\nTITLE: Enabling Precognition Validation in MoonShine\nDESCRIPTION: Shows how to enable Laravel's precognition validation feature in a MoonShine resource by setting the $isPrecognitive property.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $isPrecognitive = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Grid and Column Implementation Example in PHP\nDESCRIPTION: Complete example of implementing a Grid with two Columns in PHP, each taking up half the width of the container. Each Column contains a Text field component and is configured for both desktop and mobile responsiveness.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/grid.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\UI\\Components\\Layout\\Column;\nuse MoonShine\\UI\\Components\\Layout\\Grid;\nuse MoonShine\\UI\\Fields\\Text;\n\nGrid::make([\n    Column::make(\n        [\n            Text::make('Text')\n        ],\n        colSpan: 6,\n        adaptiveColSpan: 6\n    ),\n    Column::make(\n        [\n            Text::make('Text')\n        ],\n        colSpan: 6,\n        adaptiveColSpan: 6\n    ),\n])\n```\n\n----------------------------------------\n\nTITLE: Opening Modal with Dynamic Name for ActionButton PHP\nDESCRIPTION: Illustrates how to set a unique name for the modal associated with an ActionButton, particularly useful when the button is part of a list or table item. It uses a closure to generate the name based on the associated data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nActionButton::make('Button Label')\n    ->inModal(\n        name: static fn (mixed $item, ActionButtonContract $ctx): string => \"delete-button-{$ctx->getData()?->getKey()}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Modifying Create and Edit Buttons in MoonShine HasMany Relationships Using PHP\nDESCRIPTION: This snippet illustrates how to customize the labels of the create and edit buttons in a HasMany relationship field using modifyCreateButton() and modifyEditButton() methods respectively. These methods accept closures that modify the ActionButton instances, improving interface clarity by providing custom button text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->modifyCreateButton(\n        fn(ActionButton $button) => $button->setLabel('Custom create button')\n    )\n    ->modifyEditButton(\n        fn(ActionButton $button) => $button->setLabel('Custom edit button')\n    )\n    ->creatable(true);\n```\n\n----------------------------------------\n\nTITLE: Fixing Table Header with sticky() in MoonShine TableBuilder using PHP\nDESCRIPTION: The `sticky()` method makes the table header fixed, enabling it to remain visible when scrolling through the table. This is useful for improved usability in tables with many rows to keep column headings always visible. It requires no parameters and is a simple method to enhance table UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->sticky()\n```\n\n----------------------------------------\n\nTITLE: Setting Alert Type via PHP Class in moonshine::alert\nDESCRIPTION: Shows how to specify the notification type (e.g., success, warning) using the 'type' parameter in the Alert class, influencing the alert's visual style. This enables differentiated alert categories programmatically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nAlert::make(type: 'primary')->content('Primary'),\nAlert::make(type: 'secondary')->content('Secondary'),\nAlert::make(type: 'success')->content('Success'),\nAlert::make(type: 'warning')->content('Warning'),\nAlert::make(type: 'error')->content('Error'),\nAlert::make(type: 'info')->content('Text')\n```\n\n----------------------------------------\n\nTITLE: Enabling File Removal\nDESCRIPTION: Enable file removal functionality with the removable() method. This adds a delete button when in editing mode, and files are also deleted when the resource is deleted.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->removable()\n```\n\n----------------------------------------\n\nTITLE: Applying Input Mask (PHP)\nDESCRIPTION: Demonstrates how to apply an input mask to the Text field using the `mask()` method. This allows for formatting the input value according to a specified pattern, such as a phone number.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nText::make('Phone', 'phone')\n    ->mask('+7 (999) 999-99-99')\n```\n\n----------------------------------------\n\nTITLE: Setting Alpine.js x-data Attribute\nDESCRIPTION: Shows how to initialize an Alpine.js component with the xData() method, providing reactive data to the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nxData(null|array|string $data = null)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// title реактивная переменная внутри\nDiv::make([])\n    ->xData(['title' => 'Hello world'])\n```\n\n----------------------------------------\n\nTITLE: Using icon() with Custom Icon Path in PHP\nDESCRIPTION: This snippet shows using `icon()` to specify a custom directory for icons. It takes the icon name and the path to the directory containing the icon's Blade template. Icons should be Blade files in the specified path. The output is the HTML representation of the specified icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->icon('cog', path: 'icons')\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic BelongsToMany Async Search in MoonShine PHP\nDESCRIPTION: Demonstrates the basic usage of the `asyncSearch()` method on a `BelongsToMany` field to enable asynchronous search for available options. By default, it performs the search on the related resource's 'id' column without requiring additional parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', 'categories', resource: CategoryResource::class)\n    ->asyncSearch()\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Nested Json Field\nDESCRIPTION: Illustrates expected output JSON structure after using nested Json fields for products with nested prices. Useful as a template for verifying correct field configuration and output.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"product 1\",\n        \"prices\": {\n            \"wholesale_price\": 1000,\n            \"retail_price\": 1200\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Toggling Visibility with Alpine.js x-show\nDESCRIPTION: Shows how to conditionally show/hide elements without removing them from the DOM using the xShow() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nxShow(\n    string|Closure $variable,\n    ?string $operator = null,\n    ?string $value = null,\n    bool $wrapper = true\n)\n```\n\n----------------------------------------\n\nTITLE: Reordering Items with MoonShine.iterable.sortable\nDESCRIPTION: This code snippet demonstrates how to use `MoonShine.iterable.sortable` to enable sorting functionality for iterable elements. It takes parameters like container, URL, group, events, attributes, and a callback function for custom actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.iterable.sortable(\n    container,\n    url,\n    group,\n    events,\n    attributes = {\n        handle: '.handle'\n    },\n    function(evt) {\n        // ...\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox 'Off' Value Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `offValue`. This method is used to override the default value (0) that represents the unchecked state of the checkbox. It accepts an integer or a string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/checkbox.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\noffValue(int|string $offValue)\n```\n\n----------------------------------------\n\nTITLE: Rendering ProgressBar Component in Blade Template\nDESCRIPTION: Demonstrates how to render the ProgressBar component within a Blade template using the <x-moonshine::progress-bar> tag. The example sets the color property to 'primary' and binds the progress value dynamically with :value=\"10\", while also displaying the textual percentage inside the component's slot. This snippet requires Laravel Blade templating and MoonShine component support.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/progress-bar.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::progress-bar\n    color=\"primary\"\n    :value=\"10\"\n>\n    10%\n</x-moonshine::progress-bar>\n```\n\n----------------------------------------\n\nTITLE: Setting heading gradation with h() method\nDESCRIPTION: The h() method allows setting the heading level and whether to use a div with class or an actual h tag.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/heading.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nh(int $gradation = 3, $asClass = true)\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Builder for Changed Preview in HasOne\nDESCRIPTION: Uses modifyTable() with a closure to customize the TableBuilder for the preview display of the related resource. Dependencies include the CommentResource and MoonShine's TableBuilder component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', resource: CommentResource::class)\n    ->modifyTable(\n        fn(TableBuilder $table) => $table\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Date Field (PHP & Blade)\nDESCRIPTION: Demonstrates how to initialize a basic Date field using the MoonShine PHP class and how to render a standard HTML date input field using the MoonShine Blade form components. This requires the MoonShine framework to be installed. The PHP snippet uses `make()` with the field label and corresponding database column name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Date;\n\nDate::make('Created at', 'created_at')\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"Created at\">\n    <x-moonshine::form.input\n        type=\"date\"\n        name=\"created_at\"\n    />\n</x-moonshine::form.wrapper>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Show/Hide Button to MoonShine Date Field (PHP)\nDESCRIPTION: Adds an eye icon button next to the Date field using the `eye()` method. This allows toggling the visibility of the field's value in the preview mode, typically used for sensitive information like passwords.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->eye()\n```\n\n----------------------------------------\n\nTITLE: Setting ActionButton Color PHP\nDESCRIPTION: Provides examples of using methods like primary(), secondary(), warning(), success(), and error() to apply predefined color styles to an ActionButton.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->primary()\n```\n\n----------------------------------------\n\nTITLE: Customizing MoonShine Fieldset Layout (PHP)\nDESCRIPTION: Illustrates how to customize the layout within a MoonShine Fieldset by including UI components alongside fields. This example uses LineBreak::make() to add a visual separator between fields within the group. Requires importing necessary MoonShine classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/fieldset.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFieldset::make('Title', [\n    Text::make('Title'),\n    LineBreak::make(), // adds a line break\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Triggering MoonShine OffCanvas with ActionButton PHP\nDESCRIPTION: Shows how to link an ActionButton component to an OffCanvas component using the `toggleOffCanvs()` method, allowing the button click to open/close the canvas.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nOffcanvas::make(\n    'Title',\n    'Content...',\n)\n    ->name('my-canvas'),\n\nActionButton::make('Show Modal')\n    ->toggleOffCanvs('my-canvas')\n```\n\n----------------------------------------\n\nTITLE: Including URL Query Parameters in Fragment Requests\nDESCRIPTION: This example shows how to preserve current URL query parameters in the fragment request, ensuring consistent request data across page interactions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nFragment::make($components)\n    ->name('fragment-name')\n    ->withQueryParams()\n```\n\n----------------------------------------\n\nTITLE: Complete AlpineJS Component with Custom Event Handler in Blade\nDESCRIPTION: A comprehensive example showing how to create an AlpineJS component that handles custom events with an asynchronous request handler function.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/form-with-events.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"my\"\n     @defineEvent('form_updated', 'my-event', 'asyncRequest')\n>\n</div>\n\n<script>\n    document.addEventListener(\"alpine:init\", () => {\n        Alpine.data(\"my\", () => ({\n            init() {\n\n            },\n            asyncRequest() {\n                this.$event.preventDefault()\n\n                // this.$el\n                // this.$root\n            }\n        }))\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Field Boilerplate with Artisan\nDESCRIPTION: This shell command uses the MoonShine Artisan command `moonshine:field` to generate the basic class file and view template for a new custom field named 'Quill'. It specifies that the new field should extend the existing `Textarea` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:field Quill\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Components to Layers in MoonShine (PHP)\nDESCRIPTION: This PHP example illustrates adding a component (specifically `Permissions`) to a designated layer (`Layer::BOTTOM`) of a specific page (`getFormPage()`) dynamically. This is achieved within a Resource's `onLoad()` method using the `pushToLayer()` page method. Requires `MoonShine\\Permissions\\Components\\Permissions` and `MoonShine\\Support\\Enums\\Layer`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Permissions\\Components\\Permissions;\nuse MoonShine\\Support\\Enums\\Layer;\n\nprotected function onLoad(): void\n{\n    $this->getFormPage()\n        ->pushToLayer(\n            layer: Layer::BOTTOM,\n            component: Permissions::make(\n                'Permissions',\n                $this,\n            )\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Using `getPage` Helper in MoonShine (PHP)\nDESCRIPTION: Example of retrieving a page instance using the `moonshineConfig()` helper function and calling the `getPage` method with the configured page name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n// Helper\n\n$customPage = moonshineConfig()->getPage('custom');\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Date Field in PHP and Blade\nDESCRIPTION: Demonstrates the basic setup of a Moonshine Date field using the `Date::make` static method in PHP and the corresponding `x-moonshine::form.input` Blade component for rendering a standard HTML5 date input.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Date;\n\nDate::make('Created at', 'created_at')\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"Created at\">\n    <x-moonshine::form.input\n        type=\"date\"\n        name=\"created_at\"\n    />\n</x-moonshine::form.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Modifying Assets Collection in MoonShine\nDESCRIPTION: Example showing how to modify the assets collection using closures in MoonShine's AssetManager. Useful for filtering or altering assets dynamically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$assetManager->modifyAssets(function($assets) {\n    // Модифицируем коллекцию ресурсов\n    return array_filter($assets, function($asset) {\n        return !str_contains($asset->getLink(), 'remove-this');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: ForgotPasswordFormRequest Validation Rules\nDESCRIPTION: This form request class defines the validation rules for the forgot password form. It requires an email address and validates that it is a valid email address with DNS check. The `authorize` method checks if the user is a guest.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass ForgotPasswordFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'email' => ['required', 'email:dns'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a beforeRequest callback in PHP for ActionButton\nDESCRIPTION: This snippet shows how to configure an ActionButton to execute a specified JavaScript function before sending a request. It utilizes PHP to define the button and assign the callback via the `beforeRequest` parameter, which references a global JavaScript function that is registered subsequently in JavaScript. The callback receives the button element and an Alpine.js component as parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make()\n    ->method(\n        'myMethod',\n        callback: AsyncCallback::with(beforeRequest: 'myBeforeRequest')\n    )\n```\n\n----------------------------------------\n\nTITLE: Opening/Closing OffCanvas using MoonShine.ui.toggleOffCanvas\nDESCRIPTION: This JavaScript code shows the usage of `MoonShine.ui.toggleOffCanvas()` to open and close off-canvas components, specifying the canvas name to interact with it in the MoonShine admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.ui.toggleOffCanvas('canvas-name')\n```\n\n----------------------------------------\n\nTITLE: Rendering MoonShine Page from a Controller in PHP\nDESCRIPTION: Demonstrates returning an instance of a MoonShine Page (e.g., `ProfilePage`) directly from an invokable controller method to render the page outside of the MoonShine context. An additional example shows using Fortify's `loginView` method to return the page via application container resolution.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass ProfileController extends Controller\n{\n    // ...\n\n    public function __invoke(ProfilePage $page): ProfilePage\n    {\n        return $page;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nFortify::loginView(static fn() => app(ProfilePage::class));\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Colors via MoonShine ColorManager in a ServiceProvider (PHP)\nDESCRIPTION: Shows how to set various UI color parameters in MoonShine using ColorManagerContract. Requires MoonShine's ColorManager interface. Method chains such as ->background() and ->tableRow() set hex colors to different theme regions. Ensures consistent branding or user-specific UI adjustments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\n\n// ...\n\npublic function boot(\n    CoreContract $core,\n    ColorManagerContract $colors\n): void\n{\n    $colors\n        ->background('#A3C3D9')\n        ->content('#A3C3D9')\n        ->tableRow('#AE76A6')\n        ->dividers('#AE76A6')\n        ->borders('#AE76A6')\n        ->buttons('#AE76A6')\n        ->primary('#CCD6EB')\n        ->secondary('#AE76A6');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying ThemeSwitcher Component - Blade\nDESCRIPTION: This Blade snippet shows how to render the ThemeSwitcher component within a Blade template. It uses a custom Blade component `x-moonshine::layout.theme-switcher`.  This requires the MoonShine framework and its Blade components to be available in the project.  The output is an HTML element representing a button-icon used for switching themes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/theme-switcher.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.theme-switcher />\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionButton to Open in New Window PHP\nDESCRIPTION: Shows how to configure an ActionButton to open its target URL in a new browser window or tab. The blank() method adds the HTML target=\"_blank\" attribute.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label', '/')\n    ->blank()\n```\n\n----------------------------------------\n\nTITLE: Replacing Model in Configuration for Two-Factor Authentication\nDESCRIPTION: This snippet shows how to replace the model in the configuration file for two-factor authentication. It's located in `config/moonshine.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    // ...\n    'model' => App\\Models\\MoonshineUser::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Translating Menu Badges PHP\nDESCRIPTION: Demonstrates translating menu badges using Laravel's translation features within the `MoonShineLayout` class. The badge is set dynamically using a closure that calls the `__()` helper for translation. Dependencies: MoonShine framework and Laravel localization. Input: None. Output: Translated menu badge.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Comments', CommentResource::class)\n                ->badge(fn() => __('menu.badge.new'))\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure MoonShine OAG settings\nDESCRIPTION: This PHP code defines the configuration array for the MoonShine OAG package, enabling customization of documentation title, the specification file's location and route, and the view used to display the documentation.  This configuration allows developers to tailor the OpenApi documentation to the project's needs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Documentation title\n    'title' => 'Docs',\n    // Location path for the specification\n    'path' => realpath(\n        resource_path('oag.yaml')\n    ),\n    // Route to retrieve data for documentation\n    'route' => 'oag.json',\n    // View for documentation\n    'view' => 'oag::docs',\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Rating Component Instance in PHP Class\nDESCRIPTION: This PHP class usage snippet shows how to instantiate a Rating component with specific values, initializing it with a value of 3 and bounds from 1 to 10. It requires the 'MoonShine\\UI\\Components\\Rating' class and demonstrates object-oriented creation of the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/rating.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Rating;\n\nRating::make(3, 1, 10)\n```\n\n----------------------------------------\n\nTITLE: Making Select Field Nullable (Blade)\nDESCRIPTION: This snippet demonstrates how to allow NULL values in a Select field within a Blade template by using the `:nullable=\"true\"` attribute.  It uses the `<x-moonshine::form.select>` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.select\n    :nullable=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a MoonShine Page Class Using Artisan Command in PHP\nDESCRIPTION: Demonstrates the usage of the artisan command `php artisan moonshine:page` to generate a basic Page class file intended for MoonShine admin panel pages. The generated file is typically stored in the `app/MoonShine/Pages` directory. This snippet implies the prerequisite of having the MoonShine package installed and Laravel environment properly configured.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan moonshine:page\n```\n\n----------------------------------------\n\nTITLE: Performing Actions Before Rendering\nDESCRIPTION: The `onBeforeRender()` method allows you to perform actions or modify field properties immediately before the field is rendered in the view. This is useful for dynamic setup or modifying field data just before display. The closure receives the field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(static $ctx): void  $onBeforeRender\n */\nonBeforeRender(Closure $onBeforeRender)\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to Cards with Thumbnails in PHP\nDESCRIPTION: Example of adding headers to cards with thumbnails, which works only when thumbnail and overlay mode are enabled.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->thumbnail('image')\n    ->overlay()\n    ->fields([Text::make('Text')])\n    ->header(static fn() => Badge::make('new', 'success'))\n    // or by column\n    // ->header('title')\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Application Logic with onApply example for filters\nDESCRIPTION: This example illustrates the usage of `onApply()` with a filter field. It is used within a filtering context and it is designed to filter database queries. The callback receives the query builder, the value from the field, and the field context. The example shows how to use it to add a `where` clause to filter query based on a text field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Fields\\Text;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\n\nText::make('Title')\n    ->onApply(function (Builder $query, mixed $value, Text $field) {\n        $query->where('title', $value);\n    })\n```\n\n----------------------------------------\n\nTITLE: Generating Laravel Resource Controller via Artisan Shell Command\nDESCRIPTION: This shell command uses Laravel's Artisan CLI tool to scaffold a resource controller named 'Controller'. It automates the creation of RESTful resource methods to handle CRUD operations. The command requires Artisan installed within a Laravel project and outputs necessary PHP controller files prepared for resource routing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller Controller --resource\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine via Artisan CLI - Shell\nDESCRIPTION: This snippet illustrates installing the MoonShine package in a Laravel project using the artisan CLI. It supports multiple flags for skipping user, migrations, notifications, as well as for choosing default templates, enabling test or quick modes, and disabling authentication. Requires a functional Laravel environment and Composer. The main command generates necessary config and setup files for MoonShine's admin dashboard.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:install\n```\n\n----------------------------------------\n\nTITLE: Initializing ProgressBar Component in MoonShine PHP Class\nDESCRIPTION: Shows how to instantiate the ProgressBar component in a PHP class context by calling ProgressBar::make with a numeric value indicating the progress. This example depends on importing the ProgressBar class from the MoonShine\\UI\\Components namespace and initializes a basic 10% progress without additional styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/progress-bar.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ProgressBar;\n\nProgressBar::make(10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Forms in MoonShine (PHP)\nDESCRIPTION: Replaces default MoonShine forms like login and filters with custom implementations. Define form mappings in the 'forms' array within `config/moonshine.php` or use the `set()` method in `MoonShineServiceProvider` targeting the specific form key (e.g., 'forms.login').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n'forms' => [\n    'login' => LoginForm::class,\n    'filters' => FiltersForm::class,\n],\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->set('forms.login', MyLoginForm::class);\n```\n\n----------------------------------------\n\nTITLE: Managing User Profiles in ProfileController (PHP)\nDESCRIPTION: Defines the `ProfileController` for user profile management. It includes an `index` method to display the profile page (using `ProfilePage`) and an `update` method to process profile updates. The `update` method uses `ProfileFormRequest` for validation, updates the authenticated user's `email` and `name`, and optionally updates the `password` if provided (using `Hash::make`). It redirects back to the profile route upon successful update.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ProfileFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\ProfilePage;\nuse Illuminate\\Container\\Attributes\\CurrentUser;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\n\nfinal class ProfileController extends Controller\n{\n    public function index(\n        ProfilePage $page\n    ): ProfilePage {\n        return $page;\n    }\n\n    public function update(\n        ProfileFormRequest $request,\n        #[CurrentUser] User $user\n    ): RedirectResponse\n    {\n        $data = $request->only(['email', 'name']);\n\n        if($request->filled('password')) {\n            $data['password'] = Hash::make($request->input('password'));\n        }\n\n        $user->update($data);\n\n        return to_route('profile');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Filled Style to Link in MoonShine PHP and Blade\nDESCRIPTION: Demonstrates how to apply a filled background style to a link using the filled() method in PHP or the :filled=\"true\" attribute in Blade components. The filled style enhances the visual appearance by filling the link's background. Examples are shown both for class usage and Blade templates with link-button and link-native components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/link.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n    ->filled()\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::link-button\n    href=\"#\"\n    :filled=\"true\"\n>\n    Link\n</x-moonshine::link-button>\n\n<x-moonshine::link-native\n    href=\"#\"\n    :filled=\"true\"\n>\n    Link\n</x-moonshine::link-native>\n```\n\n----------------------------------------\n\nTITLE: Triggering custom events for query tags with events() in PHP\nDESCRIPTION: Creates a query tag with an event listener that triggers a custom JavaScript fragment update upon data change, using the events() method with AlpineJs::event() and JsEvent::FRAGMENT_UPDATED. Useful for dynamic UI updates after filtering or modifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nQueryTag::make('QueryTag', fn($q) => $q)->events([\n    AlpineJs::event(\n        JsEvent::FRAGMENT_UPDATED, 'custom-fragment'\n    )\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk ActionButton for ModelResource PHP\nDESCRIPTION: Shows how to create a bulk action button specifically for use within a MoonShine ModelResource. The bulk() method designates the button as a bulk action, applicable to selected items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->add(ActionButton::make('Link', '/endpoint')->bulk());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sidebar Component with Menu in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a Sidebar component by instantiating it with an array of components, specifically adding a Menu component. It uses the static make() factory method from the Sidebar class and includes necessary imports. The components parameter expects an iterable list of UI components that form the Sidebar content. This snippet requires the MoonShine\\UI\\Components\\Layout\\Sidebar and Menu classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/sidebar.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Menu;\\nuse MoonShine\\UI\\Components\\Layout\\Sidebar;\\n\\nSidebar::make([\\n    Menu::make(),\\n])\n```\n\n----------------------------------------\n\nTITLE: Defining ActionButton inModal Method Signature PHP\nDESCRIPTION: Documents the method signature for configuring an ActionButton to open a modal window. It defines parameters for title, content, name, a builder closure for the modal component, and components to include.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\UI\\Components\\Modal;\n\n/**\n * @param  ?Closure(Modal $modal, ActionButtonContract $ctx): Modal  $builder\n */\ninModal(\n    Closure|string|null $title = null,\n    Closure|string|null $content = null,\n    Closure|string|null $name = null,\n    ?Closure $builder = null,\n    iterable $components = [],\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Reordering of Uploaded Files in PHP\nDESCRIPTION: This snippet demonstrates how to enable file reordering with the `reorderable()` method. The `reorderable()` method accepts a closure to specify the URL to handle the reordering logic.  Also includes the use of `multiple()`. MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('Files')\n    ->reorderable(fn(File $ctx) => \"/reorder/\" . $ctx->getData()->getKey())\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Configure TableBuilder HTML Attributes PHP\nDESCRIPTION: Allows setting custom HTML attributes for table elements like rows ('trAttributes'), cells ('tdAttributes'), and the header, body, footer, and overall table ('headAttributes', 'bodyAttributes', 'footAttributes', 'customAttributes'). Closures receive data/index for conditional attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n->trAttributes(fn(?DataWrapperContract $data, int $row): array => ['class' => $row % 2 ? 'bg-gray-100' : ''])\n->tdAttributes(fn(?DataWrapperContract $data, int $row, int $cell): array => ['class' => $cell === 0 ? 'font-bold' : ''])\n->headAttributes(['class' => 'bg-blue-500 text-white'])\n->bodyAttributes(['class' => 'text-sm'])\n->footAttributes(['class' => 'bg-gray-200'])\n->customAttributes(['class' => 'custom-table'])\n```\n\n----------------------------------------\n\nTITLE: Setting a Placeholder for Select Field (PHP)\nDESCRIPTION: This snippet shows how to set a placeholder text for a Select field using the `placeholder()` method. This placeholder text will be displayed when no option is selected, providing a hint to the user.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country')\n    ->nullable()\n    ->placeholder('Country')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Layout in MoonShine (PHP)\nDESCRIPTION: Defines the main layout template class used for the MoonShine panel. Specify the fully qualified class name for the 'layout' key in `config/moonshine.php` or use the `layout()` method in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n'layout' => \\App\\MoonShine\\Layouts\\CustomLayout::class,\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->layout(\\App\\MoonShine\\Layouts\\CustomLayout::class);\n```\n\n----------------------------------------\n\nTITLE: Clearing and Adding Action Buttons in MoonShine (PHP)\nDESCRIPTION: This snippet demonstrates how to completely replace the default action buttons in a MoonShine table with a custom set. It uses the `empty()` method to clear the existing buttons and then adds a new `ActionButton`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function indexButtons(): ListOf\n{\n    parent::indexButtons()\n        ->empty()\n        ->add(ActionButton::make('Link', '/endpoint'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Traits with Magic Methods in MoonShine PHP\nDESCRIPTION: This PHP snippet defines a trait `HasMyPackageTrait` intended for use with MoonShine resources or pages. It demonstrates using magic methods like `loadHasMyPackageTrait()` to add assets and `modifyFormComponent()` to alter form components when the trait is loaded.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntrait HasMyPackageTrait\n{\n    public function loadHasMyPackageTrait(): void\n    {\n        $this->getFormPage()->addAssets([\n            Js::make('vendor/my-package/js/app.js'),\n            Css::make('vendor/my-package/css/app.css'),\n        ]);\n    }\n\n    public function modifyFormComponent(ComponentContract $component): ComponentContract\n    {\n        return parent::modifyFormComponent($component)->fields([\n            Modal::make(\n                'This is my package modal.',\n                ''\n            ),\n            ...$component->getFields()->toArray(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced moonshine Route declaration with optional resource, page, and auth flags\nDESCRIPTION: Illustrates configuring the MoonShine Route helper with parameters controlling whether resourceUri, pageUri, and authentication middleware are included, providing flexible route setup aligned with specific project needs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/routes.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::moonshine(static function (Router $router) {\n    // ...\n},\n// add prefix {resourceUri}\nwithResource: false,\n// add prefix {pageUri}\nwithPage: false,\n// add middleware Authenticate::class\nwithAuthenticate: false\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Application Logic with onApply\nDESCRIPTION: The `onApply()` method allows you to customize the behavior of a field during the \"apply\" process, which occurs when the form data is submitted.  This allows you to transform the field's value before saving it to the database. It receives the model, the value, and the field itself.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(mixed, mixed, FieldContract): mixed  $onApply\n */\nonApply(Closure $onApply)\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Pipeline\nDESCRIPTION: This snippet shows an example of creating an authentication pipeline for phone number login confirmation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\AuthPipelines;\n\nuse Closure;\nuse MoonShine\\Laravel\\Models\\MoonshineUser;\n\nclass PhoneVerification\n{\n    public function handle(Request $request, Closure $next)\n    {\n        $user = MoonshineUser::query()\n            ->where('email', $request->get('username'))\n            ->first();\n\n         if (! is_null($user) && ! is_null($user->getAttribute('phone'))) {\n            $request->session()->put([\n                'login.id' => $user->getKey(),\n                'login.remember' => $request->boolean('remember'),\n            ]);\n\n            return redirect()->route('sms-challenge');\n        }\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Sidebar Component Override\nDESCRIPTION: Demonstrates how to override the Sidebar component within the MoonShine admin panel layout using the `getSidebarComponent()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function getSidebarComponent(): Sidebar\n{\n    return Sidebar::make([\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field for MoonShine - Shell\nDESCRIPTION: Scaffolds a custom field class for MoonShine, with customizable inheritance (from the base field class or another field) and directory/namespace options. Generates PHP and Blade files in app/MoonShine/Fields and resources/views/admin/fields, respectively. Requires MoonShine and Laravel, and allows extension for field behaviors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:field\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Optimized moonshine.php Example\nDESCRIPTION: This snippet illustrates how to use an optimized version of the `moonshine.php` file, only including settings that deviate from the default values. It prioritizes clarity and simplicity by setting only title, use_migrations, use_notifications, and use_database_notifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'title' => 'My MoonShine Application',\n    'use_migrations' => true,\n    'use_notifications' => true,\n    'use_database_notifications' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to File Elements\nDESCRIPTION: Customize file elements by adding custom attributes using the itemAttributes() method with a closure that receives the filename and index.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File', 'file')\n    ->itemAttributes(fn(string $filename, int $index = 0) => [\n        'style' => 'width: 250px; height: 250px;'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Laravel SoftDeletes Trait in Model - PHP\nDESCRIPTION: This snippet adds Laravel's SoftDeletes trait to the Article Eloquent model, enabling soft delete functionality where deleted records are not permanently removed from the database but marked as trashed. The trait allows automatic handling of deleted_at timestamps and provides helper functions to manage soft deleted records.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/soft-deletes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Article extends Model\n{\n    use SoftDeletes;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Fields with canApply example\nDESCRIPTION: This example demonstrates the use of the `canApply()` method to prevent the `apply()` method from being executed for the field if the condition inside the closure evaluates to `false`. This disables the application of changes under certain criteria.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nText::make('Title')\n    ->canApply(fn() => false)\n```\n\n----------------------------------------\n\nTITLE: Applying Field Events with Pre/Post Callbacks using apply in FormBuilder (PHP)\nDESCRIPTION: This variant uses the apply method with named parameters for callbacks to customize the process before, during, and after saving a model. The before and after closures can mutate the state or trigger additional actions. A throw parameter enables exception propagation. Suitable for advanced form scenarios in Laravel applications using FormBuilder.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$form->apply(\n    static fn(Model $item) => $item->save(),\n    before: function (Model $item) {\n        if (! $item->exists) {\n            $item = $this->beforeCreating($item);\n        }\n\n        if ($item->exists) {\n            $item = $this->beforeUpdating($item);\n        }\n\n        return $item;\n    },\n    after: function (Model $item) {\n        $wasRecentlyCreated = $item->wasRecentlyCreated;\n\n        $item->save();\n\n        if ($wasRecentlyCreated) {\n            $item = $this->afterCreated($item);\n        }\n\n        if (! $wasRecentlyCreated) {\n            $item = $this->afterUpdated($item);\n        }\n\n        return $item;\n    },\n    throw: true\n);\n```\n\n----------------------------------------\n\nTITLE: Define Form Fields with BelongsToMany & updateOnPreview\nDESCRIPTION: This code defines the form fields using MoonShine's Grid, Column, and BelongsToMany components.  It utilizes the `updateOnPreview` method within the BelongsToMany field to enable real-time updates for the 'Approved' switcher. The `asyncMethod` is used to specify the endpoint for handling the update, passing the `tournamen_team_id` as a parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/update-on-preview-pivot.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        Grid::make([\n            Column::make([\n                ID::make()->sortable(),\n                Text::make('Team title')->required(),\n                Number::make('Team number'),\n                BelongsTo::make('Tournament')->searchable(),\n            ]),\n            Column::make([\n                BelongsToMany::make('Users')->fields([\n                    Switcher::make('Approved')->updateOnPreview(\n                        $this->getRouter()->getEndpoints()->method('updatePivot', params: fn($data) => ['parent' => $data->pivot->tournamen_team_id])\n                    ),\n                ])->searchable(),\n            ])\n        ])\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding the Create Button in MoonShine (PHP)\nDESCRIPTION: This PHP code snippet shows how to completely replace the default 'Create' button in a MoonShine resource. It overrides the `modifyCreateButton` method and returns a completely new `ActionButton` instance with the label 'Create', ignoring the original button passed as an argument.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nprotected function modifyCreateButton(ActionButtonContract $button): ActionButtonContract\n{\n    return ActionButton::make('Create');\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Logic After Fill PHP\nDESCRIPTION: This code demonstrates how to execute logic after a `Select` field has been filled in MoonShine using the `afterFill()` method. In this case, it adds a custom CSS class to the field's wrapper if all selected values contain 'cutcode.dev'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Carousel;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->afterFill(\n        function(Select $ctx) {\n            if(collect($ctx->toValue())->every(fn($value) => str_contains($value, 'cutcode.dev'))) {\n                return $ctx->customWrapperAttributes(['class' => 'full-url']);\n            }\n\n            return $ctx;\n        }\n    )\n    ->changePreview(\n        fn(?array $values, Select $ctx) => Carousel::make($values)\n    ),\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Sticky Header in MoonShine\nDESCRIPTION: This snippet demonstrates how to create a table with a sticky header in MoonShine. It allows the header to remain fixed while scrolling through a large dataset. The example includes table columns and sample data rows.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n<x-moonshine::table\n    :sticky=\"true\"\n    :columns=\"[\n        '#', 'First', 'Last', 'Email'\n    ]\"\n    :values=\"[\n        [1, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [2, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [3, fake()->firstName(), fake()->lastName(), fake()->safeEmail()]\n    ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Import Events for Custom Logic\nDESCRIPTION: This code snippet presents the use of model resource events for customizing import logic. The `beforeImportFilling()`, `beforeImported()`, and `afterImported()` methods allow modifying the data before filling the model, before the model is imported, and after the model has been imported, respectively. These events provide opportunities to implement custom validation, data transformations, or other specific logic during the import process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeImportFilling(array $data): array\n{\n    return $data;\n}\n\npublic function beforeImported(mixed $item): mixed\n{\n    return $item;\n}\n\npublic function afterImported(mixed $item): mixed\n{\n    return $item;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Namespace Imports for MoonShine Resources using Shell\nDESCRIPTION: This shell command pipeline finds all PHP files in the app/MoonShine/Resources directory and formats them as PHP 'use' statements for import. It replaces directory separators with backslashes, appends semicolons, and sorts the resulting list. It is useful for updating import statements after namespace changes. Prerequisite: Unix environment with find, sed, and sort commands.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfind app/MoonShine/Resources -type f | sed \"s/app/use App/\" | sed \"s|/|\\\\|g\" | sed \"s/.php/;/\" | sort\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Fields with canApply\nDESCRIPTION: The `canApply()` method allows you to conditionally control whether the `apply()` method is executed for a given field.  This provides flexibility to enable or disable the data transformation based on specific criteria. The closure receives a Field object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\ncanApply(Closure $canApply)\n```\n\n----------------------------------------\n\nTITLE: Creating Spinner Instance with Class Method (PHP)\nDESCRIPTION: Shows how to instantiate the Spinner component using the static `make()` method in PHP, illustrating object-oriented usage within backend code, with no parameters provided, resulting in default spinner settings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Spinner;\n\nSpinner::make()\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Link Component in PHP with MoonShine\nDESCRIPTION: This snippet illustrates how to add a tooltip that appears on hover to a link created using the Link component in PHP. The tooltip() method accepts a string to display as the tooltip text. The example adds a tooltip labeled \"Tooltip\" to a link pointing at the MoonShine site.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/link.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n    ->tooltip('Tooltip')\n```\n\n----------------------------------------\n\nTITLE: Defining Inline CSS Styles with Rounded Radius for Compact Theme in PHP assets()\nDESCRIPTION: This snippet defines a PHP assets method that appends an inline CSS block using `InlineCss::make`. The CSS custom properties declare various border-radius values for a compact theme with rounded corners. The method merges these styles with parent assets and returns the combined array. Requires `InlineCss` class support and PHP 7.3+ syntax for heredoc. Outputs an array of asset declarations including inline CSS blocks.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function assets(): array\n{\n    return [\n        ...parent::assets(),\n        InlineCss::make(<<<'Style'\n            :root {\n              --radius: 0.15rem;\n              --radius-sm: 0.075rem;\n              --radius-md: 0.275rem;\n              --radius-lg: 0.3rem;\n              --radius-xl: 0.4rem;\n              --radius-2xl: 0.5rem;\n              --radius-3xl: 1rem;\n              --radius-full: 9999px;\n            }\n        Style),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeSwitcher Component in PHP\nDESCRIPTION: This PHP snippet shows how to instantiate the ThemeSwitcher UI component in the MoonShine framework. It uses the ThemeSwitcher class from the UI components namespace and calls the static make() method to create the component instance, which enables theme toggling functionality between light and dark modes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/theme-switcher.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\ThemeSwitcher;\n\nThemeSwitcher::make()\n```\n\n----------------------------------------\n\nTITLE: Example Configuration File Output in PHP\nDESCRIPTION: The resulting PHP configuration file after saving the form data. This file contains the values entered in the Var and Bar fields of the Template form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/change-config.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n  'var' => 'foo',\n  'bar' => 'test',\n];\n```\n\n----------------------------------------\n\nTITLE: Localization Configuration for MoonShine - PHP\nDESCRIPTION: This snippet shows a configuration excerpt from the MoonShine config file to set the default locale and enabled locales for the admin panel. It sets Russian ('ru') as the default locale and supports English ('en') and Russian ('ru'). Users are advised where to place language files for translations. This configuration enables interface localization and multilingual support.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'locale' => 'ru',\n'locales' => [\n    'en',\n    'ru'\n],\n```\n\n----------------------------------------\n\nTITLE: Using ModelCaster in FormBuilder (PHP)\nDESCRIPTION: This snippet demonstrates how to use the ModelCaster in a FormBuilder to fill the form with data from a User model. It queries the first User and applies the ModelCaster to the form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/type-casts.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make()\n    ->fields([\n        Text::make('Email'),\n    ])\n    ->fillCast(User::query()->first(), new ModelCaster(User::class))\n```\n\n----------------------------------------\n\nTITLE: Naming MoonShine OffCanvas for Events PHP\nDESCRIPTION: Illustrates how to assign a unique name to an OffCanvas component using the `name()` method. This name is necessary for targeting the component with JavaScript events.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\OffCanvas;\n\n// ...\n\nprotected function components(): iterable\n{\n    return [\n        Offcanvas::make(\n            'Title',\n            'Content...'\n        )\n            ->name('my-canvas')\n    ];\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Switcher Input in Blade Templates for MoonShine Forms\nDESCRIPTION: This Blade snippet shows how to render the Switcher UI element inside a form wrapper with a label. It uses Blade components from the MoonShine namespace, specifying attributes such as name, current value, onValue, and offValue to control toggle states. It requires MoonShine Blade components to be properly registered and enables visual toggle functionality with backend integration for submitting values 1 or 0.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/switcher.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"Publish\">\n    <x-moonshine::form.switcher\n        name=\"is_publish\"\n        value=\"1\"\n        :onValue=\"1\"\n        :offValue=\"0\"\n    />\n</x-moonshine::form.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Adding Images with Option Objects MoonShine Select PHP\nDESCRIPTION: Shows an alternative method to define select options with images using `Options`, `Option`, and `OptionProperty` objects. This provides a more structured way to define option details, including labels, values, selection status, and properties.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Select')\n    ->options(\n        new Options([\n            new Option(\n                label: 'Option 1',\n                value: '1',\n                selected: true,\n                properties: new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png'),\n            ),\n            new Option(\n                label: 'Option 2',\n                value: '2',\n                properties: new OptionProperty(image: 'https://cutcode.dev/images/platforms/youtube.png'),\n            ),\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Vertical Display Mode for Json Field Table in MoonShine PHP\nDESCRIPTION: Enables vertical orientation of Json field tables using vertical(), switching from the default horizontal (row-based) presentation. This improves usability for certain layouts. Can be chained with other configuration methods. No parameters required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->vertical()\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany valuesQuery in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `valuesQuery()` method on the `BelongsToMany` field. It requires a single `Closure` callback parameter used to modify the Eloquent query that retrieves the selectable values for the field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nvaluesQuery(Closure $callback)\n```\n\n----------------------------------------\n\nTITLE: Customizing Not Found Notification Text in MoonShine Table\nDESCRIPTION: This snippet demonstrates how to translate or customize the text of a 'not found' notification in a MoonShine table. It uses the translates parameter to define a custom message using Laravel's localization system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_43\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::table\n    :columns=\"[\n        '#', 'First', 'Last', 'Email'\n    ]\"\n    :notfound=\"true\"\n    :translates=\"['notfound' => __('moonshine.ui.notfound')]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Request Data in Asynchronous Search Query for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Shows how to make the asynchronous search dependent on other fields in the form. The `searchQuery` closure receives the `Request` object, allowing access to current form values (e.g., `request->get('country_id')`). This example filters 'City' options based on the selected 'Country' in the same form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nuse App\\MoonShine\\Resources\\CityResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\UI\\Fields\\Field;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id'),\n\nBelongsTo::make('City', 'city',  resource: CityResource::class)\n    ->asyncSearch(\n        'title',\n        searchQuery: function (Builder $query, Request $request, string $term, Field $field): Builder {\n            return $query->where('country_id', $request->get('country_id'));\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from Raw Input (PHP)\nDESCRIPTION: This snippet shows how to use the `fromRaw()` method to transform the raw input value of a field. It allows adding a closure to get the final value from the raw input.  The Closure receives the raw value and the field context as arguments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Enums\\StatusEnum;\nuse MoonShine\\UI\\Fields\\Enum;\n\nEnum::make('Status')\n    ->attach(StatusEnum::class)\n    ->fromRaw(fn(string $raw, Enum $ctx) => StatusEnum::tryFrom($raw))\n```\n\n----------------------------------------\n\nTITLE: Listing MoonShine Resource Classes using Shell\nDESCRIPTION: This command lists the resource class filenames found in app/MoonShine/Resources as class references with appended '::class,' for inclusion in resource arrays. It simplifies populating MoonShine's resource registry after upgrading. Inputs are .php files in the specified directory; output is sorted class reference strings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nfind app/MoonShine/Resources -type f -exec basename {} \\; | sed \"s/.php/::class,/\" | sort\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Policy with Artisan - Shell\nDESCRIPTION: This command uses the Artisan CLI tool to generate a Policy class specifically designed for use within the MoonShine framework. It provides a quick way to create the necessary policy structure, streamlining the process of setting up authorization rules.  The `PostPolicy` is the name of the Policy being generated and will be created under the `App\\Policies` namespace. Requires Laravel's Artisan command-line interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/security/authorization.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:policy PostPolicy\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Domain in moonshine.php\nDESCRIPTION: This snippet provides an example of setting the domain using the `moonshine.php` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'domain' => 'admin.example.com',\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication Guard in moonshine.php\nDESCRIPTION: Shows how to configure the authentication guard using the `moonshine.php` configuration file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    'guard' => 'admin',\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine Spinner Fixed Position (Blade)\nDESCRIPTION: Shows how to configure the MoonShine spinner component in a Blade template to use CSS fixed positioning by setting the `:fixed` attribute to `true`. This keeps the spinner in a fixed position relative to the viewport.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::spinner :fixed=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Colors using ColorManager - PHP\nDESCRIPTION: Illustrates how to retrieve colors using the ColorManager in PHP. Shows how to get a color in HEX or RGB format, get a specific shade of a color, and get all colors for either the light or dark theme. Requires an instance of the ColorManager class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Получение цвета\n$colorManager->get('primary'); // Возвращает HEX\n$colorManager->get('primary', hex: false); // Возвращает RGB\n\n// Получение оттенка\n$colorManager->get('dark', 500); // Получение конкретного оттенка\n\n// Получение всех цветов\n$colorManager->getAll(); // Для светлой темы\n$colorManager->getAll(dark: true); // Для тёмной темы\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine OffCanvas full method PHP\nDESCRIPTION: Shows the method signature for the `full()` method, used to set the OffCanvas component to maximum width, typically filling the screen horizontally.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nfull(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Using icon() with Custom HTML Icons in PHP\nDESCRIPTION: This code shows how to use `icon()` with custom icons using Blade Icons and HTML. It takes the HTML output from an `svg()` function and custom mode set to true.  The expected output is the HTML representation of the icon. Requires a Blade Icons setup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n->icon(\n    svg('path-to-icon-pack')->toHtml(),\n    custom: true\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Home Page Route/URL in MoonShine (PHP)\nDESCRIPTION: Specifies the main landing page for the MoonShine panel, used for redirects after login, logo links, and 404 pages. Configure either 'home_route' (for a named route) or 'home_url' (for a specific URL path) in `config/moonshine.php`, or use the corresponding `homeRoute()` or `homeUrl()` methods in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n'home_route' => 'moonshine.index',\n// or url string\n'home_url' => '/admin/page/some-page',\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->homeRoute('moonshine.index');\n// or url string\n$config->homeUrl('/admin/page/some-page');\n```\n\n----------------------------------------\n\nTITLE: Displaying Rating Component (PHP/Blade)\nDESCRIPTION: Examples demonstrating how to display the MoonShine Rating component using both PHP instantiation via the static `make` method and direct usage as a Blade component. Both methods allow setting the rating value, minimum, and maximum.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/rating.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Rating;\n\nRating::make(3, 1, 10)\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::rating value=\"8\" min=\"1\" max=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Including Assets Component in Blade Template\nDESCRIPTION: This snippet demonstrates how to include the Assets component directly within a Blade template using a custom Blade component. It enables seamless embedding of scripts and styles in the HTML head section for proper page rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/assets.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout.assets />\n```\n\n----------------------------------------\n\nTITLE: Accessing MoonShine Request in Controller PHP\nDESCRIPTION: Illustrates injecting the custom `MoonShineRequest` object into a controller method. This specialized request object provides methods (like `getPage()` and `getResource()`) to access the context of the current MoonShine page or resource being handled.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\nuse MoonShine\\Laravel\\MoonShineRequest;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class CustomViewController extends MoonShineController\n{\n    public function __invoke(MoonShineRequest $request)\n    {\n        // $request->getPage();\n        // $request->getResource();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Enum Field in MoonShine (PHP)\nDESCRIPTION: This code snippet demonstrates how to create an Enum field in the MoonShine framework. It uses the `Enum::make()` method to define the field and `->attach()` to associate it with an enum class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/enum.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Enum;\n\nEnum::make('Status')\n    ->attach(StatusEnum::class)\n```\n\n----------------------------------------\n\nTITLE: Naming a Modal for Event Handling in PHP\nDESCRIPTION: This snippet demonstrates how to assign a unique name to a modal using the `name()` method. This is essential for triggering modal events using JavaScript or other components like `ActionButton`. The example uses the `MoonShine\\UI\\Components\\Modal` and `MoonShine\\UI\\Components\\ActionButton` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Modal;\n\n// ...\n\nprotected function components(): iterable\n{\n    return [\n        Modal::make(\n            'Заголовок',\n            'Содержимое',\n        )\n            ->name('my-modal'),\n    ];\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Mode\nDESCRIPTION: Sets all fields within a `FieldsGroup` to preview mode using the `previewMode` method. This allows displaying the fields in a read-only format.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nFieldsGroup::make($fields)\n    ->previewMode()\n```\n\n----------------------------------------\n\nTITLE: Configuring APP_URL in Environment File Using INI Syntax\nDESCRIPTION: Sets the APP_URL environment variable within the .env file to specify the base URL of the application. This is essential for correctly resolving asset URLs, particularly for images when served from the 'public' disk storage. The configuration helps the framework generate absolute URLs consistent with the development or production setup. No additional dependencies are required beyond a Laravel environment with proper .env file access.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/troubleshooting.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nAPP_URL=https://moonshine.test:8080\n```\n\n----------------------------------------\n\nTITLE: Defining the `associatedWith` Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `associatedWith()`. This method links the selectable options of a `BelongsToMany` field to the value of another field on the form, specified by `$column`. An optional `searchQuery` Closure can further filter the associated options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nassociatedWith(string $column, ?Closure $searchQuery = null)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Loader Indicator in Blade\nDESCRIPTION: This Blade snippet shows how to render the default Loader component using the `<x-moonshine::loader />` component. This assumes you have a Moonshine environment set up.  The output is a pre-styled loading indicator based on the default Moonshine theme.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/loader.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::loader />\n```\n\n----------------------------------------\n\nTITLE: Using icon() with 'academic-cap' in Outline Style in PHP\nDESCRIPTION: This snippet calls the `icon()` function with the 'academic-cap' icon, which assumes the default Outline style from Heroicons. It's a straightforward call to the function with the icon name. Output is the HTML for the academic-cap outline icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->icon('academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ArticleFormPage Class Extending FormPage\nDESCRIPTION: Defines a custom page class 'ArticleFormPage' that extends the base 'FormPage'. This class will serve as a specialized form page for articles, allowing further customization of its layout and behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/tabs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArticleFormPage extends FormPage\n{\n    // Customizations for the article form page can be added here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening/Closing Modal using MoonShine.ui.toggleModal\nDESCRIPTION: This JavaScript code shows the usage of `MoonShine.ui.toggleModal()` to open and close modals. It takes the modal name as a parameter, allowing interaction with modal UI components within the admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.ui.toggleModal('modal-name')\n```\n\n----------------------------------------\n\nTITLE: Setting Toast Notification in Session Laravel PHP\nDESCRIPTION: This snippet shows how to add a toast notification to the user's session data using Laravel's `session()->flash()` helper. The Flash component reads this session data to display the toast. Dependencies: Laravel session, MoonShine\\Support\\Enums\\FlashType.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flash.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nsession()->flash('toast', [\n    'type' => FlashType::INFO->value,\n    'message' => 'Info',\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering MoonShine Resources and Pages in Laravel Service Provider\nDESCRIPTION: This PHP snippet shows how to manually register MoonShine resources and pages by configuring them inside the 'MoonShineServiceProvider'. It imports relevant resource classes and sets them via the 'resources' and 'pages' methods on the MoonShine core instance, enabling the admin panel to recognize and use these entities. Necessary dependencies include Laravel's ServiceProvider infrastructure and MoonShine's dependency injection contracts.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Providers;\n\nuse App\\MoonShine\\Resources\\ArticleResource;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n    ): void\n    {\n        $core\n            ->resources([\n                MoonShineUserResource::class,\n                MoonShineUserRoleResource::class,\n                ArticleResource::class,\n                // ...\n            ])\n            ->pages([\n                ...$config->getPages(),\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Modal using Alpine.js $dispatch\nDESCRIPTION: This code snippet shows how to use Alpine.js's `$dispatch()` magic method to trigger a modal toggle event. The modal needs a unique name assigned using the `name()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$dispatch('modal_toggled:my-modal')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ActionButton in PHP\nDESCRIPTION: Demonstrates the basic usage of `ActionButton::make` to create a button with a specific label and URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\n\nActionButton::make(\n    'Button Label',\n    'https://moonshine-laravel.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning Hotkeys to ActionButtons (PHP)\nDESCRIPTION: Shows how to assign keyboard hotkeys to trigger ActionButton clicks, optionally displaying a badge hint, with examples including multiple keys and confirmation forms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')->hotKeys(['shift', '2'], false)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')\n    ->method('updateSomething')\n    ->withConfirm(\n        formBuilder: fn(FormBuilder $form): FormBuilder => $form\n            ->submit(\n                button: ActionButton::make('Confirm')->error()->hotKeys(['shift', 'd', 'meta'], true)\n            )\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Card with MoonShine Components in Blade\nDESCRIPTION: This snippet demonstrates how to create a responsive card within a grid layout using MoonShine UI components. The card includes a thumbnail, dynamic title from faker, date subtitle, key-value pairs, badge in the header, body content, and an action button. The grid is configured for responsive behavior with different column spans for desktop and mobile views.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.grid>\n    <x-moonshine::layout.column colSpan=\"4\" adaptiveColSpan=\"12\">\n        <x-moonshine::card\n            url=\"#\"\n            thumbnail=\"/images/image_1.jpg\"\n            :title=\"fake()->sentence(3)\"\n            :subtitle=\"date('d.m.Y')\"\n            :values=\"['ID' => 1, 'Author' => fake()->name()]\"\n        >\n            <x-slot:header>\n                <x-moonshine::badge color=\"green\">new</x-moonshine::badge>\n            </x-slot:header>\n\n            {{ fake()->text() }}\n\n            <x-slot:actions>\n                <x-moonshine::link-button href=\"#\">Read more</x-moonshine::link-button>\n            </x-slot:actions>\n        </x-moonshine::card>\n    </x-moonshine::layout.column>\n</x-moonshine::layout.grid>\n```\n\n----------------------------------------\n\nTITLE: Defining optionProperties Method PHP\nDESCRIPTION: Defines the signature for the `optionProperties` method, used to add custom properties, such as images, to select options. It accepts either a Closure or an array as input.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\noptionProperties(Closure|array $data)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Assets in MoonShine Layout via PHP assets() Method\nDESCRIPTION: This PHP code extends the assets method in a custom layout class by merging additional CSS assets with the parent assets. It uses the AssetManager to include a CSS file with deferred loading enabled. Required dependencies include the MoonShine `Css` class and proper namespace imports. The method returns an array of asset objects used by the template to load external stylesheets.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\AssetManager\\Css;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    protected function assets(): array\n    {\n        return [\n            ...parent::assets(),\n\n            Css::make('/vendor/moonshine/assets/minimalistic.css')->defer(),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Section Divider in Markdown - Plain Text\nDESCRIPTION: Illustrates the use of the Markdown horizontal rule to separate content sections. Requires no dependencies. Expects three hyphens as input and outputs a visual divider line across the content. Should be used immediately after navigation or table of contents.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\n---\n\n```\n\n----------------------------------------\n\nTITLE: Defining the `withImage` Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `withImage()`. This method allows displaying an image next to each selectable value in a `BelongsToMany` field (typically used with `selectMode()`). It requires the database column name containing the image path, the storage disk, and an optional directory prefix.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nwithImage(\n    string $column,\n    string $disk = 'public',\n    string $dir = ''\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing MoonShine Shell\nDESCRIPTION: These shell commands clone the MoonShine package within the `packages` directory, navigate into the cloned repository, and then execute `composer install` and `npm install`.  This installs project dependencies using Composer and Node Package Manager, respectively. This ensures all required packages and node modules are present.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/contribution.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd packages && git clone git@github.com:moonshine-software/moonshine.git && cd moonshine && composer install && npm install\n```\n\n----------------------------------------\n\nTITLE: Setting Alias Property and Overriding getAlias() Method in MoonShine PHP Page\nDESCRIPTION: Shows two ways to specify a custom alias for a page: by setting the protected nullable string property `$alias`, or by overriding the `getAlias()` method to return a string identifier. Aliases can be used to customize URL slugs or references for the page within the MoonShine admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected ?string $alias = null;\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    public function getAlias(): ?string\n    {\n        return 'custom_page';\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing loadWithPermissions Method\nDESCRIPTION: This code snippet demonstrates an example `loadWithPermissions` method inside the `WithPermissions` trait. It adds a permissions component to the page by fetching page by URI and attaching permissions to the bottom layer of the page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\Layer;\nuse MoonShine\\Support\\Enums\\PageType;\n\ntrait WithPermissions\n{\n    protected function loadWithPermissions(): void\n    {\n        $this->getPages()\n            ->findByUri(PageType::FORM->value)\n            ->pushToLayer(\n                layer: Layer::BOTTOM,\n                component: Permissions::make(\n                    label: 'Permissions',\n                    resource: $this,\n                )\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Pivot Field Update\nDESCRIPTION: This code implements the `updatePivot` method to handle the update request triggered by the `updateOnPreview` feature. It retrieves the related TournamentTeam based on the 'parent' parameter, extracts the column name from the request, and updates the pivot table using the provided resourceItem and value. It returns a MoonShineJsonResponse with a success toast message.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/update-on-preview-pivot.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function updatePivot(MoonShineRequest $request): MoonShineJsonResponse\n{\n    $item = TournamentTeam::query()->findOrFail($request->get('parent'));\n\n    $column = (string) $request->str('field')->remove('pivot.');\n\n    $item->users()->updateExistingPivot($request->get('resourceItem'), [\n        $column => $request->get('value'),\n    ]);\n\n    return MoonShineJsonResponse::make()->toast('Success');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Instance (`getPage`) Signature (PHP)\nDESCRIPTION: Method signature for `getPage`, used to retrieve a configured page instance. It accepts the page name (key from config), a default page class, and optional constructor parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\ngetPage(\n    string $name,\n    string $default,\n    mixed ...$parameters,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Title Component in PHP\nDESCRIPTION: Demonstrates how to create an instance of the `Title` component using its static `make` factory method within a PHP class. Requires importing the `MoonShine\\UI\\Components\\Title` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/title.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Title;\n\nTitle::make('Hello world')\n```\n\n----------------------------------------\n\nTITLE: Setting Choices.js Custom Attributes MoonShine Select PHP\nDESCRIPTION: Demonstrates how to pass custom data attributes to the Select field's underlying HTML element using the `customAttributes` method. This allows direct configuration of the Choices.js library behavior, such as limiting the maximum number of selectable items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        1 => 'Andorra',\n        2 => 'United Arab Emirates',\n    ])\n    ->customAttributes([\n        'data-max-item-count' => 2\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enabling Pre-Cognitive Validation with FormBuilder in PHP\nDESCRIPTION: This snippet shows how to activate pre-cognitive validation by chaining the precognitive method to a FormBuilder instance. The precognitive method enables the form to perform client-side validation before submitting to the server, reducing unnecessary requests. Requires FormBuilder in a Laravel setup; no additional parameters are needed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make('/crud/update')\n    ->precognitive()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Apply Class for Fields - Shell\nDESCRIPTION: Generates an 'apply' class that can be used to customize value application logic for fields in MoonShine forms. Class location is app/MoonShine/Applies, with base dir/namespace override options available. Requires manual registration in a service provider after creation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:apply\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource URL Alias via Method - MoonShine PHP\nDESCRIPTION: This variant allows you to override the getAlias() method to dynamically specify a resource's admin URL alias in MoonShine. Class extends 'ModelResource' and only depends on the MoonShine Laravel Resource component. The method may conditionally return a string alias or null, impacting routing. Input is provided programmatically, output is a resource class that computes its URL alias at runtime.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    public function getAlias(): ?string\n    {\n        return 'custom-alias';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JavaScript Event Without Payload using dispatchEvent in FormBuilder (PHP)\nDESCRIPTION: This snippet demonstrates dispatching a JavaScript event without sending any form data by using the withoutPayload parameter. This is appropriate when form state is not needed on the client side and optimizes event-driven interactions between backend and frontend via Alpine.js.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n->dispatchEvent(\n    AlpineJs::event(JsEvent::OFF_CANVAS_TOGGLED, 'default'),\n    withoutPayload: true\n)\n```\n\n----------------------------------------\n\nTITLE: Html Component Usage in Blade\nDESCRIPTION: Illustrates using the Html component within a Blade template. The `<x-moonshine::layout.html>` tag represents the Html component. It includes the Head and Body components as children.  The body section allows for inserting additional content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/html.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.html>\n    <x-moonshine::layout.head />\n    <x-moonshine::layout.body>\n        // ...\n    </x-moonshine::layout.body>\n</x-moonshine::layout.html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Setting Record with PHP and Laravel Eloquent\nDESCRIPTION: This private method fetches a Setting model instance by querying the database for the record with ID 1. It uses Laravel's Eloquent ORM's query builder and return the found Setting model object. This method requires the Setting model to be correctly defined and connected to the data source. The method expects that the settings record with ID 1 exists or will return null if not found.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/dashboard-settings.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate function getSetting(): Setting\n{\n    return Setting::query()->find(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Install New MoonShine Version\nDESCRIPTION: This command executes the `moonshine:install` Artisan command. This command generates a new service provider, updates the configuration, creates a new layout, and generates a new dashboard.  This is a core step in the upgrade process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:install\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to MoonShine OffCanvas Toggler PHP\nDESCRIPTION: Illustrates using the `togglerAttributes()` method to add custom attributes, such as a CSS class, to the button or element that toggles the visibility of the OffCanvas.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make('Title', 'Content...', 'Show Panel')\n    ->togglerAttributes([\n        'class' => 'mt-2'\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Using Custom Callback for Display in BelongsToMany\nDESCRIPTION: Provides a closure to generate custom display text for each related item, enabling complex formatting of relation values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make(\n    'Categories',\n    'categories',\n    fn($item) => \"$item->id. $item->title\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Assets when Creating Component in MoonShine\nDESCRIPTION: Example showing how to add assets when creating a custom Component in MoonShine by overriding the assets method. This defines assets needed by the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class MyComponent extends MoonShineComponent\n{\n    /**\n     * @return list<AssetElementContract>\n     */\n    protected function assets(): array\n    {\n        return [\n            Js::make('/js/custom.js'),\n            Css::make('/css/styles.css')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Body Component Instance in MoonShine Using PHP\nDESCRIPTION: Defines a static make method to create an instance of the Body layout component with an optional iterable array of child components. This method allows developers to programmatically build the structure of the HTML body tag by passing an array of components that will be rendered inside the body. The only parameter is $components, which defaults to an empty array. The output is an instance of the Body component configured with the given children.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/body.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Including CSS Files with MoonShine AssetManager (PHP)\nDESCRIPTION: Illustrates how to include external CSS files using `MoonShine\\AssetManager\\Css::make()`. Covers basic usage, deferred loading via `defer()`, and adding custom HTML attributes like `media` using `customAttributes()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\Css;\n\n// Basic inclusion\nCss::make('/css/styles.css');\n\n// With deferred loading\nCss::make('/css/styles.css')->defer();\n\n// With attributes\nCss::make('/css/styles.css')->customAttributes([\n    'media' => 'print'\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Route with Parameters and Middleware in Laravel\nDESCRIPTION: This code snippet illustrates how to define a standard route in Laravel with route parameters and middleware specific to the MoonShine framework. It sets up a GET route to a custom controller, incorporating the `resourceUri` and `pageUri` parameters and applying `moonshine` and `Authenticate` middleware to ensure authorization. The purpose of the route is to provide a standard way to access pages within the admin panel with security.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/routes.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nRoute::get('/admin/resource/{resourceUri}/{pageUri}', CustomController::class)\n    ->middleware(['moonshine', \\MoonShine\\Laravel\\Http\\Middleware\\Authenticate::class])\n    ->name('moonshine.name');\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: MoonShineServiceProvider Boot Method\nDESCRIPTION: This is an example of a `boot` method in the `MoonShineServiceProvider` class. It shows how to configure MoonShine using a programmatic approach. The `boot` method utilizes the `MoonShineConfigurator` to set various parameters such as title, logo, middleware, routes, authentication, and localization. This method overrides settings in the `moonshine.php` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n    ): void\n    {\n        $config\n            ->title('My Application')\n            ->logo('/assets/logo.png')\n            ->logo('/assets/logo_small.png', true)\n            ->useMigrations()\n            ->useNotifications()\n            ->useDatabaseNotifications()\n            ->useProfile()\n            ->dir('app/MoonShine', 'App\\MoonShine')\n            ->prefixes('admin', 'page', 'resource')\n            ->homeRoute('moonshine.index')\n            ->notFoundException(MoonShineNotFoundException::class)\n            ->middleware([\n                // ...\n            ])\n            ->disk('public')\n            ->cacheDriver('redis')\n            ->authEnable()\n            ->guard('moonshine')\n            ->authMiddleware(Authenticate::class)\n            ->authPipelines([])\n            ->authorizationRules(\n                function(ResourceContract $ctx, mixed $user, Ability $ability, mixed $data): bool {\n                    return true;\n                }\n            )\n            ->layout(\\App\\MoonShine\\Layouts\\CustomLayout::class)\n            ->locale('ru')\n            ->locales(['en', 'ru']);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasOneThrough Relationship Field in PHP using MoonShine\nDESCRIPTION: Example of creating a HasOneThrough field for a 'Car owner' relationship. This code defines a field that works with Laravel's HasOneThrough relationship, using the OwnerResource class for displaying and managing the related resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one-through.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasOneThrough;\n\nHasOneThrough::make(\n    'Car owner',\n    'carOwner',\n    resource: OwnerResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Remove Button in RelationRepeater\nDESCRIPTION: Enables modification of the remove button's appearance via the `modifyRemoveButton()` method, allowing developers to assign custom attributes like CSS classes for better UI control.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\n\nRelationRepeater::make('Comments', 'comments')\n    ->modifyRemoveButton(\n        fn(ActionButton $button) => $button\n            ->customAttributes([\n                'class' => 'btn-secondary'\n            ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing Actions Before Page Rendering with prepareBeforeRender() in PHP\nDESCRIPTION: Illustrates overriding the `prepareBeforeRender()` method in a `Page` class. This method is executed just before the page is rendered, allowing for final preparations or checks, such as authorization logic (e.g., aborting with 403 based on user role). It's crucial to call `parent::prepareBeforeRender()` if extending.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected function prepareBeforeRender(): void\n    {\n        parent::prepareBeforeRender();\n\n        if (auth()->user()->moonshine_user_role_id !== MoonshineUserRole::DEFAULT_ROLE_ID) {\n            abort(403);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Files Component (PHP Class) - PHP\nDESCRIPTION: This snippet demonstrates how to instantiate the `Files` component within a PHP class context, likely for use in a MoonShine Resource or Field. It shows passing an array of file paths. The download option defaults to true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/files.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Files;\n\nFiles::make([\n    '/images/thumb_1.jpg',\n    '/images/thumb_2.jpg',\n    '/images/thumb_3.jpg',\n]),\n```\n\n----------------------------------------\n\nTITLE: Instantiate Breadcrumbs Component PHP Class\nDESCRIPTION: This example demonstrates how to create an instance of the `Breadcrumbs` component using the `make` static method within a PHP class context (e.g., a MoonShine Page or Resource). It shows the structure of the `$items` array passed to the method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/breadcrumbs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Breadcrumbs;\n\nBreadcrumbs::make([\n    '/' => 'Home',\n    '/articles' => 'Articles',\n]),\n```\n\n----------------------------------------\n\nTITLE: Performing Actions Before Applying Values with onBeforeApply\nDESCRIPTION: The `onBeforeApply()` method is used to perform actions before the `apply()` method is executed. This is useful for data validation, transformations, or any other operations that should occur before the field's value is processed.  The closure receives the model, the value, and field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(mixed, mixed, FieldContract): static  $onBeforeApply\n */\nonBeforeApply(Closure $onBeforeApply)\n```\n\n----------------------------------------\n\nTITLE: Customizing RelationRepeater Fields\nDESCRIPTION: This snippet shows how to customize the fields displayed within the RelationRepeater field.  Instead of using the default fields from the resource, it defines a specific set of fields: ID, Name (Text), and Value (Text).  It's crucial to include the ID field for proper record management.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nRelationRepeater::make('Characteristics', 'characteristics')\n    ->fields([\n        ID::make(),\n        Text::make('Name', 'name'),\n        Text::make('Value', 'value'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Example SDUI Response Without States (JSON)\nDESCRIPTION: This is an example of a JSON response from the MoonShine framework, that includes only the components without states. The request used the  X-MS-Without-States header. This allows the server to provide a lighter version of the UI structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/sdui.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"Dashboard\",\n  \"components\": [\n    {\n      \"type\": \"Card\",\n      \"components\": [\n        {\n          \"type\": \"Heading\",\n          \"attributes\": {\n            \"class\": [\"text-2xl\", \"font-bold\"],\n            \"id\": \"dashboard-heading\"\n          }\n        },\n        {\n          \"type\": \"Text\",\n          \"attributes\": {\n            \"class\": [\"mt-2\", \"text-gray-600\"]\n          }\n        }\n      ],\n      \"attributes\": {\n        \"class\": [\"bg-white\", \"shadow\", \"rounded-lg\"],\n        \"data-card-id\": \"dashboard-overview\"\n      }\n    }\n  ],\n  \"attributes\": {\n    \"class\": [\"container\", \"mx-auto\", \"py-6\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Field in Blade\nDESCRIPTION: Shows how to render the Image field within a Blade template using the MoonShine form component. The `:imageable=\"true\"` attribute is crucial for enabling the image preview feature when using the generic file component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/image.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.file\n    :imageable=\"true\"\n    name=\"thumbnail\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Socialite Drivers\nDESCRIPTION: This snippet shows how to set available drivers and image for socialite buttons in `config/moonshine-socialite.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'drivers' => [\n        'github' => '/images/github.png',\n        'facebook' => '/images/facebook.svg',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering a Page Component Dynamically in ServiceProvider (PHP)\nDESCRIPTION: Demonstrates the dynamic registration of additional UI components on a page via the pushComponent static method. Requires ProfilePage and MyPackageComponent to be defined, and MyPackageComponent::make() constructs the component instance. Designed for extending admin page UIs at runtime.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(): void\n{\n    ProfilePage::pushComponent(\n        fn() => MyPackageComponent::make()\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Menu Items/Groups via Icon Method in MoonShine PHP\nDESCRIPTION: Explains how to add icons using the fluent `icon()` method on `MenuItem` or `MenuGroup` instances. It supports standard icon names, custom HTML/SVG icons using the `custom: true` parameter, and specifying a path for Blade icon templates.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('System', [\n                MenuItem::make('Admins', MoonShineUserResource::class)\n                    ->icon('users'),\n                MenuItem::make('Roles', MoonShineUserRoleResource::class)\n                    ->icon(svg('path-to-icon-pack')->toHtml(), custom: true),\n            ])\n                ->icon('cog', path: 'icons')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Routing Prefix in MoonShineServiceProvider\nDESCRIPTION: This snippet is about setting prefixes using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$config->prefixes('admin', 'page', 'resource');\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to the Detail Page - MoonShine - PHP\nDESCRIPTION: Shows how to add a custom button to the resource detail view page by overriding the `detailButtons()` method. This snippet adds an `ActionButton` labeled 'Link' that acts as a hyperlink, navigating to the '/endpoint' URL when clicked. It requires the `MoonShine\\UI\\Components\\ActionButton` and `MoonShine\\Support\\ListOf` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function detailButtons(): ListOf\n{\n    return parent::detailButtons()\n        ->add(ActionButton::make('Link', '/endpoint'));\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Unique Slug Values in MoonShine - PHP\nDESCRIPTION: This snippet enforces the uniqueness of the slug field within the dataset by chaining the unique method to the Slug field definition. No parameters are needed. Requires dependency on MoonShine with unique constraint support at the database level. Ensures that each generated slug value is distinct; duplicate attempts will be rejected or auto-adjusted as per MoonShine's logic.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/slug.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->unique()\n```\n\n----------------------------------------\n\nTITLE: Creating a Heading component in PHP\nDESCRIPTION: The basic syntax for creating a Heading component using the make method. It accepts a label, heading level (1-6), and whether to use a div with class or an actual h tag.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/heading.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string $label = '',\n    ?int $h = null,\n    bool $asClass = true,\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting SDUI Structure Without Layout (GET)\nDESCRIPTION: This shows how to retrieve the SDUI structure without the layout by sending a GET request with the X-MS-Structure and X-MS-Without-Layout headers set to true. This could be utilized when only content changes need to be handled, or to reduce the amount of data transferred.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/sdui.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /admin/dashboard HTTP/1.1\nX-MS-Structure: true\nX-MS-Without-Layout: true\n```\n\n----------------------------------------\n\nTITLE: Generating Forgot Password Page with MoonShine - Shell\nDESCRIPTION: Executes the artisan command to scaffold a new MoonShine page class named ForgotPage. This relies on the Laravel framework with the MoonShine package installed. The command creates a template PHP class for custom logic and layout of a password reset request page. No parameters except the page name are required as input. Output is the generated PHP class for further customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page ForgotPage\n```\n\n----------------------------------------\n\nTITLE: Declaring Assets through the assets() Method\nDESCRIPTION: Demonstrates how to declare a set of assets in a custom component through the assets() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return list<AssetElementContract>\n */\nprotected function assets(): array\n{\n    return [\n        Js::make('/js/custom.js'),\n        Css::make('/css/styles.css'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to an Alert with the Blade Component\nDESCRIPTION: Shows how to add an icon to the `x-moonshine::alert` Blade component using the `icon` attribute. The value of the attribute should be the name of the desired icon (e.g., 'academic-cap').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::alert icon=\"academic-cap\">\n    Alert\n</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Index Page Response (PHP)\nDESCRIPTION: Example PHPUnit test method demonstrating how to assert a successful HTTP response (status code 2xx) when accessing the index page URL of a MoonShine resource. It assumes the test class has access to the resource instance via `$this->getResource()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function test_index_page_successful(): void\n{\n    $response = $this->get(\n        $this->getResource()->getIndexPageUrl()\n    )->assertSuccessful();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Boolean Indicator with MoonShine UI Component in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create boolean indicators using the MoonShine UI Boolean class. It requires the MoonShine\\UI\\Components\\Boolean namespace and supports passing explicit boolean true or false values to the static make method, which initializes the component. The output is a UI component representing the boolean state, typically rendered within a MoonShine interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/boolean.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Boolean;\\n\\nBoolean::make(true);\\nBoolean::make(false);\n```\n\n----------------------------------------\n\nTITLE: Overriding Displayed Column in Relation\nDESCRIPTION: Uses the 'formatted' parameter to specify which attribute or expression to display for related items, overriding default behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make(\n    'Categories',\n    'categories',\n    formatted: 'name'\n)\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript on ActionButton Click in PHP\nDESCRIPTION: Illustrates using the `onClick()` method to specify JavaScript code that should execute when the button is clicked. The example shows a simple alert. The second argument, 'prevent', stops the default link navigation behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->onClick(fn() => \"alert('Пример')\", 'prevent')\n```\n\n----------------------------------------\n\nTITLE: Replacing FormPage with ArticleFormPage in the Resource\nDESCRIPTION: Modifies the 'ArticleResource' class to replace the default 'FormPage' with the custom 'ArticleFormPage' in its pages configuration. This change activates the custom page layout when accessing the resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/tabs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function pages(): array\n{\n    return [\n        IndexPage::class,\n        // FormPage::class -> ArticleFormPage::class\n        ArticleFormPage::class,\n        DetailPage::class\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Settings Form with PHP\nDESCRIPTION: This private function `form()` constructs a `FormBuilder` instance for managing setting fields. It sets up an asynchronous method named store for handling the form's submission.  It also includes the `fillCast()` method that casts the result of `getSetting()` which fetches model data. Finally, it defines the form fields (not shown here) that will be displayed and managed. The form is a central component for creating, updating, and presenting setting data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/dashboard-settings.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nprivate function form(): FormBuilder\n{\n    return FormBuilder::make()\n        ->asyncMethod('store')\n        ->fillCast($this->getSetting(), new ModelCaster(Setting::class))\n        ->fields([\n          // Fields here\n        ])\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine OffCanvas using Class PHP\nDESCRIPTION: Demonstrates creating an OffCanvas instance in PHP using the static `make` method within a class context. It shows how to include a FormBuilder component within the off-canvas content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\OffCanvas;\n\nOffCanvas::make(\n    'Confirm',\n    static fn() => FormBuilder::make(route('password.confirm'))\n        ->async()\n        ->fields([\n            Password::make('Password')->eye(),\n        ])\n        ->submit('Confirm'),\n    'Show Panel'\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying a Raw Value (PHP)\nDESCRIPTION: This snippet demonstrates how to use the `modifyRawValue()` method to modify the raw value of a field. The Closure should return the modified raw value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Enums\\StatusEnum;\nuse MoonShine\\UI\\Fields\\Enum;\n\nEnum::make('Status')\n    ->attach(StatusEnum::class)\n    ->modifyRawValue(fn(StatusEnum $raw, Order $data, Enum $ctx) => $raw->value))\n```\n\n----------------------------------------\n\nTITLE: Rendering MoonShine Files Component (Blade Template) - Blade\nDESCRIPTION: This snippet shows how to render the MoonShine Files component directly within a Blade template using a Blade component tag. It passes the file paths and explicitly sets the download option to false using component attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/files.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::files\n    :files=\"[\n        '/images/thumb_1.jpg',\n        '/images/thumb_2.jpg',\n        '/images/thumb_3.jpg',\n    ]\"\n    :download=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding onChange Logic with Method (PHP)\nDESCRIPTION: This snippet shows how to add logic that triggers when a field's value changes, using `onChangeMethod()`. It allows asynchronous calling of a resource or page method. It takes the method name and an optional array of parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nSwitcher::make('Active')\n    ->onChangeMethod('someMethod')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\MoonShineRequest;\n\npublic function someMethod(MoonShineRequest $request): void\n{\n    // Logic\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying HasMany Field Inside Main Form in PHP\nDESCRIPTION: Shows how to change the default behavior and display the HasMany field inside the main form instead of outside it.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments')->disableOutside()\n```\n\n----------------------------------------\n\nTITLE: Adding Inline CSS with MoonShine AssetManager (PHP)\nDESCRIPTION: Demonstrates embedding inline CSS styles directly into the HTML head using `MoonShine\\AssetManager\\InlineCss::make()`. Suitable for small, specific style overrides provided via a HEREDOC string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\InlineCss;\n\nInlineCss::make(<<<'CSS'\n    .custom-class {\n        color: red;\n    }\nCSS);\n```\n\n----------------------------------------\n\nTITLE: Cast TableBuilder Data to Model PHP\nDESCRIPTION: Applies a TypeCaster (ModelCaster) to the table data, casting items to a specified model class (User). This allows fields to work with model-like objects rather than just primitive types.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\TypeCasts\\ModelCaster;\n\nTableBuilder::make()\n    ->cast(new ModelCaster(User::class))\n```\n\n----------------------------------------\n\nTITLE: Creating BelongsTo Field - Inferring Relation Name\nDESCRIPTION: This snippet demonstrates the creation of a `BelongsTo` field where the relationship name is automatically determined from the label. If you do not specify the `$relationName` parameter, the system attempts to derive it by applying camelCase conversion to the label. This simplifies field definition when the relationship name can be inferred.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('User')\n```\n\n----------------------------------------\n\nTITLE: FieldsGroup Example - PHP\nDESCRIPTION: This example shows how to use the `FieldsGroup::make()` method to create a FieldsGroup and populate it with `Text` and `Email` fields.  It demonstrates the core usage of the FieldsGroup for organizing multiple fields.  The `use MoonShine\\UI\\Components\\FieldsGroup;` statement is required to use this class.  Dependencies include FieldContract, Text, and Email classes within MoonShine framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\FieldsGroup;\n\nFieldsGroup::make([\n    Text::make('Title'),\n    Email::make('Email'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining MorphToMany Relationship Field in Laravel with PHP\nDESCRIPTION: This PHP snippet demonstrates creating a MorphToMany relationship field in Laravel via the MoonShine package. It requires the MorphToMany field class and accepts three parameters: the display name ('Categories'), the database relation name ('categories'), and a resource class ('CategoryResource::class') representing the related model. This setup enables polymorphic many-to-many relations typical in Laravel's Eloquent ORM, useful for categorizing models across multiple types.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/morph-to-many.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphToMany;\n\nMorphToMany::make(\n    'Categories',\n    'categories',\n    resource: CategoryResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal Toggle Event with Native JavaScript\nDESCRIPTION: Illustrates dispatching a custom event in raw JavaScript that opens a MoonShine modal by targeting its unique named event. Event listeners use 'modal_toggled:my-modal' to identify and trigger the modal. No external dependencies beyond DOMContentLoaded and standard browser API.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    this.dispatchEvent(new CustomEvent(\"modal_toggled:my-modal\"))\n})\n```\n\n----------------------------------------\n\nTITLE: Creating ActionButton Basic Usage PHP\nDESCRIPTION: Demonstrates the basic instantiation of an ActionButton using the make method. It shows how to create a button with a static text label and a static URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\n\nActionButton::make(\n    'Button Label',\n    'https://moonshine-laravel.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping Menu Items PHP\nDESCRIPTION: This snippet demonstrates the use of the `Group` attribute to group menu items based on a specified name. You can also define an icon and indicate whether the group name should be translatable. Dependencies: MoonShine framework. Input:  Group name, icon and if the name needs to be translatable or not. Output:  Menu items will be grouped by this name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:1]\nuse MoonShine\\MenuManager\\Attributes\\Group;\n\n#[Group('moonshine::ui.profile', 'users', translatable: true)]\nclass ProfilePage extends Page {}\n```\n\n----------------------------------------\n\nTITLE: Laravel Config Update (if < 11)\nDESCRIPTION: This instruction guides the user to remove the MoonShine service provider from the Laravel configuration file (`config/app.php`) if the Laravel version is less than 11.  This is required to prevent conflicts and ensure proper registration after the upgrade. The warning message states that the service provider will be automatically added upon running `moonshine:install`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Basic CardsBuilder Usage with Data and Fields in PHP\nDESCRIPTION: Demonstrates basic usage of CardsBuilder with manual data array and field definitions for ID and Text fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    [\n        ['id' => 1, 'title' => 'Заголовок 1'],\n        ['id' => 2, 'title' => 'Заголовок 2'],\n    ],\n    [\n        ID::make(),\n        Text::make('title')\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating the Body Component Class in PHP\nDESCRIPTION: Illustrates importing the Body layout component class from the MoonShine UI namespace and creating an instance using the static make method with an array of layout components. This snippet is useful for object-oriented usage scenarios when composing the page layout programmatically. It requires the appropriate MoonShine UI package installed and loaded via an autoloader compliant with PSR-4.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/body.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Body;\n\nBody::make([\n    // ...\n])\n```\n\n----------------------------------------\n\nTITLE: Registering MoonShine Resources Manually - MoonShineServiceProvider PHP\nDESCRIPTION: This PHP provider class demonstrates manual registration of MoonShine resources and pages using the boot method in the MoonShineServiceProvider. Dependencies include ServiceProvider base class, MoonShine resource classes, and Contract interfaces. The '$core->resources' and '$core->pages' methods setup resource and page registrations respectively. Parameters are MoonShine resource class names and page array merging via '$config->getPages()'. Outputs a configured set of admin resources for the MoonShine panel. Requires proper class imports and resource definitions beforehand.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Providers;\n\nuse App\\MoonShine\\Resources\\ArticleResource;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n    ): void\n    {\n        $core\n            ->resources([\n                MoonShineUserResource::class,\n                MoonShineUserRoleResource::class,\n                ArticleResource::class,\n                // ...\n            ])\n            ->pages([\n                ...$config->getPages(),\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Color Instance with PHP Class\nDESCRIPTION: Illustrates creating a Color component instance using the PHP class. It utilizes the ColorEnum for setting the color and requires the MoonShine UI components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/color.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\Color as ColorEnum;\nuse MoonShine\\UI\\Components\\Color;\n\nColor::make(ColorEnum::PURPLE)\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Forms and Error Bags with FormBuilder and FormRequest in PHP\nDESCRIPTION: This snippet outlines the pattern for handling multiple forms on a page, including setting unique names for each form using the name method and ensuring FormRequest classes have matching errorBag properties. This practice isolates validation states and error messages to their respective forms. It depends on Laravel's FormBuilder, FormRequest, and proper routing setup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make(route('multiple-forms.one'))\n    ->name('formOne'),\n\nFormBuilder::make(route('multiple-forms.two'))\n    ->name('formTwo'),\n\nFormBuilder::make(route('multiple-forms.three'))\n    ->name('formThree')\n\nclass FormOneFormRequest extends FormRequest\n{\n    protected $errorBag = 'formOne';\n\n    // ...\n}\n\nclass FormTwoFormRequest extends FormRequest\n{\n    protected $errorBag = 'formTwo';\n\n    // ...\n}\n\nclass FormThreeFormRequest extends FormRequest\n{\n    protected $errorBag = 'formThree';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Locales Blade Component\nDESCRIPTION: This Blade snippet shows how to include the Locales component within a Blade view using a custom Blade component tag. It renders the locale switcher button in the template, leveraging the component's built-in view layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/locales.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout.locales/>\n```\n\n----------------------------------------\n\nTITLE: When Component Constructor Signature in PHP\nDESCRIPTION: The make method signature for the When component showing its parameters: condition closure, components closure to render when the condition is true, and an optional default closure for when the condition is false.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/when.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure $condition,\n    Closure $components,\n    ?Closure $default = null\n)\n```\n\n----------------------------------------\n\nTITLE: ResetPasswordFormRequest Validation Rules\nDESCRIPTION: This form request class defines the validation rules for the reset password form. It requires a token, email, password, and password confirmation. The password must be confirmed and meet the default password rules. The `authorize` method checks if the user is a guest.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Validation\\Rules\\Password as PasswordRules;\n\nclass ResetPasswordFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'token' => 'required',\n            'email' => ['required', 'email'],\n            'password' => ['required', 'confirmed', PasswordRules::default()],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Outside Click Closing with Blade\nDESCRIPTION: This snippet demonstrates how to prevent closing the modal when clicking outside of it using the `closeOutside` attribute in the Blade component `<x-moonshine::modal>`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal :closeOutside=\"false\" title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine OffCanvas with make PHP\nDESCRIPTION: Defines the static method signature for creating an OffCanvas component instance. It shows the available parameters for setting the title, content, toggler, asynchronous URL, and components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n    Closure|string $title = '',\n    Closure|Renderable|string $content = '',\n    Closure|string $toggler = '',\n    Closure|string|null $asyncUrl = null,\n    iterable $components = [],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items in MoonShine PHP ServiceProvider\nDESCRIPTION: This PHP snippet shows how to interact with the `MenuManager` within the ServiceProvider's `boot` method. By injecting `MenuManagerContract`, you can add custom menu items, typically linking to package resources or pages.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nnamespace Author\\MoonShineMyPackage;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Contracts\\MenuManager\\MenuManagerContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\n\nclass MyPackageServiceProvider extends ServiceProvider\n{\n    /** @param MoonShine $core */\n    public function boot(\n        CoreContract $core,\n        MenuManagerContract $menu\n    ): void\n    {\n        $menu->add([\n            MenuItem::make('MyPackagePage', MyPackagePage::class)\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Async Mode for ActionButton PHP\nDESCRIPTION: Demonstrates the basic usage of the async() method to make an ActionButton trigger an asynchronous request. The button's URL defines the endpoint for the request.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label', '/endpoint')\n    ->async()\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items to Profile Component in PHP and Blade\nDESCRIPTION: Illustrates how to define a menu within the Profile component using two approaches: PHP class method chaining and Blade slots. The PHP snippet creates a menu array containing ActionButton instances specifying label, URL, and icon details, enabling programmatic menu generation. The Blade snippet shows blade component slots including custom before, after, and menu slots. The menu slot uses standard HTML lists and Moonshine link components to build a dropdown menu with navigation links. Both methods enable flexible extensions of the profile card's menu functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/profile.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nProfile::make()->menu([\n    ActionButton::make('Dashboard', '/admin')->icon('home-modern'),\n])\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.profile\n    route=\"/admin/profile\"\n    log-out-route=\"/logout\"\n    avatar=\"/vendor/moonshine/avatar.jpg\"\n    name-of-user=\"Admin\"\n    username=\"admin@getmoonshine.app\"\n>\n    <x-slot:before></x-slot:before>\n    <x-slot:after></x-slot:after>\n\n    <x-slot:menu>\n        <ul class=\"dropdown-menu\">\n            <li class=\"dropdown-menu-item p-2\">\n                <x-moonshine::link-native href=\"/admin/profile\">\n                    Profile\n                </x-moonshine::link-native>\n            </li>\n        </ul>\n    </x-slot:menu>\n</x-moonshine::layout.profile>\n```\n\n----------------------------------------\n\nTITLE: ShowWhen Select - PHP\nDESCRIPTION: This snippet uses the `showWhen` method to conditionally display `Select` elements based on the selection of another `Select`. The `setNameAttribute` is used to avoid form conflicts. It demonstrates how to show/hide fields based on the values of other fields. This approach duplicates the select elements, so the values need unique names.  Requires the Select component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/select.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Company', 'company')->options([\n    1 => 'Laravel',\n    2 => 'CutCode',\n    3 => 'Symfony',\n]),\n\nSelect::make('Dynamic value', 'dynamic_value')\n    ->setNameAttribute('dynamic_value_1')\n    ->showWhen('company', '1')\n    ->options([1 => 1, 2 => 2,]),\n\nSelect::make('Dynamic value', 'dynamic_value')\n    ->setNameAttribute('dynamic_value_2')\n    ->showWhen('company', '2')\n    ->options([3 => 3, 4 => 4,]),\n```\n\n----------------------------------------\n\nTITLE: Disabling Modal Windows for HasMany Field in PHP\nDESCRIPTION: Shows how to disable the default behavior of using modal windows for creating and editing records in HasMany field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->withoutModals()\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal with Blade Component Syntax (MoonShine, Blade)\nDESCRIPTION: Defines a modal dialog using the Blade component <x-moonshine::modal>. The slot 'outerHtml' is used for specifying the external trigger. The modal includes a title, arbitrary content, and a link button to open the modal. Requires Blade templating and MoonShine package.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Middleware in moonshine.php\nDESCRIPTION: This is how to set middleware in the `moonshine.php` file. It specifies middleware to be used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'middleware' => [\n    'web',\n    'auth',\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Defining ActionButton withConfirm Method Signature PHP\nDESCRIPTION: Documents the method signature for creating an ActionButton that requires user confirmation via a modal dialog. It includes parameters for the confirmation title, content, button text, optional form fields, HTTP method, and builder closures for the internal form and modal.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  ?Closure(FormBuilderContract $form, mixed $data): FormBuilderContract  $formBuilder\n * @param  ?Closure(Modal $modal, ActionButtonContract $ctx): Modal  $modalBuilder\n */\nwithConfirm(\n    Closure|string|null $title = null,\n    Closure|string|null $content = null,\n    Closure|string|null $button = null,\n    Closure|array|null $fields = null,\n    HttpMethod $method = HttpMethod::POST,\n    ?Closure $formBuilder = null,\n    ?Closure $modalBuilder = null,\n    Closure|string|null $name = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Updates with Fragments and Selectors (PHP)\nDESCRIPTION: This snippet shows how to perform asynchronous updates using selectors from several fragments. It creates ActionButtons that trigger an asynchronous request to update specific selectors with content from named fragments. The example leverages Fragment components to define the content that will be loaded into the selectors, enabling modular and dynamic content updates.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/multiple-fragments-selectors.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Fragments', $this->getRouter()->getEndpoints()->toPage($this, extra: [\n    'fragment' => [\n        '.selector1' => '_content1',\n        '.selector2' => '_content2',\n    ]\n]))->async(selector: [\n    '.selector1',\n    '.selector2',\n]),\n\nDiv::make([])->class('selector1'),\nDiv::make([])->class('selector2'),\n\nFragment::make([\n    time(),\n])->name('_content1'),\n\nFragment::make([\n    time(),\n])->name('_content2'),\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Configuration (service provider)\nDESCRIPTION: This snippet shows how to add the custom middleware using `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$config->addMiddleware([\n    \\App\\Http\\Middleware\\CheckAdminRole::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Menu Items via Make Parameter in MoonShine PHP\nDESCRIPTION: Shows how to assign an icon to a menu item by passing the icon name as the third parameter to the `MenuItem::make()` method. The icon name typically corresponds to a registered icon alias in the MoonShine system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Admins', MoonShineUserResource::class, 'users'),\n            MenuItem::make('Roles', MoonShineUserRoleResource::class, 'hashtag')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Footer Component with Class and Blade\nDESCRIPTION: Examples showing how to implement the Footer component using both PHP class syntax and Blade template syntax. The Blade example includes copyright and menu parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/footer.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Footer;\n\nFooter::make([\n    // ...\n]),\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.footer\n    copyright=\"Your brand\"\n    :menu=\"['https://moonshine-laravel.com/docs' => 'Documentation']\"\n>\nAny content\n</x-moonshine::layout.footer>\n```\n\n----------------------------------------\n\nTITLE: Enable TableBuilder Column Selection PHP\nDESCRIPTION: Adds a control allowing users to select which columns are displayed in the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n->columnSelection()\n```\n\n----------------------------------------\n\nTITLE: Generating ResetPasswordPage with MoonShine Artisan (Shell)\nDESCRIPTION: Uses the PHP Artisan command-line tool with the MoonShine extension to scaffold a new page class named 'ResetPasswordPage'. This command creates the basic structure for a MoonShine page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page ResetPasswordPage\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine JWT Middleware and Authentication Pipeline in PHP\nDESCRIPTION: Configures necessary middleware and authentication pipeline for JWT token validation within the MoonShine configuration file. This snippet imports the JWT middleware classes, sets empty HTTP middleware array, defines the authentication middleware, and sets the JWT authentication pipeline class. Required to ensure all API requests are authenticated using JWT tokens.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\JWT\\JWTAuthPipe;\\nuse MoonShine\\JWT\\Http\\Middleware\\AuthenticateApi;\\n\\nreturn [\\n    'middleware' => [\\n        // empty\\n    ],\\n    'auth' => [\\n        // ...\\n        'middleware' => AuthenticateApi::class,\\n        'pipelines' => [\\n            JWTAuthPipe::class\\n        ],\\n    ]\\n    // ...\\n];\n```\n\n----------------------------------------\n\nTITLE: Registering a Laravel ServiceProvider in Composer Autoload (JSON)\nDESCRIPTION: Lists the package's ServiceProvider in composer.json under the 'extra.laravel.providers' key for automatic framework discovery. Essential for Laravel to register services on boot, ensuring all custom boot logic is invoked on package install. Requires correct namespace and provider class declaration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Author\\\\MoonShineMyPackage\\\\MyPackageServiceProvider\"\n            ]\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Action Button Linking to Page MoonShine PHP\nDESCRIPTION: This snippet demonstrates how to add a custom action button to the index view of a MoonShine resource. The button, titled \"To custom page\", dynamically generates a URL for each resource item using the `getPageUrl` method, directing the user to a specified custom page (`PostPage::class`) while passing the resource item's primary key as a parameter. It relies on the `MoonShine\\UI\\Components\\ActionButton` and `MoonShine\\Support\\ListOf` classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\n/**\n * @throws Throwable\n */\npublic function indexButtons(): ListOf\n{\n    return parent::indexButtons()->add(\n        ActionButton::make('To custom page',\n            url: fn($model) => $this->getPageUrl(\n                PostPage::class, params: ['resourceItem' => $model->getKey()]\n            ),\n        ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Drag-and-Drop Sorting in MoonShine Json Field Table in PHP\nDESCRIPTION: Shows disabling the default drag-and-drop sorting functionality on Json field tables by chaining reorderable(false). Can also pass a custom URL for backend reordering if necessary using TableBuilder. No additional dependencies.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n->reorderable(false)\n```\n\n----------------------------------------\n\nTITLE: Initializing RelationRepeater Field in PHP\nDESCRIPTION: Defines the constructor method for creating a RelationRepeater instance, specifying the label, relation name, formatting closure, and related resource. The snippet demonstrates how to instantiate the field with parameters like relation name and resource class, enabling use in forms for managing related records.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n    string|Closure $label,\n    ?string $relationName = null,\n    string|Closure|null $formatted = null,\n    ModelResource|string|null $resource = null,\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\n\nRelationRepeater::make(\n    'Comments',\n    'comments',\n    resource: CommentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to ActionButton PHP\nDESCRIPTION: Illustrates how to add an icon to the ActionButton using the icon() method. The string argument specifies the name of the icon to display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->icon('pencil')\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Button to MoonShine Date Field (PHP)\nDESCRIPTION: Adds a copy-to-clipboard button next to the Date field in the preview mode using the `copy()` method. Clicking this button copies the field's currently displayed value to the user's clipboard.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->copy()\n```\n\n----------------------------------------\n\nTITLE: Displaying HasMany Field in Tabs Mode in PHP\nDESCRIPTION: Method to change the display of HasMany fields to use tabs. By default, relationship fields are displayed at the bottom separately from the form, but tabMode organizes them into tabs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->tabMode(),\nHasMany::make('Covers', 'covers', resource: CoverResource::class)\n    ->tabMode()\n```\n\n----------------------------------------\n\nTITLE: Example Server-Driven UI JSON Response Without States\nDESCRIPTION: This JSON snippet is an example response from the MoonShine SDUI server when the 'X-MS-Without-States: true' header is set. It shows the UI component hierarchy with types and HTML attributes intact but without any state properties. Components such as \"Heading\" and \"Text\" omit their dynamic content, returning a minimal representation focused solely on layout and styling details. This format allows clients to understand the UI structure while ignoring variable state data. Inputs and outputs are consistent with the standard SDUI response but lacking state details.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/sdui.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"Dashboard\",\n  \"components\": [\n    {\n      \"type\": \"Card\",\n      \"components\": [\n        {\n          \"type\": \"Heading\",\n          \"attributes\": {\n            \"class\": [\"text-2xl\", \"font-bold\"],\n            \"id\": \"dashboard-heading\"\n          }\n        },\n        {\n          \"type\": \"Text\",\n          \"attributes\": {\n            \"class\": [\"mt-2\", \"text-gray-600\"]\n          }\n        }\n      ],\n      \"attributes\": {\n        \"class\": [\"bg-white\", \"shadow\", \"rounded-lg\"],\n        \"data-card-id\": \"dashboard-overview\"\n      }\n    }\n  ],\n  \"attributes\": {\n    \"class\": [\"container\", \"mx-auto\", \"py-6\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using disableOutside() to Embed HasOne in Main Form\nDESCRIPTION: Integrates the HasOne relationship directly into the main resource form at a specified location, especially useful when using modalMode(). It disables outside display of the relationship, embedding it within the parent form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', 'comment', resource: CommentResource::class)\n    ->disableOutside(),\n```\n\n----------------------------------------\n\nTITLE: Persisting Table State in URL with pushState() in MoonShine TableBuilder PHP\nDESCRIPTION: The `pushState()` method configures the table to save its state (e.g., filters, sorting, pagination) to the browser URL query parameters. This allows the table state to persist during navigation or page reloads, facilitating sharable links with specified table configurations.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n->pushState()\n```\n\n----------------------------------------\n\nTITLE: Setting Directory for File Field in PHP\nDESCRIPTION: This snippet demonstrates how to specify the directory within the selected disk to store uploaded files using the `dir()` method.  It takes a string representing the directory path relative to the disk's root. The example sets the directory to 'docs'. The MoonShine framework is a dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->dir('docs')\n```\n\n----------------------------------------\n\nTITLE: Cloning Demo Project Shell\nDESCRIPTION: This shell command clones the demo project repository from GitHub. It uses the `git clone` command with the SSH URL of the repository and specifies the current directory (`.`) as the destination. This downloads the project files to the current working directory.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/contribution.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:moonshine-software/demo-project.git .\n```\n\n----------------------------------------\n\nTITLE: Publishing JWT Configuration in Laravel via Shell\nDESCRIPTION: Publishes the JWT package configuration files in a Laravel project to allow customization and enable JWT service provider integration. This shell command must be executed after installing the JWT package.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"MoonShine\\JWT\\Providers\\JWTServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Defining the `make` factory method for Components in PHP\nDESCRIPTION: Signature of the static `make` factory method for the `MoonShine\\UI\\Components\\Components` class. This method initializes a `Components` instance, accepting an optional iterable `$components` argument (typically an array) containing the components to be grouped.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/components.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine Notifications in config file\nDESCRIPTION: Configuration options for enabling notifications and database notifications in the MoonShine config file. These settings control whether the notification system is active.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/notifications.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'use_notifications' => true,\n'use_database_notifications' => true,\n```\n\n----------------------------------------\n\nTITLE: Displaying Compact Heroicon in PHP\nDESCRIPTION: This code snippet displays a compact Heroicon using the `icon()` method, indicated by a prefix.  The icon name starts with 'c', denoting a compact icon. The outcome is the rendering of the compact icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n->icon('c.academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Generate Namespace Imports\nDESCRIPTION: This shell command finds all files under the `app/MoonShine/Resources` directory, modifies the file paths to include `use App/`, corrects slashes, and generates namespace import statements. The output should be used at the top of the PHP files in `app/MoonShine/Resources` to import the necessary classes and namespaces, simplifying the code and reducing naming conflicts.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfind app/MoonShine/Resources -type f | sed \"s/app/use App/\" | sed \"s|/|\\\\|g\" | sed \"s/.php/;/\" | sort\n```\n\n----------------------------------------\n\nTITLE: Filling an ActionGroup with Data in PHP\nDESCRIPTION: This snippet demonstrates the use of the `fill()` method to populate an `ActionGroup` with data.  It requires an initialized `ActionGroup` and a `DataWrapperContract` instance as input.  The `fill()` method modifies the state of the `ActionGroup` by applying the data.  The specific type of data will be based on the needs of the implementation using `DataWrapperContract`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-group.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->fill($data)\n```\n\n----------------------------------------\n\nTITLE: Defining Flash Component Parameters MoonShine PHP\nDESCRIPTION: This snippet defines the signature and parameters for the `make` method of the MoonShine Flash component. It details the available options for configuring the notification's behavior and appearance. Dependencies: MoonShine\\UI\\Components\\Layout\\Flash, MoonShine\\Support\\Enums\\FlashType.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flash.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    string $key = 'alert',\n    string|FlashType $type = FlashType::INFO,\n    bool $withToast = true,\n    bool $removable = true\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueMetric in Components Method\nDESCRIPTION: Example showing how to include a ValueMetric within a components method, displaying the count of completed orders.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Metrics\\Wrapped\\ValueMetric;\n\n// ...\n\nprotected function components(): iterable\n{\n    return [\n        ValueMetric::make('Completed orders')\n            ->value(fn(): int => Order::completed()->count())\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Mode in PHP\nDESCRIPTION: The `preview()` method disables the display of buttons and sorting for the table.  This gives a read-only view of the table data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n->preview()\n```\n\n----------------------------------------\n\nTITLE: Customizing the edit button using changeEditButton()\nDESCRIPTION: This code snippet demonstrates how to customize the edit button for a `HasMany` field using the `changeEditButton()` method. It allows overriding the default edit button with a custom one that can perform a custom action, like redirecting to a different URL. Imports dependencies including `HasMany` and `ActionButton`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->changeEditButton(\n        ActionButton::make(\n            'Edit',\n            fn(Comment $comment) => app(CommentResource::class)->formPageUrl($comment)\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Layout Component in Blade\nDESCRIPTION: Shows how to use the `<x-moonshine::layout>` Blade component to create a layout within a Blade template. This component serves as a container for other content and components. It simplifies the process of creating structured layouts within MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/layout.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout>\n    Any content\n</x-moonshine::layout>\n```\n\n----------------------------------------\n\nTITLE: Modifying Query Builder in MoonShine Resource (PHP)\nDESCRIPTION: This snippet demonstrates how to modify the default query builder for a MoonShine resource. It overrides the `modifyQueryBuilder` method to add a `where` clause, filtering results based on an 'active' column. The method accepts a `Builder` instance and returns a modified `Builder` instance. This allows for global modifications to all resource queries.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/query.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function modifyQueryBuilder(Builder $builder): Builder\n    {\n        return $builder->where('active', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataCasterContract Interface (PHP)\nDESCRIPTION: This interface defines the contract for casting data in MoonShine. It includes methods for casting general data and paginated data, returning a DataWrapperContract or a PaginatorContract respectively.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/type-casts.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface DataCasterContract\n{\n    public function cast(mixed $data): DataWrapperContract;\n\n    public function paginatorCast(mixed $data): ?PaginatorContract;\n}\n```\n\n----------------------------------------\n\nTITLE: Using HiddenIds with ActionButton and FormBuilder in PHP\nDESCRIPTION: Illustrates a common use case for `HiddenIds` within an `ActionButton` configured for bulk actions. It shows how `HiddenIds::make()` is used inside a `FormBuilder` within the modal definition to capture the IDs from the specified list component (`$this->listComponentName()`). This setup enables sending the selected IDs when the modal form is submitted for mass processing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/hidden-ids.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\UI\\Components\\FlexibleRender;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\HiddenIds;\nuse MoonShine\\UI\\Components\\FormBuilder;\n\nActionButton::make('Active', route('moonshine.posts.mass-active', $this->uriKey()))\n    ->inModal(\n        'Active',\n        fn (): string => (string) FormBuilder::make(\n            route('moonshine.posts.mass-active', $this->uriKey()),\n            fields: [\n                HiddenIds::make($this->listComponentName()), // название компонента, из которого необходимо получить ID\n                FlexibleRender::make(__('moonshine::ui.confirm_message')),\n            ]\n        )\n        ->async()\n        ->submit('Active', ['class' => 'btn-secondary'])\n    )\n    ->bulk()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Page Layers in MoonShine (PHP)\nDESCRIPTION: This PHP code demonstrates overriding the `topLayer()`, `mainLayer()`, and `bottomLayer()` methods within a custom page class (extending `IndexPage`) to prepend custom components (like `Heading`) to each respective layer. It merges custom components with the parent's layer components using the spread operator (`...`). Requires `MoonShine\\UI\\Components\\Heading` and inherits from `MoonShine\\Laravel\\Pages\\Crud\\IndexPage`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Laravel\\Pages\\Crud\\IndexPage;\nuse MoonShine\\UI\\Components\\Heading;\n\nclass PostIndexPage extends IndexPage\n{\n    // ...\n\n    protected function topLayer(): array\n    {\n        return [\n            Heading::make('Custom top'),\n            ...parent::topLayer()\n        ];\n    }\n\n    protected function mainLayer(): array\n    {\n        return [\n            Heading::make('Custom main'),\n            ...parent::mainLayer()\n        ];\n    }\n\n    protected function bottomLayer(): array\n    {\n        return [\n            Heading::make('Custom bottom'),\n            ...parent::bottomLayer()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vertical Display with title and value in PHP\nDESCRIPTION: This snippet shows how to display the table in vertical format using `vertical()`. The `title` and `value` parameters are used to customize column attributes in this format. The title param is for header column attributes and value is for value column attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n/** @param TableBuilder $component */\npublic function modifyDetailComponent(ComponentContract $component): ComponentContract\n{\n    return $component->vertical(\n        title: fn(FieldContract $field, Column $default, TableBuilder $ctx): ComponentContract => $default->columnSpan(2),\n        value: fn(FieldContract $field, Column $default, TableBuilder $ctx): ComponentContract => $default->columnSpan(10),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output: CSS Variables for Themes in HTML\nDESCRIPTION: Example HTML <style> block output generated by ColorManager's toHtml() method illustrating how RGB colors are converted into CSS variables for light and dark themes. This snippet is useful for applying color schemes directly in the browser using standard CSS custom properties, supporting theme switching by toggling the 'dark' class on the root element. No dependencies other than appropriate CSS handling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    :root {\n        --primary:120,67,233;\n        --secondary:236,65,118;\n        /* other light theme variables */\n    }\n    :root.dark {\n        /* dark theme variables */\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Removing Component Attributes in PHP\nDESCRIPTION: Defines the removeAttribute() method to delete a specified attribute from a component by name. Accepts a single string parameter identifying the attribute to remove, enabling dynamic cleanup or adjustment of component attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nremoveAttribute(string $name)\n\n$component->removeAttribute('data-id');\n```\n\n----------------------------------------\n\nTITLE: Menu Initialization with Array - PHP\nDESCRIPTION: This snippet shows how to initialize the Menu component using a primitive array.  Each array element represents a menu item and contains a 'label' for the display text and a 'url' for the link destination. This is an alternative way to define menu structures without relying on the `MenuItem` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/menu.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nMenu::make([\n    ['label' => 'Dashboard', 'url' => '/'],\n    ['label' => 'Section', 'url' => '/section'],\n])\n```\n\n----------------------------------------\n\nTITLE: Using relatedLink() for relationship link\nDESCRIPTION: This code snippet demonstrates the use of `relatedLink()` method. This allows the relationship to be displayed as a link that leads to the index page of the child resource, including the related records only.  It imports necessary classes, including the `HasMany` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink()\n```\n\n----------------------------------------\n\nTITLE: Adding Items to MenuGroup via setItems Method in MoonShine PHP\nDESCRIPTION: Shows an alternative way to add menu items to a group after the group is instantiated, using the `setItems()` method on a `MenuGroup` instance. This provides flexibility in defining group content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('System')->setItems([\n                MenuItem::make('Admins', MoonShineUserResource::class),\n                MenuItem::make('Roles', MoonShineUserRoleResource::class),\n            ])\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ArticleFormPage Class Extending FormPage in PHP\nDESCRIPTION: This snippet shows how to create a custom page class named 'ArticleFormPage' that inherits from the base 'FormPage'. This setup allows for tailored form behavior and UI customization specific to articles, especially for organizing relationship fields within tabs. Dependencies include the existing form page infrastructure and resource classes. The snippet highlights class inheritance and method overriding for page configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/tabs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass ArticleFormPage extends FormPage\n{\n    // Customizations for the article form page can be added here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Extensions for File Field in PHP\nDESCRIPTION: This PHP snippet showcases how to restrict the allowed file extensions using the `allowedExtensions()` method.  It accepts an array of strings representing allowed file extensions.  The example allows 'pdf', 'doc', and 'txt' files. MoonShine framework is used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->allowedExtensions(['pdf', 'doc', 'txt'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MoonShine Layout Template Using Artisan Command in Shell\nDESCRIPTION: This shell command is used to generate a new MoonShine layout template scaffold. It requires running it in the Laravel project environment with artisan. The command creates the necessary PHP files and boilerplate for a custom admin layout to be developed further. The command's expected side effect is scaffolding files under the MoonShine layout directory.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:layout\n```\n\n----------------------------------------\n\nTITLE: Adding Placeholder Text to Select Input\nDESCRIPTION: Sets a placeholder prompt for the select dropdown using 'placeholder()', improving usability especially when no selection is made.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Countries', 'countries')\n    ->nullable()\n    ->placeholder('Countries')\n```\n\n----------------------------------------\n\nTITLE: Initializing Assets Component in PHP\nDESCRIPTION: This snippet showcases how to instantiate the Assets component using PHP in the MoonShine framework. The Assets class is imported and its static method make() is called to create an instance, enabling inclusion of scripts and styles through AssetManager.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/assets.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\\\UI\\\\Components\\\\Layout\\\\Assets;\n\nAssets::make();\n```\n\n----------------------------------------\n\nTITLE: Updating Composer to MoonShine v3.0 using Shell\nDESCRIPTION: This shell command executes 'composer update' to fetch and update project dependencies as defined in composer.json, particularly to install the specified MoonShine v3.0 version. Prerequisites include Composer being installed on the system and the modified composer.json. The primary input is the project directory, and the output is updated vendor packages and lockfiles.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Initializing Link Component with MoonShine in PHP\nDESCRIPTION: This snippet demonstrates how to create a basic styled link using the MoonShine\\UI\\Components\\Link class in PHP. The make() method accepts two parameters: $href (the URL resource as a string or Closure) and $label (the display text for the link). The example imports the Link class and creates a link pointing to the MoonShine website labeled \"Moonshine\".\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/link.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Link;\n\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n```\n\n----------------------------------------\n\nTITLE: Handling Async Pivot Update Request in MoonShine\nDESCRIPTION: This PHP method handles the asynchronous request triggered by the `updateOnPreview` configuration. It receives the parent item ID, field name, and new value from the `MoonShineRequest`. It finds the parent model instance (`TournamentTeam`), extracts the pivot field name, and uses Eloquent's `updateExistingPivot` to update the specific pivot record. A success toast message is returned using `MoonShineJsonResponse`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/update-on-preview-pivot.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function updatePivot(MoonShineRequest $request): MoonShineJsonResponse\n{\n    $item = TournamentTeam::query()->findOrFail($request->get('parent'));\n\n    $column = (string) $request->str('field')->remove('pivot.');\n\n    $item->users()->updateExistingPivot($request->get('resourceItem'), [\n        $column => $request->get('value'),\n    ]);\n\n    return MoonShineJsonResponse::make()->toast('Success');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent BelongsTo Relationship in PHP\nDESCRIPTION: Defines the inverse of a one-to-many relationship (BelongsTo) in a Laravel Eloquent model. This method establishes that the current model belongs to another model, typically linking it via a foreign key.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/faq.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\n// In Post model\npublic function author(): BelongsTo\n{\n    return $this->belongsTo(Author::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Enum Display with toString Method in PHP\nDESCRIPTION: This snippet defines a PHP backed enum (StatusEnum) with three statuses and implements a toString() method to control how each enum value is displayed. No external dependencies beyond native PHP enums are required. The key parameter is the enum case; the method outputs a string representation for UI display. Use this to present user-friendly labels instead of raw enum values. Ensure that the enum is properly attached to the field as in the previous example.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/enum.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Enums;\n\nenum StatusEnum: string\n{\n    case NEW = 'new';\n    case DRAFT = 'draft';\n    case PUBLIC = 'public';\n\n    public function toString(): ?string\n    {\n        return match ($this) {\n            self::NEW => 'New',\n            self::DRAFT => 'Draft',\n            self::PUBLIC => 'Public',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration File Structure in PHP\nDESCRIPTION: This snippet shows the structure of the configuration file that would be generated by the Template field. It's a simple PHP file that returns an array of configuration values, which can be accessed through the config() function in a Laravel/PHP application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/change-config.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n  'var' => 'foo',\n  'bar' => 'test',\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ResetPasswordPage Structure and Components in PHP\nDESCRIPTION: Defines the `ResetPasswordPage` class, extending `MoonShine\\Laravel\\Pages\\Page`. It uses `FormLayout`, sets breadcrumbs, defines the title, and configures a `FormBuilder` for the password reset form. The form includes a hidden token field, a read-only email field (pre-filled from the request), and required fields for the new password and its confirmation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\FormLayout;\nuse Illuminate\\Contracts\\Routing\\UrlRoutable;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Divider;\nuse MoonShine\\UI\\Components\\Layout\\Flex;\nuse MoonShine\\UI\\Fields\\Hidden;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass ResetPasswordPage extends Page\n{\n    protected ?string $layout = FormLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'ForgotPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            FormBuilder::make()\n                ->class('authentication-form')\n                ->action(route('password.update'))\n                ->fields([\n                    Hidden::make('token')->setValue(request()->route('token')),\n\n                    Text::make('E-mail', 'email')\n                        ->setValue(request()->input('email'))\n                        ->required()\n                        ->readonly(),\n\n                    Password::make(__('Password'), 'password')\n                        ->required(),\n\n                    PasswordRepeat::make(__('Repeat password'), 'password_confirmation')\n                        ->required(),\n                ])->submit(__('Reset password'), [\n                    'class' => 'btn-primary btn-lg w-full',\n            ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ActionGroup Example in PHP\nDESCRIPTION: This snippet showcases the creation of an `ActionGroup` and initializing it with two `ActionButton` instances. It requires importing the `ActionGroup` class from the `MoonShine\\UI\\Components` namespace.  The output is an `ActionGroup` with the specified `ActionButton` elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-group.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionGroup;\n\nActionGroup::make([\n    ActionButton::make('Button 1'),\n    ActionButton::make('Button 2'),\n])\n```\n\n----------------------------------------\n\nTITLE: Blade template usage of Search component with placeholder\nDESCRIPTION: Incorporates the Search component into a Blade view using a Blade component tag, setting the placeholder text to 'Search...'. This facilitates easy placement of the search form within Blade templates for frontend rendering, fitting into layouts like header or sidebar.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/search.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout.search\n    placeholder=\"Search...\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Using creatable() method for modal creation in HasMany\nDESCRIPTION: This code shows how to enable the creation of new relation objects through a modal window using the `creatable()` method. The method provides a way to add new related records directly from the parent model's form. It imports classes needed to render the comments and the `HasMany` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Loading Asynchronous Content in PHP\nDESCRIPTION: This snippet shows how to load modal content asynchronously by specifying an `asyncUrl` during modal creation. It also demonstrates the use of `alwaysLoad` to ensure the content is reloaded every time the modal is opened.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Заголовок', '', ActionButton::make('Показать модальное окно', '#'), asyncUrl: '/endpoint'),\n```\n\nLANGUAGE: php\nCODE:\n```\nModal::make(...)\n        ->alwaysLoad(),\n```\n\n----------------------------------------\n\nTITLE: Creating ProgressBar Component with MoonShine in PHP\nDESCRIPTION: Defines the ProgressBar component using PHP with the make method, allowing customization of progress value, size, color, and radial styling. The parameters include $value (float|int) for the progress state, $size (string) for size control defaulting to 'sm', $color (string or Color class instance) for color customization, and $radial (boolean) to switch between linear and radial progress bars. This snippet requires the MoonShine UI package.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/progress-bar.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    float|int $value,\n    string $size = 'sm',\n    string|Color $color = '',\n    bool $radial = false,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Outside Click Close with Blade (MoonShine, Blade)\nDESCRIPTION: Demonstrates how to prevent closing the modal by clicking outside with the :closeOutside=\"false\" parameter. Works via the moonshine::modal Blade component and includes a trigger slot for opening the modal. MoonShine and Blade required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_20\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal :closeOutside=\"false\" title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing onLoad in Resource\nDESCRIPTION: The `onLoad()` method is used to execute code when the resource is loaded. This method allows to integrate with various aspects of the resource. Example provided to execute custom code when the resource is loaded.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function onLoad(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fieldset with Grouped Fields in PHP\nDESCRIPTION: This snippet demonstrates the creation of a simple Fieldset container that groups multiple form fields (Text and BelongsTo) in a PHP application using MoonShine. It involves importing necessary classes, and defining a Fieldset with a title and grouped fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/fieldset.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Fields\\BelongsTo;\nuse MoonShine\\UI\\Fields\\Fieldset;\nuse MoonShine\\UI\\Fields\\Text;\n\nFieldset::make('Title', [\n    Text::make('Title'),\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Filling FieldsGroup Example - PHP\nDESCRIPTION: This demonstrates how to use the `fill()` method on a `FieldsGroup` instance.  It assumes that `$fields` variable contains a FieldsGroup. The `$data` variable represents the data to populate the fields. It is a method call chain, which showcases how to populate fields with data from an external source.  No dependencies are directly included here, assuming `$fields` and `$data` are initialized elsewhere.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nFieldsGroup::make($fields)\n    ->fill($data)\n```\n\n----------------------------------------\n\nTITLE: Global Request Value Resolver with Example\nDESCRIPTION: This example demonstrates setting a global resolver for all form elements using `requestValueResolver()`.  It uses Laravel's `request()->input()` method to retrieve the value from the request, using the field's name (or a dot-separated name based on index) and the provided default value.  This ensures all fields respect this custom logic.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nFormElement::requestValueResolver(function (string|int|null $index, mixed $default, static $ctx): mixed {\n    return request()->input($ctx->getRequestNameDot($index), $default);\n})\n```\n\n----------------------------------------\n\nTITLE: Defining updateOnPreview Method PHP\nDESCRIPTION: Defines the signature for the `updateOnPreview` method, used to enable editing of the Select field directly in preview mode. It accepts optional parameters for asynchronous requests, related resources, execution conditions, and events.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nupdateOnPreview(\n    ?Closure $url = null,\n    ?ResourceContract $resource = null,\n    mixed $condition = null,\n    array $events = [],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Section Titles with Markdown HTML - HTML\nDESCRIPTION: Demonstrates how to specify a section title in documentation using Markdown syntax. The sample uses a single hash for a top-level heading. No dependencies are required. The heading is intended as the first, mandatory element on a documentation page, and the input string following '#' is rendered as the section title.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n# Title\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring MobileBar in PHP\nDESCRIPTION: Demonstrates how to instantiate the `MobileBar` component using the static `make` method, passing an array of layout components (Div, ThemeSwitcher, Burger, Menu, Profile). This example constructs a mobile bar layout with specific sections for logo, actions (theme switcher, burger), main menu, and a conditional profile section. CSS classes and dynamic attributes are applied for styling and behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/mobilebar.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\MobileBar;\n\nMobileBar::make([\n    Div::make([\n        Div::make([\n            $this->getLogoComponent(),\n        ])->class('menu-heading-logo'),\n\n        Div::make([\n            ThemeSwitcher::make(),\n\n            Div::make([\n                Burger::make(),\n            ])->class('menu-heading-burger'),\n        ])->class('menu-heading-actions'),\n    ])->class('menu-heading'),\n\n    Div::make([\n        Menu::make(),\n        When::make(\n            fn (): bool => $this->isAuthEnabled(),\n            static fn (): array => [Profile::make(withBorder: true)],\n        ),\n    ])->customAttributes([\n        'class' => 'menu',\n        ':class' => \"asideMenuOpen && '_is-opened'\",\n    ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Adding Thumbnail Images to Cards in PHP\nDESCRIPTION: Demonstrates setting thumbnail images for cards either from a column field or via a direct URL using a closure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    items: Article::paginate()\n)\n    ->fields([Text::make('Text')])\n    ->thumbnail('thumbnail')\n    // or by url\n    // ->thumbnail(fn() => 'https://example.com/image.png')\n```\n\n----------------------------------------\n\nTITLE: Making a query tag active by default using default() in PHP\nDESCRIPTION: Defines a query tag labeled 'All posts' and makes it active by default with the default() method. It allows setting initial active state based on custom conditions or always active, facilitating default filter selections in resource listings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/query-tags.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\QueryTags\\QueryTag;\n\nQueryTag::make(\n    'All posts',\n    fn(Builder $query) => $query\n)\n    ->default()\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Autoclose Behavior in PHP\nDESCRIPTION: This code snippet demonstrates how to control the autoclose behavior of a modal after a successful request, typically after submitting a form, using the `autoClose()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nModal::make(\n    'Демо модальное окно',\n    static fn() => FormBuilder::make(route('alert.post'))\n        ->fields([\n            Text::make('Текст'),\n        ])\n        ->submit('Отправить', ['class' => 'btn-primary'])\n        ->async(),\n    )\n    ->name('demo-modal')\n    ->autoClose(false),\n```\n\n----------------------------------------\n\nTITLE: Generating Profile Page with MoonShine - Shell\nDESCRIPTION: Uses the artisan command to create a skeleton MoonShine page named ProfilePage for user profile management. The command assumes MoonShine and Laravel are in use and outputs a PHP file for further elaboration. No arguments are needed besides the page name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page ProfilePage\n```\n\n----------------------------------------\n\nTITLE: Creating Locales Instance with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to instantiate the Locales component using the static make() method. It is used for programmatically creating a Locales object within PHP code, enabling locale switching functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/locales.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nLocales::make()\n```\n\n----------------------------------------\n\nTITLE: Defining TopBar with Menu via MoonShine Blade Components\nDESCRIPTION: This Blade snippet shows how to define a TopBar containing an embedded menu using MoonShine's Blade components in Laravel views. The x-moonshine::layout.top-bar tag wraps a x-moonshine::layout.menu, which accepts an array of elements. Each element should contain label and url keys to represent navigation links. This approach requires that the MoonShine package be installed and correctly configured in the Laravel project. The input is a Blade array, and the output is rendered HTML for the navigation bar.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/topbar.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.top-bar>\n    <x-moonshine::layout.menu\n        :elements=\"[\n            ['label' => 'Dashboard', 'url' => '/'],\n            ['label' => 'Section', 'url' => '/section'],\n        ]\n    \"/>\n</x-moonshine::layout.top-bar>\n```\n\n----------------------------------------\n\nTITLE: Using Tags Feature - PHP\nDESCRIPTION: This PHP snippet transforms a text field into a tag input field using the `tags()` method. The `tags()` method takes an optional integer argument which sets the maximum number of allowed tags.  Here, a text field named \"Tags\" is created and configured to accept up to 5 tags.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nText::make('Tags', 'tags')\n    ->tags(5)\n```\n\n----------------------------------------\n\nTITLE: Changing Preview Rendering of MoonShine Select Field in PHP\nDESCRIPTION: Demonstrates how to customize the preview mode of a Select field in MoonShine by using the changePreview() method. This example configures a Select field with multiple image link options and fills it with selected values. The preview mode is overridden to display a Carousel component showing the selected images instead of just displaying the raw links. This requires MoonShine\\UI\\Components\\Carousel and uses a closure to transform field values to the desired preview representation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Carousel;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple() // Поле может иметь несколько значений\n    ->fill(['/images/1.png', '/images/2.png']) // Мы наполнили поле, указали какие значения выбраны\n    ->changePreview(\n        fn(?array $values, Select $ctx) => Carousel::make($values)\n    ) // изменили состояние preview\n```\n\n----------------------------------------\n\nTITLE: Showing Hidden Field Value in PHP with MoonShine\nDESCRIPTION: This PHP snippet demonstrates how to display the value of a hidden field using the `showValue()` method. It builds upon the initial hidden field example, allowing the value to be shown, despite the field being hidden in forms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/hidden.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nHidden::make('category_id')->showValue()\n```\n\n----------------------------------------\n\nTITLE: Overriding Card Item Rendering with customComponent() in PHP\nDESCRIPTION: Illustrates use of 'customComponent()' to override default card rendering with a user-defined callback function. The closure receives the item instance, current index, and the CardsBuilder instance, returning custom UI components such as Badges. This enables fully customizable card layouts beyond standard field displays.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->customComponent(function (Article $article, int $index, CardsBuilder $builder) {\n        return Badge::make($index + 1 . \".\" . $article->title, 'green');\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Textarea Field in MoonShine using PHP\nDESCRIPTION: Initializes a basic multi-line text input field using MoonShine's Textarea class. Requires the MoonShine\\UI\\Fields\\Textarea namespace imported. The code creates a Textarea field named 'Text', equivalent to an HTML <textarea> element, for collecting user input without additional customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/textarea.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Textarea;\n\nTextarea::make('Text')\n```\n\n----------------------------------------\n\nTITLE: Controlling Close on Click Outside with closeOutside (MoonShine, PHP)\nDESCRIPTION: Changes the default outside-click-to-close behavior with the closeOutside() method. Input can be true/false or a closure, disabling modal close when clicking outside if set to false. Only requires MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Title', 'Content...', ActionButton::make('Show Modal', '#'))\n            ->closeOutside(false),\n```\n\n----------------------------------------\n\nTITLE: Global Request Value Resolver\nDESCRIPTION: The `requestValueResolver()` method allows you to set a global resolver for retrieving values from the request for all fields. It can be used to override the default logic.  The resolver receives the index, default value and field context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n* @param  Closure(string|int|null $index, mixed $default, static $ctx): mixed  $resolver\n*/\nrequestValueResolver(Closure $resolver)\n```\n\n----------------------------------------\n\nTITLE: Setting Slug Locale in PHP\nDESCRIPTION: The `locale()` method lets you override the application's default locale for the slug generation. The parameter `$local` is a string representing the locale code. This allows the slug generation to take different language specific rules into account.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/slug.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nlocale(string $local)\n```\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->locale('ru')\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Bar to a ValueMetric in PHP\nDESCRIPTION: This code shows how to include a progress indicator in a ValueMetric using the progress() method, which takes an integer, float, or Closure. The example compares the number of open tasks against a total target.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nValueMetric::make('Open tasks')\n    ->value(fn(): int => Task::opened()->count())\n    ->progress(fn(): int => Task::count())\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Setting Url Blank Target in PHP\nDESCRIPTION: This snippet presents the method signature for the `blank()` method on the MoonShine Url field. This method takes no arguments. Calling `blank()` configures the link preview to include the `target=\"_blank\"` HTML attribute, causing the link to open in a new browser window or tab when clicked.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/url.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nblank()\n```\n\n----------------------------------------\n\nTITLE: Grid and Column Implementation Example in Blade Templates\nDESCRIPTION: Blade template implementation of the Grid and Column components, creating a two-column layout with dynamic content. Each column is configured to take up half the screen width on both desktop and smaller screens.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/grid.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.grid>\n    <x-moonshine::layout.column adaptiveColSpan=\"6\" colSpan=\"6\">\n        {{ fake()->text() }}\n    </x-moonshine::layout.column>\n    <x-moonshine::layout.column adaptiveColSpan=\"6\" colSpan=\"6\">\n        {{ fake()->text() }}\n    </x-moonshine::layout.column>\n</x-moonshine::layout.grid>\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Field with concise options\nDESCRIPTION: This snippet demonstrates how to define `HasMany` when the `ModelResource` matches the relationship name, simplifying the code. It imports `HasMany` from the Moonshine framework.  It shows a shorter way to define the field when the resource is the same as the relationship name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', 'comments')\n```\n\n----------------------------------------\n\nTITLE: Using defineEvent Directive in Blade\nDESCRIPTION: Demonstrates the use of the defineEvent directive, which is a convenient way to define event listeners in Blade templates with AlpineJS.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/form-with-events.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div\n  x-data=\"\"\n  @defineEvent('form_updated', 'my-event', 'alert()')\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Instance (`getForm`) Signature (PHP)\nDESCRIPTION: Method signature for `getForm`, used to retrieve a configured form instance. It accepts the form name (key from config), a default form class, and optional constructor parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\ngetForm(\n    string $name,\n    string $default,\n    mixed ...$parameters,\n)\n```\n\n----------------------------------------\n\nTITLE: Using LineBreak Component in MoonShine UI with Blade Templates\nDESCRIPTION: Illustrates the usage of the LineBreak component in a Blade template for the MoonShine framework. Using the <x-moonshine::layout.line-break/> tag inserts a vertical space break between UI components directly in the view layer without requiring explicit PHP code. This facilitates layout spacing in Blade-driven views.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/line-break.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.line-break/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Set with Logic Using Closure in MoonShine Json Field in PHP\nDESCRIPTION: Shows how to use a Closure with the fields() method to dynamically adjust which fields are displayed in the Json field based on existing data context, such as whether an object is active. Requires MoonShine Field classes. The closure receives a Json field context, enabling custom logic for field configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Position;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nJson::make('Product Options', 'options')\n    ->fields(\n        static fn(Json $ctx) => $ctx->getData()->getOriginal()->is_active ? [\n            Position::make(),\n            Text::make('Title'),\n            Text::make('Value'),\n            Switcher::make('Active')\n        ] : [\n            Text::make('Title')\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Making an Alert Removable with the Alert Class in PHP\nDESCRIPTION: Demonstrates how to make an alert component dismissible by setting the `removable` named argument to `true` in the `Alert::make()` method. This typically adds a close button or enables auto-dismiss functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nAlert::make(removable: true)\n    ->content('Text'),\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Icon (PHP)\nDESCRIPTION: Shows how to create an `Icon` component instance that renders custom HTML content, such as an SVG. It involves passing the HTML string (e.g., obtained from a helper like `svg()`) to the `make` method and calling the `custom()` method to enable custom output mode.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/icon.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nIcon::make(\n    svg('path-to-icon-pack')->toHtml()\n)->custom()\n```\n\n----------------------------------------\n\nTITLE: Key/Value Mode with Custom Fields Using MoonShine Json Field in PHP\nDESCRIPTION: Customizes the key and value input fields for the Json keyValue() mode by substituting with Select and Text fields respectively. Requires corresponding Field classes to be imported. The keyField utilizes predefined options; valueField uses Text. Suitable for scenarios with limited key choices.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Select;\nuse MoonShine\\UI\\Fields\\Text;\n\nJson::make('Label', 'data')\n    ->keyValue(\n        keyField: Select::make('Key')\n            ->options(['vk' => 'VK', 'email' => 'E-mail']),\n        valueField: Text::make('Value'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to the Form Builder - MoonShine - PHP\nDESCRIPTION: Illustrates how to add an extra button directly within the create or edit form using the `formBuilderButtons()` method. This example adds a 'Back' button which navigates to the resource's index page URL using a closure. The button is also styled using the 'btn-lg' CSS class. It depends on `MoonShine\\UI\\Components\\ActionButton` and `MoonShine\\Support\\ListOf`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function formBuilderButtons(): ListOf\n{\n    return parent::formBuilderButtons()\n        ->add(\n            ActionButton::make('Back', fn() => $this->getIndexPageUrl())->class('btn-lg')\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Field (Blade)\nDESCRIPTION: Illustrates how to create a Text field within a Blade template in MoonShine.  It utilizes MoonShine's component library for form input and field container elements, setting the input type to 'text' and name to 'title'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::field-container label=\"Title\">\n    <x-moonshine::form.input\n        type=\"text\"\n        name=\"title\"\n    />\n</x-moonshine::field-container>\n```\n\n----------------------------------------\n\nTITLE: Setting a Placeholder for a Nullable BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Example demonstrating the use of the `placeholder()` method, often combined with `nullable()`, to display custom placeholder text (e.g., 'Country') in the select input when no value is selected.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', 'country')\n    ->nullable()\n    ->placeholder('Country')\n```\n\n----------------------------------------\n\nTITLE: Generating FormLayout with MoonShine Command (Shell)\nDESCRIPTION: Shell command using PHP Artisan to generate a compact MoonShine layout class named `FormLayout`. This layout is designed for authentication forms (login, register, password recovery).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:layout FormLayout --compact\n```\n\n----------------------------------------\n\nTITLE: Setting Paginator with simple() method in PHP\nDESCRIPTION: This snippet demonstrates the usage of the `simple()` method to apply a simplified pagination style to the table.  It provides a simplified pagination interface for the table's user.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n->simple()\n```\n\n----------------------------------------\n\nTITLE: Backing up configuration and provider files for MoonShine using Shell\nDESCRIPTION: This set of shell commands renames key configuration and service provider files by appending _old.php to their filenames. The backup process protects user-customized files from being overwritten during the update. The commands operate on the file system and require sufficient permissions. Inputs are current configuration and provider files, and the outputs are suffixed backup copies.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmv config/moonshine.php config/moonshine_old.php\nmv app/Providers/MoonShineServiceProvider.php app/Providers/MoonShineServiceProvider_old.php\nmv app/MoonShine/Pages/Dashboard.php app/MoonShine/Pages/Dashboard_old.php\n```\n\n----------------------------------------\n\nTITLE: Menu Component Usage - Blade\nDESCRIPTION: This snippet demonstrates how to use the Menu component in a Blade template. It passes an array of menu items to the component using the `:elements` attribute.  The `:top` and `:scroll-to` attributes are set to `false`, disabling the horizontal menu mode and scroll-to-active item feature, respectively. The component expects an array of arrays with 'label' and 'url' keys for each menu item.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/menu.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.menu\n    :elements=\"[['label' => 'Dashboard', 'url' => '/'], ['label' => 'Section', 'url' => '/section']]\"\n    :top=\"false\"\n    :scroll-to=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Grouped Field using Moonshine Template (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to create a grouped field named 'Config' mapped to the 'config' model property using Moonshine's `Template` field. It includes 'Language' and 'Cache' text fields within the group. Callbacks `changeFill`, `changeRender`, and `onApply` are used to customize how data is extracted, rendered in the form (using `FieldsGroup`), and saved back to the model's 'config' property.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/fields-group.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTemplate::make('Config', 'config')->fields([\n    Text::make('Language'),\n    Text::make('Cache'),\n])\n    ->changeFill(fn(mixed $data) => data_get($data, 'config'))\n    ->changeRender(fn(mixed $value, Template $ctx) => FieldsGroup::make($ctx->getPreparedFields())->fill($value))\n    ->onApply(function(mixed $item, mixed $value) {\n        $item->config = $value;\n\n        return $item;\n    })\n```\n\n----------------------------------------\n\nTITLE: Extending Authorization Logic - PHP\nDESCRIPTION: This code snippet shows how to add custom authorization rules using the `authorizationRules()` method. This method is part of `MoonShineServiceProvider` and allows to define fine-grained access control. It receives a callback function that takes a ResourceContract, Model, Ability and Model as parameters. This allows full control over the authorization flow, providing flexibility in implementing custom authorization requirements. Requires the `MoonShine` package, `Laravel` framework and the use of a Service Provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/security/authorization.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Contracts\\Core\\ResourceContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\nuse MoonShine\\Laravel\\Enums\\Ability; // [tl! collapse:end]\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n    ): void\n    {\n        $config->authorizationRules(\n            static function (ResourceContract $resource, Model $user, Ability $ability, Model $item): bool {\n                return true;\n            }\n        );\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Escaping (PHP)\nDESCRIPTION: Shows how to disable HTML escaping for the Text field using the `unescape()` method.  This allows rendering HTML content within the field's value without escaping special characters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nText::make('HTML Content', 'content')\n    ->unescape()\n```\n\n----------------------------------------\n\nTITLE: Creating LineBreak Component using MoonShine UI in PHP\nDESCRIPTION: Demonstrates how to create an instance of the LineBreak component in PHP using the static make method. This snippet requires the MoonShine\\UI\\Components\\Layout\\LineBreak namespace to be imported. The make method can optionally accept a string parameter for naming, defaulting to 'default'. This component serves to add vertical spacing between layout elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/line-break.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLineBreak::make()\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout -  Class Definition\nDESCRIPTION: This code defines a custom layout class `MoonShineLayout` that extends `CompactLayout`. It demonstrates how to override various components of the MoonShine layout to customize the appearance and functionality of the admin panel.  This is a practical example to show how the layouts can be used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\PackageCategoryResource;\nuse App\\MoonShine\\Resources\\PackageResource;\nuse App\\MoonShine\\Resources\\UserResource;\nuse MoonShine\\ColorManager\\ColorManager;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\nuse MoonShine\\Laravel\\Components\\Layout\\{Locales, Notifications, Profile, Search};\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\nuse MoonShine\\UI\\Components\\{\n    Breadcrumbs,\n    Components,\n    Layout\\Assets,\n    Layout\\Div,\n    Layout\\Body,\n    Layout\\Burger,\n    Layout\\Content,\n    Layout\\Favicon,\n    Layout\\Flash,\n    Layout\\Footer,\n    Layout\\Head,\n    Layout\\Header,\n    Layout\\Html,\n    Layout\\Layout,\n    Layout\\Logo,\n    Layout\\Menu,\n    Layout\\Meta,\n    Layout\\Sidebar,\n    Layout\\ThemeSwitcher,\n    Layout\\Wrapper,\n    When};\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    // ...\n\n    public function build(): Layout\n    {\n        return Layout::make([\n            Html::make([\n                Head::make([\n                    Meta::make()->customAttributes([\n                        'name' => 'csrf-token',\n                        'content' => csrf_token(),\n                    ]),\n                    Favicon::make()->bodyColor($this->getColorManager()->get('body')),\n                    Assets::make(),\n                ])\n                    ->bodyColor($this->getColorManager()->get('body'))\n                    ->title($this->getPage()->getTitle()),\n                Body::make([\n                    Wrapper::make([\n                        Sidebar::make([\n                            Div::make([\n                                Div::make([\n                                    Logo::make(\n                                        $this->getHomeUrl(),\n                                        $this->getLogo(),\n                                        $this->getLogo(small: true),\n                                    )->minimized(),\n                                ])->class('menu-heading-logo'),\n\n                                Div::make([\n                                    Div::make([\n                                        ThemeSwitcher::make(),\n                                    ])->class('menu-heading-mode'),\n\n                                    Div::make([\n                                        Burger::make(),\n                                    ])->class('menu-heading-burger'),\n                                ])->class('menu-heading-actions'),\n                            ])->class('menu-heading'),\n\n                            Div::make([\n                                Menu::make(),\n                                When::make(\n                                    fn(): bool => $this->isAuthEnabled(),\n                                    static fn(): array => [Profile::make(withBorder: true)],\n                                ),\n                            ])->customAttributes([\n                                'class' => 'menu',\n                                ':class' => \"asideMenuOpen && '_is-opened'\",\n                            ]),\n                        ])->collapsed(),\n\n                        Div::make([\n                            Flash::make(),\n                            Header::make([\n                                Breadcrumbs::make($this->getPage()->getBreadcrumbs())->prepend(\n                                    $this->getHomeUrl(),\n                                    icon: 'home',\n                                ),\n                                Search::make(),\n                                When::make(\n                                    fn(): bool => $this->isUseNotifications(),\n                                    static fn(): array => [Notifications::make()],\n                                ),\n                                Locales::make(),\n                            ]),\n\n                            Content::make([\n                                Components::make(\n                                    $this->getPage()->getComponents(),\n                                ),\n                            ]),\n\n                            Footer::make()\n                                ->copyright(static fn(): string\n                                    => sprintf(\n                                    <<<'HTML'\n                                        &copy; 2021-%d Made with ❤️ by\n                                        <a href=\"https://cutcode.dev\"\n                                            class=\"font-semibold text-primary hover:text-secondary\"\n                                            target=\"_blank\"\n                                        >\n                                            CutCode\n                                        </a>\n                                        HTML,\n                                    now()->year,\n                                ))\n                                ->menu([\n                                    'https://moonshine-laravel.com/docs' => 'Documentation',\n                                ]),\n                        ])->class('layout-page'),\n                    ]),\n                ])->class('theme-minimalistic'),\n            ])\n                ->customAttributes([\n                    'lang' => $this->getHeadLang(),\n                ])\n                ->withAlpineJs()\n                ->withThemes(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Outer Attributes in PHP\nDESCRIPTION: This snippet shows how to set additional attributes for the outer HTML element of the modal, using the `outerAttributes()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Заголовок', 'Содержимое...', ActionButton::make('Показать модальное окно', '#'))\n    ->outerAttributes([\n        'class' => 'mt-2'\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop File Reordering\nDESCRIPTION: Add drag-and-drop functionality to reorder multiple files by specifying a URL to process the new positions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nFile::make('Files')\n    ->reorderable(fn(File $ctx) => \"/reorder/\" . $ctx->getData()->getKey())\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Opening Modal by Default on Page Load (MoonShine, PHP)\nDESCRIPTION: Shows how to configure the modal to be open as soon as the page renders with the open() method. Accepts an optional condition closure or bool, defaults to opening if null. No dependencies apart from MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nopen(Closure|bool|null $condition = null)\n```\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Title', 'Content...', view('path'))\n    ->open(),\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships in MoonShine Resource (PHP)\nDESCRIPTION: This snippet demonstrates how to eager load relationships for a MoonShine resource. It defines a `$with` property as an array of relationship names ('user' and 'categories' in this example).  Eager loading improves performance by reducing the number of database queries.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/query.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected array $with = ['user', 'categories'];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Title Component in Blade\nDESCRIPTION: Shows how to render the `Title` component directly within a Blade template using the `<x-moonshine::title>` component tag. The content between the opening and closing tags will be used as the title value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/title.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::title>\n    Hello world\n</x-moonshine::title>\n```\n\n----------------------------------------\n\nTITLE: Generating ProfilePage with MoonShine Artisan (Shell)\nDESCRIPTION: Uses the PHP Artisan command-line tool with the MoonShine extension to scaffold a new page class named 'ProfilePage'. This command sets up the basic file structure for the user profile page within the MoonShine framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page ProfilePage\n```\n\n----------------------------------------\n\nTITLE: Blade Template Usage of MoonShine Cards\nDESCRIPTION: Shows usage of MoonShine UI components within a Blade template to display a card layout grid. Incorporates components such as grid layouts, card with URL, thumbnail image, dynamic title and subtitle via Blade directive bindings, card values, custom header slot content (badge), textual body content, and action slot containing link buttons. This snippet demonstrates how to visually represent card data using Blade syntax with slots and attribute bindings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.grid>\n    <x-moonshine::layout.column colSpan=\"4\" adaptiveColSpan=\"12\">\n        <x-moonshine::card\n            url=\"#\"\n            thumbnail=\"/images/image_1.jpg\"\n            :title=\"fake()->sentence(3)\"\n            :subtitle=\"date('d.m.Y')\"\n            :values=\"['ID' => 1, 'Author' => fake()->name()]\"\n        >\n            <x-slot:header>\n                <x-moonshine::badge color=\"green\">new</x-moonshine::badge>\n            </x-slot:header>\n\n            {{ fake()->text() }}\n\n            <x-slot:actions>\n                <x-moonshine::link-button href=\"#\">Read more</x-moonshine::link-button>\n            </x-slot:actions>\n        </x-moonshine::card>\n    </x-moonshine::layout.column>\n</x-moonshine::layout.grid>\n```\n\n----------------------------------------\n\nTITLE: Enable TableBuilder Drag and Drop Sorting PHP\nDESCRIPTION: Adds drag-and-drop functionality to sort table rows. Requires a handler URL, an item key, and optionally a group name for grouping sortable items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n->reorderable(url: '/reorder-url', key: 'id', group: 'group-name')\n```\n\n----------------------------------------\n\nTITLE: Instantiating Image Field in PHP\nDESCRIPTION: Demonstrates how to create a new instance of the Image field using the static `make` method in PHP. This is typically used within a MoonShine Resource or Form definition to add an image upload field with preview capabilities.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/image.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Image;\n\nImage::make('Thumbnail')\n```\n\n----------------------------------------\n\nTITLE: Customizing Related Link Button in HasMany Field in PHP\nDESCRIPTION: Method to modify the relatedLink button in a HasMany field. The callback provides the button instance and a preview flag, allowing conditional styling based on context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink()\n    ->modifyRelatedLink(\n        fn(ActionButton $button, bool $preview) => $button\n            ->when($preview, fn(ActionButton $btn) => $btn->primary())\n            ->unless($preview, fn(ActionButton $btn) => $btn->secondary())\n    )\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field Creation (Class)\nDESCRIPTION: Creates a Checkbox field using the PHP class. It requires the MoonShine\\UI\\Fields\\Checkbox class. The first argument is the label, and the second is the database field name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/checkbox.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Checkbox;\n\nCheckbox::make('Publish', 'is_publish')\n```\n\n----------------------------------------\n\nTITLE: Disable filtering empty values\nDESCRIPTION: This code disables the default behavior of filtering empty values from a Json field using the `stopFilteringEmpty()` method. This ensures that empty values are retained.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nJson::make('data')->stopFilteringEmpty()\n```\n\n----------------------------------------\n\nTITLE: Preview Field with Link Display - PHP\nDESCRIPTION: This snippet illustrates how to display a link using the `link()` method on a Preview field.  The first example creates a direct link to a website, while the second example generates the link and the displayed text dynamically using closures, passing in the link value and field object. It allows customization of the URL, name, icon, and target.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/preview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Link')\n    ->link('https://moonshine-laravel.com', blank: false),\n\nPreview::make('Link')\n    ->link(fn($link, Field $field) => $link, fn($name, Field $field) => 'Go')\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic BelongsTo Field (Method Signature) in MoonShine (PHP)\nDESCRIPTION: Outlines the `BelongsTo::make()` static method signature used to create a BelongsTo field. Parameters include the field label, optional relation name (defaults to camelCase of label), an optional closure or field name for formatting the displayed value, and the related ModelResource class (often mandatory).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make(\n    Closure|string $label,\n    ?string $relationName = null,\n    Closure|string|null $formatted = null,\n    ModelResource|string|null $resource = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Events with Blade Directive @defineEventWhen\nDESCRIPTION: This snippet uses the `@defineEventWhen` Blade directive to conditionally define events. It takes a condition, the event, the component name, the callback function, and parameters. The event is only added if the condition is met.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"myComponent\"\n    {{-- @table-updated-index.window=\"asyncRequest\" --}}\n    @defineEventWhen(true, 'table-updated', 'index', 'asyncRequest')\n></div>\n```\n\n----------------------------------------\n\nTITLE: Defining the redirect() Method Signature in MoonShineJsonResponse (PHP)\nDESCRIPTION: Shows the method signature for `redirect()` in `MoonShineJsonResponse`. This method accepts a URL string and instructs the frontend to redirect the user's browser to that URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nredirect(string $value)\n```\n\n----------------------------------------\n\nTITLE: Json field in object mode\nDESCRIPTION: This code configures a Json field named 'Product Options' to work with a single JSON object rather than an array of objects. It defines the fields within the object and uses the `object()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Product Options', 'options')\n    ->fields([\n        Text::make('Title'),\n        Switcher::make('Active'),\n    ])\n    ->object()\n```\n\n----------------------------------------\n\nTITLE: Triggering Toast Event in PHP\nDESCRIPTION: This code defines a JavaScript event using `AlpineJs::event()` to display a toast notification asynchronously. It uses the `JsEvent::TOAST` event.  It uses the `ToastEventParams::make()` to set the type and message for the toast.  This enables the display of toast notifications triggered via JavaScript.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/flash.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\Support\\Enums\\ToastType;\nuse MoonShine\\Support\\ToastEventParams;\n\nAlpineJs::event(\n    JsEvent::TOAST,\n    params: ToastEventParams::make(ToastType::SUCCESS, 'Success')\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Editing MoonShine Select PHP\nDESCRIPTION: Demonstrates how to enable preview mode editing for a MoonShine Select field by calling the `updateOnPreview()` method. This allows users to modify the select value directly on the preview page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country')\n    ->updateOnPreview()\n```\n\n----------------------------------------\n\nTITLE: Implementing getColor() Method for Enum (PHP)\nDESCRIPTION: This code demonstrates how to implement the `getColor()` method inside an enum to specify a color for display within the MoonShine framework. It uses a `match()` statement to return color names corresponding to the enum cases. The return value is a string representing one of the predefined colors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/enum.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Enums;\n\nenum StatusEnum: string\n{\n    case NEW = 'new';\n    case DRAFT = 'draft';\n    case PUBLIC = 'public';\n\n    public function getColor(): ?string\n    {\n        return match ($this) {\n            self::NEW => 'info',\n            self::DRAFT => 'gray',\n            self::PUBLIC => 'success',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Menu Array in MoonShine Layout Using PHP menu() Method\nDESCRIPTION: This snippet extends the `menu()` method in a custom layout to append additional `MenuItem` objects to the menu array inherited from the parent. It shows how to add a menu item labeled 'Articles' linked to a resource class. Dependencies include `MenuItem` and resource classes. The method returns an array of menu components used by the layout's menu system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            ...parent::menu(),\n            MenuItem::make('Articles', ArticleResource::class),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect After Save\nDESCRIPTION: This snippet demonstrates how to set a redirect after saving a record.  The `$redirectAfterSave` property is set to `PageType::FORM` to redirect back to the form page. This behavior can be overridden using the `getRedirectAfterSave()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\PageType;\n\nprotected ?PageType $redirectAfterSave = PageType::FORM;\n```\n\n----------------------------------------\n\nTITLE: Updating composer.json for MoonShine v3.0 in JSON\nDESCRIPTION: This JSON snippet demonstrates how to update the composer.json file to require the new ^3.0 version of the moonshine/moonshine package. This modification ensures the project will use the appropriate Laravel admin panel version. No additional dependencies are needed, but a backup is recommended before updating the file. The input is the contents of composer.json, and the primary output is ensured compatibility with MoonShine 3.0.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"moonshine/moonshine\": \"^3.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Colors Using ColorManager PHP\nDESCRIPTION: Demonstrates setting colors in the ColorManager instance for the admin panel. Includes setting a single color for the default theme, specifying a color for the dark theme by passing a boolean flag, and bulk assigning multiple colors using an associative array. Requires an instance of ColorManager and accepts RGB color strings. This snippet allows customizing interface colors dynamically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Set a single color\n$colorManager->set('primary', '120, 67, 233');\n\n// Set color for dark theme\n$colorManager->set('primary', '120, 67, 233', dark: true);\n\n// Bulk assign colors\n$colorManager->bulkAssign([\n    'primary' => '120, 67, 233',\n    'secondary' => '236, 65, 118'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configure ActionButton to Trigger Async Table Update PHP\nDESCRIPTION: Defines an ActionButton ('Reload') configured to trigger an asynchronous update of a specified table ('my-table') upon clicking, using an Alpine.js event.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Reload')\n    ->async(events: [AlpineJs::event(JsEvent::TABLE_UPDATED, 'my-table')])\n```\n\n----------------------------------------\n\nTITLE: Overriding thead, tbody, and tfoot Table Sections in MoonShine Resource using PHP\nDESCRIPTION: This group of methods allows overriding or extending the rendering logic for the table’s thead, tbody, and tfoot sections. Each method returns either null, a TableRowsContract instance, or a Closure that manipulates rows and cells to customize table layouts beyond automatic field outputs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\\nuse MoonShine\\Contracts\\UI\\Collection\\TableRowsContract;\\nuse MoonShine\\Contracts\\UI\\TableRowContract;\\nuse MoonShine\\UI\\Collections\\TableCells;\\nuse MoonShine\\UI\\Collections\\TableRows;\\n\\nprotected function thead(): null|TableRowsContract|Closure\\n{\\n    return static fn(TableRowContract $default) => TableRows::make([$default])->pushRow(\\n        TableCells::make()->pushCell(\\n            'td content'\\n        )\\n    );\\n}\\n\\nprotected function tbody(): null|TableRowsContract|Closure\\n{\\n    return static fn(TableRowsContract $default) => $default->pushRow(\\n        TableCells::make()->pushCell(\\n            'td content'\\n        )\\n    );\\n}\\n\\nprotected function tfoot(): null|TableRowsContract|Closure\\n{\\n    return static fn(?TableRowContract $default) => TableRows::make([$default])->pushRow(\\n        TableCells::make()->pushCell(\\n            'td content'\\n        )\\n    );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox Field (PHP/Blade)\nDESCRIPTION: Demonstrates the basic creation of a Checkbox field. The PHP example uses the static `make` method, specifying the label 'Publish' and the database column 'is_publish'. The Blade example shows the equivalent component usage within a form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/checkbox.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Checkbox;\n\nCheckbox::make('Publish', 'is_publish')\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"Publish\">\n    <x-moonshine::form.input\n        type=\"checkbox\"\n        name=\"is_publish\"\n    />\n</x-moonshine::field-container>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field Creation (Blade)\nDESCRIPTION: Creates a Checkbox field using Blade components. This requires the moonshine::form.wrapper and moonshine::form.input Blade components. It sets the input type to checkbox and the name attribute to the desired database field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/checkbox.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.wrapper label=\"Publish\">\n    <x-moonshine::form.input\n        type=\"checkbox\"\n        name=\"is_publish\"\n    />\n</x-moonshine::field-container>\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Indicator to ValueMetric\nDESCRIPTION: Method for adding a progress bar to a ValueMetric, showing progress toward a target value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprogress(int|float|Closure $target)\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Escaping - PHP\nDESCRIPTION: This code snippet disables HTML tag escaping in a text field using the `unescape()` method.  This is useful when you want to allow users to input and render HTML content directly. The `unescape()` method doesn't take any parameters and applies the unescaping functionality directly to the field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nText::make('HTML Content', 'content')\n    ->unescape()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to Cards in PHP\nDESCRIPTION: Shows how to add custom content to CardsBuilder using the content() method with Article data from pagination.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->content('Custom content')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Page Links in MoonShine Resources\nDESCRIPTION: This snippet demonstrates how to create an Action Button that links to a custom page within a MoonShine resource. It uses the getPageUrl method to generate the URL for the custom page and passes the current model's key as a parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\ListOf;\nuse MoonShine\\UI\\Components\\ActionButton;\n\n/**\n * @throws Throwable\n */\npublic function indexButtons(): ListOf\n{\n    return parent::indexButtons()->add(\n        ActionButton::make('To custom page',\n            url: fn($model) => $this->getPageUrl(\n                PostPage::class, params: ['resourceItem' => $model->getKey()]\n            ),\n        ),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Set of Fields for RelationRepeater\nDESCRIPTION: Shows how to override the default form fields within a RelationRepeater by passing a specific set of fields using the `fields()` method. This allows customization of the related model form, ensuring required fields like ID and specific attributes are included.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nRelationRepeater::make('Characteristics', 'characteristics')\n    ->fields([\n        ID::make(),\n        Text::make('Name', 'name'),\n        Text::make('Value', 'value'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Alert Type via Blade Components\nDESCRIPTION: Demonstrates how to assign the 'type' attribute within Blade <x-moonshine::alert> components to define the alert's category and appearance, supporting visual differentiation of notifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::alert type=\"primary\">Primary</x-moonshine::alert>\n<x-moonshine::alert type=\"secondary\">Secondary</x-moonshine::alert>\n<x-moonshine::alert type=\"success\">Success</x-moonshine::alert>\n<x-moonshine::alert type=\"info\">Info</x-moonshine::alert>\n<x-moonshine::alert type=\"warning\">Warning</x-moonshine::alert>\n<x-moonshine::alert type=\"error\">Error</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Creating Meta Tag with Description in PHP using MoonShine\nDESCRIPTION: This snippet shows creation of a generic meta tag with 'name' and 'content' attributes, used to add a description to the HTML page. It requires the MoonShine UI's Meta component and helps in SEO and page metadata management.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/meta.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nMeta::make()\n    ->customAttributes([\n        'name' => 'description',\n        'content' => 'Page description',\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Customizing Slug Separator in MoonShine - PHP\nDESCRIPTION: This snippet configures the separator character between words in the generated slug using the separator method. Requires a Slug field instance and MoonShine setup. The key parameter is the separator string (e.g., '_'), which will replace the default '-'. The method modifies the output format of the slug and is best used for projects with specific URL conventions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/slug.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->separator('_')\n```\n\n----------------------------------------\n\nTITLE: Instantiating BelongsTo with Implicit Relation Name in MoonShine (PHP)\nDESCRIPTION: Illustrates creating a `BelongsTo` field where the relation name is automatically inferred from the label. If `$relationName` is not provided, it defaults to the camelCase version of the `$label` (e.g., 'User' becomes 'user').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('User')\n```\n\n----------------------------------------\n\nTITLE: Modal with Asynchronous Content in Blade (MoonShine, Blade)\nDESCRIPTION: Shows usage of the async and :asyncUrl parameters in the moonshine::modal Blade component to load content dynamically from a route. The outerHtml slot defines the trigger. Requires MoonShine, Blade, and a defined route for content loading.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal\n    async\n    :asyncUrl=\"route('async')\"\n    title=\"Title\"\n>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open async modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueFormat Example\nDESCRIPTION: Example showing how to format a numeric value using Laravel's Number::forHumans helper to make it more readable.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nValueMetric::make('Profit')\n    ->value(fn(): int => Order::completed()->sum('price'))\n    ->valueFormat(fn(int $value): string => \\Illuminate\\Support\\Number::forHumans($value))\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-Only Input Field using Text Field in PHP\nDESCRIPTION: Shows how to create a dedicated time input field by utilizing the `Text` field component and explicitly setting its `type` attribute to 'time' using the `setAttribute` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nText::make('Time')->setAttribute('type', 'time')\n```\n\n----------------------------------------\n\nTITLE: Executing Logic Before and After Rendering\nDESCRIPTION: The `beforeRender()` and `afterRender()` methods enable execution of custom code before and after a field is rendered in a view. This provides a means to add custom HTML, perform pre-rendering tasks, or inject information around the field's rendering. Each method accepts a closure with the field context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nbeforeRender(Closure $closure)\nafterRender(Closure $closure)\n```\n\n----------------------------------------\n\nTITLE: Using Blade syntax to render a Heading component\nDESCRIPTION: This snippet provides an example of rendering a Heading within Blade templates, specifying the heading level with the `h` attribute. It showcases the integration of the component with Blade's syntax for frontend rendering with customization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/heading.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::heading h=\"2\">\n    Hello world\n</x-moonshine::heading>\n```\n\n----------------------------------------\n\nTITLE: Modifying Json Field Remove Button - PHP\nDESCRIPTION: This snippet shows how to modify the remove button of the Json field using the `modifyRemoveButton()` method. It customizes the button by adding a CSS class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->modifyRemoveButton(\n        fn(ActionButton $button) => $button->customAttributes([\n            'class' => 'btn-secondary'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionButton beforeRequest in MoonShine (PHP)\nDESCRIPTION: Configures a MoonShine `ActionButton` to execute a specific JavaScript function before making an asynchronous request to the specified PHP method (`myMethod`). The `beforeRequest` parameter of the `AsyncCallback` specifies the name of the JavaScript function to call.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make()\n    ->method(\n        'myMethod',\n        callback: AsyncCallback::with(beforeRequest: 'myBeforeRequest')\n    )\n```\n\n----------------------------------------\n\nTITLE: Preview Field with Badge Display - PHP\nDESCRIPTION: This snippet shows how to use the `badge()` method on a Preview field to display data as a badge with a dynamic color based on the status. The closure receives the status value and the field instance as parameters, allowing for conditional styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/preview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Status')\n    ->badge(fn($status, Field $field) => $status === 1 ? 'green' : 'gray')\n```\n\n----------------------------------------\n\nTITLE: Removing Wrappers - PHP\nDESCRIPTION: This snippet demonstrates how to remove wrappers from the FieldsGroup using `withoutWrappers()` method. Wrappers are fields that implement the `FieldsWrapperContract` interface, like `StackFields`.  The method modifies the FieldsGroup instance to extract nested fields. This affects the structure of the displayed fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFieldsGroup::make($fields)\n    ->withoutWrappers()\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting 404 Exception in MoonShineServiceProvider\nDESCRIPTION: This code snippet demonstrates how to customize the 404 exception using the `MoonShineServiceProvider` by setting the `notFoundException`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$config->notFoundException(MoonShineNotFoundException::class);\n```\n\n----------------------------------------\n\nTITLE: Using the booted() Lifecycle Hook for Page Instantiation in PHP\nDESCRIPTION: Illustrates overriding the `booted()` method in a `Page` class. This lifecycle hook is executed at the moment MoonShine creates an instance of the page within the system, suitable for early initialization or registration tasks related to the page instance. Remember to call `parent::booted()` if overriding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass PostPage extends Page\n{\n    // ...\n\n    protected function booted(): void\n    {\n        parent::booted();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Render of Select Field to Text PHP\nDESCRIPTION: This example showcases how to change the rendering of a `Select` field into a `Text` field in MoonShine using the `changeRender()` method. While generally not recommended, it demonstrates the flexibility to alter the default visual state of a field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->changeRender(\n        fn(?array $values, Select $ctx) => Text::make($ctx->getLabel())->fill(implode(',', $values))\n    )\n```\n\n----------------------------------------\n\nTITLE: Enabling Collapsible Sidebar Option in PHP\nDESCRIPTION: This PHP snippet shows how to enable the collapsible feature of the Sidebar component by calling the collapsed() method after creating it. By default, the Sidebar is always open, but chaining the collapsed() method adds functionality to hide or collapse the Sidebar. The snippet continues to add one or more components to the Sidebar as usual. This feature depends on the Sidebar class implementing the collapsed() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/sidebar.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSidebar::make([\\n    Menu::make(),\\n])->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Placement in Blade\nDESCRIPTION: Example of changing the placement of a Dropdown component using the placement attribute. The dropdown will be positioned to the left of the toggler element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/dropdown.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown placement=\"left\">\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Positioning MoonShine OffCanvas on the Left PHP\nDESCRIPTION: Illustrates using the `left()` method to change the default position of the OffCanvas component from the right side to the left side of the viewport.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make('Title', 'Content...', 'Show Panel')\n    ->left()\n```\n\n----------------------------------------\n\nTITLE: HTML attributes for remove button\nDESCRIPTION: This code demonstrates how to add HTML attributes to the remove button of a Json field, allowing for custom JavaScript interactions like asynchronous removal.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data', 'data.content')\n    ->fields([\n        Text::make('Title'),\n        Image::make('Image'),\n        Text::make('Value'),\n    ])\n    ->removable(attributes: ['@click.prevent' => 'customAsyncRemove'])\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Specifying Locale for Slug Generation in MoonShine - PHP\nDESCRIPTION: Here, the locale method is used to set the locale for slug generation, overriding the application's default. The method accepts a locale string (e.g., 'ru'), ensuring locale-specific handling of characters. This requires MoonShine and appropriate locale configuration. The output is a Slug field that respects the specified locale when normalizing input values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/slug.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->locale('ru')\n```\n\n----------------------------------------\n\nTITLE: Creating Event with AlpineJs::eventBlade()\nDESCRIPTION: This snippet showcases how to use the `AlpineJs::eventBlade()` method to create an event definition for use in Blade templates. It specifies the event, component name, callback function, and parameters, which is suitable for defining custom attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nFormBuilder::make('/crud/update')\n    ->name('main-form')\n    ->customAttributes([\n        // @form-reset-main-form.window=\"formReset\"\n        AlpineJs::eventBlade(JsEvent::FORM_RESET, 'main-form') => 'formReset',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Mode - PHP\nDESCRIPTION: This shows how to set the preview mode for all fields in the set using the `previewMode()` method.  The method does not take parameters and can be chained directly after `FieldsGroup::make($fields)`. This is useful to render the fields in a non-editable, display-only mode. The expected output is the fields rendered in preview mode.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFieldsGroup::make($fields)\n    ->previewMode()\n```\n\n----------------------------------------\n\nTITLE: Displaying Outline Heroicon in PHP\nDESCRIPTION: This code snippet demonstrates the usage of `->icon()` to render an outline Heroicon. This example takes the name of an icon as a string.  The output is the display of the specified outline icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n->icon('academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Form Page Main Component in MoonShine (PHP)\nDESCRIPTION: Overrides the `getFormComponent(string $action, ?DataWrapperContract $item, Fields $fields, bool $isAsync = true)` method in a MoonShine `FormPage` (e.g., `ArticleFormPage`). It uses `FormBuilder` to construct the HTML form, handling data filling, hidden fields, asynchronous requests via AlpineJs events, precognition, and custom button configurations based on resource settings. Dependencies include various contracts (`DataWrapperContract`, `ComponentContract`, `FormBuilderContract`), `Fields`, `FormPage`, `AlpineJs`, `JsEvent`, `FormBuilder`, and `Hidden`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Collections\\Fields;\n\ngetFormComponent(\n  string $action,\n  ?DataWrapperContract $item,\n  Fields $fields,\n  bool $isAsync = true,\n)\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Contracts\\UI\\FormBuilderContract;\nuse MoonShine\\Laravel\\Collections\\Fields;\nuse MoonShine\\Laravel\\Pages\\Crud\\FormPage;\nuse MoonShine\\Support\\AlpineJs;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Fields\\Hidden; // [tl! collapse:end]\n\nclass ArticleFormPage extends FormPage\n{\n    // ...\n\n    protected function getFormComponent(\n        string $action,\n        ?DataWrapperContract $item,\n        Fields $fields,\n        bool $isAsync = true,\n    ): ComponentContract {\n        $resource = $this->getResource();\n\n        return FormBuilder::make($action)\n            ->cast($this->getResource()->getCaster())\n            ->fill($item)\n            ->fields([\n                ...$fields\n                    ->when(\n                        ! is_null($item),\n                        static fn (Fields $fields): Fields => $fields->push(\n                            Hidden::make('_method')->setValue('PUT')\n                        )\n                    )\n                    ->when(\n                        ! $resource->isItemExists() && ! $resource->isCreateInModal(),\n                        static fn (Fields $fields): Fields => $fields->push(\n                            Hidden::make('_force_redirect')->setValue(true)\n                        )\n                    )\n                    ->toArray(),\n            ])\n            ->when(\n                ! $resource->hasErrorsAbove(),\n                fn (FormBuilderContract $form): FormBuilderContract => $form->errorsAbove($resource->hasErrorsAbove())\n            )\n            ->when(\n                $isAsync,\n                static fn (FormBuilderContract $formBuilder): FormBuilderContract => $formBuilder\n                    ->async(events: array_filter([\n                        $resource->getListEventName(\n                            request()->input('_component_name', 'default'),\n                            $isAsync && $resource->isItemExists() ? array_filter([\n                                'page' => request()->input('page'),\n                                'sort' => request()->input('sort'),\n                            ]) : []\n                        ),\n                        ! $resource->isItemExists() && $resource->isCreateInModal()\n                            ? AlpineJs::event(JsEvent::FORM_RESET, $resource->getUriKey())\n                            : null,\n                    ]))\n            )\n            ->when(\n                $resource->isPrecognitive() || (moonshineRequest()->isFragmentLoad('crud-form') && ! $isAsync),\n                static fn (FormBuilderContract $form): FormBuilderContract => $form->precognitive()\n            )\n            ->when(\n                $resource->isSubmitShowWhen(),\n                static fn (FormBuilderContract $form): FormBuilderContract => $form->submitShowWhenAttribute()\n            )\n            ->name($resource->getUriKey())\n            ->submit(__('moonshine::ui.save'), ['class' => 'btn-primary btn-lg'])\n            ->buttons($resource->getFormBuilderButtons());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Directory for File Storage\nDESCRIPTION: Set a custom directory for saving files relative to the root directory of the disk using the dir() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->dir('docs')\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Preview Modal in PHP\nDESCRIPTION: Illustrates how to customize the appearance and behavior of the modal window that displays the image preview. The `extraAttributes()` method accepts a closure that returns a `FileItemExtra` object, allowing control over modal width, auto-sizing, and custom styles.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/image.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nImage::make('avatar')\n    ->extraAttributes(\n        fn(string $filename, int $index): ?FileItemExtra => new FileItemExtra(wide: false, auto: true, styles: 'width: 250px;')\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Menu Component in Blade\nDESCRIPTION: Shows how to initialize the MoonShine Menu component in a Blade template. The component accepts an elements array where each item is an associative array describing menu entries by label and URL. Additional boolean parameters allow toggling between horizontal (top) menu mode and scroll-to-active-item behavior. This approach is used for embedding menu components directly within Blade views.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/menu.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.menu\n    :elements=\"[['label' => 'Dashboard', 'url' => '/'], ['label' => 'Section', 'url' => '/section']]\"\n    :top=\"false\"\n    :scroll-to=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Colors using ColorManager - PHP\nDESCRIPTION: Demonstrates how to set colors using the ColorManager in PHP. Includes examples for setting a single color, setting a color for the dark theme, and bulk assigning colors.  Requires an instance of the ColorManager class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Установка одного цвета\n$colorManager->set('primary', '120, 67, 233');\n\n// Установка цвета для тёмной темы\n$colorManager->set('primary', '120, 67, 233', dark: true);\n\n// Массовая установка цветов\n$colorManager->bulkAssign([\n    'primary' => '120, 67, 233',\n    'secondary' => '236, 65, 118'\n]);\n```\n\n----------------------------------------\n\nTITLE: Disable Scroll to Active Item - PHP\nDESCRIPTION: This snippet disables the automatic scrolling to the active menu item. It uses the `withoutScrollTo()` method on the `Menu` component. This feature is enabled by default if the menu is not in `top` mode.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/menu.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMenu::make()->withoutScrollTo()\n```\n\n----------------------------------------\n\nTITLE: Changing Fill of Select Field PHP\nDESCRIPTION: This snippet shows how to modify the filling logic of a `Select` field in MoonShine using the `changeFill()` method. It transforms relative image paths into full URLs before filling the field. The example assumes an `Article` model and the `images` relationship.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Carousel;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Images')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->changeFill(\n        fn(Article $article, Select $ctx) => $article->images\n            ->map(fn($value) => \"https://cutcode.dev$value\")\n            ->toArray()\n    )\n    ->changePreview(\n        fn(?array $values, Select $ctx) => Carousel::make($values)\n    ),\n```\n\n----------------------------------------\n\nTITLE: Defining form fields with Template for HasOne relation in PHP\nDESCRIPTION: This snippet defines a method returning an iterable of form fields, primarily configuring a Template field to handle a Comment relationship within an Article, including fill, preview, rendering, and post-application callbacks.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/template.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Template;\n\n// ...\n\nprotected function formFields(): iterable\n{\n    return [\n        Template::make('Comment')\n          ->changeFill(fn (Article $data) => $data->comment)\n          ->changePreview(fn($data) => $data?->id ?? '-')\n          ->fields(app(CommentResource::class)->getFormFields())\n          ->changeRender(function (?Comment $data, Template $field) {\n              $fields = $field->getPreparedFields();\n              $fields->fill($data?->toArray() ?? []);\n\n              return Components::make($fields);\n          })\n          ->onAfterApply(function (Article $item, array $value) {\n              $item->comment()->updateOrCreate([\n                  'id' => $value['id']\n              ], $value);\n\n              return $item;\n          })\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Basic MoonShine Preview Field PHP\nDESCRIPTION: Initializes a basic MoonShine `Preview` field. It takes a label, an optional model column name, and a closure to generate the content dynamically, making it suitable for displaying non-editable computed values or text. The column name is optional when content is generated via a closure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/preview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make(\n    'Preview',\n    'preview',\n    static fn() => fake()->realText()\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Escaping on Textarea Field Value in MoonShine using PHP\nDESCRIPTION: Illustrates the usage of the unescape() method on a MoonShine Textarea field to disable automatic HTML escaping of the field's content. This allows raw HTML tags stored in the text area’s value to be rendered as HTML rather than escaped text. The example creates a Textarea for 'content' labeled 'HTML-контент' and disables escaping. This is essential when HTML content input is desired, but requires caution to avoid XSS vulnerabilities.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/textarea.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nTextarea::make('HTML-контент', 'content')\n    ->unescape()\n```\n\n----------------------------------------\n\nTITLE: Enable Scroll to Active Item - PHP\nDESCRIPTION: This snippet re-enables the automatic scrolling to the active menu item. It calls the `scrollTo()` method on the `Menu` component. This would be used to override a previous call to `withoutScrollTo()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/menu.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nMenu::make()->scrollTo()\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Input Field with MoonShine (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to instantiate a color input field using the MoonShine framework's Color class. To use this, ensure the MoonShine package is installed and properly loaded. The Color::make method accepts a string label (in this case, 'Color') to generate the corresponding input field. This method is useful for adding customizable color selection options to web forms. The output is a configured color picker component ready for integration in user interfaces, with no direct parameters for default color values or validation in the shown snippet.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/color.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Color;\n\nColor::make('Color')\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Component with Parameters (Blade)\nDESCRIPTION: Illustrates how to use the Card component in a Blade template. It passes the title, thumbnail, URL, subtitle, and values as attributes to the component. The content inside the tags represents card content. Requires the `moonshine` namespace configured for Blade components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::card\n        :title=\"fake()->sentence(3)\"\n        :thumbnail=\"'https://moonshine-laravel.com/images/image_1.jpg'\"\n        :url=\"'https://cutcode.dev'\"\n        :subtitle=\"'test'\"\n        :values=\"['ID' => 1, 'Author' => fake()->name()]\"\n>\n    {{ fake()->text(100) }}\n</x-moonshine::card>\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnails using Blade Component\nDESCRIPTION: Illustrates how to render thumbnails using the `<x-moonshine::thumbnails>` Blade component. Examples show passing multiple image paths via the `:items` attribute as an array, a single path as a string, and optionally setting the `alt` attribute for description.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/thumbnails.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::thumbnails\n    :items=\"[\n        '/images/image_1.jpg',\n        '/images/image_2.jpg',\n        '/images/image_3.jpg',\n    ]\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::thumbnails\n    :items=\"/images/thumb_1.jpg\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::thumbnails\n    :items=\"/images/thumb_1.jpg\"\n    alt=\"Description\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Field After Apply with Example\nDESCRIPTION: This example shows how to use `refreshAfterApply()` to initiate the re-rendering of a field after the `apply` process.  The callback function can be used to perform some actions before re-rendering. This allows you to refresh the field and make changes after the values are applied.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nText::make('Title')\n    ->refreshAfterApply(fn(Text $ctx) => $ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceWithParent trait\nDESCRIPTION: This snippet demonstrates the use of the `ResourceWithParent` trait to determine the parent resource and retrieve its ID.  It defines the parent resource class and relation name.  It imports the traits and models to use it.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Laravel\\Traits\\Resource\\ResourceWithParent;\n\nclass PostImageResource extends ModelResource\n{\n    use ResourceWithParent;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping ActionButtons with Conditional Visibility in PHP\nDESCRIPTION: Shows how to group multiple `ActionButton` instances using the `ActionGroup` component. This example also demonstrates conditional visibility for buttons within the group using the `canSee()` method, which accepts a Closure to determine if the button should be rendered based on permissions or contextual data (like a model's active status).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\ActionGroup;\n\nActionGroup::make([\n    ActionButton::make('Button 1', '/')\n        ->canSee(fn() => false),\n    ActionButton::make('Button 2', '/', $model)\n        ->canSee(fn($model) => $model->active)\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenApi Generator Configuration in PHP\nDESCRIPTION: An example configuration array for the OpenApi generator, specifying the documentation title, path for storing the specification YAML file, the route serving JSON-format docs, and the view used to display the documentation. This allows tailoring documentation output locations and metadata.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\\n    // Заголовок документации\\n    'title' => 'Docs',\\n    // Путь расположения спецификации\\n    'path' => realpath(\\n        resource_path('oag.yaml')\\n    ),\\n    // Роут получения данных для документации\\n    'route' => 'oag.json',\\n    // view для документации\\n    'view' => 'oag::docs',\\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Actions After Applying Values with onAfterApply\nDESCRIPTION: The `onAfterApply()` method allows you to perform actions after the `apply()` method has finished.  This is useful for post-processing, such as sending notifications or performing additional data manipulation based on the field's applied value.  The closure receives the model, the value, and field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(mixed, mixed, FieldContract): static  $onBeforeApply\n */\nonAfterApply(Closure $onBeforeApply)\n```\n\n----------------------------------------\n\nTITLE: Apply Link View Method Static URL PHP\nDESCRIPTION: Applies the `link()` view method to a `Preview` field, rendering the field's content as a hyperlink. This example uses a static URL as the first parameter and demonstrates controlling whether the link opens in a new tab via the `blank` parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/preview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Link')\n    ->link('https://moonshine-laravel.com', blank: false)\n```\n\n----------------------------------------\n\nTITLE: Defining Color Enum\nDESCRIPTION: The provided code block defines a PHP enum named `Color` within the namespace `MoonShine\\Support\\Enums`. It declares several color constants (PRIMARY, SECONDARY, SUCCESS, ERROR, WARNING, INFO, PURPLE, PINK, BLUE, GREEN, YELLOW, RED, GRAY), each associated with its corresponding string value, which are the color names.  This enum is used to specify colors within the Moonshine framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/color.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nenum Color: string\n{\n    case PRIMARY = 'primary';\n\n    case SECONDARY = 'secondary';\n\n    case SUCCESS = 'success';\n\n    case ERROR = 'error';\n\n    case WARNING = 'warning';\n\n    case INFO = 'info';\n\n    case PURPLE = 'purple';\n\n    case PINK = 'pink';\n\n    case BLUE = 'blue';\n\n    case GREEN = 'green';\n\n    case YELLOW = 'yellow';\n\n    case RED = 'red';\n\n    case GRAY = 'gray';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Alert Types with the Blade Component\nDESCRIPTION: Demonstrates setting various alert types (primary, secondary, success, info, warning, error) for the `x-moonshine::alert` Blade component using the `type` attribute. This attribute controls the visual style of the alert.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::alert type=\"primary\">Primary</x-moonshine::alert>\n<x-moonshine::alert type=\"secondary\">Secondary</x-moonshine::alert>\n<x-moonshine::alert type=\"success\">Success</x-moonshine::alert>\n<x-moonshine::alert type=\"info\">Info</x-moonshine::alert>\n<x-moonshine::alert type=\"warning\">Warning</x-moonshine::alert>\n<x-moonshine::alert type=\"error\">Error</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Component (PHP Class)\nDESCRIPTION: Demonstrates how to render an `Icon` component using the PHP class syntax. It shows the necessary `use` statement and the basic call to `Icon::make()` with the icon name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/icon.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Icon;\n\nIcon::make('users')\n```\n\n----------------------------------------\n\nTITLE: Setting gradation with h() method in the Heading component\nDESCRIPTION: This snippet illustrates how to set or change the heading's gradation level dynamically using the `h()` method. Options include specifying the level, choosing class-based styling or semantic tags, and chaining multiple configurations.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/heading.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nHeading::make('Title')->h(1),\nHeading::make('Title')->h(1, false),\nHeading::make('Title')->h(),\nHeading::make('Title')->h(asClass: false),\nHeading::make('Title', 4, false)->h(5)\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Filling Logic with changeFill and changePreview in MoonShine PHP\nDESCRIPTION: Shows how to modify the data filling process of a Select field inside FormBuilder or ModelResource using the changeFill() method. The example transforms relative image paths into full URLs based on the Article model's images collection. It also reuses changePreview() to display the filled images with a Carousel. This approach allows developers to intercept and customize the field's data population step with access to the full model object, ensuring integration with existing fill mechanisms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Carousel;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Images')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->changeFill(\n        fn(Article $article, Select $ctx) => $article->images\n            ->map(fn($value) => \"https://cutcode.dev$value\")\n            ->toArray()\n    )\n    ->changePreview(\n        fn(?array $values, Select $ctx) => Carousel::make($values)\n    ),\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Text Field - Blade\nDESCRIPTION: This Blade template code shows how to create a text input field using MoonShine's Blade components. It uses the `x-moonshine::field-container` and `x-moonshine::form.input` components to render the field with a label and the input type set to \"text\". This provides a declarative way to define text input fields within MoonShine forms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::field-container label=\"Title\">\n    <x-moonshine::form.input\n        type=\"text\"\n        name=\"title\"\n    />\n</x-moonshine::field-container>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to Cards Using content() Method in PHP\nDESCRIPTION: Demonstrates usage of the 'content()' method in CardsBuilder for injecting arbitrary content into card views. The method accepts either a Closure or a string, providing flexible ways to render additional HTML or text inside each card. The example initializes CardsBuilder with fields and paginated items, and then sets static custom content displayed horizontally for all cards.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ncontent(Closure|string $value)\n\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->content('Custom content')\n```\n\n----------------------------------------\n\nTITLE: Displaying Solid Heroicon in PHP\nDESCRIPTION: This code snippet demonstrates how to render a solid Heroicon using the `icon()` method, assuming a method exists which distinguishes solid icons. The name of the icon is prefixed to indicate it is solid (s.academic-cap). The output is the display of the specified solid icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n->icon('s.academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany withImage in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `withImage()` method, allowing images to be displayed alongside selectable values in the `BelongsToMany` field. It takes the `$column` name containing the image path, the filesystem `$disk`, and an optional `$dir` relative to the disk root.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nwithImage(\n    string $column,\n    string $disk = 'public',\n    string $dir = ''\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Icon via Icon Attribute on MoonShine PHP Resource\nDESCRIPTION: Shows how to define a default icon for a menu item linked to a resource or page by using the `#[Icon]` PHP attribute directly on the resource or page class. This provides a declarative way to set the icon unless overridden elsewhere.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/menu.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nnamespace MoonShine\\Resources;\n\n#[Icon('users')]\nclass MoonShineUserResource extends ModelResource\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to Remove Button\nDESCRIPTION: Customize the remove button's behavior by adding custom attributes through the removable() method's attributes parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->removable(\n        attributes: ['@click.prevent' => '$event.target.closest(`.x-removeable`).remove()']\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Vertical Mode in RelationRepeater\nDESCRIPTION: Enables vertical display mode for the RelationRepeater table, transforming it from a horizontal to a vertical layout. This is useful for improve visual readability or specific UI requirements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\n\nRelationRepeater::make('Comments', 'comments')\n    ->vertical()\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Configuration (config)\nDESCRIPTION: This snippet shows how to add the custom middleware to the configuration file `config/moonshine.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'middleware' => [\n    // ... other middleware\n    \\App\\Http\\Middleware\\CheckAdminRole::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Favicons Using PHP Class Methods in MoonShine\nDESCRIPTION: Illustrates how to customize favicon assets by passing an associative array of icon URLs keyed by type (e.g., 'apple-touch', '32', '16'). Utilizes the customAssets() method chained on Favicon::make(). Dependencies include Vite asset helper for asset path resolution. Customizes icons like Apple Touch, standard favicons at different resolutions, Safari pinned tab SVG, and web manifest. Expected input is an array of asset paths; output modifies the favicon links in HTML.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/favicon.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFavicon::make([\n    // ...\n])\n    ->customAssets([\n        'apple-touch' => Vite::asset('favicons/apple-touch-icon.png'),\n        '32' => Vite::asset('favicons/favicon-32x32.png'),\n        '16' => Vite::asset('favicons/favicon-16x16.png'),\n        'safari-pinned-tab' => Vite::asset('favicons/safari-pinned-tab.svg'),\n        'web-manifest' => Vite::asset('favicons/site.webmanifest'),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Components with x-if\nDESCRIPTION: Demonstrates conditional rendering using xIf() method, which can remove elements from the DOM based on conditions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nxIf(\n    string|Closure $variable,\n    ?string $operator = null,\n    ?string $value = null,\n    bool $wrapper = true\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nDiv::make([\n    Select::make('Type')\n        ->native()\n        ->options([1 => 1, 2 => 2])\n        ->xModel(),\n\n    Text::make('Title')\n        ->xModel()\n        ->xIf('type', 1)\n])\n    ->xData(['title' = 'Hello world', 'type' => 1])\n\n// или\n\nDiv::make([\n    Select::make('Type')\n        ->options([1 => 1, 2 => 2])\n        ->xModel(),\n\n    Text::make('Title')\n        ->xModel()\n        ->xIf(fn() => 'type==2||type.value==2')\n])\n    ->xData(['title' => 'Hello world', 'type' => 1])\n\n// если нужно скрыть поле без контейнера\n\nDiv::make([\n    Select::make('Type')\n        ->native()\n        ->options([1 => 1, 2 => 2])\n        ->xModel(),\n\n    Text::make('Title')\n        ->xModel()\n        ->xIf('type', '=', 2, wrapper: false)\n])\n    ->xData(['title' => 'Hello world', 'type' => 1])\n```\n\n----------------------------------------\n\nTITLE: Using `getForm` with Dependency Injection in MoonShine (PHP)\nDESCRIPTION: Example of retrieving a form instance within a controller method using dependency injection. Type-hint `ConfiguratorContract` (implemented by `MoonShineConfigurator`) and call the `getForm` method on the injected config instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// DI\n\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\n/**\n * @param  MoonShineConfigurator  $configurator\n */\npublic function index(ConfiguratorContract $config)\n{\n  $form = $config->getForm('login');\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Theme UI Component Colors Using ColorManager PHP\nDESCRIPTION: Sets colors for specific UI components within the admin panel theme using dedicated methods on ColorManager. Background, content, table rows, borders, dropdowns, buttons, and dividers can all be assigned RGB color strings. These facilitate refined control over the theme appearance at a component level, supporting both light and dark themes implicitly. Requires ColorManager instantiated and color strings formatted as comma-separated RGB values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Set background colors\n$colorManager->background('27, 37, 59');\n\n// Set content colors\n$colorManager->content('39, 45, 69');\n\n// Configure interface components\n$colorManager->tableRow('40, 51, 78'); // Table rows\n$colorManager->borders('53, 69, 103'); // Borders\n$colorManager->dropdowns('48, 61, 93'); // Dropdowns\n$colorManager->buttons('83, 103, 132'); // Buttons\n$colorManager->dividers('74, 90, 121'); // Dividers\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Field Display Value in PHP\nDESCRIPTION: Explains how to customize the display format of the date value when shown in non-editable contexts (preview mode) using the `format()` method. The method accepts a date format string compatible with PHP's date formatting.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nformat(string $format)\n```\n\nLANGUAGE: php\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->format('d.m.Y')\n```\n\n----------------------------------------\n\nTITLE: Setting Card Header\nDESCRIPTION: Shows how to set a header for the Card component using the `header()` method.  The header is set using a closure to dynamically generate a badge. Requires the `Badge` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->header(static fn() => Badge::make('new', 'success'))\n```\n\n----------------------------------------\n\nTITLE: Creating Text Field Instance PHP\nDESCRIPTION: This code snippet demonstrates how to create instances of the `Text` field in MoonShine. It shows how to define a field with only a label, and how to specify both a label and a name for the field. The `make()` method is used for instantiation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Title')\nText::make('Title', 'title')\n```\n\n----------------------------------------\n\nTITLE: Generating MoonShine Handler Using Artisan Command - Shell\nDESCRIPTION: This snippet demonstrates how to create a new custom Handler in the MoonShine framework by executing an Artisan command. Running this command generates a Handler class file within the app\\MoonShine\\Handlers directory prepared for customization. The snippet assumes the Laravel PHP environment with MoonShine installed and requires no input parameters beyond the custom Handler name. The output is a new Handler class scaffold ready for modification.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/handlers.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:handler MyCustomHandler\n```\n\n----------------------------------------\n\nTITLE: Simplified HasMany Field with Resource Name Matching in PHP\nDESCRIPTION: Example showing how to create a HasMany field when resource name matches relation name, allowing for resource parameter omission.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments')\n```\n\n----------------------------------------\n\nTITLE: Adding Outer Attributes to the Modal Trigger (MoonShine, PHP)\nDESCRIPTION: Configures additional HTML attributes like classes or data-attributes for the Modal's outer trigger using outerAttributes(). Accepts an associative array of attributes and values. Primarily affects the UI trigger; MoonShine dependency required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nouterAttributes(array $attributes)\n```\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Title', 'Content...', ActionButton::make('Show Modal', '#'))\n    ->outerAttributes([\n        'class' => 'mt-2'\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MoonShine Box - PHP Class\nDESCRIPTION: Demonstrates how to create a basic MoonShine Box component using the PHP class syntax. It shows how to include other components, like an Alert, within the Box.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Alert;\n\nBox::make([\n    Alert::make()->content('Text')\n]);\n```\n\n----------------------------------------\n\nTITLE: Formatting MoonShine Date Field Display (PHP)\nDESCRIPTION: Applies a custom date format to the display value of the Date field using the `format()` method. The provided string specifies the desired format for the output (e.g., 'd.m.Y'). This impacts the presentation, not the underlying data storage or input method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->format('d.m.Y')\n```\n\n----------------------------------------\n\nTITLE: Modifying the Remove Button for Json Field (PHP)\nDESCRIPTION: Shows how to modify the default remove button of a Moonshine Json field using the `modifyRemoveButton()` method. This example applies a custom CSS class ('btn-secondary') to the existing remove button via a closure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(ActionButton $button, self $field): ActionButton  $callback\n */\nmodifyRemoveButton(Closure $callback)\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->modifyRemoveButton(\n        fn(ActionButton $button) => $button->customAttributes([\n            'class' => 'btn-secondary'\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Extending Search Query in MoonShine Resource (PHP)\nDESCRIPTION: This snippet demonstrates how to extend the default search query in a MoonShine resource while also using the built-in search.  It calls `parent::searchQuery($terms)` to execute the default search logic before adding additional conditions using a `where` clause and a closure. The `$terms` parameter contains the search terms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/query.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function searchQuery(string $terms): void\n    {\n        parent::searchQuery($terms);\n\n        $this->newQuery()->where(function (Builder $builder) use ($terms): void {\n            // Your logic\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing moonshine::alert Component in Blade Template\nDESCRIPTION: Illustrates how to render an alert using Blade templating syntax, employing the custom <x-moonshine::alert> component with default content. It facilitates straightforward, declarative UI notification rendering within Blade views.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::alert>Alert</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Html Component Usage - Blade\nDESCRIPTION: Illustrates how to use the Html component within a Blade template. It leverages the `<x-moonshine::layout.html>` component tag. The dependencies are Blade templating engine and the `<x-moonshine::layout.html>`, `<x-moonshine::layout.head />` and `<x-moonshine::layout.body>` Blade components. It outputs an HTML structure with Head and Body sections. \nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/html.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.html>\n    <x-moonshine::layout.head />\n    <x-moonshine::layout.body>\n        // ...\n    </x-moonshine::layout.body>\n</x-moonshine::layout.html>\n```\n\n----------------------------------------\n\nTITLE: Applying Versioning to Assets in MoonShine (PHP)\nDESCRIPTION: Shows how to add a version query string (`?v=...`) to asset URLs for cache busting using the `version()` method on an asset instance like `Js::make()`. Defaults to the MoonShine framework version if not explicitly specified.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\Js;\n\n// Adding a version to an individual asset\nJs::make('/js/app.js')->version('1.0.0');\n\n// Result: /js/app.js?v=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Editable Table in PHP\nDESCRIPTION: This snippet demonstrates using the `editable()` method to make the table editable, switching all fields to the `defaultMode` (form mode). This allows the user to edit the table directly.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n->editable()\n```\n\n----------------------------------------\n\nTITLE: Defining the Thumbnails Component Make Method Signature in PHP\nDESCRIPTION: Specifies the method signature for the static `make` factory method of the `Thumbnails` component. The `$items` parameter accepts a single `FileItem`, a string representing an image path, an array of paths/FileItems, or null.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/thumbnails.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(FileItem|string|array|null $items)\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to ActionButton in PHP\nDESCRIPTION: Shows how to use the `icon()` method to associate an icon (identified by its name, e.g., 'pencil') with an `ActionButton`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->icon('pencil')\n```\n\n----------------------------------------\n\nTITLE: Basic Box Implementation in PHP and Blade\nDESCRIPTION: Demonstrates how to create a basic Box component containing an Alert with text content using PHP class syntax, and the equivalent implementation using Blade template syntax.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/box.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Alert;\n\nBox::make([\n    Alert::make()->content('Text')\n]);\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box>\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Making Alert Removable in Blade Template\nDESCRIPTION: Shows how to specify the 'removable' attribute within the Blade component to allow alert notifications to be dismissed automatically or by user action.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_7\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::alert removable=\"true\">\n    Alert\n</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: Adding Assets within a MoonShine Layout Class (PHP)\nDESCRIPTION: Shows how to define assets specific to a custom MoonShine layout (e.g., `MoonShineLayout` extending `CompactLayout`) by overriding the `assets()` method. The method should return an array of asset objects, potentially using Vite for asset handling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse Illuminate\\Support\\Facades\\Vite;\nuse MoonShine\\AssetManager\\Js;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    protected function assets(): array\n    {\n        return [\n            Js::make(Vite::asset('resources/js/app.js'))\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using virtualName for Fields with Example\nDESCRIPTION: This code snippet demonstrates the use of the `virtualName()` method to work with multiple file fields in DOM depending on a certain condition. In this example, `virtualColumn()` is used to make the name attribute of two file fields unique. The example shows how the fields can be processed by the `onApply()` method. It helps manage scenarios where different fields need to be present conditionally.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// это поле отображается в DOM на одном условии\nFile::make('image')\n\n// это поле отображается в DOM на другом условии\nFile::make('image')\n```\n\nLANGUAGE: php\nCODE:\n```\nFile::make('image')\n    ->virtualColumn('image_1')\n\n// ...\n\nFile::make('image')\n    ->virtualColumn('image_2')\n```\n\n----------------------------------------\n\nTITLE: Customizing StackFields Display with Additional Components in PHP\nDESCRIPTION: Shows how to customize the visual layout of StackFields by inserting UI components such as LineBreak to control formatting. The fields() method accepts an array with mixed field components and formatting elements to modify how fields render together. Dependencies include MoonShine UI Fields for LineBreak and others. This enables enhanced control over field appearance within the grouped context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/stack-fields.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nStackFields::make('Title')->fields([\n    Text::make('Title'),\n    LineBreak::make(), // добавляет перенос строки\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Select Options MoonShine Select PHP\nDESCRIPTION: Illustrates how to add images to select options using the `optionProperties` method with a Closure returning an array. The array keys correspond to option values, and the values contain properties like the image URL.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        1 => 'Andorra',\n        2 => 'United Arab Emirates',\n    ])\n    ->optionProperties(fn() => [\n        1 => ['image' => 'https://moonshine-laravel.com/images/ad.png'],\n        2 => ['image' => 'https://moonshine-laravel.com/images/ae.png'],\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Group with Nested Items in MoonShine\nDESCRIPTION: This snippet shows how to organize menu items into a group using MenuGroup, allowing for a hierarchical menu structure. It groups admin-related links with an icon identifier.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('System', [\n                MenuItem::make('Admins', MoonShineUserResource::class),\n                MenuItem::make('Roles', MoonShineUserRoleResource::class),\n            ])\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MoonShine Handler Generation - Shell\nDESCRIPTION: This command generates a basic handler class in the `app/MoonShine/Handlers` directory.  After running this command, the generated handler can be extended to create custom import or export handlers.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/import-export.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:handler\n```\n\n----------------------------------------\n\nTITLE: Limiting Record Count in HasMany Field Preview in PHP\nDESCRIPTION: Shows how to limit the number of records displayed in the HasMany field preview using the limit() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->limit(1)\n```\n\n----------------------------------------\n\nTITLE: Creating Color Instance in PHP (Color Component)\nDESCRIPTION: This snippet demonstrates how to create a `Color` component instance in PHP. It uses the `make()` method, which accepts either a string or an enum value from `ColorEnum`.  The component renders an HTML `<div>` filled with the specified color.  Dependencies: `MoonShine\\Support\\Enums\\Color` (as ColorEnum).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/color.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\Color as ColorEnum;\n\nmake(string|ColorEnum $color)\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to an Alert with the Alert Class in PHP\nDESCRIPTION: Explains how to include an icon within an alert by passing the icon name (e.g., 'academic-cap') to the `icon` named argument in the `Alert::make()` method. Requires icon definitions to be available in the project.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nAlert::make(icon: \"academic-cap\")\n    ->content('Text'),\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Resource Methods for ResourceWithParent Trait in PHP\nDESCRIPTION: Shows the required methods to be defined when using the ResourceWithParent trait to specify parent resource and relation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nprotected function getParentResourceClassName(): string\n{\n    return PostResource::class;\n}\n\nprotected function getParentRelationName(): string\n{\n    return 'post';\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting MoonShine Spinner make() Parameters (PHP)\nDESCRIPTION: Provides the signature and parameter definitions for the `make` method used to create a MoonShine Spinner component programmatically in PHP. It details the purpose of the `$size`, `$color`, `$fixed`, and `$absolute` arguments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    string $size = 'sm',\n    string|Color $color = '',\n    bool $fixed = false,\n    bool $absolute = false,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous JSON Data Removal Using PHP and JavaScript\nDESCRIPTION: This snippet defines a form field for JSON data with a removable attribute, allowing asynchronous deletion of data entries via fetch API. It includes a server-side method 'removeJsonData' to handle the deletion, updating the resource data array by removing the specified index and re-sorting it. Dependencies include PHP framework components and JavaScript for event handling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/async-remove-on-click.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        // ...\n\n        Json::make('Data')->fields([\n            Text::make('Title'),\n        ])->removable(attributes: [\n            'data-async-url' => $this->getActivePage()\n                ? $this->getRouter()->getEndpoints()->method('removeAvatar', params: ['resourceItem' => $this->getItemID()])\n                : null,\n            '@click.prevent' => <<<'JS'\n                fetch(`${$event.target.closest('a').dataset.asyncUrl}&index=${$event.target.closest('tr').rowIndex}`).then(() => remove())\n            JS\n        ]),\n\n        // ...\n    ];\n}\n\npublic function removeJsonData(MoonShineRequest $request): void\n{\n    $item = $request->getResource()?->getItem();\n    $index = $request->integer('index') - 1;\n\n    if(is_null($item)) {\n        return;\n    }\n\n    $data = $item->data->toArray();\n    unset($data[$index]);\n    sort($data);\n\n    $item->update(['data' => $data]);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FieldsGroup - PHP\nDESCRIPTION: This snippet demonstrates how to create a `FieldsGroup` instance and initialize it with an array of `FieldContract` objects.  The `$components` parameter accepts an iterable of `FieldContract` objects, such as `Text` and `Email` fields.  This is the basic setup for using the `FieldsGroup` component, allowing for organized field management.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Implementing ImportExportConcern Trait in PHP\nDESCRIPTION: This code snippet shows how to include the `ImportExportConcern` trait and implement the `HasImportExportContract` interface within a MoonShine ModelResource class. It's the foundational step for enabling import and export functionality within a specific resource.  The `use` statements bring in the necessary traits and interfaces from the `MoonShine\\ImportExport` namespace. The example class `CategoryResource` extends `ModelResource` and is prepared for import and export operations by using the trait and implementing the contract.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Card Header Using Header Method in PHP\nDESCRIPTION: This PHP snippet configures a custom header for a MoonShine Card object by invoking the header() method, which accepts a closure returning an HTML badge component. It enhances the card's UI by adding a labeled header, useful for tags like \"new\" or status indicators. Requires MoonShine UI components such as Badge and usage of closures for dynamic HTML generation. The input is a closure that returns the Badge component, which is rendered as part of the card header.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->header(static fn() => Badge::make('new', 'success'))\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumbs Using PHP Class in Moonshine\nDESCRIPTION: This snippet demonstrates how to instantiate the Breadcrumbs component in PHP by calling the static make() method with an array of breadcrumb items. Each item maps a URL to its display name. Dependencies include MoonShine\\UI\\Components\\Breadcrumbs class. It outputs a Breadcrumbs object configured with the specified items, suitable for use in server-side rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/breadcrumbs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Breadcrumbs;\n\nBreadcrumbs::make([\n    '/' => 'Home',\n    '/articles' => 'Articles',\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Spinner in PHP\nDESCRIPTION: Defines a PHP function to create a Spinner component with customizable size, color, and positioning, serving as the core logic for spinner instantiation within PHP applications. It includes parameters for size ($size), color ($color), fixed positioning ($fixed), and absolute positioning ($absolute), with default values set for convenience.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n    string $size = 'sm',\n    string|Color $color = '',\n    bool $fixed = false,\n    bool $absolute = false,\n)\n```\n\n----------------------------------------\n\nTITLE: Add TableBuilder Top Slots PHP\nDESCRIPTION: Provides methods ('topLeft' and 'topRight') to add custom content (e.g., Div components) above the table on the left or right side.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    // ..\n    ->topLeft(function (): array {\n        return [];\n    })\n    ->topRight(function (): array {\n        return [\n            Div::make([\n                // ..\n            ])\n        ];\n    })\n```\n\n----------------------------------------\n\nTITLE: Registering Resources and Pages in MoonShine PHP ServiceProvider\nDESCRIPTION: This PHP snippet demonstrates how to use the ServiceProvider's `boot` method to register MoonShine resources and pages automatically when the package is loaded. It utilizes the `CoreContract` (MoonShine instance) to access methods for adding components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:5]\nnamespace Author\\MoonShineMyPackage;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\n\nclass MyPackageServiceProvider extends ServiceProvider\n{\n    /** @param MoonShine $core */\n    public function boot(CoreContract $core): void\n    {\n        $core\n            ->resources([\n                MyPackageResource::class\n            ])\n            ->page([\n                MyPackagePage::class\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Initialization Logic with booted() Method in MoonShine PHP Page\nDESCRIPTION: Shows how to override the protected `booted()` lifecycle method to execute code when MoonShine instantiates the page in the system during bootstrap. The parent method is called to preserve default initialization behavior, providing a hook for additional startup configuration or event binding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass PostPage extends Page\n{\n    // ...\n\n    protected function booted(): void\n    {\n        parent::booted();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Body Component (PHP)\nDESCRIPTION: Demonstrates how to instantiate the MoonShine `Body` UI component in PHP code. It uses the static `make` method which accepts an optional iterable of child components to be placed inside the `<body>` tag. The `$components` parameter allows nesting other layout elements or UI components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/body.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Body;\n\nBody::make([\n    // ... child components\n])\n```\n\n----------------------------------------\n\nTITLE: Displaying Relation as a Tree Structure\nDESCRIPTION: Uses 'tree()' method to represent nested hierarchical data, building a tree based on a parent column for categories or similar structures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->tree('parent_id')\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Spinner Instance (PHP Class)\nDESCRIPTION: Demonstrates the basic programmatic instantiation of the MoonShine Spinner component in PHP code using the static `make()` method. This snippet shows how to get a basic spinner instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Spinner;\n\nSpinner::make()\n```\n\n----------------------------------------\n\nTITLE: Generating Pest Test File for MoonShine Resource (Shell)\nDESCRIPTION: Uses the `php artisan moonshine:resource` command with the `--pest` flag to generate a Pest test file instead of a PHPUnit file for the specified MoonShine resource (`PostResource` in this example).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/testing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource PostResource --pest\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Card\nDESCRIPTION: Demonstrates how to add actions to the Card component using the `actions()` method. The actions are created using the `ActionButton` component and are configured with a label and a route. Requires the `ActionButton` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->actions(\n        static fn() => ActionButton::make('Edit', route('name.edit'))\n    )\n```\n\n----------------------------------------\n\nTITLE: Render Breadcrumbs Component Blade\nDESCRIPTION: This snippet illustrates how to render the `Breadcrumbs` component directly within a Blade template using its corresponding Blade component tag (`<x-moonshine::breadcrumbs>`). The breadcrumb items are passed as an associative array to the `:items` attribute.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/breadcrumbs.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::breadcrumbs\n    :items=\"[\n        '/' => 'Home',\n        '/articles' => 'Articles',\n    ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Visibility with Closure PHP\nDESCRIPTION: This snippet shows how to use the `canSee()` method to control menu item visibility within the `MoonShineLayout` class.  The visibility is determined by a closure which in this case checks user ID. Dependencies: MoonShine framework and `MenuElementContract`. Input: Closure that has access to the context of the menu element. Output: The menu item is displayed if the closure returns true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:start]\nnamespace App\\Providers;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuDivider;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('System', [\n                MenuItem::make('Admins', MoonShineUserResource::class),\n                MenuDivider::make()\n                    ->canSee(fn() => true),\n                MenuItem::make('Roles', MoonShineUserRoleResource::class)\n                    ->canSee(fn() => false)\n            ])\n                ->canSee(static fn(): bool => request()->user('moonshine')?->id === 1)\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Loader View Path in PHP (Moonshine)\nDESCRIPTION: This PHP snippet demonstrates how to globally change the Blade view used for the Loader component within the Moonshine framework. This involves calling the `Loader::changeView()` method, passing in the path to the custom Blade view. This is typically done within the `ServiceProvider`. The output will render the custom view instead of the default loader.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/loader.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nLoader::changeView('my-custom-view-path');\n```\n\n----------------------------------------\n\nTITLE: Rendering ThemeSwitcher Component in Blade Template\nDESCRIPTION: This Blade template snippet demonstrates how to render the ThemeSwitcher component within a MoonShine Blade layout. Using the custom Blade component tag <x-moonshine::layout.theme-switcher />, it embeds an interactive icon button for switching themes in the user interface, supporting both light and dark appearance layouts.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/theme-switcher.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.theme-switcher />\n```\n\n----------------------------------------\n\nTITLE: Toggling Modal using MoonShine Global Class\nDESCRIPTION: This JavaScript snippet showcases toggling a modal using the global `MoonShine` class, simplifying modal event handling. This assumes that the `MoonShine` object and `ui.toggleModal` method are available in the global scope.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMoonShine.ui.toggleModal('my-modal')\n```\n\n----------------------------------------\n\nTITLE: Integrating MoonShine When Component in Layout (PHP)\nDESCRIPTION: This example demonstrates how to embed the `When` component within a MoonShine layout, specifically within a `Sidebar`. It shows conditional rendering of a `Profile` component based on a configuration flag (`moonshine.auth.enabled`), illustrating the practical application of the `$condition` and `$components` parameters. Requires the `MoonShine\\UI\\Components\\When` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/when.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\UI\\Components\\When;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    public function build(): Layout\n    {\n        return Layout::make([\n            // ...\n            Sidebar::make([\n                Menu::make()->customAttributes(['class' => 'mt-2']),\n                When::make(\n                    static fn() => config('moonshine.auth.enabled', true),\n                    static fn() => [Profile::make(withBorder: true)],\n                )\n            ]),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine OffCanvas toggleEvents method PHP\nDESCRIPTION: Shows the method signature for the `toggleEvents` method, which allows attaching additional JavaScript events to the OffCanvas open/close actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ntoggleEvents(array $events, bool $onlyOpening = false, $onlyClosing = false)\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeCast Class - Shell\nDESCRIPTION: Generates a custom TypeCast class for handling custom data transformations in MoonShine. The file is saved under app/MoonShine/TypeCasts and can be used to control how fields are displayed or stored. Custom namespaces/directory can be set; requires MoonShine and Laravel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:type-cast\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping MoonShine Package Resources in a Laravel ServiceProvider (PHP)\nDESCRIPTION: Registers MoonShine package resources and pages via the ServiceProvider's boot method using dependency injection. Requires MoonShine and Laravel as dependencies, and expects classes such as MyPackageResource and MyPackagePage to be defined. The method $core->resources([])->page([]) is used to hook new resources and pages into the application's admin ecosystem.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Author\\MoonShineMyPackage;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\n\nclass MyPackageServiceProvider extends ServiceProvider\n{\n    /** @param MoonShine $core */\n    public function boot(CoreContract $core): void\n    {\n        $core\n            ->resources([\n                MyPackageResource::class\n            ])\n            ->page([\n                MyPackagePage::class\n            ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Component in Blade\nDESCRIPTION: This snippet illustrates how to use the `Color` component within a Blade template. It utilizes a Blade component with the name `x-moonshine::color`.  The `:color` attribute is passed a string representing a color name, such as `'red'`. This will render an HTML `<div>` with the specified color.  Dependencies: The Moonshine framework and the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/color.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::color :color=\"'red'\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the Title Component Factory Method (PHP)\nDESCRIPTION: Signature of the static `make` factory method for the `Title` component. It accepts an optional value (string or Closure) for the title content and an integer for the heading level (e.g., 1 for <h1>).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/title.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string|null $value,\n    int $h = 1,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Form Request Validation (PHP)\nDESCRIPTION: Defines the `AuthenticateFormRequest` class, extending Laravel's `FormRequest`. The `authorize` method ensures only guest users can submit the login form. The `rules` method specifies validation rules: the 'email' field is required, and the 'password' field is required and must adhere to default password complexity rules.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rules\\Password;\n\nclass AuthenticateFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'email' => ['required'],\n            'password' => ['required', Password::default()],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding/Overriding Component Attributes in PHP\nDESCRIPTION: Describes customAttributes() which allows adding or replacing multiple component attributes at once. Takes an array of attributes to add and a boolean override flag to determine whether existing attributes are overwritten, enabling mass customization of component properties.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ncustomAttributes(\n    array $attributes,\n    bool $override = false\n)\n\n$component->customAttributes(['data-role' => 'admin'], true);\n```\n\n----------------------------------------\n\nTITLE: Changing heading tags with tag() method\nDESCRIPTION: This snippet demonstrates how to override the default heading tag by using the `tag()` method to specify custom HTML tags such as `<p>`. It enables flexible markup choices for semantic or styling purposes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/heading.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// <p class=\"h1\">\nHeading::make('Title', 1)\n    ->tag('p'),\n\n// <p class=\"h2\">\nHeading::make('Title')\n    ->tag('p')\n    ->h(2),\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Scheme in MoonShine Layout Using PHP and ColorManager\nDESCRIPTION: This PHP snippet overrides the `colors()` method in a MoonShine layout class to define a detailed color palette using the `ColorManagerContract`. It sets primary, secondary, body colors, and various dark mode color shades by calling chained methods like `primary()`, `dark()`, `successBg()`, `warningText()`, etc. The method distinguishes normal and dark mode colors by the boolean `dark` parameter. This allows fine-grained control over UI color theming adapted to different states and themes. Requires the color manager dependency and proper MoonShine layout inheritance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    /**\n     * @param  ColorManager  $colorManager\n     */\n    protected function colors(ColorManagerContract $colorManager): void\n    {\n        $colorManager\n            ->primary('#1E96FC')\n            ->secondary('#1D8A99')\n            ->body('249, 250, 251')\n            ->dark('30, 31, 67', 'DEFAULT')\n            ->dark('249, 250, 251', 50)\n            ->dark('243, 244, 246', 100)\n            ->dark('229, 231, 235', 200)\n            ->dark('209, 213, 219', 300)\n            ->dark('156, 163, 175', 400)\n            ->dark('107, 114, 128', 500)\n            ->dark('75, 85, 99', 600)\n            ->dark('55, 65, 81', 700)\n            ->dark('31, 41, 55', 800)\n            ->dark('17, 24, 39', 900)\n            ->successBg('209, 255, 209')\n            ->successText('15, 99, 15')\n            ->warningBg('255, 246, 207')\n            ->warningText('92, 77, 6')\n            ->errorBg('255, 224, 224')\n            ->errorText('81, 20, 20')\n            ->infoBg('196, 224, 255')\n            ->infoText('34, 65, 124');\n\n        $colorManager\n            ->body('27, 37, 59', dark: true)\n            ->dark('83, 103, 132', 50, dark: true)\n            ->dark('74, 90, 121', 100, dark: true)\n            ->dark('65, 81, 114', 200, dark: true)\n            ->dark('53, 69, 103', 300, dark: true)\n            ->dark('48, 61, 93', 400, dark: true)\n            ->dark('41, 53, 82', 500, dark: true)\n            ->dark('40, 51, 78', 600, dark: true)\n            ->dark('39, 45, 69', 700, dark: true)\n            ->dark('27, 37, 59', 800, dark: true)\n            ->dark('15, 23, 42', 900, dark: true)\n            ->successBg('17, 157, 17', dark: true)\n            ->successText('178, 255, 178', dark: true)\n            ->warningBg('225, 169, 0', dark: true)\n            ->warningText('255, 255, 199', dark: true)\n            ->errorBg('190, 10, 10', dark: true)\n            ->errorText('255, 197, 197', dark: true)\n            ->infoBg('38, 93, 205', dark: true)\n            ->infoText('179, 220, 255', dark: true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Filled Button-Styled Link (Blade)\nDESCRIPTION: Demonstrates how to create a filled, button-styled link using the `<x-moonshine::link-button>` Blade component by setting the `:filled` attribute dynamically to `true`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::link-button\n    href=\"#\"\n    :filled=\"true\"\n>\n    Link\n</x-moonshine::link-button>\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Values in MoonShine Json Field in PHP\nDESCRIPTION: Describes setting default field values for Json configurations using the default() method. Accepts an array matching the desired JSON structure for initialization. Applies to all Json modes: keyValue, fields, and onlyValue. Prerequisite: correct structure in default parameter matching the field mode.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->keyValue('Key', 'Value')\n    ->default([\n        [\n            'key' => 'Default key',\n            'value' => 'Default value',\n        ]\n    ]),\n\nJson::make('Product Options', 'options')\n    ->fields([\n        Text::make('Title'),\n        Text::make('Value'),\n        Switcher::make('Active'),\n    ])\n    ->default([\n        [\n            'title' => 'Default title',\n            'value' => 'Default value',\n            'active' => true,\n        ]\n    ]),\n\nJson::make('Values')\n    ->onlyValue()\n    ->default([\n        ['value' => 'Default value']\n    ])\n```\n\n----------------------------------------\n\nTITLE: Sample Usage of HiddenIds within a Bulk Action Button\nDESCRIPTION: This example demonstrates integrating the HiddenIds field into a form for bulk actions. It uses various components such as ActionButton, FormBuilder, and FlexibleRender to create a modal form that includes HiddenIds with the component's name, and handles asynchronous submission with specific styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/hidden-ids.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse MoonShine\\UI\\Components\\FlexibleRender;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\HiddenIds;\nuse MoonShine\\UI\\Components\\FormBuilder;\n\nActionButton::make('Active', route('moonshine.posts.mass-active', $this->uriKey()))\n    ->inModal(\n        'Active',\n        fn (): string => (string) FormBuilder::make(\n            route('moonshine.posts.mass-active', $this->uriKey()),\n            fields: [\n                HiddenIds::make($this->listComponentName()), // the name of the component from which to get the ID\n                FlexibleRender::make(__('moonshine::ui.confirm_message')),\n            ]\n        )\n        ->async()\n        ->submit('Active', ['class' => 'btn-secondary'])\n    )\n    ->bulk()\n```\n\n----------------------------------------\n\nTITLE: Modifying Detail Component\nDESCRIPTION: This snippet illustrates modifying the detail component by applying custom attributes using `modifyDetailComponent()`.  It adds the `data-my-attr` attribute with the `value`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\n\npublic function modifyDetailComponent(ComponentContract $component): ComponentContract\n{\n    return parent::modifyDetailComponent($component)->customAttributes([\n        'data-my-attr' => 'value'\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Title to Dropdown in Blade\nDESCRIPTION: Example of adding a title to a Dropdown component using the Blade component approach. The title attribute is used to set a heading for the dropdown content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/dropdown.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown title=\"Dropdown title\">\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Using lazy() and whenAsync() Methods for Lazy Loading in MoonShine TableBuilder PHP\nDESCRIPTION: The `lazy()` method triggers an immediate async data load when the page loads, while `whenAsync()` conditionally executes logic only during async requests. Combined, these methods facilitate lazy loading data from external sources or APIs. In the example, the TableBuilder loads posts from a JSON placeholder API asynchronously and supports manual reload via an async action button. These methods improve performance by deferring data loading or enabling on-demand updates.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->name('dashboard-table')\n    ->fields([\n        ID::make(),\n        Slug::make('Slug'),\n        Text::make('Title'),\n        Preview::make('Image')->image()\n    ])\n    ->async()\n    ->lazy()\n    ->whenAsync(\n        fn(TableBuilder $table) => $table->items(\n            Http::get('https://jsonplaceholder.org/posts')->json()\n        )\n    ),\n```\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Reload')\n    ->async(events: [AlpineJs::event(JsEvent::TABLE_UPDATED, 'my-table')]),\n\nTableBuilder::make()\n    ->name('my-table')\n    ->fields([\n        ID::make(),\n        Slug::make('Slug'),\n        Text::make('Title'),\n        Preview::make('Image')->image()\n    ])\n    ->async()\n    ->lazy()\n    ->whenAsync(\n        fn(TableBuilder $table) => $table->items(\n            Http::get('https://jsonplaceholder.org/posts')->json()\n        )\n    ),\n    ->withNotFound()\n```\n\n----------------------------------------\n\nTITLE: Defining Laravel Policy for MoonShine (PHP)\nDESCRIPTION: This code defines a Laravel policy for a MoonShine resource. It includes methods for `viewAny`, `view`, `create`, `update`, `delete`, `restore`, `forceDelete`, and `massDelete`. Each method accepts a `MoonshineUser` instance and optionally a model instance, returning a boolean indicating whether the user is authorized to perform the action. This extends HandlesAuthorization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/authorization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\nuse MoonShine\\Laravel\\Models\\MoonshineUser;\n\nclass PostPolicy\n{\n    use HandlesAuthorization;\n\n    public function viewAny(MoonshineUser $user)\n    {\n        return true;\n    }\n\n    public function view(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function create(MoonshineUser $user)\n    {\n        return true;\n    }\n\n    public function update(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function delete(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function restore(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function forceDelete(MoonshineUser $user, Post $model)\n    {\n        return true;\n    }\n\n    public function massDelete(MoonshineUser $user)\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Component Attributes with removeAttribute()\nDESCRIPTION: Shows how to remove an attribute from a component using the removeAttribute() method which takes the attribute name as a parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nremoveAttribute(string $name)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->removeAttribute('data-id');\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication Middleware in MoonShineServiceProvider\nDESCRIPTION: This snippet demonstrates setting the authentication middleware through `MoonShineServiceProvider` using the `authMiddleware` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$config->authMiddleware(Authenticate::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Pipelines (config)\nDESCRIPTION: This snippet shows how to configure authentication pipelines in `config/moonshine.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    // ...\n    'pipelines' => [\n        // ...\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Dispatching JavaScript Events Programmatically (PHP)\nDESCRIPTION: Describes how to programmatically dispatch JavaScript events from PHP using the dispatchEvent() method, with support for excluding payloads or query parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\ndispatchEvent(array|string $events)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Refresh')\n    ->dispatchEvent(\n        AlpineJs::event(JsEvent::TABLE_UPDATED, 'index-table')\n    )\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Refresh')\n    ->dispatchEvent(\n        AlpineJs::event(JsEvent::TABLE_UPDATED, 'index-table'),\n        exclude: ['something'],\n    )\n```\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Refresh')\n    ->dispatchEvent(\n        AlpineJs::event(JsEvent::TABLE_UPDATED, 'index-table'),\n        withoutPayload: true\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Methods for MoonShine Components in PHP\nDESCRIPTION: Demonstrates how to control the visibility of MoonShine components using conditional methods such as canSee(), when(), and unless(). These methods accept callbacks or boolean values to determine whether a component should be rendered. Dependencies include the Box component class. Key parameters include closures that receive the component context and boolean expressions to trigger conditional rendering. Expected input is a callback or condition; the output affects whether the component is displayed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nBox::make()\n    ->canSee(function (Box $ctx) {\n        return true;\n    })\n```\n\nLANGUAGE: php\nCODE:\n```\nwhen(\n    $value = null,\n    ?callable $callback = null,\n    ?callable $default = null,\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nBox::make()\n    ->when(fn() => true, fn(Box $ctx) => $ctx)\n```\n\nLANGUAGE: php\nCODE:\n```\nunless(\n    $value = null,\n    ?callable $callback = null,\n    ?callable $default = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding SocialAuth Component\nDESCRIPTION: This snippet shows how to add the `SocialAuth` component to a profile page.  It needs to be included if the default views have been overridden.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Socialite\\Components\\SocialAuth;\n\nprotected function components(): iterable\n{\n    return [\n        // ...\n        SocialAuth::make(profileMode: true),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Pagination in MoonShine (PHP)\nDESCRIPTION: Adjusts pagination settings, including items per page via 'itemsPerPage' and enables cursor-based pagination with 'cursorPaginate'. Useful for large datasets needing efficient navigation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected int $itemsPerPage = 25;\n    // ...\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $cursorPaginate = true;\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Grid and Columns with Text in Blade\nDESCRIPTION: This Blade code creates a grid layout with two columns, utilizing MoonShine's layout components. The `x-moonshine::layout.grid` component is used as the container.  Inside, two `x-moonshine::layout.column` components are used, each set to span 6 columns both on large screens (`colSpan`) and smaller screens (`adaptiveColSpan`).  Each column then displays text generated by `fake()->text()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/grid.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.grid>\n    <x-moonshine::layout.column adaptiveColSpan=\"6\" colSpan=\"6\">\n        {{ fake()->text() }}\n    </x-moonshine::layout.column>\n    <x-moonshine::layout.column adaptiveColSpan=\"6\" colSpan=\"6\">\n        {{ fake()->text() }}\n    </x-moonshine::layout.column>\n</x-moonshine::layout.grid>\n```\n\n----------------------------------------\n\nTITLE: Save TableBuilder State in URL PHP\nDESCRIPTION: Enables saving the current state of the table (pagination, filters, sort) in the browser's URL using pushState API.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n->pushState()\n```\n\n----------------------------------------\n\nTITLE: Overriding Footer Menu and Copyright in MoonShine CompactLayout Using PHP\nDESCRIPTION: This snippet demonstrates how to customize the footer menu links and copyright text by overriding getFooterMenu() and getFooterCopyright() methods in a PHP class extending MoonShine's CompactLayout. It shows minimal code required to add custom links and change the displayed footer copyright.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    protected function getFooterMenu(): array\n    {\n        return [\n            'https://example.com' => 'Custom link',\n        ];\n    }\n\n    protected function getFooterCopyright(): string\n    {\n        return 'MoonShine';\n    }\n\n    public function build(): Layout\n    {\n        return parent::build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Profile Updates in ProfileFormRequest (PHP)\nDESCRIPTION: Defines validation rules within `ProfileFormRequest` for the user profile update form. The `authorize` method ensures only authenticated users (`auth()->check()`) can submit updates. The `rules` method requires a `name`, a valid `email` with DNS check that must be unique in the `users` table (ignoring the current user's ID), and an optional `password` that must be confirmed if provided.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\n\nclass ProfileFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->check();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'name' => ['required'],\n            'email' => ['required', 'email:dns', Rule::unique('users')->ignore(auth()->id())],\n            'password' => ['confirmed'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using icon() with 'm.academic-cap' in Mini Style in PHP\nDESCRIPTION: This snippet calls the `icon()` function with the 'm.academic-cap' icon, referencing the Mini style of Heroicons. The output will be the HTML for the 'academic-cap' icon rendered in the mini style.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n->icon('m.academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Customizing TR/TD Attributes via Resource in MoonShine (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the attributes of `<tr>` and `<td>` elements in a MoonShine table directly through the resource. It uses the `trAttributes()` and `tdAttributes()` methods, which accept closures that return attribute arrays based on the data, row, and cell.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nnamespace App\\MoonShine\\Resources;\n\nuse Closure;\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function tdAttributes(): Closure\n    {\n        return fn(?DataWrapperContract $data, int $row, int $cell) => [\n            'width' => '20%'\n        ];\n    }\n\n    protected function trAttributes(): Closure\n    {\n        return fn(?DataWrapperContract $data, int $row) => [\n            'data-tr' => $row\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Parameters with Fragment Update\nDESCRIPTION: This code shows how to pass extra request parameters to a fragment update operation, enabling server-side handling of additional data during asynchronous requests.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nFragment::make($components)\n    ->name('fragment-name')\n    ->updateWith(params: ['resourceItem' => request('resourceItem')]),\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Button-Styled Link (Blade)\nDESCRIPTION: Shows how to render a link styled as a button using the `<x-moonshine::link-button>` Blade component. The `href` attribute specifies the link's destination.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::link-button href=\"#\">\n    Link\n</x-moonshine::link-button>\n```\n\n----------------------------------------\n\nTITLE: Publish MoonShine OAG Config using Artisan\nDESCRIPTION: This shell command publishes the configuration file for the OAG package, allowing customization of the OpenApi generation settings. It uses the `vendor:publish` command to copy the service provider and configuration to the application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"MoonShine\\OAG\\Providers\\OAGServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Using icon() Method with HTML - PHP\nDESCRIPTION: This example shows how to pass an HTML icon to the `icon()` method in custom mode. It utilizes the `svg()` function (from the Blade Icons package) to generate an HTML representation of an icon. The `$custom` parameter is set to `true`. The input is the output of the `svg()` function and the output is the displayed icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n->icon(\n    svg('path-to-icon-pack')->toHtml(),\n    custom: true\n)\n```\n\n----------------------------------------\n\nTITLE: Forcing Dark Mode on MoonShine Sidebar, TopBar, and MobileBar in PHP\nDESCRIPTION: This PHP snippet shows how to force MoonShine components Sidebar, TopBar, and MobileBar into dark mode by adding the CSS class `dark`. By calling `class('dark')` on the component instances returned by `getSidebarComponent()`, `getTopBarComponent()`, or when creating a new `MobileBar`, the UI elements adopt a dark-themed style regardless of the active theme. This approach prevents incorrect color display caused by theme-dependent coloring. The expected input is the existing component instances, and output is their modification with the `dark` class for consistent dark appearance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->getSidebarComponent()->class('dark'),\n\n$this->getTopBarComponent()->class('dark'),\n\nMobileBar::make([\n    // ...\n])->class('dark'),\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Apply Class for a Field (PHP)\nDESCRIPTION: This snippet shows how to register a custom apply class for a specific field within a MoonShine resource. It involves using the `AppliesRegisterContract` within a ServiceProvider's `boot` method. The `for`, `fields`, and `add` methods are used to associate the apply class with the appropriate resource and field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\AppliesRegisterContract;\nuse MoonShine\\UI\\Applies\\AppliesRegister;\nuse App\\MoonShine\\Applies\\FileModelApply;\nuse MoonShine\\UI\\Fields\\File;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     * @param  AppliesRegister  $applies\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n        AppliesRegisterContract $applies,\n    ): void\n    {\n        $applies\n            // resource group, default ModelResource\n            ->for(ModelResource::class)\n            // type fields or filters\n            ->fields()\n            ->add(File::class, FileModelApply::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: REST API CrudResource Example\nDESCRIPTION: This code provides an example implementation of a CrudResource for interacting with a REST API. It shows how to fetch items, find specific items, delete items, and save or update items using the Illuminate HTTP client. The example uses the JSONPlaceholder API.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/crud-resource.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Http\\Client\\Response;\nuse Illuminate\\Support\\Facades\\Http;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\FieldsContract;\nuse MoonShine\\Laravel\\Resources\\CrudResource;\n\nfinal class RestCrudResource extends CrudResource\n{\n    public function getItems(): iterable\n    {\n        yield from Http::get('https://jsonplaceholder.typicode.com/todos')->json();\n    }\n\n    public function findItem(bool $orFail = false): array\n    {\n        yield from Http::get('https://jsonplaceholder.typicode.com/todos/' . $this->getItemID())->json();\n    }\n\n    public function massDelete(array $ids): void\n    {\n        $this->beforeMassDeleting($ids);\n\n        foreach ($ids as $id) {\n            $this->delete(['id' => $id]);\n        }\n\n        $this->afterMassDeleted($ids);\n    }\n\n    public function delete(mixed $item, ?FieldsContract $fields = null): bool\n    {\n        return Http::delete('https://jsonplaceholder.typicode.com/todos/' . $item['id'])->successful();\n    }\n\n    public function save(mixed $item, ?FieldsContract $fields = null): mixed\n    {\n        $data = request()->all();\n\n        if ($item['id'] ?? false) {\n            return Http::put('https://jsonplaceholder.typicode.com/todos/' . $item['id'], $data)->json();\n        }\n\n        $this->isRecentlyCreated = true;\n\n        return Http::post('https://jsonplaceholder.typicode.com/todos', $data)->json();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Footer to MoonShine Dropdown Component (Blade)\nDESCRIPTION: Demonstrates how to include a footer area within the MoonShine Dropdown component's list section using the `footer` slot. The content within this slot will appear below the main content or items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/dropdown.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown>\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n    <x-slot:footer>Dropdown footer</x-slot:footer>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating Template Field with fluent interface - PHP\nDESCRIPTION: This PHP code demonstrates the creation of a `Template` field using the fluent interface. It sets a label for the field and includes a nested `Text` field. This structure allows the creation of custom fields and provides flexibility within the MoonShine framework. The `Template::make()` method initializes the field and the chained methods configure the label and nested fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/template.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Template;\nuse MoonShine\\UI\\Fields\\Text;\n\nTemplate::make()\n    ->setLabel('My Field')\n    ->fields([\n        Text::make('Title')\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to the Main Form Page - MoonShine - PHP\nDESCRIPTION: Demonstrates overriding the `formButtons()` method in a MoonShine resource to add a custom `ActionButton`. This button, labeled 'Link', is configured to call the `updateSomething` method when clicked. It utilizes the `ListOf` support class and requires the `MoonShine\\UI\\Components\\ActionButton` and `MoonShine\\Support\\ListOf` namespaces.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function formButtons(): ListOf\n{\n    return parent::formButtons()\n        ->add(\n            ActionButton::make('Link')->method('updateSomething')\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Old Layout File\nDESCRIPTION: This shell command removes the old MoonShine layout file if it exists in the application. This is an important step because a new layout file is generated during the installation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrm app/MoonShine/MoonShineLayout.php\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine OffCanvas togglerAttributes method PHP\nDESCRIPTION: Shows the method signature for the `togglerAttributes` method, used to add custom HTML attributes to the OffCanvas toggler element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\ntogglerAttributes(array $attributes)\n```\n\n----------------------------------------\n\nTITLE: Accessing Data in onClick with onAfterSet PHP\nDESCRIPTION: Explains how to access associated data (like a model key) within the onClick method by using the onAfterSet lifecycle hook. The onAfterSet closure receives the data and the button instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Alert')\n    ->onAfterSet(function (?DataWrapperContract $data, ActionButton $button) {\n        return $button->onClick(fn() => 'alert('.$data?->getKey().')');\n    })\n```\n\n----------------------------------------\n\nTITLE: ProfileController Update User Profile\nDESCRIPTION: This controller handles updating the user's profile. It retrieves the current user using the `CurrentUser` attribute and updates their data with the validated input from the `ProfileFormRequest`. If a password is provided, it's hashed before being saved. It redirects to the 'profile' route upon successful update.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ProfileFormRequest;\nuse App\\Models\\User;\nuse App\\MoonShine\\Pages\\ProfilePage;\nuse Illuminate\\Container\\Attributes\\CurrentUser;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\n\nfinal class ProfileController extends Controller\n{\n    public function index(\n        ProfilePage $page\n    ): ProfilePage {\n        return $page;\n    }\n\n    public function update(\n        ProfileFormRequest $request,\n        #[CurrentUser] User $user\n    ): RedirectResponse\n    {\n        $data = $request->only(['email', 'name']);\n\n        if ($request->filled('password')) {\n            $data['password'] = Hash::make($request->input('password'));\n        }\n\n        $user->update($data);\n\n        return to_route('profile');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending MoonShine Notifications Directly\nDESCRIPTION: Example of sending notifications directly using the MoonShineNotification static method. Demonstrates various parameters including message text, button configuration, targeting specific admin IDs, setting colors, and custom icons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/notifications.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Notifications\\MoonShineNotification;\nuse MoonShine\\Laravel\\Notifications\\NotificationButton;\nuse MoonShine\\Support\\Enums\\Color;\n\nMoonShineNotification::send(\n    message: 'Notification text',\n    // Необязательная кнопка\n    button: new NotificationButton('Click me', 'https://moonshine.cutcode.dev', attributes: ['target' => '_blank']),\n    // Необязательные ID администраторов (по умолчанию для всех)\n    ids: [1,2,3],\n    // Необязательный цвет иконки\n    color: Color::GREEN,\n    // Необязательная иконка\n    icon: 'information-circle'\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to Component on the Fly in MoonShine\nDESCRIPTION: Example showing how to add assets to a Component on the fly in MoonShine using the addAssets method. This is useful when creating components dynamically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nBox::make()->addAssets([\n    Js::make('/js/custom.js'),\n    Css::make('/css/styles.css')\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpine.js Component Logic\nDESCRIPTION: This JavaScript code snippet initializes the logic for an Alpine.js component named 'myComponent'. It registers the component with Alpine.js, allowing you to define reactive data and methods within the component's scope, such as an `init` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"alpine:init\", () => {\n    Alpine.data(\"myComponent\", () => ({\n        init() {\n            // ...\n        },\n    }))\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Title in moonshine.php\nDESCRIPTION: This shows setting the meta title for the application using the `moonshine.php` configuration file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'title' => 'My Application',\n```\n\n----------------------------------------\n\nTITLE: Modifying BelongsTo Target Column After Fill in MoonShine (PHP)\nDESCRIPTION: Explains how to dynamically change the database foreign key column associated with the `BelongsTo` relationship using the `afterFill` method. A closure is used to set a different column name ('changed_category_id') on the field object after it has been initially populated.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'Category',\n    resource: CategoryResource::class\n)\n->afterFill(\n    fn($field) => $field->setColumn('changed_category_id')\n)\n```\n\n----------------------------------------\n\nTITLE: Including Assets in Main Theme using Blade in MoonShine\nDESCRIPTION: Example showing how to include assets in the main theme of MoonShine using Blade and Vite. This loads the necessary CSS and JavaScript for the default theme.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_15\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout.assets>\n    @vite([\n        'resources/css/main.css',\n        'resources/js/app.js',\n    ], 'vendor/moonshine')\n</x-moonshine::layout.assets>\n```\n\n----------------------------------------\n\nTITLE: Using when Method for Conditional Component Modification\nDESCRIPTION: Shows how to use the when() method that implements a fluent interface to conditionally modify a component when a condition is true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwhen(\n    $value = null,\n    ?callable $callback = null,\n    ?callable $default = null,\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nBox::make()\n    ->when(fn() => true, fn(Box $ctx) => $ctx)\n```\n\n----------------------------------------\n\nTITLE: Filling ActionGroup Buttons with Data Using fill() in PHP\nDESCRIPTION: Demonstrates how to populate all buttons within an ActionGroup with data by invoking the fill() method and passing a DataWrapperContract instance. The method applies the given data context to each ActionButton, enabling dynamic content injection. Requires implementation of DataWrapperContract and existing ActionGroup with ActionButtons. Inputs include the ActionGroup object and a data wrapper; output is an updated ActionGroup with data-bound buttons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-group.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->fill($data)\n```\n\n----------------------------------------\n\nTITLE: Json field in key-value mode\nDESCRIPTION: This code defines a Json field named 'Data' that operates in key-value mode. It uses the `keyValue()` method to configure the field for handling key-value pairs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->keyValue()\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Placeholder in Profile Component Using PHP\nDESCRIPTION: Demonstrates how to set a default avatar placeholder image URL for the Profile component by chaining the avatarPlaceholder method after initialization. The placeholder avatar is defined by a URL string (e.g., a dynamically generated image URL) which is used when no avatar is provided. This requires the Profile class to support the avatarPlaceholder method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/profile.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nProfile::make()->avatarPlaceholder('https://robohash.org/username.png')\n```\n\n----------------------------------------\n\nTITLE: Setting Items and Fields with Method Chaining in PHP\nDESCRIPTION: Shows how to configure CardsBuilder by chaining the items() and fields() methods instead of passing them to the constructor.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->fields([Text::make('Text')])\n    ->items([['text' => 'Value']])\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Field in PHP using MoonShine\nDESCRIPTION: This snippet demonstrates how to create a hidden field using the MoonShine framework in PHP. It utilizes the `Hidden::make()` method, specifying the field's name ('category_id'). The created field will be hidden by default in form building.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/hidden.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Hidden;\n\nHidden::make('category_id')\n```\n\n----------------------------------------\n\nTITLE: Extending MoonShine Layout Assets by Adding Deferred CSS in PHP\nDESCRIPTION: This PHP snippet extends the assets of a MoonShine layout by overriding the `assets()` method in a subclass of `AppLayout`. It returns an array combining parent assets and a new deferred CSS asset, created with `Css::make('/vendor/moonshine/assets/minimalistic.css')->defer()`. This allows injecting additional stylesheets that load asynchronously to optimize page rendering. This requires the `MoonShine\\AssetManager\\Css` class and proper setup of base `AppLayout`. Inputs are asset URL strings; output is the complete asset list used for the layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\AssetManager\\Css;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    protected function assets(): array\n    {\n        return [\n            ...parent::assets(),\n\n            Css::make('/vendor/moonshine/assets/minimalistic.css')->defer(),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a MoonShine Model Resource Class in PHP\nDESCRIPTION: This PHP example shows the declaration of a MoonShine resource class 'PostResource' that extends 'ModelResource' to provide CRUD functionality for the 'Post' Eloquent model. It customizes resource properties like the linked model, section title, related relationships to eager load ('category'), and a column used for display in relations and breadcrumbs. The snippet demonstrates basic resource customization in a Laravel project leveraging MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse App\\Models\\Post;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\n/**\n * @extends ModelResource<Post>\n */\nclass PostResource extends ModelResource\n{\n    // Model class reference\n    protected string $model = Post::class;\n\n    // Section title in admin panel\n    protected string $title = 'Posts';\n\n    // Eager load relations\n    protected array $with = ['category'];\n\n    // Column to display in relations and breadcrumbs\n    protected string $column = 'id';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Assets in Compact Theme using Blade in MoonShine\nDESCRIPTION: Example showing how to include assets in the compact theme of MoonShine using Blade and Vite. This loads the necessary CSS (including minimalistic styles) and JavaScript.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_16\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout.assets>\n    @vite([\n        'resources/css/main.css',\n        'resources/css/minimalistic.css',\n        'resources/js/app.js',\n    ], 'vendor/moonshine')\n</x-moonshine::layout.assets>\n```\n\n----------------------------------------\n\nTITLE: Sending MoonShine Notifications via Dependency Injection\nDESCRIPTION: Alternative approach to sending notifications using dependency injection with the MoonShineNotificationContract interface. This method is useful when working within Laravel's service container.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/notifications.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Contracts\\Notifications\\MoonShineNotificationContract;\n\npublic function di(MoonShineNotificationContract $notification)\n{\n    $notification->notify(\n        'Hello'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Switcher Field in PHP (MoonShine)\nDESCRIPTION: Demonstrates how to create an instance of the `Switcher` field in PHP using the static `make` method provided by the MoonShine framework. The first argument is the field's label ('Publish'), and the second is the corresponding database column name ('is_publish'). This field extends the `Checkbox` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/switcher.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Switcher;\n\nSwitcher::make('Publish', 'is_publish')\n```\n\n----------------------------------------\n\nTITLE: Disable reordering\nDESCRIPTION: This code snippet disables the drag-and-drop reordering functionality for a Json field by calling `reorderable(false)`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n->reorderable(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Title for MoonShine Dropdown Component (Blade)\nDESCRIPTION: Illustrates how to add a title to the list section within the MoonShine Dropdown component using the `title` attribute on the Blade X-component. This adds a heading above the list content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/dropdown.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown title=\"Dropdown title\">\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Json field with default value\nDESCRIPTION: This code shows how to set a default value for a Json field using the `default()` method. The default value is an array of objects or values depending on the field's configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->keyValue('Key', 'Value')\n    ->default([\n        [\n            'key' => 'Default key',\n            'value' => 'Default value',\n        ]\n    ]),\n\nJson::make('Product Options', 'options')\n    ->fields([\n        Text::make('Title'),\n        Text::make('Value'),\n        Switcher::make('Active'),\n    ])\n    ->default([\n        [\n            'title' => 'Default title',\n            'value' => 'Default value',\n            'active' => true,\n        ]\n    ]),\n\nJson::make('Values')\n    ->onlyValue()\n    ->default([\n        ['value' => 'Default value']\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Close on Outside Click in PHP\nDESCRIPTION: This shows how to prevent a modal from closing when the user clicks outside the modal window using the `closeOutside()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Заголовок', 'Содержимое...', ActionButton::make('Показать модальное окно', '#'))\n            ->closeOutside(false),\n```\n\n----------------------------------------\n\nTITLE: Creating a Heading with Blade component\nDESCRIPTION: Example of creating a heading using the Blade component approach, with a heading level of 2 and 'Hello world' as content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/heading.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::heading h=\"2\">\n    Hello world\n</x-moonshine::heading>\n```\n\n----------------------------------------\n\nTITLE: MoonShine Field Suffix Method Signature (PHP)\nDESCRIPTION: Displays the method signature for the `suffix()` method. This method is used to add a string suffix to the input element of the field. It accepts a single string argument `$ext` for the suffix text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nsuffix(string $ext)\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Rules in MoonShine PHP ServiceProvider\nDESCRIPTION: This PHP snippet shows how to add custom authorization logic using the `authorizationRules` method provided by the MoonShine Configurator. The provided callback function receives the resource, user, and ability to determine access.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator;\n\n// ...\n\n/**\n * @param  MoonShineConfigurator  $configurator\n */\npublic function boot(ConfiguratorContract $configurator): void\n{\n    $configurator->authorizationRules(\n        static function (ResourceContract $resource, Model $user, Ability $ability): bool {\n            return true;\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Filled Moonshine Link (PHP Class)\nDESCRIPTION: Example of creating a link with a filled background style using the `Link` class. The `filled()` method is chained to the `Link::make` call to apply the filled style.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n    ->filled()\n```\n\n----------------------------------------\n\nTITLE: Initializing the Quill Editor with Alpine.js (JavaScript)\nDESCRIPTION: Frontend JavaScript snippet using Alpine.js to bind a Quill.js editor instance to the form. Listens for Alpine's init event to create the Quill editor and maintain reactive updates to a hidden textarea for form binding. Expects the root node to have the required .ql-editor and .ql-textarea elements; requires Quill.js and Alpine.js to be loaded.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener('alpine:init', () => {\n    Alpine.data('quill', () => ({\n        textarea: null,\n        editor: null,\n\n        init() {\n            this.textarea = this.$root.querySelector('.ql-textarea')\n            this.editor = this.$root.querySelector('.ql-editor')\n\n            const t = this\n\n            this.$nextTick(function() {\n                let quill = new Quill(`#${t.editor.id}`, {\n                    theme: 'snow'\n                });\n\n                quill.on('text-change', () => {\n                    t.textarea.value = t.editor.innerHTML || '';\n                    t.textarea.dispatchEvent(new Event('change'));\n                });\n            })\n        },\n    }))\n})\n\n```\n\n----------------------------------------\n\nTITLE: Making Server-Driven UI Structure Request via HTTP GET\nDESCRIPTION: This HTTP GET request demonstrates how to query the MoonShine server to retrieve the Server-Driven UI (SDUI) structure for the /admin/dashboard page. It uses a custom header 'X-MS-Structure: true' to indicate that the server should return the UI structure as a JSON payload. No other headers are included here, so the full UI structure with states and layout is expected in the response. Dependencies include having access to the MoonShine server endpoint and permissions to access the admin dashboard. The request does not include a message body and returns the UI JSON representation on success.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/sdui.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /admin/dashboard HTTP/1.1\nX-MS-Structure: true\n```\n\n----------------------------------------\n\nTITLE: Overriding getFaviconComponent() to Provide Custom Favicons in MoonShine Layout Using PHP\nDESCRIPTION: This PHP code overrides the protected `getFaviconComponent()` method in a custom layout class to supply a customized set of favicon assets. It calls the parent method and chains `customAssets()` with associative array keys mapping to favicon asset paths. This allows developers to specify different favicon files for platforms and sizes. The code depends on `Favicon` class availability and proper parent method implementation. The output is a favicon component injected with user-defined favicon assets.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    protected function getFaviconComponent(): Favicon\n    {\n        return parent::getFaviconComponent()->customAssets([\n            'apple-touch' => 'favicon_path',\n            '32' => 'favicon_path',\n            '16' => 'favicon_path',\n            'safari-pinned-tab' => 'favicon_path',\n            'web-manifest' => 'favicon_path',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Trait for Resource/Page Extension in MoonShine (PHP)\nDESCRIPTION: Defines a trait which adds assets and modifies form components via magic loadHasMyPackageTrait and modifyFormComponent methods. Fixtures include methods for asset attachment (using Js::make, Css::make) and modal insertion in forms. Requires MoonShine asset classes and a parent::modifyFormComponent implementation; best for enabling feature toggles on specific MoonShine resources.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntrait HasMyPackageTrait\n{\n    public function loadHasMyPackageTrait(): void\n    {\n        $this->getFormPage()->addAssets([\n            Js::make('vendor/my-package/js/app.js'),\n            Css::make('vendor/my-package/css/app.css'),\n        ]);\n    }\n\n    public function modifyFormComponent(ComponentContract $component): ComponentContract\n    {\n        return parent::modifyFormComponent($component)->fields([\n            Modal::make(\n                'This is my package modal.',\n                ''\n            ),\n            ...$component->getFields()->toArray(),\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Carousel Instance using PHP Class\nDESCRIPTION: This snippet shows the instantiation of a Carousel object via the make() method, passing images and alt text. It exemplifies setting properties like items and alt text at creation time in PHP.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/carousel.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nCarousel::make(\n    items: ['/images/image_2.jpg', '/images/image_1.jpg'],\n    alt: fake()->sentence(3)\n)\n```\n\n----------------------------------------\n\nTITLE: Auto-determining Relation Name in HasMany Field in PHP\nDESCRIPTION: Example demonstrating how relation name is automatically determined based on the label using camelCase convention.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Responsive Card Grid Layout with Moonshine Blade Components\nDESCRIPTION: This snippet uses Moonshine Blade components to create a grid layout with a single column that adapts to screen size. Within the column, it renders a card component with dynamic properties for URL, thumbnail image, title, subtitle, and key-value pairs. The card includes a custom header slot for displaying a green badge labeled 'new' and an actions slot with a link button for navigation. Dependencies include Laravel Blade and the Moonshine component library. Inputs are dynamically generated using Laravel’s fake() helper functions. The output is a styled card inside a responsive grid column, ready for integration in a dashboard or UI. It assumes the existence of Moonshine components for layout, card, badge, and buttons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.grid>\n    <x-moonshine::layout.column colSpan=\"4\" adaptiveColSpan=\"12\">\n        <x-moonshine::card\n            url=\"#\"\n            thumbnail=\"/images/image_1.jpg\"\n            :title=\"fake()->sentence(3)\"\n            :subtitle=\"date('d.m.Y')\"\n            :values=\"['ID' => 1, 'Author' => fake()->name()]\"\n        >\n            <x-slot:header>\n                <x-moonshine::badge color=\"green\">new</x-moonshine::badge>\n            </x-slot:header>\n\n            {{ fake()->text() }}\n\n            <x-slot:actions>\n                <x-moonshine::link-button href=\"#\">Read more</x-moonshine::link-button>\n            </x-slot:actions>\n        </x-moonshine::card>\n    </x-moonshine::layout.column>\n</x-moonshine::layout.grid>\n```\n\n----------------------------------------\n\nTITLE: Handling Page Activation Event with onLoad() Method in MoonShine PHP Page\nDESCRIPTION: Illustrates overriding protected `onLoad()` lifecycle hook to run code when the page becomes active and is loaded. The example calls the parent method to maintain base logic and serves as a place to initialize or modify state on page activation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass PostPage extends Page\n{\n    // ...\n\n    protected function onLoad(): void\n    {\n        parent::onLoad();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Data in ActionButton onClick Handler in PHP\nDESCRIPTION: Demonstrates how to access data associated with the `ActionButton` (passed during creation or via context) within the JavaScript executed by `onClick()`. This is achieved by using the `onAfterSet()` method, which provides access to the button's data (`DataWrapperContract`) and the button instance itself.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Alert')\n    ->onAfterSet(function (?DataWrapperContract $data, ActionButton $button) {\n        return $button->onClick(fn() => 'alert('.$data?->getKey().')');\n    })\n```\n\n----------------------------------------\n\nTITLE: Auto-Determining Relation Name with BelongsToMany\nDESCRIPTION: Creates a relation field with only label provided; the relation name is inferred automatically, simplifying configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories')\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Logo Component Override\nDESCRIPTION: This snippet shows how to customize the Logo component within the MoonShine admin panel layout. The  `getLogoComponent()` method allows for returning a custom Logo component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function getLogoComponent(): Logo\n{\n    return Logo::make(\n        $this->getHomeUrl(),\n        $this->getLogo(),\n        $this->getLogo(small: true),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Component with PHP\nDESCRIPTION: Shows the method signature and parameters for creating a Dropdown component using PHP. Parameters include title, toggler, content, items, searchable flag, search placeholder, placement, and footer options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/dropdown.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    ?string $title = null,\n    Closure|string $toggler = '',\n    Closure|Renderable|string $content = '',\n    Closure|array $items = [],\n    bool $searchable = false,\n    Closure|string $searchPlaceholder = '',\n    string $placement = 'bottom-start',\n    Closure|string $footer = '',\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PostImageResource with HasMany and Parent ID (PHP)\nDESCRIPTION: This code defines a `PostImageResource` class that extends `ModelResource` to manage `PostImage` model within the MoonShine framework. It utilizes the `ResourceWithParent` trait to handle relationships with a parent resource (PostResource in this example). The `getParentResourceClassName` and `getParentRelationName` methods are overridden to specify the parent resource. The `formFields` method defines the fields for the resource, including an `Image` field that dynamically sets the storage directory based on the parent's ID fetched using `$this->getParentId()`. The `ID` and `BelongsTo` fields are also included. Dependencies include `App\\Models\\PostImage`, MoonShine UI/Fields and Laravel resources/traits.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/hasmany-parent-id.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Models\\PostImage;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Image;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Laravel\\Traits\\Resource\\ResourceWithParent;\n\nclass PostImageResource extends ModelResource\n{\n    use ResourceWithParent;\n\n    protected string $model = PostImage::class;\n\n    // ...\n\n    protected function getParentResourceClassName(): string\n    {\n        return PostResource::class;\n    }\n\n    protected function getParentRelationName(): string\n    {\n        return 'post';\n    }\n\n    protected function formFields(): iterable\n    {\n        return [\n            ID::make(),\n            BelongsTo::make('Post')\n            Image::make('Path')\n                ->when(\n                    $parentId = $this->getParentId(),\n                    static fn(Image $image): string => $image->dir(\"post_images/$parentId\")\n                )\n            ,\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine Notifications in Service Provider\nDESCRIPTION: Alternative method for configuring notifications through the MoonShine service provider using fluent API methods. This approach offers a programmatic way to adjust notification settings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/notifications.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->useNotifications()\n    ->useDatabaseNotifications();\n```\n\n----------------------------------------\n\nTITLE: Toggling Modal using Native JavaScript Events\nDESCRIPTION: This snippet shows how to toggle a modal using native JavaScript events. This method requires the modal to have a unique name set using the `name()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    this.dispatchEvent(new CustomEvent(\"modal_toggled:my-modal\"))\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Button (PHP)\nDESCRIPTION: Demonstrates how to add a copy button to the Text field using the `copy()` method. When clicked, this button copies the field's value to the clipboard.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nText::make('Токен', 'token')\n    ->copy()\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueMetric Blade Component\nDESCRIPTION: Example of using the ValueMetric as a Blade component to display completed orders count with an icon and optional progress indicator.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::metrics.value\n    title=\"Completed orders\"\n    icon=\"shopping-bag\"\n    :value=\"$count\"\n    :progress=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying HasOne in Modal Window with modalMode()\nDESCRIPTION: Displays the relationship field within a modal window triggered by a button using modalMode(). Optional parameters allow modification of the action button and modal via closures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', 'comment', resource: CommentResource::class)\n    ->modalMode(),\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine OffCanvas to Open by Default PHP\nDESCRIPTION: Demonstrates using the `open()` method to configure an OffCanvas component to be displayed automatically when the page finishes loading.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make('Title', 'Content...', 'Show Panel')\n    ->open()\n```\n\n----------------------------------------\n\nTITLE: Enabling Time Input for DateRange (PHP)\nDESCRIPTION: This code shows how to enable time input for the `DateRange` field using the `withTime()` method.  This extends the functionality of the date range to also include time selection.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nDateRange::make('Dates')\n    ->fromTo('date_from', 'date_to')\n    ->withTime()\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Layout for a MoonShine Page in PHP\nDESCRIPTION: This PHP snippet demonstrates how to assign a custom layout template to a MoonShine page by overriding the `$layout` property with a reference to a layout class. It shows extending the base `Page` class and setting `protected ?string $layout = MyLayout::class;`, which instructs MoonShine to render the page using the user-defined `MyLayout` rather than the default `AppLayout` or `CompactLayout`. Dependencies include having the custom layout class `MyLayout` properly defined and autoloaded. Inputs include the page class and layout class name; output is the page rendered with the specified layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Layouts\\MyLayout;\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected ?string $layout = MyLayout::class;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route from Resource Context\nDESCRIPTION: This code snippet demonstrates how to retrieve a route within the resource context, using the `getRoute` method. This allows for the dynamic construction of URLs. The example specifically shows how to get the route named 'permissions'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/routes.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n$this->getRoute('permissions')\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal with Blade Component\nDESCRIPTION: This example showcases creating a basic modal using the Blade component `<x-moonshine::modal>`. It demonstrates setting the title, content, and adding a slot for outer HTML to include a button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Using Wrapper with Blade Template\nDESCRIPTION: This Blade snippet provides an example of how to utilize the `Wrapper` component within a Blade template for a MoonShine application.  It uses the `<x-moonshine::layout.wrapper>` component within the `<x-moonshine::layout.body>` component to structure the layout.  The `Wrapper` element wraps the content within the layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/wrapper.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.body>\n    <x-moonshine::layout.wrapper>\n        Content\n    </x-moonshine::layout.wrapper>\n</x-moonshine::layout.body>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title and Subtitle Properties in MoonShine PHP Page Class\nDESCRIPTION: Shows how to statically assign a page title and subtitle by setting the protected string properties `$title` and `$subtitle` within a class extending MoonShine's Page. This is used to define page headers shown in the admin UI. The example includes proper namespace declaration and base class import.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected string $title = 'CustomPage';\n\n    protected string $subtitle = 'Подзаголовок';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing moonshine::alert Component in PHP\nDESCRIPTION: Demonstrates how to create an alert instance using the Alert class in PHP, setting content as the primary method of configuration. This snippet serves as a foundational example for programmatically generating alerts in PHP-based systems.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Alert;\n\nAlert::make()->content('Text')\n```\n\n----------------------------------------\n\nTITLE: Disabling Choices.js for Native Select Mode in BelongsTo PHP Field\nDESCRIPTION: Demonstrates the native() method usage to turn off the Choices.js JavaScript library integration in the BelongsTo select field, reverting to the browser's native dropdown rendering. This is useful for simplifying the UI or improving performance when advanced features are unnecessary. The snippet shows a basic BelongsTo field for 'Type' where native mode is enabled, requiring only the MoonShine BelongsTo class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\\n\\nBelongsTo::make('Type')->native()\n```\n\n----------------------------------------\n\nTITLE: Defining Component Slots in MoonShine Layouts Using PHP\nDESCRIPTION: This PHP snippet defines methods to provide arrays of components that populate different UI areas such as sidebar, sidebar top slot, and topbar in a MoonShine layout. The methods `sidebarSlot()`, `sidebarTopSlot()`, and `topBarSlot()` return arrays of component instances (e.g., `Search::make()->enabled()`, `Notifications::make()`) that represent UI widgets. These slots help inject functionality and widgets dynamically into layout parts. Dependencies include component classes like Search and Notifications. The expected output is an array of components to render in the respective layout areas.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nprotected function sidebarSlot(): array\n{\n    return [\n        Search::make()->enabled(),\n        // ...\n    ];\n}\n\nprotected function sidebarTopSlot(): array\n{\n    return [\n        Notifications::make(),\n        // ...\n    ];\n}\n\nprotected function topBarSlot(): array\n{\n    return [\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Iterable Attributes for Nested Components in PHP\nDESCRIPTION: Introduces iterableAttributes() method that adds attributes necessary for managing iterable or nested components. It accepts an integer representing the nesting level, facilitating attribute management in hierarchical or repeated structures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\niterableAttributes(int $level = 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Proxies in Laravel Middleware in PHP\nDESCRIPTION: In Laravel's TrustProxies middleware, the '$proxies' property is set to accept all proxies by assigning an array with a wildcard '*'. This configuration is necessary when the application is behind reverse proxies or load balancers to correctly detect HTTPS requests and generate secure URLs. It requires Laravel framework and proper middleware registration. This adjustment enables HTTPS URLs to be recognized properly in forms and requests.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/troubleshooting.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected $proxies = ['*'];\n```\n\n----------------------------------------\n\nTITLE: Defining Reset Password Page with MoonShine - PHP\nDESCRIPTION: Defines ResetPasswordPage, extending MoonShine\\Laravel\\Pages\\Page, structuring a form for users to reset forgotten passwords. Requires MoonShine UI form fields like Hidden, Text, Password, and PasswordRepeat, as well as routing helpers to retrieve tokens and pre-fill user data. The form enforces required fields, disables input when appropriate, and posts updated credentials to the password.update route. Inputs include token, email, password, and confirmation; output is a rendered password reset page with validation enforced.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse App\\MoonShine\\Layouts\\FormLayout;\nuse Illuminate\\Contracts\\Routing\\UrlRoutable;\nuse MoonShine\\Contracts\\UI\\ComponentContract;\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\UI\\Components\\Layout\\Divider;\nuse MoonShine\\UI\\Components\\Layout\\Flex;\nuse MoonShine\\UI\\Fields\\Hidden;\nuse MoonShine\\UI\\Fields\\Password;\nuse MoonShine\\UI\\Fields\\PasswordRepeat;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass ResetPasswordPage extends Page\n{\n    protected ?string $layout = FormLayout::class;\n\n    /**\n     * @return array<string, string>\n     */\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'ForgotPage';\n    }\n\n    /**\n     * @return list<ComponentContract>\n     */\n    protected function components(): iterable\n    {\n        return [\n            FormBuilder::make()\n                ->class('authentication-form')\n                ->action(route('password.update'))\n                ->fields([\n                    Hidden::make('token')->setValue(request()->route('token')),\n\n                    Text::make('E-mail', 'email')\n                        ->setValue(request()->input('email'))\n                        ->required()\n                        ->readonly(),\n\n                    Password::make(__('Password'), 'password')\n                        ->required(),\n\n                    PasswordRepeat::make(__('Repeat password'), 'password_confirmation')\n                        ->required(),\n                ])->submit(__('Reset password'), [\n                    'class' => 'btn-primary btn-lg w-full',\n            ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Box Component with Custom Icon in PHP and Blade\nDESCRIPTION: Shows how to add an icon to the Box component using the icon() method in PHP class syntax and the moonshine::icon component in Blade template syntax.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/box.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title box', ['Hello!'])->icon('users');\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box title=\"Title box\">\n    <x-moonshine::icon name=\"users\"></x-moonshine::icon>\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Customizing List Component with CardsBuilder (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the list component in a MoonShine resource using the CardsBuilder. It overrides the default list display with a card-based layout, specifying properties such as title, subtitle, URL, and thumbnail. The `getListEventName` method generates an AlpineJs event for updating the cards.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/index-page-cards.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MoonShineUserResource extends ModelResource\n{\n    // ...\n\n    public function getListEventName(?string $name = null, array $params = []): string\n    {\n        $name ??= $this->getListComponentName();\n\n        return AlpineJs::event(JsEvent::CARDS_UPDATED, $name, $params);\n    }\n\n    public function modifyListComponent(ComponentContract $component): ComponentContract\n    {\n        return CardsBuilder::make($this->getItems(), $this->getIndexFields())\n            ->cast($this->getCaster())\n            ->name($this->getListComponentName())\n            ->async()\n            ->overlay()\n            ->title('email')\n            ->subtitle('name')\n            ->url(fn ($user) => $this->getFormPageUrl($user->getKey()))\n            ->thumbnail(fn ($user) => asset($user->avatar))\n            ->buttons($this->getIndexButtons());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translatable Menu Items PHP\nDESCRIPTION: This snippet demonstrates how to use the `translatable()` method with menu items within the `MoonShineLayout` class.  The menu items will use the translation key specified in the `make()` method, or default to the menu item's name for translation. Dependencies: MoonShine framework, Laravel localization, and `AppLayout` class from MoonShine.  Input: The name or the key of the menu element. Output: Translated menu label.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('menu.Comments', CommentResource::class)\n                ->translatable()\n            // or\n            MenuItem::make('Comments', CommentResource::class)\n                ->translatable('menu')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Attributes PHP\nDESCRIPTION: This snippet explains how to add custom attributes to menu groups and items. The `setAttribute()` and `class()` methods, along with the `customAttributes()` method allow to set custom HTML attributes for the menu elements. Dependencies: MoonShine framework. Input: Attribute name and value. Output: Menu item with custom attributes added.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:start]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem; // [tl! collapse:end]\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuGroup::make('System')->setItems([\n                MenuItem::make('Admins', MoonShineUserResource::class),\n                MenuItem::make('Roles', MoonShineUserRoleResource::class)\n                    ->customAttributes(['class' => 'group-li-custom-class'])\n            ])\n                ->setAttribute('data-id', '123')\n                ->class('group-li-custom-class')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Code Line Changes with Torchlight Comments - PHP\nDESCRIPTION: Demonstrates how to annotate line changes in PHP code using special Torchlight comments to indicate additions or removals in documentation examples. Depends on MoonShine MenuItem and SettingResource classes. Inputs are function calls with inline Torchlight annotations; outputs are the highlighted lines for additions (// [tl! add], // [tl! ++]) and removals (// [tl! remove], // [tl! --]). Useful for illustrating code updates, with possible constraints on Torchlight compatibility.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nMenuItem::make('Settings', new SettingResource(), 'heroicons.outline.adjustments-vertical') // [tl! remove]\nMenuItem::make('Settings', SettingResource::class, 'adjustments-vertical') // [tl! add]\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\nMenuItem::make('Settings', new SettingResource(), 'heroicons.outline.adjustments-vertical') // [tl! --]\nMenuItem::make('Settings', SettingResource::class, 'adjustments-vertical') // [tl! ++]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Async Pivot Update in MoonShine\nDESCRIPTION: This PHP code snippet defines the form fields for a MoonShine resource, structuring them into columns. It demonstrates how to use `BelongsToMany` with nested fields and configure a `Switcher` pivot field (`Approved`) to trigger an asynchronous update via the `updateOnPreview` method. The method is configured to call `updatePivot` and pass the parent item's ID.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/update-on-preview-pivot.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        Grid::make([\n            Column::make([\n                ID::make()->sortable(),\n                Text::make('Team title')->required(),\n                Number::make('Team number'),\n                BelongsTo::make('Tournament')->searchable(),\n            ]),\n            Column::make([\n                BelongsToMany::make('Users')->fields([\n                    Switcher::make('Approved')->updateOnPreview(\n                        $this->getRouter()->getEndpoints()->method('updatePivot', params: fn($data) => ['parent' => $data->pivot->tournamen_team_id])\n                    ),\n                ])->searchable(),\n            ])\n        ])\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Image Deletion with MoonShine and PHP\nDESCRIPTION: This snippet defines an `Image` field in a MoonShine form that allows for asynchronous removal of an image. It sets up JavaScript event handlers using the `removable` method to handle the removal on click, triggering an asynchronous request to a PHP endpoint. The PHP code within `removeAvatar` updates the model's `avatar` attribute to null.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/async-remove-on-click.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function formFields(): iterable\n{\n    return [\n        // ...\n\n        Image::make('Avatar')\n            ->removable(attributes: [\n                'data-async-url' => $this->getRouter()->getEndpoints()->method('removeAvatar', params: ['resourceItem' => $this->getItemID()]),\n                '@click.prevent' => <<<'JS'\n                    fetch($event.target.closest('button').dataset.asyncUrl).then(() => $event.target.closest('.x-removeable').remove())\n                JS\n            ]),\n\n        // ...\n    ];\n}\n\npublic function removeAvatar(MoonShineRequest $request): void\n{\n    $item = $request->getResource()?->getItem();\n\n    if(is_null($item)) {\n        return;\n    }\n\n    $item->update(['avatar' => null]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Nullable Fields with Example\nDESCRIPTION: This example demonstrates how to use the `nullable()` method to allow a password field to store a `NULL` value by default, useful when no value is given. This method sets the nullable property to true to enable this behavior.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nPassword::make('Title')->nullable()\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic HTML Content with Alpine.js x-html in PHP\nDESCRIPTION: Defines xDisplay() that outputs dynamic HTML content within a component using Alpine.js x-html directive. Accepts a string expression and a boolean to specify if HTML rendering is enabled, allowing safe injection of markup based on reactive data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nxDisplay(\n    string $value,\n    bool $html = true\n)\n\nDiv::make([\n    Select::make('Type')\n        ->native()\n        ->options([\n            1 => 'Paid',\n            2 => 'Free',\n        ])\n        ->xModel(),\n\n    Number::make('Cost', 'price')\n        ->xModel()\n        ->xIf('type', '1'),\n\n    Number::make('Rate', 'rate')\n        ->xModel()\n        ->xIf('type', '1')\n        ->setValue(90),\n\n    Div::make()\n        ->xShow('type', '1')\n        ->xDisplay('\"Result:\" + (price * rate)'),\n])->xData([\n    'price' => 0,\n    'rate' => 90,\n    'type' => '2',\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Items and Fields Methods in CardsBuilder - PHP\nDESCRIPTION: Describes usage of the 'items()' and 'fields()' methods to assign data records and field definitions for the CardsBuilder instance. 'items()' accepts an iterable dataset to populate card content, while 'fields()' accepts a FieldsContract, Closure, or iterable collection describing the fields to render. This snippet shows these methods chained fluently after a static make call, facilitating data assignment post-initialization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nitems(iterable $items = [])\n\nfields(FieldsContract|Closure|iterable $fields)\n\nCardsBuilder::make()\n    ->fields([Text::make('Text')])\n    ->items([['text' => 'Value']])\n```\n\n----------------------------------------\n\nTITLE: Using Body Layout Component in MoonShine Blade Templates\nDESCRIPTION: Demonstrates how to use the Body component via the MoonShine Blade directive. By wrapping any HTML or Blade content inside <x-moonshine::layout.body> tags, developers can embed content directly within the <body> element generated by the MoonShine UI framework. This snippet requires the MoonShine Blade components namespace to be registered and facilitates easy template-based layout configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/body.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.body>\n    Any content\n</x-moonshine::layout.body>\n```\n\n----------------------------------------\n\nTITLE: Autoloading Menu Items PHP\nDESCRIPTION: This snippet shows how to switch from a static array-based menu definition to an autoloading approach by using `autoloadMenu()`.  Dependencies: MoonShine framework. Input: None. Output: The menu is loaded automatically, using the default mechanism.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return $this->autoloadMenu();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AppLayout Class in PHP\nDESCRIPTION: Defines the `AppLayout` class extending `CompactLayout` for the user profile area. It specifies the home route URL and constructs the layout structure using various MoonShine UI components like `Body`, `Wrapper`, `Flash`, and `Content` within an HTML structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\PackageCategoryResource;\nuse App\\MoonShine\\Resources\\PackageResource;\nuse App\\MoonShine\\Resources\\UserResource;\nuse MoonShine\\ColorManager\\ColorManager;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\nuse MoonShine\\MenuManager\\MenuGroup;\nuse MoonShine\\MenuManager\\MenuItem;\nuse MoonShine\\UI\\Components\\{Components,\n    Layout\\Div,\n    Layout\\Body,\n    Layout\\Content,\n    Layout\\Flash,\n    Layout\\Html,\n    Layout\\Layout,\n    Layout\\Wrapper};\n\nfinal class AppLayout extends CompactLayout\n{\n    protected function getHomeUrl(): string\n    {\n        return route('home');\n    }\n\n    public function build(): Layout\n    {\n        return Layout::make([\n            Html::make([\n                $this->getHeadComponent(),\n\n                Body::make([\n                    Wrapper::make([\n                        Div::make([\n                            Flash::make(),\n\n                            Content::make([\n                                Components::make(\n                                    $this->getPage()->getComponents()\n                                ),\n                            ]),\n                        ])->class('layout-page'),\n                    ]),\n                ])->class('theme-minimalistic'),\n            ])\n                ->customAttributes([\n                    'lang' => $this->getHeadLang(),\n                ])\n                ->withAlpineJs()\n                ->withThemes(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Footer Customization Example\nDESCRIPTION: This code snippet demonstrates how to override the footer menu and copyright information within a custom `MoonShineLayout` class.  It overrides the `getFooterMenu()` and `getFooterCopyright()` methods.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    // ...\n\n    protected function getFooterMenu(): array\n    {\n        return [\n            'https://example.com' => 'Custom link',\n        ];\n    }\n\n    protected function getFooterCopyright(): string\n    {\n        return 'MoonShine';\n    }\n\n    public function build(): Layout\n    {\n        return parent::build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling a Modal Explicitly with ActionButton in PHP\nDESCRIPTION: Shows an alternative way to open a modal. First, a `Modal` component is defined with a specific name ('my-modal'). Then, an `ActionButton` is created with the `toggleModal()` method, referencing the modal's name, to control its visibility.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Modal;\n\nModal::make('Title','Content')\n    ->name('my-modal'),\n\nActionButton::make('Open modal window')\n    ->toggleModal('my-modal'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom User Model\nDESCRIPTION: This snippet shows how to specify a custom user model in the authentication configuration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    'model' => App\\Models\\Admin::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Examples of heading gradation in PHP\nDESCRIPTION: Various examples of using the h() method to configure heading gradation and HTML structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/heading.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Heading;\n\n// <div class=\"h1\">\nHeading::make('Title')->h(1),\n// <h1>\nHeading::make('Title')->h(1, false),\n// <div class=\"h3\">\nHeading::make('Title')->h(),\n// <h3>\nHeading::make('Title')->h(asClass: false),\n// <h4 class=\"h5\">\nHeading::make('Title', 4, false)->h(5)\n```\n\n----------------------------------------\n\nTITLE: Embedding Carousel with Blade Template\nDESCRIPTION: This code demonstrates how to embed a Carousel component within a Blade template using a custom Blade component tag. It passes items and alt text as properties to the template for rendering the carousel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/carousel.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::carousel\n    :items=\"['/images/image_2.jpg','/images/image_1.jpg']\"\n    :alt=\"fake()->sentence(3)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Simple Pagination in MoonShine Resource - PHP\nDESCRIPTION: Demonstrates how to enable simple pagination on a MoonShine ModelResource by setting the protected property $simplePaginate to true. This approach avoids additional database queries to count total records and is useful when total page count display is not needed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $simplePaginate = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Attributes to Dropzone\nDESCRIPTION: Add custom attributes to the dropzone container for multiple file uploads using the dropzoneAttributes() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nFile::make('Files')\n    ->dropzoneAttributes(fn(File $ctx) => ['class' => 'custom-class'])\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Chaining Fragment Updates with Events\nDESCRIPTION: This example shows updating multiple fragments sequentially upon an action, such as clicking a button, by dispatching events to trigger subsequent fragment updates.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nFragment::make([\n    FlexibleRender::make('<p> Step 1: ' . time() . '</p>')\n])\n    ->updateWith(\n        events: [\n            AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'fg-step-2'),\n        ],\n    )\n    ->name('fg-step-1')\n,\n\nFragment::make([\n    FlexibleRender::make('<p> Step 2: ' . time() . '</p>')\n])\n    ->name('fg-step-2')\n// ...\n,\nActionButton::make('Start')->dispatchEvent([AlpineJs::event(JsEvent::FRAGMENT_UPDATED, 'fg-step-1')])\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Logo in MoonShineServiceProvider\nDESCRIPTION: This example shows logo configuration using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$config\n    ->logo('/assets/logo.png')\n    ->logo('/assets/logo-small.png', small: true);\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Styles to Components\nDESCRIPTION: Demonstrates how to add CSS styles to a component's attributes using the style() method, which accepts a string or array of styles.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nstyle(string|array $styles)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->style(['color: red']);\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for Select Field (PHP)\nDESCRIPTION: This snippet demonstrates how to specify a default value for a Select field using the `default()` method. This is useful when you want a pre-selected option in the field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n    ->default('value 2')\n```\n\n----------------------------------------\n\nTITLE: Using 'Div' Component in Blade Template\nDESCRIPTION: This Blade snippet illustrates how to include the 'Div' component within a Blade view by using the custom <x-moonshine::layout.div> tag. It enables declarative UI composition in Laravel Blade templates, rendering a <div> tag with optional nested components and attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/div.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::layout.div></x-moonshine::layout.div>\n```\n\n----------------------------------------\n\nTITLE: Disabling File Download\nDESCRIPTION: Remove the ability for users to download files using the disableDownload() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File', 'file')\n    ->disableDownload()\n```\n\n----------------------------------------\n\nTITLE: Setting Min/Max/Step for Range Field in PHP\nDESCRIPTION: Demonstrates the usage of `min()`, `max()`, and `step()` methods to configure a `Range` field. These methods define the minimum and maximum acceptable values, and the step increment. The example sets the range for the 'price' field, setting the minimum to 0, the maximum to 10000, and the step to 5.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/range.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRange::make('Price')\n    ->fromTo('price_from', 'price_to')\n    ->min(0)\n    ->max(10000)\n    ->step(5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Disk in MoonShine (PHP)\nDESCRIPTION: Specifies the default filesystem disk and optional disk options for file storage within MoonShine. Set the 'disk' and 'disk_options' keys in `config/moonshine.php` or use the `disk()` method in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n'disk' => 'public',\n'disk_options' => [],\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->disk('public', options: []);\n```\n\n----------------------------------------\n\nTITLE: Binding Alpine.js Reactive Variables via x-model in PHP\nDESCRIPTION: Explains xModel() which binds a form field or component property to an Alpine.js reactive variable using the x-model directive. Accepts an optional string to specify the associated data column, enabling two-way data binding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nxModel(?string $column = null)\n\nDiv::make([\n    Text::make('Title')->xModel()\n])\n    ->xData(['title' => 'Hello world'])\n```\n\n----------------------------------------\n\nTITLE: Controlling Scroll-to-Active Menu Item Behavior in MoonShine using PHP\nDESCRIPTION: By default, when the menu is not in top mode, it scrolls automatically to the active menu item. This snippet shows how to disable this behavior using withoutScrollTo(), and how to re-enable it with scrollTo(). These methods are chained after Menu::make() to toggle scrolling behavior dynamically.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/menu.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nMenu::make()->withoutScrollTo()\n```\n\nLANGUAGE: php\nCODE:\n```\nMenu::make()->scrollTo()\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Dialog to ActionButton in PHP\nDESCRIPTION: Example showing the use of `withConfirm()` to create an `ActionButton` that prompts the user for confirmation before proceeding. It sets the modal's title, content, confirmation button text, HTTP method (POST), and a unique name. Optional parameters like `fields`, `formBuilder`, and `modalBuilder` can be used for more complex confirmations involving forms.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->withConfirm(\n        title: 'Confirmation Modal Window Title',\n        content: 'Confirmation Modal Window Content',\n        button: 'Confirmation Modal Window Button',\n        // опционально - дополнительные поля формы\n        fields: null,\n        method: HttpMethod::POST,\n        // опционально - замыкание с FormBuilder\n        formBuilder: null,\n        // опционально - замыкание с Modal\n        modalBuilder: null,\n        name: 'my-modal',\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Component - Blade Template\nDESCRIPTION: This Blade snippet shows how to include a search component within a layout using a Blade component syntax. This component likely takes a `placeholder` attribute to set the placeholder text within the search input field. It renders a search form in the specified layout based on Moonshine framework's implementation. The output is an HTML search form element with the specified placeholder text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/search.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.search\n    placeholder=\"Search...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating PHPUnit Test File for MoonShine Resource (Shell)\nDESCRIPTION: Uses the `php artisan moonshine:resource` command with the `--test` flag to generate a standard PHPUnit test file alongside the specified MoonShine resource (`PostResource` in this example). The test file will be created at `tests/Feature/PostResourceTest.php`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource PostResource --test\n```\n\n----------------------------------------\n\nTITLE: Setting Card Subtitle\nDESCRIPTION: Illustrates how to set the subtitle for the Card component using the `subtitle()` method.  In this example, a static string is used as the subtitle.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->subtitle(static fn() => 'Subtitle')\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine Spinner Size (Blade)\nDESCRIPTION: Provides multiple examples demonstrating how to control the visual size of the MoonShine spinner component in a Blade template by using the `size` attribute with available values like `sm`, `md`, `lg`, and `xl`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::spinner size=\"sm\" />\n<x-moonshine::spinner size=\"md\" />\n<x-moonshine::spinner size=\"lg\" />\n<x-moonshine::spinner size=\"xl\" />\n```\n\n----------------------------------------\n\nTITLE: Documenting Code Examples with PHP Classes and Torchlight Directives - PHP\nDESCRIPTION: Shows best practices for code example presentation in documentation, including how to import classes in alphabetical order and wrap such imports with Torchlight collapse comments. Depends on the MoonShine\\UI\\Fields\\Text class and Torchlight code highlighting. Inputs are PHP use statements and a method call; the output demonstrates a proper code example format, including expanded and collapsed namespace states in Torchlight.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Title')\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nuse MoonShine\\UI\\Fields\\Text; // [tl! collapse:end]\n\nText::make('Title')\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop Sorting in RelationRepeater\nDESCRIPTION: Implements the reordering feature within the RelationRepeater, allowing users to drag rows to change their order. The method `reorderable()` accepts an endpoint URL for handling reorder requests.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\n\n->reorderable(url: '/endpoint')\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Component Instance (PHP)\nDESCRIPTION: Explains the parameters available when creating a new instance of the `Icon` component using the static `make` method. It details the required icon name or HTML, optional size, color, and custom path for icon templates. Requires the `MoonShine\\Support\\Enums\\Color` enum.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/icon.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Support\\Enums\\Color;\n\nmake(\n    string $icon,\n    int $size = 5,\n    Color|string $color = '',\n    ?string $path = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Handle TableBuilder Async Request in Controller PHP\nDESCRIPTION: Example Controller method (`component`) that handles an asynchronous request for a TableBuilder. It retrieves the component based on namespace and name parameters from the request and renders it.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse Illuminate\\Contracts\\View\\View;\nuse MoonShine\\Laravel\\MoonShineRequest;\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\n\nfinal class UndefinedPageController extends MoonShineController\n{\n    public function component(MoonShineRequest $request): View\n    {\n        $page = app($request->input('_namespace'));\n\n        $component = $page->getComponents()->findByName(\n            $request->getComponentName()\n        );\n\n        return $component->render();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Assets MoonShine PHP\nDESCRIPTION: This `onLoad` method shows how to register custom CSS and JavaScript files within a MoonShine component or page. It uses the `getAssetManager` to add a CSS file (`/css/app.css`) and append a JavaScript file (`/js/app.js`). This allows developers to include project-specific styling and scripts for their MoonShine panels or pages. Requires `MoonShine\\AssetManager\\Css` and `MoonShine\\AssetManager\\Js`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\n\nprotected function onLoad(): void\n{\n    parent::onLoad();\n\n    $this->getAssetManager()\n        ->add(Css::make('/css/app.css'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating an ID Field with a Custom Column Name in PHP\nDESCRIPTION: Demonstrates creating an `ID` field instance using the static `make()` method while specifying a custom database column name ('primary_key') instead of the default 'id'. This is necessary when the primary key column in the database table has a different name. Requires importing the `MoonShine\\UI\\Fields\\ID` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/id.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\ID;\n\nID::make(column: 'primary_key')\n```\n\n----------------------------------------\n\nTITLE: Grouping ActionButtons with ActionGroup PHP\nDESCRIPTION: Demonstrates using the ActionGroup component to organize multiple ActionButtons. It shows adding buttons to the group and controlling their visibility using canSee().\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\ActionGroup;\n\nActionGroup::make([\n    ActionButton::make('Button 1', '/')\n        ->canSee(fn() => false),\n    ActionButton::make('Button 2', '/', $model)\n        ->canSee(fn($model) => $model->active)\n])\n```\n\n----------------------------------------\n\nTITLE: Defining the events() Method Signature in MoonShineJsonResponse (PHP)\nDESCRIPTION: Presents the method signature for `events()` in `MoonShineJsonResponse`. This method accepts an array of JS events, which will be dispatched on the frontend after an asynchronous request completes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nevents(array $events)\n```\n\n----------------------------------------\n\nTITLE: Installing Moonshine TinyMCE Package using Composer (Shell)\nDESCRIPTION: This shell snippet demonstrates how to install the Moonshine TinyMCE editor integration into your PHP project using Composer. Composer must be installed and available in your system environment prior to running this command. The command fetches and installs the moonshine/tinymce package and its dependencies, making the TinyMCE editor available within your Moonshine application. No arguments are required; ensure you run this from your project's root directory where the composer.json file is located.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/tinymce.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/tinymce\n```\n\n----------------------------------------\n\nTITLE: Dynamic Asset Management in MoonShine Components Using PHP\nDESCRIPTION: Illustrates methods to add CSS or JS assets to components dynamically at runtime via addAssets(), or statically by overriding assets() or booted() in custom components. The addAssets() method receives an array of asset instances like Css or Js. The assets() method returns a list of asset elements, while booted() allows chained asset addition via the component's asset manager. This enables flexible inclusion of frontend resources in component rendering. Dependencies include AssetElementContract implementations and Vite asset management.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nBox::make()\n    ->addAssets([\n        new Css(Vite::asset('resources/css/block.css'))\n    ])\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return list<AssetElementContract>\n */\nprotected function assets(): array\n{\n    return [\n        Js::make('/js/custom.js'),\n        Css::make('/css/styles.css'),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function booted(): void\n{\n    parent::booted();\n\n    $this->getAssetManager()\n        ->add(Css::make('/css/app.css'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title and Subtitle Dynamically using Methods in PHP\nDESCRIPTION: Demonstrates overriding the `getTitle()` and `getSubtitle()` methods in a `Page` class to implement custom logic for determining the page's title and subtitle. This provides more flexibility than static properties, allowing dynamic content based on application state.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    // ...\n\n    public function getTitle(): string\n    {\n        return $this->title ?: 'CustomPage';\n    }\n\n    public function getSubtitle(): string\n    {\n        return $this->subtitle ?: 'Subtitle';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Value as Stars in MoonShine Preview - PHP\nDESCRIPTION: Configures a Number field to represent its numeric value visually as stars in preview mode, useful for rating systems. The stars() method applies the star display, and min() and max() define the rating scale bounds. Input: no parameters for stars(), numeric min and max for rating limits. Output: In preview mode, numeric field value is shown as corresponding star icons between specified minimum and maximum.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Number;\n\nNumber::make('Rating')\n    ->stars()\n    ->min(1)\n    ->max(10)\n```\n\n----------------------------------------\n\nTITLE: Handling Request and Returning Page in MoonShine\nDESCRIPTION: This snippet demonstrates how the `PageController` in MoonShine processes incoming requests and returns a `PageContract` object. It retrieves the resource and page information from the request and performs a URL check. The key functionality is to route the page based on the request.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/routes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n```php\npublic function __invoke(MoonShineRequest $request): PageContract\n{\n    $request->getResource();\n\n    $page = $request\n        ->getPage()\n        ->checkUrl();\n\n    return $page;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Localization Parameter in MoonShine\nDESCRIPTION: Shows how to customize the URL parameter used for changing the language in the MoonShine admin panel through configuration file or service provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/localization.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'locale_key' => '_lang',\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->localeKey('_lang');\n```\n\n----------------------------------------\n\nTITLE: Styling MoonShine Tables with Predefined Classes\nDESCRIPTION: This example demonstrates how to apply styling to MoonShine tables using predefined color classes. It shows how to apply different background colors to the header and individual cells in the table body.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n<x-moonshine::table>\n    <x-slot:thead class=\"bgc-secondary text-center\">\n        <th colspan=\"3\">Header</th>\n    </x-slot:thead>\n    <x-slot:tbody>\n        <tr>\n            <th class=\"bgc-pink\">{{ fake()->firstName() }}</th>\n            <th class=\"bgc-gray\">{{ fake()->lastName() }}</th>\n            <th class=\"bgc-purple\">{{ fake()->safeEmail() }}</th>\n        </tr>\n        <tr>\n            <th class=\"bgc-green\">{{ fake()->firstName() }}</th>\n            <th class=\"bgc-red\">{{ fake()->lastName() }}</th>\n            <th class=\"bgc-yellow\">{{ fake()->safeEmail() }}</th>\n        </tr>\n    </x-slot:tbody>\n</x-moonshine::table>\n```\n\n----------------------------------------\n\nTITLE: Creating Grid and Columns with Text Fields in PHP\nDESCRIPTION: This PHP code demonstrates using the `Grid` and `Column` components within the MoonShine framework to create a grid layout with two columns, each containing a text field.  It imports necessary classes for `Grid`, `Column`, and `Text` components. The grid is created with two columns, each spanning 6 columns on large screens and 6 columns on smaller screens, and each containing a text field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/grid.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\UI\\Components\\Layout\\Column;\nuse MoonShine\\UI\\Components\\Layout\\Grid;\nuse MoonShine\\UI\\Fields\\Text;\n\nGrid::make([\n    Column::make(\n        [\n            Text::make('Text')\n        ],\n        colSpan: 6,\n        adaptiveColSpan: 6\n    ),\n    Column::make(\n        [\n            Text::make('Text')\n        ],\n        colSpan: 6,\n        adaptiveColSpan: 6\n    ),\n])\n```\n\n----------------------------------------\n\nTITLE: Adding Component Attributes with setAttribute()\nDESCRIPTION: Demonstrates how to add or modify a component attribute using the setAttribute() method, which takes the attribute name and value as parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nsetAttribute(\n    string $name,\n    string|bool $value\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->setAttribute('data-id', '123');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Menu Items via MoonShine MenuManager in a ServiceProvider (PHP)\nDESCRIPTION: Demonstrates how to add custom pages to the MoonShine admin menu from a ServiceProvider by injecting MenuManagerContract. Requires MoonShine and Laravel, as well as MenuItem and MyPackagePage to be defined. The $menu->add() method links new admin UI elements; primarily for organizational navigation within the admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Author\\MoonShineMyPackage;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Contracts\\MenuManager\\MenuManagerContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\n\nclass MyPackageServiceProvider extends ServiceProvider\n{\n    /** @param MoonShine $core */\n    public function boot(\n        CoreContract $core,\n        MenuManagerContract $menu\n    ): void\n    {\n        $menu->add([\n            MenuItem::make('MyPackagePage', MyPackagePage::class)\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using the Components Class in PHP\nDESCRIPTION: Example demonstrating the usage of the `Components` class. It shows importing the class via `use MoonShine\\UI\\Components\\Components;` and then calling the static `make` method with an array of components (represented by the comment `// components`) to create a group.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/components.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Components;\n\nComponents::make([\n    // components\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Suffix to Input Field in PHP\nDESCRIPTION: Explains how to append a text suffix directly after the input field using the `suffix()` method. The method takes the string to be used as the suffix.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nsuffix(string $ext)\n```\n\n----------------------------------------\n\nTITLE: Defining the toast() Method Signature in MoonShineJsonResponse (PHP)\nDESCRIPTION: Provides the method signature for `toast()` in `MoonShineJsonResponse`, used to trigger frontend toast notifications. It accepts the message content (string), an optional `ToastType` enum (defaulting to DEFAULT), and an optional duration (null, int, or false).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntoast(string $value, ToastType $type = ToastType::DEFAULT, null|int|false $duration = null)\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML into Multiple Selectors with MoonShineJsonResponse (PHP)\nDESCRIPTION: Example showing how to use `htmlData()` chained within `MoonShineJsonResponse` to insert different HTML content ('One' and 'Two', generated via `Text::make`) into two different selectors (`#selector1` and `#selector2`) using different `HtmlMode` values (default INNER_HTML and BEFORE_END respectively). Requires `MoonShineJsonResponse`, `Text`, and `HtmlMode`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nMoonShineJsonResponse::make()\n      ->htmlData((string) Text::make('One'), '#selector1')\n      ->htmlData((string) Text::make('Two'), '#selector2', HtmlMode::BEFORE_END)\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic MoonShine Spinner (Blade)\nDESCRIPTION: Shows the fundamental usage of the MoonShine spinner component within a Blade template using the `<x-moonshine::spinner>` tag. It includes an example of setting the size attribute.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::spinner size=\"md\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Locales Component in PHP\nDESCRIPTION: This snippet shows how to initialize the `Locales` component using the `make()` method in PHP.  It's intended to be used within the application's layout or other appropriate contexts where locale selection functionality is desired.  No specific dependencies beyond the Moonshine framework are required. The output is a configured instance of the Locales component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/locales.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLocales::make()\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine via Artisan Command in Shell\nDESCRIPTION: This command invokes artisan to perform MoonShine's installation routine. It generates a new service provider, updated configurations, and creates updated layout and dashboard files as per v3.0 requirements. Inputs include an upgraded codebase; outputs are modified and newly generated Laravel files. Dependencies: A Laravel application and MoonShine v3.0 dependency in composer.json.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:install\n```\n\n----------------------------------------\n\nTITLE: Example of Rendering a MoonShine Page in a Controller - PHP\nDESCRIPTION: Demonstrates how to inject and return a MoonShine page class (LoginPage) directly from a controller action. This utilizes Laravel's dependency injection, requiring the MoonShine page class as parameter. The method does not require inputs beyond the page class and results in page rendering for the client.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function form(LoginPage $page): LoginPage\n{\n    return $page;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Form Fields from Event Data with dispatchEvent in FormBuilder (PHP)\nDESCRIPTION: This example extends dispatchEvent usage by specifying the exclude parameter to omit selected fields from the event payload. The exclude option accepts an array of field names to be left out when the event is triggered. Useful for optimizing network payloads in large forms or securing sensitive field data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/form-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n->dispatchEvent(\n    AlpineJs::event(JsEvent::OFF_CANVAS_TOGGLED, 'default'),\n    exclude: ['text', 'description']\n)\n```\n\n----------------------------------------\n\nTITLE: Реализация пагинации для TableBuilder с использованием PaginatorCaster в PHP\nDESCRIPTION: Код демонстрирует, как применить пагинацию к TableBuilder компоненту в MoonShine. Сначала получаем пагинированные данные из модели Post, затем используем PaginatorCaster для форматирования данных, и наконец, передаем отформатированные данные в TableBuilder.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/table-paginator.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\TypeCasts\\PaginatorCaster;\n\nprotected function components(): iterable\n{\n    $posts = Post::query()->paginate(); // или ->simplePaginate() или ->cursorPaginate()\n\n    $paginator = (new PaginatorCaster(\n        $posts->appends(request()->except('page'))->toArray(),\n        $posts->items()\n    ))->cast();\n\n    return [\n        TableBuilder::make()\n            ->fields([\n                Text::make('Name')\n            ])\n            ->items($paginator)\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine Body Component (Blade)\nDESCRIPTION: Shows how to use the MoonShine `Body` UI component as a Blade component tag within a template. Content placed directly between the opening and closing `<x-moonshine::layout.body>` tags will be rendered inside the generated `<body>` element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/body.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.body>\n    Any content\n</x-moonshine::layout.body>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Quill Field with Blade (Blade)\nDESCRIPTION: Blade template that defines the UI for the custom Quill field, including an interactive editor and a hidden textarea bound with Alpine.js for two-way data binding. The template expects $attributes and $value variables, merging attributes for the textarea accordingly. Requires Alpine.js for frontend interactivity and the Quill.js JavaScript integration.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"quill\">\n    <div class=\"ql-editor\" :id=\"$id('quill')\" style=\"height: auto;\">{!! $value ?? '' !!}</div>\n\n    <x-moonshine::form.textarea\n        :attributes=\"$attributes->merge([\n            'class' => 'ql-textarea',\n            'style' => 'display: none;'\n        ])->except('x-bind:id')\"\n    >{!! $value ?? '' !!}</x-moonshine::form.textarea>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Images in BelongsToMany Select Options (PHP)\nDESCRIPTION: Uses the `withImage()` method to display an image alongside each city option in a `BelongsToMany` select field. It fetches the image path from the 'thumb' column of the related City model, assumes the 'public' disk, and prepends 'countries/' to the path. The `selectMode()` method is called to render the field as a select dropdown instead of checkboxes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CityResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsToMany::make('Cities', resource: CityResource::class)\n    ->withImage('thumb', 'public', 'countries')->selectMode()\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to Card with Actions Method in PHP\nDESCRIPTION: Demonstrates adding interactive action buttons to a MoonShine Card by calling the actions() method with a closure that returns an ActionButton component. This allows cards to have edit, delete, or other custom buttons that link to routes or perform actions. Dependencies include ActionButton components and route helpers from Laravel. The closure is expected to return UI elements representing the buttons, enhancing user interactivity on the card.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->actions(\n        static fn() => ActionButton::make('Edit', route('name.edit'))\n    )\n```\n\n----------------------------------------\n\nTITLE: Instantiating MoonShine Files Component (Method Signature) - PHP\nDESCRIPTION: This snippet shows the signature of the `make` method used to create an instance of the Files component. It accepts an array of file paths and a boolean to enable/disable download functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/files.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    array $files = [],\n    bool $download = true,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Policy Class for Authorization - Shell\nDESCRIPTION: This command creates a new Policy class specifically tied to the admin panel user for enforcing authorization rules. The resulting class is saved in app/Policies. This feature relies on Laravel's policy system and MoonShine's admin user model.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:policy\n```\n\n----------------------------------------\n\nTITLE: MobileBar Constructor Definition - PHP\nDESCRIPTION: Defines the constructor for the `MobileBar` class, which accepts an iterable array of components as its argument. This allows for customization of the mobile bar's contents.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/mobilebar.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Setting Alpine.js Component with Parameters\nDESCRIPTION: Demonstrates how to specify an Alpine.js component with parameters using the xDataMethod() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nxDataMethod(\n    string $method,\n    ...$parameters\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nDiv::make([])\n    ->xDataMethod('some-component', 'var', ['foo' => 'bar'])\n```\n\n----------------------------------------\n\nTITLE: Registering JWT Auth Pipeline and Middleware in MoonShineServiceProvider (PHP)\nDESCRIPTION: Sets up the MoonShine service provider to use JWT authentication by registering the JWTAuthPipe in auth pipelines and setting the AuthenticateApi middleware. This configures the admin panel to process API authentication using JWT tokens through the service provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\JWT\\JWTAuthPipe;\\nuse MoonShine\\JWT\\Http\\Middleware\\AuthenticateApi;\\n\\n$config\\n    ->authPipelines([JWTAuthPipe::class])\\n    ->middlewares([])\\n    ->authMiddleware(AuthenticateApi::class);\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine Divider Component in Blade Template\nDESCRIPTION: This snippet demonstrates how to include the MoonShine Divider component in a Blade template by using the blade component syntax. It renders a basic horizontal divider in the HTML layout. It requires Blade templating engine and MoonShine UI resources loaded appropriately.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/divider.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.divider/>\n```\n\n----------------------------------------\n\nTITLE: Triggering Events After Async Card Load in PHP\nDESCRIPTION: Demonstrates how to fire JavaScript events after successful asynchronous card loading using AlpineJs events.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Switcher::make('Active')])\n    ->name('crud')\n    ->async(events: [AlpineJs::event(JsEvent::CARDS_UPDATED, 'crud')])\n```\n\n----------------------------------------\n\nTITLE: Displaying BelongsToMany Items Inline with Badges and Links (PHP)\nDESCRIPTION: Demonstrates using the `inLine()` method to display related 'Categories' separated by spaces. Each item is rendered as a primary-colored Badge, and clicking it navigates to the category's detail page using a Link component. Depends on `BelongsToMany`, `Badge`, and `Link` components from MoonShine and the application's `CategoryResource`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Components\\Badge;\nuse MoonShine\\UI\\Components\\Link;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->inLine(\n        separator: ' ',\n        badge: fn($model, $value) => Badge::make((string) $value, 'primary'),\n        link: fn(Property $property, $value, $field): string|Link => Link::make(\n            app(CategoryResource::class)->getDetailPageUrl($property->id),\n            $value\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating ThemeSwitcher Component - PHP\nDESCRIPTION: This PHP snippet demonstrates the creation of the ThemeSwitcher component using the `MoonShine\\UI\\Components\\Layout\\ThemeSwitcher` class. It instantiates the component using the `make()` method.  This requires the MoonShine framework to be installed and configured. The output is an instance of the ThemeSwitcher component, which can then be rendered in a layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/theme-switcher.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\ThemeSwitcher;\n\nThemeSwitcher::make()\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Field After Apply\nDESCRIPTION: The `refreshAfterApply()` method triggers a re-render of the field after the `apply()` method has completed. This is particularly useful for fields that have dynamic content or require updating the UI after data changes. It takes an optional callback that provides the context of the field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nrefreshAfterApply(?Closure $callback = null)\n```\n\n----------------------------------------\n\nTITLE: Updating MenuItem Resource Registration in MoonShine using PHP\nDESCRIPTION: This PHP snippet compares the old and new syntax for creating a MenuItem for settings, reflecting the change from passing an instantiated resource with an icon prefix to using the class reference and new icon convention. Dependencies: MenuItem and SettingResource classes must be available. Inputs are the menu name, resource class, and icon; outputs are properly initialized MenuItems. The new method removes the 'heroicons.outline' prefix and uses SettingResource::class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Was\nMenuItem::make('Settings', new SettingResource(), 'heroicons.outline.adjustments-vertical')\n\n// Now\nMenuItem::make('Settings', SettingResource::class, 'adjustments-vertical')\n```\n\n----------------------------------------\n\nTITLE: Filling FieldsGroup with Data - PHP\nDESCRIPTION: This snippet explains the `fill()` method, used to populate the fields within a `FieldsGroup` instance with data.  It takes an array `$raw` which contains the data to populate the fields, a `DataWrapperContract $casted` which allows for data casting and an optional `$index`. The `fill()` method takes `$raw`, `$casted` and `$index` parameters. It is used for setting field values after fetching data. \nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fields-group.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfill(\n    array $raw = [],\n    ?DataWrapperContract $casted = null,\n    int $index = 0,\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Wrappers from Fields\nDESCRIPTION: Removes wrappers from all fields within a `FieldsGroup` using the `withoutWrappers` method. This extracts nested fields from wrapper components like `StackFields`, preventing the wrapper from being included in the final set.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nFieldsGroup::make($fields)\n    ->withoutWrappers()\n```\n\n----------------------------------------\n\nTITLE: Setting Items Per Page in MoonShine Table (PHP)\nDESCRIPTION: This code shows how to change the number of items displayed per page in a MoonShine table. It sets the `$itemsPerPage` property to the desired number within the resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected int $itemsPerPage = 25;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modify List Component with CardsBuilder PHP\nDESCRIPTION: This code modifies the list component of a `MoonShineUserResource` using the `CardsBuilder` to display items as cards. It configures the cards with properties such as title, subtitle, URL, thumbnail, and buttons, using data from the user object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/index-page-cards.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MoonShineUserResource extends ModelResource\n{\n    // ...\n\n    public function getListEventName(?string $name = null, array $params = []): string\n    {\n        $name ??= $this->getListComponentName();\n\n        return AlpineJs::event(JsEvent::CARDS_UPDATED, $name, $params);\n    }\n\n    public function modifyListComponent(ComponentContract $component): ComponentContract\n    {\n        return CardsBuilder::make($this->getItems(), $this->getIndexFields())\n            ->cast($this->getCaster())\n            ->name($this->getListComponentName())\n            ->async()\n            ->overlay()\n            ->title('email')\n            ->subtitle('name')\n            ->url(fn ($user) => $this->getFormPageUrl($user->getKey()))\n            ->thumbnail(fn ($user) => asset($user->avatar))\n            ->buttons($this->getIndexButtons());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Forgot Password Requests in ForgotPasswordFormRequest (PHP)\nDESCRIPTION: Defines the validation rules for the forgot password form within the `ForgotPasswordFormRequest` class. It ensures only unauthenticated users (`guest`) can submit the request via the `authorize` method and requires a valid email address with DNS check (`required`, `email:dns`) in the `rules` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass ForgotPasswordFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'email' => ['required', 'email:dns'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Page Components Using Layout Classes in MoonShine PHP\nDESCRIPTION: Shows how to define and return page components with nested layout structures using `Grid`, `Column`, and `Box` components inside the protected `components()` method. This method returns an iterable array of UI components to be rendered on the page. Requires importing the component classes from the MoonShine UI namespace.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Components\\Layout\\Column;\nuse MoonShine\\UI\\Components\\Layout\\Grid;\n\nclass CustomPage extends Page\n{\n    // ...\n\n    protected function components(): iterable\n    {\n        return [\n            Grid::make([\n                Column::make([\n                    Box::make([\n                        // ...\n                    ])\n                ])->columnSpan(6),\n                Column::make([\n                    Box::make([\n                        // ...\n                    ])\n                ])->columnSpan(6),\n            ])\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Bulk Action Row Checkboxes with modifyRowCheckbox() in MoonShine TableBuilder PHP\nDESCRIPTION: The `modifyRowCheckbox()` method enables custom modification of checkbox inputs used for bulk actions on table rows. It accepts a closure that receives the checkbox, the data wrapper for the row, and the table context, returning the modified checkbox. This allows default checked states or other custom attributes to be set dynamically based on row data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n->modifyRowCheckbox(\n    fn(Checkbox $checkbox, DataWrapperContract $data, TableBuilder $ctx) => $data->getKey() === 2 ? $checkbox->customAttributes(['checked' => true]) : $checkbox\n)\n```\n\n----------------------------------------\n\nTITLE: Examples of custom heading tags in PHP\nDESCRIPTION: Examples of customizing the HTML tag for headings using the tag() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/heading.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// <p class=\"h1\">\nHeading::make('Title', 1)\n    ->tag('p'),\n\n// <p class=\"h2\">\nHeading::make('Title')\n    ->tag('p')\n    ->h(2),\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal with Blade\nDESCRIPTION: This example shows how to create a modal using the Blade templating engine with the `<x-moonshine::modal>` component.  It includes setting the title, content, and an outer HTML block with a button to toggle the modal.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Prepending an ActionButton to ActionGroup in PHP\nDESCRIPTION: This snippet demonstrates the use of the `prepend()` method to add an `ActionButton` to the beginning of an `ActionGroup`. It needs an existing `ActionGroup`.  This method inserts the new `ActionButton` at the beginning of the group.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-group.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->prepend(ActionButton::make('Button 4'))\n```\n\n----------------------------------------\n\nTITLE: Implementing toString() Method for Enum (PHP)\nDESCRIPTION: This code snippet shows how to implement the `toString()` method within an enum to control the display value.  It returns a string based on the enum case. Requires the use of `match()` for handling different cases.  The method receives no input, but returns a string or null.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/enum.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Enums;\n\nenum StatusEnum: string\n{\n    case NEW = 'new';\n    case DRAFT = 'draft';\n    case PUBLIC = 'public';\n\n    public function toString(): ?string\n    {\n        return match ($this) {\n            self::NEW => 'New',\n            self::DRAFT => 'Draft',\n            self::PUBLIC => 'Public',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rating Component make Method (PHP)\nDESCRIPTION: Defines the signature for the `make` static method used to create a Rating component instance. It requires the `$value` parameter (int) for the rating value, and optionally accepts `$min` (int, default 1) for the minimum possible value and `$max` (int, default 5) for the maximum.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/rating.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n    int $value,\n    int $min = 1,\n    int $max = 5,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Card Values\nDESCRIPTION: Illustrates how to add a list of values to the Card component using the `values()` method. An associative array is passed to the `values` method to display key-value pairs within the card.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->values([\n        'ID' => 1,\n        'Author' => fake()->name(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Default User for BelongsTo Field in MoonShine PHP\nDESCRIPTION: Sets the default value for a BelongsTo relationship field in a MoonShine form to the currently authenticated user. This automatically pre-fills the relationship field when creating a new record, assigning the current user as the related entity.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/faq.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function formFields(): array\n{\n    return [\n        // ...\n        BelongsTo::make('Author', resource: UserResource::class)\n            ->default( request()->user() ),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Alert Types with the Alert Class in PHP\nDESCRIPTION: Illustrates how to specify different visual types (primary, secondary, success, warning, error, info) for alerts using the `type` named argument in the `Alert::make()` method. This changes the alert's appearance based on the chosen type.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/alert.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nAlert::make(type: 'primary')->content('Primary'),\nAlert::make(type: 'secondary')->content('Secondary'),\nAlert::make(type: 'success')->content('Success'),\nAlert::make(type: 'warning')->content('Warning'),\nAlert::make(type: 'error')->content('Error'),\nAlert::make(type: 'info')->content('Text'),\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication\nDESCRIPTION: This snippet shows how to disable the built-in authentication of MoonShine in `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$config->authDisable();\n```\n\n----------------------------------------\n\nTITLE: Defining the `buttons` Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `buttons()`. This method accepts an array of `ActionButton` components (or similar UI elements) to add custom buttons alongside the `BelongsToMany` field, enabling extra actions like 'Check all' or 'Uncheck all'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nbuttons(array $buttons)\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Component Using PHP and Blade Syntax\nDESCRIPTION: Shows usage examples of the Profile component initialization and rendering using PHP static call and Blade template components respectively. The PHP snippet invokes Profile::make() to create an instance. The Blade snippet demonstrates embedding the 'layout.profile' component with properties defining profile and logout URLs, avatar image path, user name, and username. This enables rendering of a user profile card in the UI with interactive navigation links and avatar display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/profile.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nProfile::make()\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.profile\n    route=\"/admin/profile\"\n    log-out-route=\"/logout\"\n    avatar=\"/vendor/moonshine/avatar.jpg\"\n    name-of-user=\"Admin\"\n    username=\"admin@getmoonshine.app\"\n>\n</x-moonshine::layout.profile>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MoonShine Box - Blade Template\nDESCRIPTION: Illustrates the fundamental usage of the MoonShine Box component directly within a Blade template. Content is placed between the opening and closing tags.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box>\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Registering Inline Styles via MoonShine AssetManager in a ServiceProvider (PHP)\nDESCRIPTION: Illustrates adding inline CSS assets to the admin via AssetManagerContract injection in ServiceProvider. Dependencies include MoonShine and the InlineCss class. It uses $assets->add() with InlineCss::make() to apply styles directly, commonly for quick UI changes. Only valid during the boot sequence of a package service provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\AssetManager\\AssetManagerContract;\n\n// ...\n\npublic function boot(\n    CoreContract $core,\n    AssetManagerContract $assets\n): void\n{\n    $assets->add([\n        InlineCss::make('body {background: red;}')\n    ]);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Modal Name for ActionButton in PHP\nDESCRIPTION: Illustrates how to assign a unique name to modals triggered by `ActionButton` instances, particularly useful within loops or tables where multiple buttons might trigger similar modals. A Closure is used for the `name` parameter, accessing contextual data (like an item's key) via the `ActionButtonContract` to generate a unique identifier.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nActionButton::make('Button Label')\n    ->inModal(\n        name: static fn (mixed $item, ActionButtonContract $ctx): string => \"delete-button-{$ctx->getData()?->getKey()}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Dynamically Modifying MoonShine Layout via modifyLayout() Method in PHP\nDESCRIPTION: Presents an example of the `modifyLayout()` method which takes a `LayoutContract` instance parameter representing the layout, modifies its title and description dynamically, and returns the updated layout instance. This allows flexible runtime customization of the page's layout template, useful for adapting UI elements or adding context-sensitive information.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\LayoutContract;\n\n/**\n * @param  LoginLayout  $layout\n */\nprotected function modifyLayout(LayoutContract $layout): LayoutContract\n{\n    return $layout->title(\n        __('moonshine-two-factor::ui.2fa')\n    )->description(\n        __('moonshine-two-factor::ui.confirm')\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Bulk Action Button to Index Table in MoonShine (PHP)\nDESCRIPTION: This PHP snippet shows how to add a button for performing bulk actions on selected items in the MoonShine resource index table. It overrides the `indexButtons` method, prepends a new `ActionButton` labeled 'Link' pointing to a specific '/endpoint', and chains the `bulk()` method to signify that it should operate on multiple selected rows.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\Support\\ListOf;\n\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->prepend(\n            ActionButton::make('Link', '/endpoint')\n                ->bulk()\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Management with ColorManager - PHP\nDESCRIPTION: Explains how to manage the theme colors using the ColorManager in PHP. Includes setting background colors, content colors, and customizing interface components such as table rows, borders, dropdowns, buttons, and dividers. Requires an instance of the ColorManager class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Установка цветов фона\n$colorManager->background('27, 37, 59');\n\n// Установка цветов контента\n$colorManager->content('39, 45, 69');\n\n// Настройка компонентов интерфейса\n$colorManager->tableRow('40, 51, 78'); // Строки таблицы\n$colorManager->borders('53, 69, 103'); // Границы\n$colorManager->dropdowns('48, 61, 93'); // Выпадающие списки\n$colorManager->buttons('83, 103, 132'); // Кнопки\n$colorManager->dividers('74, 90, 121'); // Разделители\n```\n\n----------------------------------------\n\nTITLE: Global Override with ServiceProvider - PHP\nDESCRIPTION: Explains how to globally override colors for all Layouts using the MoonShineServiceProvider.  This allows setting default colors for the entire application. Requires extending `Illuminate\\Support\\ServiceProvider` and implementing `MoonShine\\Contracts\\ColorManager\\ColorManagerContract`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:start]\nuse Illuminate\\Support\\ServiceProvider;\nuse MoonShine\\ColorManager\\ColorManager;\nuse MoonShine\\Contracts\\ColorManager\\ColorManagerContract;\nuse MoonShine\\Contracts\\Core\\DependencyInjection\\CoreContract;\nuse MoonShine\\Laravel\\DependencyInjection\\ConfiguratorContract;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShine;\nuse MoonShine\\Laravel\\DependencyInjection\\MoonShineConfigurator; // [tl! collapse:end]\n\nclass MoonShineServiceProvider extends ServiceProvider\n{\n    /**\n     * @param  MoonShine  $core\n     * @param  MoonShineConfigurator  $config\n     * @param  ColorManager  $colors\n     *\n     */\n    public function boot(\n        CoreContract $core,\n        ConfiguratorContract $config,\n        ColorManagerContract $colors,\n    ): void\n    {\n        $colors->primary('#7843e9');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sorting in MoonShine Resource (PHP)\nDESCRIPTION: This code snippet demonstrates how to set the default sorting column and direction within a MoonShine ModelResource. It defines the `$sortColumn` and `$sortDirection` properties to control the initial sorting of the table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\Support\\Enums\\SortDirection;\n\nclass PostResource extends ModelResource\n{\n    // Default sort field\n    protected string $sortColumn = 'created_at';\n\n    // Default sort type\n    protected SortDirection $sortDirection = SortDirection::DESC;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting HTML with ColorManager - PHP\nDESCRIPTION: Shows how to output color variables into HTML using the `toHtml()` method of the ColorManager.  This generates CSS variables for both the light and dark themes. Requires an instance of the ColorManager class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$colorManager->toHtml()\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorization in MoonShine Resource - PHP\nDESCRIPTION: This code snippet demonstrates how to enable authorization checks for a MoonShine resource.  It uses the `$withPolicy` property to control authorization. When set to `true`, the resource will utilize associated policies for permission checks. Requires the `MoonShine` package and the `Laravel` framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/security/authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $withPolicy = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Fields with Alpine.js x-model\nDESCRIPTION: Shows how to bind a field to a reactive variable using the xModel() method for two-way data binding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nxModel(?string $column = null)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nDiv::make([\n    Text::make('Title')->xModel()\n])\n    ->xData(['title' => 'Hello world'])\n```\n\n----------------------------------------\n\nTITLE: Customizing the Inline Creation Button for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Demonstrates customizing the button added by `creatable()`. An instance of `ActionButton` with custom text ('Custom button') is passed via the `button` parameter to override the default button appearance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse App\\MoonShine\\Resources\\AuthorResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nBelongsTo::make('Author', resource: AuthorResource::class)\n    ->creatable(\n        button: ActionButton::make('Custom button', '')\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Responses After Fragment Update\nDESCRIPTION: This snippet demonstrates how to specify a callback function to be executed after a fragment request completes, enabling custom handling of server responses.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nFragment::make($components)\n    ->updateWith(\n        callback: AsyncCallback::with(afterResponse: 'afterResponseFunction')\n    )\n    ->name('fragment-name')\n```\n\n----------------------------------------\n\nTITLE: Menu Item Order PHP\nDESCRIPTION: This snippet demonstrates setting the order of menu items using the `Order` attribute. Dependencies: MoonShine framework. Input:  Order number. Output:  Sets the menu item order.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:1]\nuse MoonShine\\MenuManager\\Attributes\\Order;\n\n#[Order(1)]\nclass ArticleResource extends ModelResource {}\n```\n\n----------------------------------------\n\nTITLE: PHP Example: Modifying MenuItem Creation in MoonShine\nDESCRIPTION: This PHP code illustrates changing the instantiation of a `MenuItem` object by replacing a resource instance with a class reference and adjusting the icon name. It highlights how code modifications are documented, with indicators for removal `[tl! --]` and addition `[tl! ++]`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nMenuItem::make('Settings', new SettingResource(), 'heroicons.outline.adjustments-vertical') // [tl! remove]\nMenuItem::make('Settings', SettingResource::class, 'adjustments-vertical') // [tl! add]\n```\n\nLANGUAGE: PHP\nCODE:\n```\nMenuItem::make('Settings', new SettingResource(), 'heroicons.outline.adjustments-vertical') // [tl! --]\nMenuItem::make('Settings', SettingResource::class, 'adjustments-vertical') // [tl! ++]\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Field with label-based relation\nDESCRIPTION: This code snippet showcases how to use the `HasMany` field without explicitly specifying the relation name.  The framework will automatically determine the relationship name based on the label provided, utilizing camelCase conversion. It imports `HasMany` from Moonshine framework. This is an efficient way to define the relationship if the relation name follows a convention.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments')\n```\n\n----------------------------------------\n\nTITLE: Replacing Sidebar with TopBar in MoonShine CompactLayout Using PHP\nDESCRIPTION: This PHP snippet demonstrates how to customize the layout composition in MoonShine by replacing the default `Sidebar` component with a `TopBar` component in the `build()` method. It constructs the layout using nested components like `Html`, `Body`, `Wrapper`, `Div`, and inserts the top bar component first, omitting the sidebar by commenting it out. Additional UI elements like flash messages, header, content components, and footer are arranged inside the layout page. The method also sets HTML language attributes and includes Alpine.js and theme support. This requires importing MoonShine layout and component classes and understanding component nesting.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\n\nfinal class MoonShineLayout extends CompactLayout\n{\n    // ...\n\n    public function build(): Layout\n    {\n        return Layout::make([\n            Html::make([\n                $this->getHeadComponent(),\n                Body::make([\n                    Wrapper::make([\n                        $this->getTopBarComponent(),\n                        //$this->getSidebarComponent(),\n                        Div::make([\n                            Flash::make(),\n                            $this->getHeaderComponent(),\n\n                            Content::make([\n                                Components::make(\n                                    $this->getPage()->getComponents()\n                                ),\n                            ]),\n\n                            $this->getFooterComponent(),\n                        ])->class('layout-page'),\n                    ]),\n                ])->class('theme-minimalistic'),\n            ])\n                ->customAttributes([\n                    'lang' => $this->getHeadLang(),\n                ])\n                ->withAlpineJs()\n                ->withThemes(),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Handler with Conditional Delimiter - PHP\nDESCRIPTION: This code snippet shows how to use the `when` method to conditionally set the delimiter of an import handler.  If the condition `true` is met, the delimiter is set to ',', otherwise it's set to ';'. It's part of a `CategoryResource` class that implements `HasImportExportContract`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/import-export.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\ImportHandler;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Handlers\\Handler;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function import(): ?Handler\n    {\n        return ImportHandler::make('Import')\n            ->when(\n                true,\n                fn($handler) => $handler->delimiter(','),\n                fn($handler) => $handler->delimiter(';')\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bulk Action Button for ModelResource in PHP\nDESCRIPTION: Demonstrates how to define a bulk action button within the `indexButtons` method of a MoonShine `ModelResource`. Applying the `bulk()` method to an `ActionButton` designates it as an action that can be applied to multiple selected items (e.g., rows in a table) in the resource's index view.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nprotected function indexButtons(): ListOf\n{\n    return parent::indexButtons()\n        ->add(ActionButton::make('Link', '/endpoint')->bulk());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to CrudResource in MoonShine\nDESCRIPTION: Example showing how to add assets to a CrudResource in MoonShine using the onLoad method. This allows adding resources specific to a CRUD resource.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function onLoad(): void\n{\n    $this->getAssetManager()\n        ->prepend(InlineJs::make('alert(1)'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Show/Hide Button - PHP\nDESCRIPTION: This PHP snippet adds a show/hide button (eye icon) to a text field using the `eye()` method, typically used for password fields. This method doesn't take any parameters and toggles the visibility of the text field value.  The value will be hidden and displayed by clicking the button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nText::make('Password', 'password')\n    ->eye()\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Icon via PHP\nDESCRIPTION: Illustrates how to specify a custom icon for the alert notification by passing the 'icon' parameter in the Alert class, enabling visual cues through iconography.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nAlert::make(icon: \"academic-cap\")\n    ->content('Text')\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to Page in MoonShine\nDESCRIPTION: Example showing how to add assets to a Page in MoonShine using the onLoad method. This allows adding resources specific to a particular admin page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function onLoad(): void\n{\n    parent::onLoad();\n\n    $this->getAssetManager()\n        ->add(Css::make('/css/app.css'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Edit Button Icon in MoonShine (PHP)\nDESCRIPTION: This PHP snippet illustrates how to change the icon of the default 'Edit' button within a MoonShine resource. It overrides the `modifyEditButton` method, takes the existing button instance, sets a new icon using `icon('pencil-square')`, and returns the modified button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyEditButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->icon('pencil-square');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox 'On' Value Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `onValue`. This method is used to override the default value (1) that represents the checked state of the checkbox. It accepts an integer or a string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/checkbox.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nonValue(int|string $onValue)\n```\n\n----------------------------------------\n\nTITLE: Adding Lock Icon (PHP)\nDESCRIPTION: Shows how to add a lock icon to the Text field using the `locked()` method.  This visually indicates that the field is protected or read-only.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nText::make('Protected field', 'protected_field')\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: Attaching Trait with onLoad\nDESCRIPTION: This snippet shows how to use Traits in resource.  Adding a trait with a method named `load{TraitName}` to access the `onLoad()` of the resource is shown.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse App\\Traits\\WithPermissions;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    use WithPermissions;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Width to Wide in PHP\nDESCRIPTION: This snippet shows how to set the modal width to 'wide' using the `wide()` method, which allows the modal to fill the entire width of the screen.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Заголовок', 'Содержимое...', ActionButton::make('Показать модальное окно', '#'))\n            ->wide(),\n```\n\n----------------------------------------\n\nTITLE: Defining DataWrapperContract Interface (PHP)\nDESCRIPTION: This interface defines the contract for wrapping data in MoonShine.  It includes methods for getting the original data, the key of the data, and converting the data to an array.  This abstraction helps determine the object's key and how to convert it to an array.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/type-casts.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface DataWrapperContract\n{\n    public function getOriginal(): mixed;\n\n    public function getKey(): int|string|null;\n\n    public function toArray(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Get Logo URL\nDESCRIPTION: This code snippet provides an example of how to customize the logo URL within the MoonShine admin panel using the `getLogo()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected function getLogo(bool $small = false): string\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Search Field for HasMany Relationship in PHP\nDESCRIPTION: Shows how to disable the default search field on the form page for HasMany relationship using the searchable() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->searchable(false) // disables the search field\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Confirmation Modal Name for ActionButton in PHP\nDESCRIPTION: Illustrates assigning a unique name dynamically to confirmation modals triggered by `ActionButton` using `withConfirm()`, essential when used in loops or tables. A Closure accesses contextual data (e.g., item key via `ActionButtonContract`) to generate a unique name like 'delete-button-{key}'. This prevents conflicts when multiple confirmation buttons exist on the same page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Button Label')\n    ->inModal( // Note: Example shows inModal, but context implies withConfirm dynamic naming\n        name: static fn (mixed $item, ActionButtonContract $ctx): string => \"delete-button-{$ctx->getData()?->getKey()}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Moonshine Ace Package via Composer in Shell\nDESCRIPTION: This shell command installs the moonshine/ace package using Composer, a dependency manager for PHP. Before running the command, ensure that Composer is installed and available in your system's PATH. Running this command adds the package and its dependencies to your project, updating the composer.json and composer.lock files accordingly. No other parameters are needed; input is handled by Composer, and the output will be a completed installation or error log.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/code.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/ace\n```\n\n----------------------------------------\n\nTITLE: Registering Policies for System Models (PHP)\nDESCRIPTION: This code snippet demonstrates how to register policies for system models in a Laravel service provider. It uses the `Gate::policy()` method to associate a policy class with a model class. This is necessary for models not located in the default `app/Models` directory, such as MoonShine system models. This registration occurs within the `boot` method of the service provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/authorization.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Policies\\MoonshineUserPolicy;\nuse App\\Policies\\MoonshineUserRolePolicy;\nuse MoonShine\\Laravel\\Models\\MoonshineUserRole;\nuse MoonShine\\Laravel\\Models\\MoonshineUser;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        Gate::policy(MoonshineUser::class, MoonshineUserPolicy::class);\n        Gate::policy(MoonshineUserRole::class, MoonshineUserRolePolicy::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fields in MoonShine ModelResource\nDESCRIPTION: This snippet demonstrates how to define different fields for index, form, and detail views in a MoonShine ModelResource. It shows the basic structure for declaring fields and how to use UI components like Box for grouping fields in the form view.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/fields.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Components\\Layout\\Box;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make(),\n            Text::make('Title'),\n        ];\n    }\n\n    protected function formFields(): iterable\n    {\n        return [\n            Box::make([\n                ID::make(),\n                Text::make('Title'),\n                Text::make('Subtitle'),\n            ]),\n        ];\n    }\n\n    protected function detailFields(): iterable\n    {\n        return [\n            Text::make('Title', 'title'),\n            Text::make('Subtitle'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Basic Table using Blade Component Blade\nDESCRIPTION: Uses the MoonShine Blade component 'x-moonshine::table' to render a styled table with specified columns and values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_39\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::table\n    :columns=\"[\n        '#', 'First', 'Last', 'Email'\n    ]\"\n    :values=\"[\n        [1, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [2, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [3, fake()->firstName(), fake()->lastName(), fake()->safeEmail()]\n    ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Making Table Columns Fixed (Sticky) in MoonShine (PHP)\nDESCRIPTION: Fixes specific table columns (like IDs or buttons) so they remain visible during horizontal scroll by applying 'sticky()' method on fields or enabling 'stickyButtons' for action columns.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Fields\\ID;\n\nprotected function indexFields(): iterable\n{\n    return [\n        ID::make()->sticky(),\n    ];\n}\n\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $stickyButtons = true;\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Component\nDESCRIPTION: This snippet demonstrates the basic structure for creating a custom Alpine.js component within a MoonShine application. It involves defining an HTML `div` with `x-data` to initialize the component and an associated JavaScript file or script to implement component logic.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div x-data=\"myComponent\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting up Laravel Application Shell\nDESCRIPTION: These shell commands are essential for setting up the Laravel application. It generates an application key, links the storage directory, migrates the database with seeding, creates a MoonShine user, and starts the development server. The `php artisan` commands handle key aspects of the application's setup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/contribution.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan key:generate\nphp artisan storage:link\nphp artisan migrate --seed\nphp artisan moonshine:user\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Making Select Field Nullable (PHP Class)\nDESCRIPTION: This snippet demonstrates how to allow NULL values in a Select field by using the `nullable()` method. This is necessary when you want to store NULL in the database if no option is selected.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Country', 'country_id')\n    ->options([\n        'value 1' => 'Option Label 1',\n        'value 2' => 'Option Label 2',\n    ])\n    ->nullable()\n```\n\n----------------------------------------\n\nTITLE: Using unless Method for Conditional Component Modification\nDESCRIPTION: Explains the unless() method, which is the opposite of when() and executes when the condition is false.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nunless(\n    $value = null,\n    ?callable $callback = null,\n    ?callable $default = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Field for Configuration File Saving in PHP\nDESCRIPTION: This snippet demonstrates how to create a Template field that allows editing of configuration values and saves them to a PHP file. It uses changeFill to populate the form from the current configuration, changeRender to create a form with the fields, and onApply to save the edited values back to a configuration file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/change-config.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTemplate::make('Config', 'config')->fields([\n    Text::make('Var'),\n    Text::make('Bar'),\n])\n    ->changeFill(fn(mixed $data) => config('test'))\n    ->changeRender(fn(mixed $value, Template $ctx) => FieldsGroup::make($ctx->getPreparedFields())->fill($value))\n    ->onApply(function(mixed $item, mixed $value) {\n        $content = str_replace(['array (', ')'], ['[', ']'], var_export($value, true));\n\n        file_put_contents(config_path('test.php'), \"<?php \\n\\nreturn $content;\");\n\n        return $item;\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for Sidebar, SidebarTop, and TopBar Components in PHP\nDESCRIPTION: These protected methods define arrays of components to be included in specific slots of the layout such as the Sidebar, SidebarTop, and TopBar. They return arrays of component instances (e.g., Search, Notifications) which populate these layout areas. There is a note on using dark mode CSS classes to maintain visual consistency when adding custom components. Dependencies include the component classes like Search and Notifications. Expected output is an array of component objects for each slot method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function sidebarSlot(): array\n{\n    return [\n        Search::make()->enabled(),\n        // ...\n    ];\n}\n\nprotected function sidebarTopSlot(): array\n{\n    return [\n        Notifications::make(),\n        // ...\n    ];\n}\n\nprotected function topBarSlot(): array\n{\n    return [\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wrapper Attributes for a Field\nDESCRIPTION: The `customWrapperAttributes()` method allows you to add attributes to the field's wrapper element. This can be used for styling and adding custom classes or other attributes to control the presentation of the field in the form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncustomWrapperAttributes(array $attributes)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Apply Class in MoonShine (PHP)\nDESCRIPTION: This snippet demonstrates how to create a custom apply class in MoonShine for modifying the apply logic of a specific field. It requires implementing the `ApplyContract` interface. The `apply` method should return a Closure that defines how the field's value should be processed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ApplyContract;\nuse MoonShine\\Contracts\\UI\\FieldContract;\n\n/**\n * @implements ApplyContract<File>\n */\nfinal class FileModelApply implements ApplyContract\n{\n    /**\n     * @param  File  $field\n     */\n    public function apply(FieldContract $field): Closure\n    {\n        return function (mixed $item) use ($field): mixed {\n            $requestValue = $field->getRequestValue();\n\n            $newValue = // ...\n\n            return data_set($item, $field->getColumn(), $newValue);\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to ValueMetric\nDESCRIPTION: Example of adding an icon to a ValueMetric to provide visual context for the displayed value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nValueMetric::make('Orders')\n    ->value(fn(): int => Order::count())\n    ->icon('shopping-bag')\n```\n\n----------------------------------------\n\nTITLE: Using Flex Component with Text Elements in PHP\nDESCRIPTION: This code demonstrates the usage of the `Flex` component and associated methods (`justifyAlign`, `itemsAlign`). It creates a flex container with two text components. It uses the `justifyAlign()` and `itemsAlign()` methods to control the horizontal and vertical alignment of the components within the flex container. The code uses `Text::make()` method to create text elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flex.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Flex;\n\nFlex::make([\n    Text::make('Test'),\n    Text::make('Test 2'),\n]),\n```\n\nLANGUAGE: php\nCODE:\n```\nFlex::make([\n    Text::make('Test'),\n    Text::make('Test 2'),\n])\n    ->justifyAlign('between')\n    ->itemsAlign('start')\n```\n\nLANGUAGE: php\nCODE:\n```\nFlex::make([\n    Text::make('Test'),\n    Text::make('Test 2'),\n])\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Skipping Menu Items PHP\nDESCRIPTION: The snippet shows how to use `SkipMenu` attribute. When applied to a Page or a Resource, it prevents the item from being added to the automatically generated menu. Dependencies: MoonShine framework. Input:  None. Output: The page/resource is omitted from menu.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:1]\nuse MoonShine\\MenuManager\\Attributes\\SkipMenu;\n\n#[SkipMenu]\nclass ProfilePage extends Page {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loader Indicator using PHP and Moonshine\nDESCRIPTION: This PHP snippet demonstrates how to instantiate a Loader component using the `Loader::make()` method. It requires the MoonShine framework to be installed and the necessary namespaces to be imported.  The primary output is a styled loading indicator.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/loader.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Loader;\n\nLoader::make()\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Event Names and Access (MoonShine, PHP)\nDESCRIPTION: Shows how to assign a unique name to a Modal component for event-driven control using the 'name' method. Utilizes MoonShine's Modal and ActionButton components. The named modal can then be targeted from JavaScript or ActionButton events. Accepts a string name and returns a configured Modal object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Modal;\n\n// ...\n\nprotected function components(): iterable\n{\n    return [\n        Modal::make(\n            'Title',\n            'Content',\n        )\n            ->name('my-modal'),\n    ];\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Customizing MoonShine Resource Alias via Method Override in PHP\nDESCRIPTION: This PHP example shows an alternate way to customize a resource's alias URL by overriding the public method 'getAlias()'. Returning a custom string from this method defines the URL segment for the resource in the MoonShine admin panel, replacing the default kebab-case of the class name. Useful for enhanced URL management within admin routes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/index.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    public function getAlias(): ?string\n    {\n        return 'custom-alias';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Colors Using ColorManager PHP\nDESCRIPTION: Retrieves colors from the ColorManager instance in various formats and scopes. You can get a color by name returning HEX format by default or RGB if specified. Also, shades of colors (such as dark theme shades) can be accessed by providing a numeric key. The method getAll() returns all colors for the light theme by default or the dark theme when passing the appropriate flag. This snippet serves for reading and using configured colors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Get color\n$colorManager->get('primary'); // Returns HEX\n$colorManager->get('primary', hex: false); // Returns RGB\n\n// Get shade\n$colorManager->get('dark', 500); // Get a specific shade\n\n// Get all colors\n$colorManager->getAll(); // For light theme\n$colorManager->getAll(dark: true); // For dark theme\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Field in Blade using MoonShine\nDESCRIPTION: This Blade snippet shows how to render a hidden input field. It uses a Moonshine component `x-moonshine::form.input` and sets the `type` attribute to \"hidden\". It defines the `name` attribute for the hidden field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/hidden.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.input\n    type=\"hidden\"\n    name=\"hidden_id\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to DateRange (PHP)\nDESCRIPTION: This snippet shows how to add custom attributes using methods `fromAttributes()` and `toAttributes()` to the `DateRange` field for styling or other purposes.  It allows for customized styling via the `class` attribute.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nDateRange::make('Dates')\n    ->fromTo('date_from', 'date_to')\n    ->fromAttributes(['class'=> 'bg-black'])\n    ->toAttributes(['class'=> 'bg-white'])\n```\n\n----------------------------------------\n\nTITLE: Generating ForgotPage with MoonShine Artisan (Shell)\nDESCRIPTION: Uses the PHP Artisan command-line tool with the MoonShine extension to scaffold a new page class named 'ForgotPage'. This command creates the basic structure for a MoonShine page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page ForgotPage\n```\n\n----------------------------------------\n\nTITLE: Managing Asset Collections in MoonShine\nDESCRIPTION: Examples of how to manage asset collections in MoonShine using the AssetManager. Shows how to append, prepend, and add assets to control the loading order.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Добавить ресурсы в конец\n$assetManager->append([\n    Js::make('/js/last.js')\n]);\n\n// Добавить ресурсы в начало\n$assetManager->prepend([\n    Js::make('/js/first.js')\n]);\n\n// Добавить ресурсы в порядке добавления\n$assetManager->add([\n    Js::make('/js/middle.js')\n]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout Class for a MoonShine PHP Page\nDESCRIPTION: Demonstrates setting the protected nullable string property `$layout` to assign a layout class (such as `AppLayout`) which determines the page's rendering template. Shows appropriate imports. Alternative approach using PHP attribute `#[Layout(AppLayout::class)]` is also mentioned for setting the layout declaratively.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected ?string $layout = AppLayout::class;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the blank() Method PHP\nDESCRIPTION: This snippet shows the usage of the `blank()` method for opening links in new tabs. The method accepts either a boolean value or a closure that determines whether to open the link in a new tab.  Dependencies: MoonShine framework.  Input: A boolean or a closure. Output: The link will open in a new tab if true is returned.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  (Closure(MenuElementContract $context): bool)|bool  $blankCondition\n */\nblank(Closure|bool $blankCondition = true)\n```\n\n----------------------------------------\n\nTITLE: Using Color Component in Blade Template\nDESCRIPTION: Shows how to use the Color component within a Blade template to render a colored div.  It requires the MoonShine Blade components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/color.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::color :color=\"'red'\"/>\n```\n\n----------------------------------------\n\nTITLE: Advanced HTML Popover with Configuration\nDESCRIPTION: Enhanced popover implementation without the component, showing how to add a title and configure placement using Alpine.js. This approach provides more customization options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/popover.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span\n    x-data=\"popover({placement: 'top'})\"\n    title=\"Popover title\"\n    data-content=\"HTML HERE\">\n    <a class=\"text-purple font-semibold\">Popover 2</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Preview Field with Image Display - PHP\nDESCRIPTION: This snippet shows how to transform a URL into a thumbnail image using the `image()` method on a Preview field. This is useful for displaying image previews directly within the MoonShine admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/preview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Thumb')\n    ->image()\n```\n\n----------------------------------------\n\nTITLE: Menu Initialization with Menu Items - PHP\nDESCRIPTION: This snippet demonstrates how to initialize a Menu component with custom menu items using the `MenuItem` class. It utilizes the `Menu::make()` method to create a menu and adds an item labeled 'Item' that links to the root URL ('/').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/menu.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\MenuManager\\MenuItem;\nuse MoonShine\\UI\\Components\\Layout\\Menu;\n\nMenu::make([\n    MenuItem::make('Item', '/')\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Basic Options in moonshine.php\nDESCRIPTION: This snippet demonstrates how to configure the basic options, such as directories, namespaces, and database settings using the `moonshine.php` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'dir' => 'app/MoonShine',\n'namespace' => 'App\\MoonShine',\n\n'use_migrations' => true,\n'use_notifications' => true,\n'use_database_notifications' => true,\n```\n\n----------------------------------------\n\nTITLE: Setting Subtitle in CardsBuilder Cards Using subtitle() in PHP\nDESCRIPTION: Shows how to set the card subtitle via the 'subtitle()' method, which accepts either a column name or a Closure that returns a dynamic subtitle string per item. The example chains the method after initializing CardsBuilder with paginated items and a title, demonstrating static subtitle text. This helps enhance cards with contextual additional information beneath the title.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nsubtitle(Closure|string $value)\n\nCardsBuilder::make(\n    items: Article::paginate()\n)\n    ->fields([Text::make('Text')])\n    ->title('title')\n    ->subtitle(static fn() => 'Subtitle')\n```\n\n----------------------------------------\n\nTITLE: Modifying List Component Attributes in MoonShine Resource using PHP\nDESCRIPTION: This snippet shows how to override the modifyListComponent method in a resource to customize the List component, adding custom attributes like `data-my-attr`. It leverages the ComponentContract interface to modify existing UI components without replacing them entirely.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\\n\\npublic function modifyListComponent(ComponentContract $component): ComponentContract\\n{\\n    return parent::modifyListComponent($component)->customAttributes([\\n        'data-my-attr' => 'value'\\n    ]);\\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Burger Component in PHP\nDESCRIPTION: Demonstrates how to create an instance of the Burger component using its static `make()` method in PHP. Requires importing the `MoonShine\\UI\\Components\\Layout\\Burger` class. This is typically used within MoonShine resource or page definitions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/burger.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Burger;\n\nBurger::make()\n```\n\n----------------------------------------\n\nTITLE: Creating RangeSlider Field in PHP\nDESCRIPTION: This code snippet demonstrates how to create a RangeSlider field in MoonShine. It imports the RangeSlider class from the MoonShine UI namespace and initializes a new RangeSlider instance. The `make()` method is used to create the field with a label ('Возраст') and a database column name ('age'). The `fromTo()` method specifies the range for the slider, using two separate inputs 'age_from' and 'age_to'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/range-slider.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\RangeSlider;\n\nRangeSlider::make('Возраст', 'age')\n    ->fromTo('age_from', 'age_to')\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop Row Sorting with MoonShine TableBuilder in PHP\nDESCRIPTION: The `reorderable()` method adds drag-and-drop sorting capabilities to table rows. It requires specifying a URL for server-side handling of reorder requests, a unique key identifying each row, and optionally a group name for grouping sortable items. This feature allows users to reorder rows interactively, with changes reflected and persisted on the backend.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/table-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n->reorderable(url: '/reorder-url', key: 'id', group: 'group-name')\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Menu with Markdown Links - HTML\nDESCRIPTION: Shows the syntax for constructing a navigational menu using a Markdown list of internal links. Each line contains a link anchored to a corresponding section. No external dependencies are needed. Inputs are section names in kebab-case, and outputs are rendered navigational elements. Only internal documentation sections are supported.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n- [Subtitle 1](#subtitle-1)\n- [Subtitle 2](#subtitle-2)\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Item Query Builder in MoonShine Resource (PHP)\nDESCRIPTION: This snippet shows how to modify the query builder specifically for retrieving a single record in a MoonShine resource. It overrides the `modifyItemQueryBuilder` method to include soft-deleted records using `withTrashed`. The method takes a `Builder` instance and returns a modified `Builder` instance, allowing for customized record retrieval logic.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/query.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nnamespace App\\MoonShine\\Resources;\n\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function modifyItemQueryBuilder(Builder $builder): Builder\n    {\n        return $builder->withTrashed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Subtitle on MoonShine Card in PHP\nDESCRIPTION: This snippet sets a subtitle for a MoonShine Card by chaining the subtitle() method with a closure returning a static string. The subtitle appears as additional descriptive text below the title and supports dynamic content via closures. The expected input is a string or closure, with output rendered in the card UI. Useful for providing contextual information or secondary headings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/card.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->subtitle(static fn() => 'Subtitle')\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine Header Component with PHP Class Syntax\nDESCRIPTION: Shows an example of creating a Header component by calling the static make method with an array of nested UI components, specifically a Search component. This snippet depends on importing the Header class from MoonShine\\UI\\Components\\Layout namespace and having the Search component defined. It demonstrates how to programmatically build a header layout containing search functionality using PHP fluent syntax. The output is a configured Header object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/header.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Header;\n\nHeader::make([\n    Search::make(),\n])\n```\n\n----------------------------------------\n\nTITLE: Replacing Default FormPage with ArticleFormPage in Resource Definition in PHP\nDESCRIPTION: This snippet demonstrates how to modify the 'pages' method of the 'ArticleResource' class to replace the default 'FormPage' with the custom 'ArticleFormPage'. This enables the resource to use the customized form page with relationship fields organized in tabs. The code showcases class inheritance and resource page configuration, ensuring the form page is correctly integrated into the resource lifecycle.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/tabs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function pages(): array\n{\n    return [\n        IndexPage::class,\n        // FormPage::class -> ArticleFormPage::class\n        ArticleFormPage::class,\n        DetailPage::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Columns in PHP\nDESCRIPTION: This PHP snippet defines the `make` function for the `Column` component, used to position elements within the grid. It accepts an iterable of components and parameters for defining column span and adaptive column span. The `$components` parameter is a list of components to be included, `$colSpan` sets the number of columns the block takes on screens 1280px and larger, and `$adaptiveColSpan` defines the column span for screens up to 1280px.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/grid.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    iterable $components = [],\n    int $colSpan = 12,\n    int $adaptiveColSpan = 12,\n)\n```\n\n----------------------------------------\n\nTITLE: Activating Menu Items by URL PHP\nDESCRIPTION: This snippet explains and illustrates the use of `whenActive()` to force a menu item to be active based on a URL pattern. It overrides the default behavior of menu item activation, which is based on the current URL matching the item's URL. Dependencies: MoonShine framework. Input: A closure to evaluate. Output: Forces the menu item to be active when the closure condition is met.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(string $path, string $host, MenuElementContract $context): bool  $when\n */\nwhenActive(Closure $when)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CardsBuilder with Items and Fields in PHP\nDESCRIPTION: Illustrates constructing a CardsBuilder component instance by providing a simple array of items, each containing an 'id' and 'title', alongside an array of field definitions including ID and Text fields. This snippet initializes the component to represent basic card data with field mapping. It requires classes for ID and Text fields to be defined or imported accordingly.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    [\n        ['id' => 1, 'title' => 'Title 1'],\n        ['id' => 2, 'title' => 'Title 2'],\n    ],\n    [\n        ID::make(),\n        Text::make('title')\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving route URL for named route within resource context\nDESCRIPTION: Provides an example of obtaining a route URL using the route helper within a resource context by its name, facilitating the creation of resource-specific links.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/routes.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$this->getRoute('permissions')\n```\n\n----------------------------------------\n\nTITLE: Install MoonShine JWT Package via Composer\nDESCRIPTION: This shell command installs the MoonShine JWT package, providing functionality for JWT authentication. It adds the necessary dependencies to the project using Composer.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/jwt\n```\n\n----------------------------------------\n\nTITLE: Validating User Registration in RegisterFormRequest (PHP)\nDESCRIPTION: Defines validation rules within `RegisterFormRequest` for the user registration form. The `authorize` method restricts registration attempts to unauthenticated users (`guest`). The `rules` method requires a `name`, a valid `email` with DNS check that must be unique in the `users` table, and a required, confirmed `password`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/profile.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Contracts\\Validation\\ValidationRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\n\nclass RegisterFormRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        return auth()->guest();\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, ValidationRule|array|string>\n     */\n    public function rules(): array\n    {\n        return [\n            'name' => ['required'],\n            'email' => ['required', 'email:dns', Rule::unique('users')],\n            'password' => ['required', 'confirmed'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Resource Model - MoonShine PHP\nDESCRIPTION: This simple call demonstrates accessing the underlying Eloquent model associated with a MoonShine resource using getModel(). Method should be invoked in a context where the resource class is available. Returns the model instance for further manipulation or data fetching. No external dependencies beyond MoonShine's resource class context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->getModel();\n```\n\n----------------------------------------\n\nTITLE: Loading Asynchronous Content with Blade\nDESCRIPTION: This example demonstrates how to load asynchronous content into a modal using the Blade component `<x-moonshine::modal>`. It shows the use of the `async` and `asyncUrl` attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal\n    async\n    :asyncUrl=\"route('async')\"\n    title=\"Title\"\n>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open async modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Default Color Definitions in ColorManager - PHP\nDESCRIPTION: Defines the default color palette for the administration panel using the ColorManager. Includes primary, secondary, body colors, dark theme shades, and status colors like success, warning, error, and info. Colors are defined in RGB format.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Основные\n'primary' => '120, 67, 233' // Основной цвет\n'secondary' => '236, 65, 118' // Вторичный цвет\n'body' => '27, 37, 59' // Цвет фона\n\n// Оттенки тёмного (dark)\n'dark' => [\n    'DEFAULT' => '30, 31, 67',\n    50 => '83, 103, 132', // поиск, тосты, прогресс бары\n    100 => '74, 90, 121', // разделители\n    200 => '65, 81, 114', // разделители\n    300 => '53, 69, 103', // границы\n    400 => '48, 61, 93',  // выпадающие списки, кнопки, пагинация\n    500 => '41, 53, 82',  // фон кнопок по умолчанию\n    600 => '40, 51, 78',  // строки таблицы\n    700 => '39, 45, 69',  // фон контента\n    800 => '27, 37, 59',  // фон сайдбара\n    900 => '15, 23, 42',  // основной фон\n]\n\n// Статусные цвета\n'success-bg' => '0, 170, 0'\n'success-text' => '255, 255, 255'\n'warning-bg' => '255, 220, 42'\n'warning-text' => '139, 116, 0'\n'error-bg' => '224, 45, 45'\n'error-text' => '255, 255, 255'\n'info-bg' => '0, 121, 255'\n'info-text' => '255, 255, 255'\n```\n\n----------------------------------------\n\nTITLE: Updating TableBuilder tdAttributes Callbacks in MoonShine using PHP\nDESCRIPTION: This PHP snippet shows the new approach for specifying cell and row attributes in a TableBuilder component using lambda callbacks. First, a callback sets background color for row 3; second, a callback right-aligns cell 3. Both demonstrate the updated v3.0 API. Inputs are the data, row or cell indices, and the TableBuilder instance; outputs are associative arrays of HTML attribute key-values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->tdAttributes(fn(mixed $data, int $row, TableBuilder $table): array =>\n        $row === 3 ? ['class' => 'bgc-yellow'] : []\n    )\n    ->tdAttributes(fn(mixed $data, int $row, int $cell, TableBuilder $table): array =>\n        $cell === 3 ? ['align' => 'right'] : []\n    )\n```\n\n----------------------------------------\n\nTITLE: Referencing Methods in Other Documentation Sections - HTML\nDESCRIPTION: Demonstrates pointing to a different documentation section for basic methods after the 'Basics' heading, using descriptive Markdown. No dependencies required. The link leads users to a separate section for shared or fundamental functions, keeping current documentation concise.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<a name=\"basics\"></a>\n## Основы\n\nСодержит все [Базовые методы](/docs/{{version}}/fields/basic-methods).\n\n```\n\n----------------------------------------\n\nTITLE: Modifying List Component\nDESCRIPTION: This code snippet shows how to modify the list component of the index page using `modifyListComponent()`. It applies custom attributes like `data-my-attr` to the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/index.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\n\npublic function modifyListComponent(ComponentContract $component): ComponentContract\n{\n    return parent::modifyListComponent($component)->customAttributes([\n        'data-my-attr' => 'value'\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ServiceProvider in composer.json\nDESCRIPTION: This JSON snippet shows the necessary configuration within the `extra.laravel.providers` section of your package's `composer.json` file to automatically load your ServiceProvider in a Laravel application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/package-development.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"extra\": {\n    \"laravel\": {\n        \"providers\": [\n            \"Author\\\\MoonShineMyPackage\\\\MyPackageServiceProvider\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up an afterResponse callback in PHP for ActionButton\nDESCRIPTION: This code snippet illustrates how to define an ActionButton with a callback that triggers a JavaScript function after a successful server response, specified via the `afterResponse` parameter. It indicates that if a `responseHandler` is used, `afterResponse` will be ignored. The intent is to perform client-side actions upon successful server responses, linked to the specific callback function.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make()\n    ->method(\n        'myMethod',\n        callback: AsyncCallback::with(afterResponse: 'myAfterResponse')\n    )\n```\n\n----------------------------------------\n\nTITLE: Changing Preview of Select Field PHP\nDESCRIPTION: This example demonstrates how to change the preview of a `Select` field in MoonShine using the `changePreview()` method. It converts image links selected in a `Select` field into a carousel of images for display. It uses the `Carousel` component from MoonShine's UI library.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/index.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Carousel;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple() // The field can have multiple values\n    ->fill(['/images/1.png', '/images/2.png']) // We filled the field, indicating which values are selected\n    ->changePreview(\n        fn(?array $values, Select $ctx) => Carousel::make($values)\n    ) // changed the preview state\n```\n\n----------------------------------------\n\nTITLE: Anchoring Subsections for Navigation - HTML\nDESCRIPTION: Explains how to add an anchor tag before a subsection heading for direct URL linking. Inputs include an anchor name and a heading; outputs are an anchor element followed by the appropriate heading tag. Required for linking navigation items to their respective sections. No dependencies, but anchor names should be unique.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<a name=\"anchor\"></a>\n## Subtitle\n\n```\n\n----------------------------------------\n\nTITLE: Modifying List and Detail Components in MoonShine Resource - PHP\nDESCRIPTION: Demonstrates how to customize the TableBuilder components for the index (list) and detail pages by overriding modifyListComponent and modifyDetailComponent methods. These methods receive a ComponentContract instance allowing you to add custom attributes or behavior before returning it. Useful for adding custom data attributes or altering component rendering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\n\npublic function modifyListComponent(ComponentContract $component): ComponentContract\n{\n    return parent::modifyListComponent($component)->customAttributes([\n        'data-my-attr' => 'value'\n    ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ComponentContract;\n\npublic function modifyDetailComponent(ComponentContract $component): ComponentContract\n{\n    return parent::modifyDetailComponent($component)->customAttributes([\n        'data-my-attr' => 'value'\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Asset Load Order with MoonShine AssetManager (PHP)\nDESCRIPTION: Illustrates controlling the loading order of assets using an `AssetManager` instance (typically obtained via DI or `moonshine()->getAssetManager()`). Shows `append()` to add assets before the main list, `prepend()` to add after, and `add()` which depends on the application lifecycle context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\Js;\n\n// Add assets to the end\n$assetManager->append([\n    Js::make('/js/last.js')\n]);\n\n// Add assets to the beginning\n$assetManager->prepend([\n    Js::make('/js/first.js')\n]);\n\n// Add assets in the order of addition\n$assetManager->add([\n    Js::make('/js/middle.js')\n]);\n```\n\n----------------------------------------\n\nTITLE: Associating BelongsToMany Field with Another Form Field (PHP)\nDESCRIPTION: Uses the `associatedWith()` method to link the 'Cities' `BelongsToMany` field with the 'country_id' field in the same form. The available cities will be filtered based on the selected country. This typically requires `asyncSearch` to be configured as well for dynamic filtering.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CityResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsToMany::make('Cities', 'cities', resource: CityResource::class)\n    ->associatedWith('country_id')\n```\n\n----------------------------------------\n\nTITLE: Defining the `relatedLink` Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `relatedLink()`, which displays the relationship as a link containing the count of related items. The link directs to the child resource's index page, filtered to show only these related items. It accepts optional parameters for the link relation name and a condition (Closure or boolean) to control when the link is displayed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nrelatedLink(?string $linkRelation = null, Closure|bool $condition = null)\n```\n\n----------------------------------------\n\nTITLE: MobileBar Usage Example - PHP\nDESCRIPTION: Demonstrates how to use the `MobileBar` component with various other MoonShine UI components to customize the mobile dropdown panel. It includes creating a logo, theme switcher, burger menu, and user profile section.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/mobilebar.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\MobileBar;\n\nMobileBar::make([\n    Div::make([\n        Div::make([\n            $this->getLogoComponent(),\n        ])->class('menu-heading-logo'),\n\n        Div::make([\n            ThemeSwitcher::make(),\n\n            Div::make([\n                Burger::make(),\n            ])->class('menu-heading-burger'),\n        ])->class('menu-heading-actions'),\n    ])->class('menu-heading'),\n\n    Div::make([\n        Menu::make(),\n        When::make(\n            fn (): bool => $this->isAuthEnabled(),\n            static fn (): array => [Profile::make(withBorder: true)],\n        ),\n    ])->customAttributes([\n        'class' => 'menu',\n        ':class' => \"asideMenuOpen && '_is-opened'\",\n    ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsToMany Values Query in MoonShine PHP\nDESCRIPTION: Illustrates how to use the `valuesQuery()` method with a closure to modify the underlying Eloquent query used to fetch available options for the `BelongsToMany` field. The example adds a `where('active', true)` clause. The closure receives the query builder instance and the field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:4]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse Illuminate\\Contracts\\Database\\Eloquent\\Builder;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\nuse MoonShine\\UI\\Fields\\Field;\n\nBelongsToMany::make('Categories', 'categories', resource: CategoryResource::class)\n    ->valuesQuery(fn(Builder $query, Field $field) => $query->where('active', true))\n```\n\n----------------------------------------\n\nTITLE: Using the icon() Method with Heroicons in PHP\nDESCRIPTION: This snippet demonstrates the usage of the `icon()` function to render an icon from the Heroicons collection. It takes the icon name as a string and optionally a boolean indicating custom mode and the path to icon files. The function retrieves and displays an icon using the specified name or HTML, utilizing Blade templates for the icons. Dependencies: The `icon()` function is required. Heroicons are used as the default icon set.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nicon(\n    string $icon,\n    bool $custom = false,\n    ?string $path = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Logic After a Field is Filled (PHP)\nDESCRIPTION: This snippet demonstrates how to apply logic to a field after it has been filled using the `afterFill()` method.  The `afterFill()` method accepts a Closure that receives the field context as an argument. The Closure can modify the field's attributes or return a modified field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->afterFill(\n        function(Select $ctx) {\n            if(collect($ctx->toValue())->every(fn($value) => str_contains($value, 'cutcode.dev'))) {\n                return $ctx->customWrapperAttributes(['class' => 'full-url']);\n            }\n\n            return $ctx;\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Link Elements in Blade Templates with MoonShine\nDESCRIPTION: This snippet shows how to use MoonShine's Blade components for links. It includes examples of the <x-moonshine::link-button> and <x-moonshine::link-native> components, which accept an href attribute for the link URL and content between tags for the link label. These components provide Blade-friendly ways to render consistent styled links.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/link.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::link-button href=\"#\">\n    Link\n</x-moonshine::link-button>\n\n<x-moonshine::link-native href=\"#\">\n    Link\n</x-moonshine::link-native>\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Value Retrieval\nDESCRIPTION: The `onRequestValue()` method enables you to override the standard logic used to retrieve a field's value from the incoming request.  This is particularly useful for complex data retrieval scenarios or when values need to be handled differently based on context. The callback receives the request value, field name, default value, and the field context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n* @param  Closure(mixed $value, string $name, mixed $default, static $ctx): mixed  $callback\n*/\nonRequestValue(Closure $callback)\n```\n\n----------------------------------------\n\nTITLE: Changing Button Attributes PHP\nDESCRIPTION: This code demonstrates the `changeButton` method to modify the appearance of a menu item's button by adding a class. Dependencies: MoonShine framework and `ActionButton` class.  Input: A closure to modify the action button. Output: Menu button's class changes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// [tl! collapse:5]\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Label', '/endpoint')\n                ->changeButton(static fn(ActionButton $button) => $button->class('new-item')),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flex Component in PHP\nDESCRIPTION: This snippet demonstrates how to initialize and use the `Flex` component in PHP. It takes an array of components, column spans, alignment options, and a flag for space, and utilizes the `Flex::make()` method to create a flex container. This method is crucial for laying out components inside the container.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flex.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    iterable $components = [],\n    int $colSpan = 12,\n    int $adaptiveColSpan = 12,\n    string $itemsAlign = 'center',\n    string $justifyAlign = 'center',\n    bool $withoutSpace = false\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Layer Components in MoonShine (PHP)\nDESCRIPTION: This PHP snippet shows how to retrieve an array of components from a specific layer (e.g., `Layer::BOTTOM`) using the `getLayerComponents()` method. It demonstrates accessing components both from within a Resource context (via `$this->getFormPage()->getLayerComponents()`) and directly from a Page context (`$this->getLayerComponents()`). Requires the `MoonShine\\Support\\Enums\\Layer` enum.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Support\\Enums\\Layer;\n\n// ...\n\n// Resource\n$this->getFormPage()->getLayerComponents(Layer::BOTTOM);\n\n// Page\n$this->getLayerComponents(Layer::BOTTOM);\n```\n\n----------------------------------------\n\nTITLE: Creating RangeSlider Field for Filter in PHP\nDESCRIPTION: This code snippet shows how to use the RangeSlider field for filtering in MoonShine. It imports the RangeSlider class from the MoonShine UI namespace and creates a RangeSlider field. The `make()` method is used with a label ('Возраст') and a database column name ('age'). Unlike the previous example, the `fromTo()` method is not used as filtering occurs on a single database field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/range-slider.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\RangeSlider;\n\nRangeSlider::make('Возраст', 'age')\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine E-mail Field in PHP\nDESCRIPTION: This snippet demonstrates how to use the Email field within the MoonShine UI Fields library. It requires prior installation of the MoonShine framework and the availability of the Text and Email field classes. The Email::make function creates an input component specifically for e-mail data by setting the 'type' attribute to 'email', ensuring correct rendering and validation. The primary parameter is the display label, here specified as 'Email'. The snippet is intended for use within MoonShine resource field definitions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/email.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Email;\n\nEmail::make('Email')\n```\n\n----------------------------------------\n\nTITLE: Install MoonShine OAG Package via Composer\nDESCRIPTION: This shell command installs the MoonShine OAG (OpenApi Generator) package, providing functionality for generating OpenApi specifications. It adds the necessary dependencies to the project using Composer.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/oag\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Secret in Environment File\nDESCRIPTION: Defines the base64-encoded JWT secret key in the .env file required for signing and verifying JWT tokens. This key must be a secure random string and is essential for token security and validity.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nJWT_SECRET=YOUR_BASE64_SECRET_HERE\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Url Field in PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of the MoonShine Url field. It utilizes the static `make()` method to create an instance, providing the field label as an argument. This field defaults to setting the HTML input type attribute to \"url\".\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/url.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Url;\n\nUrl::make('Link')\n```\n\n----------------------------------------\n\nTITLE: Defining a Markdown Partial Template - Markdown\nDESCRIPTION: Shows example content for a markdown partial, supporting parameter substitution via sprintf when included elsewhere. Inputs are template content with sprintf-style placeholders; output is processed content with parameters. Useful for DRY documentation patterns.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n## Hello world\n%s - %s\n\n```\n\n----------------------------------------\n\nTITLE: Extending Components with Macroable Trait Using mixin()\nDESCRIPTION: Demonstrates how to extend components by injecting multiple methods using the mixin() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// for all\nMoonShineComponent::mixin(new MyNewMethods())\n\n// for a specific one\nBox::mixin(new MyNewMethods())\n```\n\n----------------------------------------\n\nTITLE: Anchoring and Labeling the Basics Section - HTML\nDESCRIPTION: Provides an example for marking the primary section (typically called 'Basics') with an anchor and heading, both using the same identifier. No external dependencies are needed. Inputs are fixed section name and anchor; outputs facilitate consistent referencing in navigation. Best used as the first major subsection.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a name=\"basics\"></a>\n## Основы\n\n```\n\n----------------------------------------\n\nTITLE: Removing Old Layout and Backup Files After Migration using Shell\nDESCRIPTION: This command sequence removes the deprecated layout file and backup copies after upgrading and completing migration. Use with caution since it permanently deletes the files. Prerequisite: ensure successful migration and no further need for backups.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Old Layout (if it exists)\nrm app/MoonShine/MoonShineLayout.php\n\n# Backups of files from 2.x\nrm config/moonshine_old.php\nrm app/Providers/MoonShineServiceProvider_old.php\nrm app/MoonShine/Pages/Dashboard_old.php\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Content Components Override\nDESCRIPTION: Demonstrates how to customize the Content component within the MoonShine admin panel layout by overriding the  `getContentComponents()` method. This allows custom content to be displayed on pages.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected function getContentComponents(): array\n{\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nContent::make(\n    $this->getContentComponents()\n)\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Header Component Override\nDESCRIPTION: Demonstrates how to override the Header component within the MoonShine admin panel layout using the `getHeaderComponent()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaderComponent(): Header\n{\n    Header::make([\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Links to Footer\nDESCRIPTION: Method to add a menu section to the footer. The menu method accepts an associative array where keys are URLs and values are the menu item labels.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/footer.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  array<string, string>  $data\n */\nmenu(array $data)\n```\n\nLANGUAGE: php\nCODE:\n```\nFooter::make()\n    ->menu([\n        'https://moonshine-laravel.com/docs' => 'Documentation',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Fields with Custom Attributes in PHP\nDESCRIPTION: This snippet shows how to define table fields using the `fields()` method and customize their appearance using `customWrapperAttributes()`. It illustrates how to apply custom attributes like CSS classes to individual table cells, which is useful for custom styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n->fields([\n    ID::make()->sortable(),\n    Text::make('Title', 'title')->customWrapperAttributes(['class' => 'my-class']),\n])\n```\n\n----------------------------------------\n\nTITLE: Requesting SDUI Structure Without States (GET)\nDESCRIPTION: This code snippet displays how to request the SDUI structure without component states.  This is done by sending a GET request with both the X-MS-Structure and X-MS-Without-States headers set to true. The server will then return a JSON structure excluding the states.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/sdui.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /admin/dashboard HTTP/1.1\nX-MS-Structure: true\nX-MS-Without-States: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Mini Heroicon in PHP\nDESCRIPTION: This code snippet shows how to render a mini Heroicon using the `icon()` method, presumably differentiating it with a prefix. The icon name begins with a prefix 'm' which specifies that it's a mini icon. The output is the rendering of the mini icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/icons.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n->icon('m.academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Centering Text in MoonShine Divider using PHP\nDESCRIPTION: This snippet demonstrates how to center the label text inside a MoonShine Divider component by chaining the centered() method after make(). The method modifies the divider to display the label text aligned centrally within the dividing line. Prerequisites include MoonShine UI PHP environment.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/divider.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDivider::make('Separator')\n    ->centered()\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to MoonShine Collapse Component in PHP\nDESCRIPTION: Defines the icon() method signature allowing customization of the collapse block’s icon. Accepts an icon name string, a Boolean indicating if the icon is custom, and an optional path to the icon asset. This method requires referencing the icons documentation for supported icons and usage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/collapse.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nicon(\n    string $icon,\n    bool $custom = false,\n    ?string $path = null\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Buttons in RelationRepeater\nDESCRIPTION: This snippet demonstrates how to override the default buttons used in the RelationRepeater field.  It replaces the default buttons with a custom ActionButton for deleting items. The button is styled with a trash icon and an error class.  It uses `showInLine()` to ensure it is displayed inline with the repeater items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Laravel\\Fields\\Relationships\\RelationRepeater;\nuse MoonShine\\UI\\Components\\ActionButton;\n\nRelationRepeater::make('Comments', 'comments')\n    ->buttons([\n        ActionButton::make('', '#')\n            ->icon('trash')\n            ->onClick(fn() => 'remove()', 'prevent')\n            ->class('btn-error')\n            ->showInLine()\n    ])\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom MoonShine Field via Artisan CLI (Shell)\nDESCRIPTION: Documents the CLI command to scaffold a new custom field class named Quill. Uses the php artisan moonshine:field command as provided by MoonShine's artisan extension. The resultant class should then be edited to add required assets and functionality for the Quill WYSIWYG editor. Assumes a pre-existing MoonShine Laravel installation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/package-development.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:field Quill\n\n```\n\n----------------------------------------\n\nTITLE: Translating Menu Items PHP\nDESCRIPTION: This snippet shows how to make menu items translatable. The `translatable()` method is used to enable translation for menu item labels. The translation key is used, and the actual translations are stored in language files (e.g., `lang/ru/menu.php`).  Dependencies: MoonShine framework and Laravel localization features. Input: A translation key string or none. Output: Translated menu labels.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntranslatable(string $key = '')\n```\n\n----------------------------------------\n\nTITLE: Rendering MoonShine Dropdown Component (Blade)\nDESCRIPTION: Shows the basic usage of the MoonShine Dropdown component as a Blade X-component. It illustrates how to define the main content within the component tags and how to use the `toggler` slot for the trigger element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/dropdown.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown>\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering Number Input Field in MoonShine - Blade\nDESCRIPTION: Rendering a Number input field in a Blade template using MoonShine's form components. This snippet uses a field container label 'Sort' and sets an HTML <input> of type number named 'sort'. Required dependencies include MoonShine's Blade component system. Inputs are handled via standard form submission, output is a number input UI element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::field-container label=\"Sort\">\n    <x-moonshine::form.input\n        type=\"number\"\n        name=\"sort\"\n    />\n</x-moonshine::field-container>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color Methods with ColorManager - PHP\nDESCRIPTION: Demonstrates the use of dynamic methods for setting main colors using the ColorManager in PHP.  Each main color has a corresponding dynamic method that can be used to set its value. Requires an instance of the ColorManager class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/colors.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$colorManager->primary('120, 67, 233');\n$colorManager->secondary('236, 65, 118');\n$colorManager->successBg('0, 170, 0');\n$colorManager->successText('255, 255, 255');\n$colorManager->warningBg('255, 220, 42');\n$colorManager->warningText('139, 116, 0');\n$colorManager->errorBg('224, 45, 45');\n$colorManager->errorText('255, 255, 255');\n$colorManager->infoBg('0, 121, 255');\n$colorManager->infoText('255, 255, 255');\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Selection with Saved Preferences in MoonShine (PHP)\nDESCRIPTION: Allows users to choose which columns to display in the table and saves this preference across sessions by setting the 'columnSelection' property to true. Fields can be individually excluded from selection with 'columnSelection(false)'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $columnSelection = true;\n\n    // ...\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make()->columnSelection(false),\n            Text::make('Title'),\n            Textarea::make('Body'),\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening a Modal with ActionButton in PHP\nDESCRIPTION: Example demonstrating how to make an `ActionButton` trigger a modal window using the `inModal()` method. It specifies the title, content, and a unique name ('my-modal') for the modal. A builder Closure is also shown for potential customization of the `Modal` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Modal;\n\nActionButton::make('Button Label')\n    ->inModal(\n        title: 'Modal Window Title',\n        content: 'Modal Window Content',\n        name: 'my-modal',\n        builder: fn(Modal $modal, ActionButton $ctx) => $modal\n    )\n```\n\n----------------------------------------\n\nTITLE: Linking BelongsToMany Values with Another Field in MoonShine PHP\nDESCRIPTION: Demonstrates using the `associatedWith()` method on a `BelongsToMany` field ('Cities') to establish a relationship with another form field (identified by 'country_id'). This typically filters the available options in the 'Cities' field based on the selected value in the 'country_id' field. Requires the field identified by 'country_id' to exist in the form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CityResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsToMany::make('Cities', 'cities', resource: CityResource::class)\n    ->associatedWith('country_id')\n```\n\n----------------------------------------\n\nTITLE: Forcing Modal to Reload Content on Every Open (MoonShine, PHP)\nDESCRIPTION: Using the alwaysLoad() method forces the asynchronous Modal to fetch fresh data from the endpoint on each open, instead of only the first time. Should be chained to a previously asynchronous Modal definition. MoonShine dependency only.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nModal::make(...)\n        ->alwaysLoad(),\n```\n\n----------------------------------------\n\nTITLE: Implementing HasManyThrough Relationship in MoonShine\nDESCRIPTION: Example of creating a HasManyThrough field that links to Deployments. The field is configured with a display label, relationship method name, and a reference to the DeploymentResource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many-through.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasManyThrough;\n\nHasManyThrough::make(\n    'Deployments',\n    'deployments',\n    resource: DeploymentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing CardsBuilder in Blade Template\nDESCRIPTION: Example of using cards in Blade templates with the moonshine card component, demonstrating layout structure with thumbnail, title, content, and actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.grid>\n    <x-moonshine::layout.column colSpan=\"4\" adaptiveColSpan=\"12\">\n        <x-moonshine::card\n            url=\"#\"\n            thumbnail=\"/images/image_1.jpg\"\n            :title=\"fake()->sentence(3)\"\n            :subtitle=\"date('d.m.Y')\"\n            :values=\"['ID' => 1, 'Author' => fake()->name()]\"\n        >\n            <x-slot:header>\n                <x-moonshine::badge color=\"green\">new</x-moonshine::badge>\n            </x-slot:header>\n\n            {{ fake()->text() }}\n\n            <x-slot:actions>\n                <x-moonshine::link-button href=\"#\">Read more</x-moonshine::link-button>\n            </x-slot:actions>\n        </x-moonshine::card>\n    </x-moonshine::layout.column>\n</x-moonshine::layout.grid>\n```\n\n----------------------------------------\n\nTITLE: Using Header Component in Blade Templates\nDESCRIPTION: This example shows how to use the Header component in Blade templates using the x-moonshine::layout.header component tag with custom content inside it.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/header.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.header>\n    Any content\n</x-moonshine::layout.header>\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication Pipelines in moonshine.php\nDESCRIPTION: An example of setting up authentication pipelines within the configuration settings of the `moonshine.php` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    // ...\n    'pipelines' => [\n        TwoFactor::class\n    ],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Using Route::moonshine to declare routes with resource, page and authentication options\nDESCRIPTION: Demonstrates the use of a special Route helper 'moonshine' to quickly declare routes with additional options. It allows setting whether resource and page prefixes are added, and whether authentication middleware is included. The pattern supports rapid route creation with customizable structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/routes.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::moonshine(static function (Router $router) {\n    $router->post(\n        'permissions/{resourceItem}',\n        PermissionController::class\n    )->name('permissions');\n}, withResource: true, withPage: true, withAuthenticate: true);\n```\n\n----------------------------------------\n\nTITLE: Displaying BelongsToMany as a Related Link (PHP)\nDESCRIPTION: Uses the `relatedLink()` method on a `BelongsToMany` field to display a link to the related 'Categories'. The link text will show the count of categories, and it points to the index page of the `CategoryResource`, pre-filtered by the parent resource using the specified 'category' relation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->relatedLink('category')\n```\n\n----------------------------------------\n\nTITLE: Embedding Images Using Markdown Syntax - Plain Text\nDESCRIPTION: Shows the Markdown notation for inserting images by URL. Inputs are the image name in brackets and full URL in parentheses, optionally with light/dark theme hash tags. Outputs are embedded images, with theme-specific variations where needed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_15\n\nLANGUAGE: Plain Text\nCODE:\n```\n![belongs_to_many](https://raw.githubusercontent.com/moonshine-software/doc/3.x/resources/screenshots/belongs_to_many.png)\n\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n![belongs_to_many](https://raw.githubusercontent.com/moonshine-software/doc/3.x/resources/screenshots/belongs_to_many.png#light)\n![belongs_to_many](https://raw.githubusercontent.com/moonshine-software/doc/3.x/resources/screenshots/belongs_to_many_dark.png#dark)\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Creation for BelongsTo Field (Method Signature) in MoonShine (PHP)\nDESCRIPTION: Shows the method signature for `creatable()`. This method adds a button next to the `BelongsTo` field, allowing users to create a new instance of the related model in a modal window without leaving the current form. It accepts an optional condition and a custom `ActionButton` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ncreatable(\n    Closure|bool|null $condition = null,\n    ?ActionButton $button = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Popover Blade Component\nDESCRIPTION: Illustrates how to render a popover using the `x-moonshine::popover` Blade component. Attributes like `title` and `placement` are passed directly. The trigger element is defined within the `trigger` slot, and the popover's main content is placed between the component tags.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/popover.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::popover title=\"Popover title\" placement=\"right\">\n    <x-slot:trigger>\n        <button class=\"btn\">Popover</button>\n    </x-slot:trigger>\n    <p>This is a very beautiful popover, show some love.</p>\n    <div class='flex justify-between mt-3'>\n        <button type='button' class='btn btn-sm'>Skip</button>\n        <button type='button' class='btn btn-sm btn-primary'>Read More</button>\n    </div>\n</x-moonshine::popover>\n```\n\n----------------------------------------\n\nTITLE: Common Methods for Import/Export Handlers\nDESCRIPTION: This snippet details common methods available for customizing both `ImportHandler` and `ExportHandler`.  These include `icon()` for setting a button icon, `queue()` for background processing, `modifyButton()` to customize the appearance of the button via a closure that receives `ActionButton` and `notifyUsers()` which allows defining an array of users to notify upon completion.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nicon(string $icon)\n```\n\nLANGUAGE: php\nCODE:\n```\nqueue()\n```\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Components\\ActionButton;\n\nmodifyButton(\n    fn(ActionButton $btn) => $btn->class('my-class')\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nnotifyUsers(\n    fn() => [auth()->id()]\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying the Create Button Style in MoonShine (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to modify the default 'Create' button within a MoonShine resource. It overrides the `modifyCreateButton` method, takes the existing `ActionButtonContract` instance, applies the `error()` styling method to change its appearance, and returns the modified button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyCreateButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->error();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionButton afterResponse in MoonShine (PHP)\nDESCRIPTION: Configures a MoonShine `ActionButton` to execute a specific JavaScript function after successfully receiving a response from the specified PHP method (`myMethod`). The `afterResponse` parameter of the `AsyncCallback` specifies the name of the JavaScript function to call. Note that this callback is not executed if `responseHandler` is used.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make()\n    ->method(\n        'myMethod',\n        callback: AsyncCallback::with(afterResponse: 'myAfterResponse')\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Auto Width Modal with Blade\nDESCRIPTION: This demonstrates how to create a modal with automatic width adjustment based on content using the Blade component `<x-moonshine::modal>` with the `auto` attribute.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal auto title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open auto modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Initializing Rating Component in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a Rating component instance using the `make` method, specifying the rating value and optional minimum and maximum bounds. It highlights the component's parameters and defaults, facilitating programmatic creation of stylized ratings within PHP applications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/rating.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n    int $value,\n    int $min = 1,\n    int $max = 5,\n)\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields from Column Selection in MoonShine (PHP)\nDESCRIPTION: This snippet shows how to exclude specific fields from the column selection feature in a MoonShine table. The `columnSelection(false)` method is called on the field to prevent it from being selectable.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:6]\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\nuse MoonShine\\UI\\Fields\\ID;\nuse MoonShine\\UI\\Fields\\Text;\nuse MoonShine\\UI\\Fields\\Textarea;\n\nclass PostResource extends ModelResource\n{\n    protected bool $columnSelection = true;\n\n    // ...\n\n    protected function indexFields(): iterable\n    {\n        return [\n            ID::make()\n                ->columnSelection(false),\n            Text::make('Title'),\n            Textarea::make('Body'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Search Component - PHP\nDESCRIPTION: This snippet demonstrates how to instantiate the Search component using the `Search::make()` method in PHP. This method is likely part of a framework's API for creating the component. It creates the search form, which is then rendered in a specified layout. There are likely no input parameters for this simple example, the output is a renderable search form.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/search.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSearch::make()\n```\n\n----------------------------------------\n\nTITLE: Changing the Render Logic of a Field (PHP)\nDESCRIPTION: This snippet demonstrates how to completely change the rendering of a field using the `changeRender()` method. The `changeRender()` method accepts a Closure that receives the field's value and context as arguments.  The Closure should return the rendered HTML for the field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->changeRender(\n        fn(?array $values, Select $ctx) => Text::make($ctx->getLabel())->fill(implode(',', $values))\n    )\n```\n\n----------------------------------------\n\nTITLE: Multiple Selectors with MoonShineJsonResponse (PHP)\nDESCRIPTION: This snippet demonstrates how to use MoonShineJsonResponse to update multiple selectors on a page. It defines a function `multipleSelectors` that returns a MoonShineJsonResponse instance, updating content within the specified selectors. The example also shows how to create ActionButtons that trigger this function, targeting specific selectors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/multiple-fragments-selectors.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function multipleSelectors(): MoonShineJsonResponse\n{\n    return MoonShineJsonResponse::make()->html([\n        '.selector1' => 'here 1',\n        '.selector2' => 'here 2',\n    ]);\n}\n\nprotected function components(): iterable\n{\n    return [\n        ActionButton::make('Test')->method('multipleSelectors', selector: [\n            '.selector1',\n            '.selector2',\n        ]),\n\n        Div::make([])->class('selector1'),\n        Div::make([])->class('selector2'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Pre-render Logic with prepareBeforeRender() Method in MoonShine PHP Page\nDESCRIPTION: Shows how to override the protected method `prepareBeforeRender()` to perform checks or other actions before the page is rendered. In the example, authorization logic aborts rendering with 403 if the user does not have a default MoonShine role. The parent method is called to preserve base functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected function prepareBeforeRender(): void\n    {\n        parent::prepareBeforeRender();\n\n        if (auth()->user()->moonshine_user_role_id !== MoonshineUserRole::DEFAULT_ROLE_ID) {\n            abort(403);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Content with Markdown and HTML - HTML\nDESCRIPTION: Highlights the use of both Markdown and HTML tags in the documentation's content areas. No dependencies. Encourages flexibility in formatting, but all sentences must end with a period. Ensures proper text synchrony between ru and en versions for consistency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Triggering MoonShine OffCanvas using Alpine.js $dispatch JavaScript\nDESCRIPTION: Shows how to use the Alpine.js `$dispatch` magic method to trigger the OffCanvas toggle event. This is useful within Alpine components to interact with the off-canvas.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.$dispatch('off_canvas_toggled:my-canvas')\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Breadcrumbs using getBreadcrumbs() in PHP\nDESCRIPTION: Illustrates overriding the `getBreadcrumbs()` method in a `Page` class. This method should return an array defining the breadcrumb trail for the page, typically mapping URLs (often '#' for the current page) to their display titles.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    // ...\n\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spinner Sizes in Blade Templates\nDESCRIPTION: Examples for setting different spinner sizes using the MoonShine spinner component in Blade templates. The size attribute accepts predefined string values: 'sm', 'md', 'lg', and 'xl' to control the spinner dimension. This snippet requires the MoonShine UI components and Blade templating.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/progress-bar.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<x-moonshine::spinner size=\"sm\" />\n<x-moonshine::spinner size=\"md\" />\n<x-moonshine::spinner size=\"lg\" />\n<x-moonshine::spinner size=\"xl\" />\n```\n\n----------------------------------------\n\nTITLE: Executing Logic Before and After Rendering with Example\nDESCRIPTION: This example showcases the `beforeRender()` method.  The closure provides access to the current field and in this case returns the preview output of a field which can be used to show the value of a field before rendering the field itself. This allows for the presentation of additional information or pre-rendering data modifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Field;\n\nText::make('Title')\n    ->beforeRender(function(Field $field) {\n        return $field->preview();\n    })\n```\n\n----------------------------------------\n\nTITLE: Controlling ActionButton Display within ActionGroup in PHP\nDESCRIPTION: Illustrates controlling how individual `ActionButton` instances are displayed within an `ActionGroup`. The `showInLine()` method forces a button to always be visible inline, while `showInDropdown()` places the button inside a dropdown menu attached to the group, useful for conserving space.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\ActionGroup;\n\nActionGroup::make([\n    ActionButton::make('Button 1', '/')\n        ->showInLine(),\n\n    ActionButton::make('Button 2', '/')\n        ->showInDropdown()\n])\n```\n\n----------------------------------------\n\nTITLE: Controlling ActionGroup Button Display PHP\nDESCRIPTION: Illustrates how to control the display style of buttons within an ActionGroup using showInLine() and showInDropdown(). This helps manage space by displaying buttons inline or in a dropdown menu.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\ActionGroup;\n\nActionGroup::make([\n    ActionButton::make('Button 1', '/')\n        ->showInLine(),\n\n    ActionButton::make('Button 2', '/')\n        ->showInDropdown()\n])\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine OffCanvas to Full Width PHP\nDESCRIPTION: Illustrates using the `full()` method to make the OffCanvas component occupy the maximum possible width on the screen.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make('Title', 'Content...', 'Show Panel')\n    ->full()\n```\n\n----------------------------------------\n\nTITLE: Creating a Wide Modal with Blade\nDESCRIPTION: This shows how to create a wide modal using the Blade component `<x-moonshine::modal>` with the `wide` attribute, allowing it to fill the entire screen width.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal wide title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open wide modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Using virtualName for Fields\nDESCRIPTION: The `virtualName()` method is used when you need to store two values in one input field in different conditions. For example, you may have two file fields displayed based on separate conditions, but both need to send data in form. It modifies name attribute, allowing control over different fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nvirtualName(string $name)\n```\n\n----------------------------------------\n\nTITLE: FlexibleRender Usage Examples\nDESCRIPTION: Examples demonstrating various ways to use the FlexibleRender component including rendering plain HTML, Blade views, passing data directly in views, providing additional data separately, and using closures for dynamic content generation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/flexible-render.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\FlexibleRender;\n\nFlexibleRender::make('HTML'),\n\nFlexibleRender::make(\n    view('path_to_blade')\n),\n\nFlexibleRender::make(\n    view('path_to_blade', ['data' => 'something'])\n),\n\nFlexibleRender::make(\n    view('path_to_blade'),\n    ['data' => 'something']\n),\nFlexibleRender::make(\n    view('path_to_blade', ['var1' => 'something 1']),\n    ['var2' => 'something 2']\n),\n\nFlexibleRender::make(\n    fn($data) => view('path_to_blade', $data),\n    fn() => ['data' => 'something']\n),\n```\n\n----------------------------------------\n\nTITLE: Using the Include Shortcode for Partial Markdown Insertion - Markdown\nDESCRIPTION: Demonstrates the use of the @include shortcode to embed and parameterize external markdown files. Inputs are a partial path and parameters, rendered using sprintf. Dependencies: markdown parsing and @include implementation. Used for modular, reusable documentation blocks. Parameters after the file path are inserted positionally.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n@include($path_to_md, ...$params)\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Policy for MoonShine Resource (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable Laravel policies for a MoonShine resource by setting the `$withPolicy` property to `true`. This ensures that authorization checks are performed before accessing resource methods like view, create, update, and delete. The resource extends `ModelResource` from MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $withPolicy = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using relatedLink() with link relation\nDESCRIPTION: This code shows the use of `relatedLink()` to create a link to a specific relation, using the provided parameter for more fine-grained control over the link's behavior. This allows for different relationships with specific context. It imports necessary classes, including the `HasMany` field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink('comment')\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumbs with Blade Template in Moonshine\nDESCRIPTION: This snippet shows how to embed the Breadcrumbs component within a Blade template by passing an array of breadcrumb items to the component's :items attribute. The syntax enables dynamic rendering of breadcrumb navigation in the frontend, depending on the provided array. The prerequisite is Blade templating engine, and it outputs the HTML structure for breadcrumb navigation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/breadcrumbs.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::breadcrumbs\n    :items=\"[\n        '/' => 'Home',\n        '/articles' => 'Articles',\n    ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Formatting Lists in Markdown - HTML\nDESCRIPTION: Explains the proper way to write list items in documentation: use a comma at the end of each element and a period after the last one. Input is a list with commas and period; ensures consistent punctuation and clarity in formatted lists.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n- элементы списка заканчивается запятой,\n- после последнего элемента ставится точка.\n\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Content Sections - Plain Text\nDESCRIPTION: Defines a syntax for tabbed content using triple-tilde delimiters and tab labels. No dependencies. Inputs are tab labels followed by content; outputs are interactive tabs in rendered documentation. Supports multiple content views under a single header.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_13\n\nLANGUAGE: Plain Text\nCODE:\n```\n~~~tabs\n\ntab: Tab 1\nContent tab 1\n\ntab: Tab 2\nContent tab 2\n\n~~~\n\n```\n\n----------------------------------------\n\nTITLE: Remove Excluded Files Helper Method in PHP\nDESCRIPTION: This snippet explains the function of the `removeExcludedFiles()` helper method, which is used to physically delete the files during the process. It doesn't take any parameters. It is part of the MoonShine framework.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nremoveExcludedFiles()\n```\n\n----------------------------------------\n\nTITLE: PHP Example: Making a Text Field in MoonShine UI\nDESCRIPTION: This PHP code snippet demonstrates creating a text input field within MoonShine's UI framework by utilizing the `Text::make()` method. It serves as an example of defining UI components using MoonShine's PHP classes, specifying the field label 'Title'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Title')\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Icon in Blade Template\nDESCRIPTION: Shows how to set an icon using the 'icon' attribute within the Blade alert component to enhance visual representation of notifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::alert icon=\"academic-cap\">\n    Alert\n</x-moonshine::alert>\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Get Home URL\nDESCRIPTION: This code snippet shows how to override the home page URL within the MoonShine admin panel layout using the `getHomeUrl()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHomeUrl(): string\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding, Prepending, and Adding Multiple ActionButtons in ActionGroup Using PHP\nDESCRIPTION: Shows manipulation of the ActionGroup button collection by adding single buttons with add(), prepending buttons with prepend(), and adding several buttons at once using addMany(). These methods modify the internal button list, allowing dynamic UI changes. Inputs are ActionButton instances or arrays thereof; output is an ActionGroup with updated button collection. Requires existing ActionGroup and ActionButton classes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-group.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->add(ActionButton::make('Button 3'))\n```\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->prepend(ActionButton::make('Button 4'))\n```\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->addMany([\n        ActionButton::make('Button 5'),\n        ActionButton::make('Button 6'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Styles to Components in PHP\nDESCRIPTION: Describes style() method which appends CSS style rules provided as a string or array to a component's inline styles. Useful for dynamically altering component appearance through direct style manipulation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nstyle(string|array $styles)\n\n$component->style(['color: red']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Field in MoonShine PHP\nDESCRIPTION: This code snippet demonstrates how to create a `Range` field in the MoonShine framework using the `make()` method. It initializes the field with a label ('Возраст') and a database column name ('age'). The `fromTo()` method is then chained to define the fields for the range's 'from' and 'to' values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/range.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Range;\n\nRange::make('Возраст', 'age')\n    ->fromTo('age_from', 'age_to')\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Value Button to Number Field in MoonShine - PHP\nDESCRIPTION: Adds a copy button to the Number field allowing users to copy the current value to the clipboard using the copy() method. Optionally, a custom copy string can be passed; default is the current field value ('{{value}}'). Dependency: MoonShine Number field UI. Input: optional string for copy content. Output: Number field with an interactive button enabling quick copy functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nNumber::make('Price')\n    ->copy()\n```\n\n----------------------------------------\n\nTITLE: Registering a JavaScript afterResponse callback in MoonShine\nDESCRIPTION: This snippet sets up an event listener for MoonShine's initialization, registering an `afterResponse` callback named `myAfterResponse`. When the server responds successfully, this callback receives the JSON data, a messageType (ToastType), and the Alpine.js component, allowing for custom client-side processing post-response.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myAfterResponse', function(data, messageType, component) {\n        console.log('myAfterResponse', data, messageType, component)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating LineBreak Component in PHP (MoonShine)\nDESCRIPTION: This PHP snippet demonstrates the creation of a LineBreak component within the MoonShine framework. It uses the `make()` method to instantiate a LineBreak object, which can be customized with a name parameter.  No specific dependencies besides the MoonShine framework itself are needed for this snippet. The output is a LineBreak component which can be included in a layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/line-break.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\LineBreak;\n\nLineBreak::make()\n```\n\n----------------------------------------\n\nTITLE: Registering beforeRequest Callback in MoonShine (JavaScript)\nDESCRIPTION: Defines and registers the JavaScript function `myBeforeRequest` that will be executed by a MoonShine `ActionButton` before it sends its asynchronous request. This function is registered using the `MoonShine.onCallback` method and receives the button's HTML element and Alpine.js component as arguments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myBeforeRequest', function(element, component) {\n        console.log('myBeforeRequest', element, component)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting the value() of a ValueMetric in PHP\nDESCRIPTION: This PHP snippet illustrates how to assign a dynamic value to a ValueMetric using the value() method, which accepts an integer, string, float, or Closure returning a numeric value. It demonstrates dependency on an Order model to count completed orders.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Metrics\\Wrapped\\ValueMetric;\n\n// ...\n\nprotected function components(): iterable\n{\n    return [\n        ValueMetric::make('Completed orders')\n            ->value(fn(): int => Order::completed()->count())\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Filename Context in Code Fences - Plain Text\nDESCRIPTION: Details how to indicate a related filename or class for a code block by adding a filename parameter to the code fence. No dependencies required. Inputs are code fence opening with filename, and outputs associate code examples with files/classes for better context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_11\n\nLANGUAGE: Plain Text\nCODE:\n```\n```php filename:config/moonshine.php\n\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Divider Component in PHP\nDESCRIPTION: This snippet shows the import and instantiation of the MoonShine Divider component in PHP. It uses the static make() method to create a divider instance for segmenting HTML content into zones. This snippet requires the MoonShine UI library and PHP environment supporting namespaces.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/divider.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Divider;\n\nDivider::make()\n```\n\n----------------------------------------\n\nTITLE: Class-based instantiation of Search component in PHP\nDESCRIPTION: Creates an instance of the Search component using a static make() method in PHP. This approach allows programmatic control and customization of the search form, typically used in backend logic or initializations.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/search.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nSearch::make()\n```\n\n----------------------------------------\n\nTITLE: Enabling Simple Pagination in MoonShine Resource using PHP\nDESCRIPTION: This snippet shows how to enable simple pagination in a MoonShine resource by setting the protected boolean property $simplePaginate to true. Simple pagination prevents additional database queries for total record count, suitable when total pages do not need to be displayed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\\n\\nuse MoonShine\\Laravel\\Resources\\ModelResource;\\n\\nclass PostResource extends ModelResource\\n{\\n    protected bool $simplePaginate = true;\\n\\n    // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the `asyncSearch` Method Signature (PHP)\nDESCRIPTION: Shows the method signature for `asyncSearch()`. This enables asynchronous searching for related items in a `BelongsToMany` field. It accepts optional parameters to specify the search column, custom search query logic, formatting for results, association with another field, result limit, and a custom URL for the search endpoint.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nasyncSearch(\n    string $column = null,\n    ?Closure $searchQuery = null,\n    ?Closure $formatted = null,\n    ?string $associatedWith = null,\n    int $limit = 15,\n    ?string $url = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying HasMany Field in Modal Mode in PHP\nDESCRIPTION: Method to display HasMany field in a modal window triggered by a button. Includes options to customize both the trigger button and the modal through callback functions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->modalMode()\n```\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->modalMode(\n        modifyButton: function (ActionButtonContract $button, HasMany $ctx) {\n            $button->warning();\n            return $button;\n        },\n        modifyModal: function (Modal $modal, ActionButtonContract $ctx) {\n            $modal->autoClose(false);\n            return $modal;\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Render of MoonShine Select Field with Text Field in PHP\nDESCRIPTION: Demonstrates how to override the default rendering of a Select field using the changeRender() method, which can be helpful for rare use cases where a different UI component is needed. Here, a Select field configured with multiple image links is overridden to render as a Text field showing a comma-separated list of the selected values. While not generally recommended due to maintainability concerns, this approach shows how to replace field rendering on the fly, returning a new field instance with custom data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->changeRender(\n        fn(?array $values, Select $ctx) => Text::make($ctx->getLabel())->fill(implode(',', $values))\n    )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parent ID Using getParentId() Method\nDESCRIPTION: Calls getParentId() to obtain the ID of the parent resource, useful in nested resource scenarios. The method is available when ResourceWithParent trait is used in the resource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$this->getParentId();\n```\n\n----------------------------------------\n\nTITLE: Layout::make Usage in PHP\nDESCRIPTION: Demonstrates how to use the `Layout::make()` method within a MoonShine layout class to define the structure of the admin panel. It utilizes the `MoonShine\\UI\\Components\\Layout\\Layout` class and provides an example of its basic usage. The `$components` parameter accepts an array of components to be included in the layout.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/layout.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\UI\\Components\\Layout\\Layout;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    public function build(): Layout\n    {\n        return Layout::make([\n            // ...\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing CSS Classes on Components in PHP\nDESCRIPTION: Details the class() method to add one or multiple CSS classes (string or array) to a component's attributes, enabling styling. Also demonstrates removeClass() uses pattern matching to remove specified classes individually or via regex-like patterns, allowing dynamic style adjustments.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass(string|array $classes)\n\n$component->class(['btn', 'btn-primary']);\n\n$component->removeClass('btn-success');\n\n$component->removeClass('btn-(success|primary)');\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selectors with ActionButton in PHP MoonShine\nDESCRIPTION: This snippet demonstrates how to update multiple HTML elements with different content using a single ActionButton. It defines a method that returns content for multiple selectors and configures an ActionButton to target those selectors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/multiple-fragments-selectors.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function multipleSelectors(): MoonShineJsonResponse\n{\n    return MoonShineJsonResponse::make()->html([\n        '.selector1' => 'here 1',\n        '.selector2' => 'here 2',\n    ]);\n}\n\nprotected function components(): iterable\n{\n    return [\n        ActionButton::make('Test')->method('multipleSelectors', selector: [\n            '.selector1',\n            '.selector2',\n        ]),\n\n        Div::make([])->class('selector1'),\n        Div::make([])->class('selector2'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Badge View Method with Closure PHP\nDESCRIPTION: Applies the `badge()` view method to a `Preview` field. This renders the field's value inside a badge, with the color determined dynamically by the provided closure based on the current value (`$status`) and the field object (`$field`).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/preview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Status')\n    ->badge(fn($status, Field $field) => $status === 1 ? 'green' : 'gray')\n```\n\n----------------------------------------\n\nTITLE: Forcing Dark Mode on Sidebar, TopBar, and MobileBar Components in PHP\nDESCRIPTION: This snippet shows how to apply the 'dark' CSS class to Sidebar, TopBar, and MobileBar components in MoonShine layouts. By chaining the class('dark') method on the components, it enforces dark mode styling to prevent visual inconsistencies caused by theme switching. It requires existing methods getSidebarComponent() and getTopBarComponent() and instantiation of MobileBar with class modification. The output is mutated component instances with forced dark mode styles.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/layout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->getSidebarComponent()->class('dark'),\n\n$this->getTopBarComponent()->class('dark'),\n\nMobileBar::make([\n    // ...\n])->class('dark'),\n```\n\n----------------------------------------\n\nTITLE: Rendering a Filled Native Link (Blade)\nDESCRIPTION: Shows how to create a filled, native-style link using the `<x-moonshine::link-native>` Blade component by setting the `:filled` attribute dynamically to `true`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::link-native\n    href=\"#\"\n    :filled=\"true\"\n>\n    Link\n</x-moonshine::link-native>\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response from MoonShine Controller PHP\nDESCRIPTION: Demonstrates how to return a structured JSON response from a MoonShine controller method using the `$this->json()` helper method. This is useful for building API endpoints or handling AJAX requests within the MoonShine environment. It accepts optional message and data parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/controllers.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Controllers;\n\nuse MoonShine\\Laravel\\Http\\Controllers\\MoonShineController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class CustomViewController extends MoonShineController\n{\n    public function __invoke(): Response\n    {\n        return $this->json(message: 'Message', data: []);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic __invoke controller method for rendering pages\nDESCRIPTION: Defines a controller method for handling incoming MoonShine requests. It retrieves the resource, checks URL validity, and returns the page to be rendered. Dependencies include the MoonShineRequest and PageContract, and it is intended for simple custom page rendering based on the request context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/routes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __invoke(MoonShineRequest $request): PageContract\n{\n    $request->getResource();\n\n    $page = $request\n        ->getPage()\n        ->checkUrl();\n\n    return $page;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering LineBreak Component in Blade Template\nDESCRIPTION: This Blade snippet shows how to render a LineBreak component within a Blade template in a MoonShine application.  The code uses a custom Blade component `x-moonshine::layout.line-break`.  It doesn't require any parameters. The output is a rendered HTML element which provides vertical spacing, as the LineBreak component is designed to add spacing between the elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/line-break.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.line-break/>\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Display Value with a Closure in MoonShine (PHP)\nDESCRIPTION: Shows how to use a closure for complex formatting of the displayed value in a `BelongsTo` field. The closure receives the related model instance (`$item`) and should return the desired string representation (e.g., combining 'id' and 'title').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make(\n    'Country',\n    'country',\n    fn($item) => \"$item->id. $item->title\"\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Button Attributes PHP\nDESCRIPTION: This snippet demonstrates how to modify the attributes of the button associated with a menu item using the `changeButton()` method. This method accepts a closure to modify the `ActionButton` instance. Dependencies: MoonShine framework. Input: Closure to modify action button. Output: The menu item's action button with modified attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(ActionButtonContract $button): ActionButtonContract  $callback\n */\nchangeButton(Closure $callback)\n```\n\n----------------------------------------\n\nTITLE: Modifying the Mass Delete Button Icon in MoonShine (PHP)\nDESCRIPTION: This PHP snippet demonstrates changing the icon for the 'Mass Delete' button in a MoonShine resource. By overriding the `modifyMassDeleteButton` method, it accesses the default button instance, sets a new icon via `icon('x-mark')`, and returns the modified button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyMassDeleteButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->icon('x-mark');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Buttons in RelationRepeater\nDESCRIPTION: Demonstrates how to override default action buttons using the `buttons()` method. You can set custom icons, click behaviors, CSS classes, and inline display for action buttons such as delete or other custom actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/relation-repeater.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\n\nRelationRepeater::make('Comments', 'comments')\n    ->buttons([\n        ActionButton::make('', '#')\n            ->icon('trash')\n            ->onClick(fn() => 'remove()', 'prevent')\n            ->class('btn-error')\n            ->showInLine()\n    ])\n```\n\n----------------------------------------\n\nTITLE: Yielding Form Component in Dashboard Using PHP Generator\nDESCRIPTION: This protected method returns an iterable yielding the form component created by the form() method. It facilitates integration with a component system that expects an iterable of UI components or form elements, allowing lazy evaluation and clean component composition. The method assumes the form() method returns a valid form component instance that can be yielded directly.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/dashboard-settings.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function components(): iterable\n{\n  yield $this->form();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Visibility PHP\nDESCRIPTION: This snippet demonstrates the use of the `canSee()` method to conditionally display menu items based on a closure's return value.  Dependencies: MoonShine framework and `MenuElementContract`. Input: Closure returning a boolean. Output: The menu item is displayed if the closure returns true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param  Closure(MenuElementContract $context): bool  $callback\n */\ncanSee(Closure $callback)\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Asynchronous Search for BelongsToMany (PHP)\nDESCRIPTION: Enables basic asynchronous search on the 'Categories' `BelongsToMany` field using the `asyncSearch()` method with default settings. Search will be performed on the `column` defined in the related resource (defaults to 'id').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CategoryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsToMany;\n\nBelongsToMany::make('Categories', 'categories', resource: CategoryResource::class)\n    ->asyncSearch()\n```\n\n----------------------------------------\n\nTITLE: Performing Actions Before Rendering with Example\nDESCRIPTION: This code shows the use of the `onBeforeRender()` method. The provided closure lets you to access and modify the Text field right before rendering, enabling on-the-fly modifications before display. It is very useful for setting properties of a field right before the rendering occurs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nText::make('Thumbnail')\n    ->onBeforeRender(function(Text $ctx) {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Component with Parameters (Class)\nDESCRIPTION: Demonstrates how to initialize the Card component in PHP using the `make` method. It sets the title, thumbnail, URL, values, and subtitle for the card.  The example utilizes a closure for the URL. Requires `MoonShine\\UI\\Components\\Card`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Card;\n\nCard::make(\n    title: fake()->sentence(3),\n    thumbnail: 'https://moonshine-laravel.com/images/image_1.jpg',\n    url: fn() => 'https://cutcode.dev',\n    values: ['ID' => 1, 'Author' => fake()->name()],\n    subtitle: date('d.m.Y'),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication User Model in moonshine.php\nDESCRIPTION: This is an example of setting the authentication model using the configuration file.  This is only set through the config file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    // ...\n    'model' => User::class,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Including Inheritance Information in Basics Section - HTML\nDESCRIPTION: Shows how to note inheritance from another class or component directly after the 'Basics' heading. The example references another class via link and specifies additional capabilities. No code dependencies. Inputs are inherited class info in Markdown with an asterisk, and outputs are descriptive notes under the basics section. Used when describing classes/components that are extensions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a name=\"basics\"></a>\n## Основы\n\nНаследует [Select](/docs/{{version}}/fields/select).\n\n* имеет те же возможности.\n\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Dropdown Component Instance (PHP)\nDESCRIPTION: Demonstrates basic instantiation of the MoonShine Dropdown component using the static `make` method in PHP. It shows how to set the title, toggler text, content, and a simple list of items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/dropdown.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Dropdown;\n\nDropdown::make(\n    'Dropdown',\n    'Toggler',\n    'Content',\n    ['Item 1', 'Item 1']\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding refreshAfterApply logic\nDESCRIPTION: This example shows how to override the refreshAfterApply logic of the Image field. This allows a field re-rendering process to be handled in a customized manner, according to the application's needs. It is a way to implement custom refreshing of your data after the `apply` process.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nImage::make('Avatar')\n    ->refreshAfterApply(fn(Image $ctx) => $ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing when() Method in a MoonShine Resource Class\nDESCRIPTION: Example of using the when() method in a CategoryResource class that implements import functionality. The method conditionally sets the delimiter based on a boolean condition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\ImportExport\\Contracts\\HasImportExportContract;\nuse MoonShine\\ImportExport\\ImportHandler;\nuse MoonShine\\ImportExport\\Traits\\ImportExportConcern;\nuse MoonShine\\Laravel\\Handlers\\Handler;\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass CategoryResource extends ModelResource implements HasImportExportContract\n{\n    use ImportExportConcern;\n\n    // ...\n\n    protected function import(): ?Handler\n    {\n        return ImportHandler::make('Import')\n            ->when(\n                true,\n                fn($handler) => $handler->delimiter(','),\n                fn($handler) => $handler->delimiter('.')\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Textarea Field Height in PHP\nDESCRIPTION: Customizes the height of a Textarea field by setting the 'rows' attribute to specify how many rows of text the textarea should display.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/textarea.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nTextarea::make('Text')\n    ->customAttributes([\n        'rows' => 6,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering a JavaScript beforeRequest callback in MoonShine\nDESCRIPTION: This snippet demonstrates how to listen for the MoonShine initialization event and register a `myBeforeRequest` callback that executes when invoked. The callback receives the HTML element (button) and the Alpine.js component, allowing for custom pre-request logic to be implemented in JavaScript.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myBeforeRequest', function(element, component) {\n        console.log('myBeforeRequest', element, component)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to Component via AssetManager in MoonShine\nDESCRIPTION: Example showing how to add assets to a Component using AssetManager in the booted method in MoonShine. This allows dynamic asset addition during component initialization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class MyComponent extends MoonShineComponent\n{\n    protected function booted(): void\n    {\n        parent::booted();\n\n        $this->getAssetManager()\n          ->add(Css::make('/css/app.css'))\n          ->append(Js::make('/js/app.js'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the html() Method Signature in MoonShineJsonResponse (PHP)\nDESCRIPTION: Shows the signature for the `html()` method in `MoonShineJsonResponse`. It inserts HTML content (string or array) into a specific selector (defined when creating the component that initiated the request), optionally specifying the insertion mode via the `HtmlMode` enum (defaulting to INNER_HTML).\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nhtml(string|array $value, HtmlMode $mode = HtmlMode::INNER_HTML)\n```\n\n----------------------------------------\n\nTITLE: Available Spinner Colors\nDESCRIPTION: Defines spinner color options, such as primary, secondary, success, warning, error, and info, which can be set via the `color` attribute in Blade components. These options facilitate color-based customization to match UI themes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::spinner color=\"primary\" />\n<x-moonshine::spinner color=\"secondary\" />\n<x-moonshine::spinner color=\"success\" />\n<x-moonshine::spinner color=\"warning\" />\n<x-moonshine::spinner color=\"error\" />\n<x-moonshine::spinner color=\"info\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying the Delete Button Icon in MoonShine (PHP)\nDESCRIPTION: This PHP code shows how to modify the icon for the default 'Delete' button in a MoonShine resource. It overrides the `modifyDeleteButton` method, receives the button instance, changes its icon using `icon('x-mark')`, and returns the updated button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyDeleteButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->icon('x-mark');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Visual Dividers in Menu with MenuDivider\nDESCRIPTION: This example introduces MenuDivider to visually separate menu sections, enhancing menu clarity by inserting a divider line between items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserResource;\nuse MoonShine\\Laravel\\Resources\\MoonShineUserRoleResource;\nuse MoonShine\\MenuManager\\MenuDivider;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Admins', MoonShineUserResource::class),\n            MenuDivider::make(),\n            MenuItem::make('Roles', MoonShineUserRoleResource::class),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event with AlpineJs::event()\nDESCRIPTION: This code snippet demonstrates the usage of `AlpineJs::event()` to create an event configuration. It takes the event name or a `JsEvent` enum value, an optional component name, and an array of parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\FormBuilder;\nuse MoonShine\\Support\\Enums\\JsEvent;\nuse MoonShine\\Support\\AlpineJs;\n\nFormBuilder::make('/crud/update')\n    ->name('main-form')\n    ->async(\n        events: [AlpineJs::event(JsEvent::TABLE_UPDATED, 'index', ['var' => 'foo'])]\n    )\n```\n\n----------------------------------------\n\nTITLE: Shortcode Include Usage Example with Parameters - Markdown\nDESCRIPTION: Provides an instance of markdown file using the @include shortcode to insert another partial and pass parameter values. Inputs are anchor, heading, and include line with arguments; output is composed documentation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n<a name=\"what-is-moonshine\"></a>\n## What is MoonShine\n\n@include('_includes/test', 'test', 3)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Popovers with Alpine.js and HTML Attributes\nDESCRIPTION: Shows how to create popovers directly in HTML using Alpine.js (`x-data=\"popover\"`). The `data-content` attribute holds the popover's HTML. Configuration like placement can be passed to the `popover` function (`x-data=\"popover({placement: 'top'})\"`), and an optional `title` attribute can be added to the span.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/popover.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span x-data=\"popover\" data-content=\"HTML HERE\">\n    <a class=\"text-purple font-semibold\">Popover 1</a>\n</span>\n```\n\nLANGUAGE: html\nCODE:\n```\n<span\n    x-data=\"popover({placement: 'top'})\"\n    title=\"Popover title\"\n    data-content=\"HTML HERE\">\n    <a class=\"text-purple font-semibold\">Popover 2</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Example Result of Markdown Include Shortcode - HTML\nDESCRIPTION: Shows the HTML output generated from including a markdown partial with assigned parameters using the include shortcode. Inputs are header and parameter values; outputs are corresponding HTML markup. Demonstrates end-to-end include shortcode usage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<h2>What is MoonShine</h2>\ntest - 3\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Moonshine Notifications Component in Blade Template\nDESCRIPTION: This example shows how to embed the Notifications UI element directly into a Blade template using a custom Moonshine Blade component tag. It assumes the Moonshine frontend and Blade components are properly integrated. This snippet outputs the notifications dropdown in the rendered HTML layout, usually placed inside Header or Sidebar regions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/notifications.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.notifications/>\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Menu Items with badge() Method\nDESCRIPTION: This illustrates how to attach dynamic or static badges to menu items using a closure, which could display counts or statuses directly in the menu.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\nuse MoonShine\\MenuManager\\MenuItem;\n\nfinal class MoonShineLayout extends AppLayout\n{\n\n    // ...\n\n    protected function menu(): array\n    {\n        return [\n            MenuItem::make('Comments', CommentResource::class)\n                ->badge(fn() => Comment::count())\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Handler Class - Shell\nDESCRIPTION: Generates a Handler class in the MoonShine context, allowing custom logic encapsulation for use in admin panel features. Supports base dir and namespace overrides. Created handlers are saved in app/MoonShine/Handlers and can be utilized in the package's event-driven or job-based workflows.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:handler\n```\n\n----------------------------------------\n\nTITLE: Configure TableBuilder Cast Key Name PHP\nDESCRIPTION: Sets the key name ('id') to be used for identifying items in the table, particularly important when data is provided without Laravel's casting mechanisms to ensure features like bulk operations work correctly.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n  ->castKeyName('id')\n  ->name('my-table')\n  ->fields([\n      ID::make(),\n      Text::make('Title')\n  ])\n  ->items([\n      ['id' => 3,'title' => 'Hello world']\n  ])\n  ->buttons([\n      ActionButton::make('Mass Delete')\n          ->bulk()\n  ]),\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Keys PHP\nDESCRIPTION: This snippet showcases a PHP language file containing the translation strings used for the menu items.  This file is typically located in the `lang/{locale}/` directory. Dependencies: Laravel framework. Input: None. Output: None.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'Comments' => 'Комментарии',\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Lock Icon - PHP\nDESCRIPTION: This code adds a lock icon to a text field using the `locked()` method.  This is for visual representation and is commonly used for protected or read-only fields. The `locked()` method itself doesn't take any parameters.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nText::make('Protected field', 'protected_field')\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: Defining Inline CSS for Compact Rounded Radius Theme in MoonShine PHP Layout\nDESCRIPTION: This snippet overrides the `assets()` method to add inline CSS specifying CSS custom properties for various border-radius sizes, enabling a compact theme with rounded corners in MoonShine layouts. It uses `InlineCss::make()` with a heredoc string containing CSS defining radius size variables like `--radius`, `--radius-sm`, up to `--radius-full`. This snippet appends this inline style to the parent assets array. The expected input is the inherited assets; the output is a modified asset list including inline CSS for radius styling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nprotected function assets(): array\n{\n    return [\n        ...parent::assets(),\n        InlineCss::make(<<<'Style'\n            :root {\n              --radius: 0.15rem;\n              --radius-sm: 0.075rem;\n              --radius-md: 0.275rem;\n              --radius-lg: 0.3rem;\n              --radius-xl: 0.4rem;\n              --radius-2xl: 0.5rem;\n              --radius-3xl: 1rem;\n              --radius-full: 9999px;\n            }\n        Style),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Filter Mode for Json Field in MoonShine PHP\nDESCRIPTION: Adapts the Json field for use within filters using the filterMode() method. This disables addition of new elements and changes UI appropriately for filtered searches. Typically used in conjunction with specific fields. Requires MoonShine UI field imports.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/json.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->fields([\n        Text::make('Title', 'title'),\n        Text::make('Value', 'value')\n    ])\n    ->filterMode()\n```\n\n----------------------------------------\n\nTITLE: Overriding Favicon Assets in Custom MoonShine Layout Using PHP\nDESCRIPTION: This PHP snippet overrides the `getFaviconComponent()` method in a custom MoonShine layout to replace default favicon assets with a customized set. It calls `parent::getFaviconComponent()` and chains `customAssets()` method with an array mapping favicon types (e.g., `apple-touch`, `32`, `16`, `safari-pinned-tab`, `web-manifest`) to new favicon file paths. This enables centralized and streamlined favicon customization for all rendered pages under the layout. Requires the `Favicon` component and an existing parent layout class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Layouts\\AppLayout;\n\nfinal class MyLayout extends AppLayout\n{\n    // ...\n\n    protected function getFaviconComponent(): Favicon\n    {\n        return parent::getFaviconComponent()->customAssets([\n            'apple-touch' => 'favicon_path',\n            '32' => 'favicon_path',\n            '16' => 'favicon_path',\n            'safari-pinned-tab' => 'favicon_path',\n            'web-manifest' => 'favicon_path',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Name Attribute with Example\nDESCRIPTION: This example shows how to use the `setNameAttribute()` method to change the name attribute of a text field to 'custom_name'. This is useful when you need to customize the name attribute. It can be useful to make the input of a field to be processed using a particular key.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->setNameAttribute('custom_name')\n```\n\n----------------------------------------\n\nTITLE: Setting Spinner Position to Absolute\nDESCRIPTION: Shows how to set the spinner's CSS position to absolute by passing `:absolute=\"true\"` to the Blade component, enabling precise placement within overlapping elements or fixed layouts.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::spinner :absolute=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Using afterFill to Modify MoonShine Select Field Attributes Based on Filled Data in PHP\nDESCRIPTION: Illustrates using afterFill() to act after the field has been populated with data. The example checks if every selected link contains a certain domain and conditionally adds a CSS class to the field wrapper by returning customized wrapper attributes. This enables dynamic styling based on the final field values. Additionally, the field preview is customized via changePreview() to show a Carousel. This technique is useful for modifying field appearance or behavior dynamically after data binding.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Carousel;\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('Links')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->afterFill(\n        function(Select $ctx) {\n            if(collect($ctx->toValue())->every(fn($value) => str_contains($value, 'cutcode.dev'))) {\n                return $ctx->customWrapperAttributes(['class' => 'full-url']);\n            }\n\n            return $ctx;\n        }\n    )\n    ->changePreview(\n        fn(?array $values, Select $ctx) => Carousel::make($values)\n    ),\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication Middleware in moonshine.php\nDESCRIPTION: This code demonstrates how to set the middleware used to check for session presence within the authentication settings inside the `moonshine.php` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n'auth' => [\n    // ...\n    'middleware' => Authenticate::class,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: MoonShine Field Copy Method Signature (PHP)\nDESCRIPTION: Displays the method signature for the `copy()` method. This method adds a button to copy the field's value. It optionally accepts a string `$value` parameter to specify what should be copied, defaulting to the field's value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/date.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ncopy(string $value = '{{value}}')\n```\n\n----------------------------------------\n\nTITLE: Adding Placeholder Text to Number Field in MoonShine - PHP\nDESCRIPTION: Sets a placeholder string for the Number field labeled 'Rating'. The placeholder() method assigns the HTML placeholder attribute text that displays when the field has no value. Additional configuration includes making the field nullable. Input: string placeholder value. Output: Number input field with a user-friendly hint displayed when empty.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/number.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Number;\n\nNumber::make('Rating', 'rating')\n    ->nullable()\n    ->placeholder('Product Rating')\n```\n\n----------------------------------------\n\nTITLE: Overriding isCan() Method in MoonShine Resource (PHP)\nDESCRIPTION: This snippet shows how to override the `isCan()` method in a MoonShine resource to implement custom authorization logic. The overridden method can extend or replace the default authorization behavior by calling `parent::isCan($ability)` to execute the original logic before adding custom checks.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/authorization.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Enums\\Ability;\n\nprotected function isCan(Ability $ability): bool\n{\n    return parent::isCan($ability);\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Attribute Values with Separator in PHP\nDESCRIPTION: Defines mergeAttribute() that appends a new value to an existing attribute value, separated by a specified delimiter (defaulting to a space). Accepts attribute name, new value, and optional separator, facilitating concatenation of class names or styles seamlessly.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nmergeAttribute(\n    string $name,\n    string $value,\n    string $separator = ' '\n)\n\n$component->mergeAttribute('class', 'new-class');\n```\n\n----------------------------------------\n\nTITLE: Setting Toast Notification in PHP\nDESCRIPTION: This snippet demonstrates how to add a toast notification to the session.  It sets the 'toast' key in the session with an array containing the notification's type and message. The `FlashType::INFO->value` part sets the notification type as 'INFO'. This is a prerequisite for displaying flash notifications as toast messages within the application.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/flash.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nsession()->flash('toast', [\n    'type' => FlashType::INFO->value,\n    'message' => 'Info',\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Disk for File Field in PHP\nDESCRIPTION: This code snippet shows how to specify the disk to use for file storage with the `disk()` method.  It accepts a string representing the disk name (e.g., 'public'). The example sets the disk to 'public'.  MoonShine framework required. The output is the field using selected disk.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->disk('public')\n```\n\n----------------------------------------\n\nTITLE: Spinner Sizes Options\nDESCRIPTION: Lists available size options for the Spinner component, including small (sm), medium (md), large (lg), and extra-large (xl). Provides examples of how to set these sizes in Blade components, allowing for consistent sizing across UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::spinner size=\"sm\" />\n<x-moonshine::spinner size=\"md\" />\n<x-moonshine::spinner size=\"lg\" />\n<x-moonshine::spinner size=\"xl\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Delete Button Icon in MoonShine PHP\nDESCRIPTION: This snippet shows how to modify the default delete button within a MoonShine resource using the `modifyDeleteButton` method. It illustrates setting the button's icon to 'x-mark' using the `->icon()` method. The modified button instance must be returned. Requires the `MoonShine\\Contracts\\UI\\ActionButtonContract` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyDeleteButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->icon('x-mark');\n}\n```\n\n----------------------------------------\n\nTITLE: When Conditional Logic in PHP\nDESCRIPTION: Demonstrates the usage of the `when` method, which executes a callback function based on a given condition. It accepts a condition, a callback for the `TRUE` case, and an optional callback for the `FALSE` case. The example configures an import handler's delimiter based on a condition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/import-export.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhen(\n    $value = null,\n    callable $callback = null,\n    callable $default = null,\n)\n```\n\n----------------------------------------\n\nTITLE: MorphMany Field Creation with Resource - PHP\nDESCRIPTION: Creates a MorphMany relationship field in MoonShine for managing comments. It utilizes the `MorphMany` field, associates it with the `comments` relationship, and links it to the `CommentResource` for CRUD operations within the MoonShine admin panel. The `formatted` parameter is noted as unused for this field type.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/morph-many.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\MorphMany;\n\nMorphMany::make(\n    'Comments',\n    'comments',\n    resource: CommentResource::class\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Update on Preview (PHP)\nDESCRIPTION: This snippet demonstrates enabling editing for a field in preview mode. It allows for saving changes to a field's value directly from a preview context. `updateOnPreview()` facilitates onChange updates, while `withUpdateRow()` can fully update a row without page reloads.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')->updateOnPreview()\n```\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->withUpdateRow('index-table-post-resource')\n```\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->updateOnPreview(url: '/my/url')\n    ->withUpdateRow()\n```\n\n----------------------------------------\n\nTITLE: Modifying Mass Delete Button Icon in MoonShine PHP\nDESCRIPTION: This snippet demonstrates how to customize the default mass delete button using the `modifyMassDeleteButton` method. It shows how to change the icon of the button, for instance, to 'x-mark'. The method requires returning the modified `ActionButtonContract`. Requires the `MoonShine\\Contracts\\UI\\ActionButtonContract` dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/buttons.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyMassDeleteButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->icon('x-mark');\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal Toggle with Alpine.js $dispatch (JavaScript)\nDESCRIPTION: Uses Alpine.js's magical $dispatch syntax to emit a custom event, 'modal_toggled:my-modal', triggering the corresponding MoonShine modal. Works within Alpine.js context and requires Alpine.js. No additional parameters needed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nthis.$dispatch('modal_toggled:my-modal')\n```\n\n----------------------------------------\n\nTITLE: Defining Json field with fields\nDESCRIPTION: This code defines a Json field named 'Product Options' that handles an array of objects with fields 'title', 'value', and 'active'. It uses the `fields()` method to specify these fields.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Json;\nuse MoonShine\\UI\\Fields\\Position;\nuse MoonShine\\UI\\Fields\\Switcher;\nuse MoonShine\\UI\\Fields\\Text;\n\nJson::make('Product Options', 'options')\n    ->fields([\n        Position::make(),\n        Text::make('Title'),\n        Text::make('Value'),\n        Switcher::make('Active'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating Grid in PHP\nDESCRIPTION: This PHP snippet defines the `make` function for the `Grid` component, which is used to arrange components in a grid layout. It accepts an iterable of components and a gap size to control the space between the components. The `$components` parameter accepts the array of components and `$gap` sets the gap size between the grid components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/grid.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    iterable $components = [],\n    int $gap = 6,\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Modal with ActionButton Basic Usage PHP\nDESCRIPTION: Shows a basic example of using the inModal() method to trigger a modal window when the button is clicked. It sets a static title, content, and a name for the modal.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Components\\Modal;\n\nActionButton::make('Button Label')\n    ->inModal(\n        title: 'Modal Window Title',\n        content: 'Modal Window Content',\n        name: 'my-modal',\n        builder: fn(Modal $modal, ActionButton $ctx) => $modal\n    )\n```\n\n----------------------------------------\n\nTITLE: Displaying Table with Blade\nDESCRIPTION: This Blade snippet shows how to render a table using the `<x-moonshine::table>` component. It defines the columns and values to be displayed in the table. This is a simple example of how to use the component in Blade templates.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::table\n    :columns=\"[\n        '#', 'First', 'Last', 'Email'\n    ]\"\n    :values=\"[\n        [1, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [2, fake()->firstName(), fake()->lastName(), fake()->safeEmail()],\n        [3, fake()->firstName(), fake()->lastName(), fake()->safeEmail()]\n    ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Requesting SDUI Layout Structure (GET)\nDESCRIPTION: This demonstrates retrieving only the layout structure of the SDUI. This is achieved by sending a GET request with the X-MS-Structure and X-MS-Only-Layout headers set to true.  This is useful for getting the overall page structure without the content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/sdui.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /admin/dashboard HTTP/1.1\nX-MS-Structure: true\nX-MS-Only-Layout: true\n```\n\n----------------------------------------\n\nTITLE: Adding Events on Modal Toggle in PHP\nDESCRIPTION: This example shows how to add custom events that are triggered when a modal is opened or closed using the `toggleEvents()` method. It allows specifying events for only opening or closing the modal.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make('Open modal')->toggleModal('my-modal'),\n\nModal::make('My modal', asyncUrl: '/')\n    ->name('my-modal')\n    ->toggleEvents([\n        AlpineJs::event(JsEvent::TOAST, params: ['text' => 'Hello'])\n    ], onlyOpening: false, onlyClosing: true),\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer.json Shell\nDESCRIPTION: This snippet shows changes that must be made in the `composer.json` file. It explains how to change the dependency for `moonshine/moonshine` and how to add the package repository information. This setup ensures Composer correctly resolves and installs the local package dependencies.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/contribution.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"moonshine/moonshine\": \"3.*.*-dev\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"type\": \"path\",\n        \"url\": \"packages/moonshine\",\n        \"options\": {\n            \"versions\": {\n                \"moonshine/moonshine\": \"3.*.*-dev\"\n            },\n            \"symlink\": true\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Modifying the Detail Button Style in MoonShine (PHP)\nDESCRIPTION: This PHP code demonstrates modifying the default 'Detail' button in a MoonShine resource. By overriding the `modifyDetailButton` method, it receives the default button instance, applies the `warning()` styling method, and returns the button with the updated appearance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/buttons.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\n\nprotected function modifyDetailButton(ActionButtonContract $button): ActionButtonContract\n{\n    return $button->warning();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slug Source in PHP\nDESCRIPTION: The `from()` method allows you to specify which model field to use as the source for generating the slug when no value is provided. The parameter `$from` is a string representing the name of the source field. The output is the generated slug derived from the specified field, such as 'title'.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/slug.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfrom(string $from)\n```\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->from('title')\n```\n\n----------------------------------------\n\nTITLE: Generating OpenApi Specification Using Artisan Command\nDESCRIPTION: Runs a Laravel Artisan command that scans registered resources and generates OpenApi specification files (YAML and JSON) describing the API endpoints and models. The output files are stored in the resources directory for use in API documentation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan oag:generate\n```\n\n----------------------------------------\n\nTITLE: Creating a Heading using PHP's make() method\nDESCRIPTION: This snippet demonstrates how to instantiate a Heading component in PHP with a label, gradation level, and class usage toggle. It serves as the primary constructor for the Heading component, establishing the heading's label content and style options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/heading.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n    Closure|string $label = '',\n    ?int $h = null,\n    bool $asClass = true,\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting the value of a Metric with valueFormat() in PHP\nDESCRIPTION: This snippet demonstrates how to customize the display format of a metric's value by using the valueFormat() method. It formats the total sum of completed order prices into a human-readable string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nValueMetric::make('Profit')\n    ->value(fn(): int => Order::completed()->sum('price'))\n    ->valueFormat(fn(int $value): string => \\Illuminate\\Support\\Number::forHumans($value))\n```\n\n----------------------------------------\n\nTITLE: Modifying Form Builder for Custom Editing in HasOne\nDESCRIPTION: Applies modifyForm() with a closure to customize the FormBuilder used for editing the related resource, such as changing the submit button. Dependencies include CommentResource and MoonShine's FormBuilder.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Comment', resource: CommentResource::class)\n    ->modifyForm(\n        fn(FormBuilder $form) => $form->submit('Custom title')\n    )\n```\n\n----------------------------------------\n\nTITLE: Controlling Default Open State of MoonShine Collapse in PHP\nDESCRIPTION: The open() method controls whether the Collapse block is expanded or collapsed by default. Accepts a Closure, Boolean, or null to specify conditional opening behavior. By default, the Collapse is shown as collapsed, and this method overrides that.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/collapse.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nopen(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields for Related Resource Preview in HasOne\nDESCRIPTION: Sets specific fields (e.g., Phone and Text) to be included in the preview or form of the related resource using the fields() method. Dependencies include ProfileResource and related form field classes from MoonShine's UI namespace.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-one.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nHasOne::make('Profile', resource: ProfileResource::class)\n    ->fields([\n        Phone::make('Phone'),\n        Text::make('Address'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Text Label to MoonShine Divider in PHP\nDESCRIPTION: This snippet illustrates how to create a Divider with a text label using the make() method by passing a string parameter. The label text appears as a separator, adding semantic meaning or visual labeling between sections in HTML content. It requires MoonShine UI in PHP.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/divider.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nDivider::make('Separator')\n```\n\n----------------------------------------\n\nTITLE: Customizing StackFields Display with Components in PHP\nDESCRIPTION: Illustrates how to customize the visual layout within `StackFields` by incorporating UI components like `LineBreak` alongside standard fields. This allows for better control over the presentation in the edit view.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/stack-fields.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nStackFields::make('Title')->fields([\n    Text::make('Title'),\n    LineBreak::make(), // adds a line break\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a HiddenIds Field in PHP\nDESCRIPTION: Demonstrates how to instantiate a `HiddenIds` field using its static `make` method. The `$forComponent` parameter specifies the name of the component (typically a table) from which the IDs should be collected. It's crucial that the associated table component includes an 'ID' field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/hidden-ids.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(string $forComponent)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\HiddenIds;\n\nHiddenIds::make('index-table')\n```\n\n----------------------------------------\n\nTITLE: Opening an Asynchronous Modal with ActionButton in PHP\nDESCRIPTION: Demonstrates how to configure an `ActionButton` to load the content of its associated modal asynchronously. The `async()` method enables this behavior. The button's URL points to the endpoint providing the modal content (potentially a fragment). The `inModal()` method defines the modal structure, often just the title, as the content is loaded later.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nActionButton::make(\n    'Button Label',\n    to_page('action_button', fragment: 'doc-content'),\n)\n    ->async()\n    ->inModal(\n        title: fn() => 'Modal Window Title',\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding a Show/Hide Button (Eye) to Date Field in PHP\nDESCRIPTION: Shows how to add a toggle button (often represented by an eye icon) to show or hide the field's value using the `eye()` method. While typically used for password fields, it can be applied to Date fields as well.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->eye()\n```\n\n----------------------------------------\n\nTITLE: Preview Field with Boolean Label Display - PHP\nDESCRIPTION: This snippet demonstrates how to display a boolean value as a label (green or red) using the `boolean()` method on a Preview field. The `hideTrue` and `hideFalse` parameters control whether the label is shown for true or false values, respectively.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/preview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Preview;\n\nPreview::make('Active')\n    ->boolean(hideTrue: false, hideFalse: false)\n```\n\n----------------------------------------\n\nTITLE: Defining a ValueMetric with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a ValueMetric instance with a label. It sets up a metric to display an integer value, such as the count of completed orders, using the make() and value() methods.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\Metrics\\Wrapped\\ValueMetric;\n\nValueMetric::make('Completed orders')\n    ->value(fn() => Order::completed()->count())\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality for BelongsTo Field in MoonShine (PHP)\nDESCRIPTION: Demonstrates how to enable client-side search within the dropdown list of a `BelongsTo` field by chaining the `searchable()` method. This adds a search input to filter the available options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse App\\MoonShine\\Resources\\CountryResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('Country', 'country', resource: CountryResource::class)\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Instantiating BelongsTo with Implicit Resource Name in MoonShine (PHP)\nDESCRIPTION: Shows a shorthand way to instantiate `BelongsTo`. If the `ModelResource` name matches the relation name (e.g., 'user' relation corresponds to `UserResource`), the `resource` parameter can be omitted, and MoonShine will infer it.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\nBelongsTo::make('User', 'user')\n```\n\n----------------------------------------\n\nTITLE: Changing the Fill Logic of a Select Field (PHP)\nDESCRIPTION: This snippet shows how to change the fill logic of a Select field using the `changeFill()` method. The `changeFill()` method accepts a Closure that receives the model and the field context as arguments.  The Closure should return the value to be used for filling the field.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nSelect::make('Images')->options([\n    '/images/1.png' => 'Picture 1',\n    '/images/2.png' => 'Picture 2',\n])\n    ->multiple()\n    ->changeFill(\n        fn(Article $article, Select $ctx) => $article->images\n            ->map(fn($value) => \"https://cutcode.dev$value\")\n            ->toArray()\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Title and URL for CardsBuilder Titles in PHP\nDESCRIPTION: Illustrates how to configure the card title display using the 'title()' method and associate URLs to titles with the 'url()' method. Both methods accept either a column name string or a Closure returning the value dynamically per item. The example shows usage with a title column and a closure that generates a URL for each card via a form page method. This customization enables interactive card titles that link to detail pages or other resources.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ntitle(Closure|string $value)\n\nurl(Closure|string $value)\n\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->title('title')\n    ->url(fn($data) => $this->getFormPageUrl($data))\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Component in PHP\nDESCRIPTION: The basic method signature for creating a Popover component using the make method. It accepts a title, trigger text/HTML, and an optional placement parameter.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/popover.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    string $title,\n    string $trigger,\n    string $placement = 'right',\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping Options in Select Field (PHP OptionGroup)\nDESCRIPTION: This snippet shows how to group options in a Select field using the `OptionGroup` object. This method offers more control and flexibility compared to using a simple array.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/select.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Select;\n\nSelect::make('City')\n    ->options(\n        new Options([\n            new OptionGroup('Italy', new Options([\n                new Option('Rome', '1'),\n                new Option('Milan', '2'),\n            ])),\n            new OptionGroup('France', new Options([\n                new Option('Paris', '3'),\n                new Option('Marseille', '4'),\n            ])),\n        ])\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling outside display with disableOutside()\nDESCRIPTION: This snippet demonstrates the use of the `disableOutside()` method. By default, the `HasMany` field is displayed outside the main form.  `disableOutside()` changes this behavior by displaying it inside the form. This uses the HasMany class for managing relationships.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments')->disableOutside()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wrapper Attributes with Example\nDESCRIPTION: This example demonstrates how to use the `customWrapperAttributes()` method to add a CSS class to a password field's wrapper, thereby modifying its presentation style. The `mt-8` class adds a margin-top of 8 units.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPassword::make('Title')\n    ->customWrapperAttributes(['class' => 'mt-8'])\n```\n\n----------------------------------------\n\nTITLE: Handling standard JS events in MoonShine\nDESCRIPTION: Details a list of predefined standard events in MoonShine, their naming conventions, and how to trigger them from frontend JavaScript using native event dispatch or Alpine.js's $dispatch method. Useful for updating UI components like tables, forms, and modals.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.$dispatch('modal_toggled:my-modal')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    this.dispatchEvent(new CustomEvent(\"modal_toggled:my-modal\"))\n})\n```\n\n----------------------------------------\n\nTITLE: Handling asynchronous response callbacks\nDESCRIPTION: Explains how to override default response handling for async actions in MoonShine components by specifying a callback function using AsyncCallback. Demonstrates registering a callback globally through MoonShine's onCallback method, which receives response data and context.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make()->method('myMethod', callback: AsyncCallback::with(responseHandler: 'myResponseHandler'))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myResponseHandler', function(response, element, events, component) {\n        console.log('myResponseHandler', response, element, events, component)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Alpine.js x-data Directive in PHP\nDESCRIPTION: Covers xData() method that defines an Alpine.js component's reactive data directly on a PHP component by setting the x-data attribute. Accepts null, an array, or a string representing initial reactive state, enabling Alpine.js integration for frontend reactivity.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// title is a reactive variable inside\nDiv::make([])\n    ->xData(['title' => 'Hello world'])\n```\n\n----------------------------------------\n\nTITLE: Reindexing Form Element Names with MoonShine.iterable.reindex\nDESCRIPTION: This snippet illustrates the usage of `MoonShine.iterable.reindex()` to reindex form element names within a container. It renumbers items, which is useful in dynamic forms when elements can be added or removed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nMoonShine.iterable.reindex(\n    container,\n    itemSelector = '.item'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Policy via Artisan (Shell)\nDESCRIPTION: This command uses the Laravel Artisan console to create a MoonShine policy.  The command `php artisan moonshine:policy PostPolicy` generates a policy class, typically located in the `app/Policies` directory, with a pre-defined set of methods suitable for MoonShine resource authorization.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/authorization.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:policy PostPolicy\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple ActionButtons to ActionGroup in PHP\nDESCRIPTION: This snippet demonstrates the use of the `addMany()` method to add multiple `ActionButton` instances to an `ActionGroup`. The method accepts an array of `ActionButton` instances. This approach offers a more efficient way of adding several buttons at once.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-group.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make($buttons)\n    ->addMany([\n        ActionButton::make('Button 5'),\n        ActionButton::make('Button 6'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Page Alias Dynamically using getAlias() in PHP\nDESCRIPTION: Illustrates overriding the `getAlias()` method in a `Page` class to implement custom logic for determining the page's URL alias. This provides more flexibility than the static `$alias` property for defining the page's route.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    public function getAlias(): ?string\n    {\n        return 'custom_page';\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DateRange Field Step Value (PHP)\nDESCRIPTION: This snippet shows how to set step for the `DateRange` field using the `step()` method. This controls the increment used when choosing a date. The step can be an integer, float or string.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nDateRange::make('Dates')\n    ->fromTo('date_from', 'date_to')\n    ->min('2024-01-01')\n    ->max('2024-12-31')\n    ->step(5)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Assets to MoonShine Resources\nDESCRIPTION: This snippet shows how to add custom CSS and JavaScript assets to a MoonShine resource. It overrides the onLoad method to add custom CSS and append JavaScript files using the AssetManager.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\AssetManager\\Css;\nuse MoonShine\\AssetManager\\Js;\n\nprotected function onLoad(): void\n{\n    parent::onLoad();\n\n    $this->getAssetManager()\n        ->add(Css::make('/css/app.css'))\n        ->append(Js::make('/js/app.js'));\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Selector-Based Parameters to Fragment\nDESCRIPTION: This snippet uses the method 'withSelectorsParams' to collect values from specific DOM elements identified by CSS selectors, and passes these values during the fragment request.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/fragment.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nFragment::make($components)\n    ->withSelectorsParams([\n        'start_date' => '#start_date',\n        'end_date' => '#end_date'\n    ])\n    ->name('fragment-name'),\n```\n\n----------------------------------------\n\nTITLE: Initializing an ActionButton in PHP\nDESCRIPTION: Shows the constructor signature for the `ActionButton` class. It requires a label (string or Closure), an optional URL (string or Closure, defaults to '#'), and optional data (`DataWrapperContract`) accessible within closures.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Contracts\\Core\\TypeCasts\\DataWrapperContract;\n\nmake(\n    Closure|string $label,\n    Closure|string $url = '#',\n    ?DataWrapperContract $data = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing BelongsToMany Relationship in Laravel\nDESCRIPTION: Defines a BelongsToMany relation field with core parameters: label, relation name, formatted display, and resource class, ensuring proper registration of related resources for Laravel's Eloquent relationship handling.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make(Closure|string $label, ?string $relationName = null, Closure|string|null $formatted = null, ModelResource|string|null $resource = null)\n```\n\n----------------------------------------\n\nTITLE: Run Composer Update\nDESCRIPTION: This shell command runs `composer update` to install or update the project dependencies based on the information provided in `composer.json` and `composer.lock` files. This updates the MoonShine package to the version specified. This step is required to bring in the changes specified in the `composer.json` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Apply Link View Method Dynamic URL/Name PHP\nDESCRIPTION: Shows how to apply the `link()` method with dynamic URL and name using closures. The closures receive the current field value and field object, allowing the link target and text to be determined based on the data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/preview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nPreview::make('Link')\n    ->link(fn($link, Field $field) => $link, fn($name, Field $field) => 'Go')\n```\n\n----------------------------------------\n\nTITLE: Overriding Json Field Buttons - PHP\nDESCRIPTION: This code snippet demonstrates how to override the default buttons used in the Json field using the `buttons()` method. It creates a custom button with an icon and an onclick action.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data', 'data.content')\n    ->fields([\n        Text::make('Title'),\n        Image::make('Image'),\n        Text::make('Value'),\n    ])\n    ->buttons([\n        ActionButton::make('')\n            ->icon('trash')\n            ->onClick(fn() => 'remove()', 'prevent')\n            ->secondary()\n            ->showInLine()\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Page Alias using the $alias Property in PHP\nDESCRIPTION: Demonstrates setting the `$alias` protected property within a `Page` class to define a custom URL alias for the page. Setting this property overrides the default alias automatically generated by MoonShine.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/page/index.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    protected ?string $alias = null;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Placement for MoonShine Dropdown Component (Blade)\nDESCRIPTION: Shows how to control the positioning of the MoonShine Dropdown relative to its toggler element using the `placement` attribute. The example sets the placement to 'left'. Requires referencing popper.js documentation for available values.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/dropdown.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown placement=\"left\">\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Using MoonShine global JavaScript utilities\nDESCRIPTION: Provides examples of the MoonShine global class methods for client-side interactions, including making HTTP requests, displaying toast notifications, toggling modals/off-canvas components, and handling sortable lists or reindexing form elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/js.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.request(ctx, '/url', 'post', {...})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.ui.toast('Hello world', 'success')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.ui.toggleModal('modal-name')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.ui.toggleOffCanvas('canvas-name')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.iterable.sortable(container, url, group, events, { handle: '.handle' }, function(evt) { /* ... */ })\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMoonShine.iterable.reindex(container, '.item')\n```\n\n----------------------------------------\n\nTITLE: Limiting records displayed using limit()\nDESCRIPTION: This code demonstrates the usage of the `limit()` method. It allows you to restrict the number of records displayed in the preview of the `HasMany` field. The example sets the limit to 1.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MoonShine\\Resources\\CommentResource;\nuse MoonShine\\Laravel\\Fields\\Relationships\\HasMany;\n\nHasMany::make('Comments', resource: CommentResource::class)\n    ->limit(1)\n```\n\n----------------------------------------\n\nTITLE: Applying Mask to Text Field - PHP\nDESCRIPTION: This PHP code applies a mask to a text field.  It uses the `mask()` method to format the input.  The example creates a \"Phone\" text field with a mask that specifies the phone number format, taking a string argument to define the mask pattern.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/text.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nText::make('Phone', 'phone')\n    ->mask('+7 (999) 999-99-99')\n```\n\n----------------------------------------\n\nTITLE: Setting On/Off Values for Checkbox\nDESCRIPTION: Overrides the default on/off values (1 and 0) for the Checkbox field using the onValue() and offValue() methods. Accepts either integer or string values for the on and off states.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/checkbox.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nCheckbox::make('Publish', 'is_publish')\n    ->onValue('yes')\n    ->offValue('no')\n```\n\n----------------------------------------\n\nTITLE: Creating a Divider with Blade Template\nDESCRIPTION: This snippet shows how to create a divider in a Blade template. It leverages the Moonshine framework's Blade component for creating dividers using the `<x-moonshine::layout.divider/>` tag.\n\nDependencies: Requires the Moonshine Blade components to be installed and configured in the project.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/divider.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.divider/>\n```\n\n----------------------------------------\n\nTITLE: Html::make Usage in PHP\nDESCRIPTION: Demonstrates creating an Html component instance using the `make()` method in PHP.  It takes an array of components as input, specifically Head and Body components. This example shows how to structure a basic HTML page using MoonShine components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/html.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Html;\n\nHtml::make([\n    Head::make([]),\n    Body::make([]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Attributes for Selection Controls\nDESCRIPTION: Modifies the selection widget's behavior and appearance through 'customAttributes()', enabling custom data attributes and enhanced UI.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->selectMode()\n    ->customAttributes([\n        'data-max-item-count' => 2\n    ])\n```\n\n----------------------------------------\n\nTITLE: Rendering a ValueMetric in Blade\nDESCRIPTION: This Blade template example shows how to display a metric using the custom component, with properties such as title, icon, value, and progress indicator options.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::metrics.value\n    title=\"Completed orders\"\n    icon=\"shopping-bag\"\n    :value=\"$count\"\n    :progress=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining the Popover Component Method in PHP\nDESCRIPTION: Defines the static `make` method signature for the Popover component class. It accepts `title`, `trigger` (text or HTML), and an optional `placement` parameter (defaulting to 'right'). Placement options are based on Tippy.js.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/popover.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    string $title,\n    string $trigger,\n    string $placement = 'right',\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Response Handler in JS\nDESCRIPTION: This JavaScript code defines a custom response handler function to handle responses from asynchronous requests. It uses the `moonshine:init` event to register a function with `MoonShine.onCallback()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/js.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener(\"moonshine:init\", () => {\n    MoonShine.onCallback('myResponseHandler', function(response, element, events, component) {\n        console.log('myResponseHandler', response, element, events, component)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Generate OpenApi Specification using Artisan\nDESCRIPTION: This shell command generates the OpenApi specification based on the configured resources.  It utilizes the `oag:generate` Artisan command to scan the project and create or update the `oag.yaml` and `oag.json` files, populating them with the specification data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan oag:generate\n```\n\n----------------------------------------\n\nTITLE: Initializing Carousel with PHP\nDESCRIPTION: This snippet demonstrates how to create a Carousel instance in PHP, specifying image items, orientation, and alternative text. It highlights the use of the static make() method with parameters for items, portrait orientation, and alt text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/carousel.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(\n   Closure|array $items = [],\n   Closure|bool $portrait = false,\n   Closure|string $alt = ''\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Field Location for HasMany Field in PHP\nDESCRIPTION: Method to specify the location of the HasMany field when using it outside CRUD pages. Allows providing the page, resource, and parameters for proper functioning.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->creatable()\n    ->nowOn(page: $resource->getFormPage(), resource: $resource, params: ['resourceItem' => $item->getKey()])\n    ->fillCast($item, new ModelCaster(Article::class))\n```\n\n----------------------------------------\n\nTITLE: Customizing Menu Item Template PHP\nDESCRIPTION: This snippet describes using the `customView()` method to specify a custom Blade template for rendering a menu item. Dependencies: MoonShine framework. Input: Path to a Blade template. Output: The menu item is rendered using the specified template.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/menu.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ncustomView(string $path)\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a ValueMetric in PHP\nDESCRIPTION: This code shows how to enhance a metric with an icon by using the icon() method, which accepts an icon name. It allows visual enhancement and quick recognition of metric types.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/metrics.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nValueMetric::make('Orders')\n    ->value(fn(): int => Order::count())\n    ->icon('shopping-bag')\n```\n\n----------------------------------------\n\nTITLE: MobileBar make() Method Signature in PHP\nDESCRIPTION: Defines the static `make` method for the MobileBar component. This method is used to instantiate the MobileBar and accepts an optional iterable (usually an array) of child components (`$components`) that will be rendered within the mobile navigation bar.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/mobilebar.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Disabling File Download in PHP\nDESCRIPTION: This code snippet shows how to disable file downloads with the `disableDownload()` method. It prevents users from downloading files. This also uses the `file` parameter to determine the file name.  The MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File', 'file')\n    ->disableDownload()\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Count in BelongsToMany Preview (PHP)\nDESCRIPTION: Uses the `onlyCount()` method on a `BelongsToMany` field to display only the total number of related items in the preview instead of the default table view. Requires a `BelongsToMany` field instance.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->onlyCount()\n```\n\n----------------------------------------\n\nTITLE: Using the Content Component in Blade Templates\nDESCRIPTION: Illustrates how to utilize the `Content` component within a Blade template using the custom tag `<x-moonshine::layout.content>`. Any HTML or Blade content nested within this tag will be rendered as the main content of the page layout managed by this component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/content.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.content>\n    <article class=\"article\">\n        Content\n    </article>\n</x-moonshine::layout.content>\n```\n\n----------------------------------------\n\nTITLE: Enabling File Removal in PHP\nDESCRIPTION: This snippet demonstrates how to enable the file removal functionality with the `removable()` method. This allows users to delete uploaded files from the UI, by using the conditional `$condition` and attributes `$attributes`. The MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->removable()\n```\n\n----------------------------------------\n\nTITLE: Implementing FormLayout Class in PHP\nDESCRIPTION: Defines the `FormLayout` class extending `CompactLayout` for authentication pages. It specifies the home route URL and constructs a layout featuring specific elements like an authentication logo and content area using MoonShine UI components.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Layouts;\n\nuse MoonShine\\Laravel\\Layouts\\CompactLayout;\nuse MoonShine\\UI\\Components\\{Components,\n    FlexibleRender,\n    Heading,\n    Layout\\Div,\n    Layout\\Body,\n    Layout\\Content,\n    Layout\\Flash,\n    Layout\\Html,\n    Layout\\Layout,\n    Layout\\Wrapper};\n\nfinal class FormLayout extends CompactLayout\n{\n    protected function getHomeUrl(): string\n    {\n        return route('home');\n    }\n\n    public function build(): Layout\n    {\n        return Layout::make([\n            Html::make([\n                $this->getHeadComponent(),\n                Body::make([\n                    Div::make([\n                        Div::make([\n                            $this->getLogoComponent(),\n                        ])->class('authentication-logo'),\n\n                        Div::make([\n                            Flash::make(),\n                            Components::make($this->getPage()->getComponents()),\n                        ])->class('authentication-content'),\n                    ])->class('authentication'),\n                ]),\n            ])\n                ->customAttributes([\n                    'lang' => $this->getHeadLang(),\n                ])\n                ->withAlpineJs()\n                ->withThemes(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update composer.json for MoonShine\nDESCRIPTION: This snippet demonstrates how to update the MoonShine package version in the composer.json file to upgrade to version 3.0.  This is a required step to ensure the application utilizes the new version of the MoonShine package.  The snippet specifies the required package and its version constraint.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"moonshine/moonshine\": \"^3.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Breadcrumbs Items Method PHP\nDESCRIPTION: This snippet shows the signature of the `make` method used to create the Breadcrumbs component. The `$items` parameter is an associative array where keys are URLs/links and values are the display names for each breadcrumb item.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/breadcrumbs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(array $items = [])\n```\n\n----------------------------------------\n\nTITLE: Setting Alpine.js x-data with Component and Parameters in PHP\nDESCRIPTION: Illustrates xDataMethod() which sets the x-data attribute with a specific Alpine.js component method and optional parameters. This allows the binding of specialized Alpine.js components with parameters from PHP code.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/attributes.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nxDataMethod(\n    string $method,\n    ...$parameters\n)\n\nDiv::make([])\n    ->xDataMethod('some-component', 'var', ['foo' => 'bar'])\n```\n\n----------------------------------------\n\nTITLE: PHP Example: Specifying Filename for Code Context\nDESCRIPTION: This PHP code specifies the filename parameter for a code block, indicating the source file `config/moonshine.php`. It is used for clarifying the origin of code snippets in documentation, especially when highlighting code modifications or specific files.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```php filename:config/moonshine.php\n```\n```\n\n----------------------------------------\n\nTITLE: Configure TableBuilder Column Selection per Field PHP\nDESCRIPTION: Demonstrates enabling column selection for the entire TableBuilder while disabling it for a specific field (e.g., 'Title') using the 'columnSelection(false)' method on the field. Requires the TableBuilder name to be unique if using localStorage.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nTableBuilder::make()\n    ->fields([\n        Text::make('Title')\n            ->columnSelection(false),\n        Text::make('Text')\n    ])\n    ->columnSelection()\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagination in MoonShine Resource - PHP\nDESCRIPTION: Shows how to completely disable pagination for a MoonShine ModelResource by setting the protected property $usePagination to false. This removes pagination functionality from the resource's index listing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/model-resource/table.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $usePagination = false;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Directory Deletion in PHP\nDESCRIPTION: This snippet explains how to enable deleting the directory specified by the `dir()` method, if it's empty, using `enableDeleteDir()`. It relies on the `dir()` and `removable()` methods. The MoonShine framework is a dependency.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->dir('docs')\n    ->removable()\n    ->enableDeleteDir()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Driver in MoonShine (PHP)\nDESCRIPTION: Sets the cache driver used by MoonShine. Configure the 'cache' key in `config/moonshine.php` or use the `cacheDriver()` method in `MoonShineServiceProvider` to specify the desired driver (e.g., 'file', 'redis').\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n'cache' => 'file',\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->cacheDriver('redis');\n```\n\n----------------------------------------\n\nTITLE: Adding Events to MoonShine OffCanvas Toggle PHP\nDESCRIPTION: Illustrates attaching a TOAST event to an OffCanvas using the `toggleEvents` method. The event is triggered whenever the linked ActionButton opens or closes the canvas.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Open off-canvas')->toggleOffCanvas('my-off-canvas'),\n\nOffCanvas::make('My OffCanvas', asyncUrl: '/')\n    ->name('my-off-canvas')\n    ->left()\n    ->toggleEvents([\n        AlpineJs::event(JsEvent::TOAST, params: ['text' => 'Hello off-canvas'])\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Publishing OpenApi Generator Configuration in Laravel via Shell\nDESCRIPTION: Publishes the OpenApi generator package configuration files, allowing customization of documentation title, route, storage path, and view template in a Laravel environment.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish --provider=\"MoonShine\\OAG\\Providers\\OAGServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine JWT Package via Shell\nDESCRIPTION: Installs the MoonShine JWT package required to enable JWT token authentication for the admin panel API mode. This shell command downloads the necessary dependencies via Composer, a prerequisite for JWT functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/jwt\n```\n\n----------------------------------------\n\nTITLE: Generating URL for named route outside resource context\nDESCRIPTION: Shows how to generate a URL for a named route by passing resource and page URIs explicitly, useful when outside the resource scope or when parameters need to be specified manually.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/advanced/routes.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nroute('moonshine.permissions', ['resourceUri' => 'user-resource', 'pageUri' => 'custom-page'])\n```\n\n----------------------------------------\n\nTITLE: Wrapping the Name Attribute\nDESCRIPTION: The `wrapName()` method is used to add a wrapper around the value of the `name` attribute. This is particularly helpful for scenarios where you need to structure form data for filtering or grouping purposes, especially when working with nested data or in configurations like the \"options\" format.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nwrapName(string $wrapper)\n```\n\n----------------------------------------\n\nTITLE: Merging Attribute Values with mergeAttribute()\nDESCRIPTION: Demonstrates how to combine an existing attribute value with a new value using a specified separator through the mergeAttribute() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nmergeAttribute(\n    string $name,\n    string $value,\n    string $separator = ' '\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->mergeAttribute('class', 'new-class');\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine OffCanvas using Blade Component Blade\nDESCRIPTION: Shows how to define an OffCanvas component directly in a Blade template using the `x-moonshine::off-canvas` tag. It illustrates setting the title, positioning, and defining the toggler slot and content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::off-canvas\n    title=\"Offcanvas\"\n    :left=\"false\"\n>\n    <x-slot:toggler>\n         Open\n    </x-slot:toggler>\n    {{ fake()->text() }}\n</x-moonshine::off-canvas>\n```\n\n----------------------------------------\n\nTITLE: Creating FieldsGroup Instance\nDESCRIPTION: Creates a `FieldsGroup` instance using the `make` method, populated with `Text` and `Email` fields. This demonstrates how to group multiple fields within a FieldsGroup component for easier management.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse MoonShine\\UI\\Components\\FieldsGroup;\n\nFieldsGroup::make([\n    Text::make('Title'),\n    Email::make('Email'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw HTML Head Content with MoonShine AssetManager (PHP)\nDESCRIPTION: Explains how to insert arbitrary HTML content, like link tags for preconnecting, directly into the `<head>` section using `MoonShine\\AssetManager\\Raw::make()`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/assets.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\AssetManager\\Raw;\n\nRaw::make('<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">');\n```\n\n----------------------------------------\n\nTITLE: Registering MoonShine Resources and Pages in MoonShineServiceProvider using PHP\nDESCRIPTION: This snippet demonstrates how to register resources and pages with the MoonShine core class using arrays of class references. It's necessary after updating to v3.0, since resources and pages are registered differently. Inputs include resource and page class names; outputs are internal registration within MoonShine. Assumes the $core and $config variables (MoonShine core and configuration respectively) are already available.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/upgrade-guide.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$core->resources([\n    MoonShineUserResource::class,\n    MoonShineUserRoleResource::class,\n    // Add all your resources\n]);\n\n$core->pages([\n    ...$config->getPages(),\n    SettingPage::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Filling FieldsGroup Data\nDESCRIPTION: Populates the fields within a `FieldsGroup` with data using the `fill` method. It accepts an array of raw data, an optional `DataWrapperContract` instance for casting, and an index.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfill(\n    array $raw = [],\n    ?DataWrapperContract $casted = null,\n    int $index = 0,\n)\n```\n\n----------------------------------------\n\nTITLE: FieldsGroup Initialization\nDESCRIPTION: Initializes a `FieldsGroup` component with an iterable collection of `FieldContract` instances. The constructor accepts an array of fields to be grouped together.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Files in MoonShine\nDESCRIPTION: Examples of how to add JavaScript files to the MoonShine admin panel using the Js class. Shows basic usage, deferred loading, and adding custom attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Базовое подключение\nJs::make('/js/app.js');\n\n// С отложенной загрузкой\nJs::make('/js/app.js')->defer();\n\n// С атрибутами\nJs::make('/js/app.js')->customAttributes([\n    'data-module' => 'main'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring DateRange Field with fromTo (PHP)\nDESCRIPTION: This snippet demonstrates the basic configuration of a `DateRange` field in PHP using the MoonShine framework.  It utilizes the `fromTo()` method to define the associated database fields for the date range.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\DateRange;\n\nDateRange::make('Dates')\n    ->fromTo('date_from', 'date_to')\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to Cards in PHP\nDESCRIPTION: Shows how to add action buttons to cards including delete, edit, and conditional navigation buttons using ActionButton instances.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Switcher::make('Active')])\n    ->cast(new ModelCaster(Article::class))\n    ->buttons([\n        ActionButton::make('Delete', route('name.delete')),\n        ActionButton::make('Edit', route('name.edit'))->showInDropdown(),\n        ActionButton::make('Go to Home', route('home'))->blank()->canSee(fn($data) => $data->active),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using icon() with the 'cog' Icon in PHP\nDESCRIPTION: This snippet shows a basic usage of the `icon()` method to display the 'cog' icon from the default Heroicons collection (Outline).  No additional parameters are passed. The output is the HTML representation of the 'cog' icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n->icon('cog')\n```\n\n----------------------------------------\n\nTITLE: Using DateRange for Filtering (PHP)\nDESCRIPTION: This code shows how to use the `DateRange` field for filtering data.  The `fromTo()` method is not used in this scenario, as the filtering will occur against a single field in the database table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date-range.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDateRange::make('Creation date', 'created_at')\n```\n\n----------------------------------------\n\nTITLE: Install MoonShine EasyMDE Package via Composer\nDESCRIPTION: This command uses Composer to add the `moonshine/easymde` library as a required dependency to your project. Running this command will download the package and its dependencies, integrating the EasyMDE Markdown field functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/markdown.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/easymde\n```\n\n----------------------------------------\n\nTITLE: Modify TableBuilder Row Checkbox PHP\nDESCRIPTION: Allows customizing the bulk action checkbox for each row using a closure. The example demonstrates how to set the 'checked' attribute based on the data key.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/table-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n->modifyRowCheckbox(\n    fn(Checkbox $checkbox, DataWrapperContract $data, TableBuilder $ctx) => $data->getKey() === 2 ? $checkbox->customAttributes(['checked' => true]) : $checkbox\n)\n```\n\n----------------------------------------\n\nTITLE: Type Casting Data for CardsBuilder in PHP\nDESCRIPTION: Shows how to cast primitive data types to model objects using ModelCaster, ensuring fields work correctly with complex data types.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\TypeCasts\\ModelCaster;\n\nCardsBuilder::make()\n    ->cast(new ModelCaster(User::class))\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Using PHP Class\nDESCRIPTION: Example of creating a Dropdown component using the PHP class approach with the MoonShine UI Components Dropdown class. This shows how to set a title, toggler, content, and list items.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/dropdown.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Dropdown;\n\nDropdown::make(\n    'Dropdown',\n    'Toggler',\n    'Content',\n    ['Item 1', 'Item 1']\n)\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique Slug Values in PHP\nDESCRIPTION: The `unique()` method configures the Slug field to store only unique values. This ensures that all generated slugs are unique within the database. There are no parameters to be set for this method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/slug.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nunique()\n```\n\nLANGUAGE: php\nCODE:\n```\nSlug::make('Slug')\n    ->unique()\n```\n\n----------------------------------------\n\nTITLE: Enabling Creation of Related Objects via Modal\nDESCRIPTION: Allows creating new related records directly from the relation field using 'creatable()', optionally customizing the create button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->creatable()\n```\n\n----------------------------------------\n\nTITLE: Disabling Refresh After Apply for File Fields\nDESCRIPTION: The `disableRefreshAfterApply()` method is used to disable the default behavior of the `File` field to refresh after applying the changes. It allows the user to customize the behavior of the `refreshAfterApply` functionality.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\ndisableRefreshAfterApply()\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Rules in MoonShine ModelResource\nDESCRIPTION: Shows how to add validation rules to a MoonShine ModelResource class by implementing the rules() method, which works similarly to Laravel's FormRequests validation system.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    // ...\n\n    protected function rules(mixed $item): array\n    {\n        return [\n            'title' => ['required', 'string', 'min:5']\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BelongsTo Field with Images using withImage Method\nDESCRIPTION: Shows how to add images to BelongsTo field values by specifying the image column, storage disk, and directory parameters with the withImage() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nwithImage(\n    string $column,\n    string $disk = 'public',\n    string $dir = ''\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Spinner in Blade Template\nDESCRIPTION: Demonstrates how to include a Spinner component within Blade templates using a custom Blade component `<x-moonshine::spinner>` with a size attribute. This facilitates frontend integration and visual customization within Laravel views.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::spinner size=\"md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting 404 Exception in moonshine.php\nDESCRIPTION: This snippet presents how to customize the not found exception by replacing the default exception with custom implementation by modifying `not_found_exception`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'not_found_exception' => MoonShineNotFoundException::class,\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Actions in HasMany Field in PHP\nDESCRIPTION: Methods to explicitly set or exclude specific actions in a HasMany field. activeActions defines the list of allowed actions, while withoutActions excludes specific actions.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments')\n    ->activeActions(\n        Action::VIEW,\n        Action::UPDATE,\n    )\n```\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments')\n    ->withoutActions(\n        Action::VIEW\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Inline CSS in MoonShine\nDESCRIPTION: Example showing how to add inline CSS styles to the MoonShine admin panel using the InlineCss class. Useful for adding small style rules without external files.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nInlineCss::make(<<<'CSS'\n    .custom-class {\n        color: red;\n    }\nCSS);\n```\n\n----------------------------------------\n\nTITLE: Customize the add button for Json field\nDESCRIPTION: This code demonstrates how to customize the add button for a Json field when using `creatable()`. It uses an ActionButton component to create a primary-colored button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\ActionButton;\nuse MoonShine\\UI\\Fields\\Json;\n\nJson::make('Data')\n    ->keyValue()\n    ->creatable(\n        button: ActionButton::make('New')->primary()\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to MoonShine Box - PHP Class\nDESCRIPTION: Illustrates how to include an icon within the Box component by chaining the `icon()` method with the icon name when creating the box in PHP.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title box', ['Hello!'])->icon('users');\n```\n\n----------------------------------------\n\nTITLE: Disabling Refresh After Apply for File Fields with example\nDESCRIPTION: This example shows how to use `disableRefreshAfterApply()` for the `Image` field. The default behavior is to enable refresh after the apply process, this example will disable this functionality. You can disable the default behavior and customize the re-rendering process based on your specific needs.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nImage::make('Avatar')\n    ->disableRefreshAfterApply()\n```\n\n----------------------------------------\n\nTITLE: Transforming into Tags Input (PHP)\nDESCRIPTION: Illustrates how to transform the Text field into a tags input field using the `tags()` method.  This enables users to enter multiple tags, optionally limited by a specified number.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nText::make('Tags', 'tags')\n    ->tags(5)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Display Mode for Relation Field\nDESCRIPTION: Uses 'horizontalMode()' to render options in a horizontal layout with configurable column widths, improving layout flexibility.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to-many.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nBelongsToMany::make('Categories', resource: CategoryResource::class)\n    ->horizontalMode(true, minColWidth: '100px', maxColWidth: '33%')\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine OpenApi Generator Package via Shell\nDESCRIPTION: Installs the MoonShine OpenApi Generator package enabling generation of OpenApi documentation specification files for the API. It is a prerequisite step for using the OpenApi generator features.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/frontend/api.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/oag\n```\n\n----------------------------------------\n\nTITLE: Using the unless() Method in PHP with MoonShine\nDESCRIPTION: The unless() method is the reverse of when(), executing a callback when a condition is false. It takes a condition value, a callback to execute if the condition is false, and an optional default callback if the condition is true.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/import-export.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nunless(\n    $value = null,\n    callable $callback = null,\n    callable $default = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting a Placeholder for BelongsTo Field (Method Signature) in MoonShine (PHP)\nDESCRIPTION: Shows the method signature for `placeholder()`, which sets the HTML `placeholder` attribute on the `BelongsTo` select input, providing hint text.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nplaceholder(string $value)\n```\n\n----------------------------------------\n\nTITLE: Adding Eye Toggle (PHP)\nDESCRIPTION: Illustrates how to add an eye toggle to the Text field using the `eye()` method. This toggle allows users to show or hide the field's value, typically used for passwords.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nText::make('Password', 'password')\n    ->eye()\n```\n\n----------------------------------------\n\nTITLE: Setting Alert Removability via PHP\nDESCRIPTION: Demonstrates how to enable automatic removal of alerts after a certain period by setting the 'removable' parameter to true in the Alert class, useful for transient notifications.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/alert.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nAlert::make(removable: true)\n    ->content('Text')\n```\n\n----------------------------------------\n\nTITLE: Setting Spinner Position to Fixed\nDESCRIPTION: Demonstrates fixing the spinner's position using the `:fixed=\"true\"` parameter, allowing the indicator to stay stationary relative to the viewport during scrolling for consistent user feedback.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/spinner.md#_snippet_6\n\nLANGUAGE: Blade\nCODE:\n```\n<x-moonshine::spinner :fixed=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Using Blade Component\nDESCRIPTION: Example of creating a Dropdown component using Blade template syntax with named slots. This shows the basic structure with content and a toggler element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/dropdown.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::dropdown>\n    <div class=\"m-4\">\n        Content\n    </div>\n    <x-slot:toggler>Click me</x-slot:toggler>\n</x-moonshine::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering MoonShine Favicon Component Using Blade Directive\nDESCRIPTION: Shows how to render the MoonShine favicon using Blade template syntax. No parameters are required for the default component. The output integrates into the HTML head section to insert favicon markup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/favicon.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.favicon />\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Routing Prefix in moonshine.php\nDESCRIPTION: Shows the prefix settings for routing inside the `moonshine.php` file.  It sets admin, page, and resource prefixes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'prefix' => 'admin',\n'page_prefix' => 'page',\n'resource_prefix' => 'resource',\n```\n\n----------------------------------------\n\nTITLE: Rendering Burger Component in Blade\nDESCRIPTION: Shows how to render the Burger component directly within a Blade template using the self-closing `<x-moonshine::layout.burger />` tag. This tag will output the necessary HTML for the burger icon/button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/burger.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.burger />\n```\n\n----------------------------------------\n\nTITLE: Versioning Assets in MoonShine\nDESCRIPTION: Example showing how to add versioning to assets in MoonShine to manage browser caching. By default, MoonShine's version is used, but it can be overridden.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/assets.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Добавление версии к отдельному ресурсу\nJs::make('/js/app.js')->version('1.0.0');\n\n// Результат: /js/app.js?v=1.0.0\n```\n\n----------------------------------------\n\nTITLE: ActionButton Badge Method Signature in PHP\nDESCRIPTION: Shows the signature for the `badge()` method, which allows adding a badge to the button. The method accepts a Closure, string, integer, float, or null value for the badge content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nbadge(Closure|string|int|float|null $value)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Native Link (Blade)\nDESCRIPTION: Illustrates rendering a standard HTML anchor tag using the `<x-moonshine::link-native>` Blade component. The `href` attribute specifies the link's destination.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/link.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::link-native href=\"#\">\n    Link\n</x-moonshine::link-native>\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout in PHP with MoonShine\nDESCRIPTION: Demonstrates how to create a Grid component in PHP using the MoonShine framework. The Grid accepts an array of components and a gap parameter to control spacing between elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/grid.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    iterable $components = [],\n    int $gap = 6,\n)\n```\n\n----------------------------------------\n\nTITLE: Using `getForm` Helper in MoonShine (PHP)\nDESCRIPTION: Example of retrieving a form instance using the `moonshineConfig()` helper function and calling the `getForm` method with the configured form name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n// Helper\n\n$form = moonshineConfig()->getForm('login');\n```\n\n----------------------------------------\n\nTITLE: Using Header Component with PHP Class\nDESCRIPTION: This example demonstrates how to implement the Header component by importing the Header class and creating an instance with the make() method and passing components as an array.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/header.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Header;\n\nHeader::make([\n    Search::make(),\n])\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine Spinner Absolute Position (Blade)\nDESCRIPTION: Demonstrates configuring the MoonShine spinner component in a Blade template to use CSS absolute positioning by setting the `:absolute` attribute to `true`. This affects how the spinner is placed on the page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::spinner :absolute=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: ActionButton Hotkey Assignment\nDESCRIPTION: Assigns hotkeys to an ActionButton that triggers a click event when the specified key combination is pressed. The `hotKeys` method accepts an array of keys and a boolean value to indicate whether a badge displaying the key combination should be shown on the button.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label')->hotKeys(['shift', '2'], false)\n```\n\n----------------------------------------\n\nTITLE: Modifying the Name Attribute of a Field\nDESCRIPTION: The `setNameAttribute()` method allows you to customize the `name` attribute of a field. Since the `name` attribute is generated based on nesting and has a complex formation logic, this method is used to override that.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nsetNameAttribute(string $name)\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Buttons in MoonShine Resource (PHP)\nDESCRIPTION: This snippet enables sticky buttons for MoonShine resources. When set to `true`, the action buttons for each row in the table will remain visible even when scrolling horizontally.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:1]\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $stickyButtons = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: List Resources\nDESCRIPTION: This shell command is used to generate a list of class names representing the MoonShine resources. This command finds all the PHP files within `app/MoonShine/Resources`, extracts the base name (filename), and transforms it into a class name format for registration within the application, removing the `.php` extension and appending `::class`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfind app/MoonShine/Resources -type f -exec basename {} \\; | sed \"s/.php/::class,/\" | sort\n```\n\n----------------------------------------\n\nTITLE: Mapping Fields in FieldsGroup\nDESCRIPTION: Applies a transformation function to each field within a `FieldsGroup` using the `mapFields` method. The callback function receives a `FieldContract` instance and its index, allowing modification of each field's state or properties.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/fields-group.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nFieldsGroup::make($fields)\n    ->mapFields(\n        fn(FieldContract $field, int $index): FieldContract => $field\n    )\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Update and Locking (PHP)\nDESCRIPTION: Shows how to enable updating the Text field in preview mode and add a lock icon using `updateOnPreview()` and `locked()` methods. Allows editing the field directly in preview, while indicating it's protected.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/text.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->updateOnPreview()\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Title in MoonShineServiceProvider\nDESCRIPTION: Shows the title configuration using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$config->title('My Application');\n```\n\n----------------------------------------\n\nTITLE: Creating CardsBuilder Class Instance in PHP\nDESCRIPTION: Instantiates a CardsBuilder component with optional items and fields for displaying data as cards. This is the base class constructor for the component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\CardsBuilder;\n\nCardsBuilder::make(iterable $items = [], FieldsContract|iterable $fields = [])\n```\n\n----------------------------------------\n\nTITLE: Enable Horizontal Menu Mode - PHP\nDESCRIPTION: This snippet demonstrates how to enable horizontal menu mode. It utilizes the `top()` method on the `Menu` component instance. This is intended to be used when the menu is displayed in the `TopBar`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/menu.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nMenu::make()->top()\n```\n\n----------------------------------------\n\nTITLE: Adding TwoFactor Component\nDESCRIPTION: This snippet shows how to add the `TwoFactor` component to the profile page. This is necessary if the default view has been overridden.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/security/authentication.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\TwoFactor\\ComponentSets\\TwoFactor;\n\nprotected function components(): iterable\n{\n    return [\n        // ...\n        TwoFactor::make(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Original File Name in PHP\nDESCRIPTION: This snippet shows how to keep the original file name upon upload with the `keepOriginalFileName()` method. It disables the default file naming. MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->keepOriginalFileName()\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine OffCanvas open method PHP\nDESCRIPTION: Shows the method signature for the `open()` method, used to make the OffCanvas visible by default when the page loads, optionally based on a condition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nopen(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Adding a Lock Icon to Date Field in PHP\nDESCRIPTION: Illustrates adding a visual lock icon indicator to the Date field using the `locked()` method. This is often used to signify that the field is read-only or restricted.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/date.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDate::make('Created at', 'created_at')\n    ->locked()\n```\n\n----------------------------------------\n\nTITLE: Generating a MoonShine Resource for Laravel Model - Shell\nDESCRIPTION: This snippet runs an artisan command to generate a MoonShine resource class for an Eloquent model (e.g., User). It scaffolds the administrative CRUD interface for that model, making it available in the MoonShine admin panel menu. The key parameter is the model name which associates the resource with its underlying database table.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/quick-start.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:resource User\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Error Display in MoonShine\nDESCRIPTION: Demonstrates how to control validation error display position using the $errorsAbove property within a ModelResource class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/form.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Resources;\n\nuse MoonShine\\Laravel\\Resources\\ModelResource;\n\nclass PostResource extends ModelResource\n{\n    protected bool $errorsAbove = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting the User with MoonShineJsonResponse (PHP)\nDESCRIPTION: Example usage of the `redirect()` method within `MoonShineJsonResponse` to redirect the user to the root URL ('/'). Requires the `MoonShineJsonResponse` class.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nMoonShineJsonResponse::make()->redirect('/');\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapper with PHP\nDESCRIPTION: This code snippet demonstrates the usage of the `Wrapper` component within a PHP context. It shows how to instantiate the `Wrapper` class and nest other components, such as the `Body` component. It's essential for setting up the layout structure of a MoonShine application.  The `$components` parameter accepts an array of components that will be wrapped.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/wrapper.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Body;\nuse MoonShine\\UI\\Components\\Layout\\Wrapper;\n\nBody::make([\n    Wrapper::make([\n        // ...\n    ])\n])\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty Directory Removal\nDESCRIPTION: Enable deletion of empty directories after file removal with the enableDeleteDir() method. This will delete the directory specified in dir() if it becomes empty.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/file.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nFile::make('File')\n    ->dir('docs')\n    ->removable()\n    ->enableDeleteDir()\n```\n\n----------------------------------------\n\nTITLE: Customizing Edit Button for HasMany Relationship in PHP\nDESCRIPTION: Example of completely overriding the edit button for HasMany relationship using the changeEditButton() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', 'comments', resource: CommentResource::class)\n    ->changeEditButton(\n        ActionButton::make(\n            'Edit',\n            fn(Comment $comment) => app(CommentResource::class)->formPageUrl($comment)\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: PHP Class Implementation of Popover\nDESCRIPTION: Example of how to create a Popover component using the PHP class approach. It demonstrates setting a title, trigger, and HTML content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/popover.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPopover::make('Title', 'Trigger')\n    ->content('HTML content')\n```\n\n----------------------------------------\n\nTITLE: Customizing Url Field Title with Callback in PHP\nDESCRIPTION: Demonstrates how to set a custom title for a URL link using a callback function that can modify how the URL is displayed.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/url.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntitle(Closure $callback)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Url;\n\nUrl::make('Link')\n    ->title(fn(string $url, Url $ctx) => str($url)->limit(3))\n```\n\n----------------------------------------\n\nTITLE: Working with Iterable Attributes\nDESCRIPTION: Demonstrates the iterableAttributes method which adds attributes necessary for working with iterable components, with an optional level parameter for nesting depth.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\niterableAttributes(int $level = 0)\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Heading with class approach\nDESCRIPTION: Example of creating a heading using the class-based approach, setting the title to 'Title' and heading level to 2.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/heading.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Heading;\n\nHeading::make('Title', 2)\n```\n\n----------------------------------------\n\nTITLE: Displaying HasMany Relationship as Link with Count in PHP\nDESCRIPTION: Example of using relatedLink() method to display the relationship as a link with the count of elements instead of a full preview.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/has-many.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->relatedLink()\n```\n\n----------------------------------------\n\nTITLE: Triggering a Table Update Event with MoonShineJsonResponse (PHP)\nDESCRIPTION: Illustrates how to use the `events()` method of `MoonShineJsonResponse` to dispatch a JavaScript event (`JsEvent::TABLE_UPDATED`) targeting the 'index' table, using the `AlpineJs` helper. Requires `MoonShineJsonResponse`, `AlpineJs`, and `JsEvent`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nMoonShineJsonResponse::make()->events([AlpineJs::event(JsEvent::TABLE_UPDATED, 'index')]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Header Component in PHP\nDESCRIPTION: This snippet shows how to create a Header component using PHP class syntax. It demonstrates initializing a Header with a Search component as a child element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/header.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Style to MoonShine Box - PHP Class\nDESCRIPTION: Demonstrates how to render the Box component with a dark background style using the `dark()` method when building the component in PHP.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nBox::make(['Hello!'])->dark();\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Language in MoonShine\nDESCRIPTION: Shows how to set the default language for the MoonShine admin panel either through the configuration file or service provider.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/localization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'locale' => 'en',\n```\n\nLANGUAGE: php\nCODE:\n```\n$config->locale('en');\n```\n\n----------------------------------------\n\nTITLE: Generating RegisterPage with MoonShine Command (Shell)\nDESCRIPTION: Shell command using PHP Artisan to generate a custom MoonShine page class named `RegisterPage`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page RegisterPage\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to MoonShine Components\nDESCRIPTION: Shows how to add CSS, JavaScript, and other assets to MoonShine components using the addAssets() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nBox::make()\n    ->addAssets([\n        new Css(Vite::asset('resources/css/block.css'))\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enable filter mode\nDESCRIPTION: This code enables filter mode for a Json field using `filterMode()`. This adapts the field's behavior for use in filters and disables the ability to add new elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nJson::make('Data')\n    ->fields([\n        Text::make('Title', 'title'),\n        Text::make('Value', 'value')\n    ])\n    ->filterMode()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Views in MoonShine Components\nDESCRIPTION: Shows how to change a component's view using the customView() method with a fluent interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/index.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ncustomView(\n    string $view,\n    array $data = []\n)\n```\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title', [])\n    ->customView('component.my-custom-block')\n```\n\n----------------------------------------\n\nTITLE: Always Loading MoonShine OffCanvas Asynchronous Content PHP\nDESCRIPTION: Demonstrates using the `alwaysLoad()` method to ensure that the asynchronous content for the OffCanvas is fetched from the URL every time the canvas is opened, not just the first time.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make(...)\n        ->alwaysLoad(),\n```\n\n----------------------------------------\n\nTITLE: Method Signature for BelongsToMany inLine in MoonShine PHP\nDESCRIPTION: Provides the method signature for the `inLine()` method on the `BelongsToMany` field. It shows the optional parameters available for customizing the inline display: a separator string, a boolean or closure for badge display, and an optional closure for generating links.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/belongs-to-many.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ninLine(string $separator = '', Closure|bool $badge = false, ?Closure $link = null)\n```\n\n----------------------------------------\n\nTITLE: Initializing MoonShine Text Field in PHP\nDESCRIPTION: Creates instances of the Text field from the MoonShine UI library using the static make() method. The field can be created with just a label or both a label and a name. This snippet serves as the basic way to instantiate text input fields for usage in FormBuilder, TableBuilder, and elsewhere in the MoonShine admin panel.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/index.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Text;\n\nText::make('Title')\nText::make('Title', 'title')\n```\n\n----------------------------------------\n\nTITLE: Creating a ValueMetric with make method\nDESCRIPTION: Basic method for instantiating a ValueMetric component with a label parameter, which can be either a string or a Closure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(Closure|string $label)\n```\n\n----------------------------------------\n\nTITLE: Formatting ValueMetric Display Value\nDESCRIPTION: Method for customizing how the value is displayed, allowing for human-readable formats, prefixes, or suffixes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nvalueFormat(string|Closure $value)\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect After Changes in HasMany Field in PHP\nDESCRIPTION: Method to configure redirection after saving, adding, or deleting items in a HasMany relationship. The callback receives the parent ID and should return a route.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/has-many.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nHasMany::make('Comments', resource: CommentResource::class)\n    ->redirectAfter(fn(int $parentId) => route('home'))\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - Footer Component Override\nDESCRIPTION: Demonstrates how to override the Footer component within the MoonShine admin panel layout using the `getFooterComponent()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFooterComponent(): Footer\n{\n    Footer::make([\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Url Field Implementation in PHP\nDESCRIPTION: Creates a basic Url field that extends the Text field with type=url set by default.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/url.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Fields\\Url;\n\nUrl::make('Link')\n```\n\n----------------------------------------\n\nTITLE: Defining Breadcrumbs for a MoonShine PHP Page\nDESCRIPTION: Illustrates overriding the `getBreadcrumbs()` method to return an associative array representing page breadcrumbs. Keys typically represent URLs and values are breadcrumb labels derived from the page title. This is used to provide navigation hints in the admin interface.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/page/index.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MoonShine\\Pages;\n\nuse MoonShine\\Laravel\\Pages\\Page;\n\nclass CustomPage extends Page\n{\n    // ...\n\n    public function getBreadcrumbs(): array\n    {\n        return [\n            '#' => $this->getTitle()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Authentication Guard in MoonShineServiceProvider\nDESCRIPTION: The configuration for authentication guard using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$config->guard('admin');\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox On/Off Values (PHP)\nDESCRIPTION: Illustrates how to customize the values for the checked and unchecked states of a Checkbox field. The `onValue` method sets the value when checked to 'yes', and the `offValue` method sets the value when unchecked to 'no', overriding the default 1 and 0.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/checkbox.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nCheckbox::make('Publish', 'is_publish')\n    ->onValue('yes')\n    ->offValue('no')\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Width to Auto in PHP\nDESCRIPTION: This shows how to set the modal width to 'auto' using the `auto()` method, which adjusts the width based on the content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/modal.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Заголовок', 'Содержимое...', ActionButton::make('Показать модальное окно', '#'))\n            ->auto(),\n```\n\n----------------------------------------\n\nTITLE: Mass Attribute Modification with customAttributes()\nDESCRIPTION: Shows how to add or replace multiple component attributes at once using the customAttributes() method, with an option to override existing attributes.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ncustomAttributes(\n    array $attributes,\n    bool $override = false\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$component->customAttributes(['data-role' => 'admin'], true);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Fields with Examples\nDESCRIPTION: These examples show how to use the `canSee()` method to conditionally display a field.  The first example shows how to hide a field if toValue() is equal to 'hide'. The second example shows how to use the method with relationships. The closure receives the model instance and the field instance, allowing conditions based on the current data and the field's properties.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/basic-methods.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nText::make('Name')\n    ->canSee(function (Text $field) {\n        return $field->toValue() !== 'hide';\n    })\n```\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\Laravel\\Fields\\Relationships\\BelongsTo;\n\n// или для полей отношений\nBelongsTo::make('Item', 'item', resource: ItemResource::class)\n    ->canSee(function (Comment $comment, BelongsTo $field) {\n        // ваше условие\n    })\n```\n\n----------------------------------------\n\nTITLE: Auto Scaling Modal Width with auto Method (MoonShine, PHP)\nDESCRIPTION: Uses the auto() method to set the modal's width based on its content automatically. Accepts an optional closure or bool, returns a modified Modal instance. MoonShine dependency only.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nauto(Closure|bool|null $condition = null)\n```\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Title', 'Content...', ActionButton::make('Show Modal', '#'))\n            ->auto(),\n```\n\n----------------------------------------\n\nTITLE: MoonShine Layout - TopBar Component Override\nDESCRIPTION: Demonstrates how to override the TopBar component within the MoonShine admin panel layout using the `getTopBarComponent()` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/layout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function getTopBarComponent(): Topbar\n{\n    Topbar::make([\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up BelongsTo Field in Native Mode\nDESCRIPTION: Demonstrates how to use the native() method to disable the Choices.js library and display the BelongsTo field as a native HTML select element.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/belongs-to.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nBelongsTo::make('Type')->native()\n```\n\n----------------------------------------\n\nTITLE: Specifying Safari Pinned Tab Color with Blade Component Attribute\nDESCRIPTION: Example showing how to set the Safari pinned tab color directly in the Blade component via the bodyColor attribute. Accepts a string containing a CSS color value such as a hex code. Output is the corresponding meta tags to define pinned tab color for Safari. Used in conjunction with favicon asset declarations.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/favicon.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.favicon bodyColor='#7843e9' />\n```\n\n----------------------------------------\n\nTITLE: Creating 'Div' Component Instance in PHP\nDESCRIPTION: This PHP code demonstrates how to instantiate a 'Div' component using the static make method, passing an empty array of nested components. It shows the programming pattern for creating the component in the backend, which can later be rendered with specific attributes and children.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/div.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmake(iterable $components)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Row to tfoot Section of MoonShine Table using PHP\nDESCRIPTION: This example defines a tfoot method that inserts a custom row into the table footer. It creates TableCells with multiple cells such as 'Balance:' and '$1000', wraps them in a TableRow, and returns them along with the default footer row. This enables custom footers with summary or calculated data.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/table.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\\nuse MoonShine\\Contracts\\UI\\Collection\\TableRowsContract;\\nuse MoonShine\\Contracts\\UI\\TableRowContract;\\nuse MoonShine\\UI\\Collections\\TableCells;\\nuse MoonShine\\UI\\Collections\\TableRows;\\nuse MoonShine\\UI\\Components\\Table\\TableBuilder;\\nuse MoonShine\\UI\\Components\\Table\\TableRow;\\n\\nprotected function tfoot(): null|TableRowsContract|Closure\\n{\\n    return static function(?TableRowContract $default, TableBuilder $table) {\\n        $cells = TableCells::make();\\n\\n        $cells->pushCell('Balance:');\\n        $cells->pushCell('$1000');\\n\\n        return TableRows::make([TableRow::make($cells), $default]);\\n    };\\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Backup Files\nDESCRIPTION: This shell command removes the backup files created during the upgrade process.  After successful migration and configuration adjustments, these files are no longer needed and can be safely deleted to avoid clutter and maintain a clean project structure.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrm config/moonshine_old.php\nrm app/Providers/MoonShineServiceProvider_old.php\nrm app/MoonShine/Pages/Dashboard_old.php\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Wide Mode with the wide Method (MoonShine, PHP)\nDESCRIPTION: Applies the wide() method to make the modal cover the maximum available width. Input is an optional condition closure or bool, defaults to wide display on true or null. Works with MoonShine UI modals.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nwide(Closure|bool|null $condition = null)\n```\n\nLANGUAGE: php\nCODE:\n```\nModal::make('Title', 'Content...', ActionButton::make('Show Modal', '#'))\n            ->wide(),\n```\n\n----------------------------------------\n\nTITLE: Backup Existing Configuration Files\nDESCRIPTION: This shell script provides commands to create backups of key configuration and provider files before updating MoonShine to version 3.0.  Backups are crucial for preserving existing configurations and settings, facilitating a smooth transition and easier rollback if necessary. The script uses the `mv` command to rename the configuration and provider files, effectively creating backups.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/upgrade-guide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmv config/moonshine.php config/moonshine_old.php\nmv app/Providers/MoonShineServiceProvider.php app/Providers/MoonShineServiceProvider_old.php\nmv app/MoonShine/Pages/Dashboard.php app/MoonShine/Pages/Dashboard_old.php\n```\n\n----------------------------------------\n\nTITLE: Disabling Loading Indicator in Asynchronous ActionButton (PHP)\nDESCRIPTION: Demonstrates how to create an ActionButton that performs an asynchronous action without showing a loading indicator by chaining the withoutLoading() method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/action-button.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nActionButton::make('Button Label', '/endpoint')\n    ->async()\n    ->withoutLoading()\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Logo in moonshine.php\nDESCRIPTION: This code sets logo and logo_small settings in the `moonshine.php` file.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'logo' => '/assets/logo.png',\n'logo_small' => '/assets/logo-small.png',\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Content with x-html\nDESCRIPTION: Demonstrates how to output dynamic values using the xDisplay() method, with an option to render as HTML.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/attributes.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nxDisplay(\n    string $value,\n    bool $html = true\n)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nDiv::make([\n    Select::make('Type')\n        ->native()\n        ->options([\n            1 => 'Paid',\n            2 => 'Free',\n        ])\n        ->xModel(),\n\n    Number::make('Cost', 'price')\n        ->xModel()\n        ->xIf('type', '1'),\n\n    Number::make('Rate', 'rate')\n        ->xModel()\n        ->xIf('type', '1')\n        ->setValue(90),\n\n    Div::make()\n        ->xShow('type', '1')\n        ->xDisplay('\"Result:\" + (price * rate)'),\n])->xData([\n    'price' => 0,\n    'rate' => 90,\n    'type' => '2',\n]),\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Attributes for File Elements in PHP\nDESCRIPTION: This code snippet shows how to add custom attributes to the file elements using `itemAttributes()`.  It takes a Closure as an argument to define the attributes, based on the filename and index.  It is dependent on the MoonShine framework. The output will modify the display styles of the file elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File', 'file')\n    ->itemAttributes(fn(string $filename, int $index = 0) => [\n        'style' => 'width: 250px; height: 250px;'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Mode for RelationRepeater\nDESCRIPTION: This snippet demonstrates how to change the display of the RelationRepeater field to vertical mode.  Calling the `vertical()` method modifies the table layout to stack fields vertically instead of horizontally, often improving readability for complex field sets. No parameters are passed in this case.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/relation-repeater.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRelationRepeater::make('Comments', 'comments')\n    ->vertical()\n```\n\n----------------------------------------\n\nTITLE: Basic Box Component Constructor Signature in PHP\nDESCRIPTION: Shows the method signature for creating a Box component. The component accepts either a label/heading or components in the first parameter, and components in the second parameter when a heading is provided.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/box.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(\n    Closure|string|iterable $labelOrComponents = [],\n    iterable $components = []\n)\n```\n\n----------------------------------------\n\nTITLE: ActionButton inModal Method Signature in PHP\nDESCRIPTION: Displays the method signature for `inModal()`. This method configures the `ActionButton` to open a modal dialog on click. It accepts optional parameters for the modal's title, content, unique name, a builder Closure for advanced `Modal` component customization, and an iterable of components within the modal.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/action-button.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:2]\nuse MoonShine\\Contracts\\UI\\ActionButtonContract;\nuse MoonShine\\UI\\Components\\Modal;\n\n/**\n * @param  ?Closure(Modal $modal, ActionButtonContract $ctx): Modal  $builder\n */\ninModal(\n    Closure|string|null $title = null,\n    Closure|string|null $content = null,\n    Closure|string|null $name = null,\n    ?Closure $builder = null,\n    iterable $components = [],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MoonShine Box with Heading - PHP Class\nDESCRIPTION: Shows how to add a heading to the Box component when using the PHP class. The heading is passed as the first parameter to the `make` method, and the content components as the second.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nBox::make('Title box', ['Hello!']);\n```\n\n----------------------------------------\n\nTITLE: Using Overlay Mode for Cards with Thumbnails in PHP\nDESCRIPTION: Shows how to enable overlay mode which places title and field names on top of the card's thumbnail image.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make()\n    ->items(Article::paginate())\n    ->fields([ID::make(), Text::make('Text')])\n    ->cast(new ModelCaster(Article::class))\n    ->thumbnail('thumbnail')\n    ->header(static fn() => Badge::make('new', 'success'))\n    ->title('title')\n    ->subtitle(static fn() => 'Subtitle')\n    ->overlay()\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Setting Domain in MoonShineServiceProvider\nDESCRIPTION: This shows the configuration for setting domain using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$config->domain('admin.example.com');\n```\n\n----------------------------------------\n\nTITLE: Initializing Notifications Component (PHP)\nDESCRIPTION: This snippet shows the PHP code used to create an instance of the Moonshine `Notifications` component. This approach is typically used when defining layout elements programmatically, often within Moonshine configuration files or service providers.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/notifications.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nNotifications::make()\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes for File Removal Button in PHP\nDESCRIPTION: This PHP snippet shows how to add attributes to the remove button using the `removable()` method. It adds an attribute for a click event.  It's a part of the removable functionality. MoonShine framework is required.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/file.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nFile::make('File')\n    ->removable(\n        attributes: ['@click.prevent' => '$event.target.closest(`.x-removeable`).remove()']\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Notifications Component (Blade)\nDESCRIPTION: This snippet provides the Blade component tag required to render the Moonshine `Notifications` component directly within a Blade template file. Placing this tag in your layout file includes the interactive notifications dropdown.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/notifications.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.notifications/>\n```\n\n----------------------------------------\n\nTITLE: Adding Notifications with Markdown Blockquotes - Plain Text\nDESCRIPTION: Demonstrates the Markdown syntax for embedding different types of notifications (notes, warnings, tips) using blockquote formatting. No dependencies. Inputs are blockquoted messages with notification tags, producing visually distinct message boxes in documentation.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_14\n\nLANGUAGE: Plain Text\nCODE:\n```\n> [!NOTE]\n> Простое уведомление.\n\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n> [!WARNING]\n> Предупреждение.\n\n```\n\nLANGUAGE: Plain Text\nCODE:\n```\n> [!TIP]\n> Советы.\n\n```\n\n----------------------------------------\n\nTITLE: Publishing MoonShine Assets and System Files - Shell\nDESCRIPTION: Publishes MoonShine admin panel assets, asset templates, system resources, forms, or pages. The base command invokes an interactive dialog; appending a type argument (like 'assets') triggers direct publishing. Dependencies include existing MoonShine installation and sufficient write permissions under public and resource directories.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/commands.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:publish\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:publish assets\n```\n\n----------------------------------------\n\nTITLE: Defining the htmlData() Method Signature in MoonShineJsonResponse (PHP)\nDESCRIPTION: Provides the method signature for `htmlData()` in `MoonShineJsonResponse`. This method allows inserting specific HTML content (string or array) into an explicitly defined selector (string), with control over the insertion mode via the `HtmlMode` enum (defaulting to INNER_HTML). This is useful for updating multiple distinct elements.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/advanced/moonshine-json-response.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nhtmlData(string|array $value, string $selector, HtmlMode $mode = HtmlMode::INNER_HTML)\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Instance with PHP Class\nDESCRIPTION: Demonstrates creating a popover instance programmatically using the `Popover::make()` static method in PHP. The `content()` method is chained to set the HTML content displayed within the popover.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/popover.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPopover::make('Title', 'Trigger')\n    ->content('HTML content')\n```\n\n----------------------------------------\n\nTITLE: Simulating CRUD Page Routes in MoonShine (PHP)\nDESCRIPTION: This PHP code demonstrates how to render a MoonShine CRUD page (`FormArticlePage`) from a custom controller (`HomeController`) on an arbitrary route. It uses the `simulateRoute()` method on the page instance, passing both the page and the associated resource (`ArticleResource`) to emulate the necessary context for the page to function correctly outside its standard routing.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/model-resource/pages.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass HomeController extends Controller\n{\n    public function __invoke(FormArticlePage $page, ArticleResource $resource)\n    {\n        return $page->simulateRoute($page, $resource);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Components with PHP\nDESCRIPTION: The `components()` method returns an iterable object containing the form created by `form()`. This is responsible for integrating the form component into the application's view or layout.  This will make the form visible.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/dashboard-settings.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function components(): iterable\n{\n  yield $this->form();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wide Modal in Blade (MoonShine, Blade)\nDESCRIPTION: Enables wide-width mode for a modal by providing the 'wide' parameter to the moonshine::modal Blade component. The slot defines a trigger to open the modal. Depends on MoonShine and Blade.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/modal.md#_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::modal wide title=\"Title\">\n    <div>\n        Content...\n    </div>\n    <x-slot name=\"outerHtml\">\n        <x-moonshine::link-button @click.prevent=\"toggleModal\">\n            Open wide modal\n        </x-moonshine::link-button>\n    </x-slot>\n</x-moonshine::modal>\n```\n\n----------------------------------------\n\nTITLE: Setting Card Column Span in Grid Using columnSpan() in PHP\nDESCRIPTION: Explains configuring card width in the grid layout by specifying desktop and mobile column spans through 'columnSpan()'. The method takes two integers defining number of columns in a 12-column grid for normal and adaptive (mobile) screen resolutions. This allows responsive card layouts with variable card sizes across devices.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/cards-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ncolumnSpan(\n    int $columnSpan,\n    int $adaptiveColumnSpan = 12\n)\n\nCardsBuilder::make(\n    fields: [Text::make('Text')],\n    items: Article::paginate()\n)\n    ->columnSpan(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring MoonShine: Disabling Built-in Authentication in MoonShineServiceProvider\nDESCRIPTION: The code shows disabling authentication using the `MoonShineServiceProvider`.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/configuration.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$config->authDisable();\n```\n\n----------------------------------------\n\nTITLE: Set JWT Secret Key in .env File\nDESCRIPTION: This snippet shows how to set the JWT secret key in the .env file. The secret key is used to sign and verify JWT tokens. The value should be base64 encoded.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/frontend/api.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nJWT_SECRET=YOUR_BASE64_SECRET_HERE\n```\n\n----------------------------------------\n\nTITLE: Blade Component Implementation of Popover\nDESCRIPTION: Example of implementing a Popover using Blade components. It shows how to set the title, placement, trigger slot, and content with interactive buttons.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/popover.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::popover title=\"Popover title\" placement=\"right\">\n    <x-slot:trigger>\n        <button class=\"btn\">Popover</button>\n    </x-slot:trigger>\n    <p>This is a very beautiful popover, show some love.</p>\n    <div class='flex justify-between mt-3'>\n        <button type='button' class='btn btn-sm'>Skip</button>\n        <button type='button' class='btn btn-sm btn-primary'>Read More</button>\n    </div>\n</x-moonshine::popover>\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Style to MoonShine Box - Blade Template\nDESCRIPTION: Shows how to apply a dark style to the Box component in a Blade template by simply adding the `dark` attribute to the component tag.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box dark>\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Favicons in Blade with MoonShine\nDESCRIPTION: Provides a Blade template example to specify custom favicon assets via a bound array parameter named 'assets'. This array contains URL paths for various favicon types analogous to the PHP example. Requires Laravel's asset helper for URL resolution. The blade component will render corresponding favicon and manifest tags in the page head.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/favicon.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.favicon :assets=\"[\n    'apple-touch' => asset('favicons/apple-touch-icon.png'),\n    '32' => asset('favicons/favicon-32x32.png'),\n    '16' => asset('favicons/favicon-16x16.png'),\n    'safari-pinned-tab' => asset('favicons/safari-pinned-tab.svg'),\n    'web-manifest' => asset('favicons/site.webmanifest'),\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic for Menu Item Visibility in PHP\nDESCRIPTION: This snippet shows how to conditionally add menu items based on custom application logic without using policies. It adds an 'Admins' menu item only if the current user is identified as a super user.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/menu-authorization.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function menu(): array\n{\n    $menu = [\n        MenuItem::make('Articles', ArticleResource::class),\n    ];\n\n    if (request()->user()->isSuperUser()) {\n        $menu[] = MenuItem::make(\n            'Admins',\n            MoonShineUserResource::class\n        );\n    }\n\n    return $menu;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine OffCanvas to Wide Width PHP\nDESCRIPTION: Demonstrates applying the `wide()` method to an OffCanvas component to render it with a larger width than the default.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nOffCanvas::make('Title', 'Content...', 'Show Panel')\n    ->wide()\n```\n\n----------------------------------------\n\nTITLE: Using Flash Component in PHP\nDESCRIPTION: This code snippet shows how to use the Flash component in PHP. It doesn't take any parameters and is likely used to render or display the existing flash messages stored in the session. It assumes that the flash notifications have already been created and added to the session.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/flash.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Flash;\n\nFlash::make()\n```\n\n----------------------------------------\n\nTITLE: Setting Card Thumbnail\nDESCRIPTION: Demonstrates how to add a carousel of images as thumbnails to the Card component using the `thumbnail()` method.  An array of image paths is passed to the `thumbnail` method.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/card.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nCard::make(\n    title: fake()->sentence(3),\n)\n    ->thumbnail([\n        '/images/image_2.jpg',\n        '/images/image_1.jpg',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to MoonShine Box - Blade Template\nDESCRIPTION: Explains how to display an icon within the Box component using the Blade template. This involves including the MoonShine icon component inside the box component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/box.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.box title=\"Title box\">\n    <x-moonshine::icon name=\"users\"></x-moonshine::icon>\n    {{ 'Hello!' }}\n</x-moonshine::layout.box>\n```\n\n----------------------------------------\n\nTITLE: Generating Reset Password Page with MoonShine - Shell\nDESCRIPTION: Runs the artisan command to scaffold a MoonShine page named ResetPasswordPage for handling password resets. Requires Laravel and MoonShine to be initialized. This action creates a PHP class file ready for custom development, receiving the page name as argument and outputting the PHP page definition.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:page ResetPasswordPage\n```\n\n----------------------------------------\n\nTITLE: Installing MoonShine via Composer\nDESCRIPTION: Command to install the MoonShine package using Composer package manager.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/moonshine\n```\n\n----------------------------------------\n\nTITLE: Embedding MoonShine Header Component in Blade Template\nDESCRIPTION: Illustrates the usage of the Header component within a Blade template by using the <x-moonshine::layout.header> custom Blade directive. Any content placed inside this Blade component slot will be rendered within the header block. This method allows integrating MoonShine header layouts directly into Blade views and supports arbitrary nested HTML or Blade markup as children. No additional PHP dependencies are required within the Blade view. The expected input is the inner content specified inside the component tags. The output is rendered HTML composing the header area with the enclosed content.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/header.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.header>\n    Any content\n</x-moonshine::layout.header>\n```\n\n----------------------------------------\n\nTITLE: Creating a Footer Component in PHP\nDESCRIPTION: Basic syntax for creating a Footer component using the make() method. The make method accepts an iterable array of components to be displayed in the footer.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/footer.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmake(iterable $components = [])\n```\n\n----------------------------------------\n\nTITLE: Initializing Logo Component - Blade\nDESCRIPTION: This snippet shows how to create a Logo component using Blade templates. It passes the URL, logo image, and small logo image as attributes to the `x-moonshine::layout.logo` component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/logo.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::layout.logo\n    :href=\"'/admin'\"\n    :logo=\"'/vendor/moonshine/logo.svg'\"\n    :logoSmall=\"'/vendor/moonshine/logo-small.svg'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Input Element in Blade Template - Blade\nDESCRIPTION: Renders a hidden input HTML element within a Blade template using MoonShine's form input component. The 'type' attribute is set to 'hidden' and the 'name' to 'hidden_id'. This snippet depends on the MoonShine Blade components for form inputs and is used to embed hidden data fields in forms. It produces a hidden input element in the form markup.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/hidden.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::form.input\\n    type=\"hidden\"\\n    name=\"hidden_id\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Card Subtitle with Static Closure in PHP\nDESCRIPTION: Shows how to add a subtitle to cards using a static closure function that returns a constant value.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/cards-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCardsBuilder::make(\n    items: Article::paginate()\n)\n    ->fields([Text::make('Text')])\n    ->title('title')\n    ->subtitle(static fn() => 'Subtitle')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Setting with PHP\nDESCRIPTION: This snippet defines a private function `getSetting()` to retrieve a `Setting` model instance from the database using Laravel's Eloquent ORM. It queries the `Setting` model and attempts to find an item with an ID of 1.  The retrieved `Setting` object is then returned, providing access to the current settings.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/recipes/dashboard-settings.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprivate function getSetting(): Setting\n{\n    return Setting::query()->find(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Link Component using MoonShine in PHP\nDESCRIPTION: This snippet shows how to add an icon to a link created with the MoonShine Link component in PHP. The icon() method takes the icon name as a string (e.g., \"arrow-top-right-on-square\") which typically references an SVG or icon font glyph included in the UI library. This enhances the link visually by embedding a related icon.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/link.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nLink::make('https://moonshine-laravel.com', 'Moonshine')\n    ->icon('arrow-top-right-on-square')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Divider with PHP\nDESCRIPTION: This snippet demonstrates how to create a basic divider using the `Divider::make()` method in PHP. The `Divider` component is part of the Moonshine UI library and is used for visual separation of content.\n\nDependencies: `use MoonShine\\UI\\Components\\Layout\\Divider;` is required to use the Divider component.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/divider.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\UI\\Components\\Layout\\Divider;\n\nDivider::make()\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Utilities Using ColorMutator PHP\nDESCRIPTION: Demonstrates static utility methods in ColorMutator to convert color values between RGB strings and HEX notation. The toHEX method takes a comma-separated RGB string (e.g., '120, 67, 233') and returns a HEX color string like '#7843e9'. Conversely, toRGB accepts a HEX string and returns an RGB string. This facilitates color format interoperability within color management workflows. Requires the ColorMutator class from MoonShine\\ColorManager namespace.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/appearance/colors.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse MoonShine\\ColorManager\\ColorMutator;\n\n// Convert to HEX\nColorMutator::toHEX('120, 67, 233'); // '#7843e9'\n\n// Convert to RGB\nColorMutator::toRGB('#7843e9'); // '120,67,233'\n```\n\n----------------------------------------\n\nTITLE: Basic Grouping with StackFields in PHP\nDESCRIPTION: Demonstrates the fundamental use of `StackFields::make()` to group multiple fields (e.g., `Text`, `BelongsTo`) for display purposes. The `fields()` method accepts an array of field instances. Note: StackFields is deprecated from version 3.9 and will be removed in 4.0; use Fieldset instead.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/fields/stack-fields.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// torchlight! {\"summaryCollapsedIndicator\": \"namespaces\"}\n// [tl! collapse:3]\nuse MoonShine\\Laravel\\Fields\\BelongsTo;\nuse MoonShine\\UI\\Fields\\StackFields;\nuse MoonShine\\UI\\Fields\\Text;\n\nStackFields::make('Title')->fields([\n    Text::make('Title'),\n    BelongsTo::make('Author', resource: 'name'),\n])\n```\n\n----------------------------------------\n\nTITLE: Applying Color Variants to Spinner in Blade Templates\nDESCRIPTION: Provides code examples for setting the color property of spinner components in Blade templates using MoonShine UI. Available colors include 'primary', 'secondary', 'success', 'warning', 'error', and 'info'. This allows visual differentiation and theming of spinner components, depending on context. Requires Blade templating with MoonShine components configured.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/components/progress-bar.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<x-moonshine::spinner color=\"primary\" />\n<x-moonshine::spinner color=\"secondary\" />\n<x-moonshine::spinner color=\"success\" />\n<x-moonshine::spinner color=\"warning\" />\n<x-moonshine::spinner color=\"error\" />\n<x-moonshine::spinner color=\"info\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Component (Blade Tag)\nDESCRIPTION: Demonstrates how to render an `Icon` component using the MoonShine Blade component tag. It shows the basic syntax `<x-moonshine::icon>` with the `icon` attribute specifying the icon name.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/icon.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::icon icon=\"users\" />\n```\n\n----------------------------------------\n\nTITLE: Using icon() with 's.academic-cap' in Solid Style in PHP\nDESCRIPTION: This snippet calls the `icon()` function with the 's.academic-cap' icon, indicating the Solid style from Heroicons. The output is the HTML representing the 'academic-cap' icon in the solid style.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/appearance/icons.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n->icon('s.academic-cap')\n```\n\n----------------------------------------\n\nTITLE: Defining MoonShine OffCanvas left method PHP\nDESCRIPTION: Shows the method signature for the `left()` method, used to position the OffCanvas component on the left side of the screen instead of the default right side.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/off-canvas.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nleft(Closure|bool|null $condition = null)\n```\n\n----------------------------------------\n\nTITLE: Setting MoonShine Spinner Color (Blade)\nDESCRIPTION: Illustrates how to customize the color of the MoonShine spinner component in a Blade template using the `color` attribute. Examples show applying various predefined thematic colors.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/spinner.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-moonshine::spinner color=\"primary\" />\n<x-moonshine::spinner color=\"secondary\" />\n<x-moonshine::spinner color=\"success\" />\n<x-moonshine::spinner color=\"warning\" />\n<x-moonshine::spinner color=\"error\" />\n<x-moonshine::spinner color=\"info\" />\n```\n\n----------------------------------------\n\nTITLE: Applying sprintf to Markdown Includes - PHP\nDESCRIPTION: Displays the PHP function call underlying shortcodes; uses sprintf to inject parameters into a template. Inputs are string templates and arguments; outputs are interpolated markdown. Requires PHP.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nsprintf('markdown', 'test', 3);\n\n```\n\n----------------------------------------\n\nTITLE: Generating AppLayout with MoonShine Command (Shell)\nDESCRIPTION: Shell command using PHP Artisan to generate a compact MoonShine layout class named `AppLayout`. This layout is intended for authenticated user areas like the profile page.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/recipes/profile.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan moonshine:layout AppLayout --compact\n```\n\n----------------------------------------\n\nTITLE: Nested Json Example Result\nDESCRIPTION: This JSON showcases the output of the nested Json field example in the previous code snippet.  It represents a structure where an array of product objects contains a nested \"prices\" object.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/ru/fields/json.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"product 1\",\n        \"prices\": {\n            \"wholesale_price\": 1000,\n            \"retail_price\": 1200\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing ApexCharts for Line/Donut Charts\nDESCRIPTION: Command to install the MoonShine ApexCharts package for advanced chart visualization including line and donut charts.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/en/components/metrics.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require moonshine/apexcharts\n```\n\n----------------------------------------\n\nTITLE: Defining Subsection Headings - HTML\nDESCRIPTION: Demonstrates formatting subsections with '##' in Markdown for secondary headings. No dependencies are required. Inputs use double hashes followed by the subsection name, which is rendered as a secondary heading on the page. Intended for logical division within a documentation section.\nSOURCE: https://github.com/moonshine-software/doc/blob/3.x/README.ru.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n## Subtitle\n\n```"
  }
]